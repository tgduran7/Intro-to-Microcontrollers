

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu May 12 12:23:28 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	text107,global,reloc=2,class=CODE,delta=1
   124                           	psect	text108,global,reloc=2,class=CODE,delta=1
   125                           	psect	text109,global,reloc=2,class=CODE,delta=1
   126                           	psect	text110,global,reloc=2,class=CODE,delta=1
   127                           	psect	text111,global,reloc=2,class=CODE,delta=1
   128                           	psect	text112,global,reloc=2,class=CODE,delta=1
   129                           	psect	text113,global,reloc=2,class=CODE,delta=1
   130                           	psect	text114,global,reloc=2,class=CODE,delta=1
   131                           	psect	text115,global,reloc=2,class=CODE,delta=1
   132                           	psect	text116,global,reloc=2,class=CODE,delta=1
   133                           	psect	text117,global,reloc=2,class=CODE,delta=1
   134                           	psect	text118,global,reloc=2,class=CODE,delta=1
   135                           	psect	text119,global,reloc=2,class=CODE,delta=1
   136                           	psect	text120,global,reloc=2,class=CODE,delta=1
   137                           	psect	text121,global,reloc=2,class=CODE,delta=1
   138                           	psect	text122,global,reloc=2,class=CODE,delta=1
   139                           	psect	text123,global,reloc=2,class=CODE,delta=1
   140                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   141                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   142                           	psect	text125,global,reloc=2,class=CODE,delta=1
   143                           	psect	text126,global,reloc=2,class=CODE,delta=1
   144                           	psect	text127,global,reloc=2,class=CODE,delta=1
   145                           	psect	text128,global,reloc=2,class=CODE,delta=1
   146                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   147                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   148  0000                     
   149                           	psect	idataBANK0
   150  004DD6                     __pidataBANK0:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _heater_set_temp
   154  004DD6  4B                 	db	75
   155                           
   156                           ;initializer for _tempSecond
   157  004DD7  FF                 	db	255
   158                           
   159                           ;initializer for _wrap
   160  004DD8  01                 	db	1
   161                           
   162                           ;initializer for _Heater_Set_Temp_Txt
   163  004DD9  30                 	db	48
   164  004DDA  37                 	db	55
   165  004DDB  35                 	db	53
   166  004DDC  46                 	db	70
   167  004DDD  00                 	db	0
   168                           
   169                           ;initializer for _RPM_Txt
   170  004DDE  30                 	db	48
   171  004DDF  30                 	db	48
   172  004DE0  30                 	db	48
   173  004DE1  30                 	db	48
   174  004DE2  00                 	db	0
   175                           
   176                           ;initializer for _setup_heater_set_text
   177  004DE3  30                 	db	48
   178  004DE4  37                 	db	55
   179  004DE5  35                 	db	53
   180  004DE6  46                 	db	70
   181  004DE7  00                 	db	0
   182                           
   183                           ;initializer for _Alarm_SW_Txt
   184  004DE8  4F                 	db	79
   185  004DE9  46                 	db	70
   186  004DEA  46                 	db	70
   187  004DEB  00                 	db	0
   188                           
   189                           ;initializer for _DC_Txt
   190  004DEC  30                 	db	48
   191  004DED  30                 	db	48
   192  004DEE  30                 	db	48
   193  004DEF  00                 	db	0
   194                           
   195                           ;initializer for _Heater_SW_Txt
   196  004DF0  4F                 	db	79
   197  004DF1  46                 	db	70
   198  004DF2  46                 	db	70
   199  004DF3  00                 	db	0
   200                           
   201                           ;initializer for _tempC
   202  004DF4  2B                 	db	43
   203  004DF5  32                 	db	50
   204  004DF6  35                 	db	53
   205  004DF7  00                 	db	0
   206                           
   207                           ;initializer for _tempF
   208  004DF8  2B                 	db	43
   209  004DF9  37                 	db	55
   210  004DFA  37                 	db	55
   211  004DFB  00                 	db	0
   212                           
   213                           ;initializer for _RTC_ALARM_Txt
   214  004DFC  30                 	db	48
   215  004DFD  00                 	db	0
   216                           
   217                           	psect	idataBANK1
   218  0044B8                     __pidataBANK1:
   219                           	opt stack 0
   220                           
   221                           ;initializer for _buffer
   222  0044B8  20                 	db	32
   223  0044B9  45                 	db	69
   224  0044BA  43                 	db	67
   225  0044BB  45                 	db	69
   226  0044BC  33                 	db	51
   227  0044BD  33                 	db	51
   228  0044BE  30                 	db	48
   229  0044BF  31                 	db	49
   230  0044C0  4C                 	db	76
   231  0044C1  20                 	db	32
   232  0044C2  53                 	db	83
   233  0044C3  70                 	db	112
   234  0044C4  27                 	db	39
   235  0044C5  32                 	db	50
   236  0044C6  32                 	db	50
   237  0044C7  20                 	db	32
   238  0044C8  53                 	db	83
   239  0044C9  31                 	db	49
   240  0044CA  20                 	db	32
   241  0044CB  00                 	db	0
   242  0044CC  00                 	db	0
   243  0044CD  00                 	db	0
   244  0044CE  00                 	db	0
   245  0044CF  00                 	db	0
   246  0044D0  00                 	db	0
   247  0044D1  00                 	db	0
   248  0044D2  00                 	db	0
   249  0044D3  00                 	db	0
   250  0044D4  00                 	db	0
   251  0044D5  00                 	db	0
   252  0044D6  00                 	db	0
   253                           
   254                           ;initializer for _array1
   255  0044D7  A2                 	db	162
   256  0044D8  62                 	db	98
   257  0044D9  E2                 	db	226
   258  0044DA  22                 	db	34
   259  0044DB  02                 	db	2
   260  0044DC  C2                 	db	194
   261  0044DD  E0                 	db	224
   262  0044DE  A8                 	db	168
   263  0044DF  90                 	db	144
   264  0044E0  68                 	db	104
   265  0044E1  98                 	db	152
   266  0044E2  B0                 	db	176
   267  0044E3  30                 	db	48
   268  0044E4  18                 	db	24
   269  0044E5  7A                 	db	122
   270  0044E6  10                 	db	16
   271  0044E7  38                 	db	56
   272  0044E8  5A                 	db	90
   273  0044E9  42                 	db	66
   274  0044EA  4A                 	db	74
   275  0044EB  52                 	db	82
   276                           
   277                           ;initializer for _D2
   278  0044EC  01                 	db	1
   279  0044ED  03                 	db	3
   280  0044EE  02                 	db	2
   281  0044EF  04                 	db	4
   282  0044F0  05                 	db	5
   283  0044F1  06                 	db	6
   284  0044F2  07                 	db	7
   285                           
   286                           ;initializer for _alarm_time
   287  0044F3  30                 	db	48
   288  0044F4  30                 	db	48
   289  0044F5  3A                 	db	58
   290  0044F6  30                 	db	48
   291  0044F7  30                 	db	48
   292  0044F8  3A                 	db	58
   293  0044F9  30                 	db	48
   294  0044FA  30                 	db	48
   295  0044FB  00                 	db	0
   296                           
   297                           ;initializer for _date
   298  0044FC  30                 	db	48
   299  0044FD  30                 	db	48
   300  0044FE  2F                 	db	47
   301  0044FF  30                 	db	48
   302  004500  30                 	db	48
   303  004501  2F                 	db	47
   304  004502  30                 	db	48
   305  004503  30                 	db	48
   306  004504  00                 	db	0
   307                           
   308                           ;initializer for _setup_alarm_time
   309  004505  30                 	db	48
   310  004506  30                 	db	48
   311  004507  3A                 	db	58
   312  004508  30                 	db	48
   313  004509  30                 	db	48
   314  00450A  3A                 	db	58
   315  00450B  30                 	db	48
   316  00450C  30                 	db	48
   317  00450D  00                 	db	0
   318                           
   319                           ;initializer for _setup_date
   320  00450E  30                 	db	48
   321  00450F  31                 	db	49
   322  004510  2F                 	db	47
   323  004511  30                 	db	48
   324  004512  31                 	db	49
   325  004513  2F                 	db	47
   326  004514  30                 	db	48
   327  004515  30                 	db	48
   328  004516  00                 	db	0
   329                           
   330                           ;initializer for _setup_time
   331  004517  30                 	db	48
   332  004518  30                 	db	48
   333  004519  3A                 	db	58
   334  00451A  30                 	db	48
   335  00451B  30                 	db	48
   336  00451C  3A                 	db	58
   337  00451D  30                 	db	48
   338  00451E  30                 	db	48
   339  00451F  00                 	db	0
   340                           
   341                           ;initializer for _time
   342  004520  30                 	db	48
   343  004521  30                 	db	48
   344  004522  3A                 	db	58
   345  004523  30                 	db	48
   346  004524  30                 	db	48
   347  004525  3A                 	db	58
   348  004526  30                 	db	48
   349  004527  30                 	db	48
   350  004528  00                 	db	0
   351                           
   352                           ;initializer for _Volt_Txt
   353  004529  30                 	db	48
   354  00452A  2E                 	db	46
   355  00452B  30                 	db	48
   356  00452C  30                 	db	48
   357  00452D  56                 	db	86
   358  00452E  00                 	db	0
   359                           
   360                           	psect	mediumconst
   361  00FC0A                     __pmediumconst:
   362                           	opt stack 0
   363  00FC0A  00                 	db	0
   364  00FC0B                     _font:
   365                           	opt stack 0
   366  00FC0B  00                 	db	0
   367  00FC0C  00                 	db	0
   368  00FC0D  00                 	db	0
   369  00FC0E  00                 	db	0
   370  00FC0F  00                 	db	0
   371  00FC10  00                 	db	0
   372  00FC11  00                 	db	0
   373  00FC12  5F                 	db	95
   374  00FC13  00                 	db	0
   375  00FC14  00                 	db	0
   376  00FC15  00                 	db	0
   377  00FC16  07                 	db	7
   378  00FC17  00                 	db	0
   379  00FC18  07                 	db	7
   380  00FC19  00                 	db	0
   381  00FC1A  14                 	db	20
   382  00FC1B  7F                 	db	127
   383  00FC1C  14                 	db	20
   384  00FC1D  7F                 	db	127
   385  00FC1E  14                 	db	20
   386  00FC1F  24                 	db	36
   387  00FC20  2A                 	db	42
   388  00FC21  7F                 	db	127
   389  00FC22  2A                 	db	42
   390  00FC23  12                 	db	18
   391  00FC24  23                 	db	35
   392  00FC25  13                 	db	19
   393  00FC26  08                 	db	8
   394  00FC27  64                 	db	100
   395  00FC28  62                 	db	98
   396  00FC29  36                 	db	54
   397  00FC2A  49                 	db	73
   398  00FC2B  56                 	db	86
   399  00FC2C  20                 	db	32
   400  00FC2D  50                 	db	80
   401  00FC2E  00                 	db	0
   402  00FC2F  08                 	db	8
   403  00FC30  07                 	db	7
   404  00FC31  03                 	db	3
   405  00FC32  00                 	db	0
   406  00FC33  00                 	db	0
   407  00FC34  1C                 	db	28
   408  00FC35  22                 	db	34
   409  00FC36  41                 	db	65
   410  00FC37  00                 	db	0
   411  00FC38  00                 	db	0
   412  00FC39  41                 	db	65
   413  00FC3A  22                 	db	34
   414  00FC3B  1C                 	db	28
   415  00FC3C  00                 	db	0
   416  00FC3D  2A                 	db	42
   417  00FC3E  1C                 	db	28
   418  00FC3F  7F                 	db	127
   419  00FC40  1C                 	db	28
   420  00FC41  2A                 	db	42
   421  00FC42  08                 	db	8
   422  00FC43  08                 	db	8
   423  00FC44  3E                 	db	62
   424  00FC45  08                 	db	8
   425  00FC46  08                 	db	8
   426  00FC47  00                 	db	0
   427  00FC48  80                 	db	128
   428  00FC49  70                 	db	112
   429  00FC4A  30                 	db	48
   430  00FC4B  00                 	db	0
   431  00FC4C  08                 	db	8
   432  00FC4D  08                 	db	8
   433  00FC4E  08                 	db	8
   434  00FC4F  08                 	db	8
   435  00FC50  08                 	db	8
   436  00FC51  00                 	db	0
   437  00FC52  00                 	db	0
   438  00FC53  60                 	db	96
   439  00FC54  60                 	db	96
   440  00FC55  00                 	db	0
   441  00FC56  20                 	db	32
   442  00FC57  10                 	db	16
   443  00FC58  08                 	db	8
   444  00FC59  04                 	db	4
   445  00FC5A  02                 	db	2
   446  00FC5B  3E                 	db	62
   447  00FC5C  51                 	db	81
   448  00FC5D  49                 	db	73
   449  00FC5E  45                 	db	69
   450  00FC5F  3E                 	db	62
   451  00FC60  00                 	db	0
   452  00FC61  42                 	db	66
   453  00FC62  7F                 	db	127
   454  00FC63  40                 	db	64
   455  00FC64  00                 	db	0
   456  00FC65  72                 	db	114
   457  00FC66  49                 	db	73
   458  00FC67  49                 	db	73
   459  00FC68  49                 	db	73
   460  00FC69  46                 	db	70
   461  00FC6A  21                 	db	33
   462  00FC6B  41                 	db	65
   463  00FC6C  49                 	db	73
   464  00FC6D  4D                 	db	77
   465  00FC6E  33                 	db	51
   466  00FC6F  18                 	db	24
   467  00FC70  14                 	db	20
   468  00FC71  12                 	db	18
   469  00FC72  7F                 	db	127
   470  00FC73  10                 	db	16
   471  00FC74  27                 	db	39
   472  00FC75  45                 	db	69
   473  00FC76  45                 	db	69
   474  00FC77  45                 	db	69
   475  00FC78  39                 	db	57
   476  00FC79  3C                 	db	60
   477  00FC7A  4A                 	db	74
   478  00FC7B  49                 	db	73
   479  00FC7C  49                 	db	73
   480  00FC7D  31                 	db	49
   481  00FC7E  41                 	db	65
   482  00FC7F  21                 	db	33
   483  00FC80  11                 	db	17
   484  00FC81  09                 	db	9
   485  00FC82  07                 	db	7
   486  00FC83  36                 	db	54
   487  00FC84  49                 	db	73
   488  00FC85  49                 	db	73
   489  00FC86  49                 	db	73
   490  00FC87  36                 	db	54
   491  00FC88  46                 	db	70
   492  00FC89  49                 	db	73
   493  00FC8A  49                 	db	73
   494  00FC8B  29                 	db	41
   495  00FC8C  1E                 	db	30
   496  00FC8D  00                 	db	0
   497  00FC8E  00                 	db	0
   498  00FC8F  14                 	db	20
   499  00FC90  00                 	db	0
   500  00FC91  00                 	db	0
   501  00FC92  00                 	db	0
   502  00FC93  40                 	db	64
   503  00FC94  34                 	db	52
   504  00FC95  00                 	db	0
   505  00FC96  00                 	db	0
   506  00FC97  00                 	db	0
   507  00FC98  08                 	db	8
   508  00FC99  14                 	db	20
   509  00FC9A  22                 	db	34
   510  00FC9B  41                 	db	65
   511  00FC9C  14                 	db	20
   512  00FC9D  14                 	db	20
   513  00FC9E  14                 	db	20
   514  00FC9F  14                 	db	20
   515  00FCA0  14                 	db	20
   516  00FCA1  00                 	db	0
   517  00FCA2  41                 	db	65
   518  00FCA3  22                 	db	34
   519  00FCA4  14                 	db	20
   520  00FCA5  08                 	db	8
   521  00FCA6  02                 	db	2
   522  00FCA7  01                 	db	1
   523  00FCA8  59                 	db	89
   524  00FCA9  09                 	db	9
   525  00FCAA  06                 	db	6
   526  00FCAB  3E                 	db	62
   527  00FCAC  41                 	db	65
   528  00FCAD  5D                 	db	93
   529  00FCAE  59                 	db	89
   530  00FCAF  4E                 	db	78
   531  00FCB0  7C                 	db	124
   532  00FCB1  12                 	db	18
   533  00FCB2  11                 	db	17
   534  00FCB3  12                 	db	18
   535  00FCB4  7C                 	db	124
   536  00FCB5  7F                 	db	127
   537  00FCB6  49                 	db	73
   538  00FCB7  49                 	db	73
   539  00FCB8  49                 	db	73
   540  00FCB9  36                 	db	54
   541  00FCBA  3E                 	db	62
   542  00FCBB  41                 	db	65
   543  00FCBC  41                 	db	65
   544  00FCBD  41                 	db	65
   545  00FCBE  22                 	db	34
   546  00FCBF  7F                 	db	127
   547  00FCC0  41                 	db	65
   548  00FCC1  41                 	db	65
   549  00FCC2  41                 	db	65
   550  00FCC3  3E                 	db	62
   551  00FCC4  7F                 	db	127
   552  00FCC5  49                 	db	73
   553  00FCC6  49                 	db	73
   554  00FCC7  49                 	db	73
   555  00FCC8  41                 	db	65
   556  00FCC9  7F                 	db	127
   557  00FCCA  09                 	db	9
   558  00FCCB  09                 	db	9
   559  00FCCC  09                 	db	9
   560  00FCCD  01                 	db	1
   561  00FCCE  3E                 	db	62
   562  00FCCF  41                 	db	65
   563  00FCD0  41                 	db	65
   564  00FCD1  51                 	db	81
   565  00FCD2  73                 	db	115
   566  00FCD3  7F                 	db	127
   567  00FCD4  08                 	db	8
   568  00FCD5  08                 	db	8
   569  00FCD6  08                 	db	8
   570  00FCD7  7F                 	db	127
   571  00FCD8  00                 	db	0
   572  00FCD9  41                 	db	65
   573  00FCDA  7F                 	db	127
   574  00FCDB  41                 	db	65
   575  00FCDC  00                 	db	0
   576  00FCDD  20                 	db	32
   577  00FCDE  40                 	db	64
   578  00FCDF  41                 	db	65
   579  00FCE0  3F                 	db	63
   580  00FCE1  01                 	db	1
   581  00FCE2  7F                 	db	127
   582  00FCE3  08                 	db	8
   583  00FCE4  14                 	db	20
   584  00FCE5  22                 	db	34
   585  00FCE6  41                 	db	65
   586  00FCE7  7F                 	db	127
   587  00FCE8  40                 	db	64
   588  00FCE9  40                 	db	64
   589  00FCEA  40                 	db	64
   590  00FCEB  40                 	db	64
   591  00FCEC  7F                 	db	127
   592  00FCED  02                 	db	2
   593  00FCEE  1C                 	db	28
   594  00FCEF  02                 	db	2
   595  00FCF0  7F                 	db	127
   596  00FCF1  7F                 	db	127
   597  00FCF2  04                 	db	4
   598  00FCF3  08                 	db	8
   599  00FCF4  10                 	db	16
   600  00FCF5  7F                 	db	127
   601  00FCF6  3E                 	db	62
   602  00FCF7  41                 	db	65
   603  00FCF8  41                 	db	65
   604  00FCF9  41                 	db	65
   605  00FCFA  3E                 	db	62
   606  00FCFB  7F                 	db	127
   607  00FCFC  09                 	db	9
   608  00FCFD  09                 	db	9
   609  00FCFE  09                 	db	9
   610  00FCFF  06                 	db	6
   611  00FD00  3E                 	db	62
   612  00FD01  41                 	db	65
   613  00FD02  51                 	db	81
   614  00FD03  21                 	db	33
   615  00FD04  5E                 	db	94
   616  00FD05  7F                 	db	127
   617  00FD06  09                 	db	9
   618  00FD07  19                 	db	25
   619  00FD08  29                 	db	41
   620  00FD09  46                 	db	70
   621  00FD0A                     __end_of_font:
   622                           	opt stack 0
   623  00FD0A                     _font2:
   624                           	opt stack 0
   625  00FD0A  26                 	db	38
   626  00FD0B  49                 	db	73
   627  00FD0C  49                 	db	73
   628  00FD0D  49                 	db	73
   629  00FD0E  32                 	db	50
   630  00FD0F  03                 	db	3
   631  00FD10  01                 	db	1
   632  00FD11  7F                 	db	127
   633  00FD12  01                 	db	1
   634  00FD13  03                 	db	3
   635  00FD14  3F                 	db	63
   636  00FD15  40                 	db	64
   637  00FD16  40                 	db	64
   638  00FD17  40                 	db	64
   639  00FD18  3F                 	db	63
   640  00FD19  1F                 	db	31
   641  00FD1A  20                 	db	32
   642  00FD1B  40                 	db	64
   643  00FD1C  20                 	db	32
   644  00FD1D  1F                 	db	31
   645  00FD1E  3F                 	db	63
   646  00FD1F  40                 	db	64
   647  00FD20  38                 	db	56
   648  00FD21  40                 	db	64
   649  00FD22  3F                 	db	63
   650  00FD23  63                 	db	99
   651  00FD24  14                 	db	20
   652  00FD25  08                 	db	8
   653  00FD26  14                 	db	20
   654  00FD27  63                 	db	99
   655  00FD28  03                 	db	3
   656  00FD29  04                 	db	4
   657  00FD2A  78                 	db	120
   658  00FD2B  04                 	db	4
   659  00FD2C  03                 	db	3
   660  00FD2D  61                 	db	97
   661  00FD2E  59                 	db	89
   662  00FD2F  49                 	db	73
   663  00FD30  4D                 	db	77
   664  00FD31  43                 	db	67
   665  00FD32  00                 	db	0
   666  00FD33  7F                 	db	127
   667  00FD34  41                 	db	65
   668  00FD35  41                 	db	65
   669  00FD36  41                 	db	65
   670  00FD37  02                 	db	2
   671  00FD38  04                 	db	4
   672  00FD39  08                 	db	8
   673  00FD3A  10                 	db	16
   674  00FD3B  20                 	db	32
   675  00FD3C  00                 	db	0
   676  00FD3D  41                 	db	65
   677  00FD3E  41                 	db	65
   678  00FD3F  41                 	db	65
   679  00FD40  7F                 	db	127
   680  00FD41  04                 	db	4
   681  00FD42  02                 	db	2
   682  00FD43  01                 	db	1
   683  00FD44  02                 	db	2
   684  00FD45  04                 	db	4
   685  00FD46  40                 	db	64
   686  00FD47  40                 	db	64
   687  00FD48  40                 	db	64
   688  00FD49  40                 	db	64
   689  00FD4A  40                 	db	64
   690  00FD4B  00                 	db	0
   691  00FD4C  03                 	db	3
   692  00FD4D  07                 	db	7
   693  00FD4E  08                 	db	8
   694  00FD4F  00                 	db	0
   695  00FD50  20                 	db	32
   696  00FD51  54                 	db	84
   697  00FD52  54                 	db	84
   698  00FD53  78                 	db	120
   699  00FD54  40                 	db	64
   700  00FD55  7F                 	db	127
   701  00FD56  28                 	db	40
   702  00FD57  44                 	db	68
   703  00FD58  44                 	db	68
   704  00FD59  38                 	db	56
   705  00FD5A  38                 	db	56
   706  00FD5B  44                 	db	68
   707  00FD5C  44                 	db	68
   708  00FD5D  44                 	db	68
   709  00FD5E  28                 	db	40
   710  00FD5F  38                 	db	56
   711  00FD60  44                 	db	68
   712  00FD61  44                 	db	68
   713  00FD62  28                 	db	40
   714  00FD63  7F                 	db	127
   715  00FD64  38                 	db	56
   716  00FD65  54                 	db	84
   717  00FD66  54                 	db	84
   718  00FD67  54                 	db	84
   719  00FD68  18                 	db	24
   720  00FD69  00                 	db	0
   721  00FD6A  08                 	db	8
   722  00FD6B  7E                 	db	126
   723  00FD6C  09                 	db	9
   724  00FD6D  02                 	db	2
   725  00FD6E  18                 	db	24
   726  00FD6F  A4                 	db	164
   727  00FD70  A4                 	db	164
   728  00FD71  9C                 	db	156
   729  00FD72  78                 	db	120
   730  00FD73  7F                 	db	127
   731  00FD74  08                 	db	8
   732  00FD75  04                 	db	4
   733  00FD76  04                 	db	4
   734  00FD77  78                 	db	120
   735  00FD78  00                 	db	0
   736  00FD79  44                 	db	68
   737  00FD7A  7D                 	db	125
   738  00FD7B  40                 	db	64
   739  00FD7C  00                 	db	0
   740  00FD7D  20                 	db	32
   741  00FD7E  40                 	db	64
   742  00FD7F  40                 	db	64
   743  00FD80  3D                 	db	61
   744  00FD81  00                 	db	0
   745  00FD82  7F                 	db	127
   746  00FD83  10                 	db	16
   747  00FD84  28                 	db	40
   748  00FD85  44                 	db	68
   749  00FD86  00                 	db	0
   750  00FD87  00                 	db	0
   751  00FD88  41                 	db	65
   752  00FD89  7F                 	db	127
   753  00FD8A  40                 	db	64
   754  00FD8B  00                 	db	0
   755  00FD8C  7C                 	db	124
   756  00FD8D  04                 	db	4
   757  00FD8E  78                 	db	120
   758  00FD8F  04                 	db	4
   759  00FD90  78                 	db	120
   760  00FD91  7C                 	db	124
   761  00FD92  08                 	db	8
   762  00FD93  04                 	db	4
   763  00FD94  04                 	db	4
   764  00FD95  78                 	db	120
   765  00FD96  38                 	db	56
   766  00FD97  44                 	db	68
   767  00FD98  44                 	db	68
   768  00FD99  44                 	db	68
   769  00FD9A  38                 	db	56
   770  00FD9B  FC                 	db	252
   771  00FD9C  18                 	db	24
   772  00FD9D  24                 	db	36
   773  00FD9E  24                 	db	36
   774  00FD9F  18                 	db	24
   775  00FDA0  18                 	db	24
   776  00FDA1  24                 	db	36
   777  00FDA2  24                 	db	36
   778  00FDA3  18                 	db	24
   779  00FDA4  FC                 	db	252
   780  00FDA5  7C                 	db	124
   781  00FDA6  08                 	db	8
   782  00FDA7  04                 	db	4
   783  00FDA8  04                 	db	4
   784  00FDA9  08                 	db	8
   785  00FDAA  48                 	db	72
   786  00FDAB  54                 	db	84
   787  00FDAC  54                 	db	84
   788  00FDAD  54                 	db	84
   789  00FDAE  24                 	db	36
   790  00FDAF  04                 	db	4
   791  00FDB0  04                 	db	4
   792  00FDB1  3F                 	db	63
   793  00FDB2  44                 	db	68
   794  00FDB3  24                 	db	36
   795  00FDB4  3C                 	db	60
   796  00FDB5  40                 	db	64
   797  00FDB6  40                 	db	64
   798  00FDB7  20                 	db	32
   799  00FDB8  7C                 	db	124
   800  00FDB9  1C                 	db	28
   801  00FDBA  20                 	db	32
   802  00FDBB  40                 	db	64
   803  00FDBC  20                 	db	32
   804  00FDBD  1C                 	db	28
   805  00FDBE  3C                 	db	60
   806  00FDBF  40                 	db	64
   807  00FDC0  30                 	db	48
   808  00FDC1  40                 	db	64
   809  00FDC2  3C                 	db	60
   810  00FDC3  44                 	db	68
   811  00FDC4  28                 	db	40
   812  00FDC5  10                 	db	16
   813  00FDC6  28                 	db	40
   814  00FDC7  44                 	db	68
   815  00FDC8  4C                 	db	76
   816  00FDC9  90                 	db	144
   817  00FDCA  90                 	db	144
   818  00FDCB  90                 	db	144
   819  00FDCC  7C                 	db	124
   820  00FDCD  44                 	db	68
   821  00FDCE  64                 	db	100
   822  00FDCF  54                 	db	84
   823  00FDD0  4C                 	db	76
   824  00FDD1  44                 	db	68
   825  00FDD2  00                 	db	0
   826  00FDD3  08                 	db	8
   827  00FDD4  36                 	db	54
   828  00FDD5  41                 	db	65
   829  00FDD6  00                 	db	0
   830  00FDD7  00                 	db	0
   831  00FDD8  00                 	db	0
   832  00FDD9  77                 	db	119
   833  00FDDA  00                 	db	0
   834  00FDDB  00                 	db	0
   835  00FDDC  00                 	db	0
   836  00FDDD  41                 	db	65
   837  00FDDE  36                 	db	54
   838  00FDDF  08                 	db	8
   839  00FDE0  00                 	db	0
   840  00FDE1  02                 	db	2
   841  00FDE2  01                 	db	1
   842  00FDE3  02                 	db	2
   843  00FDE4  04                 	db	4
   844  00FDE5  02                 	db	2
   845  00FDE6                     __end_of_font2:
   846                           	opt stack 0
   847  00FDE6                     _dpowers:
   848                           	opt stack 0
   849  00FDE6  0001               	dw	1
   850  00FDE8  0000               	dw	0
   851  00FDEA  000A               	dw	10
   852  00FDEC  0000               	dw	0
   853  00FDEE  0064               	dw	100
   854  00FDF0  0000               	dw	0
   855  00FDF2  03E8               	dw	1000
   856  00FDF4  0000               	dw	0
   857  00FDF6  2710               	dw	10000
   858  00FDF8  0000               	dw	0
   859  00FDFA  86A0               	dw	34464
   860  00FDFC  0001               	dw	1
   861  00FDFE  4240               	dw	16960
   862  00FE00  000F               	dw	15
   863  00FE02  9680               	dw	38528
   864  00FE04  0098               	dw	152
   865  00FE06  E100               	dw	57600
   866  00FE08  05F5               	dw	1525
   867  00FE0A  CA00               	dw	51712
   868  00FE0C  3B9A               	dw	15258
   869  00FE0E                     __end_of_dpowers:
   870                           	opt stack 0
   871  00FE0E                     __npowers_:
   872                           	opt stack 0
   873  00FE0E  00                 	db	0
   874  00FE0F  80                 	db	128
   875  00FE10  3F                 	db	63
   876  00FE11  CD                 	db	205
   877  00FE12  CC                 	db	204
   878  00FE13  3D                 	db	61
   879  00FE14  D7                 	db	215
   880  00FE15  23                 	db	35
   881  00FE16  3C                 	db	60
   882  00FE17  12                 	db	18
   883  00FE18  83                 	db	131
   884  00FE19  3A                 	db	58
   885  00FE1A  B7                 	db	183
   886  00FE1B  D1                 	db	209
   887  00FE1C  38                 	db	56
   888  00FE1D  C6                 	db	198
   889  00FE1E  27                 	db	39
   890  00FE1F  37                 	db	55
   891  00FE20  38                 	db	56
   892  00FE21  86                 	db	134
   893  00FE22  35                 	db	53
   894  00FE23  C0                 	db	192
   895  00FE24  D6                 	db	214
   896  00FE25  33                 	db	51
   897  00FE26  CC                 	db	204
   898  00FE27  2B                 	db	43
   899  00FE28  32                 	db	50
   900  00FE29  70                 	db	112
   901  00FE2A  89                 	db	137
   902  00FE2B  30                 	db	48
   903  00FE2C  E7                 	db	231
   904  00FE2D  DB                 	db	219
   905  00FE2E  2E                 	db	46
   906  00FE2F  E5                 	db	229
   907  00FE30  3C                 	db	60
   908  00FE31  1E                 	db	30
   909  00FE32  42                 	db	66
   910  00FE33  A2                 	db	162
   911  00FE34  0D                 	db	13
   912  00FE35                     __end_of__npowers_:
   913                           	opt stack 0
   914  00FE35                     __powers_:
   915                           	opt stack 0
   916  00FE35  00                 	db	0
   917  00FE36  80                 	db	128
   918  00FE37  3F                 	db	63
   919  00FE38  00                 	db	0
   920  00FE39  20                 	db	32
   921  00FE3A  41                 	db	65
   922  00FE3B  00                 	db	0
   923  00FE3C  C8                 	db	200
   924  00FE3D  42                 	db	66
   925  00FE3E  00                 	db	0
   926  00FE3F  7A                 	db	122
   927  00FE40  44                 	db	68
   928  00FE41  40                 	db	64
   929  00FE42  1C                 	db	28
   930  00FE43  46                 	db	70
   931  00FE44  50                 	db	80
   932  00FE45  C3                 	db	195
   933  00FE46  47                 	db	71
   934  00FE47  24                 	db	36
   935  00FE48  74                 	db	116
   936  00FE49  49                 	db	73
   937  00FE4A  97                 	db	151
   938  00FE4B  18                 	db	24
   939  00FE4C  4B                 	db	75
   940  00FE4D  BC                 	db	188
   941  00FE4E  BE                 	db	190
   942  00FE4F  4C                 	db	76
   943  00FE50  6B                 	db	107
   944  00FE51  6E                 	db	110
   945  00FE52  4E                 	db	78
   946  00FE53  03                 	db	3
   947  00FE54  15                 	db	21
   948  00FE55  50                 	db	80
   949  00FE56  79                 	db	121
   950  00FE57  AD                 	db	173
   951  00FE58  60                 	db	96
   952  00FE59  F3                 	db	243
   953  00FE5A  49                 	db	73
   954  00FE5B  71                 	db	113
   955  00FE5C                     __end_of__powers_:
   956                           	opt stack 0
   957  00FE5C                     _hexpowers:
   958                           	opt stack 0
   959  00FE5C  0001               	dw	1
   960  00FE5E  0000               	dw	0
   961  00FE60  0010               	dw	16
   962  00FE62  0000               	dw	0
   963  00FE64  0100               	dw	256
   964  00FE66  0000               	dw	0
   965  00FE68  1000               	dw	4096
   966  00FE6A  0000               	dw	0
   967  00FE6C  0000               	dw	0
   968  00FE6E  0001               	dw	1
   969  00FE70  0000               	dw	0
   970  00FE72  0010               	dw	16
   971  00FE74  0000               	dw	0
   972  00FE76  0100               	dw	256
   973  00FE78  0000               	dw	0
   974  00FE7A  1000               	dw	4096
   975  00FE7C                     __end_of_hexpowers:
   976                           	opt stack 0
   977  0000                     _ADCON0	set	4034
   978  0000                     _ADCON0bits	set	4034
   979  0000                     _ADCON1	set	4033
   980  0000                     _ADCON2	set	4032
   981  0000                     _ADRESH	set	4036
   982  0000                     _ADRESL	set	4035
   983  0000                     _CCP1CON	set	4029
   984  0000                     _CCP2CON	set	4026
   985  0000                     _CCPR1L	set	4030
   986  0000                     _CCPR2L	set	4027
   987  0000                     _INTCON2bits	set	4081
   988  0000                     _INTCON3bits	set	4080
   989  0000                     _INTCONbits	set	4082
   990  0000                     _OSCCON	set	4051
   991  0000                     _PIE1bits	set	3997
   992  0000                     _PIR1bits	set	3998
   993  0000                     _PORTAbits	set	3968
   994  0000                     _PORTBbits	set	3969
   995  0000                     _PORTCbits	set	3970
   996  0000                     _PORTD	set	3971
   997  0000                     _PORTDbits	set	3971
   998  0000                     _PORTE	set	3972
   999  0000                     _PR2	set	4043
  1000  0000                     _RCSTA	set	4011
  1001  0000                     _RCSTAbits	set	4011
  1002  0000                     _SPBRG	set	4015
  1003  0000                     _SPBRGH	set	4016
  1004  0000                     _SSPBUF	set	4041
  1005  0000                     _SSPCON1	set	4038
  1006  0000                     _SSPSTAT	set	4039
  1007  0000                     _SSPSTATbits	set	4039
  1008  0000                     _T0CON	set	4053
  1009  0000                     _T0CONbits	set	4053
  1010  0000                     _T1CON	set	4045
  1011  0000                     _T1CONbits	set	4045
  1012  0000                     _T2CON	set	4042
  1013  0000                     _T3CON	set	4017
  1014  0000                     _TMR0H	set	4055
  1015  0000                     _TMR0L	set	4054
  1016  0000                     _TMR1H	set	4047
  1017  0000                     _TMR1L	set	4046
  1018  0000                     _TMR3L	set	4018
  1019  0000                     _TRISA	set	3986
  1020  0000                     _TRISB	set	3987
  1021  0000                     _TRISBbits	set	3987
  1022  0000                     _TRISC	set	3988
  1023  0000                     _TRISCbits	set	3988
  1024  0000                     _TRISD	set	3989
  1025  0000                     _TRISDbits	set	3989
  1026  0000                     _TRISE	set	3990
  1027  0000                     _TXREG	set	4013
  1028  0000                     _TXSTA	set	4012
  1029  0000                     _TXSTAbits	set	4012
  1030  0000                     _RBPU	set	32655
  1031  0000                     _TRMT	set	32097
  1032  00FE7C                     STR_4:
  1033                           
  1034                           ; BSR set to: 0
  1035  00FE7C  25                 	db	37
  1036  00FE7D  30                 	db	48	;'0'
  1037  00FE7E  32                 	db	50	;'2'
  1038  00FE7F  78                 	db	120	;'x'
  1039  00FE80  3A                 	db	58	;':'
  1040  00FE81  25                 	db	37
  1041  00FE82  30                 	db	48	;'0'
  1042  00FE83  32                 	db	50	;'2'
  1043  00FE84  78                 	db	120	;'x'
  1044  00FE85  3A                 	db	58	;':'
  1045  00FE86  25                 	db	37
  1046  00FE87  30                 	db	48	;'0'
  1047  00FE88  32                 	db	50	;'2'
  1048  00FE89  78                 	db	120	;'x'
  1049  00FE8A  20                 	db	32
  1050  00FE8B  25                 	db	37
  1051  00FE8C  30                 	db	48	;'0'
  1052  00FE8D  32                 	db	50	;'2'
  1053  00FE8E  78                 	db	120	;'x'
  1054  00FE8F  2F                 	db	47
  1055  00FE90  25                 	db	37
  1056  00FE91  30                 	db	48	;'0'
  1057  00FE92  32                 	db	50	;'2'
  1058  00FE93  78                 	db	120	;'x'
  1059  00FE94  2F                 	db	47
  1060  00FE95  25                 	db	37
  1061  00FE96  30                 	db	48	;'0'
  1062  00FE97  32                 	db	50	;'2'
  1063  00FE98  78                 	db	120	;'x'
  1064  00FE99  00                 	db	0
  1065  00FE9A                     STR_6:
  1066                           
  1067                           ; BSR set to: 0
  1068  00FE9A  61                 	db	97	;'a'
  1069  00FE9B  6C                 	db	108	;'l'
  1070  00FE9C  61                 	db	97	;'a'
  1071  00FE9D  72                 	db	114	;'r'
  1072  00FE9E  6D                 	db	109	;'m'
  1073  00FE9F  20                 	db	32
  1074  00FEA0  3D                 	db	61	;'='
  1075  00FEA1  20                 	db	32
  1076  00FEA2  25                 	db	37
  1077  00FEA3  64                 	db	100	;'d'
  1078  00FEA4  20                 	db	32
  1079  00FEA5  48                 	db	72	;'H'
  1080  00FEA6  65                 	db	101	;'e'
  1081  00FEA7  61                 	db	97	;'a'
  1082  00FEA8  74                 	db	116	;'t'
  1083  00FEA9  65                 	db	101	;'e'
  1084  00FEAA  72                 	db	114	;'r'
  1085  00FEAB  20                 	db	32
  1086  00FEAC  3D                 	db	61	;'='
  1087  00FEAD  20                 	db	32
  1088  00FEAE  25                 	db	37
  1089  00FEAF  64                 	db	100	;'d'
  1090  00FEB0  20                 	db	32
  1091  00FEB1  00                 	db	0
  1092  00FEB2                     STR_39:
  1093                           
  1094                           ; BSR set to: 0
  1095  00FEB2  43                 	db	67	;'C'
  1096  00FEB3  61                 	db	97	;'a'
  1097  00FEB4  6E                 	db	110	;'n'
  1098  00FEB5  6E                 	db	110	;'n'
  1099  00FEB6  6F                 	db	111	;'o'
  1100  00FEB7  74                 	db	116	;'t'
  1101  00FEB8  20                 	db	32
  1102  00FEB9  66                 	db	102	;'f'
  1103  00FEBA  69                 	db	105	;'i'
  1104  00FEBB  6E                 	db	110	;'n'
  1105  00FEBC  64                 	db	100	;'d'
  1106  00FEBD  20                 	db	32
  1107  00FEBE  62                 	db	98	;'b'
  1108  00FEBF  75                 	db	117	;'u'
  1109  00FEC0  74                 	db	116	;'t'
  1110  00FEC1  74                 	db	116	;'t'
  1111  00FEC2  6F                 	db	111	;'o'
  1112  00FEC3  6E                 	db	110	;'n'
  1113  00FEC4  20                 	db	32
  1114  00FEC5  0D                 	db	13
  1115  00FEC6  0A                 	db	10
  1116  00FEC7  00                 	db	0
  1117  00FEC8                     STR_5:
  1118                           
  1119                           ; BSR set to: 0
  1120  00FEC8  20                 	db	32
  1121  00FEC9  54                 	db	84	;'T'
  1122  00FECA  65                 	db	101	;'e'
  1123  00FECB  6D                 	db	109	;'m'
  1124  00FECC  70                 	db	112	;'p'
  1125  00FECD  20                 	db	32
  1126  00FECE  3D                 	db	61	;'='
  1127  00FECF  20                 	db	32
  1128  00FED0  25                 	db	37
  1129  00FED1  64                 	db	100	;'d'
  1130  00FED2  20                 	db	32
  1131  00FED3  43                 	db	67	;'C'
  1132  00FED4  20                 	db	32
  1133  00FED5  3D                 	db	61	;'='
  1134  00FED6  20                 	db	32
  1135  00FED7  25                 	db	37
  1136  00FED8  64                 	db	100	;'d'
  1137  00FED9  20                 	db	32
  1138  00FEDA  46                 	db	70	;'F'
  1139  00FEDB  20                 	db	32
  1140  00FEDC  00                 	db	0
  1141  00FEDD                     STR_8:
  1142                           
  1143                           ; BSR set to: 0
  1144  00FEDD  20                 	db	32
  1145  00FEDE  45                 	db	69	;'E'
  1146  00FEDF  43                 	db	67	;'C'
  1147  00FEE0  45                 	db	69	;'E'
  1148  00FEE1  33                 	db	51	;'3'
  1149  00FEE2  33                 	db	51	;'3'
  1150  00FEE3  30                 	db	48	;'0'
  1151  00FEE4  31                 	db	49	;'1'
  1152  00FEE5  4C                 	db	76	;'L'
  1153  00FEE6  20                 	db	32
  1154  00FEE7  53                 	db	83	;'S'
  1155  00FEE8  70                 	db	112	;'p'
  1156  00FEE9  27                 	db	39
  1157  00FEEA  32                 	db	50	;'2'
  1158  00FEEB  32                 	db	50	;'2'
  1159  00FEEC  20                 	db	32
  1160  00FEED  53                 	db	83	;'S'
  1161  00FEEE  31                 	db	49	;'1'
  1162  00FEEF  00                 	db	0
  1163  00FEF0  00                 	db	0
  1164  00FEF1                     STR_7:
  1165                           
  1166                           ; BSR set to: 0
  1167  00FEF1  52                 	db	82	;'R'
  1168  00FEF2  50                 	db	80	;'P'
  1169  00FEF3  4D                 	db	77	;'M'
  1170  00FEF4  20                 	db	32
  1171  00FEF5  3D                 	db	61	;'='
  1172  00FEF6  20                 	db	32
  1173  00FEF7  25                 	db	37
  1174  00FEF8  64                 	db	100	;'d'
  1175  00FEF9  20                 	db	32
  1176  00FEFA  20                 	db	32
  1177  00FEFB  64                 	db	100	;'d'
  1178  00FEFC  63                 	db	99	;'c'
  1179  00FEFD  20                 	db	32
  1180  00FEFE  3D                 	db	61	;'='
  1181  00FEFF  20                 	db	32
  1182  00FF00  25                 	db	37
  1183  00FF01  64                 	db	100	;'d'
  1184  00FF02  0D                 	db	13
  1185  00FF03  0A                 	db	10
  1186  00FF04  00                 	db	0
  1187  00FF05                     STR_1:
  1188                           
  1189                           ; BSR set to: 0
  1190  00FF05  46                 	db	70	;'F'
  1191  00FF06  61                 	db	97	;'a'
  1192  00FF07  6E                 	db	110	;'n'
  1193  00FF08  20                 	db	32
  1194  00FF09  69                 	db	105	;'i'
  1195  00FF0A  73                 	db	115	;'s'
  1196  00FF0B  20                 	db	32
  1197  00FF0C  74                 	db	116	;'t'
  1198  00FF0D  75                 	db	117	;'u'
  1199  00FF0E  72                 	db	114	;'r'
  1200  00FF0F  6E                 	db	110	;'n'
  1201  00FF10  65                 	db	101	;'e'
  1202  00FF11  64                 	db	100	;'d'
  1203  00FF12  20                 	db	32
  1204  00FF13  6F                 	db	111	;'o'
  1205  00FF14  66                 	db	102	;'f'
  1206  00FF15  66                 	db	102	;'f'
  1207  00FF16  0D                 	db	13
  1208  00FF17  0A                 	db	10
  1209  00FF18  00                 	db	0
  1210  00FF19                     STR_2:
  1211                           
  1212                           ; BSR set to: 0
  1213  00FF19  46                 	db	70	;'F'
  1214  00FF1A  61                 	db	97	;'a'
  1215  00FF1B  6E                 	db	110	;'n'
  1216  00FF1C  20                 	db	32
  1217  00FF1D  69                 	db	105	;'i'
  1218  00FF1E  73                 	db	115	;'s'
  1219  00FF1F  20                 	db	32
  1220  00FF20  74                 	db	116	;'t'
  1221  00FF21  75                 	db	117	;'u'
  1222  00FF22  72                 	db	114	;'r'
  1223  00FF23  6E                 	db	110	;'n'
  1224  00FF24  65                 	db	101	;'e'
  1225  00FF25  64                 	db	100	;'d'
  1226  00FF26  20                 	db	32
  1227  00FF27  6F                 	db	111	;'o'
  1228  00FF28  6E                 	db	110	;'n'
  1229  00FF29  0D                 	db	13
  1230  00FF2A  0A                 	db	10
  1231  00FF2B  00                 	db	0
  1232  00FF2C                     STR_26:
  1233                           
  1234                           ; BSR set to: 0
  1235  00FF2C  45                 	db	69	;'E'
  1236  00FF2D  43                 	db	67	;'C'
  1237  00FF2E  45                 	db	69	;'E'
  1238  00FF2F  33                 	db	51	;'3'
  1239  00FF30  33                 	db	51	;'3'
  1240  00FF31  30                 	db	48	;'0'
  1241  00FF32  31                 	db	49	;'1'
  1242  00FF33  4C                 	db	76	;'L'
  1243  00FF34  20                 	db	32
  1244  00FF35  53                 	db	83	;'S'
  1245  00FF36  70                 	db	112	;'p'
  1246  00FF37  27                 	db	39
  1247  00FF38  32                 	db	50	;'2'
  1248  00FF39  32                 	db	50	;'2'
  1249  00FF3A  20                 	db	32
  1250  00FF3B  53                 	db	83	;'S'
  1251  00FF3C  31                 	db	49	;'1'
  1252  00FF3D  00                 	db	0
  1253  00FF3E                     STR_40:
  1254                           
  1255                           ; BSR set to: 0
  1256  00FF3E  30                 	db	48	;'0'
  1257  00FF3F  31                 	db	49	;'1'
  1258  00FF40  32                 	db	50	;'2'
  1259  00FF41  33                 	db	51	;'3'
  1260  00FF42  34                 	db	52	;'4'
  1261  00FF43  35                 	db	53	;'5'
  1262  00FF44  36                 	db	54	;'6'
  1263  00FF45  37                 	db	55	;'7'
  1264  00FF46  38                 	db	56	;'8'
  1265  00FF47  39                 	db	57	;'9'
  1266  00FF48  61                 	db	97	;'a'
  1267  00FF49  62                 	db	98	;'b'
  1268  00FF4A  63                 	db	99	;'c'
  1269  00FF4B  64                 	db	100	;'d'
  1270  00FF4C  65                 	db	101	;'e'
  1271  00FF4D  66                 	db	102	;'f'
  1272  00FF4E  00                 	db	0
  1273  00FF4F                     STR_34:
  1274                           
  1275                           ; BSR set to: 0
  1276  00FF4F  53                 	db	83	;'S'
  1277  00FF50  65                 	db	101	;'e'
  1278  00FF51  74                 	db	116	;'t'
  1279  00FF52  20                 	db	32
  1280  00FF53  48                 	db	72	;'H'
  1281  00FF54  65                 	db	101	;'e'
  1282  00FF55  61                 	db	97	;'a'
  1283  00FF56  74                 	db	116	;'t'
  1284  00FF57  65                 	db	101	;'e'
  1285  00FF58  72                 	db	114	;'r'
  1286  00FF59  20                 	db	32
  1287  00FF5A  54                 	db	84	;'T'
  1288  00FF5B  65                 	db	101	;'e'
  1289  00FF5C  6D                 	db	109	;'m'
  1290  00FF5D  70                 	db	112	;'p'
  1291  00FF5E  00                 	db	0
  1292  00FF5F                     STR_3:
  1293                           
  1294                           ; BSR set to: 0
  1295  00FF5F  56                 	db	86	;'V'
  1296  00FF60  6F                 	db	111	;'o'
  1297  00FF61  6C                 	db	108	;'l'
  1298  00FF62  74                 	db	116	;'t'
  1299  00FF63  61                 	db	97	;'a'
  1300  00FF64  67                 	db	103	;'g'
  1301  00FF65  65                 	db	101	;'e'
  1302  00FF66  20                 	db	32
  1303  00FF67  3D                 	db	61	;'='
  1304  00FF68  20                 	db	32
  1305  00FF69  25                 	db	37
  1306  00FF6A  66                 	db	102	;'f'
  1307  00FF6B  0D                 	db	13
  1308  00FF6C  0A                 	db	10
  1309  00FF6D  00                 	db	0
  1310  00FF6E                     STR_9:
  1311                           
  1312                           ; BSR set to: 0
  1313  00FF6E  54                 	db	84	;'T'
  1314  00FF6F  65                 	db	101	;'e'
  1315  00FF70  6D                 	db	109	;'m'
  1316  00FF71  70                 	db	112	;'p'
  1317  00FF72  65                 	db	101	;'e'
  1318  00FF73  72                 	db	114	;'r'
  1319  00FF74  61                 	db	97	;'a'
  1320  00FF75  74                 	db	116	;'t'
  1321  00FF76  75                 	db	117	;'u'
  1322  00FF77  72                 	db	114	;'r'
  1323  00FF78  65                 	db	101	;'e'
  1324  00FF79  3A                 	db	58	;':'
  1325  00FF7A  00                 	db	0
  1326  00FF7B                     STR_16:
  1327                           
  1328                           ; BSR set to: 0
  1329  00FF7B  48                 	db	72	;'H'
  1330  00FF7C  54                 	db	84	;'T'
  1331  00FF7D  52                 	db	82	;'R'
  1332  00FF7E  20                 	db	32
  1333  00FF7F  53                 	db	83	;'S'
  1334  00FF80  65                 	db	101	;'e'
  1335  00FF81  74                 	db	116	;'t'
  1336  00FF82  20                 	db	32
  1337  00FF83  54                 	db	84	;'T'
  1338  00FF84  65                 	db	101	;'e'
  1339  00FF85  6D                 	db	109	;'m'
  1340  00FF86  70                 	db	112	;'p'
  1341  00FF87  00                 	db	0
  1342  00FF88                     STR_36:
  1343                           
  1344                           ; BSR set to: 0
  1345  00FF88  54                 	db	84	;'T'
  1346  00FF89  69                 	db	105	;'i'
  1347  00FF8A  6D                 	db	109	;'m'
  1348  00FF8B  65                 	db	101	;'e'
  1349  00FF8C  20                 	db	32
  1350  00FF8D  53                 	db	83	;'S'
  1351  00FF8E  65                 	db	101	;'e'
  1352  00FF8F  74                 	db	116	;'t'
  1353  00FF90  75                 	db	117	;'u'
  1354  00FF91  70                 	db	112	;'p'
  1355  00FF92  00                 	db	0
  1356  00FF93  00                 	db	0
  1357  00FF94                     STR_32:
  1358                           
  1359                           ; BSR set to: 0
  1360  00FF94  20                 	db	32
  1361  00FF95  20                 	db	32
  1362  00FF96  48                 	db	72	;'H'
  1363  00FF97  65                 	db	101	;'e'
  1364  00FF98  61                 	db	97	;'a'
  1365  00FF99  74                 	db	116	;'t'
  1366  00FF9A  65                 	db	101	;'e'
  1367  00FF9B  72                 	db	114	;'r'
  1368  00FF9C  00                 	db	0
  1369  00FF9D  20                 	db	32
  1370  00FF9E  00                 	db	0
  1371  00FF9F                     STR_30:
  1372                           
  1373                           ; BSR set to: 0
  1374  00FF9F  25                 	db	37
  1375  00FFA0  78                 	db	120	;'x'
  1376  00FFA1  3A                 	db	58	;':'
  1377  00FFA2  25                 	db	37
  1378  00FFA3  78                 	db	120	;'x'
  1379  00FFA4  3A                 	db	58	;':'
  1380  00FFA5  25                 	db	37
  1381  00FFA6  78                 	db	120	;'x'
  1382  00FFA7  0D                 	db	13
  1383  00FFA8  0A                 	db	10
  1384  00FFA9  00                 	db	0
  1385  00FFAA                     STR_14:
  1386                           
  1387                           ; BSR set to: 0
  1388  00FFAA  41                 	db	65	;'A'
  1389  00FFAB  6C                 	db	108	;'l'
  1390  00FFAC  61                 	db	97	;'a'
  1391  00FFAD  72                 	db	114	;'r'
  1392  00FFAE  6D                 	db	109	;'m'
  1393  00FFAF  20                 	db	32
  1394  00FFB0  54                 	db	84	;'T'
  1395  00FFB1  69                 	db	105	;'i'
  1396  00FFB2  6D                 	db	109	;'m'
  1397  00FFB3  65                 	db	101	;'e'
  1398  00FFB4  00                 	db	0
  1399  00FFB5                     STR_33:
  1400                           
  1401                           ; BSR set to: 0
  1402  00FFB5  20                 	db	32
  1403  00FFB6  20                 	db	32
  1404  00FFB7  53                 	db	83	;'S'
  1405  00FFB8  65                 	db	101	;'e'
  1406  00FFB9  74                 	db	116	;'t'
  1407  00FFBA  75                 	db	117	;'u'
  1408  00FFBB  70                 	db	112	;'p'
  1409  00FFBC  00                 	db	0
  1410  00FFBD  20                 	db	32
  1411  00FFBE  00                 	db	0
  1412  00FFBF                     STR_15:
  1413                           
  1414                           ; BSR set to: 0
  1415  00FFBF  41                 	db	65	;'A'
  1416  00FFC0  6C                 	db	108	;'l'
  1417  00FFC1  61                 	db	97	;'a'
  1418  00FFC2  72                 	db	114	;'r'
  1419  00FFC3  6D                 	db	109	;'m'
  1420  00FFC4  20                 	db	32
  1421  00FFC5  53                 	db	83	;'S'
  1422  00FFC6  57                 	db	87	;'W'
  1423  00FFC7  00                 	db	0
  1424  00FFC8                     STR_27:
  1425                           
  1426                           ; BSR set to: 0
  1427  00FFC8  20                 	db	32
  1428  00FFC9  20                 	db	32
  1429  00FFCA  41                 	db	65	;'A'
  1430  00FFCB  6C                 	db	108	;'l'
  1431  00FFCC  61                 	db	97	;'a'
  1432  00FFCD  72                 	db	114	;'r'
  1433  00FFCE  6D                 	db	109	;'m'
  1434  00FFCF  00                 	db	0
  1435  00FFD0                     STR_28:
  1436                           
  1437                           ; BSR set to: 0
  1438  00FFD0  20                 	db	32
  1439  00FFD1  20                 	db	32
  1440  00FFD2  53                 	db	83	;'S'
  1441  00FFD3  65                 	db	101	;'e'
  1442  00FFD4  74                 	db	116	;'t'
  1443  00FFD5  75                 	db	117	;'u'
  1444  00FFD6  70                 	db	112	;'p'
  1445  00FFD7  00                 	db	0
  1446  00FFD8                     STR_17:
  1447                           
  1448                           ; BSR set to: 0
  1449  00FFD8  48                 	db	72	;'H'
  1450  00FFD9  54                 	db	84	;'T'
  1451  00FFDA  52                 	db	82	;'R'
  1452  00FFDB  20                 	db	32
  1453  00FFDC  53                 	db	83	;'S'
  1454  00FFDD  57                 	db	87	;'W'
  1455  00FFDE  00                 	db	0
  1456  00FFDF                     STR_13:
  1457                           
  1458                           ; BSR set to: 0
  1459  00FFDF  44                 	db	68	;'D'
  1460  00FFE0  61                 	db	97	;'a'
  1461  00FFE1  74                 	db	116	;'t'
  1462  00FFE2  65                 	db	101	;'e'
  1463  00FFE3  00                 	db	0
  1464  00FFE4                     STR_20:
  1465                           
  1466                           ; BSR set to: 0
  1467  00FFE4  56                 	db	86	;'V'
  1468  00FFE5  6F                 	db	111	;'o'
  1469  00FFE6  6C                 	db	108	;'l'
  1470  00FFE7  74                 	db	116	;'t'
  1471  00FFE8  00                 	db	0
  1472  00FFE9                     STR_22:
  1473                           
  1474                           ; BSR set to: 0
  1475  00FFE9  4F                 	db	79	;'O'
  1476  00FFEA  4E                 	db	78	;'N'
  1477  00FFEB  20                 	db	32
  1478  00FFEC  00                 	db	0
  1479  00FFED                     STR_23:
  1480                           
  1481                           ; BSR set to: 0
  1482  00FFED  4F                 	db	79	;'O'
  1483  00FFEE  46                 	db	70	;'F'
  1484  00FFEF  46                 	db	70	;'F'
  1485  00FFF0  00                 	db	0
  1486  00FFF1                     STR_21:
  1487                           
  1488                           ; BSR set to: 0
  1489  00FFF1  52                 	db	82	;'R'
  1490  00FFF2  50                 	db	80	;'P'
  1491  00FFF3  4D                 	db	77	;'M'
  1492  00FFF4  00                 	db	0
  1493  00FFF5                     STR_10:
  1494                           
  1495                           ; BSR set to: 0
  1496  00FFF5  43                 	db	67	;'C'
  1497  00FFF6  2F                 	db	47
  1498  00FFF7  00                 	db	0
  1499  00FFF8                     STR_18:
  1500                           
  1501                           ; BSR set to: 0
  1502  00FFF8  44                 	db	68	;'D'
  1503  00FFF9  43                 	db	67	;'C'
  1504  00FFFA  00                 	db	0
  1505  00FFFB                     STR_19:
  1506                           
  1507                           ; BSR set to: 0
  1508  00FFFB  52                 	db	82	;'R'
  1509  00FFFC  4D                 	db	77	;'M'
  1510  00FFFD  00                 	db	0
  1511  0000                     
  1512                           ; #config settings
  1513  00FFFE  00                 	db	0	; dummy byte at the end
  1514  0000                     
  1515                           	psect	cinit
  1516  0046DA                     __pcinit:
  1517                           	opt stack 0
  1518  0046DA                     start_initialization:
  1519                           	opt stack 0
  1520  0046DA                     __initialization:
  1521                           	opt stack 0
  1522                           
  1523                           ; Clear objects allocated to BANK0 (52 bytes)
  1524  0046DA  EE00  F080         	lfsr	0,__pbssBANK0
  1525  0046DE  0E34               	movlw	52
  1526  0046E0                     clear_0:
  1527  0046E0  6AEE               	clrf	postinc0,c
  1528  0046E2  06E8               	decf	wreg,f,c
  1529  0046E4  E1FD               	bnz	clear_0
  1530                           
  1531                           ; Clear objects allocated to COMRAM (16 bytes)
  1532  0046E6  EE00  F060         	lfsr	0,__pbssCOMRAM
  1533  0046EA  0E10               	movlw	16
  1534  0046EC                     clear_1:
  1535  0046EC  6AEE               	clrf	postinc0,c
  1536  0046EE  06E8               	decf	wreg,f,c
  1537  0046F0  E1FD               	bnz	clear_1
  1538                           
  1539                           ; Initialize objects allocated to BANK1 (119 bytes)
  1540                           ; load TBLPTR registers with __pidataBANK1
  1541  0046F2  0EB8               	movlw	low __pidataBANK1
  1542  0046F4  6EF6               	movwf	tblptrl,c
  1543  0046F6  0E44               	movlw	high __pidataBANK1
  1544  0046F8  6EF7               	movwf	tblptrh,c
  1545  0046FA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1546  0046FC  6EF8               	movwf	tblptru,c
  1547  0046FE  EE01  F000         	lfsr	0,__pdataBANK1
  1548  004702  EE10 F077          	lfsr	1,119
  1549  004706                     copy_data0:
  1550  004706  0009               	tblrd		*+
  1551  004708  CFF5 FFEE          	movff	tablat,postinc0
  1552  00470C  50E5               	movf	postdec1,w,c
  1553  00470E  50E1               	movf	fsr1l,w,c
  1554  004710  E1FA               	bnz	copy_data0
  1555                           
  1556                           ; Initialize objects allocated to BANK0 (40 bytes)
  1557                           ; load TBLPTR registers with __pidataBANK0
  1558  004712  0ED6               	movlw	low __pidataBANK0
  1559  004714  6EF6               	movwf	tblptrl,c
  1560  004716  0E4D               	movlw	high __pidataBANK0
  1561  004718  6EF7               	movwf	tblptrh,c
  1562  00471A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1563  00471C  6EF8               	movwf	tblptru,c
  1564  00471E  EE00  F0B4         	lfsr	0,__pdataBANK0
  1565  004722  EE10 F028          	lfsr	1,40
  1566  004726                     copy_data1:
  1567  004726  0009               	tblrd		*+
  1568  004728  CFF5 FFEE          	movff	tablat,postinc0
  1569  00472C  50E5               	movf	postdec1,w,c
  1570  00472E  50E1               	movf	fsr1l,w,c
  1571  004730  E1FA               	bnz	copy_data1
  1572  004732                     end_of_initialization:
  1573                           	opt stack 0
  1574  004732                     __end_of__initialization:
  1575                           	opt stack 0
  1576  004732  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1577  004734  6EF8               	movwf	tblptru,c
  1578  004736  0100               	movlb	0
  1579  004738  EFFE  F00C         	goto	_main	;jump to C main() function
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postdec1	equ	0xFE5
  1587                           fsr1l	equ	0xFE1
  1588                           
  1589                           	psect	bssCOMRAM
  1590  000060                     __pbssCOMRAM:
  1591                           	opt stack 0
  1592  000060                     _Time_Elapsed:
  1593                           	opt stack 0
  1594  000060                     	ds	2
  1595  000062                     _txt:
  1596                           	opt stack 0
  1597  000062                     	ds	2
  1598  000064                     _alarm_hour:
  1599                           	opt stack 0
  1600  000064                     	ds	1
  1601  000065                     _alarm_minute:
  1602                           	opt stack 0
  1603  000065                     	ds	1
  1604  000066                     _alarm_second:
  1605                           	opt stack 0
  1606  000066                     	ds	1
  1607  000067                     _day:
  1608                           	opt stack 0
  1609  000067                     	ds	1
  1610  000068                     _duty_cycle:
  1611                           	opt stack 0
  1612  000068                     	ds	1
  1613  000069                     _found:
  1614                           	opt stack 0
  1615  000069                     	ds	1
  1616  00006A                     _hour:
  1617                           	opt stack 0
  1618  00006A                     	ds	1
  1619  00006B                     _minute:
  1620                           	opt stack 0
  1621  00006B                     	ds	1
  1622  00006C                     _month:
  1623                           	opt stack 0
  1624  00006C                     	ds	1
  1625  00006D                     _second:
  1626                           	opt stack 0
  1627  00006D                     	ds	1
  1628  00006E                     _setup_alarm_hour:
  1629                           	opt stack 0
  1630  00006E                     	ds	1
  1631  00006F                     _year:
  1632                           	opt stack 0
  1633  00006F                     	ds	1
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1l	equ	0xFE1
  1642                           
  1643                           	psect	bssBANK0
  1644  000080                     __pbssBANK0:
  1645                           	opt stack 0
  1646  000080                     _Nec_code:
  1647                           	opt stack 0
  1648  000080                     	ds	4
  1649  000084                     _volt:
  1650                           	opt stack 0
  1651  000084                     	ds	3
  1652  000087                     _ALARMEN:
  1653                           	opt stack 0
  1654  000087                     	ds	2
  1655  000089                     _DS1621_tempC:
  1656                           	opt stack 0
  1657  000089                     	ds	2
  1658  00008B                     _DS1621_tempF:
  1659                           	opt stack 0
  1660  00008B                     	ds	2
  1661  00008D                     _MATCHED:
  1662                           	opt stack 0
  1663  00008D                     	ds	2
  1664  00008F                     _alarm_mode:
  1665                           	opt stack 0
  1666  00008F                     	ds	2
  1667  000091                     _color:
  1668                           	opt stack 0
  1669  000091                     	ds	2
  1670  000093                     _nbr:
  1671                           	opt stack 0
  1672  000093                     	ds	2
  1673  000095                     _nec_ok:
  1674                           	opt stack 0
  1675  000095                     	ds	2
  1676  000097                     _rpm:
  1677                           	opt stack 0
  1678  000097                     	ds	2
  1679  000099                     _rps:
  1680                           	opt stack 0
  1681  000099                     	ds	2
  1682  00009B                     _HEATER:
  1683                           	opt stack 0
  1684  00009B                     	ds	1
  1685  00009C                     _INT1_flag:
  1686                           	opt stack 0
  1687  00009C                     	ds	1
  1688  00009D                     _In_Alarm_Time_Setup:
  1689                           	opt stack 0
  1690  00009D                     	ds	1
  1691  00009E                     _In_Heater_Temp_Setup:
  1692                           	opt stack 0
  1693  00009E                     	ds	1
  1694  00009F                     _In_Time_Setup:
  1695                           	opt stack 0
  1696  00009F                     	ds	1
  1697  0000A0                     _Nec_code1:
  1698                           	opt stack 0
  1699  0000A0                     	ds	1
  1700  0000A1                     _Nec_state:
  1701                           	opt stack 0
  1702  0000A1                     	ds	1
  1703  0000A2                     _Select_Alarm_Field:
  1704                           	opt stack 0
  1705  0000A2                     	ds	1
  1706  0000A3                     _Select_Field:
  1707                           	opt stack 0
  1708  0000A3                     	ds	1
  1709  0000A4                     _Select_Heater_Temp_Field:
  1710                           	opt stack 0
  1711  0000A4                     	ds	1
  1712  0000A5                     __tft_type:
  1713                           	opt stack 0
  1714  0000A5                     	ds	1
  1715  0000A6                     _alarm_date:
  1716                           	opt stack 0
  1717  0000A6                     	ds	1
  1718  0000A7                     _bit_count:
  1719                           	opt stack 0
  1720  0000A7                     	ds	1
  1721  0000A8                     _colstart:
  1722                           	opt stack 0
  1723  0000A8                     	ds	1
  1724  0000A9                     _dow:
  1725                           	opt stack 0
  1726  0000A9                     	ds	1
  1727  0000AA                     _rowstart:
  1728                           	opt stack 0
  1729  0000AA                     	ds	1
  1730  0000AB                     _setup_alarm_minute:
  1731                           	opt stack 0
  1732  0000AB                     	ds	1
  1733  0000AC                     _setup_alarm_second:
  1734                           	opt stack 0
  1735  0000AC                     	ds	1
  1736  0000AD                     _setup_day:
  1737                           	opt stack 0
  1738  0000AD                     	ds	1
  1739  0000AE                     _setup_heater_set_temp:
  1740                           	opt stack 0
  1741  0000AE                     	ds	1
  1742  0000AF                     _setup_hour:
  1743                           	opt stack 0
  1744  0000AF                     	ds	1
  1745  0000B0                     _setup_minute:
  1746                           	opt stack 0
  1747  0000B0                     	ds	1
  1748  0000B1                     _setup_month:
  1749                           	opt stack 0
  1750  0000B1                     	ds	1
  1751  0000B2                     _setup_second:
  1752                           	opt stack 0
  1753  0000B2                     	ds	1
  1754  0000B3                     _setup_year:
  1755                           	opt stack 0
  1756  0000B3                     	ds	1
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766                           	psect	dataBANK0
  1767  0000B4                     __pdataBANK0:
  1768                           	opt stack 0
  1769  0000B4                     _heater_set_temp:
  1770                           	opt stack 0
  1771  0000B4                     	ds	1
  1772  0000B5                     _tempSecond:
  1773                           	opt stack 0
  1774  0000B5                     	ds	1
  1775  0000B6                     _wrap:
  1776                           	opt stack 0
  1777  0000B6                     	ds	1
  1778  0000B7                     _Heater_Set_Temp_Txt:
  1779                           	opt stack 0
  1780  0000B7                     	ds	5
  1781  0000BC                     _RPM_Txt:
  1782                           	opt stack 0
  1783  0000BC                     	ds	5
  1784  0000C1                     _setup_heater_set_text:
  1785                           	opt stack 0
  1786  0000C1                     	ds	5
  1787  0000C6                     _Alarm_SW_Txt:
  1788                           	opt stack 0
  1789  0000C6                     	ds	4
  1790  0000CA                     _DC_Txt:
  1791                           	opt stack 0
  1792  0000CA                     	ds	4
  1793  0000CE                     _Heater_SW_Txt:
  1794                           	opt stack 0
  1795  0000CE                     	ds	4
  1796  0000D2                     _tempC:
  1797                           	opt stack 0
  1798  0000D2                     	ds	4
  1799  0000D6                     _tempF:
  1800                           	opt stack 0
  1801  0000D6                     	ds	4
  1802  0000DA                     _RTC_ALARM_Txt:
  1803                           	opt stack 0
  1804  0000DA                     	ds	2
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postdec1	equ	0xFE5
  1812                           fsr1l	equ	0xFE1
  1813                           
  1814                           	psect	dataBANK1
  1815  000100                     __pdataBANK1:
  1816                           	opt stack 0
  1817  000100                     _buffer:
  1818                           	opt stack 0
  1819  000100                     	ds	31
  1820  00011F                     _array1:
  1821                           	opt stack 0
  1822  00011F                     	ds	21
  1823  000134                     _D2:
  1824                           	opt stack 0
  1825  000134                     	ds	7
  1826  00013B                     _alarm_time:
  1827                           	opt stack 0
  1828  00013B                     	ds	9
  1829  000144                     _date:
  1830                           	opt stack 0
  1831  000144                     	ds	9
  1832  00014D                     _setup_alarm_time:
  1833                           	opt stack 0
  1834  00014D                     	ds	9
  1835  000156                     _setup_date:
  1836                           	opt stack 0
  1837  000156                     	ds	9
  1838  00015F                     _setup_time:
  1839                           	opt stack 0
  1840  00015F                     	ds	9
  1841  000168                     _time:
  1842                           	opt stack 0
  1843  000168                     	ds	9
  1844  000171                     _Volt_Txt:
  1845                           	opt stack 0
  1846  000171                     	ds	6
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1l	equ	0xFE1
  1855                           
  1856                           	psect	cstackBANK1
  1857  000177                     __pcstackBANK1:
  1858                           	opt stack 0
  1859  000177                     _printf$3273:
  1860                           	opt stack 0
  1861                           
  1862                           ; 3 bytes @ 0x0
  1863  000177                     	ds	3
  1864  00017A                     printf@idx:
  1865                           	opt stack 0
  1866                           
  1867                           ; 1 bytes @ 0x3
  1868  00017A                     	ds	1
  1869  00017B                     printf@ap:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x4
  1873  00017B                     	ds	2
  1874  00017D                     printf@prec:
  1875                           	opt stack 0
  1876                           
  1877                           ; 2 bytes @ 0x6
  1878  00017D                     	ds	2
  1879  00017F                     printf@tmpval:
  1880                           	opt stack 0
  1881                           
  1882                           ; 4 bytes @ 0x8
  1883  00017F                     	ds	4
  1884  000183                     printf@width:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0xC
  1888  000183                     	ds	2
  1889  000185                     printf@exp:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0xE
  1893  000185                     	ds	2
  1894  000187                     printf@val:
  1895                           	opt stack 0
  1896                           
  1897                           ; 4 bytes @ 0x10
  1898  000187                     	ds	4
  1899  00018B                     printf@flag:
  1900                           	opt stack 0
  1901                           
  1902                           ; 2 bytes @ 0x14
  1903  00018B                     	ds	2
  1904  00018D                     printf@fval:
  1905                           	opt stack 0
  1906                           
  1907                           ; 3 bytes @ 0x16
  1908  00018D                     	ds	3
  1909  000190                     printf@c:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x19
  1913  000190                     	ds	1
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           postinc0	equ	0xFEE
  1919                           wreg	equ	0xFE8
  1920                           postdec1	equ	0xFE5
  1921                           fsr1l	equ	0xFE1
  1922                           
  1923                           	psect	cstackBANK0
  1924  0000DC                     __pcstackBANK0:
  1925                           	opt stack 0
  1926  0000DC                     ?_printf:
  1927                           	opt stack 0
  1928  0000DC                     printf@f:
  1929                           	opt stack 0
  1930                           
  1931                           ; 2 bytes @ 0x0
  1932  0000DC                     	ds	14
  1933  0000EA                     ??_printf:
  1934                           
  1935                           ; 0 bytes @ 0xE
  1936  0000EA                     	ds	6
  1937  0000F0                     check_for_button_input@j:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x14
  1941  0000F0                     	ds	2
  1942  0000F2                     ??_Do_Setup_Heater_Temp:
  1943                           
  1944                           ; 0 bytes @ 0x16
  1945  0000F2                     	ds	2
  1946  0000F4                     ??_main:
  1947                           
  1948                           ; 0 bytes @ 0x18
  1949  0000F4                     	ds	2
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           
  1959                           	psect	cstackCOMRAM
  1960  000001                     __pcstackCOMRAM:
  1961                           	opt stack 0
  1962  000001                     ??_INT0_isr:
  1963  000001                     
  1964                           ; 2 bytes @ 0x0
  1965  000001                     	ds	2
  1966  000003                     ??_chkisr:
  1967                           
  1968                           ; 0 bytes @ 0x2
  1969  000003                     	ds	14
  1970  000011                     ??_Set_RGB_Color:
  1971  000011                     ??_bcd_2_dec:
  1972  000011                     ??_isdigit:
  1973  000011                     ?_strlen:
  1974                           	opt stack 0
  1975  000011                     ?_get_full_ADC:
  1976                           	opt stack 0
  1977  000011                     ?___wmul:
  1978                           	opt stack 0
  1979  000011                     ?___ftpack:
  1980                           	opt stack 0
  1981  000011                     ?___ftneg:
  1982                           	opt stack 0
  1983  000011                     ?__tdiv_to_l_:
  1984                           	opt stack 0
  1985  000011                     ?__div_to_l_:
  1986                           	opt stack 0
  1987  000011                     ?___lldiv:
  1988                           	opt stack 0
  1989  000011                     I2C_Read@ack:
  1990                           	opt stack 0
  1991  000011                     I2C_Write@outByte:
  1992                           	opt stack 0
  1993  000011                     putch@c:
  1994                           	opt stack 0
  1995  000011                     spiwrite@x:
  1996                           	opt stack 0
  1997  000011                     Wait_One_Sec@k:
  1998                           	opt stack 0
  1999  000011                     OpenUSART@spbrg:
  2000                           	opt stack 0
  2001  000011                     ___wmul@multiplier:
  2002                           	opt stack 0
  2003  000011                     strcpy@to:
  2004                           	opt stack 0
  2005  000011                     strlen@s:
  2006                           	opt stack 0
  2007  000011                     __div_to_l_@f1:
  2008                           	opt stack 0
  2009  000011                     ___ftpack@arg:
  2010                           	opt stack 0
  2011  000011                     __tdiv_to_l_@f1:
  2012                           	opt stack 0
  2013  000011                     ___ftge@ff1:
  2014                           	opt stack 0
  2015  000011                     ___ftneg@f1:
  2016                           	opt stack 0
  2017  000011                     I2C_Init@c:
  2018                           	opt stack 0
  2019  000011                     ___lldiv@dividend:
  2020                           	opt stack 0
  2021                           
  2022                           ; 4 bytes @ 0x10
  2023  000011                     	ds	1
  2024  000012                     I2C_Read@n:
  2025                           	opt stack 0
  2026  000012                     I2C_Write@n:
  2027                           	opt stack 0
  2028  000012                     spiwrite@spidata:
  2029                           	opt stack 0
  2030  000012                     Set_RGB_Color@color:
  2031                           	opt stack 0
  2032  000012                     _isdigit$2916:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x11
  2036  000012                     	ds	1
  2037  000013                     ??_strlen:
  2038  000013                     ??_get_full_ADC:
  2039  000013                     I2C_Read@inByte:
  2040                           	opt stack 0
  2041  000013                     I2C_Write_Address_Write_One_Byte@Address:
  2042                           	opt stack 0
  2043  000013                     I2C_Write_Cmd_Only@Cmd:
  2044                           	opt stack 0
  2045  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  2046                           	opt stack 0
  2047  000013                     write_command@cmd_:
  2048                           	opt stack 0
  2049  000013                     write_data@data_:
  2050                           	opt stack 0
  2051  000013                     OpenUSART@config:
  2052                           	opt stack 0
  2053  000013                     isdigit@c:
  2054                           	opt stack 0
  2055  000013                     bcd_2_dec@dec:
  2056                           	opt stack 0
  2057  000013                     ___wmul@multiplicand:
  2058                           	opt stack 0
  2059  000013                     strcpy@from:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x12
  2063  000013                     	ds	1
  2064  000014                     ?_DS1621_Read_Temp:
  2065                           	opt stack 0
  2066  000014                     I2C_Write_Address_Read_One_Byte@Address:
  2067                           	opt stack 0
  2068  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  2069                           	opt stack 0
  2070  000014                     I2C_Write_Cmd_Only@Device:
  2071                           	opt stack 0
  2072  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  2073                           	opt stack 0
  2074  000014                     DS3231_Read_Time@Address:
  2075                           	opt stack 0
  2076  000014                     DS3231_Read_Alarm_Time@Address:
  2077                           	opt stack 0
  2078  000014                     setAddrWindow@y0:
  2079                           	opt stack 0
  2080  000014                     ___ftpack@exp:
  2081                           	opt stack 0
  2082  000014                     __div_to_l_@f2:
  2083                           	opt stack 0
  2084  000014                     __tdiv_to_l_@f2:
  2085                           	opt stack 0
  2086  000014                     ___ftge@ff2:
  2087                           	opt stack 0
  2088                           
  2089                           ; 3 bytes @ 0x13
  2090  000014                     	ds	1
  2091  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  2092                           	opt stack 0
  2093  000015                     I2C_Write_Address_Write_One_Byte@Device:
  2094                           	opt stack 0
  2095  000015                     I2C_Write_Cmd_Write_Data@Device:
  2096                           	opt stack 0
  2097  000015                     DS3231_Read_Time@Device:
  2098                           	opt stack 0
  2099  000015                     DS3231_Read_Alarm_Time@Device:
  2100                           	opt stack 0
  2101  000015                     setAddrWindow@x1:
  2102                           	opt stack 0
  2103  000015                     bcd_2_dec@bcd:
  2104                           	opt stack 0
  2105  000015                     ___ftpack@sign:
  2106                           	opt stack 0
  2107  000015                     get_full_ADC@result:
  2108                           	opt stack 0
  2109  000015                     ___wmul@product:
  2110                           	opt stack 0
  2111  000015                     strcpy@cp:
  2112                           	opt stack 0
  2113  000015                     strlen@cp:
  2114                           	opt stack 0
  2115  000015                     ___lldiv@divisor:
  2116                           	opt stack 0
  2117                           
  2118                           ; 4 bytes @ 0x14
  2119  000015                     	ds	1
  2120  000016                     ??___ftpack:
  2121  000016                     I2C_Write_Address_Read_One_Byte@Device:
  2122                           	opt stack 0
  2123  000016                     DS1621_Init@Device:
  2124                           	opt stack 0
  2125  000016                     DS1621_Read_Temp@Cmd:
  2126                           	opt stack 0
  2127  000016                     setAddrWindow@y1:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x15
  2131  000016                     	ds	1
  2132  000017                     ??__tdiv_to_l_:
  2133  000017                     ??___ftge:
  2134  000017                     ?___awdiv:
  2135                           	opt stack 0
  2136  000017                     DS1621_Read_Temp@Data_Ret:
  2137                           	opt stack 0
  2138  000017                     DS3231_Init@Address_7:
  2139                           	opt stack 0
  2140  000017                     setAddrWindow@x0:
  2141                           	opt stack 0
  2142  000017                     delay_ms@ms:
  2143                           	opt stack 0
  2144  000017                     ___awdiv@dividend:
  2145                           	opt stack 0
  2146  000017                     __div_to_l_@quot:
  2147                           	opt stack 0
  2148                           
  2149                           ; 4 bytes @ 0x16
  2150  000017                     	ds	1
  2151  000018                     DS1621_Read_Temp@Device:
  2152                           	opt stack 0
  2153  000018                     DS3231_Init@Address_E:
  2154                           	opt stack 0
  2155  000018                     drawPixel@y:
  2156                           	opt stack 0
  2157  000018                     drawFastVLine@y:
  2158                           	opt stack 0
  2159  000018                     fillRectangle@y:
  2160                           	opt stack 0
  2161                           
  2162                           ; 1 bytes @ 0x17
  2163  000018                     	ds	1
  2164  000019                     ??_delay_ms:
  2165  000019                     ?___awtoft:
  2166                           	opt stack 0
  2167  000019                     ?___lbtoft:
  2168                           	opt stack 0
  2169  000019                     ?___lltoft:
  2170                           	opt stack 0
  2171  000019                     DS3231_Init@control_E:
  2172                           	opt stack 0
  2173  000019                     drawFastVLine@h:
  2174                           	opt stack 0
  2175  000019                     fillRectangle@w:
  2176                           	opt stack 0
  2177  000019                     drawPixel@color:
  2178                           	opt stack 0
  2179  000019                     ___awdiv@divisor:
  2180                           	opt stack 0
  2181  000019                     ___awtoft@c:
  2182                           	opt stack 0
  2183  000019                     ___lldiv@quotient:
  2184                           	opt stack 0
  2185  000019                     ___lltoft@c:
  2186                           	opt stack 0
  2187                           
  2188                           ; 4 bytes @ 0x18
  2189  000019                     	ds	1
  2190  00001A                     DS3231_Init@Device:
  2191                           	opt stack 0
  2192  00001A                     fillRectangle@h:
  2193                           	opt stack 0
  2194  00001A                     drawFastVLine@color:
  2195                           	opt stack 0
  2196  00001A                     __tdiv_to_l_@quot:
  2197                           	opt stack 0
  2198                           
  2199                           ; 4 bytes @ 0x19
  2200  00001A                     	ds	1
  2201  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2202                           	opt stack 0
  2203  00001B                     DS3231_Turn_On_Alarm@Address_E:
  2204                           	opt stack 0
  2205  00001B                     drawPixel@x:
  2206                           	opt stack 0
  2207  00001B                     ___awdiv@counter:
  2208                           	opt stack 0
  2209  00001B                     __div_to_l_@cntr:
  2210                           	opt stack 0
  2211  00001B                     delay_ms@count:
  2212                           	opt stack 0
  2213  00001B                     fillRectangle@color:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0x1A
  2217  00001B                     	ds	1
  2218  00001C                     ??_drawFastVLine:
  2219  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2220                           	opt stack 0
  2221  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2222                           	opt stack 0
  2223  00001C                     ___awdiv@sign:
  2224                           	opt stack 0
  2225  00001C                     ___awtoft@sign:
  2226                           	opt stack 0
  2227  00001C                     __div_to_l_@exp1:
  2228                           	opt stack 0
  2229  00001C                     ___lbtoft@c:
  2230                           	opt stack 0
  2231  00001C                     drawCircle@x0:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x1B
  2235  00001C                     	ds	1
  2236  00001D                     ??_fillRectangle:
  2237  00001D                     ??___lltoft:
  2238  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2239                           	opt stack 0
  2240  00001D                     DS3231_Turn_On_Alarm@control_E:
  2241                           	opt stack 0
  2242  00001D                     ___lldiv@counter:
  2243                           	opt stack 0
  2244  00001D                     ___awdiv@quotient:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x1C
  2248  00001D                     	ds	1
  2249  00001E                     ?___llmod:
  2250                           	opt stack 0
  2251  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2252                           	opt stack 0
  2253  00001E                     DS3231_Turn_On_Alarm@control_F:
  2254                           	opt stack 0
  2255  00001E                     __tdiv_to_l_@cntr:
  2256                           	opt stack 0
  2257  00001E                     drawCircle@y0:
  2258                           	opt stack 0
  2259  00001E                     ___llmod@dividend:
  2260                           	opt stack 0
  2261                           
  2262                           ; 4 bytes @ 0x1D
  2263  00001E                     	ds	1
  2264  00001F                     ?_get_duty_cycle:
  2265                           	opt stack 0
  2266  00001F                     ?_get_RPM:
  2267                           	opt stack 0
  2268  00001F                     ?___ftmul:
  2269                           	opt stack 0
  2270  00001F                     DS3231_Turn_Off_Alarm@Device:
  2271                           	opt stack 0
  2272  00001F                     DS3231_Turn_On_Alarm@Device:
  2273                           	opt stack 0
  2274  00001F                     __tdiv_to_l_@exp1:
  2275                           	opt stack 0
  2276  00001F                     get_duty_cycle@temp:
  2277                           	opt stack 0
  2278  00001F                     ___ftmul@f1:
  2279                           	opt stack 0
  2280                           
  2281                           ; 3 bytes @ 0x1E
  2282  00001F                     	ds	1
  2283  000020                     drawFastVLine@hi:
  2284                           	opt stack 0
  2285  000020                     drawCircle@r:
  2286                           	opt stack 0
  2287                           
  2288                           ; 2 bytes @ 0x1F
  2289  000020                     	ds	1
  2290  000021                     drawFastVLine@lo:
  2291                           	opt stack 0
  2292  000021                     fillRectangle@hi:
  2293                           	opt stack 0
  2294  000021                     ___lltoft@exp:
  2295                           	opt stack 0
  2296  000021                     get_duty_cycle@set_temp:
  2297                           	opt stack 0
  2298  000021                     get_RPM@RPS:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x20
  2302  000021                     	ds	1
  2303  000022                     drawFastVLine@x:
  2304                           	opt stack 0
  2305  000022                     fillRectangle@lo:
  2306                           	opt stack 0
  2307  000022                     drawCircle@color:
  2308                           	opt stack 0
  2309  000022                     ___ftmul@f2:
  2310                           	opt stack 0
  2311  000022                     ___llmod@divisor:
  2312                           	opt stack 0
  2313                           
  2314                           ; 4 bytes @ 0x21
  2315  000022                     	ds	1
  2316  000023                     ??_get_duty_cycle:
  2317  000023                     fillRect@y:
  2318                           	opt stack 0
  2319  000023                     fillRectangle@x:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x22
  2323  000023                     	ds	1
  2324  000024                     ??_drawCircle:
  2325  000024                     fillRect@w:
  2326                           	opt stack 0
  2327  000024                     fillScreen@color:
  2328                           	opt stack 0
  2329                           
  2330                           ; 2 bytes @ 0x23
  2331  000024                     	ds	1
  2332  000025                     ??___ftmul:
  2333  000025                     fillRect@h:
  2334                           	opt stack 0
  2335  000025                     get_duty_cycle@diff:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x24
  2339  000025                     	ds	1
  2340  000026                     ___llmod@counter:
  2341                           	opt stack 0
  2342  000026                     fillRect@color:
  2343                           	opt stack 0
  2344  000026                     drawCircle@ddF_x:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x25
  2348  000026                     	ds	2
  2349  000028                     ??_fillRect:
  2350  000028                     ___ftmul@exp:
  2351                           	opt stack 0
  2352  000028                     drawCircle@ddF_y:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x27
  2356  000028                     	ds	1
  2357  000029                     ___ftmul@f3_as_product:
  2358                           	opt stack 0
  2359                           
  2360                           ; 3 bytes @ 0x28
  2361  000029                     	ds	1
  2362  00002A                     drawCircle@f:
  2363                           	opt stack 0
  2364                           
  2365                           ; 2 bytes @ 0x29
  2366  00002A                     	ds	1
  2367  00002B                     fillRect@x:
  2368                           	opt stack 0
  2369                           
  2370                           ; 1 bytes @ 0x2A
  2371  00002B                     	ds	1
  2372  00002C                     ___ftmul@cntr:
  2373                           	opt stack 0
  2374  00002C                     fillRect@i:
  2375                           	opt stack 0
  2376  00002C                     drawCircle@x:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x2B
  2380  00002C                     	ds	1
  2381  00002D                     ___ftmul@sign:
  2382                           	opt stack 0
  2383                           
  2384                           ; 1 bytes @ 0x2C
  2385  00002D                     	ds	1
  2386  00002E                     ?___ftdiv:
  2387                           	opt stack 0
  2388  00002E                     ?___fttol:
  2389                           	opt stack 0
  2390  00002E                     drawChar@y:
  2391                           	opt stack 0
  2392  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2393                           	opt stack 0
  2394  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2395                           	opt stack 0
  2396  00002E                     drawCircle@y:
  2397                           	opt stack 0
  2398  00002E                     ___ftdiv@f1:
  2399                           	opt stack 0
  2400  00002E                     ___fttol@f1:
  2401                           	opt stack 0
  2402                           
  2403                           ; 3 bytes @ 0x2D
  2404  00002E                     	ds	1
  2405  00002F                     drawChar@c:
  2406                           	opt stack 0
  2407  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2408                           	opt stack 0
  2409  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x2E
  2413  00002F                     	ds	1
  2414  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2415                           	opt stack 0
  2416  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2417                           	opt stack 0
  2418  000030                     drawChar@color:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x2F
  2422  000030                     	ds	1
  2423  000031                     ___ftdiv@f2:
  2424                           	opt stack 0
  2425                           
  2426                           ; 3 bytes @ 0x30
  2427  000031                     	ds	1
  2428  000032                     ??___fttol:
  2429  000032                     drawChar@bg:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x31
  2433  000032                     	ds	2
  2434  000034                     ??___ftdiv:
  2435  000034                     drawChar@size:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0x33
  2439  000034                     	ds	1
  2440  000035                     drawChar@line:
  2441                           	opt stack 0
  2442                           
  2443                           ; 1 bytes @ 0x34
  2444  000035                     	ds	1
  2445  000036                     drawChar@x:
  2446                           	opt stack 0
  2447                           
  2448                           ; 1 bytes @ 0x35
  2449  000036                     	ds	1
  2450  000037                     drawChar@j:
  2451                           	opt stack 0
  2452  000037                     ___ftdiv@cntr:
  2453                           	opt stack 0
  2454  000037                     ___fttol@sign1:
  2455                           	opt stack 0
  2456                           
  2457                           ; 1 bytes @ 0x36
  2458  000037                     	ds	1
  2459  000038                     drawChar@i:
  2460                           	opt stack 0
  2461  000038                     ___ftdiv@f3:
  2462                           	opt stack 0
  2463  000038                     ___fttol@lval:
  2464                           	opt stack 0
  2465                           
  2466                           ; 4 bytes @ 0x37
  2467  000038                     	ds	1
  2468  000039                     drawtext@y:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x38
  2472  000039                     	ds	1
  2473  00003A                     drawtext@_text:
  2474                           	opt stack 0
  2475                           
  2476                           ; 2 bytes @ 0x39
  2477  00003A                     	ds	1
  2478  00003B                     ___ftdiv@exp:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x3A
  2482  00003B                     	ds	1
  2483  00003C                     ___ftdiv@sign:
  2484                           	opt stack 0
  2485  00003C                     ___fttol@exp1:
  2486                           	opt stack 0
  2487  00003C                     drawtext@color:
  2488                           	opt stack 0
  2489                           
  2490                           ; 2 bytes @ 0x3B
  2491  00003C                     	ds	1
  2492  00003D                     ??_do_update_pwm:
  2493  00003D                     ?___awmod:
  2494                           	opt stack 0
  2495  00003D                     ?_read_volt:
  2496                           	opt stack 0
  2497  00003D                     ___awmod@dividend:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x3C
  2501  00003D                     	ds	1
  2502  00003E                     drawtext@bg:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0x3D
  2506  00003E                     	ds	1
  2507  00003F                     ___awmod@divisor:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0x3E
  2511  00003F                     	ds	1
  2512  000040                     drawtext@size:
  2513                           	opt stack 0
  2514  000040                     do_update_pwm@dc_f:
  2515                           	opt stack 0
  2516  000040                     read_volt@volt:
  2517                           	opt stack 0
  2518                           
  2519                           ; 3 bytes @ 0x3F
  2520  000040                     	ds	1
  2521  000041                     ??_drawtext:
  2522  000041                     ___awmod@counter:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x40
  2526  000041                     	ds	1
  2527  000042                     ___awmod@sign:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x41
  2531  000042                     	ds	1
  2532  000043                     ?_dec_2_bcd:
  2533                           	opt stack 0
  2534  000043                     ?_fround:
  2535                           	opt stack 0
  2536  000043                     ?_scale:
  2537                           	opt stack 0
  2538  000043                     drawtext@x:
  2539                           	opt stack 0
  2540  000043                     do_update_pwm@duty_cycle:
  2541                           	opt stack 0
  2542  000043                     read_volt@nStep:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x42
  2546  000043                     	ds	1
  2547  000044                     drawtext@textsize:
  2548                           	opt stack 0
  2549  000044                     do_update_pwm@dc_I:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x43
  2553  000044                     	ds	1
  2554  000045                     ??_dec_2_bcd:
  2555                           
  2556                           ; 0 bytes @ 0x44
  2557  000045                     	ds	1
  2558  000046                     drawtext@i:
  2559                           	opt stack 0
  2560  000046                     _fround$3271:
  2561                           	opt stack 0
  2562  000046                     _scale$3272:
  2563                           	opt stack 0
  2564                           
  2565                           ; 3 bytes @ 0x45
  2566  000046                     	ds	1
  2567  000047                     dec_2_bcd@bcd:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x46
  2571  000047                     	ds	1
  2572  000048                     drawtext@cursor_y:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x47
  2576  000048                     	ds	1
  2577  000049                     drawtext@cursor_x:
  2578                           	opt stack 0
  2579  000049                     dec_2_bcd@dec:
  2580                           	opt stack 0
  2581  000049                     scale@scl:
  2582                           	opt stack 0
  2583  000049                     _fround$3270:
  2584                           	opt stack 0
  2585                           
  2586                           ; 3 bytes @ 0x48
  2587  000049                     	ds	1
  2588  00004A                     ??_Update_Screen:
  2589  00004A                     DS3231_Write_Time@Device:
  2590                           	opt stack 0
  2591  00004A                     DS3231_Write_Alarm_Time@Device:
  2592                           	opt stack 0
  2593  00004A                     Update_Setup_Heater_Screen@dc_char1:
  2594                           	opt stack 0
  2595                           
  2596                           ; 1 bytes @ 0x49
  2597  00004A                     	ds	1
  2598  00004B                     DS3231_Write_Time@Address:
  2599                           	opt stack 0
  2600  00004B                     DS3231_Write_Alarm_Time@Address:
  2601                           	opt stack 0
  2602  00004B                     Update_Setup_Heater_Screen@dc_char2:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x4A
  2606  00004B                     	ds	1
  2607  00004C                     Update_Setup_Heater_Screen@dc_char3:
  2608                           	opt stack 0
  2609  00004C                     fround@prec:
  2610                           	opt stack 0
  2611  00004C                     _Update_Screen$3269:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x4B
  2615  00004C                     	ds	1
  2616  00004D                     ?___ftadd:
  2617                           	opt stack 0
  2618  00004D                     ___ftadd@f1:
  2619                           	opt stack 0
  2620                           
  2621                           ; 3 bytes @ 0x4C
  2622  00004D                     	ds	1
  2623  00004E                     Update_Screen@neg_tempF:
  2624                           	opt stack 0
  2625                           
  2626                           ; 2 bytes @ 0x4D
  2627  00004E                     	ds	2
  2628  000050                     Update_Screen@neg_DS1621_tempC:
  2629                           	opt stack 0
  2630  000050                     ___ftadd@f2:
  2631                           	opt stack 0
  2632                           
  2633                           ; 3 bytes @ 0x4F
  2634  000050                     	ds	3
  2635  000053                     ??___ftadd:
  2636                           
  2637                           ; 0 bytes @ 0x52
  2638  000053                     	ds	3
  2639  000056                     ___ftadd@sign:
  2640                           	opt stack 0
  2641                           
  2642                           ; 1 bytes @ 0x55
  2643  000056                     	ds	1
  2644  000057                     ___ftadd@exp2:
  2645                           	opt stack 0
  2646                           
  2647                           ; 1 bytes @ 0x56
  2648  000057                     	ds	1
  2649  000058                     ___ftadd@exp1:
  2650                           	opt stack 0
  2651                           
  2652                           ; 1 bytes @ 0x57
  2653  000058                     	ds	1
  2654  000059                     ?___ftsub:
  2655                           	opt stack 0
  2656  000059                     ___ftsub@f1:
  2657                           	opt stack 0
  2658                           
  2659                           ; 3 bytes @ 0x58
  2660  000059                     	ds	3
  2661  00005C                     ___ftsub@f2:
  2662                           	opt stack 0
  2663                           
  2664                           ; 3 bytes @ 0x5B
  2665  00005C                     	ds	3
  2666  00005F                     
  2667                           ; 0 bytes @ 0x5E
  2668  00005F                     	ds	1
  2669  000060                     tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           postinc0	equ	0xFEE
  2674                           wreg	equ	0xFE8
  2675                           postdec1	equ	0xFE5
  2676                           fsr1l	equ	0xFE1
  2677                           
  2678                           ; 0 bytes @ 0x5F
  2679 ;;
  2680 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2681 ;;
  2682 ;; *************** function _main *****************
  2683 ;; Defined at:
  2684 ;;		line 120 in file "Main.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;		None
  2689 ;; Return value:  Size  Location     Type
  2690 ;;		None               void
  2691 ;; Registers used:
  2692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2693 ;; Tracked objects:
  2694 ;;		On entry : 0/0
  2695 ;;		On exit  : 0/0
  2696 ;;		Unchanged: 0/0
  2697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;Total ram usage:        2 bytes
  2703 ;; Hardware stack levels required when called:   13
  2704 ;; This function calls:
  2705 ;;		_DS1621_Read_Temp
  2706 ;;		_DS3231_Read_Alarm_Time
  2707 ;;		_DS3231_Read_Time
  2708 ;;		_DS3231_Turn_Off_Alarm
  2709 ;;		_Deactivate_Buzzer
  2710 ;;		_Do_Beep_Bad
  2711 ;;		_Do_Beep_Good
  2712 ;;		_Do_Init
  2713 ;;		_Do_Setup_Alarm_Time
  2714 ;;		_Do_Setup_Heater_Temp
  2715 ;;		_Do_Setup_Time
  2716 ;;		_Initialize_Screen
  2717 ;;		_Monitor_Heater
  2718 ;;		_Set_RGB_Color
  2719 ;;		_Test_Alarm
  2720 ;;		_Toggle_Heater
  2721 ;;		_Update_Screen
  2722 ;;		___awdiv
  2723 ;;		___wmul
  2724 ;;		_check_for_button_input
  2725 ;;		_do_update_pwm
  2726 ;;		_get_RPM
  2727 ;;		_printf
  2728 ;;		_read_volt
  2729 ;; This function is called by:
  2730 ;;		Startup code after reset
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text0
  2735  0019FC                     __ptext0:
  2736                           	opt stack 0
  2737  0019FC                     _main:
  2738                           	opt stack 18
  2739                           
  2740                           ;Main.c: 124: Do_Init();
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;incstack = 0
  2744  0019FC  EC9E  F023         	call	_Do_Init	;wreg free
  2745                           
  2746                           ;Main.c: 125: Initialize_Screen();
  2747  001A00  EC3E  F00B         	call	_Initialize_Screen	;wreg free
  2748                           
  2749                           ;Main.c: 126: DS3231_Turn_Off_Alarm();
  2750  001A04  ECDA  F024         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2751                           
  2752                           ;Main.c: 127: DS3231_Read_Alarm_Time();
  2753  001A08  EC2C  F025         	call	_DS3231_Read_Alarm_Time	;wreg free
  2754                           
  2755                           ;Main.c: 129: tempSecond = 0xff;
  2756  001A0C  0100               	movlb	0	; () banked
  2757  001A0E  69B5               	setf	_tempSecond& (0+255),b
  2758  001A10  D000               	goto	l10806
  2759  001A12                     l10806:
  2760                           
  2761                           ;Main.c: 131: {
  2762                           ;Main.c: 132: DS3231_Read_Time();
  2763  001A12  EC08  F023         	call	_DS3231_Read_Time	;wreg free
  2764                           
  2765                           ;Main.c: 134: if(tempSecond != second)
  2766  001A16  506D               	movf	_second,w,c
  2767  001A18  0100               	movlb	0	; () banked
  2768  001A1A  19B5               	xorwf	_tempSecond& (0+255),w,b
  2769  001A1C  B4D8               	btfsc	status,2,c
  2770  001A1E  D0C0               	goto	l10838
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;Main.c: 135: {
  2774                           ;Main.c: 136: tempSecond = second;
  2775  001A20  C06D  F0B5         	movff	_second,_tempSecond
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;Main.c: 137: rpm = get_RPM();
  2779  001A24  ECBE  F025         	call	_get_RPM	;wreg free
  2780  001A28  C01F  F097         	movff	?_get_RPM,_rpm
  2781  001A2C  C020  F098         	movff	?_get_RPM+1,_rpm+1
  2782                           
  2783                           ;Main.c: 138: volt = read_volt();
  2784  001A30  EC3B  F023         	call	_read_volt	;wreg free
  2785  001A34  C03D  F084         	movff	?_read_volt,_volt
  2786  001A38  C03E  F085         	movff	?_read_volt+1,_volt+1
  2787  001A3C  C03F  F086         	movff	?_read_volt+2,_volt+2
  2788                           
  2789                           ;Main.c: 139: printf("Voltage = %f\r\n", volt);
  2790  001A40  0E5F               	movlw	low STR_3
  2791  001A42  0100               	movlb	0	; () banked
  2792  001A44  6FDC               	movwf	printf@f& (0+255),b
  2793  001A46  0EFF               	movlw	high STR_3
  2794  001A48  0100               	movlb	0	; () banked
  2795  001A4A  6FDD               	movwf	(printf@f+1)& (0+255),b
  2796  001A4C  C084  F0DE         	movff	_volt,?_printf+2
  2797  001A50  C085  F0DF         	movff	_volt+1,?_printf+3
  2798  001A54  C086  F0E0         	movff	_volt+2,?_printf+4
  2799  001A58  EC0E  F000         	call	_printf	;wreg free
  2800                           
  2801                           ;Main.c: 140: DS1621_tempC = DS1621_Read_Temp();
  2802  001A5C  EC58  F026         	call	_DS1621_Read_Temp	;wreg free
  2803  001A60  C014  F089         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2804  001A64  C015  F08A         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2805                           
  2806                           ;Main.c: 141: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tempC &
      +                           0x7f);
  2807  001A68  0100               	movlb	0	; () banked
  2808  001A6A  AF89               	btfss	_DS1621_tempC& (0+255),7,b
  2809  001A6C  D01D               	goto	l10822
  2810                           
  2811                           ; BSR set to: 0
  2812  001A6E  C089  F0F4         	movff	_DS1621_tempC,??_main
  2813  001A72  C08A  F0F5         	movff	_DS1621_tempC+1,??_main+1
  2814  001A76  0100               	movlb	0	; () banked
  2815  001A78  1FF4               	comf	??_main& (0+255),f,b
  2816  001A7A  1FF5               	comf	(??_main+1)& (0+255),f,b
  2817  001A7C  4BF4               	infsnz	??_main& (0+255),f,b
  2818  001A7E  2BF5               	incf	(??_main+1)& (0+255),f,b
  2819  001A80  0E80               	movlw	128
  2820  001A82  0100               	movlb	0	; () banked
  2821  001A84  27F4               	addwf	??_main& (0+255),f,b
  2822  001A86  0E00               	movlw	0
  2823  001A88  23F5               	addwfc	(??_main+1)& (0+255),f,b
  2824  001A8A  0E7F               	movlw	127
  2825  001A8C  0100               	movlb	0	; () banked
  2826  001A8E  17F4               	andwf	??_main& (0+255),f,b
  2827  001A90  0E00               	movlw	0
  2828  001A92  17F5               	andwf	(??_main+1)& (0+255),f,b
  2829  001A94  0100               	movlb	0	; () banked
  2830  001A96  1FF4               	comf	??_main& (0+255),f,b
  2831  001A98  1FF5               	comf	(??_main+1)& (0+255),f,b
  2832  001A9A  4BF4               	infsnz	??_main& (0+255),f,b
  2833  001A9C  2BF5               	incf	(??_main+1)& (0+255),f,b
  2834  001A9E  C0F4  F089         	movff	??_main,_DS1621_tempC
  2835  001AA2  C0F5  F08A         	movff	??_main+1,_DS1621_tempC+1
  2836  001AA6  D000               	goto	l10822
  2837  001AA8                     l10822:
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;Main.c: 142: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2841  001AA8  C089  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2842  001AAC  C08A  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2843  001AB0  0E00               	movlw	0
  2844  001AB2  6E14               	movwf	___wmul@multiplicand+1,c
  2845  001AB4  0E09               	movlw	9
  2846  001AB6  6E13               	movwf	___wmul@multiplicand,c
  2847  001AB8  ECFF  F026         	call	___wmul	;wreg free
  2848  001ABC  C011  F017         	movff	?___wmul,___awdiv@dividend
  2849  001AC0  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2850  001AC4  0E00               	movlw	0
  2851  001AC6  6E1A               	movwf	___awdiv@divisor+1,c
  2852  001AC8  0E05               	movlw	5
  2853  001ACA  6E19               	movwf	___awdiv@divisor,c
  2854  001ACC  ECE4  F01F         	call	___awdiv	;wreg free
  2855  001AD0  0E20               	movlw	32
  2856  001AD2  2417               	addwf	?___awdiv,w,c
  2857  001AD4  0100               	movlb	0	; () banked
  2858  001AD6  6F8B               	movwf	_DS1621_tempF& (0+255),b
  2859  001AD8  0E00               	movlw	0
  2860  001ADA  2018               	addwfc	?___awdiv+1,w,c
  2861  001ADC  0100               	movlb	0	; () banked
  2862  001ADE  6F8C               	movwf	(_DS1621_tempF+1)& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;Main.c: 144: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2866  001AE0  0E7C               	movlw	low STR_4
  2867  001AE2  0100               	movlb	0	; () banked
  2868  001AE4  6FDC               	movwf	printf@f& (0+255),b
  2869  001AE6  0EFE               	movlw	high STR_4
  2870  001AE8  0100               	movlb	0	; () banked
  2871  001AEA  6FDD               	movwf	(printf@f+1)& (0+255),b
  2872  001AEC  C06A  F0DE         	movff	_hour,?_printf+2
  2873  001AF0  0100               	movlb	0	; () banked
  2874  001AF2  6BDF               	clrf	(?_printf+3)& (0+255),b
  2875  001AF4  C06B  F0E0         	movff	_minute,?_printf+4
  2876  001AF8  0100               	movlb	0	; () banked
  2877  001AFA  6BE1               	clrf	(?_printf+5)& (0+255),b
  2878  001AFC  C06D  F0E2         	movff	_second,?_printf+6
  2879  001B00  0100               	movlb	0	; () banked
  2880  001B02  6BE3               	clrf	(?_printf+7)& (0+255),b
  2881  001B04  C06C  F0E4         	movff	_month,?_printf+8
  2882  001B08  0100               	movlb	0	; () banked
  2883  001B0A  6BE5               	clrf	(?_printf+9)& (0+255),b
  2884  001B0C  C067  F0E6         	movff	_day,?_printf+10
  2885  001B10  0100               	movlb	0	; () banked
  2886  001B12  6BE7               	clrf	(?_printf+11)& (0+255),b
  2887  001B14  C06F  F0E8         	movff	_year,?_printf+12
  2888  001B18  0100               	movlb	0	; () banked
  2889  001B1A  6BE9               	clrf	(?_printf+13)& (0+255),b
  2890  001B1C  EC0E  F000         	call	_printf	;wreg free
  2891                           
  2892                           ;Main.c: 145: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2893  001B20  0EC8               	movlw	low STR_5
  2894  001B22  0100               	movlb	0	; () banked
  2895  001B24  6FDC               	movwf	printf@f& (0+255),b
  2896  001B26  0EFE               	movlw	high STR_5
  2897  001B28  0100               	movlb	0	; () banked
  2898  001B2A  6FDD               	movwf	(printf@f+1)& (0+255),b
  2899  001B2C  C089  F0DE         	movff	_DS1621_tempC,?_printf+2
  2900  001B30  C08A  F0DF         	movff	_DS1621_tempC+1,?_printf+3
  2901  001B34  C08B  F0E0         	movff	_DS1621_tempF,?_printf+4
  2902  001B38  C08C  F0E1         	movff	_DS1621_tempF+1,?_printf+5
  2903  001B3C  EC0E  F000         	call	_printf	;wreg free
  2904                           
  2905                           ;Main.c: 146: printf ("alarm = %d Heater = %d ", PORTAbits.RA5, HEATER);
  2906  001B40  0E9A               	movlw	low STR_6
  2907  001B42  0100               	movlb	0	; () banked
  2908  001B44  6FDC               	movwf	printf@f& (0+255),b
  2909  001B46  0EFE               	movlw	high STR_6
  2910  001B48  0100               	movlb	0	; () banked
  2911  001B4A  6FDD               	movwf	(printf@f+1)& (0+255),b
  2912  001B4C  AA80               	btfss	3968,5,c	;volatile
  2913  001B4E  D004               	goto	u9350
  2914  001B50  0100               	movlb	0	; () banked
  2915  001B52  6BF4               	clrf	??_main& (0+255),b
  2916  001B54  2BF4               	incf	??_main& (0+255),f,b
  2917  001B56  D002               	goto	u9358
  2918  001B58                     u9350:
  2919  001B58  0100               	movlb	0	; () banked
  2920  001B5A  6BF4               	clrf	??_main& (0+255),b
  2921  001B5C                     u9358:
  2922  001B5C  0100               	movlb	0	; () banked
  2923  001B5E  51F4               	movf	??_main& (0+255),w,b
  2924  001B60  0100               	movlb	0	; () banked
  2925  001B62  6FDE               	movwf	(?_printf+2)& (0+255),b
  2926  001B64  6BDF               	clrf	(?_printf+3)& (0+255),b
  2927  001B66  C09B  F0E0         	movff	_HEATER,?_printf+4
  2928  001B6A  0100               	movlb	0	; () banked
  2929  001B6C  6BE1               	clrf	(?_printf+5)& (0+255),b
  2930  001B6E  EC0E  F000         	call	_printf	;wreg free
  2931                           
  2932                           ;Main.c: 147: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2933  001B72  0EF1               	movlw	low STR_7
  2934  001B74  0100               	movlb	0	; () banked
  2935  001B76  6FDC               	movwf	printf@f& (0+255),b
  2936  001B78  0EFE               	movlw	high STR_7
  2937  001B7A  0100               	movlb	0	; () banked
  2938  001B7C  6FDD               	movwf	(printf@f+1)& (0+255),b
  2939  001B7E  C097  F0DE         	movff	_rpm,?_printf+2
  2940  001B82  C098  F0DF         	movff	_rpm+1,?_printf+3
  2941  001B86  C068  F0E0         	movff	_duty_cycle,?_printf+4
  2942  001B8A  0100               	movlb	0	; () banked
  2943  001B8C  6BE1               	clrf	(?_printf+5)& (0+255),b
  2944  001B8E  EC0E  F000         	call	_printf	;wreg free
  2945                           
  2946                           ;Main.c: 149: Monitor_Heater();
  2947  001B92  EC4E  F01F         	call	_Monitor_Heater	;wreg free
  2948                           
  2949                           ;Main.c: 150: Test_Alarm();
  2950  001B96  ECFA  F014         	call	_Test_Alarm	;wreg free
  2951                           
  2952                           ;Main.c: 151: Update_Screen();
  2953  001B9A  EC30  F006         	call	_Update_Screen	;wreg free
  2954  001B9E  D000               	goto	l10838
  2955  001BA0                     l10838:
  2956                           
  2957                           ;Main.c: 152: }
  2958                           ;Main.c: 154: if (check_for_button_input() == 1)
  2959  001BA0  ECC4  F020         	call	_check_for_button_input	;wreg free
  2960  001BA4  06E8               	decf	wreg,f,c
  2961  001BA6  A4D8               	btfss	status,2,c
  2962  001BA8  D02C               	goto	l10864
  2963                           
  2964                           ;Main.c: 155: {
  2965                           ;Main.c: 157: nec_ok = 0;
  2966  001BAA  0E00               	movlw	0
  2967  001BAC  0100               	movlb	0	; () banked
  2968  001BAE  6F96               	movwf	(_nec_ok+1)& (0+255),b
  2969  001BB0  0E00               	movlw	0
  2970  001BB2  6F95               	movwf	_nec_ok& (0+255),b
  2971                           
  2972                           ;Main.c: 158: switch (found)
  2973  001BB4  D017               	goto	l10862
  2974  001BB6                     l10842:
  2975                           
  2976                           ;Main.c: 161: Do_Beep_Good();
  2977  001BB6  EC4B  F028         	call	_Do_Beep_Good	;wreg free
  2978                           
  2979                           ;Main.c: 162: Do_Setup_Time();
  2980  001BBA  EC61  F01C         	call	_Do_Setup_Time	;wreg free
  2981                           
  2982                           ;Main.c: 163: break;
  2983  001BBE  D021               	goto	l10864
  2984  001BC0                     l10846:
  2985                           
  2986                           ;Main.c: 166: Do_Beep_Good();
  2987  001BC0  EC4B  F028         	call	_Do_Beep_Good	;wreg free
  2988                           
  2989                           ;Main.c: 167: Do_Setup_Alarm_Time();
  2990  001BC4  EC90  F01D         	call	_Do_Setup_Alarm_Time	;wreg free
  2991                           
  2992                           ;Main.c: 168: break;
  2993  001BC8  D01C               	goto	l10864
  2994  001BCA                     l10850:
  2995                           
  2996                           ;Main.c: 171: Do_Beep_Good();
  2997  001BCA  EC4B  F028         	call	_Do_Beep_Good	;wreg free
  2998                           
  2999                           ;Main.c: 172: Do_Setup_Heater_Temp();
  3000  001BCE  EC7A  F020         	call	_Do_Setup_Heater_Temp	;wreg free
  3001                           
  3002                           ;Main.c: 173: break;
  3003  001BD2  D017               	goto	l10864
  3004  001BD4                     l10854:
  3005                           
  3006                           ;Main.c: 176: Do_Beep_Good();
  3007  001BD4  EC4B  F028         	call	_Do_Beep_Good	;wreg free
  3008                           
  3009                           ;Main.c: 177: Toggle_Heater();
  3010  001BD8  EC63  F028         	call	_Toggle_Heater	;wreg free
  3011                           
  3012                           ;Main.c: 178: break;
  3013  001BDC  D012               	goto	l10864
  3014  001BDE                     l10858:
  3015                           
  3016                           ;Main.c: 181: Do_Beep_Bad();
  3017  001BDE  EC57  F028         	call	_Do_Beep_Bad	;wreg free
  3018                           
  3019                           ;Main.c: 183: }
  3020                           
  3021                           ;Main.c: 182: break;
  3022  001BE2  D00F               	goto	l10864
  3023  001BE4                     l10862:
  3024  001BE4  5069               	movf	_found,w,c
  3025                           
  3026                           ; Switch size 1, requested type "space"
  3027                           ; Number of cases is 4, Range of values is 0 to 5
  3028                           ; switch strategies available:
  3029                           ; Name         Instructions Cycles
  3030                           ; simple_byte           13     7 (average)
  3031                           ;	Chosen strategy is simple_byte
  3032  001BE6  0A00               	xorlw	0	; case 0
  3033  001BE8  B4D8               	btfsc	status,2,c
  3034  001BEA  D7E5               	goto	l10842
  3035  001BEC  0A01               	xorlw	1	; case 1
  3036  001BEE  B4D8               	btfsc	status,2,c
  3037  001BF0  D7E7               	goto	l10846
  3038  001BF2  0A03               	xorlw	3	; case 2
  3039  001BF4  B4D8               	btfsc	status,2,c
  3040  001BF6  D7E9               	goto	l10850
  3041  001BF8  0A07               	xorlw	7	; case 5
  3042  001BFA  B4D8               	btfsc	status,2,c
  3043  001BFC  D7EB               	goto	l10854
  3044  001BFE  D7EF               	goto	l10858
  3045  001C00  D000               	goto	l10864
  3046  001C02                     l10864:
  3047                           
  3048                           ;Main.c: 184: }
  3049                           ;Main.c: 188: if (INT1_flag == 1)
  3050  001C02  0100               	movlb	0	; () banked
  3051  001C04  059C               	decf	_INT1_flag& (0+255),w,b
  3052  001C06  A4D8               	btfss	status,2,c
  3053  001C08  D704               	goto	l10806
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;Main.c: 189: {
  3057                           ;Main.c: 190: INT1_flag = 0;
  3058  001C0A  0E00               	movlw	0
  3059  001C0C  0100               	movlb	0	; () banked
  3060  001C0E  6F9C               	movwf	_INT1_flag& (0+255),b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;Main.c: 191: if (ALARMEN == 1)
  3064  001C10  0100               	movlb	0	; () banked
  3065  001C12  0587               	decf	_ALARMEN& (0+255),w,b
  3066  001C14  0100               	movlb	0	; () banked
  3067  001C16  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3068  001C18  A4D8               	btfss	status,2,c
  3069  001C1A  D01D               	goto	l10880
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;Main.c: 192: {
  3073                           ;Main.c: 193: MATCHED = 0;
  3074  001C1C  0E00               	movlw	0
  3075  001C1E  0100               	movlb	0	; () banked
  3076  001C20  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  3077  001C22  0E00               	movlw	0
  3078  001C24  6F8D               	movwf	_MATCHED& (0+255),b
  3079                           
  3080                           ;Main.c: 194: ALARMEN = 0;
  3081  001C26  0E00               	movlw	0
  3082  001C28  0100               	movlb	0	; () banked
  3083  001C2A  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  3084  001C2C  0E00               	movlw	0
  3085  001C2E  6F87               	movwf	_ALARMEN& (0+255),b
  3086                           
  3087                           ;Main.c: 195: color = 0;
  3088  001C30  0E00               	movlw	0
  3089  001C32  0100               	movlb	0	; () banked
  3090  001C34  6F92               	movwf	(_color+1)& (0+255),b
  3091  001C36  0E00               	movlw	0
  3092  001C38  6F91               	movwf	_color& (0+255),b
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;Main.c: 196: Set_RGB_Color(0);
  3096  001C3A  0E00               	movlw	0
  3097  001C3C  EC6E  F028         	call	_Set_RGB_Color
  3098                           
  3099                           ;Main.c: 197: Deactivate_Buzzer();
  3100  001C40  EC47  F029         	call	_Deactivate_Buzzer	;wreg free
  3101                           
  3102                           ;Main.c: 198: do_update_pwm(duty_cycle);
  3103  001C44  5068               	movf	_duty_cycle,w,c
  3104  001C46  ECA6  F01E         	call	_do_update_pwm
  3105                           
  3106                           ;Main.c: 199: alarm_mode = 0;
  3107  001C4A  0E00               	movlw	0
  3108  001C4C  0100               	movlb	0	; () banked
  3109  001C4E  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  3110  001C50  0E00               	movlw	0
  3111  001C52  6F8F               	movwf	_alarm_mode& (0+255),b
  3112                           
  3113                           ;Main.c: 201: }
  3114  001C54  D006               	goto	l10882
  3115  001C56                     l10880:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;Main.c: 202: else
  3119                           ;Main.c: 203: {
  3120                           ;Main.c: 204: ALARMEN = 1;
  3121  001C56  0E00               	movlw	0
  3122  001C58  0100               	movlb	0	; () banked
  3123  001C5A  6F88               	movwf	(_ALARMEN+1)& (0+255),b
  3124  001C5C  0E01               	movlw	1
  3125  001C5E  6F87               	movwf	_ALARMEN& (0+255),b
  3126  001C60  D000               	goto	l10882
  3127  001C62                     l10882:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;Main.c: 206: }
  3131                           ;Main.c: 207: Test_Alarm();
  3132  001C62  ECFA  F014         	call	_Test_Alarm	;wreg free
  3133  001C66  D6D5               	goto	l10806
  3134  001C68  EF0C  F000         	goto	start
  3135  001C6C                     __end_of_main:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           tblptrh	equ	0xFF7
  3139                           tblptrl	equ	0xFF6
  3140                           tablat	equ	0xFF5
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           postdec1	equ	0xFE5
  3144                           fsr1l	equ	0xFE1
  3145                           status	equ	0xFD8
  3146                           
  3147 ;; *************** function _get_RPM *****************
  3148 ;; Defined at:
  3149 ;;		line 81 in file "Fan_Support.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;		None
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  RPS             2   32[COMRAM] int 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  2   30[COMRAM] int 
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3163 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;Total ram usage:        4 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    4
  3170 ;; This function calls:
  3171 ;;		___awdiv
  3172 ;;		___wmul
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text1
  3179  004B7C                     __ptext1:
  3180                           	opt stack 0
  3181  004B7C                     _get_RPM:
  3182                           	opt stack 26
  3183                           
  3184                           ;Fan_Support.c: 84: int RPS = TMR3L / 2;
  3185                           
  3186                           ;incstack = 0
  3187  004B7C  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3188  004B80  6A18               	clrf	___awdiv@dividend+1,c
  3189  004B82  0E00               	movlw	0
  3190  004B84  6E1A               	movwf	___awdiv@divisor+1,c
  3191  004B86  0E02               	movlw	2
  3192  004B88  6E19               	movwf	___awdiv@divisor,c
  3193  004B8A  ECE4  F01F         	call	___awdiv	;wreg free
  3194  004B8E  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3195  004B92  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3196                           
  3197                           ;Fan_Support.c: 86: TMR3L = 0;
  3198  004B96  0E00               	movlw	0
  3199  004B98  6EB2               	movwf	4018,c	;volatile
  3200                           
  3201                           ;Fan_Support.c: 87: return (RPS * 60);
  3202  004B9A  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3203  004B9E  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3204  004BA2  0E00               	movlw	0
  3205  004BA4  6E14               	movwf	___wmul@multiplicand+1,c
  3206  004BA6  0E3C               	movlw	60
  3207  004BA8  6E13               	movwf	___wmul@multiplicand,c
  3208  004BAA  ECFF  F026         	call	___wmul	;wreg free
  3209  004BAE  C011  F01F         	movff	?___wmul,?_get_RPM
  3210  004BB2  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3211  004BB6  D000               	goto	l56
  3212  004BB8                     l56:
  3213  004BB8  0012               	return		;funcret
  3214  004BBA                     __end_of_get_RPM:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           postinc0	equ	0xFEE
  3221                           wreg	equ	0xFE8
  3222                           postdec1	equ	0xFE5
  3223                           fsr1l	equ	0xFE1
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function _Update_Screen *****************
  3227 ;; Defined at:
  3228 ;;		line 77 in file "Main_Screen.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;  neg_tempF       2   77[COMRAM] int 
  3233 ;;  neg_DS1621_t    1   79[COMRAM] unsigned char 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  2  371[None  ] int 
  3236 ;; Registers used:
  3237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;Total ram usage:        7 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:   10
  3250 ;; This function calls:
  3251 ;;		___awdiv
  3252 ;;		___awmod
  3253 ;;		___ftmul
  3254 ;;		___fttol
  3255 ;;		_drawtext
  3256 ;;		_strcpy
  3257 ;; This function is called by:
  3258 ;;		_main
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text2
  3263  000C60                     __ptext2:
  3264                           	opt stack 0
  3265  000C60                     _Update_Screen:
  3266                           	opt stack 20
  3267                           
  3268                           ;Main_Screen.c: 79: if ((DS1621_tempC & 0x80) == 0x80)
  3269                           
  3270                           ;incstack = 0
  3271  000C60  0100               	movlb	0	; () banked
  3272  000C62  AF89               	btfss	_DS1621_tempC& (0+255),7,b
  3273  000C64  D020               	goto	l10512
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;Main_Screen.c: 80: {
  3277                           ;Main_Screen.c: 81: tempC[0] = '-';
  3278  000C66  0E2D               	movlw	45
  3279  000C68  0100               	movlb	0	; () banked
  3280  000C6A  6FD2               	movwf	_tempC& (0+255),b
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;Main_Screen.c: 82: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  3284  000C6C  0100               	movlb	0	; () banked
  3285  000C6E  5189               	movf	_DS1621_tempC& (0+255),w,b
  3286  000C70  0B7F               	andlw	127
  3287  000C72  0800               	sublw	0
  3288  000C74  0F80               	addlw	128
  3289  000C76  6E50               	movwf	Update_Screen@neg_DS1621_tempC,c
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;Main_Screen.c: 83: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  3293  000C78  C050  F017         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  3294  000C7C  6A18               	clrf	___awdiv@dividend+1,c
  3295  000C7E  0E00               	movlw	0
  3296  000C80  6E1A               	movwf	___awdiv@divisor+1,c
  3297  000C82  0E0A               	movlw	10
  3298  000C84  6E19               	movwf	___awdiv@divisor,c
  3299  000C86  ECE4  F01F         	call	___awdiv	;wreg free
  3300  000C8A  5017               	movf	?___awdiv,w,c
  3301  000C8C  0F30               	addlw	48
  3302  000C8E  0100               	movlb	0	; () banked
  3303  000C90  6FD3               	movwf	(_tempC+1)& (0+255),b
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;Main_Screen.c: 84: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  3307  000C92  C050  F03D         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  3308  000C96  6A3E               	clrf	___awmod@dividend+1,c
  3309  000C98  0E00               	movlw	0
  3310  000C9A  6E40               	movwf	___awmod@divisor+1,c
  3311  000C9C  0E0A               	movlw	10
  3312  000C9E  6E3F               	movwf	___awmod@divisor,c
  3313  000CA0  ECDB  F021         	call	___awmod	;wreg free
  3314  000CA4  D01B               	goto	L1
  3315  000CA6                     l10512:
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;Main_Screen.c: 86: else
  3319                           ;Main_Screen.c: 87: {
  3320                           ;Main_Screen.c: 88: tempC[0] = '+';
  3321  000CA6  0E2B               	movlw	43
  3322  000CA8  0100               	movlb	0	; () banked
  3323  000CAA  6FD2               	movwf	_tempC& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;Main_Screen.c: 89: tempC[1] = DS1621_tempC/10 + '0';
  3327  000CAC  C089  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3328  000CB0  C08A  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3329  000CB4  0E00               	movlw	0
  3330  000CB6  6E1A               	movwf	___awdiv@divisor+1,c
  3331  000CB8  0E0A               	movlw	10
  3332  000CBA  6E19               	movwf	___awdiv@divisor,c
  3333  000CBC  ECE4  F01F         	call	___awdiv	;wreg free
  3334  000CC0  5017               	movf	?___awdiv,w,c
  3335  000CC2  0F30               	addlw	48
  3336  000CC4  0100               	movlb	0	; () banked
  3337  000CC6  6FD3               	movwf	(_tempC+1)& (0+255),b
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;Main_Screen.c: 90: tempC[2] = DS1621_tempC%10 + '0';
  3341  000CC8  C089  F03D         	movff	_DS1621_tempC,___awmod@dividend
  3342  000CCC  C08A  F03E         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3343  000CD0  0E00               	movlw	0
  3344  000CD2  6E40               	movwf	___awmod@divisor+1,c
  3345  000CD4  0E0A               	movlw	10
  3346  000CD6  6E3F               	movwf	___awmod@divisor,c
  3347  000CD8  ECDB  F021         	call	___awmod	;wreg free
  3348  000CDC                     L1:
  3349  000CDC  503D               	movf	?___awmod,w,c
  3350  000CDE  0F30               	addlw	48
  3351  000CE0  0100               	movlb	0	; () banked
  3352  000CE2  6FD4               	movwf	(_tempC+2)& (0+255),b
  3353  000CE4  D000               	goto	l10518
  3354  000CE6                     l10518:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;Main_Screen.c: 91: }
  3358                           ;Main_Screen.c: 93: if (DS1621_tempF < 0)
  3359  000CE6  0100               	movlb	0	; () banked
  3360  000CE8  AF8C               	btfss	(_DS1621_tempF+1)& (0+255),7,b
  3361  000CEA  D02E               	goto	l10528
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;Main_Screen.c: 94: {
  3365                           ;Main_Screen.c: 95: tempF[0] = '-';
  3366  000CEC  0E2D               	movlw	45
  3367  000CEE  0100               	movlb	0	; () banked
  3368  000CF0  6FD6               	movwf	_tempF& (0+255),b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;Main_Screen.c: 96: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3372  000CF2  0E7F               	movlw	127
  3373  000CF4  0100               	movlb	0	; () banked
  3374  000CF6  158B               	andwf	_DS1621_tempF& (0+255),w,b
  3375  000CF8  6E4A               	movwf	??_Update_Screen& (0+255),c
  3376  000CFA  0E00               	movlw	0
  3377  000CFC  0100               	movlb	0	; () banked
  3378  000CFE  158C               	andwf	(_DS1621_tempF+1)& (0+255),w,b
  3379  000D00  6E4B               	movwf	(??_Update_Screen+1)& (0+255),c
  3380  000D02  1E4A               	comf	??_Update_Screen,f,c
  3381  000D04  1E4B               	comf	??_Update_Screen+1,f,c
  3382  000D06  4A4A               	infsnz	??_Update_Screen,f,c
  3383  000D08  2A4B               	incf	??_Update_Screen+1,f,c
  3384  000D0A  0E80               	movlw	128
  3385  000D0C  244A               	addwf	??_Update_Screen,w,c
  3386  000D0E  6E4E               	movwf	Update_Screen@neg_tempF,c
  3387  000D10  0E00               	movlw	0
  3388  000D12  204B               	addwfc	??_Update_Screen+1,w,c
  3389  000D14  6E4F               	movwf	Update_Screen@neg_tempF+1,c
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;Main_Screen.c: 97: tempF[1] = neg_tempF/10 + '0';
  3393  000D16  C04E  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3394  000D1A  C04F  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3395  000D1E  0E00               	movlw	0
  3396  000D20  6E1A               	movwf	___awdiv@divisor+1,c
  3397  000D22  0E0A               	movlw	10
  3398  000D24  6E19               	movwf	___awdiv@divisor,c
  3399  000D26  ECE4  F01F         	call	___awdiv	;wreg free
  3400  000D2A  5017               	movf	?___awdiv,w,c
  3401  000D2C  0F30               	addlw	48
  3402  000D2E  0100               	movlb	0	; () banked
  3403  000D30  6FD7               	movwf	(_tempF+1)& (0+255),b
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;Main_Screen.c: 98: tempF[2] = neg_tempF%10 + '0';
  3407  000D32  C04E  F03D         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3408  000D36  C04F  F03E         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3409  000D3A  0E00               	movlw	0
  3410  000D3C  6E40               	movwf	___awmod@divisor+1,c
  3411  000D3E  0E0A               	movlw	10
  3412  000D40  6E3F               	movwf	___awmod@divisor,c
  3413  000D42  ECDB  F021         	call	___awmod	;wreg free
  3414  000D46  D01B               	goto	L2
  3415  000D48                     l10528:
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;Main_Screen.c: 100: else
  3419                           ;Main_Screen.c: 101: {
  3420                           ;Main_Screen.c: 102: tempF[0] = '+';
  3421  000D48  0E2B               	movlw	43
  3422  000D4A  0100               	movlb	0	; () banked
  3423  000D4C  6FD6               	movwf	_tempF& (0+255),b
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;Main_Screen.c: 103: tempF[1] = DS1621_tempF/10 + '0';
  3427  000D4E  C08B  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3428  000D52  C08C  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3429  000D56  0E00               	movlw	0
  3430  000D58  6E1A               	movwf	___awdiv@divisor+1,c
  3431  000D5A  0E0A               	movlw	10
  3432  000D5C  6E19               	movwf	___awdiv@divisor,c
  3433  000D5E  ECE4  F01F         	call	___awdiv	;wreg free
  3434  000D62  5017               	movf	?___awdiv,w,c
  3435  000D64  0F30               	addlw	48
  3436  000D66  0100               	movlb	0	; () banked
  3437  000D68  6FD7               	movwf	(_tempF+1)& (0+255),b
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;Main_Screen.c: 104: tempF[2] = DS1621_tempF%10 + '0';
  3441  000D6A  C08B  F03D         	movff	_DS1621_tempF,___awmod@dividend
  3442  000D6E  C08C  F03E         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3443  000D72  0E00               	movlw	0
  3444  000D74  6E40               	movwf	___awmod@divisor+1,c
  3445  000D76  0E0A               	movlw	10
  3446  000D78  6E3F               	movwf	___awmod@divisor,c
  3447  000D7A  ECDB  F021         	call	___awmod	;wreg free
  3448  000D7E                     L2:
  3449  000D7E  503D               	movf	?___awmod,w,c
  3450  000D80  0F30               	addlw	48
  3451  000D82  0100               	movlb	0	; () banked
  3452  000D84  6FD8               	movwf	(_tempF+2)& (0+255),b
  3453  000D86  D000               	goto	l10534
  3454  000D88                     l10534:
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;Main_Screen.c: 105: }
  3458                           ;Main_Screen.c: 107: time[0] = (hour>>4) + '0';
  3459  000D88  386A               	swapf	_hour,w,c
  3460  000D8A  0B0F               	andlw	15
  3461  000D8C  0F30               	addlw	48
  3462  000D8E  0101               	movlb	1	; () banked
  3463  000D90  6F68               	movwf	_time& (0+255),b
  3464                           
  3465                           ; BSR set to: 1
  3466                           ;Main_Screen.c: 108: time[1] = (hour & 0x0f)+ '0';
  3467  000D92  506A               	movf	_hour,w,c
  3468  000D94  0B0F               	andlw	15
  3469  000D96  0F30               	addlw	48
  3470  000D98  0101               	movlb	1	; () banked
  3471  000D9A  6F69               	movwf	(_time+1)& (0+255),b
  3472                           
  3473                           ; BSR set to: 1
  3474                           ;Main_Screen.c: 109: time[3] = (minute>>4) + '0';
  3475  000D9C  386B               	swapf	_minute,w,c
  3476  000D9E  0B0F               	andlw	15
  3477  000DA0  0F30               	addlw	48
  3478  000DA2  0101               	movlb	1	; () banked
  3479  000DA4  6F6B               	movwf	(_time+3)& (0+255),b
  3480                           
  3481                           ; BSR set to: 1
  3482                           ;Main_Screen.c: 110: time[4] = (minute & 0x0f)+ '0';
  3483  000DA6  506B               	movf	_minute,w,c
  3484  000DA8  0B0F               	andlw	15
  3485  000DAA  0F30               	addlw	48
  3486  000DAC  0101               	movlb	1	; () banked
  3487  000DAE  6F6C               	movwf	(_time+4)& (0+255),b
  3488                           
  3489                           ; BSR set to: 1
  3490                           ;Main_Screen.c: 111: time[6] = (second>>4) + '0';
  3491  000DB0  386D               	swapf	_second,w,c
  3492  000DB2  0B0F               	andlw	15
  3493  000DB4  0F30               	addlw	48
  3494  000DB6  0101               	movlb	1	; () banked
  3495  000DB8  6F6E               	movwf	(_time+6)& (0+255),b
  3496                           
  3497                           ; BSR set to: 1
  3498                           ;Main_Screen.c: 112: time[7] = (second & 0x0f)+ '0';
  3499  000DBA  506D               	movf	_second,w,c
  3500  000DBC  0B0F               	andlw	15
  3501  000DBE  0F30               	addlw	48
  3502  000DC0  0101               	movlb	1	; () banked
  3503  000DC2  6F6F               	movwf	(_time+7)& (0+255),b
  3504                           
  3505                           ; BSR set to: 1
  3506                           ;Main_Screen.c: 113: date[0] = (month>>4) + '0';
  3507  000DC4  386C               	swapf	_month,w,c
  3508  000DC6  0B0F               	andlw	15
  3509  000DC8  0F30               	addlw	48
  3510  000DCA  0101               	movlb	1	; () banked
  3511  000DCC  6F44               	movwf	_date& (0+255),b
  3512                           
  3513                           ; BSR set to: 1
  3514                           ;Main_Screen.c: 114: date[1] = (month & 0x0f)+ '0';
  3515  000DCE  506C               	movf	_month,w,c
  3516  000DD0  0B0F               	andlw	15
  3517  000DD2  0F30               	addlw	48
  3518  000DD4  0101               	movlb	1	; () banked
  3519  000DD6  6F45               	movwf	(_date+1)& (0+255),b
  3520                           
  3521                           ; BSR set to: 1
  3522                           ;Main_Screen.c: 115: date[3] = (day>>4) + '0';
  3523  000DD8  3867               	swapf	_day,w,c
  3524  000DDA  0B0F               	andlw	15
  3525  000DDC  0F30               	addlw	48
  3526  000DDE  0101               	movlb	1	; () banked
  3527  000DE0  6F47               	movwf	(_date+3)& (0+255),b
  3528                           
  3529                           ; BSR set to: 1
  3530                           ;Main_Screen.c: 116: date[4] = (day & 0x0f)+ '0';
  3531  000DE2  5067               	movf	_day,w,c
  3532  000DE4  0B0F               	andlw	15
  3533  000DE6  0F30               	addlw	48
  3534  000DE8  0101               	movlb	1	; () banked
  3535  000DEA  6F48               	movwf	(_date+4)& (0+255),b
  3536                           
  3537                           ; BSR set to: 1
  3538                           ;Main_Screen.c: 117: date[6] = (year>>4) + '0';
  3539  000DEC  386F               	swapf	_year,w,c
  3540  000DEE  0B0F               	andlw	15
  3541  000DF0  0F30               	addlw	48
  3542  000DF2  0101               	movlb	1	; () banked
  3543  000DF4  6F4A               	movwf	(_date+6)& (0+255),b
  3544                           
  3545                           ; BSR set to: 1
  3546                           ;Main_Screen.c: 118: date[7] = (year & 0x0f)+ '0';
  3547  000DF6  506F               	movf	_year,w,c
  3548  000DF8  0B0F               	andlw	15
  3549  000DFA  0F30               	addlw	48
  3550  000DFC  0101               	movlb	1	; () banked
  3551  000DFE  6F4B               	movwf	(_date+7)& (0+255),b
  3552                           
  3553                           ; BSR set to: 1
  3554                           ;Main_Screen.c: 119: alarm_time[0] = (alarm_hour>>4) + '0';
  3555  000E00  3864               	swapf	_alarm_hour,w,c
  3556  000E02  0B0F               	andlw	15
  3557  000E04  0F30               	addlw	48
  3558  000E06  0101               	movlb	1	; () banked
  3559  000E08  6F3B               	movwf	_alarm_time& (0+255),b
  3560                           
  3561                           ; BSR set to: 1
  3562                           ;Main_Screen.c: 120: alarm_time[1] = (alarm_hour & 0x0f) + '0';
  3563  000E0A  5064               	movf	_alarm_hour,w,c
  3564  000E0C  0B0F               	andlw	15
  3565  000E0E  0F30               	addlw	48
  3566  000E10  0101               	movlb	1	; () banked
  3567  000E12  6F3C               	movwf	(_alarm_time+1)& (0+255),b
  3568                           
  3569                           ; BSR set to: 1
  3570                           ;Main_Screen.c: 121: alarm_time[3] = (alarm_minute>>4) + '0';
  3571  000E14  3865               	swapf	_alarm_minute,w,c
  3572  000E16  0B0F               	andlw	15
  3573  000E18  0F30               	addlw	48
  3574  000E1A  0101               	movlb	1	; () banked
  3575  000E1C  6F3E               	movwf	(_alarm_time+3)& (0+255),b
  3576                           
  3577                           ; BSR set to: 1
  3578                           ;Main_Screen.c: 122: alarm_time[4] = (alarm_minute & 0x0f) + '0';
  3579  000E1E  5065               	movf	_alarm_minute,w,c
  3580  000E20  0B0F               	andlw	15
  3581  000E22  0F30               	addlw	48
  3582  000E24  0101               	movlb	1	; () banked
  3583  000E26  6F3F               	movwf	(_alarm_time+4)& (0+255),b
  3584                           
  3585                           ; BSR set to: 1
  3586                           ;Main_Screen.c: 123: alarm_time[6] = (alarm_second>>4) + '0';
  3587  000E28  3866               	swapf	_alarm_second,w,c
  3588  000E2A  0B0F               	andlw	15
  3589  000E2C  0F30               	addlw	48
  3590  000E2E  0101               	movlb	1	; () banked
  3591  000E30  6F41               	movwf	(_alarm_time+6)& (0+255),b
  3592                           
  3593                           ; BSR set to: 1
  3594                           ;Main_Screen.c: 124: alarm_time[7] = (alarm_second & 0x0f) + '0';
  3595  000E32  5066               	movf	_alarm_second,w,c
  3596  000E34  0B0F               	andlw	15
  3597  000E36  0F30               	addlw	48
  3598  000E38  0101               	movlb	1	; () banked
  3599  000E3A  6F42               	movwf	(_alarm_time+7)& (0+255),b
  3600                           
  3601                           ; BSR set to: 1
  3602                           ;Main_Screen.c: 126: if (ALARMEN == 1)
  3603  000E3C  0100               	movlb	0	; () banked
  3604  000E3E  0587               	decf	_ALARMEN& (0+255),w,b
  3605  000E40  0100               	movlb	0	; () banked
  3606  000E42  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3607  000E44  A4D8               	btfss	status,2,c
  3608  000E46  D00B               	goto	l10574
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;Main_Screen.c: 127: {
  3612                           ;Main_Screen.c: 128: strcpy(Alarm_SW_Txt, "ON ");
  3613  000E48  0EC6               	movlw	low _Alarm_SW_Txt
  3614  000E4A  6E11               	movwf	strcpy@to,c
  3615  000E4C  0E00               	movlw	high _Alarm_SW_Txt
  3616  000E4E  6E12               	movwf	strcpy@to+1,c
  3617  000E50  0EE9               	movlw	low STR_22
  3618  000E52  6E13               	movwf	strcpy@from,c
  3619  000E54  0EFF               	movlw	high STR_22
  3620  000E56  6E14               	movwf	strcpy@from+1,c
  3621  000E58  EC8F  F026         	call	_strcpy	;wreg free
  3622                           
  3623                           ;Main_Screen.c: 129: }
  3624  000E5C  D00B               	goto	l10576
  3625  000E5E                     l10574:
  3626                           
  3627                           ;Main_Screen.c: 130: else
  3628                           ;Main_Screen.c: 131: {
  3629                           ;Main_Screen.c: 132: strcpy(Alarm_SW_Txt, "OFF");
  3630  000E5E  0EC6               	movlw	low _Alarm_SW_Txt
  3631  000E60  6E11               	movwf	strcpy@to,c
  3632  000E62  0E00               	movlw	high _Alarm_SW_Txt
  3633  000E64  6E12               	movwf	strcpy@to+1,c
  3634  000E66  0EED               	movlw	low STR_23
  3635  000E68  6E13               	movwf	strcpy@from,c
  3636  000E6A  0EFF               	movlw	high STR_23
  3637  000E6C  6E14               	movwf	strcpy@from+1,c
  3638  000E6E  EC8F  F026         	call	_strcpy	;wreg free
  3639  000E72  D000               	goto	l10576
  3640  000E74                     l10576:
  3641                           
  3642                           ;Main_Screen.c: 133: }
  3643                           ;Main_Screen.c: 135: Heater_Set_Temp_Txt[0] = heater_set_temp/100 + '0';
  3644  000E74  C0B4  F017         	movff	_heater_set_temp,___awdiv@dividend
  3645  000E78  6A18               	clrf	___awdiv@dividend+1,c
  3646  000E7A  0E00               	movlw	0
  3647  000E7C  6E1A               	movwf	___awdiv@divisor+1,c
  3648  000E7E  0E64               	movlw	100
  3649  000E80  6E19               	movwf	___awdiv@divisor,c
  3650  000E82  ECE4  F01F         	call	___awdiv	;wreg free
  3651  000E86  5017               	movf	?___awdiv,w,c
  3652  000E88  0F30               	addlw	48
  3653  000E8A  0100               	movlb	0	; () banked
  3654  000E8C  6FB7               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;Main_Screen.c: 136: Heater_Set_Temp_Txt[1] = heater_set_temp/10 % 10 + '0';
  3658  000E8E  0E00               	movlw	0
  3659  000E90  6E1A               	movwf	___awdiv@divisor+1,c
  3660  000E92  0E0A               	movlw	10
  3661  000E94  6E19               	movwf	___awdiv@divisor,c
  3662  000E96  C0B4  F017         	movff	_heater_set_temp,___awdiv@dividend
  3663  000E9A  6A18               	clrf	___awdiv@dividend+1,c
  3664  000E9C  ECE4  F01F         	call	___awdiv	;wreg free
  3665  000EA0  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3666  000EA4  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3667  000EA8  0E00               	movlw	0
  3668  000EAA  6E40               	movwf	___awmod@divisor+1,c
  3669  000EAC  0E0A               	movlw	10
  3670  000EAE  6E3F               	movwf	___awmod@divisor,c
  3671  000EB0  ECDB  F021         	call	___awmod	;wreg free
  3672  000EB4  503D               	movf	?___awmod,w,c
  3673  000EB6  0F30               	addlw	48
  3674  000EB8  0100               	movlb	0	; () banked
  3675  000EBA  6FB8               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;Main_Screen.c: 137: Heater_Set_Temp_Txt[2] = heater_set_temp%10 + '0';
  3679  000EBC  C0B4  F03D         	movff	_heater_set_temp,___awmod@dividend
  3680  000EC0  6A3E               	clrf	___awmod@dividend+1,c
  3681  000EC2  0E00               	movlw	0
  3682  000EC4  6E40               	movwf	___awmod@divisor+1,c
  3683  000EC6  0E0A               	movlw	10
  3684  000EC8  6E3F               	movwf	___awmod@divisor,c
  3685  000ECA  ECDB  F021         	call	___awmod	;wreg free
  3686  000ECE  503D               	movf	?___awmod,w,c
  3687  000ED0  0F30               	addlw	48
  3688  000ED2  0100               	movlb	0	; () banked
  3689  000ED4  6FB9               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;Main_Screen.c: 139: if (HEATER == 1)
  3693  000ED6  0100               	movlb	0	; () banked
  3694  000ED8  059B               	decf	_HEATER& (0+255),w,b
  3695  000EDA  A4D8               	btfss	status,2,c
  3696  000EDC  D00B               	goto	l10586
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;Main_Screen.c: 140: {
  3700                           ;Main_Screen.c: 141: strcpy(Heater_SW_Txt, "ON ");
  3701  000EDE  0ECE               	movlw	low _Heater_SW_Txt
  3702  000EE0  6E11               	movwf	strcpy@to,c
  3703  000EE2  0E00               	movlw	high _Heater_SW_Txt
  3704  000EE4  6E12               	movwf	strcpy@to+1,c
  3705  000EE6  0EE9               	movlw	low STR_22
  3706  000EE8  6E13               	movwf	strcpy@from,c
  3707  000EEA  0EFF               	movlw	high STR_22
  3708  000EEC  6E14               	movwf	strcpy@from+1,c
  3709  000EEE  EC8F  F026         	call	_strcpy	;wreg free
  3710                           
  3711                           ;Main_Screen.c: 142: }
  3712  000EF2  D00B               	goto	l10588
  3713  000EF4                     l10586:
  3714                           
  3715                           ;Main_Screen.c: 143: else
  3716                           ;Main_Screen.c: 144: {
  3717                           ;Main_Screen.c: 145: strcpy(Heater_SW_Txt, "OFF");
  3718  000EF4  0ECE               	movlw	low _Heater_SW_Txt
  3719  000EF6  6E11               	movwf	strcpy@to,c
  3720  000EF8  0E00               	movlw	high _Heater_SW_Txt
  3721  000EFA  6E12               	movwf	strcpy@to+1,c
  3722  000EFC  0EED               	movlw	low STR_23
  3723  000EFE  6E13               	movwf	strcpy@from,c
  3724  000F00  0EFF               	movlw	high STR_23
  3725  000F02  6E14               	movwf	strcpy@from+1,c
  3726  000F04  EC8F  F026         	call	_strcpy	;wreg free
  3727  000F08  D000               	goto	l10588
  3728  000F0A                     l10588:
  3729                           
  3730                           ;Main_Screen.c: 146: }
  3731                           ;Main_Screen.c: 148: if (PORTAbits.RA5 == 0) RTC_ALARM_Txt[0] = '1';
  3732  000F0A  BA80               	btfsc	3968,5,c	;volatile
  3733  000F0C  D002               	goto	l10592
  3734  000F0E  0E31               	movlw	49
  3735  000F10  D001               	goto	L3
  3736  000F12                     l10592:
  3737                           
  3738                           ;Main_Screen.c: 149: else RTC_ALARM_Txt[0] = '0';
  3739  000F12  0E30               	movlw	48
  3740  000F14                     L3:
  3741  000F14  0100               	movlb	0	; () banked
  3742  000F16  6FDA               	movwf	_RTC_ALARM_Txt& (0+255),b
  3743  000F18  D000               	goto	l10594
  3744  000F1A                     l10594:
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;Main_Screen.c: 152: DC_Txt[0] = duty_cycle/100 + '0';
  3748  000F1A  C068  F017         	movff	_duty_cycle,___awdiv@dividend
  3749  000F1E  6A18               	clrf	___awdiv@dividend+1,c
  3750  000F20  0E00               	movlw	0
  3751  000F22  6E1A               	movwf	___awdiv@divisor+1,c
  3752  000F24  0E64               	movlw	100
  3753  000F26  6E19               	movwf	___awdiv@divisor,c
  3754  000F28  ECE4  F01F         	call	___awdiv	;wreg free
  3755  000F2C  5017               	movf	?___awdiv,w,c
  3756  000F2E  0F30               	addlw	48
  3757  000F30  0100               	movlb	0	; () banked
  3758  000F32  6FCA               	movwf	_DC_Txt& (0+255),b
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;Main_Screen.c: 153: DC_Txt[1] = duty_cycle/10 %10 + '0';
  3762  000F34  0E00               	movlw	0
  3763  000F36  6E1A               	movwf	___awdiv@divisor+1,c
  3764  000F38  0E0A               	movlw	10
  3765  000F3A  6E19               	movwf	___awdiv@divisor,c
  3766  000F3C  C068  F017         	movff	_duty_cycle,___awdiv@dividend
  3767  000F40  6A18               	clrf	___awdiv@dividend+1,c
  3768  000F42  ECE4  F01F         	call	___awdiv	;wreg free
  3769  000F46  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3770  000F4A  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3771  000F4E  0E00               	movlw	0
  3772  000F50  6E40               	movwf	___awmod@divisor+1,c
  3773  000F52  0E0A               	movlw	10
  3774  000F54  6E3F               	movwf	___awmod@divisor,c
  3775  000F56  ECDB  F021         	call	___awmod	;wreg free
  3776  000F5A  503D               	movf	?___awmod,w,c
  3777  000F5C  0F30               	addlw	48
  3778  000F5E  0100               	movlb	0	; () banked
  3779  000F60  6FCB               	movwf	(_DC_Txt+1)& (0+255),b
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;Main_Screen.c: 154: DC_Txt[2] = duty_cycle%10 + '0';
  3783  000F62  C068  F03D         	movff	_duty_cycle,___awmod@dividend
  3784  000F66  6A3E               	clrf	___awmod@dividend+1,c
  3785  000F68  0E00               	movlw	0
  3786  000F6A  6E40               	movwf	___awmod@divisor+1,c
  3787  000F6C  0E0A               	movlw	10
  3788  000F6E  6E3F               	movwf	___awmod@divisor,c
  3789  000F70  ECDB  F021         	call	___awmod	;wreg free
  3790  000F74  503D               	movf	?___awmod,w,c
  3791  000F76  0F30               	addlw	48
  3792  000F78  0100               	movlb	0	; () banked
  3793  000F7A  6FCC               	movwf	(_DC_Txt+2)& (0+255),b
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;Main_Screen.c: 156: Volt_Txt[0] = ((int) volt ) + '0';
  3797  000F7C  C084  F02E         	movff	_volt,___fttol@f1
  3798  000F80  C085  F02F         	movff	_volt+1,___fttol@f1+1
  3799  000F84  C086  F030         	movff	_volt+2,___fttol@f1+2
  3800  000F88  EC9E  F01A         	call	___fttol	;wreg free
  3801  000F8C  502E               	movf	?___fttol,w,c
  3802  000F8E  0F30               	addlw	48
  3803  000F90  0101               	movlb	1	; () banked
  3804  000F92  6F71               	movwf	_Volt_Txt& (0+255),b
  3805                           
  3806                           ; BSR set to: 1
  3807                           ;Main_Screen.c: 157: Volt_Txt[2] = ((int) (volt * 10) % 10 ) + '0';
  3808  000F94  0E00               	movlw	0
  3809  000F96  6E22               	movwf	___ftmul@f2,c
  3810  000F98  0E20               	movlw	32
  3811  000F9A  6E23               	movwf	___ftmul@f2+1,c
  3812  000F9C  0E41               	movlw	65
  3813  000F9E  6E24               	movwf	___ftmul@f2+2,c
  3814  000FA0  C084  F01F         	movff	_volt,___ftmul@f1
  3815  000FA4  C085  F020         	movff	_volt+1,___ftmul@f1+1
  3816  000FA8  C086  F021         	movff	_volt+2,___ftmul@f1+2
  3817  000FAC  ECB5  F018         	call	___ftmul	;wreg free
  3818  000FB0  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3819  000FB4  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3820  000FB8  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3821  000FBC  EC9E  F01A         	call	___fttol	;wreg free
  3822  000FC0  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3823  000FC4  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3824  000FC8  0E00               	movlw	0
  3825  000FCA  6E40               	movwf	___awmod@divisor+1,c
  3826  000FCC  0E0A               	movlw	10
  3827  000FCE  6E3F               	movwf	___awmod@divisor,c
  3828  000FD0  ECDB  F021         	call	___awmod	;wreg free
  3829  000FD4  503D               	movf	?___awmod,w,c
  3830  000FD6  0F30               	addlw	48
  3831  000FD8  0101               	movlb	1	; () banked
  3832  000FDA  6F73               	movwf	(_Volt_Txt+2)& (0+255),b
  3833                           
  3834                           ; BSR set to: 1
  3835                           ;Main_Screen.c: 158: Volt_Txt[3] = ((int) (volt * 100)%10 ) + '0';
  3836  000FDC  0E00               	movlw	0
  3837  000FDE  6E22               	movwf	___ftmul@f2,c
  3838  000FE0  0EC8               	movlw	200
  3839  000FE2  6E23               	movwf	___ftmul@f2+1,c
  3840  000FE4  0E42               	movlw	66
  3841  000FE6  6E24               	movwf	___ftmul@f2+2,c
  3842  000FE8  C084  F01F         	movff	_volt,___ftmul@f1
  3843  000FEC  C085  F020         	movff	_volt+1,___ftmul@f1+1
  3844  000FF0  C086  F021         	movff	_volt+2,___ftmul@f1+2
  3845  000FF4  ECB5  F018         	call	___ftmul	;wreg free
  3846  000FF8  C01F  F02E         	movff	?___ftmul,___fttol@f1
  3847  000FFC  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
  3848  001000  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
  3849  001004  EC9E  F01A         	call	___fttol	;wreg free
  3850  001008  C02E  F03D         	movff	?___fttol,___awmod@dividend
  3851  00100C  C02F  F03E         	movff	?___fttol+1,___awmod@dividend+1
  3852  001010  0E00               	movlw	0
  3853  001012  6E40               	movwf	___awmod@divisor+1,c
  3854  001014  0E0A               	movlw	10
  3855  001016  6E3F               	movwf	___awmod@divisor,c
  3856  001018  ECDB  F021         	call	___awmod	;wreg free
  3857  00101C  503D               	movf	?___awmod,w,c
  3858  00101E  0F30               	addlw	48
  3859  001020  0101               	movlb	1	; () banked
  3860  001022  6F74               	movwf	(_Volt_Txt+3)& (0+255),b
  3861                           
  3862                           ; BSR set to: 1
  3863                           ;Main_Screen.c: 162: RPM_Txt[0] = rpm/1000 + '0';
  3864  001024  C097  F017         	movff	_rpm,___awdiv@dividend
  3865  001028  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  3866  00102C  0E03               	movlw	3
  3867  00102E  6E1A               	movwf	___awdiv@divisor+1,c
  3868  001030  0EE8               	movlw	232
  3869  001032  6E19               	movwf	___awdiv@divisor,c
  3870  001034  ECE4  F01F         	call	___awdiv	;wreg free
  3871  001038  5017               	movf	?___awdiv,w,c
  3872  00103A  0F30               	addlw	48
  3873  00103C  0100               	movlb	0	; () banked
  3874  00103E  6FBC               	movwf	_RPM_Txt& (0+255),b
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;Main_Screen.c: 163: RPM_Txt[1] = rpm/100 %10 + '0';
  3878  001040  0E00               	movlw	0
  3879  001042  6E1A               	movwf	___awdiv@divisor+1,c
  3880  001044  0E64               	movlw	100
  3881  001046  6E19               	movwf	___awdiv@divisor,c
  3882  001048  C097  F017         	movff	_rpm,___awdiv@dividend
  3883  00104C  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  3884  001050  ECE4  F01F         	call	___awdiv	;wreg free
  3885  001054  C017  F03D         	movff	?___awdiv,___awmod@dividend
  3886  001058  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  3887  00105C  0E00               	movlw	0
  3888  00105E  6E40               	movwf	___awmod@divisor+1,c
  3889  001060  0E0A               	movlw	10
  3890  001062  6E3F               	movwf	___awmod@divisor,c
  3891  001064  ECDB  F021         	call	___awmod	;wreg free
  3892  001068  503D               	movf	?___awmod,w,c
  3893  00106A  0F30               	addlw	48
  3894  00106C  0100               	movlb	0	; () banked
  3895  00106E  6FBD               	movwf	(_RPM_Txt+1)& (0+255),b
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;Main_Screen.c: 164: RPM_Txt[2] = rpm%100 / 10 + '0';
  3899  001070  0E00               	movlw	0
  3900  001072  6E40               	movwf	___awmod@divisor+1,c
  3901  001074  0E64               	movlw	100
  3902  001076  6E3F               	movwf	___awmod@divisor,c
  3903  001078  C097  F03D         	movff	_rpm,___awmod@dividend
  3904  00107C  C098  F03E         	movff	_rpm+1,___awmod@dividend+1
  3905  001080  ECDB  F021         	call	___awmod	;wreg free
  3906  001084  C03D  F017         	movff	?___awmod,___awdiv@dividend
  3907  001088  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
  3908  00108C  0E00               	movlw	0
  3909  00108E  6E1A               	movwf	___awdiv@divisor+1,c
  3910  001090  0E0A               	movlw	10
  3911  001092  6E19               	movwf	___awdiv@divisor,c
  3912  001094  ECE4  F01F         	call	___awdiv	;wreg free
  3913  001098  5017               	movf	?___awdiv,w,c
  3914  00109A  0F30               	addlw	48
  3915  00109C  0100               	movlb	0	; () banked
  3916  00109E  6FBE               	movwf	(_RPM_Txt+2)& (0+255),b
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;Main_Screen.c: 165: RPM_Txt[3] = rpm%10 %10 + '0';
  3920  0010A0  0E00               	movlw	0
  3921  0010A2  6E40               	movwf	___awmod@divisor+1,c
  3922  0010A4  0E0A               	movlw	10
  3923  0010A6  6E3F               	movwf	___awmod@divisor,c
  3924  0010A8  C097  F03D         	movff	_rpm,___awmod@dividend
  3925  0010AC  C098  F03E         	movff	_rpm+1,___awmod@dividend+1
  3926  0010B0  ECDB  F021         	call	___awmod	;wreg free
  3927  0010B4  C03D  F04C         	movff	?___awmod,_Update_Screen$3269
  3928  0010B8  C03E  F04D         	movff	?___awmod+1,_Update_Screen$3269+1
  3929                           
  3930                           ;Main_Screen.c: 165: RPM_Txt[3] = rpm%10 %10 + '0';
  3931  0010BC  C04C  F03D         	movff	_Update_Screen$3269,___awmod@dividend
  3932  0010C0  C04D  F03E         	movff	_Update_Screen$3269+1,___awmod@dividend+1
  3933  0010C4  0E00               	movlw	0
  3934  0010C6  6E40               	movwf	___awmod@divisor+1,c
  3935  0010C8  0E0A               	movlw	10
  3936  0010CA  6E3F               	movwf	___awmod@divisor,c
  3937  0010CC  ECDB  F021         	call	___awmod	;wreg free
  3938  0010D0  503D               	movf	?___awmod,w,c
  3939  0010D2  0F30               	addlw	48
  3940  0010D4  0100               	movlb	0	; () banked
  3941  0010D6  6FBF               	movwf	(_RPM_Txt+3)& (0+255),b
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;Main_Screen.c: 167: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3945  0010D8  0E17               	movlw	23
  3946  0010DA  6E39               	movwf	drawtext@y,c
  3947  0010DC  0ED2               	movlw	low _tempC
  3948  0010DE  6E3A               	movwf	drawtext@_text,c
  3949  0010E0  0E00               	movlw	high _tempC
  3950  0010E2  6E3B               	movwf	drawtext@_text+1,c
  3951  0010E4  0EFF               	movlw	255
  3952  0010E6  6E3D               	movwf	drawtext@color+1,c
  3953  0010E8  0EE0               	movlw	224
  3954  0010EA  6E3C               	movwf	drawtext@color,c
  3955  0010EC  0E00               	movlw	0
  3956  0010EE  6E3F               	movwf	drawtext@bg+1,c
  3957  0010F0  0E00               	movlw	0
  3958  0010F2  6E3E               	movwf	drawtext@bg,c
  3959  0010F4  0E02               	movlw	2
  3960  0010F6  6E40               	movwf	drawtext@size,c
  3961  0010F8  0E01               	movlw	1
  3962  0010FA  EC11  F01B         	call	_drawtext
  3963                           
  3964                           ;Main_Screen.c: 168: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3965  0010FE  0E17               	movlw	23
  3966  001100  6E39               	movwf	drawtext@y,c
  3967  001102  0ED6               	movlw	low _tempF
  3968  001104  6E3A               	movwf	drawtext@_text,c
  3969  001106  0E00               	movlw	high _tempF
  3970  001108  6E3B               	movwf	drawtext@_text+1,c
  3971  00110A  0EFF               	movlw	255
  3972  00110C  6E3D               	movwf	drawtext@color+1,c
  3973  00110E  0EE0               	movlw	224
  3974  001110  6E3C               	movwf	drawtext@color,c
  3975  001112  0E00               	movlw	0
  3976  001114  6E3F               	movwf	drawtext@bg+1,c
  3977  001116  0E00               	movlw	0
  3978  001118  6E3E               	movwf	drawtext@bg,c
  3979  00111A  0E02               	movlw	2
  3980  00111C  6E40               	movwf	drawtext@size,c
  3981  00111E  0E46               	movlw	70
  3982  001120  EC11  F01B         	call	_drawtext
  3983                           
  3984                           ;Main_Screen.c: 169: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3985  001124  0E34               	movlw	52
  3986  001126  6E39               	movwf	drawtext@y,c
  3987  001128  0E68               	movlw	low _time
  3988  00112A  6E3A               	movwf	drawtext@_text,c
  3989  00112C  0E01               	movlw	high _time
  3990  00112E  6E3B               	movwf	drawtext@_text+1,c
  3991  001130  0E07               	movlw	7
  3992  001132  6E3D               	movwf	drawtext@color+1,c
  3993  001134  683C               	setf	drawtext@color,c
  3994  001136  0E00               	movlw	0
  3995  001138  6E3F               	movwf	drawtext@bg+1,c
  3996  00113A  0E00               	movlw	0
  3997  00113C  6E3E               	movwf	drawtext@bg,c
  3998  00113E  0E02               	movlw	2
  3999  001140  6E40               	movwf	drawtext@size,c
  4000  001142  0E0F               	movlw	15
  4001  001144  EC11  F01B         	call	_drawtext
  4002                           
  4003                           ;Main_Screen.c: 170: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4004  001148  0E52               	movlw	82
  4005  00114A  6E39               	movwf	drawtext@y,c
  4006  00114C  0E44               	movlw	low _date
  4007  00114E  6E3A               	movwf	drawtext@_text,c
  4008  001150  0E01               	movlw	high _date
  4009  001152  6E3B               	movwf	drawtext@_text+1,c
  4010  001154  0E07               	movlw	7
  4011  001156  6E3D               	movwf	drawtext@color+1,c
  4012  001158  0EE0               	movlw	224
  4013  00115A  6E3C               	movwf	drawtext@color,c
  4014  00115C  0E00               	movlw	0
  4015  00115E  6E3F               	movwf	drawtext@bg+1,c
  4016  001160  0E00               	movlw	0
  4017  001162  6E3E               	movwf	drawtext@bg,c
  4018  001164  0E02               	movlw	2
  4019  001166  6E40               	movwf	drawtext@size,c
  4020  001168  0E0F               	movlw	15
  4021  00116A  EC11  F01B         	call	_drawtext
  4022                           
  4023                           ;Main_Screen.c: 171: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  4024  00116E  0E6E               	movlw	110
  4025  001170  6E39               	movwf	drawtext@y,c
  4026  001172  0E3B               	movlw	low _alarm_time
  4027  001174  6E3A               	movwf	drawtext@_text,c
  4028  001176  0E01               	movlw	high _alarm_time
  4029  001178  6E3B               	movwf	drawtext@_text+1,c
  4030  00117A  0E07               	movlw	7
  4031  00117C  6E3D               	movwf	drawtext@color+1,c
  4032  00117E  683C               	setf	drawtext@color,c
  4033  001180  0E00               	movlw	0
  4034  001182  6E3F               	movwf	drawtext@bg+1,c
  4035  001184  0E00               	movlw	0
  4036  001186  6E3E               	movwf	drawtext@bg,c
  4037  001188  0E01               	movlw	1
  4038  00118A  6E40               	movwf	drawtext@size,c
  4039  00118C  0E0A               	movlw	10
  4040  00118E  EC11  F01B         	call	_drawtext
  4041                           
  4042                           ;Main_Screen.c: 172: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  4043  001192  0E6E               	movlw	110
  4044  001194  6E39               	movwf	drawtext@y,c
  4045  001196  0EC6               	movlw	low _Alarm_SW_Txt
  4046  001198  6E3A               	movwf	drawtext@_text,c
  4047  00119A  0E00               	movlw	high _Alarm_SW_Txt
  4048  00119C  6E3B               	movwf	drawtext@_text+1,c
  4049  00119E  0E07               	movlw	7
  4050  0011A0  6E3D               	movwf	drawtext@color+1,c
  4051  0011A2  683C               	setf	drawtext@color,c
  4052  0011A4  0E00               	movlw	0
  4053  0011A6  6E3F               	movwf	drawtext@bg+1,c
  4054  0011A8  0E00               	movlw	0
  4055  0011AA  6E3E               	movwf	drawtext@bg,c
  4056  0011AC  0E01               	movlw	1
  4057  0011AE  6E40               	movwf	drawtext@size,c
  4058  0011B0  0E5F               	movlw	95
  4059  0011B2  EC11  F01B         	call	_drawtext
  4060                           
  4061                           ;Main_Screen.c: 173: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  4062  0011B6  0E82               	movlw	130
  4063  0011B8  6E39               	movwf	drawtext@y,c
  4064  0011BA  0EB7               	movlw	low _Heater_Set_Temp_Txt
  4065  0011BC  6E3A               	movwf	drawtext@_text,c
  4066  0011BE  0E00               	movlw	high _Heater_Set_Temp_Txt
  4067  0011C0  6E3B               	movwf	drawtext@_text+1,c
  4068  0011C2  0EF8               	movlw	248
  4069  0011C4  6E3D               	movwf	drawtext@color+1,c
  4070  0011C6  0E00               	movlw	0
  4071  0011C8  6E3C               	movwf	drawtext@color,c
  4072  0011CA  0E00               	movlw	0
  4073  0011CC  6E3F               	movwf	drawtext@bg+1,c
  4074  0011CE  0E00               	movlw	0
  4075  0011D0  6E3E               	movwf	drawtext@bg,c
  4076  0011D2  0E01               	movlw	1
  4077  0011D4  6E40               	movwf	drawtext@size,c
  4078  0011D6  0E23               	movlw	35
  4079  0011D8  EC11  F01B         	call	_drawtext
  4080                           
  4081                           ;Main_Screen.c: 174: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  4082  0011DC  0E82               	movlw	130
  4083  0011DE  6E39               	movwf	drawtext@y,c
  4084  0011E0  0ECE               	movlw	low _Heater_SW_Txt
  4085  0011E2  6E3A               	movwf	drawtext@_text,c
  4086  0011E4  0E00               	movlw	high _Heater_SW_Txt
  4087  0011E6  6E3B               	movwf	drawtext@_text+1,c
  4088  0011E8  0EF8               	movlw	248
  4089  0011EA  6E3D               	movwf	drawtext@color+1,c
  4090  0011EC  0E00               	movlw	0
  4091  0011EE  6E3C               	movwf	drawtext@color,c
  4092  0011F0  0E00               	movlw	0
  4093  0011F2  6E3F               	movwf	drawtext@bg+1,c
  4094  0011F4  0E00               	movlw	0
  4095  0011F6  6E3E               	movwf	drawtext@bg,c
  4096  0011F8  0E01               	movlw	1
  4097  0011FA  6E40               	movwf	drawtext@size,c
  4098  0011FC  0E5F               	movlw	95
  4099  0011FE  EC11  F01B         	call	_drawtext
  4100                           
  4101                           ;Main_Screen.c: 175: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4102  001202  0E96               	movlw	150
  4103  001204  6E39               	movwf	drawtext@y,c
  4104  001206  0ECA               	movlw	low _DC_Txt
  4105  001208  6E3A               	movwf	drawtext@_text,c
  4106  00120A  0E00               	movlw	high _DC_Txt
  4107  00120C  6E3B               	movwf	drawtext@_text+1,c
  4108  00120E  0E07               	movlw	7
  4109  001210  6E3D               	movwf	drawtext@color+1,c
  4110  001212  0EE0               	movlw	224
  4111  001214  6E3C               	movwf	drawtext@color,c
  4112  001216  0E00               	movlw	0
  4113  001218  6E3F               	movwf	drawtext@bg+1,c
  4114  00121A  0E00               	movlw	0
  4115  00121C  6E3E               	movwf	drawtext@bg,c
  4116  00121E  0E01               	movlw	1
  4117  001220  6E40               	movwf	drawtext@size,c
  4118  001222  0E0A               	movlw	10
  4119  001224  EC11  F01B         	call	_drawtext
  4120                           
  4121                           ;Main_Screen.c: 176: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  4122  001228  0E96               	movlw	150
  4123  00122A  6E39               	movwf	drawtext@y,c
  4124  00122C  0EDA               	movlw	low _RTC_ALARM_Txt
  4125  00122E  6E3A               	movwf	drawtext@_text,c
  4126  001230  0E00               	movlw	high _RTC_ALARM_Txt
  4127  001232  6E3B               	movwf	drawtext@_text+1,c
  4128  001234  0E07               	movlw	7
  4129  001236  6E3D               	movwf	drawtext@color+1,c
  4130  001238  0EE0               	movlw	224
  4131  00123A  6E3C               	movwf	drawtext@color,c
  4132  00123C  0E00               	movlw	0
  4133  00123E  6E3F               	movwf	drawtext@bg+1,c
  4134  001240  0E00               	movlw	0
  4135  001242  6E3E               	movwf	drawtext@bg,c
  4136  001244  0E01               	movlw	1
  4137  001246  6E40               	movwf	drawtext@size,c
  4138  001248  0E23               	movlw	35
  4139  00124A  EC11  F01B         	call	_drawtext
  4140                           
  4141                           ;Main_Screen.c: 177: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  4142  00124E  0E96               	movlw	150
  4143  001250  6E39               	movwf	drawtext@y,c
  4144  001252  0E71               	movlw	low _Volt_Txt
  4145  001254  6E3A               	movwf	drawtext@_text,c
  4146  001256  0E01               	movlw	high _Volt_Txt
  4147  001258  6E3B               	movwf	drawtext@_text+1,c
  4148  00125A  0E07               	movlw	7
  4149  00125C  6E3D               	movwf	drawtext@color+1,c
  4150  00125E  0EE0               	movlw	224
  4151  001260  6E3C               	movwf	drawtext@color,c
  4152  001262  0E00               	movlw	0
  4153  001264  6E3F               	movwf	drawtext@bg+1,c
  4154  001266  0E00               	movlw	0
  4155  001268  6E3E               	movwf	drawtext@bg,c
  4156  00126A  0E01               	movlw	1
  4157  00126C  6E40               	movwf	drawtext@size,c
  4158  00126E  0E32               	movlw	50
  4159  001270  EC11  F01B         	call	_drawtext
  4160                           
  4161                           ;Main_Screen.c: 178: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4162  001274  0E96               	movlw	150
  4163  001276  6E39               	movwf	drawtext@y,c
  4164  001278  0EBC               	movlw	low _RPM_Txt
  4165  00127A  6E3A               	movwf	drawtext@_text,c
  4166  00127C  0E00               	movlw	high _RPM_Txt
  4167  00127E  6E3B               	movwf	drawtext@_text+1,c
  4168  001280  0E07               	movlw	7
  4169  001282  6E3D               	movwf	drawtext@color+1,c
  4170  001284  0EE0               	movlw	224
  4171  001286  6E3C               	movwf	drawtext@color,c
  4172  001288  0E00               	movlw	0
  4173  00128A  6E3F               	movwf	drawtext@bg+1,c
  4174  00128C  0E00               	movlw	0
  4175  00128E  6E3E               	movwf	drawtext@bg,c
  4176  001290  0E01               	movlw	1
  4177  001292  6E40               	movwf	drawtext@size,c
  4178  001294  0E5D               	movlw	93
  4179  001296  EC11  F01B         	call	_drawtext
  4180  00129A  0012               	return		;funcret
  4181  00129C                     __end_of_Update_Screen:
  4182                           	opt stack 0
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postdec1	equ	0xFE5
  4190                           fsr1l	equ	0xFE1
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function _Toggle_Heater *****************
  4194 ;; Defined at:
  4195 ;;		line 74 in file "Fan_Support.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;		None
  4200 ;; Return value:  Size  Location     Type
  4201 ;;		None               void
  4202 ;; Registers used:
  4203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;Total ram usage:        0 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    8
  4216 ;; This function calls:
  4217 ;;		_Turn_Off_Fan
  4218 ;;		_Turn_On_Fan
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           	psect	text3
  4225  0050C6                     __ptext3:
  4226                           	opt stack 0
  4227  0050C6                     _Toggle_Heater:
  4228                           	opt stack 22
  4229                           
  4230                           ;Fan_Support.c: 77: if (HEATER==0) Turn_On_Fan();
  4231                           
  4232                           ;incstack = 0
  4233  0050C6  0100               	movlb	0	; () banked
  4234  0050C8  519B               	movf	_HEATER& (0+255),w,b
  4235  0050CA  A4D8               	btfss	status,2,c
  4236  0050CC  D003               	goto	l10404
  4237                           
  4238                           ; BSR set to: 0
  4239  0050CE  EC4B  F027         	call	_Turn_On_Fan	;wreg free
  4240  0050D2  D003               	goto	l53
  4241  0050D4                     l10404:
  4242                           
  4243                           ;Fan_Support.c: 78: else Turn_Off_Fan();
  4244  0050D4  EC5C  F027         	call	_Turn_Off_Fan	;wreg free
  4245  0050D8  D000               	goto	l53
  4246  0050DA                     l53:
  4247  0050DA  0012               	return		;funcret
  4248  0050DC                     __end_of_Toggle_Heater:
  4249                           	opt stack 0
  4250                           tblptru	equ	0xFF8
  4251                           tblptrh	equ	0xFF7
  4252                           tblptrl	equ	0xFF6
  4253                           tablat	equ	0xFF5
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           postdec1	equ	0xFE5
  4257                           fsr1l	equ	0xFE1
  4258                           status	equ	0xFD8
  4259                           
  4260 ;; *************** function _Turn_On_Fan *****************
  4261 ;; Defined at:
  4262 ;;		line 100 in file "Fan_Support.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;		None
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;		None
  4267 ;; Return value:  Size  Location     Type
  4268 ;;		None               void
  4269 ;; Registers used:
  4270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;Total ram usage:        0 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:    7
  4283 ;; This function calls:
  4284 ;;		_do_update_pwm
  4285 ;;		_printf
  4286 ;; This function is called by:
  4287 ;;		_Toggle_Heater
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text4
  4292  004E96                     __ptext4:
  4293                           	opt stack 0
  4294  004E96                     _Turn_On_Fan:
  4295                           	opt stack 22
  4296                           
  4297                           ;Fan_Support.c: 103: printf ("Fan is turned on\r\n");
  4298                           
  4299                           ;incstack = 0
  4300  004E96  0E19               	movlw	low STR_2
  4301  004E98  0100               	movlb	0	; () banked
  4302  004E9A  6FDC               	movwf	printf@f& (0+255),b
  4303  004E9C  0EFF               	movlw	high STR_2
  4304  004E9E  0100               	movlb	0	; () banked
  4305  004EA0  6FDD               	movwf	(printf@f+1)& (0+255),b
  4306  004EA2  EC0E  F000         	call	_printf	;wreg free
  4307                           
  4308                           ;Fan_Support.c: 104: HEATER = 1;
  4309  004EA6  0E01               	movlw	1
  4310  004EA8  0100               	movlb	0	; () banked
  4311  004EAA  6F9B               	movwf	_HEATER& (0+255),b
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;Fan_Support.c: 105: do_update_pwm(duty_cycle);
  4315  004EAC  5068               	movf	_duty_cycle,w,c
  4316  004EAE  ECA6  F01E         	call	_do_update_pwm
  4317                           
  4318                           ;Fan_Support.c: 106: PORTAbits.RA4 = 1;
  4319  004EB2  8880               	bsf	3968,4,c	;volatile
  4320                           
  4321                           ;Fan_Support.c: 107: PORTDbits.RD3 = 1;
  4322  004EB4  8683               	bsf	3971,3,c	;volatile
  4323  004EB6  0012               	return		;funcret
  4324  004EB8                     __end_of_Turn_On_Fan:
  4325                           	opt stack 0
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           postdec1	equ	0xFE5
  4333                           fsr1l	equ	0xFE1
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _Test_Alarm *****************
  4337 ;; Defined at:
  4338 ;;		line 213 in file "Main.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;Total ram usage:        0 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    9
  4359 ;; This function calls:
  4360 ;;		_Activate_Buzzer_4KHz
  4361 ;;		_DS3231_Turn_Off_Alarm
  4362 ;;		_DS3231_Turn_On_Alarm
  4363 ;;		_Deactivate_Buzzer
  4364 ;;		_Set_RGB_Color
  4365 ;;		___ftge
  4366 ;;		_do_update_pwm
  4367 ;;		_read_volt
  4368 ;; This function is called by:
  4369 ;;		_main
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text5
  4374  0029F4                     __ptext5:
  4375                           	opt stack 0
  4376  0029F4                     _Test_Alarm:
  4377                           	opt stack 21
  4378                           
  4379                           ;Main.c: 216: if (alarm_mode == 0 && ALARMEN == 1)
  4380                           
  4381                           ;incstack = 0
  4382  0029F4  0100               	movlb	0	; () banked
  4383  0029F6  518F               	movf	_alarm_mode& (0+255),w,b
  4384  0029F8  0100               	movlb	0	; () banked
  4385  0029FA  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4386  0029FC  A4D8               	btfss	status,2,c
  4387  0029FE  D00D               	goto	l10458
  4388                           
  4389                           ; BSR set to: 0
  4390  002A00  0100               	movlb	0	; () banked
  4391  002A02  0587               	decf	_ALARMEN& (0+255),w,b
  4392  002A04  0100               	movlb	0	; () banked
  4393  002A06  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4394  002A08  A4D8               	btfss	status,2,c
  4395  002A0A  D007               	goto	l10458
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;Main.c: 217: {
  4399                           ;Main.c: 218: DS3231_Turn_On_Alarm();
  4400  002A0C  ECB1  F024         	call	_DS3231_Turn_On_Alarm	;wreg free
  4401                           
  4402                           ;Main.c: 219: alarm_mode = 1;
  4403  002A10  0E00               	movlw	0
  4404  002A12  0100               	movlb	0	; () banked
  4405  002A14  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  4406  002A16  0E01               	movlw	1
  4407  002A18  D07B               	goto	L4
  4408  002A1A                     l10458:
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;Main.c: 221: else if (alarm_mode == 1 && ALARMEN == 0)
  4412  002A1A  0100               	movlb	0	; () banked
  4413  002A1C  058F               	decf	_alarm_mode& (0+255),w,b
  4414  002A1E  0100               	movlb	0	; () banked
  4415  002A20  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4416  002A22  A4D8               	btfss	status,2,c
  4417  002A24  D013               	goto	l10468
  4418                           
  4419                           ; BSR set to: 0
  4420  002A26  0100               	movlb	0	; () banked
  4421  002A28  5187               	movf	_ALARMEN& (0+255),w,b
  4422  002A2A  0100               	movlb	0	; () banked
  4423  002A2C  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4424  002A2E  A4D8               	btfss	status,2,c
  4425  002A30  D00D               	goto	l10468
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;Main.c: 222: {
  4429                           ;Main.c: 223: DS3231_Turn_Off_Alarm();
  4430  002A32  ECDA  F024         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4431                           
  4432                           ;Main.c: 224: alarm_mode = 0;
  4433  002A36  0E00               	movlw	0
  4434  002A38  0100               	movlb	0	; () banked
  4435  002A3A  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  4436  002A3C  0E00               	movlw	0
  4437  002A3E  6F8F               	movwf	_alarm_mode& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;Main.c: 225: PORTD = (PORTD & 0x8F);
  4441  002A40  5083               	movf	3971,w,c	;volatile
  4442  002A42  0B8F               	andlw	143
  4443  002A44  6E83               	movwf	3971,c	;volatile
  4444                           
  4445                           ;Main.c: 227: Deactivate_Buzzer();
  4446  002A46  EC47  F029         	call	_Deactivate_Buzzer	;wreg free
  4447                           
  4448                           ;Main.c: 228: }
  4449  002A4A  D064               	goto	l556
  4450  002A4C                     l10468:
  4451                           
  4452                           ;Main.c: 229: else if (alarm_mode == 1 && ALARMEN == 1)
  4453  002A4C  0100               	movlb	0	; () banked
  4454  002A4E  058F               	decf	_alarm_mode& (0+255),w,b
  4455  002A50  0100               	movlb	0	; () banked
  4456  002A52  1190               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4457  002A54  A4D8               	btfss	status,2,c
  4458  002A56  D05E               	goto	l556
  4459                           
  4460                           ; BSR set to: 0
  4461  002A58  0100               	movlb	0	; () banked
  4462  002A5A  0587               	decf	_ALARMEN& (0+255),w,b
  4463  002A5C  0100               	movlb	0	; () banked
  4464  002A5E  1188               	iorwf	(_ALARMEN+1)& (0+255),w,b
  4465  002A60  A4D8               	btfss	status,2,c
  4466  002A62  D058               	goto	l556
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;Main.c: 230: {
  4470                           ;Main.c: 231: if (PORTAbits.RA5 == 0)
  4471  002A64  BA80               	btfsc	3968,5,c	;volatile
  4472  002A66  D008               	goto	l10478
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;Main.c: 232: {
  4476                           ;Main.c: 233: MATCHED = 1;
  4477  002A68  0E00               	movlw	0
  4478  002A6A  0100               	movlb	0	; () banked
  4479  002A6C  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  4480  002A6E  0E01               	movlw	1
  4481  002A70  6F8D               	movwf	_MATCHED& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;Main.c: 234: Activate_Buzzer_4KHz();
  4485  002A72  ECAC  F028         	call	_Activate_Buzzer_4KHz	;wreg free
  4486  002A76  D000               	goto	l10478
  4487  002A78                     l10478:
  4488                           
  4489                           ;Main.c: 235: }
  4490                           ;Main.c: 236: if (MATCHED == 1)
  4491  002A78  0100               	movlb	0	; () banked
  4492  002A7A  058D               	decf	_MATCHED& (0+255),w,b
  4493  002A7C  0100               	movlb	0	; () banked
  4494  002A7E  118E               	iorwf	(_MATCHED+1)& (0+255),w,b
  4495  002A80  A4D8               	btfss	status,2,c
  4496  002A82  D048               	goto	l556
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;Main.c: 237: {
  4500                           ;Main.c: 238: Set_RGB_Color(color++);
  4501  002A84  0100               	movlb	0	; () banked
  4502  002A86  5191               	movf	_color& (0+255),w,b
  4503  002A88  EC6E  F028         	call	_Set_RGB_Color
  4504  002A8C  0100               	movlb	0	; () banked
  4505  002A8E  4B91               	infsnz	_color& (0+255),f,b
  4506  002A90  2B92               	incf	(_color+1)& (0+255),f,b
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;Main.c: 239: if(color > 7) color = 0;
  4510  002A92  0100               	movlb	0	; () banked
  4511  002A94  BF92               	btfsc	(_color+1)& (0+255),7,b
  4512  002A96  D00E               	goto	l10488
  4513  002A98  0100               	movlb	0	; () banked
  4514  002A9A  5192               	movf	(_color+1)& (0+255),w,b
  4515  002A9C  E105               	bnz	u8980
  4516  002A9E  0E08               	movlw	8
  4517  002AA0  0100               	movlb	0	; () banked
  4518  002AA2  5D91               	subwf	_color& (0+255),w,b
  4519  002AA4  A0D8               	btfss	status,0,c
  4520  002AA6  D006               	goto	l10488
  4521  002AA8                     u8980:
  4522                           
  4523                           ; BSR set to: 0
  4524  002AA8  0E00               	movlw	0
  4525  002AAA  0100               	movlb	0	; () banked
  4526  002AAC  6F92               	movwf	(_color+1)& (0+255),b
  4527  002AAE  0E00               	movlw	0
  4528  002AB0  6F91               	movwf	_color& (0+255),b
  4529  002AB2  D000               	goto	l10488
  4530  002AB4                     l10488:
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;Main.c: 240: volt = read_volt();
  4534  002AB4  EC3B  F023         	call	_read_volt	;wreg free
  4535  002AB8  C03D  F084         	movff	?_read_volt,_volt
  4536  002ABC  C03E  F085         	movff	?_read_volt+1,_volt+1
  4537  002AC0  C03F  F086         	movff	?_read_volt+2,_volt+2
  4538                           
  4539                           ;Main.c: 241: if (volt > 3)
  4540  002AC4  0E00               	movlw	0
  4541  002AC6  6E11               	movwf	___ftge@ff1,c
  4542  002AC8  0E40               	movlw	64
  4543  002ACA  6E12               	movwf	___ftge@ff1+1,c
  4544  002ACC  0E40               	movlw	64
  4545  002ACE  6E13               	movwf	___ftge@ff1+2,c
  4546  002AD0  C084  F014         	movff	_volt,___ftge@ff2
  4547  002AD4  C085  F015         	movff	_volt+1,___ftge@ff2+1
  4548  002AD8  C086  F016         	movff	_volt+2,___ftge@ff2+2
  4549  002ADC  EC2F  F020         	call	___ftge	;wreg free
  4550  002AE0  B0D8               	btfsc	status,0,c
  4551  002AE2  D018               	goto	l556
  4552                           
  4553                           ;Main.c: 242: {
  4554                           ;Main.c: 243: MATCHED = 0;
  4555  002AE4  0E00               	movlw	0
  4556  002AE6  0100               	movlb	0	; () banked
  4557  002AE8  6F8E               	movwf	(_MATCHED+1)& (0+255),b
  4558  002AEA  0E00               	movlw	0
  4559  002AEC  6F8D               	movwf	_MATCHED& (0+255),b
  4560                           
  4561                           ;Main.c: 244: color = 0;
  4562  002AEE  0E00               	movlw	0
  4563  002AF0  0100               	movlb	0	; () banked
  4564  002AF2  6F92               	movwf	(_color+1)& (0+255),b
  4565  002AF4  0E00               	movlw	0
  4566  002AF6  6F91               	movwf	_color& (0+255),b
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;Main.c: 245: Set_RGB_Color(0);
  4570  002AF8  0E00               	movlw	0
  4571  002AFA  EC6E  F028         	call	_Set_RGB_Color
  4572                           
  4573                           ;Main.c: 246: Deactivate_Buzzer();
  4574  002AFE  EC47  F029         	call	_Deactivate_Buzzer	;wreg free
  4575                           
  4576                           ;Main.c: 247: do_update_pwm(duty_cycle);
  4577  002B02  5068               	movf	_duty_cycle,w,c
  4578  002B04  ECA6  F01E         	call	_do_update_pwm
  4579                           
  4580                           ;Main.c: 248: alarm_mode = 0;
  4581  002B08  0E00               	movlw	0
  4582  002B0A  0100               	movlb	0	; () banked
  4583  002B0C  6F90               	movwf	(_alarm_mode+1)& (0+255),b
  4584  002B0E  0E00               	movlw	0
  4585  002B10                     L4:
  4586  002B10  6F8F               	movwf	_alarm_mode& (0+255),b
  4587                           
  4588                           ; BSR set to: 0
  4589                           
  4590                           ; BSR set to: 0
  4591                           
  4592                           ; BSR set to: 0
  4593                           
  4594                           ; BSR set to: 0
  4595  002B12  D000               	goto	l556
  4596  002B14                     l556:
  4597  002B14  0012               	return		;funcret
  4598  002B16                     __end_of_Test_Alarm:
  4599                           	opt stack 0
  4600                           tblptru	equ	0xFF8
  4601                           tblptrh	equ	0xFF7
  4602                           tblptrl	equ	0xFF6
  4603                           tablat	equ	0xFF5
  4604                           postinc0	equ	0xFEE
  4605                           wreg	equ	0xFE8
  4606                           postdec1	equ	0xFE5
  4607                           fsr1l	equ	0xFE1
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _read_volt *****************
  4611 ;; Defined at:
  4612 ;;		line 159 in file "utils.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  volt            3   63[COMRAM] float 
  4617 ;;  nStep           2   66[COMRAM] int 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  3   60[COMRAM] float 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4627 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;Total ram usage:        8 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    5
  4634 ;; This function calls:
  4635 ;;		___awtoft
  4636 ;;		___ftdiv
  4637 ;;		___wmul
  4638 ;;		_get_full_ADC
  4639 ;; This function is called by:
  4640 ;;		_main
  4641 ;;		_Test_Alarm
  4642 ;; This function uses a non-reentrant model
  4643 ;;
  4644                           
  4645                           	psect	text6
  4646  004676                     __ptext6:
  4647                           	opt stack 0
  4648  004676                     _read_volt:
  4649                           	opt stack 25
  4650                           
  4651                           ;utils.c: 162: int nStep = get_full_ADC();
  4652                           
  4653                           ;incstack = 0
  4654  004676  EC13  F027         	call	_get_full_ADC	;wreg free
  4655  00467A  C011  F043         	movff	?_get_full_ADC,read_volt@nStep
  4656  00467E  C012  F044         	movff	?_get_full_ADC+1,read_volt@nStep+1
  4657                           
  4658                           ;utils.c: 163: float volt = nStep * 5 /1024.0;
  4659  004682  C043  F011         	movff	read_volt@nStep,___wmul@multiplier
  4660  004686  C044  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  4661  00468A  0E00               	movlw	0
  4662  00468C  6E14               	movwf	___wmul@multiplicand+1,c
  4663  00468E  0E05               	movlw	5
  4664  004690  6E13               	movwf	___wmul@multiplicand,c
  4665  004692  ECFF  F026         	call	___wmul	;wreg free
  4666  004696  C011  F019         	movff	?___wmul,___awtoft@c
  4667  00469A  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  4668  00469E  EC3A  F026         	call	___awtoft	;wreg free
  4669  0046A2  C019  F02E         	movff	?___awtoft,___ftdiv@f1
  4670  0046A6  C01A  F02F         	movff	?___awtoft+1,___ftdiv@f1+1
  4671  0046AA  C01B  F030         	movff	?___awtoft+2,___ftdiv@f1+2
  4672  0046AE  0E00               	movlw	0
  4673  0046B0  6E31               	movwf	___ftdiv@f2,c
  4674  0046B2  0E80               	movlw	128
  4675  0046B4  6E32               	movwf	___ftdiv@f2+1,c
  4676  0046B6  0E44               	movlw	68
  4677  0046B8  6E33               	movwf	___ftdiv@f2+2,c
  4678  0046BA  EC82  F01B         	call	___ftdiv	;wreg free
  4679  0046BE  C02E  F040         	movff	?___ftdiv,read_volt@volt
  4680  0046C2  C02F  F041         	movff	?___ftdiv+1,read_volt@volt+1
  4681  0046C6  C030  F042         	movff	?___ftdiv+2,read_volt@volt+2
  4682                           
  4683                           ;utils.c: 164: return volt;
  4684  0046CA  C040  F03D         	movff	read_volt@volt,?_read_volt
  4685  0046CE  C041  F03E         	movff	read_volt@volt+1,?_read_volt+1
  4686  0046D2  C042  F03F         	movff	read_volt@volt+2,?_read_volt+2
  4687  0046D6  D000               	goto	l1355
  4688  0046D8                     l1355:
  4689  0046D8  0012               	return		;funcret
  4690  0046DA                     __end_of_read_volt:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           postinc0	equ	0xFEE
  4697                           wreg	equ	0xFE8
  4698                           postdec1	equ	0xFE5
  4699                           fsr1l	equ	0xFE1
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _get_full_ADC *****************
  4703 ;; Defined at:
  4704 ;;		line 167 in file "utils.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  result          2   20[COMRAM] unsigned int 
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  2   16[COMRAM] unsigned int 
  4711 ;; Registers used:
  4712 ;;		wreg, status,2, status,0
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;Total ram usage:        6 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:    3
  4725 ;; This function calls:
  4726 ;;		Nothing
  4727 ;; This function is called by:
  4728 ;;		_read_volt
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text7
  4733  004E26                     __ptext7:
  4734                           	opt stack 0
  4735  004E26                     _get_full_ADC:
  4736                           	opt stack 26
  4737                           
  4738                           ;utils.c: 170: unsigned int result;
  4739                           ;utils.c: 171: ADCON0bits.GO=1;
  4740                           
  4741                           ;incstack = 0
  4742  004E26  82C2               	bsf	4034,1,c	;volatile
  4743                           
  4744                           ;utils.c: 172: while(ADCON0bits.DONE==1);
  4745  004E28  D000               	goto	l1358
  4746  004E2A                     l1358:
  4747  004E2A  B2C2               	btfsc	4034,1,c	;volatile
  4748  004E2C  D7FE               	goto	l1358
  4749                           
  4750                           ;utils.c: 173: result = (ADRESH * 0x100) + ADRESL;
  4751  004E2E  50C4               	movf	4036,w,c	;volatile
  4752  004E30  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  4753  004E32  6A13               	clrf	??_get_full_ADC& (0+255),c
  4754  004E34  50C3               	movf	4035,w,c	;volatile
  4755  004E36  2413               	addwf	??_get_full_ADC,w,c
  4756  004E38  6E15               	movwf	get_full_ADC@result,c
  4757  004E3A  0E00               	movlw	0
  4758  004E3C  2014               	addwfc	??_get_full_ADC+1,w,c
  4759  004E3E  6E16               	movwf	get_full_ADC@result+1,c
  4760                           
  4761                           ;utils.c: 175: return result;
  4762  004E40  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  4763  004E44  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4764  004E48  D000               	goto	l1361
  4765  004E4A                     l1361:
  4766  004E4A  0012               	return		;funcret
  4767  004E4C                     __end_of_get_full_ADC:
  4768                           	opt stack 0
  4769                           tblptru	equ	0xFF8
  4770                           tblptrh	equ	0xFF7
  4771                           tblptrl	equ	0xFF6
  4772                           tablat	equ	0xFF5
  4773                           postinc0	equ	0xFEE
  4774                           wreg	equ	0xFE8
  4775                           postdec1	equ	0xFE5
  4776                           fsr1l	equ	0xFE1
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function ___awtoft *****************
  4780 ;; Defined at:
  4781 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  c               2   24[COMRAM] int 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  sign            1   27[COMRAM] unsigned char 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  3   24[COMRAM] float 
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4795 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;Total ram usage:        4 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    4
  4802 ;; This function calls:
  4803 ;;		___ftpack
  4804 ;; This function is called by:
  4805 ;;		_read_volt
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text8
  4810  004C74                     __ptext8:
  4811                           	opt stack 0
  4812  004C74                     ___awtoft:
  4813                           	opt stack 25
  4814                           
  4815                           ;incstack = 0
  4816  004C74  0E00               	movlw	0
  4817  004C76  6E1C               	movwf	___awtoft@sign,c
  4818  004C78  AE1A               	btfss	___awtoft@c+1,7,c
  4819  004C7A  D007               	goto	l10016
  4820  004C7C  6C19               	negf	___awtoft@c,c
  4821  004C7E  1E1A               	comf	___awtoft@c+1,f,c
  4822  004C80  B0D8               	btfsc	status,0,c
  4823  004C82  2A1A               	incf	___awtoft@c+1,f,c
  4824  004C84  0E01               	movlw	1
  4825  004C86  6E1C               	movwf	___awtoft@sign,c
  4826  004C88  D000               	goto	l10016
  4827  004C8A                     l10016:
  4828  004C8A  C019  F011         	movff	___awtoft@c,___ftpack@arg
  4829  004C8E  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  4830  004C92  6A13               	clrf	___ftpack@arg+2,c
  4831  004C94  0E8E               	movlw	142
  4832  004C96  6E14               	movwf	___ftpack@exp,c
  4833  004C98  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  4834  004C9C  ECCD  F01C         	call	___ftpack	;wreg free
  4835  004CA0  C011  F019         	movff	?___ftpack,?___awtoft
  4836  004CA4  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  4837  004CA8  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  4838  004CAC  D000               	goto	l1760
  4839  004CAE                     l1760:
  4840  004CAE  0012               	return		;funcret
  4841  004CB0                     __end_of___awtoft:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           postdec1	equ	0xFE5
  4850                           fsr1l	equ	0xFE1
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function _Set_RGB_Color *****************
  4854 ;; Defined at:
  4855 ;;		line 152 in file "utils.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;  color           1    wreg     unsigned char 
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;  color           1   17[COMRAM] unsigned char 
  4860 ;; Return value:  Size  Location     Type
  4861 ;;		None               void
  4862 ;; Registers used:
  4863 ;;		wreg, status,2, status,0
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;Total ram usage:        2 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    3
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_main
  4880 ;;		_Test_Alarm
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text9
  4885  0050DC                     __ptext9:
  4886                           	opt stack 0
  4887  0050DC                     _Set_RGB_Color:
  4888                           	opt stack 26
  4889                           
  4890                           ;incstack = 0
  4891                           ;Set_RGB_Color@color stored from wreg
  4892  0050DC  6E12               	movwf	Set_RGB_Color@color,c
  4893                           
  4894                           ;utils.c: 156: PORTD = (PORTD & 0x8F) | (color << 4);
  4895  0050DE  C012  F011         	movff	Set_RGB_Color@color,??_Set_RGB_Color
  4896  0050E2  3A11               	swapf	??_Set_RGB_Color,f,c
  4897  0050E4  0EF0               	movlw	240
  4898  0050E6  1611               	andwf	??_Set_RGB_Color,f,c
  4899  0050E8  5083               	movf	3971,w,c	;volatile
  4900  0050EA  0B8F               	andlw	143
  4901  0050EC  1011               	iorwf	??_Set_RGB_Color,w,c
  4902  0050EE  6E83               	movwf	3971,c	;volatile
  4903  0050F0  0012               	return		;funcret
  4904  0050F2                     __end_of_Set_RGB_Color:
  4905                           	opt stack 0
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           postinc0	equ	0xFEE
  4911                           wreg	equ	0xFE8
  4912                           postdec1	equ	0xFE5
  4913                           fsr1l	equ	0xFE1
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4917 ;; Defined at:
  4918 ;;		line 210 in file "I2C_Support.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  Device          1   30[COMRAM] unsigned char 
  4923 ;;  control_F       1   29[COMRAM] unsigned char 
  4924 ;;  control_E       1   28[COMRAM] unsigned char 
  4925 ;;  Address_F       1   27[COMRAM] unsigned char 
  4926 ;;  Address_E       1   26[COMRAM] unsigned char 
  4927 ;; Return value:  Size  Location     Type
  4928 ;;		None               void
  4929 ;; Registers used:
  4930 ;;		wreg, status,2, status,0, cstack
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;Total ram usage:        5 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:    8
  4943 ;; This function calls:
  4944 ;;		_DS3231_Init
  4945 ;;		_I2C_Write_Address_Read_One_Byte
  4946 ;;		_I2C_Write_Address_Write_One_Byte
  4947 ;; This function is called by:
  4948 ;;		_Test_Alarm
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           	psect	text10
  4953  004962                     __ptext10:
  4954                           	opt stack 0
  4955  004962                     _DS3231_Turn_On_Alarm:
  4956                           	opt stack 21
  4957                           
  4958                           ;I2C_Support.c: 212: char Device = 0x68;
  4959                           
  4960                           ;incstack = 0
  4961  004962  0E68               	movlw	104
  4962  004964  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  4963                           
  4964                           ;I2C_Support.c: 213: char Address_E = 0x0E;
  4965  004966  0E0E               	movlw	14
  4966  004968  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  4967                           
  4968                           ;I2C_Support.c: 214: char Address_F = 0x0F;
  4969  00496A  0E0F               	movlw	15
  4970  00496C  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  4971                           
  4972                           ;I2C_Support.c: 215: char control_E;
  4973                           ;I2C_Support.c: 216: char control_F;
  4974                           ;I2C_Support.c: 218: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4975  00496E  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4976  004972  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4977  004974  EC76  F026         	call	_I2C_Write_Address_Read_One_Byte
  4978  004978  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4979                           
  4980                           ;I2C_Support.c: 219: control_E = control_E | 0x01;
  4981  00497A  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  4982  00497C  0901               	iorlw	1
  4983  00497E  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4984                           
  4985                           ;I2C_Support.c: 220: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4986  004980  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4987  004984  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4988  004988  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4989  00498A  EC7E  F027         	call	_I2C_Write_Address_Write_One_Byte
  4990                           
  4991                           ;I2C_Support.c: 222: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4992  00498E  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4993  004992  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4994  004994  EC76  F026         	call	_I2C_Write_Address_Read_One_Byte
  4995  004998  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4996                           
  4997                           ;I2C_Support.c: 223: control_F = control_F & 0xFE;
  4998  00499A  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  4999  00499C  0BFE               	andlw	254
  5000  00499E  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  5001                           
  5002                           ;I2C_Support.c: 224: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  5003  0049A0  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  5004  0049A4  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  5005  0049A8  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  5006  0049AA  EC7E  F027         	call	_I2C_Write_Address_Write_One_Byte
  5007                           
  5008                           ;I2C_Support.c: 225: DS3231_Init();
  5009  0049AE  EC30  F01D         	call	_DS3231_Init	;wreg free
  5010  0049B2  0012               	return		;funcret
  5011  0049B4                     __end_of_DS3231_Turn_On_Alarm:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           postdec1	equ	0xFE5
  5020                           fsr1l	equ	0xFE1
  5021                           status	equ	0xFD8
  5022                           
  5023 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  5024 ;; Defined at:
  5025 ;;		line 193 in file "I2C_Support.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;		None
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  Device          1   30[COMRAM] unsigned char 
  5030 ;;  control_F       1   29[COMRAM] unsigned char 
  5031 ;;  control_E       1   28[COMRAM] unsigned char 
  5032 ;;  Address_F       1   27[COMRAM] unsigned char 
  5033 ;;  Address_E       1   26[COMRAM] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;Total ram usage:        5 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    8
  5050 ;; This function calls:
  5051 ;;		_DS3231_Init
  5052 ;;		_I2C_Write_Address_Read_One_Byte
  5053 ;;		_I2C_Write_Address_Write_One_Byte
  5054 ;; This function is called by:
  5055 ;;		_main
  5056 ;;		_Test_Alarm
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text11
  5061  0049B4                     __ptext11:
  5062                           	opt stack 0
  5063  0049B4                     _DS3231_Turn_Off_Alarm:
  5064                           	opt stack 21
  5065                           
  5066                           ;I2C_Support.c: 195: char Device = 0x68;
  5067                           
  5068                           ;incstack = 0
  5069  0049B4  0E68               	movlw	104
  5070  0049B6  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  5071                           
  5072                           ;I2C_Support.c: 196: char Address_E = 0x0E;
  5073  0049B8  0E0E               	movlw	14
  5074  0049BA  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  5075                           
  5076                           ;I2C_Support.c: 197: char Address_F = 0x0F;
  5077  0049BC  0E0F               	movlw	15
  5078  0049BE  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  5079                           
  5080                           ;I2C_Support.c: 198: char control_E;
  5081                           ;I2C_Support.c: 199: char control_F;
  5082                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5083  0049C0  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5084  0049C4  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5085  0049C6  EC76  F026         	call	_I2C_Write_Address_Read_One_Byte
  5086  0049CA  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  5087                           
  5088                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
  5089  0049CC  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  5090  0049CE  0BFE               	andlw	254
  5091  0049D0  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  5092                           
  5093                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5094  0049D2  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5095  0049D6  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5096  0049DA  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5097  0049DC  EC7E  F027         	call	_I2C_Write_Address_Write_One_Byte
  5098                           
  5099                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  5100  0049E0  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  5101  0049E4  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5102  0049E6  EC76  F026         	call	_I2C_Write_Address_Read_One_Byte
  5103  0049EA  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  5104                           
  5105                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
  5106  0049EC  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  5107  0049EE  0BFE               	andlw	254
  5108  0049F0  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  5109                           
  5110                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  5111  0049F2  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  5112  0049F6  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  5113  0049FA  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  5114  0049FC  EC7E  F027         	call	_I2C_Write_Address_Write_One_Byte
  5115                           
  5116                           ;I2C_Support.c: 207: DS3231_Init();
  5117  004A00  EC30  F01D         	call	_DS3231_Init	;wreg free
  5118  004A04  0012               	return		;funcret
  5119  004A06                     __end_of_DS3231_Turn_Off_Alarm:
  5120                           	opt stack 0
  5121                           tblptru	equ	0xFF8
  5122                           tblptrh	equ	0xFF7
  5123                           tblptrl	equ	0xFF6
  5124                           tablat	equ	0xFF5
  5125                           postinc0	equ	0xFEE
  5126                           wreg	equ	0xFE8
  5127                           postdec1	equ	0xFE5
  5128                           fsr1l	equ	0xFE1
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _DS3231_Init *****************
  5132 ;; Defined at:
  5133 ;;		line 132 in file "I2C_Support.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  Device          1   25[COMRAM] unsigned char 
  5138 ;;  control_E       1   24[COMRAM] unsigned char 
  5139 ;;  Address_E       1   23[COMRAM] unsigned char 
  5140 ;;  Address_7       1   22[COMRAM] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;Total ram usage:        4 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    7
  5157 ;; This function calls:
  5158 ;;		_I2C_ReStart
  5159 ;;		_I2C_Read
  5160 ;;		_I2C_Start
  5161 ;;		_I2C_Stop
  5162 ;;		_I2C_Write
  5163 ;;		_I2C_Write_Address_Read_One_Byte
  5164 ;;		_I2C_Write_Address_Write_One_Byte
  5165 ;; This function is called by:
  5166 ;;		_DS3231_Turn_Off_Alarm
  5167 ;;		_DS3231_Turn_On_Alarm
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           	psect	text12
  5172  003A60                     __ptext12:
  5173                           	opt stack 0
  5174  003A60                     _DS3231_Init:
  5175                           	opt stack 21
  5176                           
  5177                           ;I2C_Support.c: 134: char Device = 0x68;
  5178                           
  5179                           ;incstack = 0
  5180  003A60  0E68               	movlw	104
  5181  003A62  6E1A               	movwf	DS3231_Init@Device,c
  5182                           
  5183                           ;I2C_Support.c: 135: char Address_7 = 0x07;
  5184  003A64  0E07               	movlw	7
  5185  003A66  6E17               	movwf	DS3231_Init@Address_7,c
  5186                           
  5187                           ;I2C_Support.c: 136: char Address_E = 0x0E;
  5188  003A68  0E0E               	movlw	14
  5189  003A6A  6E18               	movwf	DS3231_Init@Address_E,c
  5190                           
  5191                           ;I2C_Support.c: 137: char control_E;
  5192                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  5193  003A6C  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  5194  003A70  501A               	movf	DS3231_Init@Device,w,c
  5195  003A72  EC76  F026         	call	_I2C_Write_Address_Read_One_Byte
  5196  003A76  6E19               	movwf	DS3231_Init@control_E,c
  5197                           
  5198                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
  5199  003A78  5019               	movf	DS3231_Init@control_E,w,c
  5200  003A7A  0B01               	andlw	1
  5201  003A7C  6E19               	movwf	DS3231_Init@control_E,c
  5202                           
  5203                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
  5204  003A7E  5019               	movf	DS3231_Init@control_E,w,c
  5205  003A80  0925               	iorlw	37
  5206  003A82  6E19               	movwf	DS3231_Init@control_E,c
  5207                           
  5208                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  5209  003A84  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  5210  003A88  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  5211  003A8C  501A               	movf	DS3231_Init@Device,w,c
  5212  003A8E  EC7E  F027         	call	_I2C_Write_Address_Write_One_Byte
  5213                           
  5214                           ;I2C_Support.c: 143: I2C_Start();
  5215  003A92  ECD9  F028         	call	_I2C_Start	;wreg free
  5216                           
  5217                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
  5218  003A96  501A               	movf	DS3231_Init@Device,w,c
  5219  003A98  241A               	addwf	DS3231_Init@Device,w,c
  5220  003A9A  EC1B  F026         	call	_I2C_Write
  5221                           
  5222                           ;I2C_Support.c: 145: I2C_Write(Address_7);
  5223  003A9E  5017               	movf	DS3231_Init@Address_7,w,c
  5224  003AA0  EC1B  F026         	call	_I2C_Write
  5225                           
  5226                           ;I2C_Support.c: 146: I2C_ReStart();
  5227  003AA4  EC79  F028         	call	_I2C_ReStart	;wreg free
  5228                           
  5229                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
  5230  003AA8  80D8               	bsf	status,0,c
  5231  003AAA  341A               	rlcf	DS3231_Init@Device,w,c
  5232  003AAC  EC1B  F026         	call	_I2C_Write
  5233                           
  5234                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
  5235  003AB0  0E01               	movlw	1
  5236  003AB2  EC78  F025         	call	_I2C_Read
  5237  003AB6  6E66               	movwf	_alarm_second,c
  5238                           
  5239                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
  5240  003AB8  0E01               	movlw	1
  5241  003ABA  EC78  F025         	call	_I2C_Read
  5242  003ABE  6E65               	movwf	_alarm_minute,c
  5243                           
  5244                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
  5245  003AC0  0E01               	movlw	1
  5246  003AC2  EC78  F025         	call	_I2C_Read
  5247  003AC6  6E64               	movwf	_alarm_hour,c
  5248                           
  5249                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
  5250  003AC8  0E00               	movlw	0
  5251  003ACA  EC78  F025         	call	_I2C_Read
  5252  003ACE  0100               	movlb	0	; () banked
  5253  003AD0  6FA6               	movwf	_alarm_date& (0+255),b
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
  5257  003AD2  5066               	movf	_alarm_second,w,c
  5258  003AD4  0B7F               	andlw	127
  5259  003AD6  6E66               	movwf	_alarm_second,c
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
  5263  003AD8  5065               	movf	_alarm_minute,w,c
  5264  003ADA  0B7F               	andlw	127
  5265  003ADC  6E65               	movwf	_alarm_minute,c
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
  5269  003ADE  5064               	movf	_alarm_hour,w,c
  5270  003AE0  0B7F               	andlw	127
  5271  003AE2  6E64               	movwf	_alarm_hour,c
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
  5275  003AE4  0100               	movlb	0	; () banked
  5276  003AE6  51A6               	movf	_alarm_date& (0+255),w,b
  5277  003AE8  0980               	iorlw	128
  5278  003AEA  0100               	movlb	0	; () banked
  5279  003AEC  6FA6               	movwf	_alarm_date& (0+255),b
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;I2C_Support.c: 158: I2C_Start();
  5283  003AEE  ECD9  F028         	call	_I2C_Start	;wreg free
  5284                           
  5285                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
  5286  003AF2  501A               	movf	DS3231_Init@Device,w,c
  5287  003AF4  241A               	addwf	DS3231_Init@Device,w,c
  5288  003AF6  EC1B  F026         	call	_I2C_Write
  5289                           
  5290                           ;I2C_Support.c: 160: I2C_Write(Address_7);
  5291  003AFA  5017               	movf	DS3231_Init@Address_7,w,c
  5292  003AFC  EC1B  F026         	call	_I2C_Write
  5293                           
  5294                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
  5295  003B00  5066               	movf	_alarm_second,w,c
  5296  003B02  EC1B  F026         	call	_I2C_Write
  5297                           
  5298                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
  5299  003B06  5065               	movf	_alarm_minute,w,c
  5300  003B08  EC1B  F026         	call	_I2C_Write
  5301                           
  5302                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
  5303  003B0C  5064               	movf	_alarm_hour,w,c
  5304  003B0E  EC1B  F026         	call	_I2C_Write
  5305                           
  5306                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
  5307  003B12  0100               	movlb	0	; () banked
  5308  003B14  51A6               	movf	_alarm_date& (0+255),w,b
  5309  003B16  EC1B  F026         	call	_I2C_Write
  5310                           
  5311                           ;I2C_Support.c: 166: I2C_Stop();
  5312  003B1A  ECD0  F028         	call	_I2C_Stop	;wreg free
  5313  003B1E  0012               	return		;funcret
  5314  003B20                     __end_of_DS3231_Init:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           postinc0	equ	0xFEE
  5321                           wreg	equ	0xFE8
  5322                           postdec1	equ	0xFE5
  5323                           fsr1l	equ	0xFE1
  5324                           status	equ	0xFD8
  5325                           
  5326 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  5327 ;; Defined at:
  5328 ;;		line 131 in file "I2C_Soft.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  Device          1    wreg     unsigned char 
  5331 ;;  Address         1   18[COMRAM] unsigned char 
  5332 ;;  Data_Out        1   19[COMRAM] unsigned char 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  Device          1   20[COMRAM] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5344 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;Total ram usage:        3 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    5
  5351 ;; This function calls:
  5352 ;;		_I2C_Start
  5353 ;;		_I2C_Stop
  5354 ;;		_I2C_Write
  5355 ;; This function is called by:
  5356 ;;		_DS3231_Init
  5357 ;;		_DS3231_Turn_Off_Alarm
  5358 ;;		_DS3231_Turn_On_Alarm
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text13
  5363  004EFC                     __ptext13:
  5364                           	opt stack 0
  5365  004EFC                     _I2C_Write_Address_Write_One_Byte:
  5366                           	opt stack 23
  5367                           
  5368                           ;incstack = 0
  5369                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  5370  004EFC  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  5371                           
  5372                           ;I2C_Soft.c: 133: I2C_Start();
  5373  004EFE  ECD9  F028         	call	_I2C_Start	;wreg free
  5374                           
  5375                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
  5376  004F02  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5377  004F04  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  5378  004F06  EC1B  F026         	call	_I2C_Write
  5379                           
  5380                           ;I2C_Soft.c: 135: I2C_Write(Address);
  5381  004F0A  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  5382  004F0C  EC1B  F026         	call	_I2C_Write
  5383                           
  5384                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
  5385  004F10  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  5386  004F12  EC1B  F026         	call	_I2C_Write
  5387                           
  5388                           ;I2C_Soft.c: 137: I2C_Stop();
  5389  004F16  ECD0  F028         	call	_I2C_Stop	;wreg free
  5390  004F1A  0012               	return		;funcret
  5391  004F1C                     __end_of_I2C_Write_Address_Write_One_Byte:
  5392                           	opt stack 0
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           postinc0	equ	0xFEE
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           fsr1l	equ	0xFE1
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  5404 ;; Defined at:
  5405 ;;		line 118 in file "I2C_Soft.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  Device          1    wreg     unsigned char 
  5408 ;;  Address         1   19[COMRAM] unsigned char 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  Device          1   21[COMRAM] unsigned char 
  5411 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      unsigned char 
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5421 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;Total ram usage:        3 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    6
  5428 ;; This function calls:
  5429 ;;		_I2C_ReStart
  5430 ;;		_I2C_Read
  5431 ;;		_I2C_Start
  5432 ;;		_I2C_Stop
  5433 ;;		_I2C_Write
  5434 ;; This function is called by:
  5435 ;;		_DS3231_Init
  5436 ;;		_DS3231_Turn_Off_Alarm
  5437 ;;		_DS3231_Turn_On_Alarm
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text14
  5442  004CEC                     __ptext14:
  5443                           	opt stack 0
  5444  004CEC                     _I2C_Write_Address_Read_One_Byte:
  5445                           	opt stack 22
  5446                           
  5447                           ;incstack = 0
  5448                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5449  004CEC  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5450                           
  5451                           ;I2C_Soft.c: 120: char Data_Ret;
  5452                           ;I2C_Soft.c: 121: I2C_Start();
  5453  004CEE  ECD9  F028         	call	_I2C_Start	;wreg free
  5454                           
  5455                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
  5456  004CF2  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5457  004CF4  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5458  004CF6  EC1B  F026         	call	_I2C_Write
  5459                           
  5460                           ;I2C_Soft.c: 123: I2C_Write(Address);
  5461  004CFA  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5462  004CFC  EC1B  F026         	call	_I2C_Write
  5463                           
  5464                           ;I2C_Soft.c: 124: I2C_ReStart();
  5465  004D00  EC79  F028         	call	_I2C_ReStart	;wreg free
  5466                           
  5467                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
  5468  004D04  80D8               	bsf	status,0,c
  5469  004D06  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5470  004D08  EC1B  F026         	call	_I2C_Write
  5471                           
  5472                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
  5473  004D0C  0E00               	movlw	0
  5474  004D0E  EC78  F025         	call	_I2C_Read
  5475  004D12  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5476                           
  5477                           ;I2C_Soft.c: 127: I2C_Stop();
  5478  004D14  ECD0  F028         	call	_I2C_Stop	;wreg free
  5479                           
  5480                           ;I2C_Soft.c: 128: return Data_Ret;
  5481  004D18  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5482  004D1A  D000               	goto	l133
  5483  004D1C                     l133:
  5484  004D1C  0012               	return		;funcret
  5485  004D1E                     __end_of_I2C_Write_Address_Read_One_Byte:
  5486                           	opt stack 0
  5487                           tblptru	equ	0xFF8
  5488                           tblptrh	equ	0xFF7
  5489                           tblptrl	equ	0xFF6
  5490                           tablat	equ	0xFF5
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           postdec1	equ	0xFE5
  5494                           fsr1l	equ	0xFE1
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _Activate_Buzzer_4KHz *****************
  5498 ;; Defined at:
  5499 ;;		line 124 in file "utils.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;		None               void
  5506 ;; Registers used:
  5507 ;;		wreg, status,2
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;Total ram usage:        0 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    3
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_Test_Alarm
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text15
  5528  005158                     __ptext15:
  5529                           	opt stack 0
  5530  005158                     _Activate_Buzzer_4KHz:
  5531                           	opt stack 26
  5532                           
  5533                           ;utils.c: 127: PR2 = 0b01111100 ;
  5534                           
  5535                           ;incstack = 0
  5536  005158  0E7C               	movlw	124
  5537  00515A  6ECB               	movwf	4043,c	;volatile
  5538                           
  5539                           ;utils.c: 128: T2CON = 0b00000101 ;
  5540  00515C  0E05               	movlw	5
  5541  00515E  6ECA               	movwf	4042,c	;volatile
  5542                           
  5543                           ;utils.c: 129: CCPR2L = 0b00111110 ;
  5544  005160  0E3E               	movlw	62
  5545  005162  6EBB               	movwf	4027,c	;volatile
  5546                           
  5547                           ;utils.c: 130: CCP2CON = 0b00011100 ;
  5548  005164  0E1C               	movlw	28
  5549  005166  6EBA               	movwf	4026,c	;volatile
  5550  005168  0012               	return		;funcret
  5551  00516A                     __end_of_Activate_Buzzer_4KHz:
  5552                           	opt stack 0
  5553                           tblptru	equ	0xFF8
  5554                           tblptrh	equ	0xFF7
  5555                           tblptrl	equ	0xFF6
  5556                           tablat	equ	0xFF5
  5557                           postinc0	equ	0xFEE
  5558                           wreg	equ	0xFE8
  5559                           postdec1	equ	0xFE5
  5560                           fsr1l	equ	0xFE1
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _Monitor_Heater *****************
  5564 ;; Defined at:
  5565 ;;		line 55 in file "Fan_Support.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;		None               void
  5572 ;; Registers used:
  5573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    6
  5586 ;; This function calls:
  5587 ;;		___awdiv
  5588 ;;		_do_update_pwm
  5589 ;;		_get_duty_cycle
  5590 ;; This function is called by:
  5591 ;;		_main
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text16
  5596  003E9C                     __ptext16:
  5597                           	opt stack 0
  5598  003E9C                     _Monitor_Heater:
  5599                           	opt stack 24
  5600                           
  5601                           ;Fan_Support.c: 57: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5602                           
  5603                           ;incstack = 0
  5604  003E9C  C08B  F01F         	movff	_DS1621_tempF,get_duty_cycle@temp
  5605  003EA0  C08C  F020         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5606  003EA4  C0B4  F021         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5607  003EA8  6A22               	clrf	get_duty_cycle@set_temp+1,c
  5608  003EAA  EC31  F019         	call	_get_duty_cycle	;wreg free
  5609  003EAE  501F               	movf	?_get_duty_cycle,w,c
  5610  003EB0  6E68               	movwf	_duty_cycle,c
  5611                           
  5612                           ;Fan_Support.c: 58: do_update_pwm(duty_cycle);
  5613  003EB2  5068               	movf	_duty_cycle,w,c
  5614  003EB4  ECA6  F01E         	call	_do_update_pwm
  5615                           
  5616                           ;Fan_Support.c: 59: if (duty_cycle >= 70)
  5617  003EB8  0E45               	movlw	69
  5618  003EBA  6468               	cpfsgt	_duty_cycle,c
  5619  003EBC  D004               	goto	l10388
  5620                           
  5621                           ;Fan_Support.c: 60: PORTD = ((PORTD & 0xF8) | 0x07);
  5622  003EBE  5083               	movf	3971,w,c	;volatile
  5623  003EC0  0BF8               	andlw	248
  5624  003EC2  0907               	iorlw	7
  5625  003EC4  D00C               	goto	L5
  5626  003EC6                     l10388:
  5627                           
  5628                           ;Fan_Support.c: 61: else
  5629                           ;Fan_Support.c: 62: PORTD = ((PORTD & 0xF8) | duty_cycle/10);
  5630  003EC6  C068  F017         	movff	_duty_cycle,___awdiv@dividend
  5631  003ECA  6A18               	clrf	___awdiv@dividend+1,c
  5632  003ECC  0E00               	movlw	0
  5633  003ECE  6E1A               	movwf	___awdiv@divisor+1,c
  5634  003ED0  0E0A               	movlw	10
  5635  003ED2  6E19               	movwf	___awdiv@divisor,c
  5636  003ED4  ECE4  F01F         	call	___awdiv	;wreg free
  5637  003ED8  5083               	movf	3971,w,c	;volatile
  5638  003EDA  0BF8               	andlw	248
  5639  003EDC  1017               	iorwf	?___awdiv,w,c
  5640  003EDE                     L5:
  5641  003EDE  6E83               	movwf	3971,c	;volatile
  5642  003EE0  D000               	goto	l10390
  5643  003EE2                     l10390:
  5644                           
  5645                           ;Fan_Support.c: 63: if (rpm < 1)
  5646  003EE2  0100               	movlb	0	; () banked
  5647  003EE4  BF98               	btfsc	(_rpm+1)& (0+255),7,b
  5648  003EE6  D007               	goto	l10392
  5649  003EE8  0100               	movlb	0	; () banked
  5650  003EEA  5198               	movf	(_rpm+1)& (0+255),w,b
  5651  003EEC  E106               	bnz	l10394
  5652  003EEE  0100               	movlb	0	; () banked
  5653  003EF0  0597               	decf	_rpm& (0+255),w,b
  5654  003EF2  B0D8               	btfsc	status,0,c
  5655  003EF4  D002               	goto	l10394
  5656  003EF6                     l10392:
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;Fan_Support.c: 64: PORTE = 0x00;
  5660  003EF6  0E00               	movlw	0
  5661  003EF8  D011               	goto	L6
  5662  003EFA                     l10394:
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;Fan_Support.c: 65: else
  5666                           ;Fan_Support.c: 66: PORTE = D2[(rpm / 500)];
  5667  003EFA  C097  F017         	movff	_rpm,___awdiv@dividend
  5668  003EFE  C098  F018         	movff	_rpm+1,___awdiv@dividend+1
  5669  003F02  0E01               	movlw	1
  5670  003F04  6E1A               	movwf	___awdiv@divisor+1,c
  5671  003F06  0EF4               	movlw	244
  5672  003F08  6E19               	movwf	___awdiv@divisor,c
  5673  003F0A  ECE4  F01F         	call	___awdiv	;wreg free
  5674  003F0E  0E34               	movlw	low _D2
  5675  003F10  2417               	addwf	?___awdiv,w,c
  5676  003F12  6ED9               	movwf	fsr2l,c
  5677  003F14  0E01               	movlw	high _D2
  5678  003F16  2018               	addwfc	?___awdiv+1,w,c
  5679  003F18  6EDA               	movwf	fsr2h,c
  5680  003F1A  50DF               	movf	indf2,w,c
  5681  003F1C                     L6:
  5682  003F1C  6E84               	movwf	3972,c	;volatile
  5683  003F1E  D000               	goto	l10396
  5684  003F20                     l10396:
  5685                           
  5686                           ;Fan_Support.c: 67: if (HEATER == 1)
  5687  003F20  0100               	movlb	0	; () banked
  5688  003F22  059B               	decf	_HEATER& (0+255),w,b
  5689  003F24  A4D8               	btfss	status,2,c
  5690  003F26  D002               	goto	l46
  5691                           
  5692                           ; BSR set to: 0
  5693                           ;Fan_Support.c: 68: {
  5694                           ;Fan_Support.c: 69: PORTAbits.RA4 = 1;
  5695  003F28  8880               	bsf	3968,4,c	;volatile
  5696                           
  5697                           ;Fan_Support.c: 70: }
  5698  003F2A  D002               	goto	l48
  5699  003F2C                     l46:
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;Fan_Support.c: 71: else PORTAbits.RA4 = 0;
  5703  003F2C  9880               	bcf	3968,4,c	;volatile
  5704  003F2E  D000               	goto	l48
  5705  003F30                     l48:
  5706                           
  5707                           ; BSR set to: 0
  5708  003F30  0012               	return		;funcret
  5709  003F32                     __end_of_Monitor_Heater:
  5710                           	opt stack 0
  5711                           tblptru	equ	0xFF8
  5712                           tblptrh	equ	0xFF7
  5713                           tblptrl	equ	0xFF6
  5714                           tablat	equ	0xFF5
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           postdec1	equ	0xFE5
  5718                           fsr1l	equ	0xFE1
  5719                           indf2	equ	0xFDF
  5720                           fsr2h	equ	0xFDA
  5721                           fsr2l	equ	0xFD9
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function _get_duty_cycle *****************
  5725 ;; Defined at:
  5726 ;;		line 25 in file "Fan_Support.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  temp            2   30[COMRAM] int 
  5729 ;;  set_temp        2   32[COMRAM] int 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  diff            2   36[COMRAM] int 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  2   30[COMRAM] int 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:        8 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    4
  5748 ;; This function calls:
  5749 ;;		___awdiv
  5750 ;;		___wmul
  5751 ;; This function is called by:
  5752 ;;		_Monitor_Heater
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text17
  5757  003262                     __ptext17:
  5758                           	opt stack 0
  5759  003262                     _get_duty_cycle:
  5760                           	opt stack 25
  5761                           
  5762                           ;Fan_Support.c: 27: if (temp >= set_temp)
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;incstack = 0
  5766  003262  5021               	movf	get_duty_cycle@set_temp,w,c
  5767  003264  5C1F               	subwf	get_duty_cycle@temp,w,c
  5768  003266  5020               	movf	get_duty_cycle@temp+1,w,c
  5769  003268  0A80               	xorlw	128
  5770  00326A  6E23               	movwf	??_get_duty_cycle& (0+255),c
  5771  00326C  5022               	movf	get_duty_cycle@set_temp+1,w,c
  5772  00326E  0A80               	xorlw	128
  5773  003270  5823               	subwfb	??_get_duty_cycle& (0+255),w,c
  5774  003272  A0D8               	btfss	status,0,c
  5775  003274  D003               	goto	l10024
  5776                           
  5777                           ;Fan_Support.c: 28: {
  5778                           ;Fan_Support.c: 29: duty_cycle = 0;
  5779  003276  0E00               	movlw	0
  5780  003278  6E68               	movwf	_duty_cycle,c
  5781  00327A  D000               	goto	l10024
  5782  00327C                     l10024:
  5783                           
  5784                           ;Fan_Support.c: 30: }
  5785                           ;Fan_Support.c: 31: if (temp < set_temp)
  5786  00327C  5021               	movf	get_duty_cycle@set_temp,w,c
  5787  00327E  5C1F               	subwf	get_duty_cycle@temp,w,c
  5788  003280  5020               	movf	get_duty_cycle@temp+1,w,c
  5789  003282  0A80               	xorlw	128
  5790  003284  6E23               	movwf	??_get_duty_cycle& (0+255),c
  5791  003286  5022               	movf	get_duty_cycle@set_temp+1,w,c
  5792  003288  0A80               	xorlw	128
  5793  00328A  5823               	subwfb	??_get_duty_cycle& (0+255),w,c
  5794  00328C  B0D8               	btfsc	status,0,c
  5795  00328E  D060               	goto	l34
  5796                           
  5797                           ;Fan_Support.c: 32: {
  5798                           ;Fan_Support.c: 33: int diff = set_temp - temp;
  5799  003290  C01F  F023         	movff	get_duty_cycle@temp,??_get_duty_cycle
  5800  003294  C020  F024         	movff	get_duty_cycle@temp+1,??_get_duty_cycle+1
  5801  003298  1E23               	comf	??_get_duty_cycle,f,c
  5802  00329A  1E24               	comf	??_get_duty_cycle+1,f,c
  5803  00329C  4A23               	infsnz	??_get_duty_cycle,f,c
  5804  00329E  2A24               	incf	??_get_duty_cycle+1,f,c
  5805  0032A0  5021               	movf	get_duty_cycle@set_temp,w,c
  5806  0032A2  2423               	addwf	??_get_duty_cycle,w,c
  5807  0032A4  6E25               	movwf	get_duty_cycle@diff,c
  5808  0032A6  5022               	movf	get_duty_cycle@set_temp+1,w,c
  5809  0032A8  2024               	addwfc	??_get_duty_cycle+1,w,c
  5810  0032AA  6E26               	movwf	get_duty_cycle@diff+1,c
  5811                           
  5812                           ;Fan_Support.c: 35: if (diff > 50)
  5813  0032AC  BE26               	btfsc	get_duty_cycle@diff+1,7,c
  5814  0032AE  D009               	goto	l10030
  5815  0032B0  5026               	movf	get_duty_cycle@diff+1,w,c
  5816  0032B2  E104               	bnz	u8540
  5817  0032B4  0E33               	movlw	51
  5818  0032B6  5C25               	subwf	get_duty_cycle@diff,w,c
  5819  0032B8  A0D8               	btfss	status,0,c
  5820  0032BA  D003               	goto	l10030
  5821  0032BC                     u8540:
  5822                           
  5823                           ;Fan_Support.c: 36: {
  5824                           ;Fan_Support.c: 37: duty_cycle = 100;
  5825  0032BC  0E64               	movlw	100
  5826  0032BE  6E68               	movwf	_duty_cycle,c
  5827  0032C0  D000               	goto	l10030
  5828  0032C2                     l10030:
  5829                           
  5830                           ;Fan_Support.c: 38: }
  5831                           ;Fan_Support.c: 39: if (diff >= 25 & diff < 50)
  5832  0032C2  BE26               	btfsc	get_duty_cycle@diff+1,7,c
  5833  0032C4  D011               	goto	l36
  5834  0032C6  5026               	movf	get_duty_cycle@diff+1,w,c
  5835  0032C8  E104               	bnz	u8550
  5836  0032CA  0E19               	movlw	25
  5837  0032CC  5C25               	subwf	get_duty_cycle@diff,w,c
  5838  0032CE  A0D8               	btfss	status,0,c
  5839  0032D0  D00B               	goto	l36
  5840  0032D2                     u8550:
  5841  0032D2  BE26               	btfsc	get_duty_cycle@diff+1,7,c
  5842  0032D4  D006               	goto	l10034
  5843  0032D6  5026               	movf	get_duty_cycle@diff+1,w,c
  5844  0032D8  E107               	bnz	l36
  5845  0032DA  0E32               	movlw	50
  5846  0032DC  5C25               	subwf	get_duty_cycle@diff,w,c
  5847  0032DE  B0D8               	btfsc	status,0,c
  5848  0032E0  D003               	goto	l36
  5849  0032E2                     l10034:
  5850                           
  5851                           ;Fan_Support.c: 40: {
  5852                           ;Fan_Support.c: 41: duty_cycle = diff * 2;
  5853  0032E2  5025               	movf	get_duty_cycle@diff,w,c
  5854  0032E4  2425               	addwf	get_duty_cycle@diff,w,c
  5855  0032E6  6E68               	movwf	_duty_cycle,c
  5856  0032E8                     l36:
  5857                           
  5858                           ;Fan_Support.c: 42: }
  5859                           ;Fan_Support.c: 43: if (diff >= 10 & diff < 25)
  5860  0032E8  BE26               	btfsc	get_duty_cycle@diff+1,7,c
  5861  0032EA  D025               	goto	l10040
  5862  0032EC  5026               	movf	get_duty_cycle@diff+1,w,c
  5863  0032EE  E104               	bnz	u8570
  5864  0032F0  0E0A               	movlw	10
  5865  0032F2  5C25               	subwf	get_duty_cycle@diff,w,c
  5866  0032F4  A0D8               	btfss	status,0,c
  5867  0032F6  D01F               	goto	l10040
  5868  0032F8                     u8570:
  5869  0032F8  BE26               	btfsc	get_duty_cycle@diff+1,7,c
  5870  0032FA  D006               	goto	l10038
  5871  0032FC  5026               	movf	get_duty_cycle@diff+1,w,c
  5872  0032FE  E11B               	bnz	l10040
  5873  003300  0E19               	movlw	25
  5874  003302  5C25               	subwf	get_duty_cycle@diff,w,c
  5875  003304  B0D8               	btfsc	status,0,c
  5876  003306  D017               	goto	l10040
  5877  003308                     l10038:
  5878                           
  5879                           ;Fan_Support.c: 44: {
  5880                           ;Fan_Support.c: 45: duty_cycle = diff * 3/2;
  5881  003308  C025  F011         	movff	get_duty_cycle@diff,___wmul@multiplier
  5882  00330C  C026  F012         	movff	get_duty_cycle@diff+1,___wmul@multiplier+1
  5883  003310  0E00               	movlw	0
  5884  003312  6E14               	movwf	___wmul@multiplicand+1,c
  5885  003314  0E03               	movlw	3
  5886  003316  6E13               	movwf	___wmul@multiplicand,c
  5887  003318  ECFF  F026         	call	___wmul	;wreg free
  5888  00331C  C011  F017         	movff	?___wmul,___awdiv@dividend
  5889  003320  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  5890  003324  0E00               	movlw	0
  5891  003326  6E1A               	movwf	___awdiv@divisor+1,c
  5892  003328  0E02               	movlw	2
  5893  00332A  6E19               	movwf	___awdiv@divisor,c
  5894  00332C  ECE4  F01F         	call	___awdiv	;wreg free
  5895  003330  5017               	movf	?___awdiv,w,c
  5896  003332  6E68               	movwf	_duty_cycle,c
  5897  003334  D000               	goto	l10040
  5898  003336                     l10040:
  5899                           
  5900                           ;Fan_Support.c: 46: }
  5901                           ;Fan_Support.c: 47: if (diff >= 0 & diff < 10)
  5902  003336  BE26               	btfsc	get_duty_cycle@diff+1,7,c
  5903  003338  D00B               	goto	l34
  5904  00333A  BE26               	btfsc	get_duty_cycle@diff+1,7,c
  5905  00333C  D006               	goto	l10044
  5906  00333E  5026               	movf	get_duty_cycle@diff+1,w,c
  5907  003340  E107               	bnz	l34
  5908  003342  0E0A               	movlw	10
  5909  003344  5C25               	subwf	get_duty_cycle@diff,w,c
  5910  003346  B0D8               	btfsc	status,0,c
  5911  003348  D003               	goto	l34
  5912  00334A                     l10044:
  5913                           
  5914                           ;Fan_Support.c: 48: {
  5915                           ;Fan_Support.c: 49: duty_cycle = diff;
  5916  00334A  C025  F068         	movff	get_duty_cycle@diff,_duty_cycle
  5917  00334E  D000               	goto	l34
  5918  003350                     l34:
  5919                           
  5920                           ;Fan_Support.c: 50: }
  5921                           ;Fan_Support.c: 51: }
  5922                           ;Fan_Support.c: 52: return duty_cycle;
  5923  003350  C068  F01F         	movff	_duty_cycle,?_get_duty_cycle
  5924  003354  6A20               	clrf	?_get_duty_cycle+1,c
  5925  003356  0012               	return		;funcret
  5926  003358                     __end_of_get_duty_cycle:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           postdec1	equ	0xFE5
  5935                           fsr1l	equ	0xFE1
  5936                           indf2	equ	0xFDF
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function _Do_Setup_Time *****************
  5942 ;; Defined at:
  5943 ;;		line 33 in file "Setup_Time.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;		None
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;		None
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  2  377[None  ] int 
  5950 ;; Registers used:
  5951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;Total ram usage:        0 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:   12
  5964 ;; This function calls:
  5965 ;;		_DS3231_Read_Time
  5966 ;;		_Decrease_Time
  5967 ;;		_Do_Beep_Bad
  5968 ;;		_Do_Beep_Good
  5969 ;;		_Do_Save_New_Time
  5970 ;;		_Exit_Time_Setup
  5971 ;;		_Go_Next_Field
  5972 ;;		_Go_Prev_Field
  5973 ;;		_Increase_Time
  5974 ;;		_Initialize_Setup_Time_Screen
  5975 ;;		_Update_Setup_Time_Screen
  5976 ;;		_bcd_2_dec
  5977 ;;		_check_for_button_input
  5978 ;; This function is called by:
  5979 ;;		_main
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text18
  5984  0038C2                     __ptext18:
  5985                           	opt stack 0
  5986  0038C2                     _Do_Setup_Time:
  5987                           	opt stack 18
  5988                           
  5989                           ;Setup_Time.c: 36: Select_Field = 0;
  5990                           
  5991                           ;incstack = 0
  5992  0038C2  0E00               	movlw	0
  5993  0038C4  0100               	movlb	0	; () banked
  5994  0038C6  6FA3               	movwf	_Select_Field& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;Setup_Time.c: 38: DS3231_Read_Time();
  5998  0038C8  EC08  F023         	call	_DS3231_Read_Time	;wreg free
  5999                           
  6000                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  6001  0038CC  506D               	movf	_second,w,c
  6002  0038CE  ECD6  F026         	call	_bcd_2_dec
  6003  0038D2  0100               	movlb	0	; () banked
  6004  0038D4  6FB2               	movwf	_setup_second& (0+255),b
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  6008  0038D6  506B               	movf	_minute,w,c
  6009  0038D8  ECD6  F026         	call	_bcd_2_dec
  6010  0038DC  0100               	movlb	0	; () banked
  6011  0038DE  6FB0               	movwf	_setup_minute& (0+255),b
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  6015  0038E0  506A               	movf	_hour,w,c
  6016  0038E2  ECD6  F026         	call	_bcd_2_dec
  6017  0038E6  0100               	movlb	0	; () banked
  6018  0038E8  6FAF               	movwf	_setup_hour& (0+255),b
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  6022  0038EA  5067               	movf	_day,w,c
  6023  0038EC  ECD6  F026         	call	_bcd_2_dec
  6024  0038F0  0100               	movlb	0	; () banked
  6025  0038F2  6FAD               	movwf	_setup_day& (0+255),b
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  6029  0038F4  506C               	movf	_month,w,c
  6030  0038F6  ECD6  F026         	call	_bcd_2_dec
  6031  0038FA  0100               	movlb	0	; () banked
  6032  0038FC  6FB1               	movwf	_setup_month& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  6036  0038FE  506F               	movf	_year,w,c
  6037  003900  ECD6  F026         	call	_bcd_2_dec
  6038  003904  0100               	movlb	0	; () banked
  6039  003906  6FB3               	movwf	_setup_year& (0+255),b
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  6043  003908  EC24  F017         	call	_Initialize_Setup_Time_Screen	;wreg free
  6044                           
  6045                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  6046  00390C  EC8D  F013         	call	_Update_Setup_Time_Screen	;wreg free
  6047                           
  6048                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  6049  003910  0E01               	movlw	1
  6050  003912  0100               	movlb	0	; () banked
  6051  003914  6F9F               	movwf	_In_Time_Setup& (0+255),b
  6052                           
  6053                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  6054  003916  D03C               	goto	l10698
  6055  003918                     l10662:
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;Setup_Time.c: 51: {
  6059                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  6060  003918  ECC4  F020         	call	_check_for_button_input	;wreg free
  6061  00391C  06E8               	decf	wreg,f,c
  6062  00391E  A4D8               	btfss	status,2,c
  6063  003920  D037               	goto	l10698
  6064                           
  6065                           ;Setup_Time.c: 53: {
  6066                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  6067  003922  0E02               	movlw	2
  6068  003924  6469               	cpfsgt	_found,c
  6069  003926  D031               	goto	l10696
  6070  003928  0E09               	movlw	9
  6071  00392A  6069               	cpfslt	_found,c
  6072  00392C  D02E               	goto	l10696
  6073                           
  6074                           ;Setup_Time.c: 56: {
  6075                           ;Setup_Time.c: 57: Do_Beep_Good();
  6076  00392E  EC4B  F028         	call	_Do_Beep_Good	;wreg free
  6077                           
  6078                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  6079  003932  0E03               	movlw	3
  6080  003934  1869               	xorwf	_found,w,c
  6081  003936  A4D8               	btfss	status,2,c
  6082  003938  D003               	goto	l10674
  6083  00393A  EC8E  F027         	call	_Go_Prev_Field	;wreg free
  6084  00393E  D000               	goto	l10674
  6085  003940                     l10674:
  6086                           
  6087                           ;Setup_Time.c: 59: if (found == 4) Go_Next_Field();
  6088  003940  0E04               	movlw	4
  6089  003942  1869               	xorwf	_found,w,c
  6090  003944  A4D8               	btfss	status,2,c
  6091  003946  D003               	goto	l10678
  6092  003948  EC9E  F027         	call	_Go_Next_Field	;wreg free
  6093  00394C  D000               	goto	l10678
  6094  00394E                     l10678:
  6095                           
  6096                           ;Setup_Time.c: 60: if (found == 5) Do_Save_New_Time();
  6097  00394E  0E05               	movlw	5
  6098  003950  1869               	xorwf	_found,w,c
  6099  003952  A4D8               	btfss	status,2,c
  6100  003954  D003               	goto	l10682
  6101  003956  EC84  F028         	call	_Do_Save_New_Time	;wreg free
  6102  00395A  D000               	goto	l10682
  6103  00395C                     l10682:
  6104                           
  6105                           ;Setup_Time.c: 61: if (found == 6) Decrease_Time();
  6106  00395C  0E06               	movlw	6
  6107  00395E  1869               	xorwf	_found,w,c
  6108  003960  A4D8               	btfss	status,2,c
  6109  003962  D003               	goto	l10686
  6110  003964  EC4B  F01E         	call	_Decrease_Time	;wreg free
  6111  003968  D000               	goto	l10686
  6112  00396A                     l10686:
  6113                           
  6114                           ;Setup_Time.c: 62: if (found == 7) Increase_Time();
  6115  00396A  0E07               	movlw	7
  6116  00396C  1869               	xorwf	_found,w,c
  6117  00396E  A4D8               	btfss	status,2,c
  6118  003970  D003               	goto	l10690
  6119  003972  ECF0  F01D         	call	_Increase_Time	;wreg free
  6120  003976  D000               	goto	l10690
  6121  003978                     l10690:
  6122                           
  6123                           ;Setup_Time.c: 63: if (found == 8) Exit_Time_Setup();
  6124  003978  0E08               	movlw	8
  6125  00397A  1869               	xorwf	_found,w,c
  6126  00397C  A4D8               	btfss	status,2,c
  6127  00397E  D003               	goto	l10694
  6128  003980  ECEB  F028         	call	_Exit_Time_Setup	;wreg free
  6129  003984  D000               	goto	l10694
  6130  003986                     l10694:
  6131                           
  6132                           ;Setup_Time.c: 64: found = 0xff;
  6133  003986  6869               	setf	_found,c
  6134                           
  6135                           ;Setup_Time.c: 65: }
  6136  003988  D003               	goto	l10698
  6137  00398A                     l10696:
  6138                           
  6139                           ;Setup_Time.c: 66: else
  6140                           ;Setup_Time.c: 67: {
  6141                           ;Setup_Time.c: 68: Do_Beep_Bad();
  6142  00398A  EC57  F028         	call	_Do_Beep_Bad	;wreg free
  6143  00398E  D000               	goto	l10698
  6144  003990                     l10698:
  6145  003990  0100               	movlb	0	; () banked
  6146  003992  059F               	decf	_In_Time_Setup& (0+255),w,b
  6147  003994  B4D8               	btfsc	status,2,c
  6148  003996  D7C0               	goto	l10662
  6149                           
  6150                           ; BSR set to: 0
  6151                           
  6152                           ; BSR set to: 0
  6153  003998  0012               	return		;funcret
  6154  00399A                     __end_of_Do_Setup_Time:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           postinc0	equ	0xFEE
  6161                           wreg	equ	0xFE8
  6162                           postdec1	equ	0xFE5
  6163                           fsr1l	equ	0xFE1
  6164                           indf2	equ	0xFDF
  6165                           fsr2h	equ	0xFDA
  6166                           fsr2l	equ	0xFD9
  6167                           status	equ	0xFD8
  6168                           
  6169 ;; *************** function _Initialize_Setup_Time_Screen *****************
  6170 ;; Defined at:
  6171 ;;		line 189 in file "Setup_Time.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;		None
  6176 ;; Return value:  Size  Location     Type
  6177 ;;		None               void
  6178 ;; Registers used:
  6179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;Total ram usage:        0 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:   10
  6192 ;; This function calls:
  6193 ;;		_drawtext
  6194 ;;		_fillRect
  6195 ;;		_fillScreen
  6196 ;;		_strcpy
  6197 ;; This function is called by:
  6198 ;;		_Do_Setup_Time
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text19
  6203  002E48                     __ptext19:
  6204                           	opt stack 0
  6205  002E48                     _Initialize_Setup_Time_Screen:
  6206                           	opt stack 19
  6207                           
  6208                           ;Setup_Time.c: 191: fillScreen(0x0000);
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;incstack = 0
  6212  002E48  0E00               	movlw	0
  6213  002E4A  6E25               	movwf	fillScreen@color+1,c
  6214  002E4C  0E00               	movlw	0
  6215  002E4E  6E24               	movwf	fillScreen@color,c
  6216  002E50  ECFC  F027         	call	_fillScreen	;wreg free
  6217                           
  6218                           ;Setup_Time.c: 193: strcpy(txt, "ECE3301L Sp'22 S1\0");
  6219  002E54  C062  F011         	movff	_txt,strcpy@to
  6220  002E58  C063  F012         	movff	_txt+1,strcpy@to+1
  6221  002E5C  0EDE               	movlw	low (STR_8+1)
  6222  002E5E  6E13               	movwf	strcpy@from,c
  6223  002E60  0EFE               	movlw	high (STR_8+1)
  6224  002E62  6E14               	movwf	strcpy@from+1,c
  6225  002E64  EC8F  F026         	call	_strcpy	;wreg free
  6226                           
  6227                           ;Setup_Time.c: 194: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6228  002E68  0E01               	movlw	1
  6229  002E6A  6E39               	movwf	drawtext@y,c
  6230  002E6C  C062  F03A         	movff	_txt,drawtext@_text
  6231  002E70  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6232  002E74  0EFF               	movlw	255
  6233  002E76  6E3D               	movwf	drawtext@color+1,c
  6234  002E78  683C               	setf	drawtext@color,c
  6235  002E7A  0E00               	movlw	0
  6236  002E7C  6E3F               	movwf	drawtext@bg+1,c
  6237  002E7E  0E00               	movlw	0
  6238  002E80  6E3E               	movwf	drawtext@bg,c
  6239  002E82  0E01               	movlw	1
  6240  002E84  6E40               	movwf	drawtext@size,c
  6241  002E86  0E01               	movlw	1
  6242  002E88  EC11  F01B         	call	_drawtext
  6243                           
  6244                           ;Setup_Time.c: 197: strcpy(txt, "Time Setup\0");
  6245  002E8C  C062  F011         	movff	_txt,strcpy@to
  6246  002E90  C063  F012         	movff	_txt+1,strcpy@to+1
  6247  002E94  0E88               	movlw	low STR_36
  6248  002E96  6E13               	movwf	strcpy@from,c
  6249  002E98  0EFF               	movlw	high STR_36
  6250  002E9A  6E14               	movwf	strcpy@from+1,c
  6251  002E9C  EC8F  F026         	call	_strcpy	;wreg free
  6252                           
  6253                           ;Setup_Time.c: 198: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6254  002EA0  0E10               	movlw	16
  6255  002EA2  6E39               	movwf	drawtext@y,c
  6256  002EA4  C062  F03A         	movff	_txt,drawtext@_text
  6257  002EA8  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6258  002EAC  0EF8               	movlw	248
  6259  002EAE  6E3D               	movwf	drawtext@color+1,c
  6260  002EB0  0E1F               	movlw	31
  6261  002EB2  6E3C               	movwf	drawtext@color,c
  6262  002EB4  0E00               	movlw	0
  6263  002EB6  6E3F               	movwf	drawtext@bg+1,c
  6264  002EB8  0E00               	movlw	0
  6265  002EBA  6E3E               	movwf	drawtext@bg,c
  6266  002EBC  0E02               	movlw	2
  6267  002EBE  6E40               	movwf	drawtext@size,c
  6268  002EC0  0E04               	movlw	4
  6269  002EC2  EC11  F01B         	call	_drawtext
  6270                           
  6271                           ;Setup_Time.c: 200: strcpy(txt, "Time");
  6272  002EC6  C062  F011         	movff	_txt,strcpy@to
  6273  002ECA  C063  F012         	movff	_txt+1,strcpy@to+1
  6274  002ECE  0EB0               	movlw	low (STR_14+6)
  6275  002ED0  6E13               	movwf	strcpy@from,c
  6276  002ED2  0EFF               	movlw	high (STR_14+6)
  6277  002ED4  6E14               	movwf	strcpy@from+1,c
  6278  002ED6  EC8F  F026         	call	_strcpy	;wreg free
  6279                           
  6280                           ;Setup_Time.c: 201: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  6281  002EDA  0E28               	movlw	40
  6282  002EDC  6E39               	movwf	drawtext@y,c
  6283  002EDE  C062  F03A         	movff	_txt,drawtext@_text
  6284  002EE2  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6285  002EE6  0E00               	movlw	0
  6286  002EE8  6E3D               	movwf	drawtext@color+1,c
  6287  002EEA  0E1F               	movlw	31
  6288  002EEC  6E3C               	movwf	drawtext@color,c
  6289  002EEE  0E00               	movlw	0
  6290  002EF0  6E3F               	movwf	drawtext@bg+1,c
  6291  002EF2  0E00               	movlw	0
  6292  002EF4  6E3E               	movwf	drawtext@bg,c
  6293  002EF6  0E01               	movlw	1
  6294  002EF8  6E40               	movwf	drawtext@size,c
  6295  002EFA  0E32               	movlw	50
  6296  002EFC  EC11  F01B         	call	_drawtext
  6297                           
  6298                           ;Setup_Time.c: 203: fillRect(15-1, 52+16, 25,2,0x07FF);
  6299  002F00  0E44               	movlw	68
  6300  002F02  6E23               	movwf	fillRect@y,c
  6301  002F04  0E19               	movlw	25
  6302  002F06  6E24               	movwf	fillRect@w,c
  6303  002F08  0E02               	movlw	2
  6304  002F0A  6E25               	movwf	fillRect@h,c
  6305  002F0C  0E07               	movlw	7
  6306  002F0E  6E27               	movwf	fillRect@color+1,c
  6307  002F10  6826               	setf	fillRect@color,c
  6308  002F12  0E0E               	movlw	14
  6309  002F14  EC53  F025         	call	_fillRect
  6310                           
  6311                           ;Setup_Time.c: 204: strcpy(txt, "Date");
  6312  002F18  C062  F011         	movff	_txt,strcpy@to
  6313  002F1C  C063  F012         	movff	_txt+1,strcpy@to+1
  6314  002F20  0EDF               	movlw	low STR_13
  6315  002F22  6E13               	movwf	strcpy@from,c
  6316  002F24  0EFF               	movlw	high STR_13
  6317  002F26  6E14               	movwf	strcpy@from+1,c
  6318  002F28  EC8F  F026         	call	_strcpy	;wreg free
  6319                           
  6320                           ;Setup_Time.c: 205: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  6321  002F2C  0E47               	movlw	71
  6322  002F2E  6E39               	movwf	drawtext@y,c
  6323  002F30  C062  F03A         	movff	_txt,drawtext@_text
  6324  002F34  C063  F03B         	movff	_txt+1,drawtext@_text+1
  6325  002F38  0EF8               	movlw	248
  6326  002F3A  6E3D               	movwf	drawtext@color+1,c
  6327  002F3C  0E00               	movlw	0
  6328  002F3E  6E3C               	movwf	drawtext@color,c
  6329  002F40  0E00               	movlw	0
  6330  002F42  6E3F               	movwf	drawtext@bg+1,c
  6331  002F44  0E00               	movlw	0
  6332  002F46  6E3E               	movwf	drawtext@bg,c
  6333  002F48  0E01               	movlw	1
  6334  002F4A  6E40               	movwf	drawtext@size,c
  6335  002F4C  0E32               	movlw	50
  6336  002F4E  EC11  F01B         	call	_drawtext
  6337  002F52  0012               	return		;funcret
  6338  002F54                     __end_of_Initialize_Setup_Time_Screen:
  6339                           	opt stack 0
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           postdec1	equ	0xFE5
  6347                           fsr1l	equ	0xFE1
  6348                           indf2	equ	0xFDF
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function _Increase_Time *****************
  6354 ;; Defined at:
  6355 ;;		line 74 in file "Setup_Time.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;		None               void
  6362 ;; Registers used:
  6363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;Total ram usage:        0 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:   11
  6376 ;; This function calls:
  6377 ;;		_Update_Setup_Time_Screen
  6378 ;; This function is called by:
  6379 ;;		_Do_Setup_Time
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           	psect	text20
  6384  003BE0                     __ptext20:
  6385                           	opt stack 0
  6386  003BE0                     _Increase_Time:
  6387                           	opt stack 18
  6388                           
  6389                           ;Setup_Time.c: 76: switch (Select_Field)
  6390                           
  6391                           ;incstack = 0
  6392  003BE0  D042               	goto	l10370
  6393  003BE2                     l10332:
  6394                           
  6395                           ;Setup_Time.c: 79: setup_hour++;
  6396  003BE2  0100               	movlb	0	; () banked
  6397  003BE4  2BAF               	incf	_setup_hour& (0+255),f,b
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;Setup_Time.c: 80: if (setup_hour == 24) setup_hour = 0;
  6401  003BE6  0E18               	movlw	24
  6402  003BE8  0100               	movlb	0	; () banked
  6403  003BEA  19AF               	xorwf	_setup_hour& (0+255),w,b
  6404  003BEC  A4D8               	btfss	status,2,c
  6405  003BEE  D050               	goto	l10372
  6406                           
  6407                           ; BSR set to: 0
  6408  003BF0  0E00               	movlw	0
  6409  003BF2  0100               	movlb	0	; () banked
  6410  003BF4  6FAF               	movwf	_setup_hour& (0+255),b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;Setup_Time.c: 81: break;
  6414  003BF6  D04C               	goto	l10372
  6415  003BF8                     l10338:
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;Setup_Time.c: 85: setup_minute++;
  6419  003BF8  0100               	movlb	0	; () banked
  6420  003BFA  2BB0               	incf	_setup_minute& (0+255),f,b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;Setup_Time.c: 86: if (setup_minute == 60) setup_minute = 0;
  6424  003BFC  0E3C               	movlw	60
  6425  003BFE  0100               	movlb	0	; () banked
  6426  003C00  19B0               	xorwf	_setup_minute& (0+255),w,b
  6427  003C02  A4D8               	btfss	status,2,c
  6428  003C04  D045               	goto	l10372
  6429                           
  6430                           ; BSR set to: 0
  6431  003C06  0E00               	movlw	0
  6432  003C08  0100               	movlb	0	; () banked
  6433  003C0A  6FB0               	movwf	_setup_minute& (0+255),b
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;Setup_Time.c: 87: break;
  6437  003C0C  D041               	goto	l10372
  6438  003C0E                     l10344:
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;Setup_Time.c: 91: setup_second++;
  6442  003C0E  0100               	movlb	0	; () banked
  6443  003C10  2BB2               	incf	_setup_second& (0+255),f,b
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;Setup_Time.c: 92: if (setup_second== 60) setup_second = 0;
  6447  003C12  0E3C               	movlw	60
  6448  003C14  0100               	movlb	0	; () banked
  6449  003C16  19B2               	xorwf	_setup_second& (0+255),w,b
  6450  003C18  A4D8               	btfss	status,2,c
  6451  003C1A  D03A               	goto	l10372
  6452                           
  6453                           ; BSR set to: 0
  6454  003C1C  0E00               	movlw	0
  6455  003C1E  0100               	movlb	0	; () banked
  6456  003C20  6FB2               	movwf	_setup_second& (0+255),b
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;Setup_Time.c: 93: break;
  6460  003C22  D036               	goto	l10372
  6461  003C24                     l10350:
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;Setup_Time.c: 97: setup_month++;
  6465  003C24  0100               	movlb	0	; () banked
  6466  003C26  2BB1               	incf	_setup_month& (0+255),f,b
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;Setup_Time.c: 98: if (setup_month == 13) setup_month = 0;
  6470  003C28  0E0D               	movlw	13
  6471  003C2A  0100               	movlb	0	; () banked
  6472  003C2C  19B1               	xorwf	_setup_month& (0+255),w,b
  6473  003C2E  A4D8               	btfss	status,2,c
  6474  003C30  D02F               	goto	l10372
  6475                           
  6476                           ; BSR set to: 0
  6477  003C32  0E00               	movlw	0
  6478  003C34  0100               	movlb	0	; () banked
  6479  003C36  6FB1               	movwf	_setup_month& (0+255),b
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;Setup_Time.c: 99: break;
  6483  003C38  D02B               	goto	l10372
  6484  003C3A                     l10356:
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;Setup_Time.c: 103: setup_day++;
  6488  003C3A  0100               	movlb	0	; () banked
  6489  003C3C  2BAD               	incf	_setup_day& (0+255),f,b
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;Setup_Time.c: 104: if (setup_day == 32) setup_day = 0;
  6493  003C3E  0E20               	movlw	32
  6494  003C40  0100               	movlb	0	; () banked
  6495  003C42  19AD               	xorwf	_setup_day& (0+255),w,b
  6496  003C44  A4D8               	btfss	status,2,c
  6497  003C46  D024               	goto	l10372
  6498                           
  6499                           ; BSR set to: 0
  6500  003C48  0E00               	movlw	0
  6501  003C4A  0100               	movlb	0	; () banked
  6502  003C4C  6FAD               	movwf	_setup_day& (0+255),b
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;Setup_Time.c: 105: break;
  6506  003C4E  D020               	goto	l10372
  6507  003C50                     l10362:
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;Setup_Time.c: 109: setup_year++;
  6511  003C50  0100               	movlb	0	; () banked
  6512  003C52  2BB3               	incf	_setup_year& (0+255),f,b
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;Setup_Time.c: 110: if (setup_year == 100) setup_year = 0;
  6516  003C54  0E64               	movlw	100
  6517  003C56  0100               	movlb	0	; () banked
  6518  003C58  19B3               	xorwf	_setup_year& (0+255),w,b
  6519  003C5A  A4D8               	btfss	status,2,c
  6520  003C5C  D019               	goto	l10372
  6521                           
  6522                           ; BSR set to: 0
  6523  003C5E  0E00               	movlw	0
  6524  003C60  0100               	movlb	0	; () banked
  6525  003C62  6FB3               	movwf	_setup_year& (0+255),b
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;Setup_Time.c: 115: }
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;Setup_Time.c: 114: break;
  6532                           
  6533                           ;Setup_Time.c: 113: default:
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;Setup_Time.c: 111: break;
  6537  003C64  D015               	goto	l10372
  6538  003C66                     l10370:
  6539  003C66  0100               	movlb	0	; () banked
  6540  003C68  51A3               	movf	_Select_Field& (0+255),w,b
  6541                           
  6542                           ; Switch size 1, requested type "space"
  6543                           ; Number of cases is 6, Range of values is 0 to 5
  6544                           ; switch strategies available:
  6545                           ; Name         Instructions Cycles
  6546                           ; simple_byte           19    10 (average)
  6547                           ;	Chosen strategy is simple_byte
  6548  003C6A  0A00               	xorlw	0	; case 0
  6549  003C6C  B4D8               	btfsc	status,2,c
  6550  003C6E  D7B9               	goto	l10332
  6551  003C70  0A01               	xorlw	1	; case 1
  6552  003C72  B4D8               	btfsc	status,2,c
  6553  003C74  D7C1               	goto	l10338
  6554  003C76  0A03               	xorlw	3	; case 2
  6555  003C78  B4D8               	btfsc	status,2,c
  6556  003C7A  D7C9               	goto	l10344
  6557  003C7C  0A01               	xorlw	1	; case 3
  6558  003C7E  B4D8               	btfsc	status,2,c
  6559  003C80  D7D1               	goto	l10350
  6560  003C82  0A07               	xorlw	7	; case 4
  6561  003C84  B4D8               	btfsc	status,2,c
  6562  003C86  D7D9               	goto	l10356
  6563  003C88  0A01               	xorlw	1	; case 5
  6564  003C8A  B4D8               	btfsc	status,2,c
  6565  003C8C  D7E1               	goto	l10362
  6566  003C8E  D000               	goto	l10372
  6567  003C90                     l10372:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;Setup_Time.c: 116: Update_Setup_Time_Screen();
  6571  003C90  EC8D  F013         	call	_Update_Setup_Time_Screen	;wreg free
  6572  003C94  0012               	return		;funcret
  6573  003C96                     __end_of_Increase_Time:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           postinc0	equ	0xFEE
  6580                           wreg	equ	0xFE8
  6581                           postdec1	equ	0xFE5
  6582                           fsr1l	equ	0xFE1
  6583                           indf2	equ	0xFDF
  6584                           fsr2h	equ	0xFDA
  6585                           fsr2l	equ	0xFD9
  6586                           status	equ	0xFD8
  6587                           
  6588 ;; *************** function _Go_Prev_Field *****************
  6589 ;; Defined at:
  6590 ;;		line 168 in file "Setup_Time.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;		None
  6595 ;; Return value:  Size  Location     Type
  6596 ;;		None               void
  6597 ;; Registers used:
  6598 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : 0/0
  6601 ;;		On exit  : 0/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;Total ram usage:        0 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    9
  6611 ;; This function calls:
  6612 ;;		_Update_Setup_Screen_Cursor_Backward
  6613 ;; This function is called by:
  6614 ;;		_Do_Setup_Time
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text21
  6619  004F1C                     __ptext21:
  6620                           	opt stack 0
  6621  004F1C                     _Go_Prev_Field:
  6622                           	opt stack 20
  6623                           
  6624                           ;Setup_Time.c: 170: if (Select_Field == 0) Select_Field = 5;
  6625                           
  6626                           ;incstack = 0
  6627  004F1C  0100               	movlb	0	; () banked
  6628  004F1E  51A3               	movf	_Select_Field& (0+255),w,b
  6629  004F20  A4D8               	btfss	status,2,c
  6630  004F22  D004               	goto	l7656
  6631                           
  6632                           ; BSR set to: 0
  6633  004F24  0E05               	movlw	5
  6634  004F26  0100               	movlb	0	; () banked
  6635  004F28  6FA3               	movwf	_Select_Field& (0+255),b
  6636  004F2A  D003               	goto	l7658
  6637  004F2C                     l7656:
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;Setup_Time.c: 171: else Select_Field--;
  6641  004F2C  0100               	movlb	0	; () banked
  6642  004F2E  07A3               	decf	_Select_Field& (0+255),f,b
  6643  004F30  D000               	goto	l7658
  6644  004F32                     l7658:
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;Setup_Time.c: 172: Update_Setup_Screen_Cursor_Backward(Select_Field);
  6648  004F32  0100               	movlb	0	; () banked
  6649  004F34  51A3               	movf	_Select_Field& (0+255),w,b
  6650  004F36  EC17  F011         	call	_Update_Setup_Screen_Cursor_Backward
  6651  004F3A  0012               	return		;funcret
  6652  004F3C                     __end_of_Go_Prev_Field:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           postinc0	equ	0xFEE
  6659                           wreg	equ	0xFE8
  6660                           postdec1	equ	0xFE5
  6661                           fsr1l	equ	0xFE1
  6662                           indf2	equ	0xFDF
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8
  6666                           
  6667 ;; *************** function _Go_Next_Field *****************
  6668 ;; Defined at:
  6669 ;;		line 159 in file "Setup_Time.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;		None
  6674 ;; Return value:  Size  Location     Type
  6675 ;;		None               void
  6676 ;; Registers used:
  6677 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;Total ram usage:        0 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    9
  6690 ;; This function calls:
  6691 ;;		_Update_Setup_Screen_Cursor_Forward
  6692 ;; This function is called by:
  6693 ;;		_Do_Setup_Time
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           	psect	text22
  6698  004F3C                     __ptext22:
  6699                           	opt stack 0
  6700  004F3C                     _Go_Next_Field:
  6701                           	opt stack 20
  6702                           
  6703                           ;Setup_Time.c: 162: Select_Field++;
  6704                           
  6705                           ;incstack = 0
  6706  004F3C  0100               	movlb	0	; () banked
  6707  004F3E  2BA3               	incf	_Select_Field& (0+255),f,b
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;Setup_Time.c: 163: if (Select_Field == 6) Select_Field = 0;
  6711  004F40  0E06               	movlw	6
  6712  004F42  0100               	movlb	0	; () banked
  6713  004F44  19A3               	xorwf	_Select_Field& (0+255),w,b
  6714  004F46  A4D8               	btfss	status,2,c
  6715  004F48  D004               	goto	l7666
  6716                           
  6717                           ; BSR set to: 0
  6718  004F4A  0E00               	movlw	0
  6719  004F4C  0100               	movlb	0	; () banked
  6720  004F4E  6FA3               	movwf	_Select_Field& (0+255),b
  6721  004F50  D000               	goto	l7666
  6722  004F52                     l7666:
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;Setup_Time.c: 164: Update_Setup_Screen_Cursor_Forward(Select_Field);
  6726  004F52  0100               	movlb	0	; () banked
  6727  004F54  51A3               	movf	_Select_Field& (0+255),w,b
  6728  004F56  EC3A  F010         	call	_Update_Setup_Screen_Cursor_Forward
  6729  004F5A  0012               	return		;funcret
  6730  004F5C                     __end_of_Go_Next_Field:
  6731                           	opt stack 0
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           postinc0	equ	0xFEE
  6737                           wreg	equ	0xFE8
  6738                           postdec1	equ	0xFE5
  6739                           fsr1l	equ	0xFE1
  6740                           indf2	equ	0xFDF
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _Exit_Time_Setup *****************
  6746 ;; Defined at:
  6747 ;;		line 183 in file "Setup_Time.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;		None
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;		None
  6752 ;; Return value:  Size  Location     Type
  6753 ;;		None               void
  6754 ;; Registers used:
  6755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;Total ram usage:        0 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:   11
  6768 ;; This function calls:
  6769 ;;		_DS3231_Read_Time
  6770 ;;		_Initialize_Screen
  6771 ;; This function is called by:
  6772 ;;		_Do_Setup_Time
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text23
  6777  0051D6                     __ptext23:
  6778                           	opt stack 0
  6779  0051D6                     _Exit_Time_Setup:
  6780                           	opt stack 18
  6781                           
  6782                           ;Setup_Time.c: 185: DS3231_Read_Time();
  6783                           
  6784                           ;incstack = 0
  6785  0051D6  EC08  F023         	call	_DS3231_Read_Time	;wreg free
  6786                           
  6787                           ;Setup_Time.c: 186: Initialize_Screen();
  6788  0051DA  EC3E  F00B         	call	_Initialize_Screen	;wreg free
  6789                           
  6790                           ;Setup_Time.c: 187: In_Time_Setup = 0;
  6791  0051DE  0E00               	movlw	0
  6792  0051E0  0100               	movlb	0	; () banked
  6793  0051E2  6F9F               	movwf	_In_Time_Setup& (0+255),b
  6794                           
  6795                           ; BSR set to: 0
  6796  0051E4  0012               	return		;funcret
  6797  0051E6                     __end_of_Exit_Time_Setup:
  6798                           	opt stack 0
  6799                           tblptru	equ	0xFF8
  6800                           tblptrh	equ	0xFF7
  6801                           tblptrl	equ	0xFF6
  6802                           tablat	equ	0xFF5
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           postdec1	equ	0xFE5
  6806                           fsr1l	equ	0xFE1
  6807                           indf2	equ	0xFDF
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _Do_Save_New_Time *****************
  6813 ;; Defined at:
  6814 ;;		line 175 in file "Setup_Time.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;		None               void
  6821 ;; Registers used:
  6822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;Total ram usage:        0 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:   11
  6835 ;; This function calls:
  6836 ;;		_DS3231_Read_Time
  6837 ;;		_DS3231_Write_Time
  6838 ;;		_Initialize_Screen
  6839 ;; This function is called by:
  6840 ;;		_Do_Setup_Time
  6841 ;; This function uses a non-reentrant model
  6842 ;;
  6843                           
  6844                           	psect	text24
  6845  005108                     __ptext24:
  6846                           	opt stack 0
  6847  005108                     _Do_Save_New_Time:
  6848                           	opt stack 18
  6849                           
  6850                           ;Setup_Time.c: 177: DS3231_Write_Time();
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;incstack = 0
  6854  005108  EC01  F01F         	call	_DS3231_Write_Time	;wreg free
  6855                           
  6856                           ;Setup_Time.c: 178: DS3231_Read_Time();
  6857  00510C  EC08  F023         	call	_DS3231_Read_Time	;wreg free
  6858                           
  6859                           ;Setup_Time.c: 179: Initialize_Screen();
  6860  005110  EC3E  F00B         	call	_Initialize_Screen	;wreg free
  6861                           
  6862                           ;Setup_Time.c: 180: In_Time_Setup = 0;
  6863  005114  0E00               	movlw	0
  6864  005116  0100               	movlb	0	; () banked
  6865  005118  6F9F               	movwf	_In_Time_Setup& (0+255),b
  6866                           
  6867                           ; BSR set to: 0
  6868  00511A  0012               	return		;funcret
  6869  00511C                     __end_of_Do_Save_New_Time:
  6870                           	opt stack 0
  6871                           tblptru	equ	0xFF8
  6872                           tblptrh	equ	0xFF7
  6873                           tblptrl	equ	0xFF6
  6874                           tablat	equ	0xFF5
  6875                           postinc0	equ	0xFEE
  6876                           wreg	equ	0xFE8
  6877                           postdec1	equ	0xFE5
  6878                           fsr1l	equ	0xFE1
  6879                           indf2	equ	0xFDF
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _DS3231_Write_Time *****************
  6885 ;; Defined at:
  6886 ;;		line 90 in file "I2C_Support.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;		None
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  Address         1   74[COMRAM] unsigned char 
  6891 ;;  Device          1   73[COMRAM] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;		None               void
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;Total ram usage:        2 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    5
  6908 ;; This function calls:
  6909 ;;		_I2C_Start
  6910 ;;		_I2C_Stop
  6911 ;;		_I2C_Write
  6912 ;;		_dec_2_bcd
  6913 ;; This function is called by:
  6914 ;;		_Do_Save_New_Time
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	text25
  6919  003E02                     __ptext25:
  6920                           	opt stack 0
  6921  003E02                     _DS3231_Write_Time:
  6922                           	opt stack 23
  6923                           
  6924                           ;I2C_Support.c: 92: char Device = 0x68;
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;incstack = 0
  6928  003E02  0E68               	movlw	104
  6929  003E04  6E4A               	movwf	DS3231_Write_Time@Device,c
  6930                           
  6931                           ;I2C_Support.c: 93: char Address = 0x00;
  6932  003E06  0E00               	movlw	0
  6933  003E08  6E4B               	movwf	DS3231_Write_Time@Address,c
  6934                           
  6935                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  6936  003E0A  0100               	movlb	0	; () banked
  6937  003E0C  51B2               	movf	_setup_second& (0+255),w,b
  6938  003E0E  EC5A  F024         	call	_dec_2_bcd
  6939  003E12  5043               	movf	?_dec_2_bcd,w,c
  6940  003E14  6E6D               	movwf	_second,c
  6941                           
  6942                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  6943  003E16  0100               	movlb	0	; () banked
  6944  003E18  51B0               	movf	_setup_minute& (0+255),w,b
  6945  003E1A  EC5A  F024         	call	_dec_2_bcd
  6946  003E1E  5043               	movf	?_dec_2_bcd,w,c
  6947  003E20  6E6B               	movwf	_minute,c
  6948                           
  6949                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  6950  003E22  0100               	movlb	0	; () banked
  6951  003E24  51AF               	movf	_setup_hour& (0+255),w,b
  6952  003E26  EC5A  F024         	call	_dec_2_bcd
  6953  003E2A  5043               	movf	?_dec_2_bcd,w,c
  6954  003E2C  6E6A               	movwf	_hour,c
  6955                           
  6956                           ;I2C_Support.c: 97: dow = 0x01;
  6957  003E2E  0E01               	movlw	1
  6958  003E30  0100               	movlb	0	; () banked
  6959  003E32  6FA9               	movwf	_dow& (0+255),b
  6960                           
  6961                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  6962  003E34  0100               	movlb	0	; () banked
  6963  003E36  51AD               	movf	_setup_day& (0+255),w,b
  6964  003E38  EC5A  F024         	call	_dec_2_bcd
  6965  003E3C  5043               	movf	?_dec_2_bcd,w,c
  6966  003E3E  6E67               	movwf	_day,c
  6967                           
  6968                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  6969  003E40  0100               	movlb	0	; () banked
  6970  003E42  51B1               	movf	_setup_month& (0+255),w,b
  6971  003E44  EC5A  F024         	call	_dec_2_bcd
  6972  003E48  5043               	movf	?_dec_2_bcd,w,c
  6973  003E4A  6E6C               	movwf	_month,c
  6974                           
  6975                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  6976  003E4C  0100               	movlb	0	; () banked
  6977  003E4E  51B3               	movf	_setup_year& (0+255),w,b
  6978  003E50  EC5A  F024         	call	_dec_2_bcd
  6979  003E54  5043               	movf	?_dec_2_bcd,w,c
  6980  003E56  6E6F               	movwf	_year,c
  6981                           
  6982                           ;I2C_Support.c: 101: I2C_Start();
  6983  003E58  ECD9  F028         	call	_I2C_Start	;wreg free
  6984                           
  6985                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  6986  003E5C  504A               	movf	DS3231_Write_Time@Device,w,c
  6987  003E5E  244A               	addwf	DS3231_Write_Time@Device,w,c
  6988  003E60  EC1B  F026         	call	_I2C_Write
  6989                           
  6990                           ;I2C_Support.c: 103: I2C_Write(Address);
  6991  003E64  504B               	movf	DS3231_Write_Time@Address,w,c
  6992  003E66  EC1B  F026         	call	_I2C_Write
  6993                           
  6994                           ;I2C_Support.c: 104: I2C_Write(second);
  6995  003E6A  506D               	movf	_second,w,c
  6996  003E6C  EC1B  F026         	call	_I2C_Write
  6997                           
  6998                           ;I2C_Support.c: 105: I2C_Write(minute);
  6999  003E70  506B               	movf	_minute,w,c
  7000  003E72  EC1B  F026         	call	_I2C_Write
  7001                           
  7002                           ;I2C_Support.c: 106: I2C_Write(hour);
  7003  003E76  506A               	movf	_hour,w,c
  7004  003E78  EC1B  F026         	call	_I2C_Write
  7005                           
  7006                           ;I2C_Support.c: 107: I2C_Write(dow);
  7007  003E7C  0100               	movlb	0	; () banked
  7008  003E7E  51A9               	movf	_dow& (0+255),w,b
  7009  003E80  EC1B  F026         	call	_I2C_Write
  7010                           
  7011                           ;I2C_Support.c: 108: I2C_Write(day);
  7012  003E84  5067               	movf	_day,w,c
  7013  003E86  EC1B  F026         	call	_I2C_Write
  7014                           
  7015                           ;I2C_Support.c: 109: I2C_Write(month);
  7016  003E8A  506C               	movf	_month,w,c
  7017  003E8C  EC1B  F026         	call	_I2C_Write
  7018                           
  7019                           ;I2C_Support.c: 110: I2C_Write(year);
  7020  003E90  506F               	movf	_year,w,c
  7021  003E92  EC1B  F026         	call	_I2C_Write
  7022                           
  7023                           ;I2C_Support.c: 111: I2C_Stop();
  7024  003E96  ECD0  F028         	call	_I2C_Stop	;wreg free
  7025  003E9A  0012               	return		;funcret
  7026  003E9C                     __end_of_DS3231_Write_Time:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           postinc0	equ	0xFEE
  7033                           wreg	equ	0xFE8
  7034                           postdec1	equ	0xFE5
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _Decrease_Time *****************
  7042 ;; Defined at:
  7043 ;;		line 119 in file "Setup_Time.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;		None               void
  7050 ;; Registers used:
  7051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:   11
  7064 ;; This function calls:
  7065 ;;		_Update_Setup_Time_Screen
  7066 ;; This function is called by:
  7067 ;;		_Do_Setup_Time
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           	psect	text26
  7072  003C96                     __ptext26:
  7073                           	opt stack 0
  7074  003C96                     _Decrease_Time:
  7075                           	opt stack 18
  7076                           
  7077                           ;Setup_Time.c: 121: switch (Select_Field)
  7078                           
  7079                           ;incstack = 0
  7080  003C96  D042               	goto	l10326
  7081  003C98                     l10288:
  7082                           
  7083                           ;Setup_Time.c: 124: if (setup_hour == 0) setup_hour = 23;
  7084  003C98  0100               	movlb	0	; () banked
  7085  003C9A  51AF               	movf	_setup_hour& (0+255),w,b
  7086  003C9C  A4D8               	btfss	status,2,c
  7087  003C9E  D004               	goto	l10292
  7088                           
  7089                           ; BSR set to: 0
  7090  003CA0  0E17               	movlw	23
  7091  003CA2  0100               	movlb	0	; () banked
  7092  003CA4  6FAF               	movwf	_setup_hour& (0+255),b
  7093  003CA6  D04F               	goto	l10328
  7094  003CA8                     l10292:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;Setup_Time.c: 125: else --setup_hour;
  7098  003CA8  0100               	movlb	0	; () banked
  7099  003CAA  07AF               	decf	_setup_hour& (0+255),f,b
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;Setup_Time.c: 126: break;
  7103  003CAC  D04C               	goto	l10328
  7104  003CAE                     l10294:
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;Setup_Time.c: 129: if (setup_minute == 0) setup_minute = 59;
  7108  003CAE  0100               	movlb	0	; () banked
  7109  003CB0  51B0               	movf	_setup_minute& (0+255),w,b
  7110  003CB2  A4D8               	btfss	status,2,c
  7111  003CB4  D004               	goto	l10298
  7112                           
  7113                           ; BSR set to: 0
  7114  003CB6  0E3B               	movlw	59
  7115  003CB8  0100               	movlb	0	; () banked
  7116  003CBA  6FB0               	movwf	_setup_minute& (0+255),b
  7117  003CBC  D044               	goto	l10328
  7118  003CBE                     l10298:
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;Setup_Time.c: 130: else --setup_minute;
  7122  003CBE  0100               	movlb	0	; () banked
  7123  003CC0  07B0               	decf	_setup_minute& (0+255),f,b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;Setup_Time.c: 131: break;
  7127  003CC2  D041               	goto	l10328
  7128  003CC4                     l10300:
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;Setup_Time.c: 134: if (setup_second== 0) setup_second = 59;
  7132  003CC4  0100               	movlb	0	; () banked
  7133  003CC6  51B2               	movf	_setup_second& (0+255),w,b
  7134  003CC8  A4D8               	btfss	status,2,c
  7135  003CCA  D004               	goto	l10304
  7136                           
  7137                           ; BSR set to: 0
  7138  003CCC  0E3B               	movlw	59
  7139  003CCE  0100               	movlb	0	; () banked
  7140  003CD0  6FB2               	movwf	_setup_second& (0+255),b
  7141  003CD2  D039               	goto	l10328
  7142  003CD4                     l10304:
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;Setup_Time.c: 135: else --setup_second;
  7146  003CD4  0100               	movlb	0	; () banked
  7147  003CD6  07B2               	decf	_setup_second& (0+255),f,b
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;Setup_Time.c: 136: break;
  7151  003CD8  D036               	goto	l10328
  7152  003CDA                     l10306:
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;Setup_Time.c: 139: if (setup_month == 0) setup_month = 12;
  7156  003CDA  0100               	movlb	0	; () banked
  7157  003CDC  51B1               	movf	_setup_month& (0+255),w,b
  7158  003CDE  A4D8               	btfss	status,2,c
  7159  003CE0  D004               	goto	l10310
  7160                           
  7161                           ; BSR set to: 0
  7162  003CE2  0E0C               	movlw	12
  7163  003CE4  0100               	movlb	0	; () banked
  7164  003CE6  6FB1               	movwf	_setup_month& (0+255),b
  7165  003CE8  D02E               	goto	l10328
  7166  003CEA                     l10310:
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;Setup_Time.c: 140: else --setup_month;
  7170  003CEA  0100               	movlb	0	; () banked
  7171  003CEC  07B1               	decf	_setup_month& (0+255),f,b
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;Setup_Time.c: 141: break;
  7175  003CEE  D02B               	goto	l10328
  7176  003CF0                     l10312:
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;Setup_Time.c: 144: if (setup_day == 0) setup_day = 31;
  7180  003CF0  0100               	movlb	0	; () banked
  7181  003CF2  51AD               	movf	_setup_day& (0+255),w,b
  7182  003CF4  A4D8               	btfss	status,2,c
  7183  003CF6  D004               	goto	l10316
  7184                           
  7185                           ; BSR set to: 0
  7186  003CF8  0E1F               	movlw	31
  7187  003CFA  0100               	movlb	0	; () banked
  7188  003CFC  6FAD               	movwf	_setup_day& (0+255),b
  7189  003CFE  D023               	goto	l10328
  7190  003D00                     l10316:
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;Setup_Time.c: 145: else --setup_day;
  7194  003D00  0100               	movlb	0	; () banked
  7195  003D02  07AD               	decf	_setup_day& (0+255),f,b
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;Setup_Time.c: 146: break;
  7199  003D04  D020               	goto	l10328
  7200  003D06                     l10318:
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;Setup_Time.c: 149: if (setup_year == 0) setup_year = 99;
  7204  003D06  0100               	movlb	0	; () banked
  7205  003D08  51B3               	movf	_setup_year& (0+255),w,b
  7206  003D0A  A4D8               	btfss	status,2,c
  7207  003D0C  D004               	goto	l10322
  7208                           
  7209                           ; BSR set to: 0
  7210  003D0E  0E63               	movlw	99
  7211  003D10  0100               	movlb	0	; () banked
  7212  003D12  6FB3               	movwf	_setup_year& (0+255),b
  7213  003D14  D018               	goto	l10328
  7214  003D16                     l10322:
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;Setup_Time.c: 150: else --setup_year;
  7218  003D16  0100               	movlb	0	; () banked
  7219  003D18  07B3               	decf	_setup_year& (0+255),f,b
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;Setup_Time.c: 155: }
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;Setup_Time.c: 154: break;
  7226                           
  7227                           ;Setup_Time.c: 153: default:
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;Setup_Time.c: 151: break;
  7231  003D1A  D015               	goto	l10328
  7232  003D1C                     l10326:
  7233  003D1C  0100               	movlb	0	; () banked
  7234  003D1E  51A3               	movf	_Select_Field& (0+255),w,b
  7235                           
  7236                           ; Switch size 1, requested type "space"
  7237                           ; Number of cases is 6, Range of values is 0 to 5
  7238                           ; switch strategies available:
  7239                           ; Name         Instructions Cycles
  7240                           ; simple_byte           19    10 (average)
  7241                           ;	Chosen strategy is simple_byte
  7242  003D20  0A00               	xorlw	0	; case 0
  7243  003D22  B4D8               	btfsc	status,2,c
  7244  003D24  D7B9               	goto	l10288
  7245  003D26  0A01               	xorlw	1	; case 1
  7246  003D28  B4D8               	btfsc	status,2,c
  7247  003D2A  D7C1               	goto	l10294
  7248  003D2C  0A03               	xorlw	3	; case 2
  7249  003D2E  B4D8               	btfsc	status,2,c
  7250  003D30  D7C9               	goto	l10300
  7251  003D32  0A01               	xorlw	1	; case 3
  7252  003D34  B4D8               	btfsc	status,2,c
  7253  003D36  D7D1               	goto	l10306
  7254  003D38  0A07               	xorlw	7	; case 4
  7255  003D3A  B4D8               	btfsc	status,2,c
  7256  003D3C  D7D9               	goto	l10312
  7257  003D3E  0A01               	xorlw	1	; case 5
  7258  003D40  B4D8               	btfsc	status,2,c
  7259  003D42  D7E1               	goto	l10318
  7260  003D44  D000               	goto	l10328
  7261  003D46                     l10328:
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;Setup_Time.c: 156: Update_Setup_Time_Screen();
  7265  003D46  EC8D  F013         	call	_Update_Setup_Time_Screen	;wreg free
  7266  003D4A  0012               	return		;funcret
  7267  003D4C                     __end_of_Decrease_Time:
  7268                           	opt stack 0
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           postinc0	equ	0xFEE
  7274                           wreg	equ	0xFE8
  7275                           postdec1	equ	0xFE5
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           fsr2h	equ	0xFDA
  7279                           fsr2l	equ	0xFD9
  7280                           status	equ	0xFD8
  7281                           
  7282 ;; *************** function _Update_Setup_Time_Screen *****************
  7283 ;; Defined at:
  7284 ;;		line 208 in file "Setup_Time.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;		None
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;		None
  7289 ;; Return value:  Size  Location     Type
  7290 ;;		None               void
  7291 ;; Registers used:
  7292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7302 ;;Total ram usage:        0 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:   10
  7305 ;; This function calls:
  7306 ;;		___awdiv
  7307 ;;		___awmod
  7308 ;;		_drawtext
  7309 ;; This function is called by:
  7310 ;;		_Do_Setup_Time
  7311 ;;		_Increase_Time
  7312 ;;		_Decrease_Time
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           	psect	text27
  7317  00271A                     __ptext27:
  7318                           	opt stack 0
  7319  00271A                     _Update_Setup_Time_Screen:
  7320                           	opt stack 19
  7321                           
  7322                           ;Setup_Time.c: 210: setup_time[0] = (setup_hour/10) + '0';
  7323                           
  7324                           ;incstack = 0
  7325  00271A  C0AF  F017         	movff	_setup_hour,___awdiv@dividend
  7326  00271E  6A18               	clrf	___awdiv@dividend+1,c
  7327  002720  0E00               	movlw	0
  7328  002722  6E1A               	movwf	___awdiv@divisor+1,c
  7329  002724  0E0A               	movlw	10
  7330  002726  6E19               	movwf	___awdiv@divisor,c
  7331  002728  ECE4  F01F         	call	___awdiv	;wreg free
  7332  00272C  5017               	movf	?___awdiv,w,c
  7333  00272E  0F30               	addlw	48
  7334  002730  0101               	movlb	1	; () banked
  7335  002732  6F5F               	movwf	_setup_time& (0+255),b
  7336                           
  7337                           ;Setup_Time.c: 211: setup_time[1] = (setup_hour%10) + '0';
  7338  002734  C0AF  F03D         	movff	_setup_hour,___awmod@dividend
  7339  002738  6A3E               	clrf	___awmod@dividend+1,c
  7340  00273A  0E00               	movlw	0
  7341  00273C  6E40               	movwf	___awmod@divisor+1,c
  7342  00273E  0E0A               	movlw	10
  7343  002740  6E3F               	movwf	___awmod@divisor,c
  7344  002742  ECDB  F021         	call	___awmod	;wreg free
  7345  002746  503D               	movf	?___awmod,w,c
  7346  002748  0F30               	addlw	48
  7347  00274A  0101               	movlb	1	; () banked
  7348  00274C  6F60               	movwf	(_setup_time+1)& (0+255),b
  7349                           
  7350                           ;Setup_Time.c: 213: setup_time[3] = (setup_minute/10) + '0';
  7351  00274E  C0B0  F017         	movff	_setup_minute,___awdiv@dividend
  7352  002752  6A18               	clrf	___awdiv@dividend+1,c
  7353  002754  0E00               	movlw	0
  7354  002756  6E1A               	movwf	___awdiv@divisor+1,c
  7355  002758  0E0A               	movlw	10
  7356  00275A  6E19               	movwf	___awdiv@divisor,c
  7357  00275C  ECE4  F01F         	call	___awdiv	;wreg free
  7358  002760  5017               	movf	?___awdiv,w,c
  7359  002762  0F30               	addlw	48
  7360  002764  0101               	movlb	1	; () banked
  7361  002766  6F62               	movwf	(_setup_time+3)& (0+255),b
  7362                           
  7363                           ;Setup_Time.c: 214: setup_time[4] = (setup_minute%10) + '0';
  7364  002768  C0B0  F03D         	movff	_setup_minute,___awmod@dividend
  7365  00276C  6A3E               	clrf	___awmod@dividend+1,c
  7366  00276E  0E00               	movlw	0
  7367  002770  6E40               	movwf	___awmod@divisor+1,c
  7368  002772  0E0A               	movlw	10
  7369  002774  6E3F               	movwf	___awmod@divisor,c
  7370  002776  ECDB  F021         	call	___awmod	;wreg free
  7371  00277A  503D               	movf	?___awmod,w,c
  7372  00277C  0F30               	addlw	48
  7373  00277E  0101               	movlb	1	; () banked
  7374  002780  6F63               	movwf	(_setup_time+4)& (0+255),b
  7375                           
  7376                           ;Setup_Time.c: 216: setup_time[6] = (setup_second/10) + '0';
  7377  002782  C0B2  F017         	movff	_setup_second,___awdiv@dividend
  7378  002786  6A18               	clrf	___awdiv@dividend+1,c
  7379  002788  0E00               	movlw	0
  7380  00278A  6E1A               	movwf	___awdiv@divisor+1,c
  7381  00278C  0E0A               	movlw	10
  7382  00278E  6E19               	movwf	___awdiv@divisor,c
  7383  002790  ECE4  F01F         	call	___awdiv	;wreg free
  7384  002794  5017               	movf	?___awdiv,w,c
  7385  002796  0F30               	addlw	48
  7386  002798  0101               	movlb	1	; () banked
  7387  00279A  6F65               	movwf	(_setup_time+6)& (0+255),b
  7388                           
  7389                           ;Setup_Time.c: 217: setup_time[7] = (setup_second%10) + '0';
  7390  00279C  C0B2  F03D         	movff	_setup_second,___awmod@dividend
  7391  0027A0  6A3E               	clrf	___awmod@dividend+1,c
  7392  0027A2  0E00               	movlw	0
  7393  0027A4  6E40               	movwf	___awmod@divisor+1,c
  7394  0027A6  0E0A               	movlw	10
  7395  0027A8  6E3F               	movwf	___awmod@divisor,c
  7396  0027AA  ECDB  F021         	call	___awmod	;wreg free
  7397  0027AE  503D               	movf	?___awmod,w,c
  7398  0027B0  0F30               	addlw	48
  7399  0027B2  0101               	movlb	1	; () banked
  7400  0027B4  6F66               	movwf	(_setup_time+7)& (0+255),b
  7401                           
  7402                           ;Setup_Time.c: 219: setup_date[0] = (setup_month/10) + '0';
  7403  0027B6  C0B1  F017         	movff	_setup_month,___awdiv@dividend
  7404  0027BA  6A18               	clrf	___awdiv@dividend+1,c
  7405  0027BC  0E00               	movlw	0
  7406  0027BE  6E1A               	movwf	___awdiv@divisor+1,c
  7407  0027C0  0E0A               	movlw	10
  7408  0027C2  6E19               	movwf	___awdiv@divisor,c
  7409  0027C4  ECE4  F01F         	call	___awdiv	;wreg free
  7410  0027C8  5017               	movf	?___awdiv,w,c
  7411  0027CA  0F30               	addlw	48
  7412  0027CC  0101               	movlb	1	; () banked
  7413  0027CE  6F56               	movwf	_setup_date& (0+255),b
  7414                           
  7415                           ;Setup_Time.c: 220: setup_date[1] = (setup_month%10) + '0';
  7416  0027D0  C0B1  F03D         	movff	_setup_month,___awmod@dividend
  7417  0027D4  6A3E               	clrf	___awmod@dividend+1,c
  7418  0027D6  0E00               	movlw	0
  7419  0027D8  6E40               	movwf	___awmod@divisor+1,c
  7420  0027DA  0E0A               	movlw	10
  7421  0027DC  6E3F               	movwf	___awmod@divisor,c
  7422  0027DE  ECDB  F021         	call	___awmod	;wreg free
  7423  0027E2  503D               	movf	?___awmod,w,c
  7424  0027E4  0F30               	addlw	48
  7425  0027E6  0101               	movlb	1	; () banked
  7426  0027E8  6F57               	movwf	(_setup_date+1)& (0+255),b
  7427                           
  7428                           ;Setup_Time.c: 222: setup_date[3] = (setup_day/10) + '0';
  7429  0027EA  C0AD  F017         	movff	_setup_day,___awdiv@dividend
  7430  0027EE  6A18               	clrf	___awdiv@dividend+1,c
  7431  0027F0  0E00               	movlw	0
  7432  0027F2  6E1A               	movwf	___awdiv@divisor+1,c
  7433  0027F4  0E0A               	movlw	10
  7434  0027F6  6E19               	movwf	___awdiv@divisor,c
  7435  0027F8  ECE4  F01F         	call	___awdiv	;wreg free
  7436  0027FC  5017               	movf	?___awdiv,w,c
  7437  0027FE  0F30               	addlw	48
  7438  002800  0101               	movlb	1	; () banked
  7439  002802  6F59               	movwf	(_setup_date+3)& (0+255),b
  7440                           
  7441                           ;Setup_Time.c: 223: setup_date[4] = (setup_day%10) + '0';
  7442  002804  C0AD  F03D         	movff	_setup_day,___awmod@dividend
  7443  002808  6A3E               	clrf	___awmod@dividend+1,c
  7444  00280A  0E00               	movlw	0
  7445  00280C  6E40               	movwf	___awmod@divisor+1,c
  7446  00280E  0E0A               	movlw	10
  7447  002810  6E3F               	movwf	___awmod@divisor,c
  7448  002812  ECDB  F021         	call	___awmod	;wreg free
  7449  002816  503D               	movf	?___awmod,w,c
  7450  002818  0F30               	addlw	48
  7451  00281A  0101               	movlb	1	; () banked
  7452  00281C  6F5A               	movwf	(_setup_date+4)& (0+255),b
  7453                           
  7454                           ;Setup_Time.c: 225: setup_date[6] = (setup_year/10) + '0';
  7455  00281E  C0B3  F017         	movff	_setup_year,___awdiv@dividend
  7456  002822  6A18               	clrf	___awdiv@dividend+1,c
  7457  002824  0E00               	movlw	0
  7458  002826  6E1A               	movwf	___awdiv@divisor+1,c
  7459  002828  0E0A               	movlw	10
  7460  00282A  6E19               	movwf	___awdiv@divisor,c
  7461  00282C  ECE4  F01F         	call	___awdiv	;wreg free
  7462  002830  5017               	movf	?___awdiv,w,c
  7463  002832  0F30               	addlw	48
  7464  002834  0101               	movlb	1	; () banked
  7465  002836  6F5C               	movwf	(_setup_date+6)& (0+255),b
  7466                           
  7467                           ;Setup_Time.c: 226: setup_date[7] = (setup_year%10) + '0';
  7468  002838  C0B3  F03D         	movff	_setup_year,___awmod@dividend
  7469  00283C  6A3E               	clrf	___awmod@dividend+1,c
  7470  00283E  0E00               	movlw	0
  7471  002840  6E40               	movwf	___awmod@divisor+1,c
  7472  002842  0E0A               	movlw	10
  7473  002844  6E3F               	movwf	___awmod@divisor,c
  7474  002846  ECDB  F021         	call	___awmod	;wreg free
  7475  00284A  503D               	movf	?___awmod,w,c
  7476  00284C  0F30               	addlw	48
  7477  00284E  0101               	movlb	1	; () banked
  7478  002850  6F5D               	movwf	(_setup_date+7)& (0+255),b
  7479                           
  7480                           ; BSR set to: 1
  7481                           ;Setup_Time.c: 228: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  7482  002852  0E34               	movlw	52
  7483  002854  6E39               	movwf	drawtext@y,c
  7484  002856  0E5F               	movlw	low _setup_time
  7485  002858  6E3A               	movwf	drawtext@_text,c
  7486  00285A  0E01               	movlw	high _setup_time
  7487  00285C  6E3B               	movwf	drawtext@_text+1,c
  7488  00285E  0E07               	movlw	7
  7489  002860  6E3D               	movwf	drawtext@color+1,c
  7490  002862  683C               	setf	drawtext@color,c
  7491  002864  0E00               	movlw	0
  7492  002866  6E3F               	movwf	drawtext@bg+1,c
  7493  002868  0E00               	movlw	0
  7494  00286A  6E3E               	movwf	drawtext@bg,c
  7495  00286C  0E02               	movlw	2
  7496  00286E  6E40               	movwf	drawtext@size,c
  7497  002870  0E0F               	movlw	15
  7498  002872  EC11  F01B         	call	_drawtext
  7499                           
  7500                           ;Setup_Time.c: 229: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  7501  002876  0E52               	movlw	82
  7502  002878  6E39               	movwf	drawtext@y,c
  7503  00287A  0E56               	movlw	low _setup_date
  7504  00287C  6E3A               	movwf	drawtext@_text,c
  7505  00287E  0E01               	movlw	high _setup_date
  7506  002880  6E3B               	movwf	drawtext@_text+1,c
  7507  002882  0E07               	movlw	7
  7508  002884  6E3D               	movwf	drawtext@color+1,c
  7509  002886  0EE0               	movlw	224
  7510  002888  6E3C               	movwf	drawtext@color,c
  7511  00288A  0E00               	movlw	0
  7512  00288C  6E3F               	movwf	drawtext@bg+1,c
  7513  00288E  0E00               	movlw	0
  7514  002890  6E3E               	movwf	drawtext@bg,c
  7515  002892  0E02               	movlw	2
  7516  002894  6E40               	movwf	drawtext@size,c
  7517  002896  0E0F               	movlw	15
  7518  002898  EC11  F01B         	call	_drawtext
  7519  00289C  0012               	return		;funcret
  7520  00289E                     __end_of_Update_Setup_Time_Screen:
  7521                           	opt stack 0
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           postinc0	equ	0xFEE
  7527                           wreg	equ	0xFE8
  7528                           postdec1	equ	0xFE5
  7529                           fsr1l	equ	0xFE1
  7530                           indf2	equ	0xFDF
  7531                           fsr2h	equ	0xFDA
  7532                           fsr2l	equ	0xFD9
  7533                           status	equ	0xFD8
  7534                           
  7535 ;; *************** function _Do_Setup_Heater_Temp *****************
  7536 ;; Defined at:
  7537 ;;		line 24 in file "Setup_Heater_Temp.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;		None
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;		None
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  2  381[None  ] int 
  7544 ;; Registers used:
  7545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7555 ;;Total ram usage:        2 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:   12
  7558 ;; This function calls:
  7559 ;;		_Decrease_Heater_Temp
  7560 ;;		_Do_Beep_Bad
  7561 ;;		_Do_Beep_Good
  7562 ;;		_Do_Save_New_Heater_Temp
  7563 ;;		_Exit_Setup_Heater_Temp
  7564 ;;		_Increase_Heater_Temp
  7565 ;;		_Initialize_Setup_Heater_Screen
  7566 ;;		_Update_Setup_Heater_Screen
  7567 ;;		_check_for_button_input
  7568 ;; This function is called by:
  7569 ;;		_main
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text28
  7574  0040F4                     __ptext28:
  7575                           	opt stack 0
  7576  0040F4                     _Do_Setup_Heater_Temp:
  7577                           	opt stack 18
  7578                           
  7579                           ;Setup_Heater_Temp.c: 27: In_Heater_Temp_Setup = 1;
  7580                           
  7581                           ;incstack = 0
  7582  0040F4  0E01               	movlw	1
  7583  0040F6  0100               	movlb	0	; () banked
  7584  0040F8  6F9E               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;Setup_Heater_Temp.c: 28: setup_heater_set_temp = heater_set_temp;
  7588  0040FA  C0B4  F0AE         	movff	_heater_set_temp,_setup_heater_set_temp
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;Setup_Heater_Temp.c: 29: Initialize_Setup_Heater_Screen();
  7592  0040FE  ECAC  F019         	call	_Initialize_Setup_Heater_Screen	;wreg free
  7593                           
  7594                           ;Setup_Heater_Temp.c: 30: Update_Setup_Heater_Screen();
  7595  004102  EC99  F01F         	call	_Update_Setup_Heater_Screen	;wreg free
  7596                           
  7597                           ;Setup_Heater_Temp.c: 32: while (In_Heater_Temp_Setup == 1)
  7598  004106  D03B               	goto	l10796
  7599  004108                     l10766:
  7600                           
  7601                           ;Setup_Heater_Temp.c: 33: {
  7602                           ;Setup_Heater_Temp.c: 34: if (check_for_button_input() == 1)
  7603  004108  0E01               	movlw	1
  7604  00410A  0100               	movlb	0	; () banked
  7605  00410C  6FF2               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  7606  00410E  0E00               	movlw	0
  7607  004110  0100               	movlb	0	; () banked
  7608  004112  6FF3               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  7609  004114  ECC4  F020         	call	_check_for_button_input	;wreg free
  7610  004118  0100               	movlb	0	; () banked
  7611  00411A  19F2               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  7612  00411C  11F3               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  7613  00411E  A4D8               	btfss	status,2,c
  7614  004120  D02E               	goto	l10796
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;Setup_Heater_Temp.c: 35: {
  7618                           ;Setup_Heater_Temp.c: 36: nec_ok = 0;
  7619  004122  0E00               	movlw	0
  7620  004124  0100               	movlb	0	; () banked
  7621  004126  6F96               	movwf	(_nec_ok+1)& (0+255),b
  7622  004128  0E00               	movlw	0
  7623  00412A  6F95               	movwf	_nec_ok& (0+255),b
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;Setup_Heater_Temp.c: 37: if (found >= 5 && found <= 8)
  7627  00412C  0E04               	movlw	4
  7628  00412E  6469               	cpfsgt	_found,c
  7629  004130  D023               	goto	l10794
  7630                           
  7631                           ; BSR set to: 0
  7632  004132  0E09               	movlw	9
  7633  004134  6069               	cpfslt	_found,c
  7634  004136  D020               	goto	l10794
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;Setup_Heater_Temp.c: 38: {
  7638                           ;Setup_Heater_Temp.c: 39: Do_Beep_Good();
  7639  004138  EC4B  F028         	call	_Do_Beep_Good	;wreg free
  7640                           
  7641                           ;Setup_Heater_Temp.c: 41: if (found == 5) Do_Save_New_Heater_Temp();
  7642  00413C  0E05               	movlw	5
  7643  00413E  1869               	xorwf	_found,w,c
  7644  004140  A4D8               	btfss	status,2,c
  7645  004142  D003               	goto	l10780
  7646  004144  EC8E  F028         	call	_Do_Save_New_Heater_Temp	;wreg free
  7647  004148  D000               	goto	l10780
  7648  00414A                     l10780:
  7649                           
  7650                           ;Setup_Heater_Temp.c: 42: if (found == 6) Decrease_Heater_Temp() ;
  7651  00414A  0E06               	movlw	6
  7652  00414C  1869               	xorwf	_found,w,c
  7653  00414E  A4D8               	btfss	status,2,c
  7654  004150  D003               	goto	l10784
  7655  004152  EC25  F028         	call	_Decrease_Heater_Temp	;wreg free
  7656  004156  D000               	goto	l10784
  7657  004158                     l10784:
  7658                           
  7659                           ;Setup_Heater_Temp.c: 43: if (found == 7) Increase_Heater_Temp();
  7660  004158  0E07               	movlw	7
  7661  00415A  1869               	xorwf	_found,w,c
  7662  00415C  A4D8               	btfss	status,2,c
  7663  00415E  D003               	goto	l10788
  7664  004160  EC18  F028         	call	_Increase_Heater_Temp	;wreg free
  7665  004164  D000               	goto	l10788
  7666  004166                     l10788:
  7667                           
  7668                           ;Setup_Heater_Temp.c: 44: if (found == 8) Exit_Setup_Heater_Temp();
  7669  004166  0E08               	movlw	8
  7670  004168  1869               	xorwf	_found,w,c
  7671  00416A  A4D8               	btfss	status,2,c
  7672  00416C  D003               	goto	l10792
  7673  00416E  ECF3  F028         	call	_Exit_Setup_Heater_Temp	;wreg free
  7674  004172  D000               	goto	l10792
  7675  004174                     l10792:
  7676                           
  7677                           ;Setup_Heater_Temp.c: 46: found = 0xff;
  7678  004174  6869               	setf	_found,c
  7679                           
  7680                           ;Setup_Heater_Temp.c: 47: }
  7681  004176  D003               	goto	l10796
  7682  004178                     l10794:
  7683                           
  7684                           ;Setup_Heater_Temp.c: 48: else
  7685                           ;Setup_Heater_Temp.c: 49: {
  7686                           ;Setup_Heater_Temp.c: 50: Do_Beep_Bad();
  7687  004178  EC57  F028         	call	_Do_Beep_Bad	;wreg free
  7688  00417C  D000               	goto	l10796
  7689  00417E                     l10796:
  7690  00417E  0100               	movlb	0	; () banked
  7691  004180  059E               	decf	_In_Heater_Temp_Setup& (0+255),w,b
  7692  004182  B4D8               	btfsc	status,2,c
  7693  004184  D7C1               	goto	l10766
  7694                           
  7695                           ; BSR set to: 0
  7696                           
  7697                           ; BSR set to: 0
  7698  004186  0012               	return		;funcret
  7699  004188                     __end_of_Do_Setup_Heater_Temp:
  7700                           	opt stack 0
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           postinc0	equ	0xFEE
  7706                           wreg	equ	0xFE8
  7707                           postdec1	equ	0xFE5
  7708                           fsr1l	equ	0xFE1
  7709                           indf2	equ	0xFDF
  7710                           fsr2h	equ	0xFDA
  7711                           fsr2l	equ	0xFD9
  7712                           status	equ	0xFD8
  7713                           
  7714 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  7715 ;; Defined at:
  7716 ;;		line 92 in file "Setup_Heater_Temp.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;		None
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;		None
  7721 ;; Return value:  Size  Location     Type
  7722 ;;		None               void
  7723 ;; Registers used:
  7724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 0/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;Total ram usage:        0 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; Hardware stack levels required when called:   10
  7737 ;; This function calls:
  7738 ;;		_drawtext
  7739 ;;		_fillScreen
  7740 ;;		_strcpy
  7741 ;; This function is called by:
  7742 ;;		_Do_Setup_Heater_Temp
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           	psect	text29
  7747  003358                     __ptext29:
  7748                           	opt stack 0
  7749  003358                     _Initialize_Setup_Heater_Screen:
  7750                           	opt stack 19
  7751                           
  7752                           ;Setup_Heater_Temp.c: 94: fillScreen(0x0000);
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;incstack = 0
  7756  003358  0E00               	movlw	0
  7757  00335A  6E25               	movwf	fillScreen@color+1,c
  7758  00335C  0E00               	movlw	0
  7759  00335E  6E24               	movwf	fillScreen@color,c
  7760  003360  ECFC  F027         	call	_fillScreen	;wreg free
  7761                           
  7762                           ;Setup_Heater_Temp.c: 96: strcpy(txt, "ECE3301L Sp'22 S1\0");
  7763  003364  C062  F011         	movff	_txt,strcpy@to
  7764  003368  C063  F012         	movff	_txt+1,strcpy@to+1
  7765  00336C  0EDE               	movlw	low (STR_8+1)
  7766  00336E  6E13               	movwf	strcpy@from,c
  7767  003370  0EFE               	movlw	high (STR_8+1)
  7768  003372  6E14               	movwf	strcpy@from+1,c
  7769  003374  EC8F  F026         	call	_strcpy	;wreg free
  7770                           
  7771                           ;Setup_Heater_Temp.c: 97: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7772  003378  0E01               	movlw	1
  7773  00337A  6E39               	movwf	drawtext@y,c
  7774  00337C  C062  F03A         	movff	_txt,drawtext@_text
  7775  003380  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7776  003384  0EFF               	movlw	255
  7777  003386  6E3D               	movwf	drawtext@color+1,c
  7778  003388  683C               	setf	drawtext@color,c
  7779  00338A  0E00               	movlw	0
  7780  00338C  6E3F               	movwf	drawtext@bg+1,c
  7781  00338E  0E00               	movlw	0
  7782  003390  6E3E               	movwf	drawtext@bg,c
  7783  003392  0E01               	movlw	1
  7784  003394  6E40               	movwf	drawtext@size,c
  7785  003396  0E01               	movlw	1
  7786  003398  EC11  F01B         	call	_drawtext
  7787                           
  7788                           ;Setup_Heater_Temp.c: 99: strcpy(txt, "  Heater\0 ");
  7789  00339C  C062  F011         	movff	_txt,strcpy@to
  7790  0033A0  C063  F012         	movff	_txt+1,strcpy@to+1
  7791  0033A4  0E94               	movlw	low STR_32
  7792  0033A6  6E13               	movwf	strcpy@from,c
  7793  0033A8  0EFF               	movlw	high STR_32
  7794  0033AA  6E14               	movwf	strcpy@from+1,c
  7795  0033AC  EC8F  F026         	call	_strcpy	;wreg free
  7796                           
  7797                           ;Setup_Heater_Temp.c: 100: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  7798  0033B0  0E1A               	movlw	26
  7799  0033B2  6E39               	movwf	drawtext@y,c
  7800  0033B4  C062  F03A         	movff	_txt,drawtext@_text
  7801  0033B8  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7802  0033BC  0EFF               	movlw	255
  7803  0033BE  6E3D               	movwf	drawtext@color+1,c
  7804  0033C0  0EE0               	movlw	224
  7805  0033C2  6E3C               	movwf	drawtext@color,c
  7806  0033C4  0E00               	movlw	0
  7807  0033C6  6E3F               	movwf	drawtext@bg+1,c
  7808  0033C8  0E00               	movlw	0
  7809  0033CA  6E3E               	movwf	drawtext@bg,c
  7810  0033CC  0E02               	movlw	2
  7811  0033CE  6E40               	movwf	drawtext@size,c
  7812  0033D0  0E01               	movlw	1
  7813  0033D2  EC11  F01B         	call	_drawtext
  7814                           
  7815                           ;Setup_Heater_Temp.c: 101: strcpy(txt, "  Setup\0 ");
  7816  0033D6  C062  F011         	movff	_txt,strcpy@to
  7817  0033DA  C063  F012         	movff	_txt+1,strcpy@to+1
  7818  0033DE  0EB5               	movlw	low STR_33
  7819  0033E0  6E13               	movwf	strcpy@from,c
  7820  0033E2  0EFF               	movlw	high STR_33
  7821  0033E4  6E14               	movwf	strcpy@from+1,c
  7822  0033E6  EC8F  F026         	call	_strcpy	;wreg free
  7823                           
  7824                           ;Setup_Heater_Temp.c: 102: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  7825  0033EA  0E29               	movlw	41
  7826  0033EC  6E39               	movwf	drawtext@y,c
  7827  0033EE  C062  F03A         	movff	_txt,drawtext@_text
  7828  0033F2  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7829  0033F6  0EFF               	movlw	255
  7830  0033F8  6E3D               	movwf	drawtext@color+1,c
  7831  0033FA  0EE0               	movlw	224
  7832  0033FC  6E3C               	movwf	drawtext@color,c
  7833  0033FE  0E00               	movlw	0
  7834  003400  6E3F               	movwf	drawtext@bg+1,c
  7835  003402  0E00               	movlw	0
  7836  003404  6E3E               	movwf	drawtext@bg,c
  7837  003406  0E02               	movlw	2
  7838  003408  6E40               	movwf	drawtext@size,c
  7839  00340A  0E01               	movlw	1
  7840  00340C  EC11  F01B         	call	_drawtext
  7841                           
  7842                           ;Setup_Heater_Temp.c: 103: strcpy(txt, "Set Heater Temp");
  7843  003410  C062  F011         	movff	_txt,strcpy@to
  7844  003414  C063  F012         	movff	_txt+1,strcpy@to+1
  7845  003418  0E4F               	movlw	low STR_34
  7846  00341A  6E13               	movwf	strcpy@from,c
  7847  00341C  0EFF               	movlw	high STR_34
  7848  00341E  6E14               	movwf	strcpy@from+1,c
  7849  003420  EC8F  F026         	call	_strcpy	;wreg free
  7850                           
  7851                           ;Setup_Heater_Temp.c: 104: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  7852  003424  0E3C               	movlw	60
  7853  003426  6E39               	movwf	drawtext@y,c
  7854  003428  C062  F03A         	movff	_txt,drawtext@_text
  7855  00342C  C063  F03B         	movff	_txt+1,drawtext@_text+1
  7856  003430  0E07               	movlw	7
  7857  003432  6E3D               	movwf	drawtext@color+1,c
  7858  003434  683C               	setf	drawtext@color,c
  7859  003436  0E00               	movlw	0
  7860  003438  6E3F               	movwf	drawtext@bg+1,c
  7861  00343A  0E00               	movlw	0
  7862  00343C  6E3E               	movwf	drawtext@bg,c
  7863  00343E  0E01               	movlw	1
  7864  003440  6E40               	movwf	drawtext@size,c
  7865  003442  0E0F               	movlw	15
  7866  003444  EC11  F01B         	call	_drawtext
  7867  003448  0012               	return		;funcret
  7868  00344A                     __end_of_Initialize_Setup_Heater_Screen:
  7869                           	opt stack 0
  7870                           tblptru	equ	0xFF8
  7871                           tblptrh	equ	0xFF7
  7872                           tblptrl	equ	0xFF6
  7873                           tablat	equ	0xFF5
  7874                           postinc0	equ	0xFEE
  7875                           wreg	equ	0xFE8
  7876                           postdec1	equ	0xFE5
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _Increase_Heater_Temp *****************
  7884 ;; Defined at:
  7885 ;;		line 56 in file "Setup_Heater_Temp.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;		None
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;		None
  7890 ;; Return value:  Size  Location     Type
  7891 ;;		None               void
  7892 ;; Registers used:
  7893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;Total ram usage:        0 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:   11
  7906 ;; This function calls:
  7907 ;;		_Update_Setup_Heater_Screen
  7908 ;; This function is called by:
  7909 ;;		_Do_Setup_Heater_Temp
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text30
  7914  005030                     __ptext30:
  7915                           	opt stack 0
  7916  005030                     _Increase_Heater_Temp:
  7917                           	opt stack 18
  7918                           
  7919                           ;Setup_Heater_Temp.c: 60: setup_heater_set_temp++;
  7920                           
  7921                           ;incstack = 0
  7922  005030  0100               	movlb	0	; () banked
  7923  005032  2BAE               	incf	_setup_heater_set_temp& (0+255),f,b
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;Setup_Heater_Temp.c: 61: if(setup_heater_set_temp > 120) setup_heater_set_temp = 120;
  7927  005034  0E78               	movlw	120
  7928  005036  0100               	movlb	0	; () banked
  7929  005038  65AE               	cpfsgt	_setup_heater_set_temp& (0+255),b
  7930  00503A  D004               	goto	l10254
  7931                           
  7932                           ; BSR set to: 0
  7933  00503C  0E78               	movlw	120
  7934  00503E  0100               	movlb	0	; () banked
  7935  005040  6FAE               	movwf	_setup_heater_set_temp& (0+255),b
  7936  005042  D000               	goto	l10254
  7937  005044                     l10254:
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;Setup_Heater_Temp.c: 62: Update_Setup_Heater_Screen();
  7941  005044  EC99  F01F         	call	_Update_Setup_Heater_Screen	;wreg free
  7942  005048  0012               	return		;funcret
  7943  00504A                     __end_of_Increase_Heater_Temp:
  7944                           	opt stack 0
  7945                           tblptru	equ	0xFF8
  7946                           tblptrh	equ	0xFF7
  7947                           tblptrl	equ	0xFF6
  7948                           tablat	equ	0xFF5
  7949                           postinc0	equ	0xFEE
  7950                           wreg	equ	0xFE8
  7951                           postdec1	equ	0xFE5
  7952                           fsr1l	equ	0xFE1
  7953                           indf2	equ	0xFDF
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8
  7957                           
  7958 ;; *************** function _Exit_Setup_Heater_Temp *****************
  7959 ;; Defined at:
  7960 ;;		line 77 in file "Setup_Heater_Temp.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;		None
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;		None
  7965 ;; Return value:  Size  Location     Type
  7966 ;;		None               void
  7967 ;; Registers used:
  7968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7978 ;;Total ram usage:        0 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:   11
  7981 ;; This function calls:
  7982 ;;		_DS3231_Read_Time
  7983 ;;		_Initialize_Screen
  7984 ;; This function is called by:
  7985 ;;		_Do_Setup_Heater_Temp
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           	psect	text31
  7990  0051E6                     __ptext31:
  7991                           	opt stack 0
  7992  0051E6                     _Exit_Setup_Heater_Temp:
  7993                           	opt stack 18
  7994                           
  7995                           ;Setup_Heater_Temp.c: 79: DS3231_Read_Time();
  7996                           
  7997                           ;incstack = 0
  7998  0051E6  EC08  F023         	call	_DS3231_Read_Time	;wreg free
  7999                           
  8000                           ;Setup_Heater_Temp.c: 80: Initialize_Screen();
  8001  0051EA  EC3E  F00B         	call	_Initialize_Screen	;wreg free
  8002                           
  8003                           ;Setup_Heater_Temp.c: 81: In_Heater_Temp_Setup = 0;
  8004  0051EE  0E00               	movlw	0
  8005  0051F0  0100               	movlb	0	; () banked
  8006  0051F2  6F9E               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8007                           
  8008                           ; BSR set to: 0
  8009  0051F4  0012               	return		;funcret
  8010  0051F6                     __end_of_Exit_Setup_Heater_Temp:
  8011                           	opt stack 0
  8012                           tblptru	equ	0xFF8
  8013                           tblptrh	equ	0xFF7
  8014                           tblptrl	equ	0xFF6
  8015                           tablat	equ	0xFF5
  8016                           postinc0	equ	0xFEE
  8017                           wreg	equ	0xFE8
  8018                           postdec1	equ	0xFE5
  8019                           fsr1l	equ	0xFE1
  8020                           indf2	equ	0xFDF
  8021                           fsr2h	equ	0xFDA
  8022                           fsr2l	equ	0xFD9
  8023                           status	equ	0xFD8
  8024                           
  8025 ;; *************** function _Do_Save_New_Heater_Temp *****************
  8026 ;; Defined at:
  8027 ;;		line 84 in file "Setup_Heater_Temp.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;		None
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;		None
  8032 ;; Return value:  Size  Location     Type
  8033 ;;		None               void
  8034 ;; Registers used:
  8035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;Total ram usage:        0 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:   11
  8048 ;; This function calls:
  8049 ;;		_DS3231_Read_Time
  8050 ;;		_Initialize_Screen
  8051 ;; This function is called by:
  8052 ;;		_Do_Setup_Heater_Temp
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text32
  8057  00511C                     __ptext32:
  8058                           	opt stack 0
  8059  00511C                     _Do_Save_New_Heater_Temp:
  8060                           	opt stack 18
  8061                           
  8062                           ;Setup_Heater_Temp.c: 86: heater_set_temp = setup_heater_set_temp;
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;incstack = 0
  8066  00511C  C0AE  F0B4         	movff	_setup_heater_set_temp,_heater_set_temp
  8067                           
  8068                           ;Setup_Heater_Temp.c: 87: DS3231_Read_Time();
  8069  005120  EC08  F023         	call	_DS3231_Read_Time	;wreg free
  8070                           
  8071                           ;Setup_Heater_Temp.c: 88: Initialize_Screen();
  8072  005124  EC3E  F00B         	call	_Initialize_Screen	;wreg free
  8073                           
  8074                           ;Setup_Heater_Temp.c: 89: In_Heater_Temp_Setup = 0;
  8075  005128  0E00               	movlw	0
  8076  00512A  0100               	movlb	0	; () banked
  8077  00512C  6F9E               	movwf	_In_Heater_Temp_Setup& (0+255),b
  8078                           
  8079                           ; BSR set to: 0
  8080  00512E  0012               	return		;funcret
  8081  005130                     __end_of_Do_Save_New_Heater_Temp:
  8082                           	opt stack 0
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           postinc0	equ	0xFEE
  8088                           wreg	equ	0xFE8
  8089                           postdec1	equ	0xFE5
  8090                           fsr1l	equ	0xFE1
  8091                           indf2	equ	0xFDF
  8092                           fsr2h	equ	0xFDA
  8093                           fsr2l	equ	0xFD9
  8094                           status	equ	0xFD8
  8095                           
  8096 ;; *************** function _Decrease_Heater_Temp *****************
  8097 ;; Defined at:
  8098 ;;		line 66 in file "Setup_Heater_Temp.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;		None
  8103 ;; Return value:  Size  Location     Type
  8104 ;;		None               void
  8105 ;; Registers used:
  8106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;Total ram usage:        0 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:   11
  8119 ;; This function calls:
  8120 ;;		_Update_Setup_Heater_Screen
  8121 ;; This function is called by:
  8122 ;;		_Do_Setup_Heater_Temp
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text33
  8127  00504A                     __ptext33:
  8128                           	opt stack 0
  8129  00504A                     _Decrease_Heater_Temp:
  8130                           	opt stack 18
  8131                           
  8132                           ;Setup_Heater_Temp.c: 70: --setup_heater_set_temp;
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;incstack = 0
  8136  00504A  0100               	movlb	0	; () banked
  8137  00504C  07AE               	decf	_setup_heater_set_temp& (0+255),f,b
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;Setup_Heater_Temp.c: 71: if(setup_heater_set_temp < 50) setup_heater_set_temp = 50;
  8141  00504E  0E32               	movlw	50
  8142  005050  0100               	movlb	0	; () banked
  8143  005052  61AE               	cpfslt	_setup_heater_set_temp& (0+255),b
  8144  005054  D004               	goto	l10246
  8145                           
  8146                           ; BSR set to: 0
  8147  005056  0E32               	movlw	50
  8148  005058  0100               	movlb	0	; () banked
  8149  00505A  6FAE               	movwf	_setup_heater_set_temp& (0+255),b
  8150  00505C  D000               	goto	l10246
  8151  00505E                     l10246:
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;Setup_Heater_Temp.c: 72: Update_Setup_Heater_Screen();
  8155  00505E  EC99  F01F         	call	_Update_Setup_Heater_Screen	;wreg free
  8156  005062  0012               	return		;funcret
  8157  005064                     __end_of_Decrease_Heater_Temp:
  8158                           	opt stack 0
  8159                           tblptru	equ	0xFF8
  8160                           tblptrh	equ	0xFF7
  8161                           tblptrl	equ	0xFF6
  8162                           tablat	equ	0xFF5
  8163                           postinc0	equ	0xFEE
  8164                           wreg	equ	0xFE8
  8165                           postdec1	equ	0xFE5
  8166                           fsr1l	equ	0xFE1
  8167                           indf2	equ	0xFDF
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function _Update_Setup_Heater_Screen *****************
  8173 ;; Defined at:
  8174 ;;		line 107 in file "Setup_Heater_Temp.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;  dc_char3        1   75[COMRAM] unsigned char 
  8179 ;;  dc_char2        1   74[COMRAM] unsigned char 
  8180 ;;  dc_char1        1   73[COMRAM] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;		None               void
  8183 ;; Registers used:
  8184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8191 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;Total ram usage:        3 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:   10
  8197 ;; This function calls:
  8198 ;;		___awdiv
  8199 ;;		___awmod
  8200 ;;		_drawtext
  8201 ;; This function is called by:
  8202 ;;		_Do_Setup_Heater_Temp
  8203 ;;		_Increase_Heater_Temp
  8204 ;;		_Decrease_Heater_Temp
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           	psect	text34
  8209  003F32                     __ptext34:
  8210                           	opt stack 0
  8211  003F32                     _Update_Setup_Heater_Screen:
  8212                           	opt stack 19
  8213                           
  8214                           ;Setup_Heater_Temp.c: 109: char dc_char1 = setup_heater_set_temp/100;
  8215                           
  8216                           ;incstack = 0
  8217  003F32  C0AE  F017         	movff	_setup_heater_set_temp,___awdiv@dividend
  8218  003F36  6A18               	clrf	___awdiv@dividend+1,c
  8219  003F38  0E00               	movlw	0
  8220  003F3A  6E1A               	movwf	___awdiv@divisor+1,c
  8221  003F3C  0E64               	movlw	100
  8222  003F3E  6E19               	movwf	___awdiv@divisor,c
  8223  003F40  ECE4  F01F         	call	___awdiv	;wreg free
  8224  003F44  5017               	movf	?___awdiv,w,c
  8225  003F46  6E4A               	movwf	Update_Setup_Heater_Screen@dc_char1,c
  8226                           
  8227                           ;Setup_Heater_Temp.c: 110: char dc_char2 = setup_heater_set_temp/10 % 10;
  8228  003F48  0E00               	movlw	0
  8229  003F4A  6E1A               	movwf	___awdiv@divisor+1,c
  8230  003F4C  0E0A               	movlw	10
  8231  003F4E  6E19               	movwf	___awdiv@divisor,c
  8232  003F50  C0AE  F017         	movff	_setup_heater_set_temp,___awdiv@dividend
  8233  003F54  6A18               	clrf	___awdiv@dividend+1,c
  8234  003F56  ECE4  F01F         	call	___awdiv	;wreg free
  8235  003F5A  C017  F03D         	movff	?___awdiv,___awmod@dividend
  8236  003F5E  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
  8237  003F62  0E00               	movlw	0
  8238  003F64  6E40               	movwf	___awmod@divisor+1,c
  8239  003F66  0E0A               	movlw	10
  8240  003F68  6E3F               	movwf	___awmod@divisor,c
  8241  003F6A  ECDB  F021         	call	___awmod	;wreg free
  8242  003F6E  503D               	movf	?___awmod,w,c
  8243  003F70  6E4B               	movwf	Update_Setup_Heater_Screen@dc_char2,c
  8244                           
  8245                           ;Setup_Heater_Temp.c: 111: char dc_char3 = setup_heater_set_temp%10 ;
  8246  003F72  C0AE  F03D         	movff	_setup_heater_set_temp,___awmod@dividend
  8247  003F76  6A3E               	clrf	___awmod@dividend+1,c
  8248  003F78  0E00               	movlw	0
  8249  003F7A  6E40               	movwf	___awmod@divisor+1,c
  8250  003F7C  0E0A               	movlw	10
  8251  003F7E  6E3F               	movwf	___awmod@divisor,c
  8252  003F80  ECDB  F021         	call	___awmod	;wreg free
  8253  003F84  503D               	movf	?___awmod,w,c
  8254  003F86  6E4C               	movwf	Update_Setup_Heater_Screen@dc_char3,c
  8255                           
  8256                           ;Setup_Heater_Temp.c: 112: setup_heater_set_text[0] = dc_char1 + '0';
  8257  003F88  504A               	movf	Update_Setup_Heater_Screen@dc_char1,w,c
  8258  003F8A  0F30               	addlw	48
  8259  003F8C  0100               	movlb	0	; () banked
  8260  003F8E  6FC1               	movwf	_setup_heater_set_text& (0+255),b
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;Setup_Heater_Temp.c: 113: setup_heater_set_text[1] = dc_char2 + '0';
  8264  003F90  504B               	movf	Update_Setup_Heater_Screen@dc_char2,w,c
  8265  003F92  0F30               	addlw	48
  8266  003F94  0100               	movlb	0	; () banked
  8267  003F96  6FC2               	movwf	(_setup_heater_set_text+1)& (0+255),b
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;Setup_Heater_Temp.c: 114: setup_heater_set_text[2] = dc_char3 + '0';
  8271  003F98  504C               	movf	Update_Setup_Heater_Screen@dc_char3,w,c
  8272  003F9A  0F30               	addlw	48
  8273  003F9C  0100               	movlb	0	; () banked
  8274  003F9E  6FC3               	movwf	(_setup_heater_set_text+2)& (0+255),b
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;Setup_Heater_Temp.c: 115: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  8278  003FA0  0E4A               	movlw	74
  8279  003FA2  6E39               	movwf	drawtext@y,c
  8280  003FA4  0EC1               	movlw	low _setup_heater_set_text
  8281  003FA6  6E3A               	movwf	drawtext@_text,c
  8282  003FA8  0E00               	movlw	high _setup_heater_set_text
  8283  003FAA  6E3B               	movwf	drawtext@_text+1,c
  8284  003FAC  0EF8               	movlw	248
  8285  003FAE  6E3D               	movwf	drawtext@color+1,c
  8286  003FB0  0E00               	movlw	0
  8287  003FB2  6E3C               	movwf	drawtext@color,c
  8288  003FB4  0E00               	movlw	0
  8289  003FB6  6E3F               	movwf	drawtext@bg+1,c
  8290  003FB8  0E00               	movlw	0
  8291  003FBA  6E3E               	movwf	drawtext@bg,c
  8292  003FBC  0E02               	movlw	2
  8293  003FBE  6E40               	movwf	drawtext@size,c
  8294  003FC0  0E28               	movlw	40
  8295  003FC2  EC11  F01B         	call	_drawtext
  8296  003FC6  0012               	return		;funcret
  8297  003FC8                     __end_of_Update_Setup_Heater_Screen:
  8298                           	opt stack 0
  8299                           tblptru	equ	0xFF8
  8300                           tblptrh	equ	0xFF7
  8301                           tblptrl	equ	0xFF6
  8302                           tablat	equ	0xFF5
  8303                           postinc0	equ	0xFEE
  8304                           wreg	equ	0xFE8
  8305                           postdec1	equ	0xFE5
  8306                           fsr1l	equ	0xFE1
  8307                           indf2	equ	0xFDF
  8308                           fsr2h	equ	0xFDA
  8309                           fsr2l	equ	0xFD9
  8310                           status	equ	0xFD8
  8311                           
  8312 ;; *************** function _Do_Setup_Alarm_Time *****************
  8313 ;; Defined at:
  8314 ;;		line 24 in file "Setup_Alarm_Time.c"
  8315 ;; Parameters:    Size  Location     Type
  8316 ;;		None
  8317 ;; Auto vars:     Size  Location     Type
  8318 ;;		None
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  2  379[None  ] int 
  8321 ;; Registers used:
  8322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : 0/0
  8325 ;;		On exit  : 0/0
  8326 ;;		Unchanged: 0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;Total ram usage:        0 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:   12
  8335 ;; This function calls:
  8336 ;;		_DS3231_Read_Alarm_Time
  8337 ;;		_Decrease_Alarm_Time
  8338 ;;		_Do_Beep_Bad
  8339 ;;		_Do_Beep_Good
  8340 ;;		_Do_Save_New_Alarm_Time
  8341 ;;		_Exit_Setup_Alarm_Time
  8342 ;;		_Go_Next_Alarm_Field
  8343 ;;		_Go_Prev_Alarm_Field
  8344 ;;		_Increase_Alarm_Time
  8345 ;;		_Initialize_Setup_Alarm_Time_Screen
  8346 ;;		_Update_Setup_Alarm_Time_Screen
  8347 ;;		_bcd_2_dec
  8348 ;;		_check_for_button_input
  8349 ;; This function is called by:
  8350 ;;		_main
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text35
  8355  003B20                     __ptext35:
  8356                           	opt stack 0
  8357  003B20                     _Do_Setup_Alarm_Time:
  8358                           	opt stack 18
  8359                           
  8360                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8361                           
  8362                           ;incstack = 0
  8363  003B20  0E00               	movlw	0
  8364  003B22  0100               	movlb	0	; () banked
  8365  003B24  6FA2               	movwf	_Select_Alarm_Field& (0+255),b
  8366                           
  8367                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8368  003B26  0E01               	movlw	1
  8369  003B28  0100               	movlb	0	; () banked
  8370  003B2A  6F9D               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8374  003B2C  EC2C  F025         	call	_DS3231_Read_Alarm_Time	;wreg free
  8375                           
  8376                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8377  003B30  5066               	movf	_alarm_second,w,c
  8378  003B32  ECD6  F026         	call	_bcd_2_dec
  8379  003B36  6E66               	movwf	_alarm_second,c
  8380                           
  8381                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8382  003B38  5065               	movf	_alarm_minute,w,c
  8383  003B3A  ECD6  F026         	call	_bcd_2_dec
  8384  003B3E  6E65               	movwf	_alarm_minute,c
  8385                           
  8386                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8387  003B40  5064               	movf	_alarm_hour,w,c
  8388  003B42  ECD6  F026         	call	_bcd_2_dec
  8389  003B46  6E64               	movwf	_alarm_hour,c
  8390                           
  8391                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8392  003B48  C066  F0AC         	movff	_alarm_second,_setup_alarm_second
  8393                           
  8394                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8395  003B4C  C065  F0AB         	movff	_alarm_minute,_setup_alarm_minute
  8396                           
  8397                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8398  003B50  C064  F06E         	movff	_alarm_hour,_setup_alarm_hour
  8399                           
  8400                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8401  003B54  ECAA  F017         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8402                           
  8403                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8404  003B58  EC8B  F015         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8405                           
  8406                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8407  003B5C  D03C               	goto	l10756
  8408  003B5E                     l10720:
  8409                           
  8410                           ;Setup_Alarm_Time.c: 38: {
  8411                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8412  003B5E  ECC4  F020         	call	_check_for_button_input	;wreg free
  8413  003B62  06E8               	decf	wreg,f,c
  8414  003B64  A4D8               	btfss	status,2,c
  8415  003B66  D037               	goto	l10756
  8416                           
  8417                           ;Setup_Alarm_Time.c: 40: {
  8418                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8419  003B68  0E02               	movlw	2
  8420  003B6A  6469               	cpfsgt	_found,c
  8421  003B6C  D031               	goto	l10754
  8422  003B6E  0E09               	movlw	9
  8423  003B70  6069               	cpfslt	_found,c
  8424  003B72  D02E               	goto	l10754
  8425                           
  8426                           ;Setup_Alarm_Time.c: 42: {
  8427                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8428  003B74  EC4B  F028         	call	_Do_Beep_Good	;wreg free
  8429                           
  8430                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8431  003B78  0E03               	movlw	3
  8432  003B7A  1869               	xorwf	_found,w,c
  8433  003B7C  A4D8               	btfss	status,2,c
  8434  003B7E  D003               	goto	l10732
  8435  003B80  ECAE  F027         	call	_Go_Prev_Alarm_Field	;wreg free
  8436  003B84  D000               	goto	l10732
  8437  003B86                     l10732:
  8438                           
  8439                           ;Setup_Alarm_Time.c: 46: if (found == 4) Go_Next_Alarm_Field();
  8440  003B86  0E04               	movlw	4
  8441  003B88  1869               	xorwf	_found,w,c
  8442  003B8A  A4D8               	btfss	status,2,c
  8443  003B8C  D003               	goto	l10736
  8444  003B8E  ECBE  F027         	call	_Go_Next_Alarm_Field	;wreg free
  8445  003B92  D000               	goto	l10736
  8446  003B94                     l10736:
  8447                           
  8448                           ;Setup_Alarm_Time.c: 47: if (found == 5) Do_Save_New_Alarm_Time();
  8449  003B94  0E05               	movlw	5
  8450  003B96  1869               	xorwf	_found,w,c
  8451  003B98  A4D8               	btfss	status,2,c
  8452  003B9A  D003               	goto	l10740
  8453  003B9C  EC3F  F028         	call	_Do_Save_New_Alarm_Time	;wreg free
  8454  003BA0  D000               	goto	l10740
  8455  003BA2                     l10740:
  8456                           
  8457                           ;Setup_Alarm_Time.c: 48: if (found == 6) Decrease_Alarm_Time();
  8458  003BA2  0E06               	movlw	6
  8459  003BA4  1869               	xorwf	_found,w,c
  8460  003BA6  A4D8               	btfss	status,2,c
  8461  003BA8  D003               	goto	l10744
  8462  003BAA  EC2C  F024         	call	_Decrease_Alarm_Time	;wreg free
  8463  003BAE  D000               	goto	l10744
  8464  003BB0                     l10744:
  8465                           
  8466                           ;Setup_Alarm_Time.c: 49: if (found == 7) Increase_Alarm_Time();
  8467  003BB0  0E07               	movlw	7
  8468  003BB2  1869               	xorwf	_found,w,c
  8469  003BB4  A4D8               	btfss	status,2,c
  8470  003BB6  D003               	goto	l10748
  8471  003BB8  ECFE  F023         	call	_Increase_Alarm_Time	;wreg free
  8472  003BBC  D000               	goto	l10748
  8473  003BBE                     l10748:
  8474                           
  8475                           ;Setup_Alarm_Time.c: 50: if (found == 8) Exit_Setup_Alarm_Time();
  8476  003BBE  0E08               	movlw	8
  8477  003BC0  1869               	xorwf	_found,w,c
  8478  003BC2  A4D8               	btfss	status,2,c
  8479  003BC4  D003               	goto	l10752
  8480  003BC6  ECFB  F028         	call	_Exit_Setup_Alarm_Time	;wreg free
  8481  003BCA  D000               	goto	l10752
  8482  003BCC                     l10752:
  8483                           
  8484                           ;Setup_Alarm_Time.c: 51: found = 0xff;
  8485  003BCC  6869               	setf	_found,c
  8486                           
  8487                           ;Setup_Alarm_Time.c: 52: }
  8488  003BCE  D003               	goto	l10756
  8489  003BD0                     l10754:
  8490                           
  8491                           ;Setup_Alarm_Time.c: 53: else
  8492                           ;Setup_Alarm_Time.c: 54: {
  8493                           ;Setup_Alarm_Time.c: 55: Do_Beep_Bad();
  8494  003BD0  EC57  F028         	call	_Do_Beep_Bad	;wreg free
  8495  003BD4  D000               	goto	l10756
  8496  003BD6                     l10756:
  8497  003BD6  0100               	movlb	0	; () banked
  8498  003BD8  059D               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  8499  003BDA  B4D8               	btfsc	status,2,c
  8500  003BDC  D7C0               	goto	l10720
  8501                           
  8502                           ; BSR set to: 0
  8503                           
  8504                           ; BSR set to: 0
  8505  003BDE  0012               	return		;funcret
  8506  003BE0                     __end_of_Do_Setup_Alarm_Time:
  8507                           	opt stack 0
  8508                           tblptru	equ	0xFF8
  8509                           tblptrh	equ	0xFF7
  8510                           tblptrl	equ	0xFF6
  8511                           tablat	equ	0xFF5
  8512                           postinc0	equ	0xFEE
  8513                           wreg	equ	0xFE8
  8514                           postdec1	equ	0xFE5
  8515                           fsr1l	equ	0xFE1
  8516                           indf2	equ	0xFDF
  8517                           fsr2h	equ	0xFDA
  8518                           fsr2l	equ	0xFD9
  8519                           status	equ	0xFD8
  8520                           
  8521 ;; *************** function _check_for_button_input *****************
  8522 ;; Defined at:
  8523 ;;		line 15 in file "utils.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;		None
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  j               2   20[BANK0 ] int 
  8528 ;; Return value:  Size  Location     Type
  8529 ;;                  1    wreg      unsigned char 
  8530 ;; Registers used:
  8531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8540 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;Total ram usage:        3 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    7
  8544 ;; This function calls:
  8545 ;;		_printf
  8546 ;; This function is called by:
  8547 ;;		_main
  8548 ;;		_Do_Setup_Alarm_Time
  8549 ;;		_Do_Setup_Heater_Temp
  8550 ;;		_Do_Setup_Time
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           	psect	text36
  8555  004188                     __ptext36:
  8556                           	opt stack 0
  8557  004188                     _check_for_button_input:
  8558                           	opt stack 23
  8559                           
  8560                           ;utils.c: 17: if (nec_ok == 1)
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;incstack = 0
  8564  004188  0100               	movlb	0	; () banked
  8565  00418A  0595               	decf	_nec_ok& (0+255),w,b
  8566  00418C  0100               	movlb	0	; () banked
  8567  00418E  1196               	iorwf	(_nec_ok+1)& (0+255),w,b
  8568  004190  A4D8               	btfss	status,2,c
  8569  004192  D043               	goto	l1309
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;utils.c: 18: {
  8573                           ;utils.c: 19: nec_ok = 0;
  8574  004194  0E00               	movlw	0
  8575  004196  0100               	movlb	0	; () banked
  8576  004198  6F96               	movwf	(_nec_ok+1)& (0+255),b
  8577  00419A  0E00               	movlw	0
  8578  00419C  6F95               	movwf	_nec_ok& (0+255),b
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;utils.c: 22: INTCONbits.INT0IE = 1;
  8582  00419E  88F2               	bsf	intcon,4,c	;volatile
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;utils.c: 23: INTCON2bits.INTEDG0 = 0;
  8586  0041A0  9CF1               	bcf	intcon2,6,c	;volatile
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;utils.c: 25: found = 0xff;
  8590  0041A2  6869               	setf	_found,c
  8591                           
  8592                           ;utils.c: 26: for (int j=0; j< 21; j++)
  8593  0041A4  0E00               	movlw	0
  8594  0041A6  0100               	movlb	0	; () banked
  8595  0041A8  6FF1               	movwf	(check_for_button_input@j+1)& (0+255),b
  8596  0041AA  0E00               	movlw	0
  8597  0041AC  6FF0               	movwf	check_for_button_input@j& (0+255),b
  8598  0041AE                     l10084:
  8599                           
  8600                           ; BSR set to: 0
  8601  0041AE  0100               	movlb	0	; () banked
  8602  0041B0  BFF1               	btfsc	(check_for_button_input@j+1)& (0+255),7,b
  8603  0041B2  D00A               	goto	l10088
  8604  0041B4  0100               	movlb	0	; () banked
  8605  0041B6  51F1               	movf	(check_for_button_input@j+1)& (0+255),w,b
  8606  0041B8  E121               	bnz	l10098
  8607  0041BA  0E15               	movlw	21
  8608  0041BC  0100               	movlb	0	; () banked
  8609  0041BE  5DF0               	subwf	check_for_button_input@j& (0+255),w,b
  8610  0041C0  B0D8               	btfsc	status,0,c
  8611  0041C2  D01C               	goto	l10098
  8612  0041C4  D001               	goto	l10088
  8613                           
  8614                           ; BSR set to: 0
  8615  0041C6  D01A               	goto	l10098
  8616  0041C8                     l10088:
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;utils.c: 27: {
  8620                           ;utils.c: 28: if (Nec_code1 == array1[j])
  8621  0041C8  0E1F               	movlw	low _array1
  8622  0041CA  0100               	movlb	0	; () banked
  8623  0041CC  25F0               	addwf	check_for_button_input@j& (0+255),w,b
  8624  0041CE  6ED9               	movwf	fsr2l,c
  8625  0041D0  0E01               	movlw	high _array1
  8626  0041D2  0100               	movlb	0	; () banked
  8627  0041D4  21F1               	addwfc	(check_for_button_input@j+1)& (0+255),w,b
  8628  0041D6  6EDA               	movwf	fsr2h,c
  8629  0041D8  0100               	movlb	0	; () banked
  8630  0041DA  51A0               	movf	_Nec_code1& (0+255),w,b
  8631  0041DC  18DE               	xorwf	postinc2,w,c
  8632  0041DE  A4D8               	btfss	status,2,c
  8633  0041E0  D008               	goto	l10094
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;utils.c: 29: {
  8637                           ;utils.c: 30: found = j;
  8638  0041E2  C0F0  F069         	movff	check_for_button_input@j,_found
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;utils.c: 31: j = 21;
  8642  0041E6  0E00               	movlw	0
  8643  0041E8  0100               	movlb	0	; () banked
  8644  0041EA  6FF1               	movwf	(check_for_button_input@j+1)& (0+255),b
  8645  0041EC  0E15               	movlw	21
  8646  0041EE  6FF0               	movwf	check_for_button_input@j& (0+255),b
  8647  0041F0  D000               	goto	l10094
  8648  0041F2                     l10094:
  8649                           
  8650                           ; BSR set to: 0
  8651  0041F2  0100               	movlb	0	; () banked
  8652  0041F4  4BF0               	infsnz	check_for_button_input@j& (0+255),f,b
  8653  0041F6  2BF1               	incf	(check_for_button_input@j+1)& (0+255),f,b
  8654  0041F8  D7DA               	goto	l10084
  8655                           
  8656                           ; BSR set to: 0
  8657  0041FA  D000               	goto	l10098
  8658  0041FC                     l10098:
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;utils.c: 32: }
  8662                           ;utils.c: 33: }
  8663                           ;utils.c: 35: if (found == 0xff)
  8664  0041FC  2869               	incf	_found,w,c
  8665  0041FE  A4D8               	btfss	status,2,c
  8666  004200  D00A               	goto	l10108
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;utils.c: 36: {
  8670                           ;utils.c: 37: printf ("Cannot find button \r\n");
  8671  004202  0EB2               	movlw	low STR_39
  8672  004204  0100               	movlb	0	; () banked
  8673  004206  6FDC               	movwf	printf@f& (0+255),b
  8674  004208  0EFE               	movlw	high STR_39
  8675  00420A  0100               	movlb	0	; () banked
  8676  00420C  6FDD               	movwf	(printf@f+1)& (0+255),b
  8677  00420E  EC0E  F000         	call	_printf	;wreg free
  8678                           
  8679                           ;utils.c: 38: return (0);
  8680  004212  0E00               	movlw	0
  8681                           
  8682                           ;utils.c: 39: }
  8683  004214  D002               	goto	l1309
  8684  004216                     l10108:
  8685                           
  8686                           ;utils.c: 40: else
  8687                           ;utils.c: 41: {
  8688                           ;utils.c: 42: return (1);
  8689  004216  0E01               	movlw	1
  8690  004218  D000               	goto	l1309
  8691  00421A                     l1309:
  8692  00421A  0012               	return		;funcret
  8693  00421C                     __end_of_check_for_button_input:
  8694                           	opt stack 0
  8695                           tblptru	equ	0xFF8
  8696                           tblptrh	equ	0xFF7
  8697                           tblptrl	equ	0xFF6
  8698                           tablat	equ	0xFF5
  8699                           intcon	equ	0xFF2
  8700                           intcon2	equ	0xFF1
  8701                           postinc0	equ	0xFEE
  8702                           wreg	equ	0xFE8
  8703                           postdec1	equ	0xFE5
  8704                           fsr1l	equ	0xFE1
  8705                           indf2	equ	0xFDF
  8706                           postinc2	equ	0xFDE
  8707                           fsr2h	equ	0xFDA
  8708                           fsr2l	equ	0xFD9
  8709                           status	equ	0xFD8
  8710                           
  8711 ;; *************** function _bcd_2_dec *****************
  8712 ;; Defined at:
  8713 ;;		line 47 in file "utils.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;  bcd             1    wreg     unsigned char 
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;  bcd             1   20[COMRAM] unsigned char 
  8718 ;;  dec             2   18[COMRAM] int 
  8719 ;; Return value:  Size  Location     Type
  8720 ;;                  1    wreg      unsigned char 
  8721 ;; Registers used:
  8722 ;;		wreg, status,2, status,0, prodl, prodh
  8723 ;; Tracked objects:
  8724 ;;		On entry : 0/0
  8725 ;;		On exit  : 0/0
  8726 ;;		Unchanged: 0/0
  8727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;Total ram usage:        5 bytes
  8733 ;; Hardware stack levels used:    1
  8734 ;; Hardware stack levels required when called:    3
  8735 ;; This function calls:
  8736 ;;		Nothing
  8737 ;; This function is called by:
  8738 ;;		_Do_Setup_Alarm_Time
  8739 ;;		_Do_Setup_Time
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text37
  8744  004DAC                     __ptext37:
  8745                           	opt stack 0
  8746  004DAC                     _bcd_2_dec:
  8747                           	opt stack 26
  8748                           
  8749                           ;incstack = 0
  8750                           ;bcd_2_dec@bcd stored from wreg
  8751  004DAC  6E15               	movwf	bcd_2_dec@bcd,c
  8752                           
  8753                           ;utils.c: 49: int dec;
  8754                           ;utils.c: 50: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8755  004DAE  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8756  004DB2  0E0F               	movlw	15
  8757  004DB4  1611               	andwf	??_bcd_2_dec,f,c
  8758  004DB6  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8759  004DBA  3A12               	swapf	??_bcd_2_dec+1,f,c
  8760  004DBC  0E0F               	movlw	15
  8761  004DBE  1612               	andwf	??_bcd_2_dec+1,f,c
  8762  004DC0  5012               	movf	??_bcd_2_dec+1,w,c
  8763  004DC2  0D0A               	mullw	10
  8764  004DC4  5011               	movf	??_bcd_2_dec,w,c
  8765  004DC6  24F3               	addwf	prodl,w,c
  8766  004DC8  6E13               	movwf	bcd_2_dec@dec,c
  8767  004DCA  0E00               	movlw	0
  8768  004DCC  20F4               	addwfc	prodh,w,c
  8769  004DCE  6E14               	movwf	bcd_2_dec@dec+1,c
  8770                           
  8771                           ;utils.c: 51: return dec;
  8772  004DD0  5013               	movf	bcd_2_dec@dec,w,c
  8773  004DD2  D000               	goto	l1313
  8774  004DD4                     l1313:
  8775  004DD4  0012               	return		;funcret
  8776  004DD6                     __end_of_bcd_2_dec:
  8777                           	opt stack 0
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           intcon	equ	0xFF2
  8785                           intcon2	equ	0xFF1
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           postdec1	equ	0xFE5
  8789                           fsr1l	equ	0xFE1
  8790                           indf2	equ	0xFDF
  8791                           postinc2	equ	0xFDE
  8792                           fsr2h	equ	0xFDA
  8793                           fsr2l	equ	0xFD9
  8794                           status	equ	0xFD8
  8795                           
  8796 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8797 ;; Defined at:
  8798 ;;		line 149 in file "Setup_Alarm_Time.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;		None
  8803 ;; Return value:  Size  Location     Type
  8804 ;;		None               void
  8805 ;; Registers used:
  8806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;Total ram usage:        0 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:   10
  8819 ;; This function calls:
  8820 ;;		_drawtext
  8821 ;;		_fillRect
  8822 ;;		_fillScreen
  8823 ;;		_strcpy
  8824 ;; This function is called by:
  8825 ;;		_Do_Setup_Alarm_Time
  8826 ;; This function uses a non-reentrant model
  8827 ;;
  8828                           
  8829                           	psect	text38
  8830  002F54                     __ptext38:
  8831                           	opt stack 0
  8832  002F54                     _Initialize_Setup_Alarm_Time_Screen:
  8833                           	opt stack 19
  8834                           
  8835                           ;Setup_Alarm_Time.c: 151: fillScreen(0x0000);
  8836                           
  8837                           ;incstack = 0
  8838  002F54  0E00               	movlw	0
  8839  002F56  6E25               	movwf	fillScreen@color+1,c
  8840  002F58  0E00               	movlw	0
  8841  002F5A  6E24               	movwf	fillScreen@color,c
  8842  002F5C  ECFC  F027         	call	_fillScreen	;wreg free
  8843                           
  8844                           ;Setup_Alarm_Time.c: 153: strcpy(txt, "ECE3301L Sp'22 S1");
  8845  002F60  C062  F011         	movff	_txt,strcpy@to
  8846  002F64  C063  F012         	movff	_txt+1,strcpy@to+1
  8847  002F68  0E2C               	movlw	low STR_26
  8848  002F6A  6E13               	movwf	strcpy@from,c
  8849  002F6C  0EFF               	movlw	high STR_26
  8850  002F6E  6E14               	movwf	strcpy@from+1,c
  8851  002F70  EC8F  F026         	call	_strcpy	;wreg free
  8852                           
  8853                           ;Setup_Alarm_Time.c: 154: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8854  002F74  0E01               	movlw	1
  8855  002F76  6E39               	movwf	drawtext@y,c
  8856  002F78  C062  F03A         	movff	_txt,drawtext@_text
  8857  002F7C  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8858  002F80  0EFF               	movlw	255
  8859  002F82  6E3D               	movwf	drawtext@color+1,c
  8860  002F84  683C               	setf	drawtext@color,c
  8861  002F86  0E00               	movlw	0
  8862  002F88  6E3F               	movwf	drawtext@bg+1,c
  8863  002F8A  0E00               	movlw	0
  8864  002F8C  6E3E               	movwf	drawtext@bg,c
  8865  002F8E  0E01               	movlw	1
  8866  002F90  6E40               	movwf	drawtext@size,c
  8867  002F92  0E01               	movlw	1
  8868  002F94  EC11  F01B         	call	_drawtext
  8869                           
  8870                           ;Setup_Alarm_Time.c: 157: strcpy(txt, "  Alarm");
  8871  002F98  C062  F011         	movff	_txt,strcpy@to
  8872  002F9C  C063  F012         	movff	_txt+1,strcpy@to+1
  8873  002FA0  0EC8               	movlw	low STR_27
  8874  002FA2  6E13               	movwf	strcpy@from,c
  8875  002FA4  0EFF               	movlw	high STR_27
  8876  002FA6  6E14               	movwf	strcpy@from+1,c
  8877  002FA8  EC8F  F026         	call	_strcpy	;wreg free
  8878                           
  8879                           ;Setup_Alarm_Time.c: 158: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  8880  002FAC  0E0B               	movlw	11
  8881  002FAE  6E39               	movwf	drawtext@y,c
  8882  002FB0  C062  F03A         	movff	_txt,drawtext@_text
  8883  002FB4  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8884  002FB8  0EF8               	movlw	248
  8885  002FBA  6E3D               	movwf	drawtext@color+1,c
  8886  002FBC  0E1F               	movlw	31
  8887  002FBE  6E3C               	movwf	drawtext@color,c
  8888  002FC0  0E00               	movlw	0
  8889  002FC2  6E3F               	movwf	drawtext@bg+1,c
  8890  002FC4  0E00               	movlw	0
  8891  002FC6  6E3E               	movwf	drawtext@bg,c
  8892  002FC8  0E02               	movlw	2
  8893  002FCA  6E40               	movwf	drawtext@size,c
  8894  002FCC  0E06               	movlw	6
  8895  002FCE  EC11  F01B         	call	_drawtext
  8896                           
  8897                           ;Setup_Alarm_Time.c: 159: strcpy(txt, "  Setup");
  8898  002FD2  C062  F011         	movff	_txt,strcpy@to
  8899  002FD6  C063  F012         	movff	_txt+1,strcpy@to+1
  8900  002FDA  0ED0               	movlw	low STR_28
  8901  002FDC  6E13               	movwf	strcpy@from,c
  8902  002FDE  0EFF               	movlw	high STR_28
  8903  002FE0  6E14               	movwf	strcpy@from+1,c
  8904  002FE2  EC8F  F026         	call	_strcpy	;wreg free
  8905                           
  8906                           ;Setup_Alarm_Time.c: 160: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  8907  002FE6  0E1A               	movlw	26
  8908  002FE8  6E39               	movwf	drawtext@y,c
  8909  002FEA  C062  F03A         	movff	_txt,drawtext@_text
  8910  002FEE  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8911  002FF2  0EF8               	movlw	248
  8912  002FF4  6E3D               	movwf	drawtext@color+1,c
  8913  002FF6  0E1F               	movlw	31
  8914  002FF8  6E3C               	movwf	drawtext@color,c
  8915  002FFA  0E00               	movlw	0
  8916  002FFC  6E3F               	movwf	drawtext@bg+1,c
  8917  002FFE  0E00               	movlw	0
  8918  003000  6E3E               	movwf	drawtext@bg,c
  8919  003002  0E02               	movlw	2
  8920  003004  6E40               	movwf	drawtext@size,c
  8921  003006  0E06               	movlw	6
  8922  003008  EC11  F01B         	call	_drawtext
  8923                           
  8924                           ;Setup_Alarm_Time.c: 162: strcpy(txt, "Time");
  8925  00300C  C062  F011         	movff	_txt,strcpy@to
  8926  003010  C063  F012         	movff	_txt+1,strcpy@to+1
  8927  003014  0EB0               	movlw	low (STR_14+6)
  8928  003016  6E13               	movwf	strcpy@from,c
  8929  003018  0EFF               	movlw	high (STR_14+6)
  8930  00301A  6E14               	movwf	strcpy@from+1,c
  8931  00301C  EC8F  F026         	call	_strcpy	;wreg free
  8932                           
  8933                           ;Setup_Alarm_Time.c: 163: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8934  003020  0E28               	movlw	40
  8935  003022  6E39               	movwf	drawtext@y,c
  8936  003024  C062  F03A         	movff	_txt,drawtext@_text
  8937  003028  C063  F03B         	movff	_txt+1,drawtext@_text+1
  8938  00302C  0E00               	movlw	0
  8939  00302E  6E3D               	movwf	drawtext@color+1,c
  8940  003030  0E1F               	movlw	31
  8941  003032  6E3C               	movwf	drawtext@color,c
  8942  003034  0E00               	movlw	0
  8943  003036  6E3F               	movwf	drawtext@bg+1,c
  8944  003038  0E00               	movlw	0
  8945  00303A  6E3E               	movwf	drawtext@bg,c
  8946  00303C  0E01               	movlw	1
  8947  00303E  6E40               	movwf	drawtext@size,c
  8948  003040  0E32               	movlw	50
  8949  003042  EC11  F01B         	call	_drawtext
  8950                           
  8951                           ;Setup_Alarm_Time.c: 164: fillRect(15-1, 52+16, 25,2,0x07FF);
  8952  003046  0E44               	movlw	68
  8953  003048  6E23               	movwf	fillRect@y,c
  8954  00304A  0E19               	movlw	25
  8955  00304C  6E24               	movwf	fillRect@w,c
  8956  00304E  0E02               	movlw	2
  8957  003050  6E25               	movwf	fillRect@h,c
  8958  003052  0E07               	movlw	7
  8959  003054  6E27               	movwf	fillRect@color+1,c
  8960  003056  6826               	setf	fillRect@color,c
  8961  003058  0E0E               	movlw	14
  8962  00305A  EC53  F025         	call	_fillRect
  8963  00305E  0012               	return		;funcret
  8964  003060                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  8965                           	opt stack 0
  8966                           tblptru	equ	0xFF8
  8967                           tblptrh	equ	0xFF7
  8968                           tblptrl	equ	0xFF6
  8969                           tablat	equ	0xFF5
  8970                           prodh	equ	0xFF4
  8971                           prodl	equ	0xFF3
  8972                           intcon	equ	0xFF2
  8973                           intcon2	equ	0xFF1
  8974                           postinc0	equ	0xFEE
  8975                           wreg	equ	0xFE8
  8976                           postdec1	equ	0xFE5
  8977                           fsr1l	equ	0xFE1
  8978                           indf2	equ	0xFDF
  8979                           postinc2	equ	0xFDE
  8980                           fsr2h	equ	0xFDA
  8981                           fsr2l	equ	0xFD9
  8982                           status	equ	0xFD8
  8983                           
  8984 ;; *************** function _Increase_Alarm_Time *****************
  8985 ;; Defined at:
  8986 ;;		line 61 in file "Setup_Alarm_Time.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;		None               void
  8993 ;; Registers used:
  8994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;Total ram usage:        0 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:   11
  9007 ;; This function calls:
  9008 ;;		_Update_Setup_Alarm_Time_Screen
  9009 ;; This function is called by:
  9010 ;;		_Do_Setup_Alarm_Time
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           	psect	text39
  9015  0047FC                     __ptext39:
  9016                           	opt stack 0
  9017  0047FC                     _Increase_Alarm_Time:
  9018                           	opt stack 18
  9019                           
  9020                           ;Setup_Alarm_Time.c: 63: switch (Select_Alarm_Field)
  9021                           
  9022                           ;incstack = 0
  9023  0047FC  D01E               	goto	l10204
  9024  0047FE                     l10184:
  9025                           
  9026                           ;Setup_Alarm_Time.c: 66: setup_alarm_hour++;
  9027  0047FE  2A6E               	incf	_setup_alarm_hour,f,c
  9028                           
  9029                           ;Setup_Alarm_Time.c: 67: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  9030  004800  0E18               	movlw	24
  9031  004802  186E               	xorwf	_setup_alarm_hour,w,c
  9032  004804  A4D8               	btfss	status,2,c
  9033  004806  D025               	goto	l10206
  9034  004808  0E00               	movlw	0
  9035  00480A  6E6E               	movwf	_setup_alarm_hour,c
  9036                           
  9037                           ;Setup_Alarm_Time.c: 68: break;
  9038  00480C  D022               	goto	l10206
  9039  00480E                     l10190:
  9040                           
  9041                           ;Setup_Alarm_Time.c: 72: setup_alarm_minute++;
  9042  00480E  0100               	movlb	0	; () banked
  9043  004810  2BAB               	incf	_setup_alarm_minute& (0+255),f,b
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;Setup_Alarm_Time.c: 73: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  9047  004812  0E3C               	movlw	60
  9048  004814  0100               	movlb	0	; () banked
  9049  004816  19AB               	xorwf	_setup_alarm_minute& (0+255),w,b
  9050  004818  A4D8               	btfss	status,2,c
  9051  00481A  D01B               	goto	l10206
  9052                           
  9053                           ; BSR set to: 0
  9054  00481C  0E00               	movlw	0
  9055  00481E  0100               	movlb	0	; () banked
  9056  004820  6FAB               	movwf	_setup_alarm_minute& (0+255),b
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;Setup_Alarm_Time.c: 74: break;
  9060  004822  D017               	goto	l10206
  9061  004824                     l10196:
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;Setup_Alarm_Time.c: 78: setup_alarm_second++;
  9065  004824  0100               	movlb	0	; () banked
  9066  004826  2BAC               	incf	_setup_alarm_second& (0+255),f,b
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;Setup_Alarm_Time.c: 79: if (setup_alarm_second == 60) setup_alarm_second = 0;
  9070  004828  0E3C               	movlw	60
  9071  00482A  0100               	movlb	0	; () banked
  9072  00482C  19AC               	xorwf	_setup_alarm_second& (0+255),w,b
  9073  00482E  A4D8               	btfss	status,2,c
  9074  004830  D010               	goto	l10206
  9075                           
  9076                           ; BSR set to: 0
  9077  004832  0E00               	movlw	0
  9078  004834  0100               	movlb	0	; () banked
  9079  004836  6FAC               	movwf	_setup_alarm_second& (0+255),b
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;Setup_Alarm_Time.c: 84: }
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;Setup_Alarm_Time.c: 83: break;
  9086                           
  9087                           ;Setup_Alarm_Time.c: 82: default:
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;Setup_Alarm_Time.c: 80: break;
  9091  004838  D00C               	goto	l10206
  9092  00483A                     l10204:
  9093  00483A  0100               	movlb	0	; () banked
  9094  00483C  51A2               	movf	_Select_Alarm_Field& (0+255),w,b
  9095                           
  9096                           ; Switch size 1, requested type "space"
  9097                           ; Number of cases is 3, Range of values is 0 to 2
  9098                           ; switch strategies available:
  9099                           ; Name         Instructions Cycles
  9100                           ; simple_byte           10     6 (average)
  9101                           ;	Chosen strategy is simple_byte
  9102  00483E  0A00               	xorlw	0	; case 0
  9103  004840  B4D8               	btfsc	status,2,c
  9104  004842  D7DD               	goto	l10184
  9105  004844  0A01               	xorlw	1	; case 1
  9106  004846  B4D8               	btfsc	status,2,c
  9107  004848  D7E2               	goto	l10190
  9108  00484A  0A03               	xorlw	3	; case 2
  9109  00484C  B4D8               	btfsc	status,2,c
  9110  00484E  D7EA               	goto	l10196
  9111  004850  D000               	goto	l10206
  9112  004852                     l10206:
  9113                           
  9114                           ;Setup_Alarm_Time.c: 85: Update_Setup_Alarm_Time_Screen();
  9115  004852  EC8B  F015         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  9116  004856  0012               	return		;funcret
  9117  004858                     __end_of_Increase_Alarm_Time:
  9118                           	opt stack 0
  9119                           tblptru	equ	0xFF8
  9120                           tblptrh	equ	0xFF7
  9121                           tblptrl	equ	0xFF6
  9122                           tablat	equ	0xFF5
  9123                           prodh	equ	0xFF4
  9124                           prodl	equ	0xFF3
  9125                           intcon	equ	0xFF2
  9126                           intcon2	equ	0xFF1
  9127                           postinc0	equ	0xFEE
  9128                           wreg	equ	0xFE8
  9129                           postdec1	equ	0xFE5
  9130                           fsr1l	equ	0xFE1
  9131                           indf2	equ	0xFDF
  9132                           postinc2	equ	0xFDE
  9133                           fsr2h	equ	0xFDA
  9134                           fsr2l	equ	0xFD9
  9135                           status	equ	0xFD8
  9136                           
  9137 ;; *************** function _Go_Prev_Alarm_Field *****************
  9138 ;; Defined at:
  9139 ;;		line 126 in file "Setup_Alarm_Time.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;		None
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;		None
  9144 ;; Return value:  Size  Location     Type
  9145 ;;		None               void
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;Total ram usage:        0 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    9
  9160 ;; This function calls:
  9161 ;;		_Update_Setup_Screen_Cursor_Backward
  9162 ;; This function is called by:
  9163 ;;		_Do_Setup_Alarm_Time
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text40
  9168  004F5C                     __ptext40:
  9169                           	opt stack 0
  9170  004F5C                     _Go_Prev_Alarm_Field:
  9171                           	opt stack 20
  9172                           
  9173                           ;Setup_Alarm_Time.c: 128: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  9174                           
  9175                           ;incstack = 0
  9176  004F5C  0100               	movlb	0	; () banked
  9177  004F5E  51A2               	movf	_Select_Alarm_Field& (0+255),w,b
  9178  004F60  A4D8               	btfss	status,2,c
  9179  004F62  D004               	goto	l7510
  9180                           
  9181                           ; BSR set to: 0
  9182  004F64  0E02               	movlw	2
  9183  004F66  0100               	movlb	0	; () banked
  9184  004F68  6FA2               	movwf	_Select_Alarm_Field& (0+255),b
  9185  004F6A  D003               	goto	l7512
  9186  004F6C                     l7510:
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;Setup_Alarm_Time.c: 129: else Select_Alarm_Field--;
  9190  004F6C  0100               	movlb	0	; () banked
  9191  004F6E  07A2               	decf	_Select_Alarm_Field& (0+255),f,b
  9192  004F70  D000               	goto	l7512
  9193  004F72                     l7512:
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;Setup_Alarm_Time.c: 130: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  9197  004F72  0100               	movlb	0	; () banked
  9198  004F74  51A2               	movf	_Select_Alarm_Field& (0+255),w,b
  9199  004F76  EC17  F011         	call	_Update_Setup_Screen_Cursor_Backward
  9200  004F7A  0012               	return		;funcret
  9201  004F7C                     __end_of_Go_Prev_Alarm_Field:
  9202                           	opt stack 0
  9203                           tblptru	equ	0xFF8
  9204                           tblptrh	equ	0xFF7
  9205                           tblptrl	equ	0xFF6
  9206                           tablat	equ	0xFF5
  9207                           prodh	equ	0xFF4
  9208                           prodl	equ	0xFF3
  9209                           intcon	equ	0xFF2
  9210                           intcon2	equ	0xFF1
  9211                           postinc0	equ	0xFEE
  9212                           wreg	equ	0xFE8
  9213                           postdec1	equ	0xFE5
  9214                           fsr1l	equ	0xFE1
  9215                           indf2	equ	0xFDF
  9216                           postinc2	equ	0xFDE
  9217                           fsr2h	equ	0xFDA
  9218                           fsr2l	equ	0xFD9
  9219                           status	equ	0xFD8
  9220                           
  9221 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  9222 ;; Defined at:
  9223 ;;		line 271 in file "Setup_Time.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  field           1    wreg     unsigned char 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;  field           1   45[COMRAM] unsigned char 
  9228 ;;  xinc            1   47[COMRAM] unsigned char 
  9229 ;;  yinc            1   46[COMRAM] unsigned char 
  9230 ;; Return value:  Size  Location     Type
  9231 ;;		None               void
  9232 ;; Registers used:
  9233 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;Total ram usage:        3 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    8
  9246 ;; This function calls:
  9247 ;;		_fillRect
  9248 ;; This function is called by:
  9249 ;;		_Go_Prev_Alarm_Field
  9250 ;;		_Go_Prev_Field
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text41
  9255  00222E                     __ptext41:
  9256                           	opt stack 0
  9257  00222E                     _Update_Setup_Screen_Cursor_Backward:
  9258                           	opt stack 20
  9259                           
  9260                           ;incstack = 0
  9261                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  9262  00222E  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  9263                           
  9264                           ;Setup_Time.c: 273: char xinc = 36;
  9265  002230  0E24               	movlw	36
  9266  002232  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  9267                           
  9268                           ;Setup_Time.c: 274: char yinc = 30;
  9269  002234  0E1E               	movlw	30
  9270  002236  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  9271                           
  9272                           ;Setup_Time.c: 275: switch (field)
  9273  002238  D0BF               	goto	l7250
  9274  00223A                     l7228:
  9275                           
  9276                           ;Setup_Time.c: 278: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9277  00223A  0E44               	movlw	68
  9278  00223C  6E23               	movwf	fillRect@y,c
  9279  00223E  0E19               	movlw	25
  9280  002240  6E24               	movwf	fillRect@w,c
  9281  002242  0E02               	movlw	2
  9282  002244  6E25               	movwf	fillRect@h,c
  9283  002246  0E00               	movlw	0
  9284  002248  6E27               	movwf	fillRect@color+1,c
  9285  00224A  0E00               	movlw	0
  9286  00224C  6E26               	movwf	fillRect@color,c
  9287  00224E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9288  002250  0F0E               	addlw	14
  9289  002252  EC53  F025         	call	_fillRect
  9290                           
  9291                           ;Setup_Time.c: 279: fillRect(15-1, 52+16, 25,2,0x07FF);
  9292  002256  0E44               	movlw	68
  9293  002258  6E23               	movwf	fillRect@y,c
  9294  00225A  0E19               	movlw	25
  9295  00225C  6E24               	movwf	fillRect@w,c
  9296  00225E  0E02               	movlw	2
  9297  002260  6E25               	movwf	fillRect@h,c
  9298  002262  0E07               	movlw	7
  9299  002264  6E27               	movwf	fillRect@color+1,c
  9300  002266  6826               	setf	fillRect@color,c
  9301  002268  0E0E               	movlw	14
  9302  00226A  EC53  F025         	call	_fillRect
  9303                           
  9304                           ;Setup_Time.c: 280: break;
  9305  00226E  D0B8               	goto	l1243
  9306  002270                     l7230:
  9307                           
  9308                           ;Setup_Time.c: 283: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9309  002270  0E44               	movlw	68
  9310  002272  6E23               	movwf	fillRect@y,c
  9311  002274  0E19               	movlw	25
  9312  002276  6E24               	movwf	fillRect@w,c
  9313  002278  0E02               	movlw	2
  9314  00227A  6E25               	movwf	fillRect@h,c
  9315  00227C  0E00               	movlw	0
  9316  00227E  6E27               	movwf	fillRect@color+1,c
  9317  002280  0E00               	movlw	0
  9318  002282  6E26               	movwf	fillRect@color,c
  9319  002284  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9320  002286  0D02               	mullw	2
  9321  002288  50F3               	movf	prodl,w,c
  9322  00228A  0F0E               	addlw	14
  9323  00228C  EC53  F025         	call	_fillRect
  9324                           
  9325                           ;Setup_Time.c: 284: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9326  002290  0E44               	movlw	68
  9327  002292  6E23               	movwf	fillRect@y,c
  9328  002294  0E19               	movlw	25
  9329  002296  6E24               	movwf	fillRect@w,c
  9330  002298  0E02               	movlw	2
  9331  00229A  6E25               	movwf	fillRect@h,c
  9332  00229C  0E07               	movlw	7
  9333  00229E  6E27               	movwf	fillRect@color+1,c
  9334  0022A0  6826               	setf	fillRect@color,c
  9335  0022A2  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9336  0022A4  0F0E               	addlw	14
  9337  0022A6  EC53  F025         	call	_fillRect
  9338                           
  9339                           ;Setup_Time.c: 285: break;
  9340  0022AA  D09A               	goto	l1243
  9341  0022AC                     l7234:
  9342                           
  9343                           ;Setup_Time.c: 288: fillRect(15-1, 52+16, 25,2,0x0000);
  9344  0022AC  0E44               	movlw	68
  9345  0022AE  6E23               	movwf	fillRect@y,c
  9346  0022B0  0E19               	movlw	25
  9347  0022B2  6E24               	movwf	fillRect@w,c
  9348  0022B4  0E02               	movlw	2
  9349  0022B6  6E25               	movwf	fillRect@h,c
  9350  0022B8  0E00               	movlw	0
  9351  0022BA  6E27               	movwf	fillRect@color+1,c
  9352  0022BC  0E00               	movlw	0
  9353  0022BE  6E26               	movwf	fillRect@color,c
  9354  0022C0  0E0E               	movlw	14
  9355  0022C2  EC53  F025         	call	_fillRect
  9356                           
  9357                           ;Setup_Time.c: 289: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9358  0022C6  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9359  0022C8  0F44               	addlw	68
  9360  0022CA  6E23               	movwf	fillRect@y,c
  9361  0022CC  0E19               	movlw	25
  9362  0022CE  6E24               	movwf	fillRect@w,c
  9363  0022D0  0E02               	movlw	2
  9364  0022D2  6E25               	movwf	fillRect@h,c
  9365  0022D4  0E00               	movlw	0
  9366  0022D6  6E27               	movwf	fillRect@color+1,c
  9367  0022D8  0E00               	movlw	0
  9368  0022DA  6E26               	movwf	fillRect@color,c
  9369  0022DC  0E0E               	movlw	14
  9370  0022DE  EC53  F025         	call	_fillRect
  9371                           
  9372                           ;Setup_Time.c: 290: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9373  0022E2  0E44               	movlw	68
  9374  0022E4  6E23               	movwf	fillRect@y,c
  9375  0022E6  0E19               	movlw	25
  9376  0022E8  6E24               	movwf	fillRect@w,c
  9377  0022EA  0E02               	movlw	2
  9378  0022EC  6E25               	movwf	fillRect@h,c
  9379  0022EE  0E07               	movlw	7
  9380  0022F0  6E27               	movwf	fillRect@color+1,c
  9381  0022F2  6826               	setf	fillRect@color,c
  9382  0022F4  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9383  0022F6  0D02               	mullw	2
  9384  0022F8  50F3               	movf	prodl,w,c
  9385  0022FA  0F0E               	addlw	14
  9386  0022FC  EC53  F025         	call	_fillRect
  9387                           
  9388                           ;Setup_Time.c: 291: break;
  9389  002300  D06F               	goto	l1243
  9390  002302                     l7238:
  9391                           
  9392                           ;Setup_Time.c: 294: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9393  002302  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9394  002304  0F44               	addlw	68
  9395  002306  6E23               	movwf	fillRect@y,c
  9396  002308  0E19               	movlw	25
  9397  00230A  6E24               	movwf	fillRect@w,c
  9398  00230C  0E02               	movlw	2
  9399  00230E  6E25               	movwf	fillRect@h,c
  9400  002310  0E00               	movlw	0
  9401  002312  6E27               	movwf	fillRect@color+1,c
  9402  002314  0E00               	movlw	0
  9403  002316  6E26               	movwf	fillRect@color,c
  9404  002318  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9405  00231A  0F0E               	addlw	14
  9406  00231C  EC53  F025         	call	_fillRect
  9407                           
  9408                           ;Setup_Time.c: 295: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9409  002320  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9410  002322  0F44               	addlw	68
  9411  002324  6E23               	movwf	fillRect@y,c
  9412  002326  0E19               	movlw	25
  9413  002328  6E24               	movwf	fillRect@w,c
  9414  00232A  0E02               	movlw	2
  9415  00232C  6E25               	movwf	fillRect@h,c
  9416  00232E  0E07               	movlw	7
  9417  002330  6E27               	movwf	fillRect@color+1,c
  9418  002332  6826               	setf	fillRect@color,c
  9419  002334  0E0E               	movlw	14
  9420  002336  EC53  F025         	call	_fillRect
  9421                           
  9422                           ;Setup_Time.c: 296: break;
  9423  00233A  D052               	goto	l1243
  9424  00233C                     l7240:
  9425                           
  9426                           ;Setup_Time.c: 299: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9427  00233C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9428  00233E  0F44               	addlw	68
  9429  002340  6E23               	movwf	fillRect@y,c
  9430  002342  0E19               	movlw	25
  9431  002344  6E24               	movwf	fillRect@w,c
  9432  002346  0E02               	movlw	2
  9433  002348  6E25               	movwf	fillRect@h,c
  9434  00234A  0E00               	movlw	0
  9435  00234C  6E27               	movwf	fillRect@color+1,c
  9436  00234E  0E00               	movlw	0
  9437  002350  6E26               	movwf	fillRect@color,c
  9438  002352  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9439  002354  0D02               	mullw	2
  9440  002356  50F3               	movf	prodl,w,c
  9441  002358  0F0E               	addlw	14
  9442  00235A  EC53  F025         	call	_fillRect
  9443                           
  9444                           ;Setup_Time.c: 300: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9445  00235E  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9446  002360  0F44               	addlw	68
  9447  002362  6E23               	movwf	fillRect@y,c
  9448  002364  0E19               	movlw	25
  9449  002366  6E24               	movwf	fillRect@w,c
  9450  002368  0E02               	movlw	2
  9451  00236A  6E25               	movwf	fillRect@h,c
  9452  00236C  0E07               	movlw	7
  9453  00236E  6E27               	movwf	fillRect@color+1,c
  9454  002370  6826               	setf	fillRect@color,c
  9455  002372  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9456  002374  0F0E               	addlw	14
  9457  002376  EC53  F025         	call	_fillRect
  9458                           
  9459                           ;Setup_Time.c: 301: break;
  9460  00237A  D032               	goto	l1243
  9461  00237C                     l7244:
  9462                           
  9463                           ;Setup_Time.c: 304: fillRect(15-1, 52+16, 25,2,0x0000);
  9464  00237C  0E44               	movlw	68
  9465  00237E  6E23               	movwf	fillRect@y,c
  9466  002380  0E19               	movlw	25
  9467  002382  6E24               	movwf	fillRect@w,c
  9468  002384  0E02               	movlw	2
  9469  002386  6E25               	movwf	fillRect@h,c
  9470  002388  0E00               	movlw	0
  9471  00238A  6E27               	movwf	fillRect@color+1,c
  9472  00238C  0E00               	movlw	0
  9473  00238E  6E26               	movwf	fillRect@color,c
  9474  002390  0E0E               	movlw	14
  9475  002392  EC53  F025         	call	_fillRect
  9476                           
  9477                           ;Setup_Time.c: 305: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9478  002396  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9479  002398  0F44               	addlw	68
  9480  00239A  6E23               	movwf	fillRect@y,c
  9481  00239C  0E19               	movlw	25
  9482  00239E  6E24               	movwf	fillRect@w,c
  9483  0023A0  0E02               	movlw	2
  9484  0023A2  6E25               	movwf	fillRect@h,c
  9485  0023A4  0E07               	movlw	7
  9486  0023A6  6E27               	movwf	fillRect@color+1,c
  9487  0023A8  6826               	setf	fillRect@color,c
  9488  0023AA  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9489  0023AC  0D02               	mullw	2
  9490  0023AE  50F3               	movf	prodl,w,c
  9491  0023B0  0F0E               	addlw	14
  9492  0023B2  EC53  F025         	call	_fillRect
  9493                           
  9494                           ;Setup_Time.c: 307: }
  9495                           
  9496                           ;Setup_Time.c: 306: break;
  9497  0023B6  D014               	goto	l1243
  9498  0023B8                     l7250:
  9499  0023B8  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9500                           
  9501                           ; Switch size 1, requested type "space"
  9502                           ; Number of cases is 6, Range of values is 0 to 5
  9503                           ; switch strategies available:
  9504                           ; Name         Instructions Cycles
  9505                           ; simple_byte           19    10 (average)
  9506                           ;	Chosen strategy is simple_byte
  9507  0023BA  0A00               	xorlw	0	; case 0
  9508  0023BC  B4D8               	btfsc	status,2,c
  9509  0023BE  D73D               	goto	l7228
  9510  0023C0  0A01               	xorlw	1	; case 1
  9511  0023C2  B4D8               	btfsc	status,2,c
  9512  0023C4  D755               	goto	l7230
  9513  0023C6  0A03               	xorlw	3	; case 2
  9514  0023C8  B4D8               	btfsc	status,2,c
  9515  0023CA  D770               	goto	l7234
  9516  0023CC  0A01               	xorlw	1	; case 3
  9517  0023CE  B4D8               	btfsc	status,2,c
  9518  0023D0  D798               	goto	l7238
  9519  0023D2  0A07               	xorlw	7	; case 4
  9520  0023D4  B4D8               	btfsc	status,2,c
  9521  0023D6  D7B2               	goto	l7240
  9522  0023D8  0A01               	xorlw	1	; case 5
  9523  0023DA  B4D8               	btfsc	status,2,c
  9524  0023DC  D7CF               	goto	l7244
  9525  0023DE  D000               	goto	l1243
  9526  0023E0                     l1243:
  9527  0023E0  0012               	return		;funcret
  9528  0023E2                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9529                           	opt stack 0
  9530                           tblptru	equ	0xFF8
  9531                           tblptrh	equ	0xFF7
  9532                           tblptrl	equ	0xFF6
  9533                           tablat	equ	0xFF5
  9534                           prodh	equ	0xFF4
  9535                           prodl	equ	0xFF3
  9536                           intcon	equ	0xFF2
  9537                           intcon2	equ	0xFF1
  9538                           postinc0	equ	0xFEE
  9539                           wreg	equ	0xFE8
  9540                           postdec1	equ	0xFE5
  9541                           fsr1l	equ	0xFE1
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           fsr2h	equ	0xFDA
  9545                           fsr2l	equ	0xFD9
  9546                           status	equ	0xFD8
  9547                           
  9548 ;; *************** function _Go_Next_Alarm_Field *****************
  9549 ;; Defined at:
  9550 ;;		line 117 in file "Setup_Alarm_Time.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;		None
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;		None
  9555 ;; Return value:  Size  Location     Type
  9556 ;;		None               void
  9557 ;; Registers used:
  9558 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;Total ram usage:        0 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    9
  9571 ;; This function calls:
  9572 ;;		_Update_Setup_Screen_Cursor_Forward
  9573 ;; This function is called by:
  9574 ;;		_Do_Setup_Alarm_Time
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           	psect	text42
  9579  004F7C                     __ptext42:
  9580                           	opt stack 0
  9581  004F7C                     _Go_Next_Alarm_Field:
  9582                           	opt stack 20
  9583                           
  9584                           ;Setup_Alarm_Time.c: 120: Select_Alarm_Field++;
  9585                           
  9586                           ;incstack = 0
  9587  004F7C  0100               	movlb	0	; () banked
  9588  004F7E  2BA2               	incf	_Select_Alarm_Field& (0+255),f,b
  9589                           
  9590                           ; BSR set to: 0
  9591                           ;Setup_Alarm_Time.c: 121: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9592  004F80  0E03               	movlw	3
  9593  004F82  0100               	movlb	0	; () banked
  9594  004F84  19A2               	xorwf	_Select_Alarm_Field& (0+255),w,b
  9595  004F86  A4D8               	btfss	status,2,c
  9596  004F88  D004               	goto	l7520
  9597                           
  9598                           ; BSR set to: 0
  9599  004F8A  0E00               	movlw	0
  9600  004F8C  0100               	movlb	0	; () banked
  9601  004F8E  6FA2               	movwf	_Select_Alarm_Field& (0+255),b
  9602  004F90  D000               	goto	l7520
  9603  004F92                     l7520:
  9604                           
  9605                           ; BSR set to: 0
  9606                           ;Setup_Alarm_Time.c: 122: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9607  004F92  0100               	movlb	0	; () banked
  9608  004F94  51A2               	movf	_Select_Alarm_Field& (0+255),w,b
  9609  004F96  EC3A  F010         	call	_Update_Setup_Screen_Cursor_Forward
  9610  004F9A  0012               	return		;funcret
  9611  004F9C                     __end_of_Go_Next_Alarm_Field:
  9612                           	opt stack 0
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           prodh	equ	0xFF4
  9618                           prodl	equ	0xFF3
  9619                           intcon	equ	0xFF2
  9620                           intcon2	equ	0xFF1
  9621                           postinc0	equ	0xFEE
  9622                           wreg	equ	0xFE8
  9623                           postdec1	equ	0xFE5
  9624                           fsr1l	equ	0xFE1
  9625                           indf2	equ	0xFDF
  9626                           postinc2	equ	0xFDE
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9632 ;; Defined at:
  9633 ;;		line 232 in file "Setup_Time.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;  field           1    wreg     unsigned char 
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;  field           1   45[COMRAM] unsigned char 
  9638 ;;  xinc            1   47[COMRAM] unsigned char 
  9639 ;;  yinc            1   46[COMRAM] unsigned char 
  9640 ;; Return value:  Size  Location     Type
  9641 ;;		None               void
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;Total ram usage:        3 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    8
  9656 ;; This function calls:
  9657 ;;		_fillRect
  9658 ;; This function is called by:
  9659 ;;		_Go_Next_Alarm_Field
  9660 ;;		_Go_Next_Field
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           	psect	text43
  9665  002074                     __ptext43:
  9666                           	opt stack 0
  9667  002074                     _Update_Setup_Screen_Cursor_Forward:
  9668                           	opt stack 20
  9669                           
  9670                           ;incstack = 0
  9671                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9672  002074  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9673                           
  9674                           ;Setup_Time.c: 234: char xinc = 36;
  9675  002076  0E24               	movlw	36
  9676  002078  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9677                           
  9678                           ;Setup_Time.c: 235: char yinc = 30;
  9679  00207A  0E1E               	movlw	30
  9680  00207C  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9681                           
  9682                           ;Setup_Time.c: 236: switch (field)
  9683  00207E  D0C2               	goto	l7224
  9684  002080                     l7202:
  9685                           
  9686                           ;Setup_Time.c: 239: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9687  002080  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9688  002082  0F44               	addlw	68
  9689  002084  6E23               	movwf	fillRect@y,c
  9690  002086  0E19               	movlw	25
  9691  002088  6E24               	movwf	fillRect@w,c
  9692  00208A  0E02               	movlw	2
  9693  00208C  6E25               	movwf	fillRect@h,c
  9694  00208E  0E00               	movlw	0
  9695  002090  6E27               	movwf	fillRect@color+1,c
  9696  002092  0E00               	movlw	0
  9697  002094  6E26               	movwf	fillRect@color,c
  9698  002096  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9699  002098  0D02               	mullw	2
  9700  00209A  50F3               	movf	prodl,w,c
  9701  00209C  0F0E               	addlw	14
  9702  00209E  EC53  F025         	call	_fillRect
  9703                           
  9704                           ;Setup_Time.c: 240: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9705  0020A2  0E44               	movlw	68
  9706  0020A4  6E23               	movwf	fillRect@y,c
  9707  0020A6  0E19               	movlw	25
  9708  0020A8  6E24               	movwf	fillRect@w,c
  9709  0020AA  0E02               	movlw	2
  9710  0020AC  6E25               	movwf	fillRect@h,c
  9711  0020AE  0E00               	movlw	0
  9712  0020B0  6E27               	movwf	fillRect@color+1,c
  9713  0020B2  0E00               	movlw	0
  9714  0020B4  6E26               	movwf	fillRect@color,c
  9715  0020B6  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9716  0020B8  0D02               	mullw	2
  9717  0020BA  50F3               	movf	prodl,w,c
  9718  0020BC  0F0E               	addlw	14
  9719  0020BE  EC53  F025         	call	_fillRect
  9720                           
  9721                           ;Setup_Time.c: 241: fillRect(15-1, 52+16, 25,2,0x07FF);
  9722  0020C2  0E44               	movlw	68
  9723  0020C4  6E23               	movwf	fillRect@y,c
  9724  0020C6  0E19               	movlw	25
  9725  0020C8  6E24               	movwf	fillRect@w,c
  9726  0020CA  0E02               	movlw	2
  9727  0020CC  6E25               	movwf	fillRect@h,c
  9728  0020CE  0E07               	movlw	7
  9729  0020D0  6E27               	movwf	fillRect@color+1,c
  9730  0020D2  6826               	setf	fillRect@color,c
  9731  0020D4  0E0E               	movlw	14
  9732  0020D6  EC53  F025         	call	_fillRect
  9733                           
  9734                           ;Setup_Time.c: 242: break;
  9735  0020DA  D0A8               	goto	l1232
  9736  0020DC                     l7206:
  9737                           
  9738                           ;Setup_Time.c: 245: fillRect(15-1, 52+16, 25,2,0x0000);
  9739  0020DC  0E44               	movlw	68
  9740  0020DE  6E23               	movwf	fillRect@y,c
  9741  0020E0  0E19               	movlw	25
  9742  0020E2  6E24               	movwf	fillRect@w,c
  9743  0020E4  0E02               	movlw	2
  9744  0020E6  6E25               	movwf	fillRect@h,c
  9745  0020E8  0E00               	movlw	0
  9746  0020EA  6E27               	movwf	fillRect@color+1,c
  9747  0020EC  0E00               	movlw	0
  9748  0020EE  6E26               	movwf	fillRect@color,c
  9749  0020F0  0E0E               	movlw	14
  9750  0020F2  EC53  F025         	call	_fillRect
  9751                           
  9752                           ;Setup_Time.c: 246: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9753  0020F6  0E44               	movlw	68
  9754  0020F8  6E23               	movwf	fillRect@y,c
  9755  0020FA  0E19               	movlw	25
  9756  0020FC  6E24               	movwf	fillRect@w,c
  9757  0020FE  0E02               	movlw	2
  9758  002100  6E25               	movwf	fillRect@h,c
  9759  002102  0E07               	movlw	7
  9760  002104  6E27               	movwf	fillRect@color+1,c
  9761  002106  6826               	setf	fillRect@color,c
  9762  002108  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9763  00210A  0F0E               	addlw	14
  9764  00210C  EC53  F025         	call	_fillRect
  9765                           
  9766                           ;Setup_Time.c: 247: break;
  9767  002110  D08D               	goto	l1232
  9768  002112                     l7208:
  9769                           
  9770                           ;Setup_Time.c: 250: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9771  002112  0E44               	movlw	68
  9772  002114  6E23               	movwf	fillRect@y,c
  9773  002116  0E19               	movlw	25
  9774  002118  6E24               	movwf	fillRect@w,c
  9775  00211A  0E02               	movlw	2
  9776  00211C  6E25               	movwf	fillRect@h,c
  9777  00211E  0E00               	movlw	0
  9778  002120  6E27               	movwf	fillRect@color+1,c
  9779  002122  0E00               	movlw	0
  9780  002124  6E26               	movwf	fillRect@color,c
  9781  002126  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9782  002128  0F0E               	addlw	14
  9783  00212A  EC53  F025         	call	_fillRect
  9784                           
  9785                           ;Setup_Time.c: 251: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9786  00212E  0E44               	movlw	68
  9787  002130  6E23               	movwf	fillRect@y,c
  9788  002132  0E19               	movlw	25
  9789  002134  6E24               	movwf	fillRect@w,c
  9790  002136  0E02               	movlw	2
  9791  002138  6E25               	movwf	fillRect@h,c
  9792  00213A  0E07               	movlw	7
  9793  00213C  6E27               	movwf	fillRect@color+1,c
  9794  00213E  6826               	setf	fillRect@color,c
  9795  002140  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9796  002142  0D02               	mullw	2
  9797  002144  50F3               	movf	prodl,w,c
  9798  002146  0F0E               	addlw	14
  9799  002148  EC53  F025         	call	_fillRect
  9800                           
  9801                           ;Setup_Time.c: 252: break;
  9802  00214C  D06F               	goto	l1232
  9803  00214E                     l7212:
  9804                           
  9805                           ;Setup_Time.c: 255: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9806  00214E  0E44               	movlw	68
  9807  002150  6E23               	movwf	fillRect@y,c
  9808  002152  0E19               	movlw	25
  9809  002154  6E24               	movwf	fillRect@w,c
  9810  002156  0E02               	movlw	2
  9811  002158  6E25               	movwf	fillRect@h,c
  9812  00215A  0E00               	movlw	0
  9813  00215C  6E27               	movwf	fillRect@color+1,c
  9814  00215E  0E00               	movlw	0
  9815  002160  6E26               	movwf	fillRect@color,c
  9816  002162  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9817  002164  0D02               	mullw	2
  9818  002166  50F3               	movf	prodl,w,c
  9819  002168  0F0E               	addlw	14
  9820  00216A  EC53  F025         	call	_fillRect
  9821                           
  9822                           ;Setup_Time.c: 256: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9823  00216E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9824  002170  0F44               	addlw	68
  9825  002172  6E23               	movwf	fillRect@y,c
  9826  002174  0E19               	movlw	25
  9827  002176  6E24               	movwf	fillRect@w,c
  9828  002178  0E02               	movlw	2
  9829  00217A  6E25               	movwf	fillRect@h,c
  9830  00217C  0E07               	movlw	7
  9831  00217E  6E27               	movwf	fillRect@color+1,c
  9832  002180  6826               	setf	fillRect@color,c
  9833  002182  0E0E               	movlw	14
  9834  002184  EC53  F025         	call	_fillRect
  9835                           
  9836                           ;Setup_Time.c: 257: break;
  9837  002188  D051               	goto	l1232
  9838  00218A                     l7216:
  9839                           
  9840                           ;Setup_Time.c: 260: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9841  00218A  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9842  00218C  0F44               	addlw	68
  9843  00218E  6E23               	movwf	fillRect@y,c
  9844  002190  0E19               	movlw	25
  9845  002192  6E24               	movwf	fillRect@w,c
  9846  002194  0E02               	movlw	2
  9847  002196  6E25               	movwf	fillRect@h,c
  9848  002198  0E00               	movlw	0
  9849  00219A  6E27               	movwf	fillRect@color+1,c
  9850  00219C  0E00               	movlw	0
  9851  00219E  6E26               	movwf	fillRect@color,c
  9852  0021A0  0E0E               	movlw	14
  9853  0021A2  EC53  F025         	call	_fillRect
  9854                           
  9855                           ;Setup_Time.c: 261: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9856  0021A6  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9857  0021A8  0F44               	addlw	68
  9858  0021AA  6E23               	movwf	fillRect@y,c
  9859  0021AC  0E19               	movlw	25
  9860  0021AE  6E24               	movwf	fillRect@w,c
  9861  0021B0  0E02               	movlw	2
  9862  0021B2  6E25               	movwf	fillRect@h,c
  9863  0021B4  0E07               	movlw	7
  9864  0021B6  6E27               	movwf	fillRect@color+1,c
  9865  0021B8  6826               	setf	fillRect@color,c
  9866  0021BA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9867  0021BC  0F0E               	addlw	14
  9868  0021BE  EC53  F025         	call	_fillRect
  9869                           
  9870                           ;Setup_Time.c: 262: break;
  9871  0021C2  D034               	goto	l1232
  9872  0021C4                     l7218:
  9873                           
  9874                           ;Setup_Time.c: 265: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9875  0021C4  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9876  0021C6  0F44               	addlw	68
  9877  0021C8  6E23               	movwf	fillRect@y,c
  9878  0021CA  0E19               	movlw	25
  9879  0021CC  6E24               	movwf	fillRect@w,c
  9880  0021CE  0E02               	movlw	2
  9881  0021D0  6E25               	movwf	fillRect@h,c
  9882  0021D2  0E00               	movlw	0
  9883  0021D4  6E27               	movwf	fillRect@color+1,c
  9884  0021D6  0E00               	movlw	0
  9885  0021D8  6E26               	movwf	fillRect@color,c
  9886  0021DA  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9887  0021DC  0F0E               	addlw	14
  9888  0021DE  EC53  F025         	call	_fillRect
  9889                           
  9890                           ;Setup_Time.c: 266: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9891  0021E2  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9892  0021E4  0F44               	addlw	68
  9893  0021E6  6E23               	movwf	fillRect@y,c
  9894  0021E8  0E19               	movlw	25
  9895  0021EA  6E24               	movwf	fillRect@w,c
  9896  0021EC  0E02               	movlw	2
  9897  0021EE  6E25               	movwf	fillRect@h,c
  9898  0021F0  0E07               	movlw	7
  9899  0021F2  6E27               	movwf	fillRect@color+1,c
  9900  0021F4  6826               	setf	fillRect@color,c
  9901  0021F6  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9902  0021F8  0D02               	mullw	2
  9903  0021FA  50F3               	movf	prodl,w,c
  9904  0021FC  0F0E               	addlw	14
  9905  0021FE  EC53  F025         	call	_fillRect
  9906                           
  9907                           ;Setup_Time.c: 268: }
  9908                           
  9909                           ;Setup_Time.c: 267: break;
  9910  002202  D014               	goto	l1232
  9911  002204                     l7224:
  9912  002204  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  9913                           
  9914                           ; Switch size 1, requested type "space"
  9915                           ; Number of cases is 6, Range of values is 0 to 5
  9916                           ; switch strategies available:
  9917                           ; Name         Instructions Cycles
  9918                           ; simple_byte           19    10 (average)
  9919                           ;	Chosen strategy is simple_byte
  9920  002206  0A00               	xorlw	0	; case 0
  9921  002208  B4D8               	btfsc	status,2,c
  9922  00220A  D73A               	goto	l7202
  9923  00220C  0A01               	xorlw	1	; case 1
  9924  00220E  B4D8               	btfsc	status,2,c
  9925  002210  D765               	goto	l7206
  9926  002212  0A03               	xorlw	3	; case 2
  9927  002214  B4D8               	btfsc	status,2,c
  9928  002216  D77D               	goto	l7208
  9929  002218  0A01               	xorlw	1	; case 3
  9930  00221A  B4D8               	btfsc	status,2,c
  9931  00221C  D798               	goto	l7212
  9932  00221E  0A07               	xorlw	7	; case 4
  9933  002220  B4D8               	btfsc	status,2,c
  9934  002222  D7B3               	goto	l7216
  9935  002224  0A01               	xorlw	1	; case 5
  9936  002226  B4D8               	btfsc	status,2,c
  9937  002228  D7CD               	goto	l7218
  9938  00222A  D000               	goto	l1232
  9939  00222C                     l1232:
  9940  00222C  0012               	return		;funcret
  9941  00222E                     __end_of_Update_Setup_Screen_Cursor_Forward:
  9942                           	opt stack 0
  9943                           tblptru	equ	0xFF8
  9944                           tblptrh	equ	0xFF7
  9945                           tblptrl	equ	0xFF6
  9946                           tablat	equ	0xFF5
  9947                           prodh	equ	0xFF4
  9948                           prodl	equ	0xFF3
  9949                           intcon	equ	0xFF2
  9950                           intcon2	equ	0xFF1
  9951                           postinc0	equ	0xFEE
  9952                           wreg	equ	0xFE8
  9953                           postdec1	equ	0xFE5
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           fsr2h	equ	0xFDA
  9958                           fsr2l	equ	0xFD9
  9959                           status	equ	0xFD8
  9960                           
  9961 ;; *************** function _Exit_Setup_Alarm_Time *****************
  9962 ;; Defined at:
  9963 ;;		line 133 in file "Setup_Alarm_Time.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;		None
  9968 ;; Return value:  Size  Location     Type
  9969 ;;		None               void
  9970 ;; Registers used:
  9971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;Total ram usage:        0 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:   11
  9984 ;; This function calls:
  9985 ;;		_DS3231_Read_Time
  9986 ;;		_Initialize_Screen
  9987 ;; This function is called by:
  9988 ;;		_Do_Setup_Alarm_Time
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text44
  9993  0051F6                     __ptext44:
  9994                           	opt stack 0
  9995  0051F6                     _Exit_Setup_Alarm_Time:
  9996                           	opt stack 18
  9997                           
  9998                           ;Setup_Alarm_Time.c: 135: DS3231_Read_Time();
  9999                           
 10000                           ;incstack = 0
 10001  0051F6  EC08  F023         	call	_DS3231_Read_Time	;wreg free
 10002                           
 10003                           ;Setup_Alarm_Time.c: 136: Initialize_Screen();
 10004  0051FA  EC3E  F00B         	call	_Initialize_Screen	;wreg free
 10005                           
 10006                           ;Setup_Alarm_Time.c: 137: In_Alarm_Time_Setup = 0;
 10007  0051FE  0E00               	movlw	0
 10008  005200  0100               	movlb	0	; () banked
 10009  005202  6F9D               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10010                           
 10011                           ; BSR set to: 0
 10012  005204  0012               	return		;funcret
 10013  005206                     __end_of_Exit_Setup_Alarm_Time:
 10014                           	opt stack 0
 10015                           tblptru	equ	0xFF8
 10016                           tblptrh	equ	0xFF7
 10017                           tblptrl	equ	0xFF6
 10018                           tablat	equ	0xFF5
 10019                           prodh	equ	0xFF4
 10020                           prodl	equ	0xFF3
 10021                           intcon	equ	0xFF2
 10022                           intcon2	equ	0xFF1
 10023                           postinc0	equ	0xFEE
 10024                           wreg	equ	0xFE8
 10025                           postdec1	equ	0xFE5
 10026                           fsr1l	equ	0xFE1
 10027                           indf2	equ	0xFDF
 10028                           postinc2	equ	0xFDE
 10029                           fsr2h	equ	0xFDA
 10030                           fsr2l	equ	0xFD9
 10031                           status	equ	0xFD8
 10032                           
 10033 ;; *************** function _Do_Save_New_Alarm_Time *****************
 10034 ;; Defined at:
 10035 ;;		line 140 in file "Setup_Alarm_Time.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;		None
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;		None
 10040 ;; Return value:  Size  Location     Type
 10041 ;;		None               void
 10042 ;; Registers used:
 10043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10053 ;;Total ram usage:        0 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:   11
 10056 ;; This function calls:
 10057 ;;		_DS3231_Read_Alarm_Time
 10058 ;;		_DS3231_Read_Time
 10059 ;;		_DS3231_Write_Alarm_Time
 10060 ;;		_Initialize_Screen
 10061 ;; This function is called by:
 10062 ;;		_Do_Setup_Alarm_Time
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066                           	psect	text45
 10067  00507E                     __ptext45:
 10068                           	opt stack 0
 10069  00507E                     _Do_Save_New_Alarm_Time:
 10070                           	opt stack 18
 10071                           
 10072                           ;Setup_Alarm_Time.c: 142: DS3231_Write_Alarm_Time();
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;incstack = 0
 10076  00507E  EC1C  F022         	call	_DS3231_Write_Alarm_Time	;wreg free
 10077                           
 10078                           ;Setup_Alarm_Time.c: 143: DS3231_Read_Alarm_Time();
 10079  005082  EC2C  F025         	call	_DS3231_Read_Alarm_Time	;wreg free
 10080                           
 10081                           ;Setup_Alarm_Time.c: 144: DS3231_Read_Time();
 10082  005086  EC08  F023         	call	_DS3231_Read_Time	;wreg free
 10083                           
 10084                           ;Setup_Alarm_Time.c: 145: Initialize_Screen();
 10085  00508A  EC3E  F00B         	call	_Initialize_Screen	;wreg free
 10086                           
 10087                           ;Setup_Alarm_Time.c: 146: In_Alarm_Time_Setup = 0;
 10088  00508E  0E00               	movlw	0
 10089  005090  0100               	movlb	0	; () banked
 10090  005092  6F9D               	movwf	_In_Alarm_Time_Setup& (0+255),b
 10091                           
 10092                           ; BSR set to: 0
 10093  005094  0012               	return		;funcret
 10094  005096                     __end_of_Do_Save_New_Alarm_Time:
 10095                           	opt stack 0
 10096                           tblptru	equ	0xFF8
 10097                           tblptrh	equ	0xFF7
 10098                           tblptrl	equ	0xFF6
 10099                           tablat	equ	0xFF5
 10100                           prodh	equ	0xFF4
 10101                           prodl	equ	0xFF3
 10102                           intcon	equ	0xFF2
 10103                           intcon2	equ	0xFF1
 10104                           postinc0	equ	0xFEE
 10105                           wreg	equ	0xFE8
 10106                           postdec1	equ	0xFE5
 10107                           fsr1l	equ	0xFE1
 10108                           indf2	equ	0xFDF
 10109                           postinc2	equ	0xFDE
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _Initialize_Screen *****************
 10115 ;; Defined at:
 10116 ;;		line 36 in file "Main_Screen.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  2  349[None  ] int 
 10123 ;; Registers used:
 10124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;Total ram usage:        0 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:   10
 10137 ;; This function calls:
 10138 ;;		_LCD_Reset
 10139 ;;		_TFT_GreenTab_Initialize
 10140 ;;		_drawCircle
 10141 ;;		_drawtext
 10142 ;;		_fillScreen
 10143 ;;		_strcpy
 10144 ;; This function is called by:
 10145 ;;		_main
 10146 ;;		_Exit_Setup_Alarm_Time
 10147 ;;		_Do_Save_New_Alarm_Time
 10148 ;;		_Exit_Setup_Heater_Temp
 10149 ;;		_Do_Save_New_Heater_Temp
 10150 ;;		_Do_Save_New_Time
 10151 ;;		_Exit_Time_Setup
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           	psect	text46
 10156  00167C                     __ptext46:
 10157                           	opt stack 0
 10158  00167C                     _Initialize_Screen:
 10159                           	opt stack 20
 10160                           
 10161                           ;Main_Screen.c: 38: LCD_Reset();
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;incstack = 0
 10165  00167C  ECB5  F028         	call	_LCD_Reset	;wreg free
 10166                           
 10167                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
 10168  001680  ECC0  F026         	call	_TFT_GreenTab_Initialize	;wreg free
 10169                           
 10170                           ;Main_Screen.c: 40: fillScreen(0x0000);
 10171  001684  0E00               	movlw	0
 10172  001686  6E25               	movwf	fillScreen@color+1,c
 10173  001688  0E00               	movlw	0
 10174  00168A  6E24               	movwf	fillScreen@color,c
 10175  00168C  ECFC  F027         	call	_fillScreen	;wreg free
 10176                           
 10177                           ;Main_Screen.c: 42: strcpy(txt, " ECE3301L Sp'22 S1\0");
 10178  001690  C062  F011         	movff	_txt,strcpy@to
 10179  001694  C063  F012         	movff	_txt+1,strcpy@to+1
 10180  001698  0EDD               	movlw	low STR_8
 10181  00169A  6E13               	movwf	strcpy@from,c
 10182  00169C  0EFE               	movlw	high STR_8
 10183  00169E  6E14               	movwf	strcpy@from+1,c
 10184  0016A0  EC8F  F026         	call	_strcpy	;wreg free
 10185                           
 10186                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
 10187  0016A4  0E01               	movlw	1
 10188  0016A6  6E39               	movwf	drawtext@y,c
 10189  0016A8  C062  F03A         	movff	_txt,drawtext@_text
 10190  0016AC  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10191  0016B0  0EFF               	movlw	255
 10192  0016B2  6E3D               	movwf	drawtext@color+1,c
 10193  0016B4  683C               	setf	drawtext@color,c
 10194  0016B6  0E00               	movlw	0
 10195  0016B8  6E3F               	movwf	drawtext@bg+1,c
 10196  0016BA  0E00               	movlw	0
 10197  0016BC  6E3E               	movwf	drawtext@bg,c
 10198  0016BE  0E01               	movlw	1
 10199  0016C0  6E40               	movwf	drawtext@size,c
 10200  0016C2  0E01               	movlw	1
 10201  0016C4  EC11  F01B         	call	_drawtext
 10202                           
 10203                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
 10204  0016C8  C062  F011         	movff	_txt,strcpy@to
 10205  0016CC  C063  F012         	movff	_txt+1,strcpy@to+1
 10206  0016D0  0E6E               	movlw	low STR_9
 10207  0016D2  6E13               	movwf	strcpy@from,c
 10208  0016D4  0EFF               	movlw	high STR_9
 10209  0016D6  6E14               	movwf	strcpy@from+1,c
 10210  0016D8  EC8F  F026         	call	_strcpy	;wreg free
 10211                           
 10212                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
 10213  0016DC  0E0B               	movlw	11
 10214  0016DE  6E39               	movwf	drawtext@y,c
 10215  0016E0  C062  F03A         	movff	_txt,drawtext@_text
 10216  0016E4  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10217  0016E8  0EF8               	movlw	248
 10218  0016EA  6E3D               	movwf	drawtext@color+1,c
 10219  0016EC  0E1F               	movlw	31
 10220  0016EE  6E3C               	movwf	drawtext@color,c
 10221  0016F0  0E00               	movlw	0
 10222  0016F2  6E3F               	movwf	drawtext@bg+1,c
 10223  0016F4  0E00               	movlw	0
 10224  0016F6  6E3E               	movwf	drawtext@bg,c
 10225  0016F8  0E01               	movlw	1
 10226  0016FA  6E40               	movwf	drawtext@size,c
 10227  0016FC  0E18               	movlw	24
 10228  0016FE  EC11  F01B         	call	_drawtext
 10229                           
 10230                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
 10231  001702  0E00               	movlw	0
 10232  001704  6E1D               	movwf	drawCircle@x0+1,c
 10233  001706  0E28               	movlw	40
 10234  001708  6E1C               	movwf	drawCircle@x0,c
 10235  00170A  0E00               	movlw	0
 10236  00170C  6E1F               	movwf	drawCircle@y0+1,c
 10237  00170E  0E17               	movlw	23
 10238  001710  6E1E               	movwf	drawCircle@y0,c
 10239  001712  0E00               	movlw	0
 10240  001714  6E21               	movwf	drawCircle@r+1,c
 10241  001716  0E02               	movlw	2
 10242  001718  6E20               	movwf	drawCircle@r,c
 10243  00171A  0EFF               	movlw	255
 10244  00171C  6E23               	movwf	drawCircle@color+1,c
 10245  00171E  0EE0               	movlw	224
 10246  001720  6E22               	movwf	drawCircle@color,c
 10247  001722  ECF1  F011         	call	_drawCircle	;wreg free
 10248                           
 10249                           ;Main_Screen.c: 48: strcpy(txt, "C/");
 10250  001726  C062  F011         	movff	_txt,strcpy@to
 10251  00172A  C063  F012         	movff	_txt+1,strcpy@to+1
 10252  00172E  0EF5               	movlw	low STR_10
 10253  001730  6E13               	movwf	strcpy@from,c
 10254  001732  0EFF               	movlw	high STR_10
 10255  001734  6E14               	movwf	strcpy@from+1,c
 10256  001736  EC8F  F026         	call	_strcpy	;wreg free
 10257                           
 10258                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
 10259  00173A  0E17               	movlw	23
 10260  00173C  6E39               	movwf	drawtext@y,c
 10261  00173E  C062  F03A         	movff	_txt,drawtext@_text
 10262  001742  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10263  001746  0EFF               	movlw	255
 10264  001748  6E3D               	movwf	drawtext@color+1,c
 10265  00174A  0EE0               	movlw	224
 10266  00174C  6E3C               	movwf	drawtext@color,c
 10267  00174E  0E00               	movlw	0
 10268  001750  6E3F               	movwf	drawtext@bg+1,c
 10269  001752  0E00               	movlw	0
 10270  001754  6E3E               	movwf	drawtext@bg,c
 10271  001756  0E02               	movlw	2
 10272  001758  6E40               	movwf	drawtext@size,c
 10273  00175A  0E2D               	movlw	45
 10274  00175C  EC11  F01B         	call	_drawtext
 10275                           
 10276                           ;Main_Screen.c: 50: strcpy(txt, "F");
 10277  001760  C062  F011         	movff	_txt,strcpy@to
 10278  001764  C063  F012         	movff	_txt+1,strcpy@to+1
 10279  001768  0EEF               	movlw	low (STR_23+2)
 10280  00176A  6E13               	movwf	strcpy@from,c
 10281  00176C  0EFF               	movlw	high (STR_23+2)
 10282  00176E  6E14               	movwf	strcpy@from+1,c
 10283  001770  EC8F  F026         	call	_strcpy	;wreg free
 10284                           
 10285                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
 10286  001774  0E00               	movlw	0
 10287  001776  6E1D               	movwf	drawCircle@x0+1,c
 10288  001778  0E6E               	movlw	110
 10289  00177A  6E1C               	movwf	drawCircle@x0,c
 10290  00177C  0E00               	movlw	0
 10291  00177E  6E1F               	movwf	drawCircle@y0+1,c
 10292  001780  0E17               	movlw	23
 10293  001782  6E1E               	movwf	drawCircle@y0,c
 10294  001784  0E00               	movlw	0
 10295  001786  6E21               	movwf	drawCircle@r+1,c
 10296  001788  0E02               	movlw	2
 10297  00178A  6E20               	movwf	drawCircle@r,c
 10298  00178C  0EFF               	movlw	255
 10299  00178E  6E23               	movwf	drawCircle@color+1,c
 10300  001790  0EE0               	movlw	224
 10301  001792  6E22               	movwf	drawCircle@color,c
 10302  001794  ECF1  F011         	call	_drawCircle	;wreg free
 10303                           
 10304                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
 10305  001798  0E17               	movlw	23
 10306  00179A  6E39               	movwf	drawtext@y,c
 10307  00179C  C062  F03A         	movff	_txt,drawtext@_text
 10308  0017A0  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10309  0017A4  0EFF               	movlw	255
 10310  0017A6  6E3D               	movwf	drawtext@color+1,c
 10311  0017A8  0EE0               	movlw	224
 10312  0017AA  6E3C               	movwf	drawtext@color,c
 10313  0017AC  0E00               	movlw	0
 10314  0017AE  6E3F               	movwf	drawtext@bg+1,c
 10315  0017B0  0E00               	movlw	0
 10316  0017B2  6E3E               	movwf	drawtext@bg,c
 10317  0017B4  0E02               	movlw	2
 10318  0017B6  6E40               	movwf	drawtext@size,c
 10319  0017B8  0E73               	movlw	115
 10320  0017BA  EC11  F01B         	call	_drawtext
 10321                           
 10322                           ;Main_Screen.c: 53: strcpy(txt, "Time");
 10323  0017BE  C062  F011         	movff	_txt,strcpy@to
 10324  0017C2  C063  F012         	movff	_txt+1,strcpy@to+1
 10325  0017C6  0EB0               	movlw	low (STR_14+6)
 10326  0017C8  6E13               	movwf	strcpy@from,c
 10327  0017CA  0EFF               	movlw	high (STR_14+6)
 10328  0017CC  6E14               	movwf	strcpy@from+1,c
 10329  0017CE  EC8F  F026         	call	_strcpy	;wreg free
 10330                           
 10331                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10332  0017D2  0E28               	movlw	40
 10333  0017D4  6E39               	movwf	drawtext@y,c
 10334  0017D6  C062  F03A         	movff	_txt,drawtext@_text
 10335  0017DA  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10336  0017DE  0E00               	movlw	0
 10337  0017E0  6E3D               	movwf	drawtext@color+1,c
 10338  0017E2  0E1F               	movlw	31
 10339  0017E4  6E3C               	movwf	drawtext@color,c
 10340  0017E6  0E00               	movlw	0
 10341  0017E8  6E3F               	movwf	drawtext@bg+1,c
 10342  0017EA  0E00               	movlw	0
 10343  0017EC  6E3E               	movwf	drawtext@bg,c
 10344  0017EE  0E01               	movlw	1
 10345  0017F0  6E40               	movwf	drawtext@size,c
 10346  0017F2  0E32               	movlw	50
 10347  0017F4  EC11  F01B         	call	_drawtext
 10348                           
 10349                           ;Main_Screen.c: 55: strcpy(txt, "Date");
 10350  0017F8  C062  F011         	movff	_txt,strcpy@to
 10351  0017FC  C063  F012         	movff	_txt+1,strcpy@to+1
 10352  001800  0EDF               	movlw	low STR_13
 10353  001802  6E13               	movwf	strcpy@from,c
 10354  001804  0EFF               	movlw	high STR_13
 10355  001806  6E14               	movwf	strcpy@from+1,c
 10356  001808  EC8F  F026         	call	_strcpy	;wreg free
 10357                           
 10358                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10359  00180C  0E47               	movlw	71
 10360  00180E  6E39               	movwf	drawtext@y,c
 10361  001810  C062  F03A         	movff	_txt,drawtext@_text
 10362  001814  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10363  001818  0EF8               	movlw	248
 10364  00181A  6E3D               	movwf	drawtext@color+1,c
 10365  00181C  0E00               	movlw	0
 10366  00181E  6E3C               	movwf	drawtext@color,c
 10367  001820  0E00               	movlw	0
 10368  001822  6E3F               	movwf	drawtext@bg+1,c
 10369  001824  0E00               	movlw	0
 10370  001826  6E3E               	movwf	drawtext@bg,c
 10371  001828  0E01               	movlw	1
 10372  00182A  6E40               	movwf	drawtext@size,c
 10373  00182C  0E32               	movlw	50
 10374  00182E  EC11  F01B         	call	_drawtext
 10375                           
 10376                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 10377  001832  C062  F011         	movff	_txt,strcpy@to
 10378  001836  C063  F012         	movff	_txt+1,strcpy@to+1
 10379  00183A  0EAA               	movlw	low STR_14
 10380  00183C  6E13               	movwf	strcpy@from,c
 10381  00183E  0EFF               	movlw	high STR_14
 10382  001840  6E14               	movwf	strcpy@from+1,c
 10383  001842  EC8F  F026         	call	_strcpy	;wreg free
 10384                           
 10385                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10386  001846  0E64               	movlw	100
 10387  001848  6E39               	movwf	drawtext@y,c
 10388  00184A  C062  F03A         	movff	_txt,drawtext@_text
 10389  00184E  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10390  001852  0EFF               	movlw	255
 10391  001854  6E3D               	movwf	drawtext@color+1,c
 10392  001856  0EE0               	movlw	224
 10393  001858  6E3C               	movwf	drawtext@color,c
 10394  00185A  0E00               	movlw	0
 10395  00185C  6E3F               	movwf	drawtext@bg+1,c
 10396  00185E  0E00               	movlw	0
 10397  001860  6E3E               	movwf	drawtext@bg,c
 10398  001862  0E01               	movlw	1
 10399  001864  6E40               	movwf	drawtext@size,c
 10400  001866  0E04               	movlw	4
 10401  001868  EC11  F01B         	call	_drawtext
 10402                           
 10403                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 10404  00186C  C062  F011         	movff	_txt,strcpy@to
 10405  001870  C063  F012         	movff	_txt+1,strcpy@to+1
 10406  001874  0EBF               	movlw	low STR_15
 10407  001876  6E13               	movwf	strcpy@from,c
 10408  001878  0EFF               	movlw	high STR_15
 10409  00187A  6E14               	movwf	strcpy@from+1,c
 10410  00187C  EC8F  F026         	call	_strcpy	;wreg free
 10411                           
 10412                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10413  001880  0E64               	movlw	100
 10414  001882  6E39               	movwf	drawtext@y,c
 10415  001884  C062  F03A         	movff	_txt,drawtext@_text
 10416  001888  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10417  00188C  0EFF               	movlw	255
 10418  00188E  6E3D               	movwf	drawtext@color+1,c
 10419  001890  0EE0               	movlw	224
 10420  001892  6E3C               	movwf	drawtext@color,c
 10421  001894  0E00               	movlw	0
 10422  001896  6E3F               	movwf	drawtext@bg+1,c
 10423  001898  0E00               	movlw	0
 10424  00189A  6E3E               	movwf	drawtext@bg,c
 10425  00189C  0E01               	movlw	1
 10426  00189E  6E40               	movwf	drawtext@size,c
 10427  0018A0  0E4D               	movlw	77
 10428  0018A2  EC11  F01B         	call	_drawtext
 10429                           
 10430                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
 10431  0018A6  C062  F011         	movff	_txt,strcpy@to
 10432  0018AA  C063  F012         	movff	_txt+1,strcpy@to+1
 10433  0018AE  0E7B               	movlw	low STR_16
 10434  0018B0  6E13               	movwf	strcpy@from,c
 10435  0018B2  0EFF               	movlw	high STR_16
 10436  0018B4  6E14               	movwf	strcpy@from+1,c
 10437  0018B6  EC8F  F026         	call	_strcpy	;wreg free
 10438                           
 10439                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10440  0018BA  0E78               	movlw	120
 10441  0018BC  6E39               	movwf	drawtext@y,c
 10442  0018BE  C062  F03A         	movff	_txt,drawtext@_text
 10443  0018C2  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10444  0018C6  0E00               	movlw	0
 10445  0018C8  6E3D               	movwf	drawtext@color+1,c
 10446  0018CA  0E1F               	movlw	31
 10447  0018CC  6E3C               	movwf	drawtext@color,c
 10448  0018CE  0E00               	movlw	0
 10449  0018D0  6E3F               	movwf	drawtext@bg+1,c
 10450  0018D2  0E00               	movlw	0
 10451  0018D4  6E3E               	movwf	drawtext@bg,c
 10452  0018D6  0E01               	movlw	1
 10453  0018D8  6E40               	movwf	drawtext@size,c
 10454  0018DA  0E06               	movlw	6
 10455  0018DC  EC11  F01B         	call	_drawtext
 10456                           
 10457                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
 10458  0018E0  C062  F011         	movff	_txt,strcpy@to
 10459  0018E4  C063  F012         	movff	_txt+1,strcpy@to+1
 10460  0018E8  0ED8               	movlw	low STR_17
 10461  0018EA  6E13               	movwf	strcpy@from,c
 10462  0018EC  0EFF               	movlw	high STR_17
 10463  0018EE  6E14               	movwf	strcpy@from+1,c
 10464  0018F0  EC8F  F026         	call	_strcpy	;wreg free
 10465                           
 10466                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10467  0018F4  0E78               	movlw	120
 10468  0018F6  6E39               	movwf	drawtext@y,c
 10469  0018F8  C062  F03A         	movff	_txt,drawtext@_text
 10470  0018FC  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10471  001900  0E00               	movlw	0
 10472  001902  6E3D               	movwf	drawtext@color+1,c
 10473  001904  0E1F               	movlw	31
 10474  001906  6E3C               	movwf	drawtext@color,c
 10475  001908  0E00               	movlw	0
 10476  00190A  6E3F               	movwf	drawtext@bg+1,c
 10477  00190C  0E00               	movlw	0
 10478  00190E  6E3E               	movwf	drawtext@bg,c
 10479  001910  0E01               	movlw	1
 10480  001912  6E40               	movwf	drawtext@size,c
 10481  001914  0E55               	movlw	85
 10482  001916  EC11  F01B         	call	_drawtext
 10483                           
 10484                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 10485  00191A  C062  F011         	movff	_txt,strcpy@to
 10486  00191E  C063  F012         	movff	_txt+1,strcpy@to+1
 10487  001922  0EF8               	movlw	low STR_18
 10488  001924  6E13               	movwf	strcpy@from,c
 10489  001926  0EFF               	movlw	high STR_18
 10490  001928  6E14               	movwf	strcpy@from+1,c
 10491  00192A  EC8F  F026         	call	_strcpy	;wreg free
 10492                           
 10493                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10494  00192E  0E8C               	movlw	140
 10495  001930  6E39               	movwf	drawtext@y,c
 10496  001932  C062  F03A         	movff	_txt,drawtext@_text
 10497  001936  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10498  00193A  0EFF               	movlw	255
 10499  00193C  6E3D               	movwf	drawtext@color+1,c
 10500  00193E  683C               	setf	drawtext@color,c
 10501  001940  0E00               	movlw	0
 10502  001942  6E3F               	movwf	drawtext@bg+1,c
 10503  001944  0E00               	movlw	0
 10504  001946  6E3E               	movwf	drawtext@bg,c
 10505  001948  0E01               	movlw	1
 10506  00194A  6E40               	movwf	drawtext@size,c
 10507  00194C  0E0C               	movlw	12
 10508  00194E  EC11  F01B         	call	_drawtext
 10509                           
 10510                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 10511  001952  C062  F011         	movff	_txt,strcpy@to
 10512  001956  C063  F012         	movff	_txt+1,strcpy@to+1
 10513  00195A  0EFB               	movlw	low STR_19
 10514  00195C  6E13               	movwf	strcpy@from,c
 10515  00195E  0EFF               	movlw	high STR_19
 10516  001960  6E14               	movwf	strcpy@from+1,c
 10517  001962  EC8F  F026         	call	_strcpy	;wreg free
 10518                           
 10519                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10520  001966  0E8C               	movlw	140
 10521  001968  6E39               	movwf	drawtext@y,c
 10522  00196A  C062  F03A         	movff	_txt,drawtext@_text
 10523  00196E  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10524  001972  0EFF               	movlw	255
 10525  001974  6E3D               	movwf	drawtext@color+1,c
 10526  001976  683C               	setf	drawtext@color,c
 10527  001978  0E00               	movlw	0
 10528  00197A  6E3F               	movwf	drawtext@bg+1,c
 10529  00197C  0E00               	movlw	0
 10530  00197E  6E3E               	movwf	drawtext@bg,c
 10531  001980  0E01               	movlw	1
 10532  001982  6E40               	movwf	drawtext@size,c
 10533  001984  0E21               	movlw	33
 10534  001986  EC11  F01B         	call	_drawtext
 10535                           
 10536                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 10537  00198A  C062  F011         	movff	_txt,strcpy@to
 10538  00198E  C063  F012         	movff	_txt+1,strcpy@to+1
 10539  001992  0EE4               	movlw	low STR_20
 10540  001994  6E13               	movwf	strcpy@from,c
 10541  001996  0EFF               	movlw	high STR_20
 10542  001998  6E14               	movwf	strcpy@from+1,c
 10543  00199A  EC8F  F026         	call	_strcpy	;wreg free
 10544                           
 10545                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10546  00199E  0E8C               	movlw	140
 10547  0019A0  6E39               	movwf	drawtext@y,c
 10548  0019A2  C062  F03A         	movff	_txt,drawtext@_text
 10549  0019A6  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10550  0019AA  0EFF               	movlw	255
 10551  0019AC  6E3D               	movwf	drawtext@color+1,c
 10552  0019AE  683C               	setf	drawtext@color,c
 10553  0019B0  0E00               	movlw	0
 10554  0019B2  6E3F               	movwf	drawtext@bg+1,c
 10555  0019B4  0E00               	movlw	0
 10556  0019B6  6E3E               	movwf	drawtext@bg,c
 10557  0019B8  0E01               	movlw	1
 10558  0019BA  6E40               	movwf	drawtext@size,c
 10559  0019BC  0E32               	movlw	50
 10560  0019BE  EC11  F01B         	call	_drawtext
 10561                           
 10562                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 10563  0019C2  C062  F011         	movff	_txt,strcpy@to
 10564  0019C6  C063  F012         	movff	_txt+1,strcpy@to+1
 10565  0019CA  0EF1               	movlw	low STR_21
 10566  0019CC  6E13               	movwf	strcpy@from,c
 10567  0019CE  0EFF               	movlw	high STR_21
 10568  0019D0  6E14               	movwf	strcpy@from+1,c
 10569  0019D2  EC8F  F026         	call	_strcpy	;wreg free
 10570                           
 10571                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10572  0019D6  0E8C               	movlw	140
 10573  0019D8  6E39               	movwf	drawtext@y,c
 10574  0019DA  C062  F03A         	movff	_txt,drawtext@_text
 10575  0019DE  C063  F03B         	movff	_txt+1,drawtext@_text+1
 10576  0019E2  0EFF               	movlw	255
 10577  0019E4  6E3D               	movwf	drawtext@color+1,c
 10578  0019E6  683C               	setf	drawtext@color,c
 10579  0019E8  0E00               	movlw	0
 10580  0019EA  6E3F               	movwf	drawtext@bg+1,c
 10581  0019EC  0E00               	movlw	0
 10582  0019EE  6E3E               	movwf	drawtext@bg,c
 10583  0019F0  0E01               	movlw	1
 10584  0019F2  6E40               	movwf	drawtext@size,c
 10585  0019F4  0E5F               	movlw	95
 10586  0019F6  EC11  F01B         	call	_drawtext
 10587  0019FA  0012               	return		;funcret
 10588  0019FC                     __end_of_Initialize_Screen:
 10589                           	opt stack 0
 10590                           tblptru	equ	0xFF8
 10591                           tblptrh	equ	0xFF7
 10592                           tblptrl	equ	0xFF6
 10593                           tablat	equ	0xFF5
 10594                           prodh	equ	0xFF4
 10595                           prodl	equ	0xFF3
 10596                           intcon	equ	0xFF2
 10597                           intcon2	equ	0xFF1
 10598                           postinc0	equ	0xFEE
 10599                           wreg	equ	0xFE8
 10600                           postdec1	equ	0xFE5
 10601                           fsr1l	equ	0xFE1
 10602                           indf2	equ	0xFDF
 10603                           postinc2	equ	0xFDE
 10604                           fsr2h	equ	0xFDA
 10605                           fsr2l	equ	0xFD9
 10606                           status	equ	0xFD8
 10607                           
 10608 ;; *************** function _strcpy *****************
 10609 ;; Defined at:
 10610 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  to              2   16[COMRAM] PTR unsigned char 
 10613 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10614 ;;  from            2   18[COMRAM] PTR const unsigned char 
 10615 ;;		 -> STR_38(5), STR_37(5), STR_36(12), STR_35(19), 
 10616 ;;		 -> STR_34(16), STR_33(10), STR_32(11), STR_31(19), 
 10617 ;;		 -> STR_29(5), STR_28(8), STR_27(8), STR_26(18), 
 10618 ;;		 -> STR_25(4), STR_24(4), STR_23(4), STR_22(4), 
 10619 ;;		 -> STR_21(4), STR_20(5), STR_19(3), STR_18(3), 
 10620 ;;		 -> STR_17(7), STR_16(13), STR_15(9), STR_14(11), 
 10621 ;;		 -> STR_13(5), STR_12(5), STR_11(2), STR_10(3), 
 10622 ;;		 -> STR_9(13), STR_8(20), 
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;  cp              2   20[COMRAM] PTR unsigned char 
 10625 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10626 ;; Return value:  Size  Location     Type
 10627 ;;                  2   16[COMRAM] PTR unsigned char 
 10628 ;; Registers used:
 10629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10630 ;; Tracked objects:
 10631 ;;		On entry : 0/0
 10632 ;;		On exit  : 0/0
 10633 ;;		Unchanged: 0/0
 10634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;Total ram usage:        6 bytes
 10640 ;; Hardware stack levels used:    1
 10641 ;; Hardware stack levels required when called:    3
 10642 ;; This function calls:
 10643 ;;		Nothing
 10644 ;; This function is called by:
 10645 ;;		_Initialize_Screen
 10646 ;;		_Update_Screen
 10647 ;;		_Initialize_Setup_Alarm_Time_Screen
 10648 ;;		_Initialize_Setup_Heater_Screen
 10649 ;;		_Initialize_Setup_Time_Screen
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653                           	psect	text47
 10654  004D1E                     __ptext47:
 10655                           	opt stack 0
 10656  004D1E                     _strcpy:
 10657                           	opt stack 26
 10658                           
 10659                           ;incstack = 0
 10660  004D1E  C011  F015         	movff	strcpy@to,strcpy@cp
 10661  004D22  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10662  004D26  D005               	goto	l6782
 10663  004D28                     l6780:
 10664  004D28  4A15               	infsnz	strcpy@cp,f,c
 10665  004D2A  2A16               	incf	strcpy@cp+1,f,c
 10666  004D2C  4A13               	infsnz	strcpy@from,f,c
 10667  004D2E  2A14               	incf	strcpy@from+1,f,c
 10668  004D30  D000               	goto	l6782
 10669  004D32                     l6782:
 10670  004D32  C013  FFF6         	movff	strcpy@from,tblptrl
 10671  004D36  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10672  004D3A                     	if	0	;tblptru may be non-zero
 10673  004D3A                     	endif
 10674  004D3A                     	if	0	;tblptru may be non-zero
 10675  004D3A                     	endif
 10676  004D3A  C015  FFD9         	movff	strcpy@cp,fsr2l
 10677  004D3E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10678  004D42  0008               	tblrd		*
 10679  004D44  CFF5 FFDF          	movff	tablat,indf2
 10680  004D48  50DF               	movf	indf2,w,c
 10681  004D4A  A4D8               	btfss	status,2,c
 10682  004D4C  D7ED               	goto	l6780
 10683                           
 10684                           ;	Return value of _strcpy is never used
 10685  004D4E  0012               	return		;funcret
 10686  004D50                     __end_of_strcpy:
 10687                           	opt stack 0
 10688                           tblptru	equ	0xFF8
 10689                           tblptrh	equ	0xFF7
 10690                           tblptrl	equ	0xFF6
 10691                           tablat	equ	0xFF5
 10692                           prodh	equ	0xFF4
 10693                           prodl	equ	0xFF3
 10694                           intcon	equ	0xFF2
 10695                           intcon2	equ	0xFF1
 10696                           postinc0	equ	0xFEE
 10697                           wreg	equ	0xFE8
 10698                           postdec1	equ	0xFE5
 10699                           fsr1l	equ	0xFE1
 10700                           indf2	equ	0xFDF
 10701                           postinc2	equ	0xFDE
 10702                           fsr2h	equ	0xFDA
 10703                           fsr2l	equ	0xFD9
 10704                           status	equ	0xFD8
 10705                           
 10706 ;; *************** function _fillScreen *****************
 10707 ;; Defined at:
 10708 ;;		line 619 in file "ST7735_TFT.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;  color           2   35[COMRAM] unsigned int 
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;		None
 10713 ;; Return value:  Size  Location     Type
 10714 ;;		None               void
 10715 ;; Registers used:
 10716 ;;		wreg, status,2, status,0, cstack
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/0
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10722 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;Total ram usage:        2 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:    7
 10729 ;; This function calls:
 10730 ;;		_fillRectangle
 10731 ;; This function is called by:
 10732 ;;		_Initialize_Screen
 10733 ;;		_Initialize_Setup_Alarm_Time_Screen
 10734 ;;		_Initialize_Setup_Heater_Screen
 10735 ;;		_Initialize_Setup_Time_Screen
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text48
 10740  004FF8                     __ptext48:
 10741                           	opt stack 0
 10742  004FF8                     _fillScreen:
 10743                           	opt stack 22
 10744                           
 10745                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
 10746                           
 10747                           ;incstack = 0
 10748  004FF8  0E00               	movlw	0
 10749  004FFA  6E18               	movwf	fillRectangle@y,c
 10750  004FFC  0E80               	movlw	128
 10751  004FFE  6E19               	movwf	fillRectangle@w,c
 10752  005000  0EA0               	movlw	160
 10753  005002  6E1A               	movwf	fillRectangle@h,c
 10754  005004  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10755  005008  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10756  00500C  0E00               	movlw	0
 10757  00500E  ECF3  F01B         	call	_fillRectangle
 10758  005012  0012               	return		;funcret
 10759  005014                     __end_of_fillScreen:
 10760                           	opt stack 0
 10761                           tblptru	equ	0xFF8
 10762                           tblptrh	equ	0xFF7
 10763                           tblptrl	equ	0xFF6
 10764                           tablat	equ	0xFF5
 10765                           prodh	equ	0xFF4
 10766                           prodl	equ	0xFF3
 10767                           intcon	equ	0xFF2
 10768                           intcon2	equ	0xFF1
 10769                           postinc0	equ	0xFEE
 10770                           wreg	equ	0xFE8
 10771                           postdec1	equ	0xFE5
 10772                           fsr1l	equ	0xFE1
 10773                           indf2	equ	0xFDF
 10774                           postinc2	equ	0xFDE
 10775                           fsr2h	equ	0xFDA
 10776                           fsr2l	equ	0xFD9
 10777                           status	equ	0xFD8
 10778                           
 10779 ;; *************** function _fillRectangle *****************
 10780 ;; Defined at:
 10781 ;;		line 503 in file "ST7735_TFT.c"
 10782 ;; Parameters:    Size  Location     Type
 10783 ;;  x               1    wreg     unsigned char 
 10784 ;;  y               1   23[COMRAM] unsigned char 
 10785 ;;  w               1   24[COMRAM] unsigned char 
 10786 ;;  h               1   25[COMRAM] unsigned char 
 10787 ;;  color           2   26[COMRAM] unsigned int 
 10788 ;; Auto vars:     Size  Location     Type
 10789 ;;  x               1   34[COMRAM] unsigned char 
 10790 ;;  lo              1   33[COMRAM] unsigned char 
 10791 ;;  hi              1   32[COMRAM] unsigned char 
 10792 ;; Return value:  Size  Location     Type
 10793 ;;		None               void
 10794 ;; Registers used:
 10795 ;;		wreg, status,2, status,0, cstack
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10801 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10805 ;;Total ram usage:       12 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; Hardware stack levels required when called:    6
 10808 ;; This function calls:
 10809 ;;		_setAddrWindow
 10810 ;;		_spiwrite
 10811 ;; This function is called by:
 10812 ;;		_fillScreen
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           	psect	text49
 10817  0037E6                     __ptext49:
 10818                           	opt stack 0
 10819  0037E6                     _fillRectangle:
 10820                           	opt stack 22
 10821                           
 10822                           ;incstack = 0
 10823                           ;fillRectangle@x stored from wreg
 10824  0037E6  6E23               	movwf	fillRectangle@x,c
 10825                           
 10826                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
 10827                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
 10828  0037E8  0E80               	movlw	128
 10829  0037EA  6023               	cpfslt	fillRectangle@x,c
 10830  0037EC  D069               	goto	l796
 10831  0037EE  0E9F               	movlw	159
 10832  0037F0  6418               	cpfsgt	fillRectangle@y,c
 10833  0037F2  D001               	goto	l6058
 10834                           
 10835                           ;ST7735_TFT.c: 507: return;
 10836  0037F4  D065               	goto	l796
 10837  0037F6                     l6058:
 10838                           
 10839                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
 10840  0037F6  0EFF               	movlw	255
 10841  0037F8  6E1D               	movwf	??_fillRectangle& (0+255),c
 10842  0037FA  0EFF               	movlw	255
 10843  0037FC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10844  0037FE  5019               	movf	fillRectangle@w,w,c
 10845  003800  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10846  003804  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10847  003806  261F               	addwf	??_fillRectangle+2,f,c
 10848  003808  0E00               	movlw	0
 10849  00380A  2220               	addwfc	??_fillRectangle+3,f,c
 10850  00380C  501D               	movf	??_fillRectangle,w,c
 10851  00380E  261F               	addwf	??_fillRectangle+2,f,c
 10852  003810  501E               	movf	??_fillRectangle+1,w,c
 10853  003812  2220               	addwfc	??_fillRectangle+3,f,c
 10854  003814  BE20               	btfsc	??_fillRectangle+3,7,c
 10855  003816  D00A               	goto	l797
 10856  003818  5020               	movf	??_fillRectangle+3,w,c
 10857  00381A  E104               	bnz	u4210
 10858  00381C  0E80               	movlw	128
 10859  00381E  5C1F               	subwf	??_fillRectangle+2,w,c
 10860  003820  A0D8               	btfss	status,0,c
 10861  003822  D004               	goto	l797
 10862  003824                     u4210:
 10863                           
 10864                           ;ST7735_TFT.c: 509: w = 128 - x;
 10865  003824  5023               	movf	fillRectangle@x,w,c
 10866  003826  0800               	sublw	0
 10867  003828  0F80               	addlw	128
 10868  00382A  6E19               	movwf	fillRectangle@w,c
 10869  00382C                     l797:
 10870                           
 10871                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
 10872  00382C  0EFF               	movlw	255
 10873  00382E  6E1D               	movwf	??_fillRectangle& (0+255),c
 10874  003830  0EFF               	movlw	255
 10875  003832  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10876  003834  501A               	movf	fillRectangle@h,w,c
 10877  003836  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 10878  00383A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10879  00383C  261F               	addwf	??_fillRectangle+2,f,c
 10880  00383E  0E00               	movlw	0
 10881  003840  2220               	addwfc	??_fillRectangle+3,f,c
 10882  003842  501D               	movf	??_fillRectangle,w,c
 10883  003844  261F               	addwf	??_fillRectangle+2,f,c
 10884  003846  501E               	movf	??_fillRectangle+1,w,c
 10885  003848  2220               	addwfc	??_fillRectangle+3,f,c
 10886  00384A  BE20               	btfsc	??_fillRectangle+3,7,c
 10887  00384C  D00B               	goto	l6064
 10888  00384E  5020               	movf	??_fillRectangle+3,w,c
 10889  003850  E104               	bnz	u4220
 10890  003852  0EA0               	movlw	160
 10891  003854  5C1F               	subwf	??_fillRectangle+2,w,c
 10892  003856  A0D8               	btfss	status,0,c
 10893  003858  D005               	goto	l6064
 10894  00385A                     u4220:
 10895                           
 10896                           ;ST7735_TFT.c: 511: h = 160 - y;
 10897  00385A  5018               	movf	fillRectangle@y,w,c
 10898  00385C  0800               	sublw	0
 10899  00385E  0FA0               	addlw	160
 10900  003860  6E1A               	movwf	fillRectangle@h,c
 10901  003862  D000               	goto	l6064
 10902  003864                     l6064:
 10903                           
 10904                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 10905  003864  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 10906  003868  5023               	movf	fillRectangle@x,w,c
 10907  00386A  2419               	addwf	fillRectangle@w,w,c
 10908  00386C  6E1D               	movwf	??_fillRectangle& (0+255),c
 10909  00386E  041D               	decf	??_fillRectangle,w,c
 10910  003870  6E15               	movwf	setAddrWindow@x1,c
 10911  003872  5018               	movf	fillRectangle@y,w,c
 10912  003874  241A               	addwf	fillRectangle@h,w,c
 10913  003876  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10914  003878  041E               	decf	??_fillRectangle+1,w,c
 10915  00387A  6E16               	movwf	setAddrWindow@y1,c
 10916  00387C  5023               	movf	fillRectangle@x,w,c
 10917  00387E  EC86  F024         	call	_setAddrWindow
 10918                           
 10919                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
 10920  003882  501C               	movf	fillRectangle@color+1,w,c
 10921  003884  6E21               	movwf	fillRectangle@hi,c
 10922  003886  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 10923                           
 10924                           ;ST7735_TFT.c: 514: PORTBbits.RB5 = 1;
 10925  00388A  8A81               	bsf	3969,5,c	;volatile
 10926                           
 10927                           ;ST7735_TFT.c: 515: PORTBbits.RB6 = 0;
 10928  00388C  9C81               	bcf	3969,6,c	;volatile
 10929                           
 10930                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
 10931  00388E  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 10932  003892                     l6076:
 10933  003892  5018               	movf	fillRectangle@y,w,c
 10934  003894  B4D8               	btfsc	status,2,c
 10935  003896  D013               	goto	l800
 10936  003898  D001               	goto	l799
 10937  00389A  D011               	goto	l800
 10938  00389C                     l799:
 10939                           
 10940                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
 10941  00389C  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 10942  0038A0                     l6080:
 10943  0038A0  5023               	movf	fillRectangle@x,w,c
 10944  0038A2  B4D8               	btfsc	status,2,c
 10945  0038A4  D00A               	goto	l6090
 10946  0038A6  D001               	goto	l6084
 10947  0038A8  D008               	goto	l6090
 10948  0038AA                     l6084:
 10949                           
 10950                           ;ST7735_TFT.c: 519: spiwrite(hi);
 10951  0038AA  5021               	movf	fillRectangle@hi,w,c
 10952  0038AC  EC98  F028         	call	_spiwrite
 10953                           
 10954                           ;ST7735_TFT.c: 520: spiwrite(lo);
 10955  0038B0  5022               	movf	fillRectangle@lo,w,c
 10956  0038B2  EC98  F028         	call	_spiwrite
 10957  0038B6  0623               	decf	fillRectangle@x,f,c
 10958  0038B8  D7F3               	goto	l6080
 10959  0038BA                     l6090:
 10960  0038BA  0618               	decf	fillRectangle@y,f,c
 10961  0038BC  D7EA               	goto	l6076
 10962  0038BE                     l800:
 10963                           
 10964                           ;ST7735_TFT.c: 521: }
 10965                           ;ST7735_TFT.c: 522: }
 10966                           ;ST7735_TFT.c: 523: PORTBbits.RB6 = 1;
 10967  0038BE  8C81               	bsf	3969,6,c	;volatile
 10968  0038C0                     l796:
 10969  0038C0  0012               	return		;funcret
 10970  0038C2                     __end_of_fillRectangle:
 10971                           	opt stack 0
 10972                           tblptru	equ	0xFF8
 10973                           tblptrh	equ	0xFF7
 10974                           tblptrl	equ	0xFF6
 10975                           tablat	equ	0xFF5
 10976                           prodh	equ	0xFF4
 10977                           prodl	equ	0xFF3
 10978                           intcon	equ	0xFF2
 10979                           intcon2	equ	0xFF1
 10980                           postinc0	equ	0xFEE
 10981                           wreg	equ	0xFE8
 10982                           postdec1	equ	0xFE5
 10983                           fsr1l	equ	0xFE1
 10984                           indf2	equ	0xFDF
 10985                           postinc2	equ	0xFDE
 10986                           fsr2h	equ	0xFDA
 10987                           fsr2l	equ	0xFD9
 10988                           status	equ	0xFD8
 10989                           
 10990 ;; *************** function _drawCircle *****************
 10991 ;; Defined at:
 10992 ;;		line 528 in file "ST7735_TFT.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  x0              2   27[COMRAM] int 
 10995 ;;  y0              2   29[COMRAM] int 
 10996 ;;  r               2   31[COMRAM] int 
 10997 ;;  color           2   33[COMRAM] unsigned int 
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  y               2   45[COMRAM] int 
 11000 ;;  x               2   43[COMRAM] int 
 11001 ;;  f               2   41[COMRAM] int 
 11002 ;;  ddF_y           2   39[COMRAM] int 
 11003 ;;  ddF_x           2   37[COMRAM] int 
 11004 ;; Return value:  Size  Location     Type
 11005 ;;		None               void
 11006 ;; Registers used:
 11007 ;;		wreg, status,2, status,0, cstack
 11008 ;; Tracked objects:
 11009 ;;		On entry : 0/0
 11010 ;;		On exit  : 0/0
 11011 ;;		Unchanged: 0/0
 11012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11013 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;Total ram usage:       20 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; Hardware stack levels required when called:    7
 11020 ;; This function calls:
 11021 ;;		_drawPixel
 11022 ;; This function is called by:
 11023 ;;		_Initialize_Screen
 11024 ;; This function uses a non-reentrant model
 11025 ;;
 11026                           
 11027                           	psect	text50
 11028  0023E2                     __ptext50:
 11029                           	opt stack 0
 11030  0023E2                     _drawCircle:
 11031                           	opt stack 22
 11032                           
 11033                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
 11034                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11035                           
 11036                           ;incstack = 0
 11037  0023E2  C020  F024         	movff	drawCircle@r,??_drawCircle
 11038  0023E6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11039  0023EA  1E24               	comf	??_drawCircle,f,c
 11040  0023EC  1E25               	comf	??_drawCircle+1,f,c
 11041  0023EE  4A24               	infsnz	??_drawCircle,f,c
 11042  0023F0  2A25               	incf	??_drawCircle+1,f,c
 11043  0023F2  0E01               	movlw	1
 11044  0023F4  2424               	addwf	??_drawCircle,w,c
 11045  0023F6  6E2A               	movwf	drawCircle@f,c
 11046  0023F8  0E00               	movlw	0
 11047  0023FA  2025               	addwfc	??_drawCircle+1,w,c
 11048  0023FC  6E2B               	movwf	drawCircle@f+1,c
 11049  0023FE  0E00               	movlw	0
 11050  002400  6E27               	movwf	drawCircle@ddF_x+1,c
 11051  002402  0E01               	movlw	1
 11052  002404  6E26               	movwf	drawCircle@ddF_x,c
 11053  002406  C020  F024         	movff	drawCircle@r,??_drawCircle
 11054  00240A  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 11055  00240E  90D8               	bcf	status,0,c
 11056  002410  3624               	rlcf	??_drawCircle,f,c
 11057  002412  3625               	rlcf	??_drawCircle+1,f,c
 11058  002414  1E24               	comf	??_drawCircle,f,c
 11059  002416  1E25               	comf	??_drawCircle+1,f,c
 11060  002418  4A24               	infsnz	??_drawCircle,f,c
 11061  00241A  2A25               	incf	??_drawCircle+1,f,c
 11062  00241C  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 11063  002420  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 11064  002424  0E00               	movlw	0
 11065  002426  6E2D               	movwf	drawCircle@x+1,c
 11066  002428  0E00               	movlw	0
 11067  00242A  6E2C               	movwf	drawCircle@x,c
 11068  00242C  C020  F02E         	movff	drawCircle@r,drawCircle@y
 11069  002430  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 11070                           
 11071                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
 11072  002434  501E               	movf	drawCircle@y0,w,c
 11073  002436  2420               	addwf	drawCircle@r,w,c
 11074  002438  6E18               	movwf	drawPixel@y,c
 11075  00243A  C022  F019         	movff	drawCircle@color,drawPixel@color
 11076  00243E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11077  002442  501C               	movf	drawCircle@x0,w,c
 11078  002444  ECA8  F026         	call	_drawPixel
 11079                           
 11080                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
 11081  002448  5020               	movf	drawCircle@r,w,c
 11082  00244A  0800               	sublw	0
 11083  00244C  241E               	addwf	drawCircle@y0,w,c
 11084  00244E  6E18               	movwf	drawPixel@y,c
 11085  002450  C022  F019         	movff	drawCircle@color,drawPixel@color
 11086  002454  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11087  002458  501C               	movf	drawCircle@x0,w,c
 11088  00245A  ECA8  F026         	call	_drawPixel
 11089                           
 11090                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
 11091  00245E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11092  002462  C022  F019         	movff	drawCircle@color,drawPixel@color
 11093  002466  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11094  00246A  501C               	movf	drawCircle@x0,w,c
 11095  00246C  2420               	addwf	drawCircle@r,w,c
 11096  00246E  ECA8  F026         	call	_drawPixel
 11097                           
 11098                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
 11099  002472  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 11100  002476  C022  F019         	movff	drawCircle@color,drawPixel@color
 11101  00247A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11102  00247E  5020               	movf	drawCircle@r,w,c
 11103  002480  0800               	sublw	0
 11104  002482  241C               	addwf	drawCircle@x0,w,c
 11105  002484  ECA8  F026         	call	_drawPixel
 11106                           
 11107                           ;ST7735_TFT.c: 536: while (x < y) {
 11108  002488  D078               	goto	l6866
 11109  00248A                     l6838:
 11110                           
 11111                           ;ST7735_TFT.c: 537: if (f >= 0) {
 11112  00248A  BE2B               	btfsc	drawCircle@f+1,7,c
 11113  00248C  D00B               	goto	l807
 11114                           
 11115                           ;ST7735_TFT.c: 538: y--;
 11116  00248E  062E               	decf	drawCircle@y,f,c
 11117  002490  A0D8               	btfss	status,0,c
 11118  002492  062F               	decf	drawCircle@y+1,f,c
 11119                           
 11120                           ;ST7735_TFT.c: 539: ddF_y += 2;
 11121  002494  0E02               	movlw	2
 11122  002496  2628               	addwf	drawCircle@ddF_y,f,c
 11123  002498  0E00               	movlw	0
 11124  00249A  2229               	addwfc	drawCircle@ddF_y+1,f,c
 11125                           
 11126                           ;ST7735_TFT.c: 540: f += ddF_y;
 11127  00249C  5028               	movf	drawCircle@ddF_y,w,c
 11128  00249E  262A               	addwf	drawCircle@f,f,c
 11129  0024A0  5029               	movf	drawCircle@ddF_y+1,w,c
 11130  0024A2  222B               	addwfc	drawCircle@f+1,f,c
 11131  0024A4                     l807:
 11132                           
 11133                           ;ST7735_TFT.c: 541: }
 11134                           ;ST7735_TFT.c: 542: x++;
 11135  0024A4  4A2C               	infsnz	drawCircle@x,f,c
 11136  0024A6  2A2D               	incf	drawCircle@x+1,f,c
 11137                           
 11138                           ;ST7735_TFT.c: 543: ddF_x += 2;
 11139  0024A8  0E02               	movlw	2
 11140  0024AA  2626               	addwf	drawCircle@ddF_x,f,c
 11141  0024AC  0E00               	movlw	0
 11142  0024AE  2227               	addwfc	drawCircle@ddF_x+1,f,c
 11143                           
 11144                           ;ST7735_TFT.c: 544: f += ddF_x;
 11145  0024B0  5026               	movf	drawCircle@ddF_x,w,c
 11146  0024B2  262A               	addwf	drawCircle@f,f,c
 11147  0024B4  5027               	movf	drawCircle@ddF_x+1,w,c
 11148  0024B6  222B               	addwfc	drawCircle@f+1,f,c
 11149                           
 11150                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
 11151  0024B8  501E               	movf	drawCircle@y0,w,c
 11152  0024BA  242E               	addwf	drawCircle@y,w,c
 11153  0024BC  6E18               	movwf	drawPixel@y,c
 11154  0024BE  C022  F019         	movff	drawCircle@color,drawPixel@color
 11155  0024C2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11156  0024C6  501C               	movf	drawCircle@x0,w,c
 11157  0024C8  242C               	addwf	drawCircle@x,w,c
 11158  0024CA  ECA8  F026         	call	_drawPixel
 11159                           
 11160                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
 11161  0024CE  501E               	movf	drawCircle@y0,w,c
 11162  0024D0  242E               	addwf	drawCircle@y,w,c
 11163  0024D2  6E18               	movwf	drawPixel@y,c
 11164  0024D4  C022  F019         	movff	drawCircle@color,drawPixel@color
 11165  0024D8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11166  0024DC  502C               	movf	drawCircle@x,w,c
 11167  0024DE  0800               	sublw	0
 11168  0024E0  241C               	addwf	drawCircle@x0,w,c
 11169  0024E2  ECA8  F026         	call	_drawPixel
 11170                           
 11171                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
 11172  0024E6  502E               	movf	drawCircle@y,w,c
 11173  0024E8  0800               	sublw	0
 11174  0024EA  241E               	addwf	drawCircle@y0,w,c
 11175  0024EC  6E18               	movwf	drawPixel@y,c
 11176  0024EE  C022  F019         	movff	drawCircle@color,drawPixel@color
 11177  0024F2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11178  0024F6  501C               	movf	drawCircle@x0,w,c
 11179  0024F8  242C               	addwf	drawCircle@x,w,c
 11180  0024FA  ECA8  F026         	call	_drawPixel
 11181                           
 11182                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
 11183  0024FE  502E               	movf	drawCircle@y,w,c
 11184  002500  0800               	sublw	0
 11185  002502  241E               	addwf	drawCircle@y0,w,c
 11186  002504  6E18               	movwf	drawPixel@y,c
 11187  002506  C022  F019         	movff	drawCircle@color,drawPixel@color
 11188  00250A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11189  00250E  502C               	movf	drawCircle@x,w,c
 11190  002510  0800               	sublw	0
 11191  002512  241C               	addwf	drawCircle@x0,w,c
 11192  002514  ECA8  F026         	call	_drawPixel
 11193                           
 11194                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
 11195  002518  501E               	movf	drawCircle@y0,w,c
 11196  00251A  242C               	addwf	drawCircle@x,w,c
 11197  00251C  6E18               	movwf	drawPixel@y,c
 11198  00251E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11199  002522  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11200  002526  501C               	movf	drawCircle@x0,w,c
 11201  002528  242E               	addwf	drawCircle@y,w,c
 11202  00252A  ECA8  F026         	call	_drawPixel
 11203                           
 11204                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
 11205  00252E  501E               	movf	drawCircle@y0,w,c
 11206  002530  242C               	addwf	drawCircle@x,w,c
 11207  002532  6E18               	movwf	drawPixel@y,c
 11208  002534  C022  F019         	movff	drawCircle@color,drawPixel@color
 11209  002538  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11210  00253C  502E               	movf	drawCircle@y,w,c
 11211  00253E  0800               	sublw	0
 11212  002540  241C               	addwf	drawCircle@x0,w,c
 11213  002542  ECA8  F026         	call	_drawPixel
 11214                           
 11215                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
 11216  002546  502C               	movf	drawCircle@x,w,c
 11217  002548  0800               	sublw	0
 11218  00254A  241E               	addwf	drawCircle@y0,w,c
 11219  00254C  6E18               	movwf	drawPixel@y,c
 11220  00254E  C022  F019         	movff	drawCircle@color,drawPixel@color
 11221  002552  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11222  002556  501C               	movf	drawCircle@x0,w,c
 11223  002558  242E               	addwf	drawCircle@y,w,c
 11224  00255A  ECA8  F026         	call	_drawPixel
 11225                           
 11226                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
 11227  00255E  502C               	movf	drawCircle@x,w,c
 11228  002560  0800               	sublw	0
 11229  002562  241E               	addwf	drawCircle@y0,w,c
 11230  002564  6E18               	movwf	drawPixel@y,c
 11231  002566  C022  F019         	movff	drawCircle@color,drawPixel@color
 11232  00256A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 11233  00256E  502E               	movf	drawCircle@y,w,c
 11234  002570  0800               	sublw	0
 11235  002572  241C               	addwf	drawCircle@x0,w,c
 11236  002574  ECA8  F026         	call	_drawPixel
 11237  002578  D000               	goto	l6866
 11238  00257A                     l6866:
 11239  00257A  502E               	movf	drawCircle@y,w,c
 11240  00257C  5C2C               	subwf	drawCircle@x,w,c
 11241  00257E  502D               	movf	drawCircle@x+1,w,c
 11242  002580  0A80               	xorlw	128
 11243  002582  6E24               	movwf	??_drawCircle& (0+255),c
 11244  002584  502F               	movf	drawCircle@y+1,w,c
 11245  002586  0A80               	xorlw	128
 11246  002588  5824               	subwfb	??_drawCircle& (0+255),w,c
 11247  00258A  A0D8               	btfss	status,0,c
 11248  00258C  D77E               	goto	l6838
 11249  00258E  0012               	return		;funcret
 11250  002590                     __end_of_drawCircle:
 11251                           	opt stack 0
 11252                           tblptru	equ	0xFF8
 11253                           tblptrh	equ	0xFF7
 11254                           tblptrl	equ	0xFF6
 11255                           tablat	equ	0xFF5
 11256                           prodh	equ	0xFF4
 11257                           prodl	equ	0xFF3
 11258                           intcon	equ	0xFF2
 11259                           intcon2	equ	0xFF1
 11260                           postinc0	equ	0xFEE
 11261                           wreg	equ	0xFE8
 11262                           postdec1	equ	0xFE5
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function _TFT_GreenTab_Initialize *****************
 11271 ;; Defined at:
 11272 ;;		line 644 in file "ST7735_TFT.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;		None
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;		None
 11277 ;; Return value:  Size  Location     Type
 11278 ;;		None               void
 11279 ;; Registers used:
 11280 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;Total ram usage:        0 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    6
 11293 ;; This function calls:
 11294 ;;		_Rcmd1
 11295 ;;		_Rcmd2red
 11296 ;;		_Rcmd3
 11297 ;;		_write_command
 11298 ;;		_write_data
 11299 ;; This function is called by:
 11300 ;;		_Initialize_Screen
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text51
 11305  004D80                     __ptext51:
 11306                           	opt stack 0
 11307  004D80                     _TFT_GreenTab_Initialize:
 11308                           	opt stack 23
 11309                           
 11310                           ;ST7735_TFT.c: 646: PORTBbits.RB6 = 1;
 11311                           
 11312                           ;incstack = 0
 11313  004D80  8C81               	bsf	3969,6,c	;volatile
 11314                           
 11315                           ;ST7735_TFT.c: 647: PORTBbits.RB5 = 0;
 11316  004D82  9A81               	bcf	3969,5,c	;volatile
 11317                           
 11318                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
 11319  004D84  0E80               	movlw	128
 11320  004D86  6EC7               	movwf	4039,c	;volatile
 11321                           
 11322                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
 11323  004D88  0E30               	movlw	48
 11324  004D8A  6EC6               	movwf	4038,c	;volatile
 11325                           
 11326                           ;ST7735_TFT.c: 653: Rcmd1();
 11327  004D8C  EC14  F016         	call	_Rcmd1	;wreg free
 11328                           
 11329                           ;ST7735_TFT.c: 654: Rcmd2red();
 11330  004D90  ECDD  F025         	call	_Rcmd2red	;wreg free
 11331                           
 11332                           ;ST7735_TFT.c: 655: Rcmd3();
 11333  004D94  EC25  F01A         	call	_Rcmd3	;wreg free
 11334                           
 11335                           ;ST7735_TFT.c: 656: write_command(0x36);
 11336  004D98  0E36               	movlw	54
 11337  004D9A  EC0B  F029         	call	_write_command
 11338                           
 11339                           ;ST7735_TFT.c: 657: write_data(0xC0);
 11340  004D9E  0EC0               	movlw	192
 11341  004DA0  EC03  F029         	call	_write_data
 11342                           
 11343                           ;ST7735_TFT.c: 658: _tft_type = 1;
 11344  004DA4  0E01               	movlw	1
 11345  004DA6  0100               	movlb	0	; () banked
 11346  004DA8  6FA5               	movwf	__tft_type& (0+255),b
 11347                           
 11348                           ; BSR set to: 0
 11349  004DAA  0012               	return		;funcret
 11350  004DAC                     __end_of_TFT_GreenTab_Initialize:
 11351                           	opt stack 0
 11352                           tblptru	equ	0xFF8
 11353                           tblptrh	equ	0xFF7
 11354                           tblptrl	equ	0xFF6
 11355                           tablat	equ	0xFF5
 11356                           prodh	equ	0xFF4
 11357                           prodl	equ	0xFF3
 11358                           intcon	equ	0xFF2
 11359                           intcon2	equ	0xFF1
 11360                           postinc0	equ	0xFEE
 11361                           wreg	equ	0xFE8
 11362                           postdec1	equ	0xFE5
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8
 11369                           
 11370 ;; *************** function _Rcmd3 *****************
 11371 ;; Defined at:
 11372 ;;		line 338 in file "ST7735_TFT.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;		None
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;		None
 11377 ;; Return value:  Size  Location     Type
 11378 ;;		None               void
 11379 ;; Registers used:
 11380 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11390 ;;Total ram usage:        0 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    5
 11393 ;; This function calls:
 11394 ;;		_delay_ms
 11395 ;;		_write_command
 11396 ;;		_write_data
 11397 ;; This function is called by:
 11398 ;;		_TFT_GreenTab_Initialize
 11399 ;;		_TFT_BlackTab_Initialize
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           	psect	text52
 11404  00344A                     __ptext52:
 11405                           	opt stack 0
 11406  00344A                     _Rcmd3:
 11407                           	opt stack 23
 11408                           
 11409                           ;ST7735_TFT.c: 340: write_command(0xE0);
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;incstack = 0
 11413  00344A  0EE0               	movlw	224
 11414  00344C  EC0B  F029         	call	_write_command
 11415                           
 11416                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11417  003450  0E02               	movlw	2
 11418  003452  EC03  F029         	call	_write_data
 11419  003456  0E1C               	movlw	28
 11420  003458  EC03  F029         	call	_write_data
 11421  00345C  0E07               	movlw	7
 11422  00345E  EC03  F029         	call	_write_data
 11423  003462  0E12               	movlw	18
 11424  003464  EC03  F029         	call	_write_data
 11425                           
 11426                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11427  003468  0E37               	movlw	55
 11428  00346A  EC03  F029         	call	_write_data
 11429  00346E  0E32               	movlw	50
 11430  003470  EC03  F029         	call	_write_data
 11431  003474  0E29               	movlw	41
 11432  003476  EC03  F029         	call	_write_data
 11433  00347A  0E2D               	movlw	45
 11434  00347C  EC03  F029         	call	_write_data
 11435                           
 11436                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11437  003480  0E29               	movlw	41
 11438  003482  EC03  F029         	call	_write_data
 11439  003486  0E25               	movlw	37
 11440  003488  EC03  F029         	call	_write_data
 11441  00348C  0E2B               	movlw	43
 11442  00348E  EC03  F029         	call	_write_data
 11443  003492  0E39               	movlw	57
 11444  003494  EC03  F029         	call	_write_data
 11445                           
 11446                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11447  003498  0E00               	movlw	0
 11448  00349A  EC03  F029         	call	_write_data
 11449  00349E  0E01               	movlw	1
 11450  0034A0  EC03  F029         	call	_write_data
 11451  0034A4  0E03               	movlw	3
 11452  0034A6  EC03  F029         	call	_write_data
 11453  0034AA  0E10               	movlw	16
 11454  0034AC  EC03  F029         	call	_write_data
 11455                           
 11456                           ;ST7735_TFT.c: 345: write_command(0xE1);
 11457  0034B0  0EE1               	movlw	225
 11458  0034B2  EC0B  F029         	call	_write_command
 11459                           
 11460                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11461  0034B6  0E03               	movlw	3
 11462  0034B8  EC03  F029         	call	_write_data
 11463  0034BC  0E1D               	movlw	29
 11464  0034BE  EC03  F029         	call	_write_data
 11465  0034C2  0E07               	movlw	7
 11466  0034C4  EC03  F029         	call	_write_data
 11467  0034C8  0E06               	movlw	6
 11468  0034CA  EC03  F029         	call	_write_data
 11469                           
 11470                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11471  0034CE  0E2E               	movlw	46
 11472  0034D0  EC03  F029         	call	_write_data
 11473  0034D4  0E2C               	movlw	44
 11474  0034D6  EC03  F029         	call	_write_data
 11475  0034DA  0E29               	movlw	41
 11476  0034DC  EC03  F029         	call	_write_data
 11477  0034E0  0E2D               	movlw	45
 11478  0034E2  EC03  F029         	call	_write_data
 11479                           
 11480                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11481  0034E6  0E2E               	movlw	46
 11482  0034E8  EC03  F029         	call	_write_data
 11483  0034EC  0E2E               	movlw	46
 11484  0034EE  EC03  F029         	call	_write_data
 11485  0034F2  0E37               	movlw	55
 11486  0034F4  EC03  F029         	call	_write_data
 11487  0034F8  0E3F               	movlw	63
 11488  0034FA  EC03  F029         	call	_write_data
 11489                           
 11490                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11491  0034FE  0E00               	movlw	0
 11492  003500  EC03  F029         	call	_write_data
 11493  003504  0E00               	movlw	0
 11494  003506  EC03  F029         	call	_write_data
 11495  00350A  0E02               	movlw	2
 11496  00350C  EC03  F029         	call	_write_data
 11497  003510  0E10               	movlw	16
 11498  003512  EC03  F029         	call	_write_data
 11499                           
 11500                           ;ST7735_TFT.c: 350: write_command(0x13);
 11501  003516  0E13               	movlw	19
 11502  003518  EC0B  F029         	call	_write_command
 11503                           
 11504                           ;ST7735_TFT.c: 351: delay_ms(10);
 11505  00351C  0E00               	movlw	0
 11506  00351E  6E18               	movwf	delay_ms@ms+1,c
 11507  003520  0E0A               	movlw	10
 11508  003522  6E17               	movwf	delay_ms@ms,c
 11509  003524  EC03  F025         	call	_delay_ms	;wreg free
 11510                           
 11511                           ;ST7735_TFT.c: 352: write_command(0x29);
 11512  003528  0E29               	movlw	41
 11513  00352A  EC0B  F029         	call	_write_command
 11514                           
 11515                           ;ST7735_TFT.c: 353: delay_ms(100);
 11516  00352E  0E00               	movlw	0
 11517  003530  6E18               	movwf	delay_ms@ms+1,c
 11518  003532  0E64               	movlw	100
 11519  003534  6E17               	movwf	delay_ms@ms,c
 11520  003536  EC03  F025         	call	_delay_ms	;wreg free
 11521  00353A  0012               	return		;funcret
 11522  00353C                     __end_of_Rcmd3:
 11523                           	opt stack 0
 11524                           tblptru	equ	0xFF8
 11525                           tblptrh	equ	0xFF7
 11526                           tblptrl	equ	0xFF6
 11527                           tablat	equ	0xFF5
 11528                           prodh	equ	0xFF4
 11529                           prodl	equ	0xFF3
 11530                           intcon	equ	0xFF2
 11531                           intcon2	equ	0xFF1
 11532                           postinc0	equ	0xFEE
 11533                           wreg	equ	0xFE8
 11534                           postdec1	equ	0xFE5
 11535                           fsr1l	equ	0xFE1
 11536                           indf2	equ	0xFDF
 11537                           postinc2	equ	0xFDE
 11538                           fsr2h	equ	0xFDA
 11539                           fsr2l	equ	0xFD9
 11540                           status	equ	0xFD8
 11541                           
 11542 ;; *************** function _Rcmd2red *****************
 11543 ;; Defined at:
 11544 ;;		line 328 in file "ST7735_TFT.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;		None
 11549 ;; Return value:  Size  Location     Type
 11550 ;;		None               void
 11551 ;; Registers used:
 11552 ;;		wreg, status,2, cstack
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11562 ;;Total ram usage:        0 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    5
 11565 ;; This function calls:
 11566 ;;		_write_command
 11567 ;;		_write_data
 11568 ;; This function is called by:
 11569 ;;		_TFT_GreenTab_Initialize
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text53
 11574  004BBA                     __ptext53:
 11575                           	opt stack 0
 11576  004BBA                     _Rcmd2red:
 11577                           	opt stack 23
 11578                           
 11579                           ;ST7735_TFT.c: 330: write_command(0x2A);
 11580                           
 11581                           ;incstack = 0
 11582  004BBA  0E2A               	movlw	42
 11583  004BBC  EC0B  F029         	call	_write_command
 11584                           
 11585                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 11586  004BC0  0E00               	movlw	0
 11587  004BC2  EC03  F029         	call	_write_data
 11588  004BC6  0E00               	movlw	0
 11589  004BC8  EC03  F029         	call	_write_data
 11590                           
 11591                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 11592  004BCC  0E00               	movlw	0
 11593  004BCE  EC03  F029         	call	_write_data
 11594  004BD2  0E7F               	movlw	127
 11595  004BD4  EC03  F029         	call	_write_data
 11596                           
 11597                           ;ST7735_TFT.c: 333: write_command(0x2B);
 11598  004BD8  0E2B               	movlw	43
 11599  004BDA  EC0B  F029         	call	_write_command
 11600                           
 11601                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 11602  004BDE  0E00               	movlw	0
 11603  004BE0  EC03  F029         	call	_write_data
 11604  004BE4  0E00               	movlw	0
 11605  004BE6  EC03  F029         	call	_write_data
 11606                           
 11607                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 11608  004BEA  0E00               	movlw	0
 11609  004BEC  EC03  F029         	call	_write_data
 11610  004BF0  0E9F               	movlw	159
 11611  004BF2  EC03  F029         	call	_write_data
 11612  004BF6  0012               	return		;funcret
 11613  004BF8                     __end_of_Rcmd2red:
 11614                           	opt stack 0
 11615                           tblptru	equ	0xFF8
 11616                           tblptrh	equ	0xFF7
 11617                           tblptrl	equ	0xFF6
 11618                           tablat	equ	0xFF5
 11619                           prodh	equ	0xFF4
 11620                           prodl	equ	0xFF3
 11621                           intcon	equ	0xFF2
 11622                           intcon2	equ	0xFF1
 11623                           postinc0	equ	0xFEE
 11624                           wreg	equ	0xFE8
 11625                           postdec1	equ	0xFE5
 11626                           fsr1l	equ	0xFE1
 11627                           indf2	equ	0xFDF
 11628                           postinc2	equ	0xFDE
 11629                           fsr2h	equ	0xFDA
 11630                           fsr2l	equ	0xFD9
 11631                           status	equ	0xFD8
 11632                           
 11633 ;; *************** function _Rcmd1 *****************
 11634 ;; Defined at:
 11635 ;;		line 281 in file "ST7735_TFT.c"
 11636 ;; Parameters:    Size  Location     Type
 11637 ;;		None
 11638 ;; Auto vars:     Size  Location     Type
 11639 ;;		None
 11640 ;; Return value:  Size  Location     Type
 11641 ;;		None               void
 11642 ;; Registers used:
 11643 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11644 ;; Tracked objects:
 11645 ;;		On entry : 0/0
 11646 ;;		On exit  : 0/0
 11647 ;;		Unchanged: 0/0
 11648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;Total ram usage:        0 bytes
 11654 ;; Hardware stack levels used:    1
 11655 ;; Hardware stack levels required when called:    5
 11656 ;; This function calls:
 11657 ;;		_delay_ms
 11658 ;;		_write_command
 11659 ;;		_write_data
 11660 ;; This function is called by:
 11661 ;;		_TFT_GreenTab_Initialize
 11662 ;;		_TFT_BlackTab_Initialize
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           	psect	text54
 11667  002C28                     __ptext54:
 11668                           	opt stack 0
 11669  002C28                     _Rcmd1:
 11670                           	opt stack 23
 11671                           
 11672                           ;ST7735_TFT.c: 283: write_command(0x01);
 11673                           
 11674                           ;incstack = 0
 11675  002C28  0E01               	movlw	1
 11676  002C2A  EC0B  F029         	call	_write_command
 11677                           
 11678                           ;ST7735_TFT.c: 284: delay_ms(150);
 11679  002C2E  0E00               	movlw	0
 11680  002C30  6E18               	movwf	delay_ms@ms+1,c
 11681  002C32  0E96               	movlw	150
 11682  002C34  6E17               	movwf	delay_ms@ms,c
 11683  002C36  EC03  F025         	call	_delay_ms	;wreg free
 11684                           
 11685                           ;ST7735_TFT.c: 285: write_command(0x11);
 11686  002C3A  0E11               	movlw	17
 11687  002C3C  EC0B  F029         	call	_write_command
 11688                           
 11689                           ;ST7735_TFT.c: 286: delay_ms(500);
 11690  002C40  0E01               	movlw	1
 11691  002C42  6E18               	movwf	delay_ms@ms+1,c
 11692  002C44  0EF4               	movlw	244
 11693  002C46  6E17               	movwf	delay_ms@ms,c
 11694  002C48  EC03  F025         	call	_delay_ms	;wreg free
 11695                           
 11696                           ;ST7735_TFT.c: 287: write_command(0xB1);
 11697  002C4C  0EB1               	movlw	177
 11698  002C4E  EC0B  F029         	call	_write_command
 11699                           
 11700                           ;ST7735_TFT.c: 288: write_data(0x01);
 11701  002C52  0E01               	movlw	1
 11702  002C54  EC03  F029         	call	_write_data
 11703                           
 11704                           ;ST7735_TFT.c: 289: write_data(0x2C);
 11705  002C58  0E2C               	movlw	44
 11706  002C5A  EC03  F029         	call	_write_data
 11707                           
 11708                           ;ST7735_TFT.c: 290: write_data(0x2D);
 11709  002C5E  0E2D               	movlw	45
 11710  002C60  EC03  F029         	call	_write_data
 11711                           
 11712                           ;ST7735_TFT.c: 291: write_command(0xB2);
 11713  002C64  0EB2               	movlw	178
 11714  002C66  EC0B  F029         	call	_write_command
 11715                           
 11716                           ;ST7735_TFT.c: 292: write_data(0x01);
 11717  002C6A  0E01               	movlw	1
 11718  002C6C  EC03  F029         	call	_write_data
 11719                           
 11720                           ;ST7735_TFT.c: 293: write_data(0x2C);
 11721  002C70  0E2C               	movlw	44
 11722  002C72  EC03  F029         	call	_write_data
 11723                           
 11724                           ;ST7735_TFT.c: 294: write_data(0x2D);
 11725  002C76  0E2D               	movlw	45
 11726  002C78  EC03  F029         	call	_write_data
 11727                           
 11728                           ;ST7735_TFT.c: 295: write_command(0xB3);
 11729  002C7C  0EB3               	movlw	179
 11730  002C7E  EC0B  F029         	call	_write_command
 11731                           
 11732                           ;ST7735_TFT.c: 296: write_data(0x01);
 11733  002C82  0E01               	movlw	1
 11734  002C84  EC03  F029         	call	_write_data
 11735                           
 11736                           ;ST7735_TFT.c: 297: write_data(0x2C);
 11737  002C88  0E2C               	movlw	44
 11738  002C8A  EC03  F029         	call	_write_data
 11739                           
 11740                           ;ST7735_TFT.c: 298: write_data(0x2D);
 11741  002C8E  0E2D               	movlw	45
 11742  002C90  EC03  F029         	call	_write_data
 11743                           
 11744                           ;ST7735_TFT.c: 299: write_data(0x01);
 11745  002C94  0E01               	movlw	1
 11746  002C96  EC03  F029         	call	_write_data
 11747                           
 11748                           ;ST7735_TFT.c: 300: write_data(0x2C);
 11749  002C9A  0E2C               	movlw	44
 11750  002C9C  EC03  F029         	call	_write_data
 11751                           
 11752                           ;ST7735_TFT.c: 301: write_data(0x2D);
 11753  002CA0  0E2D               	movlw	45
 11754  002CA2  EC03  F029         	call	_write_data
 11755                           
 11756                           ;ST7735_TFT.c: 302: write_command(0xB4);
 11757  002CA6  0EB4               	movlw	180
 11758  002CA8  EC0B  F029         	call	_write_command
 11759                           
 11760                           ;ST7735_TFT.c: 303: write_data(0x07);
 11761  002CAC  0E07               	movlw	7
 11762  002CAE  EC03  F029         	call	_write_data
 11763                           
 11764                           ;ST7735_TFT.c: 304: write_command(0xC0);
 11765  002CB2  0EC0               	movlw	192
 11766  002CB4  EC0B  F029         	call	_write_command
 11767                           
 11768                           ;ST7735_TFT.c: 305: write_data(0xA2);
 11769  002CB8  0EA2               	movlw	162
 11770  002CBA  EC03  F029         	call	_write_data
 11771                           
 11772                           ;ST7735_TFT.c: 306: write_data(0x02);
 11773  002CBE  0E02               	movlw	2
 11774  002CC0  EC03  F029         	call	_write_data
 11775                           
 11776                           ;ST7735_TFT.c: 307: write_data(0x84);
 11777  002CC4  0E84               	movlw	132
 11778  002CC6  EC03  F029         	call	_write_data
 11779                           
 11780                           ;ST7735_TFT.c: 308: write_command(0xC1);
 11781  002CCA  0EC1               	movlw	193
 11782  002CCC  EC0B  F029         	call	_write_command
 11783                           
 11784                           ;ST7735_TFT.c: 309: write_data(0xC5);
 11785  002CD0  0EC5               	movlw	197
 11786  002CD2  EC03  F029         	call	_write_data
 11787                           
 11788                           ;ST7735_TFT.c: 310: write_command(0xC2);
 11789  002CD6  0EC2               	movlw	194
 11790  002CD8  EC0B  F029         	call	_write_command
 11791                           
 11792                           ;ST7735_TFT.c: 311: write_data(0x0A);
 11793  002CDC  0E0A               	movlw	10
 11794  002CDE  EC03  F029         	call	_write_data
 11795                           
 11796                           ;ST7735_TFT.c: 312: write_data(0x00);
 11797  002CE2  0E00               	movlw	0
 11798  002CE4  EC03  F029         	call	_write_data
 11799                           
 11800                           ;ST7735_TFT.c: 313: write_command(0xC3);
 11801  002CE8  0EC3               	movlw	195
 11802  002CEA  EC0B  F029         	call	_write_command
 11803                           
 11804                           ;ST7735_TFT.c: 314: write_data(0x8A);
 11805  002CEE  0E8A               	movlw	138
 11806  002CF0  EC03  F029         	call	_write_data
 11807                           
 11808                           ;ST7735_TFT.c: 315: write_data(0x2A);
 11809  002CF4  0E2A               	movlw	42
 11810  002CF6  EC03  F029         	call	_write_data
 11811                           
 11812                           ;ST7735_TFT.c: 316: write_command(0xC4);
 11813  002CFA  0EC4               	movlw	196
 11814  002CFC  EC0B  F029         	call	_write_command
 11815                           
 11816                           ;ST7735_TFT.c: 317: write_data(0x8A);
 11817  002D00  0E8A               	movlw	138
 11818  002D02  EC03  F029         	call	_write_data
 11819                           
 11820                           ;ST7735_TFT.c: 318: write_data(0xEE);
 11821  002D06  0EEE               	movlw	238
 11822  002D08  EC03  F029         	call	_write_data
 11823                           
 11824                           ;ST7735_TFT.c: 319: write_command(0xC5);
 11825  002D0C  0EC5               	movlw	197
 11826  002D0E  EC0B  F029         	call	_write_command
 11827                           
 11828                           ;ST7735_TFT.c: 320: write_data(0x0E);
 11829  002D12  0E0E               	movlw	14
 11830  002D14  EC03  F029         	call	_write_data
 11831                           
 11832                           ;ST7735_TFT.c: 321: write_command(0x20);
 11833  002D18  0E20               	movlw	32
 11834  002D1A  EC0B  F029         	call	_write_command
 11835                           
 11836                           ;ST7735_TFT.c: 322: write_command(0x36);
 11837  002D1E  0E36               	movlw	54
 11838  002D20  EC0B  F029         	call	_write_command
 11839                           
 11840                           ;ST7735_TFT.c: 323: write_data(0xC8);
 11841  002D24  0EC8               	movlw	200
 11842  002D26  EC03  F029         	call	_write_data
 11843                           
 11844                           ;ST7735_TFT.c: 324: write_command(0x3A);
 11845  002D2A  0E3A               	movlw	58
 11846  002D2C  EC0B  F029         	call	_write_command
 11847                           
 11848                           ;ST7735_TFT.c: 325: write_data(0x05);
 11849  002D30  0E05               	movlw	5
 11850  002D32  EC03  F029         	call	_write_data
 11851  002D36  0012               	return		;funcret
 11852  002D38                     __end_of_Rcmd1:
 11853                           	opt stack 0
 11854                           tblptru	equ	0xFF8
 11855                           tblptrh	equ	0xFF7
 11856                           tblptrl	equ	0xFF6
 11857                           tablat	equ	0xFF5
 11858                           prodh	equ	0xFF4
 11859                           prodl	equ	0xFF3
 11860                           intcon	equ	0xFF2
 11861                           intcon2	equ	0xFF1
 11862                           postinc0	equ	0xFEE
 11863                           wreg	equ	0xFE8
 11864                           postdec1	equ	0xFE5
 11865                           fsr1l	equ	0xFE1
 11866                           indf2	equ	0xFDF
 11867                           postinc2	equ	0xFDE
 11868                           fsr2h	equ	0xFDA
 11869                           fsr2l	equ	0xFD9
 11870                           status	equ	0xFD8
 11871                           
 11872 ;; *************** function _LCD_Reset *****************
 11873 ;; Defined at:
 11874 ;;		line 217 in file "ST7735_TFT.c"
 11875 ;; Parameters:    Size  Location     Type
 11876 ;;		None
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;		None
 11879 ;; Return value:  Size  Location     Type
 11880 ;;		None               void
 11881 ;; Registers used:
 11882 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;Total ram usage:        0 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    5
 11895 ;; This function calls:
 11896 ;;		_delay_ms
 11897 ;; This function is called by:
 11898 ;;		_Initialize_Screen
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           	psect	text55
 11903  00516A                     __ptext55:
 11904                           	opt stack 0
 11905  00516A                     _LCD_Reset:
 11906                           	opt stack 24
 11907                           
 11908                           ;ST7735_TFT.c: 219: PORTCbits.RC1 = 0;
 11909                           
 11910                           ;incstack = 0
 11911  00516A  9282               	bcf	3970,1,c	;volatile
 11912                           
 11913                           ;ST7735_TFT.c: 220: delay_ms(100);
 11914  00516C  0E00               	movlw	0
 11915  00516E  6E18               	movwf	delay_ms@ms+1,c
 11916  005170  0E64               	movlw	100
 11917  005172  6E17               	movwf	delay_ms@ms,c
 11918  005174  EC03  F025         	call	_delay_ms	;wreg free
 11919                           
 11920                           ;ST7735_TFT.c: 221: PORTCbits.RC1 = 1;
 11921  005178  8282               	bsf	3970,1,c	;volatile
 11922  00517A  0012               	return		;funcret
 11923  00517C                     __end_of_LCD_Reset:
 11924                           	opt stack 0
 11925                           tblptru	equ	0xFF8
 11926                           tblptrh	equ	0xFF7
 11927                           tblptrl	equ	0xFF6
 11928                           tablat	equ	0xFF5
 11929                           prodh	equ	0xFF4
 11930                           prodl	equ	0xFF3
 11931                           intcon	equ	0xFF2
 11932                           intcon2	equ	0xFF1
 11933                           postinc0	equ	0xFEE
 11934                           wreg	equ	0xFE8
 11935                           postdec1	equ	0xFE5
 11936                           fsr1l	equ	0xFE1
 11937                           indf2	equ	0xFDF
 11938                           postinc2	equ	0xFDE
 11939                           fsr2h	equ	0xFDA
 11940                           fsr2l	equ	0xFD9
 11941                           status	equ	0xFD8
 11942                           
 11943 ;; *************** function _delay_ms *****************
 11944 ;; Defined at:
 11945 ;;		line 64 in file "ST7735_TFT.c"
 11946 ;; Parameters:    Size  Location     Type
 11947 ;;  ms              2   22[COMRAM] int 
 11948 ;; Auto vars:     Size  Location     Type
 11949 ;;  count           2   26[COMRAM] int 
 11950 ;; Return value:  Size  Location     Type
 11951 ;;		None               void
 11952 ;; Registers used:
 11953 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11954 ;; Tracked objects:
 11955 ;;		On entry : 0/0
 11956 ;;		On exit  : 0/0
 11957 ;;		Unchanged: 0/0
 11958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11959 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11961 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11962 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11963 ;;Total ram usage:        6 bytes
 11964 ;; Hardware stack levels used:    1
 11965 ;; Hardware stack levels required when called:    4
 11966 ;; This function calls:
 11967 ;;		___wmul
 11968 ;; This function is called by:
 11969 ;;		_LCD_Reset
 11970 ;;		_Rcmd1
 11971 ;;		_Rcmd3
 11972 ;;		_Bcmd
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           	psect	text56
 11977  004A06                     __ptext56:
 11978                           	opt stack 0
 11979  004A06                     _delay_ms:
 11980                           	opt stack 23
 11981                           
 11982                           ;ST7735_TFT.c: 70: int count;
 11983                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 11984                           
 11985                           ;incstack = 0
 11986  004A06  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 11987  004A0A  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 11988  004A0E  0E00               	movlw	0
 11989  004A10  6E14               	movwf	___wmul@multiplicand+1,c
 11990  004A12  0E7D               	movlw	125
 11991  004A14  6E13               	movwf	___wmul@multiplicand,c
 11992  004A16  ECFF  F026         	call	___wmul	;wreg free
 11993  004A1A  C011  F01B         	movff	?___wmul,delay_ms@count
 11994  004A1E  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 11995                           
 11996                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 11997  004A22  C01B  F019         	movff	delay_ms@count,??_delay_ms
 11998  004A26  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 11999  004A2A  1E19               	comf	??_delay_ms,f,c
 12000  004A2C  1E1A               	comf	??_delay_ms+1,f,c
 12001  004A2E  4A19               	infsnz	??_delay_ms,f,c
 12002  004A30  2A1A               	incf	??_delay_ms+1,f,c
 12003  004A32  0EFF               	movlw	255
 12004  004A34  2419               	addwf	??_delay_ms,w,c
 12005  004A36  6E1B               	movwf	delay_ms@count,c
 12006  004A38  0EFF               	movlw	255
 12007  004A3A  201A               	addwfc	??_delay_ms+1,w,c
 12008  004A3C  6E1C               	movwf	delay_ms@count+1,c
 12009                           
 12010                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 12011  004A3E  0E03               	movlw	3
 12012  004A40  6ED5               	movwf	4053,c	;volatile
 12013                           
 12014                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 12015  004A42  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 12016                           
 12017                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 12018  004A46  501C               	movf	delay_ms@count+1,w,c
 12019  004A48  6ED7               	movwf	4055,c	;volatile
 12020                           
 12021                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 12022  004A4A  94F2               	bcf	intcon,2,c	;volatile
 12023                           
 12024                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 12025  004A4C  8ED5               	bsf	4053,7,c	;volatile
 12026                           
 12027                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 12028  004A4E  D000               	goto	l683
 12029  004A50                     l683:
 12030  004A50  A4F2               	btfss	intcon,2,c	;volatile
 12031  004A52  D7FE               	goto	l683
 12032                           
 12033                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 12034  004A54  9ED5               	bcf	4053,7,c	;volatile
 12035  004A56  0012               	return		;funcret
 12036  004A58                     __end_of_delay_ms:
 12037                           	opt stack 0
 12038                           tblptru	equ	0xFF8
 12039                           tblptrh	equ	0xFF7
 12040                           tblptrl	equ	0xFF6
 12041                           tablat	equ	0xFF5
 12042                           prodh	equ	0xFF4
 12043                           prodl	equ	0xFF3
 12044                           intcon	equ	0xFF2
 12045                           intcon2	equ	0xFF1
 12046                           postinc0	equ	0xFEE
 12047                           wreg	equ	0xFE8
 12048                           postdec1	equ	0xFE5
 12049                           fsr1l	equ	0xFE1
 12050                           indf2	equ	0xFDF
 12051                           postinc2	equ	0xFDE
 12052                           fsr2h	equ	0xFDA
 12053                           fsr2l	equ	0xFD9
 12054                           status	equ	0xFD8
 12055                           
 12056 ;; *************** function _DS3231_Write_Alarm_Time *****************
 12057 ;; Defined at:
 12058 ;;		line 169 in file "I2C_Support.c"
 12059 ;; Parameters:    Size  Location     Type
 12060 ;;		None
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;  Address         1   74[COMRAM] unsigned char 
 12063 ;;  Device          1   73[COMRAM] unsigned char 
 12064 ;; Return value:  Size  Location     Type
 12065 ;;		None               void
 12066 ;; Registers used:
 12067 ;;		wreg, status,2, status,0, cstack
 12068 ;; Tracked objects:
 12069 ;;		On entry : 0/0
 12070 ;;		On exit  : 0/0
 12071 ;;		Unchanged: 0/0
 12072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12076 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12077 ;;Total ram usage:        2 bytes
 12078 ;; Hardware stack levels used:    1
 12079 ;; Hardware stack levels required when called:    7
 12080 ;; This function calls:
 12081 ;;		_DS3231_Read_Time
 12082 ;;		_I2C_Start
 12083 ;;		_I2C_Stop
 12084 ;;		_I2C_Write
 12085 ;;		_dec_2_bcd
 12086 ;; This function is called by:
 12087 ;;		_Do_Save_New_Alarm_Time
 12088 ;; This function uses a non-reentrant model
 12089 ;;
 12090                           
 12091                           	psect	text57
 12092  004438                     __ptext57:
 12093                           	opt stack 0
 12094  004438                     _DS3231_Write_Alarm_Time:
 12095                           	opt stack 21
 12096                           
 12097                           ;I2C_Support.c: 171: DS3231_Read_Time();
 12098                           
 12099                           ;incstack = 0
 12100  004438  EC08  F023         	call	_DS3231_Read_Time	;wreg free
 12101                           
 12102                           ;I2C_Support.c: 172: alarm_date = day;
 12103  00443C  C067  F0A6         	movff	_day,_alarm_date
 12104                           
 12105                           ;I2C_Support.c: 173: char Device = 0x68;
 12106  004440  0E68               	movlw	104
 12107  004442  6E4A               	movwf	DS3231_Write_Alarm_Time@Device,c
 12108                           
 12109                           ;I2C_Support.c: 174: char Address = 0x07;
 12110  004444  0E07               	movlw	7
 12111  004446  6E4B               	movwf	DS3231_Write_Alarm_Time@Address,c
 12112                           
 12113                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 12114  004448  506E               	movf	_setup_alarm_hour,w,c
 12115  00444A  EC5A  F024         	call	_dec_2_bcd
 12116  00444E  5043               	movf	?_dec_2_bcd,w,c
 12117  004450  6E64               	movwf	_alarm_hour,c
 12118                           
 12119                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 12120  004452  0100               	movlb	0	; () banked
 12121  004454  51AB               	movf	_setup_alarm_minute& (0+255),w,b
 12122  004456  EC5A  F024         	call	_dec_2_bcd
 12123  00445A  5043               	movf	?_dec_2_bcd,w,c
 12124  00445C  6E65               	movwf	_alarm_minute,c
 12125                           
 12126                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 12127  00445E  0100               	movlb	0	; () banked
 12128  004460  51AC               	movf	_setup_alarm_second& (0+255),w,b
 12129  004462  EC5A  F024         	call	_dec_2_bcd
 12130  004466  5043               	movf	?_dec_2_bcd,w,c
 12131  004468  6E66               	movwf	_alarm_second,c
 12132                           
 12133                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 12134  00446A  5066               	movf	_alarm_second,w,c
 12135  00446C  0B7F               	andlw	127
 12136  00446E  6E66               	movwf	_alarm_second,c
 12137                           
 12138                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 12139  004470  5065               	movf	_alarm_minute,w,c
 12140  004472  0B7F               	andlw	127
 12141  004474  6E65               	movwf	_alarm_minute,c
 12142                           
 12143                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 12144  004476  5064               	movf	_alarm_hour,w,c
 12145  004478  0B7F               	andlw	127
 12146  00447A  6E64               	movwf	_alarm_hour,c
 12147                           
 12148                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 12149  00447C  0100               	movlb	0	; () banked
 12150  00447E  51A6               	movf	_alarm_date& (0+255),w,b
 12151  004480  0980               	iorlw	128
 12152  004482  0100               	movlb	0	; () banked
 12153  004484  6FA6               	movwf	_alarm_date& (0+255),b
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;I2C_Support.c: 182: I2C_Start();
 12157  004486  ECD9  F028         	call	_I2C_Start	;wreg free
 12158                           
 12159                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 12160  00448A  504A               	movf	DS3231_Write_Alarm_Time@Device,w,c
 12161  00448C  244A               	addwf	DS3231_Write_Alarm_Time@Device,w,c
 12162  00448E  EC1B  F026         	call	_I2C_Write
 12163                           
 12164                           ;I2C_Support.c: 184: I2C_Write(Address);
 12165  004492  504B               	movf	DS3231_Write_Alarm_Time@Address,w,c
 12166  004494  EC1B  F026         	call	_I2C_Write
 12167                           
 12168                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 12169  004498  5066               	movf	_alarm_second,w,c
 12170  00449A  EC1B  F026         	call	_I2C_Write
 12171                           
 12172                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 12173  00449E  5065               	movf	_alarm_minute,w,c
 12174  0044A0  EC1B  F026         	call	_I2C_Write
 12175                           
 12176                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 12177  0044A4  5064               	movf	_alarm_hour,w,c
 12178  0044A6  EC1B  F026         	call	_I2C_Write
 12179                           
 12180                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 12181  0044AA  0100               	movlb	0	; () banked
 12182  0044AC  51A6               	movf	_alarm_date& (0+255),w,b
 12183  0044AE  EC1B  F026         	call	_I2C_Write
 12184                           
 12185                           ;I2C_Support.c: 190: I2C_Stop();
 12186  0044B2  ECD0  F028         	call	_I2C_Stop	;wreg free
 12187  0044B6  0012               	return		;funcret
 12188  0044B8                     __end_of_DS3231_Write_Alarm_Time:
 12189                           	opt stack 0
 12190                           tblptru	equ	0xFF8
 12191                           tblptrh	equ	0xFF7
 12192                           tblptrl	equ	0xFF6
 12193                           tablat	equ	0xFF5
 12194                           prodh	equ	0xFF4
 12195                           prodl	equ	0xFF3
 12196                           intcon	equ	0xFF2
 12197                           intcon2	equ	0xFF1
 12198                           postinc0	equ	0xFEE
 12199                           wreg	equ	0xFE8
 12200                           postdec1	equ	0xFE5
 12201                           fsr1l	equ	0xFE1
 12202                           indf2	equ	0xFDF
 12203                           postinc2	equ	0xFDE
 12204                           fsr2h	equ	0xFDA
 12205                           fsr2l	equ	0xFD9
 12206                           status	equ	0xFD8
 12207                           
 12208 ;; *************** function _dec_2_bcd *****************
 12209 ;; Defined at:
 12210 ;;		line 54 in file "utils.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;  dec             1    wreg     unsigned char 
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;  dec             1   72[COMRAM] unsigned char 
 12215 ;;  bcd             2   70[COMRAM] int 
 12216 ;; Return value:  Size  Location     Type
 12217 ;;                  2   66[COMRAM] int 
 12218 ;; Registers used:
 12219 ;;		wreg, status,2, status,0, cstack
 12220 ;; Tracked objects:
 12221 ;;		On entry : 0/0
 12222 ;;		On exit  : 0/0
 12223 ;;		Unchanged: 0/0
 12224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12225 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12226 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12228 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12229 ;;Total ram usage:        7 bytes
 12230 ;; Hardware stack levels used:    1
 12231 ;; Hardware stack levels required when called:    4
 12232 ;; This function calls:
 12233 ;;		___awdiv
 12234 ;;		___awmod
 12235 ;; This function is called by:
 12236 ;;		_DS3231_Write_Time
 12237 ;;		_DS3231_Write_Alarm_Time
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           
 12241                           	psect	text58
 12242  0048B4                     __ptext58:
 12243                           	opt stack 0
 12244  0048B4                     _dec_2_bcd:
 12245                           	opt stack 23
 12246                           
 12247                           ;incstack = 0
 12248                           ;dec_2_bcd@dec stored from wreg
 12249  0048B4  6E49               	movwf	dec_2_bcd@dec,c
 12250                           
 12251                           ;utils.c: 56: int bcd;
 12252                           ;utils.c: 57: bcd = ((dec / 10) << 4) + (dec % 10);
 12253  0048B6  C049  F017         	movff	dec_2_bcd@dec,___awdiv@dividend
 12254  0048BA  6A18               	clrf	___awdiv@dividend+1,c
 12255  0048BC  0E00               	movlw	0
 12256  0048BE  6E1A               	movwf	___awdiv@divisor+1,c
 12257  0048C0  0E0A               	movlw	10
 12258  0048C2  6E19               	movwf	___awdiv@divisor,c
 12259  0048C4  ECE4  F01F         	call	___awdiv	;wreg free
 12260  0048C8  C017  F045         	movff	?___awdiv,??_dec_2_bcd
 12261  0048CC  C018  F046         	movff	?___awdiv+1,??_dec_2_bcd+1
 12262  0048D0  3A45               	swapf	??_dec_2_bcd,f,c
 12263  0048D2  3A46               	swapf	??_dec_2_bcd+1,f,c
 12264  0048D4  0EF0               	movlw	240
 12265  0048D6  1646               	andwf	??_dec_2_bcd+1,f,c
 12266  0048D8  5045               	movf	??_dec_2_bcd,w,c
 12267  0048DA  0B0F               	andlw	15
 12268  0048DC  1246               	iorwf	??_dec_2_bcd+1,f,c
 12269  0048DE  0EF0               	movlw	240
 12270  0048E0  1645               	andwf	??_dec_2_bcd,f,c
 12271  0048E2  C049  F03D         	movff	dec_2_bcd@dec,___awmod@dividend
 12272  0048E6  6A3E               	clrf	___awmod@dividend+1,c
 12273  0048E8  0E00               	movlw	0
 12274  0048EA  6E40               	movwf	___awmod@divisor+1,c
 12275  0048EC  0E0A               	movlw	10
 12276  0048EE  6E3F               	movwf	___awmod@divisor,c
 12277  0048F0  ECDB  F021         	call	___awmod	;wreg free
 12278  0048F4  503D               	movf	?___awmod,w,c
 12279  0048F6  2445               	addwf	??_dec_2_bcd,w,c
 12280  0048F8  6E47               	movwf	dec_2_bcd@bcd,c
 12281  0048FA  503E               	movf	?___awmod+1,w,c
 12282  0048FC  2046               	addwfc	??_dec_2_bcd+1,w,c
 12283  0048FE  6E48               	movwf	dec_2_bcd@bcd+1,c
 12284                           
 12285                           ;utils.c: 58: return bcd;
 12286  004900  C047  F043         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 12287  004904  C048  F044         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 12288  004908  D000               	goto	l1316
 12289  00490A                     l1316:
 12290  00490A  0012               	return		;funcret
 12291  00490C                     __end_of_dec_2_bcd:
 12292                           	opt stack 0
 12293                           tblptru	equ	0xFF8
 12294                           tblptrh	equ	0xFF7
 12295                           tblptrl	equ	0xFF6
 12296                           tablat	equ	0xFF5
 12297                           prodh	equ	0xFF4
 12298                           prodl	equ	0xFF3
 12299                           intcon	equ	0xFF2
 12300                           intcon2	equ	0xFF1
 12301                           postinc0	equ	0xFEE
 12302                           wreg	equ	0xFE8
 12303                           postdec1	equ	0xFE5
 12304                           fsr1l	equ	0xFE1
 12305                           indf2	equ	0xFDF
 12306                           postinc2	equ	0xFDE
 12307                           fsr2h	equ	0xFDA
 12308                           fsr2l	equ	0xFD9
 12309                           status	equ	0xFD8
 12310                           
 12311 ;; *************** function _DS3231_Read_Time *****************
 12312 ;; Defined at:
 12313 ;;		line 45 in file "I2C_Support.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;		None
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;  Device          1   20[COMRAM] unsigned char 
 12318 ;;  Address         1   19[COMRAM] unsigned char 
 12319 ;; Return value:  Size  Location     Type
 12320 ;;		None               void
 12321 ;; Registers used:
 12322 ;;		wreg, status,2, status,0, cstack
 12323 ;; Tracked objects:
 12324 ;;		On entry : 0/0
 12325 ;;		On exit  : 0/0
 12326 ;;		Unchanged: 0/0
 12327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12331 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12332 ;;Total ram usage:        2 bytes
 12333 ;; Hardware stack levels used:    1
 12334 ;; Hardware stack levels required when called:    6
 12335 ;; This function calls:
 12336 ;;		_I2C_ReStart
 12337 ;;		_I2C_Read
 12338 ;;		_I2C_Start
 12339 ;;		_I2C_Stop
 12340 ;;		_I2C_Write
 12341 ;; This function is called by:
 12342 ;;		_DS3231_Write_Alarm_Time
 12343 ;;		_main
 12344 ;;		_Exit_Setup_Alarm_Time
 12345 ;;		_Do_Save_New_Alarm_Time
 12346 ;;		_Exit_Setup_Heater_Temp
 12347 ;;		_Do_Save_New_Heater_Temp
 12348 ;;		_Do_Setup_Time
 12349 ;;		_Do_Save_New_Time
 12350 ;;		_Exit_Time_Setup
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           	psect	text59
 12355  004610                     __ptext59:
 12356                           	opt stack 0
 12357  004610                     _DS3231_Read_Time:
 12358                           	opt stack 22
 12359                           
 12360                           ;I2C_Support.c: 47: char Device = 0x68;
 12361                           
 12362                           ;incstack = 0
 12363  004610  0E68               	movlw	104
 12364  004612  6E15               	movwf	DS3231_Read_Time@Device,c
 12365                           
 12366                           ;I2C_Support.c: 48: char Address = 0x00;
 12367  004614  0E00               	movlw	0
 12368  004616  6E14               	movwf	DS3231_Read_Time@Address,c
 12369                           
 12370                           ;I2C_Support.c: 50: I2C_Start();
 12371  004618  ECD9  F028         	call	_I2C_Start	;wreg free
 12372                           
 12373                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12374  00461C  5015               	movf	DS3231_Read_Time@Device,w,c
 12375  00461E  2415               	addwf	DS3231_Read_Time@Device,w,c
 12376  004620  EC1B  F026         	call	_I2C_Write
 12377                           
 12378                           ;I2C_Support.c: 52: I2C_Write(Address);
 12379  004624  5014               	movf	DS3231_Read_Time@Address,w,c
 12380  004626  EC1B  F026         	call	_I2C_Write
 12381                           
 12382                           ;I2C_Support.c: 53: I2C_ReStart();
 12383  00462A  EC79  F028         	call	_I2C_ReStart	;wreg free
 12384                           
 12385                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12386  00462E  80D8               	bsf	status,0,c
 12387  004630  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12388  004632  EC1B  F026         	call	_I2C_Write
 12389                           
 12390                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12391  004636  0E01               	movlw	1
 12392  004638  EC78  F025         	call	_I2C_Read
 12393  00463C  6E6D               	movwf	_second,c
 12394                           
 12395                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12396  00463E  0E01               	movlw	1
 12397  004640  EC78  F025         	call	_I2C_Read
 12398  004644  6E6B               	movwf	_minute,c
 12399                           
 12400                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12401  004646  0E01               	movlw	1
 12402  004648  EC78  F025         	call	_I2C_Read
 12403  00464C  6E6A               	movwf	_hour,c
 12404                           
 12405                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12406  00464E  0E01               	movlw	1
 12407  004650  EC78  F025         	call	_I2C_Read
 12408  004654  0100               	movlb	0	; () banked
 12409  004656  6FA9               	movwf	_dow& (0+255),b
 12410                           
 12411                           ; BSR set to: 0
 12412                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12413  004658  0E01               	movlw	1
 12414  00465A  EC78  F025         	call	_I2C_Read
 12415  00465E  6E67               	movwf	_day,c
 12416                           
 12417                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12418  004660  0E01               	movlw	1
 12419  004662  EC78  F025         	call	_I2C_Read
 12420  004666  6E6C               	movwf	_month,c
 12421                           
 12422                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12423  004668  0E00               	movlw	0
 12424  00466A  EC78  F025         	call	_I2C_Read
 12425  00466E  6E6F               	movwf	_year,c
 12426                           
 12427                           ;I2C_Support.c: 62: I2C_Stop();
 12428  004670  ECD0  F028         	call	_I2C_Stop	;wreg free
 12429  004674  0012               	return		;funcret
 12430  004676                     __end_of_DS3231_Read_Time:
 12431                           	opt stack 0
 12432                           tblptru	equ	0xFF8
 12433                           tblptrh	equ	0xFF7
 12434                           tblptrl	equ	0xFF6
 12435                           tablat	equ	0xFF5
 12436                           prodh	equ	0xFF4
 12437                           prodl	equ	0xFF3
 12438                           intcon	equ	0xFF2
 12439                           intcon2	equ	0xFF1
 12440                           postinc0	equ	0xFEE
 12441                           wreg	equ	0xFE8
 12442                           postdec1	equ	0xFE5
 12443                           fsr1l	equ	0xFE1
 12444                           indf2	equ	0xFDF
 12445                           postinc2	equ	0xFDE
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8
 12449                           
 12450 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12451 ;; Defined at:
 12452 ;;		line 115 in file "I2C_Support.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;		None
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;  Device          1   20[COMRAM] unsigned char 
 12457 ;;  Address         1   19[COMRAM] unsigned char 
 12458 ;; Return value:  Size  Location     Type
 12459 ;;		None               void
 12460 ;; Registers used:
 12461 ;;		wreg, status,2, status,0, cstack
 12462 ;; Tracked objects:
 12463 ;;		On entry : 0/0
 12464 ;;		On exit  : 0/0
 12465 ;;		Unchanged: 0/0
 12466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12470 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12471 ;;Total ram usage:        2 bytes
 12472 ;; Hardware stack levels used:    1
 12473 ;; Hardware stack levels required when called:    6
 12474 ;; This function calls:
 12475 ;;		_I2C_ReStart
 12476 ;;		_I2C_Read
 12477 ;;		_I2C_Start
 12478 ;;		_I2C_Stop
 12479 ;;		_I2C_Write
 12480 ;; This function is called by:
 12481 ;;		_main
 12482 ;;		_Do_Setup_Alarm_Time
 12483 ;;		_Do_Save_New_Alarm_Time
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           	psect	text60
 12488  004A58                     __ptext60:
 12489                           	opt stack 0
 12490  004A58                     _DS3231_Read_Alarm_Time:
 12491                           	opt stack 22
 12492                           
 12493                           ;I2C_Support.c: 117: char Device = 0x68;
 12494                           
 12495                           ;incstack = 0
 12496  004A58  0E68               	movlw	104
 12497  004A5A  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12498                           
 12499                           ;I2C_Support.c: 118: char Address = 0x07;
 12500  004A5C  0E07               	movlw	7
 12501  004A5E  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12502                           
 12503                           ;I2C_Support.c: 119: I2C_Start();
 12504  004A60  ECD9  F028         	call	_I2C_Start	;wreg free
 12505                           
 12506                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 12507  004A64  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12508  004A66  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12509  004A68  EC1B  F026         	call	_I2C_Write
 12510                           
 12511                           ;I2C_Support.c: 121: I2C_Write(Address);
 12512  004A6C  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 12513  004A6E  EC1B  F026         	call	_I2C_Write
 12514                           
 12515                           ;I2C_Support.c: 122: I2C_ReStart();
 12516  004A72  EC79  F028         	call	_I2C_ReStart	;wreg free
 12517                           
 12518                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 12519  004A76  80D8               	bsf	status,0,c
 12520  004A78  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 12521  004A7A  EC1B  F026         	call	_I2C_Write
 12522                           
 12523                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 12524  004A7E  0E01               	movlw	1
 12525  004A80  EC78  F025         	call	_I2C_Read
 12526  004A84  6E66               	movwf	_alarm_second,c
 12527                           
 12528                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 12529  004A86  0E01               	movlw	1
 12530  004A88  EC78  F025         	call	_I2C_Read
 12531  004A8C  6E65               	movwf	_alarm_minute,c
 12532                           
 12533                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 12534  004A8E  0E01               	movlw	1
 12535  004A90  EC78  F025         	call	_I2C_Read
 12536  004A94  6E64               	movwf	_alarm_hour,c
 12537                           
 12538                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 12539  004A96  0E00               	movlw	0
 12540  004A98  EC78  F025         	call	_I2C_Read
 12541  004A9C  0100               	movlb	0	; () banked
 12542  004A9E  6FA6               	movwf	_alarm_date& (0+255),b
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;I2C_Support.c: 128: I2C_Stop();
 12546  004AA0  ECD0  F028         	call	_I2C_Stop	;wreg free
 12547  004AA4  0012               	return		;funcret
 12548  004AA6                     __end_of_DS3231_Read_Alarm_Time:
 12549                           	opt stack 0
 12550                           tblptru	equ	0xFF8
 12551                           tblptrh	equ	0xFF7
 12552                           tblptrl	equ	0xFF6
 12553                           tablat	equ	0xFF5
 12554                           prodh	equ	0xFF4
 12555                           prodl	equ	0xFF3
 12556                           intcon	equ	0xFF2
 12557                           intcon2	equ	0xFF1
 12558                           postinc0	equ	0xFEE
 12559                           wreg	equ	0xFE8
 12560                           postdec1	equ	0xFE5
 12561                           fsr1l	equ	0xFE1
 12562                           indf2	equ	0xFDF
 12563                           postinc2	equ	0xFDE
 12564                           fsr2h	equ	0xFDA
 12565                           fsr2l	equ	0xFD9
 12566                           status	equ	0xFD8
 12567                           
 12568 ;; *************** function _Do_Beep_Good *****************
 12569 ;; Defined at:
 12570 ;;		line 71 in file "utils.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;		None
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;		None
 12575 ;; Return value:  Size  Location     Type
 12576 ;;		None               void
 12577 ;; Registers used:
 12578 ;;		wreg, status,2, status,0, cstack
 12579 ;; Tracked objects:
 12580 ;;		On entry : 0/0
 12581 ;;		On exit  : 0/0
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;Total ram usage:        0 bytes
 12589 ;; Hardware stack levels used:    1
 12590 ;; Hardware stack levels required when called:    6
 12591 ;; This function calls:
 12592 ;;		_Activate_Buzzer_2KHz
 12593 ;;		_Deactivate_Buzzer
 12594 ;;		_Wait_One_Sec
 12595 ;;		_do_update_pwm
 12596 ;; This function is called by:
 12597 ;;		_main
 12598 ;;		_Do_Setup_Alarm_Time
 12599 ;;		_Do_Setup_Heater_Temp
 12600 ;;		_Do_Setup_Time
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           	psect	text61
 12605  005096                     __ptext61:
 12606                           	opt stack 0
 12607  005096                     _Do_Beep_Good:
 12608                           	opt stack 23
 12609                           
 12610                           ;utils.c: 74: PORTBbits.RB7 = 1;
 12611                           
 12612                           ;incstack = 0
 12613  005096  8E81               	bsf	3969,7,c	;volatile
 12614                           
 12615                           ;utils.c: 75: Activate_Buzzer_2KHz();
 12616  005098  ECBE  F028         	call	_Activate_Buzzer_2KHz	;wreg free
 12617                           
 12618                           ;utils.c: 76: Wait_One_Sec();
 12619  00509C  EC0A  F028         	call	_Wait_One_Sec	;wreg free
 12620                           
 12621                           ;utils.c: 77: PORTBbits.RB7 = 0;
 12622  0050A0  9E81               	bcf	3969,7,c	;volatile
 12623                           
 12624                           ;utils.c: 78: Deactivate_Buzzer();
 12625  0050A2  EC47  F029         	call	_Deactivate_Buzzer	;wreg free
 12626                           
 12627                           ;utils.c: 79: do_update_pwm(duty_cycle);
 12628  0050A6  5068               	movf	_duty_cycle,w,c
 12629  0050A8  ECA6  F01E         	call	_do_update_pwm
 12630  0050AC  0012               	return		;funcret
 12631  0050AE                     __end_of_Do_Beep_Good:
 12632                           	opt stack 0
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           intcon2	equ	0xFF1
 12641                           postinc0	equ	0xFEE
 12642                           wreg	equ	0xFE8
 12643                           postdec1	equ	0xFE5
 12644                           fsr1l	equ	0xFE1
 12645                           indf2	equ	0xFDF
 12646                           postinc2	equ	0xFDE
 12647                           fsr2h	equ	0xFDA
 12648                           fsr2l	equ	0xFD9
 12649                           status	equ	0xFD8
 12650                           
 12651 ;; *************** function _Activate_Buzzer_2KHz *****************
 12652 ;; Defined at:
 12653 ;;		line 115 in file "utils.c"
 12654 ;; Parameters:    Size  Location     Type
 12655 ;;		None
 12656 ;; Auto vars:     Size  Location     Type
 12657 ;;		None
 12658 ;; Return value:  Size  Location     Type
 12659 ;;		None               void
 12660 ;; Registers used:
 12661 ;;		wreg, status,2
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12671 ;;Total ram usage:        0 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    3
 12674 ;; This function calls:
 12675 ;;		Nothing
 12676 ;; This function is called by:
 12677 ;;		_Do_Beep_Good
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           	psect	text62
 12682  00517C                     __ptext62:
 12683                           	opt stack 0
 12684  00517C                     _Activate_Buzzer_2KHz:
 12685                           	opt stack 25
 12686                           
 12687                           ;utils.c: 118: PR2 = 0b11111001 ;
 12688                           
 12689                           ;incstack = 0
 12690  00517C  0EF9               	movlw	249
 12691  00517E  6ECB               	movwf	4043,c	;volatile
 12692                           
 12693                           ;utils.c: 119: T2CON = 0b00000101 ;
 12694  005180  0E05               	movlw	5
 12695  005182  6ECA               	movwf	4042,c	;volatile
 12696                           
 12697                           ;utils.c: 120: CCPR2L = 0b01111100 ;
 12698  005184  0E7C               	movlw	124
 12699  005186  6EBB               	movwf	4027,c	;volatile
 12700                           
 12701                           ;utils.c: 121: CCP2CON = 0b00111100 ;
 12702  005188  0E3C               	movlw	60
 12703  00518A  6EBA               	movwf	4026,c	;volatile
 12704  00518C  0012               	return		;funcret
 12705  00518E                     __end_of_Activate_Buzzer_2KHz:
 12706                           	opt stack 0
 12707                           tblptru	equ	0xFF8
 12708                           tblptrh	equ	0xFF7
 12709                           tblptrl	equ	0xFF6
 12710                           tablat	equ	0xFF5
 12711                           prodh	equ	0xFF4
 12712                           prodl	equ	0xFF3
 12713                           intcon	equ	0xFF2
 12714                           intcon2	equ	0xFF1
 12715                           postinc0	equ	0xFEE
 12716                           wreg	equ	0xFE8
 12717                           postdec1	equ	0xFE5
 12718                           fsr1l	equ	0xFE1
 12719                           indf2	equ	0xFDF
 12720                           postinc2	equ	0xFDE
 12721                           fsr2h	equ	0xFDA
 12722                           fsr2l	equ	0xFD9
 12723                           status	equ	0xFD8
 12724                           
 12725 ;; *************** function _Do_Beep_Bad *****************
 12726 ;; Defined at:
 12727 ;;		line 82 in file "utils.c"
 12728 ;; Parameters:    Size  Location     Type
 12729 ;;		None
 12730 ;; Auto vars:     Size  Location     Type
 12731 ;;		None
 12732 ;; Return value:  Size  Location     Type
 12733 ;;		None               void
 12734 ;; Registers used:
 12735 ;;		wreg, status,2, status,0, cstack
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12745 ;;Total ram usage:        0 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:    6
 12748 ;; This function calls:
 12749 ;;		_Activate_Buzzer_500Hz
 12750 ;;		_Deactivate_Buzzer
 12751 ;;		_Wait_One_Sec
 12752 ;;		_do_update_pwm
 12753 ;; This function is called by:
 12754 ;;		_main
 12755 ;;		_Do_Setup_Alarm_Time
 12756 ;;		_Do_Setup_Heater_Temp
 12757 ;;		_Do_Setup_Time
 12758 ;; This function uses a non-reentrant model
 12759 ;;
 12760                           
 12761                           	psect	text63
 12762  0050AE                     __ptext63:
 12763                           	opt stack 0
 12764  0050AE                     _Do_Beep_Bad:
 12765                           	opt stack 23
 12766                           
 12767                           ;utils.c: 85: PORTBbits.RB7 = 1;
 12768                           
 12769                           ;incstack = 0
 12770  0050AE  8E81               	bsf	3969,7,c	;volatile
 12771                           
 12772                           ;utils.c: 86: Activate_Buzzer_500Hz();
 12773  0050B0  ECC7  F028         	call	_Activate_Buzzer_500Hz	;wreg free
 12774                           
 12775                           ;utils.c: 87: Wait_One_Sec();
 12776  0050B4  EC0A  F028         	call	_Wait_One_Sec	;wreg free
 12777                           
 12778                           ;utils.c: 88: PORTBbits.RB7 = 0;
 12779  0050B8  9E81               	bcf	3969,7,c	;volatile
 12780                           
 12781                           ;utils.c: 89: Deactivate_Buzzer();
 12782  0050BA  EC47  F029         	call	_Deactivate_Buzzer	;wreg free
 12783                           
 12784                           ;utils.c: 90: do_update_pwm(duty_cycle);
 12785  0050BE  5068               	movf	_duty_cycle,w,c
 12786  0050C0  ECA6  F01E         	call	_do_update_pwm
 12787  0050C4  0012               	return		;funcret
 12788  0050C6                     __end_of_Do_Beep_Bad:
 12789                           	opt stack 0
 12790                           tblptru	equ	0xFF8
 12791                           tblptrh	equ	0xFF7
 12792                           tblptrl	equ	0xFF6
 12793                           tablat	equ	0xFF5
 12794                           prodh	equ	0xFF4
 12795                           prodl	equ	0xFF3
 12796                           intcon	equ	0xFF2
 12797                           intcon2	equ	0xFF1
 12798                           postinc0	equ	0xFEE
 12799                           wreg	equ	0xFE8
 12800                           postdec1	equ	0xFE5
 12801                           fsr1l	equ	0xFE1
 12802                           indf2	equ	0xFDF
 12803                           postinc2	equ	0xFDE
 12804                           fsr2h	equ	0xFDA
 12805                           fsr2l	equ	0xFD9
 12806                           status	equ	0xFD8
 12807                           
 12808 ;; *************** function _Wait_One_Sec *****************
 12809 ;; Defined at:
 12810 ;;		line 93 in file "utils.c"
 12811 ;; Parameters:    Size  Location     Type
 12812 ;;		None
 12813 ;; Auto vars:     Size  Location     Type
 12814 ;;  k               2   16[COMRAM] int 
 12815 ;; Return value:  Size  Location     Type
 12816 ;;		None               void
 12817 ;; Registers used:
 12818 ;;		wreg, status,2, status,0
 12819 ;; Tracked objects:
 12820 ;;		On entry : 0/0
 12821 ;;		On exit  : 0/0
 12822 ;;		Unchanged: 0/0
 12823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12825 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12828 ;;Total ram usage:        2 bytes
 12829 ;; Hardware stack levels used:    1
 12830 ;; Hardware stack levels required when called:    3
 12831 ;; This function calls:
 12832 ;;		Nothing
 12833 ;; This function is called by:
 12834 ;;		_Do_Beep_Good
 12835 ;;		_Do_Beep_Bad
 12836 ;;		_Do_Beep
 12837 ;; This function uses a non-reentrant model
 12838 ;;
 12839                           
 12840                           	psect	text64
 12841  005014                     __ptext64:
 12842                           	opt stack 0
 12843  005014                     _Wait_One_Sec:
 12844                           	opt stack 25
 12845                           
 12846                           ;utils.c: 95: for (int k=0;k<0x8000;k++);
 12847                           
 12848                           ;incstack = 0
 12849  005014  0E00               	movlw	0
 12850  005016  6E12               	movwf	Wait_One_Sec@k+1,c
 12851  005018  0E00               	movlw	0
 12852  00501A  6E11               	movwf	Wait_One_Sec@k,c
 12853  00501C                     l7270:
 12854  00501C  0E80               	movlw	128
 12855  00501E  5C12               	subwf	Wait_One_Sec@k+1,w,c
 12856  005020  B0D8               	btfsc	status,0,c
 12857  005022  D005               	goto	l1330
 12858  005024  D001               	goto	l7274
 12859  005026  D003               	goto	l1330
 12860  005028                     l7274:
 12861  005028  4A11               	infsnz	Wait_One_Sec@k,f,c
 12862  00502A  2A12               	incf	Wait_One_Sec@k+1,f,c
 12863  00502C  D7F7               	goto	l7270
 12864  00502E                     l1330:
 12865  00502E  0012               	return		;funcret
 12866  005030                     __end_of_Wait_One_Sec:
 12867                           	opt stack 0
 12868                           tblptru	equ	0xFF8
 12869                           tblptrh	equ	0xFF7
 12870                           tblptrl	equ	0xFF6
 12871                           tablat	equ	0xFF5
 12872                           prodh	equ	0xFF4
 12873                           prodl	equ	0xFF3
 12874                           intcon	equ	0xFF2
 12875                           intcon2	equ	0xFF1
 12876                           postinc0	equ	0xFEE
 12877                           wreg	equ	0xFE8
 12878                           postdec1	equ	0xFE5
 12879                           fsr1l	equ	0xFE1
 12880                           indf2	equ	0xFDF
 12881                           postinc2	equ	0xFDE
 12882                           fsr2h	equ	0xFDA
 12883                           fsr2l	equ	0xFD9
 12884                           status	equ	0xFD8
 12885                           
 12886 ;; *************** function _Deactivate_Buzzer *****************
 12887 ;; Defined at:
 12888 ;;		line 133 in file "utils.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;		None
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;		None
 12893 ;; Return value:  Size  Location     Type
 12894 ;;		None               void
 12895 ;; Registers used:
 12896 ;;		wreg, status,2
 12897 ;; Tracked objects:
 12898 ;;		On entry : 0/0
 12899 ;;		On exit  : 0/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12906 ;;Total ram usage:        0 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:    3
 12909 ;; This function calls:
 12910 ;;		Nothing
 12911 ;; This function is called by:
 12912 ;;		_main
 12913 ;;		_Test_Alarm
 12914 ;;		_Do_Beep_Good
 12915 ;;		_Do_Beep_Bad
 12916 ;;		_Do_Beep
 12917 ;; This function uses a non-reentrant model
 12918 ;;
 12919                           
 12920                           	psect	text65
 12921  00528E                     __ptext65:
 12922                           	opt stack 0
 12923  00528E                     _Deactivate_Buzzer:
 12924                           	opt stack 26
 12925                           
 12926                           ;utils.c: 135: CCP2CON = 0x0;
 12927                           
 12928                           ;incstack = 0
 12929  00528E  0E00               	movlw	0
 12930  005290  6EBA               	movwf	4026,c	;volatile
 12931                           
 12932                           ;utils.c: 136: PORTBbits.RB3 = 0;
 12933  005292  9681               	bcf	3969,3,c	;volatile
 12934  005294  0012               	return		;funcret
 12935  005296                     __end_of_Deactivate_Buzzer:
 12936                           	opt stack 0
 12937                           tblptru	equ	0xFF8
 12938                           tblptrh	equ	0xFF7
 12939                           tblptrl	equ	0xFF6
 12940                           tablat	equ	0xFF5
 12941                           prodh	equ	0xFF4
 12942                           prodl	equ	0xFF3
 12943                           intcon	equ	0xFF2
 12944                           intcon2	equ	0xFF1
 12945                           postinc0	equ	0xFEE
 12946                           wreg	equ	0xFE8
 12947                           postdec1	equ	0xFE5
 12948                           fsr1l	equ	0xFE1
 12949                           indf2	equ	0xFDF
 12950                           postinc2	equ	0xFDE
 12951                           fsr2h	equ	0xFDA
 12952                           fsr2l	equ	0xFD9
 12953                           status	equ	0xFD8
 12954                           
 12955 ;; *************** function _Activate_Buzzer_500Hz *****************
 12956 ;; Defined at:
 12957 ;;		line 106 in file "utils.c"
 12958 ;; Parameters:    Size  Location     Type
 12959 ;;		None
 12960 ;; Auto vars:     Size  Location     Type
 12961 ;;		None
 12962 ;; Return value:  Size  Location     Type
 12963 ;;		None               void
 12964 ;; Registers used:
 12965 ;;		wreg, status,2
 12966 ;; Tracked objects:
 12967 ;;		On entry : 0/0
 12968 ;;		On exit  : 0/0
 12969 ;;		Unchanged: 0/0
 12970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12975 ;;Total ram usage:        0 bytes
 12976 ;; Hardware stack levels used:    1
 12977 ;; Hardware stack levels required when called:    3
 12978 ;; This function calls:
 12979 ;;		Nothing
 12980 ;; This function is called by:
 12981 ;;		_Do_Beep_Bad
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           	psect	text66
 12986  00518E                     __ptext66:
 12987                           	opt stack 0
 12988  00518E                     _Activate_Buzzer_500Hz:
 12989                           	opt stack 25
 12990                           
 12991                           ;utils.c: 109: PR2 = 0b11111001 ;
 12992                           
 12993                           ;incstack = 0
 12994  00518E  0EF9               	movlw	249
 12995  005190  6ECB               	movwf	4043,c	;volatile
 12996                           
 12997                           ;utils.c: 110: T2CON = 0b00000111 ;
 12998  005192  0E07               	movlw	7
 12999  005194  6ECA               	movwf	4042,c	;volatile
 13000                           
 13001                           ;utils.c: 111: CCPR2L = 0b01111100 ;
 13002  005196  0E7C               	movlw	124
 13003  005198  6EBB               	movwf	4027,c	;volatile
 13004                           
 13005                           ;utils.c: 112: CCP2CON = 0b00111100 ;
 13006  00519A  0E3C               	movlw	60
 13007  00519C  6EBA               	movwf	4026,c	;volatile
 13008  00519E  0012               	return		;funcret
 13009  0051A0                     __end_of_Activate_Buzzer_500Hz:
 13010                           	opt stack 0
 13011                           tblptru	equ	0xFF8
 13012                           tblptrh	equ	0xFF7
 13013                           tblptrl	equ	0xFF6
 13014                           tablat	equ	0xFF5
 13015                           prodh	equ	0xFF4
 13016                           prodl	equ	0xFF3
 13017                           intcon	equ	0xFF2
 13018                           intcon2	equ	0xFF1
 13019                           postinc0	equ	0xFEE
 13020                           wreg	equ	0xFE8
 13021                           postdec1	equ	0xFE5
 13022                           fsr1l	equ	0xFE1
 13023                           indf2	equ	0xFDF
 13024                           postinc2	equ	0xFDE
 13025                           fsr2h	equ	0xFDA
 13026                           fsr2l	equ	0xFD9
 13027                           status	equ	0xFD8
 13028                           
 13029 ;; *************** function _Decrease_Alarm_Time *****************
 13030 ;; Defined at:
 13031 ;;		line 89 in file "Setup_Alarm_Time.c"
 13032 ;; Parameters:    Size  Location     Type
 13033 ;;		None
 13034 ;; Auto vars:     Size  Location     Type
 13035 ;;		None
 13036 ;; Return value:  Size  Location     Type
 13037 ;;		None               void
 13038 ;; Registers used:
 13039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13040 ;; Tracked objects:
 13041 ;;		On entry : 0/0
 13042 ;;		On exit  : 0/0
 13043 ;;		Unchanged: 0/0
 13044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;Total ram usage:        0 bytes
 13050 ;; Hardware stack levels used:    1
 13051 ;; Hardware stack levels required when called:   11
 13052 ;; This function calls:
 13053 ;;		_Update_Setup_Alarm_Time_Screen
 13054 ;; This function is called by:
 13055 ;;		_Do_Setup_Alarm_Time
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           	psect	text67
 13060  004858                     __ptext67:
 13061                           	opt stack 0
 13062  004858                     _Decrease_Alarm_Time:
 13063                           	opt stack 18
 13064                           
 13065                           ;Setup_Alarm_Time.c: 91: switch (Select_Alarm_Field)
 13066                           
 13067                           ;incstack = 0
 13068  004858  D01E               	goto	l10178
 13069  00485A                     l10158:
 13070                           
 13071                           ;Setup_Alarm_Time.c: 94: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13072  00485A  506E               	movf	_setup_alarm_hour,w,c
 13073  00485C  A4D8               	btfss	status,2,c
 13074  00485E  D003               	goto	l10162
 13075  004860  0E17               	movlw	23
 13076  004862  6E6E               	movwf	_setup_alarm_hour,c
 13077  004864  D024               	goto	l10180
 13078  004866                     l10162:
 13079                           
 13080                           ;Setup_Alarm_Time.c: 95: else --setup_alarm_hour;
 13081  004866  066E               	decf	_setup_alarm_hour,f,c
 13082                           
 13083                           ;Setup_Alarm_Time.c: 96: break;
 13084  004868  D022               	goto	l10180
 13085  00486A                     l10164:
 13086                           
 13087                           ;Setup_Alarm_Time.c: 100: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 13088  00486A  0100               	movlb	0	; () banked
 13089  00486C  51AB               	movf	_setup_alarm_minute& (0+255),w,b
 13090  00486E  A4D8               	btfss	status,2,c
 13091  004870  D004               	goto	l10168
 13092                           
 13093                           ; BSR set to: 0
 13094  004872  0E3B               	movlw	59
 13095  004874  0100               	movlb	0	; () banked
 13096  004876  6FAB               	movwf	_setup_alarm_minute& (0+255),b
 13097  004878  D01A               	goto	l10180
 13098  00487A                     l10168:
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;Setup_Alarm_Time.c: 101: else --setup_alarm_minute;
 13102  00487A  0100               	movlb	0	; () banked
 13103  00487C  07AB               	decf	_setup_alarm_minute& (0+255),f,b
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;Setup_Alarm_Time.c: 102: break;
 13107  00487E  D017               	goto	l10180
 13108  004880                     l10170:
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;Setup_Alarm_Time.c: 106: if (setup_alarm_second == 0) setup_alarm_second = 59;
 13112  004880  0100               	movlb	0	; () banked
 13113  004882  51AC               	movf	_setup_alarm_second& (0+255),w,b
 13114  004884  A4D8               	btfss	status,2,c
 13115  004886  D004               	goto	l10174
 13116                           
 13117                           ; BSR set to: 0
 13118  004888  0E3B               	movlw	59
 13119  00488A  0100               	movlb	0	; () banked
 13120  00488C  6FAC               	movwf	_setup_alarm_second& (0+255),b
 13121  00488E  D00F               	goto	l10180
 13122  004890                     l10174:
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;Setup_Alarm_Time.c: 107: else --setup_alarm_second;
 13126  004890  0100               	movlb	0	; () banked
 13127  004892  07AC               	decf	_setup_alarm_second& (0+255),f,b
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;Setup_Alarm_Time.c: 112: }
 13131                           
 13132                           ; BSR set to: 0
 13133                           ;Setup_Alarm_Time.c: 111: break;
 13134                           
 13135                           ;Setup_Alarm_Time.c: 110: default:
 13136                           
 13137                           ; BSR set to: 0
 13138                           ;Setup_Alarm_Time.c: 108: break;
 13139  004894  D00C               	goto	l10180
 13140  004896                     l10178:
 13141  004896  0100               	movlb	0	; () banked
 13142  004898  51A2               	movf	_Select_Alarm_Field& (0+255),w,b
 13143                           
 13144                           ; Switch size 1, requested type "space"
 13145                           ; Number of cases is 3, Range of values is 0 to 2
 13146                           ; switch strategies available:
 13147                           ; Name         Instructions Cycles
 13148                           ; simple_byte           10     6 (average)
 13149                           ;	Chosen strategy is simple_byte
 13150  00489A  0A00               	xorlw	0	; case 0
 13151  00489C  B4D8               	btfsc	status,2,c
 13152  00489E  D7DD               	goto	l10158
 13153  0048A0  0A01               	xorlw	1	; case 1
 13154  0048A2  B4D8               	btfsc	status,2,c
 13155  0048A4  D7E2               	goto	l10164
 13156  0048A6  0A03               	xorlw	3	; case 2
 13157  0048A8  B4D8               	btfsc	status,2,c
 13158  0048AA  D7EA               	goto	l10170
 13159  0048AC  D000               	goto	l10180
 13160  0048AE                     l10180:
 13161                           
 13162                           ;Setup_Alarm_Time.c: 113: Update_Setup_Alarm_Time_Screen();
 13163  0048AE  EC8B  F015         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 13164  0048B2  0012               	return		;funcret
 13165  0048B4                     __end_of_Decrease_Alarm_Time:
 13166                           	opt stack 0
 13167                           tblptru	equ	0xFF8
 13168                           tblptrh	equ	0xFF7
 13169                           tblptrl	equ	0xFF6
 13170                           tablat	equ	0xFF5
 13171                           prodh	equ	0xFF4
 13172                           prodl	equ	0xFF3
 13173                           intcon	equ	0xFF2
 13174                           intcon2	equ	0xFF1
 13175                           postinc0	equ	0xFEE
 13176                           wreg	equ	0xFE8
 13177                           postdec1	equ	0xFE5
 13178                           fsr1l	equ	0xFE1
 13179                           indf2	equ	0xFDF
 13180                           postinc2	equ	0xFDE
 13181                           fsr2h	equ	0xFDA
 13182                           fsr2l	equ	0xFD9
 13183                           status	equ	0xFD8
 13184                           
 13185 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 13186 ;; Defined at:
 13187 ;;		line 167 in file "Setup_Alarm_Time.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;		None
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;		None
 13192 ;; Return value:  Size  Location     Type
 13193 ;;		None               void
 13194 ;; Registers used:
 13195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13196 ;; Tracked objects:
 13197 ;;		On entry : 0/0
 13198 ;;		On exit  : 0/0
 13199 ;;		Unchanged: 0/0
 13200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13205 ;;Total ram usage:        0 bytes
 13206 ;; Hardware stack levels used:    1
 13207 ;; Hardware stack levels required when called:   10
 13208 ;; This function calls:
 13209 ;;		___awdiv
 13210 ;;		___awmod
 13211 ;;		_drawtext
 13212 ;;		_printf
 13213 ;; This function is called by:
 13214 ;;		_Do_Setup_Alarm_Time
 13215 ;;		_Increase_Alarm_Time
 13216 ;;		_Decrease_Alarm_Time
 13217 ;; This function uses a non-reentrant model
 13218 ;;
 13219                           
 13220                           	psect	text68
 13221  002B16                     __ptext68:
 13222                           	opt stack 0
 13223  002B16                     _Update_Setup_Alarm_Time_Screen:
 13224                           	opt stack 19
 13225                           
 13226                           ;Setup_Alarm_Time.c: 169: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 13227                           
 13228                           ;incstack = 0
 13229  002B16  0E9F               	movlw	low STR_30
 13230  002B18  0100               	movlb	0	; () banked
 13231  002B1A  6FDC               	movwf	printf@f& (0+255),b
 13232  002B1C  0EFF               	movlw	high STR_30
 13233  002B1E  0100               	movlb	0	; () banked
 13234  002B20  6FDD               	movwf	(printf@f+1)& (0+255),b
 13235  002B22  C06E  F0DE         	movff	_setup_alarm_hour,?_printf+2
 13236  002B26  0100               	movlb	0	; () banked
 13237  002B28  6BDF               	clrf	(?_printf+3)& (0+255),b
 13238  002B2A  C0AB  F0E0         	movff	_setup_alarm_minute,?_printf+4
 13239  002B2E  0100               	movlb	0	; () banked
 13240  002B30  6BE1               	clrf	(?_printf+5)& (0+255),b
 13241  002B32  C0AC  F0E2         	movff	_setup_alarm_second,?_printf+6
 13242  002B36  0100               	movlb	0	; () banked
 13243  002B38  6BE3               	clrf	(?_printf+7)& (0+255),b
 13244  002B3A  EC0E  F000         	call	_printf	;wreg free
 13245                           
 13246                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 13247  002B3E  C06E  F017         	movff	_setup_alarm_hour,___awdiv@dividend
 13248  002B42  6A18               	clrf	___awdiv@dividend+1,c
 13249  002B44  0E00               	movlw	0
 13250  002B46  6E1A               	movwf	___awdiv@divisor+1,c
 13251  002B48  0E0A               	movlw	10
 13252  002B4A  6E19               	movwf	___awdiv@divisor,c
 13253  002B4C  ECE4  F01F         	call	___awdiv	;wreg free
 13254  002B50  5017               	movf	?___awdiv,w,c
 13255  002B52  0F30               	addlw	48
 13256  002B54  0101               	movlb	1	; () banked
 13257  002B56  6F4D               	movwf	_setup_alarm_time& (0+255),b
 13258                           
 13259                           ; BSR set to: 1
 13260                           ;Setup_Alarm_Time.c: 171: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 13261  002B58  C06E  F03D         	movff	_setup_alarm_hour,___awmod@dividend
 13262  002B5C  6A3E               	clrf	___awmod@dividend+1,c
 13263  002B5E  0E00               	movlw	0
 13264  002B60  6E40               	movwf	___awmod@divisor+1,c
 13265  002B62  0E0A               	movlw	10
 13266  002B64  6E3F               	movwf	___awmod@divisor,c
 13267  002B66  ECDB  F021         	call	___awmod	;wreg free
 13268  002B6A  503D               	movf	?___awmod,w,c
 13269  002B6C  0F30               	addlw	48
 13270  002B6E  0101               	movlb	1	; () banked
 13271  002B70  6F4E               	movwf	(_setup_alarm_time+1)& (0+255),b
 13272                           
 13273                           ; BSR set to: 1
 13274                           ;Setup_Alarm_Time.c: 172: setup_alarm_time[3] = (setup_alarm_minute/10 % 10) + '0';
 13275  002B72  0E00               	movlw	0
 13276  002B74  6E1A               	movwf	___awdiv@divisor+1,c
 13277  002B76  0E0A               	movlw	10
 13278  002B78  6E19               	movwf	___awdiv@divisor,c
 13279  002B7A  C0AB  F017         	movff	_setup_alarm_minute,___awdiv@dividend
 13280  002B7E  6A18               	clrf	___awdiv@dividend+1,c
 13281  002B80  ECE4  F01F         	call	___awdiv	;wreg free
 13282  002B84  C017  F03D         	movff	?___awdiv,___awmod@dividend
 13283  002B88  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
 13284  002B8C  0E00               	movlw	0
 13285  002B8E  6E40               	movwf	___awmod@divisor+1,c
 13286  002B90  0E0A               	movlw	10
 13287  002B92  6E3F               	movwf	___awmod@divisor,c
 13288  002B94  ECDB  F021         	call	___awmod	;wreg free
 13289  002B98  503D               	movf	?___awmod,w,c
 13290  002B9A  0F30               	addlw	48
 13291  002B9C  0101               	movlb	1	; () banked
 13292  002B9E  6F50               	movwf	(_setup_alarm_time+3)& (0+255),b
 13293                           
 13294                           ; BSR set to: 1
 13295                           ;Setup_Alarm_Time.c: 173: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';
 13296  002BA0  C0AB  F03D         	movff	_setup_alarm_minute,___awmod@dividend
 13297  002BA4  6A3E               	clrf	___awmod@dividend+1,c
 13298  002BA6  0E00               	movlw	0
 13299  002BA8  6E40               	movwf	___awmod@divisor+1,c
 13300  002BAA  0E0A               	movlw	10
 13301  002BAC  6E3F               	movwf	___awmod@divisor,c
 13302  002BAE  ECDB  F021         	call	___awmod	;wreg free
 13303  002BB2  503D               	movf	?___awmod,w,c
 13304  002BB4  0F30               	addlw	48
 13305  002BB6  0101               	movlb	1	; () banked
 13306  002BB8  6F51               	movwf	(_setup_alarm_time+4)& (0+255),b
 13307                           
 13308                           ; BSR set to: 1
 13309                           ;Setup_Alarm_Time.c: 174: setup_alarm_time[6] = (setup_alarm_second/10 % 10) + '0';
 13310  002BBA  0E00               	movlw	0
 13311  002BBC  6E1A               	movwf	___awdiv@divisor+1,c
 13312  002BBE  0E0A               	movlw	10
 13313  002BC0  6E19               	movwf	___awdiv@divisor,c
 13314  002BC2  C0AC  F017         	movff	_setup_alarm_second,___awdiv@dividend
 13315  002BC6  6A18               	clrf	___awdiv@dividend+1,c
 13316  002BC8  ECE4  F01F         	call	___awdiv	;wreg free
 13317  002BCC  C017  F03D         	movff	?___awdiv,___awmod@dividend
 13318  002BD0  C018  F03E         	movff	?___awdiv+1,___awmod@dividend+1
 13319  002BD4  0E00               	movlw	0
 13320  002BD6  6E40               	movwf	___awmod@divisor+1,c
 13321  002BD8  0E0A               	movlw	10
 13322  002BDA  6E3F               	movwf	___awmod@divisor,c
 13323  002BDC  ECDB  F021         	call	___awmod	;wreg free
 13324  002BE0  503D               	movf	?___awmod,w,c
 13325  002BE2  0F30               	addlw	48
 13326  002BE4  0101               	movlb	1	; () banked
 13327  002BE6  6F53               	movwf	(_setup_alarm_time+6)& (0+255),b
 13328                           
 13329                           ; BSR set to: 1
 13330                           ;Setup_Alarm_Time.c: 175: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 13331  002BE8  C0AC  F03D         	movff	_setup_alarm_second,___awmod@dividend
 13332  002BEC  6A3E               	clrf	___awmod@dividend+1,c
 13333  002BEE  0E00               	movlw	0
 13334  002BF0  6E40               	movwf	___awmod@divisor+1,c
 13335  002BF2  0E0A               	movlw	10
 13336  002BF4  6E3F               	movwf	___awmod@divisor,c
 13337  002BF6  ECDB  F021         	call	___awmod	;wreg free
 13338  002BFA  503D               	movf	?___awmod,w,c
 13339  002BFC  0F30               	addlw	48
 13340  002BFE  0101               	movlb	1	; () banked
 13341  002C00  6F54               	movwf	(_setup_alarm_time+7)& (0+255),b
 13342                           
 13343                           ;Setup_Alarm_Time.c: 176: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 13344  002C02  0E34               	movlw	52
 13345  002C04  6E39               	movwf	drawtext@y,c
 13346  002C06  0E4D               	movlw	low _setup_alarm_time
 13347  002C08  6E3A               	movwf	drawtext@_text,c
 13348  002C0A  0E01               	movlw	high _setup_alarm_time
 13349  002C0C  6E3B               	movwf	drawtext@_text+1,c
 13350  002C0E  0E07               	movlw	7
 13351  002C10  6E3D               	movwf	drawtext@color+1,c
 13352  002C12  683C               	setf	drawtext@color,c
 13353  002C14  0E00               	movlw	0
 13354  002C16  6E3F               	movwf	drawtext@bg+1,c
 13355  002C18  0E00               	movlw	0
 13356  002C1A  6E3E               	movwf	drawtext@bg,c
 13357  002C1C  0E02               	movlw	2
 13358  002C1E  6E40               	movwf	drawtext@size,c
 13359  002C20  0E0F               	movlw	15
 13360  002C22  EC11  F01B         	call	_drawtext
 13361  002C26  0012               	return		;funcret
 13362  002C28                     __end_of_Update_Setup_Alarm_Time_Screen:
 13363                           	opt stack 0
 13364                           tblptru	equ	0xFF8
 13365                           tblptrh	equ	0xFF7
 13366                           tblptrl	equ	0xFF6
 13367                           tablat	equ	0xFF5
 13368                           prodh	equ	0xFF4
 13369                           prodl	equ	0xFF3
 13370                           intcon	equ	0xFF2
 13371                           intcon2	equ	0xFF1
 13372                           postinc0	equ	0xFEE
 13373                           wreg	equ	0xFE8
 13374                           postdec1	equ	0xFE5
 13375                           fsr1l	equ	0xFE1
 13376                           indf2	equ	0xFDF
 13377                           postinc2	equ	0xFDE
 13378                           fsr2h	equ	0xFDA
 13379                           fsr2l	equ	0xFD9
 13380                           status	equ	0xFD8
 13381                           
 13382 ;; *************** function _drawtext *****************
 13383 ;; Defined at:
 13384 ;;		line 474 in file "ST7735_TFT.c"
 13385 ;; Parameters:    Size  Location     Type
 13386 ;;  x               1    wreg     unsigned char 
 13387 ;;  y               1   56[COMRAM] unsigned char 
 13388 ;;  _text           2   57[COMRAM] PTR unsigned char 
 13389 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 13390 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 13391 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 13392 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 13393 ;;		 -> tempC(4), 
 13394 ;;  color           2   59[COMRAM] unsigned int 
 13395 ;;  bg              2   61[COMRAM] unsigned int 
 13396 ;;  size            1   63[COMRAM] unsigned char 
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;  x               1   66[COMRAM] unsigned char 
 13399 ;;  i               2   69[COMRAM] unsigned int 
 13400 ;;  textsize        2   67[COMRAM] unsigned int 
 13401 ;;  cursor_x        1   72[COMRAM] unsigned char 
 13402 ;;  cursor_y        1   71[COMRAM] unsigned char 
 13403 ;; Return value:  Size  Location     Type
 13404 ;;		None               void
 13405 ;; Registers used:
 13406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13407 ;; Tracked objects:
 13408 ;;		On entry : 0/0
 13409 ;;		On exit  : 0/0
 13410 ;;		Unchanged: 0/0
 13411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13412 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13413 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13415 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13416 ;;Total ram usage:       17 bytes
 13417 ;; Hardware stack levels used:    1
 13418 ;; Hardware stack levels required when called:    9
 13419 ;; This function calls:
 13420 ;;		_drawChar
 13421 ;;		_strlen
 13422 ;; This function is called by:
 13423 ;;		_Initialize_Screen
 13424 ;;		_Update_Screen
 13425 ;;		_Initialize_Setup_Alarm_Time_Screen
 13426 ;;		_Update_Setup_Alarm_Time_Screen
 13427 ;;		_Initialize_Setup_Heater_Screen
 13428 ;;		_Update_Setup_Heater_Screen
 13429 ;;		_Initialize_Setup_Time_Screen
 13430 ;;		_Update_Setup_Time_Screen
 13431 ;; This function uses a non-reentrant model
 13432 ;;
 13433                           
 13434                           	psect	text69
 13435  003622                     __ptext69:
 13436                           	opt stack 0
 13437  003622                     _drawtext:
 13438                           	opt stack 20
 13439                           
 13440                           ;incstack = 0
 13441                           ;drawtext@x stored from wreg
 13442  003622  6E43               	movwf	drawtext@x,c
 13443                           
 13444                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 13445                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 13446                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 13447  003624  C043  F049         	movff	drawtext@x,drawtext@cursor_x
 13448  003628  C039  F048         	movff	drawtext@y,drawtext@cursor_y
 13449                           
 13450                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 13451  00362C  C03A  F011         	movff	drawtext@_text,strlen@s
 13452  003630  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 13453  003634  ECFC  F025         	call	_strlen	;wreg free
 13454  003638  C011  F044         	movff	?_strlen,drawtext@textsize
 13455  00363C  C012  F045         	movff	?_strlen+1,drawtext@textsize+1
 13456                           
 13457                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 13458  003640  0E00               	movlw	0
 13459  003642  6E47               	movwf	drawtext@i+1,c
 13460  003644  0E00               	movlw	0
 13461  003646  6E46               	movwf	drawtext@i,c
 13462  003648  D056               	goto	l9802
 13463  00364A                     l9776:
 13464                           
 13465                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 13466  00364A  0100               	movlb	0	; () banked
 13467  00364C  51B6               	movf	_wrap& (0+255),w,b
 13468  00364E  0100               	movlb	0	; () banked
 13469  003650  B4D8               	btfsc	status,2,c
 13470  003652  D02C               	goto	l9792
 13471                           
 13472                           ; BSR set to: 0
 13473  003654  5040               	movf	drawtext@size,w,c
 13474  003656  0D05               	mullw	5
 13475  003658  5049               	movf	drawtext@cursor_x,w,c
 13476  00365A  6E41               	movwf	??_drawtext& (0+255),c
 13477  00365C  6A42               	clrf	(??_drawtext+1)& (0+255),c
 13478  00365E  50F3               	movf	prodl,w,c
 13479  003660  2641               	addwf	??_drawtext,f,c
 13480  003662  50F4               	movf	prodh,w,c
 13481  003664  2242               	addwfc	??_drawtext+1,f,c
 13482  003666  BE42               	btfsc	??_drawtext+1,7,c
 13483  003668  D021               	goto	l9792
 13484  00366A  5042               	movf	??_drawtext+1,w,c
 13485  00366C  E104               	bnz	u8400
 13486  00366E  0E81               	movlw	129
 13487  003670  5C41               	subwf	??_drawtext,w,c
 13488  003672  A0D8               	btfss	status,0,c
 13489  003674  D01B               	goto	l9792
 13490  003676                     u8400:
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;ST7735_TFT.c: 482: cursor_x = 0;
 13494  003676  0E00               	movlw	0
 13495  003678  6E49               	movwf	drawtext@cursor_x,c
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 13499  00367A  5040               	movf	drawtext@size,w,c
 13500  00367C  0D07               	mullw	7
 13501  00367E  50F3               	movf	prodl,w,c
 13502  003680  2448               	addwf	drawtext@cursor_y,w,c
 13503  003682  0F03               	addlw	3
 13504  003684  6E48               	movwf	drawtext@cursor_y,c
 13505                           
 13506                           ; BSR set to: 0
 13507                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 13508  003686  0EA0               	movlw	160
 13509  003688  6448               	cpfsgt	drawtext@cursor_y,c
 13510  00368A  D003               	goto	l9788
 13511                           
 13512                           ; BSR set to: 0
 13513  00368C  0EA0               	movlw	160
 13514  00368E  6E48               	movwf	drawtext@cursor_y,c
 13515  003690  D000               	goto	l9788
 13516  003692                     l9788:
 13517                           
 13518                           ; BSR set to: 0
 13519                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 13520  003692  5046               	movf	drawtext@i,w,c
 13521  003694  243A               	addwf	drawtext@_text,w,c
 13522  003696  6ED9               	movwf	fsr2l,c
 13523  003698  5047               	movf	drawtext@i+1,w,c
 13524  00369A  203B               	addwfc	drawtext@_text+1,w,c
 13525  00369C  6EDA               	movwf	fsr2h,c
 13526  00369E  0E20               	movlw	32
 13527  0036A0  18DE               	xorwf	postinc2,w,c
 13528  0036A2  B4D8               	btfsc	status,2,c
 13529  0036A4  D025               	goto	l9800
 13530  0036A6  D002               	goto	l9792
 13531                           
 13532                           ; BSR set to: 0
 13533  0036A8  D023               	goto	l9800
 13534                           
 13535                           ; BSR set to: 0
 13536  0036AA  D000               	goto	l9792
 13537  0036AC                     l9792:
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 13541  0036AC  C048  F02E         	movff	drawtext@cursor_y,drawChar@y
 13542  0036B0  5046               	movf	drawtext@i,w,c
 13543  0036B2  243A               	addwf	drawtext@_text,w,c
 13544  0036B4  6ED9               	movwf	fsr2l,c
 13545  0036B6  5047               	movf	drawtext@i+1,w,c
 13546  0036B8  203B               	addwfc	drawtext@_text+1,w,c
 13547  0036BA  6EDA               	movwf	fsr2h,c
 13548  0036BC  50DF               	movf	indf2,w,c
 13549  0036BE  6E2F               	movwf	drawChar@c,c
 13550  0036C0  C03C  F030         	movff	drawtext@color,drawChar@color
 13551  0036C4  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 13552  0036C8  C03E  F032         	movff	drawtext@bg,drawChar@bg
 13553  0036CC  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 13554  0036D0  C040  F034         	movff	drawtext@size,drawChar@size
 13555  0036D4  5049               	movf	drawtext@cursor_x,w,c
 13556  0036D6  EC4F  F014         	call	_drawChar
 13557                           
 13558                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 13559  0036DA  5040               	movf	drawtext@size,w,c
 13560  0036DC  0D06               	mullw	6
 13561  0036DE  50F3               	movf	prodl,w,c
 13562  0036E0  2449               	addwf	drawtext@cursor_x,w,c
 13563  0036E2  6E49               	movwf	drawtext@cursor_x,c
 13564                           
 13565                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 13566  0036E4  0E80               	movlw	128
 13567  0036E6  6449               	cpfsgt	drawtext@cursor_x,c
 13568  0036E8  D003               	goto	l9800
 13569  0036EA  0E80               	movlw	128
 13570  0036EC  6E49               	movwf	drawtext@cursor_x,c
 13571  0036EE  D000               	goto	l9800
 13572  0036F0                     l9800:
 13573  0036F0  4A46               	infsnz	drawtext@i,f,c
 13574  0036F2  2A47               	incf	drawtext@i+1,f,c
 13575  0036F4  D000               	goto	l9802
 13576  0036F6                     l9802:
 13577  0036F6  5044               	movf	drawtext@textsize,w,c
 13578  0036F8  5C46               	subwf	drawtext@i,w,c
 13579  0036FA  5045               	movf	drawtext@textsize+1,w,c
 13580  0036FC  5847               	subwfb	drawtext@i+1,w,c
 13581  0036FE  A0D8               	btfss	status,0,c
 13582  003700  D7A4               	goto	l9776
 13583  003702  0012               	return		;funcret
 13584  003704                     __end_of_drawtext:
 13585                           	opt stack 0
 13586                           tblptru	equ	0xFF8
 13587                           tblptrh	equ	0xFF7
 13588                           tblptrl	equ	0xFF6
 13589                           tablat	equ	0xFF5
 13590                           prodh	equ	0xFF4
 13591                           prodl	equ	0xFF3
 13592                           intcon	equ	0xFF2
 13593                           intcon2	equ	0xFF1
 13594                           postinc0	equ	0xFEE
 13595                           wreg	equ	0xFE8
 13596                           postdec1	equ	0xFE5
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           fsr2h	equ	0xFDA
 13601                           fsr2l	equ	0xFD9
 13602                           status	equ	0xFD8
 13603                           
 13604 ;; *************** function _strlen *****************
 13605 ;; Defined at:
 13606 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;  s               2   16[COMRAM] PTR const unsigned char 
 13609 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 13610 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 13611 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 13612 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 13613 ;;		 -> tempC(4), 
 13614 ;; Auto vars:     Size  Location     Type
 13615 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 13616 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 13617 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 13618 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 13619 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 13620 ;;		 -> tempC(4), 
 13621 ;; Return value:  Size  Location     Type
 13622 ;;                  2   16[COMRAM] unsigned int 
 13623 ;; Registers used:
 13624 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13625 ;; Tracked objects:
 13626 ;;		On entry : 0/0
 13627 ;;		On exit  : 0/0
 13628 ;;		Unchanged: 0/0
 13629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13630 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13632 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13633 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13634 ;;Total ram usage:        6 bytes
 13635 ;; Hardware stack levels used:    1
 13636 ;; Hardware stack levels required when called:    3
 13637 ;; This function calls:
 13638 ;;		Nothing
 13639 ;; This function is called by:
 13640 ;;		_drawtext
 13641 ;; This function uses a non-reentrant model
 13642 ;;
 13643                           
 13644                           	psect	text70
 13645  004BF8                     __ptext70:
 13646                           	opt stack 0
 13647  004BF8                     _strlen:
 13648                           	opt stack 25
 13649                           
 13650                           ;incstack = 0
 13651  004BF8  C011  F015         	movff	strlen@s,strlen@cp
 13652  004BFC  C012  F016         	movff	strlen@s+1,strlen@cp+1
 13653  004C00  D003               	goto	l6048
 13654  004C02                     l6046:
 13655  004C02  4A15               	infsnz	strlen@cp,f,c
 13656  004C04  2A16               	incf	strlen@cp+1,f,c
 13657  004C06  D000               	goto	l6048
 13658  004C08                     l6048:
 13659  004C08  C015  FFD9         	movff	strlen@cp,fsr2l
 13660  004C0C  C016  FFDA         	movff	strlen@cp+1,fsr2h
 13661  004C10  50DF               	movf	indf2,w,c
 13662  004C12  A4D8               	btfss	status,2,c
 13663  004C14  D7F6               	goto	l6046
 13664  004C16  C011  F013         	movff	strlen@s,??_strlen
 13665  004C1A  C012  F014         	movff	strlen@s+1,??_strlen+1
 13666  004C1E  1E13               	comf	??_strlen,f,c
 13667  004C20  1E14               	comf	??_strlen+1,f,c
 13668  004C22  4A13               	infsnz	??_strlen,f,c
 13669  004C24  2A14               	incf	??_strlen+1,f,c
 13670  004C26  5015               	movf	strlen@cp,w,c
 13671  004C28  2413               	addwf	??_strlen,w,c
 13672  004C2A  6E11               	movwf	?_strlen,c
 13673  004C2C  5016               	movf	strlen@cp+1,w,c
 13674  004C2E  2014               	addwfc	??_strlen+1,w,c
 13675  004C30  6E12               	movwf	?_strlen+1,c
 13676  004C32  D000               	goto	l2142
 13677  004C34                     l2142:
 13678  004C34  0012               	return		;funcret
 13679  004C36                     __end_of_strlen:
 13680                           	opt stack 0
 13681                           tblptru	equ	0xFF8
 13682                           tblptrh	equ	0xFF7
 13683                           tblptrl	equ	0xFF6
 13684                           tablat	equ	0xFF5
 13685                           prodh	equ	0xFF4
 13686                           prodl	equ	0xFF3
 13687                           intcon	equ	0xFF2
 13688                           intcon2	equ	0xFF1
 13689                           postinc0	equ	0xFEE
 13690                           wreg	equ	0xFE8
 13691                           postdec1	equ	0xFE5
 13692                           fsr1l	equ	0xFE1
 13693                           indf2	equ	0xFDF
 13694                           postinc2	equ	0xFDE
 13695                           fsr2h	equ	0xFDA
 13696                           fsr2l	equ	0xFD9
 13697                           status	equ	0xFD8
 13698                           
 13699 ;; *************** function _drawChar *****************
 13700 ;; Defined at:
 13701 ;;		line 447 in file "ST7735_TFT.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;  x               1    wreg     unsigned char 
 13704 ;;  y               1   45[COMRAM] unsigned char 
 13705 ;;  c               1   46[COMRAM] unsigned char 
 13706 ;;  color           2   47[COMRAM] unsigned int 
 13707 ;;  bg              2   49[COMRAM] unsigned int 
 13708 ;;  size            1   51[COMRAM] unsigned char 
 13709 ;; Auto vars:     Size  Location     Type
 13710 ;;  x               1   53[COMRAM] unsigned char 
 13711 ;;  line            1   52[COMRAM] unsigned char 
 13712 ;;  i               1   55[COMRAM] unsigned char 
 13713 ;;  j               1   54[COMRAM] unsigned char 
 13714 ;; Return value:  Size  Location     Type
 13715 ;;		None               void
 13716 ;; Registers used:
 13717 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13718 ;; Tracked objects:
 13719 ;;		On entry : 0/0
 13720 ;;		On exit  : 0/0
 13721 ;;		Unchanged: 0/0
 13722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13723 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13724 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13726 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13727 ;;Total ram usage:       11 bytes
 13728 ;; Hardware stack levels used:    1
 13729 ;; Hardware stack levels required when called:    8
 13730 ;; This function calls:
 13731 ;;		___wmul
 13732 ;;		_drawPixel
 13733 ;;		_fillRect
 13734 ;; This function is called by:
 13735 ;;		_drawtext
 13736 ;; This function uses a non-reentrant model
 13737 ;;
 13738                           
 13739                           	psect	text71
 13740  00289E                     __ptext71:
 13741                           	opt stack 0
 13742  00289E                     _drawChar:
 13743                           	opt stack 20
 13744                           
 13745                           ;incstack = 0
 13746                           ;drawChar@x stored from wreg
 13747  00289E  6E36               	movwf	drawChar@x,c
 13748                           
 13749                           ;ST7735_TFT.c: 449: char i, j;
 13750                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 13751  0028A0  0E80               	movlw	128
 13752  0028A2  6036               	cpfslt	drawChar@x,c
 13753  0028A4  D0A6               	goto	l759
 13754  0028A6  0E9F               	movlw	159
 13755  0028A8  642E               	cpfsgt	drawChar@y,c
 13756  0028AA  D001               	goto	l9088
 13757                           
 13758                           ;ST7735_TFT.c: 451: return;
 13759  0028AC  D0A2               	goto	l759
 13760  0028AE                     l9088:
 13761                           
 13762                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 13763  0028AE  5034               	movf	drawChar@size,w,c
 13764  0028B0  A4D8               	btfss	status,2,c
 13765  0028B2  D003               	goto	l9092
 13766  0028B4  0E01               	movlw	1
 13767  0028B6  6E34               	movwf	drawChar@size,c
 13768  0028B8  D000               	goto	l9092
 13769  0028BA                     l9092:
 13770                           
 13771                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 13772  0028BA  0E1F               	movlw	31
 13773  0028BC  642F               	cpfsgt	drawChar@c,c
 13774  0028BE  D004               	goto	l9096
 13775  0028C0  0E7E               	movlw	126
 13776  0028C2  642F               	cpfsgt	drawChar@c,c
 13777  0028C4  D003               	goto	l761
 13778  0028C6  D000               	goto	l9096
 13779  0028C8                     l9096:
 13780                           
 13781                           ;ST7735_TFT.c: 454: c = '?';
 13782  0028C8  0E3F               	movlw	63
 13783  0028CA  6E2F               	movwf	drawChar@c,c
 13784  0028CC                     l761:
 13785                           
 13786                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 13787  0028CC  0E00               	movlw	0
 13788  0028CE  6E38               	movwf	drawChar@i,c
 13789  0028D0                     l9098:
 13790  0028D0  0E04               	movlw	4
 13791  0028D2  6438               	cpfsgt	drawChar@i,c
 13792  0028D4  D001               	goto	l9102
 13793  0028D6  D08D               	goto	l759
 13794  0028D8                     l9102:
 13795                           
 13796                           ;ST7735_TFT.c: 456: unsigned char line;
 13797                           ;ST7735_TFT.c: 457: if(c < 'S')
 13798  0028D8  0E53               	movlw	83
 13799  0028DA  602F               	cpfslt	drawChar@c,c
 13800  0028DC  D015               	goto	l9106
 13801                           
 13802                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 13803  0028DE  0EE0               	movlw	224
 13804  0028E0  242F               	addwf	drawChar@c,w,c
 13805  0028E2  6E11               	movwf	___wmul@multiplier,c
 13806  0028E4  6A12               	clrf	___wmul@multiplier+1,c
 13807  0028E6  0EFF               	movlw	255
 13808  0028E8  2212               	addwfc	___wmul@multiplier+1,f,c
 13809  0028EA  0E00               	movlw	0
 13810  0028EC  6E14               	movwf	___wmul@multiplicand+1,c
 13811  0028EE  0E05               	movlw	5
 13812  0028F0  6E13               	movwf	___wmul@multiplicand,c
 13813  0028F2  ECFF  F026         	call	___wmul	;wreg free
 13814  0028F6  5038               	movf	drawChar@i,w,c
 13815  0028F8  2611               	addwf	?___wmul,f,c
 13816  0028FA  0E00               	movlw	0
 13817  0028FC  2212               	addwfc	?___wmul+1,f,c
 13818  0028FE  0E0B               	movlw	low _font
 13819  002900  2411               	addwf	?___wmul,w,c
 13820  002902  6EF6               	movwf	tblptrl,c
 13821  002904  0EFC               	movlw	high _font
 13822  002906  D014               	goto	L7
 13823  002908                     l9106:
 13824                           
 13825                           ;ST7735_TFT.c: 459: else
 13826                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 13827  002908  0EAD               	movlw	173
 13828  00290A  242F               	addwf	drawChar@c,w,c
 13829  00290C  6E11               	movwf	___wmul@multiplier,c
 13830  00290E  6A12               	clrf	___wmul@multiplier+1,c
 13831  002910  0EFF               	movlw	255
 13832  002912  2212               	addwfc	___wmul@multiplier+1,f,c
 13833  002914  0E00               	movlw	0
 13834  002916  6E14               	movwf	___wmul@multiplicand+1,c
 13835  002918  0E05               	movlw	5
 13836  00291A  6E13               	movwf	___wmul@multiplicand,c
 13837  00291C  ECFF  F026         	call	___wmul	;wreg free
 13838  002920  5038               	movf	drawChar@i,w,c
 13839  002922  2611               	addwf	?___wmul,f,c
 13840  002924  0E00               	movlw	0
 13841  002926  2212               	addwfc	?___wmul+1,f,c
 13842  002928  0E0A               	movlw	low _font2
 13843  00292A  2411               	addwf	?___wmul,w,c
 13844  00292C  6EF6               	movwf	tblptrl,c
 13845  00292E  0EFD               	movlw	high _font2
 13846  002930                     L7:
 13847  002930  2012               	addwfc	?___wmul+1,w,c
 13848  002932  6EF7               	movwf	tblptrh,c
 13849  002934                     	if	0	;There are less than 3 active tblptr bytes
 13850  002934                     	endif
 13851  002934  0008               	tblrd		*
 13852  002936  CFF5 F035          	movff	tablat,drawChar@line
 13853  00293A  D000               	goto	l9108
 13854  00293C                     l9108:
 13855                           
 13856                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 13857  00293C  0E00               	movlw	0
 13858  00293E  6E37               	movwf	drawChar@j,c
 13859  002940                     l9110:
 13860  002940  0E06               	movlw	6
 13861  002942  6437               	cpfsgt	drawChar@j,c
 13862  002944  D001               	goto	l768
 13863  002946  D053               	goto	l9134
 13864  002948                     l768:
 13865                           
 13866                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 13867  002948  A035               	btfss	drawChar@line,0,c
 13868  00294A  D023               	goto	l9120
 13869                           
 13870                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 13871  00294C  0434               	decf	drawChar@size,w,c
 13872  00294E  A4D8               	btfss	status,2,c
 13873  002950  D00C               	goto	l9118
 13874  002952  502E               	movf	drawChar@y,w,c
 13875  002954  2437               	addwf	drawChar@j,w,c
 13876  002956  6E18               	movwf	drawPixel@y,c
 13877  002958  C030  F019         	movff	drawChar@color,drawPixel@color
 13878  00295C  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 13879  002960  5036               	movf	drawChar@x,w,c
 13880  002962  2438               	addwf	drawChar@i,w,c
 13881  002964  ECA8  F026         	call	_drawPixel
 13882  002968  D03E               	goto	l9128
 13883  00296A                     l9118:
 13884                           
 13885                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 13886  00296A  5037               	movf	drawChar@j,w,c
 13887  00296C  0234               	mulwf	drawChar@size,c
 13888  00296E  50F3               	movf	prodl,w,c
 13889  002970  242E               	addwf	drawChar@y,w,c
 13890  002972  6E23               	movwf	fillRect@y,c
 13891  002974  C034  F024         	movff	drawChar@size,fillRect@w
 13892  002978  C034  F025         	movff	drawChar@size,fillRect@h
 13893  00297C  C030  F026         	movff	drawChar@color,fillRect@color
 13894  002980  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 13895  002984  5038               	movf	drawChar@i,w,c
 13896  002986  0234               	mulwf	drawChar@size,c
 13897  002988  50F3               	movf	prodl,w,c
 13898  00298A  2436               	addwf	drawChar@x,w,c
 13899  00298C  EC53  F025         	call	_fillRect
 13900                           
 13901                           ;ST7735_TFT.c: 465: }
 13902  002990  D02A               	goto	l9128
 13903  002992                     l9120:
 13904                           
 13905                           ;ST7735_TFT.c: 466: else if(bg != color) {
 13906  002992  5030               	movf	drawChar@color,w,c
 13907  002994  1832               	xorwf	drawChar@bg,w,c
 13908  002996  E104               	bnz	u7380
 13909  002998  5031               	movf	drawChar@color+1,w,c
 13910  00299A  1833               	xorwf	drawChar@bg+1,w,c
 13911  00299C  B4D8               	btfsc	status,2,c
 13912  00299E  D023               	goto	l9128
 13913  0029A0                     u7380:
 13914                           
 13915                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 13916  0029A0  0434               	decf	drawChar@size,w,c
 13917  0029A2  A4D8               	btfss	status,2,c
 13918  0029A4  D00C               	goto	l9126
 13919  0029A6  502E               	movf	drawChar@y,w,c
 13920  0029A8  2437               	addwf	drawChar@j,w,c
 13921  0029AA  6E18               	movwf	drawPixel@y,c
 13922  0029AC  C032  F019         	movff	drawChar@bg,drawPixel@color
 13923  0029B0  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 13924  0029B4  5036               	movf	drawChar@x,w,c
 13925  0029B6  2438               	addwf	drawChar@i,w,c
 13926  0029B8  ECA8  F026         	call	_drawPixel
 13927  0029BC  D014               	goto	l9128
 13928  0029BE                     l9126:
 13929                           
 13930                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 13931  0029BE  5037               	movf	drawChar@j,w,c
 13932  0029C0  0234               	mulwf	drawChar@size,c
 13933  0029C2  50F3               	movf	prodl,w,c
 13934  0029C4  242E               	addwf	drawChar@y,w,c
 13935  0029C6  6E23               	movwf	fillRect@y,c
 13936  0029C8  C034  F024         	movff	drawChar@size,fillRect@w
 13937  0029CC  C034  F025         	movff	drawChar@size,fillRect@h
 13938  0029D0  C032  F026         	movff	drawChar@bg,fillRect@color
 13939  0029D4  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 13940  0029D8  5038               	movf	drawChar@i,w,c
 13941  0029DA  0234               	mulwf	drawChar@size,c
 13942  0029DC  50F3               	movf	prodl,w,c
 13943  0029DE  2436               	addwf	drawChar@x,w,c
 13944  0029E0  EC53  F025         	call	_fillRect
 13945  0029E4  D000               	goto	l9128
 13946  0029E6                     l9128:
 13947  0029E6  2A37               	incf	drawChar@j,f,c
 13948  0029E8  90D8               	bcf	status,0,c
 13949  0029EA  3235               	rrcf	drawChar@line,f,c
 13950  0029EC  D7A9               	goto	l9110
 13951  0029EE                     l9134:
 13952  0029EE  2A38               	incf	drawChar@i,f,c
 13953  0029F0  D76F               	goto	l9098
 13954  0029F2                     l759:
 13955  0029F2  0012               	return		;funcret
 13956  0029F4                     __end_of_drawChar:
 13957                           	opt stack 0
 13958                           tblptru	equ	0xFF8
 13959                           tblptrh	equ	0xFF7
 13960                           tblptrl	equ	0xFF6
 13961                           tablat	equ	0xFF5
 13962                           prodh	equ	0xFF4
 13963                           prodl	equ	0xFF3
 13964                           intcon	equ	0xFF2
 13965                           intcon2	equ	0xFF1
 13966                           postinc0	equ	0xFEE
 13967                           wreg	equ	0xFE8
 13968                           postdec1	equ	0xFE5
 13969                           fsr1l	equ	0xFE1
 13970                           indf2	equ	0xFDF
 13971                           postinc2	equ	0xFDE
 13972                           fsr2h	equ	0xFDA
 13973                           fsr2l	equ	0xFD9
 13974                           status	equ	0xFD8
 13975                           
 13976 ;; *************** function _fillRect *****************
 13977 ;; Defined at:
 13978 ;;		line 437 in file "ST7735_TFT.c"
 13979 ;; Parameters:    Size  Location     Type
 13980 ;;  x               1    wreg     unsigned char 
 13981 ;;  y               1   34[COMRAM] unsigned char 
 13982 ;;  w               1   35[COMRAM] unsigned char 
 13983 ;;  h               1   36[COMRAM] unsigned char 
 13984 ;;  color           2   37[COMRAM] unsigned int 
 13985 ;; Auto vars:     Size  Location     Type
 13986 ;;  x               1   42[COMRAM] unsigned char 
 13987 ;;  i               2   43[COMRAM] int 
 13988 ;; Return value:  Size  Location     Type
 13989 ;;		None               void
 13990 ;; Registers used:
 13991 ;;		wreg, status,2, status,0, cstack
 13992 ;; Tracked objects:
 13993 ;;		On entry : 0/0
 13994 ;;		On exit  : 0/0
 13995 ;;		Unchanged: 0/0
 13996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13997 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13998 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14000 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;Total ram usage:       11 bytes
 14002 ;; Hardware stack levels used:    1
 14003 ;; Hardware stack levels required when called:    7
 14004 ;; This function calls:
 14005 ;;		_drawFastVLine
 14006 ;; This function is called by:
 14007 ;;		_drawChar
 14008 ;;		_Initialize_Setup_Alarm_Time_Screen
 14009 ;;		_Initialize_Setup_Time_Screen
 14010 ;;		_Update_Setup_Screen_Cursor_Forward
 14011 ;;		_Update_Setup_Screen_Cursor_Backward
 14012 ;; This function uses a non-reentrant model
 14013 ;;
 14014                           
 14015                           	psect	text72
 14016  004AA6                     __ptext72:
 14017                           	opt stack 0
 14018  004AA6                     _fillRect:
 14019                           	opt stack 20
 14020                           
 14021                           ;incstack = 0
 14022                           ;fillRect@x stored from wreg
 14023  004AA6  6E2B               	movwf	fillRect@x,c
 14024                           
 14025                           ;ST7735_TFT.c: 439: signed int i;
 14026                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 14027  004AA8  C02B  F02C         	movff	fillRect@x,fillRect@i
 14028  004AAC  6A2D               	clrf	fillRect@i+1,c
 14029  004AAE  D00E               	goto	l5614
 14030  004AB0                     l5610:
 14031                           
 14032                           ;ST7735_TFT.c: 442: {
 14033                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 14034  004AB0  C023  F018         	movff	fillRect@y,drawFastVLine@y
 14035  004AB4  C025  F019         	movff	fillRect@h,drawFastVLine@h
 14036  004AB8  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 14037  004ABC  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 14038  004AC0  502C               	movf	fillRect@i,w,c
 14039  004AC2  EC54  F021         	call	_drawFastVLine
 14040  004AC6  4A2C               	infsnz	fillRect@i,f,c
 14041  004AC8  2A2D               	incf	fillRect@i+1,f,c
 14042  004ACA  D000               	goto	l5614
 14043  004ACC                     l5614:
 14044  004ACC  5024               	movf	fillRect@w,w,c
 14045  004ACE  C02B  F028         	movff	fillRect@x,??_fillRect
 14046  004AD2  6A29               	clrf	(??_fillRect+1)& (0+255),c
 14047  004AD4  2628               	addwf	??_fillRect,f,c
 14048  004AD6  0E00               	movlw	0
 14049  004AD8  2229               	addwfc	??_fillRect+1,f,c
 14050  004ADA  5028               	movf	??_fillRect,w,c
 14051  004ADC  5C2C               	subwf	fillRect@i,w,c
 14052  004ADE  502D               	movf	fillRect@i+1,w,c
 14053  004AE0  0A80               	xorlw	128
 14054  004AE2  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 14055  004AE4  5029               	movf	??_fillRect+1,w,c
 14056  004AE6  0A80               	xorlw	128
 14057  004AE8  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 14058  004AEA  A0D8               	btfss	status,0,c
 14059  004AEC  D7E1               	goto	l5610
 14060  004AEE  0012               	return		;funcret
 14061  004AF0                     __end_of_fillRect:
 14062                           	opt stack 0
 14063                           tblptru	equ	0xFF8
 14064                           tblptrh	equ	0xFF7
 14065                           tblptrl	equ	0xFF6
 14066                           tablat	equ	0xFF5
 14067                           prodh	equ	0xFF4
 14068                           prodl	equ	0xFF3
 14069                           intcon	equ	0xFF2
 14070                           intcon2	equ	0xFF1
 14071                           postinc0	equ	0xFEE
 14072                           wreg	equ	0xFE8
 14073                           postdec1	equ	0xFE5
 14074                           fsr1l	equ	0xFE1
 14075                           indf2	equ	0xFDF
 14076                           postinc2	equ	0xFDE
 14077                           fsr2h	equ	0xFDA
 14078                           fsr2l	equ	0xFD9
 14079                           status	equ	0xFD8
 14080                           
 14081 ;; *************** function _drawFastVLine *****************
 14082 ;; Defined at:
 14083 ;;		line 416 in file "ST7735_TFT.c"
 14084 ;; Parameters:    Size  Location     Type
 14085 ;;  x               1    wreg     unsigned char 
 14086 ;;  y               1   23[COMRAM] unsigned char 
 14087 ;;  h               1   24[COMRAM] unsigned char 
 14088 ;;  color           2   25[COMRAM] unsigned int 
 14089 ;; Auto vars:     Size  Location     Type
 14090 ;;  x               1   33[COMRAM] unsigned char 
 14091 ;;  lo              1   32[COMRAM] unsigned char 
 14092 ;;  hi              1   31[COMRAM] unsigned char 
 14093 ;; Return value:  Size  Location     Type
 14094 ;;		None               void
 14095 ;; Registers used:
 14096 ;;		wreg, status,2, status,0, cstack
 14097 ;; Tracked objects:
 14098 ;;		On entry : 0/0
 14099 ;;		On exit  : 0/0
 14100 ;;		Unchanged: 0/0
 14101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14106 ;;Total ram usage:       11 bytes
 14107 ;; Hardware stack levels used:    1
 14108 ;; Hardware stack levels required when called:    6
 14109 ;; This function calls:
 14110 ;;		_setAddrWindow
 14111 ;;		_spiwrite
 14112 ;; This function is called by:
 14113 ;;		_fillRect
 14114 ;;		_fillCircleHelper
 14115 ;;		_fillCircle
 14116 ;;		_drawRect
 14117 ;; This function uses a non-reentrant model
 14118 ;;
 14119                           
 14120                           	psect	text73
 14121  0042A8                     __ptext73:
 14122                           	opt stack 0
 14123  0042A8                     _drawFastVLine:
 14124                           	opt stack 20
 14125                           
 14126                           ;incstack = 0
 14127                           ;drawFastVLine@x stored from wreg
 14128  0042A8  6E22               	movwf	drawFastVLine@x,c
 14129                           
 14130                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 14131                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 14132  0042AA  0E80               	movlw	128
 14133  0042AC  6022               	cpfslt	drawFastVLine@x,c
 14134  0042AE  D03F               	goto	l743
 14135  0042B0  0E9F               	movlw	159
 14136  0042B2  6418               	cpfsgt	drawFastVLine@y,c
 14137  0042B4  D001               	goto	l5512
 14138                           
 14139                           ;ST7735_TFT.c: 420: return;
 14140  0042B6  D03B               	goto	l743
 14141  0042B8                     l5512:
 14142                           
 14143                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 14144  0042B8  0EFF               	movlw	255
 14145  0042BA  6E1C               	movwf	??_drawFastVLine& (0+255),c
 14146  0042BC  0EFF               	movlw	255
 14147  0042BE  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 14148  0042C0  5019               	movf	drawFastVLine@h,w,c
 14149  0042C2  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 14150  0042C6  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 14151  0042C8  261E               	addwf	??_drawFastVLine+2,f,c
 14152  0042CA  0E00               	movlw	0
 14153  0042CC  221F               	addwfc	??_drawFastVLine+3,f,c
 14154  0042CE  501C               	movf	??_drawFastVLine,w,c
 14155  0042D0  261E               	addwf	??_drawFastVLine+2,f,c
 14156  0042D2  501D               	movf	??_drawFastVLine+1,w,c
 14157  0042D4  221F               	addwfc	??_drawFastVLine+3,f,c
 14158  0042D6  BE1F               	btfsc	??_drawFastVLine+3,7,c
 14159  0042D8  D00B               	goto	l5516
 14160  0042DA  501F               	movf	??_drawFastVLine+3,w,c
 14161  0042DC  E104               	bnz	u3430
 14162  0042DE  0EA0               	movlw	160
 14163  0042E0  5C1E               	subwf	??_drawFastVLine+2,w,c
 14164  0042E2  A0D8               	btfss	status,0,c
 14165  0042E4  D005               	goto	l5516
 14166  0042E6                     u3430:
 14167                           
 14168                           ;ST7735_TFT.c: 422: h = 160 - y;
 14169  0042E6  5018               	movf	drawFastVLine@y,w,c
 14170  0042E8  0800               	sublw	0
 14171  0042EA  0FA0               	addlw	160
 14172  0042EC  6E19               	movwf	drawFastVLine@h,c
 14173  0042EE  D000               	goto	l5516
 14174  0042F0                     l5516:
 14175                           
 14176                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 14177  0042F0  501B               	movf	drawFastVLine@color+1,w,c
 14178  0042F2  6E20               	movwf	drawFastVLine@hi,c
 14179  0042F4  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 14180                           
 14181                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 14182  0042F8  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 14183  0042FC  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 14184  004300  5018               	movf	drawFastVLine@y,w,c
 14185  004302  2419               	addwf	drawFastVLine@h,w,c
 14186  004304  6E1C               	movwf	??_drawFastVLine& (0+255),c
 14187  004306  041C               	decf	??_drawFastVLine,w,c
 14188  004308  6E16               	movwf	setAddrWindow@y1,c
 14189  00430A  5022               	movf	drawFastVLine@x,w,c
 14190  00430C  EC86  F024         	call	_setAddrWindow
 14191                           
 14192                           ;ST7735_TFT.c: 425: PORTBbits.RB5 = 1;
 14193  004310  8A81               	bsf	3969,5,c	;volatile
 14194                           
 14195                           ;ST7735_TFT.c: 426: PORTBbits.RB6 = 0;
 14196  004312  9C81               	bcf	3969,6,c	;volatile
 14197                           
 14198                           ;ST7735_TFT.c: 428: while (h--) {
 14199  004314  D007               	goto	l5528
 14200  004316                     l5526:
 14201                           
 14202                           ;ST7735_TFT.c: 429: spiwrite(hi);
 14203  004316  5020               	movf	drawFastVLine@hi,w,c
 14204  004318  EC98  F028         	call	_spiwrite
 14205                           
 14206                           ;ST7735_TFT.c: 430: spiwrite(lo);
 14207  00431C  5021               	movf	drawFastVLine@lo,w,c
 14208  00431E  EC98  F028         	call	_spiwrite
 14209  004322  D000               	goto	l5528
 14210  004324                     l5528:
 14211  004324  0619               	decf	drawFastVLine@h,f,c
 14212  004326  2819               	incf	drawFastVLine@h,w,c
 14213  004328  A4D8               	btfss	status,2,c
 14214  00432A  D7F5               	goto	l5526
 14215                           
 14216                           ;ST7735_TFT.c: 431: }
 14217                           ;ST7735_TFT.c: 432: PORTBbits.RB6 = 1;
 14218  00432C  8C81               	bsf	3969,6,c	;volatile
 14219  00432E                     l743:
 14220  00432E  0012               	return		;funcret
 14221  004330                     __end_of_drawFastVLine:
 14222                           	opt stack 0
 14223                           tblptru	equ	0xFF8
 14224                           tblptrh	equ	0xFF7
 14225                           tblptrl	equ	0xFF6
 14226                           tablat	equ	0xFF5
 14227                           prodh	equ	0xFF4
 14228                           prodl	equ	0xFF3
 14229                           intcon	equ	0xFF2
 14230                           intcon2	equ	0xFF1
 14231                           postinc0	equ	0xFEE
 14232                           wreg	equ	0xFE8
 14233                           postdec1	equ	0xFE5
 14234                           fsr1l	equ	0xFE1
 14235                           indf2	equ	0xFDF
 14236                           postinc2	equ	0xFDE
 14237                           fsr2h	equ	0xFDA
 14238                           fsr2l	equ	0xFD9
 14239                           status	equ	0xFD8
 14240                           
 14241 ;; *************** function _drawPixel *****************
 14242 ;; Defined at:
 14243 ;;		line 407 in file "ST7735_TFT.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  x               1    wreg     unsigned char 
 14246 ;;  y               1   23[COMRAM] unsigned char 
 14247 ;;  color           2   24[COMRAM] unsigned int 
 14248 ;; Auto vars:     Size  Location     Type
 14249 ;;  x               1   26[COMRAM] unsigned char 
 14250 ;; Return value:  Size  Location     Type
 14251 ;;		None               void
 14252 ;; Registers used:
 14253 ;;		wreg, status,2, status,0, cstack
 14254 ;; Tracked objects:
 14255 ;;		On entry : 0/0
 14256 ;;		On exit  : 0/0
 14257 ;;		Unchanged: 0/0
 14258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14259 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14262 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14263 ;;Total ram usage:        4 bytes
 14264 ;; Hardware stack levels used:    1
 14265 ;; Hardware stack levels required when called:    6
 14266 ;; This function calls:
 14267 ;;		_setAddrWindow
 14268 ;;		_write_data
 14269 ;; This function is called by:
 14270 ;;		_drawChar
 14271 ;;		_drawCircle
 14272 ;;		_drawCircleHelper
 14273 ;; This function uses a non-reentrant model
 14274 ;;
 14275                           
 14276                           	psect	text74
 14277  004D50                     __ptext74:
 14278                           	opt stack 0
 14279  004D50                     _drawPixel:
 14280                           	opt stack 21
 14281                           
 14282                           ;incstack = 0
 14283                           ;drawPixel@x stored from wreg
 14284  004D50  6E1B               	movwf	drawPixel@x,c
 14285                           
 14286                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 14287  004D52  0E80               	movlw	128
 14288  004D54  601B               	cpfslt	drawPixel@x,c
 14289  004D56  D013               	goto	l737
 14290  004D58  0E9F               	movlw	159
 14291  004D5A  6418               	cpfsgt	drawPixel@y,c
 14292  004D5C  D001               	goto	l5602
 14293                           
 14294                           ;ST7735_TFT.c: 410: return;
 14295  004D5E  D00F               	goto	l737
 14296  004D60                     l5602:
 14297                           
 14298                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 14299  004D60  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 14300  004D64  281B               	incf	drawPixel@x,w,c
 14301  004D66  6E15               	movwf	setAddrWindow@x1,c
 14302  004D68  2818               	incf	drawPixel@y,w,c
 14303  004D6A  6E16               	movwf	setAddrWindow@y1,c
 14304  004D6C  501B               	movf	drawPixel@x,w,c
 14305  004D6E  EC86  F024         	call	_setAddrWindow
 14306                           
 14307                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 14308  004D72  501A               	movf	drawPixel@color+1,w,c
 14309  004D74  EC03  F029         	call	_write_data
 14310                           
 14311                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 14312  004D78  5019               	movf	drawPixel@color,w,c
 14313  004D7A  EC03  F029         	call	_write_data
 14314  004D7E                     l737:
 14315  004D7E  0012               	return		;funcret
 14316  004D80                     __end_of_drawPixel:
 14317                           	opt stack 0
 14318                           tblptru	equ	0xFF8
 14319                           tblptrh	equ	0xFF7
 14320                           tblptrl	equ	0xFF6
 14321                           tablat	equ	0xFF5
 14322                           prodh	equ	0xFF4
 14323                           prodl	equ	0xFF3
 14324                           intcon	equ	0xFF2
 14325                           intcon2	equ	0xFF1
 14326                           postinc0	equ	0xFEE
 14327                           wreg	equ	0xFE8
 14328                           postdec1	equ	0xFE5
 14329                           fsr1l	equ	0xFE1
 14330                           indf2	equ	0xFDF
 14331                           postinc2	equ	0xFDE
 14332                           fsr2h	equ	0xFDA
 14333                           fsr2l	equ	0xFD9
 14334                           status	equ	0xFD8
 14335                           
 14336 ;; *************** function _setAddrWindow *****************
 14337 ;; Defined at:
 14338 ;;		line 392 in file "ST7735_TFT.c"
 14339 ;; Parameters:    Size  Location     Type
 14340 ;;  x0              1    wreg     unsigned char 
 14341 ;;  y0              1   19[COMRAM] unsigned char 
 14342 ;;  x1              1   20[COMRAM] unsigned char 
 14343 ;;  y1              1   21[COMRAM] unsigned char 
 14344 ;; Auto vars:     Size  Location     Type
 14345 ;;  x0              1   22[COMRAM] unsigned char 
 14346 ;; Return value:  Size  Location     Type
 14347 ;;		None               void
 14348 ;; Registers used:
 14349 ;;		wreg, status,2, status,0, cstack
 14350 ;; Tracked objects:
 14351 ;;		On entry : 0/0
 14352 ;;		On exit  : 0/0
 14353 ;;		Unchanged: 0/0
 14354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14355 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14356 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14358 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;Total ram usage:        4 bytes
 14360 ;; Hardware stack levels used:    1
 14361 ;; Hardware stack levels required when called:    5
 14362 ;; This function calls:
 14363 ;;		_write_command
 14364 ;;		_write_data
 14365 ;; This function is called by:
 14366 ;;		_drawPixel
 14367 ;;		_drawFastVLine
 14368 ;;		_fillRectangle
 14369 ;;		_drawFastHLine
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text75
 14374  00490C                     __ptext75:
 14375                           	opt stack 0
 14376  00490C                     _setAddrWindow:
 14377                           	opt stack 20
 14378                           
 14379                           ;incstack = 0
 14380                           ;setAddrWindow@x0 stored from wreg
 14381  00490C  6E17               	movwf	setAddrWindow@x0,c
 14382                           
 14383                           ;ST7735_TFT.c: 394: write_command(0x2A);
 14384  00490E  0E2A               	movlw	42
 14385  004910  EC0B  F029         	call	_write_command
 14386                           
 14387                           ;ST7735_TFT.c: 395: write_data(0);
 14388  004914  0E00               	movlw	0
 14389  004916  EC03  F029         	call	_write_data
 14390                           
 14391                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 14392  00491A  5017               	movf	setAddrWindow@x0,w,c
 14393  00491C  0100               	movlb	0	; () banked
 14394  00491E  25A8               	addwf	_colstart& (0+255),w,b
 14395  004920  EC03  F029         	call	_write_data
 14396                           
 14397                           ;ST7735_TFT.c: 397: write_data(0);
 14398  004924  0E00               	movlw	0
 14399  004926  EC03  F029         	call	_write_data
 14400                           
 14401                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 14402  00492A  5015               	movf	setAddrWindow@x1,w,c
 14403  00492C  0100               	movlb	0	; () banked
 14404  00492E  25A8               	addwf	_colstart& (0+255),w,b
 14405  004930  EC03  F029         	call	_write_data
 14406                           
 14407                           ;ST7735_TFT.c: 399: write_command(0x2B);
 14408  004934  0E2B               	movlw	43
 14409  004936  EC0B  F029         	call	_write_command
 14410                           
 14411                           ;ST7735_TFT.c: 400: write_data(0);
 14412  00493A  0E00               	movlw	0
 14413  00493C  EC03  F029         	call	_write_data
 14414                           
 14415                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 14416  004940  5014               	movf	setAddrWindow@y0,w,c
 14417  004942  0100               	movlb	0	; () banked
 14418  004944  25AA               	addwf	_rowstart& (0+255),w,b
 14419  004946  EC03  F029         	call	_write_data
 14420                           
 14421                           ;ST7735_TFT.c: 402: write_data(0);
 14422  00494A  0E00               	movlw	0
 14423  00494C  EC03  F029         	call	_write_data
 14424                           
 14425                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 14426  004950  5016               	movf	setAddrWindow@y1,w,c
 14427  004952  0100               	movlb	0	; () banked
 14428  004954  25AA               	addwf	_rowstart& (0+255),w,b
 14429  004956  EC03  F029         	call	_write_data
 14430                           
 14431                           ;ST7735_TFT.c: 404: write_command(0x2C);
 14432  00495A  0E2C               	movlw	44
 14433  00495C  EC0B  F029         	call	_write_command
 14434  004960  0012               	return		;funcret
 14435  004962                     __end_of_setAddrWindow:
 14436                           	opt stack 0
 14437                           tblptru	equ	0xFF8
 14438                           tblptrh	equ	0xFF7
 14439                           tblptrl	equ	0xFF6
 14440                           tablat	equ	0xFF5
 14441                           prodh	equ	0xFF4
 14442                           prodl	equ	0xFF3
 14443                           intcon	equ	0xFF2
 14444                           intcon2	equ	0xFF1
 14445                           postinc0	equ	0xFEE
 14446                           wreg	equ	0xFE8
 14447                           postdec1	equ	0xFE5
 14448                           fsr1l	equ	0xFE1
 14449                           indf2	equ	0xFDF
 14450                           postinc2	equ	0xFDE
 14451                           fsr2h	equ	0xFDA
 14452                           fsr2l	equ	0xFD9
 14453                           status	equ	0xFD8
 14454                           
 14455 ;; *************** function _write_data *****************
 14456 ;; Defined at:
 14457 ;;		line 209 in file "ST7735_TFT.c"
 14458 ;; Parameters:    Size  Location     Type
 14459 ;;  data_           1    wreg     unsigned char 
 14460 ;; Auto vars:     Size  Location     Type
 14461 ;;  data_           1   18[COMRAM] unsigned char 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;		None               void
 14464 ;; Registers used:
 14465 ;;		wreg, status,2, cstack
 14466 ;; Tracked objects:
 14467 ;;		On entry : 0/0
 14468 ;;		On exit  : 0/0
 14469 ;;		Unchanged: 0/0
 14470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14475 ;;Total ram usage:        1 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; Hardware stack levels required when called:    4
 14478 ;; This function calls:
 14479 ;;		_spiwrite
 14480 ;; This function is called by:
 14481 ;;		_Rcmd1
 14482 ;;		_Rcmd2red
 14483 ;;		_Rcmd3
 14484 ;;		_setAddrWindow
 14485 ;;		_drawPixel
 14486 ;;		_TFT_GreenTab_Initialize
 14487 ;;		_Bcmd
 14488 ;;		_setScrollDefinition
 14489 ;;		_Rcmd2green
 14490 ;;		_VerticalScroll
 14491 ;; This function uses a non-reentrant model
 14492 ;;
 14493                           
 14494                           	psect	text76
 14495  005206                     __ptext76:
 14496                           	opt stack 0
 14497  005206                     _write_data:
 14498                           	opt stack 20
 14499                           
 14500                           ;incstack = 0
 14501                           ;write_data@data_ stored from wreg
 14502  005206  6E13               	movwf	write_data@data_,c
 14503                           
 14504                           ;ST7735_TFT.c: 211: PORTBbits.RB6 = 0;
 14505  005208  9C81               	bcf	3969,6,c	;volatile
 14506                           
 14507                           ;ST7735_TFT.c: 212: PORTBbits.RB5 = 1;
 14508  00520A  8A81               	bsf	3969,5,c	;volatile
 14509                           
 14510                           ;ST7735_TFT.c: 213: spiwrite(data_);
 14511  00520C  5013               	movf	write_data@data_,w,c
 14512  00520E  EC98  F028         	call	_spiwrite
 14513                           
 14514                           ;ST7735_TFT.c: 214: PORTBbits.RB6 = 1;
 14515  005212  8C81               	bsf	3969,6,c	;volatile
 14516  005214  0012               	return		;funcret
 14517  005216                     __end_of_write_data:
 14518                           	opt stack 0
 14519                           tblptru	equ	0xFF8
 14520                           tblptrh	equ	0xFF7
 14521                           tblptrl	equ	0xFF6
 14522                           tablat	equ	0xFF5
 14523                           prodh	equ	0xFF4
 14524                           prodl	equ	0xFF3
 14525                           intcon	equ	0xFF2
 14526                           intcon2	equ	0xFF1
 14527                           postinc0	equ	0xFEE
 14528                           wreg	equ	0xFE8
 14529                           postdec1	equ	0xFE5
 14530                           fsr1l	equ	0xFE1
 14531                           indf2	equ	0xFDF
 14532                           postinc2	equ	0xFDE
 14533                           fsr2h	equ	0xFDA
 14534                           fsr2l	equ	0xFD9
 14535                           status	equ	0xFD8
 14536                           
 14537 ;; *************** function _write_command *****************
 14538 ;; Defined at:
 14539 ;;		line 198 in file "ST7735_TFT.c"
 14540 ;; Parameters:    Size  Location     Type
 14541 ;;  cmd_            1    wreg     unsigned char 
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;  cmd_            1   18[COMRAM] unsigned char 
 14544 ;; Return value:  Size  Location     Type
 14545 ;;		None               void
 14546 ;; Registers used:
 14547 ;;		wreg, status,2, cstack
 14548 ;; Tracked objects:
 14549 ;;		On entry : 0/0
 14550 ;;		On exit  : 0/0
 14551 ;;		Unchanged: 0/0
 14552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14557 ;;Total ram usage:        1 bytes
 14558 ;; Hardware stack levels used:    1
 14559 ;; Hardware stack levels required when called:    4
 14560 ;; This function calls:
 14561 ;;		_spiwrite
 14562 ;; This function is called by:
 14563 ;;		_Rcmd1
 14564 ;;		_Rcmd2red
 14565 ;;		_Rcmd3
 14566 ;;		_setAddrWindow
 14567 ;;		_TFT_GreenTab_Initialize
 14568 ;;		_Bcmd
 14569 ;;		_setScrollDefinition
 14570 ;;		_Rcmd2green
 14571 ;;		_VerticalScroll
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           	psect	text77
 14576  005216                     __ptext77:
 14577                           	opt stack 0
 14578  005216                     _write_command:
 14579                           	opt stack 20
 14580                           
 14581                           ;incstack = 0
 14582                           ;write_command@cmd_ stored from wreg
 14583  005216  6E13               	movwf	write_command@cmd_,c
 14584                           
 14585                           ;ST7735_TFT.c: 200: PORTBbits.RB6 = 0;
 14586  005218  9C81               	bcf	3969,6,c	;volatile
 14587                           
 14588                           ;ST7735_TFT.c: 202: PORTBbits.RB5 = 0;
 14589  00521A  9A81               	bcf	3969,5,c	;volatile
 14590                           
 14591                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 14592  00521C  5013               	movf	write_command@cmd_,w,c
 14593  00521E  EC98  F028         	call	_spiwrite
 14594                           
 14595                           ;ST7735_TFT.c: 205: PORTBbits.RB6 = 1;
 14596  005222  8C81               	bsf	3969,6,c	;volatile
 14597  005224  0012               	return		;funcret
 14598  005226                     __end_of_write_command:
 14599                           	opt stack 0
 14600                           tblptru	equ	0xFF8
 14601                           tblptrh	equ	0xFF7
 14602                           tblptrl	equ	0xFF6
 14603                           tablat	equ	0xFF5
 14604                           prodh	equ	0xFF4
 14605                           prodl	equ	0xFF3
 14606                           intcon	equ	0xFF2
 14607                           intcon2	equ	0xFF1
 14608                           postinc0	equ	0xFEE
 14609                           wreg	equ	0xFE8
 14610                           postdec1	equ	0xFE5
 14611                           fsr1l	equ	0xFE1
 14612                           indf2	equ	0xFDF
 14613                           postinc2	equ	0xFDE
 14614                           fsr2h	equ	0xFDA
 14615                           fsr2l	equ	0xFD9
 14616                           status	equ	0xFD8
 14617                           
 14618 ;; *************** function _spiwrite *****************
 14619 ;; Defined at:
 14620 ;;		line 189 in file "ST7735_TFT.c"
 14621 ;; Parameters:    Size  Location     Type
 14622 ;;  spidata         1    wreg     unsigned char 
 14623 ;; Auto vars:     Size  Location     Type
 14624 ;;  spidata         1   17[COMRAM] unsigned char 
 14625 ;;  x               1   16[COMRAM] unsigned char 
 14626 ;; Return value:  Size  Location     Type
 14627 ;;		None               void
 14628 ;; Registers used:
 14629 ;;		wreg
 14630 ;; Tracked objects:
 14631 ;;		On entry : 0/0
 14632 ;;		On exit  : 0/0
 14633 ;;		Unchanged: 0/0
 14634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;Total ram usage:        2 bytes
 14640 ;; Hardware stack levels used:    1
 14641 ;; Hardware stack levels required when called:    3
 14642 ;; This function calls:
 14643 ;;		Nothing
 14644 ;; This function is called by:
 14645 ;;		_write_command
 14646 ;;		_write_data
 14647 ;;		_drawFastVLine
 14648 ;;		_fillRectangle
 14649 ;;		_drawFastHLine
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653                           	psect	text78
 14654  005130                     __ptext78:
 14655                           	opt stack 0
 14656  005130                     _spiwrite:
 14657                           	opt stack 22
 14658                           
 14659                           ;incstack = 0
 14660                           ;spiwrite@spidata stored from wreg
 14661  005130  6E12               	movwf	spiwrite@spidata,c
 14662                           
 14663                           ;ST7735_TFT.c: 191: char x;
 14664                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 14665  005132  969E               	bcf	3998,3,c	;volatile
 14666                           
 14667                           ;ST7735_TFT.c: 193: x = SSPBUF;
 14668  005134  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 14669                           
 14670                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 14671  005138  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 14672                           
 14673                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 14674  00513C  D000               	goto	l693
 14675  00513E                     l693:
 14676  00513E  A0C7               	btfss	4039,0,c	;volatile
 14677  005140  D7FE               	goto	l693
 14678  005142  0012               	return		;funcret
 14679  005144                     __end_of_spiwrite:
 14680                           	opt stack 0
 14681                           tblptru	equ	0xFF8
 14682                           tblptrh	equ	0xFF7
 14683                           tblptrl	equ	0xFF6
 14684                           tablat	equ	0xFF5
 14685                           prodh	equ	0xFF4
 14686                           prodl	equ	0xFF3
 14687                           intcon	equ	0xFF2
 14688                           intcon2	equ	0xFF1
 14689                           postinc0	equ	0xFEE
 14690                           wreg	equ	0xFE8
 14691                           postdec1	equ	0xFE5
 14692                           fsr1l	equ	0xFE1
 14693                           indf2	equ	0xFDF
 14694                           postinc2	equ	0xFDE
 14695                           fsr2h	equ	0xFDA
 14696                           fsr2l	equ	0xFD9
 14697                           status	equ	0xFD8
 14698                           
 14699 ;; *************** function _Do_Init *****************
 14700 ;; Defined at:
 14701 ;;		line 92 in file "Main.c"
 14702 ;; Parameters:    Size  Location     Type
 14703 ;;		None
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;		None
 14706 ;; Return value:  Size  Location     Type
 14707 ;;		None               void
 14708 ;; Registers used:
 14709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14710 ;; Tracked objects:
 14711 ;;		On entry : 0/0
 14712 ;;		On exit  : 0/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14719 ;;Total ram usage:        0 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    8
 14722 ;; This function calls:
 14723 ;;		_DS1621_Init
 14724 ;;		_I2C_Init
 14725 ;;		_Init_ADC
 14726 ;;		_Init_Interrupt
 14727 ;;		_Turn_Off_Fan
 14728 ;;		_init_UART
 14729 ;; This function is called by:
 14730 ;;		_main
 14731 ;; This function uses a non-reentrant model
 14732 ;;
 14733                           
 14734                           	psect	text79
 14735  00473C                     __ptext79:
 14736                           	opt stack 0
 14737  00473C                     _Do_Init:
 14738                           	opt stack 22
 14739                           
 14740                           ;Main.c: 94: init_UART();
 14741                           
 14742                           ;incstack = 0
 14743  00473C  ECA2  F028         	call	_init_UART	;wreg free
 14744                           
 14745                           ;Main.c: 95: Init_ADC();
 14746  004740  EC1A  F029         	call	_Init_ADC	;wreg free
 14747                           
 14748                           ;Main.c: 96: OSCCON=0x70;
 14749  004744  0E70               	movlw	112
 14750  004746  6ED3               	movwf	4051,c	;volatile
 14751                           
 14752                           ;Main.c: 98: ADCON1=0x0E;
 14753  004748  0E0E               	movlw	14
 14754  00474A  6EC1               	movwf	4033,c	;volatile
 14755                           
 14756                           ;Main.c: 99: TRISA = 0x22;
 14757  00474C  0E22               	movlw	34
 14758  00474E  6E92               	movwf	3986,c	;volatile
 14759                           
 14760                           ;Main.c: 100: TRISB = 0x03;
 14761  004750  0E03               	movlw	3
 14762  004752  6E93               	movwf	3987,c	;volatile
 14763                           
 14764                           ;Main.c: 101: TRISC = 0x01;
 14765  004754  0E01               	movlw	1
 14766  004756  6E94               	movwf	3988,c	;volatile
 14767                           
 14768                           ;Main.c: 102: TRISD = 0x00;
 14769  004758  0E00               	movlw	0
 14770  00475A  6E95               	movwf	3989,c	;volatile
 14771                           
 14772                           ;Main.c: 103: TRISE = 0x00;
 14773  00475C  0E00               	movlw	0
 14774  00475E  6E96               	movwf	3990,c	;volatile
 14775                           
 14776                           ;Main.c: 104: PORTE = 0x00;
 14777  004760  0E00               	movlw	0
 14778  004762  6E84               	movwf	3972,c	;volatile
 14779                           
 14780                           ;Main.c: 106: HEATER = 0;
 14781  004764  0E00               	movlw	0
 14782  004766  0100               	movlb	0	; () banked
 14783  004768  6F9B               	movwf	_HEATER& (0+255),b
 14784                           
 14785                           ; BSR set to: 0
 14786                           ;Main.c: 107: RBPU=0;
 14787  00476A  9EF1               	bcf	intcon2,7,c	;volatile
 14788                           
 14789                           ; BSR set to: 0
 14790                           ;Main.c: 109: TMR3L = 0x00;
 14791  00476C  0E00               	movlw	0
 14792  00476E  6EB2               	movwf	4018,c	;volatile
 14793                           
 14794                           ; BSR set to: 0
 14795                           ;Main.c: 110: T3CON = 0x03;
 14796  004770  0E03               	movlw	3
 14797  004772  6EB1               	movwf	4017,c	;volatile
 14798                           
 14799                           ; BSR set to: 0
 14800                           ;Main.c: 111: I2C_Init(100000);
 14801  004774  0EA0               	movlw	160
 14802  004776  6E11               	movwf	I2C_Init@c,c
 14803  004778  0E86               	movlw	134
 14804  00477A  6E12               	movwf	I2C_Init@c+1,c
 14805  00477C  0E01               	movlw	1
 14806  00477E  6E13               	movwf	I2C_Init@c+2,c
 14807  004780  0E00               	movlw	0
 14808  004782  6E14               	movwf	I2C_Init@c+3,c
 14809  004784  EC2E  F029         	call	_I2C_Init	;wreg free
 14810                           
 14811                           ;Main.c: 113: DS1621_Init();
 14812  004788  ECED  F027         	call	_DS1621_Init	;wreg free
 14813                           
 14814                           ;Main.c: 114: Init_Interrupt();
 14815  00478C  ECDE  F027         	call	_Init_Interrupt	;wreg free
 14816                           
 14817                           ;Main.c: 115: Turn_Off_Fan();
 14818  004790  EC5C  F027         	call	_Turn_Off_Fan	;wreg free
 14819                           
 14820                           ;Main.c: 116: heater_set_temp = 75;
 14821  004794  0E4B               	movlw	75
 14822  004796  0100               	movlb	0	; () banked
 14823  004798  6FB4               	movwf	_heater_set_temp& (0+255),b
 14824                           
 14825                           ; BSR set to: 0
 14826  00479A  0012               	return		;funcret
 14827  00479C                     __end_of_Do_Init:
 14828                           	opt stack 0
 14829                           tblptru	equ	0xFF8
 14830                           tblptrh	equ	0xFF7
 14831                           tblptrl	equ	0xFF6
 14832                           tablat	equ	0xFF5
 14833                           prodh	equ	0xFF4
 14834                           prodl	equ	0xFF3
 14835                           intcon	equ	0xFF2
 14836                           intcon2	equ	0xFF1
 14837                           postinc0	equ	0xFEE
 14838                           wreg	equ	0xFE8
 14839                           postdec1	equ	0xFE5
 14840                           fsr1l	equ	0xFE1
 14841                           indf2	equ	0xFDF
 14842                           postinc2	equ	0xFDE
 14843                           fsr2h	equ	0xFDA
 14844                           fsr2l	equ	0xFD9
 14845                           status	equ	0xFD8
 14846                           
 14847 ;; *************** function _init_UART *****************
 14848 ;; Defined at:
 14849 ;;		line 84 in file "Main.c"
 14850 ;; Parameters:    Size  Location     Type
 14851 ;;		None
 14852 ;; Auto vars:     Size  Location     Type
 14853 ;;		None
 14854 ;; Return value:  Size  Location     Type
 14855 ;;		None               void
 14856 ;; Registers used:
 14857 ;;		wreg, status,2, cstack
 14858 ;; Tracked objects:
 14859 ;;		On entry : 0/0
 14860 ;;		On exit  : 0/0
 14861 ;;		Unchanged: 0/0
 14862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14867 ;;Total ram usage:        0 bytes
 14868 ;; Hardware stack levels used:    1
 14869 ;; Hardware stack levels required when called:    4
 14870 ;; This function calls:
 14871 ;;		_OpenUSART
 14872 ;; This function is called by:
 14873 ;;		_Do_Init
 14874 ;; This function uses a non-reentrant model
 14875 ;;
 14876                           
 14877                           	psect	text80
 14878  005144                     __ptext80:
 14879                           	opt stack 0
 14880  005144                     _init_UART:
 14881                           	opt stack 25
 14882                           
 14883                           ;Main.c: 86: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;incstack = 0
 14887  005144  0E00               	movlw	0
 14888  005146  6E12               	movwf	OpenUSART@spbrg+1,c
 14889  005148  0E19               	movlw	25
 14890  00514A  6E11               	movwf	OpenUSART@spbrg,c
 14891  00514C  0E3C               	movlw	60
 14892  00514E  EC98  F022         	call	_OpenUSART
 14893                           
 14894                           ;Main.c: 87: OSCCON = 0x70;
 14895  005152  0E70               	movlw	112
 14896  005154  6ED3               	movwf	4051,c	;volatile
 14897  005156  0012               	return		;funcret
 14898  005158                     __end_of_init_UART:
 14899                           	opt stack 0
 14900                           tblptru	equ	0xFF8
 14901                           tblptrh	equ	0xFF7
 14902                           tblptrl	equ	0xFF6
 14903                           tablat	equ	0xFF5
 14904                           prodh	equ	0xFF4
 14905                           prodl	equ	0xFF3
 14906                           intcon	equ	0xFF2
 14907                           intcon2	equ	0xFF1
 14908                           postinc0	equ	0xFEE
 14909                           wreg	equ	0xFE8
 14910                           postdec1	equ	0xFE5
 14911                           fsr1l	equ	0xFE1
 14912                           indf2	equ	0xFDF
 14913                           postinc2	equ	0xFDE
 14914                           fsr2h	equ	0xFDA
 14915                           fsr2l	equ	0xFD9
 14916                           status	equ	0xFD8
 14917                           
 14918 ;; *************** function _OpenUSART *****************
 14919 ;; Defined at:
 14920 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 14921 ;; Parameters:    Size  Location     Type
 14922 ;;  config          1    wreg     unsigned char 
 14923 ;;  spbrg           2   16[COMRAM] unsigned int 
 14924 ;; Auto vars:     Size  Location     Type
 14925 ;;  config          1   18[COMRAM] unsigned char 
 14926 ;; Return value:  Size  Location     Type
 14927 ;;		None               void
 14928 ;; Registers used:
 14929 ;;		wreg, status,2
 14930 ;; Tracked objects:
 14931 ;;		On entry : 0/0
 14932 ;;		On exit  : 0/0
 14933 ;;		Unchanged: 0/0
 14934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14935 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14939 ;;Total ram usage:        3 bytes
 14940 ;; Hardware stack levels used:    1
 14941 ;; Hardware stack levels required when called:    3
 14942 ;; This function calls:
 14943 ;;		Nothing
 14944 ;; This function is called by:
 14945 ;;		_init_UART
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text81
 14950  004530                     __ptext81:
 14951                           	opt stack 0
 14952  004530                     _OpenUSART:
 14953                           	opt stack 25
 14954                           
 14955                           ;incstack = 0
 14956                           ;OpenUSART@config stored from wreg
 14957  004530  6E13               	movwf	OpenUSART@config,c
 14958  004532  0E00               	movlw	0
 14959  004534  6EAC               	movwf	4012,c	;volatile
 14960  004536  0E00               	movlw	0
 14961  004538  6EAB               	movwf	4011,c	;volatile
 14962  00453A  A013               	btfss	OpenUSART@config,0,c
 14963  00453C  D002               	goto	l7090
 14964  00453E  88AC               	bsf	4012,4,c	;volatile
 14965  004540  D000               	goto	l7090
 14966  004542                     l7090:
 14967  004542  A213               	btfss	OpenUSART@config,1,c
 14968  004544  D003               	goto	l7094
 14969  004546  8CAC               	bsf	4012,6,c	;volatile
 14970  004548  8CAB               	bsf	4011,6,c	;volatile
 14971  00454A  D000               	goto	l7094
 14972  00454C                     l7094:
 14973  00454C  A413               	btfss	OpenUSART@config,2,c
 14974  00454E  D002               	goto	l7098
 14975  004550  8EAC               	bsf	4012,7,c	;volatile
 14976  004552  D000               	goto	l7098
 14977  004554                     l7098:
 14978  004554  A613               	btfss	OpenUSART@config,3,c
 14979  004556  D002               	goto	l1530
 14980  004558  88AB               	bsf	4011,4,c	;volatile
 14981  00455A  D002               	goto	l7102
 14982  00455C                     l1530:
 14983  00455C  8AAB               	bsf	4011,5,c	;volatile
 14984  00455E  D000               	goto	l7102
 14985  004560                     l7102:
 14986  004560  B813               	btfsc	OpenUSART@config,4,c
 14987  004562  84AC               	bsf	4012,2,c	;volatile
 14988  004564  989E               	bcf	3998,4,c	;volatile
 14989  004566  AA13               	btfss	OpenUSART@config,5,c
 14990  004568  D002               	goto	l7110
 14991  00456A  86AB               	bsf	4011,3,c	;volatile
 14992  00456C  D000               	goto	l7110
 14993  00456E                     l7110:
 14994  00456E  AC13               	btfss	OpenUSART@config,6,c
 14995  004570  D002               	goto	l1534
 14996  004572  8A9D               	bsf	3997,5,c	;volatile
 14997  004574  D001               	goto	l1535
 14998  004576                     l1534:
 14999  004576  9A9D               	bcf	3997,5,c	;volatile
 15000  004578                     l1535:
 15001  004578  9A9E               	bcf	3998,5,c	;volatile
 15002  00457A  AE13               	btfss	OpenUSART@config,7,c
 15003  00457C  D002               	goto	l1536
 15004  00457E  889D               	bsf	3997,4,c	;volatile
 15005  004580  D001               	goto	l1537
 15006  004582                     l1536:
 15007  004582  989D               	bcf	3997,4,c	;volatile
 15008  004584                     l1537:
 15009  004584  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 15010  004588  5012               	movf	OpenUSART@spbrg+1,w,c
 15011  00458A  6EB0               	movwf	4016,c	;volatile
 15012  00458C  8AAC               	bsf	4012,5,c	;volatile
 15013  00458E  8EAB               	bsf	4011,7,c	;volatile
 15014  004590  9C94               	bcf	3988,6,c	;volatile
 15015  004592  8E94               	bsf	3988,7,c	;volatile
 15016  004594  B8AC               	btfsc	4012,4,c	;volatile
 15017  004596  BEAC               	btfsc	4012,7,c	;volatile
 15018  004598  D002               	goto	l1539
 15019  00459A  8C94               	bsf	3988,6,c	;volatile
 15020  00459C  D000               	goto	l1539
 15021  00459E                     l1539:
 15022  00459E  0012               	return		;funcret
 15023  0045A0                     __end_of_OpenUSART:
 15024                           	opt stack 0
 15025                           tblptru	equ	0xFF8
 15026                           tblptrh	equ	0xFF7
 15027                           tblptrl	equ	0xFF6
 15028                           tablat	equ	0xFF5
 15029                           prodh	equ	0xFF4
 15030                           prodl	equ	0xFF3
 15031                           intcon	equ	0xFF2
 15032                           intcon2	equ	0xFF1
 15033                           postinc0	equ	0xFEE
 15034                           wreg	equ	0xFE8
 15035                           postdec1	equ	0xFE5
 15036                           fsr1l	equ	0xFE1
 15037                           indf2	equ	0xFDF
 15038                           postinc2	equ	0xFDE
 15039                           fsr2h	equ	0xFDA
 15040                           fsr2l	equ	0xFD9
 15041                           status	equ	0xFD8
 15042                           
 15043 ;; *************** function _Turn_Off_Fan *****************
 15044 ;; Defined at:
 15045 ;;		line 90 in file "Fan_Support.c"
 15046 ;; Parameters:    Size  Location     Type
 15047 ;;		None
 15048 ;; Auto vars:     Size  Location     Type
 15049 ;;		None
 15050 ;; Return value:  Size  Location     Type
 15051 ;;		None               void
 15052 ;; Registers used:
 15053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 0/0
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15063 ;;Total ram usage:        0 bytes
 15064 ;; Hardware stack levels used:    1
 15065 ;; Hardware stack levels required when called:    7
 15066 ;; This function calls:
 15067 ;;		_do_update_pwm
 15068 ;;		_printf
 15069 ;; This function is called by:
 15070 ;;		_Toggle_Heater
 15071 ;;		_Do_Init
 15072 ;; This function uses a non-reentrant model
 15073 ;;
 15074                           
 15075                           	psect	text82
 15076  004EB8                     __ptext82:
 15077                           	opt stack 0
 15078  004EB8                     _Turn_Off_Fan:
 15079                           	opt stack 22
 15080                           
 15081                           ;Fan_Support.c: 93: printf ("Fan is turned off\r\n");
 15082                           
 15083                           ;incstack = 0
 15084  004EB8  0E05               	movlw	low STR_1
 15085  004EBA  0100               	movlb	0	; () banked
 15086  004EBC  6FDC               	movwf	printf@f& (0+255),b
 15087  004EBE  0EFF               	movlw	high STR_1
 15088  004EC0  0100               	movlb	0	; () banked
 15089  004EC2  6FDD               	movwf	(printf@f+1)& (0+255),b
 15090  004EC4  EC0E  F000         	call	_printf	;wreg free
 15091                           
 15092                           ;Fan_Support.c: 94: HEATER = 0;
 15093  004EC8  0E00               	movlw	0
 15094  004ECA  0100               	movlb	0	; () banked
 15095  004ECC  6F9B               	movwf	_HEATER& (0+255),b
 15096                           
 15097                           ; BSR set to: 0
 15098                           ;Fan_Support.c: 95: do_update_pwm(0);
 15099  004ECE  0E00               	movlw	0
 15100  004ED0  ECA6  F01E         	call	_do_update_pwm
 15101                           
 15102                           ;Fan_Support.c: 96: PORTAbits.RA4 = 0;
 15103  004ED4  9880               	bcf	3968,4,c	;volatile
 15104                           
 15105                           ;Fan_Support.c: 97: PORTDbits.RD3 = 0;
 15106  004ED6  9683               	bcf	3971,3,c	;volatile
 15107  004ED8  0012               	return		;funcret
 15108  004EDA                     __end_of_Turn_Off_Fan:
 15109                           	opt stack 0
 15110                           tblptru	equ	0xFF8
 15111                           tblptrh	equ	0xFF7
 15112                           tblptrl	equ	0xFF6
 15113                           tablat	equ	0xFF5
 15114                           prodh	equ	0xFF4
 15115                           prodl	equ	0xFF3
 15116                           intcon	equ	0xFF2
 15117                           intcon2	equ	0xFF1
 15118                           postinc0	equ	0xFEE
 15119                           wreg	equ	0xFE8
 15120                           postdec1	equ	0xFE5
 15121                           fsr1l	equ	0xFE1
 15122                           indf2	equ	0xFDF
 15123                           postinc2	equ	0xFDE
 15124                           fsr2h	equ	0xFDA
 15125                           fsr2l	equ	0xFD9
 15126                           status	equ	0xFD8
 15127                           
 15128 ;; *************** function _printf *****************
 15129 ;; Defined at:
 15130 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;  f               2    0[BANK0 ] PTR const unsigned char 
 15133 ;;		 -> STR_39(22), STR_30(11), STR_7(20), STR_6(24), 
 15134 ;;		 -> STR_5(21), STR_4(30), STR_3(15), STR_2(19), 
 15135 ;;		 -> STR_1(20), 
 15136 ;; Auto vars:     Size  Location     Type
 15137 ;;  idx             1    3[BANK1 ] unsigned char 
 15138 ;;  val             4   16[BANK1 ] unsigned long 
 15139 ;;  tmpval          4    8[BANK1 ] struct .
 15140 ;;  fval            3   22[BANK1 ] struct .
 15141 ;;  cp              3    0        PTR const unsigned char 
 15142 ;;  flag            2   20[BANK1 ] unsigned short 
 15143 ;;  exp             2   14[BANK1 ] int 
 15144 ;;  width           2   12[BANK1 ] int 
 15145 ;;  prec            2    6[BANK1 ] int 
 15146 ;;  ap              2    4[BANK1 ] PTR void [1]
 15147 ;;		 -> ?_printf(2), 
 15148 ;;  len             2    0        unsigned int 
 15149 ;;  c               1   25[BANK1 ] char 
 15150 ;;  d               1    0        unsigned char 
 15151 ;; Return value:  Size  Location     Type
 15152 ;;                  2    0[BANK0 ] int 
 15153 ;; Registers used:
 15154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15155 ;; Tracked objects:
 15156 ;;		On entry : 0/0
 15157 ;;		On exit  : 0/0
 15158 ;;		Unchanged: 0/0
 15159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15160 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15161 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15162 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15163 ;;      Totals:         0      20      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15164 ;;Total ram usage:       46 bytes
 15165 ;; Hardware stack levels used:    1
 15166 ;; Hardware stack levels required when called:    6
 15167 ;; This function calls:
 15168 ;;		___awdiv
 15169 ;;		___ftadd
 15170 ;;		___ftge
 15171 ;;		___ftmul
 15172 ;;		___ftneg
 15173 ;;		___ftsub
 15174 ;;		___fttol
 15175 ;;		___lldiv
 15176 ;;		___llmod
 15177 ;;		___lltoft
 15178 ;;		___wmul
 15179 ;;		__div_to_l_
 15180 ;;		__tdiv_to_l_
 15181 ;;		_fround
 15182 ;;		_isdigit
 15183 ;;		_putch
 15184 ;;		_scale
 15185 ;; This function is called by:
 15186 ;;		_Turn_Off_Fan
 15187 ;;		_Turn_On_Fan
 15188 ;;		_main
 15189 ;;		_Update_Setup_Alarm_Time_Screen
 15190 ;;		_check_for_button_input
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           	psect	text83
 15195  00001C                     __ptext83:
 15196                           	opt stack 0
 15197  00001C                     _printf:
 15198                           	opt stack 24
 15199                           
 15200                           ;doprnt.c: 466: va_list ap;
 15201                           ;doprnt.c: 499: signed char c;
 15202                           ;doprnt.c: 501: int width;
 15203                           ;doprnt.c: 504: int prec;
 15204                           ;doprnt.c: 508: unsigned short flag;
 15205                           ;doprnt.c: 515: char d;
 15206                           ;doprnt.c: 516: double fval;
 15207                           ;doprnt.c: 517: int exp;
 15208                           ;doprnt.c: 523: union {
 15209                           ;doprnt.c: 524: unsigned long vd;
 15210                           ;doprnt.c: 525: double integ;
 15211                           ;doprnt.c: 526: } tmpval;
 15212                           ;doprnt.c: 528: unsigned long val;
 15213                           ;doprnt.c: 529: unsigned len;
 15214                           ;doprnt.c: 530: const char * cp;
 15215                           ;doprnt.c: 533: *ap = __va_start();
 15216                           
 15217                           ;incstack = 0
 15218  00001C  0EDE               	movlw	low (?_printf+2)
 15219  00001E  0101               	movlb	1	; () banked
 15220  000020  6F7B               	movwf	printf@ap& (0+255),b
 15221  000022  0E00               	movlw	high (?_printf+2)
 15222  000024  0101               	movlb	1	; () banked
 15223  000026  6F7C               	movwf	(printf@ap+1)& (0+255),b
 15224                           
 15225                           ;doprnt.c: 536: while(c = *f++) {
 15226  000028  EF1E  F006         	goto	l9738
 15227  00002C                     l9452:
 15228                           
 15229                           ; BSR set to: 1
 15230                           ;doprnt.c: 538: if(c != '%')
 15231  00002C  0E25               	movlw	37
 15232  00002E  0101               	movlb	1	; () banked
 15233  000030  1990               	xorwf	printf@c& (0+255),w,b
 15234  000032  B4D8               	btfsc	status,2,c
 15235  000034  D006               	goto	l9456
 15236                           
 15237                           ; BSR set to: 1
 15238                           ;doprnt.c: 540: {
 15239                           ;doprnt.c: 541: (putch(c) );
 15240  000036  0101               	movlb	1	; () banked
 15241  000038  5190               	movf	printf@c& (0+255),w,b
 15242  00003A  EC13  F029         	call	_putch
 15243                           
 15244                           ;doprnt.c: 542: continue;
 15245  00003E  EF1E  F006         	goto	l9738
 15246  000042                     l9456:
 15247                           
 15248                           ;doprnt.c: 543: }
 15249                           ;doprnt.c: 546: width = 0;
 15250  000042  0E00               	movlw	0
 15251  000044  0101               	movlb	1	; () banked
 15252  000046  6F84               	movwf	(printf@width+1)& (0+255),b
 15253  000048  0E00               	movlw	0
 15254  00004A  6F83               	movwf	printf@width& (0+255),b
 15255                           
 15256                           ;doprnt.c: 548: flag = 0;
 15257  00004C  0E00               	movlw	0
 15258  00004E  0101               	movlb	1	; () banked
 15259  000050  6F8C               	movwf	(printf@flag+1)& (0+255),b
 15260  000052  0E00               	movlw	0
 15261  000054  6F8B               	movwf	printf@flag& (0+255),b
 15262                           
 15263                           ; BSR set to: 1
 15264                           ;doprnt.c: 551: switch(*f) {
 15265                           
 15266                           ;doprnt.c: 550: for(;;) {
 15267  000056  D007               	goto	l9462
 15268  000058                     l9458:
 15269                           
 15270                           ;doprnt.c: 580: flag |= 0x04;
 15271  000058  0101               	movlb	1	; () banked
 15272  00005A  858B               	bsf	printf@flag& (0+255),2,b
 15273                           
 15274                           ;doprnt.c: 581: f++;
 15275  00005C  0100               	movlb	0	; () banked
 15276  00005E  4BDC               	infsnz	printf@f& (0+255),f,b
 15277  000060  2BDD               	incf	(printf@f+1)& (0+255),f,b
 15278                           
 15279                           ;doprnt.c: 582: continue;
 15280  000062  D001               	goto	l9462
 15281                           
 15282                           ; BSR set to: 0
 15283                           ;doprnt.c: 584: }
 15284  000064  D00B               	goto	l9464
 15285  000066                     l9462:
 15286  000066  C0DC  FFF6         	movff	printf@f,tblptrl
 15287  00006A  C0DD  FFF7         	movff	printf@f+1,tblptrh
 15288  00006E                     	if	0	;tblptru may be non-zero
 15289  00006E                     	endif
 15290  00006E                     	if	0	;tblptru may be non-zero
 15291  00006E                     	endif
 15292  00006E  0008               	tblrd		*
 15293  000070  50F5               	movf	tablat,w,c
 15294                           
 15295                           ; Switch size 1, requested type "space"
 15296                           ; Number of cases is 1, Range of values is 48 to 48
 15297                           ; switch strategies available:
 15298                           ; Name         Instructions Cycles
 15299                           ; simple_byte            4     3 (average)
 15300                           ;	Chosen strategy is simple_byte
 15301  000072  0A30               	xorlw	48	; case 48
 15302  000074  B4D8               	btfsc	status,2,c
 15303  000076  D7F0               	goto	l9458
 15304                           
 15305                           ;doprnt.c: 585: break;
 15306  000078  D001               	goto	l9464
 15307                           
 15308                           ;doprnt.c: 586: }
 15309  00007A  D7F5               	goto	l9462
 15310  00007C                     l9464:
 15311                           
 15312                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15313  00007C  C0DC  FFF6         	movff	printf@f,tblptrl
 15314  000080  C0DD  FFF7         	movff	printf@f+1,tblptrh
 15315  000084                     	if	0	;tblptru may be non-zero
 15316  000084                     	endif
 15317  000084                     	if	0	;tblptru may be non-zero
 15318  000084                     	endif
 15319  000084  0008               	tblrd		*
 15320  000086  50F5               	movf	tablat,w,c
 15321  000088  EC6D  F027         	call	_isdigit
 15322  00008C  A0D8               	btfss	status,0,c
 15323  00008E  D04D               	goto	l9482
 15324                           
 15325                           ;doprnt.c: 598: width = 0;
 15326  000090  0E00               	movlw	0
 15327  000092  0101               	movlb	1	; () banked
 15328  000094  6F84               	movwf	(printf@width+1)& (0+255),b
 15329  000096  0E00               	movlw	0
 15330  000098  6F83               	movwf	printf@width& (0+255),b
 15331  00009A  D000               	goto	l9468
 15332  00009C                     l9468:
 15333                           
 15334                           ;doprnt.c: 600: width *= 10;
 15335  00009C  C183  F011         	movff	printf@width,___wmul@multiplier
 15336  0000A0  C184  F012         	movff	printf@width+1,___wmul@multiplier+1
 15337  0000A4  0E00               	movlw	0
 15338  0000A6  6E14               	movwf	___wmul@multiplicand+1,c
 15339  0000A8  0E0A               	movlw	10
 15340  0000AA  6E13               	movwf	___wmul@multiplicand,c
 15341  0000AC  ECFF  F026         	call	___wmul	;wreg free
 15342  0000B0  C011  F183         	movff	?___wmul,printf@width
 15343  0000B4  C012  F184         	movff	?___wmul+1,printf@width+1
 15344                           
 15345                           ;doprnt.c: 601: width += *f++ - '0';
 15346  0000B8  0ED0               	movlw	208
 15347  0000BA  0100               	movlb	0	; () banked
 15348  0000BC  6FEA               	movwf	??_printf& (0+255),b
 15349  0000BE  0EFF               	movlw	255
 15350  0000C0  0100               	movlb	0	; () banked
 15351  0000C2  6FEB               	movwf	(??_printf+1)& (0+255),b
 15352  0000C4  C0DC  FFF6         	movff	printf@f,tblptrl
 15353  0000C8  C0DD  FFF7         	movff	printf@f+1,tblptrh
 15354  0000CC                     	if	0	;tblptru may be non-zero
 15355  0000CC                     	endif
 15356  0000CC                     	if	0	;tblptru may be non-zero
 15357  0000CC                     	endif
 15358  0000CC  0008               	tblrd		*
 15359  0000CE  50F5               	movf	tablat,w,c
 15360  0000D0  0100               	movlb	0	; () banked
 15361  0000D2  6FEC               	movwf	(??_printf+2)& (0+255),b
 15362  0000D4  6BED               	clrf	(??_printf+3)& (0+255),b
 15363  0000D6  0100               	movlb	0	; () banked
 15364  0000D8  51EA               	movf	??_printf& (0+255),w,b
 15365  0000DA  0100               	movlb	0	; () banked
 15366  0000DC  27EC               	addwf	(??_printf+2)& (0+255),f,b
 15367  0000DE  0100               	movlb	0	; () banked
 15368  0000E0  51EB               	movf	(??_printf+1)& (0+255),w,b
 15369  0000E2  0100               	movlb	0	; () banked
 15370  0000E4  23ED               	addwfc	(??_printf+3)& (0+255),f,b
 15371  0000E6  0100               	movlb	0	; () banked
 15372  0000E8  51EC               	movf	(??_printf+2)& (0+255),w,b
 15373  0000EA  0101               	movlb	1	; () banked
 15374  0000EC  2783               	addwf	printf@width& (0+255),f,b
 15375  0000EE  0100               	movlb	0	; () banked
 15376  0000F0  51ED               	movf	(??_printf+3)& (0+255),w,b
 15377  0000F2  0101               	movlb	1	; () banked
 15378  0000F4  2384               	addwfc	(printf@width+1)& (0+255),f,b
 15379                           
 15380                           ; BSR set to: 1
 15381  0000F6  0100               	movlb	0	; () banked
 15382  0000F8  4BDC               	infsnz	printf@f& (0+255),f,b
 15383  0000FA  2BDD               	incf	(printf@f+1)& (0+255),f,b
 15384                           
 15385                           ; BSR set to: 0
 15386                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15387  0000FC  C0DC  FFF6         	movff	printf@f,tblptrl
 15388  000100  C0DD  FFF7         	movff	printf@f+1,tblptrh
 15389  000104                     	if	0	;tblptru may be non-zero
 15390  000104                     	endif
 15391  000104                     	if	0	;tblptru may be non-zero
 15392  000104                     	endif
 15393  000104  0008               	tblrd		*
 15394  000106  50F5               	movf	tablat,w,c
 15395  000108  EC6D  F027         	call	_isdigit
 15396  00010C  A0D8               	btfss	status,0,c
 15397  00010E  D00D               	goto	l9482
 15398  000110  D7C5               	goto	l9468
 15399                           
 15400                           ;doprnt.c: 608: }
 15401                           ;doprnt.c: 635: switch(c = *f++) {
 15402  000112  D00B               	goto	l9482
 15403                           
 15404                           ;doprnt.c: 638: goto alldone;
 15405                           
 15406                           ;doprnt.c: 637: case 0:
 15407  000114  EF2F  F006         	goto	l1506
 15408  000118                     l9476:
 15409                           
 15410                           ;doprnt.c: 663: flag |= 0x400;
 15411  000118  0101               	movlb	1	; () banked
 15412  00011A  858C               	bsf	(printf@flag+1)& (0+255),2,b
 15413                           
 15414                           ; BSR set to: 1
 15415                           ;doprnt.c: 698: case 'i':
 15416                           ;doprnt.c: 699: break;
 15417                           
 15418                           ; BSR set to: 1
 15419                           
 15420                           ;doprnt.c: 697: case 'd':
 15421                           
 15422                           ;doprnt.c: 664: break;
 15423  00011C  D024               	goto	l9484
 15424  00011E                     l9478:
 15425                           
 15426                           ; BSR set to: 1
 15427                           ;doprnt.c: 721: flag |= 0x80;
 15428  00011E  0101               	movlb	1	; () banked
 15429  000120  8F8B               	bsf	printf@flag& (0+255),7,b
 15430                           
 15431                           ;doprnt.c: 723: break;
 15432  000122  D021               	goto	l9484
 15433                           
 15434                           ; BSR set to: 1
 15435                           ;doprnt.c: 813: continue;
 15436                           
 15437                           ;doprnt.c: 802: default:
 15438  000124  EF1E  F006         	goto	l9738
 15439                           
 15440                           ; BSR set to: 1
 15441                           ;doprnt.c: 822: }
 15442  000128  D01E               	goto	l9484
 15443  00012A                     l9482:
 15444  00012A  C0DC  FFF6         	movff	printf@f,tblptrl
 15445  00012E  C0DD  FFF7         	movff	printf@f+1,tblptrh
 15446  000132  0100               	movlb	0	; () banked
 15447  000134  4BDC               	infsnz	printf@f& (0+255),f,b
 15448  000136  2BDD               	incf	(printf@f+1)& (0+255),f,b
 15449  000138                     	if	0	;tblptru may be non-zero
 15450  000138                     	endif
 15451  000138                     	if	0	;tblptru may be non-zero
 15452  000138                     	endif
 15453  000138  0008               	tblrd		*
 15454  00013A  CFF5 F190          	movff	tablat,printf@c
 15455  00013E  0101               	movlb	1	; () banked
 15456  000140  5190               	movf	printf@c& (0+255),w,b
 15457                           
 15458                           ; Switch size 1, requested type "space"
 15459                           ; Number of cases is 5, Range of values is 0 to 120
 15460                           ; switch strategies available:
 15461                           ; Name         Instructions Cycles
 15462                           ; simple_byte           16     9 (average)
 15463                           ;	Chosen strategy is simple_byte
 15464  000142  0A00               	xorlw	0	; case 0
 15465  000144  B4D8               	btfsc	status,2,c
 15466  000146  EF2F  F006         	goto	l1506
 15467  00014A  0A64               	xorlw	100	; case 100
 15468  00014C  B4D8               	btfsc	status,2,c
 15469  00014E  D00B               	goto	l9484
 15470  000150  0A02               	xorlw	2	; case 102
 15471  000152  B4D8               	btfsc	status,2,c
 15472  000154  D7E1               	goto	l9476
 15473  000156  0A0F               	xorlw	15	; case 105
 15474  000158  B4D8               	btfsc	status,2,c
 15475  00015A  D005               	goto	l9484
 15476  00015C  0A11               	xorlw	17	; case 120
 15477  00015E  B4D8               	btfsc	status,2,c
 15478  000160  D7DE               	goto	l9478
 15479  000162  EF1E  F006         	goto	l9738
 15480  000166                     l9484:
 15481                           
 15482                           ; BSR set to: 1
 15483                           ;doprnt.c: 825: if(flag & (0x700)) {
 15484  000166  0E07               	movlw	7
 15485  000168  0101               	movlb	1	; () banked
 15486  00016A  158C               	andwf	(printf@flag+1)& (0+255),w,b
 15487  00016C  B4D8               	btfsc	status,2,c
 15488  00016E  D39A               	goto	l1424
 15489                           
 15490                           ; BSR set to: 1
 15491                           ;doprnt.c: 829: prec = 6;
 15492  000170  0E00               	movlw	0
 15493  000172  0101               	movlb	1	; () banked
 15494  000174  6F7E               	movwf	(printf@prec+1)& (0+255),b
 15495  000176  0E06               	movlw	6
 15496  000178  6F7D               	movwf	printf@prec& (0+255),b
 15497                           
 15498                           ; BSR set to: 1
 15499                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 15500  00017A  C17B  FFD9         	movff	printf@ap,fsr2l
 15501  00017E  C17C  FFDA         	movff	printf@ap+1,fsr2h
 15502  000182  CFDE F18D          	movff	postinc2,printf@fval
 15503  000186  CFDE F18E          	movff	postinc2,printf@fval+1
 15504  00018A  CFDD F18F          	movff	postdec2,printf@fval+2
 15505                           
 15506                           ; BSR set to: 1
 15507  00018E  0E03               	movlw	3
 15508  000190  0101               	movlb	1	; () banked
 15509  000192  277B               	addwf	printf@ap& (0+255),f,b
 15510  000194  0E00               	movlw	0
 15511  000196  237C               	addwfc	(printf@ap+1)& (0+255),f,b
 15512                           
 15513                           ; BSR set to: 1
 15514                           ;doprnt.c: 831: if(fval < 0.0) {
 15515  000198  0101               	movlb	1	; () banked
 15516  00019A  AF8F               	btfss	(printf@fval+2)& (0+255),7,b
 15517  00019C  D012               	goto	l9498
 15518                           
 15519                           ; BSR set to: 1
 15520                           ;doprnt.c: 832: fval = -fval;
 15521  00019E  C18D  F011         	movff	printf@fval,___ftneg@f1
 15522  0001A2  C18E  F012         	movff	printf@fval+1,___ftneg@f1+1
 15523  0001A6  C18F  F013         	movff	printf@fval+2,___ftneg@f1+2
 15524  0001AA  EC39  F027         	call	___ftneg	;wreg free
 15525  0001AE  C011  F18D         	movff	?___ftneg,printf@fval
 15526  0001B2  C012  F18E         	movff	?___ftneg+1,printf@fval+1
 15527  0001B6  C013  F18F         	movff	?___ftneg+2,printf@fval+2
 15528                           
 15529                           ;doprnt.c: 833: flag |= 0x03;
 15530  0001BA  0E03               	movlw	3
 15531  0001BC  0101               	movlb	1	; () banked
 15532  0001BE  138B               	iorwf	printf@flag& (0+255),f,b
 15533  0001C0  D000               	goto	l9498
 15534  0001C2                     l9498:
 15535                           
 15536                           ; BSR set to: 1
 15537                           ;doprnt.c: 834: }
 15538                           ;doprnt.c: 835: exp = 0;
 15539  0001C2  0E00               	movlw	0
 15540  0001C4  0101               	movlb	1	; () banked
 15541  0001C6  6F86               	movwf	(printf@exp+1)& (0+255),b
 15542  0001C8  0E00               	movlw	0
 15543  0001CA  6F85               	movwf	printf@exp& (0+255),b
 15544                           
 15545                           ; BSR set to: 1
 15546                           ;doprnt.c: 836: if( fval!=0) {
 15547  0001CC  0101               	movlb	1	; () banked
 15548  0001CE  518D               	movf	printf@fval& (0+255),w,b
 15549  0001D0  0101               	movlb	1	; () banked
 15550  0001D2  118E               	iorwf	(printf@fval+1)& (0+255),w,b
 15551  0001D4  0101               	movlb	1	; () banked
 15552  0001D6  118F               	iorwf	(printf@fval+2)& (0+255),w,b
 15553  0001D8  B4D8               	btfsc	status,2,c
 15554  0001DA  D093               	goto	l9526
 15555                           
 15556                           ; BSR set to: 1
 15557                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 15558  0001DC  0E82               	movlw	130
 15559  0001DE  0100               	movlb	0	; () banked
 15560  0001E0  6FEA               	movwf	??_printf& (0+255),b
 15561  0001E2  0EFF               	movlw	255
 15562  0001E4  0100               	movlb	0	; () banked
 15563  0001E6  6FEB               	movwf	(??_printf+1)& (0+255),b
 15564  0001E8  C18D  F0EC         	movff	printf@fval,??_printf+2
 15565  0001EC  C18E  F0ED         	movff	printf@fval+1,??_printf+3
 15566  0001F0  C18F  F0EE         	movff	printf@fval+2,??_printf+4
 15567  0001F4  C190  F0EF         	movff	printf@fval+3,??_printf+5
 15568  0001F8  0E10               	movlw	16
 15569  0001FA  D006               	goto	u7930
 15570  0001FC                     u7935:
 15571  0001FC  0100               	movlb	0	; () banked
 15572  0001FE  90D8               	bcf	status,0,c
 15573  000200  33EF               	rrcf	(??_printf+5)& (0+255),f,b
 15574  000202  33EE               	rrcf	(??_printf+4)& (0+255),f,b
 15575  000204  33ED               	rrcf	(??_printf+3)& (0+255),f,b
 15576  000206  33EC               	rrcf	(??_printf+2)& (0+255),f,b
 15577  000208                     u7930:
 15578  000208  2EE8               	decfsz	wreg,f,c
 15579  00020A  D7F8               	goto	u7935
 15580  00020C  0100               	movlb	0	; () banked
 15581  00020E  51EC               	movf	(??_printf+2)& (0+255),w,b
 15582  000210  0100               	movlb	0	; () banked
 15583  000212  25EA               	addwf	??_printf& (0+255),w,b
 15584  000214  0101               	movlb	1	; () banked
 15585  000216  6F85               	movwf	printf@exp& (0+255),b
 15586  000218  0E00               	movlw	0
 15587  00021A  0100               	movlb	0	; () banked
 15588  00021C  21EB               	addwfc	(??_printf+1)& (0+255),w,b
 15589  00021E  0101               	movlb	1	; () banked
 15590  000220  6F86               	movwf	(printf@exp+1)& (0+255),b
 15591                           
 15592                           ; BSR set to: 1
 15593                           ;doprnt.c: 838: exp--;
 15594  000222  0101               	movlb	1	; () banked
 15595  000224  0785               	decf	printf@exp& (0+255),f,b
 15596  000226  A0D8               	btfss	status,0,c
 15597  000228  0786               	decf	(printf@exp+1)& (0+255),f,b
 15598                           
 15599                           ; BSR set to: 1
 15600                           ;doprnt.c: 839: exp *= 3;
 15601  00022A  C185  F011         	movff	printf@exp,___wmul@multiplier
 15602  00022E  C186  F012         	movff	printf@exp+1,___wmul@multiplier+1
 15603  000232  0E00               	movlw	0
 15604  000234  6E14               	movwf	___wmul@multiplicand+1,c
 15605  000236  0E03               	movlw	3
 15606  000238  6E13               	movwf	___wmul@multiplicand,c
 15607  00023A  ECFF  F026         	call	___wmul	;wreg free
 15608  00023E  C011  F185         	movff	?___wmul,printf@exp
 15609  000242  C012  F186         	movff	?___wmul+1,printf@exp+1
 15610                           
 15611                           ;doprnt.c: 840: exp /= 10;
 15612  000246  C185  F017         	movff	printf@exp,___awdiv@dividend
 15613  00024A  C186  F018         	movff	printf@exp+1,___awdiv@dividend+1
 15614  00024E  0E00               	movlw	0
 15615  000250  6E1A               	movwf	___awdiv@divisor+1,c
 15616  000252  0E0A               	movlw	10
 15617  000254  6E19               	movwf	___awdiv@divisor,c
 15618  000256  ECE4  F01F         	call	___awdiv	;wreg free
 15619  00025A  C017  F185         	movff	?___awdiv,printf@exp
 15620  00025E  C018  F186         	movff	?___awdiv+1,printf@exp+1
 15621                           
 15622                           ;doprnt.c: 841: if(exp < 0)
 15623  000262  0101               	movlb	1	; () banked
 15624  000264  AF86               	btfss	(printf@exp+1)& (0+255),7,b
 15625  000266  D005               	goto	l9514
 15626                           
 15627                           ; BSR set to: 1
 15628                           ;doprnt.c: 842: exp--;
 15629  000268  0101               	movlb	1	; () banked
 15630  00026A  0785               	decf	printf@exp& (0+255),f,b
 15631  00026C  A0D8               	btfss	status,0,c
 15632  00026E  0786               	decf	(printf@exp+1)& (0+255),f,b
 15633  000270  D000               	goto	l9514
 15634  000272                     l9514:
 15635                           
 15636                           ; BSR set to: 1
 15637                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 15638  000272  0101               	movlb	1	; () banked
 15639  000274  5185               	movf	printf@exp& (0+255),w,b
 15640  000276  0800               	sublw	0
 15641  000278  EC4E  F009         	call	_scale
 15642  00027C  C043  F17F         	movff	?_scale,printf@tmpval
 15643  000280  C044  F180         	movff	?_scale+1,printf@tmpval+1
 15644  000284  C045  F181         	movff	?_scale+2,printf@tmpval+2
 15645                           
 15646                           ;doprnt.c: 847: tmpval.integ *= fval;
 15647  000288  C17F  F01F         	movff	printf@tmpval,___ftmul@f1
 15648  00028C  C180  F020         	movff	printf@tmpval+1,___ftmul@f1+1
 15649  000290  C181  F021         	movff	printf@tmpval+2,___ftmul@f1+2
 15650  000294  C18D  F022         	movff	printf@fval,___ftmul@f2
 15651  000298  C18E  F023         	movff	printf@fval+1,___ftmul@f2+1
 15652  00029C  C18F  F024         	movff	printf@fval+2,___ftmul@f2+2
 15653  0002A0  ECB5  F018         	call	___ftmul	;wreg free
 15654  0002A4  C01F  F17F         	movff	?___ftmul,printf@tmpval
 15655  0002A8  C020  F180         	movff	?___ftmul+1,printf@tmpval+1
 15656  0002AC  C021  F181         	movff	?___ftmul+2,printf@tmpval+2
 15657                           
 15658                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 15659  0002B0  C17F  F011         	movff	printf@tmpval,___ftge@ff1
 15660  0002B4  C180  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 15661  0002B8  C181  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 15662  0002BC  0E00               	movlw	0
 15663  0002BE  6E14               	movwf	___ftge@ff2,c
 15664  0002C0  0E80               	movlw	128
 15665  0002C2  6E15               	movwf	___ftge@ff2+1,c
 15666  0002C4  0E3F               	movlw	63
 15667  0002C6  6E16               	movwf	___ftge@ff2+2,c
 15668  0002C8  EC2F  F020         	call	___ftge	;wreg free
 15669  0002CC  B0D8               	btfsc	status,0,c
 15670  0002CE  D005               	goto	l9522
 15671                           
 15672                           ;doprnt.c: 849: exp--;
 15673  0002D0  0101               	movlb	1	; () banked
 15674  0002D2  0785               	decf	printf@exp& (0+255),f,b
 15675  0002D4  A0D8               	btfss	status,0,c
 15676  0002D6  0786               	decf	(printf@exp+1)& (0+255),f,b
 15677  0002D8  D014               	goto	l9526
 15678  0002DA                     l9522:
 15679                           
 15680                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 15681  0002DA  C17F  F011         	movff	printf@tmpval,___ftge@ff1
 15682  0002DE  C180  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 15683  0002E2  C181  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 15684  0002E6  0E00               	movlw	0
 15685  0002E8  6E14               	movwf	___ftge@ff2,c
 15686  0002EA  0E20               	movlw	32
 15687  0002EC  6E15               	movwf	___ftge@ff2+1,c
 15688  0002EE  0E41               	movlw	65
 15689  0002F0  6E16               	movwf	___ftge@ff2+2,c
 15690  0002F2  EC2F  F020         	call	___ftge	;wreg free
 15691  0002F6  A0D8               	btfss	status,0,c
 15692  0002F8  D004               	goto	l9526
 15693                           
 15694                           ;doprnt.c: 851: exp++;
 15695  0002FA  0101               	movlb	1	; () banked
 15696  0002FC  4B85               	infsnz	printf@exp& (0+255),f,b
 15697  0002FE  2B86               	incf	(printf@exp+1)& (0+255),f,b
 15698                           
 15699                           ; BSR set to: 1
 15700                           
 15701                           ; BSR set to: 1
 15702  000300  D000               	goto	l9526
 15703  000302                     l9526:
 15704                           
 15705                           ;doprnt.c: 852: }
 15706                           ;doprnt.c: 1112: if(prec <= 12)
 15707  000302  0101               	movlb	1	; () banked
 15708  000304  BF7E               	btfsc	(printf@prec+1)& (0+255),7,b
 15709  000306  D008               	goto	l9528
 15710  000308  0101               	movlb	1	; () banked
 15711  00030A  517E               	movf	(printf@prec+1)& (0+255),w,b
 15712  00030C  E11E               	bnz	l9530
 15713  00030E  0E0D               	movlw	13
 15714  000310  0101               	movlb	1	; () banked
 15715  000312  5D7D               	subwf	printf@prec& (0+255),w,b
 15716  000314  B0D8               	btfsc	status,0,c
 15717  000316  D019               	goto	l9530
 15718  000318                     l9528:
 15719                           
 15720                           ; BSR set to: 1
 15721                           ;doprnt.c: 1113: fval += fround(prec);
 15722  000318  C18D  F04D         	movff	printf@fval,___ftadd@f1
 15723  00031C  C18E  F04E         	movff	printf@fval+1,___ftadd@f1+1
 15724  000320  C18F  F04F         	movff	printf@fval+2,___ftadd@f1+2
 15725  000324  0101               	movlb	1	; () banked
 15726  000326  517D               	movf	printf@prec& (0+255),w,b
 15727  000328  EC36  F00E         	call	_fround
 15728  00032C  C043  F050         	movff	?_fround,___ftadd@f2
 15729  000330  C044  F051         	movff	?_fround+1,___ftadd@f2+1
 15730  000334  C045  F052         	movff	?_fround+2,___ftadd@f2+2
 15731  000338  EC58  F00F         	call	___ftadd	;wreg free
 15732  00033C  C04D  F18D         	movff	?___ftadd,printf@fval
 15733  000340  C04E  F18E         	movff	?___ftadd+1,printf@fval+1
 15734  000344  C04F  F18F         	movff	?___ftadd+2,printf@fval+2
 15735  000348  D000               	goto	l9530
 15736  00034A                     l9530:
 15737                           
 15738                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 15739  00034A  0101               	movlb	1	; () banked
 15740  00034C  BF86               	btfsc	(printf@exp+1)& (0+255),7,b
 15741  00034E  D008               	goto	l9532
 15742  000350  0101               	movlb	1	; () banked
 15743  000352  5186               	movf	(printf@exp+1)& (0+255),w,b
 15744  000354  E128               	bnz	l9538
 15745  000356  0E0A               	movlw	10
 15746  000358  0101               	movlb	1	; () banked
 15747  00035A  5D85               	subwf	printf@exp& (0+255),w,b
 15748  00035C  B0D8               	btfsc	status,0,c
 15749  00035E  D023               	goto	l9538
 15750  000360                     l9532:
 15751                           
 15752                           ; BSR set to: 1
 15753  000360  0101               	movlb	1	; () banked
 15754  000362  518D               	movf	printf@fval& (0+255),w,b
 15755  000364  0101               	movlb	1	; () banked
 15756  000366  118E               	iorwf	(printf@fval+1)& (0+255),w,b
 15757  000368  0101               	movlb	1	; () banked
 15758  00036A  118F               	iorwf	(printf@fval+2)& (0+255),w,b
 15759  00036C  B4D8               	btfsc	status,2,c
 15760  00036E  D077               	goto	l9552
 15761                           
 15762                           ; BSR set to: 1
 15763  000370  C18D  F02E         	movff	printf@fval,___fttol@f1
 15764  000374  C18E  F02F         	movff	printf@fval+1,___fttol@f1+1
 15765  000378  C18F  F030         	movff	printf@fval+2,___fttol@f1+2
 15766  00037C  EC9E  F01A         	call	___fttol	;wreg free
 15767  000380  502E               	movf	?___fttol,w,c
 15768  000382  102F               	iorwf	?___fttol+1,w,c
 15769  000384  1030               	iorwf	?___fttol+2,w,c
 15770  000386  1031               	iorwf	?___fttol+3,w,c
 15771  000388  A4D8               	btfss	status,2,c
 15772  00038A  D069               	goto	l9552
 15773  00038C  0101               	movlb	1	; () banked
 15774  00038E  BF86               	btfsc	(printf@exp+1)& (0+255),7,b
 15775  000390  D066               	goto	l9552
 15776  000392  0101               	movlb	1	; () banked
 15777  000394  5186               	movf	(printf@exp+1)& (0+255),w,b
 15778  000396  E107               	bnz	l9538
 15779  000398  0E02               	movlw	2
 15780  00039A  0101               	movlb	1	; () banked
 15781  00039C  5D85               	subwf	printf@exp& (0+255),w,b
 15782  00039E  B0D8               	btfsc	status,0,c
 15783  0003A0  D002               	goto	l9538
 15784  0003A2  D05D               	goto	l9552
 15785  0003A4  D000               	goto	l9538
 15786  0003A6                     l9538:
 15787                           
 15788                           ; BSR set to: 1
 15789                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 15790  0003A6  C17F  F011         	movff	printf@tmpval,___ftge@ff1
 15791  0003AA  C180  F012         	movff	printf@tmpval+1,___ftge@ff1+1
 15792  0003AE  C181  F013         	movff	printf@tmpval+2,___ftge@ff1+2
 15793  0003B2  0E70               	movlw	112
 15794  0003B4  6E14               	movwf	___ftge@ff2,c
 15795  0003B6  0E89               	movlw	137
 15796  0003B8  6E15               	movwf	___ftge@ff2+1,c
 15797  0003BA  0E40               	movlw	64
 15798  0003BC  6E16               	movwf	___ftge@ff2+2,c
 15799  0003BE  EC2F  F020         	call	___ftge	;wreg free
 15800  0003C2  B0D8               	btfsc	status,0,c
 15801  0003C4  D003               	goto	l9542
 15802                           
 15803                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 15804  0003C6  0101               	movlb	1	; () banked
 15805  0003C8  0EF7               	movlw	247
 15806  0003CA  D002               	goto	L8
 15807  0003CC                     l9542:
 15808                           
 15809                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 15810  0003CC  0101               	movlb	1	; () banked
 15811  0003CE  0EF8               	movlw	248
 15812  0003D0                     L8:
 15813  0003D0  2785               	addwf	printf@exp& (0+255),f,b
 15814  0003D2  0EFF               	movlw	255
 15815  0003D4  2386               	addwfc	(printf@exp+1)& (0+255),f,b
 15816  0003D6  D000               	goto	l9544
 15817  0003D8                     l9544:
 15818                           
 15819                           ; BSR set to: 1
 15820                           ;doprnt.c: 1124: }
 15821                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 15822  0003D8  0101               	movlb	1	; () banked
 15823  0003DA  5185               	movf	printf@exp& (0+255),w,b
 15824  0003DC  EC4E  F009         	call	_scale
 15825  0003E0  C043  F17F         	movff	?_scale,printf@tmpval
 15826  0003E4  C044  F180         	movff	?_scale+1,printf@tmpval+1
 15827  0003E8  C045  F181         	movff	?_scale+2,printf@tmpval+2
 15828                           
 15829                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 15830  0003EC  D017               	goto	l9548
 15831  0003EE  C18D  F011         	movff	printf@fval,__div_to_l_@f1
 15832  0003F2  C18E  F012         	movff	printf@fval+1,__div_to_l_@f1+1
 15833  0003F6  C18F  F013         	movff	printf@fval+2,__div_to_l_@f1+2
 15834  0003FA  C17F  F014         	movff	printf@tmpval,__div_to_l_@f2
 15835  0003FE  C180  F015         	movff	printf@tmpval+1,__div_to_l_@f2+1
 15836  000402  C181  F016         	movff	printf@tmpval+2,__div_to_l_@f2+2
 15837  000406  EC30  F018         	call	__div_to_l_	;wreg free
 15838  00040A  C011  F187         	movff	?__div_to_l_,printf@val
 15839  00040E  C012  F188         	movff	?__div_to_l_+1,printf@val+1
 15840  000412  C013  F189         	movff	?__div_to_l_+2,printf@val+2
 15841  000416  C014  F18A         	movff	?__div_to_l_+3,printf@val+3
 15842  00041A  D017               	goto	l9550
 15843  00041C                     l9548:
 15844  00041C  C18D  F011         	movff	printf@fval,__tdiv_to_l_@f1
 15845  000420  C18E  F012         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 15846  000424  C18F  F013         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 15847  000428  C17F  F014         	movff	printf@tmpval,__tdiv_to_l_@f2
 15848  00042C  C180  F015         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 15849  000430  C181  F016         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 15850  000434  EC9C  F016         	call	__tdiv_to_l_	;wreg free
 15851  000438  C011  F187         	movff	?__tdiv_to_l_,printf@val
 15852  00043C  C012  F188         	movff	?__tdiv_to_l_+1,printf@val+1
 15853  000440  C013  F189         	movff	?__tdiv_to_l_+2,printf@val+2
 15854  000444  C014  F18A         	movff	?__tdiv_to_l_+3,printf@val+3
 15855  000448  D000               	goto	l9550
 15856  00044A                     l9550:
 15857                           
 15858                           ;doprnt.c: 1129: fval = 0.0;
 15859  00044A  0E00               	movlw	0
 15860  00044C  0101               	movlb	1	; () banked
 15861  00044E  6F8D               	movwf	printf@fval& (0+255),b
 15862  000450  0E00               	movlw	0
 15863  000452  0101               	movlb	1	; () banked
 15864  000454  6F8E               	movwf	(printf@fval+1)& (0+255),b
 15865  000456  0E00               	movlw	0
 15866  000458  0101               	movlb	1	; () banked
 15867  00045A  6F8F               	movwf	(printf@fval+2)& (0+255),b
 15868                           
 15869                           ;doprnt.c: 1130: } else {
 15870  00045C  D034               	goto	l9556
 15871  00045E                     l9552:
 15872                           
 15873                           ;doprnt.c: 1131: val = (unsigned long)fval;
 15874  00045E  C18D  F02E         	movff	printf@fval,___fttol@f1
 15875  000462  C18E  F02F         	movff	printf@fval+1,___fttol@f1+1
 15876  000466  C18F  F030         	movff	printf@fval+2,___fttol@f1+2
 15877  00046A  EC9E  F01A         	call	___fttol	;wreg free
 15878  00046E  C02E  F187         	movff	?___fttol,printf@val
 15879  000472  C02F  F188         	movff	?___fttol+1,printf@val+1
 15880  000476  C030  F189         	movff	?___fttol+2,printf@val+2
 15881  00047A  C031  F18A         	movff	?___fttol+3,printf@val+3
 15882                           
 15883                           ;doprnt.c: 1132: fval -= (double)val;
 15884  00047E  C18D  F059         	movff	printf@fval,___ftsub@f1
 15885  000482  C18E  F05A         	movff	printf@fval+1,___ftsub@f1+1
 15886  000486  C18F  F05B         	movff	printf@fval+2,___ftsub@f1+2
 15887  00048A  C187  F019         	movff	printf@val,___lltoft@c
 15888  00048E  C188  F01A         	movff	printf@val+1,___lltoft@c+1
 15889  000492  C189  F01B         	movff	printf@val+2,___lltoft@c+2
 15890  000496  C18A  F01C         	movff	printf@val+3,___lltoft@c+3
 15891  00049A  ECCE  F023         	call	___lltoft	;wreg free
 15892  00049E  C019  F05C         	movff	?___lltoft,___ftsub@f2
 15893  0004A2  C01A  F05D         	movff	?___lltoft+1,___ftsub@f2+1
 15894  0004A6  C01B  F05E         	movff	?___lltoft+2,___ftsub@f2+2
 15895  0004AA  EC9C  F025         	call	___ftsub	;wreg free
 15896  0004AE  C059  F18D         	movff	?___ftsub,printf@fval
 15897  0004B2  C05A  F18E         	movff	?___ftsub+1,printf@fval+1
 15898  0004B6  C05B  F18F         	movff	?___ftsub+2,printf@fval+2
 15899                           
 15900                           ;doprnt.c: 1133: exp = 0;
 15901  0004BA  0E00               	movlw	0
 15902  0004BC  0101               	movlb	1	; () banked
 15903  0004BE  6F86               	movwf	(printf@exp+1)& (0+255),b
 15904  0004C0  0E00               	movlw	0
 15905  0004C2  6F85               	movwf	printf@exp& (0+255),b
 15906  0004C4  D000               	goto	l9556
 15907  0004C6                     l9556:
 15908                           
 15909                           ; BSR set to: 1
 15910                           ;doprnt.c: 1134: }
 15911                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 15912  0004C6  0E01               	movlw	1
 15913  0004C8  0101               	movlb	1	; () banked
 15914  0004CA  6F90               	movwf	printf@c& (0+255),b
 15915  0004CC                     l9558:
 15916                           
 15917                           ; BSR set to: 1
 15918  0004CC  0E0A               	movlw	10
 15919  0004CE  0101               	movlb	1	; () banked
 15920  0004D0  1990               	xorwf	printf@c& (0+255),w,b
 15921  0004D2  B4D8               	btfsc	status,2,c
 15922  0004D4  D022               	goto	l9570
 15923  0004D6  D001               	goto	l9562
 15924                           
 15925                           ; BSR set to: 1
 15926  0004D8  D020               	goto	l9570
 15927  0004DA                     l9562:
 15928                           
 15929                           ; BSR set to: 1
 15930                           ;doprnt.c: 1137: if(val < dpowers[c])
 15931  0004DA  0101               	movlb	1	; () banked
 15932  0004DC  5190               	movf	printf@c& (0+255),w,b
 15933  0004DE  0D04               	mullw	4
 15934  0004E0  0EE6               	movlw	low _dpowers
 15935  0004E2  24F3               	addwf	prodl,w,c
 15936  0004E4  6EF6               	movwf	tblptrl,c
 15937  0004E6  0EFD               	movlw	high _dpowers
 15938  0004E8  20F4               	addwfc	prodh,w,c
 15939  0004EA  6EF7               	movwf	tblptrh,c
 15940  0004EC                     	if	0	;There are less than 3 active tblptr bytes
 15941  0004EC                     	endif
 15942  0004EC  0009               	tblrd		*+
 15943  0004EE  50F5               	movf	tablat,w,c
 15944  0004F0  0101               	movlb	1	; () banked
 15945  0004F2  5D87               	subwf	printf@val& (0+255),w,b
 15946  0004F4  0009               	tblrd		*+
 15947  0004F6  50F5               	movf	tablat,w,c
 15948  0004F8  0101               	movlb	1	; () banked
 15949  0004FA  5988               	subwfb	(printf@val+1)& (0+255),w,b
 15950  0004FC  0009               	tblrd		*+
 15951  0004FE  50F5               	movf	tablat,w,c
 15952  000500  0101               	movlb	1	; () banked
 15953  000502  5989               	subwfb	(printf@val+2)& (0+255),w,b
 15954  000504  0009               	tblrd		*+
 15955  000506  50F5               	movf	tablat,w,c
 15956  000508  0101               	movlb	1	; () banked
 15957  00050A  598A               	subwfb	(printf@val+3)& (0+255),w,b
 15958  00050C  A0D8               	btfss	status,0,c
 15959  00050E  D005               	goto	l9570
 15960  000510  D001               	goto	l9566
 15961                           
 15962                           ; BSR set to: 1
 15963                           ;doprnt.c: 1138: break;
 15964  000512  D003               	goto	l9570
 15965  000514                     l9566:
 15966                           
 15967                           ; BSR set to: 1
 15968  000514  0101               	movlb	1	; () banked
 15969  000516  2B90               	incf	printf@c& (0+255),f,b
 15970  000518  D7D9               	goto	l9558
 15971  00051A                     l9570:
 15972                           
 15973                           ; BSR set to: 1
 15974                           ;doprnt.c: 1142: width -= prec + c + exp;
 15975  00051A  C190  F0EA         	movff	printf@c,??_printf
 15976  00051E  0100               	movlb	0	; () banked
 15977  000520  6BEB               	clrf	(??_printf+1)& (0+255),b
 15978  000522  BFEA               	btfsc	??_printf& (0+255),7,b
 15979  000524  07EB               	decf	(??_printf+1)& (0+255),f,b
 15980  000526  0101               	movlb	1	; () banked
 15981  000528  517D               	movf	printf@prec& (0+255),w,b
 15982  00052A  0100               	movlb	0	; () banked
 15983  00052C  27EA               	addwf	??_printf& (0+255),f,b
 15984  00052E  0101               	movlb	1	; () banked
 15985  000530  517E               	movf	(printf@prec+1)& (0+255),w,b
 15986  000532  0100               	movlb	0	; () banked
 15987  000534  23EB               	addwfc	(??_printf+1)& (0+255),f,b
 15988  000536  0101               	movlb	1	; () banked
 15989  000538  5185               	movf	printf@exp& (0+255),w,b
 15990  00053A  0100               	movlb	0	; () banked
 15991  00053C  27EA               	addwf	??_printf& (0+255),f,b
 15992  00053E  0101               	movlb	1	; () banked
 15993  000540  5186               	movf	(printf@exp+1)& (0+255),w,b
 15994  000542  0100               	movlb	0	; () banked
 15995  000544  23EB               	addwfc	(??_printf+1)& (0+255),f,b
 15996  000546  0100               	movlb	0	; () banked
 15997  000548  51EA               	movf	??_printf& (0+255),w,b
 15998  00054A  0101               	movlb	1	; () banked
 15999  00054C  5F83               	subwf	printf@width& (0+255),f,b
 16000  00054E  0100               	movlb	0	; () banked
 16001  000550  51EB               	movf	(??_printf+1)& (0+255),w,b
 16002  000552  0101               	movlb	1	; () banked
 16003  000554  5B84               	subwfb	(printf@width+1)& (0+255),f,b
 16004                           
 16005                           ;doprnt.c: 1143: if(
 16006                           ;doprnt.c: 1147: prec)
 16007  000556  0101               	movlb	1	; () banked
 16008  000558  517D               	movf	printf@prec& (0+255),w,b
 16009  00055A  0101               	movlb	1	; () banked
 16010  00055C  117E               	iorwf	(printf@prec+1)& (0+255),w,b
 16011  00055E  B4D8               	btfsc	status,2,c
 16012  000560  D005               	goto	l9574
 16013                           
 16014                           ; BSR set to: 1
 16015                           ;doprnt.c: 1148: width--;
 16016  000562  0101               	movlb	1	; () banked
 16017  000564  0783               	decf	printf@width& (0+255),f,b
 16018  000566  A0D8               	btfss	status,0,c
 16019  000568  0784               	decf	(printf@width+1)& (0+255),f,b
 16020  00056A  D000               	goto	l9574
 16021  00056C                     l9574:
 16022                           
 16023                           ; BSR set to: 1
 16024                           ;doprnt.c: 1149: if(flag & 0x03)
 16025  00056C  0E03               	movlw	3
 16026  00056E  0101               	movlb	1	; () banked
 16027  000570  158B               	andwf	printf@flag& (0+255),w,b
 16028  000572  0100               	movlb	0	; () banked
 16029  000574  6FEA               	movwf	??_printf& (0+255),b
 16030  000576  0E00               	movlw	0
 16031  000578  0101               	movlb	1	; () banked
 16032  00057A  158C               	andwf	(printf@flag+1)& (0+255),w,b
 16033  00057C  0100               	movlb	0	; () banked
 16034  00057E  6FEB               	movwf	(??_printf+1)& (0+255),b
 16035  000580  0100               	movlb	0	; () banked
 16036  000582  51EA               	movf	??_printf& (0+255),w,b
 16037  000584  0100               	movlb	0	; () banked
 16038  000586  11EB               	iorwf	(??_printf+1)& (0+255),w,b
 16039  000588  B4D8               	btfsc	status,2,c
 16040  00058A  D005               	goto	l9578
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;doprnt.c: 1150: width--;
 16044  00058C  0101               	movlb	1	; () banked
 16045  00058E  0783               	decf	printf@width& (0+255),f,b
 16046  000590  A0D8               	btfss	status,0,c
 16047  000592  0784               	decf	(printf@width+1)& (0+255),f,b
 16048  000594  D000               	goto	l9578
 16049  000596                     l9578:
 16050                           
 16051                           ;doprnt.c: 1153: if(flag & 0x04) {
 16052  000596  0101               	movlb	1	; () banked
 16053  000598  A58B               	btfss	printf@flag& (0+255),2,b
 16054  00059A  D031               	goto	l9594
 16055                           
 16056                           ; BSR set to: 1
 16057                           ;doprnt.c: 1157: if(flag & 0x03)
 16058  00059C  0E03               	movlw	3
 16059  00059E  0101               	movlb	1	; () banked
 16060  0005A0  158B               	andwf	printf@flag& (0+255),w,b
 16061  0005A2  0100               	movlb	0	; () banked
 16062  0005A4  6FEA               	movwf	??_printf& (0+255),b
 16063  0005A6  0E00               	movlw	0
 16064  0005A8  0101               	movlb	1	; () banked
 16065  0005AA  158C               	andwf	(printf@flag+1)& (0+255),w,b
 16066  0005AC  0100               	movlb	0	; () banked
 16067  0005AE  6FEB               	movwf	(??_printf+1)& (0+255),b
 16068  0005B0  0100               	movlb	0	; () banked
 16069  0005B2  51EA               	movf	??_printf& (0+255),w,b
 16070  0005B4  0100               	movlb	0	; () banked
 16071  0005B6  11EB               	iorwf	(??_printf+1)& (0+255),w,b
 16072  0005B8  B4D8               	btfsc	status,2,c
 16073  0005BA  D00C               	goto	l9588
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;doprnt.c: 1159: (putch('-') );
 16077  0005BC  0E2D               	movlw	45
 16078  0005BE  EC13  F029         	call	_putch
 16079                           
 16080                           ;doprnt.c: 1168: while(width > 0) {
 16081  0005C2  D008               	goto	l9588
 16082  0005C4                     l9584:
 16083                           
 16084                           ;doprnt.c: 1169: (putch('0') );
 16085  0005C4  0E30               	movlw	48
 16086  0005C6  EC13  F029         	call	_putch
 16087                           
 16088                           ;doprnt.c: 1170: width--;
 16089  0005CA  0101               	movlb	1	; () banked
 16090  0005CC  0783               	decf	printf@width& (0+255),f,b
 16091  0005CE  A0D8               	btfss	status,0,c
 16092  0005D0  0784               	decf	(printf@width+1)& (0+255),f,b
 16093  0005D2  D000               	goto	l9588
 16094  0005D4                     l9588:
 16095  0005D4  0101               	movlb	1	; () banked
 16096  0005D6  BF84               	btfsc	(printf@width+1)& (0+255),7,b
 16097  0005D8  D077               	goto	l9606
 16098  0005DA  0101               	movlb	1	; () banked
 16099  0005DC  5184               	movf	(printf@width+1)& (0+255),w,b
 16100  0005DE  E1F2               	bnz	l9584
 16101  0005E0  0101               	movlb	1	; () banked
 16102  0005E2  0583               	decf	printf@width& (0+255),w,b
 16103  0005E4  A0D8               	btfss	status,0,c
 16104  0005E6  D070               	goto	l9606
 16105  0005E8  D7ED               	goto	l9584
 16106                           
 16107                           ; BSR set to: 1
 16108                           ;doprnt.c: 1171: }
 16109                           ;doprnt.c: 1173: } else
 16110  0005EA  D06E               	goto	l9606
 16111                           
 16112                           ; BSR set to: 1
 16113                           ;doprnt.c: 1175: {
 16114                           ;doprnt.c: 1180: while(width > 0) {
 16115  0005EC  D008               	goto	l9594
 16116  0005EE                     l9590:
 16117                           
 16118                           ; BSR set to: 1
 16119                           ;doprnt.c: 1181: (putch(' ') );
 16120  0005EE  0E20               	movlw	32
 16121  0005F0  EC13  F029         	call	_putch
 16122                           
 16123                           ;doprnt.c: 1182: width--;
 16124  0005F4  0101               	movlb	1	; () banked
 16125  0005F6  0783               	decf	printf@width& (0+255),f,b
 16126  0005F8  A0D8               	btfss	status,0,c
 16127  0005FA  0784               	decf	(printf@width+1)& (0+255),f,b
 16128  0005FC  D000               	goto	l9594
 16129  0005FE                     l9594:
 16130                           
 16131                           ; BSR set to: 1
 16132  0005FE  0101               	movlb	1	; () banked
 16133  000600  BF84               	btfsc	(printf@width+1)& (0+255),7,b
 16134  000602  D007               	goto	l9596
 16135  000604  0101               	movlb	1	; () banked
 16136  000606  5184               	movf	(printf@width+1)& (0+255),w,b
 16137  000608  E1F2               	bnz	l9590
 16138  00060A  0101               	movlb	1	; () banked
 16139  00060C  0583               	decf	printf@width& (0+255),w,b
 16140  00060E  B0D8               	btfsc	status,0,c
 16141  000610  D7EE               	goto	l9590
 16142  000612                     l9596:
 16143                           
 16144                           ; BSR set to: 1
 16145                           ;doprnt.c: 1183: }
 16146                           ;doprnt.c: 1188: if(flag & 0x03)
 16147  000612  0E03               	movlw	3
 16148  000614  0101               	movlb	1	; () banked
 16149  000616  158B               	andwf	printf@flag& (0+255),w,b
 16150  000618  0100               	movlb	0	; () banked
 16151  00061A  6FEA               	movwf	??_printf& (0+255),b
 16152  00061C  0E00               	movlw	0
 16153  00061E  0101               	movlb	1	; () banked
 16154  000620  158C               	andwf	(printf@flag+1)& (0+255),w,b
 16155  000622  0100               	movlb	0	; () banked
 16156  000624  6FEB               	movwf	(??_printf+1)& (0+255),b
 16157  000626  0100               	movlb	0	; () banked
 16158  000628  51EA               	movf	??_printf& (0+255),w,b
 16159  00062A  0100               	movlb	0	; () banked
 16160  00062C  11EB               	iorwf	(??_printf+1)& (0+255),w,b
 16161  00062E  B4D8               	btfsc	status,2,c
 16162  000630  D04B               	goto	l9606
 16163                           
 16164                           ; BSR set to: 0
 16165                           ;doprnt.c: 1190: (putch('-') );
 16166  000632  0E2D               	movlw	45
 16167  000634  EC13  F029         	call	_putch
 16168                           
 16169                           ;doprnt.c: 1195: }
 16170                           ;doprnt.c: 1196: while(c--) {
 16171  000638  D047               	goto	l9606
 16172  00063A                     l9600:
 16173                           
 16174                           ;doprnt.c: 1200: {
 16175                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 16176  00063A  C187  F011         	movff	printf@val,___lldiv@dividend
 16177  00063E  C188  F012         	movff	printf@val+1,___lldiv@dividend+1
 16178  000642  C189  F013         	movff	printf@val+2,___lldiv@dividend+2
 16179  000646  C18A  F014         	movff	printf@val+3,___lldiv@dividend+3
 16180  00064A  0101               	movlb	1	; () banked
 16181  00064C  5190               	movf	printf@c& (0+255),w,b
 16182  00064E  0D04               	mullw	4
 16183  000650  0EE6               	movlw	low _dpowers
 16184  000652  24F3               	addwf	prodl,w,c
 16185  000654  6EF6               	movwf	tblptrl,c
 16186  000656  0EFD               	movlw	high _dpowers
 16187  000658  20F4               	addwfc	prodh,w,c
 16188  00065A  6EF7               	movwf	tblptrh,c
 16189  00065C                     	if	0	;There are less than 3 active tblptr bytes
 16190  00065C                     	endif
 16191  00065C  0009               	tblrd		*+
 16192  00065E  CFF5 F015          	movff	tablat,___lldiv@divisor
 16193  000662  0009               	tblrd		*+
 16194  000664  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 16195  000668  0009               	tblrd		*+
 16196  00066A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 16197  00066E  000A               	tblrd		*-
 16198  000670  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 16199  000674  EC0E  F021         	call	___lldiv	;wreg free
 16200  000678  C011  F17F         	movff	?___lldiv,printf@tmpval
 16201  00067C  C012  F180         	movff	?___lldiv+1,printf@tmpval+1
 16202  000680  C013  F181         	movff	?___lldiv+2,printf@tmpval+2
 16203  000684  C014  F182         	movff	?___lldiv+3,printf@tmpval+3
 16204                           
 16205                           ;doprnt.c: 1202: tmpval.vd %= 10;
 16206  000688  C17F  F01E         	movff	printf@tmpval,___llmod@dividend
 16207  00068C  C180  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 16208  000690  C181  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 16209  000694  C182  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 16210  000698  0E0A               	movlw	10
 16211  00069A  6E22               	movwf	___llmod@divisor,c
 16212  00069C  0E00               	movlw	0
 16213  00069E  6E23               	movwf	___llmod@divisor+1,c
 16214  0006A0  0E00               	movlw	0
 16215  0006A2  6E24               	movwf	___llmod@divisor+2,c
 16216  0006A4  0E00               	movlw	0
 16217  0006A6  6E25               	movwf	___llmod@divisor+3,c
 16218  0006A8  ECD0  F022         	call	___llmod	;wreg free
 16219  0006AC  C01E  F17F         	movff	?___llmod,printf@tmpval
 16220  0006B0  C01F  F180         	movff	?___llmod+1,printf@tmpval+1
 16221  0006B4  C020  F181         	movff	?___llmod+2,printf@tmpval+2
 16222  0006B8  C021  F182         	movff	?___llmod+3,printf@tmpval+3
 16223                           
 16224                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 16225  0006BC  0101               	movlb	1	; () banked
 16226  0006BE  517F               	movf	printf@tmpval& (0+255),w,b
 16227  0006C0  0F30               	addlw	48
 16228  0006C2  EC13  F029         	call	_putch
 16229  0006C6  D000               	goto	l9606
 16230  0006C8                     l9606:
 16231  0006C8  0101               	movlb	1	; () banked
 16232  0006CA  0790               	decf	printf@c& (0+255),f,b
 16233  0006CC  0101               	movlb	1	; () banked
 16234  0006CE  2990               	incf	printf@c& (0+255),w,b
 16235  0006D0  B4D8               	btfsc	status,2,c
 16236  0006D2  D00A               	goto	l9612
 16237  0006D4  D7B2               	goto	l9600
 16238                           
 16239                           ; BSR set to: 1
 16240                           ;doprnt.c: 1204: }
 16241                           ;doprnt.c: 1206: }
 16242                           ;doprnt.c: 1207: while(exp > 0) {
 16243  0006D6  D008               	goto	l9612
 16244  0006D8                     l9608:
 16245                           
 16246                           ; BSR set to: 1
 16247                           ;doprnt.c: 1208: (putch('0') );
 16248  0006D8  0E30               	movlw	48
 16249  0006DA  EC13  F029         	call	_putch
 16250                           
 16251                           ;doprnt.c: 1209: exp--;
 16252  0006DE  0101               	movlb	1	; () banked
 16253  0006E0  0785               	decf	printf@exp& (0+255),f,b
 16254  0006E2  A0D8               	btfss	status,0,c
 16255  0006E4  0786               	decf	(printf@exp+1)& (0+255),f,b
 16256  0006E6  D000               	goto	l9612
 16257  0006E8                     l9612:
 16258                           
 16259                           ; BSR set to: 1
 16260  0006E8  0101               	movlb	1	; () banked
 16261  0006EA  BF86               	btfsc	(printf@exp+1)& (0+255),7,b
 16262  0006EC  D007               	goto	l9614
 16263  0006EE  0101               	movlb	1	; () banked
 16264  0006F0  5186               	movf	(printf@exp+1)& (0+255),w,b
 16265  0006F2  E1F2               	bnz	l9608
 16266  0006F4  0101               	movlb	1	; () banked
 16267  0006F6  0585               	decf	printf@exp& (0+255),w,b
 16268  0006F8  B0D8               	btfsc	status,0,c
 16269  0006FA  D7EE               	goto	l9608
 16270  0006FC                     l9614:
 16271                           
 16272                           ; BSR set to: 1
 16273                           ;doprnt.c: 1210: }
 16274                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 16275  0006FC  0101               	movlb	1	; () banked
 16276  0006FE  BF7E               	btfsc	(printf@prec+1)& (0+255),7,b
 16277  000700  D00C               	goto	l1463
 16278  000702  0101               	movlb	1	; () banked
 16279  000704  517E               	movf	(printf@prec+1)& (0+255),w,b
 16280  000706  E105               	bnz	u8150
 16281  000708  0E09               	movlw	9
 16282  00070A  0101               	movlb	1	; () banked
 16283  00070C  5D7D               	subwf	printf@prec& (0+255),w,b
 16284  00070E  A0D8               	btfss	status,0,c
 16285  000710  D004               	goto	l1463
 16286  000712                     u8150:
 16287                           
 16288                           ; BSR set to: 1
 16289                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 16290  000712  0E08               	movlw	8
 16291  000714  0101               	movlb	1	; () banked
 16292  000716  6F90               	movwf	printf@c& (0+255),b
 16293  000718  D003               	goto	l9618
 16294  00071A                     l1463:
 16295                           
 16296                           ; BSR set to: 1
 16297                           ;doprnt.c: 1213: else
 16298                           ;doprnt.c: 1214: c = prec;
 16299  00071A  C17D  F190         	movff	printf@prec,printf@c
 16300  00071E  D000               	goto	l9618
 16301  000720                     l9618:
 16302                           
 16303                           ; BSR set to: 1
 16304                           ;doprnt.c: 1215: prec -= c;
 16305  000720  0101               	movlb	1	; () banked
 16306  000722  5190               	movf	printf@c& (0+255),w,b
 16307  000724  0101               	movlb	1	; () banked
 16308  000726  5F7D               	subwf	printf@prec& (0+255),f,b
 16309  000728  0E00               	movlw	0
 16310  00072A  0101               	movlb	1	; () banked
 16311  00072C  BF90               	btfsc	printf@c& (0+255),7,b
 16312  00072E  0EFF               	movlw	255
 16313  000730  0101               	movlb	1	; () banked
 16314  000732  5B7E               	subwfb	(printf@prec+1)& (0+255),f,b
 16315                           
 16316                           ; BSR set to: 1
 16317                           ;doprnt.c: 1219: if(c)
 16318  000734  0101               	movlb	1	; () banked
 16319  000736  5190               	movf	printf@c& (0+255),w,b
 16320  000738  0101               	movlb	1	; () banked
 16321  00073A  B4D8               	btfsc	status,2,c
 16322  00073C  D004               	goto	l9624
 16323                           
 16324                           ; BSR set to: 1
 16325                           ;doprnt.c: 1221: (putch('.') );
 16326  00073E  0E2E               	movlw	46
 16327  000740  EC13  F029         	call	_putch
 16328  000744  D000               	goto	l9624
 16329  000746                     l9624:
 16330                           
 16331                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 16332  000746  0101               	movlb	1	; () banked
 16333  000748  5190               	movf	printf@c& (0+255),w,b
 16334  00074A  EC4E  F009         	call	_scale
 16335  00074E  C043  F177         	movff	?_scale,_printf$3273
 16336  000752  C044  F178         	movff	?_scale+1,_printf$3273+1
 16337  000756  C045  F179         	movff	?_scale+2,_printf$3273+2
 16338                           
 16339                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 16340  00075A  C18D  F022         	movff	printf@fval,___ftmul@f2
 16341  00075E  C18E  F023         	movff	printf@fval+1,___ftmul@f2+1
 16342  000762  C18F  F024         	movff	printf@fval+2,___ftmul@f2+2
 16343  000766  C177  F01F         	movff	_printf$3273,___ftmul@f1
 16344  00076A  C178  F020         	movff	_printf$3273+1,___ftmul@f1+1
 16345  00076E  C179  F021         	movff	_printf$3273+2,___ftmul@f1+2
 16346  000772  ECB5  F018         	call	___ftmul	;wreg free
 16347  000776  C01F  F02E         	movff	?___ftmul,___fttol@f1
 16348  00077A  C020  F02F         	movff	?___ftmul+1,___fttol@f1+1
 16349  00077E  C021  F030         	movff	?___ftmul+2,___fttol@f1+2
 16350  000782  EC9E  F01A         	call	___fttol	;wreg free
 16351  000786  C02E  F187         	movff	?___fttol,printf@val
 16352  00078A  C02F  F188         	movff	?___fttol+1,printf@val+1
 16353  00078E  C030  F189         	movff	?___fttol+2,printf@val+2
 16354  000792  C031  F18A         	movff	?___fttol+3,printf@val+3
 16355                           
 16356                           ;doprnt.c: 1228: while(c--) {
 16357  000796  D06E               	goto	l9634
 16358  000798                     l9628:
 16359                           
 16360                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 16361  000798  C187  F011         	movff	printf@val,___lldiv@dividend
 16362  00079C  C188  F012         	movff	printf@val+1,___lldiv@dividend+1
 16363  0007A0  C189  F013         	movff	printf@val+2,___lldiv@dividend+2
 16364  0007A4  C18A  F014         	movff	printf@val+3,___lldiv@dividend+3
 16365  0007A8  0101               	movlb	1	; () banked
 16366  0007AA  5190               	movf	printf@c& (0+255),w,b
 16367  0007AC  0D04               	mullw	4
 16368  0007AE  0EE6               	movlw	low _dpowers
 16369  0007B0  24F3               	addwf	prodl,w,c
 16370  0007B2  6EF6               	movwf	tblptrl,c
 16371  0007B4  0EFD               	movlw	high _dpowers
 16372  0007B6  20F4               	addwfc	prodh,w,c
 16373  0007B8  6EF7               	movwf	tblptrh,c
 16374  0007BA                     	if	0	;There are less than 3 active tblptr bytes
 16375  0007BA                     	endif
 16376  0007BA  0009               	tblrd		*+
 16377  0007BC  CFF5 F015          	movff	tablat,___lldiv@divisor
 16378  0007C0  0009               	tblrd		*+
 16379  0007C2  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 16380  0007C6  0009               	tblrd		*+
 16381  0007C8  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 16382  0007CC  000A               	tblrd		*-
 16383  0007CE  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 16384  0007D2  EC0E  F021         	call	___lldiv	;wreg free
 16385  0007D6  C011  F17F         	movff	?___lldiv,printf@tmpval
 16386  0007DA  C012  F180         	movff	?___lldiv+1,printf@tmpval+1
 16387  0007DE  C013  F181         	movff	?___lldiv+2,printf@tmpval+2
 16388  0007E2  C014  F182         	movff	?___lldiv+3,printf@tmpval+3
 16389                           
 16390                           ;doprnt.c: 1230: tmpval.vd %= 10;
 16391  0007E6  C17F  F01E         	movff	printf@tmpval,___llmod@dividend
 16392  0007EA  C180  F01F         	movff	printf@tmpval+1,___llmod@dividend+1
 16393  0007EE  C181  F020         	movff	printf@tmpval+2,___llmod@dividend+2
 16394  0007F2  C182  F021         	movff	printf@tmpval+3,___llmod@dividend+3
 16395  0007F6  0E0A               	movlw	10
 16396  0007F8  6E22               	movwf	___llmod@divisor,c
 16397  0007FA  0E00               	movlw	0
 16398  0007FC  6E23               	movwf	___llmod@divisor+1,c
 16399  0007FE  0E00               	movlw	0
 16400  000800  6E24               	movwf	___llmod@divisor+2,c
 16401  000802  0E00               	movlw	0
 16402  000804  6E25               	movwf	___llmod@divisor+3,c
 16403  000806  ECD0  F022         	call	___llmod	;wreg free
 16404  00080A  C01E  F17F         	movff	?___llmod,printf@tmpval
 16405  00080E  C01F  F180         	movff	?___llmod+1,printf@tmpval+1
 16406  000812  C020  F181         	movff	?___llmod+2,printf@tmpval+2
 16407  000816  C021  F182         	movff	?___llmod+3,printf@tmpval+3
 16408                           
 16409                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 16410  00081A  0101               	movlb	1	; () banked
 16411  00081C  517F               	movf	printf@tmpval& (0+255),w,b
 16412  00081E  0F30               	addlw	48
 16413  000820  EC13  F029         	call	_putch
 16414                           
 16415                           ;doprnt.c: 1232: val %= dpowers[c];
 16416  000824  C187  F01E         	movff	printf@val,___llmod@dividend
 16417  000828  C188  F01F         	movff	printf@val+1,___llmod@dividend+1
 16418  00082C  C189  F020         	movff	printf@val+2,___llmod@dividend+2
 16419  000830  C18A  F021         	movff	printf@val+3,___llmod@dividend+3
 16420  000834  0101               	movlb	1	; () banked
 16421  000836  5190               	movf	printf@c& (0+255),w,b
 16422  000838  0D04               	mullw	4
 16423  00083A  0EE6               	movlw	low _dpowers
 16424  00083C  24F3               	addwf	prodl,w,c
 16425  00083E  6EF6               	movwf	tblptrl,c
 16426  000840  0EFD               	movlw	high _dpowers
 16427  000842  20F4               	addwfc	prodh,w,c
 16428  000844  6EF7               	movwf	tblptrh,c
 16429  000846                     	if	0	;There are less than 3 active tblptr bytes
 16430  000846                     	endif
 16431  000846  0009               	tblrd		*+
 16432  000848  CFF5 F022          	movff	tablat,___llmod@divisor
 16433  00084C  0009               	tblrd		*+
 16434  00084E  CFF5 F023          	movff	tablat,___llmod@divisor+1
 16435  000852  0009               	tblrd		*+
 16436  000854  CFF5 F024          	movff	tablat,___llmod@divisor+2
 16437  000858  000A               	tblrd		*-
 16438  00085A  CFF5 F025          	movff	tablat,___llmod@divisor+3
 16439  00085E  ECD0  F022         	call	___llmod	;wreg free
 16440  000862  C01E  F187         	movff	?___llmod,printf@val
 16441  000866  C01F  F188         	movff	?___llmod+1,printf@val+1
 16442  00086A  C020  F189         	movff	?___llmod+2,printf@val+2
 16443  00086E  C021  F18A         	movff	?___llmod+3,printf@val+3
 16444  000872  D000               	goto	l9634
 16445  000874                     l9634:
 16446  000874  0101               	movlb	1	; () banked
 16447  000876  0790               	decf	printf@c& (0+255),f,b
 16448  000878  0101               	movlb	1	; () banked
 16449  00087A  2990               	incf	printf@c& (0+255),w,b
 16450  00087C  B4D8               	btfsc	status,2,c
 16451  00087E  D00A               	goto	l9640
 16452  000880  D78B               	goto	l9628
 16453                           
 16454                           ; BSR set to: 1
 16455                           ;doprnt.c: 1233: }
 16456                           ;doprnt.c: 1235: while(prec) {
 16457  000882  D008               	goto	l9640
 16458  000884                     l9636:
 16459                           
 16460                           ; BSR set to: 1
 16461                           ;doprnt.c: 1236: (putch('0') );
 16462  000884  0E30               	movlw	48
 16463  000886  EC13  F029         	call	_putch
 16464                           
 16465                           ;doprnt.c: 1237: prec--;
 16466  00088A  0101               	movlb	1	; () banked
 16467  00088C  077D               	decf	printf@prec& (0+255),f,b
 16468  00088E  A0D8               	btfss	status,0,c
 16469  000890  077E               	decf	(printf@prec+1)& (0+255),f,b
 16470  000892  D000               	goto	l9640
 16471  000894                     l9640:
 16472                           
 16473                           ; BSR set to: 1
 16474  000894  0101               	movlb	1	; () banked
 16475  000896  517D               	movf	printf@prec& (0+255),w,b
 16476  000898  0101               	movlb	1	; () banked
 16477  00089A  117E               	iorwf	(printf@prec+1)& (0+255),w,b
 16478  00089C  B4D8               	btfsc	status,2,c
 16479  00089E  D1CE               	goto	l9738
 16480  0008A0  D7F1               	goto	l9636
 16481                           
 16482                           ; BSR set to: 1
 16483                           ;doprnt.c: 1238: }
 16484                           ;doprnt.c: 1245: continue;
 16485  0008A2  D1CC               	goto	l9738
 16486  0008A4                     l1424:
 16487                           
 16488                           ; BSR set to: 1
 16489                           ;doprnt.c: 1246: }
 16490                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 16491  0008A4  0101               	movlb	1	; () banked
 16492  0008A6  BF8B               	btfsc	printf@flag& (0+255),7,b
 16493  0008A8  D023               	goto	l9652
 16494                           
 16495                           ; BSR set to: 1
 16496                           ;doprnt.c: 1253: {
 16497                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 16498  0008AA  C17B  FFD9         	movff	printf@ap,fsr2l
 16499  0008AE  C17C  FFDA         	movff	printf@ap+1,fsr2h
 16500  0008B2  CFDE F187          	movff	postinc2,printf@val
 16501  0008B6  CFDD F188          	movff	postdec2,printf@val+1
 16502  0008BA  0101               	movlb	1	; () banked
 16503  0008BC  0E00               	movlw	0
 16504  0008BE  BF88               	btfsc	(printf@val+1)& (0+255),7,b
 16505  0008C0  0EFF               	movlw	-1
 16506  0008C2  6F89               	movwf	(printf@val+2)& (0+255),b
 16507  0008C4  6F8A               	movwf	(printf@val+3)& (0+255),b
 16508                           
 16509                           ; BSR set to: 1
 16510  0008C6  0E02               	movlw	2
 16511  0008C8  0101               	movlb	1	; () banked
 16512  0008CA  277B               	addwf	printf@ap& (0+255),f,b
 16513  0008CC  0E00               	movlw	0
 16514  0008CE  237C               	addwfc	(printf@ap+1)& (0+255),f,b
 16515                           
 16516                           ; BSR set to: 1
 16517                           ;doprnt.c: 1261: if((long)val < 0) {
 16518  0008D0  0101               	movlb	1	; () banked
 16519  0008D2  AF8A               	btfss	(printf@val+3)& (0+255),7,b
 16520  0008D4  D078               	goto	l9686
 16521                           
 16522                           ; BSR set to: 1
 16523                           ;doprnt.c: 1262: flag |= 0x03;
 16524  0008D6  0E03               	movlw	3
 16525  0008D8  0101               	movlb	1	; () banked
 16526  0008DA  138B               	iorwf	printf@flag& (0+255),f,b
 16527                           
 16528                           ; BSR set to: 1
 16529                           ;doprnt.c: 1263: val = -val;
 16530  0008DC  0101               	movlb	1	; () banked
 16531  0008DE  1F8A               	comf	(printf@val+3)& (0+255),f,b
 16532  0008E0  1F89               	comf	(printf@val+2)& (0+255),f,b
 16533  0008E2  1F88               	comf	(printf@val+1)& (0+255),f,b
 16534  0008E4  6D87               	negf	printf@val& (0+255),b
 16535  0008E6  0E00               	movlw	0
 16536  0008E8  2388               	addwfc	(printf@val+1)& (0+255),f,b
 16537  0008EA  2389               	addwfc	(printf@val+2)& (0+255),f,b
 16538  0008EC  238A               	addwfc	(printf@val+3)& (0+255),f,b
 16539                           
 16540                           ; BSR set to: 1
 16541                           ;doprnt.c: 1264: }
 16542                           ;doprnt.c: 1266: }
 16543  0008EE  D06B               	goto	l9686
 16544  0008F0                     l9652:
 16545                           
 16546                           ; BSR set to: 1
 16547                           ;doprnt.c: 1268: else
 16548                           ;doprnt.c: 1273: {
 16549                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16550  0008F0  C17B  FFD9         	movff	printf@ap,fsr2l
 16551  0008F4  C17C  FFDA         	movff	printf@ap+1,fsr2h
 16552  0008F8  CFDE F0EA          	movff	postinc2,??_printf
 16553  0008FC  CFDD F0EB          	movff	postdec2,??_printf+1
 16554  000900  C0EA  F187         	movff	??_printf,printf@val
 16555  000904  C0EB  F188         	movff	??_printf+1,printf@val+1
 16556  000908  0101               	movlb	1	; () banked
 16557  00090A  6B89               	clrf	(printf@val+2)& (0+255),b
 16558  00090C  6B8A               	clrf	(printf@val+3)& (0+255),b
 16559                           
 16560                           ; BSR set to: 1
 16561  00090E  0E02               	movlw	2
 16562  000910  0101               	movlb	1	; () banked
 16563  000912  277B               	addwf	printf@ap& (0+255),f,b
 16564  000914  0E00               	movlw	0
 16565  000916  237C               	addwfc	(printf@ap+1)& (0+255),f,b
 16566                           
 16567                           ; BSR set to: 1
 16568                           ;doprnt.c: 1287: }
 16569                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 16570  000918  D056               	goto	l9686
 16571  00091A                     l9656:
 16572                           
 16573                           ; BSR set to: 1
 16574                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16575  00091A  0E01               	movlw	1
 16576  00091C  0101               	movlb	1	; () banked
 16577  00091E  6F90               	movwf	printf@c& (0+255),b
 16578  000920                     l9658:
 16579                           
 16580                           ; BSR set to: 1
 16581  000920  0E0A               	movlw	10
 16582  000922  0101               	movlb	1	; () banked
 16583  000924  1990               	xorwf	printf@c& (0+255),w,b
 16584  000926  B4D8               	btfsc	status,2,c
 16585  000928  D058               	goto	l9688
 16586  00092A  D001               	goto	l9662
 16587                           
 16588                           ; BSR set to: 1
 16589  00092C  D056               	goto	l9688
 16590  00092E                     l9662:
 16591                           
 16592                           ; BSR set to: 1
 16593                           ;doprnt.c: 1306: if(val < dpowers[c])
 16594  00092E  0101               	movlb	1	; () banked
 16595  000930  5190               	movf	printf@c& (0+255),w,b
 16596  000932  0D04               	mullw	4
 16597  000934  0EE6               	movlw	low _dpowers
 16598  000936  24F3               	addwf	prodl,w,c
 16599  000938  6EF6               	movwf	tblptrl,c
 16600  00093A  0EFD               	movlw	high _dpowers
 16601  00093C  20F4               	addwfc	prodh,w,c
 16602  00093E  6EF7               	movwf	tblptrh,c
 16603  000940                     	if	0	;There are less than 3 active tblptr bytes
 16604  000940                     	endif
 16605  000940  0009               	tblrd		*+
 16606  000942  50F5               	movf	tablat,w,c
 16607  000944  0101               	movlb	1	; () banked
 16608  000946  5D87               	subwf	printf@val& (0+255),w,b
 16609  000948  0009               	tblrd		*+
 16610  00094A  50F5               	movf	tablat,w,c
 16611  00094C  0101               	movlb	1	; () banked
 16612  00094E  5988               	subwfb	(printf@val+1)& (0+255),w,b
 16613  000950  0009               	tblrd		*+
 16614  000952  50F5               	movf	tablat,w,c
 16615  000954  0101               	movlb	1	; () banked
 16616  000956  5989               	subwfb	(printf@val+2)& (0+255),w,b
 16617  000958  0009               	tblrd		*+
 16618  00095A  50F5               	movf	tablat,w,c
 16619  00095C  0101               	movlb	1	; () banked
 16620  00095E  598A               	subwfb	(printf@val+3)& (0+255),w,b
 16621  000960  A0D8               	btfss	status,0,c
 16622  000962  D03B               	goto	l9688
 16623  000964  D001               	goto	l9666
 16624                           
 16625                           ; BSR set to: 1
 16626                           ;doprnt.c: 1307: break;
 16627  000966  D039               	goto	l9688
 16628  000968                     l9666:
 16629                           
 16630                           ; BSR set to: 1
 16631  000968  0101               	movlb	1	; () banked
 16632  00096A  2B90               	incf	printf@c& (0+255),f,b
 16633  00096C  D7D9               	goto	l9658
 16634                           
 16635                           ; BSR set to: 1
 16636                           ;doprnt.c: 1309: break;
 16637                           
 16638                           ; BSR set to: 1
 16639  00096E  D035               	goto	l9688
 16640  000970                     l9670:
 16641                           
 16642                           ; BSR set to: 1
 16643                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 16644  000970  0E01               	movlw	1
 16645  000972  0101               	movlb	1	; () banked
 16646  000974  6F90               	movwf	printf@c& (0+255),b
 16647  000976                     l9672:
 16648                           
 16649                           ; BSR set to: 1
 16650  000976  0E08               	movlw	8
 16651  000978  0101               	movlb	1	; () banked
 16652  00097A  1990               	xorwf	printf@c& (0+255),w,b
 16653  00097C  B4D8               	btfsc	status,2,c
 16654  00097E  D02D               	goto	l9688
 16655  000980  D001               	goto	l9676
 16656                           
 16657                           ; BSR set to: 1
 16658  000982  D02B               	goto	l9688
 16659  000984                     l9676:
 16660                           
 16661                           ; BSR set to: 1
 16662                           ;doprnt.c: 1317: if(val < hexpowers[c])
 16663  000984  0101               	movlb	1	; () banked
 16664  000986  5190               	movf	printf@c& (0+255),w,b
 16665  000988  0D04               	mullw	4
 16666  00098A  0E5C               	movlw	low _hexpowers
 16667  00098C  24F3               	addwf	prodl,w,c
 16668  00098E  6EF6               	movwf	tblptrl,c
 16669  000990  0EFE               	movlw	high _hexpowers
 16670  000992  20F4               	addwfc	prodh,w,c
 16671  000994  6EF7               	movwf	tblptrh,c
 16672  000996                     	if	0	;There are less than 3 active tblptr bytes
 16673  000996                     	endif
 16674  000996  0009               	tblrd		*+
 16675  000998  50F5               	movf	tablat,w,c
 16676  00099A  0101               	movlb	1	; () banked
 16677  00099C  5D87               	subwf	printf@val& (0+255),w,b
 16678  00099E  0009               	tblrd		*+
 16679  0009A0  50F5               	movf	tablat,w,c
 16680  0009A2  0101               	movlb	1	; () banked
 16681  0009A4  5988               	subwfb	(printf@val+1)& (0+255),w,b
 16682  0009A6  0009               	tblrd		*+
 16683  0009A8  50F5               	movf	tablat,w,c
 16684  0009AA  0101               	movlb	1	; () banked
 16685  0009AC  5989               	subwfb	(printf@val+2)& (0+255),w,b
 16686  0009AE  0009               	tblrd		*+
 16687  0009B0  50F5               	movf	tablat,w,c
 16688  0009B2  0101               	movlb	1	; () banked
 16689  0009B4  598A               	subwfb	(printf@val+3)& (0+255),w,b
 16690  0009B6  A0D8               	btfss	status,0,c
 16691  0009B8  D010               	goto	l9688
 16692  0009BA  D001               	goto	l9680
 16693                           
 16694                           ; BSR set to: 1
 16695                           ;doprnt.c: 1318: break;
 16696  0009BC  D00E               	goto	l9688
 16697  0009BE                     l9680:
 16698                           
 16699                           ; BSR set to: 1
 16700  0009BE  0101               	movlb	1	; () banked
 16701  0009C0  2B90               	incf	printf@c& (0+255),f,b
 16702  0009C2  D7D9               	goto	l9672
 16703                           
 16704                           ; BSR set to: 1
 16705                           ;doprnt.c: 1336: }
 16706                           
 16707                           ; BSR set to: 1
 16708                           ;doprnt.c: 1320: break;
 16709                           
 16710                           ; BSR set to: 1
 16711  0009C4  D00A               	goto	l9688
 16712  0009C6                     l9686:
 16713                           
 16714                           ; BSR set to: 1
 16715  0009C6  0101               	movlb	1	; () banked
 16716  0009C8  518B               	movf	printf@flag& (0+255),w,b
 16717  0009CA  0B80               	andlw	128
 16718                           
 16719                           ; Switch size 1, requested type "space"
 16720                           ; Number of cases is 2, Range of values is 0 to 128
 16721                           ; switch strategies available:
 16722                           ; Name         Instructions Cycles
 16723                           ; simple_byte            7     4 (average)
 16724                           ;	Chosen strategy is simple_byte
 16725  0009CC  0A00               	xorlw	0	; case 0
 16726  0009CE  B4D8               	btfsc	status,2,c
 16727  0009D0  D7A4               	goto	l9656
 16728  0009D2  0A80               	xorlw	128	; case 128
 16729  0009D4  B4D8               	btfsc	status,2,c
 16730  0009D6  D7CC               	goto	l9670
 16731  0009D8  D000               	goto	l9688
 16732  0009DA                     l9688:
 16733                           
 16734                           ; BSR set to: 1
 16735                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16736  0009DA  0101               	movlb	1	; () banked
 16737  0009DC  5183               	movf	printf@width& (0+255),w,b
 16738  0009DE  0101               	movlb	1	; () banked
 16739  0009E0  1184               	iorwf	(printf@width+1)& (0+255),w,b
 16740  0009E2  B4D8               	btfsc	status,2,c
 16741  0009E4  D015               	goto	l9694
 16742                           
 16743                           ; BSR set to: 1
 16744  0009E6  0E03               	movlw	3
 16745  0009E8  0101               	movlb	1	; () banked
 16746  0009EA  158B               	andwf	printf@flag& (0+255),w,b
 16747  0009EC  0100               	movlb	0	; () banked
 16748  0009EE  6FEA               	movwf	??_printf& (0+255),b
 16749  0009F0  0E00               	movlw	0
 16750  0009F2  0101               	movlb	1	; () banked
 16751  0009F4  158C               	andwf	(printf@flag+1)& (0+255),w,b
 16752  0009F6  0100               	movlb	0	; () banked
 16753  0009F8  6FEB               	movwf	(??_printf+1)& (0+255),b
 16754  0009FA  0100               	movlb	0	; () banked
 16755  0009FC  51EA               	movf	??_printf& (0+255),w,b
 16756  0009FE  0100               	movlb	0	; () banked
 16757  000A00  11EB               	iorwf	(??_printf+1)& (0+255),w,b
 16758  000A02  B4D8               	btfsc	status,2,c
 16759  000A04  D005               	goto	l9694
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;doprnt.c: 1346: width--;
 16763  000A06  0101               	movlb	1	; () banked
 16764  000A08  0783               	decf	printf@width& (0+255),f,b
 16765  000A0A  A0D8               	btfss	status,0,c
 16766  000A0C  0784               	decf	(printf@width+1)& (0+255),f,b
 16767  000A0E  D000               	goto	l9694
 16768  000A10                     l9694:
 16769                           
 16770                           ;doprnt.c: 1381: if(width > c)
 16771  000A10  0E80               	movlw	128
 16772  000A12  0101               	movlb	1	; () banked
 16773  000A14  BF90               	btfsc	printf@c& (0+255),7,b
 16774  000A16  0E7F               	movlw	127
 16775  000A18  0100               	movlb	0	; () banked
 16776  000A1A  6FEA               	movwf	??_printf& (0+255),b
 16777  000A1C  0101               	movlb	1	; () banked
 16778  000A1E  5183               	movf	printf@width& (0+255),w,b
 16779  000A20  0101               	movlb	1	; () banked
 16780  000A22  5D90               	subwf	printf@c& (0+255),w,b
 16781  000A24  0101               	movlb	1	; () banked
 16782  000A26  5184               	movf	(printf@width+1)& (0+255),w,b
 16783  000A28  0A80               	xorlw	128
 16784  000A2A  0100               	movlb	0	; () banked
 16785  000A2C  59EA               	subwfb	??_printf& (0+255),w,b
 16786  000A2E  B0D8               	btfsc	status,0,c
 16787  000A30  D00B               	goto	l9698
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;doprnt.c: 1382: width -= c;
 16791  000A32  0101               	movlb	1	; () banked
 16792  000A34  5190               	movf	printf@c& (0+255),w,b
 16793  000A36  0101               	movlb	1	; () banked
 16794  000A38  5F83               	subwf	printf@width& (0+255),f,b
 16795  000A3A  0E00               	movlw	0
 16796  000A3C  0101               	movlb	1	; () banked
 16797  000A3E  BF90               	btfsc	printf@c& (0+255),7,b
 16798  000A40  0EFF               	movlw	255
 16799  000A42  0101               	movlb	1	; () banked
 16800  000A44  5B84               	subwfb	(printf@width+1)& (0+255),f,b
 16801  000A46  D006               	goto	l9700
 16802  000A48                     l9698:
 16803                           
 16804                           ;doprnt.c: 1383: else
 16805                           ;doprnt.c: 1384: width = 0;
 16806  000A48  0E00               	movlw	0
 16807  000A4A  0101               	movlb	1	; () banked
 16808  000A4C  6F84               	movwf	(printf@width+1)& (0+255),b
 16809  000A4E  0E00               	movlw	0
 16810  000A50  6F83               	movwf	printf@width& (0+255),b
 16811  000A52  D000               	goto	l9700
 16812  000A54                     l9700:
 16813                           
 16814                           ; BSR set to: 1
 16815                           ;doprnt.c: 1387: if(flag & 0x04) {
 16816  000A54  0101               	movlb	1	; () banked
 16817  000A56  A58B               	btfss	printf@flag& (0+255),2,b
 16818  000A58  D029               	goto	l9712
 16819                           
 16820                           ; BSR set to: 1
 16821                           ;doprnt.c: 1392: if(flag & 0x03)
 16822  000A5A  0E03               	movlw	3
 16823  000A5C  0101               	movlb	1	; () banked
 16824  000A5E  158B               	andwf	printf@flag& (0+255),w,b
 16825  000A60  0100               	movlb	0	; () banked
 16826  000A62  6FEA               	movwf	??_printf& (0+255),b
 16827  000A64  0E00               	movlw	0
 16828  000A66  0101               	movlb	1	; () banked
 16829  000A68  158C               	andwf	(printf@flag+1)& (0+255),w,b
 16830  000A6A  0100               	movlb	0	; () banked
 16831  000A6C  6FEB               	movwf	(??_printf+1)& (0+255),b
 16832  000A6E  0100               	movlb	0	; () banked
 16833  000A70  51EA               	movf	??_printf& (0+255),w,b
 16834  000A72  0100               	movlb	0	; () banked
 16835  000A74  11EB               	iorwf	(??_printf+1)& (0+255),w,b
 16836  000A76  B4D8               	btfsc	status,2,c
 16837  000A78  D004               	goto	l9706
 16838                           
 16839                           ; BSR set to: 0
 16840                           ;doprnt.c: 1393: (putch('-') );
 16841  000A7A  0E2D               	movlw	45
 16842  000A7C  EC13  F029         	call	_putch
 16843  000A80  D000               	goto	l9706
 16844  000A82                     l9706:
 16845                           
 16846                           ;doprnt.c: 1415: if(width)
 16847  000A82  0101               	movlb	1	; () banked
 16848  000A84  5183               	movf	printf@width& (0+255),w,b
 16849  000A86  0101               	movlb	1	; () banked
 16850  000A88  1184               	iorwf	(printf@width+1)& (0+255),w,b
 16851  000A8A  B4D8               	btfsc	status,2,c
 16852  000A8C  D038               	goto	l9722
 16853  000A8E                     l9708:
 16854                           
 16855                           ; BSR set to: 1
 16856                           ;doprnt.c: 1417: (putch('0') );
 16857  000A8E  0E30               	movlw	48
 16858  000A90  EC13  F029         	call	_putch
 16859                           
 16860                           ;doprnt.c: 1418: while(--width);
 16861  000A94  0101               	movlb	1	; () banked
 16862  000A96  0783               	decf	printf@width& (0+255),f,b
 16863  000A98  A0D8               	btfss	status,0,c
 16864  000A9A  0784               	decf	(printf@width+1)& (0+255),f,b
 16865  000A9C  0101               	movlb	1	; () banked
 16866  000A9E  5183               	movf	printf@width& (0+255),w,b
 16867  000AA0  0101               	movlb	1	; () banked
 16868  000AA2  1184               	iorwf	(printf@width+1)& (0+255),w,b
 16869  000AA4  B4D8               	btfsc	status,2,c
 16870  000AA6  D02B               	goto	l9722
 16871  000AA8  D7F2               	goto	l9708
 16872                           
 16873                           ; BSR set to: 1
 16874                           ;doprnt.c: 1420: } else
 16875                           
 16876                           ; BSR set to: 1
 16877  000AAA  D029               	goto	l9722
 16878  000AAC                     l9712:
 16879                           
 16880                           ; BSR set to: 1
 16881                           ;doprnt.c: 1422: {
 16882                           ;doprnt.c: 1424: if(width
 16883                           ;doprnt.c: 1428: )
 16884  000AAC  0101               	movlb	1	; () banked
 16885  000AAE  5183               	movf	printf@width& (0+255),w,b
 16886  000AB0  0101               	movlb	1	; () banked
 16887  000AB2  1184               	iorwf	(printf@width+1)& (0+255),w,b
 16888  000AB4  B4D8               	btfsc	status,2,c
 16889  000AB6  D00F               	goto	l9718
 16890  000AB8                     l9714:
 16891                           
 16892                           ; BSR set to: 1
 16893                           ;doprnt.c: 1430: (putch(' ') );
 16894  000AB8  0E20               	movlw	32
 16895  000ABA  EC13  F029         	call	_putch
 16896                           
 16897                           ;doprnt.c: 1431: while(--width);
 16898  000ABE  0101               	movlb	1	; () banked
 16899  000AC0  0783               	decf	printf@width& (0+255),f,b
 16900  000AC2  A0D8               	btfss	status,0,c
 16901  000AC4  0784               	decf	(printf@width+1)& (0+255),f,b
 16902  000AC6  0101               	movlb	1	; () banked
 16903  000AC8  5183               	movf	printf@width& (0+255),w,b
 16904  000ACA  0101               	movlb	1	; () banked
 16905  000ACC  1184               	iorwf	(printf@width+1)& (0+255),w,b
 16906  000ACE  B4D8               	btfsc	status,2,c
 16907  000AD0  D002               	goto	l9718
 16908  000AD2  D7F2               	goto	l9714
 16909                           
 16910                           ; BSR set to: 1
 16911  000AD4  D000               	goto	l9718
 16912  000AD6                     l9718:
 16913                           
 16914                           ; BSR set to: 1
 16915                           ;doprnt.c: 1438: if(flag & 0x03)
 16916  000AD6  0E03               	movlw	3
 16917  000AD8  0101               	movlb	1	; () banked
 16918  000ADA  158B               	andwf	printf@flag& (0+255),w,b
 16919  000ADC  0100               	movlb	0	; () banked
 16920  000ADE  6FEA               	movwf	??_printf& (0+255),b
 16921  000AE0  0E00               	movlw	0
 16922  000AE2  0101               	movlb	1	; () banked
 16923  000AE4  158C               	andwf	(printf@flag+1)& (0+255),w,b
 16924  000AE6  0100               	movlb	0	; () banked
 16925  000AE8  6FEB               	movwf	(??_printf+1)& (0+255),b
 16926  000AEA  0100               	movlb	0	; () banked
 16927  000AEC  51EA               	movf	??_printf& (0+255),w,b
 16928  000AEE  0100               	movlb	0	; () banked
 16929  000AF0  11EB               	iorwf	(??_printf+1)& (0+255),w,b
 16930  000AF2  B4D8               	btfsc	status,2,c
 16931  000AF4  D004               	goto	l9722
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;doprnt.c: 1439: (putch('-') );
 16935  000AF6  0E2D               	movlw	45
 16936  000AF8  EC13  F029         	call	_putch
 16937  000AFC  D000               	goto	l9722
 16938  000AFE                     l9722:
 16939                           
 16940                           ;doprnt.c: 1469: }
 16941                           ;doprnt.c: 1472: prec = c;
 16942  000AFE  0101               	movlb	1	; () banked
 16943  000B00  5190               	movf	printf@c& (0+255),w,b
 16944  000B02  0101               	movlb	1	; () banked
 16945  000B04  6F7D               	movwf	printf@prec& (0+255),b
 16946  000B06  6B7E               	clrf	(printf@prec+1)& (0+255),b
 16947  000B08  BF7D               	btfsc	printf@prec& (0+255),7,b
 16948  000B0A  077E               	decf	(printf@prec+1)& (0+255),f,b
 16949                           
 16950                           ;doprnt.c: 1474: while(prec--) {
 16951  000B0C  D08A               	goto	l9736
 16952                           
 16953                           ; BSR set to: 1
 16954                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 16955  000B0E  D07A               	goto	l9732
 16956  000B10                     l9724:
 16957                           
 16958                           ; BSR set to: 1
 16959                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16960  000B10  C17D  F0EA         	movff	printf@prec,??_printf
 16961  000B14  C17E  F0EB         	movff	printf@prec+1,??_printf+1
 16962  000B18  0100               	movlb	0	; () banked
 16963  000B1A  90D8               	bcf	status,0,c
 16964  000B1C  37EA               	rlcf	??_printf& (0+255),f,b
 16965  000B1E  37EB               	rlcf	(??_printf+1)& (0+255),f,b
 16966  000B20  0100               	movlb	0	; () banked
 16967  000B22  90D8               	bcf	status,0,c
 16968  000B24  37EA               	rlcf	??_printf& (0+255),f,b
 16969  000B26  37EB               	rlcf	(??_printf+1)& (0+255),f,b
 16970  000B28  0EE6               	movlw	low _dpowers
 16971  000B2A  0100               	movlb	0	; () banked
 16972  000B2C  25EA               	addwf	??_printf& (0+255),w,b
 16973  000B2E  6EF6               	movwf	tblptrl,c
 16974  000B30  0EFD               	movlw	high _dpowers
 16975  000B32  21EB               	addwfc	(??_printf+1)& (0+255),w,b
 16976  000B34  6EF7               	movwf	tblptrh,c
 16977  000B36                     	if	0	;There are less than 3 active tblptr bytes
 16978  000B36                     	endif
 16979  000B36  0009               	tblrd		*+
 16980  000B38  CFF5 F015          	movff	tablat,___lldiv@divisor
 16981  000B3C  0009               	tblrd		*+
 16982  000B3E  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 16983  000B42  0009               	tblrd		*+
 16984  000B44  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 16985  000B48  000A               	tblrd		*-
 16986  000B4A  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 16987  000B4E  C187  F011         	movff	printf@val,___lldiv@dividend
 16988  000B52  C188  F012         	movff	printf@val+1,___lldiv@dividend+1
 16989  000B56  C189  F013         	movff	printf@val+2,___lldiv@dividend+2
 16990  000B5A  C18A  F014         	movff	printf@val+3,___lldiv@dividend+3
 16991  000B5E  EC0E  F021         	call	___lldiv	;wreg free
 16992  000B62  C011  F01E         	movff	?___lldiv,___llmod@dividend
 16993  000B66  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
 16994  000B6A  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
 16995  000B6E  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
 16996  000B72  0E0A               	movlw	10
 16997  000B74  6E22               	movwf	___llmod@divisor,c
 16998  000B76  0E00               	movlw	0
 16999  000B78  6E23               	movwf	___llmod@divisor+1,c
 17000  000B7A  0E00               	movlw	0
 17001  000B7C  6E24               	movwf	___llmod@divisor+2,c
 17002  000B7E  0E00               	movlw	0
 17003  000B80  6E25               	movwf	___llmod@divisor+3,c
 17004  000B82  ECD0  F022         	call	___llmod	;wreg free
 17005  000B86  501E               	movf	?___llmod,w,c
 17006  000B88  0F30               	addlw	48
 17007  000B8A  0101               	movlb	1	; () banked
 17008  000B8C  6F90               	movwf	printf@c& (0+255),b
 17009                           
 17010                           ;doprnt.c: 1491: break;
 17011  000B8E  D044               	goto	l9734
 17012  000B90                     l9726:
 17013                           
 17014                           ; BSR set to: 1
 17015                           ;doprnt.c: 1499: {
 17016                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 17017  000B90  C187  F011         	movff	printf@val,___lldiv@dividend
 17018  000B94  C188  F012         	movff	printf@val+1,___lldiv@dividend+1
 17019  000B98  C189  F013         	movff	printf@val+2,___lldiv@dividend+2
 17020  000B9C  C18A  F014         	movff	printf@val+3,___lldiv@dividend+3
 17021  000BA0  C17D  F0EA         	movff	printf@prec,??_printf
 17022  000BA4  C17E  F0EB         	movff	printf@prec+1,??_printf+1
 17023  000BA8  0100               	movlb	0	; () banked
 17024  000BAA  90D8               	bcf	status,0,c
 17025  000BAC  37EA               	rlcf	??_printf& (0+255),f,b
 17026  000BAE  37EB               	rlcf	(??_printf+1)& (0+255),f,b
 17027  000BB0  0100               	movlb	0	; () banked
 17028  000BB2  90D8               	bcf	status,0,c
 17029  000BB4  37EA               	rlcf	??_printf& (0+255),f,b
 17030  000BB6  37EB               	rlcf	(??_printf+1)& (0+255),f,b
 17031  000BB8  0E5C               	movlw	low _hexpowers
 17032  000BBA  0100               	movlb	0	; () banked
 17033  000BBC  25EA               	addwf	??_printf& (0+255),w,b
 17034  000BBE  6EF6               	movwf	tblptrl,c
 17035  000BC0  0EFE               	movlw	high _hexpowers
 17036  000BC2  21EB               	addwfc	(??_printf+1)& (0+255),w,b
 17037  000BC4  6EF7               	movwf	tblptrh,c
 17038  000BC6                     	if	0	;There are less than 3 active tblptr bytes
 17039  000BC6                     	endif
 17040  000BC6  0009               	tblrd		*+
 17041  000BC8  CFF5 F015          	movff	tablat,___lldiv@divisor
 17042  000BCC  0009               	tblrd		*+
 17043  000BCE  CFF5 F016          	movff	tablat,___lldiv@divisor+1
 17044  000BD2  0009               	tblrd		*+
 17045  000BD4  CFF5 F017          	movff	tablat,___lldiv@divisor+2
 17046  000BD8  000A               	tblrd		*-
 17047  000BDA  CFF5 F018          	movff	tablat,___lldiv@divisor+3
 17048  000BDE  EC0E  F021         	call	___lldiv	;wreg free
 17049  000BE2  5011               	movf	?___lldiv,w,c
 17050  000BE4  0B0F               	andlw	15
 17051  000BE6  0101               	movlb	1	; () banked
 17052  000BE8  6F7A               	movwf	printf@idx& (0+255),b
 17053                           
 17054                           ; BSR set to: 1
 17055                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 17056  000BEA  0101               	movlb	1	; () banked
 17057  000BEC  517A               	movf	printf@idx& (0+255),w,b
 17058  000BEE  0D01               	mullw	1
 17059  000BF0  0E3E               	movlw	low STR_40
 17060  000BF2  24F3               	addwf	prodl,w,c
 17061  000BF4  6EF6               	movwf	tblptrl,c
 17062  000BF6  0EFF               	movlw	high STR_40
 17063  000BF8  20F4               	addwfc	prodh,w,c
 17064  000BFA  6EF7               	movwf	tblptrh,c
 17065  000BFC                     	if	0	;There are less than 3 active tblptr bytes
 17066  000BFC                     	endif
 17067  000BFC  0008               	tblrd		*
 17068  000BFE  CFF5 F190          	movff	tablat,printf@c
 17069                           
 17070                           ; BSR set to: 1
 17071                           ;doprnt.c: 1523: }
 17072                           
 17073                           ;doprnt.c: 1508: }
 17074                           ;doprnt.c: 1510: break;
 17075  000C02  D00A               	goto	l9734
 17076  000C04                     l9732:
 17077                           
 17078                           ; BSR set to: 1
 17079  000C04  0101               	movlb	1	; () banked
 17080  000C06  518B               	movf	printf@flag& (0+255),w,b
 17081  000C08  0B80               	andlw	128
 17082                           
 17083                           ; Switch size 1, requested type "space"
 17084                           ; Number of cases is 2, Range of values is 0 to 128
 17085                           ; switch strategies available:
 17086                           ; Name         Instructions Cycles
 17087                           ; simple_byte            7     4 (average)
 17088                           ;	Chosen strategy is simple_byte
 17089  000C0A  0A00               	xorlw	0	; case 0
 17090  000C0C  B4D8               	btfsc	status,2,c
 17091  000C0E  D780               	goto	l9724
 17092  000C10  0A80               	xorlw	128	; case 128
 17093  000C12  B4D8               	btfsc	status,2,c
 17094  000C14  D7BD               	goto	l9726
 17095  000C16  D000               	goto	l9734
 17096  000C18                     l9734:
 17097                           
 17098                           ; BSR set to: 1
 17099                           ;doprnt.c: 1524: (putch(c) );
 17100  000C18  0101               	movlb	1	; () banked
 17101  000C1A  5190               	movf	printf@c& (0+255),w,b
 17102  000C1C  EC13  F029         	call	_putch
 17103  000C20  D000               	goto	l9736
 17104  000C22                     l9736:
 17105  000C22  0101               	movlb	1	; () banked
 17106  000C24  077D               	decf	printf@prec& (0+255),f,b
 17107  000C26  A0D8               	btfss	status,0,c
 17108  000C28  077E               	decf	(printf@prec+1)& (0+255),f,b
 17109  000C2A  0101               	movlb	1	; () banked
 17110  000C2C  297D               	incf	printf@prec& (0+255),w,b
 17111  000C2E  E1EA               	bnz	l9732
 17112  000C30  0101               	movlb	1	; () banked
 17113  000C32  297E               	incf	(printf@prec+1)& (0+255),w,b
 17114  000C34  B4D8               	btfsc	status,2,c
 17115  000C36  D002               	goto	l9738
 17116  000C38  D7E5               	goto	l9732
 17117                           
 17118                           ; BSR set to: 1
 17119  000C3A  D000               	goto	l9738
 17120  000C3C                     l9738:
 17121  000C3C  C0DC  FFF6         	movff	printf@f,tblptrl
 17122  000C40  C0DD  FFF7         	movff	printf@f+1,tblptrh
 17123  000C44  0100               	movlb	0	; () banked
 17124  000C46  4BDC               	infsnz	printf@f& (0+255),f,b
 17125  000C48  2BDD               	incf	(printf@f+1)& (0+255),f,b
 17126  000C4A                     	if	0	;tblptru may be non-zero
 17127  000C4A                     	endif
 17128  000C4A                     	if	0	;tblptru may be non-zero
 17129  000C4A                     	endif
 17130  000C4A  0008               	tblrd		*
 17131  000C4C  CFF5 F190          	movff	tablat,printf@c
 17132  000C50  0101               	movlb	1	; () banked
 17133  000C52  5190               	movf	printf@c& (0+255),w,b
 17134  000C54  B4D8               	btfsc	status,2,c
 17135  000C56  D003               	goto	l1506
 17136  000C58  EF16  F000         	goto	l9452
 17137                           
 17138                           ; BSR set to: 1
 17139  000C5C  D000               	goto	l1506
 17140  000C5E                     l1506:
 17141  000C5E  0012               	return		;funcret
 17142  000C60                     __end_of_printf:
 17143                           	opt stack 0
 17144                           tblptru	equ	0xFF8
 17145                           tblptrh	equ	0xFF7
 17146                           tblptrl	equ	0xFF6
 17147                           tablat	equ	0xFF5
 17148                           prodh	equ	0xFF4
 17149                           prodl	equ	0xFF3
 17150                           intcon	equ	0xFF2
 17151                           intcon2	equ	0xFF1
 17152                           postinc0	equ	0xFEE
 17153                           wreg	equ	0xFE8
 17154                           postdec1	equ	0xFE5
 17155                           fsr1l	equ	0xFE1
 17156                           indf2	equ	0xFDF
 17157                           postinc2	equ	0xFDE
 17158                           postdec2	equ	0xFDD
 17159                           fsr2h	equ	0xFDA
 17160                           fsr2l	equ	0xFD9
 17161                           status	equ	0xFD8
 17162                           
 17163 ;; *************** function _scale *****************
 17164 ;; Defined at:
 17165 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 17166 ;; Parameters:    Size  Location     Type
 17167 ;;  scl             1    wreg     char 
 17168 ;; Auto vars:     Size  Location     Type
 17169 ;;  scl             1   72[COMRAM] char 
 17170 ;; Return value:  Size  Location     Type
 17171 ;;                  3   66[COMRAM] char 
 17172 ;; Registers used:
 17173 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17179 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17180 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17182 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17183 ;;Total ram usage:        7 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; Hardware stack levels required when called:    5
 17186 ;; This function calls:
 17187 ;;		___awdiv
 17188 ;;		___awmod
 17189 ;;		___ftmul
 17190 ;;		___wmul
 17191 ;; This function is called by:
 17192 ;;		_printf
 17193 ;; This function uses a non-reentrant model
 17194 ;;
 17195                           
 17196                           	psect	text84
 17197  00129C                     __ptext84:
 17198                           	opt stack 0
 17199  00129C                     _scale:
 17200                           	opt stack 24
 17201                           
 17202                           ;incstack = 0
 17203                           ;scale@scl stored from wreg
 17204  00129C  6E49               	movwf	scale@scl,c
 17205                           
 17206                           ;doprnt.c: 428: if(scl < 0) {
 17207  00129E  AE49               	btfss	scale@scl,7,c
 17208  0012A0  D0EF               	goto	l9180
 17209                           
 17210                           ;doprnt.c: 429: scl = -scl;
 17211  0012A2  6C49               	negf	scale@scl,c
 17212                           
 17213                           ;doprnt.c: 430: if(scl>=110)
 17214  0012A4  5049               	movf	scale@scl,w,c
 17215  0012A6  0A80               	xorlw	128
 17216  0012A8  0F12               	addlw	-238
 17217  0012AA  A0D8               	btfss	status,0,c
 17218  0012AC  D08D               	goto	l9170
 17219                           
 17220                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 17221  0012AE  0E00               	movlw	0
 17222  0012B0  6E14               	movwf	___wmul@multiplicand+1,c
 17223  0012B2  0E03               	movlw	3
 17224  0012B4  6E13               	movwf	___wmul@multiplicand,c
 17225  0012B6  0E00               	movlw	0
 17226  0012B8  6E1A               	movwf	___awdiv@divisor+1,c
 17227  0012BA  0E0A               	movlw	10
 17228  0012BC  6E19               	movwf	___awdiv@divisor,c
 17229  0012BE  0E00               	movlw	0
 17230  0012C0  6E40               	movwf	___awmod@divisor+1,c
 17231  0012C2  0E64               	movlw	100
 17232  0012C4  6E3F               	movwf	___awmod@divisor,c
 17233  0012C6  5049               	movf	scale@scl,w,c
 17234  0012C8  6E3D               	movwf	___awmod@dividend,c
 17235  0012CA  6A3E               	clrf	___awmod@dividend+1,c
 17236  0012CC  BE3D               	btfsc	___awmod@dividend,7,c
 17237  0012CE  063E               	decf	___awmod@dividend+1,f,c
 17238  0012D0  ECDB  F021         	call	___awmod	;wreg free
 17239  0012D4  C03D  F017         	movff	?___awmod,___awdiv@dividend
 17240  0012D8  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 17241  0012DC  ECE4  F01F         	call	___awdiv	;wreg free
 17242  0012E0  0E09               	movlw	9
 17243  0012E2  2417               	addwf	?___awdiv,w,c
 17244  0012E4  6E11               	movwf	___wmul@multiplier,c
 17245  0012E6  0E00               	movlw	0
 17246  0012E8  2018               	addwfc	?___awdiv+1,w,c
 17247  0012EA  6E12               	movwf	___wmul@multiplier+1,c
 17248  0012EC  ECFF  F026         	call	___wmul	;wreg free
 17249  0012F0  0E0E               	movlw	low __npowers_
 17250  0012F2  2411               	addwf	?___wmul,w,c
 17251  0012F4  6EF6               	movwf	tblptrl,c
 17252  0012F6  0EFE               	movlw	high __npowers_
 17253  0012F8  2012               	addwfc	?___wmul+1,w,c
 17254  0012FA  6EF7               	movwf	tblptrh,c
 17255  0012FC                     	if	0	;There are less than 3 active tblptr bytes
 17256  0012FC                     	endif
 17257  0012FC  0009               	tblrd		*+
 17258  0012FE  CFF5 F022          	movff	tablat,___ftmul@f2
 17259  001302  0009               	tblrd		*+
 17260  001304  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17261  001308  000A               	tblrd		*-
 17262  00130A  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17263  00130E  0E00               	movlw	0
 17264  001310  6E1A               	movwf	___awdiv@divisor+1,c
 17265  001312  0E64               	movlw	100
 17266  001314  6E19               	movwf	___awdiv@divisor,c
 17267  001316  5049               	movf	scale@scl,w,c
 17268  001318  6E17               	movwf	___awdiv@dividend,c
 17269  00131A  6A18               	clrf	___awdiv@dividend+1,c
 17270  00131C  BE17               	btfsc	___awdiv@dividend,7,c
 17271  00131E  0618               	decf	___awdiv@dividend+1,f,c
 17272  001320  ECE4  F01F         	call	___awdiv	;wreg free
 17273  001324  0E12               	movlw	18
 17274  001326  2417               	addwf	?___awdiv,w,c
 17275  001328  6E11               	movwf	___wmul@multiplier,c
 17276  00132A  0E00               	movlw	0
 17277  00132C  2018               	addwfc	?___awdiv+1,w,c
 17278  00132E  6E12               	movwf	___wmul@multiplier+1,c
 17279  001330  0E00               	movlw	0
 17280  001332  6E14               	movwf	___wmul@multiplicand+1,c
 17281  001334  0E03               	movlw	3
 17282  001336  6E13               	movwf	___wmul@multiplicand,c
 17283  001338  ECFF  F026         	call	___wmul	;wreg free
 17284  00133C  0E0E               	movlw	low __npowers_
 17285  00133E  2411               	addwf	?___wmul,w,c
 17286  001340  6EF6               	movwf	tblptrl,c
 17287  001342  0EFE               	movlw	high __npowers_
 17288  001344  2012               	addwfc	?___wmul+1,w,c
 17289  001346  6EF7               	movwf	tblptrh,c
 17290  001348                     	if	0	;There are less than 3 active tblptr bytes
 17291  001348                     	endif
 17292  001348  0009               	tblrd		*+
 17293  00134A  CFF5 F01F          	movff	tablat,___ftmul@f1
 17294  00134E  0009               	tblrd		*+
 17295  001350  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17296  001354  000A               	tblrd		*-
 17297  001356  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17298  00135A  ECB5  F018         	call	___ftmul	;wreg free
 17299  00135E  C01F  F046         	movff	?___ftmul,_scale$3272
 17300  001362  C020  F047         	movff	?___ftmul+1,_scale$3272+1
 17301  001366  C021  F048         	movff	?___ftmul+2,_scale$3272+2
 17302                           
 17303                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 17304  00136A  C046  F01F         	movff	_scale$3272,___ftmul@f1
 17305  00136E  C047  F020         	movff	_scale$3272+1,___ftmul@f1+1
 17306  001372  C048  F021         	movff	_scale$3272+2,___ftmul@f1+2
 17307  001376  0E00               	movlw	0
 17308  001378  6E14               	movwf	___wmul@multiplicand+1,c
 17309  00137A  0E03               	movlw	3
 17310  00137C  6E13               	movwf	___wmul@multiplicand,c
 17311  00137E  0E00               	movlw	0
 17312  001380  6E40               	movwf	___awmod@divisor+1,c
 17313  001382  0E0A               	movlw	10
 17314  001384  6E3F               	movwf	___awmod@divisor,c
 17315  001386  5049               	movf	scale@scl,w,c
 17316  001388  6E3D               	movwf	___awmod@dividend,c
 17317  00138A  6A3E               	clrf	___awmod@dividend+1,c
 17318  00138C  BE3D               	btfsc	___awmod@dividend,7,c
 17319  00138E  063E               	decf	___awmod@dividend+1,f,c
 17320  001390  ECDB  F021         	call	___awmod	;wreg free
 17321  001394  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17322  001398  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17323  00139C  ECFF  F026         	call	___wmul	;wreg free
 17324  0013A0  0E0E               	movlw	low __npowers_
 17325  0013A2  2411               	addwf	?___wmul,w,c
 17326  0013A4  6EF6               	movwf	tblptrl,c
 17327  0013A6  0EFE               	movlw	high __npowers_
 17328  0013A8  2012               	addwfc	?___wmul+1,w,c
 17329  0013AA  6EF7               	movwf	tblptrh,c
 17330  0013AC                     	if	0	;There are less than 3 active tblptr bytes
 17331  0013AC                     	endif
 17332  0013AC  0009               	tblrd		*+
 17333  0013AE  CFF5 F022          	movff	tablat,___ftmul@f2
 17334  0013B2  0009               	tblrd		*+
 17335  0013B4  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17336  0013B8  000A               	tblrd		*-
 17337  0013BA  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17338  0013BE  ECB5  F018         	call	___ftmul	;wreg free
 17339  0013C2  D141               	goto	L12
 17340  0013C4  D15A               	goto	l1395
 17341  0013C6  D054               	goto	l9176
 17342  0013C8                     l9170:
 17343                           
 17344                           ;doprnt.c: 432: else if(scl > 10)
 17345  0013C8  5049               	movf	scale@scl,w,c
 17346  0013CA  0A80               	xorlw	128
 17347  0013CC  0F75               	addlw	-139
 17348  0013CE  A0D8               	btfss	status,0,c
 17349  0013D0  D04F               	goto	l9176
 17350                           
 17351                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 17352  0013D2  0E00               	movlw	0
 17353  0013D4  6E1A               	movwf	___awdiv@divisor+1,c
 17354  0013D6  0E0A               	movlw	10
 17355  0013D8  6E19               	movwf	___awdiv@divisor,c
 17356  0013DA  5049               	movf	scale@scl,w,c
 17357  0013DC  6E17               	movwf	___awdiv@dividend,c
 17358  0013DE  6A18               	clrf	___awdiv@dividend+1,c
 17359  0013E0  BE17               	btfsc	___awdiv@dividend,7,c
 17360  0013E2  0618               	decf	___awdiv@dividend+1,f,c
 17361  0013E4  ECE4  F01F         	call	___awdiv	;wreg free
 17362  0013E8  0E09               	movlw	9
 17363  0013EA  2417               	addwf	?___awdiv,w,c
 17364  0013EC  6E11               	movwf	___wmul@multiplier,c
 17365  0013EE  0E00               	movlw	0
 17366  0013F0  2018               	addwfc	?___awdiv+1,w,c
 17367  0013F2  6E12               	movwf	___wmul@multiplier+1,c
 17368  0013F4  0E00               	movlw	0
 17369  0013F6  6E14               	movwf	___wmul@multiplicand+1,c
 17370  0013F8  0E03               	movlw	3
 17371  0013FA  6E13               	movwf	___wmul@multiplicand,c
 17372  0013FC  ECFF  F026         	call	___wmul	;wreg free
 17373  001400  0E0E               	movlw	low __npowers_
 17374  001402  2411               	addwf	?___wmul,w,c
 17375  001404  6EF6               	movwf	tblptrl,c
 17376  001406  0EFE               	movlw	high __npowers_
 17377  001408  2012               	addwfc	?___wmul+1,w,c
 17378  00140A  6EF7               	movwf	tblptrh,c
 17379  00140C                     	if	0	;There are less than 3 active tblptr bytes
 17380  00140C                     	endif
 17381  00140C  0009               	tblrd		*+
 17382  00140E  CFF5 F01F          	movff	tablat,___ftmul@f1
 17383  001412  0009               	tblrd		*+
 17384  001414  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17385  001418  000A               	tblrd		*-
 17386  00141A  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17387  00141E  0E00               	movlw	0
 17388  001420  6E14               	movwf	___wmul@multiplicand+1,c
 17389  001422  0E03               	movlw	3
 17390  001424  6E13               	movwf	___wmul@multiplicand,c
 17391  001426  0E00               	movlw	0
 17392  001428  6E40               	movwf	___awmod@divisor+1,c
 17393  00142A  0E0A               	movlw	10
 17394  00142C  6E3F               	movwf	___awmod@divisor,c
 17395  00142E  5049               	movf	scale@scl,w,c
 17396  001430  6E3D               	movwf	___awmod@dividend,c
 17397  001432  6A3E               	clrf	___awmod@dividend+1,c
 17398  001434  BE3D               	btfsc	___awmod@dividend,7,c
 17399  001436  063E               	decf	___awmod@dividend+1,f,c
 17400  001438  ECDB  F021         	call	___awmod	;wreg free
 17401  00143C  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17402  001440  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17403  001444  ECFF  F026         	call	___wmul	;wreg free
 17404  001448  0E0E               	movlw	low __npowers_
 17405  00144A  2411               	addwf	?___wmul,w,c
 17406  00144C  6EF6               	movwf	tblptrl,c
 17407  00144E  0EFE               	movlw	high __npowers_
 17408  001450  2012               	addwfc	?___wmul+1,w,c
 17409  001452  6EF7               	movwf	tblptrh,c
 17410  001454                     	if	0	;There are less than 3 active tblptr bytes
 17411  001454                     	endif
 17412  001454  0009               	tblrd		*+
 17413  001456  CFF5 F022          	movff	tablat,___ftmul@f2
 17414  00145A  0009               	tblrd		*+
 17415  00145C  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17416  001460  000A               	tblrd		*-
 17417  001462  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17418  001466  ECB5  F018         	call	___ftmul	;wreg free
 17419  00146A  D0ED               	goto	L12
 17420  00146C  D106               	goto	l1395
 17421  00146E  D000               	goto	l9176
 17422  001470                     l9176:
 17423                           
 17424                           ;doprnt.c: 434: return _npowers_[scl];
 17425  001470  5049               	movf	scale@scl,w,c
 17426  001472  0D03               	mullw	3
 17427  001474  0E0E               	movlw	low __npowers_
 17428  001476  24F3               	addwf	prodl,w,c
 17429  001478  6EF6               	movwf	tblptrl,c
 17430  00147A  0EFE               	movlw	high __npowers_
 17431  00147C  D0F2               	goto	L11
 17432  00147E  D0FD               	goto	l1395
 17433  001480                     l9180:
 17434                           
 17435                           ;doprnt.c: 435: }
 17436                           ;doprnt.c: 436: if(scl>=110)
 17437  001480  5049               	movf	scale@scl,w,c
 17438  001482  0A80               	xorlw	128
 17439  001484  0F12               	addlw	-238
 17440  001486  A0D8               	btfss	status,0,c
 17441  001488  D08D               	goto	l9188
 17442                           
 17443                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 17444  00148A  0E00               	movlw	0
 17445  00148C  6E14               	movwf	___wmul@multiplicand+1,c
 17446  00148E  0E03               	movlw	3
 17447  001490  6E13               	movwf	___wmul@multiplicand,c
 17448  001492  0E00               	movlw	0
 17449  001494  6E1A               	movwf	___awdiv@divisor+1,c
 17450  001496  0E0A               	movlw	10
 17451  001498  6E19               	movwf	___awdiv@divisor,c
 17452  00149A  0E00               	movlw	0
 17453  00149C  6E40               	movwf	___awmod@divisor+1,c
 17454  00149E  0E64               	movlw	100
 17455  0014A0  6E3F               	movwf	___awmod@divisor,c
 17456  0014A2  5049               	movf	scale@scl,w,c
 17457  0014A4  6E3D               	movwf	___awmod@dividend,c
 17458  0014A6  6A3E               	clrf	___awmod@dividend+1,c
 17459  0014A8  BE3D               	btfsc	___awmod@dividend,7,c
 17460  0014AA  063E               	decf	___awmod@dividend+1,f,c
 17461  0014AC  ECDB  F021         	call	___awmod	;wreg free
 17462  0014B0  C03D  F017         	movff	?___awmod,___awdiv@dividend
 17463  0014B4  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 17464  0014B8  ECE4  F01F         	call	___awdiv	;wreg free
 17465  0014BC  0E09               	movlw	9
 17466  0014BE  2417               	addwf	?___awdiv,w,c
 17467  0014C0  6E11               	movwf	___wmul@multiplier,c
 17468  0014C2  0E00               	movlw	0
 17469  0014C4  2018               	addwfc	?___awdiv+1,w,c
 17470  0014C6  6E12               	movwf	___wmul@multiplier+1,c
 17471  0014C8  ECFF  F026         	call	___wmul	;wreg free
 17472  0014CC  0E35               	movlw	low __powers_
 17473  0014CE  2411               	addwf	?___wmul,w,c
 17474  0014D0  6EF6               	movwf	tblptrl,c
 17475  0014D2  0EFE               	movlw	high __powers_
 17476  0014D4  2012               	addwfc	?___wmul+1,w,c
 17477  0014D6  6EF7               	movwf	tblptrh,c
 17478  0014D8                     	if	0	;There are less than 3 active tblptr bytes
 17479  0014D8                     	endif
 17480  0014D8  0009               	tblrd		*+
 17481  0014DA  CFF5 F022          	movff	tablat,___ftmul@f2
 17482  0014DE  0009               	tblrd		*+
 17483  0014E0  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17484  0014E4  000A               	tblrd		*-
 17485  0014E6  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17486  0014EA  0E00               	movlw	0
 17487  0014EC  6E1A               	movwf	___awdiv@divisor+1,c
 17488  0014EE  0E64               	movlw	100
 17489  0014F0  6E19               	movwf	___awdiv@divisor,c
 17490  0014F2  5049               	movf	scale@scl,w,c
 17491  0014F4  6E17               	movwf	___awdiv@dividend,c
 17492  0014F6  6A18               	clrf	___awdiv@dividend+1,c
 17493  0014F8  BE17               	btfsc	___awdiv@dividend,7,c
 17494  0014FA  0618               	decf	___awdiv@dividend+1,f,c
 17495  0014FC  ECE4  F01F         	call	___awdiv	;wreg free
 17496  001500  0E12               	movlw	18
 17497  001502  2417               	addwf	?___awdiv,w,c
 17498  001504  6E11               	movwf	___wmul@multiplier,c
 17499  001506  0E00               	movlw	0
 17500  001508  2018               	addwfc	?___awdiv+1,w,c
 17501  00150A  6E12               	movwf	___wmul@multiplier+1,c
 17502  00150C  0E00               	movlw	0
 17503  00150E  6E14               	movwf	___wmul@multiplicand+1,c
 17504  001510  0E03               	movlw	3
 17505  001512  6E13               	movwf	___wmul@multiplicand,c
 17506  001514  ECFF  F026         	call	___wmul	;wreg free
 17507  001518  0E35               	movlw	low __powers_
 17508  00151A  2411               	addwf	?___wmul,w,c
 17509  00151C  6EF6               	movwf	tblptrl,c
 17510  00151E  0EFE               	movlw	high __powers_
 17511  001520  2012               	addwfc	?___wmul+1,w,c
 17512  001522  6EF7               	movwf	tblptrh,c
 17513  001524                     	if	0	;There are less than 3 active tblptr bytes
 17514  001524                     	endif
 17515  001524  0009               	tblrd		*+
 17516  001526  CFF5 F01F          	movff	tablat,___ftmul@f1
 17517  00152A  0009               	tblrd		*+
 17518  00152C  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17519  001530  000A               	tblrd		*-
 17520  001532  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17521  001536  ECB5  F018         	call	___ftmul	;wreg free
 17522  00153A  C01F  F046         	movff	?___ftmul,_scale$3272
 17523  00153E  C020  F047         	movff	?___ftmul+1,_scale$3272+1
 17524  001542  C021  F048         	movff	?___ftmul+2,_scale$3272+2
 17525                           
 17526                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 17527  001546  C046  F01F         	movff	_scale$3272,___ftmul@f1
 17528  00154A  C047  F020         	movff	_scale$3272+1,___ftmul@f1+1
 17529  00154E  C048  F021         	movff	_scale$3272+2,___ftmul@f1+2
 17530  001552  0E00               	movlw	0
 17531  001554  6E14               	movwf	___wmul@multiplicand+1,c
 17532  001556  0E03               	movlw	3
 17533  001558  6E13               	movwf	___wmul@multiplicand,c
 17534  00155A  0E00               	movlw	0
 17535  00155C  6E40               	movwf	___awmod@divisor+1,c
 17536  00155E  0E0A               	movlw	10
 17537  001560  6E3F               	movwf	___awmod@divisor,c
 17538  001562  5049               	movf	scale@scl,w,c
 17539  001564  6E3D               	movwf	___awmod@dividend,c
 17540  001566  6A3E               	clrf	___awmod@dividend+1,c
 17541  001568  BE3D               	btfsc	___awmod@dividend,7,c
 17542  00156A  063E               	decf	___awmod@dividend+1,f,c
 17543  00156C  ECDB  F021         	call	___awmod	;wreg free
 17544  001570  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17545  001574  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17546  001578  ECFF  F026         	call	___wmul	;wreg free
 17547  00157C  0E35               	movlw	low __powers_
 17548  00157E  2411               	addwf	?___wmul,w,c
 17549  001580  6EF6               	movwf	tblptrl,c
 17550  001582  0EFE               	movlw	high __powers_
 17551  001584  2012               	addwfc	?___wmul+1,w,c
 17552  001586  6EF7               	movwf	tblptrh,c
 17553  001588                     	if	0	;There are less than 3 active tblptr bytes
 17554  001588                     	endif
 17555  001588  0009               	tblrd		*+
 17556  00158A  CFF5 F022          	movff	tablat,___ftmul@f2
 17557  00158E  0009               	tblrd		*+
 17558  001590  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17559  001594  000A               	tblrd		*-
 17560  001596  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17561  00159A  ECB5  F018         	call	___ftmul	;wreg free
 17562  00159E  D053               	goto	L12
 17563  0015A0  D06C               	goto	l1395
 17564  0015A2  D059               	goto	l9194
 17565  0015A4                     l9188:
 17566                           
 17567                           ;doprnt.c: 438: else if(scl > 10)
 17568  0015A4  5049               	movf	scale@scl,w,c
 17569  0015A6  0A80               	xorlw	128
 17570  0015A8  0F75               	addlw	-139
 17571  0015AA  A0D8               	btfss	status,0,c
 17572  0015AC  D054               	goto	l9194
 17573                           
 17574                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 17575  0015AE  0E00               	movlw	0
 17576  0015B0  6E1A               	movwf	___awdiv@divisor+1,c
 17577  0015B2  0E0A               	movlw	10
 17578  0015B4  6E19               	movwf	___awdiv@divisor,c
 17579  0015B6  5049               	movf	scale@scl,w,c
 17580  0015B8  6E17               	movwf	___awdiv@dividend,c
 17581  0015BA  6A18               	clrf	___awdiv@dividend+1,c
 17582  0015BC  BE17               	btfsc	___awdiv@dividend,7,c
 17583  0015BE  0618               	decf	___awdiv@dividend+1,f,c
 17584  0015C0  ECE4  F01F         	call	___awdiv	;wreg free
 17585  0015C4  0E09               	movlw	9
 17586  0015C6  2417               	addwf	?___awdiv,w,c
 17587  0015C8  6E11               	movwf	___wmul@multiplier,c
 17588  0015CA  0E00               	movlw	0
 17589  0015CC  2018               	addwfc	?___awdiv+1,w,c
 17590  0015CE  6E12               	movwf	___wmul@multiplier+1,c
 17591  0015D0  0E00               	movlw	0
 17592  0015D2  6E14               	movwf	___wmul@multiplicand+1,c
 17593  0015D4  0E03               	movlw	3
 17594  0015D6  6E13               	movwf	___wmul@multiplicand,c
 17595  0015D8  ECFF  F026         	call	___wmul	;wreg free
 17596  0015DC  0E35               	movlw	low __powers_
 17597  0015DE  2411               	addwf	?___wmul,w,c
 17598  0015E0  6EF6               	movwf	tblptrl,c
 17599  0015E2  0EFE               	movlw	high __powers_
 17600  0015E4  2012               	addwfc	?___wmul+1,w,c
 17601  0015E6  6EF7               	movwf	tblptrh,c
 17602  0015E8                     	if	0	;There are less than 3 active tblptr bytes
 17603  0015E8                     	endif
 17604  0015E8  0009               	tblrd		*+
 17605  0015EA  CFF5 F01F          	movff	tablat,___ftmul@f1
 17606  0015EE  0009               	tblrd		*+
 17607  0015F0  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17608  0015F4  000A               	tblrd		*-
 17609  0015F6  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17610  0015FA  0E00               	movlw	0
 17611  0015FC  6E14               	movwf	___wmul@multiplicand+1,c
 17612  0015FE  0E03               	movlw	3
 17613  001600  6E13               	movwf	___wmul@multiplicand,c
 17614  001602  0E00               	movlw	0
 17615  001604  6E40               	movwf	___awmod@divisor+1,c
 17616  001606  0E0A               	movlw	10
 17617  001608  6E3F               	movwf	___awmod@divisor,c
 17618  00160A  5049               	movf	scale@scl,w,c
 17619  00160C  6E3D               	movwf	___awmod@dividend,c
 17620  00160E  6A3E               	clrf	___awmod@dividend+1,c
 17621  001610  BE3D               	btfsc	___awmod@dividend,7,c
 17622  001612  063E               	decf	___awmod@dividend+1,f,c
 17623  001614  ECDB  F021         	call	___awmod	;wreg free
 17624  001618  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17625  00161C  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17626  001620  ECFF  F026         	call	___wmul	;wreg free
 17627  001624  0E35               	movlw	low __powers_
 17628  001626  2411               	addwf	?___wmul,w,c
 17629  001628  6EF6               	movwf	tblptrl,c
 17630  00162A  0EFE               	movlw	high __powers_
 17631  00162C  2012               	addwfc	?___wmul+1,w,c
 17632  00162E  6EF7               	movwf	tblptrh,c
 17633  001630                     	if	0	;There are less than 3 active tblptr bytes
 17634  001630                     	endif
 17635  001630  0009               	tblrd		*+
 17636  001632  CFF5 F022          	movff	tablat,___ftmul@f2
 17637  001636  0009               	tblrd		*+
 17638  001638  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17639  00163C  000A               	tblrd		*-
 17640  00163E  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17641  001642  ECB5  F018         	call	___ftmul	;wreg free
 17642  001646                     L12:
 17643  001646  C01F  F043         	movff	?___ftmul,?_scale
 17644  00164A  C020  F044         	movff	?___ftmul+1,?_scale+1
 17645  00164E  C021  F045         	movff	?___ftmul+2,?_scale+2
 17646  001652  D013               	goto	l1395
 17647  001654  D000               	goto	l9194
 17648  001656                     l9194:
 17649                           
 17650                           ;doprnt.c: 440: return _powers_[scl];
 17651  001656  5049               	movf	scale@scl,w,c
 17652  001658  0D03               	mullw	3
 17653  00165A  0E35               	movlw	low __powers_
 17654  00165C  24F3               	addwf	prodl,w,c
 17655  00165E  6EF6               	movwf	tblptrl,c
 17656  001660  0EFE               	movlw	high __powers_
 17657  001662                     L11:
 17658  001662  20F4               	addwfc	prodh,w,c
 17659  001664  6EF7               	movwf	tblptrh,c
 17660  001666                     	if	0	;There are less than 3 active tblptr bytes
 17661  001666                     	endif
 17662  001666  0009               	tblrd		*+
 17663  001668  CFF5 F043          	movff	tablat,?_scale
 17664  00166C  0009               	tblrd		*+
 17665  00166E  CFF5 F044          	movff	tablat,?_scale+1
 17666  001672  000A               	tblrd		*-
 17667  001674  CFF5 F045          	movff	tablat,?_scale+2
 17668  001678  D000               	goto	l1395
 17669  00167A                     l1395:
 17670  00167A  0012               	return		;funcret
 17671  00167C                     __end_of_scale:
 17672                           	opt stack 0
 17673                           tblptru	equ	0xFF8
 17674                           tblptrh	equ	0xFF7
 17675                           tblptrl	equ	0xFF6
 17676                           tablat	equ	0xFF5
 17677                           prodh	equ	0xFF4
 17678                           prodl	equ	0xFF3
 17679                           intcon	equ	0xFF2
 17680                           intcon2	equ	0xFF1
 17681                           postinc0	equ	0xFEE
 17682                           wreg	equ	0xFE8
 17683                           postdec1	equ	0xFE5
 17684                           fsr1l	equ	0xFE1
 17685                           indf2	equ	0xFDF
 17686                           postinc2	equ	0xFDE
 17687                           postdec2	equ	0xFDD
 17688                           fsr2h	equ	0xFDA
 17689                           fsr2l	equ	0xFD9
 17690                           status	equ	0xFD8
 17691                           
 17692 ;; *************** function _putch *****************
 17693 ;; Defined at:
 17694 ;;		line 78 in file "Main.c"
 17695 ;; Parameters:    Size  Location     Type
 17696 ;;  c               1    wreg     unsigned char 
 17697 ;; Auto vars:     Size  Location     Type
 17698 ;;  c               1   16[COMRAM] unsigned char 
 17699 ;; Return value:  Size  Location     Type
 17700 ;;		None               void
 17701 ;; Registers used:
 17702 ;;		wreg
 17703 ;; Tracked objects:
 17704 ;;		On entry : 0/0
 17705 ;;		On exit  : 0/0
 17706 ;;		Unchanged: 0/0
 17707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17709 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17711 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;Total ram usage:        1 bytes
 17713 ;; Hardware stack levels used:    1
 17714 ;; Hardware stack levels required when called:    3
 17715 ;; This function calls:
 17716 ;;		Nothing
 17717 ;; This function is called by:
 17718 ;;		_printf
 17719 ;; This function uses a non-reentrant model
 17720 ;;
 17721                           
 17722                           	psect	text85
 17723  005226                     __ptext85:
 17724                           	opt stack 0
 17725  005226                     _putch:
 17726                           	opt stack 26
 17727                           
 17728                           ;incstack = 0
 17729                           ;putch@c stored from wreg
 17730  005226  6E11               	movwf	putch@c,c
 17731                           
 17732                           ;Main.c: 80: while (!TRMT);
 17733  005228  D000               	goto	l516
 17734  00522A                     l516:
 17735  00522A  A2AC               	btfss	4012,1,c	;volatile
 17736  00522C  D7FE               	goto	l516
 17737                           
 17738                           ;Main.c: 81: TXREG = c;
 17739  00522E  C011  FFAD         	movff	putch@c,4013	;volatile
 17740  005232  0012               	return		;funcret
 17741  005234                     __end_of_putch:
 17742                           	opt stack 0
 17743                           tblptru	equ	0xFF8
 17744                           tblptrh	equ	0xFF7
 17745                           tblptrl	equ	0xFF6
 17746                           tablat	equ	0xFF5
 17747                           prodh	equ	0xFF4
 17748                           prodl	equ	0xFF3
 17749                           intcon	equ	0xFF2
 17750                           intcon2	equ	0xFF1
 17751                           postinc0	equ	0xFEE
 17752                           wreg	equ	0xFE8
 17753                           postdec1	equ	0xFE5
 17754                           fsr1l	equ	0xFE1
 17755                           indf2	equ	0xFDF
 17756                           postinc2	equ	0xFDE
 17757                           postdec2	equ	0xFDD
 17758                           fsr2h	equ	0xFDA
 17759                           fsr2l	equ	0xFD9
 17760                           status	equ	0xFD8
 17761                           
 17762 ;; *************** function _isdigit *****************
 17763 ;; Defined at:
 17764 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 17765 ;; Parameters:    Size  Location     Type
 17766 ;;  c               1    wreg     unsigned char 
 17767 ;; Auto vars:     Size  Location     Type
 17768 ;;  c               1   18[COMRAM] unsigned char 
 17769 ;; Return value:  Size  Location     Type
 17770 ;;		None               void
 17771 ;; Registers used:
 17772 ;;		wreg, status,2, status,0
 17773 ;; Tracked objects:
 17774 ;;		On entry : 0/0
 17775 ;;		On exit  : 0/0
 17776 ;;		Unchanged: 0/0
 17777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17781 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17782 ;;Total ram usage:        3 bytes
 17783 ;; Hardware stack levels used:    1
 17784 ;; Hardware stack levels required when called:    3
 17785 ;; This function calls:
 17786 ;;		Nothing
 17787 ;; This function is called by:
 17788 ;;		_printf
 17789 ;; This function uses a non-reentrant model
 17790 ;;
 17791                           
 17792                           	psect	text86
 17793  004EDA                     __ptext86:
 17794                           	opt stack 0
 17795  004EDA                     _isdigit:
 17796                           	opt stack 26
 17797                           
 17798                           ;incstack = 0
 17799                           ;isdigit@c stored from wreg
 17800  004EDA  6E13               	movwf	isdigit@c,c
 17801  004EDC  0E00               	movlw	0
 17802  004EDE  6E12               	movwf	_isdigit$2916,c
 17803  004EE0  0E3A               	movlw	58
 17804  004EE2  6013               	cpfslt	isdigit@c,c
 17805  004EE4  D006               	goto	l9206
 17806  004EE6  0E2F               	movlw	47
 17807  004EE8  6413               	cpfsgt	isdigit@c,c
 17808  004EEA  D003               	goto	l9206
 17809  004EEC  0E01               	movlw	1
 17810  004EEE  6E12               	movwf	_isdigit$2916,c
 17811  004EF0  D000               	goto	l9206
 17812  004EF2                     l9206:
 17813  004EF2  C012  F011         	movff	_isdigit$2916,??_isdigit
 17814  004EF6  3011               	rrcf	??_isdigit,w,c
 17815  004EF8  D000               	goto	l2007
 17816  004EFA                     l2007:
 17817  004EFA  0012               	return		;funcret
 17818  004EFC                     __end_of_isdigit:
 17819                           	opt stack 0
 17820                           tblptru	equ	0xFF8
 17821                           tblptrh	equ	0xFF7
 17822                           tblptrl	equ	0xFF6
 17823                           tablat	equ	0xFF5
 17824                           prodh	equ	0xFF4
 17825                           prodl	equ	0xFF3
 17826                           intcon	equ	0xFF2
 17827                           intcon2	equ	0xFF1
 17828                           postinc0	equ	0xFEE
 17829                           wreg	equ	0xFE8
 17830                           postdec1	equ	0xFE5
 17831                           fsr1l	equ	0xFE1
 17832                           indf2	equ	0xFDF
 17833                           postinc2	equ	0xFDE
 17834                           postdec2	equ	0xFDD
 17835                           fsr2h	equ	0xFDA
 17836                           fsr2l	equ	0xFD9
 17837                           status	equ	0xFD8
 17838                           
 17839 ;; *************** function _fround *****************
 17840 ;; Defined at:
 17841 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 17842 ;; Parameters:    Size  Location     Type
 17843 ;;  prec            1    wreg     unsigned char 
 17844 ;; Auto vars:     Size  Location     Type
 17845 ;;  prec            1   75[COMRAM] unsigned char 
 17846 ;; Return value:  Size  Location     Type
 17847 ;;                  3   66[COMRAM] unsigned char 
 17848 ;; Registers used:
 17849 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17850 ;; Tracked objects:
 17851 ;;		On entry : 0/0
 17852 ;;		On exit  : 0/0
 17853 ;;		Unchanged: 0/0
 17854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17856 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17858 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17859 ;;Total ram usage:       10 bytes
 17860 ;; Hardware stack levels used:    1
 17861 ;; Hardware stack levels required when called:    5
 17862 ;; This function calls:
 17863 ;;		___awdiv
 17864 ;;		___awmod
 17865 ;;		___ftmul
 17866 ;;		___wmul
 17867 ;; This function is called by:
 17868 ;;		_printf
 17869 ;; This function uses a non-reentrant model
 17870 ;;
 17871                           
 17872                           	psect	text87
 17873  001C6C                     __ptext87:
 17874                           	opt stack 0
 17875  001C6C                     _fround:
 17876                           	opt stack 24
 17877                           
 17878                           ;incstack = 0
 17879                           ;fround@prec stored from wreg
 17880  001C6C  6E4C               	movwf	fround@prec,c
 17881                           
 17882                           ;doprnt.c: 413: if(prec>=110)
 17883  001C6E  0E6D               	movlw	109
 17884  001C70  644C               	cpfsgt	fround@prec,c
 17885  001C72  D09B               	goto	l9148
 17886                           
 17887                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17888  001C74  0E00               	movlw	0
 17889  001C76  6E14               	movwf	___wmul@multiplicand+1,c
 17890  001C78  0E03               	movlw	3
 17891  001C7A  6E13               	movwf	___wmul@multiplicand,c
 17892  001C7C  0E00               	movlw	0
 17893  001C7E  6E1A               	movwf	___awdiv@divisor+1,c
 17894  001C80  0E0A               	movlw	10
 17895  001C82  6E19               	movwf	___awdiv@divisor,c
 17896  001C84  0E00               	movlw	0
 17897  001C86  6E40               	movwf	___awmod@divisor+1,c
 17898  001C88  0E64               	movlw	100
 17899  001C8A  6E3F               	movwf	___awmod@divisor,c
 17900  001C8C  C04C  F03D         	movff	fround@prec,___awmod@dividend
 17901  001C90  6A3E               	clrf	___awmod@dividend+1,c
 17902  001C92  ECDB  F021         	call	___awmod	;wreg free
 17903  001C96  C03D  F017         	movff	?___awmod,___awdiv@dividend
 17904  001C9A  C03E  F018         	movff	?___awmod+1,___awdiv@dividend+1
 17905  001C9E  ECE4  F01F         	call	___awdiv	;wreg free
 17906  001CA2  0E09               	movlw	9
 17907  001CA4  2417               	addwf	?___awdiv,w,c
 17908  001CA6  6E11               	movwf	___wmul@multiplier,c
 17909  001CA8  0E00               	movlw	0
 17910  001CAA  2018               	addwfc	?___awdiv+1,w,c
 17911  001CAC  6E12               	movwf	___wmul@multiplier+1,c
 17912  001CAE  ECFF  F026         	call	___wmul	;wreg free
 17913  001CB2  0E0E               	movlw	low __npowers_
 17914  001CB4  2411               	addwf	?___wmul,w,c
 17915  001CB6  6EF6               	movwf	tblptrl,c
 17916  001CB8  0EFE               	movlw	high __npowers_
 17917  001CBA  2012               	addwfc	?___wmul+1,w,c
 17918  001CBC  6EF7               	movwf	tblptrh,c
 17919  001CBE                     	if	0	;There are less than 3 active tblptr bytes
 17920  001CBE                     	endif
 17921  001CBE  0009               	tblrd		*+
 17922  001CC0  CFF5 F022          	movff	tablat,___ftmul@f2
 17923  001CC4  0009               	tblrd		*+
 17924  001CC6  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17925  001CCA  000A               	tblrd		*-
 17926  001CCC  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17927  001CD0  0E00               	movlw	0
 17928  001CD2  6E1A               	movwf	___awdiv@divisor+1,c
 17929  001CD4  0E64               	movlw	100
 17930  001CD6  6E19               	movwf	___awdiv@divisor,c
 17931  001CD8  C04C  F017         	movff	fround@prec,___awdiv@dividend
 17932  001CDC  6A18               	clrf	___awdiv@dividend+1,c
 17933  001CDE  ECE4  F01F         	call	___awdiv	;wreg free
 17934  001CE2  0E12               	movlw	18
 17935  001CE4  2417               	addwf	?___awdiv,w,c
 17936  001CE6  6E11               	movwf	___wmul@multiplier,c
 17937  001CE8  0E00               	movlw	0
 17938  001CEA  2018               	addwfc	?___awdiv+1,w,c
 17939  001CEC  6E12               	movwf	___wmul@multiplier+1,c
 17940  001CEE  0E00               	movlw	0
 17941  001CF0  6E14               	movwf	___wmul@multiplicand+1,c
 17942  001CF2  0E03               	movlw	3
 17943  001CF4  6E13               	movwf	___wmul@multiplicand,c
 17944  001CF6  ECFF  F026         	call	___wmul	;wreg free
 17945  001CFA  0E0E               	movlw	low __npowers_
 17946  001CFC  2411               	addwf	?___wmul,w,c
 17947  001CFE  6EF6               	movwf	tblptrl,c
 17948  001D00  0EFE               	movlw	high __npowers_
 17949  001D02  2012               	addwfc	?___wmul+1,w,c
 17950  001D04  6EF7               	movwf	tblptrh,c
 17951  001D06                     	if	0	;There are less than 3 active tblptr bytes
 17952  001D06                     	endif
 17953  001D06  0009               	tblrd		*+
 17954  001D08  CFF5 F01F          	movff	tablat,___ftmul@f1
 17955  001D0C  0009               	tblrd		*+
 17956  001D0E  CFF5 F020          	movff	tablat,___ftmul@f1+1
 17957  001D12  000A               	tblrd		*-
 17958  001D14  CFF5 F021          	movff	tablat,___ftmul@f1+2
 17959  001D18  ECB5  F018         	call	___ftmul	;wreg free
 17960  001D1C  C01F  F049         	movff	?___ftmul,_fround$3270
 17961  001D20  C020  F04A         	movff	?___ftmul+1,_fround$3270+1
 17962  001D24  C021  F04B         	movff	?___ftmul+2,_fround$3270+2
 17963                           
 17964                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17965  001D28  0E00               	movlw	0
 17966  001D2A  6E14               	movwf	___wmul@multiplicand+1,c
 17967  001D2C  0E03               	movlw	3
 17968  001D2E  6E13               	movwf	___wmul@multiplicand,c
 17969  001D30  0E00               	movlw	0
 17970  001D32  6E40               	movwf	___awmod@divisor+1,c
 17971  001D34  0E0A               	movlw	10
 17972  001D36  6E3F               	movwf	___awmod@divisor,c
 17973  001D38  C04C  F03D         	movff	fround@prec,___awmod@dividend
 17974  001D3C  6A3E               	clrf	___awmod@dividend+1,c
 17975  001D3E  ECDB  F021         	call	___awmod	;wreg free
 17976  001D42  C03D  F011         	movff	?___awmod,___wmul@multiplier
 17977  001D46  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 17978  001D4A  ECFF  F026         	call	___wmul	;wreg free
 17979  001D4E  0E0E               	movlw	low __npowers_
 17980  001D50  2411               	addwf	?___wmul,w,c
 17981  001D52  6EF6               	movwf	tblptrl,c
 17982  001D54  0EFE               	movlw	high __npowers_
 17983  001D56  2012               	addwfc	?___wmul+1,w,c
 17984  001D58  6EF7               	movwf	tblptrh,c
 17985  001D5A                     	if	0	;There are less than 3 active tblptr bytes
 17986  001D5A                     	endif
 17987  001D5A  0009               	tblrd		*+
 17988  001D5C  CFF5 F022          	movff	tablat,___ftmul@f2
 17989  001D60  0009               	tblrd		*+
 17990  001D62  CFF5 F023          	movff	tablat,___ftmul@f2+1
 17991  001D66  000A               	tblrd		*-
 17992  001D68  CFF5 F024          	movff	tablat,___ftmul@f2+2
 17993  001D6C  C049  F01F         	movff	_fround$3270,___ftmul@f1
 17994  001D70  C04A  F020         	movff	_fround$3270+1,___ftmul@f1+1
 17995  001D74  C04B  F021         	movff	_fround$3270+2,___ftmul@f1+2
 17996  001D78  ECB5  F018         	call	___ftmul	;wreg free
 17997  001D7C  C01F  F046         	movff	?___ftmul,_fround$3271
 17998  001D80  C020  F047         	movff	?___ftmul+1,_fround$3271+1
 17999  001D84  C021  F048         	movff	?___ftmul+2,_fround$3271+2
 18000                           
 18001                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 18002  001D88  C046  F01F         	movff	_fround$3271,___ftmul@f1
 18003  001D8C  C047  F020         	movff	_fround$3271+1,___ftmul@f1+1
 18004  001D90  C048  F021         	movff	_fround$3271+2,___ftmul@f1+2
 18005  001D94  0E00               	movlw	0
 18006  001D96  6E22               	movwf	___ftmul@f2,c
 18007  001D98  0E00               	movlw	0
 18008  001D9A  6E23               	movwf	___ftmul@f2+1,c
 18009  001D9C  0E3F               	movlw	63
 18010  001D9E  6E24               	movwf	___ftmul@f2+2,c
 18011  001DA0  ECB5  F018         	call	___ftmul	;wreg free
 18012  001DA4  D07D               	goto	L14
 18013  001DA6  D083               	goto	l1388
 18014  001DA8  D062               	goto	l9156
 18015  001DAA                     l9148:
 18016                           
 18017                           ;doprnt.c: 415: else if(prec > 10)
 18018  001DAA  0E0A               	movlw	10
 18019  001DAC  644C               	cpfsgt	fround@prec,c
 18020  001DAE  D05F               	goto	l9156
 18021                           
 18022                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 18023  001DB0  0E00               	movlw	0
 18024  001DB2  6E14               	movwf	___wmul@multiplicand+1,c
 18025  001DB4  0E03               	movlw	3
 18026  001DB6  6E13               	movwf	___wmul@multiplicand,c
 18027  001DB8  0E00               	movlw	0
 18028  001DBA  6E40               	movwf	___awmod@divisor+1,c
 18029  001DBC  0E0A               	movlw	10
 18030  001DBE  6E3F               	movwf	___awmod@divisor,c
 18031  001DC0  C04C  F03D         	movff	fround@prec,___awmod@dividend
 18032  001DC4  6A3E               	clrf	___awmod@dividend+1,c
 18033  001DC6  ECDB  F021         	call	___awmod	;wreg free
 18034  001DCA  C03D  F011         	movff	?___awmod,___wmul@multiplier
 18035  001DCE  C03E  F012         	movff	?___awmod+1,___wmul@multiplier+1
 18036  001DD2  ECFF  F026         	call	___wmul	;wreg free
 18037  001DD6  0E0E               	movlw	low __npowers_
 18038  001DD8  2411               	addwf	?___wmul,w,c
 18039  001DDA  6EF6               	movwf	tblptrl,c
 18040  001DDC  0EFE               	movlw	high __npowers_
 18041  001DDE  2012               	addwfc	?___wmul+1,w,c
 18042  001DE0  6EF7               	movwf	tblptrh,c
 18043  001DE2                     	if	0	;There are less than 3 active tblptr bytes
 18044  001DE2                     	endif
 18045  001DE2  0009               	tblrd		*+
 18046  001DE4  CFF5 F022          	movff	tablat,___ftmul@f2
 18047  001DE8  0009               	tblrd		*+
 18048  001DEA  CFF5 F023          	movff	tablat,___ftmul@f2+1
 18049  001DEE  000A               	tblrd		*-
 18050  001DF0  CFF5 F024          	movff	tablat,___ftmul@f2+2
 18051  001DF4  0E00               	movlw	0
 18052  001DF6  6E1A               	movwf	___awdiv@divisor+1,c
 18053  001DF8  0E0A               	movlw	10
 18054  001DFA  6E19               	movwf	___awdiv@divisor,c
 18055  001DFC  C04C  F017         	movff	fround@prec,___awdiv@dividend
 18056  001E00  6A18               	clrf	___awdiv@dividend+1,c
 18057  001E02  ECE4  F01F         	call	___awdiv	;wreg free
 18058  001E06  0E09               	movlw	9
 18059  001E08  2417               	addwf	?___awdiv,w,c
 18060  001E0A  6E11               	movwf	___wmul@multiplier,c
 18061  001E0C  0E00               	movlw	0
 18062  001E0E  2018               	addwfc	?___awdiv+1,w,c
 18063  001E10  6E12               	movwf	___wmul@multiplier+1,c
 18064  001E12  0E00               	movlw	0
 18065  001E14  6E14               	movwf	___wmul@multiplicand+1,c
 18066  001E16  0E03               	movlw	3
 18067  001E18  6E13               	movwf	___wmul@multiplicand,c
 18068  001E1A  ECFF  F026         	call	___wmul	;wreg free
 18069  001E1E  0E0E               	movlw	low __npowers_
 18070  001E20  2411               	addwf	?___wmul,w,c
 18071  001E22  6EF6               	movwf	tblptrl,c
 18072  001E24  0EFE               	movlw	high __npowers_
 18073  001E26  2012               	addwfc	?___wmul+1,w,c
 18074  001E28  6EF7               	movwf	tblptrh,c
 18075  001E2A                     	if	0	;There are less than 3 active tblptr bytes
 18076  001E2A                     	endif
 18077  001E2A  0009               	tblrd		*+
 18078  001E2C  CFF5 F01F          	movff	tablat,___ftmul@f1
 18079  001E30  0009               	tblrd		*+
 18080  001E32  CFF5 F020          	movff	tablat,___ftmul@f1+1
 18081  001E36  000A               	tblrd		*-
 18082  001E38  CFF5 F021          	movff	tablat,___ftmul@f1+2
 18083  001E3C  ECB5  F018         	call	___ftmul	;wreg free
 18084  001E40  C01F  F049         	movff	?___ftmul,_fround$3270
 18085  001E44  C020  F04A         	movff	?___ftmul+1,_fround$3270+1
 18086  001E48  C021  F04B         	movff	?___ftmul+2,_fround$3270+2
 18087                           
 18088                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 18089  001E4C  C049  F01F         	movff	_fround$3270,___ftmul@f1
 18090  001E50  C04A  F020         	movff	_fround$3270+1,___ftmul@f1+1
 18091  001E54  C04B  F021         	movff	_fround$3270+2,___ftmul@f1+2
 18092  001E58  0E00               	movlw	0
 18093  001E5A  6E22               	movwf	___ftmul@f2,c
 18094  001E5C  0E00               	movlw	0
 18095  001E5E  6E23               	movwf	___ftmul@f2+1,c
 18096  001E60  0E3F               	movlw	63
 18097  001E62  6E24               	movwf	___ftmul@f2+2,c
 18098  001E64  ECB5  F018         	call	___ftmul	;wreg free
 18099  001E68  D01B               	goto	L14
 18100  001E6A  D021               	goto	l1388
 18101  001E6C  D000               	goto	l9156
 18102  001E6E                     l9156:
 18103                           
 18104                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 18105  001E6E  504C               	movf	fround@prec,w,c
 18106  001E70  0D03               	mullw	3
 18107  001E72  0E0E               	movlw	low __npowers_
 18108  001E74  24F3               	addwf	prodl,w,c
 18109  001E76  6EF6               	movwf	tblptrl,c
 18110  001E78  0EFE               	movlw	high __npowers_
 18111  001E7A  20F4               	addwfc	prodh,w,c
 18112  001E7C  6EF7               	movwf	tblptrh,c
 18113  001E7E                     	if	0	;There are less than 3 active tblptr bytes
 18114  001E7E                     	endif
 18115  001E7E  0009               	tblrd		*+
 18116  001E80  CFF5 F01F          	movff	tablat,___ftmul@f1
 18117  001E84  0009               	tblrd		*+
 18118  001E86  CFF5 F020          	movff	tablat,___ftmul@f1+1
 18119  001E8A  000A               	tblrd		*-
 18120  001E8C  CFF5 F021          	movff	tablat,___ftmul@f1+2
 18121  001E90  0E00               	movlw	0
 18122  001E92  6E22               	movwf	___ftmul@f2,c
 18123  001E94  0E00               	movlw	0
 18124  001E96  6E23               	movwf	___ftmul@f2+1,c
 18125  001E98  0E3F               	movlw	63
 18126  001E9A  6E24               	movwf	___ftmul@f2+2,c
 18127  001E9C  ECB5  F018         	call	___ftmul	;wreg free
 18128  001EA0                     L14:
 18129  001EA0  C01F  F043         	movff	?___ftmul,?_fround
 18130  001EA4  C020  F044         	movff	?___ftmul+1,?_fround+1
 18131  001EA8  C021  F045         	movff	?___ftmul+2,?_fround+2
 18132  001EAC  D000               	goto	l1388
 18133  001EAE                     l1388:
 18134  001EAE  0012               	return		;funcret
 18135  001EB0                     __end_of_fround:
 18136                           	opt stack 0
 18137                           tblptru	equ	0xFF8
 18138                           tblptrh	equ	0xFF7
 18139                           tblptrl	equ	0xFF6
 18140                           tablat	equ	0xFF5
 18141                           prodh	equ	0xFF4
 18142                           prodl	equ	0xFF3
 18143                           intcon	equ	0xFF2
 18144                           intcon2	equ	0xFF1
 18145                           postinc0	equ	0xFEE
 18146                           wreg	equ	0xFE8
 18147                           postdec1	equ	0xFE5
 18148                           fsr1l	equ	0xFE1
 18149                           indf2	equ	0xFDF
 18150                           postinc2	equ	0xFDE
 18151                           postdec2	equ	0xFDD
 18152                           fsr2h	equ	0xFDA
 18153                           fsr2l	equ	0xFD9
 18154                           status	equ	0xFD8
 18155                           
 18156 ;; *************** function ___wmul *****************
 18157 ;; Defined at:
 18158 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 18159 ;; Parameters:    Size  Location     Type
 18160 ;;  multiplier      2   16[COMRAM] unsigned int 
 18161 ;;  multiplicand    2   18[COMRAM] unsigned int 
 18162 ;; Auto vars:     Size  Location     Type
 18163 ;;  product         2   20[COMRAM] unsigned int 
 18164 ;; Return value:  Size  Location     Type
 18165 ;;                  2   16[COMRAM] unsigned int 
 18166 ;; Registers used:
 18167 ;;		wreg, status,2, status,0, prodl, prodh
 18168 ;; Tracked objects:
 18169 ;;		On entry : 0/0
 18170 ;;		On exit  : 0/0
 18171 ;;		Unchanged: 0/0
 18172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18173 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18174 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18176 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18177 ;;Total ram usage:        6 bytes
 18178 ;; Hardware stack levels used:    1
 18179 ;; Hardware stack levels required when called:    3
 18180 ;; This function calls:
 18181 ;;		Nothing
 18182 ;; This function is called by:
 18183 ;;		_get_duty_cycle
 18184 ;;		_get_RPM
 18185 ;;		_main
 18186 ;;		_delay_ms
 18187 ;;		_drawChar
 18188 ;;		_read_volt
 18189 ;;		_fround
 18190 ;;		_scale
 18191 ;;		_printf
 18192 ;; This function uses a non-reentrant model
 18193 ;;
 18194                           
 18195                           	psect	text88
 18196  004DFE                     __ptext88:
 18197                           	opt stack 0
 18198  004DFE                     ___wmul:
 18199                           	opt stack 26
 18200                           
 18201                           ;incstack = 0
 18202  004DFE  5011               	movf	___wmul@multiplier,w,c
 18203  004E00  0213               	mulwf	___wmul@multiplicand,c
 18204  004E02  CFF3 F015          	movff	prodl,___wmul@product
 18205  004E06  CFF4 F016          	movff	prodh,___wmul@product+1
 18206  004E0A  5011               	movf	___wmul@multiplier,w,c
 18207  004E0C  0214               	mulwf	___wmul@multiplicand+1,c
 18208  004E0E  50F3               	movf	prodl,w,c
 18209  004E10  2616               	addwf	___wmul@product+1,f,c
 18210  004E12  5012               	movf	___wmul@multiplier+1,w,c
 18211  004E14  0213               	mulwf	___wmul@multiplicand,c
 18212  004E16  50F3               	movf	prodl,w,c
 18213  004E18  2616               	addwf	___wmul@product+1,f,c
 18214  004E1A  C015  F011         	movff	___wmul@product,?___wmul
 18215  004E1E  C016  F012         	movff	___wmul@product+1,?___wmul+1
 18216  004E22  D000               	goto	l1542
 18217  004E24                     l1542:
 18218  004E24  0012               	return		;funcret
 18219  004E26                     __end_of___wmul:
 18220                           	opt stack 0
 18221                           tblptru	equ	0xFF8
 18222                           tblptrh	equ	0xFF7
 18223                           tblptrl	equ	0xFF6
 18224                           tablat	equ	0xFF5
 18225                           prodh	equ	0xFF4
 18226                           prodl	equ	0xFF3
 18227                           intcon	equ	0xFF2
 18228                           intcon2	equ	0xFF1
 18229                           postinc0	equ	0xFEE
 18230                           wreg	equ	0xFE8
 18231                           postdec1	equ	0xFE5
 18232                           fsr1l	equ	0xFE1
 18233                           indf2	equ	0xFDF
 18234                           postinc2	equ	0xFDE
 18235                           postdec2	equ	0xFDD
 18236                           fsr2h	equ	0xFDA
 18237                           fsr2l	equ	0xFD9
 18238                           status	equ	0xFD8
 18239                           
 18240 ;; *************** function ___awmod *****************
 18241 ;; Defined at:
 18242 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 18243 ;; Parameters:    Size  Location     Type
 18244 ;;  dividend        2   60[COMRAM] int 
 18245 ;;  divisor         2   62[COMRAM] int 
 18246 ;; Auto vars:     Size  Location     Type
 18247 ;;  sign            1   65[COMRAM] unsigned char 
 18248 ;;  counter         1   64[COMRAM] unsigned char 
 18249 ;; Return value:  Size  Location     Type
 18250 ;;                  2   60[COMRAM] int 
 18251 ;; Registers used:
 18252 ;;		wreg, status,2, status,0
 18253 ;; Tracked objects:
 18254 ;;		On entry : 0/0
 18255 ;;		On exit  : 0/0
 18256 ;;		Unchanged: 0/0
 18257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18261 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18262 ;;Total ram usage:        6 bytes
 18263 ;; Hardware stack levels used:    1
 18264 ;; Hardware stack levels required when called:    3
 18265 ;; This function calls:
 18266 ;;		Nothing
 18267 ;; This function is called by:
 18268 ;;		_Update_Screen
 18269 ;;		_Update_Setup_Alarm_Time_Screen
 18270 ;;		_Update_Setup_Heater_Screen
 18271 ;;		_Update_Setup_Time_Screen
 18272 ;;		_dec_2_bcd
 18273 ;;		_fround
 18274 ;;		_scale
 18275 ;; This function uses a non-reentrant model
 18276 ;;
 18277                           
 18278                           	psect	text89
 18279  0043B6                     __ptext89:
 18280                           	opt stack 0
 18281  0043B6                     ___awmod:
 18282                           	opt stack 25
 18283                           
 18284                           ;incstack = 0
 18285  0043B6  0E00               	movlw	0
 18286  0043B8  6E42               	movwf	___awmod@sign,c
 18287  0043BA  AE3E               	btfss	___awmod@dividend+1,7,c
 18288  0043BC  D007               	goto	l8962
 18289  0043BE  6C3D               	negf	___awmod@dividend,c
 18290  0043C0  1E3E               	comf	___awmod@dividend+1,f,c
 18291  0043C2  B0D8               	btfsc	status,0,c
 18292  0043C4  2A3E               	incf	___awmod@dividend+1,f,c
 18293  0043C6  0E01               	movlw	1
 18294  0043C8  6E42               	movwf	___awmod@sign,c
 18295  0043CA  D000               	goto	l8962
 18296  0043CC                     l8962:
 18297  0043CC  AE40               	btfss	___awmod@divisor+1,7,c
 18298  0043CE  D005               	goto	l8966
 18299  0043D0  6C3F               	negf	___awmod@divisor,c
 18300  0043D2  1E40               	comf	___awmod@divisor+1,f,c
 18301  0043D4  B0D8               	btfsc	status,0,c
 18302  0043D6  2A40               	incf	___awmod@divisor+1,f,c
 18303  0043D8  D000               	goto	l8966
 18304  0043DA                     l8966:
 18305  0043DA  503F               	movf	___awmod@divisor,w,c
 18306  0043DC  1040               	iorwf	___awmod@divisor+1,w,c
 18307  0043DE  B4D8               	btfsc	status,2,c
 18308  0043E0  D01D               	goto	l8982
 18309  0043E2  0E01               	movlw	1
 18310  0043E4  6E41               	movwf	___awmod@counter,c
 18311  0043E6  D005               	goto	l8972
 18312  0043E8                     l8970:
 18313  0043E8  90D8               	bcf	status,0,c
 18314  0043EA  363F               	rlcf	___awmod@divisor,f,c
 18315  0043EC  3640               	rlcf	___awmod@divisor+1,f,c
 18316  0043EE  2A41               	incf	___awmod@counter,f,c
 18317  0043F0  D000               	goto	l8972
 18318  0043F2                     l8972:
 18319  0043F2  BE40               	btfsc	___awmod@divisor+1,7,c
 18320  0043F4  D002               	goto	l8974
 18321  0043F6  D7F8               	goto	l8970
 18322  0043F8  D000               	goto	l8974
 18323  0043FA                     l8974:
 18324  0043FA  503F               	movf	___awmod@divisor,w,c
 18325  0043FC  5C3D               	subwf	___awmod@dividend,w,c
 18326  0043FE  5040               	movf	___awmod@divisor+1,w,c
 18327  004400  583E               	subwfb	___awmod@dividend+1,w,c
 18328  004402  A0D8               	btfss	status,0,c
 18329  004404  D005               	goto	l8978
 18330  004406  503F               	movf	___awmod@divisor,w,c
 18331  004408  5E3D               	subwf	___awmod@dividend,f,c
 18332  00440A  5040               	movf	___awmod@divisor+1,w,c
 18333  00440C  5A3E               	subwfb	___awmod@dividend+1,f,c
 18334  00440E  D000               	goto	l8978
 18335  004410                     l8978:
 18336  004410  90D8               	bcf	status,0,c
 18337  004412  3240               	rrcf	___awmod@divisor+1,f,c
 18338  004414  323F               	rrcf	___awmod@divisor,f,c
 18339  004416  2E41               	decfsz	___awmod@counter,f,c
 18340  004418  D7F0               	goto	l8974
 18341  00441A  D000               	goto	l8982
 18342  00441C                     l8982:
 18343  00441C  5042               	movf	___awmod@sign,w,c
 18344  00441E  B4D8               	btfsc	status,2,c
 18345  004420  D005               	goto	l8986
 18346  004422  6C3D               	negf	___awmod@dividend,c
 18347  004424  1E3E               	comf	___awmod@dividend+1,f,c
 18348  004426  B0D8               	btfsc	status,0,c
 18349  004428  2A3E               	incf	___awmod@dividend+1,f,c
 18350  00442A  D000               	goto	l8986
 18351  00442C                     l8986:
 18352  00442C  C03D  F03D         	movff	___awmod@dividend,?___awmod
 18353  004430  C03E  F03E         	movff	___awmod@dividend+1,?___awmod+1
 18354  004434  D000               	goto	l1748
 18355  004436                     l1748:
 18356  004436  0012               	return		;funcret
 18357  004438                     __end_of___awmod:
 18358                           	opt stack 0
 18359                           tblptru	equ	0xFF8
 18360                           tblptrh	equ	0xFF7
 18361                           tblptrl	equ	0xFF6
 18362                           tablat	equ	0xFF5
 18363                           prodh	equ	0xFF4
 18364                           prodl	equ	0xFF3
 18365                           intcon	equ	0xFF2
 18366                           intcon2	equ	0xFF1
 18367                           postinc0	equ	0xFEE
 18368                           wreg	equ	0xFE8
 18369                           postdec1	equ	0xFE5
 18370                           fsr1l	equ	0xFE1
 18371                           indf2	equ	0xFDF
 18372                           postinc2	equ	0xFDE
 18373                           postdec2	equ	0xFDD
 18374                           fsr2h	equ	0xFDA
 18375                           fsr2l	equ	0xFD9
 18376                           status	equ	0xFD8
 18377                           
 18378 ;; *************** function ___awdiv *****************
 18379 ;; Defined at:
 18380 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 18381 ;; Parameters:    Size  Location     Type
 18382 ;;  dividend        2   22[COMRAM] int 
 18383 ;;  divisor         2   24[COMRAM] int 
 18384 ;; Auto vars:     Size  Location     Type
 18385 ;;  quotient        2   28[COMRAM] int 
 18386 ;;  sign            1   27[COMRAM] unsigned char 
 18387 ;;  counter         1   26[COMRAM] unsigned char 
 18388 ;; Return value:  Size  Location     Type
 18389 ;;                  2   22[COMRAM] int 
 18390 ;; Registers used:
 18391 ;;		wreg, status,2, status,0
 18392 ;; Tracked objects:
 18393 ;;		On entry : 0/0
 18394 ;;		On exit  : 0/0
 18395 ;;		Unchanged: 0/0
 18396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18398 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18400 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18401 ;;Total ram usage:        8 bytes
 18402 ;; Hardware stack levels used:    1
 18403 ;; Hardware stack levels required when called:    3
 18404 ;; This function calls:
 18405 ;;		Nothing
 18406 ;; This function is called by:
 18407 ;;		_get_duty_cycle
 18408 ;;		_Monitor_Heater
 18409 ;;		_get_RPM
 18410 ;;		_main
 18411 ;;		_Update_Screen
 18412 ;;		_Update_Setup_Alarm_Time_Screen
 18413 ;;		_Update_Setup_Heater_Screen
 18414 ;;		_Update_Setup_Time_Screen
 18415 ;;		_dec_2_bcd
 18416 ;;		_fround
 18417 ;;		_scale
 18418 ;;		_printf
 18419 ;; This function uses a non-reentrant model
 18420 ;;
 18421                           
 18422                           	psect	text90
 18423  003FC8                     __ptext90:
 18424                           	opt stack 0
 18425  003FC8                     ___awdiv:
 18426                           	opt stack 25
 18427                           
 18428                           ;incstack = 0
 18429  003FC8  0E00               	movlw	0
 18430  003FCA  6E1C               	movwf	___awdiv@sign,c
 18431  003FCC  AE1A               	btfss	___awdiv@divisor+1,7,c
 18432  003FCE  D007               	goto	l8918
 18433  003FD0  6C19               	negf	___awdiv@divisor,c
 18434  003FD2  1E1A               	comf	___awdiv@divisor+1,f,c
 18435  003FD4  B0D8               	btfsc	status,0,c
 18436  003FD6  2A1A               	incf	___awdiv@divisor+1,f,c
 18437  003FD8  0E01               	movlw	1
 18438  003FDA  6E1C               	movwf	___awdiv@sign,c
 18439  003FDC  D000               	goto	l8918
 18440  003FDE                     l8918:
 18441  003FDE  AE18               	btfss	___awdiv@dividend+1,7,c
 18442  003FE0  D007               	goto	l8924
 18443  003FE2  6C17               	negf	___awdiv@dividend,c
 18444  003FE4  1E18               	comf	___awdiv@dividend+1,f,c
 18445  003FE6  B0D8               	btfsc	status,0,c
 18446  003FE8  2A18               	incf	___awdiv@dividend+1,f,c
 18447  003FEA  0E01               	movlw	1
 18448  003FEC  1A1C               	xorwf	___awdiv@sign,f,c
 18449  003FEE  D000               	goto	l8924
 18450  003FF0                     l8924:
 18451  003FF0  0E00               	movlw	0
 18452  003FF2  6E1E               	movwf	___awdiv@quotient+1,c
 18453  003FF4  0E00               	movlw	0
 18454  003FF6  6E1D               	movwf	___awdiv@quotient,c
 18455  003FF8  5019               	movf	___awdiv@divisor,w,c
 18456  003FFA  101A               	iorwf	___awdiv@divisor+1,w,c
 18457  003FFC  B4D8               	btfsc	status,2,c
 18458  003FFE  D021               	goto	l8946
 18459  004000  0E01               	movlw	1
 18460  004002  6E1B               	movwf	___awdiv@counter,c
 18461  004004  D005               	goto	l8932
 18462  004006                     l8930:
 18463  004006  90D8               	bcf	status,0,c
 18464  004008  3619               	rlcf	___awdiv@divisor,f,c
 18465  00400A  361A               	rlcf	___awdiv@divisor+1,f,c
 18466  00400C  2A1B               	incf	___awdiv@counter,f,c
 18467  00400E  D000               	goto	l8932
 18468  004010                     l8932:
 18469  004010  BE1A               	btfsc	___awdiv@divisor+1,7,c
 18470  004012  D002               	goto	l8934
 18471  004014  D7F8               	goto	l8930
 18472  004016  D000               	goto	l8934
 18473  004018                     l8934:
 18474  004018  90D8               	bcf	status,0,c
 18475  00401A  361D               	rlcf	___awdiv@quotient,f,c
 18476  00401C  361E               	rlcf	___awdiv@quotient+1,f,c
 18477  00401E  5019               	movf	___awdiv@divisor,w,c
 18478  004020  5C17               	subwf	___awdiv@dividend,w,c
 18479  004022  501A               	movf	___awdiv@divisor+1,w,c
 18480  004024  5818               	subwfb	___awdiv@dividend+1,w,c
 18481  004026  A0D8               	btfss	status,0,c
 18482  004028  D006               	goto	l8942
 18483  00402A  5019               	movf	___awdiv@divisor,w,c
 18484  00402C  5E17               	subwf	___awdiv@dividend,f,c
 18485  00402E  501A               	movf	___awdiv@divisor+1,w,c
 18486  004030  5A18               	subwfb	___awdiv@dividend+1,f,c
 18487  004032  801D               	bsf	___awdiv@quotient,0,c
 18488  004034  D000               	goto	l8942
 18489  004036                     l8942:
 18490  004036  90D8               	bcf	status,0,c
 18491  004038  321A               	rrcf	___awdiv@divisor+1,f,c
 18492  00403A  3219               	rrcf	___awdiv@divisor,f,c
 18493  00403C  2E1B               	decfsz	___awdiv@counter,f,c
 18494  00403E  D7EC               	goto	l8934
 18495  004040  D000               	goto	l8946
 18496  004042                     l8946:
 18497  004042  501C               	movf	___awdiv@sign,w,c
 18498  004044  B4D8               	btfsc	status,2,c
 18499  004046  D005               	goto	l8950
 18500  004048  6C1D               	negf	___awdiv@quotient,c
 18501  00404A  1E1E               	comf	___awdiv@quotient+1,f,c
 18502  00404C  B0D8               	btfsc	status,0,c
 18503  00404E  2A1E               	incf	___awdiv@quotient+1,f,c
 18504  004050  D000               	goto	l8950
 18505  004052                     l8950:
 18506  004052  C01D  F017         	movff	___awdiv@quotient,?___awdiv
 18507  004056  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
 18508  00405A  D000               	goto	l1735
 18509  00405C                     l1735:
 18510  00405C  0012               	return		;funcret
 18511  00405E                     __end_of___awdiv:
 18512                           	opt stack 0
 18513                           tblptru	equ	0xFF8
 18514                           tblptrh	equ	0xFF7
 18515                           tblptrl	equ	0xFF6
 18516                           tablat	equ	0xFF5
 18517                           prodh	equ	0xFF4
 18518                           prodl	equ	0xFF3
 18519                           intcon	equ	0xFF2
 18520                           intcon2	equ	0xFF1
 18521                           postinc0	equ	0xFEE
 18522                           wreg	equ	0xFE8
 18523                           postdec1	equ	0xFE5
 18524                           fsr1l	equ	0xFE1
 18525                           indf2	equ	0xFDF
 18526                           postinc2	equ	0xFDE
 18527                           postdec2	equ	0xFDD
 18528                           fsr2h	equ	0xFDA
 18529                           fsr2l	equ	0xFD9
 18530                           status	equ	0xFD8
 18531                           
 18532 ;; *************** function __tdiv_to_l_ *****************
 18533 ;; Defined at:
 18534 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 18535 ;; Parameters:    Size  Location     Type
 18536 ;;  f1              3   16[COMRAM] float 
 18537 ;;  f2              3   19[COMRAM] float 
 18538 ;; Auto vars:     Size  Location     Type
 18539 ;;  quot            4   25[COMRAM] unsigned long 
 18540 ;;  exp1            1   30[COMRAM] unsigned char 
 18541 ;;  cntr            1   29[COMRAM] unsigned char 
 18542 ;; Return value:  Size  Location     Type
 18543 ;;                  4   16[COMRAM] unsigned long 
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18551 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18555 ;;Total ram usage:       15 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    3
 18558 ;; This function calls:
 18559 ;;		Nothing
 18560 ;; This function is called by:
 18561 ;;		_printf
 18562 ;; This function uses a non-reentrant model
 18563 ;;
 18564                           
 18565                           	psect	text91
 18566  002D38                     __ptext91:
 18567                           	opt stack 0
 18568  002D38                     __tdiv_to_l_:
 18569                           	opt stack 26
 18570                           
 18571                           ;incstack = 0
 18572  002D38  C013  F017         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 18573  002D3C  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 18574  002D3E  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 18575  002D40  3412               	rlcf	__tdiv_to_l_@f1+1,w,c
 18576  002D42  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 18577  002D44  E301               	bnc	u7511
 18578  002D46  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 18579  002D48                     u7511:
 18580  002D48  5017               	movf	??__tdiv_to_l_,w,c
 18581  002D4A  6E1F               	movwf	__tdiv_to_l_@exp1,c
 18582  002D4C  501F               	movf	__tdiv_to_l_@exp1,w,c
 18583  002D4E  A4D8               	btfss	status,2,c
 18584  002D50  D002               	goto	l9216
 18585  002D52  D05D               	goto	l9258
 18586  002D54  D078               	goto	l1947
 18587  002D56                     l9216:
 18588  002D56  C016  F017         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 18589  002D5A  6A18               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 18590  002D5C  6A19               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 18591  002D5E  3415               	rlcf	__tdiv_to_l_@f2+1,w,c
 18592  002D60  3617               	rlcf	??__tdiv_to_l_& (0+255),f,c
 18593  002D62  E301               	bnc	u7531
 18594  002D64  8018               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 18595  002D66                     u7531:
 18596  002D66  5017               	movf	??__tdiv_to_l_,w,c
 18597  002D68  6E1E               	movwf	__tdiv_to_l_@cntr,c
 18598  002D6A  501E               	movf	__tdiv_to_l_@cntr,w,c
 18599  002D6C  A4D8               	btfss	status,2,c
 18600  002D6E  D002               	goto	l9222
 18601  002D70  D04E               	goto	l9258
 18602  002D72  D069               	goto	l1947
 18603  002D74                     l9222:
 18604  002D74  8E12               	bsf	__tdiv_to_l_@f1+1,7,c
 18605  002D76  0EFF               	movlw	255
 18606  002D78  1611               	andwf	__tdiv_to_l_@f1,f,c
 18607  002D7A  0EFF               	movlw	255
 18608  002D7C  1612               	andwf	__tdiv_to_l_@f1+1,f,c
 18609  002D7E  0E00               	movlw	0
 18610  002D80  1613               	andwf	__tdiv_to_l_@f1+2,f,c
 18611  002D82  8E15               	bsf	__tdiv_to_l_@f2+1,7,c
 18612  002D84  0EFF               	movlw	255
 18613  002D86  1614               	andwf	__tdiv_to_l_@f2,f,c
 18614  002D88  0EFF               	movlw	255
 18615  002D8A  1615               	andwf	__tdiv_to_l_@f2+1,f,c
 18616  002D8C  0E00               	movlw	0
 18617  002D8E  1616               	andwf	__tdiv_to_l_@f2+2,f,c
 18618  002D90  0E00               	movlw	0
 18619  002D92  6E1A               	movwf	__tdiv_to_l_@quot,c
 18620  002D94  0E00               	movlw	0
 18621  002D96  6E1B               	movwf	__tdiv_to_l_@quot+1,c
 18622  002D98  0E00               	movlw	0
 18623  002D9A  6E1C               	movwf	__tdiv_to_l_@quot+2,c
 18624  002D9C  0E00               	movlw	0
 18625  002D9E  6E1D               	movwf	__tdiv_to_l_@quot+3,c
 18626  002DA0  0E7F               	movlw	127
 18627  002DA2  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 18628  002DA4  501E               	movf	__tdiv_to_l_@cntr,w,c
 18629  002DA6  0F98               	addlw	152
 18630  002DA8  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
 18631  002DAA  0E18               	movlw	24
 18632  002DAC  6E1E               	movwf	__tdiv_to_l_@cntr,c
 18633  002DAE                     l1949:
 18634  002DAE  90D8               	bcf	status,0,c
 18635  002DB0  361A               	rlcf	__tdiv_to_l_@quot,f,c
 18636  002DB2  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 18637  002DB4  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 18638  002DB6  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 18639  002DB8  5014               	movf	__tdiv_to_l_@f2,w,c
 18640  002DBA  5C11               	subwf	__tdiv_to_l_@f1,w,c
 18641  002DBC  5015               	movf	__tdiv_to_l_@f2+1,w,c
 18642  002DBE  5812               	subwfb	__tdiv_to_l_@f1+1,w,c
 18643  002DC0  5016               	movf	__tdiv_to_l_@f2+2,w,c
 18644  002DC2  5813               	subwfb	__tdiv_to_l_@f1+2,w,c
 18645  002DC4  A0D8               	btfss	status,0,c
 18646  002DC6  D007               	goto	l1950
 18647  002DC8  5014               	movf	__tdiv_to_l_@f2,w,c
 18648  002DCA  5E11               	subwf	__tdiv_to_l_@f1,f,c
 18649  002DCC  5015               	movf	__tdiv_to_l_@f2+1,w,c
 18650  002DCE  5A12               	subwfb	__tdiv_to_l_@f1+1,f,c
 18651  002DD0  5016               	movf	__tdiv_to_l_@f2+2,w,c
 18652  002DD2  5A13               	subwfb	__tdiv_to_l_@f1+2,f,c
 18653  002DD4  801A               	bsf	__tdiv_to_l_@quot,0,c
 18654  002DD6                     l1950:
 18655  002DD6  90D8               	bcf	status,0,c
 18656  002DD8  3611               	rlcf	__tdiv_to_l_@f1,f,c
 18657  002DDA  3612               	rlcf	__tdiv_to_l_@f1+1,f,c
 18658  002DDC  3613               	rlcf	__tdiv_to_l_@f1+2,f,c
 18659  002DDE  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
 18660  002DE0  D7E6               	goto	l1949
 18661  002DE2  D000               	goto	l9244
 18662  002DE4                     l9244:
 18663  002DE4  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
 18664  002DE6  D010               	goto	l9256
 18665  002DE8  501F               	movf	__tdiv_to_l_@exp1,w,c
 18666  002DEA  0A80               	xorlw	128
 18667  002DEC  0F97               	addlw	151
 18668  002DEE  B0D8               	btfsc	status,0,c
 18669  002DF0  D003               	goto	l9252
 18670  002DF2  D00D               	goto	l9258
 18671  002DF4  D028               	goto	l1947
 18672  002DF6  D000               	goto	l9252
 18673  002DF8                     l9252:
 18674  002DF8  90D8               	bcf	status,0,c
 18675  002DFA  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
 18676  002DFC  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
 18677  002DFE  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
 18678  002E00  321A               	rrcf	__tdiv_to_l_@quot,f,c
 18679  002E02  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
 18680  002E04  D7F9               	goto	l9252
 18681  002E06  D017               	goto	l1956
 18682  002E08                     l9256:
 18683  002E08  0E17               	movlw	23
 18684  002E0A  641F               	cpfsgt	__tdiv_to_l_@exp1,c
 18685  002E0C  D011               	goto	l9264
 18686  002E0E                     l9258:
 18687  002E0E  0E00               	movlw	0
 18688  002E10  6E11               	movwf	?__tdiv_to_l_,c
 18689  002E12  0E00               	movlw	0
 18690  002E14  6E12               	movwf	?__tdiv_to_l_+1,c
 18691  002E16  0E00               	movlw	0
 18692  002E18  6E13               	movwf	?__tdiv_to_l_+2,c
 18693  002E1A  0E00               	movlw	0
 18694  002E1C  6E14               	movwf	?__tdiv_to_l_+3,c
 18695  002E1E  D013               	goto	l1947
 18696  002E20  D007               	goto	l9264
 18697  002E22                     l9262:
 18698  002E22  90D8               	bcf	status,0,c
 18699  002E24  361A               	rlcf	__tdiv_to_l_@quot,f,c
 18700  002E26  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
 18701  002E28  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
 18702  002E2A  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
 18703  002E2C  061F               	decf	__tdiv_to_l_@exp1,f,c
 18704  002E2E  D000               	goto	l9264
 18705  002E30                     l9264:
 18706  002E30  501F               	movf	__tdiv_to_l_@exp1,w,c
 18707  002E32  A4D8               	btfss	status,2,c
 18708  002E34  D7F6               	goto	l9262
 18709  002E36                     l1956:
 18710  002E36  C01A  F011         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 18711  002E3A  C01B  F012         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 18712  002E3E  C01C  F013         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 18713  002E42  C01D  F014         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 18714  002E46                     l1947:
 18715  002E46  0012               	return		;funcret
 18716  002E48                     __end_of__tdiv_to_l_:
 18717                           	opt stack 0
 18718                           tblptru	equ	0xFF8
 18719                           tblptrh	equ	0xFF7
 18720                           tblptrl	equ	0xFF6
 18721                           tablat	equ	0xFF5
 18722                           prodh	equ	0xFF4
 18723                           prodl	equ	0xFF3
 18724                           intcon	equ	0xFF2
 18725                           intcon2	equ	0xFF1
 18726                           postinc0	equ	0xFEE
 18727                           wreg	equ	0xFE8
 18728                           postdec1	equ	0xFE5
 18729                           fsr1l	equ	0xFE1
 18730                           indf2	equ	0xFDF
 18731                           postinc2	equ	0xFDE
 18732                           postdec2	equ	0xFDD
 18733                           fsr2h	equ	0xFDA
 18734                           fsr2l	equ	0xFD9
 18735                           status	equ	0xFD8
 18736                           
 18737 ;; *************** function __div_to_l_ *****************
 18738 ;; Defined at:
 18739 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 18740 ;; Parameters:    Size  Location     Type
 18741 ;;  f1              3   16[COMRAM] unsigned long 
 18742 ;;  f2              3   19[COMRAM] unsigned long 
 18743 ;; Auto vars:     Size  Location     Type
 18744 ;;  quot            4   22[COMRAM] unsigned long 
 18745 ;;  exp1            1   27[COMRAM] unsigned char 
 18746 ;;  cntr            1   26[COMRAM] unsigned char 
 18747 ;; Return value:  Size  Location     Type
 18748 ;;                  4   16[COMRAM] unsigned long 
 18749 ;; Registers used:
 18750 ;;		wreg, status,2, status,0
 18751 ;; Tracked objects:
 18752 ;;		On entry : 0/0
 18753 ;;		On exit  : 0/0
 18754 ;;		Unchanged: 0/0
 18755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18756 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18757 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18759 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18760 ;;Total ram usage:       12 bytes
 18761 ;; Hardware stack levels used:    1
 18762 ;; Hardware stack levels required when called:    3
 18763 ;; This function calls:
 18764 ;;		Nothing
 18765 ;; This function is called by:
 18766 ;;		_printf
 18767 ;; This function uses a non-reentrant model
 18768 ;;
 18769                           
 18770                           	psect	text92
 18771  003060                     __ptext92:
 18772                           	opt stack 0
 18773  003060                     __div_to_l_:
 18774                           	opt stack 26
 18775                           
 18776                           ;incstack = 0
 18777  003060  3413               	rlcf	__div_to_l_@f1+2,w,c
 18778  003062  3414               	rlcf	__div_to_l_@f1+3,w,c
 18779  003064  6E1C               	movwf	__div_to_l_@exp1,c
 18780  003066  501C               	movf	__div_to_l_@exp1,w,c
 18781  003068  A4D8               	btfss	status,2,c
 18782  00306A  D002               	goto	l9272
 18783  00306C  D061               	goto	l9318
 18784  00306E  D07C               	goto	l1826
 18785  003070                     l9272:
 18786  003070  3416               	rlcf	__div_to_l_@f2+2,w,c
 18787  003072  3417               	rlcf	__div_to_l_@f2+3,w,c
 18788  003074  6E1B               	movwf	__div_to_l_@cntr,c
 18789  003076  501B               	movf	__div_to_l_@cntr,w,c
 18790  003078  A4D8               	btfss	status,2,c
 18791  00307A  D002               	goto	l9278
 18792  00307C  D059               	goto	l9318
 18793  00307E  D074               	goto	l1826
 18794  003080                     l9278:
 18795  003080  8E13               	bsf	__div_to_l_@f1+2,7,c
 18796  003082  0EFF               	movlw	255
 18797  003084  1611               	andwf	__div_to_l_@f1,f,c
 18798  003086  0EFF               	movlw	255
 18799  003088  1612               	andwf	__div_to_l_@f1+1,f,c
 18800  00308A  0EFF               	movlw	255
 18801  00308C  1613               	andwf	__div_to_l_@f1+2,f,c
 18802  00308E  0E00               	movlw	0
 18803  003090  1614               	andwf	__div_to_l_@f1+3,f,c
 18804  003092  8E16               	bsf	__div_to_l_@f2+2,7,c
 18805  003094  0EFF               	movlw	255
 18806  003096  1614               	andwf	__div_to_l_@f2,f,c
 18807  003098  0EFF               	movlw	255
 18808  00309A  1615               	andwf	__div_to_l_@f2+1,f,c
 18809  00309C  0EFF               	movlw	255
 18810  00309E  1616               	andwf	__div_to_l_@f2+2,f,c
 18811  0030A0  0E00               	movlw	0
 18812  0030A2  1617               	andwf	__div_to_l_@f2+3,f,c
 18813  0030A4  0E00               	movlw	0
 18814  0030A6  6E17               	movwf	__div_to_l_@quot,c
 18815  0030A8  0E00               	movlw	0
 18816  0030AA  6E18               	movwf	__div_to_l_@quot+1,c
 18817  0030AC  0E00               	movlw	0
 18818  0030AE  6E19               	movwf	__div_to_l_@quot+2,c
 18819  0030B0  0E00               	movlw	0
 18820  0030B2  6E1A               	movwf	__div_to_l_@quot+3,c
 18821  0030B4  0E7F               	movlw	127
 18822  0030B6  5E1C               	subwf	__div_to_l_@exp1,f,c
 18823  0030B8  501B               	movf	__div_to_l_@cntr,w,c
 18824  0030BA  0FA0               	addlw	160
 18825  0030BC  5E1C               	subwf	__div_to_l_@exp1,f,c
 18826  0030BE  0E20               	movlw	32
 18827  0030C0  6E1B               	movwf	__div_to_l_@cntr,c
 18828  0030C2  D000               	goto	l9292
 18829  0030C4                     l9292:
 18830  0030C4  90D8               	bcf	status,0,c
 18831  0030C6  3617               	rlcf	__div_to_l_@quot,f,c
 18832  0030C8  3618               	rlcf	__div_to_l_@quot+1,f,c
 18833  0030CA  3619               	rlcf	__div_to_l_@quot+2,f,c
 18834  0030CC  361A               	rlcf	__div_to_l_@quot+3,f,c
 18835  0030CE  5014               	movf	__div_to_l_@f2,w,c
 18836  0030D0  5C11               	subwf	__div_to_l_@f1,w,c
 18837  0030D2  5015               	movf	__div_to_l_@f2+1,w,c
 18838  0030D4  5812               	subwfb	__div_to_l_@f1+1,w,c
 18839  0030D6  5016               	movf	__div_to_l_@f2+2,w,c
 18840  0030D8  5813               	subwfb	__div_to_l_@f1+2,w,c
 18841  0030DA  5017               	movf	__div_to_l_@f2+3,w,c
 18842  0030DC  5814               	subwfb	__div_to_l_@f1+3,w,c
 18843  0030DE  A0D8               	btfss	status,0,c
 18844  0030E0  D00A               	goto	l9300
 18845  0030E2  5014               	movf	__div_to_l_@f2,w,c
 18846  0030E4  5E11               	subwf	__div_to_l_@f1,f,c
 18847  0030E6  5015               	movf	__div_to_l_@f2+1,w,c
 18848  0030E8  5A12               	subwfb	__div_to_l_@f1+1,f,c
 18849  0030EA  5016               	movf	__div_to_l_@f2+2,w,c
 18850  0030EC  5A13               	subwfb	__div_to_l_@f1+2,f,c
 18851  0030EE  5017               	movf	__div_to_l_@f2+3,w,c
 18852  0030F0  5A14               	subwfb	__div_to_l_@f1+3,f,c
 18853  0030F2  8017               	bsf	__div_to_l_@quot,0,c
 18854  0030F4  D000               	goto	l9300
 18855  0030F6                     l9300:
 18856  0030F6  90D8               	bcf	status,0,c
 18857  0030F8  3611               	rlcf	__div_to_l_@f1,f,c
 18858  0030FA  3612               	rlcf	__div_to_l_@f1+1,f,c
 18859  0030FC  3613               	rlcf	__div_to_l_@f1+2,f,c
 18860  0030FE  3614               	rlcf	__div_to_l_@f1+3,f,c
 18861  003100  2E1B               	decfsz	__div_to_l_@cntr,f,c
 18862  003102  D7E0               	goto	l9292
 18863  003104  D000               	goto	l9304
 18864  003106                     l9304:
 18865  003106  AE1C               	btfss	__div_to_l_@exp1,7,c
 18866  003108  D010               	goto	l9316
 18867  00310A  501C               	movf	__div_to_l_@exp1,w,c
 18868  00310C  0A80               	xorlw	128
 18869  00310E  0F9F               	addlw	159
 18870  003110  B0D8               	btfsc	status,0,c
 18871  003112  D003               	goto	l9312
 18872  003114  D00D               	goto	l9318
 18873  003116  D028               	goto	l1826
 18874  003118  D000               	goto	l9312
 18875  00311A                     l9312:
 18876  00311A  90D8               	bcf	status,0,c
 18877  00311C  321A               	rrcf	__div_to_l_@quot+3,f,c
 18878  00311E  3219               	rrcf	__div_to_l_@quot+2,f,c
 18879  003120  3218               	rrcf	__div_to_l_@quot+1,f,c
 18880  003122  3217               	rrcf	__div_to_l_@quot,f,c
 18881  003124  3E1C               	incfsz	__div_to_l_@exp1,f,c
 18882  003126  D7F9               	goto	l9312
 18883  003128  D017               	goto	l1835
 18884  00312A                     l9316:
 18885  00312A  0E1F               	movlw	31
 18886  00312C  641C               	cpfsgt	__div_to_l_@exp1,c
 18887  00312E  D011               	goto	l9324
 18888  003130                     l9318:
 18889  003130  0E00               	movlw	0
 18890  003132  6E11               	movwf	?__div_to_l_,c
 18891  003134  0E00               	movlw	0
 18892  003136  6E12               	movwf	?__div_to_l_+1,c
 18893  003138  0E00               	movlw	0
 18894  00313A  6E13               	movwf	?__div_to_l_+2,c
 18895  00313C  0E00               	movlw	0
 18896  00313E  6E14               	movwf	?__div_to_l_+3,c
 18897  003140  D013               	goto	l1826
 18898  003142  D007               	goto	l9324
 18899  003144                     l9322:
 18900  003144  90D8               	bcf	status,0,c
 18901  003146  3617               	rlcf	__div_to_l_@quot,f,c
 18902  003148  3618               	rlcf	__div_to_l_@quot+1,f,c
 18903  00314A  3619               	rlcf	__div_to_l_@quot+2,f,c
 18904  00314C  361A               	rlcf	__div_to_l_@quot+3,f,c
 18905  00314E  061C               	decf	__div_to_l_@exp1,f,c
 18906  003150  D000               	goto	l9324
 18907  003152                     l9324:
 18908  003152  501C               	movf	__div_to_l_@exp1,w,c
 18909  003154  A4D8               	btfss	status,2,c
 18910  003156  D7F6               	goto	l9322
 18911  003158                     l1835:
 18912  003158  C017  F011         	movff	__div_to_l_@quot,?__div_to_l_
 18913  00315C  C018  F012         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 18914  003160  C019  F013         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 18915  003164  C01A  F014         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 18916  003168                     l1826:
 18917  003168  0012               	return		;funcret
 18918  00316A                     __end_of__div_to_l_:
 18919                           	opt stack 0
 18920                           tblptru	equ	0xFF8
 18921                           tblptrh	equ	0xFF7
 18922                           tblptrl	equ	0xFF6
 18923                           tablat	equ	0xFF5
 18924                           prodh	equ	0xFF4
 18925                           prodl	equ	0xFF3
 18926                           intcon	equ	0xFF2
 18927                           intcon2	equ	0xFF1
 18928                           postinc0	equ	0xFEE
 18929                           wreg	equ	0xFE8
 18930                           postdec1	equ	0xFE5
 18931                           fsr1l	equ	0xFE1
 18932                           indf2	equ	0xFDF
 18933                           postinc2	equ	0xFDE
 18934                           postdec2	equ	0xFDD
 18935                           fsr2h	equ	0xFDA
 18936                           fsr2l	equ	0xFD9
 18937                           status	equ	0xFD8
 18938                           
 18939 ;; *************** function ___lltoft *****************
 18940 ;; Defined at:
 18941 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 18942 ;; Parameters:    Size  Location     Type
 18943 ;;  c               4   24[COMRAM] unsigned long 
 18944 ;; Auto vars:     Size  Location     Type
 18945 ;;  exp             1   32[COMRAM] unsigned char 
 18946 ;; Return value:  Size  Location     Type
 18947 ;;                  3   24[COMRAM] float 
 18948 ;; Registers used:
 18949 ;;		wreg, status,2, status,0, cstack
 18950 ;; Tracked objects:
 18951 ;;		On entry : 0/0
 18952 ;;		On exit  : 0/0
 18953 ;;		Unchanged: 0/0
 18954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18957 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18958 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18959 ;;Total ram usage:        9 bytes
 18960 ;; Hardware stack levels used:    1
 18961 ;; Hardware stack levels required when called:    4
 18962 ;; This function calls:
 18963 ;;		___ftpack
 18964 ;; This function is called by:
 18965 ;;		_printf
 18966 ;; This function uses a non-reentrant model
 18967 ;;
 18968                           
 18969                           	psect	text93
 18970  00479C                     __ptext93:
 18971                           	opt stack 0
 18972  00479C                     ___lltoft:
 18973                           	opt stack 25
 18974                           
 18975                           ;incstack = 0
 18976  00479C  0E8E               	movlw	142
 18977  00479E  6E21               	movwf	___lltoft@exp,c
 18978  0047A0  D007               	goto	l9444
 18979  0047A2                     l9442:
 18980  0047A2  90D8               	bcf	status,0,c
 18981  0047A4  321C               	rrcf	___lltoft@c+3,f,c
 18982  0047A6  321B               	rrcf	___lltoft@c+2,f,c
 18983  0047A8  321A               	rrcf	___lltoft@c+1,f,c
 18984  0047AA  3219               	rrcf	___lltoft@c,f,c
 18985  0047AC  2A21               	incf	___lltoft@exp,f,c
 18986  0047AE  D000               	goto	l9444
 18987  0047B0                     l9444:
 18988  0047B0  0E00               	movlw	0
 18989  0047B2  1419               	andwf	___lltoft@c,w,c
 18990  0047B4  6E1D               	movwf	??___lltoft& (0+255),c
 18991  0047B6  0E00               	movlw	0
 18992  0047B8  141A               	andwf	___lltoft@c+1,w,c
 18993  0047BA  6E1E               	movwf	(??___lltoft+1)& (0+255),c
 18994  0047BC  0E00               	movlw	0
 18995  0047BE  141B               	andwf	___lltoft@c+2,w,c
 18996  0047C0  6E1F               	movwf	(??___lltoft+2)& (0+255),c
 18997  0047C2  0EFF               	movlw	255
 18998  0047C4  141C               	andwf	___lltoft@c+3,w,c
 18999  0047C6  6E20               	movwf	(??___lltoft+3)& (0+255),c
 19000  0047C8  501D               	movf	??___lltoft,w,c
 19001  0047CA  101E               	iorwf	??___lltoft+1,w,c
 19002  0047CC  101F               	iorwf	??___lltoft+2,w,c
 19003  0047CE  1020               	iorwf	??___lltoft+3,w,c
 19004  0047D0  A4D8               	btfss	status,2,c
 19005  0047D2  D7E7               	goto	l9442
 19006  0047D4  C019  F011         	movff	___lltoft@c,___ftpack@arg
 19007  0047D8  C01A  F012         	movff	___lltoft@c+1,___ftpack@arg+1
 19008  0047DC  C01B  F013         	movff	___lltoft@c+2,___ftpack@arg+2
 19009  0047E0  C021  F014         	movff	___lltoft@exp,___ftpack@exp
 19010  0047E4  0E00               	movlw	0
 19011  0047E6  6E15               	movwf	___ftpack@sign,c
 19012  0047E8  ECCD  F01C         	call	___ftpack	;wreg free
 19013  0047EC  C011  F019         	movff	?___ftpack,?___lltoft
 19014  0047F0  C012  F01A         	movff	?___ftpack+1,?___lltoft+1
 19015  0047F4  C013  F01B         	movff	?___ftpack+2,?___lltoft+2
 19016  0047F8  D000               	goto	l2066
 19017  0047FA                     l2066:
 19018  0047FA  0012               	return		;funcret
 19019  0047FC                     __end_of___lltoft:
 19020                           	opt stack 0
 19021                           tblptru	equ	0xFF8
 19022                           tblptrh	equ	0xFF7
 19023                           tblptrl	equ	0xFF6
 19024                           tablat	equ	0xFF5
 19025                           prodh	equ	0xFF4
 19026                           prodl	equ	0xFF3
 19027                           intcon	equ	0xFF2
 19028                           intcon2	equ	0xFF1
 19029                           postinc0	equ	0xFEE
 19030                           wreg	equ	0xFE8
 19031                           postdec1	equ	0xFE5
 19032                           fsr1l	equ	0xFE1
 19033                           indf2	equ	0xFDF
 19034                           postinc2	equ	0xFDE
 19035                           postdec2	equ	0xFDD
 19036                           fsr2h	equ	0xFDA
 19037                           fsr2l	equ	0xFD9
 19038                           status	equ	0xFD8
 19039                           
 19040 ;; *************** function ___llmod *****************
 19041 ;; Defined at:
 19042 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 19043 ;; Parameters:    Size  Location     Type
 19044 ;;  dividend        4   29[COMRAM] unsigned long 
 19045 ;;  divisor         4   33[COMRAM] unsigned long 
 19046 ;; Auto vars:     Size  Location     Type
 19047 ;;  counter         1   37[COMRAM] unsigned char 
 19048 ;; Return value:  Size  Location     Type
 19049 ;;                  4   29[COMRAM] unsigned long 
 19050 ;; Registers used:
 19051 ;;		wreg, status,2, status,0
 19052 ;; Tracked objects:
 19053 ;;		On entry : 0/0
 19054 ;;		On exit  : 0/0
 19055 ;;		Unchanged: 0/0
 19056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19057 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19060 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19061 ;;Total ram usage:        9 bytes
 19062 ;; Hardware stack levels used:    1
 19063 ;; Hardware stack levels required when called:    3
 19064 ;; This function calls:
 19065 ;;		Nothing
 19066 ;; This function is called by:
 19067 ;;		_printf
 19068 ;; This function uses a non-reentrant model
 19069 ;;
 19070                           
 19071                           	psect	text94
 19072  0045A0                     __ptext94:
 19073                           	opt stack 0
 19074  0045A0                     ___llmod:
 19075                           	opt stack 26
 19076                           
 19077                           ;incstack = 0
 19078  0045A0  5022               	movf	___llmod@divisor,w,c
 19079  0045A2  1023               	iorwf	___llmod@divisor+1,w,c
 19080  0045A4  1024               	iorwf	___llmod@divisor+2,w,c
 19081  0045A6  1025               	iorwf	___llmod@divisor+3,w,c
 19082  0045A8  B4D8               	btfsc	status,2,c
 19083  0045AA  D029               	goto	l2046
 19084  0045AC  0E01               	movlw	1
 19085  0045AE  6E26               	movwf	___llmod@counter,c
 19086  0045B0  D007               	goto	l9430
 19087  0045B2                     l9428:
 19088  0045B2  90D8               	bcf	status,0,c
 19089  0045B4  3622               	rlcf	___llmod@divisor,f,c
 19090  0045B6  3623               	rlcf	___llmod@divisor+1,f,c
 19091  0045B8  3624               	rlcf	___llmod@divisor+2,f,c
 19092  0045BA  3625               	rlcf	___llmod@divisor+3,f,c
 19093  0045BC  2A26               	incf	___llmod@counter,f,c
 19094  0045BE  D000               	goto	l9430
 19095  0045C0                     l9430:
 19096  0045C0  BE25               	btfsc	___llmod@divisor+3,7,c
 19097  0045C2  D002               	goto	l9432
 19098  0045C4  D7F6               	goto	l9428
 19099  0045C6  D000               	goto	l9432
 19100  0045C8                     l9432:
 19101  0045C8  5022               	movf	___llmod@divisor,w,c
 19102  0045CA  5C1E               	subwf	___llmod@dividend,w,c
 19103  0045CC  5023               	movf	___llmod@divisor+1,w,c
 19104  0045CE  581F               	subwfb	___llmod@dividend+1,w,c
 19105  0045D0  5024               	movf	___llmod@divisor+2,w,c
 19106  0045D2  5820               	subwfb	___llmod@dividend+2,w,c
 19107  0045D4  5025               	movf	___llmod@divisor+3,w,c
 19108  0045D6  5821               	subwfb	___llmod@dividend+3,w,c
 19109  0045D8  A0D8               	btfss	status,0,c
 19110  0045DA  D009               	goto	l9436
 19111  0045DC  5022               	movf	___llmod@divisor,w,c
 19112  0045DE  5E1E               	subwf	___llmod@dividend,f,c
 19113  0045E0  5023               	movf	___llmod@divisor+1,w,c
 19114  0045E2  5A1F               	subwfb	___llmod@dividend+1,f,c
 19115  0045E4  5024               	movf	___llmod@divisor+2,w,c
 19116  0045E6  5A20               	subwfb	___llmod@dividend+2,f,c
 19117  0045E8  5025               	movf	___llmod@divisor+3,w,c
 19118  0045EA  5A21               	subwfb	___llmod@dividend+3,f,c
 19119  0045EC  D000               	goto	l9436
 19120  0045EE                     l9436:
 19121  0045EE  90D8               	bcf	status,0,c
 19122  0045F0  3225               	rrcf	___llmod@divisor+3,f,c
 19123  0045F2  3224               	rrcf	___llmod@divisor+2,f,c
 19124  0045F4  3223               	rrcf	___llmod@divisor+1,f,c
 19125  0045F6  3222               	rrcf	___llmod@divisor,f,c
 19126  0045F8  2E26               	decfsz	___llmod@counter,f,c
 19127  0045FA  D7E6               	goto	l9432
 19128  0045FC  D000               	goto	l2046
 19129  0045FE                     l2046:
 19130  0045FE  C01E  F01E         	movff	___llmod@dividend,?___llmod
 19131  004602  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
 19132  004606  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
 19133  00460A  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
 19134  00460E  0012               	return		;funcret
 19135  004610                     __end_of___llmod:
 19136                           	opt stack 0
 19137                           tblptru	equ	0xFF8
 19138                           tblptrh	equ	0xFF7
 19139                           tblptrl	equ	0xFF6
 19140                           tablat	equ	0xFF5
 19141                           prodh	equ	0xFF4
 19142                           prodl	equ	0xFF3
 19143                           intcon	equ	0xFF2
 19144                           intcon2	equ	0xFF1
 19145                           postinc0	equ	0xFEE
 19146                           wreg	equ	0xFE8
 19147                           postdec1	equ	0xFE5
 19148                           fsr1l	equ	0xFE1
 19149                           indf2	equ	0xFDF
 19150                           postinc2	equ	0xFDE
 19151                           postdec2	equ	0xFDD
 19152                           fsr2h	equ	0xFDA
 19153                           fsr2l	equ	0xFD9
 19154                           status	equ	0xFD8
 19155                           
 19156 ;; *************** function ___lldiv *****************
 19157 ;; Defined at:
 19158 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 19159 ;; Parameters:    Size  Location     Type
 19160 ;;  dividend        4   16[COMRAM] unsigned long 
 19161 ;;  divisor         4   20[COMRAM] unsigned long 
 19162 ;; Auto vars:     Size  Location     Type
 19163 ;;  quotient        4   24[COMRAM] unsigned long 
 19164 ;;  counter         1   28[COMRAM] unsigned char 
 19165 ;; Return value:  Size  Location     Type
 19166 ;;                  4   16[COMRAM] unsigned long 
 19167 ;; Registers used:
 19168 ;;		wreg, status,2, status,0
 19169 ;; Tracked objects:
 19170 ;;		On entry : 0/0
 19171 ;;		On exit  : 0/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19174 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19175 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19177 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19178 ;;Total ram usage:       13 bytes
 19179 ;; Hardware stack levels used:    1
 19180 ;; Hardware stack levels required when called:    3
 19181 ;; This function calls:
 19182 ;;		Nothing
 19183 ;; This function is called by:
 19184 ;;		_printf
 19185 ;; This function uses a non-reentrant model
 19186 ;;
 19187                           
 19188                           	psect	text95
 19189  00421C                     __ptext95:
 19190                           	opt stack 0
 19191  00421C                     ___lldiv:
 19192                           	opt stack 26
 19193                           
 19194                           ;incstack = 0
 19195  00421C  0E00               	movlw	0
 19196  00421E  6E19               	movwf	___lldiv@quotient,c
 19197  004220  0E00               	movlw	0
 19198  004222  6E1A               	movwf	___lldiv@quotient+1,c
 19199  004224  0E00               	movlw	0
 19200  004226  6E1B               	movwf	___lldiv@quotient+2,c
 19201  004228  0E00               	movlw	0
 19202  00422A  6E1C               	movwf	___lldiv@quotient+3,c
 19203  00422C  5015               	movf	___lldiv@divisor,w,c
 19204  00422E  1016               	iorwf	___lldiv@divisor+1,w,c
 19205  004230  1017               	iorwf	___lldiv@divisor+2,w,c
 19206  004232  1018               	iorwf	___lldiv@divisor+3,w,c
 19207  004234  B4D8               	btfsc	status,2,c
 19208  004236  D02F               	goto	l2036
 19209  004238  0E01               	movlw	1
 19210  00423A  6E1D               	movwf	___lldiv@counter,c
 19211  00423C  D007               	goto	l9410
 19212  00423E                     l9408:
 19213  00423E  90D8               	bcf	status,0,c
 19214  004240  3615               	rlcf	___lldiv@divisor,f,c
 19215  004242  3616               	rlcf	___lldiv@divisor+1,f,c
 19216  004244  3617               	rlcf	___lldiv@divisor+2,f,c
 19217  004246  3618               	rlcf	___lldiv@divisor+3,f,c
 19218  004248  2A1D               	incf	___lldiv@counter,f,c
 19219  00424A  D000               	goto	l9410
 19220  00424C                     l9410:
 19221  00424C  BE18               	btfsc	___lldiv@divisor+3,7,c
 19222  00424E  D002               	goto	l9412
 19223  004250  D7F6               	goto	l9408
 19224  004252  D000               	goto	l9412
 19225  004254                     l9412:
 19226  004254  90D8               	bcf	status,0,c
 19227  004256  3619               	rlcf	___lldiv@quotient,f,c
 19228  004258  361A               	rlcf	___lldiv@quotient+1,f,c
 19229  00425A  361B               	rlcf	___lldiv@quotient+2,f,c
 19230  00425C  361C               	rlcf	___lldiv@quotient+3,f,c
 19231  00425E  5015               	movf	___lldiv@divisor,w,c
 19232  004260  5C11               	subwf	___lldiv@dividend,w,c
 19233  004262  5016               	movf	___lldiv@divisor+1,w,c
 19234  004264  5812               	subwfb	___lldiv@dividend+1,w,c
 19235  004266  5017               	movf	___lldiv@divisor+2,w,c
 19236  004268  5813               	subwfb	___lldiv@dividend+2,w,c
 19237  00426A  5018               	movf	___lldiv@divisor+3,w,c
 19238  00426C  5814               	subwfb	___lldiv@dividend+3,w,c
 19239  00426E  A0D8               	btfss	status,0,c
 19240  004270  D00A               	goto	l9420
 19241  004272  5015               	movf	___lldiv@divisor,w,c
 19242  004274  5E11               	subwf	___lldiv@dividend,f,c
 19243  004276  5016               	movf	___lldiv@divisor+1,w,c
 19244  004278  5A12               	subwfb	___lldiv@dividend+1,f,c
 19245  00427A  5017               	movf	___lldiv@divisor+2,w,c
 19246  00427C  5A13               	subwfb	___lldiv@dividend+2,f,c
 19247  00427E  5018               	movf	___lldiv@divisor+3,w,c
 19248  004280  5A14               	subwfb	___lldiv@dividend+3,f,c
 19249  004282  8019               	bsf	___lldiv@quotient,0,c
 19250  004284  D000               	goto	l9420
 19251  004286                     l9420:
 19252  004286  90D8               	bcf	status,0,c
 19253  004288  3218               	rrcf	___lldiv@divisor+3,f,c
 19254  00428A  3217               	rrcf	___lldiv@divisor+2,f,c
 19255  00428C  3216               	rrcf	___lldiv@divisor+1,f,c
 19256  00428E  3215               	rrcf	___lldiv@divisor,f,c
 19257  004290  2E1D               	decfsz	___lldiv@counter,f,c
 19258  004292  D7E0               	goto	l9412
 19259  004294  D000               	goto	l2036
 19260  004296                     l2036:
 19261  004296  C019  F011         	movff	___lldiv@quotient,?___lldiv
 19262  00429A  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
 19263  00429E  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
 19264  0042A2  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
 19265  0042A6  0012               	return		;funcret
 19266  0042A8                     __end_of___lldiv:
 19267                           	opt stack 0
 19268                           tblptru	equ	0xFF8
 19269                           tblptrh	equ	0xFF7
 19270                           tblptrl	equ	0xFF6
 19271                           tablat	equ	0xFF5
 19272                           prodh	equ	0xFF4
 19273                           prodl	equ	0xFF3
 19274                           intcon	equ	0xFF2
 19275                           intcon2	equ	0xFF1
 19276                           postinc0	equ	0xFEE
 19277                           wreg	equ	0xFE8
 19278                           postdec1	equ	0xFE5
 19279                           fsr1l	equ	0xFE1
 19280                           indf2	equ	0xFDF
 19281                           postinc2	equ	0xFDE
 19282                           postdec2	equ	0xFDD
 19283                           fsr2h	equ	0xFDA
 19284                           fsr2l	equ	0xFD9
 19285                           status	equ	0xFD8
 19286                           
 19287 ;; *************** function ___ftsub *****************
 19288 ;; Defined at:
 19289 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 19290 ;; Parameters:    Size  Location     Type
 19291 ;;  f1              3   88[COMRAM] float 
 19292 ;;  f2              3   91[COMRAM] float 
 19293 ;; Auto vars:     Size  Location     Type
 19294 ;;		None
 19295 ;; Return value:  Size  Location     Type
 19296 ;;                  3   88[COMRAM] float 
 19297 ;; Registers used:
 19298 ;;		wreg, status,2, status,0, cstack
 19299 ;; Tracked objects:
 19300 ;;		On entry : 0/0
 19301 ;;		On exit  : 0/0
 19302 ;;		Unchanged: 0/0
 19303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19304 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19307 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19308 ;;Total ram usage:        6 bytes
 19309 ;; Hardware stack levels used:    1
 19310 ;; Hardware stack levels required when called:    5
 19311 ;; This function calls:
 19312 ;;		___ftadd
 19313 ;; This function is called by:
 19314 ;;		_printf
 19315 ;; This function uses a non-reentrant model
 19316 ;;
 19317                           
 19318                           	psect	text96
 19319  004B38                     __ptext96:
 19320                           	opt stack 0
 19321  004B38                     ___ftsub:
 19322                           	opt stack 24
 19323                           
 19324                           ;incstack = 0
 19325  004B38  505C               	movf	___ftsub@f2,w,c
 19326  004B3A  105D               	iorwf	___ftsub@f2+1,w,c
 19327  004B3C  105E               	iorwf	___ftsub@f2+2,w,c
 19328  004B3E  B4D8               	btfsc	status,2,c
 19329  004B40  D007               	goto	l9330
 19330  004B42  0E00               	movlw	0
 19331  004B44  1A5C               	xorwf	___ftsub@f2,f,c
 19332  004B46  0E00               	movlw	0
 19333  004B48  1A5D               	xorwf	___ftsub@f2+1,f,c
 19334  004B4A  0E80               	movlw	128
 19335  004B4C  1A5E               	xorwf	___ftsub@f2+2,f,c
 19336  004B4E  D000               	goto	l9330
 19337  004B50                     l9330:
 19338  004B50  C059  F04D         	movff	___ftsub@f1,___ftadd@f1
 19339  004B54  C05A  F04E         	movff	___ftsub@f1+1,___ftadd@f1+1
 19340  004B58  C05B  F04F         	movff	___ftsub@f1+2,___ftadd@f1+2
 19341  004B5C  C05C  F050         	movff	___ftsub@f2,___ftadd@f2
 19342  004B60  C05D  F051         	movff	___ftsub@f2+1,___ftadd@f2+1
 19343  004B64  C05E  F052         	movff	___ftsub@f2+2,___ftadd@f2+2
 19344  004B68  EC58  F00F         	call	___ftadd	;wreg free
 19345  004B6C  C04D  F059         	movff	?___ftadd,?___ftsub
 19346  004B70  C04E  F05A         	movff	?___ftadd+1,?___ftsub+1
 19347  004B74  C04F  F05B         	movff	?___ftadd+2,?___ftsub+2
 19348  004B78  D000               	goto	l1988
 19349  004B7A                     l1988:
 19350  004B7A  0012               	return		;funcret
 19351  004B7C                     __end_of___ftsub:
 19352                           	opt stack 0
 19353                           tblptru	equ	0xFF8
 19354                           tblptrh	equ	0xFF7
 19355                           tblptrl	equ	0xFF6
 19356                           tablat	equ	0xFF5
 19357                           prodh	equ	0xFF4
 19358                           prodl	equ	0xFF3
 19359                           intcon	equ	0xFF2
 19360                           intcon2	equ	0xFF1
 19361                           postinc0	equ	0xFEE
 19362                           wreg	equ	0xFE8
 19363                           postdec1	equ	0xFE5
 19364                           fsr1l	equ	0xFE1
 19365                           indf2	equ	0xFDF
 19366                           postinc2	equ	0xFDE
 19367                           postdec2	equ	0xFDD
 19368                           fsr2h	equ	0xFDA
 19369                           fsr2l	equ	0xFD9
 19370                           status	equ	0xFD8
 19371                           
 19372 ;; *************** function ___ftadd *****************
 19373 ;; Defined at:
 19374 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 19375 ;; Parameters:    Size  Location     Type
 19376 ;;  f1              3   76[COMRAM] float 
 19377 ;;  f2              3   79[COMRAM] float 
 19378 ;; Auto vars:     Size  Location     Type
 19379 ;;  exp1            1   87[COMRAM] unsigned char 
 19380 ;;  exp2            1   86[COMRAM] unsigned char 
 19381 ;;  sign            1   85[COMRAM] unsigned char 
 19382 ;; Return value:  Size  Location     Type
 19383 ;;                  3   76[COMRAM] float 
 19384 ;; Registers used:
 19385 ;;		wreg, status,2, status,0, cstack
 19386 ;; Tracked objects:
 19387 ;;		On entry : 0/0
 19388 ;;		On exit  : 0/0
 19389 ;;		Unchanged: 0/0
 19390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19391 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19392 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19393 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19394 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19395 ;;Total ram usage:       12 bytes
 19396 ;; Hardware stack levels used:    1
 19397 ;; Hardware stack levels required when called:    4
 19398 ;; This function calls:
 19399 ;;		___ftpack
 19400 ;; This function is called by:
 19401 ;;		_printf
 19402 ;;		___ftsub
 19403 ;; This function uses a non-reentrant model
 19404 ;;
 19405                           
 19406                           	psect	text97
 19407  001EB0                     __ptext97:
 19408                           	opt stack 0
 19409  001EB0                     ___ftadd:
 19410                           	opt stack 24
 19411                           
 19412                           ;incstack = 0
 19413  001EB0  C04F  F053         	movff	___ftadd@f1+2,??___ftadd
 19414  001EB4  6A54               	clrf	(??___ftadd+1)& (0+255),c
 19415  001EB6  6A55               	clrf	(??___ftadd+2)& (0+255),c
 19416  001EB8  344E               	rlcf	___ftadd@f1+1,w,c
 19417  001EBA  3653               	rlcf	??___ftadd& (0+255),f,c
 19418  001EBC  E301               	bnc	u6881
 19419  001EBE  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 19420  001EC0                     u6881:
 19421  001EC0  5053               	movf	??___ftadd,w,c
 19422  001EC2  6E58               	movwf	___ftadd@exp1,c
 19423  001EC4  C052  F053         	movff	___ftadd@f2+2,??___ftadd
 19424  001EC8  6A54               	clrf	(??___ftadd+1)& (0+255),c
 19425  001ECA  6A55               	clrf	(??___ftadd+2)& (0+255),c
 19426  001ECC  3451               	rlcf	___ftadd@f2+1,w,c
 19427  001ECE  3653               	rlcf	??___ftadd& (0+255),f,c
 19428  001ED0  E301               	bnc	u6891
 19429  001ED2  8054               	bsf	(??___ftadd+1)& (0+255),0,c
 19430  001ED4                     u6891:
 19431  001ED4  5053               	movf	??___ftadd,w,c
 19432  001ED6  6E57               	movwf	___ftadd@exp2,c
 19433  001ED8  5058               	movf	___ftadd@exp1,w,c
 19434  001EDA  B4D8               	btfsc	status,2,c
 19435  001EDC  D00B               	goto	l1907
 19436  001EDE  5057               	movf	___ftadd@exp2,w,c
 19437  001EE0  5C58               	subwf	___ftadd@exp1,w,c
 19438  001EE2  B0D8               	btfsc	status,0,c
 19439  001EE4  D00E               	goto	l8800
 19440  001EE6  5058               	movf	___ftadd@exp1,w,c
 19441  001EE8  0800               	sublw	0
 19442  001EEA  2457               	addwf	___ftadd@exp2,w,c
 19443  001EEC  6E53               	movwf	??___ftadd& (0+255),c
 19444  001EEE  0E18               	movlw	24
 19445  001EF0  6453               	cpfsgt	??___ftadd,c
 19446  001EF2  D007               	goto	l8800
 19447  001EF4                     l1907:
 19448  001EF4  C050  F04D         	movff	___ftadd@f2,?___ftadd
 19449  001EF8  C051  F04E         	movff	___ftadd@f2+1,?___ftadd+1
 19450  001EFC  C052  F04F         	movff	___ftadd@f2+2,?___ftadd+2
 19451  001F00  D0B8               	goto	l1908
 19452  001F02                     l8800:
 19453  001F02  5057               	movf	___ftadd@exp2,w,c
 19454  001F04  B4D8               	btfsc	status,2,c
 19455  001F06  D00B               	goto	l1911
 19456  001F08  5058               	movf	___ftadd@exp1,w,c
 19457  001F0A  5C57               	subwf	___ftadd@exp2,w,c
 19458  001F0C  B0D8               	btfsc	status,0,c
 19459  001F0E  D00E               	goto	l8806
 19460  001F10  5057               	movf	___ftadd@exp2,w,c
 19461  001F12  0800               	sublw	0
 19462  001F14  2458               	addwf	___ftadd@exp1,w,c
 19463  001F16  6E53               	movwf	??___ftadd& (0+255),c
 19464  001F18  0E18               	movlw	24
 19465  001F1A  6453               	cpfsgt	??___ftadd,c
 19466  001F1C  D007               	goto	l8806
 19467  001F1E                     l1911:
 19468  001F1E  C04D  F04D         	movff	___ftadd@f1,?___ftadd
 19469  001F22  C04E  F04E         	movff	___ftadd@f1+1,?___ftadd+1
 19470  001F26  C04F  F04F         	movff	___ftadd@f1+2,?___ftadd+2
 19471  001F2A  D0A3               	goto	l1908
 19472  001F2C                     l8806:
 19473  001F2C  0E06               	movlw	6
 19474  001F2E  6E56               	movwf	___ftadd@sign,c
 19475  001F30  AE4F               	btfss	___ftadd@f1+2,7,c
 19476  001F32  D002               	goto	l8812
 19477  001F34  8E56               	bsf	___ftadd@sign,7,c
 19478  001F36  D000               	goto	l8812
 19479  001F38                     l8812:
 19480  001F38  BE52               	btfsc	___ftadd@f2+2,7,c
 19481  001F3A  8C56               	bsf	___ftadd@sign,6,c
 19482  001F3C  8E4E               	bsf	___ftadd@f1+1,7,c
 19483  001F3E  0EFF               	movlw	255
 19484  001F40  164D               	andwf	___ftadd@f1,f,c
 19485  001F42  0EFF               	movlw	255
 19486  001F44  164E               	andwf	___ftadd@f1+1,f,c
 19487  001F46  0E00               	movlw	0
 19488  001F48  164F               	andwf	___ftadd@f1+2,f,c
 19489  001F4A  8E51               	bsf	___ftadd@f2+1,7,c
 19490  001F4C  0EFF               	movlw	255
 19491  001F4E  1650               	andwf	___ftadd@f2,f,c
 19492  001F50  0EFF               	movlw	255
 19493  001F52  1651               	andwf	___ftadd@f2+1,f,c
 19494  001F54  0E00               	movlw	0
 19495  001F56  1652               	andwf	___ftadd@f2+2,f,c
 19496  001F58  5057               	movf	___ftadd@exp2,w,c
 19497  001F5A  5C58               	subwf	___ftadd@exp1,w,c
 19498  001F5C  B0D8               	btfsc	status,0,c
 19499  001F5E  D01E               	goto	l8832
 19500  001F60                     l8822:
 19501  001F60  90D8               	bcf	status,0,c
 19502  001F62  3650               	rlcf	___ftadd@f2,f,c
 19503  001F64  3651               	rlcf	___ftadd@f2+1,f,c
 19504  001F66  3652               	rlcf	___ftadd@f2+2,f,c
 19505  001F68  0657               	decf	___ftadd@exp2,f,c
 19506  001F6A  5058               	movf	___ftadd@exp1,w,c
 19507  001F6C  1857               	xorwf	___ftadd@exp2,w,c
 19508  001F6E  B4D8               	btfsc	status,2,c
 19509  001F70  D00F               	goto	l8830
 19510  001F72  0656               	decf	___ftadd@sign,f,c
 19511  001F74  C056  F053         	movff	___ftadd@sign,??___ftadd
 19512  001F78  0E07               	movlw	7
 19513  001F7A  1653               	andwf	??___ftadd,f,c
 19514  001F7C  B4D8               	btfsc	status,2,c
 19515  001F7E  D008               	goto	l8830
 19516  001F80  D7EF               	goto	l8822
 19517  001F82  D006               	goto	l8830
 19518  001F84                     l8828:
 19519  001F84  90D8               	bcf	status,0,c
 19520  001F86  324F               	rrcf	___ftadd@f1+2,f,c
 19521  001F88  324E               	rrcf	___ftadd@f1+1,f,c
 19522  001F8A  324D               	rrcf	___ftadd@f1,f,c
 19523  001F8C  2A58               	incf	___ftadd@exp1,f,c
 19524  001F8E  D000               	goto	l8830
 19525  001F90                     l8830:
 19526  001F90  5057               	movf	___ftadd@exp2,w,c
 19527  001F92  1858               	xorwf	___ftadd@exp1,w,c
 19528  001F94  B4D8               	btfsc	status,2,c
 19529  001F96  D024               	goto	l1922
 19530  001F98  D7F5               	goto	l8828
 19531  001F9A  D022               	goto	l1922
 19532  001F9C                     l8832:
 19533  001F9C  5058               	movf	___ftadd@exp1,w,c
 19534  001F9E  5C57               	subwf	___ftadd@exp2,w,c
 19535  001FA0  B0D8               	btfsc	status,0,c
 19536  001FA2  D01E               	goto	l1922
 19537  001FA4                     l8834:
 19538  001FA4  90D8               	bcf	status,0,c
 19539  001FA6  364D               	rlcf	___ftadd@f1,f,c
 19540  001FA8  364E               	rlcf	___ftadd@f1+1,f,c
 19541  001FAA  364F               	rlcf	___ftadd@f1+2,f,c
 19542  001FAC  0658               	decf	___ftadd@exp1,f,c
 19543  001FAE  5058               	movf	___ftadd@exp1,w,c
 19544  001FB0  1857               	xorwf	___ftadd@exp2,w,c
 19545  001FB2  B4D8               	btfsc	status,2,c
 19546  001FB4  D00F               	goto	l8842
 19547  001FB6  0656               	decf	___ftadd@sign,f,c
 19548  001FB8  C056  F053         	movff	___ftadd@sign,??___ftadd
 19549  001FBC  0E07               	movlw	7
 19550  001FBE  1653               	andwf	??___ftadd,f,c
 19551  001FC0  B4D8               	btfsc	status,2,c
 19552  001FC2  D008               	goto	l8842
 19553  001FC4  D7EF               	goto	l8834
 19554  001FC6  D006               	goto	l8842
 19555  001FC8                     l8840:
 19556  001FC8  90D8               	bcf	status,0,c
 19557  001FCA  3252               	rrcf	___ftadd@f2+2,f,c
 19558  001FCC  3251               	rrcf	___ftadd@f2+1,f,c
 19559  001FCE  3250               	rrcf	___ftadd@f2,f,c
 19560  001FD0  2A57               	incf	___ftadd@exp2,f,c
 19561  001FD2  D000               	goto	l8842
 19562  001FD4                     l8842:
 19563  001FD4  5057               	movf	___ftadd@exp2,w,c
 19564  001FD6  1858               	xorwf	___ftadd@exp1,w,c
 19565  001FD8  B4D8               	btfsc	status,2,c
 19566  001FDA  D002               	goto	l1922
 19567  001FDC  D7F5               	goto	l8840
 19568  001FDE  D000               	goto	l1922
 19569  001FE0                     l1922:
 19570  001FE0  AE56               	btfss	___ftadd@sign,7,c
 19571  001FE2  D00C               	goto	l1931
 19572  001FE4  0EFF               	movlw	255
 19573  001FE6  1A4D               	xorwf	___ftadd@f1,f,c
 19574  001FE8  0EFF               	movlw	255
 19575  001FEA  1A4E               	xorwf	___ftadd@f1+1,f,c
 19576  001FEC  0EFF               	movlw	255
 19577  001FEE  1A4F               	xorwf	___ftadd@f1+2,f,c
 19578  001FF0  0E01               	movlw	1
 19579  001FF2  264D               	addwf	___ftadd@f1,f,c
 19580  001FF4  0E00               	movlw	0
 19581  001FF6  224E               	addwfc	___ftadd@f1+1,f,c
 19582  001FF8  0E00               	movlw	0
 19583  001FFA  224F               	addwfc	___ftadd@f1+2,f,c
 19584  001FFC                     l1931:
 19585  001FFC  AC56               	btfss	___ftadd@sign,6,c
 19586  001FFE  D00D               	goto	l8848
 19587  002000  0EFF               	movlw	255
 19588  002002  1A50               	xorwf	___ftadd@f2,f,c
 19589  002004  0EFF               	movlw	255
 19590  002006  1A51               	xorwf	___ftadd@f2+1,f,c
 19591  002008  0EFF               	movlw	255
 19592  00200A  1A52               	xorwf	___ftadd@f2+2,f,c
 19593  00200C  0E01               	movlw	1
 19594  00200E  2650               	addwf	___ftadd@f2,f,c
 19595  002010  0E00               	movlw	0
 19596  002012  2251               	addwfc	___ftadd@f2+1,f,c
 19597  002014  0E00               	movlw	0
 19598  002016  2252               	addwfc	___ftadd@f2+2,f,c
 19599  002018  D000               	goto	l8848
 19600  00201A                     l8848:
 19601  00201A  0E00               	movlw	0
 19602  00201C  6E56               	movwf	___ftadd@sign,c
 19603  00201E  504D               	movf	___ftadd@f1,w,c
 19604  002020  2650               	addwf	___ftadd@f2,f,c
 19605  002022  504E               	movf	___ftadd@f1+1,w,c
 19606  002024  2251               	addwfc	___ftadd@f2+1,f,c
 19607  002026  504F               	movf	___ftadd@f1+2,w,c
 19608  002028  2252               	addwfc	___ftadd@f2+2,f,c
 19609  00202A  AE52               	btfss	___ftadd@f2+2,7,c
 19610  00202C  D00F               	goto	l8858
 19611  00202E  0EFF               	movlw	255
 19612  002030  1A50               	xorwf	___ftadd@f2,f,c
 19613  002032  0EFF               	movlw	255
 19614  002034  1A51               	xorwf	___ftadd@f2+1,f,c
 19615  002036  0EFF               	movlw	255
 19616  002038  1A52               	xorwf	___ftadd@f2+2,f,c
 19617  00203A  0E01               	movlw	1
 19618  00203C  2650               	addwf	___ftadd@f2,f,c
 19619  00203E  0E00               	movlw	0
 19620  002040  2251               	addwfc	___ftadd@f2+1,f,c
 19621  002042  0E00               	movlw	0
 19622  002044  2252               	addwfc	___ftadd@f2+2,f,c
 19623  002046  0E01               	movlw	1
 19624  002048  6E56               	movwf	___ftadd@sign,c
 19625  00204A  D000               	goto	l8858
 19626  00204C                     l8858:
 19627  00204C  C050  F011         	movff	___ftadd@f2,___ftpack@arg
 19628  002050  C051  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 19629  002054  C052  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 19630  002058  C058  F014         	movff	___ftadd@exp1,___ftpack@exp
 19631  00205C  C056  F015         	movff	___ftadd@sign,___ftpack@sign
 19632  002060  ECCD  F01C         	call	___ftpack	;wreg free
 19633  002064  C011  F04D         	movff	?___ftpack,?___ftadd
 19634  002068  C012  F04E         	movff	?___ftpack+1,?___ftadd+1
 19635  00206C  C013  F04F         	movff	?___ftpack+2,?___ftadd+2
 19636  002070  D000               	goto	l1908
 19637  002072                     l1908:
 19638  002072  0012               	return		;funcret
 19639  002074                     __end_of___ftadd:
 19640                           	opt stack 0
 19641                           tblptru	equ	0xFF8
 19642                           tblptrh	equ	0xFF7
 19643                           tblptrl	equ	0xFF6
 19644                           tablat	equ	0xFF5
 19645                           prodh	equ	0xFF4
 19646                           prodl	equ	0xFF3
 19647                           intcon	equ	0xFF2
 19648                           intcon2	equ	0xFF1
 19649                           postinc0	equ	0xFEE
 19650                           wreg	equ	0xFE8
 19651                           postdec1	equ	0xFE5
 19652                           fsr1l	equ	0xFE1
 19653                           indf2	equ	0xFDF
 19654                           postinc2	equ	0xFDE
 19655                           postdec2	equ	0xFDD
 19656                           fsr2h	equ	0xFDA
 19657                           fsr2l	equ	0xFD9
 19658                           status	equ	0xFD8
 19659                           
 19660 ;; *************** function ___ftneg *****************
 19661 ;; Defined at:
 19662 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 19663 ;; Parameters:    Size  Location     Type
 19664 ;;  f1              3   16[COMRAM] float 
 19665 ;; Auto vars:     Size  Location     Type
 19666 ;;		None
 19667 ;; Return value:  Size  Location     Type
 19668 ;;                  3   16[COMRAM] float 
 19669 ;; Registers used:
 19670 ;;		wreg, status,2, status,0
 19671 ;; Tracked objects:
 19672 ;;		On entry : 0/0
 19673 ;;		On exit  : 0/0
 19674 ;;		Unchanged: 0/0
 19675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19676 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19680 ;;Total ram usage:        3 bytes
 19681 ;; Hardware stack levels used:    1
 19682 ;; Hardware stack levels required when called:    3
 19683 ;; This function calls:
 19684 ;;		Nothing
 19685 ;; This function is called by:
 19686 ;;		_printf
 19687 ;; This function uses a non-reentrant model
 19688 ;;
 19689                           
 19690                           	psect	text98
 19691  004E72                     __ptext98:
 19692                           	opt stack 0
 19693  004E72                     ___ftneg:
 19694                           	opt stack 26
 19695                           
 19696                           ;incstack = 0
 19697  004E72  5011               	movf	___ftneg@f1,w,c
 19698  004E74  1012               	iorwf	___ftneg@f1+1,w,c
 19699  004E76  1013               	iorwf	___ftneg@f1+2,w,c
 19700  004E78  B4D8               	btfsc	status,2,c
 19701  004E7A  D006               	goto	l1981
 19702  004E7C  0E00               	movlw	0
 19703  004E7E  1A11               	xorwf	___ftneg@f1,f,c
 19704  004E80  0E00               	movlw	0
 19705  004E82  1A12               	xorwf	___ftneg@f1+1,f,c
 19706  004E84  0E80               	movlw	128
 19707  004E86  1A13               	xorwf	___ftneg@f1+2,f,c
 19708  004E88                     l1981:
 19709  004E88  C011  F011         	movff	___ftneg@f1,?___ftneg
 19710  004E8C  C012  F012         	movff	___ftneg@f1+1,?___ftneg+1
 19711  004E90  C013  F013         	movff	___ftneg@f1+2,?___ftneg+2
 19712  004E94  0012               	return		;funcret
 19713  004E96                     __end_of___ftneg:
 19714                           	opt stack 0
 19715                           tblptru	equ	0xFF8
 19716                           tblptrh	equ	0xFF7
 19717                           tblptrl	equ	0xFF6
 19718                           tablat	equ	0xFF5
 19719                           prodh	equ	0xFF4
 19720                           prodl	equ	0xFF3
 19721                           intcon	equ	0xFF2
 19722                           intcon2	equ	0xFF1
 19723                           postinc0	equ	0xFEE
 19724                           wreg	equ	0xFE8
 19725                           postdec1	equ	0xFE5
 19726                           fsr1l	equ	0xFE1
 19727                           indf2	equ	0xFDF
 19728                           postinc2	equ	0xFDE
 19729                           postdec2	equ	0xFDD
 19730                           fsr2h	equ	0xFDA
 19731                           fsr2l	equ	0xFD9
 19732                           status	equ	0xFD8
 19733                           
 19734 ;; *************** function ___ftge *****************
 19735 ;; Defined at:
 19736 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 19737 ;; Parameters:    Size  Location     Type
 19738 ;;  ff1             3   16[COMRAM] float 
 19739 ;;  ff2             3   19[COMRAM] float 
 19740 ;; Auto vars:     Size  Location     Type
 19741 ;;		None
 19742 ;; Return value:  Size  Location     Type
 19743 ;;		None               void
 19744 ;; Registers used:
 19745 ;;		wreg, status,2, status,0
 19746 ;; Tracked objects:
 19747 ;;		On entry : 0/0
 19748 ;;		On exit  : 0/0
 19749 ;;		Unchanged: 0/0
 19750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19751 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19753 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19754 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19755 ;;Total ram usage:        9 bytes
 19756 ;; Hardware stack levels used:    1
 19757 ;; Hardware stack levels required when called:    3
 19758 ;; This function calls:
 19759 ;;		Nothing
 19760 ;; This function is called by:
 19761 ;;		_Test_Alarm
 19762 ;;		_printf
 19763 ;; This function uses a non-reentrant model
 19764 ;;
 19765                           
 19766                           	psect	text99
 19767  00405E                     __ptext99:
 19768                           	opt stack 0
 19769  00405E                     ___ftge:
 19770                           	opt stack 26
 19771                           
 19772                           ;incstack = 0
 19773  00405E  AE13               	btfss	___ftge@ff1+2,7,c
 19774  004060  D017               	goto	l9338
 19775  004062  C011  F017         	movff	___ftge@ff1,??___ftge
 19776  004066  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 19777  00406A  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 19778  00406E  1E17               	comf	??___ftge,f,c
 19779  004070  1E18               	comf	??___ftge+1,f,c
 19780  004072  1E19               	comf	??___ftge+2,f,c
 19781  004074  2A17               	incf	??___ftge,f,c
 19782  004076  0E00               	movlw	0
 19783  004078  2218               	addwfc	??___ftge+1,f,c
 19784  00407A  2219               	addwfc	??___ftge+2,f,c
 19785  00407C  0E00               	movlw	0
 19786  00407E  2417               	addwf	??___ftge,w,c
 19787  004080  6E11               	movwf	___ftge@ff1,c
 19788  004082  0E00               	movlw	0
 19789  004084  2018               	addwfc	??___ftge+1,w,c
 19790  004086  6E12               	movwf	___ftge@ff1+1,c
 19791  004088  0E80               	movlw	128
 19792  00408A  2019               	addwfc	??___ftge+2,w,c
 19793  00408C  6E13               	movwf	___ftge@ff1+2,c
 19794  00408E  D000               	goto	l9338
 19795  004090                     l9338:
 19796  004090  AE16               	btfss	___ftge@ff2+2,7,c
 19797  004092  D017               	goto	l9342
 19798  004094  C014  F017         	movff	___ftge@ff2,??___ftge
 19799  004098  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 19800  00409C  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 19801  0040A0  1E17               	comf	??___ftge,f,c
 19802  0040A2  1E18               	comf	??___ftge+1,f,c
 19803  0040A4  1E19               	comf	??___ftge+2,f,c
 19804  0040A6  2A17               	incf	??___ftge,f,c
 19805  0040A8  0E00               	movlw	0
 19806  0040AA  2218               	addwfc	??___ftge+1,f,c
 19807  0040AC  2219               	addwfc	??___ftge+2,f,c
 19808  0040AE  0E00               	movlw	0
 19809  0040B0  2417               	addwf	??___ftge,w,c
 19810  0040B2  6E14               	movwf	___ftge@ff2,c
 19811  0040B4  0E00               	movlw	0
 19812  0040B6  2018               	addwfc	??___ftge+1,w,c
 19813  0040B8  6E15               	movwf	___ftge@ff2+1,c
 19814  0040BA  0E80               	movlw	128
 19815  0040BC  2019               	addwfc	??___ftge+2,w,c
 19816  0040BE  6E16               	movwf	___ftge@ff2+2,c
 19817  0040C0  D000               	goto	l9342
 19818  0040C2                     l9342:
 19819  0040C2  0E00               	movlw	0
 19820  0040C4  1A11               	xorwf	___ftge@ff1,f,c
 19821  0040C6  0E00               	movlw	0
 19822  0040C8  1A12               	xorwf	___ftge@ff1+1,f,c
 19823  0040CA  0E80               	movlw	128
 19824  0040CC  1A13               	xorwf	___ftge@ff1+2,f,c
 19825  0040CE  0E00               	movlw	0
 19826  0040D0  1A14               	xorwf	___ftge@ff2,f,c
 19827  0040D2  0E00               	movlw	0
 19828  0040D4  1A15               	xorwf	___ftge@ff2+1,f,c
 19829  0040D6  0E80               	movlw	128
 19830  0040D8  1A16               	xorwf	___ftge@ff2+2,f,c
 19831  0040DA  5014               	movf	___ftge@ff2,w,c
 19832  0040DC  5C11               	subwf	___ftge@ff1,w,c
 19833  0040DE  5015               	movf	___ftge@ff2+1,w,c
 19834  0040E0  5812               	subwfb	___ftge@ff1+1,w,c
 19835  0040E2  5016               	movf	___ftge@ff2+2,w,c
 19836  0040E4  5813               	subwfb	___ftge@ff1+2,w,c
 19837  0040E6  B0D8               	btfsc	status,0,c
 19838  0040E8  D002               	goto	l9348
 19839  0040EA  90D8               	bcf	status,0,c
 19840  0040EC  D002               	goto	l1965
 19841  0040EE                     l9348:
 19842  0040EE  80D8               	bsf	status,0,c
 19843  0040F0  D000               	goto	l1965
 19844  0040F2                     l1965:
 19845  0040F2  0012               	return		;funcret
 19846  0040F4                     __end_of___ftge:
 19847                           	opt stack 0
 19848                           tblptru	equ	0xFF8
 19849                           tblptrh	equ	0xFF7
 19850                           tblptrl	equ	0xFF6
 19851                           tablat	equ	0xFF5
 19852                           prodh	equ	0xFF4
 19853                           prodl	equ	0xFF3
 19854                           intcon	equ	0xFF2
 19855                           intcon2	equ	0xFF1
 19856                           postinc0	equ	0xFEE
 19857                           wreg	equ	0xFE8
 19858                           postdec1	equ	0xFE5
 19859                           fsr1l	equ	0xFE1
 19860                           indf2	equ	0xFDF
 19861                           postinc2	equ	0xFDE
 19862                           postdec2	equ	0xFDD
 19863                           fsr2h	equ	0xFDA
 19864                           fsr2l	equ	0xFD9
 19865                           status	equ	0xFD8
 19866                           
 19867 ;; *************** function _do_update_pwm *****************
 19868 ;; Defined at:
 19869 ;;		line 139 in file "utils.c"
 19870 ;; Parameters:    Size  Location     Type
 19871 ;;  duty_cycle      1    wreg     unsigned char 
 19872 ;; Auto vars:     Size  Location     Type
 19873 ;;  duty_cycle      1   66[COMRAM] unsigned char 
 19874 ;;  dc_f            3   63[COMRAM] float 
 19875 ;;  dc_I            2   67[COMRAM] int 
 19876 ;; Return value:  Size  Location     Type
 19877 ;;		None               void
 19878 ;; Registers used:
 19879 ;;		wreg, status,2, status,0, cstack
 19880 ;; Tracked objects:
 19881 ;;		On entry : 0/0
 19882 ;;		On exit  : 0/0
 19883 ;;		Unchanged: 0/0
 19884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19886 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19887 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19888 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19889 ;;Total ram usage:        9 bytes
 19890 ;; Hardware stack levels used:    1
 19891 ;; Hardware stack levels required when called:    5
 19892 ;; This function calls:
 19893 ;;		___ftdiv
 19894 ;;		___ftmul
 19895 ;;		___fttol
 19896 ;;		___lbtoft
 19897 ;; This function is called by:
 19898 ;;		_Monitor_Heater
 19899 ;;		_Turn_Off_Fan
 19900 ;;		_Turn_On_Fan
 19901 ;;		_main
 19902 ;;		_Test_Alarm
 19903 ;;		_Do_Beep_Good
 19904 ;;		_Do_Beep_Bad
 19905 ;;		_Do_Beep
 19906 ;; This function uses a non-reentrant model
 19907 ;;
 19908                           
 19909                           	psect	text100
 19910  003D4C                     __ptext100:
 19911                           	opt stack 0
 19912  003D4C                     _do_update_pwm:
 19913                           	opt stack 25
 19914                           
 19915                           ;incstack = 0
 19916                           ;do_update_pwm@duty_cycle stored from wreg
 19917  003D4C  6E43               	movwf	do_update_pwm@duty_cycle,c
 19918                           
 19919                           ;utils.c: 141: float dc_f;
 19920                           ;utils.c: 142: int dc_I;
 19921                           ;utils.c: 143: PR2 = 0b00000100 ;
 19922  003D4E  0E04               	movlw	4
 19923  003D50  6ECB               	movwf	4043,c	;volatile
 19924                           
 19925                           ;utils.c: 144: T2CON = 0b00000111 ;
 19926  003D52  0E07               	movlw	7
 19927  003D54  6ECA               	movwf	4042,c	;volatile
 19928                           
 19929                           ;utils.c: 145: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 19930  003D56  0E00               	movlw	0
 19931  003D58  6E22               	movwf	___ftmul@f2,c
 19932  003D5A  0E80               	movlw	128
 19933  003D5C  6E23               	movwf	___ftmul@f2+1,c
 19934  003D5E  0E40               	movlw	64
 19935  003D60  6E24               	movwf	___ftmul@f2+2,c
 19936  003D62  5043               	movf	do_update_pwm@duty_cycle,w,c
 19937  003D64  EC26  F027         	call	___lbtoft
 19938  003D68  C019  F01F         	movff	?___lbtoft,___ftmul@f1
 19939  003D6C  C01A  F020         	movff	?___lbtoft+1,___ftmul@f1+1
 19940  003D70  C01B  F021         	movff	?___lbtoft+2,___ftmul@f1+2
 19941  003D74  ECB5  F018         	call	___ftmul	;wreg free
 19942  003D78  C01F  F02E         	movff	?___ftmul,___ftdiv@f1
 19943  003D7C  C020  F02F         	movff	?___ftmul+1,___ftdiv@f1+1
 19944  003D80  C021  F030         	movff	?___ftmul+2,___ftdiv@f1+2
 19945  003D84  0E00               	movlw	0
 19946  003D86  6E31               	movwf	___ftdiv@f2,c
 19947  003D88  0EA0               	movlw	160
 19948  003D8A  6E32               	movwf	___ftdiv@f2+1,c
 19949  003D8C  0E41               	movlw	65
 19950  003D8E  6E33               	movwf	___ftdiv@f2+2,c
 19951  003D90  EC82  F01B         	call	___ftdiv	;wreg free
 19952  003D94  C02E  F040         	movff	?___ftdiv,do_update_pwm@dc_f
 19953  003D98  C02F  F041         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 19954  003D9C  C030  F042         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 19955                           
 19956                           ;utils.c: 146: dc_I = (int) dc_f;
 19957  003DA0  C040  F02E         	movff	do_update_pwm@dc_f,___fttol@f1
 19958  003DA4  C041  F02F         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 19959  003DA8  C042  F030         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 19960  003DAC  EC9E  F01A         	call	___fttol	;wreg free
 19961  003DB0  C02E  F044         	movff	?___fttol,do_update_pwm@dc_I
 19962  003DB4  C02F  F045         	movff	?___fttol+1,do_update_pwm@dc_I+1
 19963                           
 19964                           ;utils.c: 147: if (dc_I > duty_cycle) dc_I++;
 19965  003DB8  5043               	movf	do_update_pwm@duty_cycle,w,c
 19966  003DBA  6E3D               	movwf	??_do_update_pwm& (0+255),c
 19967  003DBC  6A3E               	clrf	(??_do_update_pwm+1)& (0+255),c
 19968  003DBE  5044               	movf	do_update_pwm@dc_I,w,c
 19969  003DC0  5C3D               	subwf	??_do_update_pwm,w,c
 19970  003DC2  503E               	movf	??_do_update_pwm+1,w,c
 19971  003DC4  0A80               	xorlw	128
 19972  003DC6  6E3F               	movwf	(??_do_update_pwm+2)& (0+255),c
 19973  003DC8  5045               	movf	do_update_pwm@dc_I+1,w,c
 19974  003DCA  0A80               	xorlw	128
 19975  003DCC  583F               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 19976  003DCE  B0D8               	btfsc	status,0,c
 19977  003DD0  D003               	goto	l9864
 19978  003DD2  4A44               	infsnz	do_update_pwm@dc_I,f,c
 19979  003DD4  2A45               	incf	do_update_pwm@dc_I+1,f,c
 19980  003DD6  D000               	goto	l9864
 19981  003DD8                     l9864:
 19982                           
 19983                           ;utils.c: 148: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 19984  003DD8  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 19985  003DDC  0E03               	movlw	3
 19986  003DDE  163D               	andwf	??_do_update_pwm,f,c
 19987  003DE0  383D               	swapf	??_do_update_pwm,w,c
 19988  003DE2  0BF0               	andlw	240
 19989  003DE4  090C               	iorlw	12
 19990  003DE6  6EBD               	movwf	4029,c	;volatile
 19991                           
 19992                           ;utils.c: 149: CCPR1L = (dc_I) >> 2;
 19993  003DE8  C044  F03D         	movff	do_update_pwm@dc_I,??_do_update_pwm
 19994  003DEC  C045  F03E         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 19995  003DF0  343E               	rlcf	??_do_update_pwm+1,w,c
 19996  003DF2  323E               	rrcf	??_do_update_pwm+1,f,c
 19997  003DF4  323D               	rrcf	??_do_update_pwm,f,c
 19998  003DF6  343E               	rlcf	??_do_update_pwm+1,w,c
 19999  003DF8  323E               	rrcf	??_do_update_pwm+1,f,c
 20000  003DFA  323D               	rrcf	??_do_update_pwm,f,c
 20001  003DFC  503D               	movf	??_do_update_pwm,w,c
 20002  003DFE  6EBE               	movwf	4030,c	;volatile
 20003  003E00  0012               	return		;funcret
 20004  003E02                     __end_of_do_update_pwm:
 20005                           	opt stack 0
 20006                           tblptru	equ	0xFF8
 20007                           tblptrh	equ	0xFF7
 20008                           tblptrl	equ	0xFF6
 20009                           tablat	equ	0xFF5
 20010                           prodh	equ	0xFF4
 20011                           prodl	equ	0xFF3
 20012                           intcon	equ	0xFF2
 20013                           intcon2	equ	0xFF1
 20014                           postinc0	equ	0xFEE
 20015                           wreg	equ	0xFE8
 20016                           postdec1	equ	0xFE5
 20017                           fsr1l	equ	0xFE1
 20018                           indf2	equ	0xFDF
 20019                           postinc2	equ	0xFDE
 20020                           postdec2	equ	0xFDD
 20021                           fsr2h	equ	0xFDA
 20022                           fsr2l	equ	0xFD9
 20023                           status	equ	0xFD8
 20024                           
 20025 ;; *************** function ___lbtoft *****************
 20026 ;; Defined at:
 20027 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 20028 ;; Parameters:    Size  Location     Type
 20029 ;;  c               1    wreg     unsigned char 
 20030 ;; Auto vars:     Size  Location     Type
 20031 ;;  c               1   27[COMRAM] unsigned char 
 20032 ;; Return value:  Size  Location     Type
 20033 ;;                  3   24[COMRAM] float 
 20034 ;; Registers used:
 20035 ;;		wreg, status,2, status,0, cstack
 20036 ;; Tracked objects:
 20037 ;;		On entry : 0/0
 20038 ;;		On exit  : 0/0
 20039 ;;		Unchanged: 0/0
 20040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20041 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20042 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20044 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20045 ;;Total ram usage:        4 bytes
 20046 ;; Hardware stack levels used:    1
 20047 ;; Hardware stack levels required when called:    4
 20048 ;; This function calls:
 20049 ;;		___ftpack
 20050 ;; This function is called by:
 20051 ;;		_do_update_pwm
 20052 ;; This function uses a non-reentrant model
 20053 ;;
 20054                           
 20055                           	psect	text101
 20056  004E4C                     __ptext101:
 20057                           	opt stack 0
 20058  004E4C                     ___lbtoft:
 20059                           	opt stack 25
 20060                           
 20061                           ;incstack = 0
 20062                           ;___lbtoft@c stored from wreg
 20063  004E4C  6E1C               	movwf	___lbtoft@c,c
 20064  004E4E  501C               	movf	___lbtoft@c,w,c
 20065  004E50  6E11               	movwf	___ftpack@arg,c
 20066  004E52  6A12               	clrf	___ftpack@arg+1,c
 20067  004E54  6A13               	clrf	___ftpack@arg+2,c
 20068  004E56  0E8E               	movlw	142
 20069  004E58  6E14               	movwf	___ftpack@exp,c
 20070  004E5A  0E00               	movlw	0
 20071  004E5C  6E15               	movwf	___ftpack@sign,c
 20072  004E5E  ECCD  F01C         	call	___ftpack	;wreg free
 20073  004E62  C011  F019         	movff	?___ftpack,?___lbtoft
 20074  004E66  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 20075  004E6A  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 20076  004E6E  D000               	goto	l2033
 20077  004E70                     l2033:
 20078  004E70  0012               	return		;funcret
 20079  004E72                     __end_of___lbtoft:
 20080                           	opt stack 0
 20081                           tblptru	equ	0xFF8
 20082                           tblptrh	equ	0xFF7
 20083                           tblptrl	equ	0xFF6
 20084                           tablat	equ	0xFF5
 20085                           prodh	equ	0xFF4
 20086                           prodl	equ	0xFF3
 20087                           intcon	equ	0xFF2
 20088                           intcon2	equ	0xFF1
 20089                           postinc0	equ	0xFEE
 20090                           wreg	equ	0xFE8
 20091                           postdec1	equ	0xFE5
 20092                           fsr1l	equ	0xFE1
 20093                           indf2	equ	0xFDF
 20094                           postinc2	equ	0xFDE
 20095                           postdec2	equ	0xFDD
 20096                           fsr2h	equ	0xFDA
 20097                           fsr2l	equ	0xFD9
 20098                           status	equ	0xFD8
 20099                           
 20100 ;; *************** function ___fttol *****************
 20101 ;; Defined at:
 20102 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 20103 ;; Parameters:    Size  Location     Type
 20104 ;;  f1              3   45[COMRAM] float 
 20105 ;; Auto vars:     Size  Location     Type
 20106 ;;  lval            4   55[COMRAM] unsigned long 
 20107 ;;  exp1            1   59[COMRAM] unsigned char 
 20108 ;;  sign1           1   54[COMRAM] unsigned char 
 20109 ;; Return value:  Size  Location     Type
 20110 ;;                  4   45[COMRAM] long 
 20111 ;; Registers used:
 20112 ;;		wreg, status,2, status,0
 20113 ;; Tracked objects:
 20114 ;;		On entry : 0/0
 20115 ;;		On exit  : 0/0
 20116 ;;		Unchanged: 0/0
 20117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20118 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20119 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20120 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20121 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20122 ;;Total ram usage:       15 bytes
 20123 ;; Hardware stack levels used:    1
 20124 ;; Hardware stack levels required when called:    3
 20125 ;; This function calls:
 20126 ;;		Nothing
 20127 ;; This function is called by:
 20128 ;;		_Update_Screen
 20129 ;;		_do_update_pwm
 20130 ;;		_printf
 20131 ;; This function uses a non-reentrant model
 20132 ;;
 20133                           
 20134                           	psect	text102
 20135  00353C                     __ptext102:
 20136                           	opt stack 0
 20137  00353C                     ___fttol:
 20138                           	opt stack 26
 20139                           
 20140                           ;incstack = 0
 20141  00353C  C030  F032         	movff	___fttol@f1+2,??___fttol
 20142  003540  6A33               	clrf	(??___fttol+1)& (0+255),c
 20143  003542  6A34               	clrf	(??___fttol+2)& (0+255),c
 20144  003544  342F               	rlcf	___fttol@f1+1,w,c
 20145  003546  3632               	rlcf	??___fttol& (0+255),f,c
 20146  003548  E301               	bnc	u7721
 20147  00354A  8033               	bsf	(??___fttol+1)& (0+255),0,c
 20148  00354C                     u7721:
 20149  00354C  5032               	movf	??___fttol,w,c
 20150  00354E  6E3C               	movwf	___fttol@exp1,c
 20151  003550  503C               	movf	___fttol@exp1,w,c
 20152  003552  A4D8               	btfss	status,2,c
 20153  003554  D002               	goto	l9362
 20154  003556  D039               	goto	l9386
 20155  003558  D063               	goto	l1992
 20156  00355A                     l9362:
 20157  00355A  0E17               	movlw	23
 20158  00355C  6E32               	movwf	??___fttol& (0+255),c
 20159  00355E  C02E  F033         	movff	___fttol@f1,??___fttol+1
 20160  003562  C02F  F034         	movff	___fttol@f1+1,??___fttol+2
 20161  003566  C030  F035         	movff	___fttol@f1+2,??___fttol+3
 20162  00356A  2832               	incf	??___fttol,w,c
 20163  00356C  6E36               	movwf	(??___fttol+4)& (0+255),c
 20164  00356E  D004               	goto	u7740
 20165  003570                     u7745:
 20166  003570  90D8               	bcf	status,0,c
 20167  003572  3235               	rrcf	??___fttol+3,f,c
 20168  003574  3234               	rrcf	??___fttol+2,f,c
 20169  003576  3233               	rrcf	??___fttol+1,f,c
 20170  003578                     u7740:
 20171  003578  2E36               	decfsz	(??___fttol+4)& (0+255),f,c
 20172  00357A  D7FA               	goto	u7745
 20173  00357C  5033               	movf	??___fttol+1,w,c
 20174  00357E  6E37               	movwf	___fttol@sign1,c
 20175  003580  8E2F               	bsf	___fttol@f1+1,7,c
 20176  003582  0EFF               	movlw	255
 20177  003584  162E               	andwf	___fttol@f1,f,c
 20178  003586  0EFF               	movlw	255
 20179  003588  162F               	andwf	___fttol@f1+1,f,c
 20180  00358A  0E00               	movlw	0
 20181  00358C  1630               	andwf	___fttol@f1+2,f,c
 20182  00358E  502E               	movf	___fttol@f1,w,c
 20183  003590  6E38               	movwf	___fttol@lval,c
 20184  003592  502F               	movf	___fttol@f1+1,w,c
 20185  003594  6E39               	movwf	___fttol@lval+1,c
 20186  003596  5030               	movf	___fttol@f1+2,w,c
 20187  003598  6E3A               	movwf	___fttol@lval+2,c
 20188  00359A  6A3B               	clrf	___fttol@lval+3,c
 20189  00359C  0E8E               	movlw	142
 20190  00359E  5E3C               	subwf	___fttol@exp1,f,c
 20191  0035A0  AE3C               	btfss	___fttol@exp1,7,c
 20192  0035A2  D010               	goto	l9384
 20193  0035A4  503C               	movf	___fttol@exp1,w,c
 20194  0035A6  0A80               	xorlw	128
 20195  0035A8  0F8F               	addlw	143
 20196  0035AA  B0D8               	btfsc	status,0,c
 20197  0035AC  D003               	goto	l9380
 20198  0035AE  D00D               	goto	l9386
 20199  0035B0  D037               	goto	l1992
 20200  0035B2  D000               	goto	l9380
 20201  0035B4                     l9380:
 20202  0035B4  90D8               	bcf	status,0,c
 20203  0035B6  323B               	rrcf	___fttol@lval+3,f,c
 20204  0035B8  323A               	rrcf	___fttol@lval+2,f,c
 20205  0035BA  3239               	rrcf	___fttol@lval+1,f,c
 20206  0035BC  3238               	rrcf	___fttol@lval,f,c
 20207  0035BE  3E3C               	incfsz	___fttol@exp1,f,c
 20208  0035C0  D7F9               	goto	l9380
 20209  0035C2  D019               	goto	l9394
 20210  0035C4                     l9384:
 20211  0035C4  0E17               	movlw	23
 20212  0035C6  643C               	cpfsgt	___fttol@exp1,c
 20213  0035C8  D011               	goto	l9392
 20214  0035CA                     l9386:
 20215  0035CA  0E00               	movlw	0
 20216  0035CC  6E2E               	movwf	?___fttol,c
 20217  0035CE  0E00               	movlw	0
 20218  0035D0  6E2F               	movwf	?___fttol+1,c
 20219  0035D2  0E00               	movlw	0
 20220  0035D4  6E30               	movwf	?___fttol+2,c
 20221  0035D6  0E00               	movlw	0
 20222  0035D8  6E31               	movwf	?___fttol+3,c
 20223  0035DA  D022               	goto	l1992
 20224  0035DC  D007               	goto	l9392
 20225  0035DE                     l9390:
 20226  0035DE  90D8               	bcf	status,0,c
 20227  0035E0  3638               	rlcf	___fttol@lval,f,c
 20228  0035E2  3639               	rlcf	___fttol@lval+1,f,c
 20229  0035E4  363A               	rlcf	___fttol@lval+2,f,c
 20230  0035E6  363B               	rlcf	___fttol@lval+3,f,c
 20231  0035E8  063C               	decf	___fttol@exp1,f,c
 20232  0035EA  D000               	goto	l9392
 20233  0035EC                     l9392:
 20234  0035EC  503C               	movf	___fttol@exp1,w,c
 20235  0035EE  B4D8               	btfsc	status,2,c
 20236  0035F0  D002               	goto	l9394
 20237  0035F2  D7F5               	goto	l9390
 20238  0035F4  D000               	goto	l9394
 20239  0035F6                     l9394:
 20240  0035F6  5037               	movf	___fttol@sign1,w,c
 20241  0035F8  B4D8               	btfsc	status,2,c
 20242  0035FA  D009               	goto	l9398
 20243  0035FC  1E3B               	comf	___fttol@lval+3,f,c
 20244  0035FE  1E3A               	comf	___fttol@lval+2,f,c
 20245  003600  1E39               	comf	___fttol@lval+1,f,c
 20246  003602  6C38               	negf	___fttol@lval,c
 20247  003604  0E00               	movlw	0
 20248  003606  2239               	addwfc	___fttol@lval+1,f,c
 20249  003608  223A               	addwfc	___fttol@lval+2,f,c
 20250  00360A  223B               	addwfc	___fttol@lval+3,f,c
 20251  00360C  D000               	goto	l9398
 20252  00360E                     l9398:
 20253  00360E  C038  F02E         	movff	___fttol@lval,?___fttol
 20254  003612  C039  F02F         	movff	___fttol@lval+1,?___fttol+1
 20255  003616  C03A  F030         	movff	___fttol@lval+2,?___fttol+2
 20256  00361A  C03B  F031         	movff	___fttol@lval+3,?___fttol+3
 20257  00361E  D000               	goto	l1992
 20258  003620                     l1992:
 20259  003620  0012               	return		;funcret
 20260  003622                     __end_of___fttol:
 20261                           	opt stack 0
 20262                           tblptru	equ	0xFF8
 20263                           tblptrh	equ	0xFF7
 20264                           tblptrl	equ	0xFF6
 20265                           tablat	equ	0xFF5
 20266                           prodh	equ	0xFF4
 20267                           prodl	equ	0xFF3
 20268                           intcon	equ	0xFF2
 20269                           intcon2	equ	0xFF1
 20270                           postinc0	equ	0xFEE
 20271                           wreg	equ	0xFE8
 20272                           postdec1	equ	0xFE5
 20273                           fsr1l	equ	0xFE1
 20274                           indf2	equ	0xFDF
 20275                           postinc2	equ	0xFDE
 20276                           postdec2	equ	0xFDD
 20277                           fsr2h	equ	0xFDA
 20278                           fsr2l	equ	0xFD9
 20279                           status	equ	0xFD8
 20280                           
 20281 ;; *************** function ___ftmul *****************
 20282 ;; Defined at:
 20283 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 20284 ;; Parameters:    Size  Location     Type
 20285 ;;  f1              3   30[COMRAM] float 
 20286 ;;  f2              3   33[COMRAM] float 
 20287 ;; Auto vars:     Size  Location     Type
 20288 ;;  f3_as_produc    3   40[COMRAM] unsigned um
 20289 ;;  sign            1   44[COMRAM] unsigned char 
 20290 ;;  cntr            1   43[COMRAM] unsigned char 
 20291 ;;  exp             1   39[COMRAM] unsigned char 
 20292 ;; Return value:  Size  Location     Type
 20293 ;;                  3   30[COMRAM] float 
 20294 ;; Registers used:
 20295 ;;		wreg, status,2, status,0, cstack
 20296 ;; Tracked objects:
 20297 ;;		On entry : 0/0
 20298 ;;		On exit  : 0/0
 20299 ;;		Unchanged: 0/0
 20300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20301 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20302 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20303 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20304 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20305 ;;Total ram usage:       15 bytes
 20306 ;; Hardware stack levels used:    1
 20307 ;; Hardware stack levels required when called:    4
 20308 ;; This function calls:
 20309 ;;		___ftpack
 20310 ;; This function is called by:
 20311 ;;		_Update_Screen
 20312 ;;		_do_update_pwm
 20313 ;;		_fround
 20314 ;;		_scale
 20315 ;;		_printf
 20316 ;; This function uses a non-reentrant model
 20317 ;;
 20318                           
 20319                           	psect	text103
 20320  00316A                     __ptext103:
 20321                           	opt stack 0
 20322  00316A                     ___ftmul:
 20323                           	opt stack 24
 20324                           
 20325                           ;incstack = 0
 20326  00316A  C021  F025         	movff	___ftmul@f1+2,??___ftmul
 20327  00316E  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20328  003170  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20329  003172  3420               	rlcf	___ftmul@f1+1,w,c
 20330  003174  3625               	rlcf	??___ftmul& (0+255),f,c
 20331  003176  E301               	bnc	u7091
 20332  003178  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20333  00317A                     u7091:
 20334  00317A  5025               	movf	??___ftmul,w,c
 20335  00317C  6E28               	movwf	___ftmul@exp,c
 20336  00317E  5028               	movf	___ftmul@exp,w,c
 20337  003180  A4D8               	btfss	status,2,c
 20338  003182  D002               	goto	l8868
 20339  003184  D00E               	goto	l8870
 20340  003186  D06C               	goto	l1971
 20341  003188                     l8868:
 20342  003188  C024  F025         	movff	___ftmul@f2+2,??___ftmul
 20343  00318C  6A26               	clrf	(??___ftmul+1)& (0+255),c
 20344  00318E  6A27               	clrf	(??___ftmul+2)& (0+255),c
 20345  003190  3423               	rlcf	___ftmul@f2+1,w,c
 20346  003192  3625               	rlcf	??___ftmul& (0+255),f,c
 20347  003194  E301               	bnc	u7111
 20348  003196  8026               	bsf	(??___ftmul+1)& (0+255),0,c
 20349  003198                     u7111:
 20350  003198  5025               	movf	??___ftmul,w,c
 20351  00319A  6E2D               	movwf	___ftmul@sign,c
 20352  00319C  502D               	movf	___ftmul@sign,w,c
 20353  00319E  A4D8               	btfss	status,2,c
 20354  0031A0  D007               	goto	l8874
 20355  0031A2                     l8870:
 20356  0031A2  0E00               	movlw	0
 20357  0031A4  6E1F               	movwf	?___ftmul,c
 20358  0031A6  0E00               	movlw	0
 20359  0031A8  6E20               	movwf	?___ftmul+1,c
 20360  0031AA  0E00               	movlw	0
 20361  0031AC  6E21               	movwf	?___ftmul+2,c
 20362  0031AE  D058               	goto	l1971
 20363  0031B0                     l8874:
 20364  0031B0  502D               	movf	___ftmul@sign,w,c
 20365  0031B2  0F7B               	addlw	123
 20366  0031B4  2628               	addwf	___ftmul@exp,f,c
 20367  0031B6  C021  F02D         	movff	___ftmul@f1+2,___ftmul@sign
 20368  0031BA  5024               	movf	___ftmul@f2+2,w,c
 20369  0031BC  1A2D               	xorwf	___ftmul@sign,f,c
 20370  0031BE  0E80               	movlw	128
 20371  0031C0  162D               	andwf	___ftmul@sign,f,c
 20372  0031C2  8E20               	bsf	___ftmul@f1+1,7,c
 20373  0031C4  8E23               	bsf	___ftmul@f2+1,7,c
 20374  0031C6  0EFF               	movlw	255
 20375  0031C8  1622               	andwf	___ftmul@f2,f,c
 20376  0031CA  0EFF               	movlw	255
 20377  0031CC  1623               	andwf	___ftmul@f2+1,f,c
 20378  0031CE  0E00               	movlw	0
 20379  0031D0  1624               	andwf	___ftmul@f2+2,f,c
 20380  0031D2  0E00               	movlw	0
 20381  0031D4  6E29               	movwf	___ftmul@f3_as_product,c
 20382  0031D6  0E00               	movlw	0
 20383  0031D8  6E2A               	movwf	___ftmul@f3_as_product+1,c
 20384  0031DA  0E00               	movlw	0
 20385  0031DC  6E2B               	movwf	___ftmul@f3_as_product+2,c
 20386  0031DE  0E07               	movlw	7
 20387  0031E0  6E2C               	movwf	___ftmul@cntr,c
 20388  0031E2  D000               	goto	l8888
 20389  0031E4                     l8888:
 20390  0031E4  A01F               	btfss	___ftmul@f1,0,c
 20391  0031E6  D007               	goto	l8892
 20392  0031E8  5022               	movf	___ftmul@f2,w,c
 20393  0031EA  2629               	addwf	___ftmul@f3_as_product,f,c
 20394  0031EC  5023               	movf	___ftmul@f2+1,w,c
 20395  0031EE  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20396  0031F0  5024               	movf	___ftmul@f2+2,w,c
 20397  0031F2  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20398  0031F4  D000               	goto	l8892
 20399  0031F6                     l8892:
 20400  0031F6  90D8               	bcf	status,0,c
 20401  0031F8  3221               	rrcf	___ftmul@f1+2,f,c
 20402  0031FA  3220               	rrcf	___ftmul@f1+1,f,c
 20403  0031FC  321F               	rrcf	___ftmul@f1,f,c
 20404  0031FE  90D8               	bcf	status,0,c
 20405  003200  3622               	rlcf	___ftmul@f2,f,c
 20406  003202  3623               	rlcf	___ftmul@f2+1,f,c
 20407  003204  3624               	rlcf	___ftmul@f2+2,f,c
 20408  003206  2E2C               	decfsz	___ftmul@cntr,f,c
 20409  003208  D7ED               	goto	l8888
 20410  00320A  D000               	goto	l8896
 20411  00320C                     l8896:
 20412  00320C  0E09               	movlw	9
 20413  00320E  6E2C               	movwf	___ftmul@cntr,c
 20414  003210  D000               	goto	l8898
 20415  003212                     l8898:
 20416  003212  A01F               	btfss	___ftmul@f1,0,c
 20417  003214  D007               	goto	l8902
 20418  003216  5022               	movf	___ftmul@f2,w,c
 20419  003218  2629               	addwf	___ftmul@f3_as_product,f,c
 20420  00321A  5023               	movf	___ftmul@f2+1,w,c
 20421  00321C  222A               	addwfc	___ftmul@f3_as_product+1,f,c
 20422  00321E  5024               	movf	___ftmul@f2+2,w,c
 20423  003220  222B               	addwfc	___ftmul@f3_as_product+2,f,c
 20424  003222  D000               	goto	l8902
 20425  003224                     l8902:
 20426  003224  90D8               	bcf	status,0,c
 20427  003226  3221               	rrcf	___ftmul@f1+2,f,c
 20428  003228  3220               	rrcf	___ftmul@f1+1,f,c
 20429  00322A  321F               	rrcf	___ftmul@f1,f,c
 20430  00322C  90D8               	bcf	status,0,c
 20431  00322E  322B               	rrcf	___ftmul@f3_as_product+2,f,c
 20432  003230  322A               	rrcf	___ftmul@f3_as_product+1,f,c
 20433  003232  3229               	rrcf	___ftmul@f3_as_product,f,c
 20434  003234  2E2C               	decfsz	___ftmul@cntr,f,c
 20435  003236  D7ED               	goto	l8898
 20436  003238  D000               	goto	l8906
 20437  00323A                     l8906:
 20438  00323A  C029  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 20439  00323E  C02A  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 20440  003242  C02B  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 20441  003246  C028  F014         	movff	___ftmul@exp,___ftpack@exp
 20442  00324A  C02D  F015         	movff	___ftmul@sign,___ftpack@sign
 20443  00324E  ECCD  F01C         	call	___ftpack	;wreg free
 20444  003252  C011  F01F         	movff	?___ftpack,?___ftmul
 20445  003256  C012  F020         	movff	?___ftpack+1,?___ftmul+1
 20446  00325A  C013  F021         	movff	?___ftpack+2,?___ftmul+2
 20447  00325E  D000               	goto	l1971
 20448  003260                     l1971:
 20449  003260  0012               	return		;funcret
 20450  003262                     __end_of___ftmul:
 20451                           	opt stack 0
 20452                           tblptru	equ	0xFF8
 20453                           tblptrh	equ	0xFF7
 20454                           tblptrl	equ	0xFF6
 20455                           tablat	equ	0xFF5
 20456                           prodh	equ	0xFF4
 20457                           prodl	equ	0xFF3
 20458                           intcon	equ	0xFF2
 20459                           intcon2	equ	0xFF1
 20460                           postinc0	equ	0xFEE
 20461                           wreg	equ	0xFE8
 20462                           postdec1	equ	0xFE5
 20463                           fsr1l	equ	0xFE1
 20464                           indf2	equ	0xFDF
 20465                           postinc2	equ	0xFDE
 20466                           postdec2	equ	0xFDD
 20467                           fsr2h	equ	0xFDA
 20468                           fsr2l	equ	0xFD9
 20469                           status	equ	0xFD8
 20470                           
 20471 ;; *************** function ___ftdiv *****************
 20472 ;; Defined at:
 20473 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 20474 ;; Parameters:    Size  Location     Type
 20475 ;;  f1              3   45[COMRAM] float 
 20476 ;;  f2              3   48[COMRAM] float 
 20477 ;; Auto vars:     Size  Location     Type
 20478 ;;  f3              3   55[COMRAM] float 
 20479 ;;  sign            1   59[COMRAM] unsigned char 
 20480 ;;  exp             1   58[COMRAM] unsigned char 
 20481 ;;  cntr            1   54[COMRAM] unsigned char 
 20482 ;; Return value:  Size  Location     Type
 20483 ;;                  3   45[COMRAM] float 
 20484 ;; Registers used:
 20485 ;;		wreg, status,2, status,0, cstack
 20486 ;; Tracked objects:
 20487 ;;		On entry : 0/0
 20488 ;;		On exit  : 0/0
 20489 ;;		Unchanged: 0/0
 20490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20491 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20492 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20493 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20494 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20495 ;;Total ram usage:       15 bytes
 20496 ;; Hardware stack levels used:    1
 20497 ;; Hardware stack levels required when called:    4
 20498 ;; This function calls:
 20499 ;;		___ftpack
 20500 ;; This function is called by:
 20501 ;;		_do_update_pwm
 20502 ;;		_read_volt
 20503 ;; This function uses a non-reentrant model
 20504 ;;
 20505                           
 20506                           	psect	text104
 20507  003704                     __ptext104:
 20508                           	opt stack 0
 20509  003704                     ___ftdiv:
 20510                           	opt stack 25
 20511                           
 20512                           ;incstack = 0
 20513  003704  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
 20514  003708  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20515  00370A  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20516  00370C  342F               	rlcf	___ftdiv@f1+1,w,c
 20517  00370E  3634               	rlcf	??___ftdiv& (0+255),f,c
 20518  003710  E301               	bnc	u8451
 20519  003712  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20520  003714                     u8451:
 20521  003714  5034               	movf	??___ftdiv,w,c
 20522  003716  6E3B               	movwf	___ftdiv@exp,c
 20523  003718  503B               	movf	___ftdiv@exp,w,c
 20524  00371A  A4D8               	btfss	status,2,c
 20525  00371C  D002               	goto	l9810
 20526  00371E  D00E               	goto	l9812
 20527  003720  D061               	goto	l1939
 20528  003722                     l9810:
 20529  003722  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
 20530  003726  6A35               	clrf	(??___ftdiv+1)& (0+255),c
 20531  003728  6A36               	clrf	(??___ftdiv+2)& (0+255),c
 20532  00372A  3432               	rlcf	___ftdiv@f2+1,w,c
 20533  00372C  3634               	rlcf	??___ftdiv& (0+255),f,c
 20534  00372E  E301               	bnc	u8471
 20535  003730  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
 20536  003732                     u8471:
 20537  003732  5034               	movf	??___ftdiv,w,c
 20538  003734  6E3C               	movwf	___ftdiv@sign,c
 20539  003736  503C               	movf	___ftdiv@sign,w,c
 20540  003738  A4D8               	btfss	status,2,c
 20541  00373A  D007               	goto	l9816
 20542  00373C                     l9812:
 20543  00373C  0E00               	movlw	0
 20544  00373E  6E2E               	movwf	?___ftdiv,c
 20545  003740  0E00               	movlw	0
 20546  003742  6E2F               	movwf	?___ftdiv+1,c
 20547  003744  0E00               	movlw	0
 20548  003746  6E30               	movwf	?___ftdiv+2,c
 20549  003748  D04D               	goto	l1939
 20550  00374A                     l9816:
 20551  00374A  0E00               	movlw	0
 20552  00374C  6E38               	movwf	___ftdiv@f3,c
 20553  00374E  0E00               	movlw	0
 20554  003750  6E39               	movwf	___ftdiv@f3+1,c
 20555  003752  0E00               	movlw	0
 20556  003754  6E3A               	movwf	___ftdiv@f3+2,c
 20557  003756  503C               	movf	___ftdiv@sign,w,c
 20558  003758  0F89               	addlw	137
 20559  00375A  5E3B               	subwf	___ftdiv@exp,f,c
 20560  00375C  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
 20561  003760  5033               	movf	___ftdiv@f2+2,w,c
 20562  003762  1A3C               	xorwf	___ftdiv@sign,f,c
 20563  003764  0E80               	movlw	128
 20564  003766  163C               	andwf	___ftdiv@sign,f,c
 20565  003768  8E2F               	bsf	___ftdiv@f1+1,7,c
 20566  00376A  0EFF               	movlw	255
 20567  00376C  162E               	andwf	___ftdiv@f1,f,c
 20568  00376E  0EFF               	movlw	255
 20569  003770  162F               	andwf	___ftdiv@f1+1,f,c
 20570  003772  0E00               	movlw	0
 20571  003774  1630               	andwf	___ftdiv@f1+2,f,c
 20572  003776  8E32               	bsf	___ftdiv@f2+1,7,c
 20573  003778  0EFF               	movlw	255
 20574  00377A  1631               	andwf	___ftdiv@f2,f,c
 20575  00377C  0EFF               	movlw	255
 20576  00377E  1632               	andwf	___ftdiv@f2+1,f,c
 20577  003780  0E00               	movlw	0
 20578  003782  1633               	andwf	___ftdiv@f2+2,f,c
 20579  003784  0E18               	movlw	24
 20580  003786  6E37               	movwf	___ftdiv@cntr,c
 20581  003788  D000               	goto	l9836
 20582  00378A                     l9836:
 20583  00378A  90D8               	bcf	status,0,c
 20584  00378C  3638               	rlcf	___ftdiv@f3,f,c
 20585  00378E  3639               	rlcf	___ftdiv@f3+1,f,c
 20586  003790  363A               	rlcf	___ftdiv@f3+2,f,c
 20587  003792  5031               	movf	___ftdiv@f2,w,c
 20588  003794  5C2E               	subwf	___ftdiv@f1,w,c
 20589  003796  5032               	movf	___ftdiv@f2+1,w,c
 20590  003798  582F               	subwfb	___ftdiv@f1+1,w,c
 20591  00379A  5033               	movf	___ftdiv@f2+2,w,c
 20592  00379C  5830               	subwfb	___ftdiv@f1+2,w,c
 20593  00379E  A0D8               	btfss	status,0,c
 20594  0037A0  D007               	goto	l1942
 20595  0037A2  5031               	movf	___ftdiv@f2,w,c
 20596  0037A4  5E2E               	subwf	___ftdiv@f1,f,c
 20597  0037A6  5032               	movf	___ftdiv@f2+1,w,c
 20598  0037A8  5A2F               	subwfb	___ftdiv@f1+1,f,c
 20599  0037AA  5033               	movf	___ftdiv@f2+2,w,c
 20600  0037AC  5A30               	subwfb	___ftdiv@f1+2,f,c
 20601  0037AE  8038               	bsf	___ftdiv@f3,0,c
 20602  0037B0                     l1942:
 20603  0037B0  90D8               	bcf	status,0,c
 20604  0037B2  362E               	rlcf	___ftdiv@f1,f,c
 20605  0037B4  362F               	rlcf	___ftdiv@f1+1,f,c
 20606  0037B6  3630               	rlcf	___ftdiv@f1+2,f,c
 20607  0037B8  2E37               	decfsz	___ftdiv@cntr,f,c
 20608  0037BA  D7E7               	goto	l9836
 20609  0037BC  D000               	goto	l9846
 20610  0037BE                     l9846:
 20611  0037BE  C038  F011         	movff	___ftdiv@f3,___ftpack@arg
 20612  0037C2  C039  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 20613  0037C6  C03A  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 20614  0037CA  C03B  F014         	movff	___ftdiv@exp,___ftpack@exp
 20615  0037CE  C03C  F015         	movff	___ftdiv@sign,___ftpack@sign
 20616  0037D2  ECCD  F01C         	call	___ftpack	;wreg free
 20617  0037D6  C011  F02E         	movff	?___ftpack,?___ftdiv
 20618  0037DA  C012  F02F         	movff	?___ftpack+1,?___ftdiv+1
 20619  0037DE  C013  F030         	movff	?___ftpack+2,?___ftdiv+2
 20620  0037E2  D000               	goto	l1939
 20621  0037E4                     l1939:
 20622  0037E4  0012               	return		;funcret
 20623  0037E6                     __end_of___ftdiv:
 20624                           	opt stack 0
 20625                           tblptru	equ	0xFF8
 20626                           tblptrh	equ	0xFF7
 20627                           tblptrl	equ	0xFF6
 20628                           tablat	equ	0xFF5
 20629                           prodh	equ	0xFF4
 20630                           prodl	equ	0xFF3
 20631                           intcon	equ	0xFF2
 20632                           intcon2	equ	0xFF1
 20633                           postinc0	equ	0xFEE
 20634                           wreg	equ	0xFE8
 20635                           postdec1	equ	0xFE5
 20636                           fsr1l	equ	0xFE1
 20637                           indf2	equ	0xFDF
 20638                           postinc2	equ	0xFDE
 20639                           postdec2	equ	0xFDD
 20640                           fsr2h	equ	0xFDA
 20641                           fsr2l	equ	0xFD9
 20642                           status	equ	0xFD8
 20643                           
 20644 ;; *************** function ___ftpack *****************
 20645 ;; Defined at:
 20646 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 20647 ;; Parameters:    Size  Location     Type
 20648 ;;  arg             3   16[COMRAM] unsigned um
 20649 ;;  exp             1   19[COMRAM] unsigned char 
 20650 ;;  sign            1   20[COMRAM] unsigned char 
 20651 ;; Auto vars:     Size  Location     Type
 20652 ;;		None
 20653 ;; Return value:  Size  Location     Type
 20654 ;;                  3   16[COMRAM] float 
 20655 ;; Registers used:
 20656 ;;		wreg, status,2, status,0
 20657 ;; Tracked objects:
 20658 ;;		On entry : 0/0
 20659 ;;		On exit  : 0/0
 20660 ;;		Unchanged: 0/0
 20661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20662 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20665 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20666 ;;Total ram usage:        8 bytes
 20667 ;; Hardware stack levels used:    1
 20668 ;; Hardware stack levels required when called:    3
 20669 ;; This function calls:
 20670 ;;		Nothing
 20671 ;; This function is called by:
 20672 ;;		___awtoft
 20673 ;;		___ftadd
 20674 ;;		___ftdiv
 20675 ;;		___ftmul
 20676 ;;		___lbtoft
 20677 ;;		___lltoft
 20678 ;; This function uses a non-reentrant model
 20679 ;;
 20680                           
 20681                           	psect	text105
 20682  00399A                     __ptext105:
 20683                           	opt stack 0
 20684  00399A                     ___ftpack:
 20685                           	opt stack 25
 20686                           
 20687                           ;incstack = 0
 20688  00399A  5014               	movf	___ftpack@exp,w,c
 20689  00399C  B4D8               	btfsc	status,2,c
 20690  00399E  D005               	goto	l8746
 20691  0039A0  5011               	movf	___ftpack@arg,w,c
 20692  0039A2  1012               	iorwf	___ftpack@arg+1,w,c
 20693  0039A4  1013               	iorwf	___ftpack@arg+2,w,c
 20694  0039A6  A4D8               	btfss	status,2,c
 20695  0039A8  D00E               	goto	l8752
 20696  0039AA                     l8746:
 20697  0039AA  0E00               	movlw	0
 20698  0039AC  6E11               	movwf	?___ftpack,c
 20699  0039AE  0E00               	movlw	0
 20700  0039B0  6E12               	movwf	?___ftpack+1,c
 20701  0039B2  0E00               	movlw	0
 20702  0039B4  6E13               	movwf	?___ftpack+2,c
 20703  0039B6  D053               	goto	l1867
 20704  0039B8  D006               	goto	l8752
 20705  0039BA                     l8750:
 20706  0039BA  2A14               	incf	___ftpack@exp,f,c
 20707  0039BC  90D8               	bcf	status,0,c
 20708  0039BE  3213               	rrcf	___ftpack@arg+2,f,c
 20709  0039C0  3212               	rrcf	___ftpack@arg+1,f,c
 20710  0039C2  3211               	rrcf	___ftpack@arg,f,c
 20711  0039C4  D000               	goto	l8752
 20712  0039C6                     l8752:
 20713  0039C6  0E00               	movlw	0
 20714  0039C8  1411               	andwf	___ftpack@arg,w,c
 20715  0039CA  6E16               	movwf	??___ftpack& (0+255),c
 20716  0039CC  0E00               	movlw	0
 20717  0039CE  1412               	andwf	___ftpack@arg+1,w,c
 20718  0039D0  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20719  0039D2  0EFE               	movlw	254
 20720  0039D4  1413               	andwf	___ftpack@arg+2,w,c
 20721  0039D6  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20722  0039D8  5016               	movf	??___ftpack,w,c
 20723  0039DA  1017               	iorwf	??___ftpack+1,w,c
 20724  0039DC  1018               	iorwf	??___ftpack+2,w,c
 20725  0039DE  B4D8               	btfsc	status,2,c
 20726  0039E0  D00E               	goto	l8758
 20727  0039E2  D7EB               	goto	l8750
 20728  0039E4  D00C               	goto	l8758
 20729  0039E6                     l8754:
 20730  0039E6  2A14               	incf	___ftpack@exp,f,c
 20731  0039E8  0E01               	movlw	1
 20732  0039EA  2611               	addwf	___ftpack@arg,f,c
 20733  0039EC  0E00               	movlw	0
 20734  0039EE  2212               	addwfc	___ftpack@arg+1,f,c
 20735  0039F0  0E00               	movlw	0
 20736  0039F2  2213               	addwfc	___ftpack@arg+2,f,c
 20737  0039F4  90D8               	bcf	status,0,c
 20738  0039F6  3213               	rrcf	___ftpack@arg+2,f,c
 20739  0039F8  3212               	rrcf	___ftpack@arg+1,f,c
 20740  0039FA  3211               	rrcf	___ftpack@arg,f,c
 20741  0039FC  D000               	goto	l8758
 20742  0039FE                     l8758:
 20743  0039FE  0E00               	movlw	0
 20744  003A00  1411               	andwf	___ftpack@arg,w,c
 20745  003A02  6E16               	movwf	??___ftpack& (0+255),c
 20746  003A04  0E00               	movlw	0
 20747  003A06  1412               	andwf	___ftpack@arg+1,w,c
 20748  003A08  6E17               	movwf	(??___ftpack+1)& (0+255),c
 20749  003A0A  0EFF               	movlw	255
 20750  003A0C  1413               	andwf	___ftpack@arg+2,w,c
 20751  003A0E  6E18               	movwf	(??___ftpack+2)& (0+255),c
 20752  003A10  5016               	movf	??___ftpack,w,c
 20753  003A12  1017               	iorwf	??___ftpack+1,w,c
 20754  003A14  1018               	iorwf	??___ftpack+2,w,c
 20755  003A16  B4D8               	btfsc	status,2,c
 20756  003A18  D008               	goto	l8762
 20757  003A1A  D7E5               	goto	l8754
 20758  003A1C  D006               	goto	l8762
 20759  003A1E                     l8760:
 20760  003A1E  0614               	decf	___ftpack@exp,f,c
 20761  003A20  90D8               	bcf	status,0,c
 20762  003A22  3611               	rlcf	___ftpack@arg,f,c
 20763  003A24  3612               	rlcf	___ftpack@arg+1,f,c
 20764  003A26  3613               	rlcf	___ftpack@arg+2,f,c
 20765  003A28  D000               	goto	l8762
 20766  003A2A                     l8762:
 20767  003A2A  BE12               	btfsc	___ftpack@arg+1,7,c
 20768  003A2C  D004               	goto	l1878
 20769  003A2E  0E02               	movlw	2
 20770  003A30  6014               	cpfslt	___ftpack@exp,c
 20771  003A32  D7F5               	goto	l8760
 20772  003A34  D000               	goto	l1878
 20773  003A36                     l1878:
 20774  003A36  B014               	btfsc	___ftpack@exp,0,c
 20775  003A38  D002               	goto	l8768
 20776  003A3A  9E12               	bcf	___ftpack@arg+1,7,c
 20777  003A3C  D000               	goto	l8768
 20778  003A3E                     l8768:
 20779  003A3E  90D8               	bcf	status,0,c
 20780  003A40  3214               	rrcf	___ftpack@exp,f,c
 20781  003A42  5014               	movf	___ftpack@exp,w,c
 20782  003A44  1213               	iorwf	___ftpack@arg+2,f,c
 20783  003A46  5015               	movf	___ftpack@sign,w,c
 20784  003A48  B4D8               	btfsc	status,2,c
 20785  003A4A  D002               	goto	l8774
 20786  003A4C  8E13               	bsf	___ftpack@arg+2,7,c
 20787  003A4E  D000               	goto	l8774
 20788  003A50                     l8774:
 20789  003A50  C011  F011         	movff	___ftpack@arg,?___ftpack
 20790  003A54  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 20791  003A58  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 20792  003A5C  D000               	goto	l1867
 20793  003A5E                     l1867:
 20794  003A5E  0012               	return		;funcret
 20795  003A60                     __end_of___ftpack:
 20796                           	opt stack 0
 20797                           tblptru	equ	0xFF8
 20798                           tblptrh	equ	0xFF7
 20799                           tblptrl	equ	0xFF6
 20800                           tablat	equ	0xFF5
 20801                           prodh	equ	0xFF4
 20802                           prodl	equ	0xFF3
 20803                           intcon	equ	0xFF2
 20804                           intcon2	equ	0xFF1
 20805                           postinc0	equ	0xFEE
 20806                           wreg	equ	0xFE8
 20807                           postdec1	equ	0xFE5
 20808                           fsr1l	equ	0xFE1
 20809                           indf2	equ	0xFDF
 20810                           postinc2	equ	0xFDE
 20811                           postdec2	equ	0xFDD
 20812                           fsr2h	equ	0xFDA
 20813                           fsr2l	equ	0xFD9
 20814                           status	equ	0xFD8
 20815                           
 20816 ;; *************** function _Init_Interrupt *****************
 20817 ;; Defined at:
 20818 ;;		line 17 in file "Interrupt.c"
 20819 ;; Parameters:    Size  Location     Type
 20820 ;;		None
 20821 ;; Auto vars:     Size  Location     Type
 20822 ;;		None
 20823 ;; Return value:  Size  Location     Type
 20824 ;;		None               void
 20825 ;; Registers used:
 20826 ;;		wreg, status,2
 20827 ;; Tracked objects:
 20828 ;;		On entry : 0/0
 20829 ;;		On exit  : 0/0
 20830 ;;		Unchanged: 0/0
 20831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20836 ;;Total ram usage:        0 bytes
 20837 ;; Hardware stack levels used:    1
 20838 ;; Hardware stack levels required when called:    3
 20839 ;; This function calls:
 20840 ;;		Nothing
 20841 ;; This function is called by:
 20842 ;;		_Do_Init
 20843 ;; This function uses a non-reentrant model
 20844 ;;
 20845                           
 20846                           	psect	text106
 20847  004FBC                     __ptext106:
 20848                           	opt stack 0
 20849  004FBC                     _Init_Interrupt:
 20850                           	opt stack 26
 20851                           
 20852                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 20853                           
 20854                           ;incstack = 0
 20855  004FBC  92F2               	bcf	intcon,1,c	;volatile
 20856                           
 20857                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 20858  004FBE  90F0               	bcf	intcon3,0,c	;volatile
 20859                           
 20860                           ;Interrupt.c: 23: INTCONbits.INT0IE = 1;
 20861  004FC0  88F2               	bsf	intcon,4,c	;volatile
 20862                           
 20863                           ;Interrupt.c: 24: INTCON3bits.INT1IE = 1;
 20864  004FC2  86F0               	bsf	intcon3,3,c	;volatile
 20865                           
 20866                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
 20867  004FC4  9CF1               	bcf	intcon2,6,c	;volatile
 20868                           
 20869                           ;Interrupt.c: 27: INTCON2bits.INTEDG1 = 0;
 20870  004FC6  9AF1               	bcf	intcon2,5,c	;volatile
 20871                           
 20872                           ;Interrupt.c: 29: TMR1H = 0;
 20873  004FC8  0E00               	movlw	0
 20874  004FCA  6ECF               	movwf	4047,c	;volatile
 20875                           
 20876                           ;Interrupt.c: 30: TMR1L = 0;
 20877  004FCC  0E00               	movlw	0
 20878  004FCE  6ECE               	movwf	4046,c	;volatile
 20879                           
 20880                           ;Interrupt.c: 31: PIR1bits.TMR1IF = 0;
 20881  004FD0  909E               	bcf	3998,0,c	;volatile
 20882                           
 20883                           ;Interrupt.c: 32: PIE1bits.TMR1IE = 1;
 20884  004FD2  809D               	bsf	3997,0,c	;volatile
 20885                           
 20886                           ;Interrupt.c: 33: INTCONbits.PEIE = 1;
 20887  004FD4  8CF2               	bsf	intcon,6,c	;volatile
 20888                           
 20889                           ;Interrupt.c: 34: INTCONbits.GIE = 1;
 20890  004FD6  8EF2               	bsf	intcon,7,c	;volatile
 20891  004FD8  0012               	return		;funcret
 20892  004FDA                     __end_of_Init_Interrupt:
 20893                           	opt stack 0
 20894                           tblptru	equ	0xFF8
 20895                           tblptrh	equ	0xFF7
 20896                           tblptrl	equ	0xFF6
 20897                           tablat	equ	0xFF5
 20898                           prodh	equ	0xFF4
 20899                           prodl	equ	0xFF3
 20900                           intcon	equ	0xFF2
 20901                           intcon2	equ	0xFF1
 20902                           intcon3	equ	0xFF0
 20903                           postinc0	equ	0xFEE
 20904                           wreg	equ	0xFE8
 20905                           postdec1	equ	0xFE5
 20906                           fsr1l	equ	0xFE1
 20907                           indf2	equ	0xFDF
 20908                           postinc2	equ	0xFDE
 20909                           postdec2	equ	0xFDD
 20910                           fsr2h	equ	0xFDA
 20911                           fsr2l	equ	0xFD9
 20912                           status	equ	0xFD8
 20913                           
 20914 ;; *************** function _Init_ADC *****************
 20915 ;; Defined at:
 20916 ;;		line 178 in file "utils.c"
 20917 ;; Parameters:    Size  Location     Type
 20918 ;;		None
 20919 ;; Auto vars:     Size  Location     Type
 20920 ;;		None
 20921 ;; Return value:  Size  Location     Type
 20922 ;;		None               void
 20923 ;; Registers used:
 20924 ;;		wreg, status,2
 20925 ;; Tracked objects:
 20926 ;;		On entry : 0/0
 20927 ;;		On exit  : 0/0
 20928 ;;		Unchanged: 0/0
 20929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20934 ;;Total ram usage:        0 bytes
 20935 ;; Hardware stack levels used:    1
 20936 ;; Hardware stack levels required when called:    3
 20937 ;; This function calls:
 20938 ;;		Nothing
 20939 ;; This function is called by:
 20940 ;;		_Do_Init
 20941 ;; This function uses a non-reentrant model
 20942 ;;
 20943                           
 20944                           	psect	text107
 20945  005234                     __ptext107:
 20946                           	opt stack 0
 20947  005234                     _Init_ADC:
 20948                           	opt stack 26
 20949                           
 20950                           ;utils.c: 181: ADCON0 = 0x05;
 20951                           
 20952                           ;incstack = 0
 20953  005234  0E05               	movlw	5
 20954  005236  6EC2               	movwf	4034,c	;volatile
 20955                           
 20956                           ;utils.c: 182: ADCON1= 0x0D;
 20957  005238  0E0D               	movlw	13
 20958  00523A  6EC1               	movwf	4033,c	;volatile
 20959                           
 20960                           ;utils.c: 183: ADCON2= 0xA9;
 20961  00523C  0EA9               	movlw	169
 20962  00523E  6EC0               	movwf	4032,c	;volatile
 20963  005240  0012               	return		;funcret
 20964  005242                     __end_of_Init_ADC:
 20965                           	opt stack 0
 20966                           tblptru	equ	0xFF8
 20967                           tblptrh	equ	0xFF7
 20968                           tblptrl	equ	0xFF6
 20969                           tablat	equ	0xFF5
 20970                           prodh	equ	0xFF4
 20971                           prodl	equ	0xFF3
 20972                           intcon	equ	0xFF2
 20973                           intcon2	equ	0xFF1
 20974                           intcon3	equ	0xFF0
 20975                           postinc0	equ	0xFEE
 20976                           wreg	equ	0xFE8
 20977                           postdec1	equ	0xFE5
 20978                           fsr1l	equ	0xFE1
 20979                           indf2	equ	0xFDF
 20980                           postinc2	equ	0xFDE
 20981                           postdec2	equ	0xFDD
 20982                           fsr2h	equ	0xFDA
 20983                           fsr2l	equ	0xFD9
 20984                           status	equ	0xFD8
 20985                           
 20986 ;; *************** function _I2C_Init *****************
 20987 ;; Defined at:
 20988 ;;		line 10 in file "I2C_Soft.c"
 20989 ;; Parameters:    Size  Location     Type
 20990 ;;  c               4   16[COMRAM] unsigned long 
 20991 ;; Auto vars:     Size  Location     Type
 20992 ;;		None
 20993 ;; Return value:  Size  Location     Type
 20994 ;;		None               void
 20995 ;; Registers used:
 20996 ;;		wreg, cstack
 20997 ;; Tracked objects:
 20998 ;;		On entry : 0/0
 20999 ;;		On exit  : 0/0
 21000 ;;		Unchanged: 0/0
 21001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21005 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21006 ;;Total ram usage:        4 bytes
 21007 ;; Hardware stack levels used:    1
 21008 ;; Hardware stack levels required when called:    4
 21009 ;; This function calls:
 21010 ;;		_i2cHighScl
 21011 ;;		_i2cHighSda
 21012 ;; This function is called by:
 21013 ;;		_Do_Init
 21014 ;; This function uses a non-reentrant model
 21015 ;;
 21016                           
 21017                           	psect	text108
 21018  00525C                     __ptext108:
 21019                           	opt stack 0
 21020  00525C                     _I2C_Init:
 21021                           	opt stack 25
 21022                           
 21023                           ;I2C_Soft.c: 12: i2cHighScl();
 21024                           
 21025                           ;incstack = 0
 21026  00525C  EC28  F029         	call	_i2cHighScl	;wreg free
 21027                           
 21028                           ;I2C_Soft.c: 13: i2cHighSda();
 21029  005260  EC4F  F029         	call	_i2cHighSda	;wreg free
 21030  005264  0012               	return		;funcret
 21031  005266                     __end_of_I2C_Init:
 21032                           	opt stack 0
 21033                           tblptru	equ	0xFF8
 21034                           tblptrh	equ	0xFF7
 21035                           tblptrl	equ	0xFF6
 21036                           tablat	equ	0xFF5
 21037                           prodh	equ	0xFF4
 21038                           prodl	equ	0xFF3
 21039                           intcon	equ	0xFF2
 21040                           intcon2	equ	0xFF1
 21041                           intcon3	equ	0xFF0
 21042                           postinc0	equ	0xFEE
 21043                           wreg	equ	0xFE8
 21044                           postdec1	equ	0xFE5
 21045                           fsr1l	equ	0xFE1
 21046                           indf2	equ	0xFDF
 21047                           postinc2	equ	0xFDE
 21048                           postdec2	equ	0xFDD
 21049                           fsr2h	equ	0xFDA
 21050                           fsr2l	equ	0xFD9
 21051                           status	equ	0xFD8
 21052                           
 21053 ;; *************** function _DS1621_Init *****************
 21054 ;; Defined at:
 21055 ;;		line 22 in file "I2C_Support.c"
 21056 ;; Parameters:    Size  Location     Type
 21057 ;;		None
 21058 ;; Auto vars:     Size  Location     Type
 21059 ;;  Device          1   21[COMRAM] unsigned char 
 21060 ;; Return value:  Size  Location     Type
 21061 ;;		None               void
 21062 ;; Registers used:
 21063 ;;		wreg, status,2, status,0, cstack
 21064 ;; Tracked objects:
 21065 ;;		On entry : 0/0
 21066 ;;		On exit  : 0/0
 21067 ;;		Unchanged: 0/0
 21068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21072 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21073 ;;Total ram usage:        1 bytes
 21074 ;; Hardware stack levels used:    1
 21075 ;; Hardware stack levels required when called:    6
 21076 ;; This function calls:
 21077 ;;		_I2C_Write_Cmd_Only
 21078 ;;		_I2C_Write_Cmd_Write_Data
 21079 ;; This function is called by:
 21080 ;;		_Do_Init
 21081 ;; This function uses a non-reentrant model
 21082 ;;
 21083                           
 21084                           	psect	text109
 21085  004FDA                     __ptext109:
 21086                           	opt stack 0
 21087  004FDA                     _DS1621_Init:
 21088                           	opt stack 23
 21089                           
 21090                           ;I2C_Support.c: 24: char Device = 0x48;
 21091                           
 21092                           ;incstack = 0
 21093  004FDA  0E48               	movlw	72
 21094  004FDC  6E16               	movwf	DS1621_Init@Device,c
 21095                           
 21096                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 21097  004FDE  0EAC               	movlw	172
 21098  004FE0  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 21099  004FE2  0E02               	movlw	2
 21100  004FE4  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 21101  004FE6  5016               	movf	DS1621_Init@Device,w,c
 21102  004FE8  ECCE  F027         	call	_I2C_Write_Cmd_Write_Data
 21103                           
 21104                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 21105  004FEC  0EEE               	movlw	238
 21106  004FEE  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 21107  004FF0  5016               	movf	DS1621_Init@Device,w,c
 21108  004FF2  EC32  F028         	call	_I2C_Write_Cmd_Only
 21109  004FF6  0012               	return		;funcret
 21110  004FF8                     __end_of_DS1621_Init:
 21111                           	opt stack 0
 21112                           tblptru	equ	0xFF8
 21113                           tblptrh	equ	0xFF7
 21114                           tblptrl	equ	0xFF6
 21115                           tablat	equ	0xFF5
 21116                           prodh	equ	0xFF4
 21117                           prodl	equ	0xFF3
 21118                           intcon	equ	0xFF2
 21119                           intcon2	equ	0xFF1
 21120                           intcon3	equ	0xFF0
 21121                           postinc0	equ	0xFEE
 21122                           wreg	equ	0xFE8
 21123                           postdec1	equ	0xFE5
 21124                           fsr1l	equ	0xFE1
 21125                           indf2	equ	0xFDF
 21126                           postinc2	equ	0xFDE
 21127                           postdec2	equ	0xFDD
 21128                           fsr2h	equ	0xFDA
 21129                           fsr2l	equ	0xFD9
 21130                           status	equ	0xFD8
 21131                           
 21132 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 21133 ;; Defined at:
 21134 ;;		line 148 in file "I2C_Soft.c"
 21135 ;; Parameters:    Size  Location     Type
 21136 ;;  Device          1    wreg     unsigned char 
 21137 ;;  Cmd             1   18[COMRAM] unsigned char 
 21138 ;;  Data_Out        1   19[COMRAM] unsigned char 
 21139 ;; Auto vars:     Size  Location     Type
 21140 ;;  Device          1   20[COMRAM] unsigned char 
 21141 ;; Return value:  Size  Location     Type
 21142 ;;		None               void
 21143 ;; Registers used:
 21144 ;;		wreg, status,2, status,0, cstack
 21145 ;; Tracked objects:
 21146 ;;		On entry : 0/0
 21147 ;;		On exit  : 0/0
 21148 ;;		Unchanged: 0/0
 21149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21150 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21153 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21154 ;;Total ram usage:        3 bytes
 21155 ;; Hardware stack levels used:    1
 21156 ;; Hardware stack levels required when called:    5
 21157 ;; This function calls:
 21158 ;;		_I2C_Start
 21159 ;;		_I2C_Stop
 21160 ;;		_I2C_Write
 21161 ;; This function is called by:
 21162 ;;		_DS1621_Init
 21163 ;; This function uses a non-reentrant model
 21164 ;;
 21165                           
 21166                           	psect	text110
 21167  004F9C                     __ptext110:
 21168                           	opt stack 0
 21169  004F9C                     _I2C_Write_Cmd_Write_Data:
 21170                           	opt stack 23
 21171                           
 21172                           ;incstack = 0
 21173                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 21174  004F9C  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 21175                           
 21176                           ;I2C_Soft.c: 150: I2C_Start();
 21177  004F9E  ECD9  F028         	call	_I2C_Start	;wreg free
 21178                           
 21179                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 21180  004FA2  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 21181  004FA4  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 21182  004FA6  EC1B  F026         	call	_I2C_Write
 21183                           
 21184                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 21185  004FAA  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 21186  004FAC  EC1B  F026         	call	_I2C_Write
 21187                           
 21188                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 21189  004FB0  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 21190  004FB2  EC1B  F026         	call	_I2C_Write
 21191                           
 21192                           ;I2C_Soft.c: 154: I2C_Stop();
 21193  004FB6  ECD0  F028         	call	_I2C_Stop	;wreg free
 21194  004FBA  0012               	return		;funcret
 21195  004FBC                     __end_of_I2C_Write_Cmd_Write_Data:
 21196                           	opt stack 0
 21197                           tblptru	equ	0xFF8
 21198                           tblptrh	equ	0xFF7
 21199                           tblptrl	equ	0xFF6
 21200                           tablat	equ	0xFF5
 21201                           prodh	equ	0xFF4
 21202                           prodl	equ	0xFF3
 21203                           intcon	equ	0xFF2
 21204                           intcon2	equ	0xFF1
 21205                           intcon3	equ	0xFF0
 21206                           postinc0	equ	0xFEE
 21207                           wreg	equ	0xFE8
 21208                           postdec1	equ	0xFE5
 21209                           fsr1l	equ	0xFE1
 21210                           indf2	equ	0xFDF
 21211                           postinc2	equ	0xFDE
 21212                           postdec2	equ	0xFDD
 21213                           fsr2h	equ	0xFDA
 21214                           fsr2l	equ	0xFD9
 21215                           status	equ	0xFD8
 21216                           
 21217 ;; *************** function _I2C_Write_Cmd_Only *****************
 21218 ;; Defined at:
 21219 ;;		line 140 in file "I2C_Soft.c"
 21220 ;; Parameters:    Size  Location     Type
 21221 ;;  Device          1    wreg     unsigned char 
 21222 ;;  Cmd             1   18[COMRAM] unsigned char 
 21223 ;; Auto vars:     Size  Location     Type
 21224 ;;  Device          1   19[COMRAM] unsigned char 
 21225 ;; Return value:  Size  Location     Type
 21226 ;;		None               void
 21227 ;; Registers used:
 21228 ;;		wreg, status,2, status,0, cstack
 21229 ;; Tracked objects:
 21230 ;;		On entry : 0/0
 21231 ;;		On exit  : 0/0
 21232 ;;		Unchanged: 0/0
 21233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21234 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21238 ;;Total ram usage:        2 bytes
 21239 ;; Hardware stack levels used:    1
 21240 ;; Hardware stack levels required when called:    5
 21241 ;; This function calls:
 21242 ;;		_I2C_Start
 21243 ;;		_I2C_Stop
 21244 ;;		_I2C_Write
 21245 ;; This function is called by:
 21246 ;;		_DS1621_Init
 21247 ;; This function uses a non-reentrant model
 21248 ;;
 21249                           
 21250                           	psect	text111
 21251  005064                     __ptext111:
 21252                           	opt stack 0
 21253  005064                     _I2C_Write_Cmd_Only:
 21254                           	opt stack 23
 21255                           
 21256                           ;incstack = 0
 21257                           ;I2C_Write_Cmd_Only@Device stored from wreg
 21258  005064  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 21259                           
 21260                           ;I2C_Soft.c: 142: I2C_Start();
 21261  005066  ECD9  F028         	call	_I2C_Start	;wreg free
 21262                           
 21263                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 21264  00506A  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 21265  00506C  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 21266  00506E  EC1B  F026         	call	_I2C_Write
 21267                           
 21268                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 21269  005072  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 21270  005074  EC1B  F026         	call	_I2C_Write
 21271                           
 21272                           ;I2C_Soft.c: 145: I2C_Stop();
 21273  005078  ECD0  F028         	call	_I2C_Stop	;wreg free
 21274  00507C  0012               	return		;funcret
 21275  00507E                     __end_of_I2C_Write_Cmd_Only:
 21276                           	opt stack 0
 21277                           tblptru	equ	0xFF8
 21278                           tblptrh	equ	0xFF7
 21279                           tblptrl	equ	0xFF6
 21280                           tablat	equ	0xFF5
 21281                           prodh	equ	0xFF4
 21282                           prodl	equ	0xFF3
 21283                           intcon	equ	0xFF2
 21284                           intcon2	equ	0xFF1
 21285                           intcon3	equ	0xFF0
 21286                           postinc0	equ	0xFEE
 21287                           wreg	equ	0xFE8
 21288                           postdec1	equ	0xFE5
 21289                           fsr1l	equ	0xFE1
 21290                           indf2	equ	0xFDF
 21291                           postinc2	equ	0xFDE
 21292                           postdec2	equ	0xFDD
 21293                           fsr2h	equ	0xFDA
 21294                           fsr2l	equ	0xFD9
 21295                           status	equ	0xFD8
 21296                           
 21297 ;; *************** function _DS1621_Read_Temp *****************
 21298 ;; Defined at:
 21299 ;;		line 29 in file "I2C_Support.c"
 21300 ;; Parameters:    Size  Location     Type
 21301 ;;		None
 21302 ;; Auto vars:     Size  Location     Type
 21303 ;;  Device          1   23[COMRAM] unsigned char 
 21304 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 21305 ;;  Cmd             1   21[COMRAM] unsigned char 
 21306 ;; Return value:  Size  Location     Type
 21307 ;;                  2   19[COMRAM] int 
 21308 ;; Registers used:
 21309 ;;		wreg, status,2, status,0, cstack
 21310 ;; Tracked objects:
 21311 ;;		On entry : 0/0
 21312 ;;		On exit  : 0/0
 21313 ;;		Unchanged: 0/0
 21314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21316 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21318 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21319 ;;Total ram usage:        5 bytes
 21320 ;; Hardware stack levels used:    1
 21321 ;; Hardware stack levels required when called:    6
 21322 ;; This function calls:
 21323 ;;		_I2C_ReStart
 21324 ;;		_I2C_Read
 21325 ;;		_I2C_Start
 21326 ;;		_I2C_Stop
 21327 ;;		_I2C_Write
 21328 ;; This function is called by:
 21329 ;;		_main
 21330 ;; This function uses a non-reentrant model
 21331 ;;
 21332                           
 21333                           	psect	text112
 21334  004CB0                     __ptext112:
 21335                           	opt stack 0
 21336  004CB0                     _DS1621_Read_Temp:
 21337                           	opt stack 24
 21338                           
 21339                           ;I2C_Support.c: 32: char Device = 0x48;
 21340                           
 21341                           ;incstack = 0
 21342  004CB0  0E48               	movlw	72
 21343  004CB2  6E18               	movwf	DS1621_Read_Temp@Device,c
 21344                           
 21345                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 21346  004CB4  0EAA               	movlw	170
 21347  004CB6  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 21348                           
 21349                           ;I2C_Support.c: 34: char Data_Ret;
 21350                           ;I2C_Support.c: 35: I2C_Start();
 21351  004CB8  ECD9  F028         	call	_I2C_Start	;wreg free
 21352                           
 21353                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 21354  004CBC  5018               	movf	DS1621_Read_Temp@Device,w,c
 21355  004CBE  2418               	addwf	DS1621_Read_Temp@Device,w,c
 21356  004CC0  EC1B  F026         	call	_I2C_Write
 21357                           
 21358                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 21359  004CC4  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 21360  004CC6  EC1B  F026         	call	_I2C_Write
 21361                           
 21362                           ;I2C_Support.c: 38: I2C_ReStart();
 21363  004CCA  EC79  F028         	call	_I2C_ReStart	;wreg free
 21364                           
 21365                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 21366  004CCE  80D8               	bsf	status,0,c
 21367  004CD0  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 21368  004CD2  EC1B  F026         	call	_I2C_Write
 21369                           
 21370                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 21371  004CD6  0E00               	movlw	0
 21372  004CD8  EC78  F025         	call	_I2C_Read
 21373  004CDC  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 21374                           
 21375                           ;I2C_Support.c: 41: I2C_Stop();
 21376  004CDE  ECD0  F028         	call	_I2C_Stop	;wreg free
 21377                           
 21378                           ;I2C_Support.c: 42: return Data_Ret;
 21379  004CE2  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 21380  004CE6  6A15               	clrf	?_DS1621_Read_Temp+1,c
 21381  004CE8  D000               	goto	l211
 21382  004CEA                     l211:
 21383  004CEA  0012               	return		;funcret
 21384  004CEC                     __end_of_DS1621_Read_Temp:
 21385                           	opt stack 0
 21386                           tblptru	equ	0xFF8
 21387                           tblptrh	equ	0xFF7
 21388                           tblptrl	equ	0xFF6
 21389                           tablat	equ	0xFF5
 21390                           prodh	equ	0xFF4
 21391                           prodl	equ	0xFF3
 21392                           intcon	equ	0xFF2
 21393                           intcon2	equ	0xFF1
 21394                           intcon3	equ	0xFF0
 21395                           postinc0	equ	0xFEE
 21396                           wreg	equ	0xFE8
 21397                           postdec1	equ	0xFE5
 21398                           fsr1l	equ	0xFE1
 21399                           indf2	equ	0xFDF
 21400                           postinc2	equ	0xFDE
 21401                           postdec2	equ	0xFDD
 21402                           fsr2h	equ	0xFDA
 21403                           fsr2l	equ	0xFD9
 21404                           status	equ	0xFD8
 21405                           
 21406 ;; *************** function _I2C_Write *****************
 21407 ;; Defined at:
 21408 ;;		line 37 in file "I2C_Soft.c"
 21409 ;; Parameters:    Size  Location     Type
 21410 ;;  outByte         1    wreg     unsigned char 
 21411 ;; Auto vars:     Size  Location     Type
 21412 ;;  outByte         1   16[COMRAM] unsigned char 
 21413 ;;  n               1   17[COMRAM] unsigned char 
 21414 ;; Return value:  Size  Location     Type
 21415 ;;		None               void
 21416 ;; Registers used:
 21417 ;;		wreg, status,2, status,0, cstack
 21418 ;; Tracked objects:
 21419 ;;		On entry : 0/0
 21420 ;;		On exit  : 0/0
 21421 ;;		Unchanged: 0/0
 21422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21427 ;;Total ram usage:        2 bytes
 21428 ;; Hardware stack levels used:    1
 21429 ;; Hardware stack levels required when called:    4
 21430 ;; This function calls:
 21431 ;;		_i2cHighScl
 21432 ;;		_i2cHighSda
 21433 ;;		_i2cLowScl
 21434 ;;		_i2cLowSda
 21435 ;; This function is called by:
 21436 ;;		_I2C_Write_Address_Read_One_Byte
 21437 ;;		_I2C_Write_Address_Write_One_Byte
 21438 ;;		_I2C_Write_Cmd_Only
 21439 ;;		_I2C_Write_Cmd_Write_Data
 21440 ;;		_DS1621_Read_Temp
 21441 ;;		_DS3231_Read_Time
 21442 ;;		_DS3231_Write_Time
 21443 ;;		_DS3231_Read_Alarm_Time
 21444 ;;		_DS3231_Init
 21445 ;;		_DS3231_Write_Alarm_Time
 21446 ;;		_I2C_Write_Cmd_Read_One_Byte
 21447 ;;		_DS3231_Setup_Time
 21448 ;; This function uses a non-reentrant model
 21449 ;;
 21450                           
 21451                           	psect	text113
 21452  004C36                     __ptext113:
 21453                           	opt stack 0
 21454  004C36                     _I2C_Write:
 21455                           	opt stack 23
 21456                           
 21457                           ;incstack = 0
 21458                           ;I2C_Write@outByte stored from wreg
 21459  004C36  6E11               	movwf	I2C_Write@outByte,c
 21460                           
 21461                           ;I2C_Soft.c: 39: unsigned char n;
 21462                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 21463  004C38  0E00               	movlw	0
 21464  004C3A  6E12               	movwf	I2C_Write@n,c
 21465  004C3C                     l5848:
 21466  004C3C  0E07               	movlw	7
 21467  004C3E  6412               	cpfsgt	I2C_Write@n,c
 21468  004C40  D001               	goto	l99
 21469  004C42  D011               	goto	l5866
 21470  004C44                     l99:
 21471                           
 21472                           ;I2C_Soft.c: 41: {
 21473                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 21474  004C44  AE11               	btfss	I2C_Write@outByte,7,c
 21475  004C46  D003               	goto	l5854
 21476  004C48  EC4F  F029         	call	_i2cHighSda	;wreg free
 21477  004C4C  D003               	goto	l5856
 21478  004C4E                     l5854:
 21479                           
 21480                           ;I2C_Soft.c: 43: else i2cLowSda();
 21481  004C4E  EC38  F029         	call	_i2cLowSda	;wreg free
 21482  004C52  D000               	goto	l5856
 21483  004C54                     l5856:
 21484                           
 21485                           ;I2C_Soft.c: 44: i2cHighScl();
 21486  004C54  EC28  F029         	call	_i2cHighScl	;wreg free
 21487                           
 21488                           ;I2C_Soft.c: 45: i2cLowScl();
 21489  004C58  EC4B  F029         	call	_i2cLowScl	;wreg free
 21490                           
 21491                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 21492  004C5C  5011               	movf	I2C_Write@outByte,w,c
 21493  004C5E  2411               	addwf	I2C_Write@outByte,w,c
 21494  004C60  6E11               	movwf	I2C_Write@outByte,c
 21495  004C62  2A12               	incf	I2C_Write@n,f,c
 21496  004C64  D7EB               	goto	l5848
 21497  004C66                     l5866:
 21498                           
 21499                           ;I2C_Soft.c: 47: }
 21500                           ;I2C_Soft.c: 48: i2cHighSda();
 21501  004C66  EC4F  F029         	call	_i2cHighSda	;wreg free
 21502                           
 21503                           ;I2C_Soft.c: 49: i2cHighScl();
 21504  004C6A  EC28  F029         	call	_i2cHighScl	;wreg free
 21505                           
 21506                           ;I2C_Soft.c: 50: i2cLowScl();
 21507  004C6E  EC4B  F029         	call	_i2cLowScl	;wreg free
 21508  004C72  0012               	return		;funcret
 21509  004C74                     __end_of_I2C_Write:
 21510                           	opt stack 0
 21511                           tblptru	equ	0xFF8
 21512                           tblptrh	equ	0xFF7
 21513                           tblptrl	equ	0xFF6
 21514                           tablat	equ	0xFF5
 21515                           prodh	equ	0xFF4
 21516                           prodl	equ	0xFF3
 21517                           intcon	equ	0xFF2
 21518                           intcon2	equ	0xFF1
 21519                           intcon3	equ	0xFF0
 21520                           postinc0	equ	0xFEE
 21521                           wreg	equ	0xFE8
 21522                           postdec1	equ	0xFE5
 21523                           fsr1l	equ	0xFE1
 21524                           indf2	equ	0xFDF
 21525                           postinc2	equ	0xFDE
 21526                           postdec2	equ	0xFDD
 21527                           fsr2h	equ	0xFDA
 21528                           fsr2l	equ	0xFD9
 21529                           status	equ	0xFD8
 21530                           
 21531 ;; *************** function _I2C_Stop *****************
 21532 ;; Defined at:
 21533 ;;		line 84 in file "I2C_Soft.c"
 21534 ;; Parameters:    Size  Location     Type
 21535 ;;		None
 21536 ;; Auto vars:     Size  Location     Type
 21537 ;;		None
 21538 ;; Return value:  Size  Location     Type
 21539 ;;		None               void
 21540 ;; Registers used:
 21541 ;;		wreg, cstack
 21542 ;; Tracked objects:
 21543 ;;		On entry : 0/0
 21544 ;;		On exit  : 0/0
 21545 ;;		Unchanged: 0/0
 21546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21551 ;;Total ram usage:        0 bytes
 21552 ;; Hardware stack levels used:    1
 21553 ;; Hardware stack levels required when called:    4
 21554 ;; This function calls:
 21555 ;;		_i2cHighScl
 21556 ;;		_i2cHighSda
 21557 ;;		_i2cLowScl
 21558 ;;		_i2cLowSda
 21559 ;; This function is called by:
 21560 ;;		_I2C_Write_Address_Read_One_Byte
 21561 ;;		_I2C_Write_Address_Write_One_Byte
 21562 ;;		_I2C_Write_Cmd_Only
 21563 ;;		_I2C_Write_Cmd_Write_Data
 21564 ;;		_DS1621_Read_Temp
 21565 ;;		_DS3231_Read_Time
 21566 ;;		_DS3231_Write_Time
 21567 ;;		_DS3231_Read_Alarm_Time
 21568 ;;		_DS3231_Init
 21569 ;;		_DS3231_Write_Alarm_Time
 21570 ;;		_I2C_Write_Cmd_Read_One_Byte
 21571 ;;		_DS3231_Setup_Time
 21572 ;; This function uses a non-reentrant model
 21573 ;;
 21574                           
 21575                           	psect	text114
 21576  0051A0                     __ptext114:
 21577                           	opt stack 0
 21578  0051A0                     _I2C_Stop:
 21579                           	opt stack 23
 21580                           
 21581                           ;I2C_Soft.c: 86: i2cLowScl();
 21582                           
 21583                           ;incstack = 0
 21584  0051A0  EC4B  F029         	call	_i2cLowScl	;wreg free
 21585                           
 21586                           ;I2C_Soft.c: 87: i2cLowSda();
 21587  0051A4  EC38  F029         	call	_i2cLowSda	;wreg free
 21588                           
 21589                           ;I2C_Soft.c: 88: i2cHighScl();
 21590  0051A8  EC28  F029         	call	_i2cHighScl	;wreg free
 21591                           
 21592                           ;I2C_Soft.c: 89: i2cHighSda();
 21593  0051AC  EC4F  F029         	call	_i2cHighSda	;wreg free
 21594  0051B0  0012               	return		;funcret
 21595  0051B2                     __end_of_I2C_Stop:
 21596                           	opt stack 0
 21597                           tblptru	equ	0xFF8
 21598                           tblptrh	equ	0xFF7
 21599                           tblptrl	equ	0xFF6
 21600                           tablat	equ	0xFF5
 21601                           prodh	equ	0xFF4
 21602                           prodl	equ	0xFF3
 21603                           intcon	equ	0xFF2
 21604                           intcon2	equ	0xFF1
 21605                           intcon3	equ	0xFF0
 21606                           postinc0	equ	0xFEE
 21607                           wreg	equ	0xFE8
 21608                           postdec1	equ	0xFE5
 21609                           fsr1l	equ	0xFE1
 21610                           indf2	equ	0xFDF
 21611                           postinc2	equ	0xFDE
 21612                           postdec2	equ	0xFDD
 21613                           fsr2h	equ	0xFDA
 21614                           fsr2l	equ	0xFD9
 21615                           status	equ	0xFD8
 21616                           
 21617 ;; *************** function _I2C_Start *****************
 21618 ;; Defined at:
 21619 ;;		line 67 in file "I2C_Soft.c"
 21620 ;; Parameters:    Size  Location     Type
 21621 ;;		None
 21622 ;; Auto vars:     Size  Location     Type
 21623 ;;		None
 21624 ;; Return value:  Size  Location     Type
 21625 ;;		None               void
 21626 ;; Registers used:
 21627 ;;		wreg, cstack
 21628 ;; Tracked objects:
 21629 ;;		On entry : 0/0
 21630 ;;		On exit  : 0/0
 21631 ;;		Unchanged: 0/0
 21632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21637 ;;Total ram usage:        0 bytes
 21638 ;; Hardware stack levels used:    1
 21639 ;; Hardware stack levels required when called:    4
 21640 ;; This function calls:
 21641 ;;		_i2cHighScl
 21642 ;;		_i2cHighSda
 21643 ;;		_i2cLowScl
 21644 ;;		_i2cLowSda
 21645 ;; This function is called by:
 21646 ;;		_I2C_Write_Address_Read_One_Byte
 21647 ;;		_I2C_Write_Address_Write_One_Byte
 21648 ;;		_I2C_Write_Cmd_Only
 21649 ;;		_I2C_Write_Cmd_Write_Data
 21650 ;;		_DS1621_Read_Temp
 21651 ;;		_DS3231_Read_Time
 21652 ;;		_DS3231_Write_Time
 21653 ;;		_DS3231_Read_Alarm_Time
 21654 ;;		_DS3231_Init
 21655 ;;		_DS3231_Write_Alarm_Time
 21656 ;;		_I2C_Write_Cmd_Read_One_Byte
 21657 ;;		_DS3231_Setup_Time
 21658 ;; This function uses a non-reentrant model
 21659 ;;
 21660                           
 21661                           	psect	text115
 21662  0051B2                     __ptext115:
 21663                           	opt stack 0
 21664  0051B2                     _I2C_Start:
 21665                           	opt stack 23
 21666                           
 21667                           ;I2C_Soft.c: 69: i2cHighSda();
 21668                           
 21669                           ;incstack = 0
 21670  0051B2  EC4F  F029         	call	_i2cHighSda	;wreg free
 21671                           
 21672                           ;I2C_Soft.c: 70: i2cHighScl();
 21673  0051B6  EC28  F029         	call	_i2cHighScl	;wreg free
 21674                           
 21675                           ;I2C_Soft.c: 71: i2cLowSda();
 21676  0051BA  EC38  F029         	call	_i2cLowSda	;wreg free
 21677                           
 21678                           ;I2C_Soft.c: 72: i2cLowScl();
 21679  0051BE  EC4B  F029         	call	_i2cLowScl	;wreg free
 21680  0051C2  0012               	return		;funcret
 21681  0051C4                     __end_of_I2C_Start:
 21682                           	opt stack 0
 21683                           tblptru	equ	0xFF8
 21684                           tblptrh	equ	0xFF7
 21685                           tblptrl	equ	0xFF6
 21686                           tablat	equ	0xFF5
 21687                           prodh	equ	0xFF4
 21688                           prodl	equ	0xFF3
 21689                           intcon	equ	0xFF2
 21690                           intcon2	equ	0xFF1
 21691                           intcon3	equ	0xFF0
 21692                           postinc0	equ	0xFEE
 21693                           wreg	equ	0xFE8
 21694                           postdec1	equ	0xFE5
 21695                           fsr1l	equ	0xFE1
 21696                           indf2	equ	0xFDF
 21697                           postinc2	equ	0xFDE
 21698                           postdec2	equ	0xFDD
 21699                           fsr2h	equ	0xFDA
 21700                           fsr2l	equ	0xFD9
 21701                           status	equ	0xFD8
 21702                           
 21703 ;; *************** function _I2C_Read *****************
 21704 ;; Defined at:
 21705 ;;		line 16 in file "I2C_Soft.c"
 21706 ;; Parameters:    Size  Location     Type
 21707 ;;  ack             1    wreg     unsigned char 
 21708 ;; Auto vars:     Size  Location     Type
 21709 ;;  ack             1   16[COMRAM] unsigned char 
 21710 ;;  inByte          1   18[COMRAM] unsigned char 
 21711 ;;  n               1   17[COMRAM] unsigned char 
 21712 ;; Return value:  Size  Location     Type
 21713 ;;                  1    wreg      unsigned char 
 21714 ;; Registers used:
 21715 ;;		wreg, status,2, status,0, cstack
 21716 ;; Tracked objects:
 21717 ;;		On entry : 0/0
 21718 ;;		On exit  : 0/0
 21719 ;;		Unchanged: 0/0
 21720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21722 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21725 ;;Total ram usage:        3 bytes
 21726 ;; Hardware stack levels used:    1
 21727 ;; Hardware stack levels required when called:    5
 21728 ;; This function calls:
 21729 ;;		_i2cAck
 21730 ;;		_i2cHighScl
 21731 ;;		_i2cHighSda
 21732 ;;		_i2cLowScl
 21733 ;;		_i2cNack
 21734 ;; This function is called by:
 21735 ;;		_I2C_Write_Address_Read_One_Byte
 21736 ;;		_DS1621_Read_Temp
 21737 ;;		_DS3231_Read_Time
 21738 ;;		_DS3231_Read_Alarm_Time
 21739 ;;		_DS3231_Init
 21740 ;;		_I2C_Write_Cmd_Read_One_Byte
 21741 ;; This function uses a non-reentrant model
 21742 ;;
 21743                           
 21744                           	psect	text116
 21745  004AF0                     __ptext116:
 21746                           	opt stack 0
 21747  004AF0                     _I2C_Read:
 21748                           	opt stack 22
 21749                           
 21750                           ;incstack = 0
 21751                           ;I2C_Read@ack stored from wreg
 21752  004AF0  6E11               	movwf	I2C_Read@ack,c
 21753                           
 21754                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 21755                           ;I2C_Soft.c: 19: i2cHighSda();
 21756  004AF2  EC4F  F029         	call	_i2cHighSda	;wreg free
 21757                           
 21758                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 21759  004AF6  0E00               	movlw	0
 21760  004AF8  6E12               	movwf	I2C_Read@n,c
 21761  004AFA                     l5818:
 21762  004AFA  0E07               	movlw	7
 21763  004AFC  6412               	cpfsgt	I2C_Read@n,c
 21764  004AFE  D001               	goto	l5822
 21765  004B00  D00F               	goto	l5836
 21766  004B02                     l5822:
 21767                           
 21768                           ;I2C_Soft.c: 21: {
 21769                           ;I2C_Soft.c: 22: i2cHighScl();
 21770  004B02  EC28  F029         	call	_i2cHighScl	;wreg free
 21771                           
 21772                           ;I2C_Soft.c: 24: if (PORTDbits.RD7)
 21773  004B06  AE83               	btfss	3971,7,c	;volatile
 21774  004B08  D003               	goto	l5828
 21775                           
 21776                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 21777  004B0A  80D8               	bsf	status,0,c
 21778  004B0C  3613               	rlcf	I2C_Read@inByte,f,c
 21779  004B0E  D004               	goto	l5830
 21780  004B10                     l5828:
 21781                           
 21782                           ;I2C_Soft.c: 26: else
 21783                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 21784  004B10  5013               	movf	I2C_Read@inByte,w,c
 21785  004B12  2413               	addwf	I2C_Read@inByte,w,c
 21786  004B14  6E13               	movwf	I2C_Read@inByte,c
 21787  004B16  D000               	goto	l5830
 21788  004B18                     l5830:
 21789                           
 21790                           ;I2C_Soft.c: 28: i2cLowScl();
 21791  004B18  EC4B  F029         	call	_i2cLowScl	;wreg free
 21792  004B1C  2A12               	incf	I2C_Read@n,f,c
 21793  004B1E  D7ED               	goto	l5818
 21794  004B20                     l5836:
 21795                           
 21796                           ;I2C_Soft.c: 29: }
 21797                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 21798  004B20  5011               	movf	I2C_Read@ack,w,c
 21799  004B22  B4D8               	btfsc	status,2,c
 21800  004B24  D003               	goto	l5840
 21801  004B26  ECE2  F028         	call	_i2cAck	;wreg free
 21802  004B2A  D003               	goto	l5842
 21803  004B2C                     l5840:
 21804                           
 21805                           ;I2C_Soft.c: 31: else i2cNack();
 21806  004B2C  EC33  F029         	call	_i2cNack	;wreg free
 21807  004B30  D000               	goto	l5842
 21808  004B32                     l5842:
 21809                           
 21810                           ;I2C_Soft.c: 34: return(inByte);
 21811  004B32  5013               	movf	I2C_Read@inByte,w,c
 21812  004B34  D000               	goto	l96
 21813  004B36                     l96:
 21814  004B36  0012               	return		;funcret
 21815  004B38                     __end_of_I2C_Read:
 21816                           	opt stack 0
 21817                           tblptru	equ	0xFF8
 21818                           tblptrh	equ	0xFF7
 21819                           tblptrl	equ	0xFF6
 21820                           tablat	equ	0xFF5
 21821                           prodh	equ	0xFF4
 21822                           prodl	equ	0xFF3
 21823                           intcon	equ	0xFF2
 21824                           intcon2	equ	0xFF1
 21825                           intcon3	equ	0xFF0
 21826                           postinc0	equ	0xFEE
 21827                           wreg	equ	0xFE8
 21828                           postdec1	equ	0xFE5
 21829                           fsr1l	equ	0xFE1
 21830                           indf2	equ	0xFDF
 21831                           postinc2	equ	0xFDE
 21832                           postdec2	equ	0xFDD
 21833                           fsr2h	equ	0xFDA
 21834                           fsr2l	equ	0xFD9
 21835                           status	equ	0xFD8
 21836                           
 21837 ;; *************** function _i2cNack *****************
 21838 ;; Defined at:
 21839 ;;		line 53 in file "I2C_Soft.c"
 21840 ;; Parameters:    Size  Location     Type
 21841 ;;		None
 21842 ;; Auto vars:     Size  Location     Type
 21843 ;;		None
 21844 ;; Return value:  Size  Location     Type
 21845 ;;		None               void
 21846 ;; Registers used:
 21847 ;;		wreg, cstack
 21848 ;; Tracked objects:
 21849 ;;		On entry : 0/0
 21850 ;;		On exit  : 0/0
 21851 ;;		Unchanged: 0/0
 21852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21857 ;;Total ram usage:        0 bytes
 21858 ;; Hardware stack levels used:    1
 21859 ;; Hardware stack levels required when called:    4
 21860 ;; This function calls:
 21861 ;;		_i2cHighScl
 21862 ;;		_i2cLowScl
 21863 ;; This function is called by:
 21864 ;;		_I2C_Read
 21865 ;; This function uses a non-reentrant model
 21866 ;;
 21867                           
 21868                           	psect	text117
 21869  005266                     __ptext117:
 21870                           	opt stack 0
 21871  005266                     _i2cNack:
 21872                           	opt stack 22
 21873                           
 21874                           ;I2C_Soft.c: 55: i2cHighScl();
 21875                           
 21876                           ;incstack = 0
 21877  005266  EC28  F029         	call	_i2cHighScl	;wreg free
 21878                           
 21879                           ;I2C_Soft.c: 56: i2cLowScl();
 21880  00526A  EC4B  F029         	call	_i2cLowScl	;wreg free
 21881  00526E  0012               	return		;funcret
 21882  005270                     __end_of_i2cNack:
 21883                           	opt stack 0
 21884                           tblptru	equ	0xFF8
 21885                           tblptrh	equ	0xFF7
 21886                           tblptrl	equ	0xFF6
 21887                           tablat	equ	0xFF5
 21888                           prodh	equ	0xFF4
 21889                           prodl	equ	0xFF3
 21890                           intcon	equ	0xFF2
 21891                           intcon2	equ	0xFF1
 21892                           intcon3	equ	0xFF0
 21893                           postinc0	equ	0xFEE
 21894                           wreg	equ	0xFE8
 21895                           postdec1	equ	0xFE5
 21896                           fsr1l	equ	0xFE1
 21897                           indf2	equ	0xFDF
 21898                           postinc2	equ	0xFDE
 21899                           postdec2	equ	0xFDD
 21900                           fsr2h	equ	0xFDA
 21901                           fsr2l	equ	0xFD9
 21902                           status	equ	0xFD8
 21903                           
 21904 ;; *************** function _i2cAck *****************
 21905 ;; Defined at:
 21906 ;;		line 59 in file "I2C_Soft.c"
 21907 ;; Parameters:    Size  Location     Type
 21908 ;;		None
 21909 ;; Auto vars:     Size  Location     Type
 21910 ;;		None
 21911 ;; Return value:  Size  Location     Type
 21912 ;;		None               void
 21913 ;; Registers used:
 21914 ;;		wreg, cstack
 21915 ;; Tracked objects:
 21916 ;;		On entry : 0/0
 21917 ;;		On exit  : 0/0
 21918 ;;		Unchanged: 0/0
 21919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21924 ;;Total ram usage:        0 bytes
 21925 ;; Hardware stack levels used:    1
 21926 ;; Hardware stack levels required when called:    4
 21927 ;; This function calls:
 21928 ;;		_i2cHighScl
 21929 ;;		_i2cHighSda
 21930 ;;		_i2cLowScl
 21931 ;;		_i2cLowSda
 21932 ;; This function is called by:
 21933 ;;		_I2C_Read
 21934 ;; This function uses a non-reentrant model
 21935 ;;
 21936                           
 21937                           	psect	text118
 21938  0051C4                     __ptext118:
 21939                           	opt stack 0
 21940  0051C4                     _i2cAck:
 21941                           	opt stack 22
 21942                           
 21943                           ;I2C_Soft.c: 61: i2cLowSda();
 21944                           
 21945                           ;incstack = 0
 21946  0051C4  EC38  F029         	call	_i2cLowSda	;wreg free
 21947                           
 21948                           ;I2C_Soft.c: 62: i2cHighScl();
 21949  0051C8  EC28  F029         	call	_i2cHighScl	;wreg free
 21950                           
 21951                           ;I2C_Soft.c: 63: i2cLowScl();
 21952  0051CC  EC4B  F029         	call	_i2cLowScl	;wreg free
 21953                           
 21954                           ;I2C_Soft.c: 64: i2cHighSda();
 21955  0051D0  EC4F  F029         	call	_i2cHighSda	;wreg free
 21956  0051D4  0012               	return		;funcret
 21957  0051D6                     __end_of_i2cAck:
 21958                           	opt stack 0
 21959                           tblptru	equ	0xFF8
 21960                           tblptrh	equ	0xFF7
 21961                           tblptrl	equ	0xFF6
 21962                           tablat	equ	0xFF5
 21963                           prodh	equ	0xFF4
 21964                           prodl	equ	0xFF3
 21965                           intcon	equ	0xFF2
 21966                           intcon2	equ	0xFF1
 21967                           intcon3	equ	0xFF0
 21968                           postinc0	equ	0xFEE
 21969                           wreg	equ	0xFE8
 21970                           postdec1	equ	0xFE5
 21971                           fsr1l	equ	0xFE1
 21972                           indf2	equ	0xFDF
 21973                           postinc2	equ	0xFDE
 21974                           postdec2	equ	0xFDD
 21975                           fsr2h	equ	0xFDA
 21976                           fsr2l	equ	0xFD9
 21977                           status	equ	0xFD8
 21978                           
 21979 ;; *************** function _I2C_ReStart *****************
 21980 ;; Defined at:
 21981 ;;		line 75 in file "I2C_Soft.c"
 21982 ;; Parameters:    Size  Location     Type
 21983 ;;		None
 21984 ;; Auto vars:     Size  Location     Type
 21985 ;;		None
 21986 ;; Return value:  Size  Location     Type
 21987 ;;		None               void
 21988 ;; Registers used:
 21989 ;;		wreg, cstack
 21990 ;; Tracked objects:
 21991 ;;		On entry : 0/0
 21992 ;;		On exit  : 0/0
 21993 ;;		Unchanged: 0/0
 21994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21999 ;;Total ram usage:        0 bytes
 22000 ;; Hardware stack levels used:    1
 22001 ;; Hardware stack levels required when called:    4
 22002 ;; This function calls:
 22003 ;;		_i2cHighScl
 22004 ;;		_i2cHighSda
 22005 ;;		_i2cLowScl
 22006 ;;		_i2cLowSda
 22007 ;; This function is called by:
 22008 ;;		_I2C_Write_Address_Read_One_Byte
 22009 ;;		_DS1621_Read_Temp
 22010 ;;		_DS3231_Read_Time
 22011 ;;		_DS3231_Read_Alarm_Time
 22012 ;;		_DS3231_Init
 22013 ;;		_I2C_Write_Cmd_Read_One_Byte
 22014 ;; This function uses a non-reentrant model
 22015 ;;
 22016                           
 22017                           	psect	text119
 22018  0050F2                     __ptext119:
 22019                           	opt stack 0
 22020  0050F2                     _I2C_ReStart:
 22021                           	opt stack 23
 22022                           
 22023                           ;I2C_Soft.c: 77: i2cLowScl();
 22024                           
 22025                           ;incstack = 0
 22026  0050F2  EC4B  F029         	call	_i2cLowScl	;wreg free
 22027                           
 22028                           ;I2C_Soft.c: 78: i2cHighSda();
 22029  0050F6  EC4F  F029         	call	_i2cHighSda	;wreg free
 22030                           
 22031                           ;I2C_Soft.c: 79: i2cHighScl();
 22032  0050FA  EC28  F029         	call	_i2cHighScl	;wreg free
 22033                           
 22034                           ;I2C_Soft.c: 80: i2cLowSda();
 22035  0050FE  EC38  F029         	call	_i2cLowSda	;wreg free
 22036                           
 22037                           ;I2C_Soft.c: 81: i2cLowScl();
 22038  005102  EC4B  F029         	call	_i2cLowScl	;wreg free
 22039  005106  0012               	return		;funcret
 22040  005108                     __end_of_I2C_ReStart:
 22041                           	opt stack 0
 22042                           tblptru	equ	0xFF8
 22043                           tblptrh	equ	0xFF7
 22044                           tblptrl	equ	0xFF6
 22045                           tablat	equ	0xFF5
 22046                           prodh	equ	0xFF4
 22047                           prodl	equ	0xFF3
 22048                           intcon	equ	0xFF2
 22049                           intcon2	equ	0xFF1
 22050                           intcon3	equ	0xFF0
 22051                           postinc0	equ	0xFEE
 22052                           wreg	equ	0xFE8
 22053                           postdec1	equ	0xFE5
 22054                           fsr1l	equ	0xFE1
 22055                           indf2	equ	0xFDF
 22056                           postinc2	equ	0xFDE
 22057                           postdec2	equ	0xFDD
 22058                           fsr2h	equ	0xFDA
 22059                           fsr2l	equ	0xFD9
 22060                           status	equ	0xFD8
 22061                           
 22062 ;; *************** function _i2cLowSda *****************
 22063 ;; Defined at:
 22064 ;;		line 98 in file "I2C_Soft.c"
 22065 ;; Parameters:    Size  Location     Type
 22066 ;;		None
 22067 ;; Auto vars:     Size  Location     Type
 22068 ;;		None
 22069 ;; Return value:  Size  Location     Type
 22070 ;;		None               void
 22071 ;; Registers used:
 22072 ;;		None
 22073 ;; Tracked objects:
 22074 ;;		On entry : 0/0
 22075 ;;		On exit  : 0/0
 22076 ;;		Unchanged: 0/0
 22077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22082 ;;Total ram usage:        0 bytes
 22083 ;; Hardware stack levels used:    1
 22084 ;; Hardware stack levels required when called:    3
 22085 ;; This function calls:
 22086 ;;		Nothing
 22087 ;; This function is called by:
 22088 ;;		_I2C_Write
 22089 ;;		_i2cAck
 22090 ;;		_I2C_Start
 22091 ;;		_I2C_ReStart
 22092 ;;		_I2C_Stop
 22093 ;; This function uses a non-reentrant model
 22094 ;;
 22095                           
 22096                           	psect	text120
 22097  005270                     __ptext120:
 22098                           	opt stack 0
 22099  005270                     _i2cLowSda:
 22100                           	opt stack 23
 22101                           
 22102                           ;I2C_Soft.c: 100: PORTDbits.RD7 = 0;
 22103                           
 22104                           ;incstack = 0
 22105  005270  9E83               	bcf	3971,7,c	;volatile
 22106                           
 22107                           ;I2C_Soft.c: 101: TRISDbits.RD7 = 0;
 22108  005272  9E95               	bcf	3989,7,c	;volatile
 22109                           
 22110                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 22111  005274  D000               	nop2		;2 cycle nop
 22112  005276  D000               	nop2		;2 cycle nop
 22113  005278  0012               	return		;funcret
 22114  00527A                     __end_of_i2cLowSda:
 22115                           	opt stack 0
 22116                           tblptru	equ	0xFF8
 22117                           tblptrh	equ	0xFF7
 22118                           tblptrl	equ	0xFF6
 22119                           tablat	equ	0xFF5
 22120                           prodh	equ	0xFF4
 22121                           prodl	equ	0xFF3
 22122                           intcon	equ	0xFF2
 22123                           intcon2	equ	0xFF1
 22124                           intcon3	equ	0xFF0
 22125                           postinc0	equ	0xFEE
 22126                           wreg	equ	0xFE8
 22127                           postdec1	equ	0xFE5
 22128                           fsr1l	equ	0xFE1
 22129                           indf2	equ	0xFDF
 22130                           postinc2	equ	0xFDE
 22131                           postdec2	equ	0xFDD
 22132                           fsr2h	equ	0xFDA
 22133                           fsr2l	equ	0xFD9
 22134                           status	equ	0xFD8
 22135                           
 22136 ;; *************** function _i2cLowScl *****************
 22137 ;; Defined at:
 22138 ;;		line 111 in file "I2C_Soft.c"
 22139 ;; Parameters:    Size  Location     Type
 22140 ;;		None
 22141 ;; Auto vars:     Size  Location     Type
 22142 ;;		None
 22143 ;; Return value:  Size  Location     Type
 22144 ;;		None               void
 22145 ;; Registers used:
 22146 ;;		None
 22147 ;; Tracked objects:
 22148 ;;		On entry : 0/0
 22149 ;;		On exit  : 0/0
 22150 ;;		Unchanged: 0/0
 22151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22156 ;;Total ram usage:        0 bytes
 22157 ;; Hardware stack levels used:    1
 22158 ;; Hardware stack levels required when called:    3
 22159 ;; This function calls:
 22160 ;;		Nothing
 22161 ;; This function is called by:
 22162 ;;		_I2C_Read
 22163 ;;		_I2C_Write
 22164 ;;		_i2cNack
 22165 ;;		_i2cAck
 22166 ;;		_I2C_Start
 22167 ;;		_I2C_ReStart
 22168 ;;		_I2C_Stop
 22169 ;; This function uses a non-reentrant model
 22170 ;;
 22171                           
 22172                           	psect	text121
 22173  005296                     __ptext121:
 22174                           	opt stack 0
 22175  005296                     _i2cLowScl:
 22176                           	opt stack 23
 22177                           
 22178                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 22179                           
 22180                           ;incstack = 0
 22181  005296  9881               	bcf	3969,4,c	;volatile
 22182                           
 22183                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 22184  005298  9893               	bcf	3987,4,c	;volatile
 22185                           
 22186                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 22187  00529A  D000               	nop2		;2 cycle nop
 22188  00529C  0012               	return		;funcret
 22189  00529E                     __end_of_i2cLowScl:
 22190                           	opt stack 0
 22191                           tblptru	equ	0xFF8
 22192                           tblptrh	equ	0xFF7
 22193                           tblptrl	equ	0xFF6
 22194                           tablat	equ	0xFF5
 22195                           prodh	equ	0xFF4
 22196                           prodl	equ	0xFF3
 22197                           intcon	equ	0xFF2
 22198                           intcon2	equ	0xFF1
 22199                           intcon3	equ	0xFF0
 22200                           postinc0	equ	0xFEE
 22201                           wreg	equ	0xFE8
 22202                           postdec1	equ	0xFE5
 22203                           fsr1l	equ	0xFE1
 22204                           indf2	equ	0xFDF
 22205                           postinc2	equ	0xFDE
 22206                           postdec2	equ	0xFDD
 22207                           fsr2h	equ	0xFDA
 22208                           fsr2l	equ	0xFD9
 22209                           status	equ	0xFD8
 22210                           
 22211 ;; *************** function _i2cHighSda *****************
 22212 ;; Defined at:
 22213 ;;		line 92 in file "I2C_Soft.c"
 22214 ;; Parameters:    Size  Location     Type
 22215 ;;		None
 22216 ;; Auto vars:     Size  Location     Type
 22217 ;;		None
 22218 ;; Return value:  Size  Location     Type
 22219 ;;		None               void
 22220 ;; Registers used:
 22221 ;;		None
 22222 ;; Tracked objects:
 22223 ;;		On entry : 0/0
 22224 ;;		On exit  : 0/0
 22225 ;;		Unchanged: 0/0
 22226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22231 ;;Total ram usage:        0 bytes
 22232 ;; Hardware stack levels used:    1
 22233 ;; Hardware stack levels required when called:    3
 22234 ;; This function calls:
 22235 ;;		Nothing
 22236 ;; This function is called by:
 22237 ;;		_I2C_Init
 22238 ;;		_I2C_Read
 22239 ;;		_I2C_Write
 22240 ;;		_i2cAck
 22241 ;;		_I2C_Start
 22242 ;;		_I2C_ReStart
 22243 ;;		_I2C_Stop
 22244 ;; This function uses a non-reentrant model
 22245 ;;
 22246                           
 22247                           	psect	text122
 22248  00529E                     __ptext122:
 22249                           	opt stack 0
 22250  00529E                     _i2cHighSda:
 22251                           	opt stack 23
 22252                           
 22253                           ;I2C_Soft.c: 94: TRISDbits.RD7 = 1;
 22254                           
 22255                           ;incstack = 0
 22256  00529E  8E95               	bsf	3989,7,c	;volatile
 22257                           
 22258                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 22259  0052A0  D000               	nop2		;2 cycle nop
 22260  0052A2  D000               	nop2		;2 cycle nop
 22261  0052A4  0012               	return		;funcret
 22262  0052A6                     __end_of_i2cHighSda:
 22263                           	opt stack 0
 22264                           tblptru	equ	0xFF8
 22265                           tblptrh	equ	0xFF7
 22266                           tblptrl	equ	0xFF6
 22267                           tablat	equ	0xFF5
 22268                           prodh	equ	0xFF4
 22269                           prodl	equ	0xFF3
 22270                           intcon	equ	0xFF2
 22271                           intcon2	equ	0xFF1
 22272                           intcon3	equ	0xFF0
 22273                           postinc0	equ	0xFEE
 22274                           wreg	equ	0xFE8
 22275                           postdec1	equ	0xFE5
 22276                           fsr1l	equ	0xFE1
 22277                           indf2	equ	0xFDF
 22278                           postinc2	equ	0xFDE
 22279                           postdec2	equ	0xFDD
 22280                           fsr2h	equ	0xFDA
 22281                           fsr2l	equ	0xFD9
 22282                           status	equ	0xFD8
 22283                           
 22284 ;; *************** function _i2cHighScl *****************
 22285 ;; Defined at:
 22286 ;;		line 105 in file "I2C_Soft.c"
 22287 ;; Parameters:    Size  Location     Type
 22288 ;;		None
 22289 ;; Auto vars:     Size  Location     Type
 22290 ;;		None
 22291 ;; Return value:  Size  Location     Type
 22292 ;;		None               void
 22293 ;; Registers used:
 22294 ;;		wreg
 22295 ;; Tracked objects:
 22296 ;;		On entry : 0/0
 22297 ;;		On exit  : 0/0
 22298 ;;		Unchanged: 0/0
 22299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22304 ;;Total ram usage:        0 bytes
 22305 ;; Hardware stack levels used:    1
 22306 ;; Hardware stack levels required when called:    3
 22307 ;; This function calls:
 22308 ;;		Nothing
 22309 ;; This function is called by:
 22310 ;;		_I2C_Init
 22311 ;;		_I2C_Read
 22312 ;;		_I2C_Write
 22313 ;;		_i2cNack
 22314 ;;		_i2cAck
 22315 ;;		_I2C_Start
 22316 ;;		_I2C_ReStart
 22317 ;;		_I2C_Stop
 22318 ;; This function uses a non-reentrant model
 22319 ;;
 22320                           
 22321                           	psect	text123
 22322  005250                     __ptext123:
 22323                           	opt stack 0
 22324  005250                     _i2cHighScl:
 22325                           	opt stack 23
 22326                           
 22327                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 22328                           
 22329                           ;incstack = 0
 22330  005250  8893               	bsf	3987,4,c	;volatile
 22331                           
 22332                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 22333  005252  0E06               	movlw	6
 22334  005254                     u9397:
 22335  005254  2EE8               	decfsz	wreg,f,c
 22336  005256  D7FE               	goto	u9397
 22337  005258  D000               	nop2		;nop
 22338  00525A  0012               	return		;funcret
 22339  00525C                     __end_of_i2cHighScl:
 22340                           	opt stack 0
 22341                           tblptru	equ	0xFF8
 22342                           tblptrh	equ	0xFF7
 22343                           tblptrl	equ	0xFF6
 22344                           tablat	equ	0xFF5
 22345                           prodh	equ	0xFF4
 22346                           prodl	equ	0xFF3
 22347                           intcon	equ	0xFF2
 22348                           intcon2	equ	0xFF1
 22349                           intcon3	equ	0xFF0
 22350                           postinc0	equ	0xFEE
 22351                           wreg	equ	0xFE8
 22352                           postdec1	equ	0xFE5
 22353                           fsr1l	equ	0xFE1
 22354                           indf2	equ	0xFDF
 22355                           postinc2	equ	0xFDE
 22356                           postdec2	equ	0xFDD
 22357                           fsr2h	equ	0xFDA
 22358                           fsr2l	equ	0xFD9
 22359                           status	equ	0xFD8
 22360                           
 22361 ;; *************** function _chkisr *****************
 22362 ;; Defined at:
 22363 ;;		line 38 in file "Interrupt.c"
 22364 ;; Parameters:    Size  Location     Type
 22365 ;;		None
 22366 ;; Auto vars:     Size  Location     Type
 22367 ;;		None
 22368 ;; Return value:  Size  Location     Type
 22369 ;;		None               void
 22370 ;; Registers used:
 22371 ;;		wreg, status,2, status,0, cstack
 22372 ;; Tracked objects:
 22373 ;;		On entry : 0/0
 22374 ;;		On exit  : 0/0
 22375 ;;		Unchanged: 0/0
 22376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22379 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22380 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22381 ;;Total ram usage:       14 bytes
 22382 ;; Hardware stack levels used:    1
 22383 ;; Hardware stack levels required when called:    2
 22384 ;; This function calls:
 22385 ;;		_INT0_isr
 22386 ;;		_INT1_isr
 22387 ;;		_TIMER1_isr
 22388 ;; This function is called by:
 22389 ;;		Interrupt level 2
 22390 ;; This function uses a non-reentrant model
 22391 ;;
 22392                           
 22393                           	psect	intcode
 22394  000008                     __pintcode:
 22395                           	opt stack 0
 22396  000008                     _chkisr:
 22397                           	opt stack 18
 22398                           
 22399                           ;incstack = 0
 22400  000008  CFFA F003          	movff	pclath,??_chkisr
 22401  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 22402  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 22403  000014  ED98  F021         	call	int_func,f	;refresh shadow registers
 22404                           pclatu	equ	0xFFB
 22405                           pclath	equ	0xFFA
 22406                           tblptru	equ	0xFF8
 22407                           tblptrh	equ	0xFF7
 22408                           tblptrl	equ	0xFF6
 22409                           tablat	equ	0xFF5
 22410                           prodh	equ	0xFF4
 22411                           prodl	equ	0xFF3
 22412                           intcon	equ	0xFF2
 22413                           intcon2	equ	0xFF1
 22414                           intcon3	equ	0xFF0
 22415                           postinc0	equ	0xFEE
 22416                           fsr0l	equ	0xFE9
 22417                           wreg	equ	0xFE8
 22418                           postdec1	equ	0xFE5
 22419                           fsr1l	equ	0xFE1
 22420                           indf2	equ	0xFDF
 22421                           postinc2	equ	0xFDE
 22422                           postdec2	equ	0xFDD
 22423                           fsr2h	equ	0xFDA
 22424                           fsr2l	equ	0xFD9
 22425                           status	equ	0xFD8
 22426                           
 22427                           	psect	intcode_body
 22428  004330                     __pintcode_body:
 22429                           	opt stack 18
 22430  004330                     int_func:
 22431                           	opt stack 18
 22432  004330  0006               	pop		; remove dummy address from shadow register refresh
 22433  004332  CFEA F006          	movff	fsr0h,??_chkisr+3
 22434  004336  CFE1 F007          	movff	fsr1l,??_chkisr+4
 22435  00433A  CFE2 F008          	movff	fsr1h,??_chkisr+5
 22436  00433E  CFD9 F009          	movff	fsr2l,??_chkisr+6
 22437  004342  CFDA F00A          	movff	fsr2h,??_chkisr+7
 22438  004346  CFF3 F00B          	movff	prodl,??_chkisr+8
 22439  00434A  CFF4 F00C          	movff	prodh,??_chkisr+9
 22440  00434E  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 22441  004352  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 22442  004356  CFF8 F00F          	movff	tblptru,??_chkisr+12
 22443  00435A  CFF5 F010          	movff	tablat,??_chkisr+13
 22444                           
 22445                           ;Interrupt.c: 41: if(PIR1bits.TMR1IF == 1) TIMER1_isr();
 22446  00435E  A09E               	btfss	3998,0,c	;volatile
 22447  004360  D003               	goto	i2l8388
 22448  004362  EC21  F029         	call	_TIMER1_isr	;wreg free
 22449  004366  D000               	goto	i2l8388
 22450  004368                     i2l8388:
 22451                           
 22452                           ;Interrupt.c: 42: if(INTCONbits.INT0IF == 1) INT0_isr();
 22453  004368  A2F2               	btfss	intcon,1,c	;volatile
 22454  00436A  D003               	goto	i2l8392
 22455  00436C  ECC8  F012         	call	_INT0_isr	;wreg free
 22456  004370  D000               	goto	i2l8392
 22457  004372                     i2l8392:
 22458                           
 22459                           ;Interrupt.c: 43: if(INTCON3bits.INT1IF == 1) INT1_isr();
 22460  004372  A0F0               	btfss	intcon3,0,c	;volatile
 22461  004374  D003               	goto	i2l282
 22462  004376  EC3D  F029         	call	_INT1_isr	;wreg free
 22463  00437A  D000               	goto	i2l282
 22464  00437C                     i2l282:
 22465  00437C  C010  FFF5         	movff	??_chkisr+13,tablat
 22466  004380  C00F  FFF8         	movff	??_chkisr+12,tblptru
 22467  004384  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 22468  004388  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 22469  00438C  C00C  FFF4         	movff	??_chkisr+9,prodh
 22470  004390  C00B  FFF3         	movff	??_chkisr+8,prodl
 22471  004394  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 22472  004398  C009  FFD9         	movff	??_chkisr+6,fsr2l
 22473  00439C  C008  FFE2         	movff	??_chkisr+5,fsr1h
 22474  0043A0  C007  FFE1         	movff	??_chkisr+4,fsr1l
 22475  0043A4  C006  FFEA         	movff	??_chkisr+3,fsr0h
 22476  0043A8  C005  FFE9         	movff	??_chkisr+2,fsr0l
 22477  0043AC  C004  FFFB         	movff	??_chkisr+1,pclatu
 22478  0043B0  C003  FFFA         	movff	??_chkisr,pclath
 22479  0043B4  0011               	retfie		f
 22480  0043B6                     __end_of_chkisr:
 22481                           	opt stack 0
 22482                           pclatu	equ	0xFFB
 22483                           pclath	equ	0xFFA
 22484                           tblptru	equ	0xFF8
 22485                           tblptrh	equ	0xFF7
 22486                           tblptrl	equ	0xFF6
 22487                           tablat	equ	0xFF5
 22488                           prodh	equ	0xFF4
 22489                           prodl	equ	0xFF3
 22490                           intcon	equ	0xFF2
 22491                           intcon2	equ	0xFF1
 22492                           intcon3	equ	0xFF0
 22493                           postinc0	equ	0xFEE
 22494                           fsr0h	equ	0xFEA
 22495                           fsr0l	equ	0xFE9
 22496                           wreg	equ	0xFE8
 22497                           postdec1	equ	0xFE5
 22498                           fsr1h	equ	0xFE2
 22499                           fsr1l	equ	0xFE1
 22500                           indf2	equ	0xFDF
 22501                           postinc2	equ	0xFDE
 22502                           postdec2	equ	0xFDD
 22503                           fsr2h	equ	0xFDA
 22504                           fsr2l	equ	0xFD9
 22505                           status	equ	0xFD8
 22506                           
 22507 ;; *************** function _TIMER1_isr *****************
 22508 ;; Defined at:
 22509 ;;		line 47 in file "Interrupt.c"
 22510 ;; Parameters:    Size  Location     Type
 22511 ;;		None
 22512 ;; Auto vars:     Size  Location     Type
 22513 ;;		None
 22514 ;; Return value:  Size  Location     Type
 22515 ;;		None               void
 22516 ;; Registers used:
 22517 ;;		wreg, status,2
 22518 ;; Tracked objects:
 22519 ;;		On entry : 0/0
 22520 ;;		On exit  : 0/0
 22521 ;;		Unchanged: 0/0
 22522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22527 ;;Total ram usage:        0 bytes
 22528 ;; Hardware stack levels used:    1
 22529 ;; This function calls:
 22530 ;;		Nothing
 22531 ;; This function is called by:
 22532 ;;		_chkisr
 22533 ;; This function uses a non-reentrant model
 22534 ;;
 22535                           
 22536                           	psect	text125
 22537  005242                     __ptext125:
 22538                           	opt stack 0
 22539  005242                     _TIMER1_isr:
 22540                           	opt stack 19
 22541                           
 22542                           ;Interrupt.c: 49: Nec_state = 0;
 22543                           
 22544                           ;incstack = 0
 22545  005242  0E00               	movlw	0
 22546  005244  0100               	movlb	0	; () banked
 22547  005246  6FA1               	movwf	_Nec_state& (0+255),b
 22548                           
 22549                           ; BSR set to: 0
 22550                           ;Interrupt.c: 50: INTCON2bits.INTEDG0 = 0;
 22551  005248  9CF1               	bcf	intcon2,6,c	;volatile
 22552                           
 22553                           ; BSR set to: 0
 22554                           ;Interrupt.c: 51: T1CONbits.TMR1ON = 0;
 22555  00524A  90CD               	bcf	4045,0,c	;volatile
 22556                           
 22557                           ; BSR set to: 0
 22558                           ;Interrupt.c: 52: PIR1bits.TMR1IF = 0;
 22559  00524C  909E               	bcf	3998,0,c	;volatile
 22560                           
 22561                           ; BSR set to: 0
 22562  00524E  0012               	return		;funcret
 22563  005250                     __end_of_TIMER1_isr:
 22564                           	opt stack 0
 22565                           pclatu	equ	0xFFB
 22566                           pclath	equ	0xFFA
 22567                           tblptru	equ	0xFF8
 22568                           tblptrh	equ	0xFF7
 22569                           tblptrl	equ	0xFF6
 22570                           tablat	equ	0xFF5
 22571                           prodh	equ	0xFF4
 22572                           prodl	equ	0xFF3
 22573                           intcon	equ	0xFF2
 22574                           intcon2	equ	0xFF1
 22575                           intcon3	equ	0xFF0
 22576                           postinc0	equ	0xFEE
 22577                           fsr0h	equ	0xFEA
 22578                           fsr0l	equ	0xFE9
 22579                           wreg	equ	0xFE8
 22580                           postdec1	equ	0xFE5
 22581                           fsr1h	equ	0xFE2
 22582                           fsr1l	equ	0xFE1
 22583                           indf2	equ	0xFDF
 22584                           postinc2	equ	0xFDE
 22585                           postdec2	equ	0xFDD
 22586                           fsr2h	equ	0xFDA
 22587                           fsr2l	equ	0xFD9
 22588                           status	equ	0xFD8
 22589                           
 22590 ;; *************** function _INT1_isr *****************
 22591 ;; Defined at:
 22592 ;;		line 150 in file "Interrupt.c"
 22593 ;; Parameters:    Size  Location     Type
 22594 ;;		None
 22595 ;; Auto vars:     Size  Location     Type
 22596 ;;		None
 22597 ;; Return value:  Size  Location     Type
 22598 ;;		None               void
 22599 ;; Registers used:
 22600 ;;		wreg, status,2
 22601 ;; Tracked objects:
 22602 ;;		On entry : 0/0
 22603 ;;		On exit  : 0/0
 22604 ;;		Unchanged: 0/0
 22605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22610 ;;Total ram usage:        0 bytes
 22611 ;; Hardware stack levels used:    1
 22612 ;; This function calls:
 22613 ;;		Nothing
 22614 ;; This function is called by:
 22615 ;;		_chkisr
 22616 ;; This function uses a non-reentrant model
 22617 ;;
 22618                           
 22619                           	psect	text126
 22620  00527A                     __ptext126:
 22621                           	opt stack 0
 22622  00527A                     _INT1_isr:
 22623                           	opt stack 19
 22624                           
 22625                           ;Interrupt.c: 153: INTCON3bits.INT1IF = 0;
 22626                           
 22627                           ; BSR set to: 0
 22628                           ;incstack = 0
 22629  00527A  90F0               	bcf	intcon3,0,c	;volatile
 22630                           
 22631                           ;Interrupt.c: 154: INT1_flag = 1;
 22632  00527C  0E01               	movlw	1
 22633  00527E  0100               	movlb	0	; () banked
 22634  005280  6F9C               	movwf	_INT1_flag& (0+255),b
 22635                           
 22636                           ; BSR set to: 0
 22637  005282  0012               	return		;funcret
 22638  005284                     __end_of_INT1_isr:
 22639                           	opt stack 0
 22640                           pclatu	equ	0xFFB
 22641                           pclath	equ	0xFFA
 22642                           tblptru	equ	0xFF8
 22643                           tblptrh	equ	0xFF7
 22644                           tblptrl	equ	0xFF6
 22645                           tablat	equ	0xFF5
 22646                           prodh	equ	0xFF4
 22647                           prodl	equ	0xFF3
 22648                           intcon	equ	0xFF2
 22649                           intcon2	equ	0xFF1
 22650                           intcon3	equ	0xFF0
 22651                           postinc0	equ	0xFEE
 22652                           fsr0h	equ	0xFEA
 22653                           fsr0l	equ	0xFE9
 22654                           wreg	equ	0xFE8
 22655                           postdec1	equ	0xFE5
 22656                           fsr1h	equ	0xFE2
 22657                           fsr1l	equ	0xFE1
 22658                           indf2	equ	0xFDF
 22659                           postinc2	equ	0xFDE
 22660                           postdec2	equ	0xFDD
 22661                           fsr2h	equ	0xFDA
 22662                           fsr2l	equ	0xFD9
 22663                           status	equ	0xFD8
 22664                           
 22665 ;; *************** function _INT0_isr *****************
 22666 ;; Defined at:
 22667 ;;		line 61 in file "Interrupt.c"
 22668 ;; Parameters:    Size  Location     Type
 22669 ;;		None
 22670 ;; Auto vars:     Size  Location     Type
 22671 ;;		None
 22672 ;; Return value:  Size  Location     Type
 22673 ;;		None               void
 22674 ;; Registers used:
 22675 ;;		wreg, status,2, status,0, cstack
 22676 ;; Tracked objects:
 22677 ;;		On entry : 0/0
 22678 ;;		On exit  : 0/0
 22679 ;;		Unchanged: 0/0
 22680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22683 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22685 ;;Total ram usage:        2 bytes
 22686 ;; Hardware stack levels used:    1
 22687 ;; Hardware stack levels required when called:    1
 22688 ;; This function calls:
 22689 ;;		_force_nec_state0
 22690 ;; This function is called by:
 22691 ;;		_chkisr
 22692 ;; This function uses a non-reentrant model
 22693 ;;
 22694                           
 22695                           	psect	text127
 22696  002590                     __ptext127:
 22697                           	opt stack 0
 22698  002590                     _INT0_isr:
 22699                           	opt stack 18
 22700                           
 22701                           ;Interrupt.c: 64: INTCONbits.INT0IF = 0;
 22702                           
 22703                           ; BSR set to: 0
 22704                           ;incstack = 0
 22705  002590  92F2               	bcf	intcon,1,c	;volatile
 22706                           
 22707                           ;Interrupt.c: 65: if (Nec_state != 0)
 22708  002592  0100               	movlb	0	; () banked
 22709  002594  51A1               	movf	_Nec_state& (0+255),w,b
 22710  002596  B4D8               	btfsc	status,2,c
 22711  002598  D0AD               	goto	i2l7902
 22712                           
 22713                           ; BSR set to: 0
 22714                           ;Interrupt.c: 66: {
 22715                           ;Interrupt.c: 67: Time_Elapsed = (TMR1H << 8) | TMR1L;
 22716  00259A  50CE               	movf	4046,w,c	;volatile
 22717  00259C  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 22718  0025A0  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 22719  0025A2  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 22720  0025A6  6A01               	clrf	??_INT0_isr,c
 22721  0025A8  1001               	iorwf	??_INT0_isr,w,c
 22722  0025AA  6E60               	movwf	_Time_Elapsed,c
 22723  0025AC  5002               	movf	??_INT0_isr+1,w,c
 22724  0025AE  6E61               	movwf	_Time_Elapsed+1,c
 22725                           
 22726                           ; BSR set to: 0
 22727                           ;Interrupt.c: 68: TMR1H = 0;
 22728  0025B0  0E00               	movlw	0
 22729  0025B2  6ECF               	movwf	4047,c	;volatile
 22730                           
 22731                           ; BSR set to: 0
 22732                           ;Interrupt.c: 69: TMR1L = 0;
 22733  0025B4  0E00               	movlw	0
 22734  0025B6  6ECE               	movwf	4046,c	;volatile
 22735                           
 22736                           ; BSR set to: 0
 22737                           ;Interrupt.c: 70: }
 22738                           ;Interrupt.c: 72: switch(Nec_state)
 22739  0025B8  D09D               	goto	i2l7902
 22740  0025BA                     i2l7840:
 22741                           
 22742                           ; BSR set to: 0
 22743                           ;Interrupt.c: 75: {
 22744                           ;Interrupt.c: 77: TMR1H = 0;
 22745  0025BA  0E00               	movlw	0
 22746  0025BC  6ECF               	movwf	4047,c	;volatile
 22747                           
 22748                           ;Interrupt.c: 78: TMR1L = 0;
 22749  0025BE  0E00               	movlw	0
 22750  0025C0  6ECE               	movwf	4046,c	;volatile
 22751                           
 22752                           ; BSR set to: 0
 22753                           ;Interrupt.c: 79: PIR1bits.TMR1IF = 0;
 22754  0025C2  909E               	bcf	3998,0,c	;volatile
 22755                           
 22756                           ;Interrupt.c: 80: T1CON= 0x90;
 22757  0025C4  0E90               	movlw	144
 22758  0025C6  6ECD               	movwf	4045,c	;volatile
 22759                           
 22760                           ; BSR set to: 0
 22761                           ;Interrupt.c: 81: T1CONbits.TMR1ON = 1;
 22762  0025C8  80CD               	bsf	4045,0,c	;volatile
 22763                           
 22764                           ;Interrupt.c: 82: bit_count = 0;
 22765  0025CA  0E00               	movlw	0
 22766  0025CC  0100               	movlb	0	; () banked
 22767  0025CE  6FA7               	movwf	_bit_count& (0+255),b
 22768                           
 22769                           ;Interrupt.c: 83: Nec_code = 0;
 22770  0025D0  0E00               	movlw	0
 22771  0025D2  0100               	movlb	0	; () banked
 22772  0025D4  6F80               	movwf	_Nec_code& (0+255),b
 22773  0025D6  0E00               	movlw	0
 22774  0025D8  6F81               	movwf	(_Nec_code+1)& (0+255),b
 22775  0025DA  0E00               	movlw	0
 22776  0025DC  6F82               	movwf	(_Nec_code+2)& (0+255),b
 22777  0025DE  0E00               	movlw	0
 22778  0025E0  6F83               	movwf	(_Nec_code+3)& (0+255),b
 22779                           
 22780                           ;Interrupt.c: 84: Nec_state = 1;
 22781  0025E2  0E01               	movlw	1
 22782  0025E4  D01F               	goto	L15
 22783  0025E6                     i2l7846:
 22784                           
 22785                           ; BSR set to: 0
 22786                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 1;
 22787  0025E6  8CF1               	bsf	intcon2,6,c	;volatile
 22788                           
 22789                           ; BSR set to: 0
 22790                           ;Interrupt.c: 86: return;
 22791  0025E8  D097               	goto	i2l294
 22792  0025EA                     i2l7850:
 22793                           
 22794                           ; BSR set to: 0
 22795                           ;Interrupt.c: 90: {
 22796                           ;Interrupt.c: 91: if((Time_Elapsed > 8500)&&(Time_Elapsed < 9500))
 22797  0025EA  0E35               	movlw	53
 22798  0025EC  5C60               	subwf	_Time_Elapsed,w,c
 22799  0025EE  0E21               	movlw	33
 22800  0025F0  5861               	subwfb	_Time_Elapsed+1,w,c
 22801  0025F2  A0D8               	btfss	status,0,c
 22802  0025F4  D091               	goto	i2l294
 22803                           
 22804                           ; BSR set to: 0
 22805  0025F6  0E1C               	movlw	28
 22806  0025F8  5C60               	subwf	_Time_Elapsed,w,c
 22807  0025FA  0E25               	movlw	37
 22808  0025FC  5861               	subwfb	_Time_Elapsed+1,w,c
 22809  0025FE  B0D8               	btfsc	status,0,c
 22810  002600  D08B               	goto	i2l294
 22811                           
 22812                           ; BSR set to: 0
 22813                           ;Interrupt.c: 92: {
 22814                           ;Interrupt.c: 93: Nec_state = 2;
 22815  002602  0E02               	movlw	2
 22816  002604  D020               	goto	L16
 22817  002606                     i2l7856:
 22818                           
 22819                           ; BSR set to: 0
 22820                           ;Interrupt.c: 94: INTCON2bits.INTEDG0 = 0;
 22821  002606  9CF1               	bcf	intcon2,6,c	;volatile
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;Interrupt.c: 95: }
 22825                           ;Interrupt.c: 96: return;
 22826                           
 22827                           ; BSR set to: 0
 22828  002608  D087               	goto	i2l294
 22829  00260A                     i2l7860:
 22830                           
 22831                           ; BSR set to: 0
 22832                           ;Interrupt.c: 100: {
 22833                           ;Interrupt.c: 101: if((Time_Elapsed > 4000)&&(Time_Elapsed < 5000))
 22834  00260A  0EA1               	movlw	161
 22835  00260C  5C60               	subwf	_Time_Elapsed,w,c
 22836  00260E  0E0F               	movlw	15
 22837  002610  5861               	subwfb	_Time_Elapsed+1,w,c
 22838  002612  A0D8               	btfss	status,0,c
 22839  002614  D081               	goto	i2l294
 22840                           
 22841                           ; BSR set to: 0
 22842  002616  0E88               	movlw	136
 22843  002618  5C60               	subwf	_Time_Elapsed,w,c
 22844  00261A  0E13               	movlw	19
 22845  00261C  5861               	subwfb	_Time_Elapsed+1,w,c
 22846  00261E  B0D8               	btfsc	status,0,c
 22847  002620  D07B               	goto	i2l294
 22848                           
 22849                           ; BSR set to: 0
 22850                           ;Interrupt.c: 102: {
 22851                           ;Interrupt.c: 103: Nec_state = 3;
 22852  002622  0E03               	movlw	3
 22853  002624                     L15:
 22854  002624  0100               	movlb	0	; () banked
 22855  002626  6FA1               	movwf	_Nec_state& (0+255),b
 22856  002628  D7DE               	goto	i2l7846
 22857                           
 22858                           ; BSR set to: 0
 22859                           ;Interrupt.c: 105: }
 22860                           ;Interrupt.c: 106: return;
 22861                           
 22862                           ; BSR set to: 0
 22863                           
 22864                           ; BSR set to: 0
 22865                           ;Interrupt.c: 104: INTCON2bits.INTEDG0 = 1;
 22866  00262A  D076               	goto	i2l294
 22867  00262C                     i2l7870:
 22868                           
 22869                           ; BSR set to: 0
 22870                           ;Interrupt.c: 110: {
 22871                           ;Interrupt.c: 111: if((Time_Elapsed > 400)&&(Time_Elapsed < 700))
 22872  00262C  0E91               	movlw	145
 22873  00262E  5C60               	subwf	_Time_Elapsed,w,c
 22874  002630  0E01               	movlw	1
 22875  002632  5861               	subwfb	_Time_Elapsed+1,w,c
 22876  002634  A0D8               	btfss	status,0,c
 22877  002636  D070               	goto	i2l294
 22878                           
 22879                           ; BSR set to: 0
 22880  002638  0EBC               	movlw	188
 22881  00263A  5C60               	subwf	_Time_Elapsed,w,c
 22882  00263C  0E02               	movlw	2
 22883  00263E  5861               	subwfb	_Time_Elapsed+1,w,c
 22884  002640  B0D8               	btfsc	status,0,c
 22885  002642  D06A               	goto	i2l294
 22886                           
 22887                           ; BSR set to: 0
 22888                           ;Interrupt.c: 112: {
 22889                           ;Interrupt.c: 113: Nec_state = 4;
 22890  002644  0E04               	movlw	4
 22891  002646                     L16:
 22892  002646  0100               	movlb	0	; () banked
 22893  002648  6FA1               	movwf	_Nec_state& (0+255),b
 22894  00264A  D7DD               	goto	i2l7856
 22895                           
 22896                           ; BSR set to: 0
 22897                           ;Interrupt.c: 115: }
 22898                           ;Interrupt.c: 116: return;
 22899                           
 22900                           ; BSR set to: 0
 22901                           
 22902                           ; BSR set to: 0
 22903                           ;Interrupt.c: 114: INTCON2bits.INTEDG0 = 0;
 22904  00264C  D065               	goto	i2l294
 22905  00264E                     i2l7880:
 22906                           
 22907                           ; BSR set to: 0
 22908                           ;Interrupt.c: 120: {
 22909                           ;Interrupt.c: 121: if((Time_Elapsed > 400)&&(Time_Elapsed < 1800))
 22910  00264E  0E91               	movlw	145
 22911  002650  5C60               	subwf	_Time_Elapsed,w,c
 22912  002652  0E01               	movlw	1
 22913  002654  5861               	subwfb	_Time_Elapsed+1,w,c
 22914  002656  A0D8               	btfss	status,0,c
 22915  002658  D048               	goto	i2l7894
 22916                           
 22917                           ; BSR set to: 0
 22918  00265A  0E08               	movlw	8
 22919  00265C  5C60               	subwf	_Time_Elapsed,w,c
 22920  00265E  0E07               	movlw	7
 22921  002660  5861               	subwfb	_Time_Elapsed+1,w,c
 22922  002662  B0D8               	btfsc	status,0,c
 22923  002664  D042               	goto	i2l7894
 22924                           
 22925                           ; BSR set to: 0
 22926                           ;Interrupt.c: 122: {
 22927                           ;Interrupt.c: 123: Nec_code = Nec_code << 1;
 22928  002666  90D8               	bcf	status,0,c
 22929  002668  0100               	movlb	0	; () banked
 22930  00266A  3580               	rlcf	_Nec_code& (0+255),w,b
 22931  00266C  0100               	movlb	0	; () banked
 22932  00266E  6F80               	movwf	_Nec_code& (0+255),b
 22933  002670  0100               	movlb	0	; () banked
 22934  002672  3581               	rlcf	(_Nec_code+1)& (0+255),w,b
 22935  002674  0100               	movlb	0	; () banked
 22936  002676  6F81               	movwf	(_Nec_code+1)& (0+255),b
 22937  002678  0100               	movlb	0	; () banked
 22938  00267A  3582               	rlcf	(_Nec_code+2)& (0+255),w,b
 22939  00267C  0100               	movlb	0	; () banked
 22940  00267E  6F82               	movwf	(_Nec_code+2)& (0+255),b
 22941  002680  0100               	movlb	0	; () banked
 22942  002682  3583               	rlcf	(_Nec_code+3)& (0+255),w,b
 22943  002684  0100               	movlb	0	; () banked
 22944  002686  6F83               	movwf	(_Nec_code+3)& (0+255),b
 22945                           
 22946                           ;Interrupt.c: 124: if(Time_Elapsed > 1000)
 22947  002688  0EE9               	movlw	233
 22948  00268A  5C60               	subwf	_Time_Elapsed,w,c
 22949  00268C  0E03               	movlw	3
 22950  00268E  5861               	subwfb	_Time_Elapsed+1,w,c
 22951  002690  A0D8               	btfss	status,0,c
 22952  002692  D014               	goto	i2l303
 22953                           
 22954                           ; BSR set to: 0
 22955                           ;Interrupt.c: 125: {
 22956                           ;Interrupt.c: 126: Nec_code = Nec_code + 1;
 22957  002694  0E01               	movlw	1
 22958  002696  0100               	movlb	0	; () banked
 22959  002698  2580               	addwf	_Nec_code& (0+255),w,b
 22960  00269A  0100               	movlb	0	; () banked
 22961  00269C  6F80               	movwf	_Nec_code& (0+255),b
 22962  00269E  0E00               	movlw	0
 22963  0026A0  0100               	movlb	0	; () banked
 22964  0026A2  2181               	addwfc	(_Nec_code+1)& (0+255),w,b
 22965  0026A4  0100               	movlb	0	; () banked
 22966  0026A6  6F81               	movwf	(_Nec_code+1)& (0+255),b
 22967  0026A8  0E00               	movlw	0
 22968  0026AA  0100               	movlb	0	; () banked
 22969  0026AC  2182               	addwfc	(_Nec_code+2)& (0+255),w,b
 22970  0026AE  0100               	movlb	0	; () banked
 22971  0026B0  6F82               	movwf	(_Nec_code+2)& (0+255),b
 22972  0026B2  0E00               	movlw	0
 22973  0026B4  0100               	movlb	0	; () banked
 22974  0026B6  2183               	addwfc	(_Nec_code+3)& (0+255),w,b
 22975  0026B8  0100               	movlb	0	; () banked
 22976  0026BA  6F83               	movwf	(_Nec_code+3)& (0+255),b
 22977  0026BC                     i2l303:
 22978                           
 22979                           ; BSR set to: 0
 22980                           ;Interrupt.c: 127: }
 22981                           ;Interrupt.c: 129: bit_count = bit_count + 1;
 22982  0026BC  0100               	movlb	0	; () banked
 22983  0026BE  29A7               	incf	_bit_count& (0+255),w,b
 22984  0026C0  0100               	movlb	0	; () banked
 22985  0026C2  6FA7               	movwf	_bit_count& (0+255),b
 22986                           
 22987                           ;Interrupt.c: 130: if(bit_count > 31)
 22988  0026C4  0E1F               	movlw	31
 22989  0026C6  0100               	movlb	0	; () banked
 22990  0026C8  65A7               	cpfsgt	_bit_count& (0+255),b
 22991  0026CA  D00B               	goto	i2l304
 22992                           
 22993                           ; BSR set to: 0
 22994                           ;Interrupt.c: 131: {
 22995                           ;Interrupt.c: 132: nec_ok = 1;
 22996  0026CC  0E00               	movlw	0
 22997  0026CE  0100               	movlb	0	; () banked
 22998  0026D0  6F96               	movwf	(_nec_ok+1)& (0+255),b
 22999  0026D2  0E01               	movlw	1
 23000  0026D4  6F95               	movwf	_nec_ok& (0+255),b
 23001                           
 23002                           ; BSR set to: 0
 23003                           ;Interrupt.c: 133: Nec_code1 = (char) ((Nec_code >> 8));
 23004  0026D6  C081  F0A0         	movff	_Nec_code+1,_Nec_code1
 23005                           
 23006                           ; BSR set to: 0
 23007                           ;Interrupt.c: 134: INTCONbits.INT0IE = 0;
 23008  0026DA  98F2               	bcf	intcon,4,c	;volatile
 23009                           
 23010                           ;Interrupt.c: 135: Nec_state = 0;
 23011  0026DC  0E00               	movlw	0
 23012  0026DE  0100               	movlb	0	; () banked
 23013  0026E0  6FA1               	movwf	_Nec_state& (0+255),b
 23014  0026E2                     i2l304:
 23015                           
 23016                           ; BSR set to: 0
 23017                           ;Interrupt.c: 136: }
 23018                           ;Interrupt.c: 138: Nec_state = 3;
 23019  0026E2  0E03               	movlw	3
 23020  0026E4  0100               	movlb	0	; () banked
 23021  0026E6  6FA1               	movwf	_Nec_state& (0+255),b
 23022                           
 23023                           ;Interrupt.c: 139: }
 23024  0026E8  D77E               	goto	i2l7846
 23025  0026EA                     i2l7894:
 23026                           
 23027                           ; BSR set to: 0
 23028                           ;Interrupt.c: 140: else
 23029                           ;Interrupt.c: 141: force_nec_state0();
 23030  0026EA  EC42  F029         	call	_force_nec_state0	;wreg free
 23031  0026EE  D77B               	goto	i2l7846
 23032  0026F0  D77A               	goto	i2l7846
 23033                           
 23034                           ;Interrupt.c: 145: }
 23035                           ;Interrupt.c: 146: }
 23036                           
 23037                           ;Interrupt.c: 144: return;
 23038                           
 23039                           ;Interrupt.c: 143: INTCON2bits.INTEDG0 = 1;
 23040  0026F2  D012               	goto	i2l294
 23041  0026F4                     i2l7902:
 23042  0026F4  0100               	movlb	0	; () banked
 23043  0026F6  51A1               	movf	_Nec_state& (0+255),w,b
 23044                           
 23045                           ; Switch size 1, requested type "space"
 23046                           ; Number of cases is 5, Range of values is 0 to 4
 23047                           ; switch strategies available:
 23048                           ; Name         Instructions Cycles
 23049                           ; simple_byte           16     9 (average)
 23050                           ;	Chosen strategy is simple_byte
 23051  0026F8  0A00               	xorlw	0	; case 0
 23052  0026FA  B4D8               	btfsc	status,2,c
 23053  0026FC  D75E               	goto	i2l7840
 23054  0026FE  0A01               	xorlw	1	; case 1
 23055  002700  B4D8               	btfsc	status,2,c
 23056  002702  D773               	goto	i2l7850
 23057  002704  0A03               	xorlw	3	; case 2
 23058  002706  B4D8               	btfsc	status,2,c
 23059  002708  D780               	goto	i2l7860
 23060  00270A  0A01               	xorlw	1	; case 3
 23061  00270C  B4D8               	btfsc	status,2,c
 23062  00270E  D78E               	goto	i2l7870
 23063  002710  0A07               	xorlw	7	; case 4
 23064  002712  B4D8               	btfsc	status,2,c
 23065  002714  D79C               	goto	i2l7880
 23066  002716  D000               	goto	i2l294
 23067  002718                     i2l294:
 23068  002718  0012               	return		;funcret
 23069  00271A                     __end_of_INT0_isr:
 23070                           	opt stack 0
 23071                           pclatu	equ	0xFFB
 23072                           pclath	equ	0xFFA
 23073                           tblptru	equ	0xFF8
 23074                           tblptrh	equ	0xFF7
 23075                           tblptrl	equ	0xFF6
 23076                           tablat	equ	0xFF5
 23077                           prodh	equ	0xFF4
 23078                           prodl	equ	0xFF3
 23079                           intcon	equ	0xFF2
 23080                           intcon2	equ	0xFF1
 23081                           intcon3	equ	0xFF0
 23082                           postinc0	equ	0xFEE
 23083                           fsr0h	equ	0xFEA
 23084                           fsr0l	equ	0xFE9
 23085                           wreg	equ	0xFE8
 23086                           postdec1	equ	0xFE5
 23087                           fsr1h	equ	0xFE2
 23088                           fsr1l	equ	0xFE1
 23089                           indf2	equ	0xFDF
 23090                           postinc2	equ	0xFDE
 23091                           postdec2	equ	0xFDD
 23092                           fsr2h	equ	0xFDA
 23093                           fsr2l	equ	0xFD9
 23094                           status	equ	0xFD8
 23095                           
 23096 ;; *************** function _force_nec_state0 *****************
 23097 ;; Defined at:
 23098 ;;		line 55 in file "Interrupt.c"
 23099 ;; Parameters:    Size  Location     Type
 23100 ;;		None
 23101 ;; Auto vars:     Size  Location     Type
 23102 ;;		None
 23103 ;; Return value:  Size  Location     Type
 23104 ;;		None               void
 23105 ;; Registers used:
 23106 ;;		wreg, status,2
 23107 ;; Tracked objects:
 23108 ;;		On entry : 0/0
 23109 ;;		On exit  : 0/0
 23110 ;;		Unchanged: 0/0
 23111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23116 ;;Total ram usage:        0 bytes
 23117 ;; Hardware stack levels used:    1
 23118 ;; This function calls:
 23119 ;;		Nothing
 23120 ;; This function is called by:
 23121 ;;		_INT0_isr
 23122 ;; This function uses a non-reentrant model
 23123 ;;
 23124                           
 23125                           	psect	text128
 23126  005284                     __ptext128:
 23127                           	opt stack 0
 23128  005284                     _force_nec_state0:
 23129                           	opt stack 18
 23130                           
 23131                           ;Interrupt.c: 57: Nec_state=0;
 23132                           
 23133                           ;incstack = 0
 23134  005284  0E00               	movlw	0
 23135  005286  0100               	movlb	0	; () banked
 23136  005288  6FA1               	movwf	_Nec_state& (0+255),b
 23137                           
 23138                           ; BSR set to: 0
 23139                           ;Interrupt.c: 58: T1CONbits.TMR1ON = 0;
 23140  00528A  90CD               	bcf	4045,0,c	;volatile
 23141                           
 23142                           ; BSR set to: 0
 23143  00528C  0012               	return		;funcret
 23144  00528E                     __end_of_force_nec_state0:
 23145                           	opt stack 0
 23146                           pclatu	equ	0xFFB
 23147                           pclath	equ	0xFFA
 23148                           tblptru	equ	0xFF8
 23149                           tblptrh	equ	0xFF7
 23150                           tblptrl	equ	0xFF6
 23151                           tablat	equ	0xFF5
 23152                           prodh	equ	0xFF4
 23153                           prodl	equ	0xFF3
 23154                           intcon	equ	0xFF2
 23155                           intcon2	equ	0xFF1
 23156                           intcon3	equ	0xFF0
 23157                           postinc0	equ	0xFEE
 23158                           fsr0h	equ	0xFEA
 23159                           fsr0l	equ	0xFE9
 23160                           wreg	equ	0xFE8
 23161                           postdec1	equ	0xFE5
 23162                           fsr1h	equ	0xFE2
 23163                           fsr1l	equ	0xFE1
 23164                           indf2	equ	0xFDF
 23165                           postinc2	equ	0xFDE
 23166                           postdec2	equ	0xFDD
 23167                           fsr2h	equ	0xFDA
 23168                           fsr2l	equ	0xFD9
 23169                           status	equ	0xFD8
 23170                           pclatu	equ	0xFFB
 23171                           pclath	equ	0xFFA
 23172                           tblptru	equ	0xFF8
 23173                           tblptrh	equ	0xFF7
 23174                           tblptrl	equ	0xFF6
 23175                           tablat	equ	0xFF5
 23176                           prodh	equ	0xFF4
 23177                           prodl	equ	0xFF3
 23178                           intcon	equ	0xFF2
 23179                           intcon2	equ	0xFF1
 23180                           intcon3	equ	0xFF0
 23181                           postinc0	equ	0xFEE
 23182                           fsr0h	equ	0xFEA
 23183                           fsr0l	equ	0xFE9
 23184                           wreg	equ	0xFE8
 23185                           postdec1	equ	0xFE5
 23186                           fsr1h	equ	0xFE2
 23187                           fsr1l	equ	0xFE1
 23188                           indf2	equ	0xFDF
 23189                           postinc2	equ	0xFDE
 23190                           postdec2	equ	0xFDD
 23191                           fsr2h	equ	0xFDA
 23192                           fsr2l	equ	0xFD9
 23193                           status	equ	0xFD8
 23194                           
 23195                           	psect	rparam
 23196  0000                     pclatu	equ	0xFFB
 23197                           pclath	equ	0xFFA
 23198                           tblptru	equ	0xFF8
 23199                           tblptrh	equ	0xFF7
 23200                           tblptrl	equ	0xFF6
 23201                           tablat	equ	0xFF5
 23202                           prodh	equ	0xFF4
 23203                           prodl	equ	0xFF3
 23204                           intcon	equ	0xFF2
 23205                           intcon2	equ	0xFF1
 23206                           intcon3	equ	0xFF0
 23207                           postinc0	equ	0xFEE
 23208                           fsr0h	equ	0xFEA
 23209                           fsr0l	equ	0xFE9
 23210                           wreg	equ	0xFE8
 23211                           postdec1	equ	0xFE5
 23212                           fsr1h	equ	0xFE2
 23213                           fsr1l	equ	0xFE1
 23214                           indf2	equ	0xFDF
 23215                           postinc2	equ	0xFDE
 23216                           postdec2	equ	0xFDD
 23217                           fsr2h	equ	0xFDA
 23218                           fsr2l	equ	0xFD9
 23219                           status	equ	0xFD8


Data Sizes:
    Strings     386
    Constant    625
    Data        159
    BSS         68
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     95     111
    BANK0           128     26     118
    BANK1           256     26     145
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[12]), STR_35(CODE[19]), 
		 -> STR_34(CODE[16]), STR_33(CODE[10]), STR_32(CODE[11]), STR_31(CODE[19]), 
		 -> STR_29(CODE[5]), STR_28(CODE[8]), STR_27(CODE[8]), STR_26(CODE[18]), 
		 -> STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[5]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[7]), STR_16(CODE[13]), STR_15(CODE[9]), STR_14(CODE[11]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[2]), STR_10(CODE[3]), 
		 -> STR_9(CODE[13]), STR_8(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_39(CODE[22]), STR_30(CODE[11]), STR_7(CODE[20]), STR_6(CODE[24]), 
		 -> STR_5(CODE[21]), STR_4(CODE[30]), STR_3(CODE[15]), STR_2(CODE[19]), 
		 -> STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK1[9]), setup_time(BANK1[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK1[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK1[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK1[9]), date(BANK1[9]), time(BANK1[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_check_for_button_input
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    _Test_Alarm->_do_update_pwm
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _Monitor_Heater->_do_update_pwm
    _get_duty_cycle->___awdiv
    _Do_Setup_Time->_check_for_button_input
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Do_Setup_Heater_Temp->_check_for_button_input
    _Initialize_Setup_Heater_Screen->_drawtext
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen
    _Update_Setup_Heater_Screen->_drawtext
    _Do_Setup_Alarm_Time->_check_for_button_input
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    _init_UART->_OpenUSART
    _printf->___ftsub
    _scale->___awmod
    _fround->___awmod
    ___awmod->___fttol
    ___awdiv->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___awdiv
    ___ftdiv->___ftmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Do_Setup_Heater_Temp
    _Turn_On_Fan->_printf
    _Do_Setup_Time->_check_for_button_input
    _Do_Setup_Heater_Temp->_check_for_button_input
    _Do_Setup_Alarm_Time->_check_for_button_input
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf
    _Turn_Off_Fan->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _Turn_On_Fan->_printf
    _check_for_button_input->_printf
    _Update_Setup_Alarm_Time_Screen->_printf
    _Turn_Off_Fan->_printf

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2027834
                                             24 BANK0      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                  _Deactivate_Buzzer
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                      _Set_RGB_Color
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                      _do_update_pwm
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    8771
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        7     7      0   51862
                                             73 COMRAM     7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0  166008
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   83004
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           0     0      0   27309
               _Activate_Buzzer_4KHz
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
                      _do_update_pwm
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    8787
                                             60 COMRAM     8     5      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2386
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                        2     2      0      22
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    1765
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     687
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     581
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_4KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       0     0      0   25925
                            ___awdiv
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       8     4      4    9366
                                             30 COMRAM     8     4      4
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  410540
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   46067
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   42641
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   56128
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   67011
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0   10883
                                             73 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   42641
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   42641
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  371975
                                             22 BANK0      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   37087
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   42743
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   56128
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   56128
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   42743
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   42743
                                             73 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  626620
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0   71963
                                             94 COMRAM     1     1      0
                                             20 BANK0      2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   46067
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0  114471
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0    9312
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0    9312
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0    9334
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0    9334
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   56128
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   67601
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   55833
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    3255
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1819
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    5210
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    9144
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    4482
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    4482
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    4392
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    4392
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0   11178
                                             73 COMRAM     2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2   10724
                                             66 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0   11220
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0   11220
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0  114471
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0  114471
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   32013
                                             56 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     143
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   17508
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    8980
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    2442
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    3367
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3     814
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      45
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      23
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   83826
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0   83004
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              52    38     14   71830
                                              0 BANK0     20     6     14
                                              0 BANK1     26    26      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   19653
                                             66 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   19374
                                             66 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3352
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    5243
                                             60 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    5385
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             16 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             16 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2355
                                             24 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4079
                                             88 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3763
                                             76 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             16 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     718
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0   11174
                                             60 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2219
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     826
                                             45 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4976
                                             30 COMRAM    15     9      6
                            ___awdiv (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2958
                                             45 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2188
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Deactivate_Buzzer
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___awdiv
             ___wmul (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___wmul (ARG)
                 ___awmod
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                   ___fttol (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___wmul (ARG)
                       ___ftpack (ARG)
                       ___lbtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                   ___wmul (ARG)
                 ___ftmul
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___wmul
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
           _isdigit
           _putch
           _scale
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___wmul (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     ___awdiv
       ___wmul (ARG)
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _get_duty_cycle
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _Set_RGB_Color
   _Test_Alarm
     _Activate_Buzzer_4KHz
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
     ___ftge
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___lbtoft
         ___ftpack
     _read_volt
       ___awtoft
         ___ftpack
         ___wmul (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___wmul
       _get_full_ADC
   _Toggle_Heater
     _Turn_Off_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lbtoft
           ___ftpack
       _printf
         ___awdiv
           ___wmul (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___wmul (ARG)
             ___awmod
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
               ___wmul (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___wmul
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___wmul (ARG)
               ___awmod
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___wmul (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                 ___wmul (ARG)
               ___ftmul
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
               ___wmul
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___wmul
         _isdigit
         _putch
         _scale
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
           ___wmul (ARG)
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___awdiv
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu May 12 12:23:28 2022

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            _D2 0134  
                                          l34 3350                                            l36 32E8  
                                          l53 50DA                                            l46 3F2C  
                                          l48 3F30                                            l56 4BB8  
                                          l96 4B36                                            l99 4C44  
                __size_of_Do_Setup_Alarm_Time 00C0                                  ___awdiv@sign 001C  
                        __size_of_Turn_On_Fan 0022                                 read_volt@volt 0040  
                         ___wmul@multiplicand 0013                               ??_Update_Screen 004A  
                                ___ftadd@exp1 0058                                  ___ftadd@exp2 0057  
                                ___ftadd@sign 0056                                           l211 4CEA  
                                         l133 4D1C                                           l516 522A  
                                         l800 38BE                                           l556 2B14  
                                         l743 432E                                           l807 24A4  
                                         l737 4D7E                                           l761 28CC  
                                         l683 4A50                                           l693 513E  
                                         l759 29F2                                           l768 2948  
                                         l796 38C0                                           l797 382C  
                                         l799 389C                                           _PR2 000FCB  
                              read_volt@nStep 0043                          DS3231_Init@Address_7 0017  
                        DS3231_Init@Address_E 0018                                           _day 0067  
                           _Deactivate_Buzzer 528E                          __size_of_I2C_ReStart 0016  
                   __size_of_Do_Save_New_Time 0014                                           _dow 00A9  
                                         _nbr 0093                                           _rpm 0097  
                       __size_of_Turn_Off_Fan 0022                                           _rps 0099  
                                         _txt 0062                                  ___awmod@sign 0042  
                                         wreg 000FE8                                 _Increase_Time 3BE0  
                __size_of_Go_Next_Alarm_Field 0020                            ?_Deactivate_Buzzer 0001  
                 __end_of_Decrease_Alarm_Time 48B4        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 4D80  
                                ___ftdiv@cntr 0037                                  ___ftdiv@sign 003C  
                                __CFG_WDT$OFF 000000                                drawFastVLine@h 0019  
                                        l2007 4EFA                                          l1232 222C  
                                        l2033 4E70                                          l1313 4DD4  
                                        l1330 502E                                          l1243 23E0  
                                        l2036 4296                                          l1316 490A  
                                        l1309 421A                                          l2046 45FE  
                                        l2142 4C34                                          l1424 08A4  
                                        l1361 4E4A                                          l2066 47FA  
                                        l1506 0C5E                                          l1530 455C  
                                        l1355 46D8                                drawFastVLine@x 0022  
                              drawFastVLine@y 0018                                          l1542 4E24  
                                        l1534 4576                                          l1358 4E2A  
                                        l1463 071A                                          l1535 4578  
                                        l1536 4582                                          l1537 4584  
                                        l1395 167A                                          l1539 459E  
                                        l1388 1EAE                                          l1911 1F1E  
                                        l1735 405C                                          l1760 4CAE  
                                        l1922 1FE0                                          l1826 3168  
                                        l1931 1FFC                                          l1907 1EF4  
                                        l1835 3158                                          l1908 2072  
                                        l1748 4436                                          l1942 37B0  
                                        l1950 2DD6                                          l1867 3A5E  
                                        l1939 37E4                                          l1971 3260  
                                        l1947 2E46                                          l1956 2E36  
                                        l1965 40F2                                          l1981 4E88  
                                        l1949 2DAE                                          l1878 3A36  
                                        l7110 456E                                          l7102 4560  
                                        l6046 4C02                                          l1992 3620  
                                        l5512 42B8                                          l6048 4C08  
                                        l6080 38A0                                          l6064 3864  
                                        l5602 4D60                                          l5610 4AB0  
                                        l6090 38BA                                          l6058 37F6  
                                        l7202 2080                                          l1988 4B7A  
                                        l5516 42F0                                          l6084 38AA  
                                        l6076 3892                                          l7212 214E  
                                        l5526 4316                                          l5614 4ACC  
                                        l7206 20DC                                          l7230 2270  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l5528 4324  
                                        l7216 218A                                          l7208 2112  
                                        l7224 2204                                          l7240 233C  
                                        l7090 4542                                          l7218 21C4  
                                        l7234 22AC                                          l7250 23B8  
                                        l7244 237C                                          l7228 223A  
                                        l5830 4B18                                          l5822 4B02  
                                        l7094 454C                                          l9110 2940  
                                        l9102 28D8                                          l7270 501C  
                                        l7238 2302                                          l7510 4F6C  
                                        l5840 4B2C                                          l9120 2992  
                                        l7520 4F92                                          l7512 4F72  
                                        l5842 4B32                                          l5818 4AFA  
                                        l7098 4554                                          l9106 2908  
                                        l7274 5028                                          l5828 4B10  
                                        l5836 4B20                                          l9300 30F6  
                                        l9108 293C                                          l5854 4C4E  
                                        l9222 2D74                                          l9206 4EF2  
                                        l9126 29BE                                          l9118 296A  
                                        l9134 29EE                                          l5856 4C54  
                                        l5848 4C3C                                          l9312 311A  
                                        l9304 3106                                          l9216 2D56  
                                        l9128 29E6                                          l5866 4C66  
                                        l9330 4B50                                          l9410 424C  
                                        l9322 3144                                          l9170 13C8  
                                        l9420 4286                                          l9412 4254  
                                        l9324 3152                                          l9316 312A  
                                        l9252 2DF8                                          l9244 2DE4  
                                        l9156 1E6E                                          l9148 1DAA  
                                        l9180 1480                                          l9092 28BA  
                                        l6780 4D28                                          l9342 40C2  
                                        l9430 45C0                                          l9318 3130  
                                        l9262 2E22                                          l6838 248A  
                                        l6782 4D32                                          l8800 1F02  
                                        l9408 423E                                          l9432 45C8  
                                        l9272 3070                                          l9264 2E30  
                                        l9256 2E08                                          l9176 1470  
                                        l9600 063A                                          l9096 28C8  
                                        l9088 28AE                                          l7656 4F2C  
                                        l9362 355A                                          l9338 4090  
                                        l9442 47A2                                          l9258 2E0E  
                                        l9194 1656                                          l9530 034A  
                                        l9522 02DA                                          l9514 0272  
                                        l9098 28D0                                          l6866 257A  
                                        l7666 4F52                                          l7658 4F32  
                                        l9380 35B4                                          l9348 40EE  
                                        l8812 1F38                                          l9436 45EE  
                                        l9428 45B2                                          l9444 47B0  
                                        l9292 30C4                                          l9188 15A4  
                                        l9700 0A54                                          l9612 06E8  
                                        l9532 0360                                          l9452 002C  
                                        l8750 39BA                                          l8902 3224  
                                        l9390 35DE                                          l8830 1F90  
                                        l8822 1F60                                          l8806 1F2C  
                                        l9278 3080                                          l9614 06FC  
                                        l9606 06C8                                          l9550 044A  
                                        l9542 03CC                                          l9526 0302  
                                        l9462 0066                                          l8760 3A1E  
                                        l8752 39C6                                          l9392 35EC  
                                        l9384 35C4                                          l8840 1FC8  
                                        l8832 1F9C                                          l9712 0AAC  
                                        l9640 0894                                          l9624 0746  
                                        l9608 06D8                                          l9544 03D8  
                                        l9552 045E                                          l9528 0318  
                                        l9464 007C                                          l9456 0042  
                                        l9800 36F0                                          l8762 3A2A  
                                        l8754 39E6                                          l8746 39AA  
                                        l9810 3722                                          l8906 323A  
                                        l9386 35CA                                          l9394 35F6  
                                        l8842 1FD4                                          l8834 1FA4  
                                        l8930 4006                                          l9714 0AB8  
                                        l9722 0AFE                                          l9706 0A82  
                                        l9634 0874                                          l9618 0720  
                                        l9570 051A                                          l9562 04DA  
                                        l9538 03A6                                          l9482 012A  
                                        l9458 0058                                          l9802 36F6  
                                        l9812 373C                                          l8828 1F84  
                                        l8932 4010                                          l8924 3FF0  
                                        l9724 0B10                                          l9732 0C04  
                                        l9708 0A8E                                          l9652 08F0  
                                        l9636 0884                                          l9628 0798  
                                        l9556 04C6                                          l9548 041C  
                                        l9484 0166                                          l9476 0118  
                                        l9468 009C                                          l8774 3A50  
                                        l8758 39FE                                          l8870 31A2  
                                        l9398 360E                                          l8950 4052  
                                        l8942 4036                                          l8934 4018  
                                        l8918 3FDE                                          l9726 0B90  
                                        l9734 0C18                                          l9718 0AD6  
                                        l9670 0970                                          l9662 092E  
                                        l9590 05EE                                          l9574 056C  
                                        l9566 0514                                          l9558 04CC  
                                        l9478 011E                                          l8768 3A3E  
                                        l9816 374A                                          l8848 201A  
                                        l9736 0C22                                          l9680 09BE  
                                        l9672 0976                                          l9656 091A  
                                        l9584 05C4                                          l8874 31B0  
                                        l8858 204C                                          l8946 4042  
                                        l8970 43E8                                          l8962 43CC  
                                        l9666 0968                                          l9658 0920  
                                        l9594 05FE                                          l9578 0596  
                                        l9498 01C2                                          l9738 0C3C  
                                        l9836 378A                                          l8892 31F6  
                                        l8868 3188                                          l8972 43F2  
                                        l9676 0984                                          l9596 0612  
                                        l9588 05D4                                          l9846 37BE  
                                        l8974 43FA                                          l8982 441C  
                                        l8966 43DA                                          l9694 0A10  
                                        l9686 09C6                                          STR_1 FF05  
                                        l8896 320C                                          l8888 31E4  
                                        l9864 3DD8                                          l9688 09DA  
                                        l9792 36AC                                          l9776 364A  
                                        STR_2 FF19                                          STR_3 FF5F  
                                        l8898 3212                                          l8986 442C  
                                        l8978 4410                                          l9698 0A48  
                                        STR_4 FE7C                                          STR_5 FEC8  
                                        l9788 3692                                          STR_6 FE9A  
                                        STR_7 FEF1                                          STR_8 FEDD  
                                        STR_9 FF6E                                          u4210 3824  
                                        u4220 385A                                          u3430 42E6  
                                printf@tmpval 017F                                          u7111 3198  
                                        u7091 317A                                          u8150 0712  
                                        u7511 2D48                                          u8400 3676  
                __end_of_Activate_Buzzer_2KHz 518E                                          u7531 2D66  
                                        u7380 29A0                                          u7721 354C  
                                        u8451 3714                                          u7740 3578  
                                        u8540 32BC                                          _RBPU 007F8F  
                                        u8550 32D2                                          u9350 1B58  
                                        u8471 3732                  __end_of_Activate_Buzzer_4KHz 516A  
                                        u7745 3570                                          u6881 1EC0  
                                        u7930 0208                                          u8570 32F8  
                                        u6891 1ED4                                          u9358 1B5C  
                                        u7935 01FC                                          u9397 5254  
                                        u8980 2AA8                                          _TRMT 007D61  
                    ??_Do_Save_New_Alarm_Time 004C                         _setup_heater_set_temp 00AE  
                                _DS1621_tempC 0089                                  _DS1621_tempF 008B  
                       _setup_heater_set_text 00C1                           ??_Deactivate_Buzzer 0011  
                                        _date 0144                                          _main 19FC  
                                        _font FC0B       Update_Setup_Screen_Cursor_Backward@xinc 0030  
                                ___ftpack@arg 0011       Update_Setup_Screen_Cursor_Backward@yinc 002F  
                                        _hour 006A                                  ___ftpack@exp 0014  
                            __end_of_I2C_Init 5266                              __end_of_I2C_Read 4B38  
                                        _time 0168                                          _year 006F  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                              ??_get_full_ADC 0013                                          fsr0l 000FE9  
                                        fsr2h 000FDA                                          fsr1l 000FE1  
                                        indf2 000FDF                                          fsr2l 000FD9  
                                        _wrap 00B6                                          _volt 0084  
                            __end_of_I2C_Stop 51B2                        ?_DS3231_Turn_Off_Alarm 0001  
                                        pclat 000FFA                            __size_of_LCD_Reset 0012  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 0018                   __size_of_I2C_Write_Cmd_Only 001A  
                              _Monitor_Heater 3E9C                               __end_of_Do_Init 479C  
                                 _Do_Beep_Bad 50AE                               ??_drawFastVLine 001C  
                                ___ftmul@cntr 002C                               __end_of_i2cNack 5270  
                                ___param_bank 000010                                  ___ftmul@sign 002D  
     Update_Setup_Screen_Cursor_Forward@field 002E                                  ___fttol@exp1 003C  
                   ??_DS3231_Write_Alarm_Time 004A                         __size_of_Do_Beep_Good 0018  
                                _Turn_Off_Fan 4EB8                                  ___fttol@lval 0038  
             __size_of_Exit_Setup_Heater_Temp 0010                                   ?_TIMER1_isr 0001  
                            __end_of_INT0_isr 271A                              __end_of_INT1_isr 5284  
                                       l10030 32C2                                         l10040 3336  
                                       l10024 327C                                         l10016 4C8A  
                                       l10034 32E2                                         l10204 483A  
                                       l10108 4216                                         l10300 3CC4  
                                       l10044 334A                                         l10206 4852  
                                       l10310 3CEA                                         l10038 3308  
                                       l10312 3CF0                                         l10304 3CD4  
                                       l10170 4880                                         l10162 4866  
                                       l10322 3D16                                         l10306 3CDA  
                                       l10164 486A                                         l10180 48AE  
                                       l10084 41AE                                         l10316 3D00  
                                       l10332 3BE2                                         l10404 50D4  
                                       l10174 4890                                         l10158 485A  
                                       l10190 480E                                         l10094 41F2  
                                       l10246 505E                                         l10254 5044  
                                       l10318 3D06                                         l10326 3D1C  
                                       l10350 3C24                                         l10168 487A  
                                       l10184 47FE                                         l10088 41C8  
                                       l10328 3D46                                         l10344 3C0E  
                                       l10512 0CA6                                         l10178 4896  
                                       l10098 41FC                                         l10362 3C50  
                                       l10338 3BF8                                         l10370 3C66  
                                       l10196 4824                                         l10292 3CA8  
                                       l10356 3C3A                                         l10372 3C90  
                                       l10294 3CAE                                         l10390 3EE2  
                                       l10534 0D88                                         l10518 0CE6  
                                       l10720 3B5E                                         l10288 3C98  
                                       l10392 3EF6                                         l10528 0D48  
                                       l10298 3CBE                                         l10394 3EFA  
                                       l10458 2A1A                                         l10740 3BA2  
                                       l10732 3B86                                         l10396 3F20  
                                       l10388 3EC6                                         l10468 2A4C  
                                       l10662 3918                                         l10478 2A78  
                                       l10574 0E5E                                         l10822 1AA8  
                                       l10806 1A12                                         l10752 3BCC  
                                       l10744 3BB0                                         l10736 3B94  
                                       l10488 2AB4                                         l10592 0F12  
                                       l10576 0E74                                         l10754 3BD0  
                                       l10690 3978                                         l10682 395C  
                                       l10674 3940                                         l10594 0F1A  
                                       l10586 0EF4                                         l10850 1BCA  
                                       l10842 1BB6                                         l10748 3BBE  
                                       l10756 3BD6                                         l10780 414A  
                                       l10588 0F0A                                         l10766 4108  
                                       l10694 3986                                         l10686 396A  
                                       l10678 394E                                         l10854 1BD4  
                                       l10846 1BC0                                         l10862 1BE4  
                                       l10838 1BA0                __size_of_Activate_Buzzer_500Hz 0012  
                                       l10792 4174                                         l10784 4158  
                                       l10696 398A                                         l10880 1C56  
                                       l10864 1C02                                         l10794 4178  
                                       l10698 3990                                         l10882 1C62  
                                       l10858 1BDE                                         l10788 4166  
                                       l10796 417E                     __end_of_Deactivate_Buzzer 5296  
                             ??_do_update_pwm 003D                               drawFastVLine@hi 0020  
                             drawFastVLine@lo 0021                 __end_of_Activate_Buzzer_500Hz 51A0  
                                       ?_main 0001                               __end_of___awdiv 405E  
                             __end_of___ftadd 2074                               drawCircle@ddF_x 0026  
                                       STR_10 FFF5                               drawCircle@ddF_y 0028  
                                       STR_11 FFEF                                         STR_12 FFB0  
                                       STR_20 FFE4                                         STR_21 FFF1  
                                       STR_13 FFDF                                         STR_22 FFE9  
                                       STR_14 FFAA                                         STR_30 FF9F  
                                       STR_31 FEDE                                         STR_23 FFED  
                                       STR_15 FFBF                                         STR_24 FFE9  
                                       STR_32 FF94                                         STR_16 FF7B  
                                       STR_40 FF3E                                         STR_25 FFED  
                                       STR_17 FFD8                                         STR_33 FFB5  
                                       STR_18 FFF8                                         STR_34 FF4F  
                                       STR_26 FF2C                                         STR_35 FEDE  
                                       STR_19 FFFB                                         STR_27 FFC8  
                                       STR_28 FFD0                                         STR_36 FF88  
                             __end_of___awmod 4438                                         STR_37 FFB0  
                                       STR_29 FFB0                                         STR_38 FFDF  
                                       STR_39 FEB2                               __end_of___ftdiv 37E6  
                             __end_of___ftneg 4E96                               __end_of___lldiv 42A8  
                             __end_of___ftmul 3262                                         _T0CON 000FD5  
                             ___awdiv@divisor 0019                                         _T1CON 000FCD  
                             __end_of___llmod 4610                               __end_of___ftsub 4B7C  
                             __end_of___fttol 3622                                         _T2CON 000FCA  
                                       _T3CON 000FB1                 __size_of_Do_Setup_Heater_Temp 0094  
                                       i2l303 26BC                                         i2l304 26E2  
                                       i2l282 437C                                         i2l294 2718  
                             ___awdiv@counter 001B                               drawCircle@color 0022  
                                       _RCSTA 000FAB                                         _TMR0H 000FD7  
                                       _TMR1H 000FCF                                         _TMR0L 000FD6  
                                       _TMR1L 000FCE                                         _TMR3L 000FB2  
                                       _SPBRG 000FAF                                         _PORTD 000F83  
                                       _PORTE 000F84                                ?_Increase_Time 0001  
                                       _TRISA 000F92                                         _TRISB 000F93  
                                       _TRISC 000F94                                         _TRISD 000F95  
                                       _TRISE 000F96                                         _TXREG 000FAD  
                                       _TXSTA 000FAC                               __end_of_get_RPM 4BBA  
                                       _Rcmd1 2C28                                         _Rcmd3 344A  
                                ___lltoft@exp 0021      Update_Setup_Screen_Cursor_Backward@field 002E  
                                  _i2cHighSda 529E                                    _i2cHighScl 5250  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FE0E  
                                       _color 0091                                         _font2 FD0A  
                                       _found 0069                                         _scale 129C  
                             __end_of_isdigit 4EFC                                         _tempC 00D2  
                                       _tempF 00D6                                         _month 006C  
                               ___ftpack@sign 0015                                         _putch 5226  
                           __end_of_I2C_Start 51C4                             __end_of_I2C_Write 4C74  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                      __end_of_Monitor_Heater 3F32                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 5096  
             __size_of_check_for_button_input 0094                         __end_of_Go_Next_Field 4F5C  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                          Set_RGB_Color@color 0012                               __initialization 46DA  
                                __end_of_main 1C6C                                  __end_of_font FD0A  
                    ?_Do_Save_New_Heater_Temp 0001                  __end_of_Decrease_Heater_Temp 5064  
                            __end_of_Init_ADC 5242                              __end_of_Rcmd2red 4BF8  
                          _Select_Alarm_Field 00A2                                        ??_main 00F4  
                               ___fttol@sign1 0037                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 517C  
                        __size_of__tdiv_to_l_ 0110       I2C_Write_Address_Write_One_Byte@Address 0013  
                       __end_of_Go_Prev_Field 4F3C                     ??_TFT_GreenTab_Initialize 001D  
                 ?_Update_Setup_Heater_Screen 0001                    ??_Update_Setup_Time_Screen 004A  
                              _Init_Interrupt 4FBC                            ??_DS3231_Read_Time 0014  
                                      ?_Rcmd1 0001                                        ?_Rcmd3 0001  
                                   I2C_Init@c 0011                           _In_Alarm_Time_Setup 009D  
                                   I2C_Read@n 0012                   DS3231_Turn_Off_Alarm@Device 001F  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                            ___llmod@dividend 001E                                        ?_scale 0043  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0017                        _Exit_Setup_Heater_Temp 51E6  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 4CB0                                        _HEATER 009B  
                                      ?_putch 0001                              __end_of___ftpack 3A60  
                            __end_of___lbtoft 4E72                              __end_of___lltoft 47FC  
                                      _DC_Txt 00CA                 __size_of_Increase_Heater_Temp 001A  
                                   ??_Do_Init 005F                                        i2l7902 26F4  
                                      i2l7840 25BA                                        i2l8392 4372  
                                      i2l7850 25EA                                        i2l7860 260A  
                                      i2l8388 4368                                        i2l7870 262C  
                                      i2l7846 25E6                                        i2l7880 264E  
                                      i2l7856 2606                                        i2l7894 26EA  
                                      _OSCCON 000FD3               __size_of_Do_Save_New_Alarm_Time 0018  
                         __size_of_TIMER1_isr 000E                                        _SPBRGH 000FB0  
                             ?_Monitor_Heater 0001                                        _SSPBUF 000FC9  
                                   ??_i2cNack 0011                                  _Alarm_SW_Txt 00C6  
                            _force_nec_state0 5284                              __end_of_delay_ms 4A58  
                                      _i2cAck 51C4              ??_Initialize_Setup_Heater_Screen 004A  
             ?_Initialize_Setup_Heater_Screen 0001                  __size_of_Go_Prev_Alarm_Field 0020  
                            __end_of_fillRect 4AF0                              __end_of_drawChar 29F4  
                            __end_of__powers_ FE5C                            __size_of_OpenUSART 0070  
                                      ___ftge 405E                   __end_of_Increase_Alarm_Time 4858  
                        DS3231_Init@control_E 0019                                        ___wmul 4DFE  
                                   ??___awdiv 001B                              __end_of_drawtext 3704  
                                   ??___ftadd 0053                                     ??___awmod 0041  
                                   ??___ftdiv 0034                                     ??___ftneg 0014  
                                  _Test_Alarm 29F4                                     ??___lldiv 0019  
                                   ??___ftmul 0025                                     ??___llmod 0026  
                                   ??___ftsub 005F                                     ??___fttol 0032  
                                      _chkisr 0008                                        _array1 011F  
                                      _buffer 0100                __size_of_Exit_Setup_Alarm_Time 0010  
                                      _nec_ok 0095                 __end_of_Exit_Setup_Alarm_Time 5206  
                                      _fround 1C6C                                        clear_0 46E0  
                                      clear_1 46EC                              ___awdiv@quotient 001D  
                                      _minute 006B                                        _second 006D  
                             ___awmod@divisor 003F                          _Activate_Buzzer_2KHz 517C  
                        _Activate_Buzzer_4KHz 5158                                     ??_get_RPM 0021  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 0041  
                                      _printf 001C                                  drawtext@size 0040  
                             ??_Increase_Time 004A                                        _strcpy 4D1E  
                                      _strlen 4BF8                         ___ftmul@f3_as_product 0029  
                      __end_of_Init_Interrupt 4FDA                          __end_of_get_full_ADC 4E4C  
                      _check_for_button_input 4188                              _Do_Save_New_Time 5108  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                        get_duty_cycle@set_temp 0021  
                                   ?_I2C_Stop 0001                                  __mediumconst FC0A  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8              __end_of_I2C_Write_Cmd_Write_Data 4FBC  
                                 ?_i2cHighSda 0001                                   ?_i2cHighScl 0001  
                                      putch@c 0011                        __size_of_Set_RGB_Color 0016  
                            __end_of_spiwrite 5144                      __size_of_Exit_Time_Setup 0010  
                          __size_of_bcd_2_dec 002A                           _Do_Setup_Alarm_Time 3B20  
                                  __accesstop 0080                       __end_of__initialization 4732  
                            ??_get_duty_cycle 0023         I2C_Write_Address_Read_One_Byte@Device 0016  
                          __size_of_dec_2_bcd 0058                                    ___ftadd@f1 004D  
                                  ___ftadd@f2 0050                                    ___ftge@ff1 0011  
                                  ___ftge@ff2 0014                                     ?_INT0_isr 0001  
                                   ?_INT1_isr 0001                            _setup_alarm_minute 00AB  
                          _setup_alarm_second 00AC                                 ___rparam_used 000001  
                                  ___ftdiv@f1 002E               __end_of_Do_Save_New_Heater_Temp 5130  
                                  ___ftdiv@f2 0031                                    ___ftdiv@f3 0038  
                                  ___ftneg@f1 0011                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           _Go_Next_Alarm_Field 4F7C  
                                  ___ftmul@f1 001F                                    ___ftmul@f2 0022  
                                  ___ftsub@f1 0059                                    ___ftsub@f2 005C  
                                  ___fttol@f1 002E                                 __end_of_Rcmd1 2D38  
                               __end_of_Rcmd3 353C                                __pcstackCOMRAM 0001  
               DS3231_Turn_On_Alarm@Address_E 001B                 DS3231_Turn_On_Alarm@Address_F 001C  
                                __pidataBANK0 4DD6                                  __pidataBANK1 44B8  
                                  ___lltoft@c 0019                                 __end_of_font2 FDE6  
                           __end_of_i2cLowSda 527A                             __end_of_i2cLowScl 529E  
                               __end_of_scale 167C                          ?_Do_Setup_Alarm_Time 0001  
                               __end_of_putch 5234                         ?_Activate_Buzzer_2KHz 0001  
                       ?_Activate_Buzzer_4KHz 0001                        _Do_Save_New_Alarm_Time 507E  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 0047  
                                dec_2_bcd@dec 0049                        __size_of_Decrease_Time 00B6  
                             ?_Init_Interrupt 0001                        __size_of_write_command 0010  
                                  __div_to_l_ 3060                                    ??_I2C_Init 0015  
                                  ??_I2C_Read 0011                                  _alarm_minute 0065  
                                _alarm_second 0066              ??_Update_Setup_Alarm_Time_Screen 005F  
             ?_Update_Setup_Alarm_Time_Screen 0001                  __end_of_DS3231_Turn_On_Alarm 49B4  
                                  ??_I2C_Stop 0011                          ?_Go_Next_Alarm_Field 0001  
                                     ??_Rcmd1 001D                                       ??_Rcmd3 001D  
                          __size_of_drawPixel 0030                             __end_of_OpenUSART 45A0  
                             __div_to_l_@exp1 001C                               __div_to_l_@cntr 001B  
                                     ??_scale 0046                               __div_to_l_@quot 0017  
                                     ??_putch 0011                          _Decrease_Heater_Temp 504A  
                     ??_DS3231_Turn_Off_Alarm 001B                                    __pbssBANK0 0080  
                            _setup_alarm_hour 006E                                     ?_Init_ADC 0001  
                            _setup_alarm_time 014D          __end_of_Initialize_Setup_Time_Screen 2F54  
       __size_of_Initialize_Setup_Time_Screen 010C                  _Initialize_Setup_Time_Screen 2E48  
                               ??_DS1621_Init 0016                                 ??_DS3231_Init 0017  
                                   ?_Rcmd2red 0001                         __end_of_Toggle_Heater 50DC  
                          __size_of_init_UART 0014                               spiwrite@spidata 0012  
                                  _alarm_date 00A6                                    ??_INT0_isr 0001  
                                  ??_INT1_isr 0001                                    _alarm_mode 008F  
                                  _alarm_hour 0064                                    _alarm_time 013B  
                               ?_Wait_One_Sec 0001      I2C_Write_Address_Write_One_Byte@Data_Out 0014  
                               __div_to_l_@f1 0011                                 __div_to_l_@f2 0014  
                                     ?_i2cAck 0001                                  ?_Do_Beep_Bad 0001  
                          __size_of_read_volt 0064                            __CFG_CCP2MX$PORTBE 000000  
                               _Set_RGB_Color 50DC                                 ??_Turn_On_Fan 005F  
                              I2C_Read@inByte 0013                                       ?___ftge 0011  
         __size_of_Update_Setup_Heater_Screen 0096                    DS3231_Turn_On_Alarm@Device 001F  
                                     ?___wmul 0011                           __size_of_i2cHighSda 0008  
                         __size_of_i2cHighScl 000C                                   ?_Test_Alarm 0001  
                       ??_Do_Setup_Alarm_Time 0060                                       ?_chkisr 0001  
                             _heater_set_temp 00B4                        __size_of_setAddrWindow 0056  
                           __end_of_bcd_2_dec 4DD6                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 0014                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 00D8                                  ??_TIMER1_isr 0001  
                                     ?_fround 0043                                 ??_I2C_ReStart 0011  
                                     _ALARMEN 0087                                     ?___awtoft 0019  
                                   ?___ftpack 0011                                     ?___lbtoft 0019  
                                  I2C_Write@n 0012                                       ?_printf 00DC  
                                   ?___lltoft 0019                                       ?_strcpy 0011  
                                     ?_strlen 0011                             __end_of_dec_2_bcd 490C  
                                  _fillScreen 4FF8                                       _MATCHED 008D  
                       __end_of_Update_Screen 129C                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 23E2                         ??_Go_Next_Alarm_Field 0031  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                       ?_Decrease_Heater_Temp 0001                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00BC                         __end_of_fillRectangle 38C2  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 473C                      _I2C_Write_Cmd_Write_Data 4F9C  
                  __end_of_I2C_Write_Cmd_Only 507E                                    ??_Rcmd2red 0014  
                __end_of_Do_Setup_Heater_Temp 4188                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 3C96                                ??_Wait_One_Sec 0011  
                                     _i2cNack 5266                            __end_of_TIMER1_isr 5250  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 005C  
                               _write_command 5216                                     _I2C_Start 51B2  
                                   _I2C_Write 4C36                             ??_Exit_Time_Setup 004A  
                             __size_of_i2cAck 0012                             __end_of__npowers_ FE35  
                                     __Hparam 0000                                    _scale$3272 0046  
                                     __Lparam 0000                                ?_Set_RGB_Color 0001  
                         __end_of_DS1621_Init 4FF8                           __end_of_DS3231_Init 3B20  
                           __end_of_drawPixel 4D80                         __end_of_drawFastVLine 4330  
                             __size_of___ftge 0096                                       ___awdiv 3FC8  
                                     ___ftadd 1EB0                                       ___awmod 43B6  
                                     ___ftdiv 3704                                       ___ftneg 4E72  
                                     ___lldiv 421C                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 316A  
                                     ___llmod 45A0                        ??_Activate_Buzzer_4KHz 0011  
                                     ___ftsub 4B38                                       ___fttol 353C  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 43AE  
                                   ?_spiwrite 0001                                       __pcinit 46DA  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                               __size_of_fround 0244  
                                     __ramtop 1000                                       _get_RPM 4B7C  
                                  ??___lltoft 001D                                       __ptext0 19FC  
                                     __ptext1 4B7C                                       __ptext2 0C60  
                                     __ptext3 50C6                                       __ptext4 4E96  
                                     __ptext5 29F4                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 4676                                       __ptext7 4E26  
                                     __ptext8 4C74                                       __ptext9 50DC  
                             __size_of_printf 0C44                             __end_of_init_UART 5158  
                         __end_of_Turn_On_Fan 4EB8                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FE7C                      __end_of_force_nec_state0 528E  
                                   _T1CONbits 000FCD                                   ?__div_to_l_ 0011  
                                     _dpowers FDE6                         __end_of_do_update_pwm 3E02  
                                     _isdigit 4EDA                         _Activate_Buzzer_500Hz 518E  
                            ___awmod@dividend 003D                                    _duty_cycle 0068  
                     ?_Exit_Setup_Heater_Temp 0001                           _Go_Prev_Alarm_Field 4F5C  
                           __end_of_read_volt 46DA                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 5108              __size_of_Do_Save_New_Heater_Temp 0014  
                               drawtext@_text 003A                                 drawtext@color 003C  
                            ??_Monitor_Heater 0046                                    ??_fillRect 0028  
                                  ??_drawChar 0035                                     _LCD_Reset 516A  
                           _DS3231_Write_Time 3E02                                 _setAddrWindow 490C  
                              __pintcode_body 4330                                 Wait_One_Sec@k 0011  
                                  delay_ms@ms 0017                          end_of_initialization 4732  
                               _Do_Setup_Time 38C2                                     _INT1_flag 009C  
                         __size_of_Test_Alarm 0122                                    ??_drawtext 0041  
                          ?_DS3231_Write_Time 0001                                ?_Decrease_Time 0001  
               DS3231_Turn_On_Alarm@control_E 001D                 DS3231_Turn_On_Alarm@control_F 001E  
                              ?_write_command 0001                                 __Lmediumconst FC0A  
                   __size_of_DS3231_Read_Time 0066                                       int_func 4330  
                     DS3231_Read_Time@Address 0014                      DS3231_Write_Time@Address 004B  
                                  ?_I2C_Start 0001                                    ?_I2C_Write 0001  
                                  get_RPM@RPS 0021                      __end_of_Do_Save_New_Time 511C  
                                _get_full_ADC 4E26                               ___lldiv@divisor 0015  
                         ??_DS3231_Write_Time 004A                          ?_Go_Prev_Alarm_Field 0001  
                             ___lldiv@counter 001D                       check_for_button_input@j 00F0  
                    ?_DS3231_Write_Alarm_Time 0001                                    _tempSecond 00B5  
                        _DS3231_Turn_On_Alarm 4962                                     _RCSTAbits 000FAB  
                                     printf@c 0190                                       printf@f 00DC  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                __end_of_Increase_Heater_Temp 504A                                __tdiv_to_l_@f1 0011  
                              __tdiv_to_l_@f2 0014                                    ??_spiwrite 0011  
                     ?_check_for_button_input 0001                                       strlen@s 0011  
                               ??__tdiv_to_l_ 0017                   I2C_Write_Cmd_Write_Data@Cmd 0013  
                                   _PORTAbits 000F80                              drawtext@cursor_x 0049  
                            drawtext@cursor_y 0048                                     _PORTBbits 000F81  
                                   _PORTCbits 000F82                                     _PORTDbits 000F83  
                            I2C_Write@outByte 0011        __end_of_Initialize_Setup_Heater_Screen 344A  
     __size_of_Initialize_Setup_Heater_Screen 00F2                _Initialize_Setup_Heater_Screen 3358  
                                  _setup_date 0156                                   ?_fillScreen 0024  
              __end_of_Exit_Setup_Heater_Temp 51F6                                    _setup_hour 00AF  
                                  _setup_time 015F                                    _setup_year 00B3  
                                 ?_drawCircle 001C               __size_of_DS3231_Read_Alarm_Time 004E  
                                  drawChar@bg 0032                     __end_of_DS3231_Write_Time 3E9C  
              DS3231_Turn_Off_Alarm@Address_E 001B                DS3231_Turn_Off_Alarm@Address_F 001C  
                                   _TRISBbits 000F93                                     _TRISCbits 000F94  
                                   _TRISDbits 000F95                        __size_of_Go_Next_Field 0020  
      I2C_Write_Address_Read_One_Byte@Address 0014                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                        ??_Decrease_Heater_Temp 004D  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                           __size_of_I2C_Stop 0012                                ?_setAddrWindow 0014  
                                  ?_LCD_Reset 0001                                ?_Do_Setup_Time 0001  
                        _In_Heater_Temp_Setup 009E                              drawtext@textsize 0044  
                                  drawPixel@x 001B                                    drawPixel@y 0018  
                          _Update_Screen$3269 004C                                   _DS1621_Init 4FDA  
                                 _DS3231_Init 3A60                                   ___ftdiv@exp 003B  
                                 printf@width 0183                                     _TXSTAbits 000FAC  
                             ??_Set_RGB_Color 0011                         ??_Go_Prev_Alarm_Field 0031  
           __size_of_Update_Setup_Time_Screen 0184                            get_full_ADC@result 0015  
                         __size_of__div_to_l_ 010A                     ?_Update_Setup_Time_Screen 0001  
                       ?_DS3231_Turn_On_Alarm 0001                             __size_of_INT0_isr 018A  
                           __size_of_INT1_isr 000A                                __end_of_i2cAck 51D6  
                                 ___ftmul@exp 0028                        __size_of_Go_Prev_Field 0020  
              ??_Initialize_Setup_Time_Screen 004A                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 0018                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 4E96                __end_of_check_for_button_input 421C  
                            ??_Init_Interrupt 0011            Update_Setup_Heater_Screen@dc_char1 004A  
          Update_Setup_Heater_Screen@dc_char2 004B            Update_Setup_Heater_Screen@dc_char3 004C  
                          __end_of_i2cHighSda 52A6                                __end_of___ftge 40F4  
                          __end_of_i2cHighScl 525C                                __end_of___wmul 4E26  
                               delay_ms@count 001B                                    _write_data 5206  
                              __end_of_chkisr 43B6                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 50F2                                    drawtext@bg 003E  
                              __end_of_fround 1EB0                         _Exit_Setup_Alarm_Time 51F6  
                      ?_Activate_Buzzer_500Hz 0001                                     _Nec_code1 00A0  
                                   _i2cLowSda 5270                          _Do_Setup_Heater_Temp 40F4  
                                   _i2cLowScl 5296                  __size_of_Increase_Alarm_Time 005C  
                        __end_of_Wait_One_Sec 5030                                __end_of_printf 0C60  
                       __end_of_Increase_Time 3C96                                __end_of_strcpy 4D50  
                              __end_of_strlen 4C36                                     _Nec_state 00A1  
                         start_initialization 46DA                           __end_of__tdiv_to_l_ 2E48  
                      Update_Screen@neg_tempF 004E                            get_duty_cycle@diff 0025  
                             ??_Decrease_Time 004A                            get_duty_cycle@temp 001F  
                             ??_write_command 0013               __end_of_DS3231_Write_Alarm_Time 44B8  
                                   _OpenUSART 4530                __size_of_DS3231_Turn_Off_Alarm 0052  
                DS3231_Read_Alarm_Time@Device 0015                 __end_of_DS3231_Turn_Off_Alarm 4A06  
                             ___llmod@divisor 0022                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                             ___llmod@counter 0026                                   ??_I2C_Write 0011  
                      _DS3231_Read_Alarm_Time 4A58                                      ??_i2cAck 0011  
                           __size_of_Rcmd2red 003E                           __size_of_fillScreen 001C  
     I2C_Write_Address_Read_One_Byte@Data_Ret 0015                __end_of_Do_Save_New_Alarm_Time 5096  
                         __size_of_drawCircle 01AE                                 _Go_Next_Field 4F3C  
                                    ??___ftge 0017                                      ??___wmul 0015  
                                ??_Test_Alarm 0046                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                                   __pdataBANK0 00B4  
                                 __pdataBANK1 0100                                      ??_fround 0046  
                             setAddrWindow@x0 0017                               setAddrWindow@x1 0015  
                             setAddrWindow@y0 0014                               setAddrWindow@y1 0016  
                                    ??_printf 00EA                              _DS1621_Read_Temp 4CB0  
                       ?_Do_Setup_Heater_Temp 0001                                      ??_strcpy 0015  
                                    ??_strlen 0013                                    ?_i2cLowSda 0001  
                                  ?_i2cLowScl 0001                           _Decrease_Alarm_Time 4858  
                                   _bcd_2_dec 4DAC                                    fround@prec 004C  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                       _Do_Save_New_Heater_Temp 511C  
                           __size_of___lltoft 0060                                   __pbssCOMRAM 0060  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 009A  
                             ??_setAddrWindow 0017                                 __pcstackBANK0 00DC  
                               __pcstackBANK1 0177                                 _Go_Prev_Field 4F1C  
                             ??_Do_Setup_Time 0060                                     _dec_2_bcd 48B4  
                             _Exit_Time_Setup 51D6                                   ??_LCD_Reset 001D  
                                _isdigit$2916 0012                             __size_of_delay_ms 0052  
                               _Heater_SW_Txt 00CE                          _Increase_Heater_Temp 5030  
                                    ?_Do_Init 0001                             __size_of_fillRect 004A  
                           __size_of_drawChar 0156                            __end_of_Test_Alarm 2B16  
                                  ?_OpenUSART 0011                              _DS3231_Read_Time 4610  
                         _Heater_Set_Temp_Txt 00B7                                      ?_i2cNack 0001  
                        ?_Decrease_Alarm_Time 0001                             __size_of_drawtext 00E2  
                               ?_Do_Beep_Good 0001                        ??_DS3231_Turn_On_Alarm 001B  
 __end_of_Update_Setup_Screen_Cursor_Backward 23E2  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 222E                   __end_of_Do_Setup_Alarm_Time 3BE0  
                              ?_Go_Next_Field 0001                                   I2C_Read@ack 0011  
                                   _bit_count 00A7                                     __pintcode 0008  
             __end_of_TFT_GreenTab_Initialize 4DAC                                ??_Turn_Off_Fan 005F  
                               __pmediumconst FC0A                                      ?___awdiv 0017  
                                   __ptext100 3D4C                                     __ptext101 4E4C  
                                   __ptext110 4F9C                                     __ptext102 353C  
                                   __ptext111 5064                                     __ptext103 316A  
                                   __ptext120 5270                                     __ptext112 4CB0  
                                   __ptext104 3704                                     __ptext121 5296  
                                   __ptext113 4C36                                     __ptext105 399A  
                                   __ptext122 529E                                     __ptext114 51A0  
                                   __ptext106 4FBC                                     __ptext123 5250  
                                   __ptext115 51B2                                     __ptext107 5234  
                                   __ptext116 4AF0                                     __ptext108 525C  
                                   __ptext125 5242                                     __ptext117 5266  
                                   __ptext109 4FDA                                      ?___ftadd 004D  
                                   __ptext126 527A                                     __ptext118 51C4  
                                   __ptext127 2590                                     __ptext119 50F2  
                                   __ptext128 5284                                      ?___awmod 003D  
                                    ?___ftdiv 002E                                      ?___ftneg 0011  
                                    ?___lldiv 0011                                      ?___ftmul 001F  
                                    ?___llmod 001E                                      ?___ftsub 0059  
                                   __npowers_ FE0E                                      ?___fttol 002E  
                     __size_of_get_duty_cycle 00F6                                     __tft_type 00A5  
                          _I2C_Write_Cmd_Only 5064                   __end_of_Go_Next_Alarm_Field 4F9C  
              DS3231_Turn_Off_Alarm@control_E 001D                DS3231_Turn_Off_Alarm@control_F 001E  
                          drawFastVLine@color 001A                                   ?_write_data 0001  
                      ?_Exit_Setup_Alarm_Time 0001                                     _drawPixel 4D50  
                                    ?_get_RPM 001F                                   __tdiv_to_l_ 2D38  
                           __size_of_spiwrite 0014                                  ??__div_to_l_ 0017  
                                  ?_bcd_2_dec 0001                        __size_of_Toggle_Heater 0016  
                         ?_I2C_Write_Cmd_Only 0013                             ?_force_nec_state0 0001  
                                    ?_isdigit 0001                                      _I2C_Init 525C  
                                    _I2C_Read 4AF0                                ?_Go_Prev_Field 0001  
                                    _I2C_Stop 51A0                             _Initialize_Screen 167C  
                              __size_of_Rcmd1 0110                                __size_of_Rcmd3 00F2  
                ??_Update_Setup_Heater_Screen 004A                                     _init_UART 5144  
                                  ?_dec_2_bcd 0043                            ??_force_nec_state0 0001  
                    I2C_Write_Cmd_Only@Device 0014                                     _hexpowers FE5C  
                          ?_Initialize_Screen 0001                                __size_of_scale 03E0  
                              __size_of_putch 000E                                     _read_volt 4676  
                       ?_Increase_Heater_Temp 0001      __end_of_I2C_Write_Address_Write_One_Byte 4F1C  
   __size_of_I2C_Write_Address_Write_One_Byte 0020            ??_I2C_Write_Address_Write_One_Byte 0015  
           ?_I2C_Write_Address_Write_One_Byte 0013              _I2C_Write_Address_Write_One_Byte 4EFC  
                       ??_Decrease_Alarm_Time 005F                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0046                           ??_Initialize_Screen 004A  
                                _Select_Field 00A3                                      _INT0_isr 2590  
                                    _INT1_isr 527A                          ??_I2C_Write_Cmd_Only 0014  
                                    _PIE1bits 000F9D                             ?_Do_Save_New_Time 0001  
                      __size_of_Update_Screen 063C                        DS3231_Read_Time@Device 0015  
                     DS3231_Write_Time@Device 004A                                      _PIR1bits 000F9E  
                          __end_of__div_to_l_ 316A                                 _In_Time_Setup 009F  
                          ??_Do_Save_New_Time 004C                         __size_of_Wait_One_Sec 001C  
                                   _setup_day 00AD                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                        ??_Do_Setup_Heater_Temp 00F2  
                                   drawChar@c 002F                                     drawChar@i 0038  
                                   drawChar@j 0037                                     drawChar@x 0036  
                                   drawChar@y 002E                 __size_of_Activate_Buzzer_2KHz 0012  
               __size_of_Activate_Buzzer_4KHz 0012                                    ?_drawPixel 0018  
                      __size_of_fillRectangle 00DC                     ??_Do_Save_New_Heater_Temp 004A  
                                  _ADCON0bits 000FC2                       __end_of_Exit_Time_Setup 51E6  
                           ___wmul@multiplier 0011                     __end_of_Initialize_Screen 19FC  
                                 ??_i2cLowSda 0011                                   ??_i2cLowScl 0011  
               DS3231_Read_Alarm_Time@Address 0014                                  ??_fillScreen 0026  
            __size_of_DS3231_Write_Alarm_Time 0080                                  ??_drawCircle 0024  
                                  printf@flag 018B                                    printf@fval 018D  
                                  printf@prec 017D                                    ?_init_UART 0001  
            __end_of_Update_Setup_Time_Screen 289E                                   _INTCON2bits 000FF1  
     __end_of_I2C_Write_Address_Read_One_Byte 4D1E      __size_of_I2C_Write_Address_Read_One_Byte 0032  
           ??_I2C_Write_Address_Read_One_Byte 0015              ?_I2C_Write_Address_Read_One_Byte 0014  
             _I2C_Write_Address_Read_One_Byte 4CEC                                   _INTCON3bits 000FF0  
                                   copy_data0 4706                                     copy_data1 4726  
                                   drawtext@i 0046                        __size_of_drawFastVLine 0088  
                                   drawtext@x 0043                                     drawtext@y 0039  
                                  ?_read_volt 003D                                      _Nec_code 0080  
                                    _Init_ADC 5234                             write_command@cmd_ 0013  
  __end_of_Initialize_Setup_Alarm_Time_Screen 3060   __size_of_Initialize_Setup_Alarm_Time_Screen 010C  
        ??_Initialize_Setup_Alarm_Time_Screen 004A           ?_Initialize_Setup_Alarm_Time_Screen 0001  
          _Initialize_Setup_Alarm_Time_Screen 2F54                                   ??_OpenUSART 0013  
                                ?_DS1621_Init 0001                                      _Rcmd2red 4BBA  
                            __size_of_Do_Init 0060                           __size_of_write_data 0010  
                                ?_DS3231_Init 0001                               ??_Go_Next_Field 0031  
                             OpenUSART@config 0013        I2C_Write_Address_Write_One_Byte@Device 0015  
                               _Toggle_Heater 50C6                                  _Time_Elapsed 0060  
                         _Increase_Alarm_Time 47FC                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00DA                                  _Wait_One_Sec 5014  
                                    __Hrparam 0000                        __size_of_do_update_pwm 00B6  
                          __end_of_fillScreen 5014                                      __Lrparam 0000  
                          __end_of_drawCircle 2590                                  ?_Turn_On_Fan 0001  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 0096  
                            __size_of___ftadd 01C4                              __size_of___awmod 0082  
                            __size_of___ftdiv 00E2                              __size_of___ftneg 0024  
                            __size_of___lldiv 008C                              __size_of___ftmul 00F8  
                            __size_of___llmod 0070                              __size_of___ftsub 0044  
                            __size_of___fttol 00E6                                      _Volt_Txt 0171  
                                    ___awtoft 4C74                                      ___ftpack 399A  
                                    ___lbtoft 4E4C                                  ?_I2C_ReStart 0001  
                                 _fround$3270 0049                                   _fround$3271 0046  
                                    ___lltoft 479C                               ??_Go_Prev_Field 0031  
                            __size_of_get_RPM 003E                                   ??_bcd_2_dec 0011  
                        ?_Increase_Alarm_Time 0001                                 _Update_Screen 0C60  
                            __size_of_isdigit 0022                                      _delay_ms 4A06  
                                 ??_dec_2_bcd 0045                                      __ptext10 4962  
                                    __ptext11 49B4                                      __ptext20 3BE0  
                                    __ptext12 3A60                                      __ptext21 4F1C  
                                    __ptext13 4EFC                                      __ptext30 5030  
                                    __ptext22 4F3C                                      __ptext14 4CEC  
                                    __ptext31 51E6                                      __ptext23 51D6  
                                    __ptext15 5158                                      __ptext40 4F5C  
                                    __ptext32 511C                                      __ptext24 5108  
                                    __ptext16 3E9C                                      __ptext41 222E  
                                    __ptext33 504A                                      __ptext25 3E02  
                                    __ptext17 3262                                      __ptext50 23E2  
                                    __ptext42 4F7C                                      __ptext34 3F32  
                                    __ptext26 3C96                                      __ptext18 38C2  
                                    __ptext51 4D80                                      __ptext43 2074  
                                    __ptext35 3B20                                      __ptext27 271A  
                                    __ptext19 2E48                                      __ptext60 4A58  
                                    __ptext52 344A                                      __ptext44 51F6  
                                    __ptext36 4188                                      __ptext28 40F4  
                                    __ptext61 5096                                      __ptext53 4BBA  
                                    __ptext45 507E                                      __ptext37 4DAC  
                                    __ptext29 3358                                      __ptext70 4BF8  
                                    __ptext62 517C                                      __ptext54 2C28  
                                    __ptext46 167C                                      __ptext38 2F54  
                                    __ptext71 289E                                      __ptext63 50AE  
                                    __ptext55 516A                                      __ptext47 4D1E  
                                    __ptext39 47FC                                      __ptext80 5144  
                                    __ptext72 4AA6                                      __ptext64 5014  
                                    __ptext56 4A06                                      __ptext48 4FF8  
                                    __ptext81 4530                                      __ptext73 42A8  
                                    __ptext65 528E                                      __ptext57 4438  
                                    __ptext49 37E6                                      __ptext90 3FC8  
                                    __ptext82 4EB8                                      __ptext74 4D50  
                                    __ptext66 518E                                      __ptext58 48B4  
                                    __ptext91 2D38                                      __ptext83 001C  
                                    __ptext75 490C                                      __ptext67 4858  
                                    __ptext59 4610                                      __ptext92 3060  
                                    __ptext84 129C                                      __ptext76 5206  
                                    __ptext68 2B16                                      __ptext93 479C  
                                    __ptext85 5226                                      __ptext77 5216  
                                    __ptext69 3622                                      __ptext94 45A0  
                                    __ptext86 4EDA                                      __ptext78 5130  
                                    __ptext95 421C                                      __ptext87 1C6C  
                                    __ptext79 473C                                      __ptext96 4B38  
                                    __ptext88 4DFE                                      __ptext97 1EB0  
                                    __ptext89 43B6                                      __ptext98 4E72  
                                    __ptext99 405E                        ??_Increase_Heater_Temp 004D  
                                    _fillRect 4AA6                                      _drawChar 289E  
                                    __powers_ FE35                          __end_of_Turn_Off_Fan 4EDA  
            __size_of_TFT_GreenTab_Initialize 002C                 __size_of_Decrease_Heater_Temp 001A  
  __end_of_Update_Setup_Screen_Cursor_Forward 222E   __size_of_Update_Setup_Screen_Cursor_Forward 01BA  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 2074                                      _colstart 00A8  
                 __end_of_Go_Prev_Alarm_Field 4F7C                                      _drawtext 3622  
                                  strcpy@from 0013                       ?_DS3231_Read_Alarm_Time 0001  
                               _fillRectangle 37E6                DS3231_Write_Alarm_Time@Address 004B  
                              ?_Toggle_Heater 0001                      __end_of_DS1621_Read_Temp 4CEC  
                               __size_of_main 0270                                 ??_Do_Beep_Bad 0046  
                     __size_of_Monitor_Heater 0096                         __end_of_Set_RGB_Color 50F2  
                             fillRectangle@hi 0021                               fillRectangle@lo 0022  
               Update_Screen@neg_DS1621_tempC 0050                                _get_duty_cycle 3262  
                               _drawFastVLine 42A8                                     printf@idx 017A  
                                   printf@exp 0185                                      _spiwrite 5130  
                                   printf@val 0187                             DS3231_Init@Device 001A  
                                 ??_drawPixel 001B                                      _rowstart 00AA  
                    __end_of_DS3231_Read_Time 4676                         ??_Increase_Alarm_Time 005F  
                  __size_of_Initialize_Screen 0380                              ?_Exit_Time_Setup 0001  
                        __end_of_Do_Beep_Good 50AE                                ?_Update_Screen 0001  
                                  _INTCONbits 000FF2            __end_of_Update_Setup_Heater_Screen 3FC8  
                  _Update_Setup_Heater_Screen 3F32                                 _do_update_pwm 3D4C  
                              OpenUSART@spbrg 0011                                   ??_init_UART 0014  
                                    isdigit@c 0013                                      scale@scl 0049  
              __end_of_DS3231_Read_Alarm_Time 4AA6                                   ??_read_volt 0040  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                              __tdiv_to_l_@exp1 001F  
                            __tdiv_to_l_@cntr 001E                              __tdiv_to_l_@quot 001A  
                       __end_of_Decrease_Time 3D4C                      _Update_Setup_Time_Screen 271A  
                       __end_of_write_command 5226                              ___lldiv@dividend 0011  
                             fillScreen@color 0024                         _DS3231_Turn_Off_Alarm 49B4  
               DS3231_Write_Alarm_Time@Device 004A                       do_update_pwm@duty_cycle 0043  
                      __end_of_get_duty_cycle 3358                        __size_of_Increase_Time 00B6  
                    _Select_Heater_Temp_Field 00A4                                fillRectangle@h 001A  
                              fillRectangle@w 0019                                fillRectangle@x 0023  
                              fillRectangle@y 0018                       ??_Exit_Setup_Alarm_Time 004A  
                              ?_drawFastVLine 0018                                      printf@ap 017B  
                    ??_Exit_Setup_Heater_Temp 004A                           __end_of_Do_Beep_Bad 50C6  
                                ??_write_data 0013                                    _TIMER1_isr 5242  
                               fillRect@color 0026                                  ?__tdiv_to_l_ 0011  
                     _DS3231_Write_Alarm_Time 4438                                   _printf$3273 0177  
                              ?_do_update_pwm 0001                              ___lldiv@quotient 0019  
                                    strcpy@cp 0015                                      strlen@cp 0015  
                                    strcpy@to 0011                         I2C_Write_Cmd_Only@Cmd 0013  
                                _setup_minute 00B0                                  _setup_second 00B2  
                     __size_of_Init_Interrupt 001E                         __end_of_setAddrWindow 4962  
                       __end_of_Do_Setup_Time 399A                            fillRectangle@color 001B  
                             ??_Toggle_Heater 005F                             do_update_pwm@dc_I 0044  
                           do_update_pwm@dc_f 0040                                 drawChar@color 0030  
                                 _setup_month 00B1                            __end_of_write_data 5216  
                   __size_of_force_nec_state0 000A                                  drawChar@line 0035  
                               ?_get_full_ADC 0011                      ??_check_for_button_input 005F  
                                drawChar@size 0034             __size_of_I2C_Write_Cmd_Write_Data 0020  
                        __size_of_DS1621_Init 001E                     ?_I2C_Write_Cmd_Write_Data 0013  
                        __size_of_DS3231_Init 00C0                               ?_get_duty_cycle 001F  
               __size_of_DS3231_Turn_On_Alarm 0052        __end_of_Update_Setup_Alarm_Time_Screen 2C28  
     __size_of_Update_Setup_Alarm_Time_Screen 0112                _Update_Setup_Alarm_Time_Screen 2B16  
