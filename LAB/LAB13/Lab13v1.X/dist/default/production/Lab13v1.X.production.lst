

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed May 11 17:30:46 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	text111,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   133                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   139                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   140  0000                     
   141                           	psect	idataCOMRAM
   142  003AF0                     __pidataCOMRAM:
   143                           	opt stack 0
   144                           
   145                           ;initializer for _heater_set_temp
   146  003AF0  4B                 	db	75
   147                           
   148                           	psect	idataBANK0
   149  002EEC                     __pidataBANK0:
   150                           	opt stack 0
   151                           
   152                           ;initializer for _tempSecond
   153  002EEC  FF                 	db	255
   154                           
   155                           ;initializer for _wrap
   156  002EED  01                 	db	1
   157                           
   158                           ;initializer for _alarm_time
   159  002EEE  30                 	db	48
   160  002EEF  30                 	db	48
   161  002EF0  3A                 	db	58
   162  002EF1  30                 	db	48
   163  002EF2  30                 	db	48
   164  002EF3  3A                 	db	58
   165  002EF4  30                 	db	48
   166  002EF5  30                 	db	48
   167  002EF6  00                 	db	0
   168                           
   169                           ;initializer for _date
   170  002EF7  30                 	db	48
   171  002EF8  30                 	db	48
   172  002EF9  2F                 	db	47
   173  002EFA  30                 	db	48
   174  002EFB  30                 	db	48
   175  002EFC  2F                 	db	47
   176  002EFD  30                 	db	48
   177  002EFE  30                 	db	48
   178  002EFF  00                 	db	0
   179                           
   180                           ;initializer for _setup_alarm_time
   181  002F00  30                 	db	48
   182  002F01  30                 	db	48
   183  002F02  3A                 	db	58
   184  002F03  30                 	db	48
   185  002F04  30                 	db	48
   186  002F05  3A                 	db	58
   187  002F06  30                 	db	48
   188  002F07  30                 	db	48
   189  002F08  00                 	db	0
   190                           
   191                           ;initializer for _setup_date
   192  002F09  30                 	db	48
   193  002F0A  31                 	db	49
   194  002F0B  2F                 	db	47
   195  002F0C  30                 	db	48
   196  002F0D  31                 	db	49
   197  002F0E  2F                 	db	47
   198  002F0F  30                 	db	48
   199  002F10  30                 	db	48
   200  002F11  00                 	db	0
   201                           
   202                           ;initializer for _setup_time
   203  002F12  30                 	db	48
   204  002F13  30                 	db	48
   205  002F14  3A                 	db	58
   206  002F15  30                 	db	48
   207  002F16  30                 	db	48
   208  002F17  3A                 	db	58
   209  002F18  30                 	db	48
   210  002F19  30                 	db	48
   211  002F1A  00                 	db	0
   212                           
   213                           ;initializer for _time
   214  002F1B  30                 	db	48
   215  002F1C  30                 	db	48
   216  002F1D  3A                 	db	58
   217  002F1E  30                 	db	48
   218  002F1F  30                 	db	48
   219  002F20  3A                 	db	58
   220  002F21  30                 	db	48
   221  002F22  30                 	db	48
   222  002F23  00                 	db	0
   223                           
   224                           ;initializer for _Volt_Txt
   225  002F24  30                 	db	48
   226  002F25  2E                 	db	46
   227  002F26  30                 	db	48
   228  002F27  30                 	db	48
   229  002F28  56                 	db	86
   230  002F29  00                 	db	0
   231                           
   232                           ;initializer for _Heater_Set_Temp_Txt
   233  002F2A  30                 	db	48
   234  002F2B  37                 	db	55
   235  002F2C  35                 	db	53
   236  002F2D  46                 	db	70
   237  002F2E  00                 	db	0
   238                           
   239                           ;initializer for _RPM_Txt
   240  002F2F  30                 	db	48
   241  002F30  30                 	db	48
   242  002F31  30                 	db	48
   243  002F32  30                 	db	48
   244  002F33  00                 	db	0
   245                           
   246                           ;initializer for _setup_heater_set_text
   247  002F34  30                 	db	48
   248  002F35  37                 	db	55
   249  002F36  35                 	db	53
   250  002F37  46                 	db	70
   251  002F38  00                 	db	0
   252                           
   253                           ;initializer for _Alarm_SW_Txt
   254  002F39  4F                 	db	79
   255  002F3A  46                 	db	70
   256  002F3B  46                 	db	70
   257  002F3C  00                 	db	0
   258                           
   259                           ;initializer for _DC_Txt
   260  002F3D  30                 	db	48
   261  002F3E  30                 	db	48
   262  002F3F  30                 	db	48
   263  002F40  00                 	db	0
   264                           
   265                           ;initializer for _Heater_SW_Txt
   266  002F41  4F                 	db	79
   267  002F42  46                 	db	70
   268  002F43  46                 	db	70
   269  002F44  00                 	db	0
   270                           
   271                           ;initializer for _tempC
   272  002F45  2B                 	db	43
   273  002F46  32                 	db	50
   274  002F47  35                 	db	53
   275  002F48  00                 	db	0
   276                           
   277                           ;initializer for _tempF
   278  002F49  2B                 	db	43
   279  002F4A  37                 	db	55
   280  002F4B  37                 	db	55
   281  002F4C  00                 	db	0
   282                           
   283                           ;initializer for _RTC_ALARM_Txt
   284  002F4D  30                 	db	48
   285  002F4E  00                 	db	0
   286                           
   287                           	psect	idataBANK1
   288  003382                     __pidataBANK1:
   289                           	opt stack 0
   290                           
   291                           ;initializer for _buffer
   292  003382  20                 	db	32
   293  003383  45                 	db	69
   294  003384  43                 	db	67
   295  003385  45                 	db	69
   296  003386  33                 	db	51
   297  003387  33                 	db	51
   298  003388  30                 	db	48
   299  003389  31                 	db	49
   300  00338A  4C                 	db	76
   301  00338B  20                 	db	32
   302  00338C  53                 	db	83
   303  00338D  70                 	db	112
   304  00338E  27                 	db	39
   305  00338F  32                 	db	50
   306  003390  32                 	db	50
   307  003391  20                 	db	32
   308  003392  53                 	db	83
   309  003393  31                 	db	49
   310  003394  20                 	db	32
   311  003395  00                 	db	0
   312  003396  00                 	db	0
   313  003397  00                 	db	0
   314  003398  00                 	db	0
   315  003399  00                 	db	0
   316  00339A  00                 	db	0
   317  00339B  00                 	db	0
   318  00339C  00                 	db	0
   319  00339D  00                 	db	0
   320  00339E  00                 	db	0
   321  00339F  00                 	db	0
   322  0033A0  00                 	db	0
   323                           
   324                           ;initializer for _array1
   325  0033A1  A2                 	db	162
   326  0033A2  62                 	db	98
   327  0033A3  E2                 	db	226
   328  0033A4  22                 	db	34
   329  0033A5  02                 	db	2
   330  0033A6  C2                 	db	194
   331  0033A7  E0                 	db	224
   332  0033A8  A8                 	db	168
   333  0033A9  90                 	db	144
   334  0033AA  68                 	db	104
   335  0033AB  98                 	db	152
   336  0033AC  B0                 	db	176
   337  0033AD  30                 	db	48
   338  0033AE  18                 	db	24
   339  0033AF  7A                 	db	122
   340  0033B0  10                 	db	16
   341  0033B1  38                 	db	56
   342  0033B2  5A                 	db	90
   343  0033B3  42                 	db	66
   344  0033B4  4A                 	db	74
   345  0033B5  52                 	db	82
   346                           
   347                           ;initializer for Set_RPM_RGB@F4113
   348  0033B6  0001               	dw	1
   349  0033B8  0003               	dw	3
   350  0033BA  0002               	dw	2
   351  0033BC  0004               	dw	4
   352  0033BE  0005               	dw	5
   353  0033C0  0006               	dw	6
   354  0033C2  0007               	dw	7
   355                           
   356                           ;initializer for Set_RGB_Color@F4243
   357  0033C4  00                 	db	0
   358  0033C5  01                 	db	1
   359  0033C6  02                 	db	2
   360  0033C7  03                 	db	3
   361  0033C8  04                 	db	4
   362  0033C9  05                 	db	5
   363  0033CA  06                 	db	6
   364  0033CB  07                 	db	7
   365                           
   366                           	psect	mediumconst
   367  00FC8A                     __pmediumconst:
   368                           	opt stack 0
   369  00FC8A  00                 	db	0
   370  00FC8B                     _font:
   371                           	opt stack 0
   372  00FC8B  00                 	db	0
   373  00FC8C  00                 	db	0
   374  00FC8D  00                 	db	0
   375  00FC8E  00                 	db	0
   376  00FC8F  00                 	db	0
   377  00FC90  00                 	db	0
   378  00FC91  00                 	db	0
   379  00FC92  5F                 	db	95
   380  00FC93  00                 	db	0
   381  00FC94  00                 	db	0
   382  00FC95  00                 	db	0
   383  00FC96  07                 	db	7
   384  00FC97  00                 	db	0
   385  00FC98  07                 	db	7
   386  00FC99  00                 	db	0
   387  00FC9A  14                 	db	20
   388  00FC9B  7F                 	db	127
   389  00FC9C  14                 	db	20
   390  00FC9D  7F                 	db	127
   391  00FC9E  14                 	db	20
   392  00FC9F  24                 	db	36
   393  00FCA0  2A                 	db	42
   394  00FCA1  7F                 	db	127
   395  00FCA2  2A                 	db	42
   396  00FCA3  12                 	db	18
   397  00FCA4  23                 	db	35
   398  00FCA5  13                 	db	19
   399  00FCA6  08                 	db	8
   400  00FCA7  64                 	db	100
   401  00FCA8  62                 	db	98
   402  00FCA9  36                 	db	54
   403  00FCAA  49                 	db	73
   404  00FCAB  56                 	db	86
   405  00FCAC  20                 	db	32
   406  00FCAD  50                 	db	80
   407  00FCAE  00                 	db	0
   408  00FCAF  08                 	db	8
   409  00FCB0  07                 	db	7
   410  00FCB1  03                 	db	3
   411  00FCB2  00                 	db	0
   412  00FCB3  00                 	db	0
   413  00FCB4  1C                 	db	28
   414  00FCB5  22                 	db	34
   415  00FCB6  41                 	db	65
   416  00FCB7  00                 	db	0
   417  00FCB8  00                 	db	0
   418  00FCB9  41                 	db	65
   419  00FCBA  22                 	db	34
   420  00FCBB  1C                 	db	28
   421  00FCBC  00                 	db	0
   422  00FCBD  2A                 	db	42
   423  00FCBE  1C                 	db	28
   424  00FCBF  7F                 	db	127
   425  00FCC0  1C                 	db	28
   426  00FCC1  2A                 	db	42
   427  00FCC2  08                 	db	8
   428  00FCC3  08                 	db	8
   429  00FCC4  3E                 	db	62
   430  00FCC5  08                 	db	8
   431  00FCC6  08                 	db	8
   432  00FCC7  00                 	db	0
   433  00FCC8  80                 	db	128
   434  00FCC9  70                 	db	112
   435  00FCCA  30                 	db	48
   436  00FCCB  00                 	db	0
   437  00FCCC  08                 	db	8
   438  00FCCD  08                 	db	8
   439  00FCCE  08                 	db	8
   440  00FCCF  08                 	db	8
   441  00FCD0  08                 	db	8
   442  00FCD1  00                 	db	0
   443  00FCD2  00                 	db	0
   444  00FCD3  60                 	db	96
   445  00FCD4  60                 	db	96
   446  00FCD5  00                 	db	0
   447  00FCD6  20                 	db	32
   448  00FCD7  10                 	db	16
   449  00FCD8  08                 	db	8
   450  00FCD9  04                 	db	4
   451  00FCDA  02                 	db	2
   452  00FCDB  3E                 	db	62
   453  00FCDC  51                 	db	81
   454  00FCDD  49                 	db	73
   455  00FCDE  45                 	db	69
   456  00FCDF  3E                 	db	62
   457  00FCE0  00                 	db	0
   458  00FCE1  42                 	db	66
   459  00FCE2  7F                 	db	127
   460  00FCE3  40                 	db	64
   461  00FCE4  00                 	db	0
   462  00FCE5  72                 	db	114
   463  00FCE6  49                 	db	73
   464  00FCE7  49                 	db	73
   465  00FCE8  49                 	db	73
   466  00FCE9  46                 	db	70
   467  00FCEA  21                 	db	33
   468  00FCEB  41                 	db	65
   469  00FCEC  49                 	db	73
   470  00FCED  4D                 	db	77
   471  00FCEE  33                 	db	51
   472  00FCEF  18                 	db	24
   473  00FCF0  14                 	db	20
   474  00FCF1  12                 	db	18
   475  00FCF2  7F                 	db	127
   476  00FCF3  10                 	db	16
   477  00FCF4  27                 	db	39
   478  00FCF5  45                 	db	69
   479  00FCF6  45                 	db	69
   480  00FCF7  45                 	db	69
   481  00FCF8  39                 	db	57
   482  00FCF9  3C                 	db	60
   483  00FCFA  4A                 	db	74
   484  00FCFB  49                 	db	73
   485  00FCFC  49                 	db	73
   486  00FCFD  31                 	db	49
   487  00FCFE  41                 	db	65
   488  00FCFF  21                 	db	33
   489  00FD00  11                 	db	17
   490  00FD01  09                 	db	9
   491  00FD02  07                 	db	7
   492  00FD03  36                 	db	54
   493  00FD04  49                 	db	73
   494  00FD05  49                 	db	73
   495  00FD06  49                 	db	73
   496  00FD07  36                 	db	54
   497  00FD08  46                 	db	70
   498  00FD09  49                 	db	73
   499  00FD0A  49                 	db	73
   500  00FD0B  29                 	db	41
   501  00FD0C  1E                 	db	30
   502  00FD0D  00                 	db	0
   503  00FD0E  00                 	db	0
   504  00FD0F  14                 	db	20
   505  00FD10  00                 	db	0
   506  00FD11  00                 	db	0
   507  00FD12  00                 	db	0
   508  00FD13  40                 	db	64
   509  00FD14  34                 	db	52
   510  00FD15  00                 	db	0
   511  00FD16  00                 	db	0
   512  00FD17  00                 	db	0
   513  00FD18  08                 	db	8
   514  00FD19  14                 	db	20
   515  00FD1A  22                 	db	34
   516  00FD1B  41                 	db	65
   517  00FD1C  14                 	db	20
   518  00FD1D  14                 	db	20
   519  00FD1E  14                 	db	20
   520  00FD1F  14                 	db	20
   521  00FD20  14                 	db	20
   522  00FD21  00                 	db	0
   523  00FD22  41                 	db	65
   524  00FD23  22                 	db	34
   525  00FD24  14                 	db	20
   526  00FD25  08                 	db	8
   527  00FD26  02                 	db	2
   528  00FD27  01                 	db	1
   529  00FD28  59                 	db	89
   530  00FD29  09                 	db	9
   531  00FD2A  06                 	db	6
   532  00FD2B  3E                 	db	62
   533  00FD2C  41                 	db	65
   534  00FD2D  5D                 	db	93
   535  00FD2E  59                 	db	89
   536  00FD2F  4E                 	db	78
   537  00FD30  7C                 	db	124
   538  00FD31  12                 	db	18
   539  00FD32  11                 	db	17
   540  00FD33  12                 	db	18
   541  00FD34  7C                 	db	124
   542  00FD35  7F                 	db	127
   543  00FD36  49                 	db	73
   544  00FD37  49                 	db	73
   545  00FD38  49                 	db	73
   546  00FD39  36                 	db	54
   547  00FD3A  3E                 	db	62
   548  00FD3B  41                 	db	65
   549  00FD3C  41                 	db	65
   550  00FD3D  41                 	db	65
   551  00FD3E  22                 	db	34
   552  00FD3F  7F                 	db	127
   553  00FD40  41                 	db	65
   554  00FD41  41                 	db	65
   555  00FD42  41                 	db	65
   556  00FD43  3E                 	db	62
   557  00FD44  7F                 	db	127
   558  00FD45  49                 	db	73
   559  00FD46  49                 	db	73
   560  00FD47  49                 	db	73
   561  00FD48  41                 	db	65
   562  00FD49  7F                 	db	127
   563  00FD4A  09                 	db	9
   564  00FD4B  09                 	db	9
   565  00FD4C  09                 	db	9
   566  00FD4D  01                 	db	1
   567  00FD4E  3E                 	db	62
   568  00FD4F  41                 	db	65
   569  00FD50  41                 	db	65
   570  00FD51  51                 	db	81
   571  00FD52  73                 	db	115
   572  00FD53  7F                 	db	127
   573  00FD54  08                 	db	8
   574  00FD55  08                 	db	8
   575  00FD56  08                 	db	8
   576  00FD57  7F                 	db	127
   577  00FD58  00                 	db	0
   578  00FD59  41                 	db	65
   579  00FD5A  7F                 	db	127
   580  00FD5B  41                 	db	65
   581  00FD5C  00                 	db	0
   582  00FD5D  20                 	db	32
   583  00FD5E  40                 	db	64
   584  00FD5F  41                 	db	65
   585  00FD60  3F                 	db	63
   586  00FD61  01                 	db	1
   587  00FD62  7F                 	db	127
   588  00FD63  08                 	db	8
   589  00FD64  14                 	db	20
   590  00FD65  22                 	db	34
   591  00FD66  41                 	db	65
   592  00FD67  7F                 	db	127
   593  00FD68  40                 	db	64
   594  00FD69  40                 	db	64
   595  00FD6A  40                 	db	64
   596  00FD6B  40                 	db	64
   597  00FD6C  7F                 	db	127
   598  00FD6D  02                 	db	2
   599  00FD6E  1C                 	db	28
   600  00FD6F  02                 	db	2
   601  00FD70  7F                 	db	127
   602  00FD71  7F                 	db	127
   603  00FD72  04                 	db	4
   604  00FD73  08                 	db	8
   605  00FD74  10                 	db	16
   606  00FD75  7F                 	db	127
   607  00FD76  3E                 	db	62
   608  00FD77  41                 	db	65
   609  00FD78  41                 	db	65
   610  00FD79  41                 	db	65
   611  00FD7A  3E                 	db	62
   612  00FD7B  7F                 	db	127
   613  00FD7C  09                 	db	9
   614  00FD7D  09                 	db	9
   615  00FD7E  09                 	db	9
   616  00FD7F  06                 	db	6
   617  00FD80  3E                 	db	62
   618  00FD81  41                 	db	65
   619  00FD82  51                 	db	81
   620  00FD83  21                 	db	33
   621  00FD84  5E                 	db	94
   622  00FD85  7F                 	db	127
   623  00FD86  09                 	db	9
   624  00FD87  19                 	db	25
   625  00FD88  29                 	db	41
   626  00FD89  46                 	db	70
   627  00FD8A                     __end_of_font:
   628                           	opt stack 0
   629  00FD8A                     _font2:
   630                           	opt stack 0
   631  00FD8A  26                 	db	38
   632  00FD8B  49                 	db	73
   633  00FD8C  49                 	db	73
   634  00FD8D  49                 	db	73
   635  00FD8E  32                 	db	50
   636  00FD8F  03                 	db	3
   637  00FD90  01                 	db	1
   638  00FD91  7F                 	db	127
   639  00FD92  01                 	db	1
   640  00FD93  03                 	db	3
   641  00FD94  3F                 	db	63
   642  00FD95  40                 	db	64
   643  00FD96  40                 	db	64
   644  00FD97  40                 	db	64
   645  00FD98  3F                 	db	63
   646  00FD99  1F                 	db	31
   647  00FD9A  20                 	db	32
   648  00FD9B  40                 	db	64
   649  00FD9C  20                 	db	32
   650  00FD9D  1F                 	db	31
   651  00FD9E  3F                 	db	63
   652  00FD9F  40                 	db	64
   653  00FDA0  38                 	db	56
   654  00FDA1  40                 	db	64
   655  00FDA2  3F                 	db	63
   656  00FDA3  63                 	db	99
   657  00FDA4  14                 	db	20
   658  00FDA5  08                 	db	8
   659  00FDA6  14                 	db	20
   660  00FDA7  63                 	db	99
   661  00FDA8  03                 	db	3
   662  00FDA9  04                 	db	4
   663  00FDAA  78                 	db	120
   664  00FDAB  04                 	db	4
   665  00FDAC  03                 	db	3
   666  00FDAD  61                 	db	97
   667  00FDAE  59                 	db	89
   668  00FDAF  49                 	db	73
   669  00FDB0  4D                 	db	77
   670  00FDB1  43                 	db	67
   671  00FDB2  00                 	db	0
   672  00FDB3  7F                 	db	127
   673  00FDB4  41                 	db	65
   674  00FDB5  41                 	db	65
   675  00FDB6  41                 	db	65
   676  00FDB7  02                 	db	2
   677  00FDB8  04                 	db	4
   678  00FDB9  08                 	db	8
   679  00FDBA  10                 	db	16
   680  00FDBB  20                 	db	32
   681  00FDBC  00                 	db	0
   682  00FDBD  41                 	db	65
   683  00FDBE  41                 	db	65
   684  00FDBF  41                 	db	65
   685  00FDC0  7F                 	db	127
   686  00FDC1  04                 	db	4
   687  00FDC2  02                 	db	2
   688  00FDC3  01                 	db	1
   689  00FDC4  02                 	db	2
   690  00FDC5  04                 	db	4
   691  00FDC6  40                 	db	64
   692  00FDC7  40                 	db	64
   693  00FDC8  40                 	db	64
   694  00FDC9  40                 	db	64
   695  00FDCA  40                 	db	64
   696  00FDCB  00                 	db	0
   697  00FDCC  03                 	db	3
   698  00FDCD  07                 	db	7
   699  00FDCE  08                 	db	8
   700  00FDCF  00                 	db	0
   701  00FDD0  20                 	db	32
   702  00FDD1  54                 	db	84
   703  00FDD2  54                 	db	84
   704  00FDD3  78                 	db	120
   705  00FDD4  40                 	db	64
   706  00FDD5  7F                 	db	127
   707  00FDD6  28                 	db	40
   708  00FDD7  44                 	db	68
   709  00FDD8  44                 	db	68
   710  00FDD9  38                 	db	56
   711  00FDDA  38                 	db	56
   712  00FDDB  44                 	db	68
   713  00FDDC  44                 	db	68
   714  00FDDD  44                 	db	68
   715  00FDDE  28                 	db	40
   716  00FDDF  38                 	db	56
   717  00FDE0  44                 	db	68
   718  00FDE1  44                 	db	68
   719  00FDE2  28                 	db	40
   720  00FDE3  7F                 	db	127
   721  00FDE4  38                 	db	56
   722  00FDE5  54                 	db	84
   723  00FDE6  54                 	db	84
   724  00FDE7  54                 	db	84
   725  00FDE8  18                 	db	24
   726  00FDE9  00                 	db	0
   727  00FDEA  08                 	db	8
   728  00FDEB  7E                 	db	126
   729  00FDEC  09                 	db	9
   730  00FDED  02                 	db	2
   731  00FDEE  18                 	db	24
   732  00FDEF  A4                 	db	164
   733  00FDF0  A4                 	db	164
   734  00FDF1  9C                 	db	156
   735  00FDF2  78                 	db	120
   736  00FDF3  7F                 	db	127
   737  00FDF4  08                 	db	8
   738  00FDF5  04                 	db	4
   739  00FDF6  04                 	db	4
   740  00FDF7  78                 	db	120
   741  00FDF8  00                 	db	0
   742  00FDF9  44                 	db	68
   743  00FDFA  7D                 	db	125
   744  00FDFB  40                 	db	64
   745  00FDFC  00                 	db	0
   746  00FDFD  20                 	db	32
   747  00FDFE  40                 	db	64
   748  00FDFF  40                 	db	64
   749  00FE00  3D                 	db	61
   750  00FE01  00                 	db	0
   751  00FE02  7F                 	db	127
   752  00FE03  10                 	db	16
   753  00FE04  28                 	db	40
   754  00FE05  44                 	db	68
   755  00FE06  00                 	db	0
   756  00FE07  00                 	db	0
   757  00FE08  41                 	db	65
   758  00FE09  7F                 	db	127
   759  00FE0A  40                 	db	64
   760  00FE0B  00                 	db	0
   761  00FE0C  7C                 	db	124
   762  00FE0D  04                 	db	4
   763  00FE0E  78                 	db	120
   764  00FE0F  04                 	db	4
   765  00FE10  78                 	db	120
   766  00FE11  7C                 	db	124
   767  00FE12  08                 	db	8
   768  00FE13  04                 	db	4
   769  00FE14  04                 	db	4
   770  00FE15  78                 	db	120
   771  00FE16  38                 	db	56
   772  00FE17  44                 	db	68
   773  00FE18  44                 	db	68
   774  00FE19  44                 	db	68
   775  00FE1A  38                 	db	56
   776  00FE1B  FC                 	db	252
   777  00FE1C  18                 	db	24
   778  00FE1D  24                 	db	36
   779  00FE1E  24                 	db	36
   780  00FE1F  18                 	db	24
   781  00FE20  18                 	db	24
   782  00FE21  24                 	db	36
   783  00FE22  24                 	db	36
   784  00FE23  18                 	db	24
   785  00FE24  FC                 	db	252
   786  00FE25  7C                 	db	124
   787  00FE26  08                 	db	8
   788  00FE27  04                 	db	4
   789  00FE28  04                 	db	4
   790  00FE29  08                 	db	8
   791  00FE2A  48                 	db	72
   792  00FE2B  54                 	db	84
   793  00FE2C  54                 	db	84
   794  00FE2D  54                 	db	84
   795  00FE2E  24                 	db	36
   796  00FE2F  04                 	db	4
   797  00FE30  04                 	db	4
   798  00FE31  3F                 	db	63
   799  00FE32  44                 	db	68
   800  00FE33  24                 	db	36
   801  00FE34  3C                 	db	60
   802  00FE35  40                 	db	64
   803  00FE36  40                 	db	64
   804  00FE37  20                 	db	32
   805  00FE38  7C                 	db	124
   806  00FE39  1C                 	db	28
   807  00FE3A  20                 	db	32
   808  00FE3B  40                 	db	64
   809  00FE3C  20                 	db	32
   810  00FE3D  1C                 	db	28
   811  00FE3E  3C                 	db	60
   812  00FE3F  40                 	db	64
   813  00FE40  30                 	db	48
   814  00FE41  40                 	db	64
   815  00FE42  3C                 	db	60
   816  00FE43  44                 	db	68
   817  00FE44  28                 	db	40
   818  00FE45  10                 	db	16
   819  00FE46  28                 	db	40
   820  00FE47  44                 	db	68
   821  00FE48  4C                 	db	76
   822  00FE49  90                 	db	144
   823  00FE4A  90                 	db	144
   824  00FE4B  90                 	db	144
   825  00FE4C  7C                 	db	124
   826  00FE4D  44                 	db	68
   827  00FE4E  64                 	db	100
   828  00FE4F  54                 	db	84
   829  00FE50  4C                 	db	76
   830  00FE51  44                 	db	68
   831  00FE52  00                 	db	0
   832  00FE53  08                 	db	8
   833  00FE54  36                 	db	54
   834  00FE55  41                 	db	65
   835  00FE56  00                 	db	0
   836  00FE57  00                 	db	0
   837  00FE58  00                 	db	0
   838  00FE59  77                 	db	119
   839  00FE5A  00                 	db	0
   840  00FE5B  00                 	db	0
   841  00FE5C  00                 	db	0
   842  00FE5D  41                 	db	65
   843  00FE5E  36                 	db	54
   844  00FE5F  08                 	db	8
   845  00FE60  00                 	db	0
   846  00FE61  02                 	db	2
   847  00FE62  01                 	db	1
   848  00FE63  02                 	db	2
   849  00FE64  04                 	db	4
   850  00FE65  02                 	db	2
   851  00FE66                     __end_of_font2:
   852                           	opt stack 0
   853  00FE66                     _dpowers:
   854                           	opt stack 0
   855  00FE66  0001               	dw	1
   856  00FE68  000A               	dw	10
   857  00FE6A  0064               	dw	100
   858  00FE6C  03E8               	dw	1000
   859  00FE6E  2710               	dw	10000
   860  00FE70                     __end_of_dpowers:
   861                           	opt stack 0
   862  00FE70                     _hexpowers:
   863                           	opt stack 0
   864  00FE70  0001               	dw	1
   865  00FE72  0010               	dw	16
   866  00FE74  0100               	dw	256
   867  00FE76  1000               	dw	4096
   868  00FE78                     __end_of_hexpowers:
   869                           	opt stack 0
   870  0000                     _ADCON0	set	4034
   871  0000                     _ADCON0bits	set	4034
   872  0000                     _ADCON1	set	4033
   873  0000                     _ADCON2	set	4032
   874  0000                     _ADRESH	set	4036
   875  0000                     _ADRESL	set	4035
   876  0000                     _CCP1CON	set	4029
   877  0000                     _CCP2CON	set	4026
   878  0000                     _CCPR1L	set	4030
   879  0000                     _CCPR2L	set	4027
   880  0000                     _INTCON2bits	set	4081
   881  0000                     _INTCON3bits	set	4080
   882  0000                     _INTCONbits	set	4082
   883  0000                     _OSCCON	set	4051
   884  0000                     _PIE1bits	set	3997
   885  0000                     _PIR1bits	set	3998
   886  0000                     _PORTAbits	set	3968
   887  0000                     _PORTBbits	set	3969
   888  0000                     _PORTCbits	set	3970
   889  0000                     _PORTD	set	3971
   890  0000                     _PORTDbits	set	3971
   891  0000                     _PORTE	set	3972
   892  0000                     _PR2	set	4043
   893  0000                     _RCSTA	set	4011
   894  0000                     _RCSTAbits	set	4011
   895  0000                     _SPBRG	set	4015
   896  0000                     _SPBRGH	set	4016
   897  0000                     _SSPBUF	set	4041
   898  0000                     _SSPCON1	set	4038
   899  0000                     _SSPSTAT	set	4039
   900  0000                     _SSPSTATbits	set	4039
   901  0000                     _T0CON	set	4053
   902  0000                     _T0CONbits	set	4053
   903  0000                     _T1CON	set	4045
   904  0000                     _T1CONbits	set	4045
   905  0000                     _T2CON	set	4042
   906  0000                     _T3CON	set	4017
   907  0000                     _TMR0H	set	4055
   908  0000                     _TMR0L	set	4054
   909  0000                     _TMR1H	set	4047
   910  0000                     _TMR1L	set	4046
   911  0000                     _TMR3L	set	4018
   912  0000                     _TRISA	set	3986
   913  0000                     _TRISB	set	3987
   914  0000                     _TRISBbits	set	3987
   915  0000                     _TRISC	set	3988
   916  0000                     _TRISCbits	set	3988
   917  0000                     _TRISD	set	3989
   918  0000                     _TRISDbits	set	3989
   919  0000                     _TRISE	set	3990
   920  0000                     _TXREG	set	4013
   921  0000                     _TXSTA	set	4012
   922  0000                     _TXSTAbits	set	4012
   923  0000                     _RBPU	set	32655
   924  0000                     _TRMT	set	32097
   925  00FE78                     STR_3:
   926  00FE78  25                 	db	37
   927  00FE79  30                 	db	48	;'0'
   928  00FE7A  32                 	db	50	;'2'
   929  00FE7B  78                 	db	120	;'x'
   930  00FE7C  3A                 	db	58	;':'
   931  00FE7D  25                 	db	37
   932  00FE7E  30                 	db	48	;'0'
   933  00FE7F  32                 	db	50	;'2'
   934  00FE80  78                 	db	120	;'x'
   935  00FE81  3A                 	db	58	;':'
   936  00FE82  25                 	db	37
   937  00FE83  30                 	db	48	;'0'
   938  00FE84  32                 	db	50	;'2'
   939  00FE85  78                 	db	120	;'x'
   940  00FE86  20                 	db	32
   941  00FE87  25                 	db	37
   942  00FE88  30                 	db	48	;'0'
   943  00FE89  32                 	db	50	;'2'
   944  00FE8A  78                 	db	120	;'x'
   945  00FE8B  2F                 	db	47
   946  00FE8C  25                 	db	37
   947  00FE8D  30                 	db	48	;'0'
   948  00FE8E  32                 	db	50	;'2'
   949  00FE8F  78                 	db	120	;'x'
   950  00FE90  2F                 	db	47
   951  00FE91  25                 	db	37
   952  00FE92  30                 	db	48	;'0'
   953  00FE93  32                 	db	50	;'2'
   954  00FE94  78                 	db	120	;'x'
   955  00FE95  00                 	db	0
   956  00FE96                     STR_5:
   957  00FE96  61                 	db	97	;'a'
   958  00FE97  6C                 	db	108	;'l'
   959  00FE98  61                 	db	97	;'a'
   960  00FE99  72                 	db	114	;'r'
   961  00FE9A  6D                 	db	109	;'m'
   962  00FE9B  20                 	db	32
   963  00FE9C  3D                 	db	61	;'='
   964  00FE9D  20                 	db	32
   965  00FE9E  25                 	db	37
   966  00FE9F  64                 	db	100	;'d'
   967  00FEA0  20                 	db	32
   968  00FEA1  48                 	db	72	;'H'
   969  00FEA2  65                 	db	101	;'e'
   970  00FEA3  61                 	db	97	;'a'
   971  00FEA4  74                 	db	116	;'t'
   972  00FEA5  65                 	db	101	;'e'
   973  00FEA6  72                 	db	114	;'r'
   974  00FEA7  20                 	db	32
   975  00FEA8  3D                 	db	61	;'='
   976  00FEA9  20                 	db	32
   977  00FEAA  25                 	db	37
   978  00FEAB  64                 	db	100	;'d'
   979  00FEAC  20                 	db	32
   980  00FEAD  00                 	db	0
   981  00FEAE                     STR_38:
   982  00FEAE  43                 	db	67	;'C'
   983  00FEAF  61                 	db	97	;'a'
   984  00FEB0  6E                 	db	110	;'n'
   985  00FEB1  6E                 	db	110	;'n'
   986  00FEB2  6F                 	db	111	;'o'
   987  00FEB3  74                 	db	116	;'t'
   988  00FEB4  20                 	db	32
   989  00FEB5  66                 	db	102	;'f'
   990  00FEB6  69                 	db	105	;'i'
   991  00FEB7  6E                 	db	110	;'n'
   992  00FEB8  64                 	db	100	;'d'
   993  00FEB9  20                 	db	32
   994  00FEBA  62                 	db	98	;'b'
   995  00FEBB  75                 	db	117	;'u'
   996  00FEBC  74                 	db	116	;'t'
   997  00FEBD  74                 	db	116	;'t'
   998  00FEBE  6F                 	db	111	;'o'
   999  00FEBF  6E                 	db	110	;'n'
  1000  00FEC0  20                 	db	32
  1001  00FEC1  0D                 	db	13
  1002  00FEC2  0A                 	db	10
  1003  00FEC3  00                 	db	0
  1004  00FEC4                     STR_4:
  1005  00FEC4  20                 	db	32
  1006  00FEC5  54                 	db	84	;'T'
  1007  00FEC6  65                 	db	101	;'e'
  1008  00FEC7  6D                 	db	109	;'m'
  1009  00FEC8  70                 	db	112	;'p'
  1010  00FEC9  20                 	db	32
  1011  00FECA  3D                 	db	61	;'='
  1012  00FECB  20                 	db	32
  1013  00FECC  25                 	db	37
  1014  00FECD  64                 	db	100	;'d'
  1015  00FECE  20                 	db	32
  1016  00FECF  43                 	db	67	;'C'
  1017  00FED0  20                 	db	32
  1018  00FED1  3D                 	db	61	;'='
  1019  00FED2  20                 	db	32
  1020  00FED3  25                 	db	37
  1021  00FED4  64                 	db	100	;'d'
  1022  00FED5  20                 	db	32
  1023  00FED6  46                 	db	70	;'F'
  1024  00FED7  20                 	db	32
  1025  00FED8  00                 	db	0
  1026  00FED9                     STR_7:
  1027  00FED9  20                 	db	32
  1028  00FEDA  45                 	db	69	;'E'
  1029  00FEDB  43                 	db	67	;'C'
  1030  00FEDC  45                 	db	69	;'E'
  1031  00FEDD  33                 	db	51	;'3'
  1032  00FEDE  33                 	db	51	;'3'
  1033  00FEDF  30                 	db	48	;'0'
  1034  00FEE0  31                 	db	49	;'1'
  1035  00FEE1  4C                 	db	76	;'L'
  1036  00FEE2  20                 	db	32
  1037  00FEE3  53                 	db	83	;'S'
  1038  00FEE4  70                 	db	112	;'p'
  1039  00FEE5  27                 	db	39
  1040  00FEE6  32                 	db	50	;'2'
  1041  00FEE7  32                 	db	50	;'2'
  1042  00FEE8  20                 	db	32
  1043  00FEE9  53                 	db	83	;'S'
  1044  00FEEA  78                 	db	120	;'x'
  1045  00FEEB  00                 	db	0
  1046  00FEEC  00                 	db	0
  1047  00FEED                     STR_6:
  1048  00FEED  52                 	db	82	;'R'
  1049  00FEEE  50                 	db	80	;'P'
  1050  00FEEF  4D                 	db	77	;'M'
  1051  00FEF0  20                 	db	32
  1052  00FEF1  3D                 	db	61	;'='
  1053  00FEF2  20                 	db	32
  1054  00FEF3  25                 	db	37
  1055  00FEF4  64                 	db	100	;'d'
  1056  00FEF5  20                 	db	32
  1057  00FEF6  20                 	db	32
  1058  00FEF7  64                 	db	100	;'d'
  1059  00FEF8  63                 	db	99	;'c'
  1060  00FEF9  20                 	db	32
  1061  00FEFA  3D                 	db	61	;'='
  1062  00FEFB  20                 	db	32
  1063  00FEFC  25                 	db	37
  1064  00FEFD  64                 	db	100	;'d'
  1065  00FEFE  0D                 	db	13
  1066  00FEFF  0A                 	db	10
  1067  00FF00  00                 	db	0
  1068  00FF01                     STR_1:
  1069  00FF01  46                 	db	70	;'F'
  1070  00FF02  61                 	db	97	;'a'
  1071  00FF03  6E                 	db	110	;'n'
  1072  00FF04  20                 	db	32
  1073  00FF05  69                 	db	105	;'i'
  1074  00FF06  73                 	db	115	;'s'
  1075  00FF07  20                 	db	32
  1076  00FF08  74                 	db	116	;'t'
  1077  00FF09  75                 	db	117	;'u'
  1078  00FF0A  72                 	db	114	;'r'
  1079  00FF0B  6E                 	db	110	;'n'
  1080  00FF0C  65                 	db	101	;'e'
  1081  00FF0D  64                 	db	100	;'d'
  1082  00FF0E  20                 	db	32
  1083  00FF0F  6F                 	db	111	;'o'
  1084  00FF10  66                 	db	102	;'f'
  1085  00FF11  66                 	db	102	;'f'
  1086  00FF12  0D                 	db	13
  1087  00FF13  0A                 	db	10
  1088  00FF14  00                 	db	0
  1089  00FF15                     STR_30:
  1090  00FF15  45                 	db	69	;'E'
  1091  00FF16  43                 	db	67	;'C'
  1092  00FF17  45                 	db	69	;'E'
  1093  00FF18  33                 	db	51	;'3'
  1094  00FF19  33                 	db	51	;'3'
  1095  00FF1A  30                 	db	48	;'0'
  1096  00FF1B  31                 	db	49	;'1'
  1097  00FF1C  4C                 	db	76	;'L'
  1098  00FF1D  20                 	db	32
  1099  00FF1E  53                 	db	83	;'S'
  1100  00FF1F  70                 	db	112	;'p'
  1101  00FF20  27                 	db	39
  1102  00FF21  32                 	db	50	;'2'
  1103  00FF22  32                 	db	50	;'2'
  1104  00FF23  20                 	db	32
  1105  00FF24  53                 	db	83	;'S'
  1106  00FF25  31                 	db	49	;'1'
  1107  00FF26  00                 	db	0
  1108  00FF27  00                 	db	0
  1109  00FF28                     STR_2:
  1110  00FF28  46                 	db	70	;'F'
  1111  00FF29  61                 	db	97	;'a'
  1112  00FF2A  6E                 	db	110	;'n'
  1113  00FF2B  20                 	db	32
  1114  00FF2C  69                 	db	105	;'i'
  1115  00FF2D  73                 	db	115	;'s'
  1116  00FF2E  20                 	db	32
  1117  00FF2F  74                 	db	116	;'t'
  1118  00FF30  75                 	db	117	;'u'
  1119  00FF31  72                 	db	114	;'r'
  1120  00FF32  6E                 	db	110	;'n'
  1121  00FF33  65                 	db	101	;'e'
  1122  00FF34  64                 	db	100	;'d'
  1123  00FF35  20                 	db	32
  1124  00FF36  6F                 	db	111	;'o'
  1125  00FF37  6E                 	db	110	;'n'
  1126  00FF38  0D                 	db	13
  1127  00FF39  0A                 	db	10
  1128  00FF3A  00                 	db	0
  1129  00FF3B                     STR_25:
  1130  00FF3B  45                 	db	69	;'E'
  1131  00FF3C  43                 	db	67	;'C'
  1132  00FF3D  45                 	db	69	;'E'
  1133  00FF3E  33                 	db	51	;'3'
  1134  00FF3F  33                 	db	51	;'3'
  1135  00FF40  30                 	db	48	;'0'
  1136  00FF41  31                 	db	49	;'1'
  1137  00FF42  4C                 	db	76	;'L'
  1138  00FF43  20                 	db	32
  1139  00FF44  53                 	db	83	;'S'
  1140  00FF45  70                 	db	112	;'p'
  1141  00FF46  27                 	db	39
  1142  00FF47  32                 	db	50	;'2'
  1143  00FF48  32                 	db	50	;'2'
  1144  00FF49  20                 	db	32
  1145  00FF4A  53                 	db	83	;'S'
  1146  00FF4B  31                 	db	49	;'1'
  1147  00FF4C  00                 	db	0
  1148  00FF4D                     STR_39:
  1149  00FF4D  30                 	db	48	;'0'
  1150  00FF4E  31                 	db	49	;'1'
  1151  00FF4F  32                 	db	50	;'2'
  1152  00FF50  33                 	db	51	;'3'
  1153  00FF51  34                 	db	52	;'4'
  1154  00FF52  35                 	db	53	;'5'
  1155  00FF53  36                 	db	54	;'6'
  1156  00FF54  37                 	db	55	;'7'
  1157  00FF55  38                 	db	56	;'8'
  1158  00FF56  39                 	db	57	;'9'
  1159  00FF57  61                 	db	97	;'a'
  1160  00FF58  62                 	db	98	;'b'
  1161  00FF59  63                 	db	99	;'c'
  1162  00FF5A  64                 	db	100	;'d'
  1163  00FF5B  65                 	db	101	;'e'
  1164  00FF5C  66                 	db	102	;'f'
  1165  00FF5D  00                 	db	0
  1166  00FF5E                     STR_33:
  1167  00FF5E  53                 	db	83	;'S'
  1168  00FF5F  65                 	db	101	;'e'
  1169  00FF60  74                 	db	116	;'t'
  1170  00FF61  20                 	db	32
  1171  00FF62  48                 	db	72	;'H'
  1172  00FF63  65                 	db	101	;'e'
  1173  00FF64  61                 	db	97	;'a'
  1174  00FF65  74                 	db	116	;'t'
  1175  00FF66  65                 	db	101	;'e'
  1176  00FF67  72                 	db	114	;'r'
  1177  00FF68  20                 	db	32
  1178  00FF69  54                 	db	84	;'T'
  1179  00FF6A  65                 	db	101	;'e'
  1180  00FF6B  6D                 	db	109	;'m'
  1181  00FF6C  70                 	db	112	;'p'
  1182  00FF6D  00                 	db	0
  1183  00FF6E                     STR_8:
  1184  00FF6E  54                 	db	84	;'T'
  1185  00FF6F  65                 	db	101	;'e'
  1186  00FF70  6D                 	db	109	;'m'
  1187  00FF71  70                 	db	112	;'p'
  1188  00FF72  65                 	db	101	;'e'
  1189  00FF73  72                 	db	114	;'r'
  1190  00FF74  61                 	db	97	;'a'
  1191  00FF75  74                 	db	116	;'t'
  1192  00FF76  75                 	db	117	;'u'
  1193  00FF77  72                 	db	114	;'r'
  1194  00FF78  65                 	db	101	;'e'
  1195  00FF79  3A                 	db	58	;':'
  1196  00FF7A  00                 	db	0
  1197  00FF7B                     STR_15:
  1198  00FF7B  48                 	db	72	;'H'
  1199  00FF7C  54                 	db	84	;'T'
  1200  00FF7D  52                 	db	82	;'R'
  1201  00FF7E  20                 	db	32
  1202  00FF7F  53                 	db	83	;'S'
  1203  00FF80  65                 	db	101	;'e'
  1204  00FF81  74                 	db	116	;'t'
  1205  00FF82  20                 	db	32
  1206  00FF83  54                 	db	84	;'T'
  1207  00FF84  65                 	db	101	;'e'
  1208  00FF85  6D                 	db	109	;'m'
  1209  00FF86  70                 	db	112	;'p'
  1210  00FF87  00                 	db	0
  1211  00FF88                     STR_35:
  1212  00FF88  54                 	db	84	;'T'
  1213  00FF89  69                 	db	105	;'i'
  1214  00FF8A  6D                 	db	109	;'m'
  1215  00FF8B  65                 	db	101	;'e'
  1216  00FF8C  20                 	db	32
  1217  00FF8D  53                 	db	83	;'S'
  1218  00FF8E  65                 	db	101	;'e'
  1219  00FF8F  74                 	db	116	;'t'
  1220  00FF90  75                 	db	117	;'u'
  1221  00FF91  70                 	db	112	;'p'
  1222  00FF92  00                 	db	0
  1223  00FF93  00                 	db	0
  1224  00FF94                     STR_31:
  1225  00FF94  20                 	db	32
  1226  00FF95  20                 	db	32
  1227  00FF96  48                 	db	72	;'H'
  1228  00FF97  65                 	db	101	;'e'
  1229  00FF98  61                 	db	97	;'a'
  1230  00FF99  74                 	db	116	;'t'
  1231  00FF9A  65                 	db	101	;'e'
  1232  00FF9B  72                 	db	114	;'r'
  1233  00FF9C  00                 	db	0
  1234  00FF9D  20                 	db	32
  1235  00FF9E  00                 	db	0
  1236  00FF9F                     STR_29:
  1237  00FF9F  25                 	db	37
  1238  00FFA0  78                 	db	120	;'x'
  1239  00FFA1  3A                 	db	58	;':'
  1240  00FFA2  25                 	db	37
  1241  00FFA3  78                 	db	120	;'x'
  1242  00FFA4  3A                 	db	58	;':'
  1243  00FFA5  25                 	db	37
  1244  00FFA6  78                 	db	120	;'x'
  1245  00FFA7  0D                 	db	13
  1246  00FFA8  0A                 	db	10
  1247  00FFA9  00                 	db	0
  1248  00FFAA                     STR_13:
  1249  00FFAA  41                 	db	65	;'A'
  1250  00FFAB  6C                 	db	108	;'l'
  1251  00FFAC  61                 	db	97	;'a'
  1252  00FFAD  72                 	db	114	;'r'
  1253  00FFAE  6D                 	db	109	;'m'
  1254  00FFAF  20                 	db	32
  1255  00FFB0  54                 	db	84	;'T'
  1256  00FFB1  69                 	db	105	;'i'
  1257  00FFB2  6D                 	db	109	;'m'
  1258  00FFB3  65                 	db	101	;'e'
  1259  00FFB4  00                 	db	0
  1260  00FFB5                     STR_32:
  1261  00FFB5  20                 	db	32
  1262  00FFB6  20                 	db	32
  1263  00FFB7  53                 	db	83	;'S'
  1264  00FFB8  65                 	db	101	;'e'
  1265  00FFB9  74                 	db	116	;'t'
  1266  00FFBA  75                 	db	117	;'u'
  1267  00FFBB  70                 	db	112	;'p'
  1268  00FFBC  00                 	db	0
  1269  00FFBD  20                 	db	32
  1270  00FFBE  00                 	db	0
  1271  00FFBF                     STR_14:
  1272  00FFBF  41                 	db	65	;'A'
  1273  00FFC0  6C                 	db	108	;'l'
  1274  00FFC1  61                 	db	97	;'a'
  1275  00FFC2  72                 	db	114	;'r'
  1276  00FFC3  6D                 	db	109	;'m'
  1277  00FFC4  20                 	db	32
  1278  00FFC5  53                 	db	83	;'S'
  1279  00FFC6  57                 	db	87	;'W'
  1280  00FFC7  00                 	db	0
  1281  00FFC8                     STR_26:
  1282  00FFC8  20                 	db	32
  1283  00FFC9  20                 	db	32
  1284  00FFCA  41                 	db	65	;'A'
  1285  00FFCB  6C                 	db	108	;'l'
  1286  00FFCC  61                 	db	97	;'a'
  1287  00FFCD  72                 	db	114	;'r'
  1288  00FFCE  6D                 	db	109	;'m'
  1289  00FFCF  00                 	db	0
  1290  00FFD0                     STR_27:
  1291  00FFD0  20                 	db	32
  1292  00FFD1  20                 	db	32
  1293  00FFD2  53                 	db	83	;'S'
  1294  00FFD3  65                 	db	101	;'e'
  1295  00FFD4  74                 	db	116	;'t'
  1296  00FFD5  75                 	db	117	;'u'
  1297  00FFD6  70                 	db	112	;'p'
  1298  00FFD7  00                 	db	0
  1299  00FFD8                     STR_16:
  1300  00FFD8  48                 	db	72	;'H'
  1301  00FFD9  54                 	db	84	;'T'
  1302  00FFDA  52                 	db	82	;'R'
  1303  00FFDB  20                 	db	32
  1304  00FFDC  53                 	db	83	;'S'
  1305  00FFDD  57                 	db	87	;'W'
  1306  00FFDE  00                 	db	0
  1307  00FFDF                     STR_12:
  1308  00FFDF  44                 	db	68	;'D'
  1309  00FFE0  61                 	db	97	;'a'
  1310  00FFE1  74                 	db	116	;'t'
  1311  00FFE2  65                 	db	101	;'e'
  1312  00FFE3  00                 	db	0
  1313  00FFE4                     STR_19:
  1314  00FFE4  56                 	db	86	;'V'
  1315  00FFE5  6F                 	db	111	;'o'
  1316  00FFE6  6C                 	db	108	;'l'
  1317  00FFE7  74                 	db	116	;'t'
  1318  00FFE8  00                 	db	0
  1319  00FFE9                     STR_21:
  1320  00FFE9  4F                 	db	79	;'O'
  1321  00FFEA  4E                 	db	78	;'N'
  1322  00FFEB  20                 	db	32
  1323  00FFEC  00                 	db	0
  1324  00FFED                     STR_22:
  1325  00FFED  4F                 	db	79	;'O'
  1326  00FFEE  46                 	db	70	;'F'
  1327  00FFEF  46                 	db	70	;'F'
  1328  00FFF0  00                 	db	0
  1329  00FFF1                     STR_20:
  1330  00FFF1  52                 	db	82	;'R'
  1331  00FFF2  50                 	db	80	;'P'
  1332  00FFF3  4D                 	db	77	;'M'
  1333  00FFF4  00                 	db	0
  1334  00FFF5                     STR_9:
  1335  00FFF5  43                 	db	67	;'C'
  1336  00FFF6  2F                 	db	47
  1337  00FFF7  00                 	db	0
  1338  00FFF8                     STR_17:
  1339  00FFF8  44                 	db	68	;'D'
  1340  00FFF9  43                 	db	67	;'C'
  1341  00FFFA  00                 	db	0
  1342  00FFFB                     STR_18:
  1343  00FFFB  52                 	db	82	;'R'
  1344  00FFFC  4D                 	db	77	;'M'
  1345  00FFFD  00                 	db	0
  1346  0000                     
  1347                           ; #config settings
  1348  00FFFE  00                 	db	0	; dummy byte at the end
  1349  0000                     
  1350                           	psect	cinit
  1351  002DA4                     __pcinit:
  1352                           	opt stack 0
  1353  002DA4                     start_initialization:
  1354                           	opt stack 0
  1355  002DA4                     __initialization:
  1356                           	opt stack 0
  1357                           
  1358                           ; Clear objects allocated to BANK0 (26 bytes)
  1359  002DA4  EE00  F0E3         	lfsr	0,__pbssBANK0
  1360  002DA8  0E1A               	movlw	26
  1361  002DAA                     clear_0:
  1362  002DAA  6AEE               	clrf	postinc0,c
  1363  002DAC  06E8               	decf	wreg,f,c
  1364  002DAE  E1FD               	bnz	clear_0
  1365                           
  1366                           ; Clear objects allocated to COMRAM (44 bytes)
  1367  002DB0  EE00  F043         	lfsr	0,__pbssCOMRAM
  1368  002DB4  0E2C               	movlw	44
  1369  002DB6                     clear_1:
  1370  002DB6  6AEE               	clrf	postinc0,c
  1371  002DB8  06E8               	decf	wreg,f,c
  1372  002DBA  E1FD               	bnz	clear_1
  1373                           
  1374                           ; Initialize objects allocated to BANK1 (74 bytes)
  1375                           ; load TBLPTR registers with __pidataBANK1
  1376  002DBC  0E82               	movlw	low __pidataBANK1
  1377  002DBE  6EF6               	movwf	tblptrl,c
  1378  002DC0  0E33               	movlw	high __pidataBANK1
  1379  002DC2  6EF7               	movwf	tblptrh,c
  1380  002DC4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1381  002DC6  6EF8               	movwf	tblptru,c
  1382  002DC8  EE01  F000         	lfsr	0,__pdataBANK1
  1383  002DCC  EE10 F04A          	lfsr	1,74
  1384  002DD0                     copy_data0:
  1385  002DD0  0009               	tblrd		*+
  1386  002DD2  CFF5 FFEE          	movff	tablat,postinc0
  1387  002DD6  50E5               	movf	postdec1,w,c
  1388  002DD8  50E1               	movf	fsr1l,w,c
  1389  002DDA  E1FA               	bnz	copy_data0
  1390                           
  1391                           ; Initialize objects allocated to BANK0 (99 bytes)
  1392                           ; load TBLPTR registers with __pidataBANK0
  1393  002DDC  0EEC               	movlw	low __pidataBANK0
  1394  002DDE  6EF6               	movwf	tblptrl,c
  1395  002DE0  0E2E               	movlw	high __pidataBANK0
  1396  002DE2  6EF7               	movwf	tblptrh,c
  1397  002DE4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1398  002DE6  6EF8               	movwf	tblptru,c
  1399  002DE8  EE00  F080         	lfsr	0,__pdataBANK0
  1400  002DEC  EE10 F063          	lfsr	1,99
  1401  002DF0                     copy_data1:
  1402  002DF0  0009               	tblrd		*+
  1403  002DF2  CFF5 FFEE          	movff	tablat,postinc0
  1404  002DF6  50E5               	movf	postdec1,w,c
  1405  002DF8  50E1               	movf	fsr1l,w,c
  1406  002DFA  E1FA               	bnz	copy_data1
  1407                           
  1408                           ; Initialize objects allocated to COMRAM (1 bytes)
  1409                           ; load TBLPTR registers with __pidataCOMRAM
  1410  002DFC  0EF0               	movlw	low __pidataCOMRAM
  1411  002DFE  6EF6               	movwf	tblptrl,c
  1412  002E00  0E3A               	movlw	high __pidataCOMRAM
  1413  002E02  6EF7               	movwf	tblptrh,c
  1414  002E04  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1415  002E06  6EF8               	movwf	tblptru,c
  1416  002E08  0009               	tblrd		*+	;fetch initializer
  1417  002E0A  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1418  002E0E                     end_of_initialization:
  1419                           	opt stack 0
  1420  002E0E                     __end_of__initialization:
  1421                           	opt stack 0
  1422  002E0E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1423  002E10  6EF8               	movwf	tblptru,c
  1424  002E12  0100               	movlb	0
  1425  002E14  EF96  F006         	goto	_main	;jump to C main() function
  1426                           tblptru	equ	0xFF8
  1427                           tblptrh	equ	0xFF7
  1428                           tblptrl	equ	0xFF6
  1429                           tablat	equ	0xFF5
  1430                           postinc0	equ	0xFEE
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1l	equ	0xFE1
  1434                           
  1435                           	psect	bssCOMRAM
  1436  000043                     __pbssCOMRAM:
  1437                           	opt stack 0
  1438  000043                     _DS1621_tempC:
  1439                           	opt stack 0
  1440  000043                     	ds	2
  1441  000045                     _DS1621_tempF:
  1442                           	opt stack 0
  1443  000045                     	ds	2
  1444  000047                     _Time_Elapsed:
  1445                           	opt stack 0
  1446  000047                     	ds	2
  1447  000049                     _duty_cycle:
  1448                           	opt stack 0
  1449  000049                     	ds	2
  1450  00004B                     _rpm:
  1451                           	opt stack 0
  1452  00004B                     	ds	2
  1453  00004D                     _txt:
  1454                           	opt stack 0
  1455  00004D                     	ds	2
  1456  00004F                     _HEATER:
  1457                           	opt stack 0
  1458  00004F                     	ds	1
  1459  000050                     _INT1_flag:
  1460                           	opt stack 0
  1461  000050                     	ds	1
  1462  000051                     _Nec_code1:
  1463                           	opt stack 0
  1464  000051                     	ds	1
  1465  000052                     _Nec_state:
  1466                           	opt stack 0
  1467  000052                     	ds	1
  1468  000053                     _Select_Alarm_Field:
  1469                           	opt stack 0
  1470  000053                     	ds	1
  1471  000054                     _Select_Field:
  1472                           	opt stack 0
  1473  000054                     	ds	1
  1474  000055                     __tft_type:
  1475                           	opt stack 0
  1476  000055                     	ds	1
  1477  000056                     _alarm_date:
  1478                           	opt stack 0
  1479  000056                     	ds	1
  1480  000057                     _alarm_hour:
  1481                           	opt stack 0
  1482  000057                     	ds	1
  1483  000058                     _alarm_minute:
  1484                           	opt stack 0
  1485  000058                     	ds	1
  1486  000059                     _alarm_second:
  1487                           	opt stack 0
  1488  000059                     	ds	1
  1489  00005A                     _bit_count:
  1490                           	opt stack 0
  1491  00005A                     	ds	1
  1492  00005B                     _colstart:
  1493                           	opt stack 0
  1494  00005B                     	ds	1
  1495  00005C                     _day:
  1496                           	opt stack 0
  1497  00005C                     	ds	1
  1498  00005D                     _dow:
  1499                           	opt stack 0
  1500  00005D                     	ds	1
  1501  00005E                     _found:
  1502                           	opt stack 0
  1503  00005E                     	ds	1
  1504  00005F                     _hour:
  1505                           	opt stack 0
  1506  00005F                     	ds	1
  1507  000060                     _minute:
  1508                           	opt stack 0
  1509  000060                     	ds	1
  1510  000061                     _month:
  1511                           	opt stack 0
  1512  000061                     	ds	1
  1513  000062                     _rowstart:
  1514                           	opt stack 0
  1515  000062                     	ds	1
  1516  000063                     _second:
  1517                           	opt stack 0
  1518  000063                     	ds	1
  1519  000064                     _setup_alarm_hour:
  1520                           	opt stack 0
  1521  000064                     	ds	1
  1522  000065                     _setup_alarm_minute:
  1523                           	opt stack 0
  1524  000065                     	ds	1
  1525  000066                     _setup_alarm_second:
  1526                           	opt stack 0
  1527  000066                     	ds	1
  1528  000067                     _setup_day:
  1529                           	opt stack 0
  1530  000067                     	ds	1
  1531  000068                     _setup_heater_set_temp:
  1532                           	opt stack 0
  1533  000068                     	ds	1
  1534  000069                     _setup_hour:
  1535                           	opt stack 0
  1536  000069                     	ds	1
  1537  00006A                     _setup_minute:
  1538                           	opt stack 0
  1539  00006A                     	ds	1
  1540  00006B                     _setup_month:
  1541                           	opt stack 0
  1542  00006B                     	ds	1
  1543  00006C                     _setup_second:
  1544                           	opt stack 0
  1545  00006C                     	ds	1
  1546  00006D                     _setup_year:
  1547                           	opt stack 0
  1548  00006D                     	ds	1
  1549  00006E                     _year:
  1550                           	opt stack 0
  1551  00006E                     	ds	1
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561                           	psect	dataCOMRAM
  1562  00006F                     __pdataCOMRAM:
  1563                           	opt stack 0
  1564  00006F                     _heater_set_temp:
  1565                           	opt stack 0
  1566  00006F                     	ds	1
  1567                           tblptru	equ	0xFF8
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           postinc0	equ	0xFEE
  1572                           wreg	equ	0xFE8
  1573                           postdec1	equ	0xFE5
  1574                           fsr1l	equ	0xFE1
  1575                           
  1576                           	psect	bssBANK0
  1577  0000E3                     __pbssBANK0:
  1578                           	opt stack 0
  1579  0000E3                     _Nec_code:
  1580                           	opt stack 0
  1581  0000E3                     	ds	4
  1582  0000E7                     _volt:
  1583                           	opt stack 0
  1584  0000E7                     	ds	3
  1585  0000EA                     _ALARMEN:
  1586                           	opt stack 0
  1587  0000EA                     	ds	2
  1588  0000EC                     _MATCHED:
  1589                           	opt stack 0
  1590  0000EC                     	ds	2
  1591  0000EE                     _alarm_mode:
  1592                           	opt stack 0
  1593  0000EE                     	ds	2
  1594  0000F0                     _color:
  1595                           	opt stack 0
  1596  0000F0                     	ds	2
  1597  0000F2                     _nbr:
  1598                           	opt stack 0
  1599  0000F2                     	ds	2
  1600  0000F4                     _nec_ok:
  1601                           	opt stack 0
  1602  0000F4                     	ds	2
  1603  0000F6                     _rps:
  1604                           	opt stack 0
  1605  0000F6                     	ds	2
  1606  0000F8                     _INT2_flag:
  1607                           	opt stack 0
  1608  0000F8                     	ds	1
  1609  0000F9                     _In_Alarm_Time_Setup:
  1610                           	opt stack 0
  1611  0000F9                     	ds	1
  1612  0000FA                     _In_Heater_Temp_Setup:
  1613                           	opt stack 0
  1614  0000FA                     	ds	1
  1615  0000FB                     _In_Time_Setup:
  1616                           	opt stack 0
  1617  0000FB                     	ds	1
  1618  0000FC                     _Select_Heater_Temp_Field:
  1619                           	opt stack 0
  1620  0000FC                     	ds	1
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           postinc0	equ	0xFEE
  1626                           wreg	equ	0xFE8
  1627                           postdec1	equ	0xFE5
  1628                           fsr1l	equ	0xFE1
  1629                           
  1630                           	psect	dataBANK0
  1631  000080                     __pdataBANK0:
  1632                           	opt stack 0
  1633  000080                     _tempSecond:
  1634                           	opt stack 0
  1635  000080                     	ds	1
  1636  000081                     _wrap:
  1637                           	opt stack 0
  1638  000081                     	ds	1
  1639  000082                     _alarm_time:
  1640                           	opt stack 0
  1641  000082                     	ds	9
  1642  00008B                     _date:
  1643                           	opt stack 0
  1644  00008B                     	ds	9
  1645  000094                     _setup_alarm_time:
  1646                           	opt stack 0
  1647  000094                     	ds	9
  1648  00009D                     _setup_date:
  1649                           	opt stack 0
  1650  00009D                     	ds	9
  1651  0000A6                     _setup_time:
  1652                           	opt stack 0
  1653  0000A6                     	ds	9
  1654  0000AF                     _time:
  1655                           	opt stack 0
  1656  0000AF                     	ds	9
  1657  0000B8                     _Volt_Txt:
  1658                           	opt stack 0
  1659  0000B8                     	ds	6
  1660  0000BE                     _Heater_Set_Temp_Txt:
  1661                           	opt stack 0
  1662  0000BE                     	ds	5
  1663  0000C3                     _RPM_Txt:
  1664                           	opt stack 0
  1665  0000C3                     	ds	5
  1666  0000C8                     _setup_heater_set_text:
  1667                           	opt stack 0
  1668  0000C8                     	ds	5
  1669  0000CD                     _Alarm_SW_Txt:
  1670                           	opt stack 0
  1671  0000CD                     	ds	4
  1672  0000D1                     _DC_Txt:
  1673                           	opt stack 0
  1674  0000D1                     	ds	4
  1675  0000D5                     _Heater_SW_Txt:
  1676                           	opt stack 0
  1677  0000D5                     	ds	4
  1678  0000D9                     _tempC:
  1679                           	opt stack 0
  1680  0000D9                     	ds	4
  1681  0000DD                     _tempF:
  1682                           	opt stack 0
  1683  0000DD                     	ds	4
  1684  0000E1                     _RTC_ALARM_Txt:
  1685                           	opt stack 0
  1686  0000E1                     	ds	2
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           postdec1	equ	0xFE5
  1694                           fsr1l	equ	0xFE1
  1695                           
  1696                           	psect	dataBANK1
  1697  000100                     __pdataBANK1:
  1698                           	opt stack 0
  1699  000100                     _buffer:
  1700                           	opt stack 0
  1701  000100                     	ds	31
  1702  00011F                     _array1:
  1703                           	opt stack 0
  1704  00011F                     	ds	21
  1705  000134                     Set_RPM_RGB@F4113:
  1706                           	opt stack 0
  1707  000134                     	ds	14
  1708  000142                     Set_RGB_Color@F4243:
  1709                           	opt stack 0
  1710  000142                     	ds	8
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           postdec1	equ	0xFE5
  1718                           fsr1l	equ	0xFE1
  1719                           
  1720                           	psect	cstackBANK1
  1721  00014A                     __pcstackBANK1:
  1722                           	opt stack 0
  1723  00014A                     drawtext@x:
  1724                           	opt stack 0
  1725  00014A                     do_update_pwm@dc_f:
  1726                           	opt stack 0
  1727                           
  1728                           ; 3 bytes @ 0x0
  1729  00014A                     	ds	1
  1730  00014B                     drawtext@textsize:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x1
  1734  00014B                     	ds	2
  1735  00014D                     do_update_pwm@duty_cycle:
  1736                           	opt stack 0
  1737  00014D                     drawtext@i:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x3
  1741  00014D                     	ds	1
  1742  00014E                     do_update_pwm@dc_I:
  1743                           	opt stack 0
  1744                           
  1745                           ; 2 bytes @ 0x4
  1746  00014E                     	ds	1
  1747  00014F                     drawtext@cursor_y:
  1748                           	opt stack 0
  1749                           
  1750                           ; 1 bytes @ 0x5
  1751  00014F                     	ds	1
  1752  000150                     drawtext@cursor_x:
  1753                           	opt stack 0
  1754                           
  1755                           ; 1 bytes @ 0x6
  1756  000150                     	ds	1
  1757  000151                     ??_Do_Setup_Heater_Temp:
  1758  000151                     _Update_Screen$3207:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x7
  1762  000151                     	ds	2
  1763  000153                     Update_Screen@neg_tempF:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x9
  1767  000153                     	ds	2
  1768  000155                     Update_Screen@neg_DS1621_tempC:
  1769                           	opt stack 0
  1770                           
  1771                           ; 1 bytes @ 0xB
  1772  000155                     	ds	1
  1773  000156                     ??_main:
  1774                           
  1775                           ; 0 bytes @ 0xC
  1776  000156                     	ds	2
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           	psect	cstackBANK0
  1787  0000FD                     __pcstackBANK0:
  1788                           	opt stack 0
  1789  0000FD                     ??_Update_Screen:
  1790  0000FD                     Update_Setup_Heater_Screen@dc_char1:
  1791                           	opt stack 0
  1792                           
  1793                           ; 1 bytes @ 0x0
  1794  0000FD                     	ds	1
  1795  0000FE                     Update_Setup_Heater_Screen@dc_char2:
  1796                           	opt stack 0
  1797                           
  1798                           ; 1 bytes @ 0x1
  1799  0000FE                     	ds	1
  1800  0000FF                     Update_Setup_Heater_Screen@dc_char3:
  1801                           	opt stack 0
  1802                           
  1803                           ; 1 bytes @ 0x2
  1804  0000FF                     	ds	1
  1805                           tblptru	equ	0xFF8
  1806                           tblptrh	equ	0xFF7
  1807                           tblptrl	equ	0xFF6
  1808                           tablat	equ	0xFF5
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postdec1	equ	0xFE5
  1812                           fsr1l	equ	0xFE1
  1813                           
  1814                           	psect	cstackCOMRAM
  1815  000001                     __pcstackCOMRAM:
  1816                           	opt stack 0
  1817  000001                     ??_INT0_isr:
  1818  000001                     
  1819                           ; 2 bytes @ 0x0
  1820  000001                     	ds	2
  1821  000003                     ??_chkisr:
  1822                           
  1823                           ; 0 bytes @ 0x2
  1824  000003                     	ds	14
  1825  000011                     ??_bcd_2_dec:
  1826  000011                     ??_isdigit:
  1827  000011                     ?_strlen:
  1828                           	opt stack 0
  1829  000011                     ?_get_full_ADC:
  1830                           	opt stack 0
  1831  000011                     ?___wmul:
  1832                           	opt stack 0
  1833  000011                     ?___lwdiv:
  1834                           	opt stack 0
  1835  000011                     ?___ftpack:
  1836                           	opt stack 0
  1837  000011                     ?___fttol:
  1838                           	opt stack 0
  1839  000011                     I2C_Read@ack:
  1840                           	opt stack 0
  1841  000011                     I2C_Write@outByte:
  1842                           	opt stack 0
  1843  000011                     putch@c:
  1844                           	opt stack 0
  1845  000011                     spiwrite@x:
  1846                           	opt stack 0
  1847  000011                     Wait_One_Sec@k:
  1848                           	opt stack 0
  1849  000011                     OpenUSART@spbrg:
  1850                           	opt stack 0
  1851  000011                     ___wmul@multiplier:
  1852                           	opt stack 0
  1853  000011                     ___lwdiv@dividend:
  1854                           	opt stack 0
  1855  000011                     strcpy@to:
  1856                           	opt stack 0
  1857  000011                     strlen@s:
  1858                           	opt stack 0
  1859  000011                     ___ftpack@arg:
  1860                           	opt stack 0
  1861  000011                     ___fttol@f1:
  1862                           	opt stack 0
  1863  000011                     I2C_Init@c:
  1864                           	opt stack 0
  1865                           
  1866                           ; 4 bytes @ 0x10
  1867  000011                     	ds	1
  1868  000012                     I2C_Read@n:
  1869                           	opt stack 0
  1870  000012                     I2C_Write@n:
  1871                           	opt stack 0
  1872  000012                     spiwrite@spidata:
  1873                           	opt stack 0
  1874  000012                     _isdigit$2855:
  1875                           	opt stack 0
  1876                           
  1877                           ; 1 bytes @ 0x11
  1878  000012                     	ds	1
  1879  000013                     ??_strlen:
  1880  000013                     ??_get_full_ADC:
  1881  000013                     I2C_Read@inByte:
  1882                           	opt stack 0
  1883  000013                     I2C_Write_Address_Write_One_Byte@Address:
  1884                           	opt stack 0
  1885  000013                     I2C_Write_Cmd_Only@Cmd:
  1886                           	opt stack 0
  1887  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1888                           	opt stack 0
  1889  000013                     write_command@cmd_:
  1890                           	opt stack 0
  1891  000013                     write_data@data_:
  1892                           	opt stack 0
  1893  000013                     OpenUSART@config:
  1894                           	opt stack 0
  1895  000013                     isdigit@c:
  1896                           	opt stack 0
  1897  000013                     bcd_2_dec@dec:
  1898                           	opt stack 0
  1899  000013                     ___wmul@multiplicand:
  1900                           	opt stack 0
  1901  000013                     ___lwdiv@divisor:
  1902                           	opt stack 0
  1903  000013                     strcpy@from:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x12
  1907  000013                     	ds	1
  1908  000014                     ?_DS1621_Read_Temp:
  1909                           	opt stack 0
  1910  000014                     I2C_Write_Address_Read_One_Byte@Address:
  1911                           	opt stack 0
  1912  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1913                           	opt stack 0
  1914  000014                     I2C_Write_Cmd_Only@Device:
  1915                           	opt stack 0
  1916  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1917                           	opt stack 0
  1918  000014                     DS3231_Read_Time@Address:
  1919                           	opt stack 0
  1920  000014                     DS3231_Read_Alarm_Time@Address:
  1921                           	opt stack 0
  1922  000014                     setAddrWindow@y0:
  1923                           	opt stack 0
  1924  000014                     ___ftpack@exp:
  1925                           	opt stack 0
  1926                           
  1927                           ; 1 bytes @ 0x13
  1928  000014                     	ds	1
  1929  000015                     ??___fttol:
  1930  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1931                           	opt stack 0
  1932  000015                     I2C_Write_Address_Write_One_Byte@Device:
  1933                           	opt stack 0
  1934  000015                     I2C_Write_Cmd_Write_Data@Device:
  1935                           	opt stack 0
  1936  000015                     DS3231_Read_Time@Device:
  1937                           	opt stack 0
  1938  000015                     DS3231_Read_Alarm_Time@Device:
  1939                           	opt stack 0
  1940  000015                     setAddrWindow@x1:
  1941                           	opt stack 0
  1942  000015                     bcd_2_dec@bcd:
  1943                           	opt stack 0
  1944  000015                     ___ftpack@sign:
  1945                           	opt stack 0
  1946  000015                     get_full_ADC@result:
  1947                           	opt stack 0
  1948  000015                     ___wmul@product:
  1949                           	opt stack 0
  1950  000015                     ___lwdiv@quotient:
  1951                           	opt stack 0
  1952  000015                     strcpy@cp:
  1953                           	opt stack 0
  1954  000015                     strlen@cp:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x14
  1958  000015                     	ds	1
  1959  000016                     ??___ftpack:
  1960  000016                     I2C_Write_Address_Read_One_Byte@Device:
  1961                           	opt stack 0
  1962  000016                     DS1621_Init@Device:
  1963                           	opt stack 0
  1964  000016                     DS1621_Read_Temp@Cmd:
  1965                           	opt stack 0
  1966  000016                     setAddrWindow@y1:
  1967                           	opt stack 0
  1968                           
  1969                           ; 1 bytes @ 0x15
  1970  000016                     	ds	1
  1971  000017                     DS1621_Read_Temp@Data_Ret:
  1972                           	opt stack 0
  1973  000017                     DS3231_Init@Address_7:
  1974                           	opt stack 0
  1975  000017                     setAddrWindow@x0:
  1976                           	opt stack 0
  1977  000017                     ___lwdiv@counter:
  1978                           	opt stack 0
  1979  000017                     delay_ms@ms:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0x16
  1983  000017                     	ds	1
  1984  000018                     ?___lwmod:
  1985                           	opt stack 0
  1986  000018                     DS1621_Read_Temp@Device:
  1987                           	opt stack 0
  1988  000018                     DS3231_Init@Address_E:
  1989                           	opt stack 0
  1990  000018                     drawPixel@y:
  1991                           	opt stack 0
  1992  000018                     drawFastVLine@y:
  1993                           	opt stack 0
  1994  000018                     fillRectangle@y:
  1995                           	opt stack 0
  1996  000018                     ___lwmod@dividend:
  1997                           	opt stack 0
  1998                           
  1999                           ; 2 bytes @ 0x17
  2000  000018                     	ds	1
  2001  000019                     ??_delay_ms:
  2002  000019                     ?___awtoft:
  2003                           	opt stack 0
  2004  000019                     ?___lbtoft:
  2005                           	opt stack 0
  2006  000019                     DS3231_Init@control_E:
  2007                           	opt stack 0
  2008  000019                     drawFastVLine@h:
  2009                           	opt stack 0
  2010  000019                     fillRectangle@w:
  2011                           	opt stack 0
  2012  000019                     drawPixel@color:
  2013                           	opt stack 0
  2014  000019                     ___awtoft@c:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x18
  2018  000019                     	ds	1
  2019  00001A                     DS3231_Init@Device:
  2020                           	opt stack 0
  2021  00001A                     fillRectangle@h:
  2022                           	opt stack 0
  2023  00001A                     ___fttol@sign1:
  2024                           	opt stack 0
  2025  00001A                     drawFastVLine@color:
  2026                           	opt stack 0
  2027  00001A                     ___lwmod@divisor:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x19
  2031  00001A                     	ds	1
  2032  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  2033                           	opt stack 0
  2034  00001B                     drawPixel@x:
  2035                           	opt stack 0
  2036  00001B                     delay_ms@count:
  2037                           	opt stack 0
  2038  00001B                     fillRectangle@color:
  2039                           	opt stack 0
  2040  00001B                     ___fttol@lval:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0x1A
  2044  00001B                     	ds	1
  2045  00001C                     ??_drawFastVLine:
  2046  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2047                           	opt stack 0
  2048  00001C                     ___awtoft@sign:
  2049                           	opt stack 0
  2050  00001C                     ___lbtoft@c:
  2051                           	opt stack 0
  2052  00001C                     ___lwmod@counter:
  2053                           	opt stack 0
  2054  00001C                     drawCircle@x0:
  2055                           	opt stack 0
  2056                           
  2057                           ; 2 bytes @ 0x1B
  2058  00001C                     	ds	1
  2059  00001D                     ??_fillRectangle:
  2060  00001D                     ?_printf:
  2061                           	opt stack 0
  2062  00001D                     ?___ftmul:
  2063                           	opt stack 0
  2064  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2065                           	opt stack 0
  2066  00001D                     printf@f:
  2067                           	opt stack 0
  2068  00001D                     ___ftmul@f1:
  2069                           	opt stack 0
  2070                           
  2071                           ; 3 bytes @ 0x1C
  2072  00001D                     	ds	1
  2073  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2074                           	opt stack 0
  2075  00001E                     drawCircle@y0:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x1D
  2079  00001E                     	ds	1
  2080  00001F                     DS3231_Turn_Off_Alarm@Device:
  2081                           	opt stack 0
  2082  00001F                     ___fttol@exp1:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0x1E
  2086  00001F                     	ds	1
  2087  000020                     ?___awdiv:
  2088                           	opt stack 0
  2089  000020                     drawFastVLine@hi:
  2090                           	opt stack 0
  2091  000020                     drawCircle@r:
  2092                           	opt stack 0
  2093  000020                     ___awdiv@dividend:
  2094                           	opt stack 0
  2095  000020                     ___ftmul@f2:
  2096                           	opt stack 0
  2097                           
  2098                           ; 3 bytes @ 0x1F
  2099  000020                     	ds	1
  2100  000021                     drawFastVLine@lo:
  2101                           	opt stack 0
  2102  000021                     fillRectangle@hi:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0x20
  2106  000021                     	ds	1
  2107  000022                     drawFastVLine@x:
  2108                           	opt stack 0
  2109  000022                     fillRectangle@lo:
  2110                           	opt stack 0
  2111  000022                     drawCircle@color:
  2112                           	opt stack 0
  2113  000022                     ___awdiv@divisor:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x21
  2117  000022                     	ds	1
  2118  000023                     ??___ftmul:
  2119  000023                     fillRect@y:
  2120                           	opt stack 0
  2121  000023                     fillRectangle@x:
  2122                           	opt stack 0
  2123                           
  2124                           ; 1 bytes @ 0x22
  2125  000023                     	ds	1
  2126  000024                     ??_drawCircle:
  2127  000024                     fillRect@w:
  2128                           	opt stack 0
  2129  000024                     ___awdiv@counter:
  2130                           	opt stack 0
  2131  000024                     fillScreen@color:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0x23
  2135  000024                     	ds	1
  2136  000025                     fillRect@h:
  2137                           	opt stack 0
  2138  000025                     ___awdiv@sign:
  2139                           	opt stack 0
  2140                           
  2141                           ; 1 bytes @ 0x24
  2142  000025                     	ds	1
  2143  000026                     ___ftmul@exp:
  2144                           	opt stack 0
  2145  000026                     fillRect@color:
  2146                           	opt stack 0
  2147  000026                     drawCircle@ddF_x:
  2148                           	opt stack 0
  2149  000026                     ___awdiv@quotient:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x25
  2153  000026                     	ds	1
  2154  000027                     ___ftmul@f3_as_product:
  2155                           	opt stack 0
  2156                           
  2157                           ; 3 bytes @ 0x26
  2158  000027                     	ds	1
  2159  000028                     ??_fillRect:
  2160  000028                     ?_get_RPM:
  2161                           	opt stack 0
  2162  000028                     ?_get_duty_cycle:
  2163  000028                     ?___awmod:
  2164                           	opt stack 0
  2165  000028                     get_duty_cycle@temp:
  2166                           	opt stack 0
  2167  000028                     Set_DC_RGB@duty_cycle:
  2168                           	opt stack 0
  2169  000028                     Set_RPM_RGB@rpm:
  2170                           	opt stack 0
  2171  000028                     drawCircle@ddF_y:
  2172                           	opt stack 0
  2173  000028                     ___awmod@dividend:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x27
  2177  000028                     	ds	2
  2178  00002A                     ___ftmul@cntr:
  2179                           	opt stack 0
  2180  00002A                     get_duty_cycle@set_temp:
  2181                           	opt stack 0
  2182  00002A                     get_RPM@RPS:
  2183                           	opt stack 0
  2184  00002A                     drawCircle@f:
  2185                           	opt stack 0
  2186  00002A                     ___awmod@divisor:
  2187                           	opt stack 0
  2188  00002A                     Set_RPM_RGB@temp:
  2189                           	opt stack 0
  2190                           
  2191                           ; 14 bytes @ 0x29
  2192  00002A                     	ds	1
  2193  00002B                     ??_printf:
  2194  00002B                     fillRect@x:
  2195                           	opt stack 0
  2196  00002B                     ___ftmul@sign:
  2197                           	opt stack 0
  2198                           
  2199                           ; 1 bytes @ 0x2A
  2200  00002B                     	ds	1
  2201  00002C                     ??_get_duty_cycle:
  2202  00002C                     ?___ftdiv:
  2203                           	opt stack 0
  2204  00002C                     ___awmod@counter:
  2205                           	opt stack 0
  2206  00002C                     fillRect@i:
  2207                           	opt stack 0
  2208  00002C                     drawCircle@x:
  2209                           	opt stack 0
  2210  00002C                     ___ftdiv@f1:
  2211                           	opt stack 0
  2212                           
  2213                           ; 3 bytes @ 0x2B
  2214  00002C                     	ds	1
  2215  00002D                     ___awmod@sign:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x2C
  2219  00002D                     	ds	1
  2220  00002E                     ?_dec_2_bcd:
  2221                           	opt stack 0
  2222  00002E                     drawChar@y:
  2223                           	opt stack 0
  2224  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2225                           	opt stack 0
  2226  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2227                           	opt stack 0
  2228  00002E                     get_duty_cycle@diff:
  2229                           	opt stack 0
  2230  00002E                     drawCircle@y:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x2D
  2234  00002E                     	ds	1
  2235  00002F                     drawChar@c:
  2236                           	opt stack 0
  2237  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2238                           	opt stack 0
  2239  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2240                           	opt stack 0
  2241  00002F                     printf@idx:
  2242                           	opt stack 0
  2243  00002F                     ___ftdiv@f2:
  2244                           	opt stack 0
  2245                           
  2246                           ; 3 bytes @ 0x2E
  2247  00002F                     	ds	1
  2248  000030                     ??_dec_2_bcd:
  2249  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2250                           	opt stack 0
  2251  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2252                           	opt stack 0
  2253  000030                     drawChar@color:
  2254                           	opt stack 0
  2255  000030                     printf@ap:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x2F
  2259  000030                     	ds	1
  2260  000031                     
  2261                           ; 0 bytes @ 0x30
  2262  000031                     	ds	1
  2263  000032                     ??___ftdiv:
  2264  000032                     printf@prec:
  2265                           	opt stack 0
  2266  000032                     drawChar@bg:
  2267                           	opt stack 0
  2268  000032                     dec_2_bcd@bcd:
  2269                           	opt stack 0
  2270                           
  2271                           ; 2 bytes @ 0x31
  2272  000032                     	ds	1
  2273  000033                     printf@val:
  2274                           	opt stack 0
  2275                           
  2276                           ; 2 bytes @ 0x32
  2277  000033                     	ds	1
  2278  000034                     drawChar@size:
  2279                           	opt stack 0
  2280  000034                     dec_2_bcd@dec:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x33
  2284  000034                     	ds	1
  2285  000035                     DS3231_Write_Time@Device:
  2286                           	opt stack 0
  2287  000035                     DS3231_Write_Alarm_Time@Device:
  2288                           	opt stack 0
  2289  000035                     drawChar@line:
  2290                           	opt stack 0
  2291  000035                     printf@flag:
  2292                           	opt stack 0
  2293  000035                     ___ftdiv@cntr:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x34
  2297  000035                     	ds	1
  2298  000036                     DS3231_Write_Time@Address:
  2299                           	opt stack 0
  2300  000036                     DS3231_Write_Alarm_Time@Address:
  2301                           	opt stack 0
  2302  000036                     drawChar@x:
  2303                           	opt stack 0
  2304  000036                     printf@width:
  2305                           	opt stack 0
  2306  000036                     ___ftdiv@f3:
  2307                           	opt stack 0
  2308                           
  2309                           ; 3 bytes @ 0x35
  2310  000036                     	ds	1
  2311  000037                     drawChar@j:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x36
  2315  000037                     	ds	1
  2316  000038                     drawChar@i:
  2317                           	opt stack 0
  2318  000038                     printf@c:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x37
  2322  000038                     	ds	1
  2323  000039                     drawtext@y:
  2324                           	opt stack 0
  2325  000039                     ___ftdiv@exp:
  2326                           	opt stack 0
  2327                           
  2328                           ; 1 bytes @ 0x38
  2329  000039                     	ds	1
  2330  00003A                     ___ftdiv@sign:
  2331                           	opt stack 0
  2332  00003A                     drawtext@_text:
  2333                           	opt stack 0
  2334  00003A                     check_for_button_input@j:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x39
  2338  00003A                     	ds	1
  2339  00003B                     ??_do_update_pwm:
  2340  00003B                     ?_read_volt:
  2341                           
  2342                           ; 3 bytes @ 0x3A
  2343  00003B                     	ds	1
  2344  00003C                     drawtext@color:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x3B
  2348  00003C                     	ds	2
  2349  00003E                     Monitor_Heater@rpm:
  2350                           	opt stack 0
  2351  00003E                     drawtext@bg:
  2352                           	opt stack 0
  2353  00003E                     read_volt@volt:
  2354                           	opt stack 0
  2355                           
  2356                           ; 3 bytes @ 0x3D
  2357  00003E                     	ds	2
  2358  000040                     drawtext@size:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x3F
  2362  000040                     	ds	1
  2363  000041                     ??_drawtext:
  2364  000041                     read_volt@nStep:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x40
  2368  000041                     	ds	2
  2369  000043                     tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           postdec1	equ	0xFE5
  2376                           fsr1l	equ	0xFE1
  2377                           
  2378                           ; 0 bytes @ 0x42
  2379 ;;
  2380 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2381 ;;
  2382 ;; *************** function _main *****************
  2383 ;; Defined at:
  2384 ;;		line 120 in file "Main.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;		None               void
  2391 ;; Registers used:
  2392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;Total ram usage:        2 bytes
  2403 ;; Hardware stack levels required when called:   13
  2404 ;; This function calls:
  2405 ;;		_DS1621_Read_Temp
  2406 ;;		_DS3231_Read_Alarm_Time
  2407 ;;		_DS3231_Read_Time
  2408 ;;		_DS3231_Turn_Off_Alarm
  2409 ;;		_Do_Beep_Bad
  2410 ;;		_Do_Beep_Good
  2411 ;;		_Do_Init
  2412 ;;		_Do_Setup_Alarm_Time
  2413 ;;		_Do_Setup_Heater_Temp
  2414 ;;		_Do_Setup_Time
  2415 ;;		_Initialize_Screen
  2416 ;;		_Monitor_Heater
  2417 ;;		_Test_Alarm
  2418 ;;		_Toggle_Heater
  2419 ;;		_Update_Screen
  2420 ;;		___awdiv
  2421 ;;		___wmul
  2422 ;;		_check_for_button_input
  2423 ;;		_get_RPM
  2424 ;;		_printf
  2425 ;;		_read_volt
  2426 ;; This function is called by:
  2427 ;;		Startup code after reset
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text0
  2432  000D2C                     __ptext0:
  2433                           	opt stack 0
  2434  000D2C                     _main:
  2435                           	opt stack 18
  2436                           
  2437                           ;Main.c: 122: Do_Init();
  2438                           
  2439                           ;incstack = 0
  2440  000D2C  ECA8  F017         	call	_Do_Init	;wreg free
  2441                           
  2442                           ;Main.c: 123: Initialize_Screen();
  2443  000D30  EC29  F003         	call	_Initialize_Screen	;wreg free
  2444                           
  2445                           ;Main.c: 124: DS3231_Turn_Off_Alarm();
  2446  000D34  ECD7  F018         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2447                           
  2448                           ;Main.c: 125: DS3231_Read_Alarm_Time();
  2449  000D38  EC75  F019         	call	_DS3231_Read_Alarm_Time	;wreg free
  2450                           
  2451                           ;Main.c: 127: tempSecond = 0xff;
  2452  000D3C  0100               	movlb	0	; () banked
  2453  000D3E  6980               	setf	_tempSecond& (0+255),b
  2454  000D40  D000               	goto	l9346
  2455  000D42                     l9346:
  2456                           
  2457                           ;Main.c: 129: {
  2458                           ;Main.c: 130: DS3231_Read_Time();
  2459  000D42  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  2460                           
  2461                           ;Main.c: 132: if(tempSecond != second)
  2462  000D46  5063               	movf	_second,w,c
  2463  000D48  0100               	movlb	0	; () banked
  2464  000D4A  1980               	xorwf	_tempSecond& (0+255),w,b
  2465  000D4C  B4D8               	btfsc	status,2,c
  2466  000D4E  D09F               	goto	l9376
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;Main.c: 133: {
  2470                           ;Main.c: 134: tempSecond = second;
  2471  000D50  C063  F080         	movff	_second,_tempSecond
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;Main.c: 135: rpm = get_RPM();
  2475  000D54  EC2F  F01A         	call	_get_RPM	;wreg free
  2476  000D58  C028  F04B         	movff	?_get_RPM,_rpm
  2477  000D5C  C029  F04C         	movff	?_get_RPM+1,_rpm+1
  2478                           
  2479                           ;Main.c: 136: volt = read_volt();
  2480  000D60  EC30  F018         	call	_read_volt	;wreg free
  2481  000D64  C03B  F0E7         	movff	?_read_volt,_volt
  2482  000D68  C03C  F0E8         	movff	?_read_volt+1,_volt+1
  2483  000D6C  C03D  F0E9         	movff	?_read_volt+2,_volt+2
  2484                           
  2485                           ;Main.c: 137: DS1621_tempC = DS1621_Read_Temp();
  2486  000D70  ECC9  F01A         	call	_DS1621_Read_Temp	;wreg free
  2487  000D74  C014  F043         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2488  000D78  C015  F044         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2489                           
  2490                           ;Main.c: 138: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tempC &
      +                           0x7f);
  2491  000D7C  AE43               	btfss	_DS1621_tempC,7,c
  2492  000D7E  D01D               	goto	l9360
  2493  000D80  C043  F156         	movff	_DS1621_tempC,??_main
  2494  000D84  C044  F157         	movff	_DS1621_tempC+1,??_main+1
  2495  000D88  0101               	movlb	1	; () banked
  2496  000D8A  1F56               	comf	??_main& (0+255),f,b
  2497  000D8C  1F57               	comf	(??_main+1)& (0+255),f,b
  2498  000D8E  4B56               	infsnz	??_main& (0+255),f,b
  2499  000D90  2B57               	incf	(??_main+1)& (0+255),f,b
  2500  000D92  0E80               	movlw	128
  2501  000D94  0101               	movlb	1	; () banked
  2502  000D96  2756               	addwf	??_main& (0+255),f,b
  2503  000D98  0E00               	movlw	0
  2504  000D9A  2357               	addwfc	(??_main+1)& (0+255),f,b
  2505  000D9C  0E7F               	movlw	127
  2506  000D9E  0101               	movlb	1	; () banked
  2507  000DA0  1756               	andwf	??_main& (0+255),f,b
  2508  000DA2  0E00               	movlw	0
  2509  000DA4  1757               	andwf	(??_main+1)& (0+255),f,b
  2510  000DA6  0101               	movlb	1	; () banked
  2511  000DA8  1F56               	comf	??_main& (0+255),f,b
  2512  000DAA  1F57               	comf	(??_main+1)& (0+255),f,b
  2513  000DAC  4B56               	infsnz	??_main& (0+255),f,b
  2514  000DAE  2B57               	incf	(??_main+1)& (0+255),f,b
  2515  000DB0  C156  F043         	movff	??_main,_DS1621_tempC
  2516  000DB4  C157  F044         	movff	??_main+1,_DS1621_tempC+1
  2517  000DB8  D000               	goto	l9360
  2518  000DBA                     l9360:
  2519                           
  2520                           ;Main.c: 139: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2521  000DBA  C043  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2522  000DBE  C044  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2523  000DC2  0E00               	movlw	0
  2524  000DC4  6E14               	movwf	___wmul@multiplicand+1,c
  2525  000DC6  0E09               	movlw	9
  2526  000DC8  6E13               	movwf	___wmul@multiplicand,c
  2527  000DCA  EC75  F01B         	call	___wmul	;wreg free
  2528  000DCE  C011  F020         	movff	?___wmul,___awdiv@dividend
  2529  000DD2  C012  F021         	movff	?___wmul+1,___awdiv@dividend+1
  2530  000DD6  0E00               	movlw	0
  2531  000DD8  6E23               	movwf	___awdiv@divisor+1,c
  2532  000DDA  0E05               	movlw	5
  2533  000DDC  6E22               	movwf	___awdiv@divisor,c
  2534  000DDE  EC26  F014         	call	___awdiv	;wreg free
  2535  000DE2  0E20               	movlw	32
  2536  000DE4  2420               	addwf	?___awdiv,w,c
  2537  000DE6  6E45               	movwf	_DS1621_tempF,c
  2538  000DE8  0E00               	movlw	0
  2539  000DEA  2021               	addwfc	?___awdiv+1,w,c
  2540  000DEC  6E46               	movwf	_DS1621_tempF+1,c
  2541                           
  2542                           ;Main.c: 141: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  2543  000DEE  0E78               	movlw	low STR_3
  2544  000DF0  6E1D               	movwf	printf@f,c
  2545  000DF2  0EFE               	movlw	high STR_3
  2546  000DF4  6E1E               	movwf	printf@f+1,c
  2547  000DF6  C05F  F01F         	movff	_hour,?_printf+2
  2548  000DFA  6A20               	clrf	?_printf+3,c
  2549  000DFC  C060  F021         	movff	_minute,?_printf+4
  2550  000E00  6A22               	clrf	?_printf+5,c
  2551  000E02  C063  F023         	movff	_second,?_printf+6
  2552  000E06  6A24               	clrf	?_printf+7,c
  2553  000E08  C061  F025         	movff	_month,?_printf+8
  2554  000E0C  6A26               	clrf	?_printf+9,c
  2555  000E0E  C05C  F027         	movff	_day,?_printf+10
  2556  000E12  6A28               	clrf	?_printf+11,c
  2557  000E14  C06E  F029         	movff	_year,?_printf+12
  2558  000E18  6A2A               	clrf	?_printf+13,c
  2559  000E1A  ECE9  F004         	call	_printf	;wreg free
  2560                           
  2561                           ;Main.c: 142: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2562  000E1E  0EC4               	movlw	low STR_4
  2563  000E20  6E1D               	movwf	printf@f,c
  2564  000E22  0EFE               	movlw	high STR_4
  2565  000E24  6E1E               	movwf	printf@f+1,c
  2566  000E26  C043  F01F         	movff	_DS1621_tempC,?_printf+2
  2567  000E2A  C044  F020         	movff	_DS1621_tempC+1,?_printf+3
  2568  000E2E  C045  F021         	movff	_DS1621_tempF,?_printf+4
  2569  000E32  C046  F022         	movff	_DS1621_tempF+1,?_printf+5
  2570  000E36  ECE9  F004         	call	_printf	;wreg free
  2571                           
  2572                           ;Main.c: 143: printf ("alarm = %d Heater = %d ", PORTAbits.RA5, HEATER);
  2573  000E3A  0E96               	movlw	low STR_5
  2574  000E3C  6E1D               	movwf	printf@f,c
  2575  000E3E  0EFE               	movlw	high STR_5
  2576  000E40  6E1E               	movwf	printf@f+1,c
  2577  000E42  AA80               	btfss	3968,5,c	;volatile
  2578  000E44  D004               	goto	u6910
  2579  000E46  0101               	movlb	1	; () banked
  2580  000E48  6B56               	clrf	??_main& (0+255),b
  2581  000E4A  2B56               	incf	??_main& (0+255),f,b
  2582  000E4C  D002               	goto	u6918
  2583  000E4E                     u6910:
  2584  000E4E  0101               	movlb	1	; () banked
  2585  000E50  6B56               	clrf	??_main& (0+255),b
  2586  000E52                     u6918:
  2587  000E52  0101               	movlb	1	; () banked
  2588  000E54  5156               	movf	??_main& (0+255),w,b
  2589  000E56  6E1F               	movwf	?_printf+2,c
  2590  000E58  6A20               	clrf	?_printf+3,c
  2591  000E5A  C04F  F021         	movff	_HEATER,?_printf+4
  2592  000E5E  6A22               	clrf	?_printf+5,c
  2593  000E60  ECE9  F004         	call	_printf	;wreg free
  2594                           
  2595                           ;Main.c: 144: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2596  000E64  0EED               	movlw	low STR_6
  2597  000E66  6E1D               	movwf	printf@f,c
  2598  000E68  0EFE               	movlw	high STR_6
  2599  000E6A  6E1E               	movwf	printf@f+1,c
  2600  000E6C  C04B  F01F         	movff	_rpm,?_printf+2
  2601  000E70  C04C  F020         	movff	_rpm+1,?_printf+3
  2602  000E74  C049  F021         	movff	_duty_cycle,?_printf+4
  2603  000E78  C04A  F022         	movff	_duty_cycle+1,?_printf+5
  2604  000E7C  ECE9  F004         	call	_printf	;wreg free
  2605                           
  2606                           ;Main.c: 146: Monitor_Heater();
  2607  000E80  EC5B  F018         	call	_Monitor_Heater	;wreg free
  2608                           
  2609                           ;Main.c: 147: Test_Alarm();
  2610  000E84  EC77  F01D         	call	_Test_Alarm	;wreg free
  2611                           
  2612                           ;Main.c: 148: Update_Screen();
  2613  000E88  EC0E  F000         	call	_Update_Screen	;wreg free
  2614  000E8C  D000               	goto	l9376
  2615  000E8E                     l9376:
  2616                           
  2617                           ;Main.c: 149: }
  2618                           ;Main.c: 151: if (check_for_button_input() == 1)
  2619  000E8E  EC58  F016         	call	_check_for_button_input	;wreg free
  2620  000E92  06E8               	decf	wreg,f,c
  2621  000E94  A4D8               	btfss	status,2,c
  2622  000E96  D02C               	goto	l9402
  2623                           
  2624                           ;Main.c: 152: {
  2625                           ;Main.c: 154: nec_ok = 0;
  2626  000E98  0E00               	movlw	0
  2627  000E9A  0100               	movlb	0	; () banked
  2628  000E9C  6FF5               	movwf	(_nec_ok+1)& (0+255),b
  2629  000E9E  0E00               	movlw	0
  2630  000EA0  6FF4               	movwf	_nec_ok& (0+255),b
  2631                           
  2632                           ;Main.c: 155: switch (found)
  2633  000EA2  D017               	goto	l9400
  2634  000EA4                     l9380:
  2635                           
  2636                           ;Main.c: 158: Do_Beep_Good();
  2637  000EA4  EC2C  F01D         	call	_Do_Beep_Good	;wreg free
  2638                           
  2639                           ;Main.c: 159: Do_Setup_Time();
  2640  000EA8  ECF1  F011         	call	_Do_Setup_Time	;wreg free
  2641                           
  2642                           ;Main.c: 160: break;
  2643  000EAC  D021               	goto	l9402
  2644  000EAE                     l9384:
  2645                           
  2646                           ;Main.c: 163: Do_Beep_Good();
  2647  000EAE  EC2C  F01D         	call	_Do_Beep_Good	;wreg free
  2648                           
  2649                           ;Main.c: 164: Do_Setup_Alarm_Time();
  2650  000EB2  EC1A  F013         	call	_Do_Setup_Alarm_Time	;wreg free
  2651                           
  2652                           ;Main.c: 165: break;
  2653  000EB6  D01C               	goto	l9402
  2654  000EB8                     l9388:
  2655                           
  2656                           ;Main.c: 168: Do_Beep_Good();
  2657  000EB8  EC2C  F01D         	call	_Do_Beep_Good	;wreg free
  2658                           
  2659                           ;Main.c: 169: Do_Setup_Heater_Temp();
  2660  000EBC  EC71  F014         	call	_Do_Setup_Heater_Temp	;wreg free
  2661                           
  2662                           ;Main.c: 170: break;
  2663  000EC0  D017               	goto	l9402
  2664  000EC2                     l9392:
  2665                           
  2666                           ;Main.c: 173: Do_Beep_Good();
  2667  000EC2  EC2C  F01D         	call	_Do_Beep_Good	;wreg free
  2668                           
  2669                           ;Main.c: 174: Toggle_Heater();
  2670  000EC6  EC88  F01C         	call	_Toggle_Heater	;wreg free
  2671                           
  2672                           ;Main.c: 175: break;
  2673  000ECA  D012               	goto	l9402
  2674  000ECC                     l9396:
  2675                           
  2676                           ;Main.c: 178: Do_Beep_Bad();
  2677  000ECC  EC33  F01D         	call	_Do_Beep_Bad	;wreg free
  2678                           
  2679                           ;Main.c: 180: }
  2680                           
  2681                           ;Main.c: 179: break;
  2682  000ED0  D00F               	goto	l9402
  2683  000ED2                     l9400:
  2684  000ED2  505E               	movf	_found,w,c
  2685                           
  2686                           ; Switch size 1, requested type "space"
  2687                           ; Number of cases is 4, Range of values is 0 to 5
  2688                           ; switch strategies available:
  2689                           ; Name         Instructions Cycles
  2690                           ; simple_byte           13     7 (average)
  2691                           ;	Chosen strategy is simple_byte
  2692  000ED4  0A00               	xorlw	0	; case 0
  2693  000ED6  B4D8               	btfsc	status,2,c
  2694  000ED8  D7E5               	goto	l9380
  2695  000EDA  0A01               	xorlw	1	; case 1
  2696  000EDC  B4D8               	btfsc	status,2,c
  2697  000EDE  D7E7               	goto	l9384
  2698  000EE0  0A03               	xorlw	3	; case 2
  2699  000EE2  B4D8               	btfsc	status,2,c
  2700  000EE4  D7E9               	goto	l9388
  2701  000EE6  0A07               	xorlw	7	; case 5
  2702  000EE8  B4D8               	btfsc	status,2,c
  2703  000EEA  D7EB               	goto	l9392
  2704  000EEC  D7EF               	goto	l9396
  2705  000EEE  D000               	goto	l9402
  2706  000EF0                     l9402:
  2707                           
  2708                           ;Main.c: 181: }
  2709                           ;Main.c: 185: if (INT1_flag == 1)
  2710  000EF0  0450               	decf	_INT1_flag,w,c
  2711  000EF2  A4D8               	btfss	status,2,c
  2712  000EF4  D726               	goto	l9346
  2713                           
  2714                           ;Main.c: 186: {
  2715                           ;Main.c: 187: INT1_flag = 0;
  2716  000EF6  0E00               	movlw	0
  2717  000EF8  6E50               	movwf	_INT1_flag,c
  2718  000EFA  D723               	goto	l9346
  2719  000EFC  EF0C  F000         	goto	start
  2720  000F00                     __end_of_main:
  2721                           	opt stack 0
  2722                           tblptru	equ	0xFF8
  2723                           tblptrh	equ	0xFF7
  2724                           tblptrl	equ	0xFF6
  2725                           tablat	equ	0xFF5
  2726                           postinc0	equ	0xFEE
  2727                           wreg	equ	0xFE8
  2728                           postdec1	equ	0xFE5
  2729                           fsr1l	equ	0xFE1
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _read_volt *****************
  2733 ;; Defined at:
  2734 ;;		line 153 in file "utils.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  volt            3   61[COMRAM] PTR unsigned char 
  2739 ;;  nStep           2   64[COMRAM] int 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  3   58[COMRAM] float 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2749 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2750 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;Total ram usage:        8 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    5
  2756 ;; This function calls:
  2757 ;;		___awtoft
  2758 ;;		___ftdiv
  2759 ;;		___wmul
  2760 ;;		_get_full_ADC
  2761 ;; This function is called by:
  2762 ;;		_main
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text1
  2767  003060                     __ptext1:
  2768                           	opt stack 0
  2769  003060                     _read_volt:
  2770                           	opt stack 25
  2771                           
  2772                           ;utils.c: 156: int nStep = get_full_ADC();
  2773                           
  2774                           ;incstack = 0
  2775  003060  EC89  F01B         	call	_get_full_ADC	;wreg free
  2776  003064  C011  F041         	movff	?_get_full_ADC,read_volt@nStep
  2777  003068  C012  F042         	movff	?_get_full_ADC+1,read_volt@nStep+1
  2778                           
  2779                           ;utils.c: 157: double volt = nStep * 5 /1024.0;
  2780  00306C  C041  F011         	movff	read_volt@nStep,___wmul@multiplier
  2781  003070  C042  F012         	movff	read_volt@nStep+1,___wmul@multiplier+1
  2782  003074  0E00               	movlw	0
  2783  003076  6E14               	movwf	___wmul@multiplicand+1,c
  2784  003078  0E05               	movlw	5
  2785  00307A  6E13               	movwf	___wmul@multiplicand,c
  2786  00307C  EC75  F01B         	call	___wmul	;wreg free
  2787  003080  C011  F019         	movff	?___wmul,___awtoft@c
  2788  003084  C012  F01A         	movff	?___wmul+1,___awtoft@c+1
  2789  003088  ECAB  F01A         	call	___awtoft	;wreg free
  2790  00308C  C019  F02C         	movff	?___awtoft,___ftdiv@f1
  2791  003090  C01A  F02D         	movff	?___awtoft+1,___ftdiv@f1+1
  2792  003094  C01B  F02E         	movff	?___awtoft+2,___ftdiv@f1+2
  2793  003098  0E00               	movlw	0
  2794  00309A  6E2F               	movwf	___ftdiv@f2,c
  2795  00309C  0E80               	movlw	128
  2796  00309E  6E30               	movwf	___ftdiv@f2+1,c
  2797  0030A0  0E44               	movlw	68
  2798  0030A2  6E31               	movwf	___ftdiv@f2+2,c
  2799  0030A4  ECAA  F010         	call	___ftdiv	;wreg free
  2800  0030A8  C02C  F03E         	movff	?___ftdiv,read_volt@volt
  2801  0030AC  C02D  F03F         	movff	?___ftdiv+1,read_volt@volt+1
  2802  0030B0  C02E  F040         	movff	?___ftdiv+2,read_volt@volt+2
  2803  0030B4  0012               	return		;funcret
  2804  0030B6                     __end_of_read_volt:
  2805                           	opt stack 0
  2806                           tblptru	equ	0xFF8
  2807                           tblptrh	equ	0xFF7
  2808                           tblptrl	equ	0xFF6
  2809                           tablat	equ	0xFF5
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           postdec1	equ	0xFE5
  2813                           fsr1l	equ	0xFE1
  2814                           status	equ	0xFD8
  2815                           
  2816 ;; *************** function _get_full_ADC *****************
  2817 ;; Defined at:
  2818 ;;		line 160 in file "utils.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;		None
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  result          2   20[COMRAM] unsigned int 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  2   16[COMRAM] unsigned int 
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2832 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;Total ram usage:        6 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    3
  2839 ;; This function calls:
  2840 ;;		Nothing
  2841 ;; This function is called by:
  2842 ;;		_read_volt
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text2
  2847  003712                     __ptext2:
  2848                           	opt stack 0
  2849  003712                     _get_full_ADC:
  2850                           	opt stack 26
  2851                           
  2852                           ;utils.c: 163: unsigned int result;
  2853                           ;utils.c: 164: ADCON0bits.GO=1;
  2854                           
  2855                           ;incstack = 0
  2856  003712  82C2               	bsf	4034,1,c	;volatile
  2857                           
  2858                           ;utils.c: 165: while(ADCON0bits.DONE==1);
  2859  003714  D000               	goto	l1347
  2860  003716                     l1347:
  2861  003716  B2C2               	btfsc	4034,1,c	;volatile
  2862  003718  D7FE               	goto	l1347
  2863                           
  2864                           ;utils.c: 166: result = (ADRESH * 0x100) + ADRESL;
  2865  00371A  50C4               	movf	4036,w,c	;volatile
  2866  00371C  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  2867  00371E  6A13               	clrf	??_get_full_ADC& (0+255),c
  2868  003720  50C3               	movf	4035,w,c	;volatile
  2869  003722  2413               	addwf	??_get_full_ADC,w,c
  2870  003724  6E15               	movwf	get_full_ADC@result,c
  2871  003726  0E00               	movlw	0
  2872  003728  2014               	addwfc	??_get_full_ADC+1,w,c
  2873  00372A  6E16               	movwf	get_full_ADC@result+1,c
  2874                           
  2875                           ;utils.c: 168: return result;
  2876  00372C  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  2877  003730  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  2878  003734  D000               	goto	l1350
  2879  003736                     l1350:
  2880  003736  0012               	return		;funcret
  2881  003738                     __end_of_get_full_ADC:
  2882                           	opt stack 0
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postdec1	equ	0xFE5
  2890                           fsr1l	equ	0xFE1
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function ___awtoft *****************
  2894 ;; Defined at:
  2895 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;  c               2   24[COMRAM] int 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  sign            1   27[COMRAM] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  3   24[COMRAM] float 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2909 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;Total ram usage:        4 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    4
  2916 ;; This function calls:
  2917 ;;		___ftpack
  2918 ;; This function is called by:
  2919 ;;		_read_volt
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text3
  2924  003556                     __ptext3:
  2925                           	opt stack 0
  2926  003556                     ___awtoft:
  2927                           	opt stack 25
  2928                           
  2929                           ;incstack = 0
  2930  003556  0E00               	movlw	0
  2931  003558  6E1C               	movwf	___awtoft@sign,c
  2932  00355A  AE1A               	btfss	___awtoft@c+1,7,c
  2933  00355C  D007               	goto	l8924
  2934  00355E  6C19               	negf	___awtoft@c,c
  2935  003560  1E1A               	comf	___awtoft@c+1,f,c
  2936  003562  B0D8               	btfsc	status,0,c
  2937  003564  2A1A               	incf	___awtoft@c+1,f,c
  2938  003566  0E01               	movlw	1
  2939  003568  6E1C               	movwf	___awtoft@sign,c
  2940  00356A  D000               	goto	l8924
  2941  00356C                     l8924:
  2942  00356C  C019  F011         	movff	___awtoft@c,___ftpack@arg
  2943  003570  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  2944  003574  6A13               	clrf	___ftpack@arg+2,c
  2945  003576  0E8E               	movlw	142
  2946  003578  6E14               	movwf	___ftpack@exp,c
  2947  00357A  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  2948  00357E  EC56  F012         	call	___ftpack	;wreg free
  2949  003582  C011  F019         	movff	?___ftpack,?___awtoft
  2950  003586  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  2951  00358A  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  2952  00358E  D000               	goto	l1676
  2953  003590                     l1676:
  2954  003590  0012               	return		;funcret
  2955  003592                     __end_of___awtoft:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           postdec1	equ	0xFE5
  2964                           fsr1l	equ	0xFE1
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _Update_Screen *****************
  2968 ;; Defined at:
  2969 ;;		line 77 in file "Main_Screen.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  neg_tempF       2    9[BANK1 ] int 
  2974 ;;  neg_DS1621_t    1   11[BANK1 ] unsigned char 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  2  379[None  ] int 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Totals:         0       2       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;Total ram usage:        7 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:   10
  2991 ;; This function calls:
  2992 ;;		___awdiv
  2993 ;;		___awmod
  2994 ;;		___fttol
  2995 ;;		_drawtext
  2996 ;;		_strcpy
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text4
  3003  00001C                     __ptext4:
  3004                           	opt stack 0
  3005  00001C                     _Update_Screen:
  3006                           	opt stack 20
  3007                           
  3008                           ;Main_Screen.c: 79: if ((DS1621_tempC & 0x80) == 0x80)
  3009                           
  3010                           ;incstack = 0
  3011  00001C  AE43               	btfss	_DS1621_tempC,7,c
  3012  00001E  D020               	goto	l8996
  3013                           
  3014                           ;Main_Screen.c: 80: {
  3015                           ;Main_Screen.c: 81: tempC[0] = '-';
  3016  000020  0E2D               	movlw	45
  3017  000022  0100               	movlb	0	; () banked
  3018  000024  6FD9               	movwf	_tempC& (0+255),b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;Main_Screen.c: 82: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  3022  000026  5043               	movf	_DS1621_tempC,w,c
  3023  000028  0B7F               	andlw	127
  3024  00002A  0800               	sublw	0
  3025  00002C  0F80               	addlw	128
  3026  00002E  0101               	movlb	1	; () banked
  3027  000030  6F55               	movwf	Update_Screen@neg_DS1621_tempC& (0+255),b
  3028                           
  3029                           ; BSR set to: 1
  3030                           ;Main_Screen.c: 83: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  3031  000032  C155  F020         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  3032  000036  6A21               	clrf	___awdiv@dividend+1,c
  3033  000038  0E00               	movlw	0
  3034  00003A  6E23               	movwf	___awdiv@divisor+1,c
  3035  00003C  0E0A               	movlw	10
  3036  00003E  6E22               	movwf	___awdiv@divisor,c
  3037  000040  EC26  F014         	call	___awdiv	;wreg free
  3038  000044  5020               	movf	?___awdiv,w,c
  3039  000046  0F30               	addlw	48
  3040  000048  0100               	movlb	0	; () banked
  3041  00004A  6FDA               	movwf	(_tempC+1)& (0+255),b
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;Main_Screen.c: 84: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  3045  00004C  C155  F028         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  3046  000050  6A29               	clrf	___awmod@dividend+1,c
  3047  000052  0E00               	movlw	0
  3048  000054  6E2B               	movwf	___awmod@divisor+1,c
  3049  000056  0E0A               	movlw	10
  3050  000058  6E2A               	movwf	___awmod@divisor,c
  3051  00005A  EC17  F016         	call	___awmod	;wreg free
  3052  00005E  D01B               	goto	L1
  3053  000060                     l8996:
  3054                           
  3055                           ;Main_Screen.c: 86: else
  3056                           ;Main_Screen.c: 87: {
  3057                           ;Main_Screen.c: 88: tempC[0] = '+';
  3058  000060  0E2B               	movlw	43
  3059  000062  0100               	movlb	0	; () banked
  3060  000064  6FD9               	movwf	_tempC& (0+255),b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;Main_Screen.c: 89: tempC[1] = DS1621_tempC/10 + '0';
  3064  000066  C043  F020         	movff	_DS1621_tempC,___awdiv@dividend
  3065  00006A  C044  F021         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3066  00006E  0E00               	movlw	0
  3067  000070  6E23               	movwf	___awdiv@divisor+1,c
  3068  000072  0E0A               	movlw	10
  3069  000074  6E22               	movwf	___awdiv@divisor,c
  3070  000076  EC26  F014         	call	___awdiv	;wreg free
  3071  00007A  5020               	movf	?___awdiv,w,c
  3072  00007C  0F30               	addlw	48
  3073  00007E  0100               	movlb	0	; () banked
  3074  000080  6FDA               	movwf	(_tempC+1)& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;Main_Screen.c: 90: tempC[2] = DS1621_tempC%10 + '0';
  3078  000082  C043  F028         	movff	_DS1621_tempC,___awmod@dividend
  3079  000086  C044  F029         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3080  00008A  0E00               	movlw	0
  3081  00008C  6E2B               	movwf	___awmod@divisor+1,c
  3082  00008E  0E0A               	movlw	10
  3083  000090  6E2A               	movwf	___awmod@divisor,c
  3084  000092  EC17  F016         	call	___awmod	;wreg free
  3085  000096                     L1:
  3086  000096  5028               	movf	?___awmod,w,c
  3087  000098  0F30               	addlw	48
  3088  00009A  0100               	movlb	0	; () banked
  3089  00009C  6FDB               	movwf	(_tempC+2)& (0+255),b
  3090  00009E  D000               	goto	l9002
  3091  0000A0                     l9002:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;Main_Screen.c: 91: }
  3095                           ;Main_Screen.c: 93: if (DS1621_tempF < 0)
  3096  0000A0  AE46               	btfss	_DS1621_tempF+1,7,c
  3097  0000A2  D033               	goto	l9012
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;Main_Screen.c: 94: {
  3101                           ;Main_Screen.c: 95: tempF[0] = '-';
  3102  0000A4  0E2D               	movlw	45
  3103  0000A6  0100               	movlb	0	; () banked
  3104  0000A8  6FDD               	movwf	_tempF& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;Main_Screen.c: 96: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3108  0000AA  0E7F               	movlw	127
  3109  0000AC  1445               	andwf	_DS1621_tempF,w,c
  3110  0000AE  0100               	movlb	0	; () banked
  3111  0000B0  6FFD               	movwf	??_Update_Screen& (0+255),b
  3112  0000B2  0E00               	movlw	0
  3113  0000B4  1446               	andwf	_DS1621_tempF+1,w,c
  3114  0000B6  0100               	movlb	0	; () banked
  3115  0000B8  6FFE               	movwf	(??_Update_Screen+1)& (0+255),b
  3116  0000BA  0100               	movlb	0	; () banked
  3117  0000BC  1FFD               	comf	??_Update_Screen& (0+255),f,b
  3118  0000BE  1FFE               	comf	(??_Update_Screen+1)& (0+255),f,b
  3119  0000C0  4BFD               	infsnz	??_Update_Screen& (0+255),f,b
  3120  0000C2  2BFE               	incf	(??_Update_Screen+1)& (0+255),f,b
  3121  0000C4  0E80               	movlw	128
  3122  0000C6  0100               	movlb	0	; () banked
  3123  0000C8  25FD               	addwf	??_Update_Screen& (0+255),w,b
  3124  0000CA  0101               	movlb	1	; () banked
  3125  0000CC  6F53               	movwf	Update_Screen@neg_tempF& (0+255),b
  3126  0000CE  0E00               	movlw	0
  3127  0000D0  0100               	movlb	0	; () banked
  3128  0000D2  21FE               	addwfc	(??_Update_Screen+1)& (0+255),w,b
  3129  0000D4  0101               	movlb	1	; () banked
  3130  0000D6  6F54               	movwf	(Update_Screen@neg_tempF+1)& (0+255),b
  3131                           
  3132                           ; BSR set to: 1
  3133                           ;Main_Screen.c: 97: tempF[1] = neg_tempF/10 + '0';
  3134  0000D8  C153  F020         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3135  0000DC  C154  F021         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3136  0000E0  0E00               	movlw	0
  3137  0000E2  6E23               	movwf	___awdiv@divisor+1,c
  3138  0000E4  0E0A               	movlw	10
  3139  0000E6  6E22               	movwf	___awdiv@divisor,c
  3140  0000E8  EC26  F014         	call	___awdiv	;wreg free
  3141  0000EC  5020               	movf	?___awdiv,w,c
  3142  0000EE  0F30               	addlw	48
  3143  0000F0  0100               	movlb	0	; () banked
  3144  0000F2  6FDE               	movwf	(_tempF+1)& (0+255),b
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;Main_Screen.c: 98: tempF[2] = neg_tempF%10 + '0';
  3148  0000F4  C153  F028         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3149  0000F8  C154  F029         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3150  0000FC  0E00               	movlw	0
  3151  0000FE  6E2B               	movwf	___awmod@divisor+1,c
  3152  000100  0E0A               	movlw	10
  3153  000102  6E2A               	movwf	___awmod@divisor,c
  3154  000104  EC17  F016         	call	___awmod	;wreg free
  3155  000108  D01B               	goto	L2
  3156  00010A                     l9012:
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;Main_Screen.c: 100: else
  3160                           ;Main_Screen.c: 101: {
  3161                           ;Main_Screen.c: 102: tempF[0] = '+';
  3162  00010A  0E2B               	movlw	43
  3163  00010C  0100               	movlb	0	; () banked
  3164  00010E  6FDD               	movwf	_tempF& (0+255),b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;Main_Screen.c: 103: tempF[1] = DS1621_tempF/10 + '0';
  3168  000110  C045  F020         	movff	_DS1621_tempF,___awdiv@dividend
  3169  000114  C046  F021         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3170  000118  0E00               	movlw	0
  3171  00011A  6E23               	movwf	___awdiv@divisor+1,c
  3172  00011C  0E0A               	movlw	10
  3173  00011E  6E22               	movwf	___awdiv@divisor,c
  3174  000120  EC26  F014         	call	___awdiv	;wreg free
  3175  000124  5020               	movf	?___awdiv,w,c
  3176  000126  0F30               	addlw	48
  3177  000128  0100               	movlb	0	; () banked
  3178  00012A  6FDE               	movwf	(_tempF+1)& (0+255),b
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;Main_Screen.c: 104: tempF[2] = DS1621_tempF%10 + '0';
  3182  00012C  C045  F028         	movff	_DS1621_tempF,___awmod@dividend
  3183  000130  C046  F029         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3184  000134  0E00               	movlw	0
  3185  000136  6E2B               	movwf	___awmod@divisor+1,c
  3186  000138  0E0A               	movlw	10
  3187  00013A  6E2A               	movwf	___awmod@divisor,c
  3188  00013C  EC17  F016         	call	___awmod	;wreg free
  3189  000140                     L2:
  3190  000140  5028               	movf	?___awmod,w,c
  3191  000142  0F30               	addlw	48
  3192  000144  0100               	movlb	0	; () banked
  3193  000146  6FDF               	movwf	(_tempF+2)& (0+255),b
  3194  000148  D000               	goto	l9018
  3195  00014A                     l9018:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;Main_Screen.c: 105: }
  3199                           ;Main_Screen.c: 107: time[0] = (hour>>4) + '0';
  3200  00014A  385F               	swapf	_hour,w,c
  3201  00014C  0B0F               	andlw	15
  3202  00014E  0F30               	addlw	48
  3203  000150  0100               	movlb	0	; () banked
  3204  000152  6FAF               	movwf	_time& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;Main_Screen.c: 108: time[1] = (hour & 0x0f)+ '0';
  3208  000154  505F               	movf	_hour,w,c
  3209  000156  0B0F               	andlw	15
  3210  000158  0F30               	addlw	48
  3211  00015A  0100               	movlb	0	; () banked
  3212  00015C  6FB0               	movwf	(_time+1)& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;Main_Screen.c: 109: time[3] = (minute>>4) + '0';
  3216  00015E  3860               	swapf	_minute,w,c
  3217  000160  0B0F               	andlw	15
  3218  000162  0F30               	addlw	48
  3219  000164  0100               	movlb	0	; () banked
  3220  000166  6FB2               	movwf	(_time+3)& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;Main_Screen.c: 110: time[4] = (minute & 0x0f)+ '0';
  3224  000168  5060               	movf	_minute,w,c
  3225  00016A  0B0F               	andlw	15
  3226  00016C  0F30               	addlw	48
  3227  00016E  0100               	movlb	0	; () banked
  3228  000170  6FB3               	movwf	(_time+4)& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;Main_Screen.c: 111: time[6] = (second>>4) + '0';
  3232  000172  3863               	swapf	_second,w,c
  3233  000174  0B0F               	andlw	15
  3234  000176  0F30               	addlw	48
  3235  000178  0100               	movlb	0	; () banked
  3236  00017A  6FB5               	movwf	(_time+6)& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;Main_Screen.c: 112: time[7] = (second & 0x0f)+ '0';
  3240  00017C  5063               	movf	_second,w,c
  3241  00017E  0B0F               	andlw	15
  3242  000180  0F30               	addlw	48
  3243  000182  0100               	movlb	0	; () banked
  3244  000184  6FB6               	movwf	(_time+7)& (0+255),b
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;Main_Screen.c: 113: date[0] = (month>>4) + '0';
  3248  000186  3861               	swapf	_month,w,c
  3249  000188  0B0F               	andlw	15
  3250  00018A  0F30               	addlw	48
  3251  00018C  0100               	movlb	0	; () banked
  3252  00018E  6F8B               	movwf	_date& (0+255),b
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;Main_Screen.c: 114: date[1] = (month & 0x0f)+ '0';
  3256  000190  5061               	movf	_month,w,c
  3257  000192  0B0F               	andlw	15
  3258  000194  0F30               	addlw	48
  3259  000196  0100               	movlb	0	; () banked
  3260  000198  6F8C               	movwf	(_date+1)& (0+255),b
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;Main_Screen.c: 115: date[3] = (day>>4) + '0';
  3264  00019A  385C               	swapf	_day,w,c
  3265  00019C  0B0F               	andlw	15
  3266  00019E  0F30               	addlw	48
  3267  0001A0  0100               	movlb	0	; () banked
  3268  0001A2  6F8E               	movwf	(_date+3)& (0+255),b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;Main_Screen.c: 116: date[4] = (day & 0x0f)+ '0';
  3272  0001A4  505C               	movf	_day,w,c
  3273  0001A6  0B0F               	andlw	15
  3274  0001A8  0F30               	addlw	48
  3275  0001AA  0100               	movlb	0	; () banked
  3276  0001AC  6F8F               	movwf	(_date+4)& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;Main_Screen.c: 117: date[6] = (year>>4) + '0';
  3280  0001AE  386E               	swapf	_year,w,c
  3281  0001B0  0B0F               	andlw	15
  3282  0001B2  0F30               	addlw	48
  3283  0001B4  0100               	movlb	0	; () banked
  3284  0001B6  6F91               	movwf	(_date+6)& (0+255),b
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;Main_Screen.c: 118: date[7] = (year & 0x0f)+ '0';
  3288  0001B8  506E               	movf	_year,w,c
  3289  0001BA  0B0F               	andlw	15
  3290  0001BC  0F30               	addlw	48
  3291  0001BE  0100               	movlb	0	; () banked
  3292  0001C0  6F92               	movwf	(_date+7)& (0+255),b
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;Main_Screen.c: 119: alarm_time[0] = (alarm_hour>>4) + '0';
  3296  0001C2  3857               	swapf	_alarm_hour,w,c
  3297  0001C4  0B0F               	andlw	15
  3298  0001C6  0F30               	addlw	48
  3299  0001C8  0100               	movlb	0	; () banked
  3300  0001CA  6F82               	movwf	_alarm_time& (0+255),b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;Main_Screen.c: 120: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3304  0001CC  5057               	movf	_alarm_hour,w,c
  3305  0001CE  0B0F               	andlw	15
  3306  0001D0  0F30               	addlw	48
  3307  0001D2  0100               	movlb	0	; () banked
  3308  0001D4  6F83               	movwf	(_alarm_time+1)& (0+255),b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;Main_Screen.c: 121: alarm_time[3] = (alarm_minute>>4) + '0';
  3312  0001D6  3858               	swapf	_alarm_minute,w,c
  3313  0001D8  0B0F               	andlw	15
  3314  0001DA  0F30               	addlw	48
  3315  0001DC  0100               	movlb	0	; () banked
  3316  0001DE  6F85               	movwf	(_alarm_time+3)& (0+255),b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;Main_Screen.c: 122: alarm_time[4] = (alarm_minute & 0x0f)+ '0';
  3320  0001E0  5058               	movf	_alarm_minute,w,c
  3321  0001E2  0B0F               	andlw	15
  3322  0001E4  0F30               	addlw	48
  3323  0001E6  0100               	movlb	0	; () banked
  3324  0001E8  6F86               	movwf	(_alarm_time+4)& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;Main_Screen.c: 123: alarm_time[6] = (alarm_second>>4) + '0';
  3328  0001EA  3859               	swapf	_alarm_second,w,c
  3329  0001EC  0B0F               	andlw	15
  3330  0001EE  0F30               	addlw	48
  3331  0001F0  0100               	movlb	0	; () banked
  3332  0001F2  6F88               	movwf	(_alarm_time+6)& (0+255),b
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;Main_Screen.c: 124: alarm_time[7] = (alarm_second & 0x0f)+ '0';
  3336  0001F4  5059               	movf	_alarm_second,w,c
  3337  0001F6  0B0F               	andlw	15
  3338  0001F8  0F30               	addlw	48
  3339  0001FA  0100               	movlb	0	; () banked
  3340  0001FC  6F89               	movwf	(_alarm_time+7)& (0+255),b
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;Main_Screen.c: 126: if (ALARMEN == 1)
  3344  0001FE  0100               	movlb	0	; () banked
  3345  000200  05EA               	decf	_ALARMEN& (0+255),w,b
  3346  000202  0100               	movlb	0	; () banked
  3347  000204  11EB               	iorwf	(_ALARMEN+1)& (0+255),w,b
  3348  000206  A4D8               	btfss	status,2,c
  3349  000208  D00B               	goto	l9058
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;Main_Screen.c: 127: {
  3353                           ;Main_Screen.c: 128: strcpy(Alarm_SW_Txt, "ON ");
  3354  00020A  0ECD               	movlw	low _Alarm_SW_Txt
  3355  00020C  6E11               	movwf	strcpy@to,c
  3356  00020E  0E00               	movlw	high _Alarm_SW_Txt
  3357  000210  6E12               	movwf	strcpy@to+1,c
  3358  000212  0EE9               	movlw	low STR_21
  3359  000214  6E13               	movwf	strcpy@from,c
  3360  000216  0EFF               	movlw	high STR_21
  3361  000218  6E14               	movwf	strcpy@from+1,c
  3362  00021A  EC01  F01B         	call	_strcpy	;wreg free
  3363                           
  3364                           ;Main_Screen.c: 129: }
  3365  00021E  D00B               	goto	l9060
  3366  000220                     l9058:
  3367                           
  3368                           ;Main_Screen.c: 130: else
  3369                           ;Main_Screen.c: 131: {
  3370                           ;Main_Screen.c: 132: strcpy(Alarm_SW_Txt, "OFF");
  3371  000220  0ECD               	movlw	low _Alarm_SW_Txt
  3372  000222  6E11               	movwf	strcpy@to,c
  3373  000224  0E00               	movlw	high _Alarm_SW_Txt
  3374  000226  6E12               	movwf	strcpy@to+1,c
  3375  000228  0EED               	movlw	low STR_22
  3376  00022A  6E13               	movwf	strcpy@from,c
  3377  00022C  0EFF               	movlw	high STR_22
  3378  00022E  6E14               	movwf	strcpy@from+1,c
  3379  000230  EC01  F01B         	call	_strcpy	;wreg free
  3380  000234  D000               	goto	l9060
  3381  000236                     l9060:
  3382                           
  3383                           ;Main_Screen.c: 133: }
  3384                           ;Main_Screen.c: 135: Heater_Set_Temp_Txt[0] = heater_set_temp/100 + '0';
  3385  000236  C06F  F020         	movff	_heater_set_temp,___awdiv@dividend
  3386  00023A  6A21               	clrf	___awdiv@dividend+1,c
  3387  00023C  0E00               	movlw	0
  3388  00023E  6E23               	movwf	___awdiv@divisor+1,c
  3389  000240  0E64               	movlw	100
  3390  000242  6E22               	movwf	___awdiv@divisor,c
  3391  000244  EC26  F014         	call	___awdiv	;wreg free
  3392  000248  5020               	movf	?___awdiv,w,c
  3393  00024A  0F30               	addlw	48
  3394  00024C  0100               	movlb	0	; () banked
  3395  00024E  6FBE               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;Main_Screen.c: 136: Heater_Set_Temp_Txt[1] = heater_set_temp/10 %10+ '0';
  3399  000250  0E00               	movlw	0
  3400  000252  6E23               	movwf	___awdiv@divisor+1,c
  3401  000254  0E0A               	movlw	10
  3402  000256  6E22               	movwf	___awdiv@divisor,c
  3403  000258  C06F  F020         	movff	_heater_set_temp,___awdiv@dividend
  3404  00025C  6A21               	clrf	___awdiv@dividend+1,c
  3405  00025E  EC26  F014         	call	___awdiv	;wreg free
  3406  000262  C020  F028         	movff	?___awdiv,___awmod@dividend
  3407  000266  C021  F029         	movff	?___awdiv+1,___awmod@dividend+1
  3408  00026A  0E00               	movlw	0
  3409  00026C  6E2B               	movwf	___awmod@divisor+1,c
  3410  00026E  0E0A               	movlw	10
  3411  000270  6E2A               	movwf	___awmod@divisor,c
  3412  000272  EC17  F016         	call	___awmod	;wreg free
  3413  000276  5028               	movf	?___awmod,w,c
  3414  000278  0F30               	addlw	48
  3415  00027A  0100               	movlb	0	; () banked
  3416  00027C  6FBF               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;Main_Screen.c: 137: Heater_Set_Temp_Txt[2] = heater_set_temp%10 + '0';
  3420  00027E  C06F  F028         	movff	_heater_set_temp,___awmod@dividend
  3421  000282  6A29               	clrf	___awmod@dividend+1,c
  3422  000284  0E00               	movlw	0
  3423  000286  6E2B               	movwf	___awmod@divisor+1,c
  3424  000288  0E0A               	movlw	10
  3425  00028A  6E2A               	movwf	___awmod@divisor,c
  3426  00028C  EC17  F016         	call	___awmod	;wreg free
  3427  000290  5028               	movf	?___awmod,w,c
  3428  000292  0F30               	addlw	48
  3429  000294  0100               	movlb	0	; () banked
  3430  000296  6FC0               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;Main_Screen.c: 139: if (HEATER == 1)
  3434  000298  044F               	decf	_HEATER,w,c
  3435  00029A  A4D8               	btfss	status,2,c
  3436  00029C  D00B               	goto	l9070
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;Main_Screen.c: 140: {
  3440                           ;Main_Screen.c: 141: strcpy(Heater_SW_Txt, "ON ");
  3441  00029E  0ED5               	movlw	low _Heater_SW_Txt
  3442  0002A0  6E11               	movwf	strcpy@to,c
  3443  0002A2  0E00               	movlw	high _Heater_SW_Txt
  3444  0002A4  6E12               	movwf	strcpy@to+1,c
  3445  0002A6  0EE9               	movlw	low STR_21
  3446  0002A8  6E13               	movwf	strcpy@from,c
  3447  0002AA  0EFF               	movlw	high STR_21
  3448  0002AC  6E14               	movwf	strcpy@from+1,c
  3449  0002AE  EC01  F01B         	call	_strcpy	;wreg free
  3450                           
  3451                           ;Main_Screen.c: 142: }
  3452  0002B2  D00B               	goto	l9072
  3453  0002B4                     l9070:
  3454                           
  3455                           ;Main_Screen.c: 143: else
  3456                           ;Main_Screen.c: 144: {
  3457                           ;Main_Screen.c: 145: strcpy(Heater_SW_Txt, "OFF");
  3458  0002B4  0ED5               	movlw	low _Heater_SW_Txt
  3459  0002B6  6E11               	movwf	strcpy@to,c
  3460  0002B8  0E00               	movlw	high _Heater_SW_Txt
  3461  0002BA  6E12               	movwf	strcpy@to+1,c
  3462  0002BC  0EED               	movlw	low STR_22
  3463  0002BE  6E13               	movwf	strcpy@from,c
  3464  0002C0  0EFF               	movlw	high STR_22
  3465  0002C2  6E14               	movwf	strcpy@from+1,c
  3466  0002C4  EC01  F01B         	call	_strcpy	;wreg free
  3467  0002C8  D000               	goto	l9072
  3468  0002CA                     l9072:
  3469                           
  3470                           ;Main_Screen.c: 146: }
  3471                           ;Main_Screen.c: 148: if (PORTAbits.RA5 == 0) RTC_ALARM_Txt[0] = '1';
  3472  0002CA  BA80               	btfsc	3968,5,c	;volatile
  3473  0002CC  D002               	goto	l9076
  3474  0002CE  0E31               	movlw	49
  3475  0002D0  D001               	goto	L3
  3476  0002D2                     l9076:
  3477                           
  3478                           ;Main_Screen.c: 149: else RTC_ALARM_Txt[0] = '0';
  3479  0002D2  0E30               	movlw	48
  3480  0002D4                     L3:
  3481  0002D4  0100               	movlb	0	; () banked
  3482  0002D6  6FE1               	movwf	_RTC_ALARM_Txt& (0+255),b
  3483  0002D8  D000               	goto	l9078
  3484  0002DA                     l9078:
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;Main_Screen.c: 152: DC_Txt[0] = duty_cycle/100 + '0';
  3488  0002DA  C049  F020         	movff	_duty_cycle,___awdiv@dividend
  3489  0002DE  C04A  F021         	movff	_duty_cycle+1,___awdiv@dividend+1
  3490  0002E2  0E00               	movlw	0
  3491  0002E4  6E23               	movwf	___awdiv@divisor+1,c
  3492  0002E6  0E64               	movlw	100
  3493  0002E8  6E22               	movwf	___awdiv@divisor,c
  3494  0002EA  EC26  F014         	call	___awdiv	;wreg free
  3495  0002EE  5020               	movf	?___awdiv,w,c
  3496  0002F0  0F30               	addlw	48
  3497  0002F2  0100               	movlb	0	; () banked
  3498  0002F4  6FD1               	movwf	_DC_Txt& (0+255),b
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;Main_Screen.c: 153: DC_Txt[1] = duty_cycle/10 %10 + '0';
  3502  0002F6  0E00               	movlw	0
  3503  0002F8  6E23               	movwf	___awdiv@divisor+1,c
  3504  0002FA  0E0A               	movlw	10
  3505  0002FC  6E22               	movwf	___awdiv@divisor,c
  3506  0002FE  C049  F020         	movff	_duty_cycle,___awdiv@dividend
  3507  000302  C04A  F021         	movff	_duty_cycle+1,___awdiv@dividend+1
  3508  000306  EC26  F014         	call	___awdiv	;wreg free
  3509  00030A  C020  F028         	movff	?___awdiv,___awmod@dividend
  3510  00030E  C021  F029         	movff	?___awdiv+1,___awmod@dividend+1
  3511  000312  0E00               	movlw	0
  3512  000314  6E2B               	movwf	___awmod@divisor+1,c
  3513  000316  0E0A               	movlw	10
  3514  000318  6E2A               	movwf	___awmod@divisor,c
  3515  00031A  EC17  F016         	call	___awmod	;wreg free
  3516  00031E  5028               	movf	?___awmod,w,c
  3517  000320  0F30               	addlw	48
  3518  000322  0100               	movlb	0	; () banked
  3519  000324  6FD2               	movwf	(_DC_Txt+1)& (0+255),b
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;Main_Screen.c: 154: DC_Txt[2] = duty_cycle%10 + '0';
  3523  000326  C049  F028         	movff	_duty_cycle,___awmod@dividend
  3524  00032A  C04A  F029         	movff	_duty_cycle+1,___awmod@dividend+1
  3525  00032E  0E00               	movlw	0
  3526  000330  6E2B               	movwf	___awmod@divisor+1,c
  3527  000332  0E0A               	movlw	10
  3528  000334  6E2A               	movwf	___awmod@divisor,c
  3529  000336  EC17  F016         	call	___awmod	;wreg free
  3530  00033A  5028               	movf	?___awmod,w,c
  3531  00033C  0F30               	addlw	48
  3532  00033E  0100               	movlb	0	; () banked
  3533  000340  6FD3               	movwf	(_DC_Txt+2)& (0+255),b
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;Main_Screen.c: 156: Volt_Txt[0] = ((int)volt/100) + '0';
  3537  000342  C0E7  F011         	movff	_volt,___fttol@f1
  3538  000346  C0E8  F012         	movff	_volt+1,___fttol@f1+1
  3539  00034A  C0E9  F013         	movff	_volt+2,___fttol@f1+2
  3540  00034E  EC37  F010         	call	___fttol	;wreg free
  3541  000352  C011  F020         	movff	?___fttol,___awdiv@dividend
  3542  000356  C012  F021         	movff	?___fttol+1,___awdiv@dividend+1
  3543  00035A  0E00               	movlw	0
  3544  00035C  6E23               	movwf	___awdiv@divisor+1,c
  3545  00035E  0E64               	movlw	100
  3546  000360  6E22               	movwf	___awdiv@divisor,c
  3547  000362  EC26  F014         	call	___awdiv	;wreg free
  3548  000366  5020               	movf	?___awdiv,w,c
  3549  000368  0F30               	addlw	48
  3550  00036A  0100               	movlb	0	; () banked
  3551  00036C  6FB8               	movwf	_Volt_Txt& (0+255),b
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;Main_Screen.c: 157: Volt_Txt[2] = ((int)volt/10 %10) + '0';
  3555  00036E  0E00               	movlw	0
  3556  000370  6E23               	movwf	___awdiv@divisor+1,c
  3557  000372  0E0A               	movlw	10
  3558  000374  6E22               	movwf	___awdiv@divisor,c
  3559  000376  C0E7  F011         	movff	_volt,___fttol@f1
  3560  00037A  C0E8  F012         	movff	_volt+1,___fttol@f1+1
  3561  00037E  C0E9  F013         	movff	_volt+2,___fttol@f1+2
  3562  000382  EC37  F010         	call	___fttol	;wreg free
  3563  000386  C011  F020         	movff	?___fttol,___awdiv@dividend
  3564  00038A  C012  F021         	movff	?___fttol+1,___awdiv@dividend+1
  3565  00038E  EC26  F014         	call	___awdiv	;wreg free
  3566  000392  C020  F028         	movff	?___awdiv,___awmod@dividend
  3567  000396  C021  F029         	movff	?___awdiv+1,___awmod@dividend+1
  3568  00039A  0E00               	movlw	0
  3569  00039C  6E2B               	movwf	___awmod@divisor+1,c
  3570  00039E  0E0A               	movlw	10
  3571  0003A0  6E2A               	movwf	___awmod@divisor,c
  3572  0003A2  EC17  F016         	call	___awmod	;wreg free
  3573  0003A6  5028               	movf	?___awmod,w,c
  3574  0003A8  0F30               	addlw	48
  3575  0003AA  0100               	movlb	0	; () banked
  3576  0003AC  6FBA               	movwf	(_Volt_Txt+2)& (0+255),b
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;Main_Screen.c: 158: Volt_Txt[3] = ((int)volt%10) + '0';
  3580  0003AE  C0E7  F011         	movff	_volt,___fttol@f1
  3581  0003B2  C0E8  F012         	movff	_volt+1,___fttol@f1+1
  3582  0003B6  C0E9  F013         	movff	_volt+2,___fttol@f1+2
  3583  0003BA  EC37  F010         	call	___fttol	;wreg free
  3584  0003BE  C011  F028         	movff	?___fttol,___awmod@dividend
  3585  0003C2  C012  F029         	movff	?___fttol+1,___awmod@dividend+1
  3586  0003C6  0E00               	movlw	0
  3587  0003C8  6E2B               	movwf	___awmod@divisor+1,c
  3588  0003CA  0E0A               	movlw	10
  3589  0003CC  6E2A               	movwf	___awmod@divisor,c
  3590  0003CE  EC17  F016         	call	___awmod	;wreg free
  3591  0003D2  5028               	movf	?___awmod,w,c
  3592  0003D4  0F30               	addlw	48
  3593  0003D6  0100               	movlb	0	; () banked
  3594  0003D8  6FBB               	movwf	(_Volt_Txt+3)& (0+255),b
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;Main_Screen.c: 160: RPM_Txt[0] = rpm/1000 + '0';
  3598  0003DA  C04B  F020         	movff	_rpm,___awdiv@dividend
  3599  0003DE  C04C  F021         	movff	_rpm+1,___awdiv@dividend+1
  3600  0003E2  0E03               	movlw	3
  3601  0003E4  6E23               	movwf	___awdiv@divisor+1,c
  3602  0003E6  0EE8               	movlw	232
  3603  0003E8  6E22               	movwf	___awdiv@divisor,c
  3604  0003EA  EC26  F014         	call	___awdiv	;wreg free
  3605  0003EE  5020               	movf	?___awdiv,w,c
  3606  0003F0  0F30               	addlw	48
  3607  0003F2  0100               	movlb	0	; () banked
  3608  0003F4  6FC3               	movwf	_RPM_Txt& (0+255),b
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;Main_Screen.c: 161: RPM_Txt[1] = rpm/100 %10 + '0';
  3612  0003F6  0E00               	movlw	0
  3613  0003F8  6E23               	movwf	___awdiv@divisor+1,c
  3614  0003FA  0E64               	movlw	100
  3615  0003FC  6E22               	movwf	___awdiv@divisor,c
  3616  0003FE  C04B  F020         	movff	_rpm,___awdiv@dividend
  3617  000402  C04C  F021         	movff	_rpm+1,___awdiv@dividend+1
  3618  000406  EC26  F014         	call	___awdiv	;wreg free
  3619  00040A  C020  F028         	movff	?___awdiv,___awmod@dividend
  3620  00040E  C021  F029         	movff	?___awdiv+1,___awmod@dividend+1
  3621  000412  0E00               	movlw	0
  3622  000414  6E2B               	movwf	___awmod@divisor+1,c
  3623  000416  0E0A               	movlw	10
  3624  000418  6E2A               	movwf	___awmod@divisor,c
  3625  00041A  EC17  F016         	call	___awmod	;wreg free
  3626  00041E  5028               	movf	?___awmod,w,c
  3627  000420  0F30               	addlw	48
  3628  000422  0100               	movlb	0	; () banked
  3629  000424  6FC4               	movwf	(_RPM_Txt+1)& (0+255),b
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;Main_Screen.c: 162: RPM_Txt[2] = rpm%100/10 + '0';
  3633  000426  0E00               	movlw	0
  3634  000428  6E2B               	movwf	___awmod@divisor+1,c
  3635  00042A  0E64               	movlw	100
  3636  00042C  6E2A               	movwf	___awmod@divisor,c
  3637  00042E  C04B  F028         	movff	_rpm,___awmod@dividend
  3638  000432  C04C  F029         	movff	_rpm+1,___awmod@dividend+1
  3639  000436  EC17  F016         	call	___awmod	;wreg free
  3640  00043A  C028  F020         	movff	?___awmod,___awdiv@dividend
  3641  00043E  C029  F021         	movff	?___awmod+1,___awdiv@dividend+1
  3642  000442  0E00               	movlw	0
  3643  000444  6E23               	movwf	___awdiv@divisor+1,c
  3644  000446  0E0A               	movlw	10
  3645  000448  6E22               	movwf	___awdiv@divisor,c
  3646  00044A  EC26  F014         	call	___awdiv	;wreg free
  3647  00044E  5020               	movf	?___awdiv,w,c
  3648  000450  0F30               	addlw	48
  3649  000452  0100               	movlb	0	; () banked
  3650  000454  6FC5               	movwf	(_RPM_Txt+2)& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;Main_Screen.c: 163: RPM_Txt[3] = rpm%10 %10 + '0';
  3654  000456  0E00               	movlw	0
  3655  000458  6E2B               	movwf	___awmod@divisor+1,c
  3656  00045A  0E0A               	movlw	10
  3657  00045C  6E2A               	movwf	___awmod@divisor,c
  3658  00045E  C04B  F028         	movff	_rpm,___awmod@dividend
  3659  000462  C04C  F029         	movff	_rpm+1,___awmod@dividend+1
  3660  000466  EC17  F016         	call	___awmod	;wreg free
  3661  00046A  C028  F151         	movff	?___awmod,_Update_Screen$3207
  3662  00046E  C029  F152         	movff	?___awmod+1,_Update_Screen$3207+1
  3663                           
  3664                           ;Main_Screen.c: 163: RPM_Txt[3] = rpm%10 %10 + '0';
  3665  000472  C151  F028         	movff	_Update_Screen$3207,___awmod@dividend
  3666  000476  C152  F029         	movff	_Update_Screen$3207+1,___awmod@dividend+1
  3667  00047A  0E00               	movlw	0
  3668  00047C  6E2B               	movwf	___awmod@divisor+1,c
  3669  00047E  0E0A               	movlw	10
  3670  000480  6E2A               	movwf	___awmod@divisor,c
  3671  000482  EC17  F016         	call	___awmod	;wreg free
  3672  000486  5028               	movf	?___awmod,w,c
  3673  000488  0F30               	addlw	48
  3674  00048A  0100               	movlb	0	; () banked
  3675  00048C  6FC6               	movwf	(_RPM_Txt+3)& (0+255),b
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;Main_Screen.c: 165: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3679  00048E  0E17               	movlw	23
  3680  000490  6E39               	movwf	drawtext@y,c
  3681  000492  0ED9               	movlw	low _tempC
  3682  000494  6E3A               	movwf	drawtext@_text,c
  3683  000496  0E00               	movlw	high _tempC
  3684  000498  6E3B               	movwf	drawtext@_text+1,c
  3685  00049A  0EFF               	movlw	255
  3686  00049C  6E3D               	movwf	drawtext@color+1,c
  3687  00049E  0EE0               	movlw	224
  3688  0004A0  6E3C               	movwf	drawtext@color,c
  3689  0004A2  0E00               	movlw	0
  3690  0004A4  6E3F               	movwf	drawtext@bg+1,c
  3691  0004A6  0E00               	movlw	0
  3692  0004A8  6E3E               	movwf	drawtext@bg,c
  3693  0004AA  0E02               	movlw	2
  3694  0004AC  6E40               	movwf	drawtext@size,c
  3695  0004AE  0E01               	movlw	1
  3696  0004B0  ECBE  F00C         	call	_drawtext
  3697                           
  3698                           ;Main_Screen.c: 166: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3699  0004B4  0E17               	movlw	23
  3700  0004B6  6E39               	movwf	drawtext@y,c
  3701  0004B8  0EDD               	movlw	low _tempF
  3702  0004BA  6E3A               	movwf	drawtext@_text,c
  3703  0004BC  0E00               	movlw	high _tempF
  3704  0004BE  6E3B               	movwf	drawtext@_text+1,c
  3705  0004C0  0EFF               	movlw	255
  3706  0004C2  6E3D               	movwf	drawtext@color+1,c
  3707  0004C4  0EE0               	movlw	224
  3708  0004C6  6E3C               	movwf	drawtext@color,c
  3709  0004C8  0E00               	movlw	0
  3710  0004CA  6E3F               	movwf	drawtext@bg+1,c
  3711  0004CC  0E00               	movlw	0
  3712  0004CE  6E3E               	movwf	drawtext@bg,c
  3713  0004D0  0E02               	movlw	2
  3714  0004D2  6E40               	movwf	drawtext@size,c
  3715  0004D4  0E46               	movlw	70
  3716  0004D6  ECBE  F00C         	call	_drawtext
  3717                           
  3718                           ;Main_Screen.c: 167: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3719  0004DA  0E34               	movlw	52
  3720  0004DC  6E39               	movwf	drawtext@y,c
  3721  0004DE  0EAF               	movlw	low _time
  3722  0004E0  6E3A               	movwf	drawtext@_text,c
  3723  0004E2  0E00               	movlw	high _time
  3724  0004E4  6E3B               	movwf	drawtext@_text+1,c
  3725  0004E6  0E07               	movlw	7
  3726  0004E8  6E3D               	movwf	drawtext@color+1,c
  3727  0004EA  683C               	setf	drawtext@color,c
  3728  0004EC  0E00               	movlw	0
  3729  0004EE  6E3F               	movwf	drawtext@bg+1,c
  3730  0004F0  0E00               	movlw	0
  3731  0004F2  6E3E               	movwf	drawtext@bg,c
  3732  0004F4  0E02               	movlw	2
  3733  0004F6  6E40               	movwf	drawtext@size,c
  3734  0004F8  0E0F               	movlw	15
  3735  0004FA  ECBE  F00C         	call	_drawtext
  3736                           
  3737                           ;Main_Screen.c: 168: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3738  0004FE  0E52               	movlw	82
  3739  000500  6E39               	movwf	drawtext@y,c
  3740  000502  0E8B               	movlw	low _date
  3741  000504  6E3A               	movwf	drawtext@_text,c
  3742  000506  0E00               	movlw	high _date
  3743  000508  6E3B               	movwf	drawtext@_text+1,c
  3744  00050A  0E07               	movlw	7
  3745  00050C  6E3D               	movwf	drawtext@color+1,c
  3746  00050E  0EE0               	movlw	224
  3747  000510  6E3C               	movwf	drawtext@color,c
  3748  000512  0E00               	movlw	0
  3749  000514  6E3F               	movwf	drawtext@bg+1,c
  3750  000516  0E00               	movlw	0
  3751  000518  6E3E               	movwf	drawtext@bg,c
  3752  00051A  0E02               	movlw	2
  3753  00051C  6E40               	movwf	drawtext@size,c
  3754  00051E  0E0F               	movlw	15
  3755  000520  ECBE  F00C         	call	_drawtext
  3756                           
  3757                           ;Main_Screen.c: 169: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  3758  000524  0E6E               	movlw	110
  3759  000526  6E39               	movwf	drawtext@y,c
  3760  000528  0E82               	movlw	low _alarm_time
  3761  00052A  6E3A               	movwf	drawtext@_text,c
  3762  00052C  0E00               	movlw	high _alarm_time
  3763  00052E  6E3B               	movwf	drawtext@_text+1,c
  3764  000530  0E07               	movlw	7
  3765  000532  6E3D               	movwf	drawtext@color+1,c
  3766  000534  683C               	setf	drawtext@color,c
  3767  000536  0E00               	movlw	0
  3768  000538  6E3F               	movwf	drawtext@bg+1,c
  3769  00053A  0E00               	movlw	0
  3770  00053C  6E3E               	movwf	drawtext@bg,c
  3771  00053E  0E01               	movlw	1
  3772  000540  6E40               	movwf	drawtext@size,c
  3773  000542  0E0A               	movlw	10
  3774  000544  ECBE  F00C         	call	_drawtext
  3775                           
  3776                           ;Main_Screen.c: 170: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  3777  000548  0E6E               	movlw	110
  3778  00054A  6E39               	movwf	drawtext@y,c
  3779  00054C  0ECD               	movlw	low _Alarm_SW_Txt
  3780  00054E  6E3A               	movwf	drawtext@_text,c
  3781  000550  0E00               	movlw	high _Alarm_SW_Txt
  3782  000552  6E3B               	movwf	drawtext@_text+1,c
  3783  000554  0E07               	movlw	7
  3784  000556  6E3D               	movwf	drawtext@color+1,c
  3785  000558  683C               	setf	drawtext@color,c
  3786  00055A  0E00               	movlw	0
  3787  00055C  6E3F               	movwf	drawtext@bg+1,c
  3788  00055E  0E00               	movlw	0
  3789  000560  6E3E               	movwf	drawtext@bg,c
  3790  000562  0E01               	movlw	1
  3791  000564  6E40               	movwf	drawtext@size,c
  3792  000566  0E5F               	movlw	95
  3793  000568  ECBE  F00C         	call	_drawtext
  3794                           
  3795                           ;Main_Screen.c: 171: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  3796  00056C  0E82               	movlw	130
  3797  00056E  6E39               	movwf	drawtext@y,c
  3798  000570  0EBE               	movlw	low _Heater_Set_Temp_Txt
  3799  000572  6E3A               	movwf	drawtext@_text,c
  3800  000574  0E00               	movlw	high _Heater_Set_Temp_Txt
  3801  000576  6E3B               	movwf	drawtext@_text+1,c
  3802  000578  0EF8               	movlw	248
  3803  00057A  6E3D               	movwf	drawtext@color+1,c
  3804  00057C  0E00               	movlw	0
  3805  00057E  6E3C               	movwf	drawtext@color,c
  3806  000580  0E00               	movlw	0
  3807  000582  6E3F               	movwf	drawtext@bg+1,c
  3808  000584  0E00               	movlw	0
  3809  000586  6E3E               	movwf	drawtext@bg,c
  3810  000588  0E01               	movlw	1
  3811  00058A  6E40               	movwf	drawtext@size,c
  3812  00058C  0E23               	movlw	35
  3813  00058E  ECBE  F00C         	call	_drawtext
  3814                           
  3815                           ;Main_Screen.c: 172: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  3816  000592  0E82               	movlw	130
  3817  000594  6E39               	movwf	drawtext@y,c
  3818  000596  0ED5               	movlw	low _Heater_SW_Txt
  3819  000598  6E3A               	movwf	drawtext@_text,c
  3820  00059A  0E00               	movlw	high _Heater_SW_Txt
  3821  00059C  6E3B               	movwf	drawtext@_text+1,c
  3822  00059E  0EF8               	movlw	248
  3823  0005A0  6E3D               	movwf	drawtext@color+1,c
  3824  0005A2  0E00               	movlw	0
  3825  0005A4  6E3C               	movwf	drawtext@color,c
  3826  0005A6  0E00               	movlw	0
  3827  0005A8  6E3F               	movwf	drawtext@bg+1,c
  3828  0005AA  0E00               	movlw	0
  3829  0005AC  6E3E               	movwf	drawtext@bg,c
  3830  0005AE  0E01               	movlw	1
  3831  0005B0  6E40               	movwf	drawtext@size,c
  3832  0005B2  0E5F               	movlw	95
  3833  0005B4  ECBE  F00C         	call	_drawtext
  3834                           
  3835                           ;Main_Screen.c: 173: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3836  0005B8  0E96               	movlw	150
  3837  0005BA  6E39               	movwf	drawtext@y,c
  3838  0005BC  0ED1               	movlw	low _DC_Txt
  3839  0005BE  6E3A               	movwf	drawtext@_text,c
  3840  0005C0  0E00               	movlw	high _DC_Txt
  3841  0005C2  6E3B               	movwf	drawtext@_text+1,c
  3842  0005C4  0E07               	movlw	7
  3843  0005C6  6E3D               	movwf	drawtext@color+1,c
  3844  0005C8  0EE0               	movlw	224
  3845  0005CA  6E3C               	movwf	drawtext@color,c
  3846  0005CC  0E00               	movlw	0
  3847  0005CE  6E3F               	movwf	drawtext@bg+1,c
  3848  0005D0  0E00               	movlw	0
  3849  0005D2  6E3E               	movwf	drawtext@bg,c
  3850  0005D4  0E01               	movlw	1
  3851  0005D6  6E40               	movwf	drawtext@size,c
  3852  0005D8  0E0A               	movlw	10
  3853  0005DA  ECBE  F00C         	call	_drawtext
  3854                           
  3855                           ;Main_Screen.c: 174: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  3856  0005DE  0E96               	movlw	150
  3857  0005E0  6E39               	movwf	drawtext@y,c
  3858  0005E2  0EE1               	movlw	low _RTC_ALARM_Txt
  3859  0005E4  6E3A               	movwf	drawtext@_text,c
  3860  0005E6  0E00               	movlw	high _RTC_ALARM_Txt
  3861  0005E8  6E3B               	movwf	drawtext@_text+1,c
  3862  0005EA  0E07               	movlw	7
  3863  0005EC  6E3D               	movwf	drawtext@color+1,c
  3864  0005EE  0EE0               	movlw	224
  3865  0005F0  6E3C               	movwf	drawtext@color,c
  3866  0005F2  0E00               	movlw	0
  3867  0005F4  6E3F               	movwf	drawtext@bg+1,c
  3868  0005F6  0E00               	movlw	0
  3869  0005F8  6E3E               	movwf	drawtext@bg,c
  3870  0005FA  0E01               	movlw	1
  3871  0005FC  6E40               	movwf	drawtext@size,c
  3872  0005FE  0E23               	movlw	35
  3873  000600  ECBE  F00C         	call	_drawtext
  3874                           
  3875                           ;Main_Screen.c: 175: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  3876  000604  0E96               	movlw	150
  3877  000606  6E39               	movwf	drawtext@y,c
  3878  000608  0EB8               	movlw	low _Volt_Txt
  3879  00060A  6E3A               	movwf	drawtext@_text,c
  3880  00060C  0E00               	movlw	high _Volt_Txt
  3881  00060E  6E3B               	movwf	drawtext@_text+1,c
  3882  000610  0E07               	movlw	7
  3883  000612  6E3D               	movwf	drawtext@color+1,c
  3884  000614  0EE0               	movlw	224
  3885  000616  6E3C               	movwf	drawtext@color,c
  3886  000618  0E00               	movlw	0
  3887  00061A  6E3F               	movwf	drawtext@bg+1,c
  3888  00061C  0E00               	movlw	0
  3889  00061E  6E3E               	movwf	drawtext@bg,c
  3890  000620  0E01               	movlw	1
  3891  000622  6E40               	movwf	drawtext@size,c
  3892  000624  0E32               	movlw	50
  3893  000626  ECBE  F00C         	call	_drawtext
  3894                           
  3895                           ;Main_Screen.c: 176: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3896  00062A  0E96               	movlw	150
  3897  00062C  6E39               	movwf	drawtext@y,c
  3898  00062E  0EC3               	movlw	low _RPM_Txt
  3899  000630  6E3A               	movwf	drawtext@_text,c
  3900  000632  0E00               	movlw	high _RPM_Txt
  3901  000634  6E3B               	movwf	drawtext@_text+1,c
  3902  000636  0E07               	movlw	7
  3903  000638  6E3D               	movwf	drawtext@color+1,c
  3904  00063A  0EE0               	movlw	224
  3905  00063C  6E3C               	movwf	drawtext@color,c
  3906  00063E  0E00               	movlw	0
  3907  000640  6E3F               	movwf	drawtext@bg+1,c
  3908  000642  0E00               	movlw	0
  3909  000644  6E3E               	movwf	drawtext@bg,c
  3910  000646  0E01               	movlw	1
  3911  000648  6E40               	movwf	drawtext@size,c
  3912  00064A  0E5D               	movlw	93
  3913  00064C  ECBE  F00C         	call	_drawtext
  3914  000650  0012               	return		;funcret
  3915  000652                     __end_of_Update_Screen:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           postinc0	equ	0xFEE
  3922                           wreg	equ	0xFE8
  3923                           postdec1	equ	0xFE5
  3924                           fsr1l	equ	0xFE1
  3925                           status	equ	0xFD8
  3926                           
  3927 ;; *************** function _Toggle_Heater *****************
  3928 ;; Defined at:
  3929 ;;		line 43 in file "Fan_Support.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;		None
  3934 ;; Return value:  Size  Location     Type
  3935 ;;		None               void
  3936 ;; Registers used:
  3937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;Total ram usage:        0 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    7
  3950 ;; This function calls:
  3951 ;;		_Turn_Off_Fan
  3952 ;;		_Turn_On_Fan
  3953 ;; This function is called by:
  3954 ;;		_main
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text5
  3959  003910                     __ptext5:
  3960                           	opt stack 0
  3961  003910                     _Toggle_Heater:
  3962                           	opt stack 23
  3963                           
  3964                           ;Fan_Support.c: 46: if (HEATER==0) Turn_On_Fan();
  3965                           
  3966                           ;incstack = 0
  3967  003910  504F               	movf	_HEATER,w,c
  3968  003912  A4D8               	btfss	status,2,c
  3969  003914  D003               	goto	l8944
  3970  003916  EC1A  F01C         	call	_Turn_On_Fan	;wreg free
  3971  00391A  D003               	goto	l49
  3972  00391C                     l8944:
  3973                           
  3974                           ;Fan_Support.c: 47: else Turn_Off_Fan();
  3975  00391C  EC27  F01C         	call	_Turn_Off_Fan	;wreg free
  3976  003920  D000               	goto	l49
  3977  003922                     l49:
  3978  003922  0012               	return		;funcret
  3979  003924                     __end_of_Toggle_Heater:
  3980                           	opt stack 0
  3981                           tblptru	equ	0xFF8
  3982                           tblptrh	equ	0xFF7
  3983                           tblptrl	equ	0xFF6
  3984                           tablat	equ	0xFF5
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           postdec1	equ	0xFE5
  3988                           fsr1l	equ	0xFE1
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _Turn_On_Fan *****************
  3992 ;; Defined at:
  3993 ;;		line 70 in file "Fan_Support.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;		None               void
  4000 ;; Registers used:
  4001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;Total ram usage:        0 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    6
  4014 ;; This function calls:
  4015 ;;		_do_update_pwm
  4016 ;;		_printf
  4017 ;; This function is called by:
  4018 ;;		_Toggle_Heater
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text6
  4023  003834                     __ptext6:
  4024                           	opt stack 0
  4025  003834                     _Turn_On_Fan:
  4026                           	opt stack 23
  4027                           
  4028                           ;Fan_Support.c: 73: printf ("Fan is turned on\r\n");
  4029                           
  4030                           ;incstack = 0
  4031  003834  0E28               	movlw	low STR_2
  4032  003836  6E1D               	movwf	printf@f,c
  4033  003838  0EFF               	movlw	high STR_2
  4034  00383A  6E1E               	movwf	printf@f+1,c
  4035  00383C  ECE9  F004         	call	_printf	;wreg free
  4036                           
  4037                           ;Fan_Support.c: 74: HEATER = 1;
  4038  003840  0E01               	movlw	1
  4039  003842  6E4F               	movwf	_HEATER,c
  4040                           
  4041                           ;Fan_Support.c: 75: do_update_pwm(duty_cycle);
  4042  003844  5049               	movf	_duty_cycle,w,c
  4043  003846  ECB9  F012         	call	_do_update_pwm
  4044                           
  4045                           ;Fan_Support.c: 76: PORTAbits.RA4 = 1;
  4046  00384A  8880               	bsf	3968,4,c	;volatile
  4047  00384C  0012               	return		;funcret
  4048  00384E                     __end_of_Turn_On_Fan:
  4049                           	opt stack 0
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           postdec1	equ	0xFE5
  4057                           fsr1l	equ	0xFE1
  4058                           status	equ	0xFD8
  4059                           
  4060 ;; *************** function _Test_Alarm *****************
  4061 ;; Defined at:
  4062 ;;		line 195 in file "Main.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;		None
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;		None
  4067 ;; Return value:  Size  Location     Type
  4068 ;;		None               void
  4069 ;; Registers used:
  4070 ;;		None
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;Total ram usage:        0 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    3
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_main
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text7
  4091  003AEE                     __ptext7:
  4092                           	opt stack 0
  4093  003AEE                     _Test_Alarm:
  4094                           	opt stack 27
  4095                           
  4096                           ;incstack = 0
  4097  003AEE  0012               	return		;funcret
  4098  003AF0                     __end_of_Test_Alarm:
  4099                           	opt stack 0
  4100                           tblptru	equ	0xFF8
  4101                           tblptrh	equ	0xFF7
  4102                           tblptrl	equ	0xFF6
  4103                           tablat	equ	0xFF5
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           postdec1	equ	0xFE5
  4107                           fsr1l	equ	0xFE1
  4108                           status	equ	0xFD8
  4109                           
  4110 ;; *************** function _Monitor_Heater *****************
  4111 ;; Defined at:
  4112 ;;		line 29 in file "Fan_Support.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;		None
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  rpm             2   61[COMRAM] int 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;		None               void
  4119 ;; Registers used:
  4120 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;Total ram usage:        2 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    6
  4133 ;; This function calls:
  4134 ;;		_Set_DC_RGB
  4135 ;;		_Set_RPM_RGB
  4136 ;;		_do_update_pwm
  4137 ;;		_get_RPM
  4138 ;;		_get_duty_cycle
  4139 ;; This function is called by:
  4140 ;;		_main
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text8
  4145  0030B6                     __ptext8:
  4146                           	opt stack 0
  4147  0030B6                     _Monitor_Heater:
  4148                           	opt stack 24
  4149                           
  4150                           ;Fan_Support.c: 31: duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  4151                           
  4152                           ;incstack = 0
  4153  0030B6  C045  F028         	movff	_DS1621_tempF,get_duty_cycle@temp
  4154  0030BA  C046  F029         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  4155  0030BE  C06F  F02A         	movff	_heater_set_temp,get_duty_cycle@set_temp
  4156  0030C2  6A2B               	clrf	get_duty_cycle@set_temp+1,c
  4157  0030C4  ECBF  F00F         	call	_get_duty_cycle	;wreg free
  4158  0030C8  C028  F049         	movff	?_get_duty_cycle,_duty_cycle
  4159  0030CC  C029  F04A         	movff	?_get_duty_cycle+1,_duty_cycle+1
  4160                           
  4161                           ;Fan_Support.c: 32: do_update_pwm(duty_cycle);
  4162  0030D0  5049               	movf	_duty_cycle,w,c
  4163  0030D2  ECB9  F012         	call	_do_update_pwm
  4164                           
  4165                           ;Fan_Support.c: 33: int rpm = get_RPM();
  4166  0030D6  EC2F  F01A         	call	_get_RPM	;wreg free
  4167  0030DA  C028  F03E         	movff	?_get_RPM,Monitor_Heater@rpm
  4168  0030DE  C029  F03F         	movff	?_get_RPM+1,Monitor_Heater@rpm+1
  4169                           
  4170                           ;Fan_Support.c: 34: Set_DC_RGB(duty_cycle);
  4171  0030E2  C049  F028         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  4172  0030E6  C04A  F029         	movff	_duty_cycle+1,Set_DC_RGB@duty_cycle+1
  4173  0030EA  ECE7  F01A         	call	_Set_DC_RGB	;wreg free
  4174                           
  4175                           ;Fan_Support.c: 35: Set_RPM_RGB(rpm);
  4176  0030EE  C03E  F028         	movff	Monitor_Heater@rpm,Set_RPM_RGB@rpm
  4177  0030F2  C03F  F029         	movff	Monitor_Heater@rpm+1,Set_RPM_RGB@rpm+1
  4178  0030F6  EC85  F018         	call	_Set_RPM_RGB	;wreg free
  4179                           
  4180                           ;Fan_Support.c: 36: if (HEATER == 1)
  4181  0030FA  044F               	decf	_HEATER,w,c
  4182  0030FC  A4D8               	btfss	status,2,c
  4183  0030FE  D002               	goto	l42
  4184                           
  4185                           ;Fan_Support.c: 37: {
  4186                           ;Fan_Support.c: 38: PORTAbits.RA4 = 1;
  4187  003100  8880               	bsf	3968,4,c	;volatile
  4188                           
  4189                           ;Fan_Support.c: 39: }
  4190  003102  D002               	goto	l44
  4191  003104                     l42:
  4192                           
  4193                           ;Fan_Support.c: 40: else PORTAbits.RA4 = 0;
  4194  003104  9880               	bcf	3968,4,c	;volatile
  4195  003106  D000               	goto	l44
  4196  003108                     l44:
  4197  003108  0012               	return		;funcret
  4198  00310A                     __end_of_Monitor_Heater:
  4199                           	opt stack 0
  4200                           tblptru	equ	0xFF8
  4201                           tblptrh	equ	0xFF7
  4202                           tblptrl	equ	0xFF6
  4203                           tablat	equ	0xFF5
  4204                           postinc0	equ	0xFEE
  4205                           wreg	equ	0xFE8
  4206                           postdec1	equ	0xFE5
  4207                           fsr1l	equ	0xFE1
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function _get_duty_cycle *****************
  4211 ;; Defined at:
  4212 ;;		line 12 in file "Fan_Support.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  temp            2   39[COMRAM] int 
  4215 ;;  set_temp        2   41[COMRAM] int 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  diff            2   45[COMRAM] int 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  2   39[COMRAM] int 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;Total ram usage:        8 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    4
  4234 ;; This function calls:
  4235 ;;		___awdiv
  4236 ;;		___wmul
  4237 ;; This function is called by:
  4238 ;;		_Monitor_Heater
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text9
  4243  001F7E                     __ptext9:
  4244                           	opt stack 0
  4245  001F7E                     _get_duty_cycle:
  4246                           	opt stack 25
  4247                           
  4248                           ;Fan_Support.c: 18: if (temp >= set_temp) duty_cycle = 0;
  4249                           
  4250                           ;incstack = 0
  4251  001F7E  502A               	movf	get_duty_cycle@set_temp,w,c
  4252  001F80  5C28               	subwf	get_duty_cycle@temp,w,c
  4253  001F82  5029               	movf	get_duty_cycle@temp+1,w,c
  4254  001F84  0A80               	xorlw	128
  4255  001F86  6E2C               	movwf	??_get_duty_cycle& (0+255),c
  4256  001F88  502B               	movf	get_duty_cycle@set_temp+1,w,c
  4257  001F8A  0A80               	xorlw	128
  4258  001F8C  582C               	subwfb	??_get_duty_cycle& (0+255),w,c
  4259  001F8E  A0D8               	btfss	status,0,c
  4260  001F90  D005               	goto	l8540
  4261  001F92  0E00               	movlw	0
  4262  001F94  6E4A               	movwf	_duty_cycle+1,c
  4263  001F96  0E00               	movlw	0
  4264  001F98  6E49               	movwf	_duty_cycle,c
  4265  001F9A  D068               	goto	l39
  4266  001F9C                     l8540:
  4267                           
  4268                           ;Fan_Support.c: 19: else
  4269                           ;Fan_Support.c: 20: {
  4270                           ;Fan_Support.c: 21: int diff = set_temp - temp;
  4271  001F9C  C028  F02C         	movff	get_duty_cycle@temp,??_get_duty_cycle
  4272  001FA0  C029  F02D         	movff	get_duty_cycle@temp+1,??_get_duty_cycle+1
  4273  001FA4  1E2C               	comf	??_get_duty_cycle,f,c
  4274  001FA6  1E2D               	comf	??_get_duty_cycle+1,f,c
  4275  001FA8  4A2C               	infsnz	??_get_duty_cycle,f,c
  4276  001FAA  2A2D               	incf	??_get_duty_cycle+1,f,c
  4277  001FAC  502A               	movf	get_duty_cycle@set_temp,w,c
  4278  001FAE  242C               	addwf	??_get_duty_cycle,w,c
  4279  001FB0  6E2E               	movwf	get_duty_cycle@diff,c
  4280  001FB2  502B               	movf	get_duty_cycle@set_temp+1,w,c
  4281  001FB4  202D               	addwfc	??_get_duty_cycle+1,w,c
  4282  001FB6  6E2F               	movwf	get_duty_cycle@diff+1,c
  4283                           
  4284                           ;Fan_Support.c: 22: if (diff > 50) duty_cycle = 100;
  4285  001FB8  BE2F               	btfsc	get_duty_cycle@diff+1,7,c
  4286  001FBA  D00B               	goto	l8544
  4287  001FBC  502F               	movf	get_duty_cycle@diff+1,w,c
  4288  001FBE  E104               	bnz	u6060
  4289  001FC0  0E33               	movlw	51
  4290  001FC2  5C2E               	subwf	get_duty_cycle@diff,w,c
  4291  001FC4  A0D8               	btfss	status,0,c
  4292  001FC6  D005               	goto	l8544
  4293  001FC8                     u6060:
  4294  001FC8  0E00               	movlw	0
  4295  001FCA  6E4A               	movwf	_duty_cycle+1,c
  4296  001FCC  0E64               	movlw	100
  4297  001FCE  6E49               	movwf	_duty_cycle,c
  4298  001FD0  D000               	goto	l8544
  4299  001FD2                     l8544:
  4300                           
  4301                           ;Fan_Support.c: 23: if (diff >= 25 && diff < 50) duty_cycle = diff * 2;
  4302  001FD2  BE2F               	btfsc	get_duty_cycle@diff+1,7,c
  4303  001FD4  D013               	goto	l36
  4304  001FD6  502F               	movf	get_duty_cycle@diff+1,w,c
  4305  001FD8  E104               	bnz	u6070
  4306  001FDA  0E19               	movlw	25
  4307  001FDC  5C2E               	subwf	get_duty_cycle@diff,w,c
  4308  001FDE  A0D8               	btfss	status,0,c
  4309  001FE0  D00D               	goto	l36
  4310  001FE2                     u6070:
  4311  001FE2  BE2F               	btfsc	get_duty_cycle@diff+1,7,c
  4312  001FE4  D006               	goto	l8548
  4313  001FE6  502F               	movf	get_duty_cycle@diff+1,w,c
  4314  001FE8  E109               	bnz	l36
  4315  001FEA  0E32               	movlw	50
  4316  001FEC  5C2E               	subwf	get_duty_cycle@diff,w,c
  4317  001FEE  B0D8               	btfsc	status,0,c
  4318  001FF0  D005               	goto	l36
  4319  001FF2                     l8548:
  4320  001FF2  90D8               	bcf	status,0,c
  4321  001FF4  342E               	rlcf	get_duty_cycle@diff,w,c
  4322  001FF6  6E49               	movwf	_duty_cycle,c
  4323  001FF8  342F               	rlcf	get_duty_cycle@diff+1,w,c
  4324  001FFA  6E4A               	movwf	_duty_cycle+1,c
  4325  001FFC                     l36:
  4326                           
  4327                           ;Fan_Support.c: 24: if (diff >= 10 && diff < 25) duty_cycle = diff*3/2;
  4328  001FFC  BE2F               	btfsc	get_duty_cycle@diff+1,7,c
  4329  001FFE  D027               	goto	l8554
  4330  002000  502F               	movf	get_duty_cycle@diff+1,w,c
  4331  002002  E104               	bnz	u6090
  4332  002004  0E0A               	movlw	10
  4333  002006  5C2E               	subwf	get_duty_cycle@diff,w,c
  4334  002008  A0D8               	btfss	status,0,c
  4335  00200A  D021               	goto	l8554
  4336  00200C                     u6090:
  4337  00200C  BE2F               	btfsc	get_duty_cycle@diff+1,7,c
  4338  00200E  D006               	goto	l8552
  4339  002010  502F               	movf	get_duty_cycle@diff+1,w,c
  4340  002012  E11D               	bnz	l8554
  4341  002014  0E19               	movlw	25
  4342  002016  5C2E               	subwf	get_duty_cycle@diff,w,c
  4343  002018  B0D8               	btfsc	status,0,c
  4344  00201A  D019               	goto	l8554
  4345  00201C                     l8552:
  4346  00201C  C02E  F011         	movff	get_duty_cycle@diff,___wmul@multiplier
  4347  002020  C02F  F012         	movff	get_duty_cycle@diff+1,___wmul@multiplier+1
  4348  002024  0E00               	movlw	0
  4349  002026  6E14               	movwf	___wmul@multiplicand+1,c
  4350  002028  0E03               	movlw	3
  4351  00202A  6E13               	movwf	___wmul@multiplicand,c
  4352  00202C  EC75  F01B         	call	___wmul	;wreg free
  4353  002030  C011  F020         	movff	?___wmul,___awdiv@dividend
  4354  002034  C012  F021         	movff	?___wmul+1,___awdiv@dividend+1
  4355  002038  0E00               	movlw	0
  4356  00203A  6E23               	movwf	___awdiv@divisor+1,c
  4357  00203C  0E02               	movlw	2
  4358  00203E  6E22               	movwf	___awdiv@divisor,c
  4359  002040  EC26  F014         	call	___awdiv	;wreg free
  4360  002044  C020  F049         	movff	?___awdiv,_duty_cycle
  4361  002048  C021  F04A         	movff	?___awdiv+1,_duty_cycle+1
  4362  00204C  D000               	goto	l8554
  4363  00204E                     l8554:
  4364                           
  4365                           ;Fan_Support.c: 25: if (diff >= 0 && diff < 10) duty_cycle = diff;
  4366  00204E  BE2F               	btfsc	get_duty_cycle@diff+1,7,c
  4367  002050  D00D               	goto	l39
  4368  002052  BE2F               	btfsc	get_duty_cycle@diff+1,7,c
  4369  002054  D006               	goto	l8558
  4370  002056  502F               	movf	get_duty_cycle@diff+1,w,c
  4371  002058  E109               	bnz	l39
  4372  00205A  0E0A               	movlw	10
  4373  00205C  5C2E               	subwf	get_duty_cycle@diff,w,c
  4374  00205E  B0D8               	btfsc	status,0,c
  4375  002060  D005               	goto	l39
  4376  002062                     l8558:
  4377  002062  C02E  F049         	movff	get_duty_cycle@diff,_duty_cycle
  4378  002066  C02F  F04A         	movff	get_duty_cycle@diff+1,_duty_cycle+1
  4379  00206A  D000               	goto	l39
  4380  00206C                     l39:
  4381  00206C  0012               	return		;funcret
  4382  00206E                     __end_of_get_duty_cycle:
  4383                           	opt stack 0
  4384                           tblptru	equ	0xFF8
  4385                           tblptrh	equ	0xFF7
  4386                           tblptrl	equ	0xFF6
  4387                           tablat	equ	0xFF5
  4388                           postinc0	equ	0xFEE
  4389                           wreg	equ	0xFE8
  4390                           postdec1	equ	0xFE5
  4391                           fsr1l	equ	0xFE1
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function _get_RPM *****************
  4395 ;; Defined at:
  4396 ;;		line 51 in file "Fan_Support.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  RPS             2   41[COMRAM] int 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  2   39[COMRAM] int 
  4403 ;; Registers used:
  4404 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4410 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;Total ram usage:        4 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    4
  4417 ;; This function calls:
  4418 ;;		___awdiv
  4419 ;;		___wmul
  4420 ;; This function is called by:
  4421 ;;		_Monitor_Heater
  4422 ;;		_main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text10
  4427  00345E                     __ptext10:
  4428                           	opt stack 0
  4429  00345E                     _get_RPM:
  4430                           	opt stack 26
  4431                           
  4432                           ;Fan_Support.c: 54: int RPS = TMR3L / 2;
  4433                           
  4434                           ;incstack = 0
  4435  00345E  CFB2 F020          	movff	4018,___awdiv@dividend	;volatile
  4436  003462  6A21               	clrf	___awdiv@dividend+1,c
  4437  003464  0E00               	movlw	0
  4438  003466  6E23               	movwf	___awdiv@divisor+1,c
  4439  003468  0E02               	movlw	2
  4440  00346A  6E22               	movwf	___awdiv@divisor,c
  4441  00346C  EC26  F014         	call	___awdiv	;wreg free
  4442  003470  C020  F02A         	movff	?___awdiv,get_RPM@RPS
  4443  003474  C021  F02B         	movff	?___awdiv+1,get_RPM@RPS+1
  4444                           
  4445                           ;Fan_Support.c: 56: TMR3L = 0;
  4446  003478  0E00               	movlw	0
  4447  00347A  6EB2               	movwf	4018,c	;volatile
  4448                           
  4449                           ;Fan_Support.c: 57: return (RPS * 60);
  4450  00347C  C02A  F011         	movff	get_RPM@RPS,___wmul@multiplier
  4451  003480  C02B  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  4452  003484  0E00               	movlw	0
  4453  003486  6E14               	movwf	___wmul@multiplicand+1,c
  4454  003488  0E3C               	movlw	60
  4455  00348A  6E13               	movwf	___wmul@multiplicand,c
  4456  00348C  EC75  F01B         	call	___wmul	;wreg free
  4457  003490  C011  F028         	movff	?___wmul,?_get_RPM
  4458  003494  C012  F029         	movff	?___wmul+1,?_get_RPM+1
  4459  003498  D000               	goto	l52
  4460  00349A                     l52:
  4461  00349A  0012               	return		;funcret
  4462  00349C                     __end_of_get_RPM:
  4463                           	opt stack 0
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postdec1	equ	0xFE5
  4471                           fsr1l	equ	0xFE1
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _Set_RPM_RGB *****************
  4475 ;; Defined at:
  4476 ;;		line 85 in file "Fan_Support.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  rpm             2   39[COMRAM] int 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  temp           14   41[COMRAM] int [7]
  4481 ;; Return value:  Size  Location     Type
  4482 ;;		None               void
  4483 ;; Registers used:
  4484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4490 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;Total ram usage:       16 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    4
  4497 ;; This function calls:
  4498 ;;		___awdiv
  4499 ;; This function is called by:
  4500 ;;		_Monitor_Heater
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text11
  4505  00310A                     __ptext11:
  4506                           	opt stack 0
  4507  00310A                     _Set_RPM_RGB:
  4508                           	opt stack 25
  4509                           
  4510                           ;Fan_Support.c: 87: int temp[7] = { 1, 3, 2, 4, 5, 6, 7};
  4511                           
  4512                           ;incstack = 0
  4513  00310A  EE21  F034         	lfsr	2,Set_RPM_RGB@F4113
  4514  00310E  EE10  F02A         	lfsr	1,Set_RPM_RGB@temp
  4515  003112  0E0D               	movlw	13
  4516  003114                     u6141:
  4517  003114  CFDB FFE3          	movff	plusw2,plusw1
  4518  003118  06E8               	decf	wreg,f,c
  4519  00311A  E2FC               	bc	u6141
  4520                           
  4521                           ;Fan_Support.c: 88: if (rpm < 1) PORTE = 0x00;
  4522  00311C  BE29               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4523  00311E  D005               	goto	l8578
  4524  003120  5029               	movf	Set_RPM_RGB@rpm+1,w,c
  4525  003122  E105               	bnz	l8580
  4526  003124  0428               	decf	Set_RPM_RGB@rpm,w,c
  4527  003126  B0D8               	btfsc	status,0,c
  4528  003128  D002               	goto	l8580
  4529  00312A                     l8578:
  4530  00312A  0E00               	movlw	0
  4531  00312C  D014               	goto	L4
  4532  00312E                     l8580:
  4533                           
  4534                           ;Fan_Support.c: 89: else PORTE = temp[(rpm/500)];
  4535  00312E  C028  F020         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  4536  003132  C029  F021         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  4537  003136  0E01               	movlw	1
  4538  003138  6E23               	movwf	___awdiv@divisor+1,c
  4539  00313A  0EF4               	movlw	244
  4540  00313C  6E22               	movwf	___awdiv@divisor,c
  4541  00313E  EC26  F014         	call	___awdiv	;wreg free
  4542  003142  90D8               	bcf	status,0,c
  4543  003144  3620               	rlcf	?___awdiv,f,c
  4544  003146  3621               	rlcf	?___awdiv+1,f,c
  4545  003148  0E2A               	movlw	low Set_RPM_RGB@temp
  4546  00314A  2420               	addwf	?___awdiv,w,c
  4547  00314C  6ED9               	movwf	fsr2l,c
  4548  00314E  0E00               	movlw	high Set_RPM_RGB@temp
  4549  003150  2021               	addwfc	?___awdiv+1,w,c
  4550  003152  6EDA               	movwf	fsr2h,c
  4551  003154  50DF               	movf	indf2,w,c
  4552  003156                     L4:
  4553  003156  6E84               	movwf	3972,c	;volatile
  4554  003158  D000               	goto	l70
  4555  00315A                     l70:
  4556  00315A  0012               	return		;funcret
  4557  00315C                     __end_of_Set_RPM_RGB:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           postinc0	equ	0xFEE
  4564                           wreg	equ	0xFE8
  4565                           postdec1	equ	0xFE5
  4566                           plusw1	equ	0xFE3
  4567                           fsr1l	equ	0xFE1
  4568                           indf2	equ	0xFDF
  4569                           plusw2	equ	0xFDB
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function _Set_DC_RGB *****************
  4575 ;; Defined at:
  4576 ;;		line 79 in file "Fan_Support.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  duty_cycle      2   39[COMRAM] int 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;		None
  4581 ;; Return value:  Size  Location     Type
  4582 ;;		None               void
  4583 ;; Registers used:
  4584 ;;		wreg, status,2, status,0, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4590 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;Total ram usage:        2 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    4
  4597 ;; This function calls:
  4598 ;;		___awdiv
  4599 ;; This function is called by:
  4600 ;;		_Monitor_Heater
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text12
  4605  0035CE                     __ptext12:
  4606                           	opt stack 0
  4607  0035CE                     _Set_DC_RGB:
  4608                           	opt stack 25
  4609                           
  4610                           ;Fan_Support.c: 81: if (duty_cycle >= 70) PORTD = PORTD | 7;
  4611                           
  4612                           ;incstack = 0
  4613  0035CE  BE29               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4614  0035D0  D009               	goto	l8572
  4615  0035D2  5029               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4616  0035D4  E104               	bnz	u6130
  4617  0035D6  0E46               	movlw	70
  4618  0035D8  5C28               	subwf	Set_DC_RGB@duty_cycle,w,c
  4619  0035DA  A0D8               	btfss	status,0,c
  4620  0035DC  D003               	goto	l8572
  4621  0035DE                     u6130:
  4622  0035DE  5083               	movf	3971,w,c	;volatile
  4623  0035E0  0907               	iorlw	7
  4624  0035E2  D00C               	goto	L5
  4625  0035E4                     l8572:
  4626                           
  4627                           ;Fan_Support.c: 82: else PORTD = PORTD | (duty_cycle/10);
  4628  0035E4  C028  F020         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4629  0035E8  C029  F021         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4630  0035EC  0E00               	movlw	0
  4631  0035EE  6E23               	movwf	___awdiv@divisor+1,c
  4632  0035F0  0E0A               	movlw	10
  4633  0035F2  6E22               	movwf	___awdiv@divisor,c
  4634  0035F4  EC26  F014         	call	___awdiv	;wreg free
  4635  0035F8  5020               	movf	?___awdiv,w,c
  4636  0035FA  1083               	iorwf	3971,w,c	;volatile
  4637  0035FC                     L5:
  4638  0035FC  6E83               	movwf	3971,c	;volatile
  4639  0035FE  D000               	goto	l63
  4640  003600                     l63:
  4641  003600  0012               	return		;funcret
  4642  003602                     __end_of_Set_DC_RGB:
  4643                           	opt stack 0
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           postinc0	equ	0xFEE
  4649                           wreg	equ	0xFE8
  4650                           postdec1	equ	0xFE5
  4651                           plusw1	equ	0xFE3
  4652                           fsr1l	equ	0xFE1
  4653                           indf2	equ	0xFDF
  4654                           plusw2	equ	0xFDB
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _Do_Setup_Time *****************
  4660 ;; Defined at:
  4661 ;;		line 33 in file "Setup_Time.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  2  385[None  ] int 
  4668 ;; Registers used:
  4669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;Total ram usage:        0 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:   12
  4682 ;; This function calls:
  4683 ;;		_DS3231_Read_Time
  4684 ;;		_Decrease_Time
  4685 ;;		_Do_Beep_Bad
  4686 ;;		_Do_Beep_Good
  4687 ;;		_Do_Save_New_Time
  4688 ;;		_Exit_Time_Setup
  4689 ;;		_Go_Next_Field
  4690 ;;		_Go_Prev_Field
  4691 ;;		_Increase_Time
  4692 ;;		_Initialize_Setup_Time_Screen
  4693 ;;		_Update_Setup_Time_Screen
  4694 ;;		_bcd_2_dec
  4695 ;;		_check_for_button_input
  4696 ;; This function is called by:
  4697 ;;		_main
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           	psect	text13
  4702  0023E2                     __ptext13:
  4703                           	opt stack 0
  4704  0023E2                     _Do_Setup_Time:
  4705                           	opt stack 18
  4706                           
  4707                           ;Setup_Time.c: 36: Select_Field = 0;
  4708                           
  4709                           ;incstack = 0
  4710  0023E2  0E00               	movlw	0
  4711  0023E4  6E54               	movwf	_Select_Field,c
  4712                           
  4713                           ;Setup_Time.c: 38: DS3231_Read_Time();
  4714  0023E6  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  4715                           
  4716                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  4717  0023EA  5063               	movf	_second,w,c
  4718  0023EC  EC4B  F01B         	call	_bcd_2_dec
  4719  0023F0  6E6C               	movwf	_setup_second,c
  4720                           
  4721                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);
  4722  0023F2  5060               	movf	_minute,w,c
  4723  0023F4  EC4B  F01B         	call	_bcd_2_dec
  4724  0023F8  6E6A               	movwf	_setup_minute,c
  4725                           
  4726                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);
  4727  0023FA  505F               	movf	_hour,w,c
  4728  0023FC  EC4B  F01B         	call	_bcd_2_dec
  4729  002400  6E69               	movwf	_setup_hour,c
  4730                           
  4731                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);
  4732  002402  505C               	movf	_day,w,c
  4733  002404  EC4B  F01B         	call	_bcd_2_dec
  4734  002408  6E67               	movwf	_setup_day,c
  4735                           
  4736                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);
  4737  00240A  5061               	movf	_month,w,c
  4738  00240C  EC4B  F01B         	call	_bcd_2_dec
  4739  002410  6E6B               	movwf	_setup_month,c
  4740                           
  4741                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);
  4742  002412  506E               	movf	_year,w,c
  4743  002414  EC4B  F01B         	call	_bcd_2_dec
  4744  002418  6E6D               	movwf	_setup_year,c
  4745                           
  4746                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  4747  00241A  EC45  F00D         	call	_Initialize_Setup_Time_Screen	;wreg free
  4748                           
  4749                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  4750  00241E  EC0E  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  4751                           
  4752                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  4753  002422  0E01               	movlw	1
  4754  002424  0100               	movlb	0	; () banked
  4755  002426  6FFB               	movwf	_In_Time_Setup& (0+255),b
  4756                           
  4757                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  4758  002428  D03C               	goto	l9182
  4759  00242A                     l9146:
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;Setup_Time.c: 51: {
  4763                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  4764  00242A  EC58  F016         	call	_check_for_button_input	;wreg free
  4765  00242E  06E8               	decf	wreg,f,c
  4766  002430  A4D8               	btfss	status,2,c
  4767  002432  D037               	goto	l9182
  4768                           
  4769                           ;Setup_Time.c: 53: {
  4770                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  4771  002434  0E02               	movlw	2
  4772  002436  645E               	cpfsgt	_found,c
  4773  002438  D031               	goto	l9180
  4774  00243A  0E09               	movlw	9
  4775  00243C  605E               	cpfslt	_found,c
  4776  00243E  D02E               	goto	l9180
  4777                           
  4778                           ;Setup_Time.c: 56: {
  4779                           ;Setup_Time.c: 57: Do_Beep_Good();
  4780  002440  EC2C  F01D         	call	_Do_Beep_Good	;wreg free
  4781                           
  4782                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  4783  002444  0E03               	movlw	3
  4784  002446  185E               	xorwf	_found,w,c
  4785  002448  A4D8               	btfss	status,2,c
  4786  00244A  D003               	goto	l9158
  4787  00244C  EC41  F01C         	call	_Go_Prev_Field	;wreg free
  4788  002450  D000               	goto	l9158
  4789  002452                     l9158:
  4790                           
  4791                           ;Setup_Time.c: 59: if (found == 4) Go_Next_Field();
  4792  002452  0E04               	movlw	4
  4793  002454  185E               	xorwf	_found,w,c
  4794  002456  A4D8               	btfss	status,2,c
  4795  002458  D003               	goto	l9162
  4796  00245A  EC4D  F01C         	call	_Go_Next_Field	;wreg free
  4797  00245E  D000               	goto	l9162
  4798  002460                     l9162:
  4799                           
  4800                           ;Setup_Time.c: 60: if (found == 5) Do_Save_New_Time();
  4801  002460  0E05               	movlw	5
  4802  002462  185E               	xorwf	_found,w,c
  4803  002464  A4D8               	btfss	status,2,c
  4804  002466  D003               	goto	l9166
  4805  002468  EC92  F01C         	call	_Do_Save_New_Time	;wreg free
  4806  00246C  D000               	goto	l9166
  4807  00246E                     l9166:
  4808                           
  4809                           ;Setup_Time.c: 61: if (found == 6) Decrease_Time();
  4810  00246E  0E06               	movlw	6
  4811  002470  185E               	xorwf	_found,w,c
  4812  002472  A4D8               	btfss	status,2,c
  4813  002474  D003               	goto	l9170
  4814  002476  EC03  F015         	call	_Decrease_Time	;wreg free
  4815  00247A  D000               	goto	l9170
  4816  00247C                     l9170:
  4817                           
  4818                           ;Setup_Time.c: 62: if (found == 7) Increase_Time();
  4819  00247C  0E07               	movlw	7
  4820  00247E  185E               	xorwf	_found,w,c
  4821  002480  A4D8               	btfss	status,2,c
  4822  002482  D003               	goto	l9174
  4823  002484  ECBB  F014         	call	_Increase_Time	;wreg free
  4824  002488  D000               	goto	l9174
  4825  00248A                     l9174:
  4826                           
  4827                           ;Setup_Time.c: 63: if (found == 8) Exit_Time_Setup();
  4828  00248A  0E08               	movlw	8
  4829  00248C  185E               	xorwf	_found,w,c
  4830  00248E  A4D8               	btfss	status,2,c
  4831  002490  D003               	goto	l9178
  4832  002492  EC04  F01D         	call	_Exit_Time_Setup	;wreg free
  4833  002496  D000               	goto	l9178
  4834  002498                     l9178:
  4835                           
  4836                           ;Setup_Time.c: 64: found = 0xff;
  4837  002498  685E               	setf	_found,c
  4838                           
  4839                           ;Setup_Time.c: 65: }
  4840  00249A  D003               	goto	l9182
  4841  00249C                     l9180:
  4842                           
  4843                           ;Setup_Time.c: 66: else
  4844                           ;Setup_Time.c: 67: {
  4845                           ;Setup_Time.c: 68: Do_Beep_Bad();
  4846  00249C  EC33  F01D         	call	_Do_Beep_Bad	;wreg free
  4847  0024A0  D000               	goto	l9182
  4848  0024A2                     l9182:
  4849  0024A2  0100               	movlb	0	; () banked
  4850  0024A4  05FB               	decf	_In_Time_Setup& (0+255),w,b
  4851  0024A6  B4D8               	btfsc	status,2,c
  4852  0024A8  D7C0               	goto	l9146
  4853                           
  4854                           ; BSR set to: 0
  4855                           
  4856                           ; BSR set to: 0
  4857  0024AA  0012               	return		;funcret
  4858  0024AC                     __end_of_Do_Setup_Time:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           postdec1	equ	0xFE5
  4867                           plusw1	equ	0xFE3
  4868                           fsr1l	equ	0xFE1
  4869                           indf2	equ	0xFDF
  4870                           plusw2	equ	0xFDB
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function _Initialize_Setup_Time_Screen *****************
  4876 ;; Defined at:
  4877 ;;		line 189 in file "Setup_Time.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;		None
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;		None
  4882 ;; Return value:  Size  Location     Type
  4883 ;;		None               void
  4884 ;; Registers used:
  4885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;Total ram usage:        0 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:   10
  4898 ;; This function calls:
  4899 ;;		_drawtext
  4900 ;;		_fillRect
  4901 ;;		_fillScreen
  4902 ;;		_strcpy
  4903 ;; This function is called by:
  4904 ;;		_Do_Setup_Time
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text14
  4909  001A8A                     __ptext14:
  4910                           	opt stack 0
  4911  001A8A                     _Initialize_Setup_Time_Screen:
  4912                           	opt stack 19
  4913                           
  4914                           ;Setup_Time.c: 191: fillScreen(0x0000);
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;incstack = 0
  4918  001A8A  0E00               	movlw	0
  4919  001A8C  6E25               	movwf	fillScreen@color+1,c
  4920  001A8E  0E00               	movlw	0
  4921  001A90  6E24               	movwf	fillScreen@color,c
  4922  001A92  ECFE  F01B         	call	_fillScreen	;wreg free
  4923                           
  4924                           ;Setup_Time.c: 193: strcpy(txt, "ECE3301L Sp'22 S1\0");
  4925  001A96  C04D  F011         	movff	_txt,strcpy@to
  4926  001A9A  C04E  F012         	movff	_txt+1,strcpy@to+1
  4927  001A9E  0E15               	movlw	low STR_30
  4928  001AA0  6E13               	movwf	strcpy@from,c
  4929  001AA2  0EFF               	movlw	high STR_30
  4930  001AA4  6E14               	movwf	strcpy@from+1,c
  4931  001AA6  EC01  F01B         	call	_strcpy	;wreg free
  4932                           
  4933                           ;Setup_Time.c: 194: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4934  001AAA  0E01               	movlw	1
  4935  001AAC  6E39               	movwf	drawtext@y,c
  4936  001AAE  C04D  F03A         	movff	_txt,drawtext@_text
  4937  001AB2  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4938  001AB6  0EFF               	movlw	255
  4939  001AB8  6E3D               	movwf	drawtext@color+1,c
  4940  001ABA  683C               	setf	drawtext@color,c
  4941  001ABC  0E00               	movlw	0
  4942  001ABE  6E3F               	movwf	drawtext@bg+1,c
  4943  001AC0  0E00               	movlw	0
  4944  001AC2  6E3E               	movwf	drawtext@bg,c
  4945  001AC4  0E01               	movlw	1
  4946  001AC6  6E40               	movwf	drawtext@size,c
  4947  001AC8  0E01               	movlw	1
  4948  001ACA  ECBE  F00C         	call	_drawtext
  4949                           
  4950                           ;Setup_Time.c: 197: strcpy(txt, "Time Setup\0");
  4951  001ACE  C04D  F011         	movff	_txt,strcpy@to
  4952  001AD2  C04E  F012         	movff	_txt+1,strcpy@to+1
  4953  001AD6  0E88               	movlw	low STR_35
  4954  001AD8  6E13               	movwf	strcpy@from,c
  4955  001ADA  0EFF               	movlw	high STR_35
  4956  001ADC  6E14               	movwf	strcpy@from+1,c
  4957  001ADE  EC01  F01B         	call	_strcpy	;wreg free
  4958                           
  4959                           ;Setup_Time.c: 198: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  4960  001AE2  0E10               	movlw	16
  4961  001AE4  6E39               	movwf	drawtext@y,c
  4962  001AE6  C04D  F03A         	movff	_txt,drawtext@_text
  4963  001AEA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4964  001AEE  0EF8               	movlw	248
  4965  001AF0  6E3D               	movwf	drawtext@color+1,c
  4966  001AF2  0E1F               	movlw	31
  4967  001AF4  6E3C               	movwf	drawtext@color,c
  4968  001AF6  0E00               	movlw	0
  4969  001AF8  6E3F               	movwf	drawtext@bg+1,c
  4970  001AFA  0E00               	movlw	0
  4971  001AFC  6E3E               	movwf	drawtext@bg,c
  4972  001AFE  0E02               	movlw	2
  4973  001B00  6E40               	movwf	drawtext@size,c
  4974  001B02  0E04               	movlw	4
  4975  001B04  ECBE  F00C         	call	_drawtext
  4976                           
  4977                           ;Setup_Time.c: 200: strcpy(txt, "Time");
  4978  001B08  C04D  F011         	movff	_txt,strcpy@to
  4979  001B0C  C04E  F012         	movff	_txt+1,strcpy@to+1
  4980  001B10  0EB0               	movlw	low (STR_13+6)
  4981  001B12  6E13               	movwf	strcpy@from,c
  4982  001B14  0EFF               	movlw	high (STR_13+6)
  4983  001B16  6E14               	movwf	strcpy@from+1,c
  4984  001B18  EC01  F01B         	call	_strcpy	;wreg free
  4985                           
  4986                           ;Setup_Time.c: 201: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  4987  001B1C  0E28               	movlw	40
  4988  001B1E  6E39               	movwf	drawtext@y,c
  4989  001B20  C04D  F03A         	movff	_txt,drawtext@_text
  4990  001B24  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4991  001B28  0E00               	movlw	0
  4992  001B2A  6E3D               	movwf	drawtext@color+1,c
  4993  001B2C  0E1F               	movlw	31
  4994  001B2E  6E3C               	movwf	drawtext@color,c
  4995  001B30  0E00               	movlw	0
  4996  001B32  6E3F               	movwf	drawtext@bg+1,c
  4997  001B34  0E00               	movlw	0
  4998  001B36  6E3E               	movwf	drawtext@bg,c
  4999  001B38  0E01               	movlw	1
  5000  001B3A  6E40               	movwf	drawtext@size,c
  5001  001B3C  0E32               	movlw	50
  5002  001B3E  ECBE  F00C         	call	_drawtext
  5003                           
  5004                           ;Setup_Time.c: 203: fillRect(15-1, 52+16, 25,2,0x07FF);
  5005  001B42  0E44               	movlw	68
  5006  001B44  6E23               	movwf	fillRect@y,c
  5007  001B46  0E19               	movlw	25
  5008  001B48  6E24               	movwf	fillRect@w,c
  5009  001B4A  0E02               	movlw	2
  5010  001B4C  6E25               	movwf	fillRect@h,c
  5011  001B4E  0E07               	movlw	7
  5012  001B50  6E27               	movwf	fillRect@color+1,c
  5013  001B52  6826               	setf	fillRect@color,c
  5014  001B54  0E0E               	movlw	14
  5015  001B56  ECE6  F019         	call	_fillRect
  5016                           
  5017                           ;Setup_Time.c: 204: strcpy(txt, "Date");
  5018  001B5A  C04D  F011         	movff	_txt,strcpy@to
  5019  001B5E  C04E  F012         	movff	_txt+1,strcpy@to+1
  5020  001B62  0EDF               	movlw	low STR_12
  5021  001B64  6E13               	movwf	strcpy@from,c
  5022  001B66  0EFF               	movlw	high STR_12
  5023  001B68  6E14               	movwf	strcpy@from+1,c
  5024  001B6A  EC01  F01B         	call	_strcpy	;wreg free
  5025                           
  5026                           ;Setup_Time.c: 205: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5027  001B6E  0E47               	movlw	71
  5028  001B70  6E39               	movwf	drawtext@y,c
  5029  001B72  C04D  F03A         	movff	_txt,drawtext@_text
  5030  001B76  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  5031  001B7A  0EF8               	movlw	248
  5032  001B7C  6E3D               	movwf	drawtext@color+1,c
  5033  001B7E  0E00               	movlw	0
  5034  001B80  6E3C               	movwf	drawtext@color,c
  5035  001B82  0E00               	movlw	0
  5036  001B84  6E3F               	movwf	drawtext@bg+1,c
  5037  001B86  0E00               	movlw	0
  5038  001B88  6E3E               	movwf	drawtext@bg,c
  5039  001B8A  0E01               	movlw	1
  5040  001B8C  6E40               	movwf	drawtext@size,c
  5041  001B8E  0E32               	movlw	50
  5042  001B90  ECBE  F00C         	call	_drawtext
  5043  001B94  0012               	return		;funcret
  5044  001B96                     __end_of_Initialize_Setup_Time_Screen:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           postinc0	equ	0xFEE
  5051                           wreg	equ	0xFE8
  5052                           postdec1	equ	0xFE5
  5053                           plusw1	equ	0xFE3
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           plusw2	equ	0xFDB
  5057                           fsr2h	equ	0xFDA
  5058                           fsr2l	equ	0xFD9
  5059                           status	equ	0xFD8
  5060                           
  5061 ;; *************** function _Increase_Time *****************
  5062 ;; Defined at:
  5063 ;;		line 74 in file "Setup_Time.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;		None
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;		None
  5068 ;; Return value:  Size  Location     Type
  5069 ;;		None               void
  5070 ;; Registers used:
  5071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;Total ram usage:        0 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:   11
  5084 ;; This function calls:
  5085 ;;		_Update_Setup_Time_Screen
  5086 ;; This function is called by:
  5087 ;;		_Do_Setup_Time
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text15
  5092  002976                     __ptext15:
  5093                           	opt stack 0
  5094  002976                     _Increase_Time:
  5095                           	opt stack 18
  5096                           
  5097                           ;Setup_Time.c: 76: switch (Select_Field)
  5098                           
  5099                           ;incstack = 0
  5100  002976  D030               	goto	l8906
  5101  002978                     l8868:
  5102                           
  5103                           ;Setup_Time.c: 79: setup_hour++;
  5104  002978  2A69               	incf	_setup_hour,f,c
  5105                           
  5106                           ;Setup_Time.c: 80: if (setup_hour == 24) setup_hour = 0;
  5107  00297A  0E18               	movlw	24
  5108  00297C  1869               	xorwf	_setup_hour,w,c
  5109  00297E  A4D8               	btfss	status,2,c
  5110  002980  D03F               	goto	l8908
  5111  002982  0E00               	movlw	0
  5112  002984  6E69               	movwf	_setup_hour,c
  5113                           
  5114                           ;Setup_Time.c: 81: break;
  5115  002986  D03C               	goto	l8908
  5116  002988                     l8874:
  5117                           
  5118                           ;Setup_Time.c: 85: setup_minute++;
  5119  002988  2A6A               	incf	_setup_minute,f,c
  5120                           
  5121                           ;Setup_Time.c: 86: if (setup_minute == 60) setup_minute = 0;
  5122  00298A  0E3C               	movlw	60
  5123  00298C  186A               	xorwf	_setup_minute,w,c
  5124  00298E  A4D8               	btfss	status,2,c
  5125  002990  D037               	goto	l8908
  5126  002992  0E00               	movlw	0
  5127  002994  6E6A               	movwf	_setup_minute,c
  5128                           
  5129                           ;Setup_Time.c: 87: break;
  5130  002996  D034               	goto	l8908
  5131  002998                     l8880:
  5132                           
  5133                           ;Setup_Time.c: 91: setup_second++;
  5134  002998  2A6C               	incf	_setup_second,f,c
  5135                           
  5136                           ;Setup_Time.c: 92: if (setup_second == 60) setup_second = 0;
  5137  00299A  0E3C               	movlw	60
  5138  00299C  186C               	xorwf	_setup_second,w,c
  5139  00299E  A4D8               	btfss	status,2,c
  5140  0029A0  D02F               	goto	l8908
  5141  0029A2  0E00               	movlw	0
  5142  0029A4  6E6C               	movwf	_setup_second,c
  5143                           
  5144                           ;Setup_Time.c: 93: break;
  5145  0029A6  D02C               	goto	l8908
  5146  0029A8                     l8886:
  5147                           
  5148                           ;Setup_Time.c: 97: setup_month++;
  5149  0029A8  2A6B               	incf	_setup_month,f,c
  5150                           
  5151                           ;Setup_Time.c: 98: if (setup_month == 12) setup_month = 0;
  5152  0029AA  0E0C               	movlw	12
  5153  0029AC  186B               	xorwf	_setup_month,w,c
  5154  0029AE  A4D8               	btfss	status,2,c
  5155  0029B0  D027               	goto	l8908
  5156  0029B2  0E00               	movlw	0
  5157  0029B4  6E6B               	movwf	_setup_month,c
  5158                           
  5159                           ;Setup_Time.c: 99: break;
  5160  0029B6  D024               	goto	l8908
  5161  0029B8                     l8892:
  5162                           
  5163                           ;Setup_Time.c: 103: setup_day++;
  5164  0029B8  2A67               	incf	_setup_day,f,c
  5165                           
  5166                           ;Setup_Time.c: 104: if (setup_day == 31) setup_day = 0;
  5167  0029BA  0E1F               	movlw	31
  5168  0029BC  1867               	xorwf	_setup_day,w,c
  5169  0029BE  A4D8               	btfss	status,2,c
  5170  0029C0  D01F               	goto	l8908
  5171  0029C2  0E00               	movlw	0
  5172  0029C4  6E67               	movwf	_setup_day,c
  5173                           
  5174                           ;Setup_Time.c: 105: break;
  5175  0029C6  D01C               	goto	l8908
  5176  0029C8                     l8898:
  5177                           
  5178                           ;Setup_Time.c: 109: setup_year++;
  5179  0029C8  2A6D               	incf	_setup_year,f,c
  5180                           
  5181                           ;Setup_Time.c: 110: if (setup_year == 100) setup_year = 0;
  5182  0029CA  0E64               	movlw	100
  5183  0029CC  186D               	xorwf	_setup_year,w,c
  5184  0029CE  A4D8               	btfss	status,2,c
  5185  0029D0  D017               	goto	l8908
  5186  0029D2  0E00               	movlw	0
  5187  0029D4  6E6D               	movwf	_setup_year,c
  5188                           
  5189                           ;Setup_Time.c: 115: }
  5190                           
  5191                           ;Setup_Time.c: 114: break;
  5192                           
  5193                           ;Setup_Time.c: 113: default:
  5194                           
  5195                           ;Setup_Time.c: 111: break;
  5196  0029D6  D014               	goto	l8908
  5197  0029D8                     l8906:
  5198  0029D8  5054               	movf	_Select_Field,w,c
  5199                           
  5200                           ; Switch size 1, requested type "space"
  5201                           ; Number of cases is 6, Range of values is 0 to 5
  5202                           ; switch strategies available:
  5203                           ; Name         Instructions Cycles
  5204                           ; simple_byte           19    10 (average)
  5205                           ;	Chosen strategy is simple_byte
  5206  0029DA  0A00               	xorlw	0	; case 0
  5207  0029DC  B4D8               	btfsc	status,2,c
  5208  0029DE  D7CC               	goto	l8868
  5209  0029E0  0A01               	xorlw	1	; case 1
  5210  0029E2  B4D8               	btfsc	status,2,c
  5211  0029E4  D7D1               	goto	l8874
  5212  0029E6  0A03               	xorlw	3	; case 2
  5213  0029E8  B4D8               	btfsc	status,2,c
  5214  0029EA  D7D6               	goto	l8880
  5215  0029EC  0A01               	xorlw	1	; case 3
  5216  0029EE  B4D8               	btfsc	status,2,c
  5217  0029F0  D7DB               	goto	l8886
  5218  0029F2  0A07               	xorlw	7	; case 4
  5219  0029F4  B4D8               	btfsc	status,2,c
  5220  0029F6  D7E0               	goto	l8892
  5221  0029F8  0A01               	xorlw	1	; case 5
  5222  0029FA  B4D8               	btfsc	status,2,c
  5223  0029FC  D7E5               	goto	l8898
  5224  0029FE  D000               	goto	l8908
  5225  002A00                     l8908:
  5226                           
  5227                           ;Setup_Time.c: 116: Update_Setup_Time_Screen();
  5228  002A00  EC0E  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  5229  002A04  0012               	return		;funcret
  5230  002A06                     __end_of_Increase_Time:
  5231                           	opt stack 0
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           postinc0	equ	0xFEE
  5237                           wreg	equ	0xFE8
  5238                           postdec1	equ	0xFE5
  5239                           plusw1	equ	0xFE3
  5240                           fsr1l	equ	0xFE1
  5241                           indf2	equ	0xFDF
  5242                           plusw2	equ	0xFDB
  5243                           fsr2h	equ	0xFDA
  5244                           fsr2l	equ	0xFD9
  5245                           status	equ	0xFD8
  5246                           
  5247 ;; *************** function _Go_Prev_Field *****************
  5248 ;; Defined at:
  5249 ;;		line 168 in file "Setup_Time.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;		None
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;		None
  5254 ;; Return value:  Size  Location     Type
  5255 ;;		None               void
  5256 ;; Registers used:
  5257 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5258 ;; Tracked objects:
  5259 ;;		On entry : 0/0
  5260 ;;		On exit  : 0/0
  5261 ;;		Unchanged: 0/0
  5262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;Total ram usage:        0 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    9
  5270 ;; This function calls:
  5271 ;;		_Update_Setup_Screen_Cursor_Backward
  5272 ;; This function is called by:
  5273 ;;		_Do_Setup_Time
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text16
  5278  003882                     __ptext16:
  5279                           	opt stack 0
  5280  003882                     _Go_Prev_Field:
  5281                           	opt stack 20
  5282                           
  5283                           ;Setup_Time.c: 170: if (Select_Field == 0) Select_Field = 5;
  5284                           
  5285                           ;incstack = 0
  5286  003882  5054               	movf	_Select_Field,w,c
  5287  003884  A4D8               	btfss	status,2,c
  5288  003886  D003               	goto	l8804
  5289  003888  0E05               	movlw	5
  5290  00388A  6E54               	movwf	_Select_Field,c
  5291  00388C  D002               	goto	l8806
  5292  00388E                     l8804:
  5293                           
  5294                           ;Setup_Time.c: 171: else Select_Field--;
  5295  00388E  0654               	decf	_Select_Field,f,c
  5296  003890  D000               	goto	l8806
  5297  003892                     l8806:
  5298                           
  5299                           ;Setup_Time.c: 172: Update_Setup_Screen_Cursor_Backward(Select_Field);
  5300  003892  5054               	movf	_Select_Field,w,c
  5301  003894  EC5D  F008         	call	_Update_Setup_Screen_Cursor_Backward
  5302  003898  0012               	return		;funcret
  5303  00389A                     __end_of_Go_Prev_Field:
  5304                           	opt stack 0
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           postinc0	equ	0xFEE
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           plusw1	equ	0xFE3
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           plusw2	equ	0xFDB
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _Go_Next_Field *****************
  5321 ;; Defined at:
  5322 ;;		line 159 in file "Setup_Time.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;		None               void
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;Total ram usage:        0 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    9
  5343 ;; This function calls:
  5344 ;;		_Update_Setup_Screen_Cursor_Forward
  5345 ;; This function is called by:
  5346 ;;		_Do_Setup_Time
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text17
  5351  00389A                     __ptext17:
  5352                           	opt stack 0
  5353  00389A                     _Go_Next_Field:
  5354                           	opt stack 20
  5355                           
  5356                           ;Setup_Time.c: 162: Select_Field++;
  5357                           
  5358                           ;incstack = 0
  5359  00389A  2A54               	incf	_Select_Field,f,c
  5360                           
  5361                           ;Setup_Time.c: 163: if (Select_Field == 6) Select_Field = 0;
  5362  00389C  0E06               	movlw	6
  5363  00389E  1854               	xorwf	_Select_Field,w,c
  5364  0038A0  A4D8               	btfss	status,2,c
  5365  0038A2  D003               	goto	l8814
  5366  0038A4  0E00               	movlw	0
  5367  0038A6  6E54               	movwf	_Select_Field,c
  5368  0038A8  D000               	goto	l8814
  5369  0038AA                     l8814:
  5370                           
  5371                           ;Setup_Time.c: 164: Update_Setup_Screen_Cursor_Forward(Select_Field);
  5372  0038AA  5054               	movf	_Select_Field,w,c
  5373  0038AC  EC80  F007         	call	_Update_Setup_Screen_Cursor_Forward
  5374  0038B0  0012               	return		;funcret
  5375  0038B2                     __end_of_Go_Next_Field:
  5376                           	opt stack 0
  5377                           tblptru	equ	0xFF8
  5378                           tblptrh	equ	0xFF7
  5379                           tblptrl	equ	0xFF6
  5380                           tablat	equ	0xFF5
  5381                           postinc0	equ	0xFEE
  5382                           wreg	equ	0xFE8
  5383                           postdec1	equ	0xFE5
  5384                           plusw1	equ	0xFE3
  5385                           fsr1l	equ	0xFE1
  5386                           indf2	equ	0xFDF
  5387                           plusw2	equ	0xFDB
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function _Exit_Time_Setup *****************
  5393 ;; Defined at:
  5394 ;;		line 183 in file "Setup_Time.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;		None
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;		None
  5399 ;; Return value:  Size  Location     Type
  5400 ;;		None               void
  5401 ;; Registers used:
  5402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;Total ram usage:        0 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:   11
  5415 ;; This function calls:
  5416 ;;		_DS3231_Read_Time
  5417 ;;		_Initialize_Screen
  5418 ;; This function is called by:
  5419 ;;		_Do_Setup_Time
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           	psect	text18
  5424  003A08                     __ptext18:
  5425                           	opt stack 0
  5426  003A08                     _Exit_Time_Setup:
  5427                           	opt stack 18
  5428                           
  5429                           ;Setup_Time.c: 185: DS3231_Read_Time();
  5430                           
  5431                           ;incstack = 0
  5432  003A08  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  5433                           
  5434                           ;Setup_Time.c: 186: Initialize_Screen();
  5435  003A0C  EC29  F003         	call	_Initialize_Screen	;wreg free
  5436                           
  5437                           ;Setup_Time.c: 187: In_Time_Setup = 0;
  5438  003A10  0E00               	movlw	0
  5439  003A12  0100               	movlb	0	; () banked
  5440  003A14  6FFB               	movwf	_In_Time_Setup& (0+255),b
  5441                           
  5442                           ; BSR set to: 0
  5443  003A16  0012               	return		;funcret
  5444  003A18                     __end_of_Exit_Time_Setup:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           postinc0	equ	0xFEE
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           plusw1	equ	0xFE3
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           plusw2	equ	0xFDB
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function _Do_Save_New_Time *****************
  5462 ;; Defined at:
  5463 ;;		line 175 in file "Setup_Time.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;		None
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;		None
  5468 ;; Return value:  Size  Location     Type
  5469 ;;		None               void
  5470 ;; Registers used:
  5471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;Total ram usage:        0 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:   11
  5484 ;; This function calls:
  5485 ;;		_DS3231_Read_Time
  5486 ;;		_DS3231_Write_Time
  5487 ;;		_Initialize_Screen
  5488 ;; This function is called by:
  5489 ;;		_Do_Setup_Time
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text19
  5494  003924                     __ptext19:
  5495                           	opt stack 0
  5496  003924                     _Do_Save_New_Time:
  5497                           	opt stack 18
  5498                           
  5499                           ;Setup_Time.c: 177: DS3231_Write_Time();
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;incstack = 0
  5503  003924  EC4B  F015         	call	_DS3231_Write_Time	;wreg free
  5504                           
  5505                           ;Setup_Time.c: 178: DS3231_Read_Time();
  5506  003928  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  5507                           
  5508                           ;Setup_Time.c: 179: Initialize_Screen();
  5509  00392C  EC29  F003         	call	_Initialize_Screen	;wreg free
  5510                           
  5511                           ;Setup_Time.c: 180: In_Time_Setup = 0;
  5512  003930  0E00               	movlw	0
  5513  003932  0100               	movlb	0	; () banked
  5514  003934  6FFB               	movwf	_In_Time_Setup& (0+255),b
  5515                           
  5516                           ; BSR set to: 0
  5517  003936  0012               	return		;funcret
  5518  003938                     __end_of_Do_Save_New_Time:
  5519                           	opt stack 0
  5520                           tblptru	equ	0xFF8
  5521                           tblptrh	equ	0xFF7
  5522                           tblptrl	equ	0xFF6
  5523                           tablat	equ	0xFF5
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           postdec1	equ	0xFE5
  5527                           plusw1	equ	0xFE3
  5528                           fsr1l	equ	0xFE1
  5529                           indf2	equ	0xFDF
  5530                           plusw2	equ	0xFDB
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _DS3231_Write_Time *****************
  5536 ;; Defined at:
  5537 ;;		line 90 in file "I2C_Support.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  Address         1   53[COMRAM] unsigned char 
  5542 ;;  Device          1   52[COMRAM] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;		None               void
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;Total ram usage:        2 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    5
  5559 ;; This function calls:
  5560 ;;		_I2C_Start
  5561 ;;		_I2C_Stop
  5562 ;;		_I2C_Write
  5563 ;;		_dec_2_bcd
  5564 ;; This function is called by:
  5565 ;;		_Do_Save_New_Time
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text20
  5570  002A96                     __ptext20:
  5571                           	opt stack 0
  5572  002A96                     _DS3231_Write_Time:
  5573                           	opt stack 23
  5574                           
  5575                           ;I2C_Support.c: 92: char Device = 0x68;
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;incstack = 0
  5579  002A96  0E68               	movlw	104
  5580  002A98  6E35               	movwf	DS3231_Write_Time@Device,c
  5581                           
  5582                           ;I2C_Support.c: 93: char Address = 0x00;
  5583  002A9A  0E00               	movlw	0
  5584  002A9C  6E36               	movwf	DS3231_Write_Time@Address,c
  5585                           
  5586                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  5587  002A9E  506C               	movf	_setup_second,w,c
  5588  002AA0  EC04  F018         	call	_dec_2_bcd
  5589  002AA4  502E               	movf	?_dec_2_bcd,w,c
  5590  002AA6  6E63               	movwf	_second,c
  5591                           
  5592                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  5593  002AA8  506A               	movf	_setup_minute,w,c
  5594  002AAA  EC04  F018         	call	_dec_2_bcd
  5595  002AAE  502E               	movf	?_dec_2_bcd,w,c
  5596  002AB0  6E60               	movwf	_minute,c
  5597                           
  5598                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  5599  002AB2  5069               	movf	_setup_hour,w,c
  5600  002AB4  EC04  F018         	call	_dec_2_bcd
  5601  002AB8  502E               	movf	?_dec_2_bcd,w,c
  5602  002ABA  6E5F               	movwf	_hour,c
  5603                           
  5604                           ;I2C_Support.c: 97: dow = 0x01;
  5605  002ABC  0E01               	movlw	1
  5606  002ABE  6E5D               	movwf	_dow,c
  5607                           
  5608                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  5609  002AC0  5067               	movf	_setup_day,w,c
  5610  002AC2  EC04  F018         	call	_dec_2_bcd
  5611  002AC6  502E               	movf	?_dec_2_bcd,w,c
  5612  002AC8  6E5C               	movwf	_day,c
  5613                           
  5614                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  5615  002ACA  506B               	movf	_setup_month,w,c
  5616  002ACC  EC04  F018         	call	_dec_2_bcd
  5617  002AD0  502E               	movf	?_dec_2_bcd,w,c
  5618  002AD2  6E61               	movwf	_month,c
  5619                           
  5620                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  5621  002AD4  506D               	movf	_setup_year,w,c
  5622  002AD6  EC04  F018         	call	_dec_2_bcd
  5623  002ADA  502E               	movf	?_dec_2_bcd,w,c
  5624  002ADC  6E6E               	movwf	_year,c
  5625                           
  5626                           ;I2C_Support.c: 101: I2C_Start();
  5627  002ADE  ECF2  F01C         	call	_I2C_Start	;wreg free
  5628                           
  5629                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  5630  002AE2  5035               	movf	DS3231_Write_Time@Device,w,c
  5631  002AE4  2435               	addwf	DS3231_Write_Time@Device,w,c
  5632  002AE6  EC8C  F01A         	call	_I2C_Write
  5633                           
  5634                           ;I2C_Support.c: 103: I2C_Write(Address);
  5635  002AEA  5036               	movf	DS3231_Write_Time@Address,w,c
  5636  002AEC  EC8C  F01A         	call	_I2C_Write
  5637                           
  5638                           ;I2C_Support.c: 104: I2C_Write(second);
  5639  002AF0  5063               	movf	_second,w,c
  5640  002AF2  EC8C  F01A         	call	_I2C_Write
  5641                           
  5642                           ;I2C_Support.c: 105: I2C_Write(minute);
  5643  002AF6  5060               	movf	_minute,w,c
  5644  002AF8  EC8C  F01A         	call	_I2C_Write
  5645                           
  5646                           ;I2C_Support.c: 106: I2C_Write(hour);
  5647  002AFC  505F               	movf	_hour,w,c
  5648  002AFE  EC8C  F01A         	call	_I2C_Write
  5649                           
  5650                           ;I2C_Support.c: 107: I2C_Write(dow);
  5651  002B02  505D               	movf	_dow,w,c
  5652  002B04  EC8C  F01A         	call	_I2C_Write
  5653                           
  5654                           ;I2C_Support.c: 108: I2C_Write(day);
  5655  002B08  505C               	movf	_day,w,c
  5656  002B0A  EC8C  F01A         	call	_I2C_Write
  5657                           
  5658                           ;I2C_Support.c: 109: I2C_Write(month);
  5659  002B0E  5061               	movf	_month,w,c
  5660  002B10  EC8C  F01A         	call	_I2C_Write
  5661                           
  5662                           ;I2C_Support.c: 110: I2C_Write(year);
  5663  002B14  506E               	movf	_year,w,c
  5664  002B16  EC8C  F01A         	call	_I2C_Write
  5665                           
  5666                           ;I2C_Support.c: 111: I2C_Stop();
  5667  002B1A  ECE9  F01C         	call	_I2C_Stop	;wreg free
  5668  002B1E  0012               	return		;funcret
  5669  002B20                     __end_of_DS3231_Write_Time:
  5670                           	opt stack 0
  5671                           tblptru	equ	0xFF8
  5672                           tblptrh	equ	0xFF7
  5673                           tblptrl	equ	0xFF6
  5674                           tablat	equ	0xFF5
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           postdec1	equ	0xFE5
  5678                           plusw1	equ	0xFE3
  5679                           fsr1l	equ	0xFE1
  5680                           indf2	equ	0xFDF
  5681                           plusw2	equ	0xFDB
  5682                           fsr2h	equ	0xFDA
  5683                           fsr2l	equ	0xFD9
  5684                           status	equ	0xFD8
  5685                           
  5686 ;; *************** function _Decrease_Time *****************
  5687 ;; Defined at:
  5688 ;;		line 119 in file "Setup_Time.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;		None
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;		None
  5693 ;; Return value:  Size  Location     Type
  5694 ;;		None               void
  5695 ;; Registers used:
  5696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;Total ram usage:        0 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:   11
  5709 ;; This function calls:
  5710 ;;		_Update_Setup_Time_Screen
  5711 ;; This function is called by:
  5712 ;;		_Do_Setup_Time
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text21
  5717  002A06                     __ptext21:
  5718                           	opt stack 0
  5719  002A06                     _Decrease_Time:
  5720                           	opt stack 18
  5721                           
  5722                           ;Setup_Time.c: 121: switch (Select_Field)
  5723                           
  5724                           ;incstack = 0
  5725  002A06  D030               	goto	l8862
  5726  002A08                     l8824:
  5727                           
  5728                           ;Setup_Time.c: 124: if (setup_hour == 0) setup_hour = 23;
  5729  002A08  5069               	movf	_setup_hour,w,c
  5730  002A0A  A4D8               	btfss	status,2,c
  5731  002A0C  D003               	goto	l8828
  5732  002A0E  0E17               	movlw	23
  5733  002A10  6E69               	movwf	_setup_hour,c
  5734  002A12  D03E               	goto	l8864
  5735  002A14                     l8828:
  5736                           
  5737                           ;Setup_Time.c: 125: else --setup_hour;
  5738  002A14  0669               	decf	_setup_hour,f,c
  5739                           
  5740                           ;Setup_Time.c: 126: break;
  5741  002A16  D03C               	goto	l8864
  5742  002A18                     l8830:
  5743                           
  5744                           ;Setup_Time.c: 129: if (setup_minute == 0) setup_minute = 59;
  5745  002A18  506A               	movf	_setup_minute,w,c
  5746  002A1A  A4D8               	btfss	status,2,c
  5747  002A1C  D003               	goto	l8834
  5748  002A1E  0E3B               	movlw	59
  5749  002A20  6E6A               	movwf	_setup_minute,c
  5750  002A22  D036               	goto	l8864
  5751  002A24                     l8834:
  5752                           
  5753                           ;Setup_Time.c: 130: else --setup_minute;
  5754  002A24  066A               	decf	_setup_minute,f,c
  5755                           
  5756                           ;Setup_Time.c: 131: break;
  5757  002A26  D034               	goto	l8864
  5758  002A28                     l8836:
  5759                           
  5760                           ;Setup_Time.c: 134: if (setup_second == 0) setup_second = 59;
  5761  002A28  506C               	movf	_setup_second,w,c
  5762  002A2A  A4D8               	btfss	status,2,c
  5763  002A2C  D003               	goto	l8840
  5764  002A2E  0E3B               	movlw	59
  5765  002A30  6E6C               	movwf	_setup_second,c
  5766  002A32  D02E               	goto	l8864
  5767  002A34                     l8840:
  5768                           
  5769                           ;Setup_Time.c: 135: else --setup_second;
  5770  002A34  066C               	decf	_setup_second,f,c
  5771                           
  5772                           ;Setup_Time.c: 136: break;
  5773  002A36  D02C               	goto	l8864
  5774  002A38                     l8842:
  5775                           
  5776                           ;Setup_Time.c: 139: if (setup_month == 0) setup_month = 12;
  5777  002A38  506B               	movf	_setup_month,w,c
  5778  002A3A  A4D8               	btfss	status,2,c
  5779  002A3C  D003               	goto	l8846
  5780  002A3E  0E0C               	movlw	12
  5781  002A40  6E6B               	movwf	_setup_month,c
  5782  002A42  D026               	goto	l8864
  5783  002A44                     l8846:
  5784                           
  5785                           ;Setup_Time.c: 140: else --setup_month;
  5786  002A44  066B               	decf	_setup_month,f,c
  5787                           
  5788                           ;Setup_Time.c: 141: break;
  5789  002A46  D024               	goto	l8864
  5790  002A48                     l8848:
  5791                           
  5792                           ;Setup_Time.c: 144: if (setup_day == 0) setup_day = 31;
  5793  002A48  5067               	movf	_setup_day,w,c
  5794  002A4A  A4D8               	btfss	status,2,c
  5795  002A4C  D003               	goto	l8852
  5796  002A4E  0E1F               	movlw	31
  5797  002A50  6E67               	movwf	_setup_day,c
  5798  002A52  D01E               	goto	l8864
  5799  002A54                     l8852:
  5800                           
  5801                           ;Setup_Time.c: 145: else --setup_day;
  5802  002A54  0667               	decf	_setup_day,f,c
  5803                           
  5804                           ;Setup_Time.c: 146: break;
  5805  002A56  D01C               	goto	l8864
  5806  002A58                     l8854:
  5807                           
  5808                           ;Setup_Time.c: 149: if (setup_year == 0) setup_year = 100;
  5809  002A58  506D               	movf	_setup_year,w,c
  5810  002A5A  A4D8               	btfss	status,2,c
  5811  002A5C  D003               	goto	l8858
  5812  002A5E  0E64               	movlw	100
  5813  002A60  6E6D               	movwf	_setup_year,c
  5814  002A62  D016               	goto	l8864
  5815  002A64                     l8858:
  5816                           
  5817                           ;Setup_Time.c: 150: else --setup_year;
  5818  002A64  066D               	decf	_setup_year,f,c
  5819                           
  5820                           ;Setup_Time.c: 155: }
  5821                           
  5822                           ;Setup_Time.c: 154: break;
  5823                           
  5824                           ;Setup_Time.c: 153: default:
  5825                           
  5826                           ;Setup_Time.c: 151: break;
  5827  002A66  D014               	goto	l8864
  5828  002A68                     l8862:
  5829  002A68  5054               	movf	_Select_Field,w,c
  5830                           
  5831                           ; Switch size 1, requested type "space"
  5832                           ; Number of cases is 6, Range of values is 0 to 5
  5833                           ; switch strategies available:
  5834                           ; Name         Instructions Cycles
  5835                           ; simple_byte           19    10 (average)
  5836                           ;	Chosen strategy is simple_byte
  5837  002A6A  0A00               	xorlw	0	; case 0
  5838  002A6C  B4D8               	btfsc	status,2,c
  5839  002A6E  D7CC               	goto	l8824
  5840  002A70  0A01               	xorlw	1	; case 1
  5841  002A72  B4D8               	btfsc	status,2,c
  5842  002A74  D7D1               	goto	l8830
  5843  002A76  0A03               	xorlw	3	; case 2
  5844  002A78  B4D8               	btfsc	status,2,c
  5845  002A7A  D7D6               	goto	l8836
  5846  002A7C  0A01               	xorlw	1	; case 3
  5847  002A7E  B4D8               	btfsc	status,2,c
  5848  002A80  D7DB               	goto	l8842
  5849  002A82  0A07               	xorlw	7	; case 4
  5850  002A84  B4D8               	btfsc	status,2,c
  5851  002A86  D7E0               	goto	l8848
  5852  002A88  0A01               	xorlw	1	; case 5
  5853  002A8A  B4D8               	btfsc	status,2,c
  5854  002A8C  D7E5               	goto	l8854
  5855  002A8E  D000               	goto	l8864
  5856  002A90                     l8864:
  5857                           
  5858                           ;Setup_Time.c: 156: Update_Setup_Time_Screen();
  5859  002A90  EC0E  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  5860  002A94  0012               	return		;funcret
  5861  002A96                     __end_of_Decrease_Time:
  5862                           	opt stack 0
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           postdec1	equ	0xFE5
  5870                           plusw1	equ	0xFE3
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           plusw2	equ	0xFDB
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _Update_Setup_Time_Screen *****************
  5879 ;; Defined at:
  5880 ;;		line 208 in file "Setup_Time.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;		None               void
  5887 ;; Registers used:
  5888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : 0/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;Total ram usage:        0 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:   10
  5901 ;; This function calls:
  5902 ;;		___awdiv
  5903 ;;		___awmod
  5904 ;;		_drawtext
  5905 ;; This function is called by:
  5906 ;;		_Do_Setup_Time
  5907 ;;		_Increase_Time
  5908 ;;		_Decrease_Time
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text22
  5913  00141C                     __ptext22:
  5914                           	opt stack 0
  5915  00141C                     _Update_Setup_Time_Screen:
  5916                           	opt stack 19
  5917                           
  5918                           ;Setup_Time.c: 210: setup_time[0] = (setup_hour/10) + '0';
  5919                           
  5920                           ;incstack = 0
  5921  00141C  C069  F020         	movff	_setup_hour,___awdiv@dividend
  5922  001420  6A21               	clrf	___awdiv@dividend+1,c
  5923  001422  0E00               	movlw	0
  5924  001424  6E23               	movwf	___awdiv@divisor+1,c
  5925  001426  0E0A               	movlw	10
  5926  001428  6E22               	movwf	___awdiv@divisor,c
  5927  00142A  EC26  F014         	call	___awdiv	;wreg free
  5928  00142E  5020               	movf	?___awdiv,w,c
  5929  001430  0F30               	addlw	48
  5930  001432  0100               	movlb	0	; () banked
  5931  001434  6FA6               	movwf	_setup_time& (0+255),b
  5932                           
  5933                           ;Setup_Time.c: 211: setup_time[1] = (setup_hour%10) + '0';
  5934  001436  C069  F028         	movff	_setup_hour,___awmod@dividend
  5935  00143A  6A29               	clrf	___awmod@dividend+1,c
  5936  00143C  0E00               	movlw	0
  5937  00143E  6E2B               	movwf	___awmod@divisor+1,c
  5938  001440  0E0A               	movlw	10
  5939  001442  6E2A               	movwf	___awmod@divisor,c
  5940  001444  EC17  F016         	call	___awmod	;wreg free
  5941  001448  5028               	movf	?___awmod,w,c
  5942  00144A  0F30               	addlw	48
  5943  00144C  0100               	movlb	0	; () banked
  5944  00144E  6FA7               	movwf	(_setup_time+1)& (0+255),b
  5945                           
  5946                           ;Setup_Time.c: 213: setup_time[3] = (setup_minute/10) + '0';
  5947  001450  C06A  F020         	movff	_setup_minute,___awdiv@dividend
  5948  001454  6A21               	clrf	___awdiv@dividend+1,c
  5949  001456  0E00               	movlw	0
  5950  001458  6E23               	movwf	___awdiv@divisor+1,c
  5951  00145A  0E0A               	movlw	10
  5952  00145C  6E22               	movwf	___awdiv@divisor,c
  5953  00145E  EC26  F014         	call	___awdiv	;wreg free
  5954  001462  5020               	movf	?___awdiv,w,c
  5955  001464  0F30               	addlw	48
  5956  001466  0100               	movlb	0	; () banked
  5957  001468  6FA9               	movwf	(_setup_time+3)& (0+255),b
  5958                           
  5959                           ;Setup_Time.c: 214: setup_time[4] = (setup_minute%10) + '0';
  5960  00146A  C06A  F028         	movff	_setup_minute,___awmod@dividend
  5961  00146E  6A29               	clrf	___awmod@dividend+1,c
  5962  001470  0E00               	movlw	0
  5963  001472  6E2B               	movwf	___awmod@divisor+1,c
  5964  001474  0E0A               	movlw	10
  5965  001476  6E2A               	movwf	___awmod@divisor,c
  5966  001478  EC17  F016         	call	___awmod	;wreg free
  5967  00147C  5028               	movf	?___awmod,w,c
  5968  00147E  0F30               	addlw	48
  5969  001480  0100               	movlb	0	; () banked
  5970  001482  6FAA               	movwf	(_setup_time+4)& (0+255),b
  5971                           
  5972                           ;Setup_Time.c: 216: setup_time[6] = (setup_second/10) + '0';
  5973  001484  C06C  F020         	movff	_setup_second,___awdiv@dividend
  5974  001488  6A21               	clrf	___awdiv@dividend+1,c
  5975  00148A  0E00               	movlw	0
  5976  00148C  6E23               	movwf	___awdiv@divisor+1,c
  5977  00148E  0E0A               	movlw	10
  5978  001490  6E22               	movwf	___awdiv@divisor,c
  5979  001492  EC26  F014         	call	___awdiv	;wreg free
  5980  001496  5020               	movf	?___awdiv,w,c
  5981  001498  0F30               	addlw	48
  5982  00149A  0100               	movlb	0	; () banked
  5983  00149C  6FAC               	movwf	(_setup_time+6)& (0+255),b
  5984                           
  5985                           ;Setup_Time.c: 217: setup_time[7] = (setup_second%10) + '0';
  5986  00149E  C06C  F028         	movff	_setup_second,___awmod@dividend
  5987  0014A2  6A29               	clrf	___awmod@dividend+1,c
  5988  0014A4  0E00               	movlw	0
  5989  0014A6  6E2B               	movwf	___awmod@divisor+1,c
  5990  0014A8  0E0A               	movlw	10
  5991  0014AA  6E2A               	movwf	___awmod@divisor,c
  5992  0014AC  EC17  F016         	call	___awmod	;wreg free
  5993  0014B0  5028               	movf	?___awmod,w,c
  5994  0014B2  0F30               	addlw	48
  5995  0014B4  0100               	movlb	0	; () banked
  5996  0014B6  6FAD               	movwf	(_setup_time+7)& (0+255),b
  5997                           
  5998                           ;Setup_Time.c: 219: setup_date[0] = (setup_month/10) + '0';
  5999  0014B8  C06B  F020         	movff	_setup_month,___awdiv@dividend
  6000  0014BC  6A21               	clrf	___awdiv@dividend+1,c
  6001  0014BE  0E00               	movlw	0
  6002  0014C0  6E23               	movwf	___awdiv@divisor+1,c
  6003  0014C2  0E0A               	movlw	10
  6004  0014C4  6E22               	movwf	___awdiv@divisor,c
  6005  0014C6  EC26  F014         	call	___awdiv	;wreg free
  6006  0014CA  5020               	movf	?___awdiv,w,c
  6007  0014CC  0F30               	addlw	48
  6008  0014CE  0100               	movlb	0	; () banked
  6009  0014D0  6F9D               	movwf	_setup_date& (0+255),b
  6010                           
  6011                           ;Setup_Time.c: 220: setup_date[1] = (setup_month%10) + '0';
  6012  0014D2  C06B  F028         	movff	_setup_month,___awmod@dividend
  6013  0014D6  6A29               	clrf	___awmod@dividend+1,c
  6014  0014D8  0E00               	movlw	0
  6015  0014DA  6E2B               	movwf	___awmod@divisor+1,c
  6016  0014DC  0E0A               	movlw	10
  6017  0014DE  6E2A               	movwf	___awmod@divisor,c
  6018  0014E0  EC17  F016         	call	___awmod	;wreg free
  6019  0014E4  5028               	movf	?___awmod,w,c
  6020  0014E6  0F30               	addlw	48
  6021  0014E8  0100               	movlb	0	; () banked
  6022  0014EA  6F9E               	movwf	(_setup_date+1)& (0+255),b
  6023                           
  6024                           ;Setup_Time.c: 222: setup_date[3] = (setup_day/10) + '0';
  6025  0014EC  C067  F020         	movff	_setup_day,___awdiv@dividend
  6026  0014F0  6A21               	clrf	___awdiv@dividend+1,c
  6027  0014F2  0E00               	movlw	0
  6028  0014F4  6E23               	movwf	___awdiv@divisor+1,c
  6029  0014F6  0E0A               	movlw	10
  6030  0014F8  6E22               	movwf	___awdiv@divisor,c
  6031  0014FA  EC26  F014         	call	___awdiv	;wreg free
  6032  0014FE  5020               	movf	?___awdiv,w,c
  6033  001500  0F30               	addlw	48
  6034  001502  0100               	movlb	0	; () banked
  6035  001504  6FA0               	movwf	(_setup_date+3)& (0+255),b
  6036                           
  6037                           ;Setup_Time.c: 223: setup_date[4] = (setup_day%10) + '0';
  6038  001506  C067  F028         	movff	_setup_day,___awmod@dividend
  6039  00150A  6A29               	clrf	___awmod@dividend+1,c
  6040  00150C  0E00               	movlw	0
  6041  00150E  6E2B               	movwf	___awmod@divisor+1,c
  6042  001510  0E0A               	movlw	10
  6043  001512  6E2A               	movwf	___awmod@divisor,c
  6044  001514  EC17  F016         	call	___awmod	;wreg free
  6045  001518  5028               	movf	?___awmod,w,c
  6046  00151A  0F30               	addlw	48
  6047  00151C  0100               	movlb	0	; () banked
  6048  00151E  6FA1               	movwf	(_setup_date+4)& (0+255),b
  6049                           
  6050                           ;Setup_Time.c: 225: setup_date[6] = (setup_year/10) + '0';
  6051  001520  C06D  F020         	movff	_setup_year,___awdiv@dividend
  6052  001524  6A21               	clrf	___awdiv@dividend+1,c
  6053  001526  0E00               	movlw	0
  6054  001528  6E23               	movwf	___awdiv@divisor+1,c
  6055  00152A  0E0A               	movlw	10
  6056  00152C  6E22               	movwf	___awdiv@divisor,c
  6057  00152E  EC26  F014         	call	___awdiv	;wreg free
  6058  001532  5020               	movf	?___awdiv,w,c
  6059  001534  0F30               	addlw	48
  6060  001536  0100               	movlb	0	; () banked
  6061  001538  6FA3               	movwf	(_setup_date+6)& (0+255),b
  6062                           
  6063                           ;Setup_Time.c: 226: setup_date[7] = (setup_year%10) + '0';
  6064  00153A  C06D  F028         	movff	_setup_year,___awmod@dividend
  6065  00153E  6A29               	clrf	___awmod@dividend+1,c
  6066  001540  0E00               	movlw	0
  6067  001542  6E2B               	movwf	___awmod@divisor+1,c
  6068  001544  0E0A               	movlw	10
  6069  001546  6E2A               	movwf	___awmod@divisor,c
  6070  001548  EC17  F016         	call	___awmod	;wreg free
  6071  00154C  5028               	movf	?___awmod,w,c
  6072  00154E  0F30               	addlw	48
  6073  001550  0100               	movlb	0	; () banked
  6074  001552  6FA4               	movwf	(_setup_date+7)& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;Setup_Time.c: 228: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  6078  001554  0E34               	movlw	52
  6079  001556  6E39               	movwf	drawtext@y,c
  6080  001558  0EA6               	movlw	low _setup_time
  6081  00155A  6E3A               	movwf	drawtext@_text,c
  6082  00155C  0E00               	movlw	high _setup_time
  6083  00155E  6E3B               	movwf	drawtext@_text+1,c
  6084  001560  0E07               	movlw	7
  6085  001562  6E3D               	movwf	drawtext@color+1,c
  6086  001564  683C               	setf	drawtext@color,c
  6087  001566  0E00               	movlw	0
  6088  001568  6E3F               	movwf	drawtext@bg+1,c
  6089  00156A  0E00               	movlw	0
  6090  00156C  6E3E               	movwf	drawtext@bg,c
  6091  00156E  0E02               	movlw	2
  6092  001570  6E40               	movwf	drawtext@size,c
  6093  001572  0E0F               	movlw	15
  6094  001574  ECBE  F00C         	call	_drawtext
  6095                           
  6096                           ;Setup_Time.c: 229: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  6097  001578  0E52               	movlw	82
  6098  00157A  6E39               	movwf	drawtext@y,c
  6099  00157C  0E9D               	movlw	low _setup_date
  6100  00157E  6E3A               	movwf	drawtext@_text,c
  6101  001580  0E00               	movlw	high _setup_date
  6102  001582  6E3B               	movwf	drawtext@_text+1,c
  6103  001584  0E07               	movlw	7
  6104  001586  6E3D               	movwf	drawtext@color+1,c
  6105  001588  0EE0               	movlw	224
  6106  00158A  6E3C               	movwf	drawtext@color,c
  6107  00158C  0E00               	movlw	0
  6108  00158E  6E3F               	movwf	drawtext@bg+1,c
  6109  001590  0E00               	movlw	0
  6110  001592  6E3E               	movwf	drawtext@bg,c
  6111  001594  0E02               	movlw	2
  6112  001596  6E40               	movwf	drawtext@size,c
  6113  001598  0E0F               	movlw	15
  6114  00159A  ECBE  F00C         	call	_drawtext
  6115  00159E  0012               	return		;funcret
  6116  0015A0                     __end_of_Update_Setup_Time_Screen:
  6117                           	opt stack 0
  6118                           tblptru	equ	0xFF8
  6119                           tblptrh	equ	0xFF7
  6120                           tblptrl	equ	0xFF6
  6121                           tablat	equ	0xFF5
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           postdec1	equ	0xFE5
  6125                           plusw1	equ	0xFE3
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           plusw2	equ	0xFDB
  6129                           fsr2h	equ	0xFDA
  6130                           fsr2l	equ	0xFD9
  6131                           status	equ	0xFD8
  6132                           
  6133 ;; *************** function _Do_Setup_Heater_Temp *****************
  6134 ;; Defined at:
  6135 ;;		line 24 in file "Setup_Heater_Temp.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  2  389[None  ] int 
  6142 ;; Registers used:
  6143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;Total ram usage:        2 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:   12
  6156 ;; This function calls:
  6157 ;;		_Decrease_Heater_Temp
  6158 ;;		_Do_Beep_Bad
  6159 ;;		_Do_Beep_Good
  6160 ;;		_Do_Save_New_Heater_Temp
  6161 ;;		_Exit_Setup_Heater_Temp
  6162 ;;		_Increase_Heater_Temp
  6163 ;;		_Initialize_Setup_Heater_Screen
  6164 ;;		_Update_Setup_Heater_Screen
  6165 ;;		_check_for_button_input
  6166 ;; This function is called by:
  6167 ;;		_main
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           	psect	text23
  6172  0028E2                     __ptext23:
  6173                           	opt stack 0
  6174  0028E2                     _Do_Setup_Heater_Temp:
  6175                           	opt stack 18
  6176                           
  6177                           ;Setup_Heater_Temp.c: 27: In_Heater_Temp_Setup = 1;
  6178                           
  6179                           ;incstack = 0
  6180  0028E2  0E01               	movlw	1
  6181  0028E4  0100               	movlb	0	; () banked
  6182  0028E6  6FFA               	movwf	_In_Heater_Temp_Setup& (0+255),b
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;Setup_Heater_Temp.c: 28: setup_heater_set_temp = heater_set_temp;
  6186  0028E8  C06F  F068         	movff	_heater_set_temp,_setup_heater_set_temp
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;Setup_Heater_Temp.c: 29: Initialize_Setup_Heater_Screen();
  6190  0028EC  ECCD  F00E         	call	_Initialize_Setup_Heater_Screen	;wreg free
  6191                           
  6192                           ;Setup_Heater_Temp.c: 30: Update_Setup_Heater_Screen();
  6193  0028F0  ECD5  F013         	call	_Update_Setup_Heater_Screen	;wreg free
  6194                           
  6195                           ;Setup_Heater_Temp.c: 32: while (In_Heater_Temp_Setup == 1)
  6196  0028F4  D03B               	goto	l9280
  6197  0028F6                     l9250:
  6198                           
  6199                           ;Setup_Heater_Temp.c: 33: {
  6200                           ;Setup_Heater_Temp.c: 34: if (check_for_button_input() == 1)
  6201  0028F6  0E01               	movlw	1
  6202  0028F8  0101               	movlb	1	; () banked
  6203  0028FA  6F51               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  6204  0028FC  0E00               	movlw	0
  6205  0028FE  0101               	movlb	1	; () banked
  6206  002900  6F52               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  6207  002902  EC58  F016         	call	_check_for_button_input	;wreg free
  6208  002906  0101               	movlb	1	; () banked
  6209  002908  1951               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  6210  00290A  1152               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  6211  00290C  A4D8               	btfss	status,2,c
  6212  00290E  D02E               	goto	l9280
  6213                           
  6214                           ; BSR set to: 1
  6215                           ;Setup_Heater_Temp.c: 35: {
  6216                           ;Setup_Heater_Temp.c: 36: nec_ok = 0;
  6217  002910  0E00               	movlw	0
  6218  002912  0100               	movlb	0	; () banked
  6219  002914  6FF5               	movwf	(_nec_ok+1)& (0+255),b
  6220  002916  0E00               	movlw	0
  6221  002918  6FF4               	movwf	_nec_ok& (0+255),b
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;Setup_Heater_Temp.c: 37: if (found >= 5 && found <= 8)
  6225  00291A  0E04               	movlw	4
  6226  00291C  645E               	cpfsgt	_found,c
  6227  00291E  D023               	goto	l9278
  6228                           
  6229                           ; BSR set to: 0
  6230  002920  0E09               	movlw	9
  6231  002922  605E               	cpfslt	_found,c
  6232  002924  D020               	goto	l9278
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;Setup_Heater_Temp.c: 38: {
  6236                           ;Setup_Heater_Temp.c: 39: Do_Beep_Good();
  6237  002926  EC2C  F01D         	call	_Do_Beep_Good	;wreg free
  6238                           
  6239                           ;Setup_Heater_Temp.c: 41: if (found == 5) Do_Save_New_Heater_Temp();
  6240  00292A  0E05               	movlw	5
  6241  00292C  185E               	xorwf	_found,w,c
  6242  00292E  A4D8               	btfss	status,2,c
  6243  002930  D003               	goto	l9264
  6244  002932  ECA6  F01C         	call	_Do_Save_New_Heater_Temp	;wreg free
  6245  002936  D000               	goto	l9264
  6246  002938                     l9264:
  6247                           
  6248                           ;Setup_Heater_Temp.c: 42: if (found == 6) Decrease_Heater_Temp();
  6249  002938  0E06               	movlw	6
  6250  00293A  185E               	xorwf	_found,w,c
  6251  00293C  A4D8               	btfss	status,2,c
  6252  00293E  D003               	goto	l9268
  6253  002940  ECB0  F01C         	call	_Decrease_Heater_Temp	;wreg free
  6254  002944  D000               	goto	l9268
  6255  002946                     l9268:
  6256                           
  6257                           ;Setup_Heater_Temp.c: 43: if (found == 7) Increase_Heater_Temp();
  6258  002946  0E07               	movlw	7
  6259  002948  185E               	xorwf	_found,w,c
  6260  00294A  A4D8               	btfss	status,2,c
  6261  00294C  D003               	goto	l9272
  6262  00294E  EC9C  F01C         	call	_Increase_Heater_Temp	;wreg free
  6263  002952  D000               	goto	l9272
  6264  002954                     l9272:
  6265                           
  6266                           ;Setup_Heater_Temp.c: 44: if (found == 8) Exit_Setup_Heater_Temp();
  6267  002954  0E08               	movlw	8
  6268  002956  185E               	xorwf	_found,w,c
  6269  002958  A4D8               	btfss	status,2,c
  6270  00295A  D003               	goto	l9276
  6271  00295C  EC0C  F01D         	call	_Exit_Setup_Heater_Temp	;wreg free
  6272  002960  D000               	goto	l9276
  6273  002962                     l9276:
  6274                           
  6275                           ;Setup_Heater_Temp.c: 46: found = 0xff;
  6276  002962  685E               	setf	_found,c
  6277                           
  6278                           ;Setup_Heater_Temp.c: 47: }
  6279  002964  D003               	goto	l9280
  6280  002966                     l9278:
  6281                           
  6282                           ;Setup_Heater_Temp.c: 48: else
  6283                           ;Setup_Heater_Temp.c: 49: {
  6284                           ;Setup_Heater_Temp.c: 50: Do_Beep_Bad();
  6285  002966  EC33  F01D         	call	_Do_Beep_Bad	;wreg free
  6286  00296A  D000               	goto	l9280
  6287  00296C                     l9280:
  6288  00296C  0100               	movlb	0	; () banked
  6289  00296E  05FA               	decf	_In_Heater_Temp_Setup& (0+255),w,b
  6290  002970  B4D8               	btfsc	status,2,c
  6291  002972  D7C1               	goto	l9250
  6292                           
  6293                           ; BSR set to: 0
  6294                           
  6295                           ; BSR set to: 0
  6296  002974  0012               	return		;funcret
  6297  002976                     __end_of_Do_Setup_Heater_Temp:
  6298                           	opt stack 0
  6299                           tblptru	equ	0xFF8
  6300                           tblptrh	equ	0xFF7
  6301                           tblptrl	equ	0xFF6
  6302                           tablat	equ	0xFF5
  6303                           postinc0	equ	0xFEE
  6304                           wreg	equ	0xFE8
  6305                           postdec1	equ	0xFE5
  6306                           plusw1	equ	0xFE3
  6307                           fsr1l	equ	0xFE1
  6308                           indf2	equ	0xFDF
  6309                           plusw2	equ	0xFDB
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  6315 ;; Defined at:
  6316 ;;		line 92 in file "Setup_Heater_Temp.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;		None               void
  6323 ;; Registers used:
  6324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;Total ram usage:        0 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:   10
  6337 ;; This function calls:
  6338 ;;		_drawtext
  6339 ;;		_fillScreen
  6340 ;;		_strcpy
  6341 ;; This function is called by:
  6342 ;;		_Do_Setup_Heater_Temp
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text24
  6347  001D9A                     __ptext24:
  6348                           	opt stack 0
  6349  001D9A                     _Initialize_Setup_Heater_Screen:
  6350                           	opt stack 19
  6351                           
  6352                           ;Setup_Heater_Temp.c: 94: fillScreen(0x0000);
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;incstack = 0
  6356  001D9A  0E00               	movlw	0
  6357  001D9C  6E25               	movwf	fillScreen@color+1,c
  6358  001D9E  0E00               	movlw	0
  6359  001DA0  6E24               	movwf	fillScreen@color,c
  6360  001DA2  ECFE  F01B         	call	_fillScreen	;wreg free
  6361                           
  6362                           ;Setup_Heater_Temp.c: 96: strcpy(txt, "ECE3301L Sp'22 S1\0");
  6363  001DA6  C04D  F011         	movff	_txt,strcpy@to
  6364  001DAA  C04E  F012         	movff	_txt+1,strcpy@to+1
  6365  001DAE  0E15               	movlw	low STR_30
  6366  001DB0  6E13               	movwf	strcpy@from,c
  6367  001DB2  0EFF               	movlw	high STR_30
  6368  001DB4  6E14               	movwf	strcpy@from+1,c
  6369  001DB6  EC01  F01B         	call	_strcpy	;wreg free
  6370                           
  6371                           ;Setup_Heater_Temp.c: 97: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6372  001DBA  0E01               	movlw	1
  6373  001DBC  6E39               	movwf	drawtext@y,c
  6374  001DBE  C04D  F03A         	movff	_txt,drawtext@_text
  6375  001DC2  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  6376  001DC6  0EFF               	movlw	255
  6377  001DC8  6E3D               	movwf	drawtext@color+1,c
  6378  001DCA  683C               	setf	drawtext@color,c
  6379  001DCC  0E00               	movlw	0
  6380  001DCE  6E3F               	movwf	drawtext@bg+1,c
  6381  001DD0  0E00               	movlw	0
  6382  001DD2  6E3E               	movwf	drawtext@bg,c
  6383  001DD4  0E01               	movlw	1
  6384  001DD6  6E40               	movwf	drawtext@size,c
  6385  001DD8  0E01               	movlw	1
  6386  001DDA  ECBE  F00C         	call	_drawtext
  6387                           
  6388                           ;Setup_Heater_Temp.c: 99: strcpy(txt, "  Heater\0 ");
  6389  001DDE  C04D  F011         	movff	_txt,strcpy@to
  6390  001DE2  C04E  F012         	movff	_txt+1,strcpy@to+1
  6391  001DE6  0E94               	movlw	low STR_31
  6392  001DE8  6E13               	movwf	strcpy@from,c
  6393  001DEA  0EFF               	movlw	high STR_31
  6394  001DEC  6E14               	movwf	strcpy@from+1,c
  6395  001DEE  EC01  F01B         	call	_strcpy	;wreg free
  6396                           
  6397                           ;Setup_Heater_Temp.c: 100: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  6398  001DF2  0E1A               	movlw	26
  6399  001DF4  6E39               	movwf	drawtext@y,c
  6400  001DF6  C04D  F03A         	movff	_txt,drawtext@_text
  6401  001DFA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  6402  001DFE  0EFF               	movlw	255
  6403  001E00  6E3D               	movwf	drawtext@color+1,c
  6404  001E02  0EE0               	movlw	224
  6405  001E04  6E3C               	movwf	drawtext@color,c
  6406  001E06  0E00               	movlw	0
  6407  001E08  6E3F               	movwf	drawtext@bg+1,c
  6408  001E0A  0E00               	movlw	0
  6409  001E0C  6E3E               	movwf	drawtext@bg,c
  6410  001E0E  0E02               	movlw	2
  6411  001E10  6E40               	movwf	drawtext@size,c
  6412  001E12  0E01               	movlw	1
  6413  001E14  ECBE  F00C         	call	_drawtext
  6414                           
  6415                           ;Setup_Heater_Temp.c: 101: strcpy(txt, "  Setup\0 ");
  6416  001E18  C04D  F011         	movff	_txt,strcpy@to
  6417  001E1C  C04E  F012         	movff	_txt+1,strcpy@to+1
  6418  001E20  0EB5               	movlw	low STR_32
  6419  001E22  6E13               	movwf	strcpy@from,c
  6420  001E24  0EFF               	movlw	high STR_32
  6421  001E26  6E14               	movwf	strcpy@from+1,c
  6422  001E28  EC01  F01B         	call	_strcpy	;wreg free
  6423                           
  6424                           ;Setup_Heater_Temp.c: 102: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  6425  001E2C  0E29               	movlw	41
  6426  001E2E  6E39               	movwf	drawtext@y,c
  6427  001E30  C04D  F03A         	movff	_txt,drawtext@_text
  6428  001E34  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  6429  001E38  0EFF               	movlw	255
  6430  001E3A  6E3D               	movwf	drawtext@color+1,c
  6431  001E3C  0EE0               	movlw	224
  6432  001E3E  6E3C               	movwf	drawtext@color,c
  6433  001E40  0E00               	movlw	0
  6434  001E42  6E3F               	movwf	drawtext@bg+1,c
  6435  001E44  0E00               	movlw	0
  6436  001E46  6E3E               	movwf	drawtext@bg,c
  6437  001E48  0E02               	movlw	2
  6438  001E4A  6E40               	movwf	drawtext@size,c
  6439  001E4C  0E01               	movlw	1
  6440  001E4E  ECBE  F00C         	call	_drawtext
  6441                           
  6442                           ;Setup_Heater_Temp.c: 103: strcpy(txt, "Set Heater Temp");
  6443  001E52  C04D  F011         	movff	_txt,strcpy@to
  6444  001E56  C04E  F012         	movff	_txt+1,strcpy@to+1
  6445  001E5A  0E5E               	movlw	low STR_33
  6446  001E5C  6E13               	movwf	strcpy@from,c
  6447  001E5E  0EFF               	movlw	high STR_33
  6448  001E60  6E14               	movwf	strcpy@from+1,c
  6449  001E62  EC01  F01B         	call	_strcpy	;wreg free
  6450                           
  6451                           ;Setup_Heater_Temp.c: 104: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  6452  001E66  0E3C               	movlw	60
  6453  001E68  6E39               	movwf	drawtext@y,c
  6454  001E6A  C04D  F03A         	movff	_txt,drawtext@_text
  6455  001E6E  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  6456  001E72  0E07               	movlw	7
  6457  001E74  6E3D               	movwf	drawtext@color+1,c
  6458  001E76  683C               	setf	drawtext@color,c
  6459  001E78  0E00               	movlw	0
  6460  001E7A  6E3F               	movwf	drawtext@bg+1,c
  6461  001E7C  0E00               	movlw	0
  6462  001E7E  6E3E               	movwf	drawtext@bg,c
  6463  001E80  0E01               	movlw	1
  6464  001E82  6E40               	movwf	drawtext@size,c
  6465  001E84  0E0F               	movlw	15
  6466  001E86  ECBE  F00C         	call	_drawtext
  6467  001E8A  0012               	return		;funcret
  6468  001E8C                     __end_of_Initialize_Setup_Heater_Screen:
  6469                           	opt stack 0
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           postinc0	equ	0xFEE
  6475                           wreg	equ	0xFE8
  6476                           postdec1	equ	0xFE5
  6477                           plusw1	equ	0xFE3
  6478                           fsr1l	equ	0xFE1
  6479                           indf2	equ	0xFDF
  6480                           plusw2	equ	0xFDB
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _Increase_Heater_Temp *****************
  6486 ;; Defined at:
  6487 ;;		line 56 in file "Setup_Heater_Temp.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;		None               void
  6494 ;; Registers used:
  6495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:   11
  6508 ;; This function calls:
  6509 ;;		_Update_Setup_Heater_Screen
  6510 ;; This function is called by:
  6511 ;;		_Do_Setup_Heater_Temp
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text25
  6516  003938                     __ptext25:
  6517                           	opt stack 0
  6518  003938                     _Increase_Heater_Temp:
  6519                           	opt stack 18
  6520                           
  6521                           ;Setup_Heater_Temp.c: 60: setup_heater_set_temp++;
  6522                           
  6523                           ;incstack = 0
  6524  003938  2A68               	incf	_setup_heater_set_temp,f,c
  6525                           
  6526                           ;Setup_Heater_Temp.c: 61: if(setup_heater_set_temp > 120) setup_heater_set_temp = 120;
  6527  00393A  0E78               	movlw	120
  6528  00393C  6468               	cpfsgt	_setup_heater_set_temp,c
  6529  00393E  D003               	goto	l8774
  6530  003940  0E78               	movlw	120
  6531  003942  6E68               	movwf	_setup_heater_set_temp,c
  6532  003944  D000               	goto	l8774
  6533  003946                     l8774:
  6534                           
  6535                           ;Setup_Heater_Temp.c: 62: Update_Setup_Heater_Screen();
  6536  003946  ECD5  F013         	call	_Update_Setup_Heater_Screen	;wreg free
  6537  00394A  0012               	return		;funcret
  6538  00394C                     __end_of_Increase_Heater_Temp:
  6539                           	opt stack 0
  6540                           tblptru	equ	0xFF8
  6541                           tblptrh	equ	0xFF7
  6542                           tblptrl	equ	0xFF6
  6543                           tablat	equ	0xFF5
  6544                           postinc0	equ	0xFEE
  6545                           wreg	equ	0xFE8
  6546                           postdec1	equ	0xFE5
  6547                           plusw1	equ	0xFE3
  6548                           fsr1l	equ	0xFE1
  6549                           indf2	equ	0xFDF
  6550                           plusw2	equ	0xFDB
  6551                           fsr2h	equ	0xFDA
  6552                           fsr2l	equ	0xFD9
  6553                           status	equ	0xFD8
  6554                           
  6555 ;; *************** function _Exit_Setup_Heater_Temp *****************
  6556 ;; Defined at:
  6557 ;;		line 77 in file "Setup_Heater_Temp.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;		None
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;		None               void
  6564 ;; Registers used:
  6565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;Total ram usage:        0 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:   11
  6578 ;; This function calls:
  6579 ;;		_DS3231_Read_Time
  6580 ;;		_Initialize_Screen
  6581 ;; This function is called by:
  6582 ;;		_Do_Setup_Heater_Temp
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text26
  6587  003A18                     __ptext26:
  6588                           	opt stack 0
  6589  003A18                     _Exit_Setup_Heater_Temp:
  6590                           	opt stack 18
  6591                           
  6592                           ;Setup_Heater_Temp.c: 79: DS3231_Read_Time();
  6593                           
  6594                           ;incstack = 0
  6595  003A18  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  6596                           
  6597                           ;Setup_Heater_Temp.c: 80: Initialize_Screen();
  6598  003A1C  EC29  F003         	call	_Initialize_Screen	;wreg free
  6599                           
  6600                           ;Setup_Heater_Temp.c: 81: In_Heater_Temp_Setup = 0;
  6601  003A20  0E00               	movlw	0
  6602  003A22  0100               	movlb	0	; () banked
  6603  003A24  6FFA               	movwf	_In_Heater_Temp_Setup& (0+255),b
  6604                           
  6605                           ; BSR set to: 0
  6606  003A26  0012               	return		;funcret
  6607  003A28                     __end_of_Exit_Setup_Heater_Temp:
  6608                           	opt stack 0
  6609                           tblptru	equ	0xFF8
  6610                           tblptrh	equ	0xFF7
  6611                           tblptrl	equ	0xFF6
  6612                           tablat	equ	0xFF5
  6613                           postinc0	equ	0xFEE
  6614                           wreg	equ	0xFE8
  6615                           postdec1	equ	0xFE5
  6616                           plusw1	equ	0xFE3
  6617                           fsr1l	equ	0xFE1
  6618                           indf2	equ	0xFDF
  6619                           plusw2	equ	0xFDB
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function _Do_Save_New_Heater_Temp *****************
  6625 ;; Defined at:
  6626 ;;		line 84 in file "Setup_Heater_Temp.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;		None               void
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;Total ram usage:        0 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:   11
  6647 ;; This function calls:
  6648 ;;		_DS3231_Read_Time
  6649 ;;		_Initialize_Screen
  6650 ;; This function is called by:
  6651 ;;		_Do_Setup_Heater_Temp
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text27
  6656  00394C                     __ptext27:
  6657                           	opt stack 0
  6658  00394C                     _Do_Save_New_Heater_Temp:
  6659                           	opt stack 18
  6660                           
  6661                           ;Setup_Heater_Temp.c: 86: heater_set_temp = setup_heater_set_temp;
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;incstack = 0
  6665  00394C  C068  F06F         	movff	_setup_heater_set_temp,_heater_set_temp
  6666                           
  6667                           ;Setup_Heater_Temp.c: 87: DS3231_Read_Time();
  6668  003950  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  6669                           
  6670                           ;Setup_Heater_Temp.c: 88: Initialize_Screen();
  6671  003954  EC29  F003         	call	_Initialize_Screen	;wreg free
  6672                           
  6673                           ;Setup_Heater_Temp.c: 89: In_Heater_Temp_Setup = 0;
  6674  003958  0E00               	movlw	0
  6675  00395A  0100               	movlb	0	; () banked
  6676  00395C  6FFA               	movwf	_In_Heater_Temp_Setup& (0+255),b
  6677                           
  6678                           ; BSR set to: 0
  6679  00395E  0012               	return		;funcret
  6680  003960                     __end_of_Do_Save_New_Heater_Temp:
  6681                           	opt stack 0
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           postinc0	equ	0xFEE
  6687                           wreg	equ	0xFE8
  6688                           postdec1	equ	0xFE5
  6689                           plusw1	equ	0xFE3
  6690                           fsr1l	equ	0xFE1
  6691                           indf2	equ	0xFDF
  6692                           plusw2	equ	0xFDB
  6693                           fsr2h	equ	0xFDA
  6694                           fsr2l	equ	0xFD9
  6695                           status	equ	0xFD8
  6696                           
  6697 ;; *************** function _Decrease_Heater_Temp *****************
  6698 ;; Defined at:
  6699 ;;		line 66 in file "Setup_Heater_Temp.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;		None
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;		None
  6704 ;; Return value:  Size  Location     Type
  6705 ;;		None               void
  6706 ;; Registers used:
  6707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;Total ram usage:        0 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:   11
  6720 ;; This function calls:
  6721 ;;		_Update_Setup_Heater_Screen
  6722 ;; This function is called by:
  6723 ;;		_Do_Setup_Heater_Temp
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text28
  6728  003960                     __ptext28:
  6729                           	opt stack 0
  6730  003960                     _Decrease_Heater_Temp:
  6731                           	opt stack 18
  6732                           
  6733                           ;Setup_Heater_Temp.c: 70: --setup_heater_set_temp;
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;incstack = 0
  6737  003960  0668               	decf	_setup_heater_set_temp,f,c
  6738                           
  6739                           ;Setup_Heater_Temp.c: 71: if(setup_heater_set_temp < 50) setup_heater_set_temp = 50;
  6740  003962  0E32               	movlw	50
  6741  003964  6068               	cpfslt	_setup_heater_set_temp,c
  6742  003966  D003               	goto	l8766
  6743  003968  0E32               	movlw	50
  6744  00396A  6E68               	movwf	_setup_heater_set_temp,c
  6745  00396C  D000               	goto	l8766
  6746  00396E                     l8766:
  6747                           
  6748                           ;Setup_Heater_Temp.c: 72: Update_Setup_Heater_Screen();
  6749  00396E  ECD5  F013         	call	_Update_Setup_Heater_Screen	;wreg free
  6750  003972  0012               	return		;funcret
  6751  003974                     __end_of_Decrease_Heater_Temp:
  6752                           	opt stack 0
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           postinc0	equ	0xFEE
  6758                           wreg	equ	0xFE8
  6759                           postdec1	equ	0xFE5
  6760                           plusw1	equ	0xFE3
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           plusw2	equ	0xFDB
  6764                           fsr2h	equ	0xFDA
  6765                           fsr2l	equ	0xFD9
  6766                           status	equ	0xFD8
  6767                           
  6768 ;; *************** function _Update_Setup_Heater_Screen *****************
  6769 ;; Defined at:
  6770 ;;		line 107 in file "Setup_Heater_Temp.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  dc_char3        1    2[BANK0 ] unsigned char 
  6775 ;;  dc_char2        1    1[BANK0 ] unsigned char 
  6776 ;;  dc_char1        1    0[BANK0 ] unsigned char 
  6777 ;; Return value:  Size  Location     Type
  6778 ;;		None               void
  6779 ;; Registers used:
  6780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;Total ram usage:        3 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:   10
  6793 ;; This function calls:
  6794 ;;		___awdiv
  6795 ;;		___awmod
  6796 ;;		_drawtext
  6797 ;; This function is called by:
  6798 ;;		_Do_Setup_Heater_Temp
  6799 ;;		_Increase_Heater_Temp
  6800 ;;		_Decrease_Heater_Temp
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           	psect	text29
  6805  0027AA                     __ptext29:
  6806                           	opt stack 0
  6807  0027AA                     _Update_Setup_Heater_Screen:
  6808                           	opt stack 19
  6809                           
  6810                           ;Setup_Heater_Temp.c: 109: char dc_char1 = setup_heater_set_temp/100;
  6811                           
  6812                           ;incstack = 0
  6813  0027AA  C068  F020         	movff	_setup_heater_set_temp,___awdiv@dividend
  6814  0027AE  6A21               	clrf	___awdiv@dividend+1,c
  6815  0027B0  0E00               	movlw	0
  6816  0027B2  6E23               	movwf	___awdiv@divisor+1,c
  6817  0027B4  0E64               	movlw	100
  6818  0027B6  6E22               	movwf	___awdiv@divisor,c
  6819  0027B8  EC26  F014         	call	___awdiv	;wreg free
  6820  0027BC  5020               	movf	?___awdiv,w,c
  6821  0027BE  0100               	movlb	0	; () banked
  6822  0027C0  6FFD               	movwf	Update_Setup_Heater_Screen@dc_char1& (0+255),b
  6823                           
  6824                           ;Setup_Heater_Temp.c: 110: char dc_char2 = setup_heater_set_temp/10 %10;
  6825  0027C2  0E00               	movlw	0
  6826  0027C4  6E23               	movwf	___awdiv@divisor+1,c
  6827  0027C6  0E0A               	movlw	10
  6828  0027C8  6E22               	movwf	___awdiv@divisor,c
  6829  0027CA  C068  F020         	movff	_setup_heater_set_temp,___awdiv@dividend
  6830  0027CE  6A21               	clrf	___awdiv@dividend+1,c
  6831  0027D0  EC26  F014         	call	___awdiv	;wreg free
  6832  0027D4  C020  F028         	movff	?___awdiv,___awmod@dividend
  6833  0027D8  C021  F029         	movff	?___awdiv+1,___awmod@dividend+1
  6834  0027DC  0E00               	movlw	0
  6835  0027DE  6E2B               	movwf	___awmod@divisor+1,c
  6836  0027E0  0E0A               	movlw	10
  6837  0027E2  6E2A               	movwf	___awmod@divisor,c
  6838  0027E4  EC17  F016         	call	___awmod	;wreg free
  6839  0027E8  5028               	movf	?___awmod,w,c
  6840  0027EA  0100               	movlb	0	; () banked
  6841  0027EC  6FFE               	movwf	Update_Setup_Heater_Screen@dc_char2& (0+255),b
  6842                           
  6843                           ;Setup_Heater_Temp.c: 111: char dc_char3 = setup_heater_set_temp%10;
  6844  0027EE  C068  F028         	movff	_setup_heater_set_temp,___awmod@dividend
  6845  0027F2  6A29               	clrf	___awmod@dividend+1,c
  6846  0027F4  0E00               	movlw	0
  6847  0027F6  6E2B               	movwf	___awmod@divisor+1,c
  6848  0027F8  0E0A               	movlw	10
  6849  0027FA  6E2A               	movwf	___awmod@divisor,c
  6850  0027FC  EC17  F016         	call	___awmod	;wreg free
  6851  002800  5028               	movf	?___awmod,w,c
  6852  002802  0100               	movlb	0	; () banked
  6853  002804  6FFF               	movwf	Update_Setup_Heater_Screen@dc_char3& (0+255),b
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;Setup_Heater_Temp.c: 112: setup_heater_set_text[0] = dc_char1 + '0';
  6857  002806  0100               	movlb	0	; () banked
  6858  002808  51FD               	movf	Update_Setup_Heater_Screen@dc_char1& (0+255),w,b
  6859  00280A  0F30               	addlw	48
  6860  00280C  0100               	movlb	0	; () banked
  6861  00280E  6FC8               	movwf	_setup_heater_set_text& (0+255),b
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;Setup_Heater_Temp.c: 113: setup_heater_set_text[1] = dc_char2 + '0';
  6865  002810  0100               	movlb	0	; () banked
  6866  002812  51FE               	movf	Update_Setup_Heater_Screen@dc_char2& (0+255),w,b
  6867  002814  0F30               	addlw	48
  6868  002816  0100               	movlb	0	; () banked
  6869  002818  6FC9               	movwf	(_setup_heater_set_text+1)& (0+255),b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;Setup_Heater_Temp.c: 114: setup_heater_set_text[2] = dc_char3 + '0';
  6873  00281A  0100               	movlb	0	; () banked
  6874  00281C  51FF               	movf	Update_Setup_Heater_Screen@dc_char3& (0+255),w,b
  6875  00281E  0F30               	addlw	48
  6876  002820  0100               	movlb	0	; () banked
  6877  002822  6FCA               	movwf	(_setup_heater_set_text+2)& (0+255),b
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;Setup_Heater_Temp.c: 115: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  6881  002824  0E4A               	movlw	74
  6882  002826  6E39               	movwf	drawtext@y,c
  6883  002828  0EC8               	movlw	low _setup_heater_set_text
  6884  00282A  6E3A               	movwf	drawtext@_text,c
  6885  00282C  0E00               	movlw	high _setup_heater_set_text
  6886  00282E  6E3B               	movwf	drawtext@_text+1,c
  6887  002830  0EF8               	movlw	248
  6888  002832  6E3D               	movwf	drawtext@color+1,c
  6889  002834  0E00               	movlw	0
  6890  002836  6E3C               	movwf	drawtext@color,c
  6891  002838  0E00               	movlw	0
  6892  00283A  6E3F               	movwf	drawtext@bg+1,c
  6893  00283C  0E00               	movlw	0
  6894  00283E  6E3E               	movwf	drawtext@bg,c
  6895  002840  0E02               	movlw	2
  6896  002842  6E40               	movwf	drawtext@size,c
  6897  002844  0E28               	movlw	40
  6898  002846  ECBE  F00C         	call	_drawtext
  6899  00284A  0012               	return		;funcret
  6900  00284C                     __end_of_Update_Setup_Heater_Screen:
  6901                           	opt stack 0
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           postinc0	equ	0xFEE
  6907                           wreg	equ	0xFE8
  6908                           postdec1	equ	0xFE5
  6909                           plusw1	equ	0xFE3
  6910                           fsr1l	equ	0xFE1
  6911                           indf2	equ	0xFDF
  6912                           plusw2	equ	0xFDB
  6913                           fsr2h	equ	0xFDA
  6914                           fsr2l	equ	0xFD9
  6915                           status	equ	0xFD8
  6916                           
  6917 ;; *************** function _Do_Setup_Alarm_Time *****************
  6918 ;; Defined at:
  6919 ;;		line 24 in file "Setup_Alarm_Time.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;		None
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;		None
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  2  387[None  ] int 
  6926 ;; Registers used:
  6927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6937 ;;Total ram usage:        0 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:   12
  6940 ;; This function calls:
  6941 ;;		_DS3231_Read_Alarm_Time
  6942 ;;		_Decrease_Alarm_Time
  6943 ;;		_Do_Beep_Bad
  6944 ;;		_Do_Beep_Good
  6945 ;;		_Do_Save_New_Alarm_Time
  6946 ;;		_Exit_Setup_Alarm_Time
  6947 ;;		_Go_Next_Alarm_Field
  6948 ;;		_Go_Prev_Alarm_Field
  6949 ;;		_Increase_Alarm_Time
  6950 ;;		_Initialize_Setup_Alarm_Time_Screen
  6951 ;;		_Update_Setup_Alarm_Time_Screen
  6952 ;;		_bcd_2_dec
  6953 ;;		_check_for_button_input
  6954 ;; This function is called by:
  6955 ;;		_main
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text30
  6960  002634                     __ptext30:
  6961                           	opt stack 0
  6962  002634                     _Do_Setup_Alarm_Time:
  6963                           	opt stack 18
  6964                           
  6965                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  6966                           
  6967                           ;incstack = 0
  6968  002634  0E00               	movlw	0
  6969  002636  6E53               	movwf	_Select_Alarm_Field,c
  6970                           
  6971                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  6972  002638  0E01               	movlw	1
  6973  00263A  0100               	movlb	0	; () banked
  6974  00263C  6FF9               	movwf	_In_Alarm_Time_Setup& (0+255),b
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  6978  00263E  EC75  F019         	call	_DS3231_Read_Alarm_Time	;wreg free
  6979                           
  6980                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  6981  002642  5059               	movf	_alarm_second,w,c
  6982  002644  EC4B  F01B         	call	_bcd_2_dec
  6983  002648  6E59               	movwf	_alarm_second,c
  6984                           
  6985                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  6986  00264A  5058               	movf	_alarm_minute,w,c
  6987  00264C  EC4B  F01B         	call	_bcd_2_dec
  6988  002650  6E58               	movwf	_alarm_minute,c
  6989                           
  6990                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  6991  002652  5057               	movf	_alarm_hour,w,c
  6992  002654  EC4B  F01B         	call	_bcd_2_dec
  6993  002658  6E57               	movwf	_alarm_hour,c
  6994                           
  6995                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  6996  00265A  C059  F066         	movff	_alarm_second,_setup_alarm_second
  6997                           
  6998                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  6999  00265E  C058  F065         	movff	_alarm_minute,_setup_alarm_minute
  7000                           
  7001                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  7002  002662  C057  F064         	movff	_alarm_hour,_setup_alarm_hour
  7003                           
  7004                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  7005  002666  ECCB  F00D         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  7006                           
  7007                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  7008  00266A  EC89  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  7009                           
  7010                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  7011  00266E  D03C               	goto	l9240
  7012  002670                     l9204:
  7013                           
  7014                           ;Setup_Alarm_Time.c: 38: {
  7015                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  7016  002670  EC58  F016         	call	_check_for_button_input	;wreg free
  7017  002674  06E8               	decf	wreg,f,c
  7018  002676  A4D8               	btfss	status,2,c
  7019  002678  D037               	goto	l9240
  7020                           
  7021                           ;Setup_Alarm_Time.c: 40: {
  7022                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  7023  00267A  0E02               	movlw	2
  7024  00267C  645E               	cpfsgt	_found,c
  7025  00267E  D031               	goto	l9238
  7026  002680  0E09               	movlw	9
  7027  002682  605E               	cpfslt	_found,c
  7028  002684  D02E               	goto	l9238
  7029                           
  7030                           ;Setup_Alarm_Time.c: 42: {
  7031                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  7032  002686  EC2C  F01D         	call	_Do_Beep_Good	;wreg free
  7033                           
  7034                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  7035  00268A  0E03               	movlw	3
  7036  00268C  185E               	xorwf	_found,w,c
  7037  00268E  A4D8               	btfss	status,2,c
  7038  002690  D003               	goto	l9216
  7039  002692  EC59  F01C         	call	_Go_Prev_Alarm_Field	;wreg free
  7040  002696  D000               	goto	l9216
  7041  002698                     l9216:
  7042                           
  7043                           ;Setup_Alarm_Time.c: 46: if (found == 4) Go_Next_Alarm_Field();
  7044  002698  0E04               	movlw	4
  7045  00269A  185E               	xorwf	_found,w,c
  7046  00269C  A4D8               	btfss	status,2,c
  7047  00269E  D003               	goto	l9220
  7048  0026A0  EC65  F01C         	call	_Go_Next_Alarm_Field	;wreg free
  7049  0026A4  D000               	goto	l9220
  7050  0026A6                     l9220:
  7051                           
  7052                           ;Setup_Alarm_Time.c: 47: if (found == 5) Do_Save_New_Alarm_Time();
  7053  0026A6  0E05               	movlw	5
  7054  0026A8  185E               	xorwf	_found,w,c
  7055  0026AA  A4D8               	btfss	status,2,c
  7056  0026AC  D003               	goto	l9224
  7057  0026AE  EC71  F01C         	call	_Do_Save_New_Alarm_Time	;wreg free
  7058  0026B2  D000               	goto	l9224
  7059  0026B4                     l9224:
  7060                           
  7061                           ;Setup_Alarm_Time.c: 48: if (found == 6) Decrease_Alarm_Time();
  7062  0026B4  0E06               	movlw	6
  7063  0026B6  185E               	xorwf	_found,w,c
  7064  0026B8  A4D8               	btfss	status,2,c
  7065  0026BA  D003               	goto	l9228
  7066  0026BC  EC27  F019         	call	_Decrease_Alarm_Time	;wreg free
  7067  0026C0  D000               	goto	l9228
  7068  0026C2                     l9228:
  7069                           
  7070                           ;Setup_Alarm_Time.c: 49: if (found == 7) Increase_Alarm_Time();
  7071  0026C2  0E07               	movlw	7
  7072  0026C4  185E               	xorwf	_found,w,c
  7073  0026C6  A4D8               	btfss	status,2,c
  7074  0026C8  D003               	goto	l9232
  7075  0026CA  EC00  F019         	call	_Increase_Alarm_Time	;wreg free
  7076  0026CE  D000               	goto	l9232
  7077  0026D0                     l9232:
  7078                           
  7079                           ;Setup_Alarm_Time.c: 50: if (found == 8) Exit_Setup_Alarm_Time();
  7080  0026D0  0E08               	movlw	8
  7081  0026D2  185E               	xorwf	_found,w,c
  7082  0026D4  A4D8               	btfss	status,2,c
  7083  0026D6  D003               	goto	l9236
  7084  0026D8  EC14  F01D         	call	_Exit_Setup_Alarm_Time	;wreg free
  7085  0026DC  D000               	goto	l9236
  7086  0026DE                     l9236:
  7087                           
  7088                           ;Setup_Alarm_Time.c: 51: found = 0xff;
  7089  0026DE  685E               	setf	_found,c
  7090                           
  7091                           ;Setup_Alarm_Time.c: 52: }
  7092  0026E0  D003               	goto	l9240
  7093  0026E2                     l9238:
  7094                           
  7095                           ;Setup_Alarm_Time.c: 53: else
  7096                           ;Setup_Alarm_Time.c: 54: {
  7097                           ;Setup_Alarm_Time.c: 55: Do_Beep_Bad();
  7098  0026E2  EC33  F01D         	call	_Do_Beep_Bad	;wreg free
  7099  0026E6  D000               	goto	l9240
  7100  0026E8                     l9240:
  7101  0026E8  0100               	movlb	0	; () banked
  7102  0026EA  05F9               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  7103  0026EC  B4D8               	btfsc	status,2,c
  7104  0026EE  D7C0               	goto	l9204
  7105                           
  7106                           ; BSR set to: 0
  7107                           
  7108                           ; BSR set to: 0
  7109  0026F0  0012               	return		;funcret
  7110  0026F2                     __end_of_Do_Setup_Alarm_Time:
  7111                           	opt stack 0
  7112                           tblptru	equ	0xFF8
  7113                           tblptrh	equ	0xFF7
  7114                           tblptrl	equ	0xFF6
  7115                           tablat	equ	0xFF5
  7116                           postinc0	equ	0xFEE
  7117                           wreg	equ	0xFE8
  7118                           postdec1	equ	0xFE5
  7119                           plusw1	equ	0xFE3
  7120                           fsr1l	equ	0xFE1
  7121                           indf2	equ	0xFDF
  7122                           plusw2	equ	0xFDB
  7123                           fsr2h	equ	0xFDA
  7124                           fsr2l	equ	0xFD9
  7125                           status	equ	0xFD8
  7126                           
  7127 ;; *************** function _check_for_button_input *****************
  7128 ;; Defined at:
  7129 ;;		line 15 in file "utils.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;		None
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;  j               2   57[COMRAM] int 
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  1    wreg      unsigned char 
  7136 ;; Registers used:
  7137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7138 ;; Tracked objects:
  7139 ;;		On entry : 0/0
  7140 ;;		On exit  : 0/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7146 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7147 ;;Total ram usage:        3 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:    5
  7150 ;; This function calls:
  7151 ;;		_printf
  7152 ;; This function is called by:
  7153 ;;		_main
  7154 ;;		_Do_Setup_Alarm_Time
  7155 ;;		_Do_Setup_Heater_Temp
  7156 ;;		_Do_Setup_Time
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           	psect	text31
  7161  002CB0                     __ptext31:
  7162                           	opt stack 0
  7163  002CB0                     _check_for_button_input:
  7164                           	opt stack 25
  7165                           
  7166                           ;utils.c: 17: if (nec_ok == 1)
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;incstack = 0
  7170  002CB0  0100               	movlb	0	; () banked
  7171  002CB2  05F4               	decf	_nec_ok& (0+255),w,b
  7172  002CB4  0100               	movlb	0	; () banked
  7173  002CB6  11F5               	iorwf	(_nec_ok+1)& (0+255),w,b
  7174  002CB8  A4D8               	btfss	status,2,c
  7175  002CBA  D038               	goto	l1296
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;utils.c: 18: {
  7179                           ;utils.c: 19: nec_ok = 0;
  7180  002CBC  0E00               	movlw	0
  7181  002CBE  0100               	movlb	0	; () banked
  7182  002CC0  6FF5               	movwf	(_nec_ok+1)& (0+255),b
  7183  002CC2  0E00               	movlw	0
  7184  002CC4  6FF4               	movwf	_nec_ok& (0+255),b
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;utils.c: 22: INTCONbits.INT0IE = 1;
  7188  002CC6  88F2               	bsf	intcon,4,c	;volatile
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;utils.c: 23: INTCON2bits.INTEDG0 = 0;
  7192  002CC8  9CF1               	bcf	intcon2,6,c	;volatile
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;utils.c: 25: found = 0xff;
  7196  002CCA  685E               	setf	_found,c
  7197                           
  7198                           ;utils.c: 26: for (int j=0; j< 21; j++)
  7199  002CCC  0E00               	movlw	0
  7200  002CCE  6E3B               	movwf	check_for_button_input@j+1,c
  7201  002CD0  0E00               	movlw	0
  7202  002CD2  6E3A               	movwf	check_for_button_input@j,c
  7203  002CD4                     l8608:
  7204                           
  7205                           ; BSR set to: 0
  7206  002CD4  BE3B               	btfsc	check_for_button_input@j+1,7,c
  7207  002CD6  D008               	goto	l8612
  7208  002CD8  503B               	movf	check_for_button_input@j+1,w,c
  7209  002CDA  E11B               	bnz	l8622
  7210  002CDC  0E15               	movlw	21
  7211  002CDE  5C3A               	subwf	check_for_button_input@j,w,c
  7212  002CE0  B0D8               	btfsc	status,0,c
  7213  002CE2  D017               	goto	l8622
  7214  002CE4  D001               	goto	l8612
  7215                           
  7216                           ; BSR set to: 0
  7217  002CE6  D015               	goto	l8622
  7218  002CE8                     l8612:
  7219                           
  7220                           ;utils.c: 27: {
  7221                           ;utils.c: 28: if (Nec_code1 == array1[j])
  7222  002CE8  0E1F               	movlw	low _array1
  7223  002CEA  243A               	addwf	check_for_button_input@j,w,c
  7224  002CEC  6ED9               	movwf	fsr2l,c
  7225  002CEE  0E01               	movlw	high _array1
  7226  002CF0  203B               	addwfc	check_for_button_input@j+1,w,c
  7227  002CF2  6EDA               	movwf	fsr2h,c
  7228  002CF4  5051               	movf	_Nec_code1,w,c
  7229  002CF6  18DE               	xorwf	postinc2,w,c
  7230  002CF8  A4D8               	btfss	status,2,c
  7231  002CFA  D007               	goto	l8618
  7232                           
  7233                           ;utils.c: 29: {
  7234                           ;utils.c: 30: found = j;
  7235  002CFC  C03A  F05E         	movff	check_for_button_input@j,_found
  7236                           
  7237                           ;utils.c: 31: j = 21;
  7238  002D00  0E00               	movlw	0
  7239  002D02  6E3B               	movwf	check_for_button_input@j+1,c
  7240  002D04  0E15               	movlw	21
  7241  002D06  6E3A               	movwf	check_for_button_input@j,c
  7242  002D08  D000               	goto	l8618
  7243  002D0A                     l8618:
  7244  002D0A  4A3A               	infsnz	check_for_button_input@j,f,c
  7245  002D0C  2A3B               	incf	check_for_button_input@j+1,f,c
  7246  002D0E  D7E2               	goto	l8608
  7247  002D10  D000               	goto	l8622
  7248  002D12                     l8622:
  7249                           
  7250                           ;utils.c: 32: }
  7251                           ;utils.c: 33: }
  7252                           ;utils.c: 35: if (found == 0xff)
  7253  002D12  285E               	incf	_found,w,c
  7254  002D14  A4D8               	btfss	status,2,c
  7255  002D16  D008               	goto	l8632
  7256                           
  7257                           ;utils.c: 36: {
  7258                           ;utils.c: 37: printf ("Cannot find button \r\n");
  7259  002D18  0EAE               	movlw	low STR_38
  7260  002D1A  6E1D               	movwf	printf@f,c
  7261  002D1C  0EFE               	movlw	high STR_38
  7262  002D1E  6E1E               	movwf	printf@f+1,c
  7263  002D20  ECE9  F004         	call	_printf	;wreg free
  7264                           
  7265                           ;utils.c: 38: return (0);
  7266  002D24  0E00               	movlw	0
  7267                           
  7268                           ;utils.c: 39: }
  7269  002D26  D002               	goto	l1296
  7270  002D28                     l8632:
  7271                           
  7272                           ;utils.c: 40: else
  7273                           ;utils.c: 41: {
  7274                           ;utils.c: 42: return (1);
  7275  002D28  0E01               	movlw	1
  7276  002D2A  D000               	goto	l1296
  7277  002D2C                     l1296:
  7278  002D2C  0012               	return		;funcret
  7279  002D2E                     __end_of_check_for_button_input:
  7280                           	opt stack 0
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           intcon	equ	0xFF2
  7286                           intcon2	equ	0xFF1
  7287                           postinc0	equ	0xFEE
  7288                           wreg	equ	0xFE8
  7289                           postdec1	equ	0xFE5
  7290                           plusw1	equ	0xFE3
  7291                           fsr1l	equ	0xFE1
  7292                           indf2	equ	0xFDF
  7293                           postinc2	equ	0xFDE
  7294                           plusw2	equ	0xFDB
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function _bcd_2_dec *****************
  7300 ;; Defined at:
  7301 ;;		line 47 in file "utils.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  bcd             1    wreg     unsigned char 
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  bcd             1   20[COMRAM] unsigned char 
  7306 ;;  dec             2   18[COMRAM] int 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      unsigned char 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2, status,0, prodl, prodh
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;Total ram usage:        5 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    3
  7323 ;; This function calls:
  7324 ;;		Nothing
  7325 ;; This function is called by:
  7326 ;;		_Do_Setup_Alarm_Time
  7327 ;;		_Do_Setup_Time
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text32
  7332  003696                     __ptext32:
  7333                           	opt stack 0
  7334  003696                     _bcd_2_dec:
  7335                           	opt stack 26
  7336                           
  7337                           ;incstack = 0
  7338                           ;bcd_2_dec@bcd stored from wreg
  7339  003696  6E15               	movwf	bcd_2_dec@bcd,c
  7340                           
  7341                           ;utils.c: 49: int dec;
  7342                           ;utils.c: 50: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  7343  003698  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  7344  00369C  0E0F               	movlw	15
  7345  00369E  1611               	andwf	??_bcd_2_dec,f,c
  7346  0036A0  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  7347  0036A4  3A12               	swapf	??_bcd_2_dec+1,f,c
  7348  0036A6  0E0F               	movlw	15
  7349  0036A8  1612               	andwf	??_bcd_2_dec+1,f,c
  7350  0036AA  5012               	movf	??_bcd_2_dec+1,w,c
  7351  0036AC  0D0A               	mullw	10
  7352  0036AE  5011               	movf	??_bcd_2_dec,w,c
  7353  0036B0  24F3               	addwf	prodl,w,c
  7354  0036B2  6E13               	movwf	bcd_2_dec@dec,c
  7355  0036B4  0E00               	movlw	0
  7356  0036B6  20F4               	addwfc	prodh,w,c
  7357  0036B8  6E14               	movwf	bcd_2_dec@dec+1,c
  7358                           
  7359                           ;utils.c: 51: return dec;
  7360  0036BA  5013               	movf	bcd_2_dec@dec,w,c
  7361  0036BC  D000               	goto	l1300
  7362  0036BE                     l1300:
  7363  0036BE  0012               	return		;funcret
  7364  0036C0                     __end_of_bcd_2_dec:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           intcon2	equ	0xFF1
  7374                           postinc0	equ	0xFEE
  7375                           wreg	equ	0xFE8
  7376                           postdec1	equ	0xFE5
  7377                           plusw1	equ	0xFE3
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           plusw2	equ	0xFDB
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  7387 ;; Defined at:
  7388 ;;		line 149 in file "Setup_Alarm_Time.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;		None
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;		None               void
  7395 ;; Registers used:
  7396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;Total ram usage:        0 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:   10
  7409 ;; This function calls:
  7410 ;;		_drawtext
  7411 ;;		_fillRect
  7412 ;;		_fillScreen
  7413 ;;		_strcpy
  7414 ;; This function is called by:
  7415 ;;		_Do_Setup_Alarm_Time
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text33
  7420  001B96                     __ptext33:
  7421                           	opt stack 0
  7422  001B96                     _Initialize_Setup_Alarm_Time_Screen:
  7423                           	opt stack 19
  7424                           
  7425                           ;Setup_Alarm_Time.c: 151: fillScreen(0x0000);
  7426                           
  7427                           ;incstack = 0
  7428  001B96  0E00               	movlw	0
  7429  001B98  6E25               	movwf	fillScreen@color+1,c
  7430  001B9A  0E00               	movlw	0
  7431  001B9C  6E24               	movwf	fillScreen@color,c
  7432  001B9E  ECFE  F01B         	call	_fillScreen	;wreg free
  7433                           
  7434                           ;Setup_Alarm_Time.c: 153: strcpy(txt, "ECE3301L Sp'22 S1");
  7435  001BA2  C04D  F011         	movff	_txt,strcpy@to
  7436  001BA6  C04E  F012         	movff	_txt+1,strcpy@to+1
  7437  001BAA  0E3B               	movlw	low STR_25
  7438  001BAC  6E13               	movwf	strcpy@from,c
  7439  001BAE  0EFF               	movlw	high STR_25
  7440  001BB0  6E14               	movwf	strcpy@from+1,c
  7441  001BB2  EC01  F01B         	call	_strcpy	;wreg free
  7442                           
  7443                           ;Setup_Alarm_Time.c: 154: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7444  001BB6  0E01               	movlw	1
  7445  001BB8  6E39               	movwf	drawtext@y,c
  7446  001BBA  C04D  F03A         	movff	_txt,drawtext@_text
  7447  001BBE  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  7448  001BC2  0EFF               	movlw	255
  7449  001BC4  6E3D               	movwf	drawtext@color+1,c
  7450  001BC6  683C               	setf	drawtext@color,c
  7451  001BC8  0E00               	movlw	0
  7452  001BCA  6E3F               	movwf	drawtext@bg+1,c
  7453  001BCC  0E00               	movlw	0
  7454  001BCE  6E3E               	movwf	drawtext@bg,c
  7455  001BD0  0E01               	movlw	1
  7456  001BD2  6E40               	movwf	drawtext@size,c
  7457  001BD4  0E01               	movlw	1
  7458  001BD6  ECBE  F00C         	call	_drawtext
  7459                           
  7460                           ;Setup_Alarm_Time.c: 157: strcpy(txt, "  Alarm");
  7461  001BDA  C04D  F011         	movff	_txt,strcpy@to
  7462  001BDE  C04E  F012         	movff	_txt+1,strcpy@to+1
  7463  001BE2  0EC8               	movlw	low STR_26
  7464  001BE4  6E13               	movwf	strcpy@from,c
  7465  001BE6  0EFF               	movlw	high STR_26
  7466  001BE8  6E14               	movwf	strcpy@from+1,c
  7467  001BEA  EC01  F01B         	call	_strcpy	;wreg free
  7468                           
  7469                           ;Setup_Alarm_Time.c: 158: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  7470  001BEE  0E0B               	movlw	11
  7471  001BF0  6E39               	movwf	drawtext@y,c
  7472  001BF2  C04D  F03A         	movff	_txt,drawtext@_text
  7473  001BF6  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  7474  001BFA  0EF8               	movlw	248
  7475  001BFC  6E3D               	movwf	drawtext@color+1,c
  7476  001BFE  0E1F               	movlw	31
  7477  001C00  6E3C               	movwf	drawtext@color,c
  7478  001C02  0E00               	movlw	0
  7479  001C04  6E3F               	movwf	drawtext@bg+1,c
  7480  001C06  0E00               	movlw	0
  7481  001C08  6E3E               	movwf	drawtext@bg,c
  7482  001C0A  0E02               	movlw	2
  7483  001C0C  6E40               	movwf	drawtext@size,c
  7484  001C0E  0E06               	movlw	6
  7485  001C10  ECBE  F00C         	call	_drawtext
  7486                           
  7487                           ;Setup_Alarm_Time.c: 159: strcpy(txt, "  Setup");
  7488  001C14  C04D  F011         	movff	_txt,strcpy@to
  7489  001C18  C04E  F012         	movff	_txt+1,strcpy@to+1
  7490  001C1C  0ED0               	movlw	low STR_27
  7491  001C1E  6E13               	movwf	strcpy@from,c
  7492  001C20  0EFF               	movlw	high STR_27
  7493  001C22  6E14               	movwf	strcpy@from+1,c
  7494  001C24  EC01  F01B         	call	_strcpy	;wreg free
  7495                           
  7496                           ;Setup_Alarm_Time.c: 160: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  7497  001C28  0E1A               	movlw	26
  7498  001C2A  6E39               	movwf	drawtext@y,c
  7499  001C2C  C04D  F03A         	movff	_txt,drawtext@_text
  7500  001C30  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  7501  001C34  0EF8               	movlw	248
  7502  001C36  6E3D               	movwf	drawtext@color+1,c
  7503  001C38  0E1F               	movlw	31
  7504  001C3A  6E3C               	movwf	drawtext@color,c
  7505  001C3C  0E00               	movlw	0
  7506  001C3E  6E3F               	movwf	drawtext@bg+1,c
  7507  001C40  0E00               	movlw	0
  7508  001C42  6E3E               	movwf	drawtext@bg,c
  7509  001C44  0E02               	movlw	2
  7510  001C46  6E40               	movwf	drawtext@size,c
  7511  001C48  0E06               	movlw	6
  7512  001C4A  ECBE  F00C         	call	_drawtext
  7513                           
  7514                           ;Setup_Alarm_Time.c: 162: strcpy(txt, "Time");
  7515  001C4E  C04D  F011         	movff	_txt,strcpy@to
  7516  001C52  C04E  F012         	movff	_txt+1,strcpy@to+1
  7517  001C56  0EB0               	movlw	low (STR_13+6)
  7518  001C58  6E13               	movwf	strcpy@from,c
  7519  001C5A  0EFF               	movlw	high (STR_13+6)
  7520  001C5C  6E14               	movwf	strcpy@from+1,c
  7521  001C5E  EC01  F01B         	call	_strcpy	;wreg free
  7522                           
  7523                           ;Setup_Alarm_Time.c: 163: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  7524  001C62  0E28               	movlw	40
  7525  001C64  6E39               	movwf	drawtext@y,c
  7526  001C66  C04D  F03A         	movff	_txt,drawtext@_text
  7527  001C6A  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  7528  001C6E  0E00               	movlw	0
  7529  001C70  6E3D               	movwf	drawtext@color+1,c
  7530  001C72  0E1F               	movlw	31
  7531  001C74  6E3C               	movwf	drawtext@color,c
  7532  001C76  0E00               	movlw	0
  7533  001C78  6E3F               	movwf	drawtext@bg+1,c
  7534  001C7A  0E00               	movlw	0
  7535  001C7C  6E3E               	movwf	drawtext@bg,c
  7536  001C7E  0E01               	movlw	1
  7537  001C80  6E40               	movwf	drawtext@size,c
  7538  001C82  0E32               	movlw	50
  7539  001C84  ECBE  F00C         	call	_drawtext
  7540                           
  7541                           ;Setup_Alarm_Time.c: 164: fillRect(15-1, 52+16, 25,2,0x07FF);
  7542  001C88  0E44               	movlw	68
  7543  001C8A  6E23               	movwf	fillRect@y,c
  7544  001C8C  0E19               	movlw	25
  7545  001C8E  6E24               	movwf	fillRect@w,c
  7546  001C90  0E02               	movlw	2
  7547  001C92  6E25               	movwf	fillRect@h,c
  7548  001C94  0E07               	movlw	7
  7549  001C96  6E27               	movwf	fillRect@color+1,c
  7550  001C98  6826               	setf	fillRect@color,c
  7551  001C9A  0E0E               	movlw	14
  7552  001C9C  ECE6  F019         	call	_fillRect
  7553  001CA0  0012               	return		;funcret
  7554  001CA2                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  7555                           	opt stack 0
  7556                           tblptru	equ	0xFF8
  7557                           tblptrh	equ	0xFF7
  7558                           tblptrl	equ	0xFF6
  7559                           tablat	equ	0xFF5
  7560                           prodh	equ	0xFF4
  7561                           prodl	equ	0xFF3
  7562                           intcon	equ	0xFF2
  7563                           intcon2	equ	0xFF1
  7564                           postinc0	equ	0xFEE
  7565                           wreg	equ	0xFE8
  7566                           postdec1	equ	0xFE5
  7567                           plusw1	equ	0xFE3
  7568                           fsr1l	equ	0xFE1
  7569                           indf2	equ	0xFDF
  7570                           postinc2	equ	0xFDE
  7571                           plusw2	equ	0xFDB
  7572                           fsr2h	equ	0xFDA
  7573                           fsr2l	equ	0xFD9
  7574                           status	equ	0xFD8
  7575                           
  7576 ;; *************** function _Increase_Alarm_Time *****************
  7577 ;; Defined at:
  7578 ;;		line 61 in file "Setup_Alarm_Time.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;		None
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;		None
  7583 ;; Return value:  Size  Location     Type
  7584 ;;		None               void
  7585 ;; Registers used:
  7586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7596 ;;Total ram usage:        0 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:   11
  7599 ;; This function calls:
  7600 ;;		_Update_Setup_Alarm_Time_Screen
  7601 ;; This function is called by:
  7602 ;;		_Do_Setup_Alarm_Time
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text34
  7607  003200                     __ptext34:
  7608                           	opt stack 0
  7609  003200                     _Increase_Alarm_Time:
  7610                           	opt stack 18
  7611                           
  7612                           ;Setup_Alarm_Time.c: 63: switch (Select_Alarm_Field)
  7613                           
  7614                           ;incstack = 0
  7615  003200  D018               	goto	l8724
  7616  003202                     l8704:
  7617                           
  7618                           ;Setup_Alarm_Time.c: 66: setup_alarm_hour++;
  7619  003202  2A64               	incf	_setup_alarm_hour,f,c
  7620                           
  7621                           ;Setup_Alarm_Time.c: 67: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  7622  003204  0E18               	movlw	24
  7623  003206  1864               	xorwf	_setup_alarm_hour,w,c
  7624  003208  A4D8               	btfss	status,2,c
  7625  00320A  D01E               	goto	l8726
  7626  00320C  0E00               	movlw	0
  7627  00320E  6E64               	movwf	_setup_alarm_hour,c
  7628                           
  7629                           ;Setup_Alarm_Time.c: 68: break;
  7630  003210  D01B               	goto	l8726
  7631  003212                     l8710:
  7632                           
  7633                           ;Setup_Alarm_Time.c: 72: setup_alarm_minute++;
  7634  003212  2A65               	incf	_setup_alarm_minute,f,c
  7635                           
  7636                           ;Setup_Alarm_Time.c: 73: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  7637  003214  0E3C               	movlw	60
  7638  003216  1865               	xorwf	_setup_alarm_minute,w,c
  7639  003218  A4D8               	btfss	status,2,c
  7640  00321A  D016               	goto	l8726
  7641  00321C  0E00               	movlw	0
  7642  00321E  6E65               	movwf	_setup_alarm_minute,c
  7643                           
  7644                           ;Setup_Alarm_Time.c: 74: break;
  7645  003220  D013               	goto	l8726
  7646  003222                     l8716:
  7647                           
  7648                           ;Setup_Alarm_Time.c: 78: setup_alarm_second++;
  7649  003222  2A66               	incf	_setup_alarm_second,f,c
  7650                           
  7651                           ;Setup_Alarm_Time.c: 79: if (setup_alarm_second == 60) setup_alarm_second = 0;
  7652  003224  0E3C               	movlw	60
  7653  003226  1866               	xorwf	_setup_alarm_second,w,c
  7654  003228  A4D8               	btfss	status,2,c
  7655  00322A  D00E               	goto	l8726
  7656  00322C  0E00               	movlw	0
  7657  00322E  6E66               	movwf	_setup_alarm_second,c
  7658                           
  7659                           ;Setup_Alarm_Time.c: 84: }
  7660                           
  7661                           ;Setup_Alarm_Time.c: 83: break;
  7662                           
  7663                           ;Setup_Alarm_Time.c: 82: default:
  7664                           
  7665                           ;Setup_Alarm_Time.c: 80: break;
  7666  003230  D00B               	goto	l8726
  7667  003232                     l8724:
  7668  003232  5053               	movf	_Select_Alarm_Field,w,c
  7669                           
  7670                           ; Switch size 1, requested type "space"
  7671                           ; Number of cases is 3, Range of values is 0 to 2
  7672                           ; switch strategies available:
  7673                           ; Name         Instructions Cycles
  7674                           ; simple_byte           10     6 (average)
  7675                           ;	Chosen strategy is simple_byte
  7676  003234  0A00               	xorlw	0	; case 0
  7677  003236  B4D8               	btfsc	status,2,c
  7678  003238  D7E4               	goto	l8704
  7679  00323A  0A01               	xorlw	1	; case 1
  7680  00323C  B4D8               	btfsc	status,2,c
  7681  00323E  D7E9               	goto	l8710
  7682  003240  0A03               	xorlw	3	; case 2
  7683  003242  B4D8               	btfsc	status,2,c
  7684  003244  D7EE               	goto	l8716
  7685  003246  D000               	goto	l8726
  7686  003248                     l8726:
  7687                           
  7688                           ;Setup_Alarm_Time.c: 85: Update_Setup_Alarm_Time_Screen();
  7689  003248  EC89  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  7690  00324C  0012               	return		;funcret
  7691  00324E                     __end_of_Increase_Alarm_Time:
  7692                           	opt stack 0
  7693                           tblptru	equ	0xFF8
  7694                           tblptrh	equ	0xFF7
  7695                           tblptrl	equ	0xFF6
  7696                           tablat	equ	0xFF5
  7697                           prodh	equ	0xFF4
  7698                           prodl	equ	0xFF3
  7699                           intcon	equ	0xFF2
  7700                           intcon2	equ	0xFF1
  7701                           postinc0	equ	0xFEE
  7702                           wreg	equ	0xFE8
  7703                           postdec1	equ	0xFE5
  7704                           plusw1	equ	0xFE3
  7705                           fsr1l	equ	0xFE1
  7706                           indf2	equ	0xFDF
  7707                           postinc2	equ	0xFDE
  7708                           plusw2	equ	0xFDB
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713 ;; *************** function _Go_Prev_Alarm_Field *****************
  7714 ;; Defined at:
  7715 ;;		line 126 in file "Setup_Alarm_Time.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;		None
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;		None
  7720 ;; Return value:  Size  Location     Type
  7721 ;;		None               void
  7722 ;; Registers used:
  7723 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7724 ;; Tracked objects:
  7725 ;;		On entry : 0/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;Total ram usage:        0 bytes
  7734 ;; Hardware stack levels used:    1
  7735 ;; Hardware stack levels required when called:    9
  7736 ;; This function calls:
  7737 ;;		_Update_Setup_Screen_Cursor_Backward
  7738 ;; This function is called by:
  7739 ;;		_Do_Setup_Alarm_Time
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           	psect	text35
  7744  0038B2                     __ptext35:
  7745                           	opt stack 0
  7746  0038B2                     _Go_Prev_Alarm_Field:
  7747                           	opt stack 20
  7748                           
  7749                           ;Setup_Alarm_Time.c: 128: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  7750                           
  7751                           ;incstack = 0
  7752  0038B2  5053               	movf	_Select_Alarm_Field,w,c
  7753  0038B4  A4D8               	btfss	status,2,c
  7754  0038B6  D003               	goto	l8658
  7755  0038B8  0E02               	movlw	2
  7756  0038BA  6E53               	movwf	_Select_Alarm_Field,c
  7757  0038BC  D002               	goto	l8660
  7758  0038BE                     l8658:
  7759                           
  7760                           ;Setup_Alarm_Time.c: 129: else Select_Alarm_Field--;
  7761  0038BE  0653               	decf	_Select_Alarm_Field,f,c
  7762  0038C0  D000               	goto	l8660
  7763  0038C2                     l8660:
  7764                           
  7765                           ;Setup_Alarm_Time.c: 130: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  7766  0038C2  5053               	movf	_Select_Alarm_Field,w,c
  7767  0038C4  EC5D  F008         	call	_Update_Setup_Screen_Cursor_Backward
  7768  0038C8  0012               	return		;funcret
  7769  0038CA                     __end_of_Go_Prev_Alarm_Field:
  7770                           	opt stack 0
  7771                           tblptru	equ	0xFF8
  7772                           tblptrh	equ	0xFF7
  7773                           tblptrl	equ	0xFF6
  7774                           tablat	equ	0xFF5
  7775                           prodh	equ	0xFF4
  7776                           prodl	equ	0xFF3
  7777                           intcon	equ	0xFF2
  7778                           intcon2	equ	0xFF1
  7779                           postinc0	equ	0xFEE
  7780                           wreg	equ	0xFE8
  7781                           postdec1	equ	0xFE5
  7782                           plusw1	equ	0xFE3
  7783                           fsr1l	equ	0xFE1
  7784                           indf2	equ	0xFDF
  7785                           postinc2	equ	0xFDE
  7786                           plusw2	equ	0xFDB
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  7792 ;; Defined at:
  7793 ;;		line 271 in file "Setup_Time.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  field           1    wreg     unsigned char 
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  field           1   45[COMRAM] unsigned char 
  7798 ;;  xinc            1   47[COMRAM] unsigned char 
  7799 ;;  yinc            1   46[COMRAM] unsigned char 
  7800 ;; Return value:  Size  Location     Type
  7801 ;;		None               void
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;Total ram usage:        3 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    8
  7816 ;; This function calls:
  7817 ;;		_fillRect
  7818 ;; This function is called by:
  7819 ;;		_Go_Prev_Alarm_Field
  7820 ;;		_Go_Prev_Field
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text36
  7825  0010BA                     __ptext36:
  7826                           	opt stack 0
  7827  0010BA                     _Update_Setup_Screen_Cursor_Backward:
  7828                           	opt stack 20
  7829                           
  7830                           ;incstack = 0
  7831                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  7832  0010BA  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  7833                           
  7834                           ;Setup_Time.c: 273: char xinc = 36;
  7835  0010BC  0E24               	movlw	36
  7836  0010BE  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  7837                           
  7838                           ;Setup_Time.c: 274: char yinc = 30;
  7839  0010C0  0E1E               	movlw	30
  7840  0010C2  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  7841                           
  7842                           ;Setup_Time.c: 275: switch (field)
  7843  0010C4  D0BF               	goto	l8518
  7844  0010C6                     l8496:
  7845                           
  7846                           ;Setup_Time.c: 278: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  7847  0010C6  0E44               	movlw	68
  7848  0010C8  6E23               	movwf	fillRect@y,c
  7849  0010CA  0E19               	movlw	25
  7850  0010CC  6E24               	movwf	fillRect@w,c
  7851  0010CE  0E02               	movlw	2
  7852  0010D0  6E25               	movwf	fillRect@h,c
  7853  0010D2  0E00               	movlw	0
  7854  0010D4  6E27               	movwf	fillRect@color+1,c
  7855  0010D6  0E00               	movlw	0
  7856  0010D8  6E26               	movwf	fillRect@color,c
  7857  0010DA  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7858  0010DC  0F0E               	addlw	14
  7859  0010DE  ECE6  F019         	call	_fillRect
  7860                           
  7861                           ;Setup_Time.c: 279: fillRect(15-1, 52+16, 25,2,0x07FF);
  7862  0010E2  0E44               	movlw	68
  7863  0010E4  6E23               	movwf	fillRect@y,c
  7864  0010E6  0E19               	movlw	25
  7865  0010E8  6E24               	movwf	fillRect@w,c
  7866  0010EA  0E02               	movlw	2
  7867  0010EC  6E25               	movwf	fillRect@h,c
  7868  0010EE  0E07               	movlw	7
  7869  0010F0  6E27               	movwf	fillRect@color+1,c
  7870  0010F2  6826               	setf	fillRect@color,c
  7871  0010F4  0E0E               	movlw	14
  7872  0010F6  ECE6  F019         	call	_fillRect
  7873                           
  7874                           ;Setup_Time.c: 280: break;
  7875  0010FA  D0B8               	goto	l1230
  7876  0010FC                     l8498:
  7877                           
  7878                           ;Setup_Time.c: 283: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  7879  0010FC  0E44               	movlw	68
  7880  0010FE  6E23               	movwf	fillRect@y,c
  7881  001100  0E19               	movlw	25
  7882  001102  6E24               	movwf	fillRect@w,c
  7883  001104  0E02               	movlw	2
  7884  001106  6E25               	movwf	fillRect@h,c
  7885  001108  0E00               	movlw	0
  7886  00110A  6E27               	movwf	fillRect@color+1,c
  7887  00110C  0E00               	movlw	0
  7888  00110E  6E26               	movwf	fillRect@color,c
  7889  001110  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7890  001112  0D02               	mullw	2
  7891  001114  50F3               	movf	prodl,w,c
  7892  001116  0F0E               	addlw	14
  7893  001118  ECE6  F019         	call	_fillRect
  7894                           
  7895                           ;Setup_Time.c: 284: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  7896  00111C  0E44               	movlw	68
  7897  00111E  6E23               	movwf	fillRect@y,c
  7898  001120  0E19               	movlw	25
  7899  001122  6E24               	movwf	fillRect@w,c
  7900  001124  0E02               	movlw	2
  7901  001126  6E25               	movwf	fillRect@h,c
  7902  001128  0E07               	movlw	7
  7903  00112A  6E27               	movwf	fillRect@color+1,c
  7904  00112C  6826               	setf	fillRect@color,c
  7905  00112E  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7906  001130  0F0E               	addlw	14
  7907  001132  ECE6  F019         	call	_fillRect
  7908                           
  7909                           ;Setup_Time.c: 285: break;
  7910  001136  D09A               	goto	l1230
  7911  001138                     l8502:
  7912                           
  7913                           ;Setup_Time.c: 288: fillRect(15-1, 52+16, 25,2,0x0000);
  7914  001138  0E44               	movlw	68
  7915  00113A  6E23               	movwf	fillRect@y,c
  7916  00113C  0E19               	movlw	25
  7917  00113E  6E24               	movwf	fillRect@w,c
  7918  001140  0E02               	movlw	2
  7919  001142  6E25               	movwf	fillRect@h,c
  7920  001144  0E00               	movlw	0
  7921  001146  6E27               	movwf	fillRect@color+1,c
  7922  001148  0E00               	movlw	0
  7923  00114A  6E26               	movwf	fillRect@color,c
  7924  00114C  0E0E               	movlw	14
  7925  00114E  ECE6  F019         	call	_fillRect
  7926                           
  7927                           ;Setup_Time.c: 289: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  7928  001152  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7929  001154  0F44               	addlw	68
  7930  001156  6E23               	movwf	fillRect@y,c
  7931  001158  0E19               	movlw	25
  7932  00115A  6E24               	movwf	fillRect@w,c
  7933  00115C  0E02               	movlw	2
  7934  00115E  6E25               	movwf	fillRect@h,c
  7935  001160  0E00               	movlw	0
  7936  001162  6E27               	movwf	fillRect@color+1,c
  7937  001164  0E00               	movlw	0
  7938  001166  6E26               	movwf	fillRect@color,c
  7939  001168  0E0E               	movlw	14
  7940  00116A  ECE6  F019         	call	_fillRect
  7941                           
  7942                           ;Setup_Time.c: 290: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  7943  00116E  0E44               	movlw	68
  7944  001170  6E23               	movwf	fillRect@y,c
  7945  001172  0E19               	movlw	25
  7946  001174  6E24               	movwf	fillRect@w,c
  7947  001176  0E02               	movlw	2
  7948  001178  6E25               	movwf	fillRect@h,c
  7949  00117A  0E07               	movlw	7
  7950  00117C  6E27               	movwf	fillRect@color+1,c
  7951  00117E  6826               	setf	fillRect@color,c
  7952  001180  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7953  001182  0D02               	mullw	2
  7954  001184  50F3               	movf	prodl,w,c
  7955  001186  0F0E               	addlw	14
  7956  001188  ECE6  F019         	call	_fillRect
  7957                           
  7958                           ;Setup_Time.c: 291: break;
  7959  00118C  D06F               	goto	l1230
  7960  00118E                     l8506:
  7961                           
  7962                           ;Setup_Time.c: 294: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  7963  00118E  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7964  001190  0F44               	addlw	68
  7965  001192  6E23               	movwf	fillRect@y,c
  7966  001194  0E19               	movlw	25
  7967  001196  6E24               	movwf	fillRect@w,c
  7968  001198  0E02               	movlw	2
  7969  00119A  6E25               	movwf	fillRect@h,c
  7970  00119C  0E00               	movlw	0
  7971  00119E  6E27               	movwf	fillRect@color+1,c
  7972  0011A0  0E00               	movlw	0
  7973  0011A2  6E26               	movwf	fillRect@color,c
  7974  0011A4  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  7975  0011A6  0F0E               	addlw	14
  7976  0011A8  ECE6  F019         	call	_fillRect
  7977                           
  7978                           ;Setup_Time.c: 295: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  7979  0011AC  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7980  0011AE  0F44               	addlw	68
  7981  0011B0  6E23               	movwf	fillRect@y,c
  7982  0011B2  0E19               	movlw	25
  7983  0011B4  6E24               	movwf	fillRect@w,c
  7984  0011B6  0E02               	movlw	2
  7985  0011B8  6E25               	movwf	fillRect@h,c
  7986  0011BA  0E07               	movlw	7
  7987  0011BC  6E27               	movwf	fillRect@color+1,c
  7988  0011BE  6826               	setf	fillRect@color,c
  7989  0011C0  0E0E               	movlw	14
  7990  0011C2  ECE6  F019         	call	_fillRect
  7991                           
  7992                           ;Setup_Time.c: 296: break;
  7993  0011C6  D052               	goto	l1230
  7994  0011C8                     l8508:
  7995                           
  7996                           ;Setup_Time.c: 299: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  7997  0011C8  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  7998  0011CA  0F44               	addlw	68
  7999  0011CC  6E23               	movwf	fillRect@y,c
  8000  0011CE  0E19               	movlw	25
  8001  0011D0  6E24               	movwf	fillRect@w,c
  8002  0011D2  0E02               	movlw	2
  8003  0011D4  6E25               	movwf	fillRect@h,c
  8004  0011D6  0E00               	movlw	0
  8005  0011D8  6E27               	movwf	fillRect@color+1,c
  8006  0011DA  0E00               	movlw	0
  8007  0011DC  6E26               	movwf	fillRect@color,c
  8008  0011DE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8009  0011E0  0D02               	mullw	2
  8010  0011E2  50F3               	movf	prodl,w,c
  8011  0011E4  0F0E               	addlw	14
  8012  0011E6  ECE6  F019         	call	_fillRect
  8013                           
  8014                           ;Setup_Time.c: 300: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  8015  0011EA  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8016  0011EC  0F44               	addlw	68
  8017  0011EE  6E23               	movwf	fillRect@y,c
  8018  0011F0  0E19               	movlw	25
  8019  0011F2  6E24               	movwf	fillRect@w,c
  8020  0011F4  0E02               	movlw	2
  8021  0011F6  6E25               	movwf	fillRect@h,c
  8022  0011F8  0E07               	movlw	7
  8023  0011FA  6E27               	movwf	fillRect@color+1,c
  8024  0011FC  6826               	setf	fillRect@color,c
  8025  0011FE  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8026  001200  0F0E               	addlw	14
  8027  001202  ECE6  F019         	call	_fillRect
  8028                           
  8029                           ;Setup_Time.c: 301: break;
  8030  001206  D032               	goto	l1230
  8031  001208                     l8512:
  8032                           
  8033                           ;Setup_Time.c: 304: fillRect(15-1, 52+16, 25,2,0x0000);
  8034  001208  0E44               	movlw	68
  8035  00120A  6E23               	movwf	fillRect@y,c
  8036  00120C  0E19               	movlw	25
  8037  00120E  6E24               	movwf	fillRect@w,c
  8038  001210  0E02               	movlw	2
  8039  001212  6E25               	movwf	fillRect@h,c
  8040  001214  0E00               	movlw	0
  8041  001216  6E27               	movwf	fillRect@color+1,c
  8042  001218  0E00               	movlw	0
  8043  00121A  6E26               	movwf	fillRect@color,c
  8044  00121C  0E0E               	movlw	14
  8045  00121E  ECE6  F019         	call	_fillRect
  8046                           
  8047                           ;Setup_Time.c: 305: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  8048  001222  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  8049  001224  0F44               	addlw	68
  8050  001226  6E23               	movwf	fillRect@y,c
  8051  001228  0E19               	movlw	25
  8052  00122A  6E24               	movwf	fillRect@w,c
  8053  00122C  0E02               	movlw	2
  8054  00122E  6E25               	movwf	fillRect@h,c
  8055  001230  0E07               	movlw	7
  8056  001232  6E27               	movwf	fillRect@color+1,c
  8057  001234  6826               	setf	fillRect@color,c
  8058  001236  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8059  001238  0D02               	mullw	2
  8060  00123A  50F3               	movf	prodl,w,c
  8061  00123C  0F0E               	addlw	14
  8062  00123E  ECE6  F019         	call	_fillRect
  8063                           
  8064                           ;Setup_Time.c: 307: }
  8065                           
  8066                           ;Setup_Time.c: 306: break;
  8067  001242  D014               	goto	l1230
  8068  001244                     l8518:
  8069  001244  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  8070                           
  8071                           ; Switch size 1, requested type "space"
  8072                           ; Number of cases is 6, Range of values is 0 to 5
  8073                           ; switch strategies available:
  8074                           ; Name         Instructions Cycles
  8075                           ; simple_byte           19    10 (average)
  8076                           ;	Chosen strategy is simple_byte
  8077  001246  0A00               	xorlw	0	; case 0
  8078  001248  B4D8               	btfsc	status,2,c
  8079  00124A  D73D               	goto	l8496
  8080  00124C  0A01               	xorlw	1	; case 1
  8081  00124E  B4D8               	btfsc	status,2,c
  8082  001250  D755               	goto	l8498
  8083  001252  0A03               	xorlw	3	; case 2
  8084  001254  B4D8               	btfsc	status,2,c
  8085  001256  D770               	goto	l8502
  8086  001258  0A01               	xorlw	1	; case 3
  8087  00125A  B4D8               	btfsc	status,2,c
  8088  00125C  D798               	goto	l8506
  8089  00125E  0A07               	xorlw	7	; case 4
  8090  001260  B4D8               	btfsc	status,2,c
  8091  001262  D7B2               	goto	l8508
  8092  001264  0A01               	xorlw	1	; case 5
  8093  001266  B4D8               	btfsc	status,2,c
  8094  001268  D7CF               	goto	l8512
  8095  00126A  D000               	goto	l1230
  8096  00126C                     l1230:
  8097  00126C  0012               	return		;funcret
  8098  00126E                     __end_of_Update_Setup_Screen_Cursor_Backward:
  8099                           	opt stack 0
  8100                           tblptru	equ	0xFF8
  8101                           tblptrh	equ	0xFF7
  8102                           tblptrl	equ	0xFF6
  8103                           tablat	equ	0xFF5
  8104                           prodh	equ	0xFF4
  8105                           prodl	equ	0xFF3
  8106                           intcon	equ	0xFF2
  8107                           intcon2	equ	0xFF1
  8108                           postinc0	equ	0xFEE
  8109                           wreg	equ	0xFE8
  8110                           postdec1	equ	0xFE5
  8111                           plusw1	equ	0xFE3
  8112                           fsr1l	equ	0xFE1
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           plusw2	equ	0xFDB
  8116                           fsr2h	equ	0xFDA
  8117                           fsr2l	equ	0xFD9
  8118                           status	equ	0xFD8
  8119                           
  8120 ;; *************** function _Go_Next_Alarm_Field *****************
  8121 ;; Defined at:
  8122 ;;		line 117 in file "Setup_Alarm_Time.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;		None
  8125 ;; Auto vars:     Size  Location     Type
  8126 ;;		None
  8127 ;; Return value:  Size  Location     Type
  8128 ;;		None               void
  8129 ;; Registers used:
  8130 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;Total ram usage:        0 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    9
  8143 ;; This function calls:
  8144 ;;		_Update_Setup_Screen_Cursor_Forward
  8145 ;; This function is called by:
  8146 ;;		_Do_Setup_Alarm_Time
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text37
  8151  0038CA                     __ptext37:
  8152                           	opt stack 0
  8153  0038CA                     _Go_Next_Alarm_Field:
  8154                           	opt stack 20
  8155                           
  8156                           ;Setup_Alarm_Time.c: 120: Select_Alarm_Field++;
  8157                           
  8158                           ;incstack = 0
  8159  0038CA  2A53               	incf	_Select_Alarm_Field,f,c
  8160                           
  8161                           ;Setup_Alarm_Time.c: 121: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  8162  0038CC  0E03               	movlw	3
  8163  0038CE  1853               	xorwf	_Select_Alarm_Field,w,c
  8164  0038D0  A4D8               	btfss	status,2,c
  8165  0038D2  D003               	goto	l8668
  8166  0038D4  0E00               	movlw	0
  8167  0038D6  6E53               	movwf	_Select_Alarm_Field,c
  8168  0038D8  D000               	goto	l8668
  8169  0038DA                     l8668:
  8170                           
  8171                           ;Setup_Alarm_Time.c: 122: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  8172  0038DA  5053               	movf	_Select_Alarm_Field,w,c
  8173  0038DC  EC80  F007         	call	_Update_Setup_Screen_Cursor_Forward
  8174  0038E0  0012               	return		;funcret
  8175  0038E2                     __end_of_Go_Next_Alarm_Field:
  8176                           	opt stack 0
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           intcon2	equ	0xFF1
  8185                           postinc0	equ	0xFEE
  8186                           wreg	equ	0xFE8
  8187                           postdec1	equ	0xFE5
  8188                           plusw1	equ	0xFE3
  8189                           fsr1l	equ	0xFE1
  8190                           indf2	equ	0xFDF
  8191                           postinc2	equ	0xFDE
  8192                           plusw2	equ	0xFDB
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  8198 ;; Defined at:
  8199 ;;		line 232 in file "Setup_Time.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  field           1    wreg     unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  field           1   45[COMRAM] unsigned char 
  8204 ;;  xinc            1   47[COMRAM] unsigned char 
  8205 ;;  yinc            1   46[COMRAM] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;		None               void
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;Total ram usage:        3 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    8
  8222 ;; This function calls:
  8223 ;;		_fillRect
  8224 ;; This function is called by:
  8225 ;;		_Go_Next_Alarm_Field
  8226 ;;		_Go_Next_Field
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text38
  8231  000F00                     __ptext38:
  8232                           	opt stack 0
  8233  000F00                     _Update_Setup_Screen_Cursor_Forward:
  8234                           	opt stack 20
  8235                           
  8236                           ;incstack = 0
  8237                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  8238  000F00  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  8239                           
  8240                           ;Setup_Time.c: 234: char xinc = 36;
  8241  000F02  0E24               	movlw	36
  8242  000F04  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  8243                           
  8244                           ;Setup_Time.c: 235: char yinc = 30;
  8245  000F06  0E1E               	movlw	30
  8246  000F08  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  8247                           
  8248                           ;Setup_Time.c: 236: switch (field)
  8249  000F0A  D0C2               	goto	l8492
  8250  000F0C                     l8470:
  8251                           
  8252                           ;Setup_Time.c: 239: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  8253  000F0C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8254  000F0E  0F44               	addlw	68
  8255  000F10  6E23               	movwf	fillRect@y,c
  8256  000F12  0E19               	movlw	25
  8257  000F14  6E24               	movwf	fillRect@w,c
  8258  000F16  0E02               	movlw	2
  8259  000F18  6E25               	movwf	fillRect@h,c
  8260  000F1A  0E00               	movlw	0
  8261  000F1C  6E27               	movwf	fillRect@color+1,c
  8262  000F1E  0E00               	movlw	0
  8263  000F20  6E26               	movwf	fillRect@color,c
  8264  000F22  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8265  000F24  0D02               	mullw	2
  8266  000F26  50F3               	movf	prodl,w,c
  8267  000F28  0F0E               	addlw	14
  8268  000F2A  ECE6  F019         	call	_fillRect
  8269                           
  8270                           ;Setup_Time.c: 240: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8271  000F2E  0E44               	movlw	68
  8272  000F30  6E23               	movwf	fillRect@y,c
  8273  000F32  0E19               	movlw	25
  8274  000F34  6E24               	movwf	fillRect@w,c
  8275  000F36  0E02               	movlw	2
  8276  000F38  6E25               	movwf	fillRect@h,c
  8277  000F3A  0E00               	movlw	0
  8278  000F3C  6E27               	movwf	fillRect@color+1,c
  8279  000F3E  0E00               	movlw	0
  8280  000F40  6E26               	movwf	fillRect@color,c
  8281  000F42  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8282  000F44  0D02               	mullw	2
  8283  000F46  50F3               	movf	prodl,w,c
  8284  000F48  0F0E               	addlw	14
  8285  000F4A  ECE6  F019         	call	_fillRect
  8286                           
  8287                           ;Setup_Time.c: 241: fillRect(15-1, 52+16, 25,2,0x07FF);
  8288  000F4E  0E44               	movlw	68
  8289  000F50  6E23               	movwf	fillRect@y,c
  8290  000F52  0E19               	movlw	25
  8291  000F54  6E24               	movwf	fillRect@w,c
  8292  000F56  0E02               	movlw	2
  8293  000F58  6E25               	movwf	fillRect@h,c
  8294  000F5A  0E07               	movlw	7
  8295  000F5C  6E27               	movwf	fillRect@color+1,c
  8296  000F5E  6826               	setf	fillRect@color,c
  8297  000F60  0E0E               	movlw	14
  8298  000F62  ECE6  F019         	call	_fillRect
  8299                           
  8300                           ;Setup_Time.c: 242: break;
  8301  000F66  D0A8               	goto	l1219
  8302  000F68                     l8474:
  8303                           
  8304                           ;Setup_Time.c: 245: fillRect(15-1, 52+16, 25,2,0x0000);
  8305  000F68  0E44               	movlw	68
  8306  000F6A  6E23               	movwf	fillRect@y,c
  8307  000F6C  0E19               	movlw	25
  8308  000F6E  6E24               	movwf	fillRect@w,c
  8309  000F70  0E02               	movlw	2
  8310  000F72  6E25               	movwf	fillRect@h,c
  8311  000F74  0E00               	movlw	0
  8312  000F76  6E27               	movwf	fillRect@color+1,c
  8313  000F78  0E00               	movlw	0
  8314  000F7A  6E26               	movwf	fillRect@color,c
  8315  000F7C  0E0E               	movlw	14
  8316  000F7E  ECE6  F019         	call	_fillRect
  8317                           
  8318                           ;Setup_Time.c: 246: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  8319  000F82  0E44               	movlw	68
  8320  000F84  6E23               	movwf	fillRect@y,c
  8321  000F86  0E19               	movlw	25
  8322  000F88  6E24               	movwf	fillRect@w,c
  8323  000F8A  0E02               	movlw	2
  8324  000F8C  6E25               	movwf	fillRect@h,c
  8325  000F8E  0E07               	movlw	7
  8326  000F90  6E27               	movwf	fillRect@color+1,c
  8327  000F92  6826               	setf	fillRect@color,c
  8328  000F94  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8329  000F96  0F0E               	addlw	14
  8330  000F98  ECE6  F019         	call	_fillRect
  8331                           
  8332                           ;Setup_Time.c: 247: break;
  8333  000F9C  D08D               	goto	l1219
  8334  000F9E                     l8476:
  8335                           
  8336                           ;Setup_Time.c: 250: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8337  000F9E  0E44               	movlw	68
  8338  000FA0  6E23               	movwf	fillRect@y,c
  8339  000FA2  0E19               	movlw	25
  8340  000FA4  6E24               	movwf	fillRect@w,c
  8341  000FA6  0E02               	movlw	2
  8342  000FA8  6E25               	movwf	fillRect@h,c
  8343  000FAA  0E00               	movlw	0
  8344  000FAC  6E27               	movwf	fillRect@color+1,c
  8345  000FAE  0E00               	movlw	0
  8346  000FB0  6E26               	movwf	fillRect@color,c
  8347  000FB2  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8348  000FB4  0F0E               	addlw	14
  8349  000FB6  ECE6  F019         	call	_fillRect
  8350                           
  8351                           ;Setup_Time.c: 251: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  8352  000FBA  0E44               	movlw	68
  8353  000FBC  6E23               	movwf	fillRect@y,c
  8354  000FBE  0E19               	movlw	25
  8355  000FC0  6E24               	movwf	fillRect@w,c
  8356  000FC2  0E02               	movlw	2
  8357  000FC4  6E25               	movwf	fillRect@h,c
  8358  000FC6  0E07               	movlw	7
  8359  000FC8  6E27               	movwf	fillRect@color+1,c
  8360  000FCA  6826               	setf	fillRect@color,c
  8361  000FCC  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8362  000FCE  0D02               	mullw	2
  8363  000FD0  50F3               	movf	prodl,w,c
  8364  000FD2  0F0E               	addlw	14
  8365  000FD4  ECE6  F019         	call	_fillRect
  8366                           
  8367                           ;Setup_Time.c: 252: break;
  8368  000FD8  D06F               	goto	l1219
  8369  000FDA                     l8480:
  8370                           
  8371                           ;Setup_Time.c: 255: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  8372  000FDA  0E44               	movlw	68
  8373  000FDC  6E23               	movwf	fillRect@y,c
  8374  000FDE  0E19               	movlw	25
  8375  000FE0  6E24               	movwf	fillRect@w,c
  8376  000FE2  0E02               	movlw	2
  8377  000FE4  6E25               	movwf	fillRect@h,c
  8378  000FE6  0E00               	movlw	0
  8379  000FE8  6E27               	movwf	fillRect@color+1,c
  8380  000FEA  0E00               	movlw	0
  8381  000FEC  6E26               	movwf	fillRect@color,c
  8382  000FEE  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8383  000FF0  0D02               	mullw	2
  8384  000FF2  50F3               	movf	prodl,w,c
  8385  000FF4  0F0E               	addlw	14
  8386  000FF6  ECE6  F019         	call	_fillRect
  8387                           
  8388                           ;Setup_Time.c: 256: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  8389  000FFA  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8390  000FFC  0F44               	addlw	68
  8391  000FFE  6E23               	movwf	fillRect@y,c
  8392  001000  0E19               	movlw	25
  8393  001002  6E24               	movwf	fillRect@w,c
  8394  001004  0E02               	movlw	2
  8395  001006  6E25               	movwf	fillRect@h,c
  8396  001008  0E07               	movlw	7
  8397  00100A  6E27               	movwf	fillRect@color+1,c
  8398  00100C  6826               	setf	fillRect@color,c
  8399  00100E  0E0E               	movlw	14
  8400  001010  ECE6  F019         	call	_fillRect
  8401                           
  8402                           ;Setup_Time.c: 257: break;
  8403  001014  D051               	goto	l1219
  8404  001016                     l8484:
  8405                           
  8406                           ;Setup_Time.c: 260: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  8407  001016  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8408  001018  0F44               	addlw	68
  8409  00101A  6E23               	movwf	fillRect@y,c
  8410  00101C  0E19               	movlw	25
  8411  00101E  6E24               	movwf	fillRect@w,c
  8412  001020  0E02               	movlw	2
  8413  001022  6E25               	movwf	fillRect@h,c
  8414  001024  0E00               	movlw	0
  8415  001026  6E27               	movwf	fillRect@color+1,c
  8416  001028  0E00               	movlw	0
  8417  00102A  6E26               	movwf	fillRect@color,c
  8418  00102C  0E0E               	movlw	14
  8419  00102E  ECE6  F019         	call	_fillRect
  8420                           
  8421                           ;Setup_Time.c: 261: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  8422  001032  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8423  001034  0F44               	addlw	68
  8424  001036  6E23               	movwf	fillRect@y,c
  8425  001038  0E19               	movlw	25
  8426  00103A  6E24               	movwf	fillRect@w,c
  8427  00103C  0E02               	movlw	2
  8428  00103E  6E25               	movwf	fillRect@h,c
  8429  001040  0E07               	movlw	7
  8430  001042  6E27               	movwf	fillRect@color+1,c
  8431  001044  6826               	setf	fillRect@color,c
  8432  001046  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8433  001048  0F0E               	addlw	14
  8434  00104A  ECE6  F019         	call	_fillRect
  8435                           
  8436                           ;Setup_Time.c: 262: break;
  8437  00104E  D034               	goto	l1219
  8438  001050                     l8486:
  8439                           
  8440                           ;Setup_Time.c: 265: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  8441  001050  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8442  001052  0F44               	addlw	68
  8443  001054  6E23               	movwf	fillRect@y,c
  8444  001056  0E19               	movlw	25
  8445  001058  6E24               	movwf	fillRect@w,c
  8446  00105A  0E02               	movlw	2
  8447  00105C  6E25               	movwf	fillRect@h,c
  8448  00105E  0E00               	movlw	0
  8449  001060  6E27               	movwf	fillRect@color+1,c
  8450  001062  0E00               	movlw	0
  8451  001064  6E26               	movwf	fillRect@color,c
  8452  001066  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8453  001068  0F0E               	addlw	14
  8454  00106A  ECE6  F019         	call	_fillRect
  8455                           
  8456                           ;Setup_Time.c: 266: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  8457  00106E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  8458  001070  0F44               	addlw	68
  8459  001072  6E23               	movwf	fillRect@y,c
  8460  001074  0E19               	movlw	25
  8461  001076  6E24               	movwf	fillRect@w,c
  8462  001078  0E02               	movlw	2
  8463  00107A  6E25               	movwf	fillRect@h,c
  8464  00107C  0E07               	movlw	7
  8465  00107E  6E27               	movwf	fillRect@color+1,c
  8466  001080  6826               	setf	fillRect@color,c
  8467  001082  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  8468  001084  0D02               	mullw	2
  8469  001086  50F3               	movf	prodl,w,c
  8470  001088  0F0E               	addlw	14
  8471  00108A  ECE6  F019         	call	_fillRect
  8472                           
  8473                           ;Setup_Time.c: 268: }
  8474                           
  8475                           ;Setup_Time.c: 267: break;
  8476  00108E  D014               	goto	l1219
  8477  001090                     l8492:
  8478  001090  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  8479                           
  8480                           ; Switch size 1, requested type "space"
  8481                           ; Number of cases is 6, Range of values is 0 to 5
  8482                           ; switch strategies available:
  8483                           ; Name         Instructions Cycles
  8484                           ; simple_byte           19    10 (average)
  8485                           ;	Chosen strategy is simple_byte
  8486  001092  0A00               	xorlw	0	; case 0
  8487  001094  B4D8               	btfsc	status,2,c
  8488  001096  D73A               	goto	l8470
  8489  001098  0A01               	xorlw	1	; case 1
  8490  00109A  B4D8               	btfsc	status,2,c
  8491  00109C  D765               	goto	l8474
  8492  00109E  0A03               	xorlw	3	; case 2
  8493  0010A0  B4D8               	btfsc	status,2,c
  8494  0010A2  D77D               	goto	l8476
  8495  0010A4  0A01               	xorlw	1	; case 3
  8496  0010A6  B4D8               	btfsc	status,2,c
  8497  0010A8  D798               	goto	l8480
  8498  0010AA  0A07               	xorlw	7	; case 4
  8499  0010AC  B4D8               	btfsc	status,2,c
  8500  0010AE  D7B3               	goto	l8484
  8501  0010B0  0A01               	xorlw	1	; case 5
  8502  0010B2  B4D8               	btfsc	status,2,c
  8503  0010B4  D7CD               	goto	l8486
  8504  0010B6  D000               	goto	l1219
  8505  0010B8                     l1219:
  8506  0010B8  0012               	return		;funcret
  8507  0010BA                     __end_of_Update_Setup_Screen_Cursor_Forward:
  8508                           	opt stack 0
  8509                           tblptru	equ	0xFF8
  8510                           tblptrh	equ	0xFF7
  8511                           tblptrl	equ	0xFF6
  8512                           tablat	equ	0xFF5
  8513                           prodh	equ	0xFF4
  8514                           prodl	equ	0xFF3
  8515                           intcon	equ	0xFF2
  8516                           intcon2	equ	0xFF1
  8517                           postinc0	equ	0xFEE
  8518                           wreg	equ	0xFE8
  8519                           postdec1	equ	0xFE5
  8520                           plusw1	equ	0xFE3
  8521                           fsr1l	equ	0xFE1
  8522                           indf2	equ	0xFDF
  8523                           postinc2	equ	0xFDE
  8524                           plusw2	equ	0xFDB
  8525                           fsr2h	equ	0xFDA
  8526                           fsr2l	equ	0xFD9
  8527                           status	equ	0xFD8
  8528                           
  8529 ;; *************** function _Exit_Setup_Alarm_Time *****************
  8530 ;; Defined at:
  8531 ;;		line 133 in file "Setup_Alarm_Time.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;		None
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;		None               void
  8538 ;; Registers used:
  8539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;Total ram usage:        0 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:   11
  8552 ;; This function calls:
  8553 ;;		_DS3231_Read_Time
  8554 ;;		_Initialize_Screen
  8555 ;; This function is called by:
  8556 ;;		_Do_Setup_Alarm_Time
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text39
  8561  003A28                     __ptext39:
  8562                           	opt stack 0
  8563  003A28                     _Exit_Setup_Alarm_Time:
  8564                           	opt stack 18
  8565                           
  8566                           ;Setup_Alarm_Time.c: 135: DS3231_Read_Time();
  8567                           
  8568                           ;incstack = 0
  8569  003A28  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  8570                           
  8571                           ;Setup_Alarm_Time.c: 136: Initialize_Screen();
  8572  003A2C  EC29  F003         	call	_Initialize_Screen	;wreg free
  8573                           
  8574                           ;Setup_Alarm_Time.c: 137: In_Alarm_Time_Setup = 0;
  8575  003A30  0E00               	movlw	0
  8576  003A32  0100               	movlb	0	; () banked
  8577  003A34  6FF9               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8578                           
  8579                           ; BSR set to: 0
  8580  003A36  0012               	return		;funcret
  8581  003A38                     __end_of_Exit_Setup_Alarm_Time:
  8582                           	opt stack 0
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon	equ	0xFF2
  8590                           intcon2	equ	0xFF1
  8591                           postinc0	equ	0xFEE
  8592                           wreg	equ	0xFE8
  8593                           postdec1	equ	0xFE5
  8594                           plusw1	equ	0xFE3
  8595                           fsr1l	equ	0xFE1
  8596                           indf2	equ	0xFDF
  8597                           postinc2	equ	0xFDE
  8598                           plusw2	equ	0xFDB
  8599                           fsr2h	equ	0xFDA
  8600                           fsr2l	equ	0xFD9
  8601                           status	equ	0xFD8
  8602                           
  8603 ;; *************** function _Do_Save_New_Alarm_Time *****************
  8604 ;; Defined at:
  8605 ;;		line 140 in file "Setup_Alarm_Time.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;		None
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;		None
  8610 ;; Return value:  Size  Location     Type
  8611 ;;		None               void
  8612 ;; Registers used:
  8613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;Total ram usage:        0 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:   11
  8626 ;; This function calls:
  8627 ;;		_DS3231_Read_Alarm_Time
  8628 ;;		_DS3231_Read_Time
  8629 ;;		_DS3231_Write_Alarm_Time
  8630 ;;		_Initialize_Screen
  8631 ;; This function is called by:
  8632 ;;		_Do_Setup_Alarm_Time
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           	psect	text40
  8637  0038E2                     __ptext40:
  8638                           	opt stack 0
  8639  0038E2                     _Do_Save_New_Alarm_Time:
  8640                           	opt stack 18
  8641                           
  8642                           ;Setup_Alarm_Time.c: 142: DS3231_Write_Alarm_Time();
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;incstack = 0
  8646  0038E2  EC97  F016         	call	_DS3231_Write_Alarm_Time	;wreg free
  8647                           
  8648                           ;Setup_Alarm_Time.c: 143: DS3231_Read_Alarm_Time();
  8649  0038E6  EC75  F019         	call	_DS3231_Read_Alarm_Time	;wreg free
  8650                           
  8651                           ;Setup_Alarm_Time.c: 144: DS3231_Read_Time();
  8652  0038EA  EC44  F017         	call	_DS3231_Read_Time	;wreg free
  8653                           
  8654                           ;Setup_Alarm_Time.c: 145: Initialize_Screen();
  8655  0038EE  EC29  F003         	call	_Initialize_Screen	;wreg free
  8656                           
  8657                           ;Setup_Alarm_Time.c: 146: In_Alarm_Time_Setup = 0;
  8658  0038F2  0E00               	movlw	0
  8659  0038F4  0100               	movlb	0	; () banked
  8660  0038F6  6FF9               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8661                           
  8662                           ; BSR set to: 0
  8663  0038F8  0012               	return		;funcret
  8664  0038FA                     __end_of_Do_Save_New_Alarm_Time:
  8665                           	opt stack 0
  8666                           tblptru	equ	0xFF8
  8667                           tblptrh	equ	0xFF7
  8668                           tblptrl	equ	0xFF6
  8669                           tablat	equ	0xFF5
  8670                           prodh	equ	0xFF4
  8671                           prodl	equ	0xFF3
  8672                           intcon	equ	0xFF2
  8673                           intcon2	equ	0xFF1
  8674                           postinc0	equ	0xFEE
  8675                           wreg	equ	0xFE8
  8676                           postdec1	equ	0xFE5
  8677                           plusw1	equ	0xFE3
  8678                           fsr1l	equ	0xFE1
  8679                           indf2	equ	0xFDF
  8680                           postinc2	equ	0xFDE
  8681                           plusw2	equ	0xFDB
  8682                           fsr2h	equ	0xFDA
  8683                           fsr2l	equ	0xFD9
  8684                           status	equ	0xFD8
  8685                           
  8686 ;; *************** function _Initialize_Screen *****************
  8687 ;; Defined at:
  8688 ;;		line 36 in file "Main_Screen.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;		None
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  2  357[None  ] int 
  8695 ;; Registers used:
  8696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;Total ram usage:        0 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:   10
  8709 ;; This function calls:
  8710 ;;		_LCD_Reset
  8711 ;;		_TFT_GreenTab_Initialize
  8712 ;;		_drawCircle
  8713 ;;		_drawtext
  8714 ;;		_fillScreen
  8715 ;;		_strcpy
  8716 ;; This function is called by:
  8717 ;;		_main
  8718 ;;		_Exit_Setup_Alarm_Time
  8719 ;;		_Do_Save_New_Alarm_Time
  8720 ;;		_Exit_Setup_Heater_Temp
  8721 ;;		_Do_Save_New_Heater_Temp
  8722 ;;		_Do_Save_New_Time
  8723 ;;		_Exit_Time_Setup
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text41
  8728  000652                     __ptext41:
  8729                           	opt stack 0
  8730  000652                     _Initialize_Screen:
  8731                           	opt stack 20
  8732                           
  8733                           ;Main_Screen.c: 38: LCD_Reset();
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;incstack = 0
  8737  000652  ECCE  F01C         	call	_LCD_Reset	;wreg free
  8738                           
  8739                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
  8740  000656  EC60  F01B         	call	_TFT_GreenTab_Initialize	;wreg free
  8741                           
  8742                           ;Main_Screen.c: 40: fillScreen(0x0000);
  8743  00065A  0E00               	movlw	0
  8744  00065C  6E25               	movwf	fillScreen@color+1,c
  8745  00065E  0E00               	movlw	0
  8746  000660  6E24               	movwf	fillScreen@color,c
  8747  000662  ECFE  F01B         	call	_fillScreen	;wreg free
  8748                           
  8749                           ;Main_Screen.c: 42: strcpy(txt, " ECE3301L Sp'22 Sx\0");
  8750  000666  C04D  F011         	movff	_txt,strcpy@to
  8751  00066A  C04E  F012         	movff	_txt+1,strcpy@to+1
  8752  00066E  0ED9               	movlw	low STR_7
  8753  000670  6E13               	movwf	strcpy@from,c
  8754  000672  0EFE               	movlw	high STR_7
  8755  000674  6E14               	movwf	strcpy@from+1,c
  8756  000676  EC01  F01B         	call	_strcpy	;wreg free
  8757                           
  8758                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8759  00067A  0E01               	movlw	1
  8760  00067C  6E39               	movwf	drawtext@y,c
  8761  00067E  C04D  F03A         	movff	_txt,drawtext@_text
  8762  000682  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8763  000686  0EFF               	movlw	255
  8764  000688  6E3D               	movwf	drawtext@color+1,c
  8765  00068A  683C               	setf	drawtext@color,c
  8766  00068C  0E00               	movlw	0
  8767  00068E  6E3F               	movwf	drawtext@bg+1,c
  8768  000690  0E00               	movlw	0
  8769  000692  6E3E               	movwf	drawtext@bg,c
  8770  000694  0E01               	movlw	1
  8771  000696  6E40               	movwf	drawtext@size,c
  8772  000698  0E01               	movlw	1
  8773  00069A  ECBE  F00C         	call	_drawtext
  8774                           
  8775                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
  8776  00069E  C04D  F011         	movff	_txt,strcpy@to
  8777  0006A2  C04E  F012         	movff	_txt+1,strcpy@to+1
  8778  0006A6  0E6E               	movlw	low STR_8
  8779  0006A8  6E13               	movwf	strcpy@from,c
  8780  0006AA  0EFF               	movlw	high STR_8
  8781  0006AC  6E14               	movwf	strcpy@from+1,c
  8782  0006AE  EC01  F01B         	call	_strcpy	;wreg free
  8783                           
  8784                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  8785  0006B2  0E0B               	movlw	11
  8786  0006B4  6E39               	movwf	drawtext@y,c
  8787  0006B6  C04D  F03A         	movff	_txt,drawtext@_text
  8788  0006BA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8789  0006BE  0EF8               	movlw	248
  8790  0006C0  6E3D               	movwf	drawtext@color+1,c
  8791  0006C2  0E1F               	movlw	31
  8792  0006C4  6E3C               	movwf	drawtext@color,c
  8793  0006C6  0E00               	movlw	0
  8794  0006C8  6E3F               	movwf	drawtext@bg+1,c
  8795  0006CA  0E00               	movlw	0
  8796  0006CC  6E3E               	movwf	drawtext@bg,c
  8797  0006CE  0E01               	movlw	1
  8798  0006D0  6E40               	movwf	drawtext@size,c
  8799  0006D2  0E18               	movlw	24
  8800  0006D4  ECBE  F00C         	call	_drawtext
  8801                           
  8802                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
  8803  0006D8  0E00               	movlw	0
  8804  0006DA  6E1D               	movwf	drawCircle@x0+1,c
  8805  0006DC  0E28               	movlw	40
  8806  0006DE  6E1C               	movwf	drawCircle@x0,c
  8807  0006E0  0E00               	movlw	0
  8808  0006E2  6E1F               	movwf	drawCircle@y0+1,c
  8809  0006E4  0E17               	movlw	23
  8810  0006E6  6E1E               	movwf	drawCircle@y0,c
  8811  0006E8  0E00               	movlw	0
  8812  0006EA  6E21               	movwf	drawCircle@r+1,c
  8813  0006EC  0E02               	movlw	2
  8814  0006EE  6E20               	movwf	drawCircle@r,c
  8815  0006F0  0EFF               	movlw	255
  8816  0006F2  6E23               	movwf	drawCircle@color+1,c
  8817  0006F4  0EE0               	movlw	224
  8818  0006F6  6E22               	movwf	drawCircle@color,c
  8819  0006F8  EC37  F009         	call	_drawCircle	;wreg free
  8820                           
  8821                           ;Main_Screen.c: 48: strcpy(txt, "C/");
  8822  0006FC  C04D  F011         	movff	_txt,strcpy@to
  8823  000700  C04E  F012         	movff	_txt+1,strcpy@to+1
  8824  000704  0EF5               	movlw	low STR_9
  8825  000706  6E13               	movwf	strcpy@from,c
  8826  000708  0EFF               	movlw	high STR_9
  8827  00070A  6E14               	movwf	strcpy@from+1,c
  8828  00070C  EC01  F01B         	call	_strcpy	;wreg free
  8829                           
  8830                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  8831  000710  0E17               	movlw	23
  8832  000712  6E39               	movwf	drawtext@y,c
  8833  000714  C04D  F03A         	movff	_txt,drawtext@_text
  8834  000718  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8835  00071C  0EFF               	movlw	255
  8836  00071E  6E3D               	movwf	drawtext@color+1,c
  8837  000720  0EE0               	movlw	224
  8838  000722  6E3C               	movwf	drawtext@color,c
  8839  000724  0E00               	movlw	0
  8840  000726  6E3F               	movwf	drawtext@bg+1,c
  8841  000728  0E00               	movlw	0
  8842  00072A  6E3E               	movwf	drawtext@bg,c
  8843  00072C  0E02               	movlw	2
  8844  00072E  6E40               	movwf	drawtext@size,c
  8845  000730  0E2D               	movlw	45
  8846  000732  ECBE  F00C         	call	_drawtext
  8847                           
  8848                           ;Main_Screen.c: 50: strcpy(txt, "F");
  8849  000736  C04D  F011         	movff	_txt,strcpy@to
  8850  00073A  C04E  F012         	movff	_txt+1,strcpy@to+1
  8851  00073E  0EEF               	movlw	low (STR_22+2)
  8852  000740  6E13               	movwf	strcpy@from,c
  8853  000742  0EFF               	movlw	high (STR_22+2)
  8854  000744  6E14               	movwf	strcpy@from+1,c
  8855  000746  EC01  F01B         	call	_strcpy	;wreg free
  8856                           
  8857                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
  8858  00074A  0E00               	movlw	0
  8859  00074C  6E1D               	movwf	drawCircle@x0+1,c
  8860  00074E  0E6E               	movlw	110
  8861  000750  6E1C               	movwf	drawCircle@x0,c
  8862  000752  0E00               	movlw	0
  8863  000754  6E1F               	movwf	drawCircle@y0+1,c
  8864  000756  0E17               	movlw	23
  8865  000758  6E1E               	movwf	drawCircle@y0,c
  8866  00075A  0E00               	movlw	0
  8867  00075C  6E21               	movwf	drawCircle@r+1,c
  8868  00075E  0E02               	movlw	2
  8869  000760  6E20               	movwf	drawCircle@r,c
  8870  000762  0EFF               	movlw	255
  8871  000764  6E23               	movwf	drawCircle@color+1,c
  8872  000766  0EE0               	movlw	224
  8873  000768  6E22               	movwf	drawCircle@color,c
  8874  00076A  EC37  F009         	call	_drawCircle	;wreg free
  8875                           
  8876                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  8877  00076E  0E17               	movlw	23
  8878  000770  6E39               	movwf	drawtext@y,c
  8879  000772  C04D  F03A         	movff	_txt,drawtext@_text
  8880  000776  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8881  00077A  0EFF               	movlw	255
  8882  00077C  6E3D               	movwf	drawtext@color+1,c
  8883  00077E  0EE0               	movlw	224
  8884  000780  6E3C               	movwf	drawtext@color,c
  8885  000782  0E00               	movlw	0
  8886  000784  6E3F               	movwf	drawtext@bg+1,c
  8887  000786  0E00               	movlw	0
  8888  000788  6E3E               	movwf	drawtext@bg,c
  8889  00078A  0E02               	movlw	2
  8890  00078C  6E40               	movwf	drawtext@size,c
  8891  00078E  0E73               	movlw	115
  8892  000790  ECBE  F00C         	call	_drawtext
  8893                           
  8894                           ;Main_Screen.c: 53: strcpy(txt, "Time");
  8895  000794  C04D  F011         	movff	_txt,strcpy@to
  8896  000798  C04E  F012         	movff	_txt+1,strcpy@to+1
  8897  00079C  0EB0               	movlw	low (STR_13+6)
  8898  00079E  6E13               	movwf	strcpy@from,c
  8899  0007A0  0EFF               	movlw	high (STR_13+6)
  8900  0007A2  6E14               	movwf	strcpy@from+1,c
  8901  0007A4  EC01  F01B         	call	_strcpy	;wreg free
  8902                           
  8903                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8904  0007A8  0E28               	movlw	40
  8905  0007AA  6E39               	movwf	drawtext@y,c
  8906  0007AC  C04D  F03A         	movff	_txt,drawtext@_text
  8907  0007B0  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8908  0007B4  0E00               	movlw	0
  8909  0007B6  6E3D               	movwf	drawtext@color+1,c
  8910  0007B8  0E1F               	movlw	31
  8911  0007BA  6E3C               	movwf	drawtext@color,c
  8912  0007BC  0E00               	movlw	0
  8913  0007BE  6E3F               	movwf	drawtext@bg+1,c
  8914  0007C0  0E00               	movlw	0
  8915  0007C2  6E3E               	movwf	drawtext@bg,c
  8916  0007C4  0E01               	movlw	1
  8917  0007C6  6E40               	movwf	drawtext@size,c
  8918  0007C8  0E32               	movlw	50
  8919  0007CA  ECBE  F00C         	call	_drawtext
  8920                           
  8921                           ;Main_Screen.c: 55: strcpy(txt, "Date");
  8922  0007CE  C04D  F011         	movff	_txt,strcpy@to
  8923  0007D2  C04E  F012         	movff	_txt+1,strcpy@to+1
  8924  0007D6  0EDF               	movlw	low STR_12
  8925  0007D8  6E13               	movwf	strcpy@from,c
  8926  0007DA  0EFF               	movlw	high STR_12
  8927  0007DC  6E14               	movwf	strcpy@from+1,c
  8928  0007DE  EC01  F01B         	call	_strcpy	;wreg free
  8929                           
  8930                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  8931  0007E2  0E47               	movlw	71
  8932  0007E4  6E39               	movwf	drawtext@y,c
  8933  0007E6  C04D  F03A         	movff	_txt,drawtext@_text
  8934  0007EA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8935  0007EE  0EF8               	movlw	248
  8936  0007F0  6E3D               	movwf	drawtext@color+1,c
  8937  0007F2  0E00               	movlw	0
  8938  0007F4  6E3C               	movwf	drawtext@color,c
  8939  0007F6  0E00               	movlw	0
  8940  0007F8  6E3F               	movwf	drawtext@bg+1,c
  8941  0007FA  0E00               	movlw	0
  8942  0007FC  6E3E               	movwf	drawtext@bg,c
  8943  0007FE  0E01               	movlw	1
  8944  000800  6E40               	movwf	drawtext@size,c
  8945  000802  0E32               	movlw	50
  8946  000804  ECBE  F00C         	call	_drawtext
  8947                           
  8948                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
  8949  000808  C04D  F011         	movff	_txt,strcpy@to
  8950  00080C  C04E  F012         	movff	_txt+1,strcpy@to+1
  8951  000810  0EAA               	movlw	low STR_13
  8952  000812  6E13               	movwf	strcpy@from,c
  8953  000814  0EFF               	movlw	high STR_13
  8954  000816  6E14               	movwf	strcpy@from+1,c
  8955  000818  EC01  F01B         	call	_strcpy	;wreg free
  8956                           
  8957                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
  8958  00081C  0E64               	movlw	100
  8959  00081E  6E39               	movwf	drawtext@y,c
  8960  000820  C04D  F03A         	movff	_txt,drawtext@_text
  8961  000824  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8962  000828  0EFF               	movlw	255
  8963  00082A  6E3D               	movwf	drawtext@color+1,c
  8964  00082C  0EE0               	movlw	224
  8965  00082E  6E3C               	movwf	drawtext@color,c
  8966  000830  0E00               	movlw	0
  8967  000832  6E3F               	movwf	drawtext@bg+1,c
  8968  000834  0E00               	movlw	0
  8969  000836  6E3E               	movwf	drawtext@bg,c
  8970  000838  0E01               	movlw	1
  8971  00083A  6E40               	movwf	drawtext@size,c
  8972  00083C  0E04               	movlw	4
  8973  00083E  ECBE  F00C         	call	_drawtext
  8974                           
  8975                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
  8976  000842  C04D  F011         	movff	_txt,strcpy@to
  8977  000846  C04E  F012         	movff	_txt+1,strcpy@to+1
  8978  00084A  0EBF               	movlw	low STR_14
  8979  00084C  6E13               	movwf	strcpy@from,c
  8980  00084E  0EFF               	movlw	high STR_14
  8981  000850  6E14               	movwf	strcpy@from+1,c
  8982  000852  EC01  F01B         	call	_strcpy	;wreg free
  8983                           
  8984                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
  8985  000856  0E64               	movlw	100
  8986  000858  6E39               	movwf	drawtext@y,c
  8987  00085A  C04D  F03A         	movff	_txt,drawtext@_text
  8988  00085E  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  8989  000862  0EFF               	movlw	255
  8990  000864  6E3D               	movwf	drawtext@color+1,c
  8991  000866  0EE0               	movlw	224
  8992  000868  6E3C               	movwf	drawtext@color,c
  8993  00086A  0E00               	movlw	0
  8994  00086C  6E3F               	movwf	drawtext@bg+1,c
  8995  00086E  0E00               	movlw	0
  8996  000870  6E3E               	movwf	drawtext@bg,c
  8997  000872  0E01               	movlw	1
  8998  000874  6E40               	movwf	drawtext@size,c
  8999  000876  0E4D               	movlw	77
  9000  000878  ECBE  F00C         	call	_drawtext
  9001                           
  9002                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
  9003  00087C  C04D  F011         	movff	_txt,strcpy@to
  9004  000880  C04E  F012         	movff	_txt+1,strcpy@to+1
  9005  000884  0E7B               	movlw	low STR_15
  9006  000886  6E13               	movwf	strcpy@from,c
  9007  000888  0EFF               	movlw	high STR_15
  9008  00088A  6E14               	movwf	strcpy@from+1,c
  9009  00088C  EC01  F01B         	call	_strcpy	;wreg free
  9010                           
  9011                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
  9012  000890  0E78               	movlw	120
  9013  000892  6E39               	movwf	drawtext@y,c
  9014  000894  C04D  F03A         	movff	_txt,drawtext@_text
  9015  000898  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  9016  00089C  0E00               	movlw	0
  9017  00089E  6E3D               	movwf	drawtext@color+1,c
  9018  0008A0  0E1F               	movlw	31
  9019  0008A2  6E3C               	movwf	drawtext@color,c
  9020  0008A4  0E00               	movlw	0
  9021  0008A6  6E3F               	movwf	drawtext@bg+1,c
  9022  0008A8  0E00               	movlw	0
  9023  0008AA  6E3E               	movwf	drawtext@bg,c
  9024  0008AC  0E01               	movlw	1
  9025  0008AE  6E40               	movwf	drawtext@size,c
  9026  0008B0  0E06               	movlw	6
  9027  0008B2  ECBE  F00C         	call	_drawtext
  9028                           
  9029                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
  9030  0008B6  C04D  F011         	movff	_txt,strcpy@to
  9031  0008BA  C04E  F012         	movff	_txt+1,strcpy@to+1
  9032  0008BE  0ED8               	movlw	low STR_16
  9033  0008C0  6E13               	movwf	strcpy@from,c
  9034  0008C2  0EFF               	movlw	high STR_16
  9035  0008C4  6E14               	movwf	strcpy@from+1,c
  9036  0008C6  EC01  F01B         	call	_strcpy	;wreg free
  9037                           
  9038                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  9039  0008CA  0E78               	movlw	120
  9040  0008CC  6E39               	movwf	drawtext@y,c
  9041  0008CE  C04D  F03A         	movff	_txt,drawtext@_text
  9042  0008D2  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  9043  0008D6  0E00               	movlw	0
  9044  0008D8  6E3D               	movwf	drawtext@color+1,c
  9045  0008DA  0E1F               	movlw	31
  9046  0008DC  6E3C               	movwf	drawtext@color,c
  9047  0008DE  0E00               	movlw	0
  9048  0008E0  6E3F               	movwf	drawtext@bg+1,c
  9049  0008E2  0E00               	movlw	0
  9050  0008E4  6E3E               	movwf	drawtext@bg,c
  9051  0008E6  0E01               	movlw	1
  9052  0008E8  6E40               	movwf	drawtext@size,c
  9053  0008EA  0E55               	movlw	85
  9054  0008EC  ECBE  F00C         	call	_drawtext
  9055                           
  9056                           ;Main_Screen.c: 65: strcpy(txt, "DC");
  9057  0008F0  C04D  F011         	movff	_txt,strcpy@to
  9058  0008F4  C04E  F012         	movff	_txt+1,strcpy@to+1
  9059  0008F8  0EF8               	movlw	low STR_17
  9060  0008FA  6E13               	movwf	strcpy@from,c
  9061  0008FC  0EFF               	movlw	high STR_17
  9062  0008FE  6E14               	movwf	strcpy@from+1,c
  9063  000900  EC01  F01B         	call	_strcpy	;wreg free
  9064                           
  9065                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  9066  000904  0E8C               	movlw	140
  9067  000906  6E39               	movwf	drawtext@y,c
  9068  000908  C04D  F03A         	movff	_txt,drawtext@_text
  9069  00090C  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  9070  000910  0EFF               	movlw	255
  9071  000912  6E3D               	movwf	drawtext@color+1,c
  9072  000914  683C               	setf	drawtext@color,c
  9073  000916  0E00               	movlw	0
  9074  000918  6E3F               	movwf	drawtext@bg+1,c
  9075  00091A  0E00               	movlw	0
  9076  00091C  6E3E               	movwf	drawtext@bg,c
  9077  00091E  0E01               	movlw	1
  9078  000920  6E40               	movwf	drawtext@size,c
  9079  000922  0E0C               	movlw	12
  9080  000924  ECBE  F00C         	call	_drawtext
  9081                           
  9082                           ;Main_Screen.c: 67: strcpy(txt, "RM");
  9083  000928  C04D  F011         	movff	_txt,strcpy@to
  9084  00092C  C04E  F012         	movff	_txt+1,strcpy@to+1
  9085  000930  0EFB               	movlw	low STR_18
  9086  000932  6E13               	movwf	strcpy@from,c
  9087  000934  0EFF               	movlw	high STR_18
  9088  000936  6E14               	movwf	strcpy@from+1,c
  9089  000938  EC01  F01B         	call	_strcpy	;wreg free
  9090                           
  9091                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
  9092  00093C  0E8C               	movlw	140
  9093  00093E  6E39               	movwf	drawtext@y,c
  9094  000940  C04D  F03A         	movff	_txt,drawtext@_text
  9095  000944  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  9096  000948  0EFF               	movlw	255
  9097  00094A  6E3D               	movwf	drawtext@color+1,c
  9098  00094C  683C               	setf	drawtext@color,c
  9099  00094E  0E00               	movlw	0
  9100  000950  6E3F               	movwf	drawtext@bg+1,c
  9101  000952  0E00               	movlw	0
  9102  000954  6E3E               	movwf	drawtext@bg,c
  9103  000956  0E01               	movlw	1
  9104  000958  6E40               	movwf	drawtext@size,c
  9105  00095A  0E21               	movlw	33
  9106  00095C  ECBE  F00C         	call	_drawtext
  9107                           
  9108                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
  9109  000960  C04D  F011         	movff	_txt,strcpy@to
  9110  000964  C04E  F012         	movff	_txt+1,strcpy@to+1
  9111  000968  0EE4               	movlw	low STR_19
  9112  00096A  6E13               	movwf	strcpy@from,c
  9113  00096C  0EFF               	movlw	high STR_19
  9114  00096E  6E14               	movwf	strcpy@from+1,c
  9115  000970  EC01  F01B         	call	_strcpy	;wreg free
  9116                           
  9117                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
  9118  000974  0E8C               	movlw	140
  9119  000976  6E39               	movwf	drawtext@y,c
  9120  000978  C04D  F03A         	movff	_txt,drawtext@_text
  9121  00097C  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  9122  000980  0EFF               	movlw	255
  9123  000982  6E3D               	movwf	drawtext@color+1,c
  9124  000984  683C               	setf	drawtext@color,c
  9125  000986  0E00               	movlw	0
  9126  000988  6E3F               	movwf	drawtext@bg+1,c
  9127  00098A  0E00               	movlw	0
  9128  00098C  6E3E               	movwf	drawtext@bg,c
  9129  00098E  0E01               	movlw	1
  9130  000990  6E40               	movwf	drawtext@size,c
  9131  000992  0E32               	movlw	50
  9132  000994  ECBE  F00C         	call	_drawtext
  9133                           
  9134                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
  9135  000998  C04D  F011         	movff	_txt,strcpy@to
  9136  00099C  C04E  F012         	movff	_txt+1,strcpy@to+1
  9137  0009A0  0EF1               	movlw	low STR_20
  9138  0009A2  6E13               	movwf	strcpy@from,c
  9139  0009A4  0EFF               	movlw	high STR_20
  9140  0009A6  6E14               	movwf	strcpy@from+1,c
  9141  0009A8  EC01  F01B         	call	_strcpy	;wreg free
  9142                           
  9143                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  9144  0009AC  0E8C               	movlw	140
  9145  0009AE  6E39               	movwf	drawtext@y,c
  9146  0009B0  C04D  F03A         	movff	_txt,drawtext@_text
  9147  0009B4  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  9148  0009B8  0EFF               	movlw	255
  9149  0009BA  6E3D               	movwf	drawtext@color+1,c
  9150  0009BC  683C               	setf	drawtext@color,c
  9151  0009BE  0E00               	movlw	0
  9152  0009C0  6E3F               	movwf	drawtext@bg+1,c
  9153  0009C2  0E00               	movlw	0
  9154  0009C4  6E3E               	movwf	drawtext@bg,c
  9155  0009C6  0E01               	movlw	1
  9156  0009C8  6E40               	movwf	drawtext@size,c
  9157  0009CA  0E5F               	movlw	95
  9158  0009CC  ECBE  F00C         	call	_drawtext
  9159  0009D0  0012               	return		;funcret
  9160  0009D2                     __end_of_Initialize_Screen:
  9161                           	opt stack 0
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon2	equ	0xFF1
  9170                           postinc0	equ	0xFEE
  9171                           wreg	equ	0xFE8
  9172                           postdec1	equ	0xFE5
  9173                           plusw1	equ	0xFE3
  9174                           fsr1l	equ	0xFE1
  9175                           indf2	equ	0xFDF
  9176                           postinc2	equ	0xFDE
  9177                           plusw2	equ	0xFDB
  9178                           fsr2h	equ	0xFDA
  9179                           fsr2l	equ	0xFD9
  9180                           status	equ	0xFD8
  9181                           
  9182 ;; *************** function _strcpy *****************
  9183 ;; Defined at:
  9184 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;  to              2   16[COMRAM] PTR unsigned char 
  9187 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
  9188 ;;  from            2   18[COMRAM] PTR const unsigned char 
  9189 ;;		 -> STR_37(5), STR_36(5), STR_35(12), STR_34(19), 
  9190 ;;		 -> STR_33(16), STR_32(10), STR_31(11), STR_30(19), 
  9191 ;;		 -> STR_28(5), STR_27(8), STR_26(8), STR_25(18), 
  9192 ;;		 -> STR_24(4), STR_23(4), STR_22(4), STR_21(4), 
  9193 ;;		 -> STR_20(4), STR_19(5), STR_18(3), STR_17(3), 
  9194 ;;		 -> STR_16(7), STR_15(13), STR_14(9), STR_13(11), 
  9195 ;;		 -> STR_12(5), STR_11(5), STR_10(2), STR_9(3), 
  9196 ;;		 -> STR_8(13), STR_7(20), 
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  cp              2   20[COMRAM] PTR unsigned char 
  9199 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;                  2   16[COMRAM] PTR unsigned char 
  9202 ;; Registers used:
  9203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9209 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9212 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;Total ram usage:        6 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    3
  9216 ;; This function calls:
  9217 ;;		Nothing
  9218 ;; This function is called by:
  9219 ;;		_Initialize_Screen
  9220 ;;		_Update_Screen
  9221 ;;		_Initialize_Setup_Alarm_Time_Screen
  9222 ;;		_Initialize_Setup_Heater_Screen
  9223 ;;		_Initialize_Setup_Time_Screen
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           	psect	text42
  9228  003602                     __ptext42:
  9229                           	opt stack 0
  9230  003602                     _strcpy:
  9231                           	opt stack 26
  9232                           
  9233                           ;incstack = 0
  9234  003602  C011  F015         	movff	strcpy@to,strcpy@cp
  9235  003606  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  9236  00360A  D005               	goto	l8098
  9237  00360C                     l8096:
  9238  00360C  4A15               	infsnz	strcpy@cp,f,c
  9239  00360E  2A16               	incf	strcpy@cp+1,f,c
  9240  003610  4A13               	infsnz	strcpy@from,f,c
  9241  003612  2A14               	incf	strcpy@from+1,f,c
  9242  003614  D000               	goto	l8098
  9243  003616                     l8098:
  9244  003616  C013  FFF6         	movff	strcpy@from,tblptrl
  9245  00361A  C014  FFF7         	movff	strcpy@from+1,tblptrh
  9246  00361E                     	if	0	;tblptru may be non-zero
  9247  00361E                     	endif
  9248  00361E                     	if	0	;tblptru may be non-zero
  9249  00361E                     	endif
  9250  00361E  C015  FFD9         	movff	strcpy@cp,fsr2l
  9251  003622  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  9252  003626  0008               	tblrd		*
  9253  003628  CFF5 FFDF          	movff	tablat,indf2
  9254  00362C  50DF               	movf	indf2,w,c
  9255  00362E  A4D8               	btfss	status,2,c
  9256  003630  D7ED               	goto	l8096
  9257                           
  9258                           ;	Return value of _strcpy is never used
  9259  003632  0012               	return		;funcret
  9260  003634                     __end_of_strcpy:
  9261                           	opt stack 0
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           intcon2	equ	0xFF1
  9270                           postinc0	equ	0xFEE
  9271                           wreg	equ	0xFE8
  9272                           postdec1	equ	0xFE5
  9273                           plusw1	equ	0xFE3
  9274                           fsr1l	equ	0xFE1
  9275                           indf2	equ	0xFDF
  9276                           postinc2	equ	0xFDE
  9277                           plusw2	equ	0xFDB
  9278                           fsr2h	equ	0xFDA
  9279                           fsr2l	equ	0xFD9
  9280                           status	equ	0xFD8
  9281                           
  9282 ;; *************** function _fillScreen *****************
  9283 ;; Defined at:
  9284 ;;		line 619 in file "ST7735_TFT.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;  color           2   35[COMRAM] unsigned int 
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;		None               void
  9291 ;; Registers used:
  9292 ;;		wreg, status,2, status,0, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;Total ram usage:        2 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    7
  9305 ;; This function calls:
  9306 ;;		_fillRectangle
  9307 ;; This function is called by:
  9308 ;;		_Initialize_Screen
  9309 ;;		_Initialize_Setup_Alarm_Time_Screen
  9310 ;;		_Initialize_Setup_Heater_Screen
  9311 ;;		_Initialize_Setup_Time_Screen
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           	psect	text43
  9316  0037FC                     __ptext43:
  9317                           	opt stack 0
  9318  0037FC                     _fillScreen:
  9319                           	opt stack 22
  9320                           
  9321                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  9322                           
  9323                           ;incstack = 0
  9324  0037FC  0E00               	movlw	0
  9325  0037FE  6E18               	movwf	fillRectangle@y,c
  9326  003800  0E80               	movlw	128
  9327  003802  6E19               	movwf	fillRectangle@w,c
  9328  003804  0EA0               	movlw	160
  9329  003806  6E1A               	movwf	fillRectangle@h,c
  9330  003808  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  9331  00380C  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  9332  003810  0E00               	movlw	0
  9333  003812  EC1B  F011         	call	_fillRectangle
  9334  003816  0012               	return		;funcret
  9335  003818                     __end_of_fillScreen:
  9336                           	opt stack 0
  9337                           tblptru	equ	0xFF8
  9338                           tblptrh	equ	0xFF7
  9339                           tblptrl	equ	0xFF6
  9340                           tablat	equ	0xFF5
  9341                           prodh	equ	0xFF4
  9342                           prodl	equ	0xFF3
  9343                           intcon	equ	0xFF2
  9344                           intcon2	equ	0xFF1
  9345                           postinc0	equ	0xFEE
  9346                           wreg	equ	0xFE8
  9347                           postdec1	equ	0xFE5
  9348                           plusw1	equ	0xFE3
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           plusw2	equ	0xFDB
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357 ;; *************** function _fillRectangle *****************
  9358 ;; Defined at:
  9359 ;;		line 503 in file "ST7735_TFT.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  x               1    wreg     unsigned char 
  9362 ;;  y               1   23[COMRAM] unsigned char 
  9363 ;;  w               1   24[COMRAM] unsigned char 
  9364 ;;  h               1   25[COMRAM] unsigned char 
  9365 ;;  color           2   26[COMRAM] unsigned int 
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;  x               1   34[COMRAM] unsigned char 
  9368 ;;  lo              1   33[COMRAM] unsigned char 
  9369 ;;  hi              1   32[COMRAM] unsigned char 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;		None               void
  9372 ;; Registers used:
  9373 ;;		wreg, status,2, status,0, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9379 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;Total ram usage:       12 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    6
  9386 ;; This function calls:
  9387 ;;		_setAddrWindow
  9388 ;;		_spiwrite
  9389 ;; This function is called by:
  9390 ;;		_fillScreen
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text44
  9395  002236                     __ptext44:
  9396                           	opt stack 0
  9397  002236                     _fillRectangle:
  9398                           	opt stack 22
  9399                           
  9400                           ;incstack = 0
  9401                           ;fillRectangle@x stored from wreg
  9402  002236  6E23               	movwf	fillRectangle@x,c
  9403                           
  9404                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  9405                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  9406  002238  0E80               	movlw	128
  9407  00223A  6023               	cpfslt	fillRectangle@x,c
  9408  00223C  D069               	goto	l783
  9409  00223E  0E9F               	movlw	159
  9410  002240  6418               	cpfsgt	fillRectangle@y,c
  9411  002242  D001               	goto	l7782
  9412                           
  9413                           ;ST7735_TFT.c: 507: return;
  9414  002244  D065               	goto	l783
  9415  002246                     l7782:
  9416                           
  9417                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  9418  002246  0EFF               	movlw	255
  9419  002248  6E1D               	movwf	??_fillRectangle& (0+255),c
  9420  00224A  0EFF               	movlw	255
  9421  00224C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9422  00224E  5019               	movf	fillRectangle@w,w,c
  9423  002250  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  9424  002254  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9425  002256  261F               	addwf	??_fillRectangle+2,f,c
  9426  002258  0E00               	movlw	0
  9427  00225A  2220               	addwfc	??_fillRectangle+3,f,c
  9428  00225C  501D               	movf	??_fillRectangle,w,c
  9429  00225E  261F               	addwf	??_fillRectangle+2,f,c
  9430  002260  501E               	movf	??_fillRectangle+1,w,c
  9431  002262  2220               	addwfc	??_fillRectangle+3,f,c
  9432  002264  BE20               	btfsc	??_fillRectangle+3,7,c
  9433  002266  D00A               	goto	l784
  9434  002268  5020               	movf	??_fillRectangle+3,w,c
  9435  00226A  E104               	bnz	u5270
  9436  00226C  0E80               	movlw	128
  9437  00226E  5C1F               	subwf	??_fillRectangle+2,w,c
  9438  002270  A0D8               	btfss	status,0,c
  9439  002272  D004               	goto	l784
  9440  002274                     u5270:
  9441                           
  9442                           ;ST7735_TFT.c: 509: w = 128 - x;
  9443  002274  5023               	movf	fillRectangle@x,w,c
  9444  002276  0800               	sublw	0
  9445  002278  0F80               	addlw	128
  9446  00227A  6E19               	movwf	fillRectangle@w,c
  9447  00227C                     l784:
  9448                           
  9449                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  9450  00227C  0EFF               	movlw	255
  9451  00227E  6E1D               	movwf	??_fillRectangle& (0+255),c
  9452  002280  0EFF               	movlw	255
  9453  002282  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9454  002284  501A               	movf	fillRectangle@h,w,c
  9455  002286  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  9456  00228A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  9457  00228C  261F               	addwf	??_fillRectangle+2,f,c
  9458  00228E  0E00               	movlw	0
  9459  002290  2220               	addwfc	??_fillRectangle+3,f,c
  9460  002292  501D               	movf	??_fillRectangle,w,c
  9461  002294  261F               	addwf	??_fillRectangle+2,f,c
  9462  002296  501E               	movf	??_fillRectangle+1,w,c
  9463  002298  2220               	addwfc	??_fillRectangle+3,f,c
  9464  00229A  BE20               	btfsc	??_fillRectangle+3,7,c
  9465  00229C  D00B               	goto	l7788
  9466  00229E  5020               	movf	??_fillRectangle+3,w,c
  9467  0022A0  E104               	bnz	u5280
  9468  0022A2  0EA0               	movlw	160
  9469  0022A4  5C1F               	subwf	??_fillRectangle+2,w,c
  9470  0022A6  A0D8               	btfss	status,0,c
  9471  0022A8  D005               	goto	l7788
  9472  0022AA                     u5280:
  9473                           
  9474                           ;ST7735_TFT.c: 511: h = 160 - y;
  9475  0022AA  5018               	movf	fillRectangle@y,w,c
  9476  0022AC  0800               	sublw	0
  9477  0022AE  0FA0               	addlw	160
  9478  0022B0  6E1A               	movwf	fillRectangle@h,c
  9479  0022B2  D000               	goto	l7788
  9480  0022B4                     l7788:
  9481                           
  9482                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  9483  0022B4  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  9484  0022B8  5023               	movf	fillRectangle@x,w,c
  9485  0022BA  2419               	addwf	fillRectangle@w,w,c
  9486  0022BC  6E1D               	movwf	??_fillRectangle& (0+255),c
  9487  0022BE  041D               	decf	??_fillRectangle,w,c
  9488  0022C0  6E15               	movwf	setAddrWindow@x1,c
  9489  0022C2  5018               	movf	fillRectangle@y,w,c
  9490  0022C4  241A               	addwf	fillRectangle@h,w,c
  9491  0022C6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  9492  0022C8  041E               	decf	??_fillRectangle+1,w,c
  9493  0022CA  6E16               	movwf	setAddrWindow@y1,c
  9494  0022CC  5023               	movf	fillRectangle@x,w,c
  9495  0022CE  EC4E  F019         	call	_setAddrWindow
  9496                           
  9497                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  9498  0022D2  501C               	movf	fillRectangle@color+1,w,c
  9499  0022D4  6E21               	movwf	fillRectangle@hi,c
  9500  0022D6  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  9501                           
  9502                           ;ST7735_TFT.c: 514: PORTBbits.RB5 = 1;
  9503  0022DA  8A81               	bsf	3969,5,c	;volatile
  9504                           
  9505                           ;ST7735_TFT.c: 515: PORTBbits.RB6 = 0;
  9506  0022DC  9C81               	bcf	3969,6,c	;volatile
  9507                           
  9508                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  9509  0022DE  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  9510  0022E2                     l7800:
  9511  0022E2  5018               	movf	fillRectangle@y,w,c
  9512  0022E4  B4D8               	btfsc	status,2,c
  9513  0022E6  D013               	goto	l787
  9514  0022E8  D001               	goto	l786
  9515  0022EA  D011               	goto	l787
  9516  0022EC                     l786:
  9517                           
  9518                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  9519  0022EC  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  9520  0022F0                     l7804:
  9521  0022F0  5023               	movf	fillRectangle@x,w,c
  9522  0022F2  B4D8               	btfsc	status,2,c
  9523  0022F4  D00A               	goto	l7814
  9524  0022F6  D001               	goto	l7808
  9525  0022F8  D008               	goto	l7814
  9526  0022FA                     l7808:
  9527                           
  9528                           ;ST7735_TFT.c: 519: spiwrite(hi);
  9529  0022FA  5021               	movf	fillRectangle@hi,w,c
  9530  0022FC  ECBA  F01C         	call	_spiwrite
  9531                           
  9532                           ;ST7735_TFT.c: 520: spiwrite(lo);
  9533  002300  5022               	movf	fillRectangle@lo,w,c
  9534  002302  ECBA  F01C         	call	_spiwrite
  9535  002306  0623               	decf	fillRectangle@x,f,c
  9536  002308  D7F3               	goto	l7804
  9537  00230A                     l7814:
  9538  00230A  0618               	decf	fillRectangle@y,f,c
  9539  00230C  D7EA               	goto	l7800
  9540  00230E                     l787:
  9541                           
  9542                           ;ST7735_TFT.c: 521: }
  9543                           ;ST7735_TFT.c: 522: }
  9544                           ;ST7735_TFT.c: 523: PORTBbits.RB6 = 1;
  9545  00230E  8C81               	bsf	3969,6,c	;volatile
  9546  002310                     l783:
  9547  002310  0012               	return		;funcret
  9548  002312                     __end_of_fillRectangle:
  9549                           	opt stack 0
  9550                           tblptru	equ	0xFF8
  9551                           tblptrh	equ	0xFF7
  9552                           tblptrl	equ	0xFF6
  9553                           tablat	equ	0xFF5
  9554                           prodh	equ	0xFF4
  9555                           prodl	equ	0xFF3
  9556                           intcon	equ	0xFF2
  9557                           intcon2	equ	0xFF1
  9558                           postinc0	equ	0xFEE
  9559                           wreg	equ	0xFE8
  9560                           postdec1	equ	0xFE5
  9561                           plusw1	equ	0xFE3
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           plusw2	equ	0xFDB
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570 ;; *************** function _drawCircle *****************
  9571 ;; Defined at:
  9572 ;;		line 528 in file "ST7735_TFT.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  x0              2   27[COMRAM] int 
  9575 ;;  y0              2   29[COMRAM] int 
  9576 ;;  r               2   31[COMRAM] int 
  9577 ;;  color           2   33[COMRAM] unsigned int 
  9578 ;; Auto vars:     Size  Location     Type
  9579 ;;  y               2   45[COMRAM] int 
  9580 ;;  x               2   43[COMRAM] int 
  9581 ;;  f               2   41[COMRAM] int 
  9582 ;;  ddF_y           2   39[COMRAM] int 
  9583 ;;  ddF_x           2   37[COMRAM] int 
  9584 ;; Return value:  Size  Location     Type
  9585 ;;		None               void
  9586 ;; Registers used:
  9587 ;;		wreg, status,2, status,0, cstack
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9593 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;Total ram usage:       20 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; Hardware stack levels required when called:    7
  9600 ;; This function calls:
  9601 ;;		_drawPixel
  9602 ;; This function is called by:
  9603 ;;		_Initialize_Screen
  9604 ;; This function uses a non-reentrant model
  9605 ;;
  9606                           
  9607                           	psect	text45
  9608  00126E                     __ptext45:
  9609                           	opt stack 0
  9610  00126E                     _drawCircle:
  9611                           	opt stack 22
  9612                           
  9613                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  9614                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  9615                           
  9616                           ;incstack = 0
  9617  00126E  C020  F024         	movff	drawCircle@r,??_drawCircle
  9618  001272  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  9619  001276  1E24               	comf	??_drawCircle,f,c
  9620  001278  1E25               	comf	??_drawCircle+1,f,c
  9621  00127A  4A24               	infsnz	??_drawCircle,f,c
  9622  00127C  2A25               	incf	??_drawCircle+1,f,c
  9623  00127E  0E01               	movlw	1
  9624  001280  2424               	addwf	??_drawCircle,w,c
  9625  001282  6E2A               	movwf	drawCircle@f,c
  9626  001284  0E00               	movlw	0
  9627  001286  2025               	addwfc	??_drawCircle+1,w,c
  9628  001288  6E2B               	movwf	drawCircle@f+1,c
  9629  00128A  0E00               	movlw	0
  9630  00128C  6E27               	movwf	drawCircle@ddF_x+1,c
  9631  00128E  0E01               	movlw	1
  9632  001290  6E26               	movwf	drawCircle@ddF_x,c
  9633  001292  C020  F024         	movff	drawCircle@r,??_drawCircle
  9634  001296  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  9635  00129A  90D8               	bcf	status,0,c
  9636  00129C  3624               	rlcf	??_drawCircle,f,c
  9637  00129E  3625               	rlcf	??_drawCircle+1,f,c
  9638  0012A0  1E24               	comf	??_drawCircle,f,c
  9639  0012A2  1E25               	comf	??_drawCircle+1,f,c
  9640  0012A4  4A24               	infsnz	??_drawCircle,f,c
  9641  0012A6  2A25               	incf	??_drawCircle+1,f,c
  9642  0012A8  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  9643  0012AC  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  9644  0012B0  0E00               	movlw	0
  9645  0012B2  6E2D               	movwf	drawCircle@x+1,c
  9646  0012B4  0E00               	movlw	0
  9647  0012B6  6E2C               	movwf	drawCircle@x,c
  9648  0012B8  C020  F02E         	movff	drawCircle@r,drawCircle@y
  9649  0012BC  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  9650                           
  9651                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  9652  0012C0  501E               	movf	drawCircle@y0,w,c
  9653  0012C2  2420               	addwf	drawCircle@r,w,c
  9654  0012C4  6E18               	movwf	drawPixel@y,c
  9655  0012C6  C022  F019         	movff	drawCircle@color,drawPixel@color
  9656  0012CA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9657  0012CE  501C               	movf	drawCircle@x0,w,c
  9658  0012D0  EC33  F01B         	call	_drawPixel
  9659                           
  9660                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  9661  0012D4  5020               	movf	drawCircle@r,w,c
  9662  0012D6  0800               	sublw	0
  9663  0012D8  241E               	addwf	drawCircle@y0,w,c
  9664  0012DA  6E18               	movwf	drawPixel@y,c
  9665  0012DC  C022  F019         	movff	drawCircle@color,drawPixel@color
  9666  0012E0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9667  0012E4  501C               	movf	drawCircle@x0,w,c
  9668  0012E6  EC33  F01B         	call	_drawPixel
  9669                           
  9670                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  9671  0012EA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  9672  0012EE  C022  F019         	movff	drawCircle@color,drawPixel@color
  9673  0012F2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9674  0012F6  501C               	movf	drawCircle@x0,w,c
  9675  0012F8  2420               	addwf	drawCircle@r,w,c
  9676  0012FA  EC33  F01B         	call	_drawPixel
  9677                           
  9678                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  9679  0012FE  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  9680  001302  C022  F019         	movff	drawCircle@color,drawPixel@color
  9681  001306  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9682  00130A  5020               	movf	drawCircle@r,w,c
  9683  00130C  0800               	sublw	0
  9684  00130E  241C               	addwf	drawCircle@x0,w,c
  9685  001310  EC33  F01B         	call	_drawPixel
  9686                           
  9687                           ;ST7735_TFT.c: 536: while (x < y) {
  9688  001314  D078               	goto	l8182
  9689  001316                     l8154:
  9690                           
  9691                           ;ST7735_TFT.c: 537: if (f >= 0) {
  9692  001316  BE2B               	btfsc	drawCircle@f+1,7,c
  9693  001318  D00B               	goto	l794
  9694                           
  9695                           ;ST7735_TFT.c: 538: y--;
  9696  00131A  062E               	decf	drawCircle@y,f,c
  9697  00131C  A0D8               	btfss	status,0,c
  9698  00131E  062F               	decf	drawCircle@y+1,f,c
  9699                           
  9700                           ;ST7735_TFT.c: 539: ddF_y += 2;
  9701  001320  0E02               	movlw	2
  9702  001322  2628               	addwf	drawCircle@ddF_y,f,c
  9703  001324  0E00               	movlw	0
  9704  001326  2229               	addwfc	drawCircle@ddF_y+1,f,c
  9705                           
  9706                           ;ST7735_TFT.c: 540: f += ddF_y;
  9707  001328  5028               	movf	drawCircle@ddF_y,w,c
  9708  00132A  262A               	addwf	drawCircle@f,f,c
  9709  00132C  5029               	movf	drawCircle@ddF_y+1,w,c
  9710  00132E  222B               	addwfc	drawCircle@f+1,f,c
  9711  001330                     l794:
  9712                           
  9713                           ;ST7735_TFT.c: 541: }
  9714                           ;ST7735_TFT.c: 542: x++;
  9715  001330  4A2C               	infsnz	drawCircle@x,f,c
  9716  001332  2A2D               	incf	drawCircle@x+1,f,c
  9717                           
  9718                           ;ST7735_TFT.c: 543: ddF_x += 2;
  9719  001334  0E02               	movlw	2
  9720  001336  2626               	addwf	drawCircle@ddF_x,f,c
  9721  001338  0E00               	movlw	0
  9722  00133A  2227               	addwfc	drawCircle@ddF_x+1,f,c
  9723                           
  9724                           ;ST7735_TFT.c: 544: f += ddF_x;
  9725  00133C  5026               	movf	drawCircle@ddF_x,w,c
  9726  00133E  262A               	addwf	drawCircle@f,f,c
  9727  001340  5027               	movf	drawCircle@ddF_x+1,w,c
  9728  001342  222B               	addwfc	drawCircle@f+1,f,c
  9729                           
  9730                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  9731  001344  501E               	movf	drawCircle@y0,w,c
  9732  001346  242E               	addwf	drawCircle@y,w,c
  9733  001348  6E18               	movwf	drawPixel@y,c
  9734  00134A  C022  F019         	movff	drawCircle@color,drawPixel@color
  9735  00134E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9736  001352  501C               	movf	drawCircle@x0,w,c
  9737  001354  242C               	addwf	drawCircle@x,w,c
  9738  001356  EC33  F01B         	call	_drawPixel
  9739                           
  9740                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  9741  00135A  501E               	movf	drawCircle@y0,w,c
  9742  00135C  242E               	addwf	drawCircle@y,w,c
  9743  00135E  6E18               	movwf	drawPixel@y,c
  9744  001360  C022  F019         	movff	drawCircle@color,drawPixel@color
  9745  001364  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9746  001368  502C               	movf	drawCircle@x,w,c
  9747  00136A  0800               	sublw	0
  9748  00136C  241C               	addwf	drawCircle@x0,w,c
  9749  00136E  EC33  F01B         	call	_drawPixel
  9750                           
  9751                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  9752  001372  502E               	movf	drawCircle@y,w,c
  9753  001374  0800               	sublw	0
  9754  001376  241E               	addwf	drawCircle@y0,w,c
  9755  001378  6E18               	movwf	drawPixel@y,c
  9756  00137A  C022  F019         	movff	drawCircle@color,drawPixel@color
  9757  00137E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9758  001382  501C               	movf	drawCircle@x0,w,c
  9759  001384  242C               	addwf	drawCircle@x,w,c
  9760  001386  EC33  F01B         	call	_drawPixel
  9761                           
  9762                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  9763  00138A  502E               	movf	drawCircle@y,w,c
  9764  00138C  0800               	sublw	0
  9765  00138E  241E               	addwf	drawCircle@y0,w,c
  9766  001390  6E18               	movwf	drawPixel@y,c
  9767  001392  C022  F019         	movff	drawCircle@color,drawPixel@color
  9768  001396  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9769  00139A  502C               	movf	drawCircle@x,w,c
  9770  00139C  0800               	sublw	0
  9771  00139E  241C               	addwf	drawCircle@x0,w,c
  9772  0013A0  EC33  F01B         	call	_drawPixel
  9773                           
  9774                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  9775  0013A4  501E               	movf	drawCircle@y0,w,c
  9776  0013A6  242C               	addwf	drawCircle@x,w,c
  9777  0013A8  6E18               	movwf	drawPixel@y,c
  9778  0013AA  C022  F019         	movff	drawCircle@color,drawPixel@color
  9779  0013AE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9780  0013B2  501C               	movf	drawCircle@x0,w,c
  9781  0013B4  242E               	addwf	drawCircle@y,w,c
  9782  0013B6  EC33  F01B         	call	_drawPixel
  9783                           
  9784                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  9785  0013BA  501E               	movf	drawCircle@y0,w,c
  9786  0013BC  242C               	addwf	drawCircle@x,w,c
  9787  0013BE  6E18               	movwf	drawPixel@y,c
  9788  0013C0  C022  F019         	movff	drawCircle@color,drawPixel@color
  9789  0013C4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9790  0013C8  502E               	movf	drawCircle@y,w,c
  9791  0013CA  0800               	sublw	0
  9792  0013CC  241C               	addwf	drawCircle@x0,w,c
  9793  0013CE  EC33  F01B         	call	_drawPixel
  9794                           
  9795                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  9796  0013D2  502C               	movf	drawCircle@x,w,c
  9797  0013D4  0800               	sublw	0
  9798  0013D6  241E               	addwf	drawCircle@y0,w,c
  9799  0013D8  6E18               	movwf	drawPixel@y,c
  9800  0013DA  C022  F019         	movff	drawCircle@color,drawPixel@color
  9801  0013DE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9802  0013E2  501C               	movf	drawCircle@x0,w,c
  9803  0013E4  242E               	addwf	drawCircle@y,w,c
  9804  0013E6  EC33  F01B         	call	_drawPixel
  9805                           
  9806                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  9807  0013EA  502C               	movf	drawCircle@x,w,c
  9808  0013EC  0800               	sublw	0
  9809  0013EE  241E               	addwf	drawCircle@y0,w,c
  9810  0013F0  6E18               	movwf	drawPixel@y,c
  9811  0013F2  C022  F019         	movff	drawCircle@color,drawPixel@color
  9812  0013F6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  9813  0013FA  502E               	movf	drawCircle@y,w,c
  9814  0013FC  0800               	sublw	0
  9815  0013FE  241C               	addwf	drawCircle@x0,w,c
  9816  001400  EC33  F01B         	call	_drawPixel
  9817  001404  D000               	goto	l8182
  9818  001406                     l8182:
  9819  001406  502E               	movf	drawCircle@y,w,c
  9820  001408  5C2C               	subwf	drawCircle@x,w,c
  9821  00140A  502D               	movf	drawCircle@x+1,w,c
  9822  00140C  0A80               	xorlw	128
  9823  00140E  6E24               	movwf	??_drawCircle& (0+255),c
  9824  001410  502F               	movf	drawCircle@y+1,w,c
  9825  001412  0A80               	xorlw	128
  9826  001414  5824               	subwfb	??_drawCircle& (0+255),w,c
  9827  001416  A0D8               	btfss	status,0,c
  9828  001418  D77E               	goto	l8154
  9829  00141A  0012               	return		;funcret
  9830  00141C                     __end_of_drawCircle:
  9831                           	opt stack 0
  9832                           tblptru	equ	0xFF8
  9833                           tblptrh	equ	0xFF7
  9834                           tblptrl	equ	0xFF6
  9835                           tablat	equ	0xFF5
  9836                           prodh	equ	0xFF4
  9837                           prodl	equ	0xFF3
  9838                           intcon	equ	0xFF2
  9839                           intcon2	equ	0xFF1
  9840                           postinc0	equ	0xFEE
  9841                           wreg	equ	0xFE8
  9842                           postdec1	equ	0xFE5
  9843                           plusw1	equ	0xFE3
  9844                           fsr1l	equ	0xFE1
  9845                           indf2	equ	0xFDF
  9846                           postinc2	equ	0xFDE
  9847                           plusw2	equ	0xFDB
  9848                           fsr2h	equ	0xFDA
  9849                           fsr2l	equ	0xFD9
  9850                           status	equ	0xFD8
  9851                           
  9852 ;; *************** function _TFT_GreenTab_Initialize *****************
  9853 ;; Defined at:
  9854 ;;		line 644 in file "ST7735_TFT.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;		None
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;		None
  9859 ;; Return value:  Size  Location     Type
  9860 ;;		None               void
  9861 ;; Registers used:
  9862 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;Total ram usage:        0 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    6
  9875 ;; This function calls:
  9876 ;;		_Rcmd1
  9877 ;;		_Rcmd2red
  9878 ;;		_Rcmd3
  9879 ;;		_write_command
  9880 ;;		_write_data
  9881 ;; This function is called by:
  9882 ;;		_Initialize_Screen
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           	psect	text46
  9887  0036C0                     __ptext46:
  9888                           	opt stack 0
  9889  0036C0                     _TFT_GreenTab_Initialize:
  9890                           	opt stack 23
  9891                           
  9892                           ;ST7735_TFT.c: 646: PORTBbits.RB6 = 1;
  9893                           
  9894                           ;incstack = 0
  9895  0036C0  8C81               	bsf	3969,6,c	;volatile
  9896                           
  9897                           ;ST7735_TFT.c: 647: PORTBbits.RB5 = 0;
  9898  0036C2  9A81               	bcf	3969,5,c	;volatile
  9899                           
  9900                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  9901  0036C4  0E80               	movlw	128
  9902  0036C6  6EC7               	movwf	4039,c	;volatile
  9903                           
  9904                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  9905  0036C8  0E30               	movlw	48
  9906  0036CA  6EC6               	movwf	4038,c	;volatile
  9907                           
  9908                           ;ST7735_TFT.c: 653: Rcmd1();
  9909  0036CC  EC36  F00C         	call	_Rcmd1	;wreg free
  9910                           
  9911                           ;ST7735_TFT.c: 654: Rcmd2red();
  9912  0036D0  EC4E  F01A         	call	_Rcmd2red	;wreg free
  9913                           
  9914                           ;ST7735_TFT.c: 655: Rcmd3();
  9915  0036D4  EC46  F00F         	call	_Rcmd3	;wreg free
  9916                           
  9917                           ;ST7735_TFT.c: 656: write_command(0x36);
  9918  0036D8  0E36               	movlw	54
  9919  0036DA  EC24  F01D         	call	_write_command
  9920                           
  9921                           ;ST7735_TFT.c: 657: write_data(0xC0);
  9922  0036DE  0EC0               	movlw	192
  9923  0036E0  EC1C  F01D         	call	_write_data
  9924                           
  9925                           ;ST7735_TFT.c: 658: _tft_type = 1;
  9926  0036E4  0E01               	movlw	1
  9927  0036E6  6E55               	movwf	__tft_type,c
  9928  0036E8  0012               	return		;funcret
  9929  0036EA                     __end_of_TFT_GreenTab_Initialize:
  9930                           	opt stack 0
  9931                           tblptru	equ	0xFF8
  9932                           tblptrh	equ	0xFF7
  9933                           tblptrl	equ	0xFF6
  9934                           tablat	equ	0xFF5
  9935                           prodh	equ	0xFF4
  9936                           prodl	equ	0xFF3
  9937                           intcon	equ	0xFF2
  9938                           intcon2	equ	0xFF1
  9939                           postinc0	equ	0xFEE
  9940                           wreg	equ	0xFE8
  9941                           postdec1	equ	0xFE5
  9942                           plusw1	equ	0xFE3
  9943                           fsr1l	equ	0xFE1
  9944                           indf2	equ	0xFDF
  9945                           postinc2	equ	0xFDE
  9946                           plusw2	equ	0xFDB
  9947                           fsr2h	equ	0xFDA
  9948                           fsr2l	equ	0xFD9
  9949                           status	equ	0xFD8
  9950                           
  9951 ;; *************** function _Rcmd3 *****************
  9952 ;; Defined at:
  9953 ;;		line 338 in file "ST7735_TFT.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;		None
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;		None
  9958 ;; Return value:  Size  Location     Type
  9959 ;;		None               void
  9960 ;; Registers used:
  9961 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;Total ram usage:        0 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    5
  9974 ;; This function calls:
  9975 ;;		_delay_ms
  9976 ;;		_write_command
  9977 ;;		_write_data
  9978 ;; This function is called by:
  9979 ;;		_TFT_GreenTab_Initialize
  9980 ;;		_TFT_BlackTab_Initialize
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           	psect	text47
  9985  001E8C                     __ptext47:
  9986                           	opt stack 0
  9987  001E8C                     _Rcmd3:
  9988                           	opt stack 23
  9989                           
  9990                           ;ST7735_TFT.c: 340: write_command(0xE0);
  9991                           
  9992                           ;incstack = 0
  9993  001E8C  0EE0               	movlw	224
  9994  001E8E  EC24  F01D         	call	_write_command
  9995                           
  9996                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  9997  001E92  0E02               	movlw	2
  9998  001E94  EC1C  F01D         	call	_write_data
  9999  001E98  0E1C               	movlw	28
 10000  001E9A  EC1C  F01D         	call	_write_data
 10001  001E9E  0E07               	movlw	7
 10002  001EA0  EC1C  F01D         	call	_write_data
 10003  001EA4  0E12               	movlw	18
 10004  001EA6  EC1C  F01D         	call	_write_data
 10005                           
 10006                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 10007  001EAA  0E37               	movlw	55
 10008  001EAC  EC1C  F01D         	call	_write_data
 10009  001EB0  0E32               	movlw	50
 10010  001EB2  EC1C  F01D         	call	_write_data
 10011  001EB6  0E29               	movlw	41
 10012  001EB8  EC1C  F01D         	call	_write_data
 10013  001EBC  0E2D               	movlw	45
 10014  001EBE  EC1C  F01D         	call	_write_data
 10015                           
 10016                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 10017  001EC2  0E29               	movlw	41
 10018  001EC4  EC1C  F01D         	call	_write_data
 10019  001EC8  0E25               	movlw	37
 10020  001ECA  EC1C  F01D         	call	_write_data
 10021  001ECE  0E2B               	movlw	43
 10022  001ED0  EC1C  F01D         	call	_write_data
 10023  001ED4  0E39               	movlw	57
 10024  001ED6  EC1C  F01D         	call	_write_data
 10025                           
 10026                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 10027  001EDA  0E00               	movlw	0
 10028  001EDC  EC1C  F01D         	call	_write_data
 10029  001EE0  0E01               	movlw	1
 10030  001EE2  EC1C  F01D         	call	_write_data
 10031  001EE6  0E03               	movlw	3
 10032  001EE8  EC1C  F01D         	call	_write_data
 10033  001EEC  0E10               	movlw	16
 10034  001EEE  EC1C  F01D         	call	_write_data
 10035                           
 10036                           ;ST7735_TFT.c: 345: write_command(0xE1);
 10037  001EF2  0EE1               	movlw	225
 10038  001EF4  EC24  F01D         	call	_write_command
 10039                           
 10040                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 10041  001EF8  0E03               	movlw	3
 10042  001EFA  EC1C  F01D         	call	_write_data
 10043  001EFE  0E1D               	movlw	29
 10044  001F00  EC1C  F01D         	call	_write_data
 10045  001F04  0E07               	movlw	7
 10046  001F06  EC1C  F01D         	call	_write_data
 10047  001F0A  0E06               	movlw	6
 10048  001F0C  EC1C  F01D         	call	_write_data
 10049                           
 10050                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 10051  001F10  0E2E               	movlw	46
 10052  001F12  EC1C  F01D         	call	_write_data
 10053  001F16  0E2C               	movlw	44
 10054  001F18  EC1C  F01D         	call	_write_data
 10055  001F1C  0E29               	movlw	41
 10056  001F1E  EC1C  F01D         	call	_write_data
 10057  001F22  0E2D               	movlw	45
 10058  001F24  EC1C  F01D         	call	_write_data
 10059                           
 10060                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 10061  001F28  0E2E               	movlw	46
 10062  001F2A  EC1C  F01D         	call	_write_data
 10063  001F2E  0E2E               	movlw	46
 10064  001F30  EC1C  F01D         	call	_write_data
 10065  001F34  0E37               	movlw	55
 10066  001F36  EC1C  F01D         	call	_write_data
 10067  001F3A  0E3F               	movlw	63
 10068  001F3C  EC1C  F01D         	call	_write_data
 10069                           
 10070                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 10071  001F40  0E00               	movlw	0
 10072  001F42  EC1C  F01D         	call	_write_data
 10073  001F46  0E00               	movlw	0
 10074  001F48  EC1C  F01D         	call	_write_data
 10075  001F4C  0E02               	movlw	2
 10076  001F4E  EC1C  F01D         	call	_write_data
 10077  001F52  0E10               	movlw	16
 10078  001F54  EC1C  F01D         	call	_write_data
 10079                           
 10080                           ;ST7735_TFT.c: 350: write_command(0x13);
 10081  001F58  0E13               	movlw	19
 10082  001F5A  EC24  F01D         	call	_write_command
 10083                           
 10084                           ;ST7735_TFT.c: 351: delay_ms(10);
 10085  001F5E  0E00               	movlw	0
 10086  001F60  6E18               	movwf	delay_ms@ms+1,c
 10087  001F62  0E0A               	movlw	10
 10088  001F64  6E17               	movwf	delay_ms@ms,c
 10089  001F66  ECAE  F018         	call	_delay_ms	;wreg free
 10090                           
 10091                           ;ST7735_TFT.c: 352: write_command(0x29);
 10092  001F6A  0E29               	movlw	41
 10093  001F6C  EC24  F01D         	call	_write_command
 10094                           
 10095                           ;ST7735_TFT.c: 353: delay_ms(100);
 10096  001F70  0E00               	movlw	0
 10097  001F72  6E18               	movwf	delay_ms@ms+1,c
 10098  001F74  0E64               	movlw	100
 10099  001F76  6E17               	movwf	delay_ms@ms,c
 10100  001F78  ECAE  F018         	call	_delay_ms	;wreg free
 10101  001F7C  0012               	return		;funcret
 10102  001F7E                     __end_of_Rcmd3:
 10103                           	opt stack 0
 10104                           tblptru	equ	0xFF8
 10105                           tblptrh	equ	0xFF7
 10106                           tblptrl	equ	0xFF6
 10107                           tablat	equ	0xFF5
 10108                           prodh	equ	0xFF4
 10109                           prodl	equ	0xFF3
 10110                           intcon	equ	0xFF2
 10111                           intcon2	equ	0xFF1
 10112                           postinc0	equ	0xFEE
 10113                           wreg	equ	0xFE8
 10114                           postdec1	equ	0xFE5
 10115                           plusw1	equ	0xFE3
 10116                           fsr1l	equ	0xFE1
 10117                           indf2	equ	0xFDF
 10118                           postinc2	equ	0xFDE
 10119                           plusw2	equ	0xFDB
 10120                           fsr2h	equ	0xFDA
 10121                           fsr2l	equ	0xFD9
 10122                           status	equ	0xFD8
 10123                           
 10124 ;; *************** function _Rcmd2red *****************
 10125 ;; Defined at:
 10126 ;;		line 328 in file "ST7735_TFT.c"
 10127 ;; Parameters:    Size  Location     Type
 10128 ;;		None
 10129 ;; Auto vars:     Size  Location     Type
 10130 ;;		None
 10131 ;; Return value:  Size  Location     Type
 10132 ;;		None               void
 10133 ;; Registers used:
 10134 ;;		wreg, status,2, cstack
 10135 ;; Tracked objects:
 10136 ;;		On entry : 0/0
 10137 ;;		On exit  : 0/0
 10138 ;;		Unchanged: 0/0
 10139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;Total ram usage:        0 bytes
 10145 ;; Hardware stack levels used:    1
 10146 ;; Hardware stack levels required when called:    5
 10147 ;; This function calls:
 10148 ;;		_write_command
 10149 ;;		_write_data
 10150 ;; This function is called by:
 10151 ;;		_TFT_GreenTab_Initialize
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           	psect	text48
 10156  00349C                     __ptext48:
 10157                           	opt stack 0
 10158  00349C                     _Rcmd2red:
 10159                           	opt stack 23
 10160                           
 10161                           ;ST7735_TFT.c: 330: write_command(0x2A);
 10162                           
 10163                           ;incstack = 0
 10164  00349C  0E2A               	movlw	42
 10165  00349E  EC24  F01D         	call	_write_command
 10166                           
 10167                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 10168  0034A2  0E00               	movlw	0
 10169  0034A4  EC1C  F01D         	call	_write_data
 10170  0034A8  0E00               	movlw	0
 10171  0034AA  EC1C  F01D         	call	_write_data
 10172                           
 10173                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 10174  0034AE  0E00               	movlw	0
 10175  0034B0  EC1C  F01D         	call	_write_data
 10176  0034B4  0E7F               	movlw	127
 10177  0034B6  EC1C  F01D         	call	_write_data
 10178                           
 10179                           ;ST7735_TFT.c: 333: write_command(0x2B);
 10180  0034BA  0E2B               	movlw	43
 10181  0034BC  EC24  F01D         	call	_write_command
 10182                           
 10183                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 10184  0034C0  0E00               	movlw	0
 10185  0034C2  EC1C  F01D         	call	_write_data
 10186  0034C6  0E00               	movlw	0
 10187  0034C8  EC1C  F01D         	call	_write_data
 10188                           
 10189                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 10190  0034CC  0E00               	movlw	0
 10191  0034CE  EC1C  F01D         	call	_write_data
 10192  0034D2  0E9F               	movlw	159
 10193  0034D4  EC1C  F01D         	call	_write_data
 10194  0034D8  0012               	return		;funcret
 10195  0034DA                     __end_of_Rcmd2red:
 10196                           	opt stack 0
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           intcon2	equ	0xFF1
 10205                           postinc0	equ	0xFEE
 10206                           wreg	equ	0xFE8
 10207                           postdec1	equ	0xFE5
 10208                           plusw1	equ	0xFE3
 10209                           fsr1l	equ	0xFE1
 10210                           indf2	equ	0xFDF
 10211                           postinc2	equ	0xFDE
 10212                           plusw2	equ	0xFDB
 10213                           fsr2h	equ	0xFDA
 10214                           fsr2l	equ	0xFD9
 10215                           status	equ	0xFD8
 10216                           
 10217 ;; *************** function _Rcmd1 *****************
 10218 ;; Defined at:
 10219 ;;		line 281 in file "ST7735_TFT.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;		None
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;		None
 10224 ;; Return value:  Size  Location     Type
 10225 ;;		None               void
 10226 ;; Registers used:
 10227 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10228 ;; Tracked objects:
 10229 ;;		On entry : 0/0
 10230 ;;		On exit  : 0/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;Total ram usage:        0 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; Hardware stack levels required when called:    5
 10240 ;; This function calls:
 10241 ;;		_delay_ms
 10242 ;;		_write_command
 10243 ;;		_write_data
 10244 ;; This function is called by:
 10245 ;;		_TFT_GreenTab_Initialize
 10246 ;;		_TFT_BlackTab_Initialize
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           	psect	text49
 10251  00186C                     __ptext49:
 10252                           	opt stack 0
 10253  00186C                     _Rcmd1:
 10254                           	opt stack 23
 10255                           
 10256                           ;ST7735_TFT.c: 283: write_command(0x01);
 10257                           
 10258                           ;incstack = 0
 10259  00186C  0E01               	movlw	1
 10260  00186E  EC24  F01D         	call	_write_command
 10261                           
 10262                           ;ST7735_TFT.c: 284: delay_ms(150);
 10263  001872  0E00               	movlw	0
 10264  001874  6E18               	movwf	delay_ms@ms+1,c
 10265  001876  0E96               	movlw	150
 10266  001878  6E17               	movwf	delay_ms@ms,c
 10267  00187A  ECAE  F018         	call	_delay_ms	;wreg free
 10268                           
 10269                           ;ST7735_TFT.c: 285: write_command(0x11);
 10270  00187E  0E11               	movlw	17
 10271  001880  EC24  F01D         	call	_write_command
 10272                           
 10273                           ;ST7735_TFT.c: 286: delay_ms(500);
 10274  001884  0E01               	movlw	1
 10275  001886  6E18               	movwf	delay_ms@ms+1,c
 10276  001888  0EF4               	movlw	244
 10277  00188A  6E17               	movwf	delay_ms@ms,c
 10278  00188C  ECAE  F018         	call	_delay_ms	;wreg free
 10279                           
 10280                           ;ST7735_TFT.c: 287: write_command(0xB1);
 10281  001890  0EB1               	movlw	177
 10282  001892  EC24  F01D         	call	_write_command
 10283                           
 10284                           ;ST7735_TFT.c: 288: write_data(0x01);
 10285  001896  0E01               	movlw	1
 10286  001898  EC1C  F01D         	call	_write_data
 10287                           
 10288                           ;ST7735_TFT.c: 289: write_data(0x2C);
 10289  00189C  0E2C               	movlw	44
 10290  00189E  EC1C  F01D         	call	_write_data
 10291                           
 10292                           ;ST7735_TFT.c: 290: write_data(0x2D);
 10293  0018A2  0E2D               	movlw	45
 10294  0018A4  EC1C  F01D         	call	_write_data
 10295                           
 10296                           ;ST7735_TFT.c: 291: write_command(0xB2);
 10297  0018A8  0EB2               	movlw	178
 10298  0018AA  EC24  F01D         	call	_write_command
 10299                           
 10300                           ;ST7735_TFT.c: 292: write_data(0x01);
 10301  0018AE  0E01               	movlw	1
 10302  0018B0  EC1C  F01D         	call	_write_data
 10303                           
 10304                           ;ST7735_TFT.c: 293: write_data(0x2C);
 10305  0018B4  0E2C               	movlw	44
 10306  0018B6  EC1C  F01D         	call	_write_data
 10307                           
 10308                           ;ST7735_TFT.c: 294: write_data(0x2D);
 10309  0018BA  0E2D               	movlw	45
 10310  0018BC  EC1C  F01D         	call	_write_data
 10311                           
 10312                           ;ST7735_TFT.c: 295: write_command(0xB3);
 10313  0018C0  0EB3               	movlw	179
 10314  0018C2  EC24  F01D         	call	_write_command
 10315                           
 10316                           ;ST7735_TFT.c: 296: write_data(0x01);
 10317  0018C6  0E01               	movlw	1
 10318  0018C8  EC1C  F01D         	call	_write_data
 10319                           
 10320                           ;ST7735_TFT.c: 297: write_data(0x2C);
 10321  0018CC  0E2C               	movlw	44
 10322  0018CE  EC1C  F01D         	call	_write_data
 10323                           
 10324                           ;ST7735_TFT.c: 298: write_data(0x2D);
 10325  0018D2  0E2D               	movlw	45
 10326  0018D4  EC1C  F01D         	call	_write_data
 10327                           
 10328                           ;ST7735_TFT.c: 299: write_data(0x01);
 10329  0018D8  0E01               	movlw	1
 10330  0018DA  EC1C  F01D         	call	_write_data
 10331                           
 10332                           ;ST7735_TFT.c: 300: write_data(0x2C);
 10333  0018DE  0E2C               	movlw	44
 10334  0018E0  EC1C  F01D         	call	_write_data
 10335                           
 10336                           ;ST7735_TFT.c: 301: write_data(0x2D);
 10337  0018E4  0E2D               	movlw	45
 10338  0018E6  EC1C  F01D         	call	_write_data
 10339                           
 10340                           ;ST7735_TFT.c: 302: write_command(0xB4);
 10341  0018EA  0EB4               	movlw	180
 10342  0018EC  EC24  F01D         	call	_write_command
 10343                           
 10344                           ;ST7735_TFT.c: 303: write_data(0x07);
 10345  0018F0  0E07               	movlw	7
 10346  0018F2  EC1C  F01D         	call	_write_data
 10347                           
 10348                           ;ST7735_TFT.c: 304: write_command(0xC0);
 10349  0018F6  0EC0               	movlw	192
 10350  0018F8  EC24  F01D         	call	_write_command
 10351                           
 10352                           ;ST7735_TFT.c: 305: write_data(0xA2);
 10353  0018FC  0EA2               	movlw	162
 10354  0018FE  EC1C  F01D         	call	_write_data
 10355                           
 10356                           ;ST7735_TFT.c: 306: write_data(0x02);
 10357  001902  0E02               	movlw	2
 10358  001904  EC1C  F01D         	call	_write_data
 10359                           
 10360                           ;ST7735_TFT.c: 307: write_data(0x84);
 10361  001908  0E84               	movlw	132
 10362  00190A  EC1C  F01D         	call	_write_data
 10363                           
 10364                           ;ST7735_TFT.c: 308: write_command(0xC1);
 10365  00190E  0EC1               	movlw	193
 10366  001910  EC24  F01D         	call	_write_command
 10367                           
 10368                           ;ST7735_TFT.c: 309: write_data(0xC5);
 10369  001914  0EC5               	movlw	197
 10370  001916  EC1C  F01D         	call	_write_data
 10371                           
 10372                           ;ST7735_TFT.c: 310: write_command(0xC2);
 10373  00191A  0EC2               	movlw	194
 10374  00191C  EC24  F01D         	call	_write_command
 10375                           
 10376                           ;ST7735_TFT.c: 311: write_data(0x0A);
 10377  001920  0E0A               	movlw	10
 10378  001922  EC1C  F01D         	call	_write_data
 10379                           
 10380                           ;ST7735_TFT.c: 312: write_data(0x00);
 10381  001926  0E00               	movlw	0
 10382  001928  EC1C  F01D         	call	_write_data
 10383                           
 10384                           ;ST7735_TFT.c: 313: write_command(0xC3);
 10385  00192C  0EC3               	movlw	195
 10386  00192E  EC24  F01D         	call	_write_command
 10387                           
 10388                           ;ST7735_TFT.c: 314: write_data(0x8A);
 10389  001932  0E8A               	movlw	138
 10390  001934  EC1C  F01D         	call	_write_data
 10391                           
 10392                           ;ST7735_TFT.c: 315: write_data(0x2A);
 10393  001938  0E2A               	movlw	42
 10394  00193A  EC1C  F01D         	call	_write_data
 10395                           
 10396                           ;ST7735_TFT.c: 316: write_command(0xC4);
 10397  00193E  0EC4               	movlw	196
 10398  001940  EC24  F01D         	call	_write_command
 10399                           
 10400                           ;ST7735_TFT.c: 317: write_data(0x8A);
 10401  001944  0E8A               	movlw	138
 10402  001946  EC1C  F01D         	call	_write_data
 10403                           
 10404                           ;ST7735_TFT.c: 318: write_data(0xEE);
 10405  00194A  0EEE               	movlw	238
 10406  00194C  EC1C  F01D         	call	_write_data
 10407                           
 10408                           ;ST7735_TFT.c: 319: write_command(0xC5);
 10409  001950  0EC5               	movlw	197
 10410  001952  EC24  F01D         	call	_write_command
 10411                           
 10412                           ;ST7735_TFT.c: 320: write_data(0x0E);
 10413  001956  0E0E               	movlw	14
 10414  001958  EC1C  F01D         	call	_write_data
 10415                           
 10416                           ;ST7735_TFT.c: 321: write_command(0x20);
 10417  00195C  0E20               	movlw	32
 10418  00195E  EC24  F01D         	call	_write_command
 10419                           
 10420                           ;ST7735_TFT.c: 322: write_command(0x36);
 10421  001962  0E36               	movlw	54
 10422  001964  EC24  F01D         	call	_write_command
 10423                           
 10424                           ;ST7735_TFT.c: 323: write_data(0xC8);
 10425  001968  0EC8               	movlw	200
 10426  00196A  EC1C  F01D         	call	_write_data
 10427                           
 10428                           ;ST7735_TFT.c: 324: write_command(0x3A);
 10429  00196E  0E3A               	movlw	58
 10430  001970  EC24  F01D         	call	_write_command
 10431                           
 10432                           ;ST7735_TFT.c: 325: write_data(0x05);
 10433  001974  0E05               	movlw	5
 10434  001976  EC1C  F01D         	call	_write_data
 10435  00197A  0012               	return		;funcret
 10436  00197C                     __end_of_Rcmd1:
 10437                           	opt stack 0
 10438                           tblptru	equ	0xFF8
 10439                           tblptrh	equ	0xFF7
 10440                           tblptrl	equ	0xFF6
 10441                           tablat	equ	0xFF5
 10442                           prodh	equ	0xFF4
 10443                           prodl	equ	0xFF3
 10444                           intcon	equ	0xFF2
 10445                           intcon2	equ	0xFF1
 10446                           postinc0	equ	0xFEE
 10447                           wreg	equ	0xFE8
 10448                           postdec1	equ	0xFE5
 10449                           plusw1	equ	0xFE3
 10450                           fsr1l	equ	0xFE1
 10451                           indf2	equ	0xFDF
 10452                           postinc2	equ	0xFDE
 10453                           plusw2	equ	0xFDB
 10454                           fsr2h	equ	0xFDA
 10455                           fsr2l	equ	0xFD9
 10456                           status	equ	0xFD8
 10457                           
 10458 ;; *************** function _LCD_Reset *****************
 10459 ;; Defined at:
 10460 ;;		line 217 in file "ST7735_TFT.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;		None
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;		None
 10465 ;; Return value:  Size  Location     Type
 10466 ;;		None               void
 10467 ;; Registers used:
 10468 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10469 ;; Tracked objects:
 10470 ;;		On entry : 0/0
 10471 ;;		On exit  : 0/0
 10472 ;;		Unchanged: 0/0
 10473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10478 ;;Total ram usage:        0 bytes
 10479 ;; Hardware stack levels used:    1
 10480 ;; Hardware stack levels required when called:    5
 10481 ;; This function calls:
 10482 ;;		_delay_ms
 10483 ;; This function is called by:
 10484 ;;		_Initialize_Screen
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           	psect	text50
 10489  00399C                     __ptext50:
 10490                           	opt stack 0
 10491  00399C                     _LCD_Reset:
 10492                           	opt stack 24
 10493                           
 10494                           ;ST7735_TFT.c: 219: PORTCbits.RC1 = 0;
 10495                           
 10496                           ;incstack = 0
 10497  00399C  9282               	bcf	3970,1,c	;volatile
 10498                           
 10499                           ;ST7735_TFT.c: 220: delay_ms(100);
 10500  00399E  0E00               	movlw	0
 10501  0039A0  6E18               	movwf	delay_ms@ms+1,c
 10502  0039A2  0E64               	movlw	100
 10503  0039A4  6E17               	movwf	delay_ms@ms,c
 10504  0039A6  ECAE  F018         	call	_delay_ms	;wreg free
 10505                           
 10506                           ;ST7735_TFT.c: 221: PORTCbits.RC1 = 1;
 10507  0039AA  8282               	bsf	3970,1,c	;volatile
 10508  0039AC  0012               	return		;funcret
 10509  0039AE                     __end_of_LCD_Reset:
 10510                           	opt stack 0
 10511                           tblptru	equ	0xFF8
 10512                           tblptrh	equ	0xFF7
 10513                           tblptrl	equ	0xFF6
 10514                           tablat	equ	0xFF5
 10515                           prodh	equ	0xFF4
 10516                           prodl	equ	0xFF3
 10517                           intcon	equ	0xFF2
 10518                           intcon2	equ	0xFF1
 10519                           postinc0	equ	0xFEE
 10520                           wreg	equ	0xFE8
 10521                           postdec1	equ	0xFE5
 10522                           plusw1	equ	0xFE3
 10523                           fsr1l	equ	0xFE1
 10524                           indf2	equ	0xFDF
 10525                           postinc2	equ	0xFDE
 10526                           plusw2	equ	0xFDB
 10527                           fsr2h	equ	0xFDA
 10528                           fsr2l	equ	0xFD9
 10529                           status	equ	0xFD8
 10530                           
 10531 ;; *************** function _delay_ms *****************
 10532 ;; Defined at:
 10533 ;;		line 64 in file "ST7735_TFT.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;  ms              2   22[COMRAM] int 
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;  count           2   26[COMRAM] int 
 10538 ;; Return value:  Size  Location     Type
 10539 ;;		None               void
 10540 ;; Registers used:
 10541 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10547 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;Total ram usage:        6 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    4
 10554 ;; This function calls:
 10555 ;;		___wmul
 10556 ;; This function is called by:
 10557 ;;		_LCD_Reset
 10558 ;;		_Rcmd1
 10559 ;;		_Rcmd3
 10560 ;;		_Bcmd
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           	psect	text51
 10565  00315C                     __ptext51:
 10566                           	opt stack 0
 10567  00315C                     _delay_ms:
 10568                           	opt stack 23
 10569                           
 10570                           ;ST7735_TFT.c: 70: int count;
 10571                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 10572                           
 10573                           ;incstack = 0
 10574  00315C  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 10575  003160  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 10576  003164  0E00               	movlw	0
 10577  003166  6E14               	movwf	___wmul@multiplicand+1,c
 10578  003168  0E7D               	movlw	125
 10579  00316A  6E13               	movwf	___wmul@multiplicand,c
 10580  00316C  EC75  F01B         	call	___wmul	;wreg free
 10581  003170  C011  F01B         	movff	?___wmul,delay_ms@count
 10582  003174  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 10583                           
 10584                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 10585  003178  C01B  F019         	movff	delay_ms@count,??_delay_ms
 10586  00317C  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 10587  003180  1E19               	comf	??_delay_ms,f,c
 10588  003182  1E1A               	comf	??_delay_ms+1,f,c
 10589  003184  4A19               	infsnz	??_delay_ms,f,c
 10590  003186  2A1A               	incf	??_delay_ms+1,f,c
 10591  003188  0EFF               	movlw	255
 10592  00318A  2419               	addwf	??_delay_ms,w,c
 10593  00318C  6E1B               	movwf	delay_ms@count,c
 10594  00318E  0EFF               	movlw	255
 10595  003190  201A               	addwfc	??_delay_ms+1,w,c
 10596  003192  6E1C               	movwf	delay_ms@count+1,c
 10597                           
 10598                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 10599  003194  0E03               	movlw	3
 10600  003196  6ED5               	movwf	4053,c	;volatile
 10601                           
 10602                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 10603  003198  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 10604                           
 10605                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 10606  00319C  501C               	movf	delay_ms@count+1,w,c
 10607  00319E  6ED7               	movwf	4055,c	;volatile
 10608                           
 10609                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 10610  0031A0  94F2               	bcf	intcon,2,c	;volatile
 10611                           
 10612                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 10613  0031A2  8ED5               	bsf	4053,7,c	;volatile
 10614                           
 10615                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 10616  0031A4  D000               	goto	l670
 10617  0031A6                     l670:
 10618  0031A6  A4F2               	btfss	intcon,2,c	;volatile
 10619  0031A8  D7FE               	goto	l670
 10620                           
 10621                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 10622  0031AA  9ED5               	bcf	4053,7,c	;volatile
 10623  0031AC  0012               	return		;funcret
 10624  0031AE                     __end_of_delay_ms:
 10625                           	opt stack 0
 10626                           tblptru	equ	0xFF8
 10627                           tblptrh	equ	0xFF7
 10628                           tblptrl	equ	0xFF6
 10629                           tablat	equ	0xFF5
 10630                           prodh	equ	0xFF4
 10631                           prodl	equ	0xFF3
 10632                           intcon	equ	0xFF2
 10633                           intcon2	equ	0xFF1
 10634                           postinc0	equ	0xFEE
 10635                           wreg	equ	0xFE8
 10636                           postdec1	equ	0xFE5
 10637                           plusw1	equ	0xFE3
 10638                           fsr1l	equ	0xFE1
 10639                           indf2	equ	0xFDF
 10640                           postinc2	equ	0xFDE
 10641                           plusw2	equ	0xFDB
 10642                           fsr2h	equ	0xFDA
 10643                           fsr2l	equ	0xFD9
 10644                           status	equ	0xFD8
 10645                           
 10646 ;; *************** function _DS3231_Write_Alarm_Time *****************
 10647 ;; Defined at:
 10648 ;;		line 169 in file "I2C_Support.c"
 10649 ;; Parameters:    Size  Location     Type
 10650 ;;		None
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;  Address         1   53[COMRAM] unsigned char 
 10653 ;;  Device          1   52[COMRAM] unsigned char 
 10654 ;; Return value:  Size  Location     Type
 10655 ;;		None               void
 10656 ;; Registers used:
 10657 ;;		wreg, status,2, status,0, cstack
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10666 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10667 ;;Total ram usage:        2 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    7
 10670 ;; This function calls:
 10671 ;;		_DS3231_Read_Time
 10672 ;;		_I2C_Start
 10673 ;;		_I2C_Stop
 10674 ;;		_I2C_Write
 10675 ;;		_dec_2_bcd
 10676 ;; This function is called by:
 10677 ;;		_Do_Save_New_Alarm_Time
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           	psect	text52
 10682  002D2E                     __ptext52:
 10683                           	opt stack 0
 10684  002D2E                     _DS3231_Write_Alarm_Time:
 10685                           	opt stack 21
 10686                           
 10687                           ;I2C_Support.c: 171: DS3231_Read_Time();
 10688                           
 10689                           ;incstack = 0
 10690  002D2E  EC44  F017         	call	_DS3231_Read_Time	;wreg free
 10691                           
 10692                           ;I2C_Support.c: 172: alarm_date = day;
 10693  002D32  C05C  F056         	movff	_day,_alarm_date
 10694                           
 10695                           ;I2C_Support.c: 173: char Device = 0x68;
 10696  002D36  0E68               	movlw	104
 10697  002D38  6E35               	movwf	DS3231_Write_Alarm_Time@Device,c
 10698                           
 10699                           ;I2C_Support.c: 174: char Address = 0x07;
 10700  002D3A  0E07               	movlw	7
 10701  002D3C  6E36               	movwf	DS3231_Write_Alarm_Time@Address,c
 10702                           
 10703                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 10704  002D3E  5064               	movf	_setup_alarm_hour,w,c
 10705  002D40  EC04  F018         	call	_dec_2_bcd
 10706  002D44  502E               	movf	?_dec_2_bcd,w,c
 10707  002D46  6E57               	movwf	_alarm_hour,c
 10708                           
 10709                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 10710  002D48  5065               	movf	_setup_alarm_minute,w,c
 10711  002D4A  EC04  F018         	call	_dec_2_bcd
 10712  002D4E  502E               	movf	?_dec_2_bcd,w,c
 10713  002D50  6E58               	movwf	_alarm_minute,c
 10714                           
 10715                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 10716  002D52  5066               	movf	_setup_alarm_second,w,c
 10717  002D54  EC04  F018         	call	_dec_2_bcd
 10718  002D58  502E               	movf	?_dec_2_bcd,w,c
 10719  002D5A  6E59               	movwf	_alarm_second,c
 10720                           
 10721                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 10722  002D5C  5059               	movf	_alarm_second,w,c
 10723  002D5E  0B7F               	andlw	127
 10724  002D60  6E59               	movwf	_alarm_second,c
 10725                           
 10726                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 10727  002D62  5058               	movf	_alarm_minute,w,c
 10728  002D64  0B7F               	andlw	127
 10729  002D66  6E58               	movwf	_alarm_minute,c
 10730                           
 10731                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 10732  002D68  5057               	movf	_alarm_hour,w,c
 10733  002D6A  0B7F               	andlw	127
 10734  002D6C  6E57               	movwf	_alarm_hour,c
 10735                           
 10736                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 10737  002D6E  5056               	movf	_alarm_date,w,c
 10738  002D70  0980               	iorlw	128
 10739  002D72  6E56               	movwf	_alarm_date,c
 10740                           
 10741                           ;I2C_Support.c: 182: I2C_Start();
 10742  002D74  ECF2  F01C         	call	_I2C_Start	;wreg free
 10743                           
 10744                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 10745  002D78  5035               	movf	DS3231_Write_Alarm_Time@Device,w,c
 10746  002D7A  2435               	addwf	DS3231_Write_Alarm_Time@Device,w,c
 10747  002D7C  EC8C  F01A         	call	_I2C_Write
 10748                           
 10749                           ;I2C_Support.c: 184: I2C_Write(Address);
 10750  002D80  5036               	movf	DS3231_Write_Alarm_Time@Address,w,c
 10751  002D82  EC8C  F01A         	call	_I2C_Write
 10752                           
 10753                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 10754  002D86  5059               	movf	_alarm_second,w,c
 10755  002D88  EC8C  F01A         	call	_I2C_Write
 10756                           
 10757                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 10758  002D8C  5058               	movf	_alarm_minute,w,c
 10759  002D8E  EC8C  F01A         	call	_I2C_Write
 10760                           
 10761                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 10762  002D92  5057               	movf	_alarm_hour,w,c
 10763  002D94  EC8C  F01A         	call	_I2C_Write
 10764                           
 10765                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 10766  002D98  5056               	movf	_alarm_date,w,c
 10767  002D9A  EC8C  F01A         	call	_I2C_Write
 10768                           
 10769                           ;I2C_Support.c: 190: I2C_Stop();
 10770  002D9E  ECE9  F01C         	call	_I2C_Stop	;wreg free
 10771  002DA2  0012               	return		;funcret
 10772  002DA4                     __end_of_DS3231_Write_Alarm_Time:
 10773                           	opt stack 0
 10774                           tblptru	equ	0xFF8
 10775                           tblptrh	equ	0xFF7
 10776                           tblptrl	equ	0xFF6
 10777                           tablat	equ	0xFF5
 10778                           prodh	equ	0xFF4
 10779                           prodl	equ	0xFF3
 10780                           intcon	equ	0xFF2
 10781                           intcon2	equ	0xFF1
 10782                           postinc0	equ	0xFEE
 10783                           wreg	equ	0xFE8
 10784                           postdec1	equ	0xFE5
 10785                           plusw1	equ	0xFE3
 10786                           fsr1l	equ	0xFE1
 10787                           indf2	equ	0xFDF
 10788                           postinc2	equ	0xFDE
 10789                           plusw2	equ	0xFDB
 10790                           fsr2h	equ	0xFDA
 10791                           fsr2l	equ	0xFD9
 10792                           status	equ	0xFD8
 10793                           
 10794 ;; *************** function _dec_2_bcd *****************
 10795 ;; Defined at:
 10796 ;;		line 54 in file "utils.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;  dec             1    wreg     unsigned char 
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;  dec             1   51[COMRAM] unsigned char 
 10801 ;;  bcd             2   49[COMRAM] int 
 10802 ;; Return value:  Size  Location     Type
 10803 ;;                  2   45[COMRAM] int 
 10804 ;; Registers used:
 10805 ;;		wreg, status,2, status,0, cstack
 10806 ;; Tracked objects:
 10807 ;;		On entry : 0/0
 10808 ;;		On exit  : 0/0
 10809 ;;		Unchanged: 0/0
 10810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10812 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10814 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10815 ;;Total ram usage:        7 bytes
 10816 ;; Hardware stack levels used:    1
 10817 ;; Hardware stack levels required when called:    4
 10818 ;; This function calls:
 10819 ;;		___awdiv
 10820 ;;		___awmod
 10821 ;; This function is called by:
 10822 ;;		_DS3231_Write_Time
 10823 ;;		_DS3231_Write_Alarm_Time
 10824 ;; This function uses a non-reentrant model
 10825 ;;
 10826                           
 10827                           	psect	text53
 10828  003008                     __ptext53:
 10829                           	opt stack 0
 10830  003008                     _dec_2_bcd:
 10831                           	opt stack 23
 10832                           
 10833                           ;incstack = 0
 10834                           ;dec_2_bcd@dec stored from wreg
 10835  003008  6E34               	movwf	dec_2_bcd@dec,c
 10836                           
 10837                           ;utils.c: 56: int bcd;
 10838                           ;utils.c: 57: bcd = ((dec / 10) << 4) + (dec % 10);
 10839  00300A  C034  F020         	movff	dec_2_bcd@dec,___awdiv@dividend
 10840  00300E  6A21               	clrf	___awdiv@dividend+1,c
 10841  003010  0E00               	movlw	0
 10842  003012  6E23               	movwf	___awdiv@divisor+1,c
 10843  003014  0E0A               	movlw	10
 10844  003016  6E22               	movwf	___awdiv@divisor,c
 10845  003018  EC26  F014         	call	___awdiv	;wreg free
 10846  00301C  C020  F030         	movff	?___awdiv,??_dec_2_bcd
 10847  003020  C021  F031         	movff	?___awdiv+1,??_dec_2_bcd+1
 10848  003024  3A30               	swapf	??_dec_2_bcd,f,c
 10849  003026  3A31               	swapf	??_dec_2_bcd+1,f,c
 10850  003028  0EF0               	movlw	240
 10851  00302A  1631               	andwf	??_dec_2_bcd+1,f,c
 10852  00302C  5030               	movf	??_dec_2_bcd,w,c
 10853  00302E  0B0F               	andlw	15
 10854  003030  1231               	iorwf	??_dec_2_bcd+1,f,c
 10855  003032  0EF0               	movlw	240
 10856  003034  1630               	andwf	??_dec_2_bcd,f,c
 10857  003036  C034  F028         	movff	dec_2_bcd@dec,___awmod@dividend
 10858  00303A  6A29               	clrf	___awmod@dividend+1,c
 10859  00303C  0E00               	movlw	0
 10860  00303E  6E2B               	movwf	___awmod@divisor+1,c
 10861  003040  0E0A               	movlw	10
 10862  003042  6E2A               	movwf	___awmod@divisor,c
 10863  003044  EC17  F016         	call	___awmod	;wreg free
 10864  003048  5028               	movf	?___awmod,w,c
 10865  00304A  2430               	addwf	??_dec_2_bcd,w,c
 10866  00304C  6E32               	movwf	dec_2_bcd@bcd,c
 10867  00304E  5029               	movf	?___awmod+1,w,c
 10868  003050  2031               	addwfc	??_dec_2_bcd+1,w,c
 10869  003052  6E33               	movwf	dec_2_bcd@bcd+1,c
 10870                           
 10871                           ;utils.c: 58: return bcd;
 10872  003054  C032  F02E         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 10873  003058  C033  F02F         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 10874  00305C  D000               	goto	l1303
 10875  00305E                     l1303:
 10876  00305E  0012               	return		;funcret
 10877  003060                     __end_of_dec_2_bcd:
 10878                           	opt stack 0
 10879                           tblptru	equ	0xFF8
 10880                           tblptrh	equ	0xFF7
 10881                           tblptrl	equ	0xFF6
 10882                           tablat	equ	0xFF5
 10883                           prodh	equ	0xFF4
 10884                           prodl	equ	0xFF3
 10885                           intcon	equ	0xFF2
 10886                           intcon2	equ	0xFF1
 10887                           postinc0	equ	0xFEE
 10888                           wreg	equ	0xFE8
 10889                           postdec1	equ	0xFE5
 10890                           plusw1	equ	0xFE3
 10891                           fsr1l	equ	0xFE1
 10892                           indf2	equ	0xFDF
 10893                           postinc2	equ	0xFDE
 10894                           plusw2	equ	0xFDB
 10895                           fsr2h	equ	0xFDA
 10896                           fsr2l	equ	0xFD9
 10897                           status	equ	0xFD8
 10898                           
 10899 ;; *************** function _DS3231_Read_Time *****************
 10900 ;; Defined at:
 10901 ;;		line 45 in file "I2C_Support.c"
 10902 ;; Parameters:    Size  Location     Type
 10903 ;;		None
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;  Device          1   20[COMRAM] unsigned char 
 10906 ;;  Address         1   19[COMRAM] unsigned char 
 10907 ;; Return value:  Size  Location     Type
 10908 ;;		None               void
 10909 ;; Registers used:
 10910 ;;		wreg, status,2, status,0, cstack
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10920 ;;Total ram usage:        2 bytes
 10921 ;; Hardware stack levels used:    1
 10922 ;; Hardware stack levels required when called:    6
 10923 ;; This function calls:
 10924 ;;		_I2C_ReStart
 10925 ;;		_I2C_Read
 10926 ;;		_I2C_Start
 10927 ;;		_I2C_Stop
 10928 ;;		_I2C_Write
 10929 ;; This function is called by:
 10930 ;;		_DS3231_Write_Alarm_Time
 10931 ;;		_main
 10932 ;;		_Exit_Setup_Alarm_Time
 10933 ;;		_Do_Save_New_Alarm_Time
 10934 ;;		_Exit_Setup_Heater_Temp
 10935 ;;		_Do_Save_New_Heater_Temp
 10936 ;;		_Do_Setup_Time
 10937 ;;		_Do_Save_New_Time
 10938 ;;		_Exit_Time_Setup
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           	psect	text54
 10943  002E88                     __ptext54:
 10944                           	opt stack 0
 10945  002E88                     _DS3231_Read_Time:
 10946                           	opt stack 22
 10947                           
 10948                           ;I2C_Support.c: 47: char Device = 0x68;
 10949                           
 10950                           ;incstack = 0
 10951  002E88  0E68               	movlw	104
 10952  002E8A  6E15               	movwf	DS3231_Read_Time@Device,c
 10953                           
 10954                           ;I2C_Support.c: 48: char Address = 0x00;
 10955  002E8C  0E00               	movlw	0
 10956  002E8E  6E14               	movwf	DS3231_Read_Time@Address,c
 10957                           
 10958                           ;I2C_Support.c: 50: I2C_Start();
 10959  002E90  ECF2  F01C         	call	_I2C_Start	;wreg free
 10960                           
 10961                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 10962  002E94  5015               	movf	DS3231_Read_Time@Device,w,c
 10963  002E96  2415               	addwf	DS3231_Read_Time@Device,w,c
 10964  002E98  EC8C  F01A         	call	_I2C_Write
 10965                           
 10966                           ;I2C_Support.c: 52: I2C_Write(Address);
 10967  002E9C  5014               	movf	DS3231_Read_Time@Address,w,c
 10968  002E9E  EC8C  F01A         	call	_I2C_Write
 10969                           
 10970                           ;I2C_Support.c: 53: I2C_ReStart();
 10971  002EA2  EC7D  F01C         	call	_I2C_ReStart	;wreg free
 10972                           
 10973                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 10974  002EA6  80D8               	bsf	status,0,c
 10975  002EA8  3415               	rlcf	DS3231_Read_Time@Device,w,c
 10976  002EAA  EC8C  F01A         	call	_I2C_Write
 10977                           
 10978                           ;I2C_Support.c: 55: second = I2C_Read(1);
 10979  002EAE  0E01               	movlw	1
 10980  002EB0  EC0B  F01A         	call	_I2C_Read
 10981  002EB4  6E63               	movwf	_second,c
 10982                           
 10983                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 10984  002EB6  0E01               	movlw	1
 10985  002EB8  EC0B  F01A         	call	_I2C_Read
 10986  002EBC  6E60               	movwf	_minute,c
 10987                           
 10988                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 10989  002EBE  0E01               	movlw	1
 10990  002EC0  EC0B  F01A         	call	_I2C_Read
 10991  002EC4  6E5F               	movwf	_hour,c
 10992                           
 10993                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 10994  002EC6  0E01               	movlw	1
 10995  002EC8  EC0B  F01A         	call	_I2C_Read
 10996  002ECC  6E5D               	movwf	_dow,c
 10997                           
 10998                           ;I2C_Support.c: 59: day = I2C_Read(1);
 10999  002ECE  0E01               	movlw	1
 11000  002ED0  EC0B  F01A         	call	_I2C_Read
 11001  002ED4  6E5C               	movwf	_day,c
 11002                           
 11003                           ;I2C_Support.c: 60: month = I2C_Read(1);
 11004  002ED6  0E01               	movlw	1
 11005  002ED8  EC0B  F01A         	call	_I2C_Read
 11006  002EDC  6E61               	movwf	_month,c
 11007                           
 11008                           ;I2C_Support.c: 61: year = I2C_Read(0);
 11009  002EDE  0E00               	movlw	0
 11010  002EE0  EC0B  F01A         	call	_I2C_Read
 11011  002EE4  6E6E               	movwf	_year,c
 11012                           
 11013                           ;I2C_Support.c: 62: I2C_Stop();
 11014  002EE6  ECE9  F01C         	call	_I2C_Stop	;wreg free
 11015  002EEA  0012               	return		;funcret
 11016  002EEC                     __end_of_DS3231_Read_Time:
 11017                           	opt stack 0
 11018                           tblptru	equ	0xFF8
 11019                           tblptrh	equ	0xFF7
 11020                           tblptrl	equ	0xFF6
 11021                           tablat	equ	0xFF5
 11022                           prodh	equ	0xFF4
 11023                           prodl	equ	0xFF3
 11024                           intcon	equ	0xFF2
 11025                           intcon2	equ	0xFF1
 11026                           postinc0	equ	0xFEE
 11027                           wreg	equ	0xFE8
 11028                           postdec1	equ	0xFE5
 11029                           plusw1	equ	0xFE3
 11030                           fsr1l	equ	0xFE1
 11031                           indf2	equ	0xFDF
 11032                           postinc2	equ	0xFDE
 11033                           plusw2	equ	0xFDB
 11034                           fsr2h	equ	0xFDA
 11035                           fsr2l	equ	0xFD9
 11036                           status	equ	0xFD8
 11037                           
 11038 ;; *************** function _DS3231_Read_Alarm_Time *****************
 11039 ;; Defined at:
 11040 ;;		line 115 in file "I2C_Support.c"
 11041 ;; Parameters:    Size  Location     Type
 11042 ;;		None
 11043 ;; Auto vars:     Size  Location     Type
 11044 ;;  Device          1   20[COMRAM] unsigned char 
 11045 ;;  Address         1   19[COMRAM] unsigned char 
 11046 ;; Return value:  Size  Location     Type
 11047 ;;		None               void
 11048 ;; Registers used:
 11049 ;;		wreg, status,2, status,0, cstack
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11059 ;;Total ram usage:        2 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:    6
 11062 ;; This function calls:
 11063 ;;		_I2C_ReStart
 11064 ;;		_I2C_Read
 11065 ;;		_I2C_Start
 11066 ;;		_I2C_Stop
 11067 ;;		_I2C_Write
 11068 ;; This function is called by:
 11069 ;;		_main
 11070 ;;		_Do_Setup_Alarm_Time
 11071 ;;		_Do_Save_New_Alarm_Time
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           	psect	text55
 11076  0032EA                     __ptext55:
 11077                           	opt stack 0
 11078  0032EA                     _DS3231_Read_Alarm_Time:
 11079                           	opt stack 22
 11080                           
 11081                           ;I2C_Support.c: 117: char Device = 0x68;
 11082                           
 11083                           ;incstack = 0
 11084  0032EA  0E68               	movlw	104
 11085  0032EC  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 11086                           
 11087                           ;I2C_Support.c: 118: char Address = 0x07;
 11088  0032EE  0E07               	movlw	7
 11089  0032F0  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 11090                           
 11091                           ;I2C_Support.c: 119: I2C_Start();
 11092  0032F2  ECF2  F01C         	call	_I2C_Start	;wreg free
 11093                           
 11094                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 11095  0032F6  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 11096  0032F8  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 11097  0032FA  EC8C  F01A         	call	_I2C_Write
 11098                           
 11099                           ;I2C_Support.c: 121: I2C_Write(Address);
 11100  0032FE  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 11101  003300  EC8C  F01A         	call	_I2C_Write
 11102                           
 11103                           ;I2C_Support.c: 122: I2C_ReStart();
 11104  003304  EC7D  F01C         	call	_I2C_ReStart	;wreg free
 11105                           
 11106                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 11107  003308  80D8               	bsf	status,0,c
 11108  00330A  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 11109  00330C  EC8C  F01A         	call	_I2C_Write
 11110                           
 11111                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 11112  003310  0E01               	movlw	1
 11113  003312  EC0B  F01A         	call	_I2C_Read
 11114  003316  6E59               	movwf	_alarm_second,c
 11115                           
 11116                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 11117  003318  0E01               	movlw	1
 11118  00331A  EC0B  F01A         	call	_I2C_Read
 11119  00331E  6E58               	movwf	_alarm_minute,c
 11120                           
 11121                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 11122  003320  0E01               	movlw	1
 11123  003322  EC0B  F01A         	call	_I2C_Read
 11124  003326  6E57               	movwf	_alarm_hour,c
 11125                           
 11126                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 11127  003328  0E00               	movlw	0
 11128  00332A  EC0B  F01A         	call	_I2C_Read
 11129  00332E  6E56               	movwf	_alarm_date,c
 11130                           
 11131                           ;I2C_Support.c: 128: I2C_Stop();
 11132  003330  ECE9  F01C         	call	_I2C_Stop	;wreg free
 11133  003334  0012               	return		;funcret
 11134  003336                     __end_of_DS3231_Read_Alarm_Time:
 11135                           	opt stack 0
 11136                           tblptru	equ	0xFF8
 11137                           tblptrh	equ	0xFF7
 11138                           tblptrl	equ	0xFF6
 11139                           tablat	equ	0xFF5
 11140                           prodh	equ	0xFF4
 11141                           prodl	equ	0xFF3
 11142                           intcon	equ	0xFF2
 11143                           intcon2	equ	0xFF1
 11144                           postinc0	equ	0xFEE
 11145                           wreg	equ	0xFE8
 11146                           postdec1	equ	0xFE5
 11147                           plusw1	equ	0xFE3
 11148                           fsr1l	equ	0xFE1
 11149                           indf2	equ	0xFDF
 11150                           postinc2	equ	0xFDE
 11151                           plusw2	equ	0xFDB
 11152                           fsr2h	equ	0xFDA
 11153                           fsr2l	equ	0xFD9
 11154                           status	equ	0xFD8
 11155                           
 11156 ;; *************** function _Do_Beep_Good *****************
 11157 ;; Defined at:
 11158 ;;		line 71 in file "utils.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;		None
 11161 ;; Auto vars:     Size  Location     Type
 11162 ;;		None
 11163 ;; Return value:  Size  Location     Type
 11164 ;;		None               void
 11165 ;; Registers used:
 11166 ;;		wreg, status,2, status,0, cstack
 11167 ;; Tracked objects:
 11168 ;;		On entry : 0/0
 11169 ;;		On exit  : 0/0
 11170 ;;		Unchanged: 0/0
 11171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;Total ram usage:        0 bytes
 11177 ;; Hardware stack levels used:    1
 11178 ;; Hardware stack levels required when called:    4
 11179 ;; This function calls:
 11180 ;;		_Activate_Buzzer_2KHz
 11181 ;;		_Deactivate_Buzzer
 11182 ;;		_Wait_One_Sec
 11183 ;; This function is called by:
 11184 ;;		_main
 11185 ;;		_Do_Setup_Alarm_Time
 11186 ;;		_Do_Setup_Heater_Temp
 11187 ;;		_Do_Setup_Time
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           	psect	text56
 11192  003A58                     __ptext56:
 11193                           	opt stack 0
 11194  003A58                     _Do_Beep_Good:
 11195                           	opt stack 25
 11196                           
 11197                           ;utils.c: 74: Activate_Buzzer_2KHz();
 11198                           
 11199                           ;incstack = 0
 11200  003A58  ECD7  F01C         	call	_Activate_Buzzer_2KHz	;wreg free
 11201                           
 11202                           ;utils.c: 75: Wait_One_Sec();
 11203  003A5C  EC0C  F01C         	call	_Wait_One_Sec	;wreg free
 11204                           
 11205                           ;utils.c: 76: Deactivate_Buzzer();
 11206  003A60  EC63  F01D         	call	_Deactivate_Buzzer	;wreg free
 11207  003A64  0012               	return		;funcret
 11208  003A66                     __end_of_Do_Beep_Good:
 11209                           	opt stack 0
 11210                           tblptru	equ	0xFF8
 11211                           tblptrh	equ	0xFF7
 11212                           tblptrl	equ	0xFF6
 11213                           tablat	equ	0xFF5
 11214                           prodh	equ	0xFF4
 11215                           prodl	equ	0xFF3
 11216                           intcon	equ	0xFF2
 11217                           intcon2	equ	0xFF1
 11218                           postinc0	equ	0xFEE
 11219                           wreg	equ	0xFE8
 11220                           postdec1	equ	0xFE5
 11221                           plusw1	equ	0xFE3
 11222                           fsr1l	equ	0xFE1
 11223                           indf2	equ	0xFDF
 11224                           postinc2	equ	0xFDE
 11225                           plusw2	equ	0xFDB
 11226                           fsr2h	equ	0xFDA
 11227                           fsr2l	equ	0xFD9
 11228                           status	equ	0xFD8
 11229                           
 11230 ;; *************** function _Activate_Buzzer_2KHz *****************
 11231 ;; Defined at:
 11232 ;;		line 109 in file "utils.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;		None
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;		None               void
 11239 ;; Registers used:
 11240 ;;		wreg, status,2
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11250 ;;Total ram usage:        0 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    3
 11253 ;; This function calls:
 11254 ;;		Nothing
 11255 ;; This function is called by:
 11256 ;;		_Do_Beep_Good
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           	psect	text57
 11261  0039AE                     __ptext57:
 11262                           	opt stack 0
 11263  0039AE                     _Activate_Buzzer_2KHz:
 11264                           	opt stack 25
 11265                           
 11266                           ;utils.c: 112: PR2 = 0b11111001 ;
 11267                           
 11268                           ;incstack = 0
 11269  0039AE  0EF9               	movlw	249
 11270  0039B0  6ECB               	movwf	4043,c	;volatile
 11271                           
 11272                           ;utils.c: 113: T2CON = 0b00000101 ;
 11273  0039B2  0E05               	movlw	5
 11274  0039B4  6ECA               	movwf	4042,c	;volatile
 11275                           
 11276                           ;utils.c: 114: CCPR2L = 0b01111100 ;
 11277  0039B6  0E7C               	movlw	124
 11278  0039B8  6EBB               	movwf	4027,c	;volatile
 11279                           
 11280                           ;utils.c: 115: CCP2CON = 0b00111100 ;
 11281  0039BA  0E3C               	movlw	60
 11282  0039BC  6EBA               	movwf	4026,c	;volatile
 11283  0039BE  0012               	return		;funcret
 11284  0039C0                     __end_of_Activate_Buzzer_2KHz:
 11285                           	opt stack 0
 11286                           tblptru	equ	0xFF8
 11287                           tblptrh	equ	0xFF7
 11288                           tblptrl	equ	0xFF6
 11289                           tablat	equ	0xFF5
 11290                           prodh	equ	0xFF4
 11291                           prodl	equ	0xFF3
 11292                           intcon	equ	0xFF2
 11293                           intcon2	equ	0xFF1
 11294                           postinc0	equ	0xFEE
 11295                           wreg	equ	0xFE8
 11296                           postdec1	equ	0xFE5
 11297                           plusw1	equ	0xFE3
 11298                           fsr1l	equ	0xFE1
 11299                           indf2	equ	0xFDF
 11300                           postinc2	equ	0xFDE
 11301                           plusw2	equ	0xFDB
 11302                           fsr2h	equ	0xFDA
 11303                           fsr2l	equ	0xFD9
 11304                           status	equ	0xFD8
 11305                           
 11306 ;; *************** function _Do_Beep_Bad *****************
 11307 ;; Defined at:
 11308 ;;		line 79 in file "utils.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;		None
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;		None
 11313 ;; Return value:  Size  Location     Type
 11314 ;;		None               void
 11315 ;; Registers used:
 11316 ;;		wreg, status,2, status,0, cstack
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11326 ;;Total ram usage:        0 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    4
 11329 ;; This function calls:
 11330 ;;		_Activate_Buzzer_500Hz
 11331 ;;		_Deactivate_Buzzer
 11332 ;;		_Wait_One_Sec
 11333 ;; This function is called by:
 11334 ;;		_main
 11335 ;;		_Do_Setup_Alarm_Time
 11336 ;;		_Do_Setup_Heater_Temp
 11337 ;;		_Do_Setup_Time
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           	psect	text58
 11342  003A66                     __ptext58:
 11343                           	opt stack 0
 11344  003A66                     _Do_Beep_Bad:
 11345                           	opt stack 25
 11346                           
 11347                           ;utils.c: 82: Activate_Buzzer_500Hz();
 11348                           
 11349                           ;incstack = 0
 11350  003A66  ECE0  F01C         	call	_Activate_Buzzer_500Hz	;wreg free
 11351                           
 11352                           ;utils.c: 83: Wait_One_Sec();
 11353  003A6A  EC0C  F01C         	call	_Wait_One_Sec	;wreg free
 11354                           
 11355                           ;utils.c: 84: Deactivate_Buzzer();
 11356  003A6E  EC63  F01D         	call	_Deactivate_Buzzer	;wreg free
 11357  003A72  0012               	return		;funcret
 11358  003A74                     __end_of_Do_Beep_Bad:
 11359                           	opt stack 0
 11360                           tblptru	equ	0xFF8
 11361                           tblptrh	equ	0xFF7
 11362                           tblptrl	equ	0xFF6
 11363                           tablat	equ	0xFF5
 11364                           prodh	equ	0xFF4
 11365                           prodl	equ	0xFF3
 11366                           intcon	equ	0xFF2
 11367                           intcon2	equ	0xFF1
 11368                           postinc0	equ	0xFEE
 11369                           wreg	equ	0xFE8
 11370                           postdec1	equ	0xFE5
 11371                           plusw1	equ	0xFE3
 11372                           fsr1l	equ	0xFE1
 11373                           indf2	equ	0xFDF
 11374                           postinc2	equ	0xFDE
 11375                           plusw2	equ	0xFDB
 11376                           fsr2h	equ	0xFDA
 11377                           fsr2l	equ	0xFD9
 11378                           status	equ	0xFD8
 11379                           
 11380 ;; *************** function _Wait_One_Sec *****************
 11381 ;; Defined at:
 11382 ;;		line 87 in file "utils.c"
 11383 ;; Parameters:    Size  Location     Type
 11384 ;;		None
 11385 ;; Auto vars:     Size  Location     Type
 11386 ;;  k               2   16[COMRAM] int 
 11387 ;; Return value:  Size  Location     Type
 11388 ;;		None               void
 11389 ;; Registers used:
 11390 ;;		wreg, status,2, status,0
 11391 ;; Tracked objects:
 11392 ;;		On entry : 0/0
 11393 ;;		On exit  : 0/0
 11394 ;;		Unchanged: 0/0
 11395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;Total ram usage:        2 bytes
 11401 ;; Hardware stack levels used:    1
 11402 ;; Hardware stack levels required when called:    3
 11403 ;; This function calls:
 11404 ;;		Nothing
 11405 ;; This function is called by:
 11406 ;;		_Do_Beep_Good
 11407 ;;		_Do_Beep_Bad
 11408 ;;		_Do_Beep
 11409 ;; This function uses a non-reentrant model
 11410 ;;
 11411                           
 11412                           	psect	text59
 11413  003818                     __ptext59:
 11414                           	opt stack 0
 11415  003818                     _Wait_One_Sec:
 11416                           	opt stack 25
 11417                           
 11418                           ;utils.c: 89: for (int k=0;k<0x8000;k++);
 11419                           
 11420                           ;incstack = 0
 11421  003818  0E00               	movlw	0
 11422  00381A  6E12               	movwf	Wait_One_Sec@k+1,c
 11423  00381C  0E00               	movlw	0
 11424  00381E  6E11               	movwf	Wait_One_Sec@k,c
 11425  003820                     l6108:
 11426  003820  0E80               	movlw	128
 11427  003822  5C12               	subwf	Wait_One_Sec@k+1,w,c
 11428  003824  B0D8               	btfsc	status,0,c
 11429  003826  D005               	goto	l1317
 11430  003828  D001               	goto	l6112
 11431  00382A  D003               	goto	l1317
 11432  00382C                     l6112:
 11433  00382C  4A11               	infsnz	Wait_One_Sec@k,f,c
 11434  00382E  2A12               	incf	Wait_One_Sec@k+1,f,c
 11435  003830  D7F7               	goto	l6108
 11436  003832                     l1317:
 11437  003832  0012               	return		;funcret
 11438  003834                     __end_of_Wait_One_Sec:
 11439                           	opt stack 0
 11440                           tblptru	equ	0xFF8
 11441                           tblptrh	equ	0xFF7
 11442                           tblptrl	equ	0xFF6
 11443                           tablat	equ	0xFF5
 11444                           prodh	equ	0xFF4
 11445                           prodl	equ	0xFF3
 11446                           intcon	equ	0xFF2
 11447                           intcon2	equ	0xFF1
 11448                           postinc0	equ	0xFEE
 11449                           wreg	equ	0xFE8
 11450                           postdec1	equ	0xFE5
 11451                           plusw1	equ	0xFE3
 11452                           fsr1l	equ	0xFE1
 11453                           indf2	equ	0xFDF
 11454                           postinc2	equ	0xFDE
 11455                           plusw2	equ	0xFDB
 11456                           fsr2h	equ	0xFDA
 11457                           fsr2l	equ	0xFD9
 11458                           status	equ	0xFD8
 11459                           
 11460 ;; *************** function _Deactivate_Buzzer *****************
 11461 ;; Defined at:
 11462 ;;		line 127 in file "utils.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;		None
 11465 ;; Auto vars:     Size  Location     Type
 11466 ;;		None
 11467 ;; Return value:  Size  Location     Type
 11468 ;;		None               void
 11469 ;; Registers used:
 11470 ;;		wreg, status,2
 11471 ;; Tracked objects:
 11472 ;;		On entry : 0/0
 11473 ;;		On exit  : 0/0
 11474 ;;		Unchanged: 0/0
 11475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;Total ram usage:        0 bytes
 11481 ;; Hardware stack levels used:    1
 11482 ;; Hardware stack levels required when called:    3
 11483 ;; This function calls:
 11484 ;;		Nothing
 11485 ;; This function is called by:
 11486 ;;		_Do_Beep_Good
 11487 ;;		_Do_Beep_Bad
 11488 ;;		_Do_Beep
 11489 ;; This function uses a non-reentrant model
 11490 ;;
 11491                           
 11492                           	psect	text60
 11493  003AC6                     __ptext60:
 11494                           	opt stack 0
 11495  003AC6                     _Deactivate_Buzzer:
 11496                           	opt stack 25
 11497                           
 11498                           ;utils.c: 129: CCP2CON = 0x0;
 11499                           
 11500                           ;incstack = 0
 11501  003AC6  0E00               	movlw	0
 11502  003AC8  6EBA               	movwf	4026,c	;volatile
 11503                           
 11504                           ;utils.c: 130: PORTBbits.RB3 = 0;
 11505  003ACA  9681               	bcf	3969,3,c	;volatile
 11506  003ACC  0012               	return		;funcret
 11507  003ACE                     __end_of_Deactivate_Buzzer:
 11508                           	opt stack 0
 11509                           tblptru	equ	0xFF8
 11510                           tblptrh	equ	0xFF7
 11511                           tblptrl	equ	0xFF6
 11512                           tablat	equ	0xFF5
 11513                           prodh	equ	0xFF4
 11514                           prodl	equ	0xFF3
 11515                           intcon	equ	0xFF2
 11516                           intcon2	equ	0xFF1
 11517                           postinc0	equ	0xFEE
 11518                           wreg	equ	0xFE8
 11519                           postdec1	equ	0xFE5
 11520                           plusw1	equ	0xFE3
 11521                           fsr1l	equ	0xFE1
 11522                           indf2	equ	0xFDF
 11523                           postinc2	equ	0xFDE
 11524                           plusw2	equ	0xFDB
 11525                           fsr2h	equ	0xFDA
 11526                           fsr2l	equ	0xFD9
 11527                           status	equ	0xFD8
 11528                           
 11529 ;; *************** function _Activate_Buzzer_500Hz *****************
 11530 ;; Defined at:
 11531 ;;		line 100 in file "utils.c"
 11532 ;; Parameters:    Size  Location     Type
 11533 ;;		None
 11534 ;; Auto vars:     Size  Location     Type
 11535 ;;		None
 11536 ;; Return value:  Size  Location     Type
 11537 ;;		None               void
 11538 ;; Registers used:
 11539 ;;		wreg, status,2
 11540 ;; Tracked objects:
 11541 ;;		On entry : 0/0
 11542 ;;		On exit  : 0/0
 11543 ;;		Unchanged: 0/0
 11544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;Total ram usage:        0 bytes
 11550 ;; Hardware stack levels used:    1
 11551 ;; Hardware stack levels required when called:    3
 11552 ;; This function calls:
 11553 ;;		Nothing
 11554 ;; This function is called by:
 11555 ;;		_Do_Beep_Bad
 11556 ;; This function uses a non-reentrant model
 11557 ;;
 11558                           
 11559                           	psect	text61
 11560  0039C0                     __ptext61:
 11561                           	opt stack 0
 11562  0039C0                     _Activate_Buzzer_500Hz:
 11563                           	opt stack 25
 11564                           
 11565                           ;utils.c: 103: PR2 = 0b11111001 ;
 11566                           
 11567                           ;incstack = 0
 11568  0039C0  0EF9               	movlw	249
 11569  0039C2  6ECB               	movwf	4043,c	;volatile
 11570                           
 11571                           ;utils.c: 104: T2CON = 0b00000111 ;
 11572  0039C4  0E07               	movlw	7
 11573  0039C6  6ECA               	movwf	4042,c	;volatile
 11574                           
 11575                           ;utils.c: 105: CCPR2L = 0b01111100 ;
 11576  0039C8  0E7C               	movlw	124
 11577  0039CA  6EBB               	movwf	4027,c	;volatile
 11578                           
 11579                           ;utils.c: 106: CCP2CON = 0b00111100 ;
 11580  0039CC  0E3C               	movlw	60
 11581  0039CE  6EBA               	movwf	4026,c	;volatile
 11582  0039D0  0012               	return		;funcret
 11583  0039D2                     __end_of_Activate_Buzzer_500Hz:
 11584                           	opt stack 0
 11585                           tblptru	equ	0xFF8
 11586                           tblptrh	equ	0xFF7
 11587                           tblptrl	equ	0xFF6
 11588                           tablat	equ	0xFF5
 11589                           prodh	equ	0xFF4
 11590                           prodl	equ	0xFF3
 11591                           intcon	equ	0xFF2
 11592                           intcon2	equ	0xFF1
 11593                           postinc0	equ	0xFEE
 11594                           wreg	equ	0xFE8
 11595                           postdec1	equ	0xFE5
 11596                           plusw1	equ	0xFE3
 11597                           fsr1l	equ	0xFE1
 11598                           indf2	equ	0xFDF
 11599                           postinc2	equ	0xFDE
 11600                           plusw2	equ	0xFDB
 11601                           fsr2h	equ	0xFDA
 11602                           fsr2l	equ	0xFD9
 11603                           status	equ	0xFD8
 11604                           
 11605 ;; *************** function _Decrease_Alarm_Time *****************
 11606 ;; Defined at:
 11607 ;;		line 89 in file "Setup_Alarm_Time.c"
 11608 ;; Parameters:    Size  Location     Type
 11609 ;;		None
 11610 ;; Auto vars:     Size  Location     Type
 11611 ;;		None
 11612 ;; Return value:  Size  Location     Type
 11613 ;;		None               void
 11614 ;; Registers used:
 11615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11616 ;; Tracked objects:
 11617 ;;		On entry : 0/0
 11618 ;;		On exit  : 0/0
 11619 ;;		Unchanged: 0/0
 11620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11625 ;;Total ram usage:        0 bytes
 11626 ;; Hardware stack levels used:    1
 11627 ;; Hardware stack levels required when called:   11
 11628 ;; This function calls:
 11629 ;;		_Update_Setup_Alarm_Time_Screen
 11630 ;; This function is called by:
 11631 ;;		_Do_Setup_Alarm_Time
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           	psect	text62
 11636  00324E                     __ptext62:
 11637                           	opt stack 0
 11638  00324E                     _Decrease_Alarm_Time:
 11639                           	opt stack 18
 11640                           
 11641                           ;Setup_Alarm_Time.c: 91: switch (Select_Alarm_Field)
 11642                           
 11643                           ;incstack = 0
 11644  00324E  D018               	goto	l8698
 11645  003250                     l8678:
 11646                           
 11647                           ;Setup_Alarm_Time.c: 94: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 11648  003250  5064               	movf	_setup_alarm_hour,w,c
 11649  003252  A4D8               	btfss	status,2,c
 11650  003254  D003               	goto	l8682
 11651  003256  0E17               	movlw	23
 11652  003258  6E64               	movwf	_setup_alarm_hour,c
 11653  00325A  D01D               	goto	l8700
 11654  00325C                     l8682:
 11655                           
 11656                           ;Setup_Alarm_Time.c: 95: else --setup_alarm_hour;
 11657  00325C  0664               	decf	_setup_alarm_hour,f,c
 11658                           
 11659                           ;Setup_Alarm_Time.c: 96: break;
 11660  00325E  D01B               	goto	l8700
 11661  003260                     l8684:
 11662                           
 11663                           ;Setup_Alarm_Time.c: 100: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 11664  003260  5065               	movf	_setup_alarm_minute,w,c
 11665  003262  A4D8               	btfss	status,2,c
 11666  003264  D003               	goto	l8688
 11667  003266  0E3B               	movlw	59
 11668  003268  6E65               	movwf	_setup_alarm_minute,c
 11669  00326A  D015               	goto	l8700
 11670  00326C                     l8688:
 11671                           
 11672                           ;Setup_Alarm_Time.c: 101: else --setup_alarm_minute;
 11673  00326C  0665               	decf	_setup_alarm_minute,f,c
 11674                           
 11675                           ;Setup_Alarm_Time.c: 102: break;
 11676  00326E  D013               	goto	l8700
 11677  003270                     l8690:
 11678                           
 11679                           ;Setup_Alarm_Time.c: 106: if (setup_alarm_second == 0) setup_alarm_second = 59;
 11680  003270  5066               	movf	_setup_alarm_second,w,c
 11681  003272  A4D8               	btfss	status,2,c
 11682  003274  D003               	goto	l8694
 11683  003276  0E3B               	movlw	59
 11684  003278  6E66               	movwf	_setup_alarm_second,c
 11685  00327A  D00D               	goto	l8700
 11686  00327C                     l8694:
 11687                           
 11688                           ;Setup_Alarm_Time.c: 107: else --setup_alarm_second;
 11689  00327C  0666               	decf	_setup_alarm_second,f,c
 11690                           
 11691                           ;Setup_Alarm_Time.c: 112: }
 11692                           
 11693                           ;Setup_Alarm_Time.c: 111: break;
 11694                           
 11695                           ;Setup_Alarm_Time.c: 110: default:
 11696                           
 11697                           ;Setup_Alarm_Time.c: 108: break;
 11698  00327E  D00B               	goto	l8700
 11699  003280                     l8698:
 11700  003280  5053               	movf	_Select_Alarm_Field,w,c
 11701                           
 11702                           ; Switch size 1, requested type "space"
 11703                           ; Number of cases is 3, Range of values is 0 to 2
 11704                           ; switch strategies available:
 11705                           ; Name         Instructions Cycles
 11706                           ; simple_byte           10     6 (average)
 11707                           ;	Chosen strategy is simple_byte
 11708  003282  0A00               	xorlw	0	; case 0
 11709  003284  B4D8               	btfsc	status,2,c
 11710  003286  D7E4               	goto	l8678
 11711  003288  0A01               	xorlw	1	; case 1
 11712  00328A  B4D8               	btfsc	status,2,c
 11713  00328C  D7E9               	goto	l8684
 11714  00328E  0A03               	xorlw	3	; case 2
 11715  003290  B4D8               	btfsc	status,2,c
 11716  003292  D7EE               	goto	l8690
 11717  003294  D000               	goto	l8700
 11718  003296                     l8700:
 11719                           
 11720                           ;Setup_Alarm_Time.c: 113: Update_Setup_Alarm_Time_Screen();
 11721  003296  EC89  F011         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 11722  00329A  0012               	return		;funcret
 11723  00329C                     __end_of_Decrease_Alarm_Time:
 11724                           	opt stack 0
 11725                           tblptru	equ	0xFF8
 11726                           tblptrh	equ	0xFF7
 11727                           tblptrl	equ	0xFF6
 11728                           tablat	equ	0xFF5
 11729                           prodh	equ	0xFF4
 11730                           prodl	equ	0xFF3
 11731                           intcon	equ	0xFF2
 11732                           intcon2	equ	0xFF1
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           postdec1	equ	0xFE5
 11736                           plusw1	equ	0xFE3
 11737                           fsr1l	equ	0xFE1
 11738                           indf2	equ	0xFDF
 11739                           postinc2	equ	0xFDE
 11740                           plusw2	equ	0xFDB
 11741                           fsr2h	equ	0xFDA
 11742                           fsr2l	equ	0xFD9
 11743                           status	equ	0xFD8
 11744                           
 11745 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 11746 ;; Defined at:
 11747 ;;		line 167 in file "Setup_Alarm_Time.c"
 11748 ;; Parameters:    Size  Location     Type
 11749 ;;		None
 11750 ;; Auto vars:     Size  Location     Type
 11751 ;;		None
 11752 ;; Return value:  Size  Location     Type
 11753 ;;		None               void
 11754 ;; Registers used:
 11755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11756 ;; Tracked objects:
 11757 ;;		On entry : 0/0
 11758 ;;		On exit  : 0/0
 11759 ;;		Unchanged: 0/0
 11760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11765 ;;Total ram usage:        0 bytes
 11766 ;; Hardware stack levels used:    1
 11767 ;; Hardware stack levels required when called:   10
 11768 ;; This function calls:
 11769 ;;		___awdiv
 11770 ;;		___awmod
 11771 ;;		_drawtext
 11772 ;;		_printf
 11773 ;; This function is called by:
 11774 ;;		_Do_Setup_Alarm_Time
 11775 ;;		_Increase_Alarm_Time
 11776 ;;		_Decrease_Alarm_Time
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           	psect	text63
 11781  002312                     __ptext63:
 11782                           	opt stack 0
 11783  002312                     _Update_Setup_Alarm_Time_Screen:
 11784                           	opt stack 19
 11785                           
 11786                           ;Setup_Alarm_Time.c: 169: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 11787                           
 11788                           ;incstack = 0
 11789  002312  0E9F               	movlw	low STR_29
 11790  002314  6E1D               	movwf	printf@f,c
 11791  002316  0EFF               	movlw	high STR_29
 11792  002318  6E1E               	movwf	printf@f+1,c
 11793  00231A  C064  F01F         	movff	_setup_alarm_hour,?_printf+2
 11794  00231E  6A20               	clrf	?_printf+3,c
 11795  002320  C065  F021         	movff	_setup_alarm_minute,?_printf+4
 11796  002324  6A22               	clrf	?_printf+5,c
 11797  002326  C066  F023         	movff	_setup_alarm_second,?_printf+6
 11798  00232A  6A24               	clrf	?_printf+7,c
 11799  00232C  ECE9  F004         	call	_printf	;wreg free
 11800                           
 11801                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 11802  002330  C064  F020         	movff	_setup_alarm_hour,___awdiv@dividend
 11803  002334  6A21               	clrf	___awdiv@dividend+1,c
 11804  002336  0E00               	movlw	0
 11805  002338  6E23               	movwf	___awdiv@divisor+1,c
 11806  00233A  0E0A               	movlw	10
 11807  00233C  6E22               	movwf	___awdiv@divisor,c
 11808  00233E  EC26  F014         	call	___awdiv	;wreg free
 11809  002342  5020               	movf	?___awdiv,w,c
 11810  002344  0F30               	addlw	48
 11811  002346  0100               	movlb	0	; () banked
 11812  002348  6F94               	movwf	_setup_alarm_time& (0+255),b
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;Setup_Alarm_Time.c: 171: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';
 11816  00234A  C064  F028         	movff	_setup_alarm_hour,___awmod@dividend
 11817  00234E  6A29               	clrf	___awmod@dividend+1,c
 11818  002350  0E00               	movlw	0
 11819  002352  6E2B               	movwf	___awmod@divisor+1,c
 11820  002354  0E0A               	movlw	10
 11821  002356  6E2A               	movwf	___awmod@divisor,c
 11822  002358  EC17  F016         	call	___awmod	;wreg free
 11823  00235C  5028               	movf	?___awmod,w,c
 11824  00235E  0F30               	addlw	48
 11825  002360  0100               	movlb	0	; () banked
 11826  002362  6F95               	movwf	(_setup_alarm_time+1)& (0+255),b
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;Setup_Alarm_Time.c: 172: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';
 11830  002364  C065  F020         	movff	_setup_alarm_minute,___awdiv@dividend
 11831  002368  6A21               	clrf	___awdiv@dividend+1,c
 11832  00236A  0E00               	movlw	0
 11833  00236C  6E23               	movwf	___awdiv@divisor+1,c
 11834  00236E  0E0A               	movlw	10
 11835  002370  6E22               	movwf	___awdiv@divisor,c
 11836  002372  EC26  F014         	call	___awdiv	;wreg free
 11837  002376  5020               	movf	?___awdiv,w,c
 11838  002378  0F30               	addlw	48
 11839  00237A  0100               	movlb	0	; () banked
 11840  00237C  6F97               	movwf	(_setup_alarm_time+3)& (0+255),b
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;Setup_Alarm_Time.c: 173: setup_alarm_time[4] = (setup_alarm_minute&10) + '0';
 11844  00237E  5065               	movf	_setup_alarm_minute,w,c
 11845  002380  0B0A               	andlw	10
 11846  002382  0F30               	addlw	48
 11847  002384  0100               	movlb	0	; () banked
 11848  002386  6F98               	movwf	(_setup_alarm_time+4)& (0+255),b
 11849                           
 11850                           ; BSR set to: 0
 11851                           ;Setup_Alarm_Time.c: 174: setup_alarm_time[6] = (setup_alarm_second/10) + '0';
 11852  002388  C066  F020         	movff	_setup_alarm_second,___awdiv@dividend
 11853  00238C  6A21               	clrf	___awdiv@dividend+1,c
 11854  00238E  0E00               	movlw	0
 11855  002390  6E23               	movwf	___awdiv@divisor+1,c
 11856  002392  0E0A               	movlw	10
 11857  002394  6E22               	movwf	___awdiv@divisor,c
 11858  002396  EC26  F014         	call	___awdiv	;wreg free
 11859  00239A  5020               	movf	?___awdiv,w,c
 11860  00239C  0F30               	addlw	48
 11861  00239E  0100               	movlb	0	; () banked
 11862  0023A0  6F9A               	movwf	(_setup_alarm_time+6)& (0+255),b
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;Setup_Alarm_Time.c: 175: setup_alarm_time[7] = (setup_alarm_second%10) + '0';
 11866  0023A2  C066  F028         	movff	_setup_alarm_second,___awmod@dividend
 11867  0023A6  6A29               	clrf	___awmod@dividend+1,c
 11868  0023A8  0E00               	movlw	0
 11869  0023AA  6E2B               	movwf	___awmod@divisor+1,c
 11870  0023AC  0E0A               	movlw	10
 11871  0023AE  6E2A               	movwf	___awmod@divisor,c
 11872  0023B0  EC17  F016         	call	___awmod	;wreg free
 11873  0023B4  5028               	movf	?___awmod,w,c
 11874  0023B6  0F30               	addlw	48
 11875  0023B8  0100               	movlb	0	; () banked
 11876  0023BA  6F9B               	movwf	(_setup_alarm_time+7)& (0+255),b
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;Setup_Alarm_Time.c: 176: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 11880  0023BC  0E34               	movlw	52
 11881  0023BE  6E39               	movwf	drawtext@y,c
 11882  0023C0  0E94               	movlw	low _setup_alarm_time
 11883  0023C2  6E3A               	movwf	drawtext@_text,c
 11884  0023C4  0E00               	movlw	high _setup_alarm_time
 11885  0023C6  6E3B               	movwf	drawtext@_text+1,c
 11886  0023C8  0E07               	movlw	7
 11887  0023CA  6E3D               	movwf	drawtext@color+1,c
 11888  0023CC  683C               	setf	drawtext@color,c
 11889  0023CE  0E00               	movlw	0
 11890  0023D0  6E3F               	movwf	drawtext@bg+1,c
 11891  0023D2  0E00               	movlw	0
 11892  0023D4  6E3E               	movwf	drawtext@bg,c
 11893  0023D6  0E02               	movlw	2
 11894  0023D8  6E40               	movwf	drawtext@size,c
 11895  0023DA  0E0F               	movlw	15
 11896  0023DC  ECBE  F00C         	call	_drawtext
 11897  0023E0  0012               	return		;funcret
 11898  0023E2                     __end_of_Update_Setup_Alarm_Time_Screen:
 11899                           	opt stack 0
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           intcon2	equ	0xFF1
 11908                           postinc0	equ	0xFEE
 11909                           wreg	equ	0xFE8
 11910                           postdec1	equ	0xFE5
 11911                           plusw1	equ	0xFE3
 11912                           fsr1l	equ	0xFE1
 11913                           indf2	equ	0xFDF
 11914                           postinc2	equ	0xFDE
 11915                           plusw2	equ	0xFDB
 11916                           fsr2h	equ	0xFDA
 11917                           fsr2l	equ	0xFD9
 11918                           status	equ	0xFD8
 11919                           
 11920 ;; *************** function _drawtext *****************
 11921 ;; Defined at:
 11922 ;;		line 474 in file "ST7735_TFT.c"
 11923 ;; Parameters:    Size  Location     Type
 11924 ;;  x               1    wreg     unsigned char 
 11925 ;;  y               1   56[COMRAM] unsigned char 
 11926 ;;  _text           2   57[COMRAM] PTR unsigned char 
 11927 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 11928 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 11929 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 11930 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 11931 ;;		 -> tempC(4), 
 11932 ;;  color           2   59[COMRAM] unsigned int 
 11933 ;;  bg              2   61[COMRAM] unsigned int 
 11934 ;;  size            1   63[COMRAM] unsigned char 
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;  x               1    0[BANK1 ] unsigned char 
 11937 ;;  i               2    3[BANK1 ] unsigned int 
 11938 ;;  textsize        2    1[BANK1 ] unsigned int 
 11939 ;;  cursor_x        1    6[BANK1 ] unsigned char 
 11940 ;;  cursor_y        1    5[BANK1 ] unsigned char 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;		None               void
 11943 ;; Registers used:
 11944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : 0/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11950 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11953 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11954 ;;Total ram usage:       17 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    9
 11957 ;; This function calls:
 11958 ;;		_drawChar
 11959 ;;		_strlen
 11960 ;; This function is called by:
 11961 ;;		_Initialize_Screen
 11962 ;;		_Update_Screen
 11963 ;;		_Initialize_Setup_Alarm_Time_Screen
 11964 ;;		_Update_Setup_Alarm_Time_Screen
 11965 ;;		_Initialize_Setup_Heater_Screen
 11966 ;;		_Update_Setup_Heater_Screen
 11967 ;;		_Initialize_Setup_Time_Screen
 11968 ;;		_Update_Setup_Time_Screen
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text64
 11973  00197C                     __ptext64:
 11974                           	opt stack 0
 11975  00197C                     _drawtext:
 11976                           	opt stack 20
 11977                           
 11978                           ;incstack = 0
 11979                           ;drawtext@x stored from wreg
 11980  00197C  0101               	movlb	1	; () banked
 11981  00197E  6F4A               	movwf	drawtext@x& (0+255),b
 11982                           
 11983                           ; BSR set to: 1
 11984                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 11985                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 11986                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 11987  001980  C14A  F150         	movff	drawtext@x,drawtext@cursor_x
 11988                           
 11989                           ; BSR set to: 1
 11990  001984  C039  F14F         	movff	drawtext@y,drawtext@cursor_y
 11991                           
 11992                           ; BSR set to: 1
 11993                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 11994  001988  C03A  F011         	movff	drawtext@_text,strlen@s
 11995  00198C  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 11996  001990  EC6D  F01A         	call	_strlen	;wreg free
 11997  001994  C011  F14B         	movff	?_strlen,drawtext@textsize
 11998  001998  C012  F14C         	movff	?_strlen+1,drawtext@textsize+1
 11999                           
 12000                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 12001  00199C  0E00               	movlw	0
 12002  00199E  0101               	movlb	1	; () banked
 12003  0019A0  6F4E               	movwf	(drawtext@i+1)& (0+255),b
 12004  0019A2  0E00               	movlw	0
 12005  0019A4  6F4D               	movwf	drawtext@i& (0+255),b
 12006  0019A6  D066               	goto	l8134
 12007  0019A8                     l8108:
 12008                           
 12009                           ; BSR set to: 1
 12010                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 12011  0019A8  0100               	movlb	0	; () banked
 12012  0019AA  5181               	movf	_wrap& (0+255),w,b
 12013  0019AC  0100               	movlb	0	; () banked
 12014  0019AE  B4D8               	btfsc	status,2,c
 12015  0019B0  D034               	goto	l8124
 12016                           
 12017                           ; BSR set to: 0
 12018  0019B2  5040               	movf	drawtext@size,w,c
 12019  0019B4  0D05               	mullw	5
 12020  0019B6  0101               	movlb	1	; () banked
 12021  0019B8  5150               	movf	drawtext@cursor_x& (0+255),w,b
 12022  0019BA  6E41               	movwf	??_drawtext& (0+255),c
 12023  0019BC  6A42               	clrf	(??_drawtext+1)& (0+255),c
 12024  0019BE  50F3               	movf	prodl,w,c
 12025  0019C0  2641               	addwf	??_drawtext,f,c
 12026  0019C2  50F4               	movf	prodh,w,c
 12027  0019C4  2242               	addwfc	??_drawtext+1,f,c
 12028  0019C6  BE42               	btfsc	??_drawtext+1,7,c
 12029  0019C8  D028               	goto	l8124
 12030  0019CA  5042               	movf	??_drawtext+1,w,c
 12031  0019CC  E104               	bnz	u5780
 12032  0019CE  0E81               	movlw	129
 12033  0019D0  5C41               	subwf	??_drawtext,w,c
 12034  0019D2  A0D8               	btfss	status,0,c
 12035  0019D4  D022               	goto	l8124
 12036  0019D6                     u5780:
 12037                           
 12038                           ; BSR set to: 1
 12039                           ;ST7735_TFT.c: 482: cursor_x = 0;
 12040  0019D6  0E00               	movlw	0
 12041  0019D8  0101               	movlb	1	; () banked
 12042  0019DA  6F50               	movwf	drawtext@cursor_x& (0+255),b
 12043                           
 12044                           ; BSR set to: 1
 12045                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 12046  0019DC  5040               	movf	drawtext@size,w,c
 12047  0019DE  0D07               	mullw	7
 12048  0019E0  50F3               	movf	prodl,w,c
 12049  0019E2  0101               	movlb	1	; () banked
 12050  0019E4  254F               	addwf	drawtext@cursor_y& (0+255),w,b
 12051  0019E6  0F03               	addlw	3
 12052  0019E8  0101               	movlb	1	; () banked
 12053  0019EA  6F4F               	movwf	drawtext@cursor_y& (0+255),b
 12054                           
 12055                           ; BSR set to: 1
 12056                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 12057  0019EC  0EA0               	movlw	160
 12058  0019EE  0101               	movlb	1	; () banked
 12059  0019F0  654F               	cpfsgt	drawtext@cursor_y& (0+255),b
 12060  0019F2  D004               	goto	l8120
 12061                           
 12062                           ; BSR set to: 1
 12063  0019F4  0EA0               	movlw	160
 12064  0019F6  0101               	movlb	1	; () banked
 12065  0019F8  6F4F               	movwf	drawtext@cursor_y& (0+255),b
 12066  0019FA  D000               	goto	l8120
 12067  0019FC                     l8120:
 12068                           
 12069                           ; BSR set to: 1
 12070                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 12071  0019FC  0101               	movlb	1	; () banked
 12072  0019FE  514D               	movf	drawtext@i& (0+255),w,b
 12073  001A00  243A               	addwf	drawtext@_text,w,c
 12074  001A02  6ED9               	movwf	fsr2l,c
 12075  001A04  0101               	movlb	1	; () banked
 12076  001A06  514E               	movf	(drawtext@i+1)& (0+255),w,b
 12077  001A08  203B               	addwfc	drawtext@_text+1,w,c
 12078  001A0A  6EDA               	movwf	fsr2h,c
 12079  001A0C  0E20               	movlw	32
 12080  001A0E  18DE               	xorwf	postinc2,w,c
 12081  001A10  B4D8               	btfsc	status,2,c
 12082  001A12  D02C               	goto	l8132
 12083  001A14  D002               	goto	l8124
 12084                           
 12085                           ; BSR set to: 1
 12086  001A16  D02A               	goto	l8132
 12087                           
 12088                           ; BSR set to: 1
 12089  001A18  D000               	goto	l8124
 12090  001A1A                     l8124:
 12091                           
 12092                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 12093  001A1A  C14F  F02E         	movff	drawtext@cursor_y,drawChar@y
 12094  001A1E  0101               	movlb	1	; () banked
 12095  001A20  514D               	movf	drawtext@i& (0+255),w,b
 12096  001A22  243A               	addwf	drawtext@_text,w,c
 12097  001A24  6ED9               	movwf	fsr2l,c
 12098  001A26  0101               	movlb	1	; () banked
 12099  001A28  514E               	movf	(drawtext@i+1)& (0+255),w,b
 12100  001A2A  203B               	addwfc	drawtext@_text+1,w,c
 12101  001A2C  6EDA               	movwf	fsr2h,c
 12102  001A2E  50DF               	movf	indf2,w,c
 12103  001A30  6E2F               	movwf	drawChar@c,c
 12104  001A32  C03C  F030         	movff	drawtext@color,drawChar@color
 12105  001A36  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 12106  001A3A  C03E  F032         	movff	drawtext@bg,drawChar@bg
 12107  001A3E  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 12108  001A42  C040  F034         	movff	drawtext@size,drawChar@size
 12109  001A46  0101               	movlb	1	; () banked
 12110  001A48  5150               	movf	drawtext@cursor_x& (0+255),w,b
 12111  001A4A  EC8B  F00B         	call	_drawChar
 12112                           
 12113                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 12114  001A4E  5040               	movf	drawtext@size,w,c
 12115  001A50  0D06               	mullw	6
 12116  001A52  50F3               	movf	prodl,w,c
 12117  001A54  0101               	movlb	1	; () banked
 12118  001A56  2550               	addwf	drawtext@cursor_x& (0+255),w,b
 12119  001A58  0101               	movlb	1	; () banked
 12120  001A5A  6F50               	movwf	drawtext@cursor_x& (0+255),b
 12121                           
 12122                           ; BSR set to: 1
 12123                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 12124  001A5C  0E80               	movlw	128
 12125  001A5E  0101               	movlb	1	; () banked
 12126  001A60  6550               	cpfsgt	drawtext@cursor_x& (0+255),b
 12127  001A62  D004               	goto	l8132
 12128                           
 12129                           ; BSR set to: 1
 12130  001A64  0E80               	movlw	128
 12131  001A66  0101               	movlb	1	; () banked
 12132  001A68  6F50               	movwf	drawtext@cursor_x& (0+255),b
 12133                           
 12134                           ; BSR set to: 1
 12135  001A6A  D000               	goto	l8132
 12136  001A6C                     l8132:
 12137                           
 12138                           ; BSR set to: 1
 12139  001A6C  0101               	movlb	1	; () banked
 12140  001A6E  4B4D               	infsnz	drawtext@i& (0+255),f,b
 12141  001A70  2B4E               	incf	(drawtext@i+1)& (0+255),f,b
 12142  001A72  D000               	goto	l8134
 12143  001A74                     l8134:
 12144                           
 12145                           ; BSR set to: 1
 12146  001A74  0101               	movlb	1	; () banked
 12147  001A76  514B               	movf	drawtext@textsize& (0+255),w,b
 12148  001A78  0101               	movlb	1	; () banked
 12149  001A7A  5D4D               	subwf	drawtext@i& (0+255),w,b
 12150  001A7C  0101               	movlb	1	; () banked
 12151  001A7E  514C               	movf	(drawtext@textsize+1)& (0+255),w,b
 12152  001A80  0101               	movlb	1	; () banked
 12153  001A82  594E               	subwfb	(drawtext@i+1)& (0+255),w,b
 12154  001A84  A0D8               	btfss	status,0,c
 12155  001A86  D790               	goto	l8108
 12156                           
 12157                           ; BSR set to: 1
 12158                           
 12159                           ; BSR set to: 1
 12160  001A88  0012               	return		;funcret
 12161  001A8A                     __end_of_drawtext:
 12162                           	opt stack 0
 12163                           tblptru	equ	0xFF8
 12164                           tblptrh	equ	0xFF7
 12165                           tblptrl	equ	0xFF6
 12166                           tablat	equ	0xFF5
 12167                           prodh	equ	0xFF4
 12168                           prodl	equ	0xFF3
 12169                           intcon	equ	0xFF2
 12170                           intcon2	equ	0xFF1
 12171                           postinc0	equ	0xFEE
 12172                           wreg	equ	0xFE8
 12173                           postdec1	equ	0xFE5
 12174                           plusw1	equ	0xFE3
 12175                           fsr1l	equ	0xFE1
 12176                           indf2	equ	0xFDF
 12177                           postinc2	equ	0xFDE
 12178                           plusw2	equ	0xFDB
 12179                           fsr2h	equ	0xFDA
 12180                           fsr2l	equ	0xFD9
 12181                           status	equ	0xFD8
 12182                           
 12183 ;; *************** function _strlen *****************
 12184 ;; Defined at:
 12185 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 12186 ;; Parameters:    Size  Location     Type
 12187 ;;  s               2   16[COMRAM] PTR const unsigned char 
 12188 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 12189 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 12190 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 12191 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 12192 ;;		 -> tempC(4), 
 12193 ;; Auto vars:     Size  Location     Type
 12194 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 12195 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 12196 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 12197 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 12198 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 12199 ;;		 -> tempC(4), 
 12200 ;; Return value:  Size  Location     Type
 12201 ;;                  2   16[COMRAM] unsigned int 
 12202 ;; Registers used:
 12203 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12204 ;; Tracked objects:
 12205 ;;		On entry : 0/0
 12206 ;;		On exit  : 0/0
 12207 ;;		Unchanged: 0/0
 12208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12211 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12212 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;Total ram usage:        6 bytes
 12214 ;; Hardware stack levels used:    1
 12215 ;; Hardware stack levels required when called:    3
 12216 ;; This function calls:
 12217 ;;		Nothing
 12218 ;; This function is called by:
 12219 ;;		_drawtext
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           	psect	text65
 12224  0034DA                     __ptext65:
 12225                           	opt stack 0
 12226  0034DA                     _strlen:
 12227                           	opt stack 25
 12228                           
 12229                           ; BSR set to: 1
 12230                           ;incstack = 0
 12231  0034DA  C011  F015         	movff	strlen@s,strlen@cp
 12232  0034DE  C012  F016         	movff	strlen@s+1,strlen@cp+1
 12233  0034E2  D003               	goto	l7772
 12234  0034E4                     l7770:
 12235  0034E4  4A15               	infsnz	strlen@cp,f,c
 12236  0034E6  2A16               	incf	strlen@cp+1,f,c
 12237  0034E8  D000               	goto	l7772
 12238  0034EA                     l7772:
 12239  0034EA  C015  FFD9         	movff	strlen@cp,fsr2l
 12240  0034EE  C016  FFDA         	movff	strlen@cp+1,fsr2h
 12241  0034F2  50DF               	movf	indf2,w,c
 12242  0034F4  A4D8               	btfss	status,2,c
 12243  0034F6  D7F6               	goto	l7770
 12244  0034F8  C011  F013         	movff	strlen@s,??_strlen
 12245  0034FC  C012  F014         	movff	strlen@s+1,??_strlen+1
 12246  003500  1E13               	comf	??_strlen,f,c
 12247  003502  1E14               	comf	??_strlen+1,f,c
 12248  003504  4A13               	infsnz	??_strlen,f,c
 12249  003506  2A14               	incf	??_strlen+1,f,c
 12250  003508  5015               	movf	strlen@cp,w,c
 12251  00350A  2413               	addwf	??_strlen,w,c
 12252  00350C  6E11               	movwf	?_strlen,c
 12253  00350E  5016               	movf	strlen@cp+1,w,c
 12254  003510  2014               	addwfc	??_strlen+1,w,c
 12255  003512  6E12               	movwf	?_strlen+1,c
 12256  003514  D000               	goto	l2020
 12257  003516                     l2020:
 12258  003516  0012               	return		;funcret
 12259  003518                     __end_of_strlen:
 12260                           	opt stack 0
 12261                           tblptru	equ	0xFF8
 12262                           tblptrh	equ	0xFF7
 12263                           tblptrl	equ	0xFF6
 12264                           tablat	equ	0xFF5
 12265                           prodh	equ	0xFF4
 12266                           prodl	equ	0xFF3
 12267                           intcon	equ	0xFF2
 12268                           intcon2	equ	0xFF1
 12269                           postinc0	equ	0xFEE
 12270                           wreg	equ	0xFE8
 12271                           postdec1	equ	0xFE5
 12272                           plusw1	equ	0xFE3
 12273                           fsr1l	equ	0xFE1
 12274                           indf2	equ	0xFDF
 12275                           postinc2	equ	0xFDE
 12276                           plusw2	equ	0xFDB
 12277                           fsr2h	equ	0xFDA
 12278                           fsr2l	equ	0xFD9
 12279                           status	equ	0xFD8
 12280                           
 12281 ;; *************** function _drawChar *****************
 12282 ;; Defined at:
 12283 ;;		line 447 in file "ST7735_TFT.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;  x               1    wreg     unsigned char 
 12286 ;;  y               1   45[COMRAM] unsigned char 
 12287 ;;  c               1   46[COMRAM] unsigned char 
 12288 ;;  color           2   47[COMRAM] unsigned int 
 12289 ;;  bg              2   49[COMRAM] unsigned int 
 12290 ;;  size            1   51[COMRAM] unsigned char 
 12291 ;; Auto vars:     Size  Location     Type
 12292 ;;  x               1   53[COMRAM] unsigned char 
 12293 ;;  line            1   52[COMRAM] unsigned char 
 12294 ;;  i               1   55[COMRAM] unsigned char 
 12295 ;;  j               1   54[COMRAM] unsigned char 
 12296 ;; Return value:  Size  Location     Type
 12297 ;;		None               void
 12298 ;; Registers used:
 12299 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12300 ;; Tracked objects:
 12301 ;;		On entry : 0/0
 12302 ;;		On exit  : 0/0
 12303 ;;		Unchanged: 0/0
 12304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12305 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12306 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12308 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12309 ;;Total ram usage:       11 bytes
 12310 ;; Hardware stack levels used:    1
 12311 ;; Hardware stack levels required when called:    8
 12312 ;; This function calls:
 12313 ;;		___wmul
 12314 ;;		_drawPixel
 12315 ;;		_fillRect
 12316 ;; This function is called by:
 12317 ;;		_drawtext
 12318 ;; This function uses a non-reentrant model
 12319 ;;
 12320                           
 12321                           	psect	text66
 12322  001716                     __ptext66:
 12323                           	opt stack 0
 12324  001716                     _drawChar:
 12325                           	opt stack 20
 12326                           
 12327                           ;incstack = 0
 12328                           ;drawChar@x stored from wreg
 12329  001716  6E36               	movwf	drawChar@x,c
 12330                           
 12331                           ;ST7735_TFT.c: 449: char i, j;
 12332                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 12333  001718  0E80               	movlw	128
 12334  00171A  6036               	cpfslt	drawChar@x,c
 12335  00171C  D0A6               	goto	l746
 12336  00171E  0E9F               	movlw	159
 12337  001720  642E               	cpfsgt	drawChar@y,c
 12338  001722  D001               	goto	l7718
 12339                           
 12340                           ;ST7735_TFT.c: 451: return;
 12341  001724  D0A2               	goto	l746
 12342  001726                     l7718:
 12343                           
 12344                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 12345  001726  5034               	movf	drawChar@size,w,c
 12346  001728  A4D8               	btfss	status,2,c
 12347  00172A  D003               	goto	l7722
 12348  00172C  0E01               	movlw	1
 12349  00172E  6E34               	movwf	drawChar@size,c
 12350  001730  D000               	goto	l7722
 12351  001732                     l7722:
 12352                           
 12353                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 12354  001732  0E1F               	movlw	31
 12355  001734  642F               	cpfsgt	drawChar@c,c
 12356  001736  D004               	goto	l7726
 12357  001738  0E7E               	movlw	126
 12358  00173A  642F               	cpfsgt	drawChar@c,c
 12359  00173C  D003               	goto	l748
 12360  00173E  D000               	goto	l7726
 12361  001740                     l7726:
 12362                           
 12363                           ;ST7735_TFT.c: 454: c = '?';
 12364  001740  0E3F               	movlw	63
 12365  001742  6E2F               	movwf	drawChar@c,c
 12366  001744                     l748:
 12367                           
 12368                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 12369  001744  0E00               	movlw	0
 12370  001746  6E38               	movwf	drawChar@i,c
 12371  001748                     l7728:
 12372  001748  0E04               	movlw	4
 12373  00174A  6438               	cpfsgt	drawChar@i,c
 12374  00174C  D001               	goto	l7732
 12375  00174E  D08D               	goto	l746
 12376  001750                     l7732:
 12377                           
 12378                           ;ST7735_TFT.c: 456: unsigned char line;
 12379                           ;ST7735_TFT.c: 457: if(c < 'S')
 12380  001750  0E53               	movlw	83
 12381  001752  602F               	cpfslt	drawChar@c,c
 12382  001754  D015               	goto	l7736
 12383                           
 12384                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 12385  001756  0EE0               	movlw	224
 12386  001758  242F               	addwf	drawChar@c,w,c
 12387  00175A  6E11               	movwf	___wmul@multiplier,c
 12388  00175C  6A12               	clrf	___wmul@multiplier+1,c
 12389  00175E  0EFF               	movlw	255
 12390  001760  2212               	addwfc	___wmul@multiplier+1,f,c
 12391  001762  0E00               	movlw	0
 12392  001764  6E14               	movwf	___wmul@multiplicand+1,c
 12393  001766  0E05               	movlw	5
 12394  001768  6E13               	movwf	___wmul@multiplicand,c
 12395  00176A  EC75  F01B         	call	___wmul	;wreg free
 12396  00176E  5038               	movf	drawChar@i,w,c
 12397  001770  2611               	addwf	?___wmul,f,c
 12398  001772  0E00               	movlw	0
 12399  001774  2212               	addwfc	?___wmul+1,f,c
 12400  001776  0E8B               	movlw	low _font
 12401  001778  2411               	addwf	?___wmul,w,c
 12402  00177A  6EF6               	movwf	tblptrl,c
 12403  00177C  0EFC               	movlw	high _font
 12404  00177E  D014               	goto	L6
 12405  001780                     l7736:
 12406                           
 12407                           ;ST7735_TFT.c: 459: else
 12408                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 12409  001780  0EAD               	movlw	173
 12410  001782  242F               	addwf	drawChar@c,w,c
 12411  001784  6E11               	movwf	___wmul@multiplier,c
 12412  001786  6A12               	clrf	___wmul@multiplier+1,c
 12413  001788  0EFF               	movlw	255
 12414  00178A  2212               	addwfc	___wmul@multiplier+1,f,c
 12415  00178C  0E00               	movlw	0
 12416  00178E  6E14               	movwf	___wmul@multiplicand+1,c
 12417  001790  0E05               	movlw	5
 12418  001792  6E13               	movwf	___wmul@multiplicand,c
 12419  001794  EC75  F01B         	call	___wmul	;wreg free
 12420  001798  5038               	movf	drawChar@i,w,c
 12421  00179A  2611               	addwf	?___wmul,f,c
 12422  00179C  0E00               	movlw	0
 12423  00179E  2212               	addwfc	?___wmul+1,f,c
 12424  0017A0  0E8A               	movlw	low _font2
 12425  0017A2  2411               	addwf	?___wmul,w,c
 12426  0017A4  6EF6               	movwf	tblptrl,c
 12427  0017A6  0EFD               	movlw	high _font2
 12428  0017A8                     L6:
 12429  0017A8  2012               	addwfc	?___wmul+1,w,c
 12430  0017AA  6EF7               	movwf	tblptrh,c
 12431  0017AC                     	if	0	;There are less than 3 active tblptr bytes
 12432  0017AC                     	endif
 12433  0017AC  0008               	tblrd		*
 12434  0017AE  CFF5 F035          	movff	tablat,drawChar@line
 12435  0017B2  D000               	goto	l7738
 12436  0017B4                     l7738:
 12437                           
 12438                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 12439  0017B4  0E00               	movlw	0
 12440  0017B6  6E37               	movwf	drawChar@j,c
 12441  0017B8                     l7740:
 12442  0017B8  0E06               	movlw	6
 12443  0017BA  6437               	cpfsgt	drawChar@j,c
 12444  0017BC  D001               	goto	l755
 12445  0017BE  D053               	goto	l7764
 12446  0017C0                     l755:
 12447                           
 12448                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 12449  0017C0  A035               	btfss	drawChar@line,0,c
 12450  0017C2  D023               	goto	l7750
 12451                           
 12452                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 12453  0017C4  0434               	decf	drawChar@size,w,c
 12454  0017C6  A4D8               	btfss	status,2,c
 12455  0017C8  D00C               	goto	l7748
 12456  0017CA  502E               	movf	drawChar@y,w,c
 12457  0017CC  2437               	addwf	drawChar@j,w,c
 12458  0017CE  6E18               	movwf	drawPixel@y,c
 12459  0017D0  C030  F019         	movff	drawChar@color,drawPixel@color
 12460  0017D4  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 12461  0017D8  5036               	movf	drawChar@x,w,c
 12462  0017DA  2438               	addwf	drawChar@i,w,c
 12463  0017DC  EC33  F01B         	call	_drawPixel
 12464  0017E0  D03E               	goto	l7758
 12465  0017E2                     l7748:
 12466                           
 12467                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 12468  0017E2  5037               	movf	drawChar@j,w,c
 12469  0017E4  0234               	mulwf	drawChar@size,c
 12470  0017E6  50F3               	movf	prodl,w,c
 12471  0017E8  242E               	addwf	drawChar@y,w,c
 12472  0017EA  6E23               	movwf	fillRect@y,c
 12473  0017EC  C034  F024         	movff	drawChar@size,fillRect@w
 12474  0017F0  C034  F025         	movff	drawChar@size,fillRect@h
 12475  0017F4  C030  F026         	movff	drawChar@color,fillRect@color
 12476  0017F8  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 12477  0017FC  5038               	movf	drawChar@i,w,c
 12478  0017FE  0234               	mulwf	drawChar@size,c
 12479  001800  50F3               	movf	prodl,w,c
 12480  001802  2436               	addwf	drawChar@x,w,c
 12481  001804  ECE6  F019         	call	_fillRect
 12482                           
 12483                           ;ST7735_TFT.c: 465: }
 12484  001808  D02A               	goto	l7758
 12485  00180A                     l7750:
 12486                           
 12487                           ;ST7735_TFT.c: 466: else if(bg != color) {
 12488  00180A  5030               	movf	drawChar@color,w,c
 12489  00180C  1832               	xorwf	drawChar@bg,w,c
 12490  00180E  E104               	bnz	u5200
 12491  001810  5031               	movf	drawChar@color+1,w,c
 12492  001812  1833               	xorwf	drawChar@bg+1,w,c
 12493  001814  B4D8               	btfsc	status,2,c
 12494  001816  D023               	goto	l7758
 12495  001818                     u5200:
 12496                           
 12497                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 12498  001818  0434               	decf	drawChar@size,w,c
 12499  00181A  A4D8               	btfss	status,2,c
 12500  00181C  D00C               	goto	l7756
 12501  00181E  502E               	movf	drawChar@y,w,c
 12502  001820  2437               	addwf	drawChar@j,w,c
 12503  001822  6E18               	movwf	drawPixel@y,c
 12504  001824  C032  F019         	movff	drawChar@bg,drawPixel@color
 12505  001828  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 12506  00182C  5036               	movf	drawChar@x,w,c
 12507  00182E  2438               	addwf	drawChar@i,w,c
 12508  001830  EC33  F01B         	call	_drawPixel
 12509  001834  D014               	goto	l7758
 12510  001836                     l7756:
 12511                           
 12512                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 12513  001836  5037               	movf	drawChar@j,w,c
 12514  001838  0234               	mulwf	drawChar@size,c
 12515  00183A  50F3               	movf	prodl,w,c
 12516  00183C  242E               	addwf	drawChar@y,w,c
 12517  00183E  6E23               	movwf	fillRect@y,c
 12518  001840  C034  F024         	movff	drawChar@size,fillRect@w
 12519  001844  C034  F025         	movff	drawChar@size,fillRect@h
 12520  001848  C032  F026         	movff	drawChar@bg,fillRect@color
 12521  00184C  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 12522  001850  5038               	movf	drawChar@i,w,c
 12523  001852  0234               	mulwf	drawChar@size,c
 12524  001854  50F3               	movf	prodl,w,c
 12525  001856  2436               	addwf	drawChar@x,w,c
 12526  001858  ECE6  F019         	call	_fillRect
 12527  00185C  D000               	goto	l7758
 12528  00185E                     l7758:
 12529  00185E  2A37               	incf	drawChar@j,f,c
 12530  001860  90D8               	bcf	status,0,c
 12531  001862  3235               	rrcf	drawChar@line,f,c
 12532  001864  D7A9               	goto	l7740
 12533  001866                     l7764:
 12534  001866  2A38               	incf	drawChar@i,f,c
 12535  001868  D76F               	goto	l7728
 12536  00186A                     l746:
 12537  00186A  0012               	return		;funcret
 12538  00186C                     __end_of_drawChar:
 12539                           	opt stack 0
 12540                           tblptru	equ	0xFF8
 12541                           tblptrh	equ	0xFF7
 12542                           tblptrl	equ	0xFF6
 12543                           tablat	equ	0xFF5
 12544                           prodh	equ	0xFF4
 12545                           prodl	equ	0xFF3
 12546                           intcon	equ	0xFF2
 12547                           intcon2	equ	0xFF1
 12548                           postinc0	equ	0xFEE
 12549                           wreg	equ	0xFE8
 12550                           postdec1	equ	0xFE5
 12551                           plusw1	equ	0xFE3
 12552                           fsr1l	equ	0xFE1
 12553                           indf2	equ	0xFDF
 12554                           postinc2	equ	0xFDE
 12555                           plusw2	equ	0xFDB
 12556                           fsr2h	equ	0xFDA
 12557                           fsr2l	equ	0xFD9
 12558                           status	equ	0xFD8
 12559                           
 12560 ;; *************** function _fillRect *****************
 12561 ;; Defined at:
 12562 ;;		line 437 in file "ST7735_TFT.c"
 12563 ;; Parameters:    Size  Location     Type
 12564 ;;  x               1    wreg     unsigned char 
 12565 ;;  y               1   34[COMRAM] unsigned char 
 12566 ;;  w               1   35[COMRAM] unsigned char 
 12567 ;;  h               1   36[COMRAM] unsigned char 
 12568 ;;  color           2   37[COMRAM] unsigned int 
 12569 ;; Auto vars:     Size  Location     Type
 12570 ;;  x               1   42[COMRAM] unsigned char 
 12571 ;;  i               2   43[COMRAM] int 
 12572 ;; Return value:  Size  Location     Type
 12573 ;;		None               void
 12574 ;; Registers used:
 12575 ;;		wreg, status,2, status,0, cstack
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12581 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12583 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12584 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12585 ;;Total ram usage:       11 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; Hardware stack levels required when called:    7
 12588 ;; This function calls:
 12589 ;;		_drawFastVLine
 12590 ;; This function is called by:
 12591 ;;		_drawChar
 12592 ;;		_Initialize_Setup_Alarm_Time_Screen
 12593 ;;		_Initialize_Setup_Time_Screen
 12594 ;;		_Update_Setup_Screen_Cursor_Forward
 12595 ;;		_Update_Setup_Screen_Cursor_Backward
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           	psect	text67
 12600  0033CC                     __ptext67:
 12601                           	opt stack 0
 12602  0033CC                     _fillRect:
 12603                           	opt stack 20
 12604                           
 12605                           ;incstack = 0
 12606                           ;fillRect@x stored from wreg
 12607  0033CC  6E2B               	movwf	fillRect@x,c
 12608                           
 12609                           ;ST7735_TFT.c: 439: signed int i;
 12610                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 12611  0033CE  C02B  F02C         	movff	fillRect@x,fillRect@i
 12612  0033D2  6A2D               	clrf	fillRect@i+1,c
 12613  0033D4  D00E               	goto	l7620
 12614  0033D6                     l7616:
 12615                           
 12616                           ;ST7735_TFT.c: 442: {
 12617                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 12618  0033D6  C023  F018         	movff	fillRect@y,drawFastVLine@y
 12619  0033DA  C025  F019         	movff	fillRect@h,drawFastVLine@h
 12620  0033DE  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 12621  0033E2  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 12622  0033E6  502C               	movf	fillRect@i,w,c
 12623  0033E8  EC90  F015         	call	_drawFastVLine
 12624  0033EC  4A2C               	infsnz	fillRect@i,f,c
 12625  0033EE  2A2D               	incf	fillRect@i+1,f,c
 12626  0033F0  D000               	goto	l7620
 12627  0033F2                     l7620:
 12628  0033F2  5024               	movf	fillRect@w,w,c
 12629  0033F4  C02B  F028         	movff	fillRect@x,??_fillRect
 12630  0033F8  6A29               	clrf	(??_fillRect+1)& (0+255),c
 12631  0033FA  2628               	addwf	??_fillRect,f,c
 12632  0033FC  0E00               	movlw	0
 12633  0033FE  2229               	addwfc	??_fillRect+1,f,c
 12634  003400  5028               	movf	??_fillRect,w,c
 12635  003402  5C2C               	subwf	fillRect@i,w,c
 12636  003404  502D               	movf	fillRect@i+1,w,c
 12637  003406  0A80               	xorlw	128
 12638  003408  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 12639  00340A  5029               	movf	??_fillRect+1,w,c
 12640  00340C  0A80               	xorlw	128
 12641  00340E  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 12642  003410  A0D8               	btfss	status,0,c
 12643  003412  D7E1               	goto	l7616
 12644  003414  0012               	return		;funcret
 12645  003416                     __end_of_fillRect:
 12646                           	opt stack 0
 12647                           tblptru	equ	0xFF8
 12648                           tblptrh	equ	0xFF7
 12649                           tblptrl	equ	0xFF6
 12650                           tablat	equ	0xFF5
 12651                           prodh	equ	0xFF4
 12652                           prodl	equ	0xFF3
 12653                           intcon	equ	0xFF2
 12654                           intcon2	equ	0xFF1
 12655                           postinc0	equ	0xFEE
 12656                           wreg	equ	0xFE8
 12657                           postdec1	equ	0xFE5
 12658                           plusw1	equ	0xFE3
 12659                           fsr1l	equ	0xFE1
 12660                           indf2	equ	0xFDF
 12661                           postinc2	equ	0xFDE
 12662                           plusw2	equ	0xFDB
 12663                           fsr2h	equ	0xFDA
 12664                           fsr2l	equ	0xFD9
 12665                           status	equ	0xFD8
 12666                           
 12667 ;; *************** function _drawFastVLine *****************
 12668 ;; Defined at:
 12669 ;;		line 416 in file "ST7735_TFT.c"
 12670 ;; Parameters:    Size  Location     Type
 12671 ;;  x               1    wreg     unsigned char 
 12672 ;;  y               1   23[COMRAM] unsigned char 
 12673 ;;  h               1   24[COMRAM] unsigned char 
 12674 ;;  color           2   25[COMRAM] unsigned int 
 12675 ;; Auto vars:     Size  Location     Type
 12676 ;;  x               1   33[COMRAM] unsigned char 
 12677 ;;  lo              1   32[COMRAM] unsigned char 
 12678 ;;  hi              1   31[COMRAM] unsigned char 
 12679 ;; Return value:  Size  Location     Type
 12680 ;;		None               void
 12681 ;; Registers used:
 12682 ;;		wreg, status,2, status,0, cstack
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12689 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12690 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12691 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12692 ;;Total ram usage:       11 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; Hardware stack levels required when called:    6
 12695 ;; This function calls:
 12696 ;;		_setAddrWindow
 12697 ;;		_spiwrite
 12698 ;; This function is called by:
 12699 ;;		_fillRect
 12700 ;;		_fillCircleHelper
 12701 ;;		_fillCircle
 12702 ;;		_drawRect
 12703 ;; This function uses a non-reentrant model
 12704 ;;
 12705                           
 12706                           	psect	text68
 12707  002B20                     __ptext68:
 12708                           	opt stack 0
 12709  002B20                     _drawFastVLine:
 12710                           	opt stack 20
 12711                           
 12712                           ;incstack = 0
 12713                           ;drawFastVLine@x stored from wreg
 12714  002B20  6E22               	movwf	drawFastVLine@x,c
 12715                           
 12716                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 12717                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 12718  002B22  0E80               	movlw	128
 12719  002B24  6022               	cpfslt	drawFastVLine@x,c
 12720  002B26  D03F               	goto	l730
 12721  002B28  0E9F               	movlw	159
 12722  002B2A  6418               	cpfsgt	drawFastVLine@y,c
 12723  002B2C  D001               	goto	l7566
 12724                           
 12725                           ;ST7735_TFT.c: 420: return;
 12726  002B2E  D03B               	goto	l730
 12727  002B30                     l7566:
 12728                           
 12729                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 12730  002B30  0EFF               	movlw	255
 12731  002B32  6E1C               	movwf	??_drawFastVLine& (0+255),c
 12732  002B34  0EFF               	movlw	255
 12733  002B36  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 12734  002B38  5019               	movf	drawFastVLine@h,w,c
 12735  002B3A  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 12736  002B3E  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 12737  002B40  261E               	addwf	??_drawFastVLine+2,f,c
 12738  002B42  0E00               	movlw	0
 12739  002B44  221F               	addwfc	??_drawFastVLine+3,f,c
 12740  002B46  501C               	movf	??_drawFastVLine,w,c
 12741  002B48  261E               	addwf	??_drawFastVLine+2,f,c
 12742  002B4A  501D               	movf	??_drawFastVLine+1,w,c
 12743  002B4C  221F               	addwfc	??_drawFastVLine+3,f,c
 12744  002B4E  BE1F               	btfsc	??_drawFastVLine+3,7,c
 12745  002B50  D00B               	goto	l7570
 12746  002B52  501F               	movf	??_drawFastVLine+3,w,c
 12747  002B54  E104               	bnz	u5040
 12748  002B56  0EA0               	movlw	160
 12749  002B58  5C1E               	subwf	??_drawFastVLine+2,w,c
 12750  002B5A  A0D8               	btfss	status,0,c
 12751  002B5C  D005               	goto	l7570
 12752  002B5E                     u5040:
 12753                           
 12754                           ;ST7735_TFT.c: 422: h = 160 - y;
 12755  002B5E  5018               	movf	drawFastVLine@y,w,c
 12756  002B60  0800               	sublw	0
 12757  002B62  0FA0               	addlw	160
 12758  002B64  6E19               	movwf	drawFastVLine@h,c
 12759  002B66  D000               	goto	l7570
 12760  002B68                     l7570:
 12761                           
 12762                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 12763  002B68  501B               	movf	drawFastVLine@color+1,w,c
 12764  002B6A  6E20               	movwf	drawFastVLine@hi,c
 12765  002B6C  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 12766                           
 12767                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 12768  002B70  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 12769  002B74  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 12770  002B78  5018               	movf	drawFastVLine@y,w,c
 12771  002B7A  2419               	addwf	drawFastVLine@h,w,c
 12772  002B7C  6E1C               	movwf	??_drawFastVLine& (0+255),c
 12773  002B7E  041C               	decf	??_drawFastVLine,w,c
 12774  002B80  6E16               	movwf	setAddrWindow@y1,c
 12775  002B82  5022               	movf	drawFastVLine@x,w,c
 12776  002B84  EC4E  F019         	call	_setAddrWindow
 12777                           
 12778                           ;ST7735_TFT.c: 425: PORTBbits.RB5 = 1;
 12779  002B88  8A81               	bsf	3969,5,c	;volatile
 12780                           
 12781                           ;ST7735_TFT.c: 426: PORTBbits.RB6 = 0;
 12782  002B8A  9C81               	bcf	3969,6,c	;volatile
 12783                           
 12784                           ;ST7735_TFT.c: 428: while (h--) {
 12785  002B8C  D007               	goto	l7582
 12786  002B8E                     l7580:
 12787                           
 12788                           ;ST7735_TFT.c: 429: spiwrite(hi);
 12789  002B8E  5020               	movf	drawFastVLine@hi,w,c
 12790  002B90  ECBA  F01C         	call	_spiwrite
 12791                           
 12792                           ;ST7735_TFT.c: 430: spiwrite(lo);
 12793  002B94  5021               	movf	drawFastVLine@lo,w,c
 12794  002B96  ECBA  F01C         	call	_spiwrite
 12795  002B9A  D000               	goto	l7582
 12796  002B9C                     l7582:
 12797  002B9C  0619               	decf	drawFastVLine@h,f,c
 12798  002B9E  2819               	incf	drawFastVLine@h,w,c
 12799  002BA0  A4D8               	btfss	status,2,c
 12800  002BA2  D7F5               	goto	l7580
 12801                           
 12802                           ;ST7735_TFT.c: 431: }
 12803                           ;ST7735_TFT.c: 432: PORTBbits.RB6 = 1;
 12804  002BA4  8C81               	bsf	3969,6,c	;volatile
 12805  002BA6                     l730:
 12806  002BA6  0012               	return		;funcret
 12807  002BA8                     __end_of_drawFastVLine:
 12808                           	opt stack 0
 12809                           tblptru	equ	0xFF8
 12810                           tblptrh	equ	0xFF7
 12811                           tblptrl	equ	0xFF6
 12812                           tablat	equ	0xFF5
 12813                           prodh	equ	0xFF4
 12814                           prodl	equ	0xFF3
 12815                           intcon	equ	0xFF2
 12816                           intcon2	equ	0xFF1
 12817                           postinc0	equ	0xFEE
 12818                           wreg	equ	0xFE8
 12819                           postdec1	equ	0xFE5
 12820                           plusw1	equ	0xFE3
 12821                           fsr1l	equ	0xFE1
 12822                           indf2	equ	0xFDF
 12823                           postinc2	equ	0xFDE
 12824                           plusw2	equ	0xFDB
 12825                           fsr2h	equ	0xFDA
 12826                           fsr2l	equ	0xFD9
 12827                           status	equ	0xFD8
 12828                           
 12829 ;; *************** function _drawPixel *****************
 12830 ;; Defined at:
 12831 ;;		line 407 in file "ST7735_TFT.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  x               1    wreg     unsigned char 
 12834 ;;  y               1   23[COMRAM] unsigned char 
 12835 ;;  color           2   24[COMRAM] unsigned int 
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;  x               1   26[COMRAM] unsigned char 
 12838 ;; Return value:  Size  Location     Type
 12839 ;;		None               void
 12840 ;; Registers used:
 12841 ;;		wreg, status,2, status,0, cstack
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : 0/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12847 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12851 ;;Total ram usage:        4 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; Hardware stack levels required when called:    6
 12854 ;; This function calls:
 12855 ;;		_setAddrWindow
 12856 ;;		_write_data
 12857 ;; This function is called by:
 12858 ;;		_drawChar
 12859 ;;		_drawCircle
 12860 ;;		_drawCircleHelper
 12861 ;; This function uses a non-reentrant model
 12862 ;;
 12863                           
 12864                           	psect	text69
 12865  003666                     __ptext69:
 12866                           	opt stack 0
 12867  003666                     _drawPixel:
 12868                           	opt stack 21
 12869                           
 12870                           ;incstack = 0
 12871                           ;drawPixel@x stored from wreg
 12872  003666  6E1B               	movwf	drawPixel@x,c
 12873                           
 12874                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 12875  003668  0E80               	movlw	128
 12876  00366A  601B               	cpfslt	drawPixel@x,c
 12877  00366C  D013               	goto	l724
 12878  00366E  0E9F               	movlw	159
 12879  003670  6418               	cpfsgt	drawPixel@y,c
 12880  003672  D001               	goto	l7608
 12881                           
 12882                           ;ST7735_TFT.c: 410: return;
 12883  003674  D00F               	goto	l724
 12884  003676                     l7608:
 12885                           
 12886                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 12887  003676  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 12888  00367A  281B               	incf	drawPixel@x,w,c
 12889  00367C  6E15               	movwf	setAddrWindow@x1,c
 12890  00367E  2818               	incf	drawPixel@y,w,c
 12891  003680  6E16               	movwf	setAddrWindow@y1,c
 12892  003682  501B               	movf	drawPixel@x,w,c
 12893  003684  EC4E  F019         	call	_setAddrWindow
 12894                           
 12895                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 12896  003688  501A               	movf	drawPixel@color+1,w,c
 12897  00368A  EC1C  F01D         	call	_write_data
 12898                           
 12899                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 12900  00368E  5019               	movf	drawPixel@color,w,c
 12901  003690  EC1C  F01D         	call	_write_data
 12902  003694                     l724:
 12903  003694  0012               	return		;funcret
 12904  003696                     __end_of_drawPixel:
 12905                           	opt stack 0
 12906                           tblptru	equ	0xFF8
 12907                           tblptrh	equ	0xFF7
 12908                           tblptrl	equ	0xFF6
 12909                           tablat	equ	0xFF5
 12910                           prodh	equ	0xFF4
 12911                           prodl	equ	0xFF3
 12912                           intcon	equ	0xFF2
 12913                           intcon2	equ	0xFF1
 12914                           postinc0	equ	0xFEE
 12915                           wreg	equ	0xFE8
 12916                           postdec1	equ	0xFE5
 12917                           plusw1	equ	0xFE3
 12918                           fsr1l	equ	0xFE1
 12919                           indf2	equ	0xFDF
 12920                           postinc2	equ	0xFDE
 12921                           plusw2	equ	0xFDB
 12922                           fsr2h	equ	0xFDA
 12923                           fsr2l	equ	0xFD9
 12924                           status	equ	0xFD8
 12925                           
 12926 ;; *************** function _setAddrWindow *****************
 12927 ;; Defined at:
 12928 ;;		line 392 in file "ST7735_TFT.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;  x0              1    wreg     unsigned char 
 12931 ;;  y0              1   19[COMRAM] unsigned char 
 12932 ;;  x1              1   20[COMRAM] unsigned char 
 12933 ;;  y1              1   21[COMRAM] unsigned char 
 12934 ;; Auto vars:     Size  Location     Type
 12935 ;;  x0              1   22[COMRAM] unsigned char 
 12936 ;; Return value:  Size  Location     Type
 12937 ;;		None               void
 12938 ;; Registers used:
 12939 ;;		wreg, status,2, status,0, cstack
 12940 ;; Tracked objects:
 12941 ;;		On entry : 0/0
 12942 ;;		On exit  : 0/0
 12943 ;;		Unchanged: 0/0
 12944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12945 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12948 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12949 ;;Total ram usage:        4 bytes
 12950 ;; Hardware stack levels used:    1
 12951 ;; Hardware stack levels required when called:    5
 12952 ;; This function calls:
 12953 ;;		_write_command
 12954 ;;		_write_data
 12955 ;; This function is called by:
 12956 ;;		_drawPixel
 12957 ;;		_drawFastVLine
 12958 ;;		_fillRectangle
 12959 ;;		_drawFastHLine
 12960 ;; This function uses a non-reentrant model
 12961 ;;
 12962                           
 12963                           	psect	text70
 12964  00329C                     __ptext70:
 12965                           	opt stack 0
 12966  00329C                     _setAddrWindow:
 12967                           	opt stack 20
 12968                           
 12969                           ;incstack = 0
 12970                           ;setAddrWindow@x0 stored from wreg
 12971  00329C  6E17               	movwf	setAddrWindow@x0,c
 12972                           
 12973                           ;ST7735_TFT.c: 394: write_command(0x2A);
 12974  00329E  0E2A               	movlw	42
 12975  0032A0  EC24  F01D         	call	_write_command
 12976                           
 12977                           ;ST7735_TFT.c: 395: write_data(0);
 12978  0032A4  0E00               	movlw	0
 12979  0032A6  EC1C  F01D         	call	_write_data
 12980                           
 12981                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 12982  0032AA  5017               	movf	setAddrWindow@x0,w,c
 12983  0032AC  245B               	addwf	_colstart,w,c
 12984  0032AE  EC1C  F01D         	call	_write_data
 12985                           
 12986                           ;ST7735_TFT.c: 397: write_data(0);
 12987  0032B2  0E00               	movlw	0
 12988  0032B4  EC1C  F01D         	call	_write_data
 12989                           
 12990                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 12991  0032B8  5015               	movf	setAddrWindow@x1,w,c
 12992  0032BA  245B               	addwf	_colstart,w,c
 12993  0032BC  EC1C  F01D         	call	_write_data
 12994                           
 12995                           ;ST7735_TFT.c: 399: write_command(0x2B);
 12996  0032C0  0E2B               	movlw	43
 12997  0032C2  EC24  F01D         	call	_write_command
 12998                           
 12999                           ;ST7735_TFT.c: 400: write_data(0);
 13000  0032C6  0E00               	movlw	0
 13001  0032C8  EC1C  F01D         	call	_write_data
 13002                           
 13003                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 13004  0032CC  5014               	movf	setAddrWindow@y0,w,c
 13005  0032CE  2462               	addwf	_rowstart,w,c
 13006  0032D0  EC1C  F01D         	call	_write_data
 13007                           
 13008                           ;ST7735_TFT.c: 402: write_data(0);
 13009  0032D4  0E00               	movlw	0
 13010  0032D6  EC1C  F01D         	call	_write_data
 13011                           
 13012                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 13013  0032DA  5016               	movf	setAddrWindow@y1,w,c
 13014  0032DC  2462               	addwf	_rowstart,w,c
 13015  0032DE  EC1C  F01D         	call	_write_data
 13016                           
 13017                           ;ST7735_TFT.c: 404: write_command(0x2C);
 13018  0032E2  0E2C               	movlw	44
 13019  0032E4  EC24  F01D         	call	_write_command
 13020  0032E8  0012               	return		;funcret
 13021  0032EA                     __end_of_setAddrWindow:
 13022                           	opt stack 0
 13023                           tblptru	equ	0xFF8
 13024                           tblptrh	equ	0xFF7
 13025                           tblptrl	equ	0xFF6
 13026                           tablat	equ	0xFF5
 13027                           prodh	equ	0xFF4
 13028                           prodl	equ	0xFF3
 13029                           intcon	equ	0xFF2
 13030                           intcon2	equ	0xFF1
 13031                           postinc0	equ	0xFEE
 13032                           wreg	equ	0xFE8
 13033                           postdec1	equ	0xFE5
 13034                           plusw1	equ	0xFE3
 13035                           fsr1l	equ	0xFE1
 13036                           indf2	equ	0xFDF
 13037                           postinc2	equ	0xFDE
 13038                           plusw2	equ	0xFDB
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043 ;; *************** function _write_data *****************
 13044 ;; Defined at:
 13045 ;;		line 209 in file "ST7735_TFT.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  data_           1    wreg     unsigned char 
 13048 ;; Auto vars:     Size  Location     Type
 13049 ;;  data_           1   18[COMRAM] unsigned char 
 13050 ;; Return value:  Size  Location     Type
 13051 ;;		None               void
 13052 ;; Registers used:
 13053 ;;		wreg, status,2, cstack
 13054 ;; Tracked objects:
 13055 ;;		On entry : 0/0
 13056 ;;		On exit  : 0/0
 13057 ;;		Unchanged: 0/0
 13058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;Total ram usage:        1 bytes
 13064 ;; Hardware stack levels used:    1
 13065 ;; Hardware stack levels required when called:    4
 13066 ;; This function calls:
 13067 ;;		_spiwrite
 13068 ;; This function is called by:
 13069 ;;		_Rcmd1
 13070 ;;		_Rcmd2red
 13071 ;;		_Rcmd3
 13072 ;;		_setAddrWindow
 13073 ;;		_drawPixel
 13074 ;;		_TFT_GreenTab_Initialize
 13075 ;;		_Bcmd
 13076 ;;		_setScrollDefinition
 13077 ;;		_Rcmd2green
 13078 ;;		_VerticalScroll
 13079 ;; This function uses a non-reentrant model
 13080 ;;
 13081                           
 13082                           	psect	text71
 13083  003A38                     __ptext71:
 13084                           	opt stack 0
 13085  003A38                     _write_data:
 13086                           	opt stack 20
 13087                           
 13088                           ;incstack = 0
 13089                           ;write_data@data_ stored from wreg
 13090  003A38  6E13               	movwf	write_data@data_,c
 13091                           
 13092                           ;ST7735_TFT.c: 211: PORTBbits.RB6 = 0;
 13093  003A3A  9C81               	bcf	3969,6,c	;volatile
 13094                           
 13095                           ;ST7735_TFT.c: 212: PORTBbits.RB5 = 1;
 13096  003A3C  8A81               	bsf	3969,5,c	;volatile
 13097                           
 13098                           ;ST7735_TFT.c: 213: spiwrite(data_);
 13099  003A3E  5013               	movf	write_data@data_,w,c
 13100  003A40  ECBA  F01C         	call	_spiwrite
 13101                           
 13102                           ;ST7735_TFT.c: 214: PORTBbits.RB6 = 1;
 13103  003A44  8C81               	bsf	3969,6,c	;volatile
 13104  003A46  0012               	return		;funcret
 13105  003A48                     __end_of_write_data:
 13106                           	opt stack 0
 13107                           tblptru	equ	0xFF8
 13108                           tblptrh	equ	0xFF7
 13109                           tblptrl	equ	0xFF6
 13110                           tablat	equ	0xFF5
 13111                           prodh	equ	0xFF4
 13112                           prodl	equ	0xFF3
 13113                           intcon	equ	0xFF2
 13114                           intcon2	equ	0xFF1
 13115                           postinc0	equ	0xFEE
 13116                           wreg	equ	0xFE8
 13117                           postdec1	equ	0xFE5
 13118                           plusw1	equ	0xFE3
 13119                           fsr1l	equ	0xFE1
 13120                           indf2	equ	0xFDF
 13121                           postinc2	equ	0xFDE
 13122                           plusw2	equ	0xFDB
 13123                           fsr2h	equ	0xFDA
 13124                           fsr2l	equ	0xFD9
 13125                           status	equ	0xFD8
 13126                           
 13127 ;; *************** function _write_command *****************
 13128 ;; Defined at:
 13129 ;;		line 198 in file "ST7735_TFT.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;  cmd_            1    wreg     unsigned char 
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;  cmd_            1   18[COMRAM] unsigned char 
 13134 ;; Return value:  Size  Location     Type
 13135 ;;		None               void
 13136 ;; Registers used:
 13137 ;;		wreg, status,2, cstack
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;Total ram usage:        1 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    4
 13150 ;; This function calls:
 13151 ;;		_spiwrite
 13152 ;; This function is called by:
 13153 ;;		_Rcmd1
 13154 ;;		_Rcmd2red
 13155 ;;		_Rcmd3
 13156 ;;		_setAddrWindow
 13157 ;;		_TFT_GreenTab_Initialize
 13158 ;;		_Bcmd
 13159 ;;		_setScrollDefinition
 13160 ;;		_Rcmd2green
 13161 ;;		_VerticalScroll
 13162 ;; This function uses a non-reentrant model
 13163 ;;
 13164                           
 13165                           	psect	text72
 13166  003A48                     __ptext72:
 13167                           	opt stack 0
 13168  003A48                     _write_command:
 13169                           	opt stack 20
 13170                           
 13171                           ;incstack = 0
 13172                           ;write_command@cmd_ stored from wreg
 13173  003A48  6E13               	movwf	write_command@cmd_,c
 13174                           
 13175                           ;ST7735_TFT.c: 200: PORTBbits.RB6 = 0;
 13176  003A4A  9C81               	bcf	3969,6,c	;volatile
 13177                           
 13178                           ;ST7735_TFT.c: 202: PORTBbits.RB5 = 0;
 13179  003A4C  9A81               	bcf	3969,5,c	;volatile
 13180                           
 13181                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 13182  003A4E  5013               	movf	write_command@cmd_,w,c
 13183  003A50  ECBA  F01C         	call	_spiwrite
 13184                           
 13185                           ;ST7735_TFT.c: 205: PORTBbits.RB6 = 1;
 13186  003A54  8C81               	bsf	3969,6,c	;volatile
 13187  003A56  0012               	return		;funcret
 13188  003A58                     __end_of_write_command:
 13189                           	opt stack 0
 13190                           tblptru	equ	0xFF8
 13191                           tblptrh	equ	0xFF7
 13192                           tblptrl	equ	0xFF6
 13193                           tablat	equ	0xFF5
 13194                           prodh	equ	0xFF4
 13195                           prodl	equ	0xFF3
 13196                           intcon	equ	0xFF2
 13197                           intcon2	equ	0xFF1
 13198                           postinc0	equ	0xFEE
 13199                           wreg	equ	0xFE8
 13200                           postdec1	equ	0xFE5
 13201                           plusw1	equ	0xFE3
 13202                           fsr1l	equ	0xFE1
 13203                           indf2	equ	0xFDF
 13204                           postinc2	equ	0xFDE
 13205                           plusw2	equ	0xFDB
 13206                           fsr2h	equ	0xFDA
 13207                           fsr2l	equ	0xFD9
 13208                           status	equ	0xFD8
 13209                           
 13210 ;; *************** function _spiwrite *****************
 13211 ;; Defined at:
 13212 ;;		line 189 in file "ST7735_TFT.c"
 13213 ;; Parameters:    Size  Location     Type
 13214 ;;  spidata         1    wreg     unsigned char 
 13215 ;; Auto vars:     Size  Location     Type
 13216 ;;  spidata         1   17[COMRAM] unsigned char 
 13217 ;;  x               1   16[COMRAM] unsigned char 
 13218 ;; Return value:  Size  Location     Type
 13219 ;;		None               void
 13220 ;; Registers used:
 13221 ;;		wreg
 13222 ;; Tracked objects:
 13223 ;;		On entry : 0/0
 13224 ;;		On exit  : 0/0
 13225 ;;		Unchanged: 0/0
 13226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13230 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13231 ;;Total ram usage:        2 bytes
 13232 ;; Hardware stack levels used:    1
 13233 ;; Hardware stack levels required when called:    3
 13234 ;; This function calls:
 13235 ;;		Nothing
 13236 ;; This function is called by:
 13237 ;;		_write_command
 13238 ;;		_write_data
 13239 ;;		_drawFastVLine
 13240 ;;		_fillRectangle
 13241 ;;		_drawFastHLine
 13242 ;; This function uses a non-reentrant model
 13243 ;;
 13244                           
 13245                           	psect	text73
 13246  003974                     __ptext73:
 13247                           	opt stack 0
 13248  003974                     _spiwrite:
 13249                           	opt stack 22
 13250                           
 13251                           ;incstack = 0
 13252                           ;spiwrite@spidata stored from wreg
 13253  003974  6E12               	movwf	spiwrite@spidata,c
 13254                           
 13255                           ;ST7735_TFT.c: 191: char x;
 13256                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 13257  003976  969E               	bcf	3998,3,c	;volatile
 13258                           
 13259                           ;ST7735_TFT.c: 193: x = SSPBUF;
 13260  003978  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 13261                           
 13262                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 13263  00397C  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 13264                           
 13265                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 13266  003980  D000               	goto	l680
 13267  003982                     l680:
 13268  003982  A0C7               	btfss	4039,0,c	;volatile
 13269  003984  D7FE               	goto	l680
 13270  003986  0012               	return		;funcret
 13271  003988                     __end_of_spiwrite:
 13272                           	opt stack 0
 13273                           tblptru	equ	0xFF8
 13274                           tblptrh	equ	0xFF7
 13275                           tblptrl	equ	0xFF6
 13276                           tablat	equ	0xFF5
 13277                           prodh	equ	0xFF4
 13278                           prodl	equ	0xFF3
 13279                           intcon	equ	0xFF2
 13280                           intcon2	equ	0xFF1
 13281                           postinc0	equ	0xFEE
 13282                           wreg	equ	0xFE8
 13283                           postdec1	equ	0xFE5
 13284                           plusw1	equ	0xFE3
 13285                           fsr1l	equ	0xFE1
 13286                           indf2	equ	0xFDF
 13287                           postinc2	equ	0xFDE
 13288                           plusw2	equ	0xFDB
 13289                           fsr2h	equ	0xFDA
 13290                           fsr2l	equ	0xFD9
 13291                           status	equ	0xFD8
 13292                           
 13293 ;; *************** function ___awmod *****************
 13294 ;; Defined at:
 13295 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 13296 ;; Parameters:    Size  Location     Type
 13297 ;;  dividend        2   39[COMRAM] int 
 13298 ;;  divisor         2   41[COMRAM] int 
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;  sign            1   44[COMRAM] unsigned char 
 13301 ;;  counter         1   43[COMRAM] unsigned char 
 13302 ;; Return value:  Size  Location     Type
 13303 ;;                  2   39[COMRAM] int 
 13304 ;; Registers used:
 13305 ;;		wreg, status,2, status,0
 13306 ;; Tracked objects:
 13307 ;;		On entry : 0/0
 13308 ;;		On exit  : 0/0
 13309 ;;		Unchanged: 0/0
 13310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;Total ram usage:        6 bytes
 13316 ;; Hardware stack levels used:    1
 13317 ;; Hardware stack levels required when called:    3
 13318 ;; This function calls:
 13319 ;;		Nothing
 13320 ;; This function is called by:
 13321 ;;		_Update_Screen
 13322 ;;		_Update_Setup_Alarm_Time_Screen
 13323 ;;		_Update_Setup_Heater_Screen
 13324 ;;		_Update_Setup_Time_Screen
 13325 ;;		_dec_2_bcd
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           	psect	text74
 13330  002C2E                     __ptext74:
 13331                           	opt stack 0
 13332  002C2E                     ___awmod:
 13333                           	opt stack 26
 13334                           
 13335                           ;incstack = 0
 13336  002C2E  0E00               	movlw	0
 13337  002C30  6E2D               	movwf	___awmod@sign,c
 13338  002C32  AE29               	btfss	___awmod@dividend+1,7,c
 13339  002C34  D007               	goto	l7906
 13340  002C36  6C28               	negf	___awmod@dividend,c
 13341  002C38  1E29               	comf	___awmod@dividend+1,f,c
 13342  002C3A  B0D8               	btfsc	status,0,c
 13343  002C3C  2A29               	incf	___awmod@dividend+1,f,c
 13344  002C3E  0E01               	movlw	1
 13345  002C40  6E2D               	movwf	___awmod@sign,c
 13346  002C42  D000               	goto	l7906
 13347  002C44                     l7906:
 13348  002C44  AE2B               	btfss	___awmod@divisor+1,7,c
 13349  002C46  D005               	goto	l7910
 13350  002C48  6C2A               	negf	___awmod@divisor,c
 13351  002C4A  1E2B               	comf	___awmod@divisor+1,f,c
 13352  002C4C  B0D8               	btfsc	status,0,c
 13353  002C4E  2A2B               	incf	___awmod@divisor+1,f,c
 13354  002C50  D000               	goto	l7910
 13355  002C52                     l7910:
 13356  002C52  502A               	movf	___awmod@divisor,w,c
 13357  002C54  102B               	iorwf	___awmod@divisor+1,w,c
 13358  002C56  B4D8               	btfsc	status,2,c
 13359  002C58  D01D               	goto	l7926
 13360  002C5A  0E01               	movlw	1
 13361  002C5C  6E2C               	movwf	___awmod@counter,c
 13362  002C5E  D005               	goto	l7916
 13363  002C60                     l7914:
 13364  002C60  90D8               	bcf	status,0,c
 13365  002C62  362A               	rlcf	___awmod@divisor,f,c
 13366  002C64  362B               	rlcf	___awmod@divisor+1,f,c
 13367  002C66  2A2C               	incf	___awmod@counter,f,c
 13368  002C68  D000               	goto	l7916
 13369  002C6A                     l7916:
 13370  002C6A  BE2B               	btfsc	___awmod@divisor+1,7,c
 13371  002C6C  D002               	goto	l7918
 13372  002C6E  D7F8               	goto	l7914
 13373  002C70  D000               	goto	l7918
 13374  002C72                     l7918:
 13375  002C72  502A               	movf	___awmod@divisor,w,c
 13376  002C74  5C28               	subwf	___awmod@dividend,w,c
 13377  002C76  502B               	movf	___awmod@divisor+1,w,c
 13378  002C78  5829               	subwfb	___awmod@dividend+1,w,c
 13379  002C7A  A0D8               	btfss	status,0,c
 13380  002C7C  D005               	goto	l7922
 13381  002C7E  502A               	movf	___awmod@divisor,w,c
 13382  002C80  5E28               	subwf	___awmod@dividend,f,c
 13383  002C82  502B               	movf	___awmod@divisor+1,w,c
 13384  002C84  5A29               	subwfb	___awmod@dividend+1,f,c
 13385  002C86  D000               	goto	l7922
 13386  002C88                     l7922:
 13387  002C88  90D8               	bcf	status,0,c
 13388  002C8A  322B               	rrcf	___awmod@divisor+1,f,c
 13389  002C8C  322A               	rrcf	___awmod@divisor,f,c
 13390  002C8E  2E2C               	decfsz	___awmod@counter,f,c
 13391  002C90  D7F0               	goto	l7918
 13392  002C92  D000               	goto	l7926
 13393  002C94                     l7926:
 13394  002C94  502D               	movf	___awmod@sign,w,c
 13395  002C96  B4D8               	btfsc	status,2,c
 13396  002C98  D005               	goto	l7930
 13397  002C9A  6C28               	negf	___awmod@dividend,c
 13398  002C9C  1E29               	comf	___awmod@dividend+1,f,c
 13399  002C9E  B0D8               	btfsc	status,0,c
 13400  002CA0  2A29               	incf	___awmod@dividend+1,f,c
 13401  002CA2  D000               	goto	l7930
 13402  002CA4                     l7930:
 13403  002CA4  C028  F028         	movff	___awmod@dividend,?___awmod
 13404  002CA8  C029  F029         	movff	___awmod@dividend+1,?___awmod+1
 13405  002CAC  D000               	goto	l1664
 13406  002CAE                     l1664:
 13407  002CAE  0012               	return		;funcret
 13408  002CB0                     __end_of___awmod:
 13409                           	opt stack 0
 13410                           tblptru	equ	0xFF8
 13411                           tblptrh	equ	0xFF7
 13412                           tblptrl	equ	0xFF6
 13413                           tablat	equ	0xFF5
 13414                           prodh	equ	0xFF4
 13415                           prodl	equ	0xFF3
 13416                           intcon	equ	0xFF2
 13417                           intcon2	equ	0xFF1
 13418                           postinc0	equ	0xFEE
 13419                           wreg	equ	0xFE8
 13420                           postdec1	equ	0xFE5
 13421                           plusw1	equ	0xFE3
 13422                           fsr1l	equ	0xFE1
 13423                           indf2	equ	0xFDF
 13424                           postinc2	equ	0xFDE
 13425                           plusw2	equ	0xFDB
 13426                           fsr2h	equ	0xFDA
 13427                           fsr2l	equ	0xFD9
 13428                           status	equ	0xFD8
 13429                           
 13430 ;; *************** function ___awdiv *****************
 13431 ;; Defined at:
 13432 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 13433 ;; Parameters:    Size  Location     Type
 13434 ;;  dividend        2   31[COMRAM] int 
 13435 ;;  divisor         2   33[COMRAM] int 
 13436 ;; Auto vars:     Size  Location     Type
 13437 ;;  quotient        2   37[COMRAM] int 
 13438 ;;  sign            1   36[COMRAM] unsigned char 
 13439 ;;  counter         1   35[COMRAM] unsigned char 
 13440 ;; Return value:  Size  Location     Type
 13441 ;;                  2   31[COMRAM] int 
 13442 ;; Registers used:
 13443 ;;		wreg, status,2, status,0
 13444 ;; Tracked objects:
 13445 ;;		On entry : 0/0
 13446 ;;		On exit  : 0/0
 13447 ;;		Unchanged: 0/0
 13448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13449 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13450 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13452 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13453 ;;Total ram usage:        8 bytes
 13454 ;; Hardware stack levels used:    1
 13455 ;; Hardware stack levels required when called:    3
 13456 ;; This function calls:
 13457 ;;		Nothing
 13458 ;; This function is called by:
 13459 ;;		_get_duty_cycle
 13460 ;;		_get_RPM
 13461 ;;		_Set_DC_RGB
 13462 ;;		_Set_RPM_RGB
 13463 ;;		_main
 13464 ;;		_Update_Screen
 13465 ;;		_Update_Setup_Alarm_Time_Screen
 13466 ;;		_Update_Setup_Heater_Screen
 13467 ;;		_Update_Setup_Time_Screen
 13468 ;;		_dec_2_bcd
 13469 ;; This function uses a non-reentrant model
 13470 ;;
 13471                           
 13472                           	psect	text75
 13473  00284C                     __ptext75:
 13474                           	opt stack 0
 13475  00284C                     ___awdiv:
 13476                           	opt stack 26
 13477                           
 13478                           ;incstack = 0
 13479  00284C  0E00               	movlw	0
 13480  00284E  6E25               	movwf	___awdiv@sign,c
 13481  002850  AE23               	btfss	___awdiv@divisor+1,7,c
 13482  002852  D007               	goto	l7862
 13483  002854  6C22               	negf	___awdiv@divisor,c
 13484  002856  1E23               	comf	___awdiv@divisor+1,f,c
 13485  002858  B0D8               	btfsc	status,0,c
 13486  00285A  2A23               	incf	___awdiv@divisor+1,f,c
 13487  00285C  0E01               	movlw	1
 13488  00285E  6E25               	movwf	___awdiv@sign,c
 13489  002860  D000               	goto	l7862
 13490  002862                     l7862:
 13491  002862  AE21               	btfss	___awdiv@dividend+1,7,c
 13492  002864  D007               	goto	l7868
 13493  002866  6C20               	negf	___awdiv@dividend,c
 13494  002868  1E21               	comf	___awdiv@dividend+1,f,c
 13495  00286A  B0D8               	btfsc	status,0,c
 13496  00286C  2A21               	incf	___awdiv@dividend+1,f,c
 13497  00286E  0E01               	movlw	1
 13498  002870  1A25               	xorwf	___awdiv@sign,f,c
 13499  002872  D000               	goto	l7868
 13500  002874                     l7868:
 13501  002874  0E00               	movlw	0
 13502  002876  6E27               	movwf	___awdiv@quotient+1,c
 13503  002878  0E00               	movlw	0
 13504  00287A  6E26               	movwf	___awdiv@quotient,c
 13505  00287C  5022               	movf	___awdiv@divisor,w,c
 13506  00287E  1023               	iorwf	___awdiv@divisor+1,w,c
 13507  002880  B4D8               	btfsc	status,2,c
 13508  002882  D021               	goto	l7890
 13509  002884  0E01               	movlw	1
 13510  002886  6E24               	movwf	___awdiv@counter,c
 13511  002888  D005               	goto	l7876
 13512  00288A                     l7874:
 13513  00288A  90D8               	bcf	status,0,c
 13514  00288C  3622               	rlcf	___awdiv@divisor,f,c
 13515  00288E  3623               	rlcf	___awdiv@divisor+1,f,c
 13516  002890  2A24               	incf	___awdiv@counter,f,c
 13517  002892  D000               	goto	l7876
 13518  002894                     l7876:
 13519  002894  BE23               	btfsc	___awdiv@divisor+1,7,c
 13520  002896  D002               	goto	l7878
 13521  002898  D7F8               	goto	l7874
 13522  00289A  D000               	goto	l7878
 13523  00289C                     l7878:
 13524  00289C  90D8               	bcf	status,0,c
 13525  00289E  3626               	rlcf	___awdiv@quotient,f,c
 13526  0028A0  3627               	rlcf	___awdiv@quotient+1,f,c
 13527  0028A2  5022               	movf	___awdiv@divisor,w,c
 13528  0028A4  5C20               	subwf	___awdiv@dividend,w,c
 13529  0028A6  5023               	movf	___awdiv@divisor+1,w,c
 13530  0028A8  5821               	subwfb	___awdiv@dividend+1,w,c
 13531  0028AA  A0D8               	btfss	status,0,c
 13532  0028AC  D006               	goto	l7886
 13533  0028AE  5022               	movf	___awdiv@divisor,w,c
 13534  0028B0  5E20               	subwf	___awdiv@dividend,f,c
 13535  0028B2  5023               	movf	___awdiv@divisor+1,w,c
 13536  0028B4  5A21               	subwfb	___awdiv@dividend+1,f,c
 13537  0028B6  8026               	bsf	___awdiv@quotient,0,c
 13538  0028B8  D000               	goto	l7886
 13539  0028BA                     l7886:
 13540  0028BA  90D8               	bcf	status,0,c
 13541  0028BC  3223               	rrcf	___awdiv@divisor+1,f,c
 13542  0028BE  3222               	rrcf	___awdiv@divisor,f,c
 13543  0028C0  2E24               	decfsz	___awdiv@counter,f,c
 13544  0028C2  D7EC               	goto	l7878
 13545  0028C4  D000               	goto	l7890
 13546  0028C6                     l7890:
 13547  0028C6  5025               	movf	___awdiv@sign,w,c
 13548  0028C8  B4D8               	btfsc	status,2,c
 13549  0028CA  D005               	goto	l7894
 13550  0028CC  6C26               	negf	___awdiv@quotient,c
 13551  0028CE  1E27               	comf	___awdiv@quotient+1,f,c
 13552  0028D0  B0D8               	btfsc	status,0,c
 13553  0028D2  2A27               	incf	___awdiv@quotient+1,f,c
 13554  0028D4  D000               	goto	l7894
 13555  0028D6                     l7894:
 13556  0028D6  C026  F020         	movff	___awdiv@quotient,?___awdiv
 13557  0028DA  C027  F021         	movff	___awdiv@quotient+1,?___awdiv+1
 13558  0028DE  D000               	goto	l1651
 13559  0028E0                     l1651:
 13560  0028E0  0012               	return		;funcret
 13561  0028E2                     __end_of___awdiv:
 13562                           	opt stack 0
 13563                           tblptru	equ	0xFF8
 13564                           tblptrh	equ	0xFF7
 13565                           tblptrl	equ	0xFF6
 13566                           tablat	equ	0xFF5
 13567                           prodh	equ	0xFF4
 13568                           prodl	equ	0xFF3
 13569                           intcon	equ	0xFF2
 13570                           intcon2	equ	0xFF1
 13571                           postinc0	equ	0xFEE
 13572                           wreg	equ	0xFE8
 13573                           postdec1	equ	0xFE5
 13574                           plusw1	equ	0xFE3
 13575                           fsr1l	equ	0xFE1
 13576                           indf2	equ	0xFDF
 13577                           postinc2	equ	0xFDE
 13578                           plusw2	equ	0xFDB
 13579                           fsr2h	equ	0xFDA
 13580                           fsr2l	equ	0xFD9
 13581                           status	equ	0xFD8
 13582                           
 13583 ;; *************** function _Do_Init *****************
 13584 ;; Defined at:
 13585 ;;		line 92 in file "Main.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;		None
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;		None
 13590 ;; Return value:  Size  Location     Type
 13591 ;;		None               void
 13592 ;; Registers used:
 13593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13594 ;; Tracked objects:
 13595 ;;		On entry : 0/0
 13596 ;;		On exit  : 0/0
 13597 ;;		Unchanged: 0/0
 13598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13603 ;;Total ram usage:        0 bytes
 13604 ;; Hardware stack levels used:    1
 13605 ;; Hardware stack levels required when called:    7
 13606 ;; This function calls:
 13607 ;;		_DS1621_Init
 13608 ;;		_I2C_Init
 13609 ;;		_Init_ADC
 13610 ;;		_Init_Interrupt
 13611 ;;		_Turn_Off_Fan
 13612 ;;		_init_UART
 13613 ;; This function is called by:
 13614 ;;		_main
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           	psect	text76
 13619  002F50                     __ptext76:
 13620                           	opt stack 0
 13621  002F50                     _Do_Init:
 13622                           	opt stack 23
 13623                           
 13624                           ;Main.c: 94: init_UART();
 13625                           
 13626                           ;incstack = 0
 13627  002F50  ECC4  F01C         	call	_init_UART	;wreg free
 13628                           
 13629                           ;Main.c: 95: Init_ADC();
 13630  002F54  EC41  F01D         	call	_Init_ADC	;wreg free
 13631                           
 13632                           ;Main.c: 96: OSCCON=0x70;
 13633  002F58  0E70               	movlw	112
 13634  002F5A  6ED3               	movwf	4051,c	;volatile
 13635                           
 13636                           ;Main.c: 98: ADCON1=0x0E;
 13637  002F5C  0E0E               	movlw	14
 13638  002F5E  6EC1               	movwf	4033,c	;volatile
 13639                           
 13640                           ;Main.c: 99: TRISA = 0x22;
 13641  002F60  0E22               	movlw	34
 13642  002F62  6E92               	movwf	3986,c	;volatile
 13643                           
 13644                           ;Main.c: 100: TRISB = 0x03;
 13645  002F64  0E03               	movlw	3
 13646  002F66  6E93               	movwf	3987,c	;volatile
 13647                           
 13648                           ;Main.c: 101: TRISC = 0x01;
 13649  002F68  0E01               	movlw	1
 13650  002F6A  6E94               	movwf	3988,c	;volatile
 13651                           
 13652                           ;Main.c: 102: TRISD = 0x00;
 13653  002F6C  0E00               	movlw	0
 13654  002F6E  6E95               	movwf	3989,c	;volatile
 13655                           
 13656                           ;Main.c: 103: TRISE = 0x00;
 13657  002F70  0E00               	movlw	0
 13658  002F72  6E96               	movwf	3990,c	;volatile
 13659                           
 13660                           ;Main.c: 104: PORTE = 0x00;
 13661  002F74  0E00               	movlw	0
 13662  002F76  6E84               	movwf	3972,c	;volatile
 13663                           
 13664                           ;Main.c: 106: HEATER = 0;
 13665  002F78  0E00               	movlw	0
 13666  002F7A  6E4F               	movwf	_HEATER,c
 13667                           
 13668                           ;Main.c: 107: RBPU=0;
 13669  002F7C  9EF1               	bcf	intcon2,7,c	;volatile
 13670                           
 13671                           ;Main.c: 109: TMR3L = 0x00;
 13672  002F7E  0E00               	movlw	0
 13673  002F80  6EB2               	movwf	4018,c	;volatile
 13674                           
 13675                           ;Main.c: 110: T3CON = 0x03;
 13676  002F82  0E03               	movlw	3
 13677  002F84  6EB1               	movwf	4017,c	;volatile
 13678                           
 13679                           ;Main.c: 111: I2C_Init(100000);
 13680  002F86  0EA0               	movlw	160
 13681  002F88  6E11               	movwf	I2C_Init@c,c
 13682  002F8A  0E86               	movlw	134
 13683  002F8C  6E12               	movwf	I2C_Init@c+1,c
 13684  002F8E  0E01               	movlw	1
 13685  002F90  6E13               	movwf	I2C_Init@c+2,c
 13686  002F92  0E00               	movlw	0
 13687  002F94  6E14               	movwf	I2C_Init@c+3,c
 13688  002F96  EC54  F01D         	call	_I2C_Init	;wreg free
 13689                           
 13690                           ;Main.c: 113: DS1621_Init();
 13691  002F9A  ECEF  F01B         	call	_DS1621_Init	;wreg free
 13692                           
 13693                           ;Main.c: 114: Init_Interrupt();
 13694  002F9E  ECE0  F01B         	call	_Init_Interrupt	;wreg free
 13695                           
 13696                           ;Main.c: 115: Turn_Off_Fan();
 13697  002FA2  EC27  F01C         	call	_Turn_Off_Fan	;wreg free
 13698                           
 13699                           ;Main.c: 116: heater_set_temp = 75;
 13700  002FA6  0E4B               	movlw	75
 13701  002FA8  6E6F               	movwf	_heater_set_temp,c
 13702  002FAA  0012               	return		;funcret
 13703  002FAC                     __end_of_Do_Init:
 13704                           	opt stack 0
 13705                           tblptru	equ	0xFF8
 13706                           tblptrh	equ	0xFF7
 13707                           tblptrl	equ	0xFF6
 13708                           tablat	equ	0xFF5
 13709                           prodh	equ	0xFF4
 13710                           prodl	equ	0xFF3
 13711                           intcon	equ	0xFF2
 13712                           intcon2	equ	0xFF1
 13713                           postinc0	equ	0xFEE
 13714                           wreg	equ	0xFE8
 13715                           postdec1	equ	0xFE5
 13716                           plusw1	equ	0xFE3
 13717                           fsr1l	equ	0xFE1
 13718                           indf2	equ	0xFDF
 13719                           postinc2	equ	0xFDE
 13720                           plusw2	equ	0xFDB
 13721                           fsr2h	equ	0xFDA
 13722                           fsr2l	equ	0xFD9
 13723                           status	equ	0xFD8
 13724                           
 13725 ;; *************** function _init_UART *****************
 13726 ;; Defined at:
 13727 ;;		line 84 in file "Main.c"
 13728 ;; Parameters:    Size  Location     Type
 13729 ;;		None
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;		None
 13732 ;; Return value:  Size  Location     Type
 13733 ;;		None               void
 13734 ;; Registers used:
 13735 ;;		wreg, status,2, cstack
 13736 ;; Tracked objects:
 13737 ;;		On entry : 0/0
 13738 ;;		On exit  : 0/0
 13739 ;;		Unchanged: 0/0
 13740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;Total ram usage:        0 bytes
 13746 ;; Hardware stack levels used:    1
 13747 ;; Hardware stack levels required when called:    4
 13748 ;; This function calls:
 13749 ;;		_OpenUSART
 13750 ;; This function is called by:
 13751 ;;		_Do_Init
 13752 ;; This function uses a non-reentrant model
 13753 ;;
 13754                           
 13755                           	psect	text77
 13756  003988                     __ptext77:
 13757                           	opt stack 0
 13758  003988                     _init_UART:
 13759                           	opt stack 25
 13760                           
 13761                           ;Main.c: 86: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11111111, 25);
 13762                           
 13763                           ;incstack = 0
 13764  003988  0E00               	movlw	0
 13765  00398A  6E12               	movwf	OpenUSART@spbrg+1,c
 13766  00398C  0E19               	movlw	25
 13767  00398E  6E11               	movwf	OpenUSART@spbrg,c
 13768  003990  0E3C               	movlw	60
 13769  003992  EC0C  F017         	call	_OpenUSART
 13770                           
 13771                           ;Main.c: 87: OSCCON = 0x70;
 13772  003996  0E70               	movlw	112
 13773  003998  6ED3               	movwf	4051,c	;volatile
 13774  00399A  0012               	return		;funcret
 13775  00399C                     __end_of_init_UART:
 13776                           	opt stack 0
 13777                           tblptru	equ	0xFF8
 13778                           tblptrh	equ	0xFF7
 13779                           tblptrl	equ	0xFF6
 13780                           tablat	equ	0xFF5
 13781                           prodh	equ	0xFF4
 13782                           prodl	equ	0xFF3
 13783                           intcon	equ	0xFF2
 13784                           intcon2	equ	0xFF1
 13785                           postinc0	equ	0xFEE
 13786                           wreg	equ	0xFE8
 13787                           postdec1	equ	0xFE5
 13788                           plusw1	equ	0xFE3
 13789                           fsr1l	equ	0xFE1
 13790                           indf2	equ	0xFDF
 13791                           postinc2	equ	0xFDE
 13792                           plusw2	equ	0xFDB
 13793                           fsr2h	equ	0xFDA
 13794                           fsr2l	equ	0xFD9
 13795                           status	equ	0xFD8
 13796                           
 13797 ;; *************** function _OpenUSART *****************
 13798 ;; Defined at:
 13799 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;  config          1    wreg     unsigned char 
 13802 ;;  spbrg           2   16[COMRAM] unsigned int 
 13803 ;; Auto vars:     Size  Location     Type
 13804 ;;  config          1   18[COMRAM] unsigned char 
 13805 ;; Return value:  Size  Location     Type
 13806 ;;		None               void
 13807 ;; Registers used:
 13808 ;;		wreg, status,2
 13809 ;; Tracked objects:
 13810 ;;		On entry : 0/0
 13811 ;;		On exit  : 0/0
 13812 ;;		Unchanged: 0/0
 13813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13814 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13817 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13818 ;;Total ram usage:        3 bytes
 13819 ;; Hardware stack levels used:    1
 13820 ;; Hardware stack levels required when called:    3
 13821 ;; This function calls:
 13822 ;;		Nothing
 13823 ;; This function is called by:
 13824 ;;		_init_UART
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           	psect	text78
 13829  002E18                     __ptext78:
 13830                           	opt stack 0
 13831  002E18                     _OpenUSART:
 13832                           	opt stack 25
 13833                           
 13834                           ;incstack = 0
 13835                           ;OpenUSART@config stored from wreg
 13836  002E18  6E13               	movwf	OpenUSART@config,c
 13837  002E1A  0E00               	movlw	0
 13838  002E1C  6EAC               	movwf	4012,c	;volatile
 13839  002E1E  0E00               	movlw	0
 13840  002E20  6EAB               	movwf	4011,c	;volatile
 13841  002E22  A013               	btfss	OpenUSART@config,0,c
 13842  002E24  D002               	goto	l5930
 13843  002E26  88AC               	bsf	4012,4,c	;volatile
 13844  002E28  D000               	goto	l5930
 13845  002E2A                     l5930:
 13846  002E2A  A213               	btfss	OpenUSART@config,1,c
 13847  002E2C  D003               	goto	l5934
 13848  002E2E  8CAC               	bsf	4012,6,c	;volatile
 13849  002E30  8CAB               	bsf	4011,6,c	;volatile
 13850  002E32  D000               	goto	l5934
 13851  002E34                     l5934:
 13852  002E34  A413               	btfss	OpenUSART@config,2,c
 13853  002E36  D002               	goto	l5938
 13854  002E38  8EAC               	bsf	4012,7,c	;volatile
 13855  002E3A  D000               	goto	l5938
 13856  002E3C                     l5938:
 13857  002E3C  A613               	btfss	OpenUSART@config,3,c
 13858  002E3E  D002               	goto	l1446
 13859  002E40  88AB               	bsf	4011,4,c	;volatile
 13860  002E42  D002               	goto	l5942
 13861  002E44                     l1446:
 13862  002E44  8AAB               	bsf	4011,5,c	;volatile
 13863  002E46  D000               	goto	l5942
 13864  002E48                     l5942:
 13865  002E48  B813               	btfsc	OpenUSART@config,4,c
 13866  002E4A  84AC               	bsf	4012,2,c	;volatile
 13867  002E4C  989E               	bcf	3998,4,c	;volatile
 13868  002E4E  AA13               	btfss	OpenUSART@config,5,c
 13869  002E50  D002               	goto	l5950
 13870  002E52  86AB               	bsf	4011,3,c	;volatile
 13871  002E54  D000               	goto	l5950
 13872  002E56                     l5950:
 13873  002E56  AC13               	btfss	OpenUSART@config,6,c
 13874  002E58  D002               	goto	l1450
 13875  002E5A  8A9D               	bsf	3997,5,c	;volatile
 13876  002E5C  D001               	goto	l1451
 13877  002E5E                     l1450:
 13878  002E5E  9A9D               	bcf	3997,5,c	;volatile
 13879  002E60                     l1451:
 13880  002E60  9A9E               	bcf	3998,5,c	;volatile
 13881  002E62  AE13               	btfss	OpenUSART@config,7,c
 13882  002E64  D002               	goto	l1452
 13883  002E66  889D               	bsf	3997,4,c	;volatile
 13884  002E68  D001               	goto	l1453
 13885  002E6A                     l1452:
 13886  002E6A  989D               	bcf	3997,4,c	;volatile
 13887  002E6C                     l1453:
 13888  002E6C  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 13889  002E70  5012               	movf	OpenUSART@spbrg+1,w,c
 13890  002E72  6EB0               	movwf	4016,c	;volatile
 13891  002E74  8AAC               	bsf	4012,5,c	;volatile
 13892  002E76  8EAB               	bsf	4011,7,c	;volatile
 13893  002E78  9C94               	bcf	3988,6,c	;volatile
 13894  002E7A  8E94               	bsf	3988,7,c	;volatile
 13895  002E7C  B8AC               	btfsc	4012,4,c	;volatile
 13896  002E7E  BEAC               	btfsc	4012,7,c	;volatile
 13897  002E80  D002               	goto	l1455
 13898  002E82  8C94               	bsf	3988,6,c	;volatile
 13899  002E84  D000               	goto	l1455
 13900  002E86                     l1455:
 13901  002E86  0012               	return		;funcret
 13902  002E88                     __end_of_OpenUSART:
 13903                           	opt stack 0
 13904                           tblptru	equ	0xFF8
 13905                           tblptrh	equ	0xFF7
 13906                           tblptrl	equ	0xFF6
 13907                           tablat	equ	0xFF5
 13908                           prodh	equ	0xFF4
 13909                           prodl	equ	0xFF3
 13910                           intcon	equ	0xFF2
 13911                           intcon2	equ	0xFF1
 13912                           postinc0	equ	0xFEE
 13913                           wreg	equ	0xFE8
 13914                           postdec1	equ	0xFE5
 13915                           plusw1	equ	0xFE3
 13916                           fsr1l	equ	0xFE1
 13917                           indf2	equ	0xFDF
 13918                           postinc2	equ	0xFDE
 13919                           plusw2	equ	0xFDB
 13920                           fsr2h	equ	0xFDA
 13921                           fsr2l	equ	0xFD9
 13922                           status	equ	0xFD8
 13923                           
 13924 ;; *************** function _Turn_Off_Fan *****************
 13925 ;; Defined at:
 13926 ;;		line 60 in file "Fan_Support.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;		None
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;		None
 13931 ;; Return value:  Size  Location     Type
 13932 ;;		None               void
 13933 ;; Registers used:
 13934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 0/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;Total ram usage:        0 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; Hardware stack levels required when called:    6
 13947 ;; This function calls:
 13948 ;;		_do_update_pwm
 13949 ;;		_printf
 13950 ;; This function is called by:
 13951 ;;		_Toggle_Heater
 13952 ;;		_Do_Init
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           	psect	text79
 13957  00384E                     __ptext79:
 13958                           	opt stack 0
 13959  00384E                     _Turn_Off_Fan:
 13960                           	opt stack 23
 13961                           
 13962                           ;Fan_Support.c: 63: printf ("Fan is turned off\r\n");
 13963                           
 13964                           ;incstack = 0
 13965  00384E  0E01               	movlw	low STR_1
 13966  003850  6E1D               	movwf	printf@f,c
 13967  003852  0EFF               	movlw	high STR_1
 13968  003854  6E1E               	movwf	printf@f+1,c
 13969  003856  ECE9  F004         	call	_printf	;wreg free
 13970                           
 13971                           ;Fan_Support.c: 64: HEATER = 0;
 13972  00385A  0E00               	movlw	0
 13973  00385C  6E4F               	movwf	_HEATER,c
 13974                           
 13975                           ;Fan_Support.c: 65: do_update_pwm(0);
 13976  00385E  0E00               	movlw	0
 13977  003860  ECB9  F012         	call	_do_update_pwm
 13978                           
 13979                           ;Fan_Support.c: 66: PORTAbits.RA4 = 0;
 13980  003864  9880               	bcf	3968,4,c	;volatile
 13981  003866  0012               	return		;funcret
 13982  003868                     __end_of_Turn_Off_Fan:
 13983                           	opt stack 0
 13984                           tblptru	equ	0xFF8
 13985                           tblptrh	equ	0xFF7
 13986                           tblptrl	equ	0xFF6
 13987                           tablat	equ	0xFF5
 13988                           prodh	equ	0xFF4
 13989                           prodl	equ	0xFF3
 13990                           intcon	equ	0xFF2
 13991                           intcon2	equ	0xFF1
 13992                           postinc0	equ	0xFEE
 13993                           wreg	equ	0xFE8
 13994                           postdec1	equ	0xFE5
 13995                           plusw1	equ	0xFE3
 13996                           fsr1l	equ	0xFE1
 13997                           indf2	equ	0xFDF
 13998                           postinc2	equ	0xFDE
 13999                           plusw2	equ	0xFDB
 14000                           fsr2h	equ	0xFDA
 14001                           fsr2l	equ	0xFD9
 14002                           status	equ	0xFD8
 14003                           
 14004 ;; *************** function _printf *****************
 14005 ;; Defined at:
 14006 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 14007 ;; Parameters:    Size  Location     Type
 14008 ;;  f               2   28[COMRAM] PTR const unsigned char 
 14009 ;;		 -> STR_38(22), STR_29(11), STR_6(20), STR_5(24), 
 14010 ;;		 -> STR_4(21), STR_3(30), STR_2(19), STR_1(20), 
 14011 ;; Auto vars:     Size  Location     Type
 14012 ;;  idx             1   46[COMRAM] unsigned char 
 14013 ;;  tmpval          4    0        struct .
 14014 ;;  cp              3    0        PTR const unsigned char 
 14015 ;;  width           2   53[COMRAM] int 
 14016 ;;  val             2   50[COMRAM] unsigned int 
 14017 ;;  ap              2   47[COMRAM] PTR void [1]
 14018 ;;		 -> ?_printf(2), 
 14019 ;;  len             2    0        unsigned int 
 14020 ;;  c               1   55[COMRAM] char 
 14021 ;;  flag            1   52[COMRAM] unsigned char 
 14022 ;;  prec            1   49[COMRAM] char 
 14023 ;; Return value:  Size  Location     Type
 14024 ;;                  2   28[COMRAM] int 
 14025 ;; Registers used:
 14026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14032 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;Total ram usage:       28 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    4
 14039 ;; This function calls:
 14040 ;;		___lwdiv
 14041 ;;		___lwmod
 14042 ;;		___wmul
 14043 ;;		_isdigit
 14044 ;;		_putch
 14045 ;; This function is called by:
 14046 ;;		_Turn_Off_Fan
 14047 ;;		_Turn_On_Fan
 14048 ;;		_main
 14049 ;;		_Update_Setup_Alarm_Time_Screen
 14050 ;;		_check_for_button_input
 14051 ;; This function uses a non-reentrant model
 14052 ;;
 14053                           
 14054                           	psect	text80
 14055  0009D2                     __ptext80:
 14056                           	opt stack 0
 14057  0009D2                     _printf:
 14058                           	opt stack 26
 14059                           
 14060                           ;doprnt.c: 466: va_list ap;
 14061                           ;doprnt.c: 499: signed char c;
 14062                           ;doprnt.c: 501: int width;
 14063                           ;doprnt.c: 506: signed char prec;
 14064                           ;doprnt.c: 508: unsigned char flag;
 14065                           ;doprnt.c: 523: union {
 14066                           ;doprnt.c: 524: unsigned long vd;
 14067                           ;doprnt.c: 525: double integ;
 14068                           ;doprnt.c: 526: } tmpval;
 14069                           ;doprnt.c: 528: unsigned int val;
 14070                           ;doprnt.c: 529: unsigned len;
 14071                           ;doprnt.c: 530: const char * cp;
 14072                           ;doprnt.c: 533: *ap = __va_start();
 14073                           
 14074                           ;incstack = 0
 14075  0009D2  0E1F               	movlw	low (?_printf+2)
 14076  0009D4  6E30               	movwf	printf@ap,c
 14077  0009D6  0E00               	movlw	high (?_printf+2)
 14078  0009D8  6E31               	movwf	printf@ap+1,c
 14079                           
 14080                           ;doprnt.c: 536: while(c = *f++) {
 14081  0009DA  D199               	goto	l8062
 14082  0009DC                     l7936:
 14083                           
 14084                           ;doprnt.c: 538: if(c != '%')
 14085  0009DC  0E25               	movlw	37
 14086  0009DE  1838               	xorwf	printf@c,w,c
 14087  0009E0  B4D8               	btfsc	status,2,c
 14088  0009E2  D004               	goto	l7940
 14089                           
 14090                           ;doprnt.c: 540: {
 14091                           ;doprnt.c: 541: (putch(c) );
 14092  0009E4  5038               	movf	printf@c,w,c
 14093  0009E6  EC3A  F01D         	call	_putch
 14094                           
 14095                           ;doprnt.c: 542: continue;
 14096  0009EA  D191               	goto	l8062
 14097  0009EC                     l7940:
 14098                           
 14099                           ;doprnt.c: 543: }
 14100                           ;doprnt.c: 546: width = 0;
 14101  0009EC  0E00               	movlw	0
 14102  0009EE  6E37               	movwf	printf@width+1,c
 14103  0009F0  0E00               	movlw	0
 14104  0009F2  6E36               	movwf	printf@width,c
 14105                           
 14106                           ;doprnt.c: 548: flag = 0;
 14107  0009F4  0E00               	movlw	0
 14108  0009F6  6E35               	movwf	printf@flag,c
 14109                           
 14110                           ;doprnt.c: 551: switch(*f) {
 14111                           
 14112                           ;doprnt.c: 550: for(;;) {
 14113  0009F8  D005               	goto	l7946
 14114  0009FA                     l7942:
 14115                           
 14116                           ;doprnt.c: 580: flag |= 0x04;
 14117  0009FA  8435               	bsf	printf@flag,2,c
 14118                           
 14119                           ;doprnt.c: 581: f++;
 14120  0009FC  4A1D               	infsnz	printf@f,f,c
 14121  0009FE  2A1E               	incf	printf@f+1,f,c
 14122                           
 14123                           ;doprnt.c: 582: continue;
 14124  000A00  D001               	goto	l7946
 14125                           
 14126                           ;doprnt.c: 584: }
 14127  000A02  D00B               	goto	l7948
 14128  000A04                     l7946:
 14129  000A04  C01D  FFF6         	movff	printf@f,tblptrl
 14130  000A08  C01E  FFF7         	movff	printf@f+1,tblptrh
 14131  000A0C                     	if	0	;tblptru may be non-zero
 14132  000A0C                     	endif
 14133  000A0C                     	if	0	;tblptru may be non-zero
 14134  000A0C                     	endif
 14135  000A0C  0008               	tblrd		*
 14136  000A0E  50F5               	movf	tablat,w,c
 14137                           
 14138                           ; Switch size 1, requested type "space"
 14139                           ; Number of cases is 1, Range of values is 48 to 48
 14140                           ; switch strategies available:
 14141                           ; Name         Instructions Cycles
 14142                           ; simple_byte            4     3 (average)
 14143                           ;	Chosen strategy is simple_byte
 14144  000A10  0A30               	xorlw	48	; case 48
 14145  000A12  B4D8               	btfsc	status,2,c
 14146  000A14  D7F2               	goto	l7942
 14147                           
 14148                           ;doprnt.c: 585: break;
 14149  000A16  D001               	goto	l7948
 14150                           
 14151                           ;doprnt.c: 586: }
 14152  000A18  D7F5               	goto	l7946
 14153  000A1A                     l7948:
 14154                           
 14155                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14156  000A1A  C01D  FFF6         	movff	printf@f,tblptrl
 14157  000A1E  C01E  FFF7         	movff	printf@f+1,tblptrh
 14158  000A22                     	if	0	;tblptru may be non-zero
 14159  000A22                     	endif
 14160  000A22                     	if	0	;tblptru may be non-zero
 14161  000A22                     	endif
 14162  000A22  0008               	tblrd		*
 14163  000A24  50F5               	movf	tablat,w,c
 14164  000A26  ECAF  F01B         	call	_isdigit
 14165  000A2A  A0D8               	btfss	status,0,c
 14166  000A2C  D03B               	goto	l7964
 14167                           
 14168                           ;doprnt.c: 598: width = 0;
 14169  000A2E  0E00               	movlw	0
 14170  000A30  6E37               	movwf	printf@width+1,c
 14171  000A32  0E00               	movlw	0
 14172  000A34  6E36               	movwf	printf@width,c
 14173  000A36  D000               	goto	l7952
 14174  000A38                     l7952:
 14175                           
 14176                           ;doprnt.c: 600: width *= 10;
 14177  000A38  C036  F011         	movff	printf@width,___wmul@multiplier
 14178  000A3C  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
 14179  000A40  0E00               	movlw	0
 14180  000A42  6E14               	movwf	___wmul@multiplicand+1,c
 14181  000A44  0E0A               	movlw	10
 14182  000A46  6E13               	movwf	___wmul@multiplicand,c
 14183  000A48  EC75  F01B         	call	___wmul	;wreg free
 14184  000A4C  C011  F036         	movff	?___wmul,printf@width
 14185  000A50  C012  F037         	movff	?___wmul+1,printf@width+1
 14186                           
 14187                           ;doprnt.c: 601: width += *f++ - '0';
 14188  000A54  0ED0               	movlw	208
 14189  000A56  6E2B               	movwf	??_printf& (0+255),c
 14190  000A58  0EFF               	movlw	255
 14191  000A5A  6E2C               	movwf	(??_printf+1)& (0+255),c
 14192  000A5C  C01D  FFF6         	movff	printf@f,tblptrl
 14193  000A60  C01E  FFF7         	movff	printf@f+1,tblptrh
 14194  000A64                     	if	0	;tblptru may be non-zero
 14195  000A64                     	endif
 14196  000A64                     	if	0	;tblptru may be non-zero
 14197  000A64                     	endif
 14198  000A64  0008               	tblrd		*
 14199  000A66  50F5               	movf	tablat,w,c
 14200  000A68  6E2D               	movwf	(??_printf+2)& (0+255),c
 14201  000A6A  6A2E               	clrf	(??_printf+3)& (0+255),c
 14202  000A6C  502B               	movf	??_printf,w,c
 14203  000A6E  262D               	addwf	??_printf+2,f,c
 14204  000A70  502C               	movf	??_printf+1,w,c
 14205  000A72  222E               	addwfc	??_printf+3,f,c
 14206  000A74  502D               	movf	??_printf+2,w,c
 14207  000A76  2636               	addwf	printf@width,f,c
 14208  000A78  502E               	movf	??_printf+3,w,c
 14209  000A7A  2237               	addwfc	printf@width+1,f,c
 14210  000A7C  4A1D               	infsnz	printf@f,f,c
 14211  000A7E  2A1E               	incf	printf@f+1,f,c
 14212                           
 14213                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14214  000A80  C01D  FFF6         	movff	printf@f,tblptrl
 14215  000A84  C01E  FFF7         	movff	printf@f+1,tblptrh
 14216  000A88                     	if	0	;tblptru may be non-zero
 14217  000A88                     	endif
 14218  000A88                     	if	0	;tblptru may be non-zero
 14219  000A88                     	endif
 14220  000A88  0008               	tblrd		*
 14221  000A8A  50F5               	movf	tablat,w,c
 14222  000A8C  ECAF  F01B         	call	_isdigit
 14223  000A90  A0D8               	btfss	status,0,c
 14224  000A92  D008               	goto	l7964
 14225  000A94  D7D1               	goto	l7952
 14226                           
 14227                           ;doprnt.c: 608: }
 14228                           ;doprnt.c: 635: switch(c = *f++) {
 14229  000A96  D006               	goto	l7964
 14230                           
 14231                           ;doprnt.c: 638: goto alldone;
 14232                           
 14233                           ;doprnt.c: 637: case 0:
 14234  000A98  D148               	goto	l1422
 14235                           
 14236                           ;doprnt.c: 698: case 'i':
 14237                           ;doprnt.c: 699: break;
 14238                           
 14239                           ;doprnt.c: 697: case 'd':
 14240  000A9A  D01B               	goto	l1385
 14241  000A9C                     l7960:
 14242                           
 14243                           ;doprnt.c: 721: flag |= 0x80;
 14244  000A9C  8E35               	bsf	printf@flag,7,c
 14245                           
 14246                           ;doprnt.c: 723: break;
 14247  000A9E  D019               	goto	l1385
 14248                           
 14249                           ;doprnt.c: 813: continue;
 14250                           
 14251                           ;doprnt.c: 802: default:
 14252  000AA0  D136               	goto	l8062
 14253                           
 14254                           ;doprnt.c: 822: }
 14255  000AA2  D017               	goto	l1385
 14256  000AA4                     l7964:
 14257  000AA4  C01D  FFF6         	movff	printf@f,tblptrl
 14258  000AA8  C01E  FFF7         	movff	printf@f+1,tblptrh
 14259  000AAC  4A1D               	infsnz	printf@f,f,c
 14260  000AAE  2A1E               	incf	printf@f+1,f,c
 14261  000AB0                     	if	0	;tblptru may be non-zero
 14262  000AB0                     	endif
 14263  000AB0                     	if	0	;tblptru may be non-zero
 14264  000AB0                     	endif
 14265  000AB0  0008               	tblrd		*
 14266  000AB2  CFF5 F038          	movff	tablat,printf@c
 14267  000AB6  5038               	movf	printf@c,w,c
 14268                           
 14269                           ; Switch size 1, requested type "space"
 14270                           ; Number of cases is 4, Range of values is 0 to 120
 14271                           ; switch strategies available:
 14272                           ; Name         Instructions Cycles
 14273                           ; simple_byte           13     7 (average)
 14274                           ;	Chosen strategy is simple_byte
 14275  000AB8  0A00               	xorlw	0	; case 0
 14276  000ABA  B4D8               	btfsc	status,2,c
 14277  000ABC  D136               	goto	l1422
 14278  000ABE  0A64               	xorlw	100	; case 100
 14279  000AC0  B4D8               	btfsc	status,2,c
 14280  000AC2  D007               	goto	l1385
 14281  000AC4  0A0D               	xorlw	13	; case 105
 14282  000AC6  B4D8               	btfsc	status,2,c
 14283  000AC8  D004               	goto	l1385
 14284  000ACA  0A11               	xorlw	17	; case 120
 14285  000ACC  B4D8               	btfsc	status,2,c
 14286  000ACE  D7E6               	goto	l7960
 14287  000AD0  D11E               	goto	l8062
 14288  000AD2                     l1385:
 14289                           
 14290                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14291  000AD2  BE35               	btfsc	printf@flag,7,c
 14292  000AD4  D015               	goto	l7976
 14293                           
 14294                           ;doprnt.c: 1253: {
 14295                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14296  000AD6  C030  FFD9         	movff	printf@ap,fsr2l
 14297  000ADA  C031  FFDA         	movff	printf@ap+1,fsr2h
 14298  000ADE  CFDE F033          	movff	postinc2,printf@val
 14299  000AE2  CFDD F034          	movff	postdec2,printf@val+1
 14300  000AE6  0E02               	movlw	2
 14301  000AE8  2630               	addwf	printf@ap,f,c
 14302  000AEA  0E00               	movlw	0
 14303  000AEC  2231               	addwfc	printf@ap+1,f,c
 14304                           
 14305                           ;doprnt.c: 1261: if((int)val < 0) {
 14306  000AEE  AE34               	btfss	printf@val+1,7,c
 14307  000AF0  D04E               	goto	l8010
 14308                           
 14309                           ;doprnt.c: 1262: flag |= 0x03;
 14310  000AF2  0E03               	movlw	3
 14311  000AF4  1235               	iorwf	printf@flag,f,c
 14312                           
 14313                           ;doprnt.c: 1263: val = -val;
 14314  000AF6  6C33               	negf	printf@val,c
 14315  000AF8  1E34               	comf	printf@val+1,f,c
 14316  000AFA  B0D8               	btfsc	status,0,c
 14317  000AFC  2A34               	incf	printf@val+1,f,c
 14318                           
 14319                           ;doprnt.c: 1264: }
 14320                           ;doprnt.c: 1266: }
 14321  000AFE  D047               	goto	l8010
 14322  000B00                     l7976:
 14323                           
 14324                           ;doprnt.c: 1268: else
 14325                           ;doprnt.c: 1273: {
 14326                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14327  000B00  C030  FFD9         	movff	printf@ap,fsr2l
 14328  000B04  C031  FFDA         	movff	printf@ap+1,fsr2h
 14329  000B08  CFDE F033          	movff	postinc2,printf@val
 14330  000B0C  CFDD F034          	movff	postdec2,printf@val+1
 14331  000B10  0E02               	movlw	2
 14332  000B12  2630               	addwf	printf@ap,f,c
 14333  000B14  0E00               	movlw	0
 14334  000B16  2231               	addwfc	printf@ap+1,f,c
 14335                           
 14336                           ;doprnt.c: 1287: }
 14337                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14338  000B18  D03A               	goto	l8010
 14339  000B1A                     l7980:
 14340                           
 14341                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14342  000B1A  0E01               	movlw	1
 14343  000B1C  6E38               	movwf	printf@c,c
 14344  000B1E                     l7982:
 14345  000B1E  0E05               	movlw	5
 14346  000B20  1838               	xorwf	printf@c,w,c
 14347  000B22  B4D8               	btfsc	status,2,c
 14348  000B24  D03D               	goto	l8012
 14349  000B26  D001               	goto	l7986
 14350  000B28  D03B               	goto	l8012
 14351  000B2A                     l7986:
 14352                           
 14353                           ;doprnt.c: 1306: if(val < dpowers[c])
 14354  000B2A  5038               	movf	printf@c,w,c
 14355  000B2C  0D02               	mullw	2
 14356  000B2E  0E66               	movlw	low _dpowers
 14357  000B30  24F3               	addwf	prodl,w,c
 14358  000B32  6EF6               	movwf	tblptrl,c
 14359  000B34  0EFE               	movlw	high _dpowers
 14360  000B36  20F4               	addwfc	prodh,w,c
 14361  000B38  6EF7               	movwf	tblptrh,c
 14362  000B3A                     	if	0	;There are less than 3 active tblptr bytes
 14363  000B3A                     	endif
 14364  000B3A  0009               	tblrd		*+
 14365  000B3C  50F5               	movf	tablat,w,c
 14366  000B3E  5C33               	subwf	printf@val,w,c
 14367  000B40  0009               	tblrd		*+
 14368  000B42  50F5               	movf	tablat,w,c
 14369  000B44  5834               	subwfb	printf@val+1,w,c
 14370  000B46  A0D8               	btfss	status,0,c
 14371  000B48  D02B               	goto	l8012
 14372  000B4A  D001               	goto	l7990
 14373                           
 14374                           ;doprnt.c: 1307: break;
 14375  000B4C  D029               	goto	l8012
 14376  000B4E                     l7990:
 14377  000B4E  2A38               	incf	printf@c,f,c
 14378  000B50  D7E6               	goto	l7982
 14379                           
 14380                           ;doprnt.c: 1309: break;
 14381  000B52  D026               	goto	l8012
 14382  000B54                     l7994:
 14383                           
 14384                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14385  000B54  0E01               	movlw	1
 14386  000B56  6E38               	movwf	printf@c,c
 14387  000B58                     l7996:
 14388  000B58  0E04               	movlw	4
 14389  000B5A  1838               	xorwf	printf@c,w,c
 14390  000B5C  B4D8               	btfsc	status,2,c
 14391  000B5E  D020               	goto	l8012
 14392  000B60  D001               	goto	l8000
 14393  000B62  D01E               	goto	l8012
 14394  000B64                     l8000:
 14395                           
 14396                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14397  000B64  5038               	movf	printf@c,w,c
 14398  000B66  0D02               	mullw	2
 14399  000B68  0E70               	movlw	low _hexpowers
 14400  000B6A  24F3               	addwf	prodl,w,c
 14401  000B6C  6EF6               	movwf	tblptrl,c
 14402  000B6E  0EFE               	movlw	high _hexpowers
 14403  000B70  20F4               	addwfc	prodh,w,c
 14404  000B72  6EF7               	movwf	tblptrh,c
 14405  000B74                     	if	0	;There are less than 3 active tblptr bytes
 14406  000B74                     	endif
 14407  000B74  0009               	tblrd		*+
 14408  000B76  50F5               	movf	tablat,w,c
 14409  000B78  5C33               	subwf	printf@val,w,c
 14410  000B7A  0009               	tblrd		*+
 14411  000B7C  50F5               	movf	tablat,w,c
 14412  000B7E  5834               	subwfb	printf@val+1,w,c
 14413  000B80  A0D8               	btfss	status,0,c
 14414  000B82  D00E               	goto	l8012
 14415  000B84  D001               	goto	l8004
 14416                           
 14417                           ;doprnt.c: 1318: break;
 14418  000B86  D00C               	goto	l8012
 14419  000B88                     l8004:
 14420  000B88  2A38               	incf	printf@c,f,c
 14421  000B8A  D7E6               	goto	l7996
 14422                           
 14423                           ;doprnt.c: 1336: }
 14424                           
 14425                           ;doprnt.c: 1320: break;
 14426  000B8C  D009               	goto	l8012
 14427  000B8E                     l8010:
 14428  000B8E  5035               	movf	printf@flag,w,c
 14429  000B90  0B80               	andlw	128
 14430                           
 14431                           ; Switch size 1, requested type "space"
 14432                           ; Number of cases is 2, Range of values is 0 to 128
 14433                           ; switch strategies available:
 14434                           ; Name         Instructions Cycles
 14435                           ; simple_byte            7     4 (average)
 14436                           ;	Chosen strategy is simple_byte
 14437  000B92  0A00               	xorlw	0	; case 0
 14438  000B94  B4D8               	btfsc	status,2,c
 14439  000B96  D7C1               	goto	l7980
 14440  000B98  0A80               	xorlw	128	; case 128
 14441  000B9A  B4D8               	btfsc	status,2,c
 14442  000B9C  D7DB               	goto	l7994
 14443  000B9E  D000               	goto	l8012
 14444  000BA0                     l8012:
 14445                           
 14446                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14447  000BA0  5036               	movf	printf@width,w,c
 14448  000BA2  1037               	iorwf	printf@width+1,w,c
 14449  000BA4  B4D8               	btfsc	status,2,c
 14450  000BA6  D00A               	goto	l8018
 14451  000BA8  C035  F02B         	movff	printf@flag,??_printf
 14452  000BAC  0E03               	movlw	3
 14453  000BAE  162B               	andwf	??_printf,f,c
 14454  000BB0  B4D8               	btfsc	status,2,c
 14455  000BB2  D004               	goto	l8018
 14456                           
 14457                           ;doprnt.c: 1346: width--;
 14458  000BB4  0636               	decf	printf@width,f,c
 14459  000BB6  A0D8               	btfss	status,0,c
 14460  000BB8  0637               	decf	printf@width+1,f,c
 14461  000BBA  D000               	goto	l8018
 14462  000BBC                     l8018:
 14463                           
 14464                           ;doprnt.c: 1381: if(width > c)
 14465  000BBC  0E80               	movlw	128
 14466  000BBE  BE38               	btfsc	printf@c,7,c
 14467  000BC0  0E7F               	movlw	127
 14468  000BC2  6E2B               	movwf	??_printf& (0+255),c
 14469  000BC4  5036               	movf	printf@width,w,c
 14470  000BC6  5C38               	subwf	printf@c,w,c
 14471  000BC8  5037               	movf	printf@width+1,w,c
 14472  000BCA  0A80               	xorlw	128
 14473  000BCC  582B               	subwfb	??_printf& (0+255),w,c
 14474  000BCE  B0D8               	btfsc	status,0,c
 14475  000BD0  D007               	goto	l8022
 14476                           
 14477                           ;doprnt.c: 1382: width -= c;
 14478  000BD2  5038               	movf	printf@c,w,c
 14479  000BD4  5E36               	subwf	printf@width,f,c
 14480  000BD6  0E00               	movlw	0
 14481  000BD8  BE38               	btfsc	printf@c,7,c
 14482  000BDA  0EFF               	movlw	255
 14483  000BDC  5A37               	subwfb	printf@width+1,f,c
 14484  000BDE  D005               	goto	l8024
 14485  000BE0                     l8022:
 14486                           
 14487                           ;doprnt.c: 1383: else
 14488                           ;doprnt.c: 1384: width = 0;
 14489  000BE0  0E00               	movlw	0
 14490  000BE2  6E37               	movwf	printf@width+1,c
 14491  000BE4  0E00               	movlw	0
 14492  000BE6  6E36               	movwf	printf@width,c
 14493  000BE8  D000               	goto	l8024
 14494  000BEA                     l8024:
 14495                           
 14496                           ;doprnt.c: 1387: if(flag & 0x04) {
 14497  000BEA  A435               	btfss	printf@flag,2,c
 14498  000BEC  D01A               	goto	l8036
 14499                           
 14500                           ;doprnt.c: 1392: if(flag & 0x03)
 14501  000BEE  C035  F02B         	movff	printf@flag,??_printf
 14502  000BF2  0E03               	movlw	3
 14503  000BF4  162B               	andwf	??_printf,f,c
 14504  000BF6  B4D8               	btfsc	status,2,c
 14505  000BF8  D004               	goto	l8030
 14506                           
 14507                           ;doprnt.c: 1393: (putch('-') );
 14508  000BFA  0E2D               	movlw	45
 14509  000BFC  EC3A  F01D         	call	_putch
 14510  000C00  D000               	goto	l8030
 14511  000C02                     l8030:
 14512                           
 14513                           ;doprnt.c: 1415: if(width)
 14514  000C02  5036               	movf	printf@width,w,c
 14515  000C04  1037               	iorwf	printf@width+1,w,c
 14516  000C06  B4D8               	btfsc	status,2,c
 14517  000C08  D026               	goto	l8046
 14518  000C0A                     l8032:
 14519                           
 14520                           ;doprnt.c: 1417: (putch('0') );
 14521  000C0A  0E30               	movlw	48
 14522  000C0C  EC3A  F01D         	call	_putch
 14523                           
 14524                           ;doprnt.c: 1418: while(--width);
 14525  000C10  0636               	decf	printf@width,f,c
 14526  000C12  A0D8               	btfss	status,0,c
 14527  000C14  0637               	decf	printf@width+1,f,c
 14528  000C16  5036               	movf	printf@width,w,c
 14529  000C18  1037               	iorwf	printf@width+1,w,c
 14530  000C1A  B4D8               	btfsc	status,2,c
 14531  000C1C  D01C               	goto	l8046
 14532  000C1E  D7F5               	goto	l8032
 14533                           
 14534                           ;doprnt.c: 1420: } else
 14535  000C20  D01A               	goto	l8046
 14536  000C22                     l8036:
 14537                           
 14538                           ;doprnt.c: 1422: {
 14539                           ;doprnt.c: 1424: if(width
 14540                           ;doprnt.c: 1428: )
 14541  000C22  5036               	movf	printf@width,w,c
 14542  000C24  1037               	iorwf	printf@width+1,w,c
 14543  000C26  B4D8               	btfsc	status,2,c
 14544  000C28  D00C               	goto	l8042
 14545  000C2A                     l8038:
 14546                           
 14547                           ;doprnt.c: 1430: (putch(' ') );
 14548  000C2A  0E20               	movlw	32
 14549  000C2C  EC3A  F01D         	call	_putch
 14550                           
 14551                           ;doprnt.c: 1431: while(--width);
 14552  000C30  0636               	decf	printf@width,f,c
 14553  000C32  A0D8               	btfss	status,0,c
 14554  000C34  0637               	decf	printf@width+1,f,c
 14555  000C36  5036               	movf	printf@width,w,c
 14556  000C38  1037               	iorwf	printf@width+1,w,c
 14557  000C3A  B4D8               	btfsc	status,2,c
 14558  000C3C  D002               	goto	l8042
 14559  000C3E  D7F5               	goto	l8038
 14560  000C40  D000               	goto	l8042
 14561  000C42                     l8042:
 14562                           
 14563                           ;doprnt.c: 1438: if(flag & 0x03)
 14564  000C42  C035  F02B         	movff	printf@flag,??_printf
 14565  000C46  0E03               	movlw	3
 14566  000C48  162B               	andwf	??_printf,f,c
 14567  000C4A  B4D8               	btfsc	status,2,c
 14568  000C4C  D004               	goto	l8046
 14569                           
 14570                           ;doprnt.c: 1439: (putch('-') );
 14571  000C4E  0E2D               	movlw	45
 14572  000C50  EC3A  F01D         	call	_putch
 14573  000C54  D000               	goto	l8046
 14574  000C56                     l8046:
 14575                           
 14576                           ;doprnt.c: 1469: }
 14577                           ;doprnt.c: 1472: prec = c;
 14578  000C56  C038  F032         	movff	printf@c,printf@prec
 14579                           
 14580                           ;doprnt.c: 1474: while(prec--) {
 14581  000C5A  D053               	goto	l8060
 14582                           
 14583                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 14584  000C5C  D045               	goto	l8056
 14585  000C5E                     l8048:
 14586                           
 14587                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14588  000C5E  5032               	movf	printf@prec,w,c
 14589  000C60  0D02               	mullw	2
 14590  000C62  0E66               	movlw	low _dpowers
 14591  000C64  24F3               	addwf	prodl,w,c
 14592  000C66  6EF6               	movwf	tblptrl,c
 14593  000C68  0EFE               	movlw	high _dpowers
 14594  000C6A  20F4               	addwfc	prodh,w,c
 14595  000C6C  6EF7               	movwf	tblptrh,c
 14596  000C6E                     	if	0	;There are less than 3 active tblptr bytes
 14597  000C6E                     	endif
 14598  000C6E  0009               	tblrd		*+
 14599  000C70  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14600  000C74  000A               	tblrd		*-
 14601  000C76  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14602  000C7A  C033  F011         	movff	printf@val,___lwdiv@dividend
 14603  000C7E  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14604  000C82  ECD6  F017         	call	___lwdiv	;wreg free
 14605  000C86  C011  F018         	movff	?___lwdiv,___lwmod@dividend
 14606  000C8A  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
 14607  000C8E  0E00               	movlw	0
 14608  000C90  6E1B               	movwf	___lwmod@divisor+1,c
 14609  000C92  0E0A               	movlw	10
 14610  000C94  6E1A               	movwf	___lwmod@divisor,c
 14611  000C96  EC9B  F019         	call	___lwmod	;wreg free
 14612  000C9A  5018               	movf	?___lwmod,w,c
 14613  000C9C  0F30               	addlw	48
 14614  000C9E  6E38               	movwf	printf@c,c
 14615                           
 14616                           ;doprnt.c: 1491: break;
 14617  000CA0  D02C               	goto	l8058
 14618  000CA2                     l8050:
 14619                           
 14620                           ;doprnt.c: 1499: {
 14621                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14622  000CA2  C033  F011         	movff	printf@val,___lwdiv@dividend
 14623  000CA6  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14624  000CAA  5032               	movf	printf@prec,w,c
 14625  000CAC  0D02               	mullw	2
 14626  000CAE  0E70               	movlw	low _hexpowers
 14627  000CB0  24F3               	addwf	prodl,w,c
 14628  000CB2  6EF6               	movwf	tblptrl,c
 14629  000CB4  0EFE               	movlw	high _hexpowers
 14630  000CB6  20F4               	addwfc	prodh,w,c
 14631  000CB8  6EF7               	movwf	tblptrh,c
 14632  000CBA                     	if	0	;There are less than 3 active tblptr bytes
 14633  000CBA                     	endif
 14634  000CBA  0009               	tblrd		*+
 14635  000CBC  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14636  000CC0  000A               	tblrd		*-
 14637  000CC2  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14638  000CC6  ECD6  F017         	call	___lwdiv	;wreg free
 14639  000CCA  5011               	movf	?___lwdiv,w,c
 14640  000CCC  0B0F               	andlw	15
 14641  000CCE  6E2F               	movwf	printf@idx,c
 14642                           
 14643                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14644  000CD0  502F               	movf	printf@idx,w,c
 14645  000CD2  0D01               	mullw	1
 14646  000CD4  0E4D               	movlw	low STR_39
 14647  000CD6  24F3               	addwf	prodl,w,c
 14648  000CD8  6EF6               	movwf	tblptrl,c
 14649  000CDA  0EFF               	movlw	high STR_39
 14650  000CDC  20F4               	addwfc	prodh,w,c
 14651  000CDE  6EF7               	movwf	tblptrh,c
 14652  000CE0                     	if	0	;There are less than 3 active tblptr bytes
 14653  000CE0                     	endif
 14654  000CE0  0008               	tblrd		*
 14655  000CE2  CFF5 F038          	movff	tablat,printf@c
 14656                           
 14657                           ;doprnt.c: 1523: }
 14658                           
 14659                           ;doprnt.c: 1508: }
 14660                           ;doprnt.c: 1510: break;
 14661  000CE6  D009               	goto	l8058
 14662  000CE8                     l8056:
 14663  000CE8  5035               	movf	printf@flag,w,c
 14664  000CEA  0B80               	andlw	128
 14665                           
 14666                           ; Switch size 1, requested type "space"
 14667                           ; Number of cases is 2, Range of values is 0 to 128
 14668                           ; switch strategies available:
 14669                           ; Name         Instructions Cycles
 14670                           ; simple_byte            7     4 (average)
 14671                           ;	Chosen strategy is simple_byte
 14672  000CEC  0A00               	xorlw	0	; case 0
 14673  000CEE  B4D8               	btfsc	status,2,c
 14674  000CF0  D7B6               	goto	l8048
 14675  000CF2  0A80               	xorlw	128	; case 128
 14676  000CF4  B4D8               	btfsc	status,2,c
 14677  000CF6  D7D5               	goto	l8050
 14678  000CF8  D000               	goto	l8058
 14679  000CFA                     l8058:
 14680                           
 14681                           ;doprnt.c: 1524: (putch(c) );
 14682  000CFA  5038               	movf	printf@c,w,c
 14683  000CFC  EC3A  F01D         	call	_putch
 14684  000D00  D000               	goto	l8060
 14685  000D02                     l8060:
 14686  000D02  0632               	decf	printf@prec,f,c
 14687  000D04  2832               	incf	printf@prec,w,c
 14688  000D06  B4D8               	btfsc	status,2,c
 14689  000D08  D002               	goto	l8062
 14690  000D0A  D7EE               	goto	l8056
 14691  000D0C  D000               	goto	l8062
 14692  000D0E                     l8062:
 14693  000D0E  C01D  FFF6         	movff	printf@f,tblptrl
 14694  000D12  C01E  FFF7         	movff	printf@f+1,tblptrh
 14695  000D16  4A1D               	infsnz	printf@f,f,c
 14696  000D18  2A1E               	incf	printf@f+1,f,c
 14697  000D1A                     	if	0	;tblptru may be non-zero
 14698  000D1A                     	endif
 14699  000D1A                     	if	0	;tblptru may be non-zero
 14700  000D1A                     	endif
 14701  000D1A  0008               	tblrd		*
 14702  000D1C  CFF5 F038          	movff	tablat,printf@c
 14703  000D20  5038               	movf	printf@c,w,c
 14704  000D22  B4D8               	btfsc	status,2,c
 14705  000D24  D002               	goto	l1422
 14706  000D26  D65A               	goto	l7936
 14707  000D28  D000               	goto	l1422
 14708  000D2A                     l1422:
 14709  000D2A  0012               	return		;funcret
 14710  000D2C                     __end_of_printf:
 14711                           	opt stack 0
 14712                           tblptru	equ	0xFF8
 14713                           tblptrh	equ	0xFF7
 14714                           tblptrl	equ	0xFF6
 14715                           tablat	equ	0xFF5
 14716                           prodh	equ	0xFF4
 14717                           prodl	equ	0xFF3
 14718                           intcon	equ	0xFF2
 14719                           intcon2	equ	0xFF1
 14720                           postinc0	equ	0xFEE
 14721                           wreg	equ	0xFE8
 14722                           postdec1	equ	0xFE5
 14723                           plusw1	equ	0xFE3
 14724                           fsr1l	equ	0xFE1
 14725                           indf2	equ	0xFDF
 14726                           postinc2	equ	0xFDE
 14727                           postdec2	equ	0xFDD
 14728                           plusw2	equ	0xFDB
 14729                           fsr2h	equ	0xFDA
 14730                           fsr2l	equ	0xFD9
 14731                           status	equ	0xFD8
 14732                           
 14733 ;; *************** function _putch *****************
 14734 ;; Defined at:
 14735 ;;		line 78 in file "Main.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;  c               1    wreg     unsigned char 
 14738 ;; Auto vars:     Size  Location     Type
 14739 ;;  c               1   16[COMRAM] unsigned char 
 14740 ;; Return value:  Size  Location     Type
 14741 ;;		None               void
 14742 ;; Registers used:
 14743 ;;		wreg
 14744 ;; Tracked objects:
 14745 ;;		On entry : 0/0
 14746 ;;		On exit  : 0/0
 14747 ;;		Unchanged: 0/0
 14748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14753 ;;Total ram usage:        1 bytes
 14754 ;; Hardware stack levels used:    1
 14755 ;; Hardware stack levels required when called:    3
 14756 ;; This function calls:
 14757 ;;		Nothing
 14758 ;; This function is called by:
 14759 ;;		_printf
 14760 ;; This function uses a non-reentrant model
 14761 ;;
 14762                           
 14763                           	psect	text81
 14764  003A74                     __ptext81:
 14765                           	opt stack 0
 14766  003A74                     _putch:
 14767                           	opt stack 26
 14768                           
 14769                           ;incstack = 0
 14770                           ;putch@c stored from wreg
 14771  003A74  6E11               	movwf	putch@c,c
 14772                           
 14773                           ;Main.c: 80: while (!TRMT);
 14774  003A76  D000               	goto	l514
 14775  003A78                     l514:
 14776  003A78  A2AC               	btfss	4012,1,c	;volatile
 14777  003A7A  D7FE               	goto	l514
 14778                           
 14779                           ;Main.c: 81: TXREG = c;
 14780  003A7C  C011  FFAD         	movff	putch@c,4013	;volatile
 14781  003A80  0012               	return		;funcret
 14782  003A82                     __end_of_putch:
 14783                           	opt stack 0
 14784                           tblptru	equ	0xFF8
 14785                           tblptrh	equ	0xFF7
 14786                           tblptrl	equ	0xFF6
 14787                           tablat	equ	0xFF5
 14788                           prodh	equ	0xFF4
 14789                           prodl	equ	0xFF3
 14790                           intcon	equ	0xFF2
 14791                           intcon2	equ	0xFF1
 14792                           postinc0	equ	0xFEE
 14793                           wreg	equ	0xFE8
 14794                           postdec1	equ	0xFE5
 14795                           plusw1	equ	0xFE3
 14796                           fsr1l	equ	0xFE1
 14797                           indf2	equ	0xFDF
 14798                           postinc2	equ	0xFDE
 14799                           postdec2	equ	0xFDD
 14800                           plusw2	equ	0xFDB
 14801                           fsr2h	equ	0xFDA
 14802                           fsr2l	equ	0xFD9
 14803                           status	equ	0xFD8
 14804                           
 14805 ;; *************** function _isdigit *****************
 14806 ;; Defined at:
 14807 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 14808 ;; Parameters:    Size  Location     Type
 14809 ;;  c               1    wreg     unsigned char 
 14810 ;; Auto vars:     Size  Location     Type
 14811 ;;  c               1   18[COMRAM] unsigned char 
 14812 ;; Return value:  Size  Location     Type
 14813 ;;		None               void
 14814 ;; Registers used:
 14815 ;;		wreg, status,2, status,0
 14816 ;; Tracked objects:
 14817 ;;		On entry : 0/0
 14818 ;;		On exit  : 0/0
 14819 ;;		Unchanged: 0/0
 14820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14823 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14824 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14825 ;;Total ram usage:        3 bytes
 14826 ;; Hardware stack levels used:    1
 14827 ;; Hardware stack levels required when called:    3
 14828 ;; This function calls:
 14829 ;;		Nothing
 14830 ;; This function is called by:
 14831 ;;		_printf
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           	psect	text82
 14836  00375E                     __ptext82:
 14837                           	opt stack 0
 14838  00375E                     _isdigit:
 14839                           	opt stack 26
 14840                           
 14841                           ;incstack = 0
 14842                           ;isdigit@c stored from wreg
 14843  00375E  6E13               	movwf	isdigit@c,c
 14844  003760  0E00               	movlw	0
 14845  003762  6E12               	movwf	_isdigit$2855,c
 14846  003764  0E3A               	movlw	58
 14847  003766  6013               	cpfslt	isdigit@c,c
 14848  003768  D006               	goto	l5206
 14849  00376A  0E2F               	movlw	47
 14850  00376C  6413               	cpfsgt	isdigit@c,c
 14851  00376E  D003               	goto	l5206
 14852  003770  0E01               	movlw	1
 14853  003772  6E12               	movwf	_isdigit$2855,c
 14854  003774  D000               	goto	l5206
 14855  003776                     l5206:
 14856  003776  C012  F011         	movff	_isdigit$2855,??_isdigit
 14857  00377A  3011               	rrcf	??_isdigit,w,c
 14858  00377C  D000               	goto	l1889
 14859  00377E                     l1889:
 14860  00377E  0012               	return		;funcret
 14861  003780                     __end_of_isdigit:
 14862                           	opt stack 0
 14863                           tblptru	equ	0xFF8
 14864                           tblptrh	equ	0xFF7
 14865                           tblptrl	equ	0xFF6
 14866                           tablat	equ	0xFF5
 14867                           prodh	equ	0xFF4
 14868                           prodl	equ	0xFF3
 14869                           intcon	equ	0xFF2
 14870                           intcon2	equ	0xFF1
 14871                           postinc0	equ	0xFEE
 14872                           wreg	equ	0xFE8
 14873                           postdec1	equ	0xFE5
 14874                           plusw1	equ	0xFE3
 14875                           fsr1l	equ	0xFE1
 14876                           indf2	equ	0xFDF
 14877                           postinc2	equ	0xFDE
 14878                           postdec2	equ	0xFDD
 14879                           plusw2	equ	0xFDB
 14880                           fsr2h	equ	0xFDA
 14881                           fsr2l	equ	0xFD9
 14882                           status	equ	0xFD8
 14883                           
 14884 ;; *************** function ___wmul *****************
 14885 ;; Defined at:
 14886 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14887 ;; Parameters:    Size  Location     Type
 14888 ;;  multiplier      2   16[COMRAM] unsigned int 
 14889 ;;  multiplicand    2   18[COMRAM] unsigned int 
 14890 ;; Auto vars:     Size  Location     Type
 14891 ;;  product         2   20[COMRAM] unsigned int 
 14892 ;; Return value:  Size  Location     Type
 14893 ;;                  2   16[COMRAM] unsigned int 
 14894 ;; Registers used:
 14895 ;;		wreg, status,2, status,0, prodl, prodh
 14896 ;; Tracked objects:
 14897 ;;		On entry : 0/0
 14898 ;;		On exit  : 0/0
 14899 ;;		Unchanged: 0/0
 14900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14904 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14905 ;;Total ram usage:        6 bytes
 14906 ;; Hardware stack levels used:    1
 14907 ;; Hardware stack levels required when called:    3
 14908 ;; This function calls:
 14909 ;;		Nothing
 14910 ;; This function is called by:
 14911 ;;		_get_duty_cycle
 14912 ;;		_get_RPM
 14913 ;;		_main
 14914 ;;		_delay_ms
 14915 ;;		_drawChar
 14916 ;;		_read_volt
 14917 ;;		_printf
 14918 ;; This function uses a non-reentrant model
 14919 ;;
 14920                           
 14921                           	psect	text83
 14922  0036EA                     __ptext83:
 14923                           	opt stack 0
 14924  0036EA                     ___wmul:
 14925                           	opt stack 26
 14926                           
 14927                           ;incstack = 0
 14928  0036EA  5011               	movf	___wmul@multiplier,w,c
 14929  0036EC  0213               	mulwf	___wmul@multiplicand,c
 14930  0036EE  CFF3 F015          	movff	prodl,___wmul@product
 14931  0036F2  CFF4 F016          	movff	prodh,___wmul@product+1
 14932  0036F6  5011               	movf	___wmul@multiplier,w,c
 14933  0036F8  0214               	mulwf	___wmul@multiplicand+1,c
 14934  0036FA  50F3               	movf	prodl,w,c
 14935  0036FC  2616               	addwf	___wmul@product+1,f,c
 14936  0036FE  5012               	movf	___wmul@multiplier+1,w,c
 14937  003700  0213               	mulwf	___wmul@multiplicand,c
 14938  003702  50F3               	movf	prodl,w,c
 14939  003704  2616               	addwf	___wmul@product+1,f,c
 14940  003706  C015  F011         	movff	___wmul@product,?___wmul
 14941  00370A  C016  F012         	movff	___wmul@product+1,?___wmul+1
 14942  00370E  D000               	goto	l1458
 14943  003710                     l1458:
 14944  003710  0012               	return		;funcret
 14945  003712                     __end_of___wmul:
 14946                           	opt stack 0
 14947                           tblptru	equ	0xFF8
 14948                           tblptrh	equ	0xFF7
 14949                           tblptrl	equ	0xFF6
 14950                           tablat	equ	0xFF5
 14951                           prodh	equ	0xFF4
 14952                           prodl	equ	0xFF3
 14953                           intcon	equ	0xFF2
 14954                           intcon2	equ	0xFF1
 14955                           postinc0	equ	0xFEE
 14956                           wreg	equ	0xFE8
 14957                           postdec1	equ	0xFE5
 14958                           plusw1	equ	0xFE3
 14959                           fsr1l	equ	0xFE1
 14960                           indf2	equ	0xFDF
 14961                           postinc2	equ	0xFDE
 14962                           postdec2	equ	0xFDD
 14963                           plusw2	equ	0xFDB
 14964                           fsr2h	equ	0xFDA
 14965                           fsr2l	equ	0xFD9
 14966                           status	equ	0xFD8
 14967                           
 14968 ;; *************** function ___lwmod *****************
 14969 ;; Defined at:
 14970 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 14971 ;; Parameters:    Size  Location     Type
 14972 ;;  dividend        2   23[COMRAM] unsigned int 
 14973 ;;  divisor         2   25[COMRAM] unsigned int 
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  counter         1   27[COMRAM] unsigned char 
 14976 ;; Return value:  Size  Location     Type
 14977 ;;                  2   23[COMRAM] unsigned int 
 14978 ;; Registers used:
 14979 ;;		wreg, status,2, status,0
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14985 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14988 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14989 ;;Total ram usage:        5 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:    3
 14992 ;; This function calls:
 14993 ;;		Nothing
 14994 ;; This function is called by:
 14995 ;;		_printf
 14996 ;; This function uses a non-reentrant model
 14997 ;;
 14998                           
 14999                           	psect	text84
 15000  003336                     __ptext84:
 15001                           	opt stack 0
 15002  003336                     ___lwmod:
 15003                           	opt stack 26
 15004                           
 15005                           ;incstack = 0
 15006  003336  501A               	movf	___lwmod@divisor,w,c
 15007  003338  101B               	iorwf	___lwmod@divisor+1,w,c
 15008  00333A  B4D8               	btfsc	status,2,c
 15009  00333C  D01D               	goto	l1991
 15010  00333E  0E01               	movlw	1
 15011  003340  6E1C               	movwf	___lwmod@counter,c
 15012  003342  D005               	goto	l5354
 15013  003344                     l5352:
 15014  003344  90D8               	bcf	status,0,c
 15015  003346  361A               	rlcf	___lwmod@divisor,f,c
 15016  003348  361B               	rlcf	___lwmod@divisor+1,f,c
 15017  00334A  2A1C               	incf	___lwmod@counter,f,c
 15018  00334C  D000               	goto	l5354
 15019  00334E                     l5354:
 15020  00334E  BE1B               	btfsc	___lwmod@divisor+1,7,c
 15021  003350  D002               	goto	l5356
 15022  003352  D7F8               	goto	l5352
 15023  003354  D000               	goto	l5356
 15024  003356                     l5356:
 15025  003356  501A               	movf	___lwmod@divisor,w,c
 15026  003358  5C18               	subwf	___lwmod@dividend,w,c
 15027  00335A  501B               	movf	___lwmod@divisor+1,w,c
 15028  00335C  5819               	subwfb	___lwmod@dividend+1,w,c
 15029  00335E  A0D8               	btfss	status,0,c
 15030  003360  D005               	goto	l5360
 15031  003362  501A               	movf	___lwmod@divisor,w,c
 15032  003364  5E18               	subwf	___lwmod@dividend,f,c
 15033  003366  501B               	movf	___lwmod@divisor+1,w,c
 15034  003368  5A19               	subwfb	___lwmod@dividend+1,f,c
 15035  00336A  D000               	goto	l5360
 15036  00336C                     l5360:
 15037  00336C  90D8               	bcf	status,0,c
 15038  00336E  321B               	rrcf	___lwmod@divisor+1,f,c
 15039  003370  321A               	rrcf	___lwmod@divisor,f,c
 15040  003372  2E1C               	decfsz	___lwmod@counter,f,c
 15041  003374  D7F0               	goto	l5356
 15042  003376  D000               	goto	l1991
 15043  003378                     l1991:
 15044  003378  C018  F018         	movff	___lwmod@dividend,?___lwmod
 15045  00337C  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 15046  003380  0012               	return		;funcret
 15047  003382                     __end_of___lwmod:
 15048                           	opt stack 0
 15049                           tblptru	equ	0xFF8
 15050                           tblptrh	equ	0xFF7
 15051                           tblptrl	equ	0xFF6
 15052                           tablat	equ	0xFF5
 15053                           prodh	equ	0xFF4
 15054                           prodl	equ	0xFF3
 15055                           intcon	equ	0xFF2
 15056                           intcon2	equ	0xFF1
 15057                           postinc0	equ	0xFEE
 15058                           wreg	equ	0xFE8
 15059                           postdec1	equ	0xFE5
 15060                           plusw1	equ	0xFE3
 15061                           fsr1l	equ	0xFE1
 15062                           indf2	equ	0xFDF
 15063                           postinc2	equ	0xFDE
 15064                           postdec2	equ	0xFDD
 15065                           plusw2	equ	0xFDB
 15066                           fsr2h	equ	0xFDA
 15067                           fsr2l	equ	0xFD9
 15068                           status	equ	0xFD8
 15069                           
 15070 ;; *************** function ___lwdiv *****************
 15071 ;; Defined at:
 15072 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 15073 ;; Parameters:    Size  Location     Type
 15074 ;;  dividend        2   16[COMRAM] unsigned int 
 15075 ;;  divisor         2   18[COMRAM] unsigned int 
 15076 ;; Auto vars:     Size  Location     Type
 15077 ;;  quotient        2   20[COMRAM] unsigned int 
 15078 ;;  counter         1   22[COMRAM] unsigned char 
 15079 ;; Return value:  Size  Location     Type
 15080 ;;                  2   16[COMRAM] unsigned int 
 15081 ;; Registers used:
 15082 ;;		wreg, status,2, status,0
 15083 ;; Tracked objects:
 15084 ;;		On entry : 0/0
 15085 ;;		On exit  : 0/0
 15086 ;;		Unchanged: 0/0
 15087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15089 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15091 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;Total ram usage:        7 bytes
 15093 ;; Hardware stack levels used:    1
 15094 ;; Hardware stack levels required when called:    3
 15095 ;; This function calls:
 15096 ;;		Nothing
 15097 ;; This function is called by:
 15098 ;;		_printf
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           	psect	text85
 15103  002FAC                     __ptext85:
 15104                           	opt stack 0
 15105  002FAC                     ___lwdiv:
 15106                           	opt stack 26
 15107                           
 15108                           ;incstack = 0
 15109  002FAC  0E00               	movlw	0
 15110  002FAE  6E16               	movwf	___lwdiv@quotient+1,c
 15111  002FB0  0E00               	movlw	0
 15112  002FB2  6E15               	movwf	___lwdiv@quotient,c
 15113  002FB4  5013               	movf	___lwdiv@divisor,w,c
 15114  002FB6  1014               	iorwf	___lwdiv@divisor+1,w,c
 15115  002FB8  B4D8               	btfsc	status,2,c
 15116  002FBA  D021               	goto	l1981
 15117  002FBC  0E01               	movlw	1
 15118  002FBE  6E17               	movwf	___lwdiv@counter,c
 15119  002FC0  D005               	goto	l5334
 15120  002FC2                     l5332:
 15121  002FC2  90D8               	bcf	status,0,c
 15122  002FC4  3613               	rlcf	___lwdiv@divisor,f,c
 15123  002FC6  3614               	rlcf	___lwdiv@divisor+1,f,c
 15124  002FC8  2A17               	incf	___lwdiv@counter,f,c
 15125  002FCA  D000               	goto	l5334
 15126  002FCC                     l5334:
 15127  002FCC  BE14               	btfsc	___lwdiv@divisor+1,7,c
 15128  002FCE  D002               	goto	l5336
 15129  002FD0  D7F8               	goto	l5332
 15130  002FD2  D000               	goto	l5336
 15131  002FD4                     l5336:
 15132  002FD4  90D8               	bcf	status,0,c
 15133  002FD6  3615               	rlcf	___lwdiv@quotient,f,c
 15134  002FD8  3616               	rlcf	___lwdiv@quotient+1,f,c
 15135  002FDA  5013               	movf	___lwdiv@divisor,w,c
 15136  002FDC  5C11               	subwf	___lwdiv@dividend,w,c
 15137  002FDE  5014               	movf	___lwdiv@divisor+1,w,c
 15138  002FE0  5812               	subwfb	___lwdiv@dividend+1,w,c
 15139  002FE2  A0D8               	btfss	status,0,c
 15140  002FE4  D006               	goto	l5344
 15141  002FE6  5013               	movf	___lwdiv@divisor,w,c
 15142  002FE8  5E11               	subwf	___lwdiv@dividend,f,c
 15143  002FEA  5014               	movf	___lwdiv@divisor+1,w,c
 15144  002FEC  5A12               	subwfb	___lwdiv@dividend+1,f,c
 15145  002FEE  8015               	bsf	___lwdiv@quotient,0,c
 15146  002FF0  D000               	goto	l5344
 15147  002FF2                     l5344:
 15148  002FF2  90D8               	bcf	status,0,c
 15149  002FF4  3214               	rrcf	___lwdiv@divisor+1,f,c
 15150  002FF6  3213               	rrcf	___lwdiv@divisor,f,c
 15151  002FF8  2E17               	decfsz	___lwdiv@counter,f,c
 15152  002FFA  D7EC               	goto	l5336
 15153  002FFC  D000               	goto	l1981
 15154  002FFE                     l1981:
 15155  002FFE  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
 15156  003002  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15157  003006  0012               	return		;funcret
 15158  003008                     __end_of___lwdiv:
 15159                           	opt stack 0
 15160                           tblptru	equ	0xFF8
 15161                           tblptrh	equ	0xFF7
 15162                           tblptrl	equ	0xFF6
 15163                           tablat	equ	0xFF5
 15164                           prodh	equ	0xFF4
 15165                           prodl	equ	0xFF3
 15166                           intcon	equ	0xFF2
 15167                           intcon2	equ	0xFF1
 15168                           postinc0	equ	0xFEE
 15169                           wreg	equ	0xFE8
 15170                           postdec1	equ	0xFE5
 15171                           plusw1	equ	0xFE3
 15172                           fsr1l	equ	0xFE1
 15173                           indf2	equ	0xFDF
 15174                           postinc2	equ	0xFDE
 15175                           postdec2	equ	0xFDD
 15176                           plusw2	equ	0xFDB
 15177                           fsr2h	equ	0xFDA
 15178                           fsr2l	equ	0xFD9
 15179                           status	equ	0xFD8
 15180                           
 15181 ;; *************** function _do_update_pwm *****************
 15182 ;; Defined at:
 15183 ;;		line 133 in file "utils.c"
 15184 ;; Parameters:    Size  Location     Type
 15185 ;;  duty_cycle      1    wreg     unsigned char 
 15186 ;; Auto vars:     Size  Location     Type
 15187 ;;  duty_cycle      1    3[BANK1 ] unsigned char 
 15188 ;;  dc_f            3    0[BANK1 ] float 
 15189 ;;  dc_I            2    4[BANK1 ] int 
 15190 ;; Return value:  Size  Location     Type
 15191 ;;		None               void
 15192 ;; Registers used:
 15193 ;;		wreg, status,2, status,0, cstack
 15194 ;; Tracked objects:
 15195 ;;		On entry : 0/0
 15196 ;;		On exit  : 0/0
 15197 ;;		Unchanged: 0/0
 15198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15200 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15201 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15202 ;;      Totals:         3       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15203 ;;Total ram usage:        9 bytes
 15204 ;; Hardware stack levels used:    1
 15205 ;; Hardware stack levels required when called:    5
 15206 ;; This function calls:
 15207 ;;		___ftdiv
 15208 ;;		___ftmul
 15209 ;;		___fttol
 15210 ;;		___lbtoft
 15211 ;; This function is called by:
 15212 ;;		_Monitor_Heater
 15213 ;;		_Turn_Off_Fan
 15214 ;;		_Turn_On_Fan
 15215 ;;		_Do_Beep
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           	psect	text86
 15220  002572                     __ptext86:
 15221                           	opt stack 0
 15222  002572                     _do_update_pwm:
 15223                           	opt stack 23
 15224                           
 15225                           ;incstack = 0
 15226                           ;do_update_pwm@duty_cycle stored from wreg
 15227  002572  0101               	movlb	1	; () banked
 15228  002574  6F4D               	movwf	do_update_pwm@duty_cycle& (0+255),b
 15229                           
 15230                           ; BSR set to: 1
 15231                           ;utils.c: 135: float dc_f;
 15232                           ;utils.c: 136: int dc_I;
 15233                           ;utils.c: 137: PR2 = 0b00000100 ;
 15234  002576  0E04               	movlw	4
 15235  002578  6ECB               	movwf	4043,c	;volatile
 15236                           
 15237                           ;utils.c: 138: T2CON = 0b00000111 ;
 15238  00257A  0E07               	movlw	7
 15239  00257C  6ECA               	movwf	4042,c	;volatile
 15240                           
 15241                           ; BSR set to: 1
 15242                           ;utils.c: 139: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 15243  00257E  0E00               	movlw	0
 15244  002580  6E20               	movwf	___ftmul@f2,c
 15245  002582  0E80               	movlw	128
 15246  002584  6E21               	movwf	___ftmul@f2+1,c
 15247  002586  0E40               	movlw	64
 15248  002588  6E22               	movwf	___ftmul@f2+2,c
 15249  00258A  0101               	movlb	1	; () banked
 15250  00258C  514D               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 15251  00258E  EC9C  F01B         	call	___lbtoft
 15252  002592  C019  F01D         	movff	?___lbtoft,___ftmul@f1
 15253  002596  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
 15254  00259A  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
 15255  00259E  EC51  F00E         	call	___ftmul	;wreg free
 15256  0025A2  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
 15257  0025A6  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
 15258  0025AA  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
 15259  0025AE  0E00               	movlw	0
 15260  0025B0  6E2F               	movwf	___ftdiv@f2,c
 15261  0025B2  0EA0               	movlw	160
 15262  0025B4  6E30               	movwf	___ftdiv@f2+1,c
 15263  0025B6  0E41               	movlw	65
 15264  0025B8  6E31               	movwf	___ftdiv@f2+2,c
 15265  0025BA  ECAA  F010         	call	___ftdiv	;wreg free
 15266  0025BE  C02C  F14A         	movff	?___ftdiv,do_update_pwm@dc_f
 15267  0025C2  C02D  F14B         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 15268  0025C6  C02E  F14C         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 15269                           
 15270                           ;utils.c: 140: dc_I = (int) dc_f;
 15271  0025CA  C14A  F011         	movff	do_update_pwm@dc_f,___fttol@f1
 15272  0025CE  C14B  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 15273  0025D2  C14C  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 15274  0025D6  EC37  F010         	call	___fttol	;wreg free
 15275  0025DA  C011  F14E         	movff	?___fttol,do_update_pwm@dc_I
 15276  0025DE  C012  F14F         	movff	?___fttol+1,do_update_pwm@dc_I+1
 15277                           
 15278                           ;utils.c: 141: if (dc_I > duty_cycle) dc_I++;
 15279  0025E2  0101               	movlb	1	; () banked
 15280  0025E4  514D               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 15281  0025E6  6E3B               	movwf	??_do_update_pwm& (0+255),c
 15282  0025E8  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
 15283  0025EA  0101               	movlb	1	; () banked
 15284  0025EC  514E               	movf	do_update_pwm@dc_I& (0+255),w,b
 15285  0025EE  5C3B               	subwf	??_do_update_pwm,w,c
 15286  0025F0  503C               	movf	??_do_update_pwm+1,w,c
 15287  0025F2  0A80               	xorlw	128
 15288  0025F4  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
 15289  0025F6  0101               	movlb	1	; () banked
 15290  0025F8  514F               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
 15291  0025FA  0A80               	xorlw	128
 15292  0025FC  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 15293  0025FE  B0D8               	btfsc	status,0,c
 15294  002600  D004               	goto	l8338
 15295                           
 15296                           ; BSR set to: 1
 15297  002602  0101               	movlb	1	; () banked
 15298  002604  4B4E               	infsnz	do_update_pwm@dc_I& (0+255),f,b
 15299  002606  2B4F               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
 15300  002608  D000               	goto	l8338
 15301  00260A                     l8338:
 15302                           
 15303                           ; BSR set to: 1
 15304                           ;utils.c: 142: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 15305  00260A  C14E  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 15306  00260E  0E03               	movlw	3
 15307  002610  163B               	andwf	??_do_update_pwm,f,c
 15308  002612  383B               	swapf	??_do_update_pwm,w,c
 15309  002614  0BF0               	andlw	240
 15310  002616  090C               	iorlw	12
 15311  002618  6EBD               	movwf	4029,c	;volatile
 15312                           
 15313                           ; BSR set to: 1
 15314                           ;utils.c: 143: CCPR1L = (dc_I) >> 2;
 15315  00261A  C14E  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 15316  00261E  C14F  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 15317  002622  343C               	rlcf	??_do_update_pwm+1,w,c
 15318  002624  323C               	rrcf	??_do_update_pwm+1,f,c
 15319  002626  323B               	rrcf	??_do_update_pwm,f,c
 15320  002628  343C               	rlcf	??_do_update_pwm+1,w,c
 15321  00262A  323C               	rrcf	??_do_update_pwm+1,f,c
 15322  00262C  323B               	rrcf	??_do_update_pwm,f,c
 15323  00262E  503B               	movf	??_do_update_pwm,w,c
 15324  002630  6EBE               	movwf	4030,c	;volatile
 15325                           
 15326                           ; BSR set to: 1
 15327  002632  0012               	return		;funcret
 15328  002634                     __end_of_do_update_pwm:
 15329                           	opt stack 0
 15330                           tblptru	equ	0xFF8
 15331                           tblptrh	equ	0xFF7
 15332                           tblptrl	equ	0xFF6
 15333                           tablat	equ	0xFF5
 15334                           prodh	equ	0xFF4
 15335                           prodl	equ	0xFF3
 15336                           intcon	equ	0xFF2
 15337                           intcon2	equ	0xFF1
 15338                           postinc0	equ	0xFEE
 15339                           wreg	equ	0xFE8
 15340                           postdec1	equ	0xFE5
 15341                           plusw1	equ	0xFE3
 15342                           fsr1l	equ	0xFE1
 15343                           indf2	equ	0xFDF
 15344                           postinc2	equ	0xFDE
 15345                           postdec2	equ	0xFDD
 15346                           plusw2	equ	0xFDB
 15347                           fsr2h	equ	0xFDA
 15348                           fsr2l	equ	0xFD9
 15349                           status	equ	0xFD8
 15350                           
 15351 ;; *************** function ___lbtoft *****************
 15352 ;; Defined at:
 15353 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 15354 ;; Parameters:    Size  Location     Type
 15355 ;;  c               1    wreg     unsigned char 
 15356 ;; Auto vars:     Size  Location     Type
 15357 ;;  c               1   27[COMRAM] unsigned char 
 15358 ;; Return value:  Size  Location     Type
 15359 ;;                  3   24[COMRAM] float 
 15360 ;; Registers used:
 15361 ;;		wreg, status,2, status,0, cstack
 15362 ;; Tracked objects:
 15363 ;;		On entry : 0/0
 15364 ;;		On exit  : 0/0
 15365 ;;		Unchanged: 0/0
 15366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15367 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15370 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15371 ;;Total ram usage:        4 bytes
 15372 ;; Hardware stack levels used:    1
 15373 ;; Hardware stack levels required when called:    4
 15374 ;; This function calls:
 15375 ;;		___ftpack
 15376 ;; This function is called by:
 15377 ;;		_do_update_pwm
 15378 ;; This function uses a non-reentrant model
 15379 ;;
 15380                           
 15381                           	psect	text87
 15382  003738                     __ptext87:
 15383                           	opt stack 0
 15384  003738                     ___lbtoft:
 15385                           	opt stack 23
 15386                           
 15387                           ; BSR set to: 1
 15388                           ;incstack = 0
 15389                           ;___lbtoft@c stored from wreg
 15390  003738  6E1C               	movwf	___lbtoft@c,c
 15391  00373A  501C               	movf	___lbtoft@c,w,c
 15392  00373C  6E11               	movwf	___ftpack@arg,c
 15393  00373E  6A12               	clrf	___ftpack@arg+1,c
 15394  003740  6A13               	clrf	___ftpack@arg+2,c
 15395  003742  0E8E               	movlw	142
 15396  003744  6E14               	movwf	___ftpack@exp,c
 15397  003746  0E00               	movlw	0
 15398  003748  6E15               	movwf	___ftpack@sign,c
 15399  00374A  EC56  F012         	call	___ftpack	;wreg free
 15400  00374E  C011  F019         	movff	?___ftpack,?___lbtoft
 15401  003752  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 15402  003756  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 15403  00375A  D000               	goto	l1915
 15404  00375C                     l1915:
 15405  00375C  0012               	return		;funcret
 15406  00375E                     __end_of___lbtoft:
 15407                           	opt stack 0
 15408                           tblptru	equ	0xFF8
 15409                           tblptrh	equ	0xFF7
 15410                           tblptrl	equ	0xFF6
 15411                           tablat	equ	0xFF5
 15412                           prodh	equ	0xFF4
 15413                           prodl	equ	0xFF3
 15414                           intcon	equ	0xFF2
 15415                           intcon2	equ	0xFF1
 15416                           postinc0	equ	0xFEE
 15417                           wreg	equ	0xFE8
 15418                           postdec1	equ	0xFE5
 15419                           plusw1	equ	0xFE3
 15420                           fsr1l	equ	0xFE1
 15421                           indf2	equ	0xFDF
 15422                           postinc2	equ	0xFDE
 15423                           postdec2	equ	0xFDD
 15424                           plusw2	equ	0xFDB
 15425                           fsr2h	equ	0xFDA
 15426                           fsr2l	equ	0xFD9
 15427                           status	equ	0xFD8
 15428                           
 15429 ;; *************** function ___fttol *****************
 15430 ;; Defined at:
 15431 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 15432 ;; Parameters:    Size  Location     Type
 15433 ;;  f1              3   16[COMRAM] float 
 15434 ;; Auto vars:     Size  Location     Type
 15435 ;;  lval            4   26[COMRAM] unsigned long 
 15436 ;;  exp1            1   30[COMRAM] unsigned char 
 15437 ;;  sign1           1   25[COMRAM] unsigned char 
 15438 ;; Return value:  Size  Location     Type
 15439 ;;                  4   16[COMRAM] long 
 15440 ;; Registers used:
 15441 ;;		wreg, status,2, status,0
 15442 ;; Tracked objects:
 15443 ;;		On entry : 0/0
 15444 ;;		On exit  : 0/0
 15445 ;;		Unchanged: 0/0
 15446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15447 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15448 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15449 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15450 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;Total ram usage:       15 bytes
 15452 ;; Hardware stack levels used:    1
 15453 ;; Hardware stack levels required when called:    3
 15454 ;; This function calls:
 15455 ;;		Nothing
 15456 ;; This function is called by:
 15457 ;;		_Update_Screen
 15458 ;;		_do_update_pwm
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           	psect	text88
 15463  00206E                     __ptext88:
 15464                           	opt stack 0
 15465  00206E                     ___fttol:
 15466                           	opt stack 26
 15467                           
 15468                           ;incstack = 0
 15469  00206E  C013  F015         	movff	___fttol@f1+2,??___fttol
 15470  002072  6A16               	clrf	(??___fttol+1)& (0+255),c
 15471  002074  6A17               	clrf	(??___fttol+2)& (0+255),c
 15472  002076  3412               	rlcf	___fttol@f1+1,w,c
 15473  002078  3615               	rlcf	??___fttol& (0+255),f,c
 15474  00207A  E301               	bnc	u5961
 15475  00207C  8016               	bsf	(??___fttol+1)& (0+255),0,c
 15476  00207E                     u5961:
 15477  00207E  5015               	movf	??___fttol,w,c
 15478  002080  6E1F               	movwf	___fttol@exp1,c
 15479  002082  501F               	movf	___fttol@exp1,w,c
 15480  002084  A4D8               	btfss	status,2,c
 15481  002086  D002               	goto	l8284
 15482  002088  D039               	goto	l8308
 15483  00208A  D063               	goto	l1874
 15484  00208C                     l8284:
 15485  00208C  0E17               	movlw	23
 15486  00208E  6E15               	movwf	??___fttol& (0+255),c
 15487  002090  C011  F016         	movff	___fttol@f1,??___fttol+1
 15488  002094  C012  F017         	movff	___fttol@f1+1,??___fttol+2
 15489  002098  C013  F018         	movff	___fttol@f1+2,??___fttol+3
 15490  00209C  2815               	incf	??___fttol,w,c
 15491  00209E  6E19               	movwf	(??___fttol+4)& (0+255),c
 15492  0020A0  D004               	goto	u5980
 15493  0020A2                     u5985:
 15494  0020A2  90D8               	bcf	status,0,c
 15495  0020A4  3218               	rrcf	??___fttol+3,f,c
 15496  0020A6  3217               	rrcf	??___fttol+2,f,c
 15497  0020A8  3216               	rrcf	??___fttol+1,f,c
 15498  0020AA                     u5980:
 15499  0020AA  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
 15500  0020AC  D7FA               	goto	u5985
 15501  0020AE  5016               	movf	??___fttol+1,w,c
 15502  0020B0  6E1A               	movwf	___fttol@sign1,c
 15503  0020B2  8E12               	bsf	___fttol@f1+1,7,c
 15504  0020B4  0EFF               	movlw	255
 15505  0020B6  1611               	andwf	___fttol@f1,f,c
 15506  0020B8  0EFF               	movlw	255
 15507  0020BA  1612               	andwf	___fttol@f1+1,f,c
 15508  0020BC  0E00               	movlw	0
 15509  0020BE  1613               	andwf	___fttol@f1+2,f,c
 15510  0020C0  5011               	movf	___fttol@f1,w,c
 15511  0020C2  6E1B               	movwf	___fttol@lval,c
 15512  0020C4  5012               	movf	___fttol@f1+1,w,c
 15513  0020C6  6E1C               	movwf	___fttol@lval+1,c
 15514  0020C8  5013               	movf	___fttol@f1+2,w,c
 15515  0020CA  6E1D               	movwf	___fttol@lval+2,c
 15516  0020CC  6A1E               	clrf	___fttol@lval+3,c
 15517  0020CE  0E8E               	movlw	142
 15518  0020D0  5E1F               	subwf	___fttol@exp1,f,c
 15519  0020D2  AE1F               	btfss	___fttol@exp1,7,c
 15520  0020D4  D010               	goto	l8306
 15521  0020D6  501F               	movf	___fttol@exp1,w,c
 15522  0020D8  0A80               	xorlw	128
 15523  0020DA  0F8F               	addlw	143
 15524  0020DC  B0D8               	btfsc	status,0,c
 15525  0020DE  D003               	goto	l8302
 15526  0020E0  D00D               	goto	l8308
 15527  0020E2  D037               	goto	l1874
 15528  0020E4  D000               	goto	l8302
 15529  0020E6                     l8302:
 15530  0020E6  90D8               	bcf	status,0,c
 15531  0020E8  321E               	rrcf	___fttol@lval+3,f,c
 15532  0020EA  321D               	rrcf	___fttol@lval+2,f,c
 15533  0020EC  321C               	rrcf	___fttol@lval+1,f,c
 15534  0020EE  321B               	rrcf	___fttol@lval,f,c
 15535  0020F0  3E1F               	incfsz	___fttol@exp1,f,c
 15536  0020F2  D7F9               	goto	l8302
 15537  0020F4  D019               	goto	l8316
 15538  0020F6                     l8306:
 15539  0020F6  0E17               	movlw	23
 15540  0020F8  641F               	cpfsgt	___fttol@exp1,c
 15541  0020FA  D011               	goto	l8314
 15542  0020FC                     l8308:
 15543  0020FC  0E00               	movlw	0
 15544  0020FE  6E11               	movwf	?___fttol,c
 15545  002100  0E00               	movlw	0
 15546  002102  6E12               	movwf	?___fttol+1,c
 15547  002104  0E00               	movlw	0
 15548  002106  6E13               	movwf	?___fttol+2,c
 15549  002108  0E00               	movlw	0
 15550  00210A  6E14               	movwf	?___fttol+3,c
 15551  00210C  D022               	goto	l1874
 15552  00210E  D007               	goto	l8314
 15553  002110                     l8312:
 15554  002110  90D8               	bcf	status,0,c
 15555  002112  361B               	rlcf	___fttol@lval,f,c
 15556  002114  361C               	rlcf	___fttol@lval+1,f,c
 15557  002116  361D               	rlcf	___fttol@lval+2,f,c
 15558  002118  361E               	rlcf	___fttol@lval+3,f,c
 15559  00211A  061F               	decf	___fttol@exp1,f,c
 15560  00211C  D000               	goto	l8314
 15561  00211E                     l8314:
 15562  00211E  501F               	movf	___fttol@exp1,w,c
 15563  002120  B4D8               	btfsc	status,2,c
 15564  002122  D002               	goto	l8316
 15565  002124  D7F5               	goto	l8312
 15566  002126  D000               	goto	l8316
 15567  002128                     l8316:
 15568  002128  501A               	movf	___fttol@sign1,w,c
 15569  00212A  B4D8               	btfsc	status,2,c
 15570  00212C  D009               	goto	l8320
 15571  00212E  1E1E               	comf	___fttol@lval+3,f,c
 15572  002130  1E1D               	comf	___fttol@lval+2,f,c
 15573  002132  1E1C               	comf	___fttol@lval+1,f,c
 15574  002134  6C1B               	negf	___fttol@lval,c
 15575  002136  0E00               	movlw	0
 15576  002138  221C               	addwfc	___fttol@lval+1,f,c
 15577  00213A  221D               	addwfc	___fttol@lval+2,f,c
 15578  00213C  221E               	addwfc	___fttol@lval+3,f,c
 15579  00213E  D000               	goto	l8320
 15580  002140                     l8320:
 15581  002140  C01B  F011         	movff	___fttol@lval,?___fttol
 15582  002144  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
 15583  002148  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
 15584  00214C  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
 15585  002150  D000               	goto	l1874
 15586  002152                     l1874:
 15587  002152  0012               	return		;funcret
 15588  002154                     __end_of___fttol:
 15589                           	opt stack 0
 15590                           tblptru	equ	0xFF8
 15591                           tblptrh	equ	0xFF7
 15592                           tblptrl	equ	0xFF6
 15593                           tablat	equ	0xFF5
 15594                           prodh	equ	0xFF4
 15595                           prodl	equ	0xFF3
 15596                           intcon	equ	0xFF2
 15597                           intcon2	equ	0xFF1
 15598                           postinc0	equ	0xFEE
 15599                           wreg	equ	0xFE8
 15600                           postdec1	equ	0xFE5
 15601                           plusw1	equ	0xFE3
 15602                           fsr1l	equ	0xFE1
 15603                           indf2	equ	0xFDF
 15604                           postinc2	equ	0xFDE
 15605                           postdec2	equ	0xFDD
 15606                           plusw2	equ	0xFDB
 15607                           fsr2h	equ	0xFDA
 15608                           fsr2l	equ	0xFD9
 15609                           status	equ	0xFD8
 15610                           
 15611 ;; *************** function ___ftmul *****************
 15612 ;; Defined at:
 15613 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 15614 ;; Parameters:    Size  Location     Type
 15615 ;;  f1              3   28[COMRAM] float 
 15616 ;;  f2              3   31[COMRAM] float 
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;  f3_as_produc    3   38[COMRAM] unsigned um
 15619 ;;  sign            1   42[COMRAM] unsigned char 
 15620 ;;  cntr            1   41[COMRAM] unsigned char 
 15621 ;;  exp             1   37[COMRAM] unsigned char 
 15622 ;; Return value:  Size  Location     Type
 15623 ;;                  3   28[COMRAM] float 
 15624 ;; Registers used:
 15625 ;;		wreg, status,2, status,0, cstack
 15626 ;; Tracked objects:
 15627 ;;		On entry : 0/0
 15628 ;;		On exit  : 0/0
 15629 ;;		Unchanged: 0/0
 15630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15631 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15632 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15633 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15634 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15635 ;;Total ram usage:       15 bytes
 15636 ;; Hardware stack levels used:    1
 15637 ;; Hardware stack levels required when called:    4
 15638 ;; This function calls:
 15639 ;;		___ftpack
 15640 ;; This function is called by:
 15641 ;;		_do_update_pwm
 15642 ;; This function uses a non-reentrant model
 15643 ;;
 15644                           
 15645                           	psect	text89
 15646  001CA2                     __ptext89:
 15647                           	opt stack 0
 15648  001CA2                     ___ftmul:
 15649                           	opt stack 23
 15650                           
 15651                           ;incstack = 0
 15652  001CA2  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
 15653  001CA6  6A24               	clrf	(??___ftmul+1)& (0+255),c
 15654  001CA8  6A25               	clrf	(??___ftmul+2)& (0+255),c
 15655  001CAA  341E               	rlcf	___ftmul@f1+1,w,c
 15656  001CAC  3623               	rlcf	??___ftmul& (0+255),f,c
 15657  001CAE  E301               	bnc	u5901
 15658  001CB0  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 15659  001CB2                     u5901:
 15660  001CB2  5023               	movf	??___ftmul,w,c
 15661  001CB4  6E26               	movwf	___ftmul@exp,c
 15662  001CB6  5026               	movf	___ftmul@exp,w,c
 15663  001CB8  A4D8               	btfss	status,2,c
 15664  001CBA  D002               	goto	l8236
 15665  001CBC  D00E               	goto	l8238
 15666  001CBE  D06C               	goto	l1853
 15667  001CC0                     l8236:
 15668  001CC0  C022  F023         	movff	___ftmul@f2+2,??___ftmul
 15669  001CC4  6A24               	clrf	(??___ftmul+1)& (0+255),c
 15670  001CC6  6A25               	clrf	(??___ftmul+2)& (0+255),c
 15671  001CC8  3421               	rlcf	___ftmul@f2+1,w,c
 15672  001CCA  3623               	rlcf	??___ftmul& (0+255),f,c
 15673  001CCC  E301               	bnc	u5921
 15674  001CCE  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 15675  001CD0                     u5921:
 15676  001CD0  5023               	movf	??___ftmul,w,c
 15677  001CD2  6E2B               	movwf	___ftmul@sign,c
 15678  001CD4  502B               	movf	___ftmul@sign,w,c
 15679  001CD6  A4D8               	btfss	status,2,c
 15680  001CD8  D007               	goto	l8242
 15681  001CDA                     l8238:
 15682  001CDA  0E00               	movlw	0
 15683  001CDC  6E1D               	movwf	?___ftmul,c
 15684  001CDE  0E00               	movlw	0
 15685  001CE0  6E1E               	movwf	?___ftmul+1,c
 15686  001CE2  0E00               	movlw	0
 15687  001CE4  6E1F               	movwf	?___ftmul+2,c
 15688  001CE6  D058               	goto	l1853
 15689  001CE8                     l8242:
 15690  001CE8  502B               	movf	___ftmul@sign,w,c
 15691  001CEA  0F7B               	addlw	123
 15692  001CEC  2626               	addwf	___ftmul@exp,f,c
 15693  001CEE  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
 15694  001CF2  5022               	movf	___ftmul@f2+2,w,c
 15695  001CF4  1A2B               	xorwf	___ftmul@sign,f,c
 15696  001CF6  0E80               	movlw	128
 15697  001CF8  162B               	andwf	___ftmul@sign,f,c
 15698  001CFA  8E1E               	bsf	___ftmul@f1+1,7,c
 15699  001CFC  8E21               	bsf	___ftmul@f2+1,7,c
 15700  001CFE  0EFF               	movlw	255
 15701  001D00  1620               	andwf	___ftmul@f2,f,c
 15702  001D02  0EFF               	movlw	255
 15703  001D04  1621               	andwf	___ftmul@f2+1,f,c
 15704  001D06  0E00               	movlw	0
 15705  001D08  1622               	andwf	___ftmul@f2+2,f,c
 15706  001D0A  0E00               	movlw	0
 15707  001D0C  6E27               	movwf	___ftmul@f3_as_product,c
 15708  001D0E  0E00               	movlw	0
 15709  001D10  6E28               	movwf	___ftmul@f3_as_product+1,c
 15710  001D12  0E00               	movlw	0
 15711  001D14  6E29               	movwf	___ftmul@f3_as_product+2,c
 15712  001D16  0E07               	movlw	7
 15713  001D18  6E2A               	movwf	___ftmul@cntr,c
 15714  001D1A  D000               	goto	l8256
 15715  001D1C                     l8256:
 15716  001D1C  A01D               	btfss	___ftmul@f1,0,c
 15717  001D1E  D007               	goto	l8260
 15718  001D20  5020               	movf	___ftmul@f2,w,c
 15719  001D22  2627               	addwf	___ftmul@f3_as_product,f,c
 15720  001D24  5021               	movf	___ftmul@f2+1,w,c
 15721  001D26  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 15722  001D28  5022               	movf	___ftmul@f2+2,w,c
 15723  001D2A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 15724  001D2C  D000               	goto	l8260
 15725  001D2E                     l8260:
 15726  001D2E  90D8               	bcf	status,0,c
 15727  001D30  321F               	rrcf	___ftmul@f1+2,f,c
 15728  001D32  321E               	rrcf	___ftmul@f1+1,f,c
 15729  001D34  321D               	rrcf	___ftmul@f1,f,c
 15730  001D36  90D8               	bcf	status,0,c
 15731  001D38  3620               	rlcf	___ftmul@f2,f,c
 15732  001D3A  3621               	rlcf	___ftmul@f2+1,f,c
 15733  001D3C  3622               	rlcf	___ftmul@f2+2,f,c
 15734  001D3E  2E2A               	decfsz	___ftmul@cntr,f,c
 15735  001D40  D7ED               	goto	l8256
 15736  001D42  D000               	goto	l8264
 15737  001D44                     l8264:
 15738  001D44  0E09               	movlw	9
 15739  001D46  6E2A               	movwf	___ftmul@cntr,c
 15740  001D48  D000               	goto	l8266
 15741  001D4A                     l8266:
 15742  001D4A  A01D               	btfss	___ftmul@f1,0,c
 15743  001D4C  D007               	goto	l8270
 15744  001D4E  5020               	movf	___ftmul@f2,w,c
 15745  001D50  2627               	addwf	___ftmul@f3_as_product,f,c
 15746  001D52  5021               	movf	___ftmul@f2+1,w,c
 15747  001D54  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 15748  001D56  5022               	movf	___ftmul@f2+2,w,c
 15749  001D58  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 15750  001D5A  D000               	goto	l8270
 15751  001D5C                     l8270:
 15752  001D5C  90D8               	bcf	status,0,c
 15753  001D5E  321F               	rrcf	___ftmul@f1+2,f,c
 15754  001D60  321E               	rrcf	___ftmul@f1+1,f,c
 15755  001D62  321D               	rrcf	___ftmul@f1,f,c
 15756  001D64  90D8               	bcf	status,0,c
 15757  001D66  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 15758  001D68  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 15759  001D6A  3227               	rrcf	___ftmul@f3_as_product,f,c
 15760  001D6C  2E2A               	decfsz	___ftmul@cntr,f,c
 15761  001D6E  D7ED               	goto	l8266
 15762  001D70  D000               	goto	l8274
 15763  001D72                     l8274:
 15764  001D72  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 15765  001D76  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 15766  001D7A  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 15767  001D7E  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 15768  001D82  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 15769  001D86  EC56  F012         	call	___ftpack	;wreg free
 15770  001D8A  C011  F01D         	movff	?___ftpack,?___ftmul
 15771  001D8E  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 15772  001D92  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 15773  001D96  D000               	goto	l1853
 15774  001D98                     l1853:
 15775  001D98  0012               	return		;funcret
 15776  001D9A                     __end_of___ftmul:
 15777                           	opt stack 0
 15778                           tblptru	equ	0xFF8
 15779                           tblptrh	equ	0xFF7
 15780                           tblptrl	equ	0xFF6
 15781                           tablat	equ	0xFF5
 15782                           prodh	equ	0xFF4
 15783                           prodl	equ	0xFF3
 15784                           intcon	equ	0xFF2
 15785                           intcon2	equ	0xFF1
 15786                           postinc0	equ	0xFEE
 15787                           wreg	equ	0xFE8
 15788                           postdec1	equ	0xFE5
 15789                           plusw1	equ	0xFE3
 15790                           fsr1l	equ	0xFE1
 15791                           indf2	equ	0xFDF
 15792                           postinc2	equ	0xFDE
 15793                           postdec2	equ	0xFDD
 15794                           plusw2	equ	0xFDB
 15795                           fsr2h	equ	0xFDA
 15796                           fsr2l	equ	0xFD9
 15797                           status	equ	0xFD8
 15798                           
 15799 ;; *************** function ___ftdiv *****************
 15800 ;; Defined at:
 15801 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 15802 ;; Parameters:    Size  Location     Type
 15803 ;;  f1              3   43[COMRAM] float 
 15804 ;;  f2              3   46[COMRAM] float 
 15805 ;; Auto vars:     Size  Location     Type
 15806 ;;  f3              3   53[COMRAM] float 
 15807 ;;  sign            1   57[COMRAM] unsigned char 
 15808 ;;  exp             1   56[COMRAM] unsigned char 
 15809 ;;  cntr            1   52[COMRAM] unsigned char 
 15810 ;; Return value:  Size  Location     Type
 15811 ;;                  3   43[COMRAM] float 
 15812 ;; Registers used:
 15813 ;;		wreg, status,2, status,0, cstack
 15814 ;; Tracked objects:
 15815 ;;		On entry : 0/0
 15816 ;;		On exit  : 0/0
 15817 ;;		Unchanged: 0/0
 15818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15819 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15820 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15821 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15822 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15823 ;;Total ram usage:       15 bytes
 15824 ;; Hardware stack levels used:    1
 15825 ;; Hardware stack levels required when called:    4
 15826 ;; This function calls:
 15827 ;;		___ftpack
 15828 ;; This function is called by:
 15829 ;;		_do_update_pwm
 15830 ;;		_read_volt
 15831 ;; This function uses a non-reentrant model
 15832 ;;
 15833                           
 15834                           	psect	text90
 15835  002154                     __ptext90:
 15836                           	opt stack 0
 15837  002154                     ___ftdiv:
 15838                           	opt stack 25
 15839                           
 15840                           ;incstack = 0
 15841  002154  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 15842  002158  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 15843  00215A  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 15844  00215C  342D               	rlcf	___ftdiv@f1+1,w,c
 15845  00215E  3632               	rlcf	??___ftdiv& (0+255),f,c
 15846  002160  E301               	bnc	u5851
 15847  002162  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 15848  002164                     u5851:
 15849  002164  5032               	movf	??___ftdiv,w,c
 15850  002166  6E39               	movwf	___ftdiv@exp,c
 15851  002168  5039               	movf	___ftdiv@exp,w,c
 15852  00216A  A4D8               	btfss	status,2,c
 15853  00216C  D002               	goto	l8190
 15854  00216E  D00E               	goto	l8192
 15855  002170  D061               	goto	l1838
 15856  002172                     l8190:
 15857  002172  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 15858  002176  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 15859  002178  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 15860  00217A  3430               	rlcf	___ftdiv@f2+1,w,c
 15861  00217C  3632               	rlcf	??___ftdiv& (0+255),f,c
 15862  00217E  E301               	bnc	u5871
 15863  002180  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 15864  002182                     u5871:
 15865  002182  5032               	movf	??___ftdiv,w,c
 15866  002184  6E3A               	movwf	___ftdiv@sign,c
 15867  002186  503A               	movf	___ftdiv@sign,w,c
 15868  002188  A4D8               	btfss	status,2,c
 15869  00218A  D007               	goto	l8196
 15870  00218C                     l8192:
 15871  00218C  0E00               	movlw	0
 15872  00218E  6E2C               	movwf	?___ftdiv,c
 15873  002190  0E00               	movlw	0
 15874  002192  6E2D               	movwf	?___ftdiv+1,c
 15875  002194  0E00               	movlw	0
 15876  002196  6E2E               	movwf	?___ftdiv+2,c
 15877  002198  D04D               	goto	l1838
 15878  00219A                     l8196:
 15879  00219A  0E00               	movlw	0
 15880  00219C  6E36               	movwf	___ftdiv@f3,c
 15881  00219E  0E00               	movlw	0
 15882  0021A0  6E37               	movwf	___ftdiv@f3+1,c
 15883  0021A2  0E00               	movlw	0
 15884  0021A4  6E38               	movwf	___ftdiv@f3+2,c
 15885  0021A6  503A               	movf	___ftdiv@sign,w,c
 15886  0021A8  0F89               	addlw	137
 15887  0021AA  5E39               	subwf	___ftdiv@exp,f,c
 15888  0021AC  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 15889  0021B0  5031               	movf	___ftdiv@f2+2,w,c
 15890  0021B2  1A3A               	xorwf	___ftdiv@sign,f,c
 15891  0021B4  0E80               	movlw	128
 15892  0021B6  163A               	andwf	___ftdiv@sign,f,c
 15893  0021B8  8E2D               	bsf	___ftdiv@f1+1,7,c
 15894  0021BA  0EFF               	movlw	255
 15895  0021BC  162C               	andwf	___ftdiv@f1,f,c
 15896  0021BE  0EFF               	movlw	255
 15897  0021C0  162D               	andwf	___ftdiv@f1+1,f,c
 15898  0021C2  0E00               	movlw	0
 15899  0021C4  162E               	andwf	___ftdiv@f1+2,f,c
 15900  0021C6  8E30               	bsf	___ftdiv@f2+1,7,c
 15901  0021C8  0EFF               	movlw	255
 15902  0021CA  162F               	andwf	___ftdiv@f2,f,c
 15903  0021CC  0EFF               	movlw	255
 15904  0021CE  1630               	andwf	___ftdiv@f2+1,f,c
 15905  0021D0  0E00               	movlw	0
 15906  0021D2  1631               	andwf	___ftdiv@f2+2,f,c
 15907  0021D4  0E18               	movlw	24
 15908  0021D6  6E35               	movwf	___ftdiv@cntr,c
 15909  0021D8  D000               	goto	l8216
 15910  0021DA                     l8216:
 15911  0021DA  90D8               	bcf	status,0,c
 15912  0021DC  3636               	rlcf	___ftdiv@f3,f,c
 15913  0021DE  3637               	rlcf	___ftdiv@f3+1,f,c
 15914  0021E0  3638               	rlcf	___ftdiv@f3+2,f,c
 15915  0021E2  502F               	movf	___ftdiv@f2,w,c
 15916  0021E4  5C2C               	subwf	___ftdiv@f1,w,c
 15917  0021E6  5030               	movf	___ftdiv@f2+1,w,c
 15918  0021E8  582D               	subwfb	___ftdiv@f1+1,w,c
 15919  0021EA  5031               	movf	___ftdiv@f2+2,w,c
 15920  0021EC  582E               	subwfb	___ftdiv@f1+2,w,c
 15921  0021EE  A0D8               	btfss	status,0,c
 15922  0021F0  D007               	goto	l1841
 15923  0021F2  502F               	movf	___ftdiv@f2,w,c
 15924  0021F4  5E2C               	subwf	___ftdiv@f1,f,c
 15925  0021F6  5030               	movf	___ftdiv@f2+1,w,c
 15926  0021F8  5A2D               	subwfb	___ftdiv@f1+1,f,c
 15927  0021FA  5031               	movf	___ftdiv@f2+2,w,c
 15928  0021FC  5A2E               	subwfb	___ftdiv@f1+2,f,c
 15929  0021FE  8036               	bsf	___ftdiv@f3,0,c
 15930  002200                     l1841:
 15931  002200  90D8               	bcf	status,0,c
 15932  002202  362C               	rlcf	___ftdiv@f1,f,c
 15933  002204  362D               	rlcf	___ftdiv@f1+1,f,c
 15934  002206  362E               	rlcf	___ftdiv@f1+2,f,c
 15935  002208  2E35               	decfsz	___ftdiv@cntr,f,c
 15936  00220A  D7E7               	goto	l8216
 15937  00220C  D000               	goto	l8226
 15938  00220E                     l8226:
 15939  00220E  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 15940  002212  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15941  002216  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15942  00221A  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 15943  00221E  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 15944  002222  EC56  F012         	call	___ftpack	;wreg free
 15945  002226  C011  F02C         	movff	?___ftpack,?___ftdiv
 15946  00222A  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 15947  00222E  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 15948  002232  D000               	goto	l1838
 15949  002234                     l1838:
 15950  002234  0012               	return		;funcret
 15951  002236                     __end_of___ftdiv:
 15952                           	opt stack 0
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           intcon2	equ	0xFF1
 15961                           postinc0	equ	0xFEE
 15962                           wreg	equ	0xFE8
 15963                           postdec1	equ	0xFE5
 15964                           plusw1	equ	0xFE3
 15965                           fsr1l	equ	0xFE1
 15966                           indf2	equ	0xFDF
 15967                           postinc2	equ	0xFDE
 15968                           postdec2	equ	0xFDD
 15969                           plusw2	equ	0xFDB
 15970                           fsr2h	equ	0xFDA
 15971                           fsr2l	equ	0xFD9
 15972                           status	equ	0xFD8
 15973                           
 15974 ;; *************** function ___ftpack *****************
 15975 ;; Defined at:
 15976 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;  arg             3   16[COMRAM] unsigned um
 15979 ;;  exp             1   19[COMRAM] unsigned char 
 15980 ;;  sign            1   20[COMRAM] unsigned char 
 15981 ;; Auto vars:     Size  Location     Type
 15982 ;;		None
 15983 ;; Return value:  Size  Location     Type
 15984 ;;                  3   16[COMRAM] float 
 15985 ;; Registers used:
 15986 ;;		wreg, status,2, status,0
 15987 ;; Tracked objects:
 15988 ;;		On entry : 0/0
 15989 ;;		On exit  : 0/0
 15990 ;;		Unchanged: 0/0
 15991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15992 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15994 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15995 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15996 ;;Total ram usage:        8 bytes
 15997 ;; Hardware stack levels used:    1
 15998 ;; Hardware stack levels required when called:    3
 15999 ;; This function calls:
 16000 ;;		Nothing
 16001 ;; This function is called by:
 16002 ;;		___awtoft
 16003 ;;		___ftdiv
 16004 ;;		___ftmul
 16005 ;;		___lbtoft
 16006 ;; This function uses a non-reentrant model
 16007 ;;
 16008                           
 16009                           	psect	text91
 16010  0024AC                     __ptext91:
 16011                           	opt stack 0
 16012  0024AC                     ___ftpack:
 16013                           	opt stack 25
 16014                           
 16015                           ;incstack = 0
 16016  0024AC  5014               	movf	___ftpack@exp,w,c
 16017  0024AE  B4D8               	btfsc	status,2,c
 16018  0024B0  D005               	goto	l7822
 16019  0024B2  5011               	movf	___ftpack@arg,w,c
 16020  0024B4  1012               	iorwf	___ftpack@arg+1,w,c
 16021  0024B6  1013               	iorwf	___ftpack@arg+2,w,c
 16022  0024B8  A4D8               	btfss	status,2,c
 16023  0024BA  D00E               	goto	l7828
 16024  0024BC                     l7822:
 16025  0024BC  0E00               	movlw	0
 16026  0024BE  6E11               	movwf	?___ftpack,c
 16027  0024C0  0E00               	movlw	0
 16028  0024C2  6E12               	movwf	?___ftpack+1,c
 16029  0024C4  0E00               	movlw	0
 16030  0024C6  6E13               	movwf	?___ftpack+2,c
 16031  0024C8  D053               	goto	l1766
 16032  0024CA  D006               	goto	l7828
 16033  0024CC                     l7826:
 16034  0024CC  2A14               	incf	___ftpack@exp,f,c
 16035  0024CE  90D8               	bcf	status,0,c
 16036  0024D0  3213               	rrcf	___ftpack@arg+2,f,c
 16037  0024D2  3212               	rrcf	___ftpack@arg+1,f,c
 16038  0024D4  3211               	rrcf	___ftpack@arg,f,c
 16039  0024D6  D000               	goto	l7828
 16040  0024D8                     l7828:
 16041  0024D8  0E00               	movlw	0
 16042  0024DA  1411               	andwf	___ftpack@arg,w,c
 16043  0024DC  6E16               	movwf	??___ftpack& (0+255),c
 16044  0024DE  0E00               	movlw	0
 16045  0024E0  1412               	andwf	___ftpack@arg+1,w,c
 16046  0024E2  6E17               	movwf	(??___ftpack+1)& (0+255),c
 16047  0024E4  0EFE               	movlw	254
 16048  0024E6  1413               	andwf	___ftpack@arg+2,w,c
 16049  0024E8  6E18               	movwf	(??___ftpack+2)& (0+255),c
 16050  0024EA  5016               	movf	??___ftpack,w,c
 16051  0024EC  1017               	iorwf	??___ftpack+1,w,c
 16052  0024EE  1018               	iorwf	??___ftpack+2,w,c
 16053  0024F0  B4D8               	btfsc	status,2,c
 16054  0024F2  D00E               	goto	l7834
 16055  0024F4  D7EB               	goto	l7826
 16056  0024F6  D00C               	goto	l7834
 16057  0024F8                     l7830:
 16058  0024F8  2A14               	incf	___ftpack@exp,f,c
 16059  0024FA  0E01               	movlw	1
 16060  0024FC  2611               	addwf	___ftpack@arg,f,c
 16061  0024FE  0E00               	movlw	0
 16062  002500  2212               	addwfc	___ftpack@arg+1,f,c
 16063  002502  0E00               	movlw	0
 16064  002504  2213               	addwfc	___ftpack@arg+2,f,c
 16065  002506  90D8               	bcf	status,0,c
 16066  002508  3213               	rrcf	___ftpack@arg+2,f,c
 16067  00250A  3212               	rrcf	___ftpack@arg+1,f,c
 16068  00250C  3211               	rrcf	___ftpack@arg,f,c
 16069  00250E  D000               	goto	l7834
 16070  002510                     l7834:
 16071  002510  0E00               	movlw	0
 16072  002512  1411               	andwf	___ftpack@arg,w,c
 16073  002514  6E16               	movwf	??___ftpack& (0+255),c
 16074  002516  0E00               	movlw	0
 16075  002518  1412               	andwf	___ftpack@arg+1,w,c
 16076  00251A  6E17               	movwf	(??___ftpack+1)& (0+255),c
 16077  00251C  0EFF               	movlw	255
 16078  00251E  1413               	andwf	___ftpack@arg+2,w,c
 16079  002520  6E18               	movwf	(??___ftpack+2)& (0+255),c
 16080  002522  5016               	movf	??___ftpack,w,c
 16081  002524  1017               	iorwf	??___ftpack+1,w,c
 16082  002526  1018               	iorwf	??___ftpack+2,w,c
 16083  002528  B4D8               	btfsc	status,2,c
 16084  00252A  D008               	goto	l7838
 16085  00252C  D7E5               	goto	l7830
 16086  00252E  D006               	goto	l7838
 16087  002530                     l7836:
 16088  002530  0614               	decf	___ftpack@exp,f,c
 16089  002532  90D8               	bcf	status,0,c
 16090  002534  3611               	rlcf	___ftpack@arg,f,c
 16091  002536  3612               	rlcf	___ftpack@arg+1,f,c
 16092  002538  3613               	rlcf	___ftpack@arg+2,f,c
 16093  00253A  D000               	goto	l7838
 16094  00253C                     l7838:
 16095  00253C  BE12               	btfsc	___ftpack@arg+1,7,c
 16096  00253E  D004               	goto	l1777
 16097  002540  0E02               	movlw	2
 16098  002542  6014               	cpfslt	___ftpack@exp,c
 16099  002544  D7F5               	goto	l7836
 16100  002546  D000               	goto	l1777
 16101  002548                     l1777:
 16102  002548  B014               	btfsc	___ftpack@exp,0,c
 16103  00254A  D002               	goto	l7844
 16104  00254C  9E12               	bcf	___ftpack@arg+1,7,c
 16105  00254E  D000               	goto	l7844
 16106  002550                     l7844:
 16107  002550  90D8               	bcf	status,0,c
 16108  002552  3214               	rrcf	___ftpack@exp,f,c
 16109  002554  5014               	movf	___ftpack@exp,w,c
 16110  002556  1213               	iorwf	___ftpack@arg+2,f,c
 16111  002558  5015               	movf	___ftpack@sign,w,c
 16112  00255A  B4D8               	btfsc	status,2,c
 16113  00255C  D002               	goto	l7850
 16114  00255E  8E13               	bsf	___ftpack@arg+2,7,c
 16115  002560  D000               	goto	l7850
 16116  002562                     l7850:
 16117  002562  C011  F011         	movff	___ftpack@arg,?___ftpack
 16118  002566  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 16119  00256A  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 16120  00256E  D000               	goto	l1766
 16121  002570                     l1766:
 16122  002570  0012               	return		;funcret
 16123  002572                     __end_of___ftpack:
 16124                           	opt stack 0
 16125                           tblptru	equ	0xFF8
 16126                           tblptrh	equ	0xFF7
 16127                           tblptrl	equ	0xFF6
 16128                           tablat	equ	0xFF5
 16129                           prodh	equ	0xFF4
 16130                           prodl	equ	0xFF3
 16131                           intcon	equ	0xFF2
 16132                           intcon2	equ	0xFF1
 16133                           postinc0	equ	0xFEE
 16134                           wreg	equ	0xFE8
 16135                           postdec1	equ	0xFE5
 16136                           plusw1	equ	0xFE3
 16137                           fsr1l	equ	0xFE1
 16138                           indf2	equ	0xFDF
 16139                           postinc2	equ	0xFDE
 16140                           postdec2	equ	0xFDD
 16141                           plusw2	equ	0xFDB
 16142                           fsr2h	equ	0xFDA
 16143                           fsr2l	equ	0xFD9
 16144                           status	equ	0xFD8
 16145                           
 16146 ;; *************** function _Init_Interrupt *****************
 16147 ;; Defined at:
 16148 ;;		line 17 in file "Interrupt.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;		None
 16151 ;; Auto vars:     Size  Location     Type
 16152 ;;		None
 16153 ;; Return value:  Size  Location     Type
 16154 ;;		None               void
 16155 ;; Registers used:
 16156 ;;		wreg, status,2
 16157 ;; Tracked objects:
 16158 ;;		On entry : 0/0
 16159 ;;		On exit  : 0/0
 16160 ;;		Unchanged: 0/0
 16161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16166 ;;Total ram usage:        0 bytes
 16167 ;; Hardware stack levels used:    1
 16168 ;; Hardware stack levels required when called:    3
 16169 ;; This function calls:
 16170 ;;		Nothing
 16171 ;; This function is called by:
 16172 ;;		_Do_Init
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           	psect	text92
 16177  0037C0                     __ptext92:
 16178                           	opt stack 0
 16179  0037C0                     _Init_Interrupt:
 16180                           	opt stack 26
 16181                           
 16182                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 16183                           
 16184                           ;incstack = 0
 16185  0037C0  92F2               	bcf	intcon,1,c	;volatile
 16186                           
 16187                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 16188  0037C2  90F0               	bcf	intcon3,0,c	;volatile
 16189                           
 16190                           ;Interrupt.c: 22: INTCONbits.INT0IE = 1;
 16191  0037C4  88F2               	bsf	intcon,4,c	;volatile
 16192                           
 16193                           ;Interrupt.c: 23: INTCON3bits.INT1IE = 1;
 16194  0037C6  86F0               	bsf	intcon3,3,c	;volatile
 16195                           
 16196                           ;Interrupt.c: 24: INTCON2bits.INTEDG0 = 0;
 16197  0037C8  9CF1               	bcf	intcon2,6,c	;volatile
 16198                           
 16199                           ;Interrupt.c: 25: INTCON2bits.INTEDG1 = 0;
 16200  0037CA  9AF1               	bcf	intcon2,5,c	;volatile
 16201                           
 16202                           ;Interrupt.c: 26: TMR1H = 0;
 16203  0037CC  0E00               	movlw	0
 16204  0037CE  6ECF               	movwf	4047,c	;volatile
 16205                           
 16206                           ;Interrupt.c: 27: TMR1L = 0;
 16207  0037D0  0E00               	movlw	0
 16208  0037D2  6ECE               	movwf	4046,c	;volatile
 16209                           
 16210                           ;Interrupt.c: 28: PIR1bits.TMR1IF = 0;
 16211  0037D4  909E               	bcf	3998,0,c	;volatile
 16212                           
 16213                           ;Interrupt.c: 29: PIE1bits.TMR1IE = 1;
 16214  0037D6  809D               	bsf	3997,0,c	;volatile
 16215                           
 16216                           ;Interrupt.c: 30: INTCONbits.PEIE = 1;
 16217  0037D8  8CF2               	bsf	intcon,6,c	;volatile
 16218                           
 16219                           ;Interrupt.c: 31: INTCONbits.GIE = 1;
 16220  0037DA  8EF2               	bsf	intcon,7,c	;volatile
 16221  0037DC  0012               	return		;funcret
 16222  0037DE                     __end_of_Init_Interrupt:
 16223                           	opt stack 0
 16224                           tblptru	equ	0xFF8
 16225                           tblptrh	equ	0xFF7
 16226                           tblptrl	equ	0xFF6
 16227                           tablat	equ	0xFF5
 16228                           prodh	equ	0xFF4
 16229                           prodl	equ	0xFF3
 16230                           intcon	equ	0xFF2
 16231                           intcon2	equ	0xFF1
 16232                           intcon3	equ	0xFF0
 16233                           postinc0	equ	0xFEE
 16234                           wreg	equ	0xFE8
 16235                           postdec1	equ	0xFE5
 16236                           plusw1	equ	0xFE3
 16237                           fsr1l	equ	0xFE1
 16238                           indf2	equ	0xFDF
 16239                           postinc2	equ	0xFDE
 16240                           postdec2	equ	0xFDD
 16241                           plusw2	equ	0xFDB
 16242                           fsr2h	equ	0xFDA
 16243                           fsr2l	equ	0xFD9
 16244                           status	equ	0xFD8
 16245                           
 16246 ;; *************** function _Init_ADC *****************
 16247 ;; Defined at:
 16248 ;;		line 171 in file "utils.c"
 16249 ;; Parameters:    Size  Location     Type
 16250 ;;		None
 16251 ;; Auto vars:     Size  Location     Type
 16252 ;;		None
 16253 ;; Return value:  Size  Location     Type
 16254 ;;		None               void
 16255 ;; Registers used:
 16256 ;;		wreg, status,2
 16257 ;; Tracked objects:
 16258 ;;		On entry : 0/0
 16259 ;;		On exit  : 0/0
 16260 ;;		Unchanged: 0/0
 16261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16266 ;;Total ram usage:        0 bytes
 16267 ;; Hardware stack levels used:    1
 16268 ;; Hardware stack levels required when called:    3
 16269 ;; This function calls:
 16270 ;;		Nothing
 16271 ;; This function is called by:
 16272 ;;		_Do_Init
 16273 ;; This function uses a non-reentrant model
 16274 ;;
 16275                           
 16276                           	psect	text93
 16277  003A82                     __ptext93:
 16278                           	opt stack 0
 16279  003A82                     _Init_ADC:
 16280                           	opt stack 26
 16281                           
 16282                           ;utils.c: 174: ADCON0 = 0x01;
 16283                           
 16284                           ;incstack = 0
 16285  003A82  0E01               	movlw	1
 16286  003A84  6EC2               	movwf	4034,c	;volatile
 16287                           
 16288                           ;utils.c: 175: ADCON1= 0x0E;
 16289  003A86  0E0E               	movlw	14
 16290  003A88  6EC1               	movwf	4033,c	;volatile
 16291                           
 16292                           ;utils.c: 176: ADCON2= 0xA9;
 16293  003A8A  0EA9               	movlw	169
 16294  003A8C  6EC0               	movwf	4032,c	;volatile
 16295  003A8E  0012               	return		;funcret
 16296  003A90                     __end_of_Init_ADC:
 16297                           	opt stack 0
 16298                           tblptru	equ	0xFF8
 16299                           tblptrh	equ	0xFF7
 16300                           tblptrl	equ	0xFF6
 16301                           tablat	equ	0xFF5
 16302                           prodh	equ	0xFF4
 16303                           prodl	equ	0xFF3
 16304                           intcon	equ	0xFF2
 16305                           intcon2	equ	0xFF1
 16306                           intcon3	equ	0xFF0
 16307                           postinc0	equ	0xFEE
 16308                           wreg	equ	0xFE8
 16309                           postdec1	equ	0xFE5
 16310                           plusw1	equ	0xFE3
 16311                           fsr1l	equ	0xFE1
 16312                           indf2	equ	0xFDF
 16313                           postinc2	equ	0xFDE
 16314                           postdec2	equ	0xFDD
 16315                           plusw2	equ	0xFDB
 16316                           fsr2h	equ	0xFDA
 16317                           fsr2l	equ	0xFD9
 16318                           status	equ	0xFD8
 16319                           
 16320 ;; *************** function _I2C_Init *****************
 16321 ;; Defined at:
 16322 ;;		line 10 in file "I2C_Soft.c"
 16323 ;; Parameters:    Size  Location     Type
 16324 ;;  c               4   16[COMRAM] unsigned long 
 16325 ;; Auto vars:     Size  Location     Type
 16326 ;;		None
 16327 ;; Return value:  Size  Location     Type
 16328 ;;		None               void
 16329 ;; Registers used:
 16330 ;;		wreg, cstack
 16331 ;; Tracked objects:
 16332 ;;		On entry : 0/0
 16333 ;;		On exit  : 0/0
 16334 ;;		Unchanged: 0/0
 16335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16336 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16339 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16340 ;;Total ram usage:        4 bytes
 16341 ;; Hardware stack levels used:    1
 16342 ;; Hardware stack levels required when called:    4
 16343 ;; This function calls:
 16344 ;;		_i2cHighScl
 16345 ;;		_i2cHighSda
 16346 ;; This function is called by:
 16347 ;;		_Do_Init
 16348 ;; This function uses a non-reentrant model
 16349 ;;
 16350                           
 16351                           	psect	text94
 16352  003AA8                     __ptext94:
 16353                           	opt stack 0
 16354  003AA8                     _I2C_Init:
 16355                           	opt stack 25
 16356                           
 16357                           ;I2C_Soft.c: 12: i2cHighScl();
 16358                           
 16359                           ;incstack = 0
 16360  003AA8  EC48  F01D         	call	_i2cHighScl	;wreg free
 16361                           
 16362                           ;I2C_Soft.c: 13: i2cHighSda();
 16363  003AAC  EC6B  F01D         	call	_i2cHighSda	;wreg free
 16364  003AB0  0012               	return		;funcret
 16365  003AB2                     __end_of_I2C_Init:
 16366                           	opt stack 0
 16367                           tblptru	equ	0xFF8
 16368                           tblptrh	equ	0xFF7
 16369                           tblptrl	equ	0xFF6
 16370                           tablat	equ	0xFF5
 16371                           prodh	equ	0xFF4
 16372                           prodl	equ	0xFF3
 16373                           intcon	equ	0xFF2
 16374                           intcon2	equ	0xFF1
 16375                           intcon3	equ	0xFF0
 16376                           postinc0	equ	0xFEE
 16377                           wreg	equ	0xFE8
 16378                           postdec1	equ	0xFE5
 16379                           plusw1	equ	0xFE3
 16380                           fsr1l	equ	0xFE1
 16381                           indf2	equ	0xFDF
 16382                           postinc2	equ	0xFDE
 16383                           postdec2	equ	0xFDD
 16384                           plusw2	equ	0xFDB
 16385                           fsr2h	equ	0xFDA
 16386                           fsr2l	equ	0xFD9
 16387                           status	equ	0xFD8
 16388                           
 16389 ;; *************** function _DS1621_Init *****************
 16390 ;; Defined at:
 16391 ;;		line 22 in file "I2C_Support.c"
 16392 ;; Parameters:    Size  Location     Type
 16393 ;;		None
 16394 ;; Auto vars:     Size  Location     Type
 16395 ;;  Device          1   21[COMRAM] unsigned char 
 16396 ;; Return value:  Size  Location     Type
 16397 ;;		None               void
 16398 ;; Registers used:
 16399 ;;		wreg, status,2, status,0, cstack
 16400 ;; Tracked objects:
 16401 ;;		On entry : 0/0
 16402 ;;		On exit  : 0/0
 16403 ;;		Unchanged: 0/0
 16404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16408 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16409 ;;Total ram usage:        1 bytes
 16410 ;; Hardware stack levels used:    1
 16411 ;; Hardware stack levels required when called:    6
 16412 ;; This function calls:
 16413 ;;		_I2C_Write_Cmd_Only
 16414 ;;		_I2C_Write_Cmd_Write_Data
 16415 ;; This function is called by:
 16416 ;;		_Do_Init
 16417 ;; This function uses a non-reentrant model
 16418 ;;
 16419                           
 16420                           	psect	text95
 16421  0037DE                     __ptext95:
 16422                           	opt stack 0
 16423  0037DE                     _DS1621_Init:
 16424                           	opt stack 23
 16425                           
 16426                           ;I2C_Support.c: 24: char Device = 0x48;
 16427                           
 16428                           ;incstack = 0
 16429  0037DE  0E48               	movlw	72
 16430  0037E0  6E16               	movwf	DS1621_Init@Device,c
 16431                           
 16432                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 16433  0037E2  0EAC               	movlw	172
 16434  0037E4  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 16435  0037E6  0E02               	movlw	2
 16436  0037E8  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 16437  0037EA  5016               	movf	DS1621_Init@Device,w,c
 16438  0037EC  ECC0  F01B         	call	_I2C_Write_Cmd_Write_Data
 16439                           
 16440                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 16441  0037F0  0EEE               	movlw	238
 16442  0037F2  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 16443  0037F4  5016               	movf	DS1621_Init@Device,w,c
 16444  0037F6  EC34  F01C         	call	_I2C_Write_Cmd_Only
 16445  0037FA  0012               	return		;funcret
 16446  0037FC                     __end_of_DS1621_Init:
 16447                           	opt stack 0
 16448                           tblptru	equ	0xFF8
 16449                           tblptrh	equ	0xFF7
 16450                           tblptrl	equ	0xFF6
 16451                           tablat	equ	0xFF5
 16452                           prodh	equ	0xFF4
 16453                           prodl	equ	0xFF3
 16454                           intcon	equ	0xFF2
 16455                           intcon2	equ	0xFF1
 16456                           intcon3	equ	0xFF0
 16457                           postinc0	equ	0xFEE
 16458                           wreg	equ	0xFE8
 16459                           postdec1	equ	0xFE5
 16460                           plusw1	equ	0xFE3
 16461                           fsr1l	equ	0xFE1
 16462                           indf2	equ	0xFDF
 16463                           postinc2	equ	0xFDE
 16464                           postdec2	equ	0xFDD
 16465                           plusw2	equ	0xFDB
 16466                           fsr2h	equ	0xFDA
 16467                           fsr2l	equ	0xFD9
 16468                           status	equ	0xFD8
 16469                           
 16470 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 16471 ;; Defined at:
 16472 ;;		line 148 in file "I2C_Soft.c"
 16473 ;; Parameters:    Size  Location     Type
 16474 ;;  Device          1    wreg     unsigned char 
 16475 ;;  Cmd             1   18[COMRAM] unsigned char 
 16476 ;;  Data_Out        1   19[COMRAM] unsigned char 
 16477 ;; Auto vars:     Size  Location     Type
 16478 ;;  Device          1   20[COMRAM] unsigned char 
 16479 ;; Return value:  Size  Location     Type
 16480 ;;		None               void
 16481 ;; Registers used:
 16482 ;;		wreg, status,2, status,0, cstack
 16483 ;; Tracked objects:
 16484 ;;		On entry : 0/0
 16485 ;;		On exit  : 0/0
 16486 ;;		Unchanged: 0/0
 16487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16491 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16492 ;;Total ram usage:        3 bytes
 16493 ;; Hardware stack levels used:    1
 16494 ;; Hardware stack levels required when called:    5
 16495 ;; This function calls:
 16496 ;;		_I2C_Start
 16497 ;;		_I2C_Stop
 16498 ;;		_I2C_Write
 16499 ;; This function is called by:
 16500 ;;		_DS1621_Init
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           	psect	text96
 16505  003780                     __ptext96:
 16506                           	opt stack 0
 16507  003780                     _I2C_Write_Cmd_Write_Data:
 16508                           	opt stack 23
 16509                           
 16510                           ;incstack = 0
 16511                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 16512  003780  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 16513                           
 16514                           ;I2C_Soft.c: 150: I2C_Start();
 16515  003782  ECF2  F01C         	call	_I2C_Start	;wreg free
 16516                           
 16517                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 16518  003786  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 16519  003788  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 16520  00378A  EC8C  F01A         	call	_I2C_Write
 16521                           
 16522                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 16523  00378E  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 16524  003790  EC8C  F01A         	call	_I2C_Write
 16525                           
 16526                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 16527  003794  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 16528  003796  EC8C  F01A         	call	_I2C_Write
 16529                           
 16530                           ;I2C_Soft.c: 154: I2C_Stop();
 16531  00379A  ECE9  F01C         	call	_I2C_Stop	;wreg free
 16532  00379E  0012               	return		;funcret
 16533  0037A0                     __end_of_I2C_Write_Cmd_Write_Data:
 16534                           	opt stack 0
 16535                           tblptru	equ	0xFF8
 16536                           tblptrh	equ	0xFF7
 16537                           tblptrl	equ	0xFF6
 16538                           tablat	equ	0xFF5
 16539                           prodh	equ	0xFF4
 16540                           prodl	equ	0xFF3
 16541                           intcon	equ	0xFF2
 16542                           intcon2	equ	0xFF1
 16543                           intcon3	equ	0xFF0
 16544                           postinc0	equ	0xFEE
 16545                           wreg	equ	0xFE8
 16546                           postdec1	equ	0xFE5
 16547                           plusw1	equ	0xFE3
 16548                           fsr1l	equ	0xFE1
 16549                           indf2	equ	0xFDF
 16550                           postinc2	equ	0xFDE
 16551                           postdec2	equ	0xFDD
 16552                           plusw2	equ	0xFDB
 16553                           fsr2h	equ	0xFDA
 16554                           fsr2l	equ	0xFD9
 16555                           status	equ	0xFD8
 16556                           
 16557 ;; *************** function _I2C_Write_Cmd_Only *****************
 16558 ;; Defined at:
 16559 ;;		line 140 in file "I2C_Soft.c"
 16560 ;; Parameters:    Size  Location     Type
 16561 ;;  Device          1    wreg     unsigned char 
 16562 ;;  Cmd             1   18[COMRAM] unsigned char 
 16563 ;; Auto vars:     Size  Location     Type
 16564 ;;  Device          1   19[COMRAM] unsigned char 
 16565 ;; Return value:  Size  Location     Type
 16566 ;;		None               void
 16567 ;; Registers used:
 16568 ;;		wreg, status,2, status,0, cstack
 16569 ;; Tracked objects:
 16570 ;;		On entry : 0/0
 16571 ;;		On exit  : 0/0
 16572 ;;		Unchanged: 0/0
 16573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16574 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16577 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;Total ram usage:        2 bytes
 16579 ;; Hardware stack levels used:    1
 16580 ;; Hardware stack levels required when called:    5
 16581 ;; This function calls:
 16582 ;;		_I2C_Start
 16583 ;;		_I2C_Stop
 16584 ;;		_I2C_Write
 16585 ;; This function is called by:
 16586 ;;		_DS1621_Init
 16587 ;; This function uses a non-reentrant model
 16588 ;;
 16589                           
 16590                           	psect	text97
 16591  003868                     __ptext97:
 16592                           	opt stack 0
 16593  003868                     _I2C_Write_Cmd_Only:
 16594                           	opt stack 23
 16595                           
 16596                           ;incstack = 0
 16597                           ;I2C_Write_Cmd_Only@Device stored from wreg
 16598  003868  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 16599                           
 16600                           ;I2C_Soft.c: 142: I2C_Start();
 16601  00386A  ECF2  F01C         	call	_I2C_Start	;wreg free
 16602                           
 16603                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 16604  00386E  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 16605  003870  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 16606  003872  EC8C  F01A         	call	_I2C_Write
 16607                           
 16608                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 16609  003876  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 16610  003878  EC8C  F01A         	call	_I2C_Write
 16611                           
 16612                           ;I2C_Soft.c: 145: I2C_Stop();
 16613  00387C  ECE9  F01C         	call	_I2C_Stop	;wreg free
 16614  003880  0012               	return		;funcret
 16615  003882                     __end_of_I2C_Write_Cmd_Only:
 16616                           	opt stack 0
 16617                           tblptru	equ	0xFF8
 16618                           tblptrh	equ	0xFF7
 16619                           tblptrl	equ	0xFF6
 16620                           tablat	equ	0xFF5
 16621                           prodh	equ	0xFF4
 16622                           prodl	equ	0xFF3
 16623                           intcon	equ	0xFF2
 16624                           intcon2	equ	0xFF1
 16625                           intcon3	equ	0xFF0
 16626                           postinc0	equ	0xFEE
 16627                           wreg	equ	0xFE8
 16628                           postdec1	equ	0xFE5
 16629                           plusw1	equ	0xFE3
 16630                           fsr1l	equ	0xFE1
 16631                           indf2	equ	0xFDF
 16632                           postinc2	equ	0xFDE
 16633                           postdec2	equ	0xFDD
 16634                           plusw2	equ	0xFDB
 16635                           fsr2h	equ	0xFDA
 16636                           fsr2l	equ	0xFD9
 16637                           status	equ	0xFD8
 16638                           
 16639 ;; *************** function _DS3231_Turn_Off_Alarm *****************
 16640 ;; Defined at:
 16641 ;;		line 193 in file "I2C_Support.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;		None
 16644 ;; Auto vars:     Size  Location     Type
 16645 ;;  Device          1   30[COMRAM] unsigned char 
 16646 ;;  control_F       1   29[COMRAM] unsigned char 
 16647 ;;  control_E       1   28[COMRAM] unsigned char 
 16648 ;;  Address_F       1   27[COMRAM] unsigned char 
 16649 ;;  Address_E       1   26[COMRAM] unsigned char 
 16650 ;; Return value:  Size  Location     Type
 16651 ;;		None               void
 16652 ;; Registers used:
 16653 ;;		wreg, status,2, status,0, cstack
 16654 ;; Tracked objects:
 16655 ;;		On entry : 0/0
 16656 ;;		On exit  : 0/0
 16657 ;;		Unchanged: 0/0
 16658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16660 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16662 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16663 ;;Total ram usage:        5 bytes
 16664 ;; Hardware stack levels used:    1
 16665 ;; Hardware stack levels required when called:    8
 16666 ;; This function calls:
 16667 ;;		_DS3231_Init
 16668 ;;		_I2C_Write_Address_Read_One_Byte
 16669 ;;		_I2C_Write_Address_Write_One_Byte
 16670 ;; This function is called by:
 16671 ;;		_main
 16672 ;; This function uses a non-reentrant model
 16673 ;;
 16674                           
 16675                           	psect	text98
 16676  0031AE                     __ptext98:
 16677                           	opt stack 0
 16678  0031AE                     _DS3231_Turn_Off_Alarm:
 16679                           	opt stack 22
 16680                           
 16681                           ;I2C_Support.c: 195: char Device = 0x68;
 16682                           
 16683                           ;incstack = 0
 16684  0031AE  0E68               	movlw	104
 16685  0031B0  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
 16686                           
 16687                           ;I2C_Support.c: 196: char Address_E = 0x0E;
 16688  0031B2  0E0E               	movlw	14
 16689  0031B4  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
 16690                           
 16691                           ;I2C_Support.c: 197: char Address_F = 0x0F;
 16692  0031B6  0E0F               	movlw	15
 16693  0031B8  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
 16694                           
 16695                           ;I2C_Support.c: 198: char control_E;
 16696                           ;I2C_Support.c: 199: char control_F;
 16697                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
 16698  0031BA  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
 16699  0031BE  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
 16700  0031C0  EC1A  F01B         	call	_I2C_Write_Address_Read_One_Byte
 16701  0031C4  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
 16702                           
 16703                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
 16704  0031C6  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
 16705  0031C8  0BFE               	andlw	254
 16706  0031CA  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
 16707                           
 16708                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
 16709  0031CC  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
 16710  0031D0  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
 16711  0031D4  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
 16712  0031D6  ECD0  F01B         	call	_I2C_Write_Address_Write_One_Byte
 16713                           
 16714                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
 16715  0031DA  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
 16716  0031DE  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
 16717  0031E0  EC1A  F01B         	call	_I2C_Write_Address_Read_One_Byte
 16718  0031E4  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
 16719                           
 16720                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
 16721  0031E6  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
 16722  0031E8  0BFE               	andlw	254
 16723  0031EA  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
 16724                           
 16725                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
 16726  0031EC  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
 16727  0031F0  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
 16728  0031F4  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
 16729  0031F6  ECD0  F01B         	call	_I2C_Write_Address_Write_One_Byte
 16730                           
 16731                           ;I2C_Support.c: 207: DS3231_Init();
 16732  0031FA  EC79  F013         	call	_DS3231_Init	;wreg free
 16733  0031FE  0012               	return		;funcret
 16734  003200                     __end_of_DS3231_Turn_Off_Alarm:
 16735                           	opt stack 0
 16736                           tblptru	equ	0xFF8
 16737                           tblptrh	equ	0xFF7
 16738                           tblptrl	equ	0xFF6
 16739                           tablat	equ	0xFF5
 16740                           prodh	equ	0xFF4
 16741                           prodl	equ	0xFF3
 16742                           intcon	equ	0xFF2
 16743                           intcon2	equ	0xFF1
 16744                           intcon3	equ	0xFF0
 16745                           postinc0	equ	0xFEE
 16746                           wreg	equ	0xFE8
 16747                           postdec1	equ	0xFE5
 16748                           plusw1	equ	0xFE3
 16749                           fsr1l	equ	0xFE1
 16750                           indf2	equ	0xFDF
 16751                           postinc2	equ	0xFDE
 16752                           postdec2	equ	0xFDD
 16753                           plusw2	equ	0xFDB
 16754                           fsr2h	equ	0xFDA
 16755                           fsr2l	equ	0xFD9
 16756                           status	equ	0xFD8
 16757                           
 16758 ;; *************** function _DS3231_Init *****************
 16759 ;; Defined at:
 16760 ;;		line 132 in file "I2C_Support.c"
 16761 ;; Parameters:    Size  Location     Type
 16762 ;;		None
 16763 ;; Auto vars:     Size  Location     Type
 16764 ;;  Device          1   25[COMRAM] unsigned char 
 16765 ;;  control_E       1   24[COMRAM] unsigned char 
 16766 ;;  Address_E       1   23[COMRAM] unsigned char 
 16767 ;;  Address_7       1   22[COMRAM] unsigned char 
 16768 ;; Return value:  Size  Location     Type
 16769 ;;		None               void
 16770 ;; Registers used:
 16771 ;;		wreg, status,2, status,0, cstack
 16772 ;; Tracked objects:
 16773 ;;		On entry : 0/0
 16774 ;;		On exit  : 0/0
 16775 ;;		Unchanged: 0/0
 16776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16778 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16780 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16781 ;;Total ram usage:        4 bytes
 16782 ;; Hardware stack levels used:    1
 16783 ;; Hardware stack levels required when called:    7
 16784 ;; This function calls:
 16785 ;;		_I2C_ReStart
 16786 ;;		_I2C_Read
 16787 ;;		_I2C_Start
 16788 ;;		_I2C_Stop
 16789 ;;		_I2C_Write
 16790 ;;		_I2C_Write_Address_Read_One_Byte
 16791 ;;		_I2C_Write_Address_Write_One_Byte
 16792 ;; This function is called by:
 16793 ;;		_DS3231_Turn_Off_Alarm
 16794 ;;		_DS3231_Turn_On_Alarm
 16795 ;; This function uses a non-reentrant model
 16796 ;;
 16797                           
 16798                           	psect	text99
 16799  0026F2                     __ptext99:
 16800                           	opt stack 0
 16801  0026F2                     _DS3231_Init:
 16802                           	opt stack 22
 16803                           
 16804                           ;I2C_Support.c: 134: char Device = 0x68;
 16805                           
 16806                           ;incstack = 0
 16807  0026F2  0E68               	movlw	104
 16808  0026F4  6E1A               	movwf	DS3231_Init@Device,c
 16809                           
 16810                           ;I2C_Support.c: 135: char Address_7 = 0x07;
 16811  0026F6  0E07               	movlw	7
 16812  0026F8  6E17               	movwf	DS3231_Init@Address_7,c
 16813                           
 16814                           ;I2C_Support.c: 136: char Address_E = 0x0E;
 16815  0026FA  0E0E               	movlw	14
 16816  0026FC  6E18               	movwf	DS3231_Init@Address_E,c
 16817                           
 16818                           ;I2C_Support.c: 137: char control_E;
 16819                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
 16820  0026FE  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
 16821  002702  501A               	movf	DS3231_Init@Device,w,c
 16822  002704  EC1A  F01B         	call	_I2C_Write_Address_Read_One_Byte
 16823  002708  6E19               	movwf	DS3231_Init@control_E,c
 16824                           
 16825                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
 16826  00270A  5019               	movf	DS3231_Init@control_E,w,c
 16827  00270C  0B01               	andlw	1
 16828  00270E  6E19               	movwf	DS3231_Init@control_E,c
 16829                           
 16830                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
 16831  002710  5019               	movf	DS3231_Init@control_E,w,c
 16832  002712  0925               	iorlw	37
 16833  002714  6E19               	movwf	DS3231_Init@control_E,c
 16834                           
 16835                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
 16836  002716  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
 16837  00271A  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
 16838  00271E  501A               	movf	DS3231_Init@Device,w,c
 16839  002720  ECD0  F01B         	call	_I2C_Write_Address_Write_One_Byte
 16840                           
 16841                           ;I2C_Support.c: 143: I2C_Start();
 16842  002724  ECF2  F01C         	call	_I2C_Start	;wreg free
 16843                           
 16844                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
 16845  002728  501A               	movf	DS3231_Init@Device,w,c
 16846  00272A  241A               	addwf	DS3231_Init@Device,w,c
 16847  00272C  EC8C  F01A         	call	_I2C_Write
 16848                           
 16849                           ;I2C_Support.c: 145: I2C_Write(Address_7);
 16850  002730  5017               	movf	DS3231_Init@Address_7,w,c
 16851  002732  EC8C  F01A         	call	_I2C_Write
 16852                           
 16853                           ;I2C_Support.c: 146: I2C_ReStart();
 16854  002736  EC7D  F01C         	call	_I2C_ReStart	;wreg free
 16855                           
 16856                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
 16857  00273A  80D8               	bsf	status,0,c
 16858  00273C  341A               	rlcf	DS3231_Init@Device,w,c
 16859  00273E  EC8C  F01A         	call	_I2C_Write
 16860                           
 16861                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
 16862  002742  0E01               	movlw	1
 16863  002744  EC0B  F01A         	call	_I2C_Read
 16864  002748  6E59               	movwf	_alarm_second,c
 16865                           
 16866                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
 16867  00274A  0E01               	movlw	1
 16868  00274C  EC0B  F01A         	call	_I2C_Read
 16869  002750  6E58               	movwf	_alarm_minute,c
 16870                           
 16871                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
 16872  002752  0E01               	movlw	1
 16873  002754  EC0B  F01A         	call	_I2C_Read
 16874  002758  6E57               	movwf	_alarm_hour,c
 16875                           
 16876                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
 16877  00275A  0E00               	movlw	0
 16878  00275C  EC0B  F01A         	call	_I2C_Read
 16879  002760  6E56               	movwf	_alarm_date,c
 16880                           
 16881                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
 16882  002762  5059               	movf	_alarm_second,w,c
 16883  002764  0B7F               	andlw	127
 16884  002766  6E59               	movwf	_alarm_second,c
 16885                           
 16886                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
 16887  002768  5058               	movf	_alarm_minute,w,c
 16888  00276A  0B7F               	andlw	127
 16889  00276C  6E58               	movwf	_alarm_minute,c
 16890                           
 16891                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
 16892  00276E  5057               	movf	_alarm_hour,w,c
 16893  002770  0B7F               	andlw	127
 16894  002772  6E57               	movwf	_alarm_hour,c
 16895                           
 16896                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
 16897  002774  5056               	movf	_alarm_date,w,c
 16898  002776  0980               	iorlw	128
 16899  002778  6E56               	movwf	_alarm_date,c
 16900                           
 16901                           ;I2C_Support.c: 158: I2C_Start();
 16902  00277A  ECF2  F01C         	call	_I2C_Start	;wreg free
 16903                           
 16904                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
 16905  00277E  501A               	movf	DS3231_Init@Device,w,c
 16906  002780  241A               	addwf	DS3231_Init@Device,w,c
 16907  002782  EC8C  F01A         	call	_I2C_Write
 16908                           
 16909                           ;I2C_Support.c: 160: I2C_Write(Address_7);
 16910  002786  5017               	movf	DS3231_Init@Address_7,w,c
 16911  002788  EC8C  F01A         	call	_I2C_Write
 16912                           
 16913                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
 16914  00278C  5059               	movf	_alarm_second,w,c
 16915  00278E  EC8C  F01A         	call	_I2C_Write
 16916                           
 16917                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
 16918  002792  5058               	movf	_alarm_minute,w,c
 16919  002794  EC8C  F01A         	call	_I2C_Write
 16920                           
 16921                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
 16922  002798  5057               	movf	_alarm_hour,w,c
 16923  00279A  EC8C  F01A         	call	_I2C_Write
 16924                           
 16925                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
 16926  00279E  5056               	movf	_alarm_date,w,c
 16927  0027A0  EC8C  F01A         	call	_I2C_Write
 16928                           
 16929                           ;I2C_Support.c: 166: I2C_Stop();
 16930  0027A4  ECE9  F01C         	call	_I2C_Stop	;wreg free
 16931  0027A8  0012               	return		;funcret
 16932  0027AA                     __end_of_DS3231_Init:
 16933                           	opt stack 0
 16934                           tblptru	equ	0xFF8
 16935                           tblptrh	equ	0xFF7
 16936                           tblptrl	equ	0xFF6
 16937                           tablat	equ	0xFF5
 16938                           prodh	equ	0xFF4
 16939                           prodl	equ	0xFF3
 16940                           intcon	equ	0xFF2
 16941                           intcon2	equ	0xFF1
 16942                           intcon3	equ	0xFF0
 16943                           postinc0	equ	0xFEE
 16944                           wreg	equ	0xFE8
 16945                           postdec1	equ	0xFE5
 16946                           plusw1	equ	0xFE3
 16947                           fsr1l	equ	0xFE1
 16948                           indf2	equ	0xFDF
 16949                           postinc2	equ	0xFDE
 16950                           postdec2	equ	0xFDD
 16951                           plusw2	equ	0xFDB
 16952                           fsr2h	equ	0xFDA
 16953                           fsr2l	equ	0xFD9
 16954                           status	equ	0xFD8
 16955                           
 16956 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
 16957 ;; Defined at:
 16958 ;;		line 131 in file "I2C_Soft.c"
 16959 ;; Parameters:    Size  Location     Type
 16960 ;;  Device          1    wreg     unsigned char 
 16961 ;;  Address         1   18[COMRAM] unsigned char 
 16962 ;;  Data_Out        1   19[COMRAM] unsigned char 
 16963 ;; Auto vars:     Size  Location     Type
 16964 ;;  Device          1   20[COMRAM] unsigned char 
 16965 ;; Return value:  Size  Location     Type
 16966 ;;		None               void
 16967 ;; Registers used:
 16968 ;;		wreg, status,2, status,0, cstack
 16969 ;; Tracked objects:
 16970 ;;		On entry : 0/0
 16971 ;;		On exit  : 0/0
 16972 ;;		Unchanged: 0/0
 16973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16977 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;Total ram usage:        3 bytes
 16979 ;; Hardware stack levels used:    1
 16980 ;; Hardware stack levels required when called:    5
 16981 ;; This function calls:
 16982 ;;		_I2C_Start
 16983 ;;		_I2C_Stop
 16984 ;;		_I2C_Write
 16985 ;; This function is called by:
 16986 ;;		_DS3231_Init
 16987 ;;		_DS3231_Turn_Off_Alarm
 16988 ;;		_DS3231_Turn_On_Alarm
 16989 ;; This function uses a non-reentrant model
 16990 ;;
 16991                           
 16992                           	psect	text100
 16993  0037A0                     __ptext100:
 16994                           	opt stack 0
 16995  0037A0                     _I2C_Write_Address_Write_One_Byte:
 16996                           	opt stack 24
 16997                           
 16998                           ;incstack = 0
 16999                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
 17000  0037A0  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
 17001                           
 17002                           ;I2C_Soft.c: 133: I2C_Start();
 17003  0037A2  ECF2  F01C         	call	_I2C_Start	;wreg free
 17004                           
 17005                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
 17006  0037A6  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
 17007  0037A8  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
 17008  0037AA  EC8C  F01A         	call	_I2C_Write
 17009                           
 17010                           ;I2C_Soft.c: 135: I2C_Write(Address);
 17011  0037AE  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
 17012  0037B0  EC8C  F01A         	call	_I2C_Write
 17013                           
 17014                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
 17015  0037B4  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
 17016  0037B6  EC8C  F01A         	call	_I2C_Write
 17017                           
 17018                           ;I2C_Soft.c: 137: I2C_Stop();
 17019  0037BA  ECE9  F01C         	call	_I2C_Stop	;wreg free
 17020  0037BE  0012               	return		;funcret
 17021  0037C0                     __end_of_I2C_Write_Address_Write_One_Byte:
 17022                           	opt stack 0
 17023                           tblptru	equ	0xFF8
 17024                           tblptrh	equ	0xFF7
 17025                           tblptrl	equ	0xFF6
 17026                           tablat	equ	0xFF5
 17027                           prodh	equ	0xFF4
 17028                           prodl	equ	0xFF3
 17029                           intcon	equ	0xFF2
 17030                           intcon2	equ	0xFF1
 17031                           intcon3	equ	0xFF0
 17032                           postinc0	equ	0xFEE
 17033                           wreg	equ	0xFE8
 17034                           postdec1	equ	0xFE5
 17035                           plusw1	equ	0xFE3
 17036                           fsr1l	equ	0xFE1
 17037                           indf2	equ	0xFDF
 17038                           postinc2	equ	0xFDE
 17039                           postdec2	equ	0xFDD
 17040                           plusw2	equ	0xFDB
 17041                           fsr2h	equ	0xFDA
 17042                           fsr2l	equ	0xFD9
 17043                           status	equ	0xFD8
 17044                           
 17045 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
 17046 ;; Defined at:
 17047 ;;		line 118 in file "I2C_Soft.c"
 17048 ;; Parameters:    Size  Location     Type
 17049 ;;  Device          1    wreg     unsigned char 
 17050 ;;  Address         1   19[COMRAM] unsigned char 
 17051 ;; Auto vars:     Size  Location     Type
 17052 ;;  Device          1   21[COMRAM] unsigned char 
 17053 ;;  Data_Ret        1   20[COMRAM] unsigned char 
 17054 ;; Return value:  Size  Location     Type
 17055 ;;                  1    wreg      unsigned char 
 17056 ;; Registers used:
 17057 ;;		wreg, status,2, status,0, cstack
 17058 ;; Tracked objects:
 17059 ;;		On entry : 0/0
 17060 ;;		On exit  : 0/0
 17061 ;;		Unchanged: 0/0
 17062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17063 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17066 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17067 ;;Total ram usage:        3 bytes
 17068 ;; Hardware stack levels used:    1
 17069 ;; Hardware stack levels required when called:    6
 17070 ;; This function calls:
 17071 ;;		_I2C_ReStart
 17072 ;;		_I2C_Read
 17073 ;;		_I2C_Start
 17074 ;;		_I2C_Stop
 17075 ;;		_I2C_Write
 17076 ;; This function is called by:
 17077 ;;		_DS3231_Init
 17078 ;;		_DS3231_Turn_Off_Alarm
 17079 ;;		_DS3231_Turn_On_Alarm
 17080 ;; This function uses a non-reentrant model
 17081 ;;
 17082                           
 17083                           	psect	text101
 17084  003634                     __ptext101:
 17085                           	opt stack 0
 17086  003634                     _I2C_Write_Address_Read_One_Byte:
 17087                           	opt stack 23
 17088                           
 17089                           ;incstack = 0
 17090                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
 17091  003634  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
 17092                           
 17093                           ;I2C_Soft.c: 120: char Data_Ret;
 17094                           ;I2C_Soft.c: 121: I2C_Start();
 17095  003636  ECF2  F01C         	call	_I2C_Start	;wreg free
 17096                           
 17097                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
 17098  00363A  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
 17099  00363C  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
 17100  00363E  EC8C  F01A         	call	_I2C_Write
 17101                           
 17102                           ;I2C_Soft.c: 123: I2C_Write(Address);
 17103  003642  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
 17104  003644  EC8C  F01A         	call	_I2C_Write
 17105                           
 17106                           ;I2C_Soft.c: 124: I2C_ReStart();
 17107  003648  EC7D  F01C         	call	_I2C_ReStart	;wreg free
 17108                           
 17109                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
 17110  00364C  80D8               	bsf	status,0,c
 17111  00364E  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
 17112  003650  EC8C  F01A         	call	_I2C_Write
 17113                           
 17114                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
 17115  003654  0E00               	movlw	0
 17116  003656  EC0B  F01A         	call	_I2C_Read
 17117  00365A  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
 17118                           
 17119                           ;I2C_Soft.c: 127: I2C_Stop();
 17120  00365C  ECE9  F01C         	call	_I2C_Stop	;wreg free
 17121                           
 17122                           ;I2C_Soft.c: 128: return Data_Ret;
 17123  003660  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
 17124  003662  D000               	goto	l141
 17125  003664                     l141:
 17126  003664  0012               	return		;funcret
 17127  003666                     __end_of_I2C_Write_Address_Read_One_Byte:
 17128                           	opt stack 0
 17129                           tblptru	equ	0xFF8
 17130                           tblptrh	equ	0xFF7
 17131                           tblptrl	equ	0xFF6
 17132                           tablat	equ	0xFF5
 17133                           prodh	equ	0xFF4
 17134                           prodl	equ	0xFF3
 17135                           intcon	equ	0xFF2
 17136                           intcon2	equ	0xFF1
 17137                           intcon3	equ	0xFF0
 17138                           postinc0	equ	0xFEE
 17139                           wreg	equ	0xFE8
 17140                           postdec1	equ	0xFE5
 17141                           plusw1	equ	0xFE3
 17142                           fsr1l	equ	0xFE1
 17143                           indf2	equ	0xFDF
 17144                           postinc2	equ	0xFDE
 17145                           postdec2	equ	0xFDD
 17146                           plusw2	equ	0xFDB
 17147                           fsr2h	equ	0xFDA
 17148                           fsr2l	equ	0xFD9
 17149                           status	equ	0xFD8
 17150                           
 17151 ;; *************** function _DS1621_Read_Temp *****************
 17152 ;; Defined at:
 17153 ;;		line 29 in file "I2C_Support.c"
 17154 ;; Parameters:    Size  Location     Type
 17155 ;;		None
 17156 ;; Auto vars:     Size  Location     Type
 17157 ;;  Device          1   23[COMRAM] unsigned char 
 17158 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 17159 ;;  Cmd             1   21[COMRAM] unsigned char 
 17160 ;; Return value:  Size  Location     Type
 17161 ;;                  2   19[COMRAM] int 
 17162 ;; Registers used:
 17163 ;;		wreg, status,2, status,0, cstack
 17164 ;; Tracked objects:
 17165 ;;		On entry : 0/0
 17166 ;;		On exit  : 0/0
 17167 ;;		Unchanged: 0/0
 17168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17169 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17170 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17172 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17173 ;;Total ram usage:        5 bytes
 17174 ;; Hardware stack levels used:    1
 17175 ;; Hardware stack levels required when called:    6
 17176 ;; This function calls:
 17177 ;;		_I2C_ReStart
 17178 ;;		_I2C_Read
 17179 ;;		_I2C_Start
 17180 ;;		_I2C_Stop
 17181 ;;		_I2C_Write
 17182 ;; This function is called by:
 17183 ;;		_main
 17184 ;; This function uses a non-reentrant model
 17185 ;;
 17186                           
 17187                           	psect	text102
 17188  003592                     __ptext102:
 17189                           	opt stack 0
 17190  003592                     _DS1621_Read_Temp:
 17191                           	opt stack 24
 17192                           
 17193                           ;I2C_Support.c: 32: char Device = 0x48;
 17194                           
 17195                           ;incstack = 0
 17196  003592  0E48               	movlw	72
 17197  003594  6E18               	movwf	DS1621_Read_Temp@Device,c
 17198                           
 17199                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 17200  003596  0EAA               	movlw	170
 17201  003598  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 17202                           
 17203                           ;I2C_Support.c: 34: char Data_Ret;
 17204                           ;I2C_Support.c: 35: I2C_Start();
 17205  00359A  ECF2  F01C         	call	_I2C_Start	;wreg free
 17206                           
 17207                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 17208  00359E  5018               	movf	DS1621_Read_Temp@Device,w,c
 17209  0035A0  2418               	addwf	DS1621_Read_Temp@Device,w,c
 17210  0035A2  EC8C  F01A         	call	_I2C_Write
 17211                           
 17212                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 17213  0035A6  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 17214  0035A8  EC8C  F01A         	call	_I2C_Write
 17215                           
 17216                           ;I2C_Support.c: 38: I2C_ReStart();
 17217  0035AC  EC7D  F01C         	call	_I2C_ReStart	;wreg free
 17218                           
 17219                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 17220  0035B0  80D8               	bsf	status,0,c
 17221  0035B2  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 17222  0035B4  EC8C  F01A         	call	_I2C_Write
 17223                           
 17224                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 17225  0035B8  0E00               	movlw	0
 17226  0035BA  EC0B  F01A         	call	_I2C_Read
 17227  0035BE  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 17228                           
 17229                           ;I2C_Support.c: 41: I2C_Stop();
 17230  0035C0  ECE9  F01C         	call	_I2C_Stop	;wreg free
 17231                           
 17232                           ;I2C_Support.c: 42: return Data_Ret;
 17233  0035C4  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 17234  0035C8  6A15               	clrf	?_DS1621_Read_Temp+1,c
 17235  0035CA  D000               	goto	l219
 17236  0035CC                     l219:
 17237  0035CC  0012               	return		;funcret
 17238  0035CE                     __end_of_DS1621_Read_Temp:
 17239                           	opt stack 0
 17240                           tblptru	equ	0xFF8
 17241                           tblptrh	equ	0xFF7
 17242                           tblptrl	equ	0xFF6
 17243                           tablat	equ	0xFF5
 17244                           prodh	equ	0xFF4
 17245                           prodl	equ	0xFF3
 17246                           intcon	equ	0xFF2
 17247                           intcon2	equ	0xFF1
 17248                           intcon3	equ	0xFF0
 17249                           postinc0	equ	0xFEE
 17250                           wreg	equ	0xFE8
 17251                           postdec1	equ	0xFE5
 17252                           plusw1	equ	0xFE3
 17253                           fsr1l	equ	0xFE1
 17254                           indf2	equ	0xFDF
 17255                           postinc2	equ	0xFDE
 17256                           postdec2	equ	0xFDD
 17257                           plusw2	equ	0xFDB
 17258                           fsr2h	equ	0xFDA
 17259                           fsr2l	equ	0xFD9
 17260                           status	equ	0xFD8
 17261                           
 17262 ;; *************** function _I2C_Write *****************
 17263 ;; Defined at:
 17264 ;;		line 37 in file "I2C_Soft.c"
 17265 ;; Parameters:    Size  Location     Type
 17266 ;;  outByte         1    wreg     unsigned char 
 17267 ;; Auto vars:     Size  Location     Type
 17268 ;;  outByte         1   16[COMRAM] unsigned char 
 17269 ;;  n               1   17[COMRAM] unsigned char 
 17270 ;; Return value:  Size  Location     Type
 17271 ;;		None               void
 17272 ;; Registers used:
 17273 ;;		wreg, status,2, status,0, cstack
 17274 ;; Tracked objects:
 17275 ;;		On entry : 0/0
 17276 ;;		On exit  : 0/0
 17277 ;;		Unchanged: 0/0
 17278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17283 ;;Total ram usage:        2 bytes
 17284 ;; Hardware stack levels used:    1
 17285 ;; Hardware stack levels required when called:    4
 17286 ;; This function calls:
 17287 ;;		_i2cHighScl
 17288 ;;		_i2cHighSda
 17289 ;;		_i2cLowScl
 17290 ;;		_i2cLowSda
 17291 ;; This function is called by:
 17292 ;;		_I2C_Write_Address_Read_One_Byte
 17293 ;;		_I2C_Write_Address_Write_One_Byte
 17294 ;;		_I2C_Write_Cmd_Only
 17295 ;;		_I2C_Write_Cmd_Write_Data
 17296 ;;		_DS1621_Read_Temp
 17297 ;;		_DS3231_Read_Time
 17298 ;;		_DS3231_Write_Time
 17299 ;;		_DS3231_Read_Alarm_Time
 17300 ;;		_DS3231_Init
 17301 ;;		_DS3231_Write_Alarm_Time
 17302 ;;		_I2C_Write_Cmd_Read_One_Byte
 17303 ;;		_DS3231_Setup_Time
 17304 ;; This function uses a non-reentrant model
 17305 ;;
 17306                           
 17307                           	psect	text103
 17308  003518                     __ptext103:
 17309                           	opt stack 0
 17310  003518                     _I2C_Write:
 17311                           	opt stack 23
 17312                           
 17313                           ;incstack = 0
 17314                           ;I2C_Write@outByte stored from wreg
 17315  003518  6E11               	movwf	I2C_Write@outByte,c
 17316                           
 17317                           ;I2C_Soft.c: 39: unsigned char n;
 17318                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 17319  00351A  0E00               	movlw	0
 17320  00351C  6E12               	movwf	I2C_Write@n,c
 17321  00351E                     l4952:
 17322  00351E  0E07               	movlw	7
 17323  003520  6412               	cpfsgt	I2C_Write@n,c
 17324  003522  D001               	goto	l107
 17325  003524  D011               	goto	l4970
 17326  003526                     l107:
 17327                           
 17328                           ;I2C_Soft.c: 41: {
 17329                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 17330  003526  AE11               	btfss	I2C_Write@outByte,7,c
 17331  003528  D003               	goto	l4958
 17332  00352A  EC6B  F01D         	call	_i2cHighSda	;wreg free
 17333  00352E  D003               	goto	l4960
 17334  003530                     l4958:
 17335                           
 17336                           ;I2C_Soft.c: 43: else i2cLowSda();
 17337  003530  EC5E  F01D         	call	_i2cLowSda	;wreg free
 17338  003534  D000               	goto	l4960
 17339  003536                     l4960:
 17340                           
 17341                           ;I2C_Soft.c: 44: i2cHighScl();
 17342  003536  EC48  F01D         	call	_i2cHighScl	;wreg free
 17343                           
 17344                           ;I2C_Soft.c: 45: i2cLowScl();
 17345  00353A  EC67  F01D         	call	_i2cLowScl	;wreg free
 17346                           
 17347                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 17348  00353E  5011               	movf	I2C_Write@outByte,w,c
 17349  003540  2411               	addwf	I2C_Write@outByte,w,c
 17350  003542  6E11               	movwf	I2C_Write@outByte,c
 17351  003544  2A12               	incf	I2C_Write@n,f,c
 17352  003546  D7EB               	goto	l4952
 17353  003548                     l4970:
 17354                           
 17355                           ;I2C_Soft.c: 47: }
 17356                           ;I2C_Soft.c: 48: i2cHighSda();
 17357  003548  EC6B  F01D         	call	_i2cHighSda	;wreg free
 17358                           
 17359                           ;I2C_Soft.c: 49: i2cHighScl();
 17360  00354C  EC48  F01D         	call	_i2cHighScl	;wreg free
 17361                           
 17362                           ;I2C_Soft.c: 50: i2cLowScl();
 17363  003550  EC67  F01D         	call	_i2cLowScl	;wreg free
 17364  003554  0012               	return		;funcret
 17365  003556                     __end_of_I2C_Write:
 17366                           	opt stack 0
 17367                           tblptru	equ	0xFF8
 17368                           tblptrh	equ	0xFF7
 17369                           tblptrl	equ	0xFF6
 17370                           tablat	equ	0xFF5
 17371                           prodh	equ	0xFF4
 17372                           prodl	equ	0xFF3
 17373                           intcon	equ	0xFF2
 17374                           intcon2	equ	0xFF1
 17375                           intcon3	equ	0xFF0
 17376                           postinc0	equ	0xFEE
 17377                           wreg	equ	0xFE8
 17378                           postdec1	equ	0xFE5
 17379                           plusw1	equ	0xFE3
 17380                           fsr1l	equ	0xFE1
 17381                           indf2	equ	0xFDF
 17382                           postinc2	equ	0xFDE
 17383                           postdec2	equ	0xFDD
 17384                           plusw2	equ	0xFDB
 17385                           fsr2h	equ	0xFDA
 17386                           fsr2l	equ	0xFD9
 17387                           status	equ	0xFD8
 17388                           
 17389 ;; *************** function _I2C_Stop *****************
 17390 ;; Defined at:
 17391 ;;		line 84 in file "I2C_Soft.c"
 17392 ;; Parameters:    Size  Location     Type
 17393 ;;		None
 17394 ;; Auto vars:     Size  Location     Type
 17395 ;;		None
 17396 ;; Return value:  Size  Location     Type
 17397 ;;		None               void
 17398 ;; Registers used:
 17399 ;;		wreg, cstack
 17400 ;; Tracked objects:
 17401 ;;		On entry : 0/0
 17402 ;;		On exit  : 0/0
 17403 ;;		Unchanged: 0/0
 17404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17409 ;;Total ram usage:        0 bytes
 17410 ;; Hardware stack levels used:    1
 17411 ;; Hardware stack levels required when called:    4
 17412 ;; This function calls:
 17413 ;;		_i2cHighScl
 17414 ;;		_i2cHighSda
 17415 ;;		_i2cLowScl
 17416 ;;		_i2cLowSda
 17417 ;; This function is called by:
 17418 ;;		_I2C_Write_Address_Read_One_Byte
 17419 ;;		_I2C_Write_Address_Write_One_Byte
 17420 ;;		_I2C_Write_Cmd_Only
 17421 ;;		_I2C_Write_Cmd_Write_Data
 17422 ;;		_DS1621_Read_Temp
 17423 ;;		_DS3231_Read_Time
 17424 ;;		_DS3231_Write_Time
 17425 ;;		_DS3231_Read_Alarm_Time
 17426 ;;		_DS3231_Init
 17427 ;;		_DS3231_Write_Alarm_Time
 17428 ;;		_I2C_Write_Cmd_Read_One_Byte
 17429 ;;		_DS3231_Setup_Time
 17430 ;; This function uses a non-reentrant model
 17431 ;;
 17432                           
 17433                           	psect	text104
 17434  0039D2                     __ptext104:
 17435                           	opt stack 0
 17436  0039D2                     _I2C_Stop:
 17437                           	opt stack 23
 17438                           
 17439                           ;I2C_Soft.c: 86: i2cLowScl();
 17440                           
 17441                           ;incstack = 0
 17442  0039D2  EC67  F01D         	call	_i2cLowScl	;wreg free
 17443                           
 17444                           ;I2C_Soft.c: 87: i2cLowSda();
 17445  0039D6  EC5E  F01D         	call	_i2cLowSda	;wreg free
 17446                           
 17447                           ;I2C_Soft.c: 88: i2cHighScl();
 17448  0039DA  EC48  F01D         	call	_i2cHighScl	;wreg free
 17449                           
 17450                           ;I2C_Soft.c: 89: i2cHighSda();
 17451  0039DE  EC6B  F01D         	call	_i2cHighSda	;wreg free
 17452  0039E2  0012               	return		;funcret
 17453  0039E4                     __end_of_I2C_Stop:
 17454                           	opt stack 0
 17455                           tblptru	equ	0xFF8
 17456                           tblptrh	equ	0xFF7
 17457                           tblptrl	equ	0xFF6
 17458                           tablat	equ	0xFF5
 17459                           prodh	equ	0xFF4
 17460                           prodl	equ	0xFF3
 17461                           intcon	equ	0xFF2
 17462                           intcon2	equ	0xFF1
 17463                           intcon3	equ	0xFF0
 17464                           postinc0	equ	0xFEE
 17465                           wreg	equ	0xFE8
 17466                           postdec1	equ	0xFE5
 17467                           plusw1	equ	0xFE3
 17468                           fsr1l	equ	0xFE1
 17469                           indf2	equ	0xFDF
 17470                           postinc2	equ	0xFDE
 17471                           postdec2	equ	0xFDD
 17472                           plusw2	equ	0xFDB
 17473                           fsr2h	equ	0xFDA
 17474                           fsr2l	equ	0xFD9
 17475                           status	equ	0xFD8
 17476                           
 17477 ;; *************** function _I2C_Start *****************
 17478 ;; Defined at:
 17479 ;;		line 67 in file "I2C_Soft.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;		None
 17482 ;; Auto vars:     Size  Location     Type
 17483 ;;		None
 17484 ;; Return value:  Size  Location     Type
 17485 ;;		None               void
 17486 ;; Registers used:
 17487 ;;		wreg, cstack
 17488 ;; Tracked objects:
 17489 ;;		On entry : 0/0
 17490 ;;		On exit  : 0/0
 17491 ;;		Unchanged: 0/0
 17492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17497 ;;Total ram usage:        0 bytes
 17498 ;; Hardware stack levels used:    1
 17499 ;; Hardware stack levels required when called:    4
 17500 ;; This function calls:
 17501 ;;		_i2cHighScl
 17502 ;;		_i2cHighSda
 17503 ;;		_i2cLowScl
 17504 ;;		_i2cLowSda
 17505 ;; This function is called by:
 17506 ;;		_I2C_Write_Address_Read_One_Byte
 17507 ;;		_I2C_Write_Address_Write_One_Byte
 17508 ;;		_I2C_Write_Cmd_Only
 17509 ;;		_I2C_Write_Cmd_Write_Data
 17510 ;;		_DS1621_Read_Temp
 17511 ;;		_DS3231_Read_Time
 17512 ;;		_DS3231_Write_Time
 17513 ;;		_DS3231_Read_Alarm_Time
 17514 ;;		_DS3231_Init
 17515 ;;		_DS3231_Write_Alarm_Time
 17516 ;;		_I2C_Write_Cmd_Read_One_Byte
 17517 ;;		_DS3231_Setup_Time
 17518 ;; This function uses a non-reentrant model
 17519 ;;
 17520                           
 17521                           	psect	text105
 17522  0039E4                     __ptext105:
 17523                           	opt stack 0
 17524  0039E4                     _I2C_Start:
 17525                           	opt stack 23
 17526                           
 17527                           ;I2C_Soft.c: 69: i2cHighSda();
 17528                           
 17529                           ;incstack = 0
 17530  0039E4  EC6B  F01D         	call	_i2cHighSda	;wreg free
 17531                           
 17532                           ;I2C_Soft.c: 70: i2cHighScl();
 17533  0039E8  EC48  F01D         	call	_i2cHighScl	;wreg free
 17534                           
 17535                           ;I2C_Soft.c: 71: i2cLowSda();
 17536  0039EC  EC5E  F01D         	call	_i2cLowSda	;wreg free
 17537                           
 17538                           ;I2C_Soft.c: 72: i2cLowScl();
 17539  0039F0  EC67  F01D         	call	_i2cLowScl	;wreg free
 17540  0039F4  0012               	return		;funcret
 17541  0039F6                     __end_of_I2C_Start:
 17542                           	opt stack 0
 17543                           tblptru	equ	0xFF8
 17544                           tblptrh	equ	0xFF7
 17545                           tblptrl	equ	0xFF6
 17546                           tablat	equ	0xFF5
 17547                           prodh	equ	0xFF4
 17548                           prodl	equ	0xFF3
 17549                           intcon	equ	0xFF2
 17550                           intcon2	equ	0xFF1
 17551                           intcon3	equ	0xFF0
 17552                           postinc0	equ	0xFEE
 17553                           wreg	equ	0xFE8
 17554                           postdec1	equ	0xFE5
 17555                           plusw1	equ	0xFE3
 17556                           fsr1l	equ	0xFE1
 17557                           indf2	equ	0xFDF
 17558                           postinc2	equ	0xFDE
 17559                           postdec2	equ	0xFDD
 17560                           plusw2	equ	0xFDB
 17561                           fsr2h	equ	0xFDA
 17562                           fsr2l	equ	0xFD9
 17563                           status	equ	0xFD8
 17564                           
 17565 ;; *************** function _I2C_Read *****************
 17566 ;; Defined at:
 17567 ;;		line 16 in file "I2C_Soft.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  ack             1    wreg     unsigned char 
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;  ack             1   16[COMRAM] unsigned char 
 17572 ;;  inByte          1   18[COMRAM] unsigned char 
 17573 ;;  n               1   17[COMRAM] unsigned char 
 17574 ;; Return value:  Size  Location     Type
 17575 ;;                  1    wreg      unsigned char 
 17576 ;; Registers used:
 17577 ;;		wreg, status,2, status,0, cstack
 17578 ;; Tracked objects:
 17579 ;;		On entry : 0/0
 17580 ;;		On exit  : 0/0
 17581 ;;		Unchanged: 0/0
 17582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17584 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17586 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17587 ;;Total ram usage:        3 bytes
 17588 ;; Hardware stack levels used:    1
 17589 ;; Hardware stack levels required when called:    5
 17590 ;; This function calls:
 17591 ;;		_i2cAck
 17592 ;;		_i2cHighScl
 17593 ;;		_i2cHighSda
 17594 ;;		_i2cLowScl
 17595 ;;		_i2cNack
 17596 ;; This function is called by:
 17597 ;;		_I2C_Write_Address_Read_One_Byte
 17598 ;;		_DS1621_Read_Temp
 17599 ;;		_DS3231_Read_Time
 17600 ;;		_DS3231_Read_Alarm_Time
 17601 ;;		_DS3231_Init
 17602 ;;		_I2C_Write_Cmd_Read_One_Byte
 17603 ;; This function uses a non-reentrant model
 17604 ;;
 17605                           
 17606                           	psect	text106
 17607  003416                     __ptext106:
 17608                           	opt stack 0
 17609  003416                     _I2C_Read:
 17610                           	opt stack 22
 17611                           
 17612                           ;incstack = 0
 17613                           ;I2C_Read@ack stored from wreg
 17614  003416  6E11               	movwf	I2C_Read@ack,c
 17615                           
 17616                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 17617                           ;I2C_Soft.c: 19: i2cHighSda();
 17618  003418  EC6B  F01D         	call	_i2cHighSda	;wreg free
 17619                           
 17620                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 17621  00341C  0E00               	movlw	0
 17622  00341E  6E12               	movwf	I2C_Read@n,c
 17623  003420                     l4922:
 17624  003420  0E07               	movlw	7
 17625  003422  6412               	cpfsgt	I2C_Read@n,c
 17626  003424  D001               	goto	l4926
 17627  003426  D00F               	goto	l4940
 17628  003428                     l4926:
 17629                           
 17630                           ;I2C_Soft.c: 21: {
 17631                           ;I2C_Soft.c: 22: i2cHighScl();
 17632  003428  EC48  F01D         	call	_i2cHighScl	;wreg free
 17633                           
 17634                           ;I2C_Soft.c: 24: if (PORTDbits.RD7)
 17635  00342C  AE83               	btfss	3971,7,c	;volatile
 17636  00342E  D003               	goto	l4932
 17637                           
 17638                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 17639  003430  80D8               	bsf	status,0,c
 17640  003432  3613               	rlcf	I2C_Read@inByte,f,c
 17641  003434  D004               	goto	l4934
 17642  003436                     l4932:
 17643                           
 17644                           ;I2C_Soft.c: 26: else
 17645                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 17646  003436  5013               	movf	I2C_Read@inByte,w,c
 17647  003438  2413               	addwf	I2C_Read@inByte,w,c
 17648  00343A  6E13               	movwf	I2C_Read@inByte,c
 17649  00343C  D000               	goto	l4934
 17650  00343E                     l4934:
 17651                           
 17652                           ;I2C_Soft.c: 28: i2cLowScl();
 17653  00343E  EC67  F01D         	call	_i2cLowScl	;wreg free
 17654  003442  2A12               	incf	I2C_Read@n,f,c
 17655  003444  D7ED               	goto	l4922
 17656  003446                     l4940:
 17657                           
 17658                           ;I2C_Soft.c: 29: }
 17659                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 17660  003446  5011               	movf	I2C_Read@ack,w,c
 17661  003448  B4D8               	btfsc	status,2,c
 17662  00344A  D003               	goto	l4944
 17663  00344C  ECFB  F01C         	call	_i2cAck	;wreg free
 17664  003450  D003               	goto	l4946
 17665  003452                     l4944:
 17666                           
 17667                           ;I2C_Soft.c: 31: else i2cNack();
 17668  003452  EC59  F01D         	call	_i2cNack	;wreg free
 17669  003456  D000               	goto	l4946
 17670  003458                     l4946:
 17671                           
 17672                           ;I2C_Soft.c: 34: return(inByte);
 17673  003458  5013               	movf	I2C_Read@inByte,w,c
 17674  00345A  D000               	goto	l104
 17675  00345C                     l104:
 17676  00345C  0012               	return		;funcret
 17677  00345E                     __end_of_I2C_Read:
 17678                           	opt stack 0
 17679                           tblptru	equ	0xFF8
 17680                           tblptrh	equ	0xFF7
 17681                           tblptrl	equ	0xFF6
 17682                           tablat	equ	0xFF5
 17683                           prodh	equ	0xFF4
 17684                           prodl	equ	0xFF3
 17685                           intcon	equ	0xFF2
 17686                           intcon2	equ	0xFF1
 17687                           intcon3	equ	0xFF0
 17688                           postinc0	equ	0xFEE
 17689                           wreg	equ	0xFE8
 17690                           postdec1	equ	0xFE5
 17691                           plusw1	equ	0xFE3
 17692                           fsr1l	equ	0xFE1
 17693                           indf2	equ	0xFDF
 17694                           postinc2	equ	0xFDE
 17695                           postdec2	equ	0xFDD
 17696                           plusw2	equ	0xFDB
 17697                           fsr2h	equ	0xFDA
 17698                           fsr2l	equ	0xFD9
 17699                           status	equ	0xFD8
 17700                           
 17701 ;; *************** function _i2cNack *****************
 17702 ;; Defined at:
 17703 ;;		line 53 in file "I2C_Soft.c"
 17704 ;; Parameters:    Size  Location     Type
 17705 ;;		None
 17706 ;; Auto vars:     Size  Location     Type
 17707 ;;		None
 17708 ;; Return value:  Size  Location     Type
 17709 ;;		None               void
 17710 ;; Registers used:
 17711 ;;		wreg, cstack
 17712 ;; Tracked objects:
 17713 ;;		On entry : 0/0
 17714 ;;		On exit  : 0/0
 17715 ;;		Unchanged: 0/0
 17716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17721 ;;Total ram usage:        0 bytes
 17722 ;; Hardware stack levels used:    1
 17723 ;; Hardware stack levels required when called:    4
 17724 ;; This function calls:
 17725 ;;		_i2cHighScl
 17726 ;;		_i2cLowScl
 17727 ;; This function is called by:
 17728 ;;		_I2C_Read
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           	psect	text107
 17733  003AB2                     __ptext107:
 17734                           	opt stack 0
 17735  003AB2                     _i2cNack:
 17736                           	opt stack 22
 17737                           
 17738                           ;I2C_Soft.c: 55: i2cHighScl();
 17739                           
 17740                           ;incstack = 0
 17741  003AB2  EC48  F01D         	call	_i2cHighScl	;wreg free
 17742                           
 17743                           ;I2C_Soft.c: 56: i2cLowScl();
 17744  003AB6  EC67  F01D         	call	_i2cLowScl	;wreg free
 17745  003ABA  0012               	return		;funcret
 17746  003ABC                     __end_of_i2cNack:
 17747                           	opt stack 0
 17748                           tblptru	equ	0xFF8
 17749                           tblptrh	equ	0xFF7
 17750                           tblptrl	equ	0xFF6
 17751                           tablat	equ	0xFF5
 17752                           prodh	equ	0xFF4
 17753                           prodl	equ	0xFF3
 17754                           intcon	equ	0xFF2
 17755                           intcon2	equ	0xFF1
 17756                           intcon3	equ	0xFF0
 17757                           postinc0	equ	0xFEE
 17758                           wreg	equ	0xFE8
 17759                           postdec1	equ	0xFE5
 17760                           plusw1	equ	0xFE3
 17761                           fsr1l	equ	0xFE1
 17762                           indf2	equ	0xFDF
 17763                           postinc2	equ	0xFDE
 17764                           postdec2	equ	0xFDD
 17765                           plusw2	equ	0xFDB
 17766                           fsr2h	equ	0xFDA
 17767                           fsr2l	equ	0xFD9
 17768                           status	equ	0xFD8
 17769                           
 17770 ;; *************** function _i2cAck *****************
 17771 ;; Defined at:
 17772 ;;		line 59 in file "I2C_Soft.c"
 17773 ;; Parameters:    Size  Location     Type
 17774 ;;		None
 17775 ;; Auto vars:     Size  Location     Type
 17776 ;;		None
 17777 ;; Return value:  Size  Location     Type
 17778 ;;		None               void
 17779 ;; Registers used:
 17780 ;;		wreg, cstack
 17781 ;; Tracked objects:
 17782 ;;		On entry : 0/0
 17783 ;;		On exit  : 0/0
 17784 ;;		Unchanged: 0/0
 17785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17790 ;;Total ram usage:        0 bytes
 17791 ;; Hardware stack levels used:    1
 17792 ;; Hardware stack levels required when called:    4
 17793 ;; This function calls:
 17794 ;;		_i2cHighScl
 17795 ;;		_i2cHighSda
 17796 ;;		_i2cLowScl
 17797 ;;		_i2cLowSda
 17798 ;; This function is called by:
 17799 ;;		_I2C_Read
 17800 ;; This function uses a non-reentrant model
 17801 ;;
 17802                           
 17803                           	psect	text108
 17804  0039F6                     __ptext108:
 17805                           	opt stack 0
 17806  0039F6                     _i2cAck:
 17807                           	opt stack 22
 17808                           
 17809                           ;I2C_Soft.c: 61: i2cLowSda();
 17810                           
 17811                           ;incstack = 0
 17812  0039F6  EC5E  F01D         	call	_i2cLowSda	;wreg free
 17813                           
 17814                           ;I2C_Soft.c: 62: i2cHighScl();
 17815  0039FA  EC48  F01D         	call	_i2cHighScl	;wreg free
 17816                           
 17817                           ;I2C_Soft.c: 63: i2cLowScl();
 17818  0039FE  EC67  F01D         	call	_i2cLowScl	;wreg free
 17819                           
 17820                           ;I2C_Soft.c: 64: i2cHighSda();
 17821  003A02  EC6B  F01D         	call	_i2cHighSda	;wreg free
 17822  003A06  0012               	return		;funcret
 17823  003A08                     __end_of_i2cAck:
 17824                           	opt stack 0
 17825                           tblptru	equ	0xFF8
 17826                           tblptrh	equ	0xFF7
 17827                           tblptrl	equ	0xFF6
 17828                           tablat	equ	0xFF5
 17829                           prodh	equ	0xFF4
 17830                           prodl	equ	0xFF3
 17831                           intcon	equ	0xFF2
 17832                           intcon2	equ	0xFF1
 17833                           intcon3	equ	0xFF0
 17834                           postinc0	equ	0xFEE
 17835                           wreg	equ	0xFE8
 17836                           postdec1	equ	0xFE5
 17837                           plusw1	equ	0xFE3
 17838                           fsr1l	equ	0xFE1
 17839                           indf2	equ	0xFDF
 17840                           postinc2	equ	0xFDE
 17841                           postdec2	equ	0xFDD
 17842                           plusw2	equ	0xFDB
 17843                           fsr2h	equ	0xFDA
 17844                           fsr2l	equ	0xFD9
 17845                           status	equ	0xFD8
 17846                           
 17847 ;; *************** function _I2C_ReStart *****************
 17848 ;; Defined at:
 17849 ;;		line 75 in file "I2C_Soft.c"
 17850 ;; Parameters:    Size  Location     Type
 17851 ;;		None
 17852 ;; Auto vars:     Size  Location     Type
 17853 ;;		None
 17854 ;; Return value:  Size  Location     Type
 17855 ;;		None               void
 17856 ;; Registers used:
 17857 ;;		wreg, cstack
 17858 ;; Tracked objects:
 17859 ;;		On entry : 0/0
 17860 ;;		On exit  : 0/0
 17861 ;;		Unchanged: 0/0
 17862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17867 ;;Total ram usage:        0 bytes
 17868 ;; Hardware stack levels used:    1
 17869 ;; Hardware stack levels required when called:    4
 17870 ;; This function calls:
 17871 ;;		_i2cHighScl
 17872 ;;		_i2cHighSda
 17873 ;;		_i2cLowScl
 17874 ;;		_i2cLowSda
 17875 ;; This function is called by:
 17876 ;;		_I2C_Write_Address_Read_One_Byte
 17877 ;;		_DS1621_Read_Temp
 17878 ;;		_DS3231_Read_Time
 17879 ;;		_DS3231_Read_Alarm_Time
 17880 ;;		_DS3231_Init
 17881 ;;		_I2C_Write_Cmd_Read_One_Byte
 17882 ;; This function uses a non-reentrant model
 17883 ;;
 17884                           
 17885                           	psect	text109
 17886  0038FA                     __ptext109:
 17887                           	opt stack 0
 17888  0038FA                     _I2C_ReStart:
 17889                           	opt stack 23
 17890                           
 17891                           ;I2C_Soft.c: 77: i2cLowScl();
 17892                           
 17893                           ;incstack = 0
 17894  0038FA  EC67  F01D         	call	_i2cLowScl	;wreg free
 17895                           
 17896                           ;I2C_Soft.c: 78: i2cHighSda();
 17897  0038FE  EC6B  F01D         	call	_i2cHighSda	;wreg free
 17898                           
 17899                           ;I2C_Soft.c: 79: i2cHighScl();
 17900  003902  EC48  F01D         	call	_i2cHighScl	;wreg free
 17901                           
 17902                           ;I2C_Soft.c: 80: i2cLowSda();
 17903  003906  EC5E  F01D         	call	_i2cLowSda	;wreg free
 17904                           
 17905                           ;I2C_Soft.c: 81: i2cLowScl();
 17906  00390A  EC67  F01D         	call	_i2cLowScl	;wreg free
 17907  00390E  0012               	return		;funcret
 17908  003910                     __end_of_I2C_ReStart:
 17909                           	opt stack 0
 17910                           tblptru	equ	0xFF8
 17911                           tblptrh	equ	0xFF7
 17912                           tblptrl	equ	0xFF6
 17913                           tablat	equ	0xFF5
 17914                           prodh	equ	0xFF4
 17915                           prodl	equ	0xFF3
 17916                           intcon	equ	0xFF2
 17917                           intcon2	equ	0xFF1
 17918                           intcon3	equ	0xFF0
 17919                           postinc0	equ	0xFEE
 17920                           wreg	equ	0xFE8
 17921                           postdec1	equ	0xFE5
 17922                           plusw1	equ	0xFE3
 17923                           fsr1l	equ	0xFE1
 17924                           indf2	equ	0xFDF
 17925                           postinc2	equ	0xFDE
 17926                           postdec2	equ	0xFDD
 17927                           plusw2	equ	0xFDB
 17928                           fsr2h	equ	0xFDA
 17929                           fsr2l	equ	0xFD9
 17930                           status	equ	0xFD8
 17931                           
 17932 ;; *************** function _i2cLowSda *****************
 17933 ;; Defined at:
 17934 ;;		line 98 in file "I2C_Soft.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;		None
 17937 ;; Auto vars:     Size  Location     Type
 17938 ;;		None
 17939 ;; Return value:  Size  Location     Type
 17940 ;;		None               void
 17941 ;; Registers used:
 17942 ;;		None
 17943 ;; Tracked objects:
 17944 ;;		On entry : 0/0
 17945 ;;		On exit  : 0/0
 17946 ;;		Unchanged: 0/0
 17947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;Total ram usage:        0 bytes
 17953 ;; Hardware stack levels used:    1
 17954 ;; Hardware stack levels required when called:    3
 17955 ;; This function calls:
 17956 ;;		Nothing
 17957 ;; This function is called by:
 17958 ;;		_I2C_Write
 17959 ;;		_i2cAck
 17960 ;;		_I2C_Start
 17961 ;;		_I2C_ReStart
 17962 ;;		_I2C_Stop
 17963 ;; This function uses a non-reentrant model
 17964 ;;
 17965                           
 17966                           	psect	text110
 17967  003ABC                     __ptext110:
 17968                           	opt stack 0
 17969  003ABC                     _i2cLowSda:
 17970                           	opt stack 23
 17971                           
 17972                           ;I2C_Soft.c: 100: PORTDbits.RD7 = 0;
 17973                           
 17974                           ;incstack = 0
 17975  003ABC  9E83               	bcf	3971,7,c	;volatile
 17976                           
 17977                           ;I2C_Soft.c: 101: TRISDbits.RD7 = 0;
 17978  003ABE  9E95               	bcf	3989,7,c	;volatile
 17979                           
 17980                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 17981  003AC0  D000               	nop2		;2 cycle nop
 17982  003AC2  D000               	nop2		;2 cycle nop
 17983  003AC4  0012               	return		;funcret
 17984  003AC6                     __end_of_i2cLowSda:
 17985                           	opt stack 0
 17986                           tblptru	equ	0xFF8
 17987                           tblptrh	equ	0xFF7
 17988                           tblptrl	equ	0xFF6
 17989                           tablat	equ	0xFF5
 17990                           prodh	equ	0xFF4
 17991                           prodl	equ	0xFF3
 17992                           intcon	equ	0xFF2
 17993                           intcon2	equ	0xFF1
 17994                           intcon3	equ	0xFF0
 17995                           postinc0	equ	0xFEE
 17996                           wreg	equ	0xFE8
 17997                           postdec1	equ	0xFE5
 17998                           plusw1	equ	0xFE3
 17999                           fsr1l	equ	0xFE1
 18000                           indf2	equ	0xFDF
 18001                           postinc2	equ	0xFDE
 18002                           postdec2	equ	0xFDD
 18003                           plusw2	equ	0xFDB
 18004                           fsr2h	equ	0xFDA
 18005                           fsr2l	equ	0xFD9
 18006                           status	equ	0xFD8
 18007                           
 18008 ;; *************** function _i2cLowScl *****************
 18009 ;; Defined at:
 18010 ;;		line 111 in file "I2C_Soft.c"
 18011 ;; Parameters:    Size  Location     Type
 18012 ;;		None
 18013 ;; Auto vars:     Size  Location     Type
 18014 ;;		None
 18015 ;; Return value:  Size  Location     Type
 18016 ;;		None               void
 18017 ;; Registers used:
 18018 ;;		None
 18019 ;; Tracked objects:
 18020 ;;		On entry : 0/0
 18021 ;;		On exit  : 0/0
 18022 ;;		Unchanged: 0/0
 18023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18028 ;;Total ram usage:        0 bytes
 18029 ;; Hardware stack levels used:    1
 18030 ;; Hardware stack levels required when called:    3
 18031 ;; This function calls:
 18032 ;;		Nothing
 18033 ;; This function is called by:
 18034 ;;		_I2C_Read
 18035 ;;		_I2C_Write
 18036 ;;		_i2cNack
 18037 ;;		_i2cAck
 18038 ;;		_I2C_Start
 18039 ;;		_I2C_ReStart
 18040 ;;		_I2C_Stop
 18041 ;; This function uses a non-reentrant model
 18042 ;;
 18043                           
 18044                           	psect	text111
 18045  003ACE                     __ptext111:
 18046                           	opt stack 0
 18047  003ACE                     _i2cLowScl:
 18048                           	opt stack 23
 18049                           
 18050                           ;I2C_Soft.c: 113: PORTBbits.RB4 = 0;
 18051                           
 18052                           ;incstack = 0
 18053  003ACE  9881               	bcf	3969,4,c	;volatile
 18054                           
 18055                           ;I2C_Soft.c: 114: TRISBbits.RB4 = 0;
 18056  003AD0  9893               	bcf	3987,4,c	;volatile
 18057                           
 18058                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 18059  003AD2  D000               	nop2		;2 cycle nop
 18060  003AD4  0012               	return		;funcret
 18061  003AD6                     __end_of_i2cLowScl:
 18062                           	opt stack 0
 18063                           tblptru	equ	0xFF8
 18064                           tblptrh	equ	0xFF7
 18065                           tblptrl	equ	0xFF6
 18066                           tablat	equ	0xFF5
 18067                           prodh	equ	0xFF4
 18068                           prodl	equ	0xFF3
 18069                           intcon	equ	0xFF2
 18070                           intcon2	equ	0xFF1
 18071                           intcon3	equ	0xFF0
 18072                           postinc0	equ	0xFEE
 18073                           wreg	equ	0xFE8
 18074                           postdec1	equ	0xFE5
 18075                           plusw1	equ	0xFE3
 18076                           fsr1l	equ	0xFE1
 18077                           indf2	equ	0xFDF
 18078                           postinc2	equ	0xFDE
 18079                           postdec2	equ	0xFDD
 18080                           plusw2	equ	0xFDB
 18081                           fsr2h	equ	0xFDA
 18082                           fsr2l	equ	0xFD9
 18083                           status	equ	0xFD8
 18084                           
 18085 ;; *************** function _i2cHighSda *****************
 18086 ;; Defined at:
 18087 ;;		line 92 in file "I2C_Soft.c"
 18088 ;; Parameters:    Size  Location     Type
 18089 ;;		None
 18090 ;; Auto vars:     Size  Location     Type
 18091 ;;		None
 18092 ;; Return value:  Size  Location     Type
 18093 ;;		None               void
 18094 ;; Registers used:
 18095 ;;		None
 18096 ;; Tracked objects:
 18097 ;;		On entry : 0/0
 18098 ;;		On exit  : 0/0
 18099 ;;		Unchanged: 0/0
 18100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18105 ;;Total ram usage:        0 bytes
 18106 ;; Hardware stack levels used:    1
 18107 ;; Hardware stack levels required when called:    3
 18108 ;; This function calls:
 18109 ;;		Nothing
 18110 ;; This function is called by:
 18111 ;;		_I2C_Init
 18112 ;;		_I2C_Read
 18113 ;;		_I2C_Write
 18114 ;;		_i2cAck
 18115 ;;		_I2C_Start
 18116 ;;		_I2C_ReStart
 18117 ;;		_I2C_Stop
 18118 ;; This function uses a non-reentrant model
 18119 ;;
 18120                           
 18121                           	psect	text112
 18122  003AD6                     __ptext112:
 18123                           	opt stack 0
 18124  003AD6                     _i2cHighSda:
 18125                           	opt stack 23
 18126                           
 18127                           ;I2C_Soft.c: 94: TRISDbits.RD7 = 1;
 18128                           
 18129                           ;incstack = 0
 18130  003AD6  8E95               	bsf	3989,7,c	;volatile
 18131                           
 18132                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18133  003AD8  D000               	nop2		;2 cycle nop
 18134  003ADA  D000               	nop2		;2 cycle nop
 18135  003ADC  0012               	return		;funcret
 18136  003ADE                     __end_of_i2cHighSda:
 18137                           	opt stack 0
 18138                           tblptru	equ	0xFF8
 18139                           tblptrh	equ	0xFF7
 18140                           tblptrl	equ	0xFF6
 18141                           tablat	equ	0xFF5
 18142                           prodh	equ	0xFF4
 18143                           prodl	equ	0xFF3
 18144                           intcon	equ	0xFF2
 18145                           intcon2	equ	0xFF1
 18146                           intcon3	equ	0xFF0
 18147                           postinc0	equ	0xFEE
 18148                           wreg	equ	0xFE8
 18149                           postdec1	equ	0xFE5
 18150                           plusw1	equ	0xFE3
 18151                           fsr1l	equ	0xFE1
 18152                           indf2	equ	0xFDF
 18153                           postinc2	equ	0xFDE
 18154                           postdec2	equ	0xFDD
 18155                           plusw2	equ	0xFDB
 18156                           fsr2h	equ	0xFDA
 18157                           fsr2l	equ	0xFD9
 18158                           status	equ	0xFD8
 18159                           
 18160 ;; *************** function _i2cHighScl *****************
 18161 ;; Defined at:
 18162 ;;		line 105 in file "I2C_Soft.c"
 18163 ;; Parameters:    Size  Location     Type
 18164 ;;		None
 18165 ;; Auto vars:     Size  Location     Type
 18166 ;;		None
 18167 ;; Return value:  Size  Location     Type
 18168 ;;		None               void
 18169 ;; Registers used:
 18170 ;;		wreg
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18180 ;;Total ram usage:        0 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    3
 18183 ;; This function calls:
 18184 ;;		Nothing
 18185 ;; This function is called by:
 18186 ;;		_I2C_Init
 18187 ;;		_I2C_Read
 18188 ;;		_I2C_Write
 18189 ;;		_i2cNack
 18190 ;;		_i2cAck
 18191 ;;		_I2C_Start
 18192 ;;		_I2C_ReStart
 18193 ;;		_I2C_Stop
 18194 ;; This function uses a non-reentrant model
 18195 ;;
 18196                           
 18197                           	psect	text113
 18198  003A90                     __ptext113:
 18199                           	opt stack 0
 18200  003A90                     _i2cHighScl:
 18201                           	opt stack 23
 18202                           
 18203                           ;I2C_Soft.c: 107: TRISBbits.RB4 = 1;
 18204                           
 18205                           ;incstack = 0
 18206  003A90  8893               	bsf	3987,4,c	;volatile
 18207                           
 18208                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 18209  003A92  0E06               	movlw	6
 18210  003A94                     u7077:
 18211  003A94  2EE8               	decfsz	wreg,f,c
 18212  003A96  D7FE               	goto	u7077
 18213  003A98  D000               	nop2		;nop
 18214  003A9A  0012               	return		;funcret
 18215  003A9C                     __end_of_i2cHighScl:
 18216                           	opt stack 0
 18217                           tblptru	equ	0xFF8
 18218                           tblptrh	equ	0xFF7
 18219                           tblptrl	equ	0xFF6
 18220                           tablat	equ	0xFF5
 18221                           prodh	equ	0xFF4
 18222                           prodl	equ	0xFF3
 18223                           intcon	equ	0xFF2
 18224                           intcon2	equ	0xFF1
 18225                           intcon3	equ	0xFF0
 18226                           postinc0	equ	0xFEE
 18227                           wreg	equ	0xFE8
 18228                           postdec1	equ	0xFE5
 18229                           plusw1	equ	0xFE3
 18230                           fsr1l	equ	0xFE1
 18231                           indf2	equ	0xFDF
 18232                           postinc2	equ	0xFDE
 18233                           postdec2	equ	0xFDD
 18234                           plusw2	equ	0xFDB
 18235                           fsr2h	equ	0xFDA
 18236                           fsr2l	equ	0xFD9
 18237                           status	equ	0xFD8
 18238                           
 18239 ;; *************** function _chkisr *****************
 18240 ;; Defined at:
 18241 ;;		line 35 in file "Interrupt.c"
 18242 ;; Parameters:    Size  Location     Type
 18243 ;;		None
 18244 ;; Auto vars:     Size  Location     Type
 18245 ;;		None
 18246 ;; Return value:  Size  Location     Type
 18247 ;;		None               void
 18248 ;; Registers used:
 18249 ;;		wreg, status,2, status,0, cstack
 18250 ;; Tracked objects:
 18251 ;;		On entry : 0/0
 18252 ;;		On exit  : 0/0
 18253 ;;		Unchanged: 0/0
 18254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18257 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18259 ;;Total ram usage:       14 bytes
 18260 ;; Hardware stack levels used:    1
 18261 ;; Hardware stack levels required when called:    2
 18262 ;; This function calls:
 18263 ;;		_INT0_isr
 18264 ;;		_INT1_isr
 18265 ;;		_TIMER1_isr
 18266 ;; This function is called by:
 18267 ;;		Interrupt level 2
 18268 ;; This function uses a non-reentrant model
 18269 ;;
 18270                           
 18271                           	psect	intcode
 18272  000008                     __pintcode:
 18273                           	opt stack 0
 18274  000008                     _chkisr:
 18275                           	opt stack 18
 18276                           
 18277                           ;incstack = 0
 18278  000008  CFFA F003          	movff	pclath,??_chkisr
 18279  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 18280  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 18281  000014  EDD4  F015         	call	int_func,f	;refresh shadow registers
 18282                           pclatu	equ	0xFFB
 18283                           pclath	equ	0xFFA
 18284                           tblptru	equ	0xFF8
 18285                           tblptrh	equ	0xFF7
 18286                           tblptrl	equ	0xFF6
 18287                           tablat	equ	0xFF5
 18288                           prodh	equ	0xFF4
 18289                           prodl	equ	0xFF3
 18290                           intcon	equ	0xFF2
 18291                           intcon2	equ	0xFF1
 18292                           intcon3	equ	0xFF0
 18293                           postinc0	equ	0xFEE
 18294                           fsr0l	equ	0xFE9
 18295                           wreg	equ	0xFE8
 18296                           postdec1	equ	0xFE5
 18297                           plusw1	equ	0xFE3
 18298                           fsr1l	equ	0xFE1
 18299                           indf2	equ	0xFDF
 18300                           postinc2	equ	0xFDE
 18301                           postdec2	equ	0xFDD
 18302                           plusw2	equ	0xFDB
 18303                           fsr2h	equ	0xFDA
 18304                           fsr2l	equ	0xFD9
 18305                           status	equ	0xFD8
 18306                           
 18307                           	psect	intcode_body
 18308  002BA8                     __pintcode_body:
 18309                           	opt stack 18
 18310  002BA8                     int_func:
 18311                           	opt stack 18
 18312  002BA8  0006               	pop		; remove dummy address from shadow register refresh
 18313  002BAA  CFEA F006          	movff	fsr0h,??_chkisr+3
 18314  002BAE  CFE1 F007          	movff	fsr1l,??_chkisr+4
 18315  002BB2  CFE2 F008          	movff	fsr1h,??_chkisr+5
 18316  002BB6  CFD9 F009          	movff	fsr2l,??_chkisr+6
 18317  002BBA  CFDA F00A          	movff	fsr2h,??_chkisr+7
 18318  002BBE  CFF3 F00B          	movff	prodl,??_chkisr+8
 18319  002BC2  CFF4 F00C          	movff	prodh,??_chkisr+9
 18320  002BC6  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 18321  002BCA  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 18322  002BCE  CFF8 F00F          	movff	tblptru,??_chkisr+12
 18323  002BD2  CFF5 F010          	movff	tablat,??_chkisr+13
 18324                           
 18325                           ;Interrupt.c: 38: if(PIR1bits.TMR1IF == 1) TIMER1_isr();
 18326  002BD6  A09E               	btfss	3998,0,c	;volatile
 18327  002BD8  D003               	goto	i2l7202
 18328  002BDA  EC4E  F01D         	call	_TIMER1_isr	;wreg free
 18329  002BDE  D000               	goto	i2l7202
 18330  002BE0                     i2l7202:
 18331                           
 18332                           ;Interrupt.c: 39: if(INTCONbits.INT0IF == 1) INT0_isr();
 18333  002BE0  A2F2               	btfss	intcon,1,c	;volatile
 18334  002BE2  D003               	goto	i2l7206
 18335  002BE4  ECD0  F00A         	call	_INT0_isr	;wreg free
 18336  002BE8  D000               	goto	i2l7206
 18337  002BEA                     i2l7206:
 18338                           
 18339                           ;Interrupt.c: 40: if(INTCON3bits.INT1IF == 1) INT1_isr();
 18340  002BEA  A0F0               	btfss	intcon3,0,c	;volatile
 18341  002BEC  D003               	goto	i2l290
 18342  002BEE  EC6F  F01D         	call	_INT1_isr	;wreg free
 18343  002BF2  D000               	goto	i2l290
 18344  002BF4                     i2l290:
 18345  002BF4  C010  FFF5         	movff	??_chkisr+13,tablat
 18346  002BF8  C00F  FFF8         	movff	??_chkisr+12,tblptru
 18347  002BFC  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 18348  002C00  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 18349  002C04  C00C  FFF4         	movff	??_chkisr+9,prodh
 18350  002C08  C00B  FFF3         	movff	??_chkisr+8,prodl
 18351  002C0C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 18352  002C10  C009  FFD9         	movff	??_chkisr+6,fsr2l
 18353  002C14  C008  FFE2         	movff	??_chkisr+5,fsr1h
 18354  002C18  C007  FFE1         	movff	??_chkisr+4,fsr1l
 18355  002C1C  C006  FFEA         	movff	??_chkisr+3,fsr0h
 18356  002C20  C005  FFE9         	movff	??_chkisr+2,fsr0l
 18357  002C24  C004  FFFB         	movff	??_chkisr+1,pclatu
 18358  002C28  C003  FFFA         	movff	??_chkisr,pclath
 18359  002C2C  0011               	retfie		f
 18360  002C2E                     __end_of_chkisr:
 18361                           	opt stack 0
 18362                           pclatu	equ	0xFFB
 18363                           pclath	equ	0xFFA
 18364                           tblptru	equ	0xFF8
 18365                           tblptrh	equ	0xFF7
 18366                           tblptrl	equ	0xFF6
 18367                           tablat	equ	0xFF5
 18368                           prodh	equ	0xFF4
 18369                           prodl	equ	0xFF3
 18370                           intcon	equ	0xFF2
 18371                           intcon2	equ	0xFF1
 18372                           intcon3	equ	0xFF0
 18373                           postinc0	equ	0xFEE
 18374                           fsr0h	equ	0xFEA
 18375                           fsr0l	equ	0xFE9
 18376                           wreg	equ	0xFE8
 18377                           postdec1	equ	0xFE5
 18378                           plusw1	equ	0xFE3
 18379                           fsr1h	equ	0xFE2
 18380                           fsr1l	equ	0xFE1
 18381                           indf2	equ	0xFDF
 18382                           postinc2	equ	0xFDE
 18383                           postdec2	equ	0xFDD
 18384                           plusw2	equ	0xFDB
 18385                           fsr2h	equ	0xFDA
 18386                           fsr2l	equ	0xFD9
 18387                           status	equ	0xFD8
 18388                           
 18389 ;; *************** function _TIMER1_isr *****************
 18390 ;; Defined at:
 18391 ;;		line 44 in file "Interrupt.c"
 18392 ;; Parameters:    Size  Location     Type
 18393 ;;		None
 18394 ;; Auto vars:     Size  Location     Type
 18395 ;;		None
 18396 ;; Return value:  Size  Location     Type
 18397 ;;		None               void
 18398 ;; Registers used:
 18399 ;;		wreg, status,2
 18400 ;; Tracked objects:
 18401 ;;		On entry : 0/0
 18402 ;;		On exit  : 0/0
 18403 ;;		Unchanged: 0/0
 18404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;Total ram usage:        0 bytes
 18410 ;; Hardware stack levels used:    1
 18411 ;; This function calls:
 18412 ;;		Nothing
 18413 ;; This function is called by:
 18414 ;;		_chkisr
 18415 ;; This function uses a non-reentrant model
 18416 ;;
 18417                           
 18418                           	psect	text115
 18419  003A9C                     __ptext115:
 18420                           	opt stack 0
 18421  003A9C                     _TIMER1_isr:
 18422                           	opt stack 19
 18423                           
 18424                           ;Interrupt.c: 46: Nec_state = 0;
 18425                           
 18426                           ;incstack = 0
 18427  003A9C  0E00               	movlw	0
 18428  003A9E  6E52               	movwf	_Nec_state,c
 18429                           
 18430                           ;Interrupt.c: 47: INTCON2bits.INTEDG0 = 0;
 18431  003AA0  9CF1               	bcf	intcon2,6,c	;volatile
 18432                           
 18433                           ;Interrupt.c: 48: T1CONbits.TMR1ON = 0;
 18434  003AA2  90CD               	bcf	4045,0,c	;volatile
 18435                           
 18436                           ;Interrupt.c: 49: PIR1bits.TMR1IF = 0;
 18437  003AA4  909E               	bcf	3998,0,c	;volatile
 18438  003AA6  0012               	return		;funcret
 18439  003AA8                     __end_of_TIMER1_isr:
 18440                           	opt stack 0
 18441                           pclatu	equ	0xFFB
 18442                           pclath	equ	0xFFA
 18443                           tblptru	equ	0xFF8
 18444                           tblptrh	equ	0xFF7
 18445                           tblptrl	equ	0xFF6
 18446                           tablat	equ	0xFF5
 18447                           prodh	equ	0xFF4
 18448                           prodl	equ	0xFF3
 18449                           intcon	equ	0xFF2
 18450                           intcon2	equ	0xFF1
 18451                           intcon3	equ	0xFF0
 18452                           postinc0	equ	0xFEE
 18453                           fsr0h	equ	0xFEA
 18454                           fsr0l	equ	0xFE9
 18455                           wreg	equ	0xFE8
 18456                           postdec1	equ	0xFE5
 18457                           plusw1	equ	0xFE3
 18458                           fsr1h	equ	0xFE2
 18459                           fsr1l	equ	0xFE1
 18460                           indf2	equ	0xFDF
 18461                           postinc2	equ	0xFDE
 18462                           postdec2	equ	0xFDD
 18463                           plusw2	equ	0xFDB
 18464                           fsr2h	equ	0xFDA
 18465                           fsr2l	equ	0xFD9
 18466                           status	equ	0xFD8
 18467                           
 18468 ;; *************** function _INT1_isr *****************
 18469 ;; Defined at:
 18470 ;;		line 147 in file "Interrupt.c"
 18471 ;; Parameters:    Size  Location     Type
 18472 ;;		None
 18473 ;; Auto vars:     Size  Location     Type
 18474 ;;		None
 18475 ;; Return value:  Size  Location     Type
 18476 ;;		None               void
 18477 ;; Registers used:
 18478 ;;		wreg, status,2
 18479 ;; Tracked objects:
 18480 ;;		On entry : 0/0
 18481 ;;		On exit  : 0/0
 18482 ;;		Unchanged: 0/0
 18483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18488 ;;Total ram usage:        0 bytes
 18489 ;; Hardware stack levels used:    1
 18490 ;; This function calls:
 18491 ;;		Nothing
 18492 ;; This function is called by:
 18493 ;;		_chkisr
 18494 ;; This function uses a non-reentrant model
 18495 ;;
 18496                           
 18497                           	psect	text116
 18498  003ADE                     __ptext116:
 18499                           	opt stack 0
 18500  003ADE                     _INT1_isr:
 18501                           	opt stack 19
 18502                           
 18503                           ;Interrupt.c: 150: INTCON3bits.INT1IF = 0;
 18504                           
 18505                           ;incstack = 0
 18506  003ADE  90F0               	bcf	intcon3,0,c	;volatile
 18507                           
 18508                           ;Interrupt.c: 151: INT1_flag = 1;
 18509  003AE0  0E01               	movlw	1
 18510  003AE2  6E50               	movwf	_INT1_flag,c
 18511  003AE4  0012               	return		;funcret
 18512  003AE6                     __end_of_INT1_isr:
 18513                           	opt stack 0
 18514                           pclatu	equ	0xFFB
 18515                           pclath	equ	0xFFA
 18516                           tblptru	equ	0xFF8
 18517                           tblptrh	equ	0xFF7
 18518                           tblptrl	equ	0xFF6
 18519                           tablat	equ	0xFF5
 18520                           prodh	equ	0xFF4
 18521                           prodl	equ	0xFF3
 18522                           intcon	equ	0xFF2
 18523                           intcon2	equ	0xFF1
 18524                           intcon3	equ	0xFF0
 18525                           postinc0	equ	0xFEE
 18526                           fsr0h	equ	0xFEA
 18527                           fsr0l	equ	0xFE9
 18528                           wreg	equ	0xFE8
 18529                           postdec1	equ	0xFE5
 18530                           plusw1	equ	0xFE3
 18531                           fsr1h	equ	0xFE2
 18532                           fsr1l	equ	0xFE1
 18533                           indf2	equ	0xFDF
 18534                           postinc2	equ	0xFDE
 18535                           postdec2	equ	0xFDD
 18536                           plusw2	equ	0xFDB
 18537                           fsr2h	equ	0xFDA
 18538                           fsr2l	equ	0xFD9
 18539                           status	equ	0xFD8
 18540                           
 18541 ;; *************** function _INT0_isr *****************
 18542 ;; Defined at:
 18543 ;;		line 58 in file "Interrupt.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;		None
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;		None
 18548 ;; Return value:  Size  Location     Type
 18549 ;;		None               void
 18550 ;; Registers used:
 18551 ;;		wreg, status,2, status,0, cstack
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18560 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18561 ;;Total ram usage:        2 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    1
 18564 ;; This function calls:
 18565 ;;		_force_nec_state0
 18566 ;; This function is called by:
 18567 ;;		_chkisr
 18568 ;; This function uses a non-reentrant model
 18569 ;;
 18570                           
 18571                           	psect	text117
 18572  0015A0                     __ptext117:
 18573                           	opt stack 0
 18574  0015A0                     _INT0_isr:
 18575                           	opt stack 18
 18576                           
 18577                           ;Interrupt.c: 62: INTCONbits.INT0IF = 0;
 18578                           
 18579                           ;incstack = 0
 18580  0015A0  92F2               	bcf	intcon,1,c	;volatile
 18581                           
 18582                           ;Interrupt.c: 63: if (Nec_state != 0)
 18583  0015A2  5052               	movf	_Nec_state,w,c
 18584  0015A4  B4D8               	btfsc	status,2,c
 18585  0015A6  D0A5               	goto	i2l6752
 18586                           
 18587                           ;Interrupt.c: 64: {
 18588                           ;Interrupt.c: 65: Time_Elapsed = (TMR1H << 8) | TMR1L;
 18589  0015A8  50CE               	movf	4046,w,c	;volatile
 18590  0015AA  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 18591  0015AE  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 18592  0015B0  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 18593  0015B4  6A01               	clrf	??_INT0_isr,c
 18594  0015B6  1001               	iorwf	??_INT0_isr,w,c
 18595  0015B8  6E47               	movwf	_Time_Elapsed,c
 18596  0015BA  5002               	movf	??_INT0_isr+1,w,c
 18597  0015BC  6E48               	movwf	_Time_Elapsed+1,c
 18598                           
 18599                           ;Interrupt.c: 66: TMR1H = 0;
 18600  0015BE  0E00               	movlw	0
 18601  0015C0  6ECF               	movwf	4047,c	;volatile
 18602                           
 18603                           ;Interrupt.c: 67: TMR1L = 0;
 18604  0015C2  0E00               	movlw	0
 18605  0015C4  6ECE               	movwf	4046,c	;volatile
 18606                           
 18607                           ;Interrupt.c: 68: }
 18608                           ;Interrupt.c: 70: switch(Nec_state)
 18609  0015C6  D095               	goto	i2l6752
 18610  0015C8                     i2l6690:
 18611                           
 18612                           ;Interrupt.c: 73: {
 18613                           ;Interrupt.c: 75: TMR1H = 0;
 18614  0015C8  0E00               	movlw	0
 18615  0015CA  6ECF               	movwf	4047,c	;volatile
 18616                           
 18617                           ;Interrupt.c: 76: TMR1L = 0;
 18618  0015CC  0E00               	movlw	0
 18619  0015CE  6ECE               	movwf	4046,c	;volatile
 18620                           
 18621                           ;Interrupt.c: 77: PIR1bits.TMR1IF = 0;
 18622  0015D0  909E               	bcf	3998,0,c	;volatile
 18623                           
 18624                           ;Interrupt.c: 78: T1CON= 0x90;
 18625  0015D2  0E90               	movlw	144
 18626  0015D4  6ECD               	movwf	4045,c	;volatile
 18627                           
 18628                           ;Interrupt.c: 79: T1CONbits.TMR1ON = 1;
 18629  0015D6  80CD               	bsf	4045,0,c	;volatile
 18630                           
 18631                           ;Interrupt.c: 80: bit_count = 0;
 18632  0015D8  0E00               	movlw	0
 18633  0015DA  6E5A               	movwf	_bit_count,c
 18634                           
 18635                           ;Interrupt.c: 81: Nec_code = 0;
 18636  0015DC  0E00               	movlw	0
 18637  0015DE  0100               	movlb	0	; () banked
 18638  0015E0  6FE3               	movwf	_Nec_code& (0+255),b
 18639  0015E2  0E00               	movlw	0
 18640  0015E4  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 18641  0015E6  0E00               	movlw	0
 18642  0015E8  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 18643  0015EA  0E00               	movlw	0
 18644  0015EC  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 18645                           
 18646                           ;Interrupt.c: 82: Nec_state = 1;
 18647  0015EE  0E01               	movlw	1
 18648  0015F0  D01F               	goto	L7
 18649  0015F2                     i2l6696:
 18650                           
 18651                           ; BSR set to: 0
 18652                           ;Interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
 18653  0015F2  8CF1               	bsf	intcon2,6,c	;volatile
 18654                           
 18655                           ; BSR set to: 0
 18656                           ;Interrupt.c: 84: return;
 18657  0015F4  D08F               	goto	i2l302
 18658  0015F6                     i2l6700:
 18659                           
 18660                           ;Interrupt.c: 88: {
 18661                           ;Interrupt.c: 89: if((Time_Elapsed > 8500)&&(Time_Elapsed < 9500))
 18662  0015F6  0E35               	movlw	53
 18663  0015F8  5C47               	subwf	_Time_Elapsed,w,c
 18664  0015FA  0E21               	movlw	33
 18665  0015FC  5848               	subwfb	_Time_Elapsed+1,w,c
 18666  0015FE  A0D8               	btfss	status,0,c
 18667  001600  D089               	goto	i2l302
 18668  001602  0E1C               	movlw	28
 18669  001604  5C47               	subwf	_Time_Elapsed,w,c
 18670  001606  0E25               	movlw	37
 18671  001608  5848               	subwfb	_Time_Elapsed+1,w,c
 18672  00160A  B0D8               	btfsc	status,0,c
 18673  00160C  D083               	goto	i2l302
 18674                           
 18675                           ;Interrupt.c: 90: {
 18676                           ;Interrupt.c: 91: Nec_state = 2;
 18677  00160E  0E02               	movlw	2
 18678  001610  D01F               	goto	L8
 18679  001612                     i2l6706:
 18680                           
 18681                           ;Interrupt.c: 92: INTCON2bits.INTEDG0 = 0;
 18682  001612  9CF1               	bcf	intcon2,6,c	;volatile
 18683                           
 18684                           ;Interrupt.c: 93: }
 18685                           ;Interrupt.c: 94: return;
 18686  001614  D07F               	goto	i2l302
 18687  001616                     i2l6710:
 18688                           
 18689                           ;Interrupt.c: 98: {
 18690                           ;Interrupt.c: 99: if((Time_Elapsed > 4000)&&(Time_Elapsed < 5000))
 18691  001616  0EA1               	movlw	161
 18692  001618  5C47               	subwf	_Time_Elapsed,w,c
 18693  00161A  0E0F               	movlw	15
 18694  00161C  5848               	subwfb	_Time_Elapsed+1,w,c
 18695  00161E  A0D8               	btfss	status,0,c
 18696  001620  D079               	goto	i2l302
 18697  001622  0E88               	movlw	136
 18698  001624  5C47               	subwf	_Time_Elapsed,w,c
 18699  001626  0E13               	movlw	19
 18700  001628  5848               	subwfb	_Time_Elapsed+1,w,c
 18701  00162A  B0D8               	btfsc	status,0,c
 18702  00162C  D073               	goto	i2l302
 18703                           
 18704                           ;Interrupt.c: 100: {
 18705                           ;Interrupt.c: 101: Nec_state = 3;
 18706  00162E  0E03               	movlw	3
 18707  001630                     L7:
 18708  001630  6E52               	movwf	_Nec_state,c
 18709  001632  D7DF               	goto	i2l6696
 18710                           
 18711                           ;Interrupt.c: 103: }
 18712                           ;Interrupt.c: 104: return;
 18713                           
 18714                           ;Interrupt.c: 102: INTCON2bits.INTEDG0 = 1;
 18715  001634  D06F               	goto	i2l302
 18716  001636                     i2l6720:
 18717                           
 18718                           ;Interrupt.c: 108: {
 18719                           ;Interrupt.c: 109: if((Time_Elapsed > 400)&&(Time_Elapsed < 700))
 18720  001636  0E91               	movlw	145
 18721  001638  5C47               	subwf	_Time_Elapsed,w,c
 18722  00163A  0E01               	movlw	1
 18723  00163C  5848               	subwfb	_Time_Elapsed+1,w,c
 18724  00163E  A0D8               	btfss	status,0,c
 18725  001640  D069               	goto	i2l302
 18726  001642  0EBC               	movlw	188
 18727  001644  5C47               	subwf	_Time_Elapsed,w,c
 18728  001646  0E02               	movlw	2
 18729  001648  5848               	subwfb	_Time_Elapsed+1,w,c
 18730  00164A  B0D8               	btfsc	status,0,c
 18731  00164C  D063               	goto	i2l302
 18732                           
 18733                           ;Interrupt.c: 110: {
 18734                           ;Interrupt.c: 111: Nec_state = 4;
 18735  00164E  0E04               	movlw	4
 18736  001650                     L8:
 18737  001650  6E52               	movwf	_Nec_state,c
 18738  001652  D7DF               	goto	i2l6706
 18739                           
 18740                           ;Interrupt.c: 113: }
 18741                           ;Interrupt.c: 114: return;
 18742                           
 18743                           ;Interrupt.c: 112: INTCON2bits.INTEDG0 = 0;
 18744  001654  D05F               	goto	i2l302
 18745  001656                     i2l6730:
 18746                           
 18747                           ;Interrupt.c: 118: {
 18748                           ;Interrupt.c: 119: if((Time_Elapsed > 400)&&(Time_Elapsed < 1800))
 18749  001656  0E91               	movlw	145
 18750  001658  5C47               	subwf	_Time_Elapsed,w,c
 18751  00165A  0E01               	movlw	1
 18752  00165C  5848               	subwfb	_Time_Elapsed+1,w,c
 18753  00165E  A0D8               	btfss	status,0,c
 18754  001660  D043               	goto	i2l6744
 18755  001662  0E08               	movlw	8
 18756  001664  5C47               	subwf	_Time_Elapsed,w,c
 18757  001666  0E07               	movlw	7
 18758  001668  5848               	subwfb	_Time_Elapsed+1,w,c
 18759  00166A  B0D8               	btfsc	status,0,c
 18760  00166C  D03D               	goto	i2l6744
 18761                           
 18762                           ;Interrupt.c: 120: {
 18763                           ;Interrupt.c: 121: Nec_code = Nec_code << 1;
 18764  00166E  90D8               	bcf	status,0,c
 18765  001670  0100               	movlb	0	; () banked
 18766  001672  35E3               	rlcf	_Nec_code& (0+255),w,b
 18767  001674  0100               	movlb	0	; () banked
 18768  001676  6FE3               	movwf	_Nec_code& (0+255),b
 18769  001678  0100               	movlb	0	; () banked
 18770  00167A  35E4               	rlcf	(_Nec_code+1)& (0+255),w,b
 18771  00167C  0100               	movlb	0	; () banked
 18772  00167E  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 18773  001680  0100               	movlb	0	; () banked
 18774  001682  35E5               	rlcf	(_Nec_code+2)& (0+255),w,b
 18775  001684  0100               	movlb	0	; () banked
 18776  001686  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 18777  001688  0100               	movlb	0	; () banked
 18778  00168A  35E6               	rlcf	(_Nec_code+3)& (0+255),w,b
 18779  00168C  0100               	movlb	0	; () banked
 18780  00168E  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 18781                           
 18782                           ;Interrupt.c: 122: if(Time_Elapsed > 1000)
 18783  001690  0EE9               	movlw	233
 18784  001692  5C47               	subwf	_Time_Elapsed,w,c
 18785  001694  0E03               	movlw	3
 18786  001696  5848               	subwfb	_Time_Elapsed+1,w,c
 18787  001698  A0D8               	btfss	status,0,c
 18788  00169A  D014               	goto	i2l311
 18789                           
 18790                           ; BSR set to: 0
 18791                           ;Interrupt.c: 123: {
 18792                           ;Interrupt.c: 124: Nec_code = Nec_code + 1;
 18793  00169C  0E01               	movlw	1
 18794  00169E  0100               	movlb	0	; () banked
 18795  0016A0  25E3               	addwf	_Nec_code& (0+255),w,b
 18796  0016A2  0100               	movlb	0	; () banked
 18797  0016A4  6FE3               	movwf	_Nec_code& (0+255),b
 18798  0016A6  0E00               	movlw	0
 18799  0016A8  0100               	movlb	0	; () banked
 18800  0016AA  21E4               	addwfc	(_Nec_code+1)& (0+255),w,b
 18801  0016AC  0100               	movlb	0	; () banked
 18802  0016AE  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 18803  0016B0  0E00               	movlw	0
 18804  0016B2  0100               	movlb	0	; () banked
 18805  0016B4  21E5               	addwfc	(_Nec_code+2)& (0+255),w,b
 18806  0016B6  0100               	movlb	0	; () banked
 18807  0016B8  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 18808  0016BA  0E00               	movlw	0
 18809  0016BC  0100               	movlb	0	; () banked
 18810  0016BE  21E6               	addwfc	(_Nec_code+3)& (0+255),w,b
 18811  0016C0  0100               	movlb	0	; () banked
 18812  0016C2  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 18813  0016C4                     i2l311:
 18814                           
 18815                           ; BSR set to: 0
 18816                           ;Interrupt.c: 125: }
 18817                           ;Interrupt.c: 127: bit_count = bit_count + 1;
 18818  0016C4  285A               	incf	_bit_count,w,c
 18819  0016C6  6E5A               	movwf	_bit_count,c
 18820                           
 18821                           ;Interrupt.c: 128: if(bit_count > 31)
 18822  0016C8  0E1F               	movlw	31
 18823  0016CA  645A               	cpfsgt	_bit_count,c
 18824  0016CC  D00A               	goto	i2l312
 18825                           
 18826                           ; BSR set to: 0
 18827                           ;Interrupt.c: 129: {
 18828                           ;Interrupt.c: 130: nec_ok = 1;
 18829  0016CE  0E00               	movlw	0
 18830  0016D0  0100               	movlb	0	; () banked
 18831  0016D2  6FF5               	movwf	(_nec_ok+1)& (0+255),b
 18832  0016D4  0E01               	movlw	1
 18833  0016D6  6FF4               	movwf	_nec_ok& (0+255),b
 18834                           
 18835                           ; BSR set to: 0
 18836                           ;Interrupt.c: 131: Nec_code1 = (char) ((Nec_code >> 8));
 18837  0016D8  C0E4  F051         	movff	_Nec_code+1,_Nec_code1
 18838                           
 18839                           ; BSR set to: 0
 18840                           ;Interrupt.c: 132: INTCONbits.INT0IE = 0;
 18841  0016DC  98F2               	bcf	intcon,4,c	;volatile
 18842                           
 18843                           ;Interrupt.c: 133: Nec_state = 0;
 18844  0016DE  0E00               	movlw	0
 18845  0016E0  6E52               	movwf	_Nec_state,c
 18846  0016E2                     i2l312:
 18847                           
 18848                           ; BSR set to: 0
 18849                           ;Interrupt.c: 134: }
 18850                           ;Interrupt.c: 136: Nec_state = 3;
 18851  0016E2  0E03               	movlw	3
 18852  0016E4  6E52               	movwf	_Nec_state,c
 18853                           
 18854                           ;Interrupt.c: 137: }
 18855  0016E6  D785               	goto	i2l6696
 18856  0016E8                     i2l6744:
 18857                           
 18858                           ;Interrupt.c: 138: else
 18859                           ;Interrupt.c: 139: force_nec_state0();
 18860  0016E8  EC73  F01D         	call	_force_nec_state0	;wreg free
 18861  0016EC  D782               	goto	i2l6696
 18862  0016EE  D781               	goto	i2l6696
 18863                           
 18864                           ;Interrupt.c: 143: }
 18865                           ;Interrupt.c: 144: }
 18866                           
 18867                           ;Interrupt.c: 142: return;
 18868                           
 18869                           ;Interrupt.c: 141: INTCON2bits.INTEDG0 = 1;
 18870  0016F0  D011               	goto	i2l302
 18871  0016F2                     i2l6752:
 18872  0016F2  5052               	movf	_Nec_state,w,c
 18873                           
 18874                           ; Switch size 1, requested type "space"
 18875                           ; Number of cases is 5, Range of values is 0 to 4
 18876                           ; switch strategies available:
 18877                           ; Name         Instructions Cycles
 18878                           ; simple_byte           16     9 (average)
 18879                           ;	Chosen strategy is simple_byte
 18880  0016F4  0A00               	xorlw	0	; case 0
 18881  0016F6  B4D8               	btfsc	status,2,c
 18882  0016F8  D767               	goto	i2l6690
 18883  0016FA  0A01               	xorlw	1	; case 1
 18884  0016FC  B4D8               	btfsc	status,2,c
 18885  0016FE  D77B               	goto	i2l6700
 18886  001700  0A03               	xorlw	3	; case 2
 18887  001702  B4D8               	btfsc	status,2,c
 18888  001704  D788               	goto	i2l6710
 18889  001706  0A01               	xorlw	1	; case 3
 18890  001708  B4D8               	btfsc	status,2,c
 18891  00170A  D795               	goto	i2l6720
 18892  00170C  0A07               	xorlw	7	; case 4
 18893  00170E  B4D8               	btfsc	status,2,c
 18894  001710  D7A2               	goto	i2l6730
 18895  001712  D000               	goto	i2l302
 18896  001714                     i2l302:
 18897  001714  0012               	return		;funcret
 18898  001716                     __end_of_INT0_isr:
 18899                           	opt stack 0
 18900                           pclatu	equ	0xFFB
 18901                           pclath	equ	0xFFA
 18902                           tblptru	equ	0xFF8
 18903                           tblptrh	equ	0xFF7
 18904                           tblptrl	equ	0xFF6
 18905                           tablat	equ	0xFF5
 18906                           prodh	equ	0xFF4
 18907                           prodl	equ	0xFF3
 18908                           intcon	equ	0xFF2
 18909                           intcon2	equ	0xFF1
 18910                           intcon3	equ	0xFF0
 18911                           postinc0	equ	0xFEE
 18912                           fsr0h	equ	0xFEA
 18913                           fsr0l	equ	0xFE9
 18914                           wreg	equ	0xFE8
 18915                           postdec1	equ	0xFE5
 18916                           plusw1	equ	0xFE3
 18917                           fsr1h	equ	0xFE2
 18918                           fsr1l	equ	0xFE1
 18919                           indf2	equ	0xFDF
 18920                           postinc2	equ	0xFDE
 18921                           postdec2	equ	0xFDD
 18922                           plusw2	equ	0xFDB
 18923                           fsr2h	equ	0xFDA
 18924                           fsr2l	equ	0xFD9
 18925                           status	equ	0xFD8
 18926                           
 18927 ;; *************** function _force_nec_state0 *****************
 18928 ;; Defined at:
 18929 ;;		line 52 in file "Interrupt.c"
 18930 ;; Parameters:    Size  Location     Type
 18931 ;;		None
 18932 ;; Auto vars:     Size  Location     Type
 18933 ;;		None
 18934 ;; Return value:  Size  Location     Type
 18935 ;;		None               void
 18936 ;; Registers used:
 18937 ;;		wreg, status,2
 18938 ;; Tracked objects:
 18939 ;;		On entry : 0/0
 18940 ;;		On exit  : 0/0
 18941 ;;		Unchanged: 0/0
 18942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18947 ;;Total ram usage:        0 bytes
 18948 ;; Hardware stack levels used:    1
 18949 ;; This function calls:
 18950 ;;		Nothing
 18951 ;; This function is called by:
 18952 ;;		_INT0_isr
 18953 ;; This function uses a non-reentrant model
 18954 ;;
 18955                           
 18956                           	psect	text118
 18957  003AE6                     __ptext118:
 18958                           	opt stack 0
 18959  003AE6                     _force_nec_state0:
 18960                           	opt stack 18
 18961                           
 18962                           ;Interrupt.c: 54: Nec_state=0;
 18963                           
 18964                           ;incstack = 0
 18965  003AE6  0E00               	movlw	0
 18966  003AE8  6E52               	movwf	_Nec_state,c
 18967                           
 18968                           ;Interrupt.c: 55: T1CONbits.TMR1ON = 0;
 18969  003AEA  90CD               	bcf	4045,0,c	;volatile
 18970  003AEC  0012               	return		;funcret
 18971  003AEE                     __end_of_force_nec_state0:
 18972                           	opt stack 0
 18973                           pclatu	equ	0xFFB
 18974                           pclath	equ	0xFFA
 18975                           tblptru	equ	0xFF8
 18976                           tblptrh	equ	0xFF7
 18977                           tblptrl	equ	0xFF6
 18978                           tablat	equ	0xFF5
 18979                           prodh	equ	0xFF4
 18980                           prodl	equ	0xFF3
 18981                           intcon	equ	0xFF2
 18982                           intcon2	equ	0xFF1
 18983                           intcon3	equ	0xFF0
 18984                           postinc0	equ	0xFEE
 18985                           fsr0h	equ	0xFEA
 18986                           fsr0l	equ	0xFE9
 18987                           wreg	equ	0xFE8
 18988                           postdec1	equ	0xFE5
 18989                           plusw1	equ	0xFE3
 18990                           fsr1h	equ	0xFE2
 18991                           fsr1l	equ	0xFE1
 18992                           indf2	equ	0xFDF
 18993                           postinc2	equ	0xFDE
 18994                           postdec2	equ	0xFDD
 18995                           plusw2	equ	0xFDB
 18996                           fsr2h	equ	0xFDA
 18997                           fsr2l	equ	0xFD9
 18998                           status	equ	0xFD8
 18999                           pclatu	equ	0xFFB
 19000                           pclath	equ	0xFFA
 19001                           tblptru	equ	0xFF8
 19002                           tblptrh	equ	0xFF7
 19003                           tblptrl	equ	0xFF6
 19004                           tablat	equ	0xFF5
 19005                           prodh	equ	0xFF4
 19006                           prodl	equ	0xFF3
 19007                           intcon	equ	0xFF2
 19008                           intcon2	equ	0xFF1
 19009                           intcon3	equ	0xFF0
 19010                           postinc0	equ	0xFEE
 19011                           fsr0h	equ	0xFEA
 19012                           fsr0l	equ	0xFE9
 19013                           wreg	equ	0xFE8
 19014                           postdec1	equ	0xFE5
 19015                           plusw1	equ	0xFE3
 19016                           fsr1h	equ	0xFE2
 19017                           fsr1l	equ	0xFE1
 19018                           indf2	equ	0xFDF
 19019                           postinc2	equ	0xFDE
 19020                           postdec2	equ	0xFDD
 19021                           plusw2	equ	0xFDB
 19022                           fsr2h	equ	0xFDA
 19023                           fsr2l	equ	0xFD9
 19024                           status	equ	0xFD8
 19025                           
 19026                           	psect	rparam
 19027  0000                     pclatu	equ	0xFFB
 19028                           pclath	equ	0xFFA
 19029                           tblptru	equ	0xFF8
 19030                           tblptrh	equ	0xFF7
 19031                           tblptrl	equ	0xFF6
 19032                           tablat	equ	0xFF5
 19033                           prodh	equ	0xFF4
 19034                           prodl	equ	0xFF3
 19035                           intcon	equ	0xFF2
 19036                           intcon2	equ	0xFF1
 19037                           intcon3	equ	0xFF0
 19038                           postinc0	equ	0xFEE
 19039                           fsr0h	equ	0xFEA
 19040                           fsr0l	equ	0xFE9
 19041                           wreg	equ	0xFE8
 19042                           postdec1	equ	0xFE5
 19043                           plusw1	equ	0xFE3
 19044                           fsr1h	equ	0xFE2
 19045                           fsr1l	equ	0xFE1
 19046                           indf2	equ	0xFDF
 19047                           postinc2	equ	0xFDE
 19048                           postdec2	equ	0xFDD
 19049                           plusw2	equ	0xFDB
 19050                           fsr2h	equ	0xFDA
 19051                           fsr2l	equ	0xFD9
 19052                           status	equ	0xFD8


Data Sizes:
    Strings     390
    Constant    493
    Data        174
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66     111
    BANK0           128      3     128
    BANK1           256     14      88
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_37(CODE[5]), STR_36(CODE[5]), STR_35(CODE[12]), STR_34(CODE[19]), 
		 -> STR_33(CODE[16]), STR_32(CODE[10]), STR_31(CODE[11]), STR_30(CODE[19]), 
		 -> STR_28(CODE[5]), STR_27(CODE[8]), STR_26(CODE[8]), STR_25(CODE[18]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[5]), STR_18(CODE[3]), STR_17(CODE[3]), 
		 -> STR_16(CODE[7]), STR_15(CODE[13]), STR_14(CODE[9]), STR_13(CODE[11]), 
		 -> STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[2]), STR_9(CODE[3]), 
		 -> STR_8(CODE[13]), STR_7(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_38(CODE[22]), STR_29(CODE[11]), STR_6(CODE[20]), STR_5(CODE[24]), 
		 -> STR_4(CODE[21]), STR_3(CODE[30]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_read_volt
    _read_volt->___ftdiv
    ___awtoft->___ftpack
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Monitor_Heater->_do_update_pwm
    _get_duty_cycle->___awdiv
    _get_RPM->___awdiv
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->_drawtext
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_Wait_One_Sec
    _Do_Beep_Bad->_Wait_One_Sec
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___awdiv
    ___awdiv->___fttol
    _init_UART->_OpenUSART
    _Turn_Off_Fan->_do_update_pwm
    _printf->___lwmod
    ___lwmod->___lwdiv
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Do_Setup_Heater_Temp->_Update_Setup_Heater_Screen
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Monitor_Heater->_do_update_pwm
    _Initialize_Setup_Time_Screen->_drawtext
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->_drawtext
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Initialize_Screen->_drawtext
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _Turn_Off_Fan->_do_update_pwm

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1119638
                                             12 BANK1      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    6436
                                             58 COMRAM     8     5      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2266
                                             24 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        7     7      0   45833
                                              0 BANK0      2     2      0
                                              7 BANK1      5     5      0
                            ___awdiv
                            ___awmod
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0   25022
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   12511
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       2     2      0   29389
                                             61 COMRAM     2     2      0
                         _Set_DC_RGB
                        _Set_RPM_RGB
                      _do_update_pwm
                            _get_RPM
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       8     4      4    6184
                                             39 COMRAM     8     4      4
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    5651
                                             39 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Set_RPM_RGB                                         16    14      2    4509
                                             39 COMRAM    16    14      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _Set_DC_RGB                                           2     0      2    4472
                                             39 COMRAM     2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  317551
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   50553
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   41029
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   53892
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   62175
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    8283
                                             52 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   41029
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   41029
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  274771
                                              7 BANK1      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   39397
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   41131
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   53892
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   53892
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   41131
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   41131
                                              0 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  330057
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    4105
                                             56 COMRAM     3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   50553
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   45001
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   11627
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   11658
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   53892
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   62765
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   53597
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    4009
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2387
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    5144
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2442
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2442
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2312
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2312
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    8578
                                             52 COMRAM     2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    8124
                                             45 COMRAM     7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0      46
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0      46
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   45001
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   45001
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   33001
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   18444
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   11156
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3683
                                             39 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    4345
                                             31 COMRAM     8     4      4
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   13333
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0   12511
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3972
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1272
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0    8539
                                             58 COMRAM     3     3      0
                                              0 BANK1      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2099
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     631
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2776
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2838
                                             43 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Turn_Off_Alarm                                5     5      0    3304
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Init                                          4     4      0    1765
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Address_Write_One_Byte                     3     1      2     687
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Address_Read_One_Byte                      3     2      1     581
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     318
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___fttol (ARG)
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___fttol (ARG)
               ___wmul (ARG)
             ___fttol (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___fttol (ARG)
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___fttol (ARG)
           ___wmul (ARG)
         ___fttol (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___fttol (ARG)
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___fttol (ARG)
           ___wmul (ARG)
         ___fttol (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___fttol (ARG)
             ___wmul (ARG)
           ___awmod
             ___awdiv (ARG)
               ___fttol (ARG)
               ___wmul (ARG)
             ___fttol (ARG)
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___fttol (ARG)
           ___wmul (ARG)
         ___awmod
           ___awdiv (ARG)
             ___fttol (ARG)
             ___wmul (ARG)
           ___fttol (ARG)
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___fttol (ARG)
         ___wmul (ARG)
       ___awmod
         ___awdiv (ARG)
           ___fttol (ARG)
           ___wmul (ARG)
         ___fttol (ARG)
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _Set_DC_RGB
       ___awdiv
         ___fttol (ARG)
         ___wmul (ARG)
     _Set_RPM_RGB
       ___awdiv
         ___fttol (ARG)
         ___wmul (ARG)
     _do_update_pwm
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
     _get_RPM
       ___awdiv
         ___fttol (ARG)
         ___wmul (ARG)
       ___wmul
     _get_duty_cycle
       ___awdiv
         ___fttol (ARG)
         ___wmul (ARG)
       ___wmul
   _Test_Alarm
   _Toggle_Heater
     _Turn_Off_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Update_Screen
     ___awdiv
       ___fttol (ARG)
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___fttol (ARG)
         ___wmul (ARG)
       ___fttol (ARG)
     ___fttol
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___fttol (ARG)
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     ___awdiv
       ___fttol (ARG)
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___wmul
     _get_full_ADC

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _INT1_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      E      58       7       34.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      3      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     147      34        0.0%
DATA                 0      0     147       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed May 11 17:30:46 2022

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                                            l42 3104  
                                          l52 349A                                            l36 1FFC  
                                          l44 3108                                            l70 315A  
                                          l63 3600                                            l39 206C  
                                          l49 3922                  __size_of_Do_Setup_Alarm_Time 00BE  
                                ___awdiv@sign 0025                          __size_of_Turn_On_Fan 001A  
                               read_volt@volt 003E                           ___wmul@multiplicand 0013  
                             ??_Update_Screen 00FD                                           l104 345C  
                                         l107 3526                                           l141 3664  
                                         l219 35CC                                           l514 3A78  
                                         l730 2BA6                                           l724 3694  
                                         l670 31A6                                           l680 3982  
                                         l746 186A                                           l755 17C0  
                                         l748 1744                                           l783 2310  
                                         l784 227C                                           l794 1330  
                                         l786 22EC                                           l787 230E  
                                         _PR2 000FCB                                read_volt@nStep 0041  
                        DS3231_Init@Address_7 0017                          DS3231_Init@Address_E 0018  
                                         _day 005C                             _Deactivate_Buzzer 3AC6  
                        __size_of_I2C_ReStart 0016                     __size_of_Do_Save_New_Time 0014  
                                         _dow 005D                                           _nbr 00F2  
                                         _rpm 004B                         __size_of_Turn_Off_Fan 001A  
                                         _rps 00F6                                           _txt 004D  
                                ___awmod@sign 002D                                           wreg 000FE8  
                               _Increase_Time 2976                  __size_of_Go_Next_Alarm_Field 0018  
                          ?_Deactivate_Buzzer 0001                   __end_of_Decrease_Alarm_Time 329C  
      Update_Setup_Screen_Cursor_Forward@xinc 0030        Update_Setup_Screen_Cursor_Forward@yinc 002F  
                             ??_fillRectangle 001D                                  __CFG_LVP$OFF 000000  
                     _TFT_GreenTab_Initialize 36C0                                  ___ftdiv@cntr 0035  
                                ___ftdiv@sign 003A                                  __CFG_WDT$OFF 000000  
                                        l2020 3516                                          l1300 36BE  
                              drawFastVLine@h 0019                                          l1230 126C  
                                        l1303 305E                                          l1219 10B8  
                                        l1317 3832                                          l1422 0D2A  
                                        l1350 3736                                          l1450 2E5E  
                                        l1451 2E60                                          l1347 3716  
                                        l1452 2E6A                                drawFastVLine@x 0022  
                                        l1453 2E6C                                drawFastVLine@y 0018  
                                        l1446 2E44                                          l1455 2E86  
                                        l1296 2D2C                                          l1385 0AD2  
                                        l1458 3710                                          l1651 28E0  
                                        l1664 2CAE                                          l1841 2200  
                                        l1915 375C                                          l1676 3590  
                                        l1853 1D98                                          l1766 2570  
                                        l1838 2234                                          l5206 3776  
                                        l6112 382C                                          l1777 2548  
                                        l1874 2152                                          l5332 2FC2  
                                        l6108 3820                                          l1981 2FFE  
                                        l5334 2FCC                                          l1991 3378  
                                        l5344 2FF2                                          l5336 2FD4  
                                        l5360 336C                                          l5352 3344  
                                        l8000 0B64                                          l1889 377E  
                                        l5354 334E                                          l8010 0B8E  
                                        l5356 3356                                          l8004 0B88  
                                        l8012 0BA0                                          l8030 0C02  
                                        l8022 0BE0                I2C_Write_Cmd_Write_Data@Device 0015  
                                        l8032 0C0A                                          l8024 0BEA  
                                        l8120 19FC                                          l4922 3420  
                                        l8050 0CA2                                          l8042 0C42  
                                        l8018 0BBC                                          l9002 00A0  
                                        l4932 3436                                          l4940 3446  
                                        l8060 0D02                                          l8036 0C22  
                                        l8132 1A6C                                          l8124 1A1A  
                                        l8108 19A8                                          l9012 010A  
                                        l4934 343E                                          l4926 3428  
                                        l8302 20E6                                          l8038 0C2A  
                                        l8046 0C56                                          l8062 0D0E  
                                        l8134 1A74                                          l4944 3452  
                                        l4960 3536                                          l4952 351E  
                                        l8216 21DA                                          l8320 2140  
                                        l8312 2110                                          l8048 0C5E  
                                        l8056 0CE8                                          l4946 3458  
                                        l4970 3548                                          l8226 220E  
                                        l8242 1CE8                                          l8314 211E  
                                        l8306 20F6                                          l8058 0CFA  
                                        l5930 2E2A                                          l8154 1316  
                                        l9018 014A                                          l8260 1D2E  
                                        l8236 1CC0                                          l8308 20FC  
                                        l8316 2128                                          l7620 33F2  
                                        l9220 26A6                                          l9204 2670  
                                        l9060 0236                                          l4958 3530  
                                        l8190 2172                                          l8270 1D5C  
                                        l8238 1CDA                                          l5950 2E56  
                                        l5942 2E48                                          l5934 2E34  
                                        l8182 1406                                          l8502 1138  
                                        l9070 02B4                                          l8192 218C  
                                        l8264 1D44                                          l8256 1D1C  
                                        l7608 3676                                          l7616 33D6  
                                        l7800 22E2                                          l8096 360C  
                                        l8512 1208                                          l9232 26D0  
                                        l9224 26B4                                          l9216 2698  
                                        l9240 26E8                                          l9072 02CA  
                                        l9400 0ED2                                          l8274 1D72  
                                        l8266 1D4A                                          l8338 260A  
                                        l5938 2E3C                                          l7570 2B68  
                                        l7722 1732                                          l8098 3616  
                                        l8506 118E                                          l9250 28F6  
                                        l9170 247C                                          l9162 2460  
                                        l9146 242A                                          l9058 0220  
                                        l9402 0EF0                                          l8196 219A  
                                        l8284 208C                                          l7580 2B8E  
                                        l7740 17B8                                          l7732 1750  
                                        l8700 3296                                          l7804 22F0  
                                        l8508 11C8                                          l8612 2CE8  
                                        l9236 26DE                                          l9228 26C2  
                                        l9180 249C                                          l8540 1F9C  
                                        l9076 02D2                                          l7830 24F8  
                                        l7822 24BC                                          l7910 2C52  
                                        l7582 2B9C                                          l7566 2B30  
                                        l7750 180A                                          l7726 1740  
                                        l7718 1726                                          l7814 230A  
                                        l8470 0F0C                                          l8518 1244  
                                        l8710 3212                                          l8622 2D12  
                                        l9238 26E2                                          l9174 248A  
                                        l9166 246E                                          l9158 2452  
                                        l9182 24A2                                          l9078 02DA  
                                        l7736 1780                                          l7728 1748  
                                        l7808 22FA                                          l8480 0FDA  
                                        l8704 3202                                          l8632 2D28  
                                        l8608 2CD4                                          l9272 2954  
                                        l9264 2938                                          l9280 296C  
                                        l8552 201C                                          l8544 1FD2  
                                        l9360 0DBA                                          l7850 2562  
                                        l7834 2510                                          l7826 24CC  
                                        l7930 2CA4                                          l7922 2C88  
                                        l7914 2C60                                          l7906 2C44  
                                        l7738 17B4                                          l7770 34E4  
                                        l8474 0F68                                          l8618 2D0A  
                                        l9178 2498                                          l8554 204E  
                                        l9346 0D42                                          l7844 2550  
                                        l7836 2530                                          l7828 24D8  
                                        l7940 09EC                                          l7916 2C6A  
                                        l7756 1836                                          l7748 17E2  
                                        l7764 1866                                          l7772 34EA  
                                        l8484 1016                                          l8476 0F9E  
                                        l8492 1090                                          l8660 38C2  
                                        l8716 3222                                          l8724 3232  
                                        l9276 2962                                          l9268 2946  
                                        l8804 388E                                          l8572 35E4  
                                        l8580 312E                                          l8548 1FF2  
                                        l9380 0EA4                                          l7838 253C  
                                        l7942 09FA                                          l7862 2862  
                                        l7918 2C72                                          l7926 2C94  
                                        l7758 185E                                          l7782 2246  
                                        l8486 1050                                          l8726 3248  
                                        l9278 2966                                          l8830 2A18  
                                        l8814 38AA                                          l8806 3892  
                                        l8558 2062                                          l7960 0A9C  
                                        l7952 0A38                                          l7936 09DC  
                                        l8496 10C6                                          l8840 2A34  
                                        l8824 2A08                                          l9392 0EC2  
                                        l9384 0EAE                                          l9376 0E8E  
                                        l7946 0A04                                          l7874 288A  
                                        l7890 28C6                                          l8690 3270  
                                        l8682 325C                                          l8498 10FC  
                                        l8658 38BE                                          l8842 2A38  
                                        l8834 2A24                                          l8906 29D8  
                                        l8578 312A                                          l7980 0B1A  
                                        l7964 0AA4                                          l7948 0A1A  
                                        l7876 2894                                          l7868 2874  
                                        l8684 3260                                          l7788 22B4  
                                        l8668 38DA                                          l8852 2A54  
                                        l8836 2A28                                          l8828 2A14  
                                        l8908 2A00                                          l8924 356C  
                                        l9396 0ECC                                          l9388 0EB8  
                                        l7990 0B4E                                          l7982 0B1E  
                                        l7894 28D6                                          l7886 28BA  
                                        l7878 289C                                          l8694 327C  
                                        l8678 3250                                          l8766 396E  
                                        l8774 3946                                          l8854 2A58  
                                        l8846 2A44                                          l8862 2A68  
                                        l7976 0B00                                          l8688 326C  
                                        l8848 2A48                                          l8864 2A90  
                                        l8880 2998                                          l8944 391C  
                                        l7994 0B54                                          l7986 0B2A  
                                        l8698 3280                                          l8858 2A64  
                                        l8874 2988                                          l7996 0B58  
                                        l8892 29B8                                          l8868 2978  
                                        l8886 29A8                                          STR_1 FF01  
                                        STR_2 FF28                                          STR_3 FE78  
                                        l8898 29C8                                          STR_4 FEC4  
                                        STR_5 FE96                                          l8996 0060  
                                        STR_6 FEED                                          STR_7 FED9  
                                        STR_8 FF6E                                          STR_9 FFF5  
                                        u5040 2B5E                                          u5200 1818  
                                        u6130 35DE                                          u6060 1FC8  
                                        u6141 3114                                          u5270 2274  
                                        u6070 1FE2                                          u5280 22AA  
                                        u6090 200C                                          u7077 3A94  
                                        u5901 1CB2                  __end_of_Activate_Buzzer_2KHz 39C0  
                                        u5921 1CD0                                          u5851 2164  
                                        u5780 19D6                                          u6910 0E4E  
                                        u5871 2182                                          u5961 207E  
                                        u5980 20AA                                          _RBPU 007F8F  
                                        u6918 0E52                                          u5985 20A2  
                                        _TRMT 007D61                      ??_Do_Save_New_Alarm_Time 0043  
                       _setup_heater_set_temp 0068                                  _DS1621_tempC 0043  
                                _DS1621_tempF 0045                         _setup_heater_set_text 00C8  
                         ??_Deactivate_Buzzer 0011                                          _date 008B  
                                        _main 0D2C                                          _font FC8B  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 005F  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 3AB2  
                            __end_of_I2C_Read 345E                                          _time 00AF  
                                        _year 006E                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 0081  
                                        _volt 00E7                              __end_of_I2C_Stop 39E4  
                      ?_DS3231_Turn_Off_Alarm 0001                                          pclat 000FFA  
                          __size_of_LCD_Reset 0012                                          prodh 000FF4  
                                        prodl 000FF3                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 001A                                _Monitor_Heater 30B6  
                             __end_of_Do_Init 2FAC                                   _Do_Beep_Bad 3A66  
                             ??_drawFastVLine 001C                                  ___ftmul@cntr 002A  
                             __end_of_i2cNack 3ABC                                  ___param_bank 000010  
                                ___ftmul@sign 002B       Update_Setup_Screen_Cursor_Forward@field 002E  
                                ___fttol@exp1 001F                     ??_DS3231_Write_Alarm_Time 0035  
                       __size_of_Do_Beep_Good 000E                                  _Turn_Off_Fan 384E  
                                ___fttol@lval 001B               __size_of_Exit_Setup_Heater_Temp 0010  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 1716  
                            __end_of_INT1_isr 3AE6                __size_of_Activate_Buzzer_500Hz 0012  
                   __end_of_Deactivate_Buzzer 3ACE                               ??_do_update_pwm 003B  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
               __end_of_Activate_Buzzer_500Hz 39D2                                         ?_main 0001  
                             __end_of___awdiv 28E2                               drawCircle@ddF_x 0026  
                                       STR_10 FFEF                               drawCircle@ddF_y 0028  
                                       STR_11 FFB0                                         STR_20 FFF1  
                                       STR_12 FFDF                                         STR_21 FFE9  
                                       STR_13 FFAA                                         STR_22 FFED  
                                       STR_14 FFBF                                         STR_30 FF15  
                                       STR_23 FFE9                                         STR_31 FF94  
                                       STR_15 FF7B                                         STR_24 FFED  
                                       STR_16 FFD8                                         STR_32 FFB5  
                                       STR_17 FFF8                                         STR_33 FF5E  
                                       STR_25 FF3B                                         STR_34 FF15  
                                       STR_18 FFFB                                         STR_26 FFC8  
                                       STR_19 FFE4                                         STR_27 FFD0  
                                       STR_35 FF88                                         STR_36 FFB0  
                                       STR_28 FFB0                               __end_of___awmod 2CB0  
                                       STR_37 FFDF                                         STR_29 FF9F  
                                       STR_38 FEAE                                         STR_39 FF4D  
                             __end_of___ftdiv 2236                               __end_of___ftmul 1D9A  
                                       _T0CON 000FD5                               ___awdiv@divisor 0022  
                                       _T1CON 000FCD                               __end_of___fttol 2154  
                                       _T2CON 000FCA                                         _T3CON 000FB1  
               __size_of_Do_Setup_Heater_Temp 0094                               __end_of___lwdiv 3008  
                             __end_of___lwmod 3382                                         i2l302 1714  
                                       i2l311 16C4                                         i2l312 16E2  
                                       i2l290 2BF4                               ___awdiv@counter 0024  
                             drawCircle@color 0022                                         _RCSTA 000FAB  
                                       _TMR0H 000FD7                                         _TMR1H 000FCF  
                                       _TMR0L 000FD6                                         _TMR1L 000FCE  
                                       _TMR3L 000FB2                                         _SPBRG 000FAF  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 349C                                         _Rcmd1 186C  
                                       _Rcmd3 1E8C      Update_Setup_Screen_Cursor_Backward@field 002E  
                                  _i2cHighSda 3AD6                                    _i2cHighScl 3A90  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FE70  
                                       _color 00F0                                         _font2 FD8A  
                                       _found 005E                               __end_of_isdigit 3780  
                                       _tempC 00D9                                         _tempF 00DD  
                                       _month 0061                                 ___ftpack@sign 0015  
                          Set_RGB_Color@F4243 0142                                         _putch 3A74  
                           __end_of_I2C_Start 39F6                             __end_of_I2C_Write 3556  
                              __CFG_BOREN$OFF 000000                                         tablat 000FF5  
                                       plusw1 000FE3                                         plusw2 000FDB  
                      __end_of_Monitor_Heater 310A                                         status 000FD8  
                           ?_DS1621_Read_Temp 0014                                  _Do_Beep_Good 3A58  
             __size_of_check_for_button_input 007E                         __end_of_Go_Next_Field 38B2  
                             write_data@data_ 0013                            ??_DS1621_Read_Temp 0016  
                             __initialization 2DA4                                 ??_Set_RPM_RGB 002A  
                                __end_of_main 0F00                                  __end_of_font FD8A  
                    ?_Do_Save_New_Heater_Temp 0001                  __end_of_Decrease_Heater_Temp 3974  
                            __end_of_Init_ADC 3A90                              __end_of_Rcmd2red 34DA  
                          _Select_Alarm_Field 0053                                        ??_main 0156  
                               ___fttol@sign1 001A                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 39AE  
     I2C_Write_Address_Write_One_Byte@Address 0013                                    _Set_DC_RGB 35CE  
                       __end_of_Go_Prev_Field 389A                     ??_TFT_GreenTab_Initialize 001D  
                 ?_Update_Setup_Heater_Screen 0001                    ??_Update_Setup_Time_Screen 0043  
                              _Init_Interrupt 37C0                            ??_DS3231_Read_Time 0014  
                                      ?_Rcmd1 0001                                        ?_Rcmd3 0001  
                                   I2C_Init@c 0011                           _In_Alarm_Time_Setup 00F9  
                                   I2C_Read@n 0012                   DS3231_Turn_Off_Alarm@Device 001F  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0020                        _Exit_Setup_Heater_Temp 3A18  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 3592                                        _HEATER 004F  
                                      ?_putch 0001                              __end_of___ftpack 2572  
                            __end_of___lbtoft 375E                                        _DC_Txt 00D1  
               __size_of_Increase_Heater_Temp 0014                                     ??_Do_Init 003E  
                                      i2l7202 2BE0                                        i2l7206 2BEA  
                                      i2l6700 15F6                                        i2l6710 1616  
                                      i2l6720 1636                                        i2l6730 1656  
                                      i2l6706 1612                                        i2l6744 16E8  
                                      i2l6752 16F2                                        i2l6690 15C8  
                                      i2l6696 15F2                                        _OSCCON 000FD3  
             __size_of_Do_Save_New_Alarm_Time 0018                           __size_of_TIMER1_isr 000C  
                                      _SPBRGH 000FB0                               ?_Monitor_Heater 0001  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                                _Alarm_SW_Txt 00CD                              _force_nec_state0 3AE6  
                            __end_of_delay_ms 31AE                                        _i2cAck 39F6  
            ??_Initialize_Setup_Heater_Screen 0043               ?_Initialize_Setup_Heater_Screen 0001  
                __size_of_Go_Prev_Alarm_Field 0018                              __end_of_fillRect 3416  
                            __end_of_drawChar 186C                            __size_of_OpenUSART 0070  
                 __end_of_Increase_Alarm_Time 324E                          DS3231_Init@control_E 0019  
                                      ___wmul 36EA                                     ??___awdiv 0024  
                            __end_of_drawtext 1A8A                                     ??___awmod 002C  
                                   ??___ftdiv 0032                                    _Test_Alarm 3AEE  
                                   ??___ftmul 0023                                     ??___fttol 0015  
                                      _chkisr 0008                                     ??___lwdiv 0015  
                                      _array1 011F                                     ??___lwmod 001C  
                                      _buffer 0100                __size_of_Exit_Setup_Alarm_Time 0010  
                                      _nec_ok 00F4                 __end_of_Exit_Setup_Alarm_Time 3A38  
                                      clear_0 2DAA                                        clear_1 2DB6  
                            ___awdiv@quotient 0026                                        _minute 0060  
                                      _second 0063                               ___awmod@divisor 002A  
                        _Activate_Buzzer_2KHz 39AE                                     ??_get_RPM 002A  
                  __size_of_Deactivate_Buzzer 0008                               ___awmod@counter 002C  
                                      _printf 09D2                                  drawtext@size 0040  
                             ??_Increase_Time 0043                                        _strcpy 3602  
                                      _strlen 34DA                         ___ftmul@f3_as_product 0027  
                      __end_of_Init_Interrupt 37DE                           __end_of_Set_RPM_RGB 315C  
                        __end_of_get_full_ADC 3738                        _check_for_button_input 2CB0  
                            _Do_Save_New_Time 3924                                  __pdataCOMRAM 006F  
                                   ??_isdigit 0011                                     ?_I2C_Init 0011  
                                   ?_I2C_Read 0001                        get_duty_cycle@set_temp 002A  
                                   ?_I2C_Stop 0001                                  __mediumconst FC8A  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8              __end_of_I2C_Write_Cmd_Write_Data 37A0  
                                 ?_i2cHighSda 0001                                   ?_i2cHighScl 0001  
                                      putch@c 0011                              __end_of_spiwrite 3988  
                    __size_of_Exit_Time_Setup 0010                            __size_of_bcd_2_dec 002A  
                         _Do_Setup_Alarm_Time 2634                                    __accesstop 0080  
                     __end_of__initialization 2E0E                              ??_get_duty_cycle 002C  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 0058  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                          _setup_alarm_minute 0065                            _setup_alarm_second 0066  
                               ___rparam_used 000001                                    ___ftdiv@f1 002C  
             __end_of_Do_Save_New_Heater_Temp 3960                                    ___ftdiv@f2 002F  
                                  ___ftdiv@f3 0036                                    ___awtoft@c 0019  
                                  ___lbtoft@c 001C                           _Go_Next_Alarm_Field 38CA  
                                  ___ftmul@f1 001D                                    ___ftmul@f2 0020  
                                  ___fttol@f1 0011                                 __end_of_Rcmd1 197C  
                               __end_of_Rcmd3 1F7E                                __pcstackCOMRAM 0001  
                                __pidataBANK0 2EEC                                  __pidataBANK1 3382  
                               __end_of_font2 FE66                             __end_of_i2cLowSda 3AC6  
                           __end_of_i2cLowScl 3AD6                          ?_Do_Setup_Alarm_Time 0001  
                           Monitor_Heater@rpm 003E                                 __end_of_putch 3A82  
                       ?_Activate_Buzzer_2KHz 0001                        _Do_Save_New_Alarm_Time 38E2  
                              drawPixel@color 0019                                  dec_2_bcd@bcd 0032  
                                dec_2_bcd@dec 0034                        __size_of_Decrease_Time 0090  
                             ?_Init_Interrupt 0001                        __size_of_write_command 0010  
                                  ??_I2C_Init 0015                                   ?_Set_DC_RGB 0028  
                                  ??_I2C_Read 0011                                  _alarm_minute 0058  
                                _alarm_second 0059              ??_Update_Setup_Alarm_Time_Screen 0043  
             ?_Update_Setup_Alarm_Time_Screen 0001                                    ??_I2C_Stop 0011  
                        ?_Go_Next_Alarm_Field 0001                                       ??_Rcmd1 001D  
                                     ??_Rcmd3 001D                            __size_of_drawPixel 0030  
                           __end_of_OpenUSART 2E88                                       ??_putch 0011  
                        _Decrease_Heater_Temp 3960                       ??_DS3231_Turn_Off_Alarm 001B  
                                  __pbssBANK0 00E3                              _setup_alarm_hour 0064  
                                   ?_Init_ADC 0001                              _setup_alarm_time 0094  
        __end_of_Initialize_Setup_Time_Screen 1B96         __size_of_Initialize_Setup_Time_Screen 010C  
                _Initialize_Setup_Time_Screen 1A8A                                 ??_DS1621_Init 0016  
                               ??_DS3231_Init 0017                                     ?_Rcmd2red 0001  
                       __end_of_Toggle_Heater 3924                            __size_of_init_UART 0014  
                             spiwrite@spidata 0012                                    _alarm_date 0056  
                                  ??_INT0_isr 0001                                    ??_INT1_isr 0001  
                                  _alarm_mode 00EE                                    _alarm_hour 0057  
                                  _alarm_time 0082                                 ?_Wait_One_Sec 0001  
    I2C_Write_Address_Write_One_Byte@Data_Out 0014                                       ?_i2cAck 0001  
                                ?_Do_Beep_Bad 0001                            __size_of_read_volt 0056  
                        Set_DC_RGB@duty_cycle 0028                            __CFG_CCP2MX$PORTBE 000000  
                               ??_Turn_On_Fan 003E                                I2C_Read@inByte 0013  
         __size_of_Update_Setup_Heater_Screen 00A2                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                 _Set_RPM_RGB 310A                                   ?_Test_Alarm 0001  
                       ??_Do_Setup_Alarm_Time 0043                                       ?_chkisr 0001  
                             _heater_set_temp 006F                        __size_of_setAddrWindow 004E  
                           __end_of_bcd_2_dec 36C0                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 0014                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 00CA                                  ??_TIMER1_isr 0001  
                               ??_I2C_ReStart 0011                                       _ALARMEN 00EA  
                                   ?___awtoft 0019                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                    I2C_Write@n 0012  
                                     ?_printf 001D                                       ?_strcpy 0011  
                                     ?_strlen 0011                             __end_of_dec_2_bcd 3060  
                                  _fillScreen 37FC                                       _MATCHED 00EC  
                       __end_of_Update_Screen 0652                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 126E                         ??_Go_Next_Alarm_Field 0031  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                       ?_Decrease_Heater_Temp 0001                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00C3                         __end_of_fillRectangle 2312  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 2F50                      _I2C_Write_Cmd_Write_Data 3780  
                  __end_of_I2C_Write_Cmd_Only 3882                                    ??_Rcmd2red 0014  
                __end_of_Do_Setup_Heater_Temp 2976                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 2A06                                ??_Wait_One_Sec 0011  
                                     _i2cNack 3AB2                            __end_of_TIMER1_isr 3AA8  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 004E  
                               _write_command 3A48                                     _I2C_Start 39E4  
                                   _I2C_Write 3518                             ??_Exit_Time_Setup 0043  
                             __size_of_i2cAck 0012                                       __Hparam 0000  
                                     __Lparam 0000                           __size_of_Set_DC_RGB 0034  
                         __end_of_DS1621_Init 37FC                           __end_of_DS3231_Init 27AA  
                           __end_of_drawPixel 3696                         __end_of_drawFastVLine 2BA8  
                                     ___awdiv 284C                                       ___awmod 2C2E  
                                     ___ftdiv 2154                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 1CA2  
                                     ___fttol 206E                                       ___lwdiv 2FAC  
                                     ___lwmod 3336                         __size_of_get_full_ADC 0026  
                             __size_of_chkisr 2C26                                     ?_spiwrite 0001  
                                     __pcinit 2DA4                                    ??___awtoft 001C  
                                  ??___ftpack 0016                                    ??___lbtoft 001C  
                                     __ramtop 1000                                       _get_RPM 345E  
                                     __ptext0 0D2C                                       __ptext1 3060  
                                     __ptext2 3712                                       __ptext3 3556  
                                     __ptext4 001C                                       __ptext5 3910  
                   __size_of_DS1621_Read_Temp 003C                                       __ptext6 3834  
                                     __ptext7 3AEE                                       __ptext8 30B6  
                                     __ptext9 1F7E                               __size_of_printf 035A  
                           __end_of_init_UART 399C                           __end_of_Turn_On_Fan 384E  
                                   _T0CONbits 000FD5                               __size_of_strcpy 0032  
                             __size_of_strlen 003E                             __end_of_hexpowers FE78  
                    __end_of_force_nec_state0 3AEE                                     _T1CONbits 000FCD  
                                     _dpowers FE66                         __end_of_do_update_pwm 2634  
                                     _isdigit 375E                         _Activate_Buzzer_500Hz 39C0  
                            ___awmod@dividend 0028                                    _duty_cycle 0049  
                     ?_Exit_Setup_Heater_Temp 0001                           _Go_Prev_Alarm_Field 38B2  
                           __end_of_read_volt 30B6                                    ??_delay_ms 0019  
                         __end_of_I2C_ReStart 3910              __size_of_Do_Save_New_Heater_Temp 0014  
                               drawtext@_text 003A                                 drawtext@color 003C  
                            ??_Monitor_Heater 003E                                    ??_fillRect 0028  
                                  ??_drawChar 0035                                     _LCD_Reset 399C  
                           _DS3231_Write_Time 2A96                                 _setAddrWindow 329C  
                              __pintcode_body 2BA8                                 Wait_One_Sec@k 0011  
                                  delay_ms@ms 0017                          end_of_initialization 2E0E  
                               _Do_Setup_Time 23E2                                     _INT1_flag 0050  
                         __size_of_Test_Alarm 0002                                     _INT2_flag 00F8  
                                  ??_drawtext 0041                            ?_DS3231_Write_Time 0001  
                              ?_Decrease_Time 0001                                ?_write_command 0001  
                               __Lmediumconst FC8A                     __size_of_DS3231_Read_Time 0064  
                                     int_func 2BA8                       DS3231_Read_Time@Address 0014  
                    DS3231_Write_Time@Address 0036                                    ?_I2C_Start 0001  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 002A  
                    __end_of_Do_Save_New_Time 3938                                  _get_full_ADC 3712  
                         ??_DS3231_Write_Time 0035                          ?_Go_Prev_Alarm_Field 0001  
                     check_for_button_input@j 003A                      ?_DS3231_Write_Alarm_Time 0001  
                                  _tempSecond 0080                                     _RCSTAbits 000FAB  
                                     printf@c 0038                                       printf@f 001D  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                __end_of_Increase_Heater_Temp 394C                                    ??_spiwrite 0011  
                     ?_check_for_button_input 0001                                       strlen@s 0011  
                 I2C_Write_Cmd_Write_Data@Cmd 0013                                     _PORTAbits 000F80  
                            drawtext@cursor_x 0150                              drawtext@cursor_y 014F  
                                   _PORTBbits 000F81                                     _PORTCbits 000F82  
                                   _PORTDbits 000F83                              I2C_Write@outByte 0011  
      __end_of_Initialize_Setup_Heater_Screen 1E8C       __size_of_Initialize_Setup_Heater_Screen 00F2  
              _Initialize_Setup_Heater_Screen 1D9A                                    _setup_date 009D  
                                 ?_fillScreen 0024                __end_of_Exit_Setup_Heater_Temp 3A28  
                                  _setup_hour 0069                                    _setup_time 00A6  
                                  _setup_year 006D                                   ?_drawCircle 001C  
             __size_of_DS3231_Read_Alarm_Time 004C                                    drawChar@bg 0032  
                   __end_of_DS3231_Write_Time 2B20                DS3231_Turn_Off_Alarm@Address_E 001B  
              DS3231_Turn_Off_Alarm@Address_F 001C                                     _TRISBbits 000F93  
                                   _TRISCbits 000F94                                     _TRISDbits 000F95  
                      __size_of_Go_Next_Field 0018        I2C_Write_Address_Read_One_Byte@Address 0014  
                                ??_i2cHighSda 0011                                  ??_i2cHighScl 0011  
                      ??_Decrease_Heater_Temp 0043                             __size_of_I2C_Init 000A  
                           __size_of_I2C_Read 0048                             __size_of_I2C_Stop 0012  
                              ?_setAddrWindow 0014                                    ?_LCD_Reset 0001  
                              ?_Do_Setup_Time 0001                          _In_Heater_Temp_Setup 00FA  
                            drawtext@textsize 014B                                    drawPixel@x 001B  
                                  drawPixel@y 0018                            _Update_Screen$3207 0151  
                                 _DS1621_Init 37DE                                   _DS3231_Init 26F2  
                                 ___ftdiv@exp 0039                                   printf@width 0036  
                                   _TXSTAbits 000FAC                         ??_Go_Prev_Alarm_Field 0031  
           __size_of_Update_Setup_Time_Screen 0184                            get_full_ADC@result 0015  
                   ?_Update_Setup_Time_Screen 0001                             __size_of_INT0_isr 0176  
                           __size_of_INT1_isr 0008                                __end_of_i2cAck 3A08  
                                 ___ftmul@exp 0026                        __size_of_Go_Prev_Field 0018  
              ??_Initialize_Setup_Time_Screen 0043                       ?_Do_Save_New_Alarm_Time 0001  
                        __size_of_Do_Beep_Bad 000E                      DS1621_Read_Temp@Data_Ret 0017  
                                 _Turn_On_Fan 3834                __end_of_check_for_button_input 2D2E  
                            ??_Init_Interrupt 0011            Update_Setup_Heater_Screen@dc_char1 00FD  
          Update_Setup_Heater_Screen@dc_char2 00FE            Update_Setup_Heater_Screen@dc_char3 00FF  
                          __end_of_i2cHighSda 3ADE                            __end_of_i2cHighScl 3A9C  
                              __end_of___wmul 3712                                 delay_ms@count 001B  
                                  _write_data 3A38                                 __pidataCOMRAM 3AF0  
                              __end_of_chkisr 2C2E                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 38FA                                    drawtext@bg 003E  
                       _Exit_Setup_Alarm_Time 3A28                        ?_Activate_Buzzer_500Hz 0001  
                                   _Nec_code1 0051                                     _i2cLowSda 3ABC  
                        _Do_Setup_Heater_Temp 28E2                                     _i2cLowScl 3ACE  
                __size_of_Increase_Alarm_Time 004E                          __end_of_Wait_One_Sec 3834  
                              __end_of_printf 0D2C                                  ??_Set_DC_RGB 002A  
                       __end_of_Increase_Time 2A06                                __end_of_strcpy 3634  
                              __end_of_strlen 3518                                     _Nec_state 0052  
                         start_initialization 2DA4                        Update_Screen@neg_tempF 0153  
                          get_duty_cycle@diff 002E                               ??_Decrease_Time 0043  
                          get_duty_cycle@temp 0028                               ??_write_command 0013  
             __end_of_DS3231_Write_Alarm_Time 2DA4                                     _OpenUSART 2E18  
              __size_of_DS3231_Turn_Off_Alarm 0052                  DS3231_Read_Alarm_Time@Device 0015  
               __end_of_DS3231_Turn_Off_Alarm 3200                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 32EA  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 38FA                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 389A                            __end_of_Set_DC_RGB 3602  
                                    ??___wmul 0015                                  ?_Set_RPM_RGB 0028  
                                ??_Test_Alarm 0011                                 ?_Turn_Off_Fan 0001  
                                    ??_chkisr 0003                                   __pdataBANK0 0080  
                                 __pdataBANK1 0100                               setAddrWindow@x0 0017  
                             setAddrWindow@x1 0015                               setAddrWindow@y0 0014  
                             setAddrWindow@y1 0016                                      ??_printf 002B  
                            _DS1621_Read_Temp 3592                         ?_Do_Setup_Heater_Temp 0001  
                                    ??_strcpy 0015                                      ??_strlen 0013  
                                  ?_i2cLowSda 0001                                    ?_i2cLowScl 0001  
                         _Decrease_Alarm_Time 324E                                     _bcd_2_dec 3696  
                           __size_of___awtoft 003C                             __size_of___ftpack 00C6  
                           __size_of___lbtoft 0026                       _Do_Save_New_Heater_Temp 394C  
                                 __pbssCOMRAM 0043                    ??_I2C_Write_Cmd_Write_Data 0015  
                  __size_of_DS3231_Write_Time 008A                               ??_setAddrWindow 0017  
                               __pcstackBANK0 00FD                                 __pcstackBANK1 014A  
                               _Go_Prev_Field 3882                               ??_Do_Setup_Time 0043  
                                   _dec_2_bcd 3008                               _Exit_Time_Setup 3A08  
                                 ??_LCD_Reset 001D                                  _isdigit$2855 0012  
                           __size_of_delay_ms 0052                                 _Heater_SW_Txt 00D5  
                        _Increase_Heater_Temp 3938                                      ?_Do_Init 0001  
                           __size_of_fillRect 004A                             __size_of_drawChar 0156  
                          __end_of_Test_Alarm 3AF0                                    ?_OpenUSART 0011  
                            _DS3231_Read_Time 2E88                           _Heater_Set_Temp_Txt 00BE  
                                    ?_i2cNack 0001                          ?_Decrease_Alarm_Time 0001  
                           __size_of_drawtext 010E                                 ?_Do_Beep_Good 0001  
 __end_of_Update_Setup_Screen_Cursor_Backward 126E  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 10BA                   __end_of_Do_Setup_Alarm_Time 26F2  
                              ?_Go_Next_Field 0001                              ___lwdiv@dividend 0011  
                                 I2C_Read@ack 0011                                     _bit_count 005A  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 36EA  
                              ??_Turn_Off_Fan 003E                                 __pmediumconst FC8A  
                                    ?___awdiv 0020                                     __ptext100 37A0  
                                   __ptext101 3634                                     __ptext110 3ABC  
                                   __ptext102 3592                                     __ptext111 3ACE  
                                   __ptext103 3518                                     __ptext112 3AD6  
                                   __ptext104 39D2                                     __ptext113 3A90  
                                   __ptext105 39E4                                     __ptext106 3416  
                                   __ptext115 3A9C                                     __ptext107 3AB2  
                                   __ptext116 3ADE                                     __ptext108 39F6  
                                   __ptext117 15A0                                     __ptext109 38FA  
                                   __ptext118 3AE6                                      ?___awmod 0028  
                                    ?___ftdiv 002C                                      ?___ftmul 001D  
                                    ?___fttol 0011                       __size_of_get_duty_cycle 00F0  
                                   __tft_type 0055                                      ?___lwdiv 0011  
                          _I2C_Write_Cmd_Only 3868                                      ?___lwmod 0018  
                 __end_of_Go_Next_Alarm_Field 38E2                DS3231_Turn_Off_Alarm@control_E 001D  
              DS3231_Turn_Off_Alarm@control_F 001E                            drawFastVLine@color 001A  
                                 ?_write_data 0001                        ?_Exit_Setup_Alarm_Time 0001  
                                   _drawPixel 3666                                      ?_get_RPM 0028  
                           __size_of_spiwrite 0014                                    ?_bcd_2_dec 0001  
                      __size_of_Toggle_Heater 0014                           ?_I2C_Write_Cmd_Only 0013  
                           ?_force_nec_state0 0001                                      ?_isdigit 0001  
                                    _I2C_Init 3AA8                                      _I2C_Read 3416  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 39D2  
                           _Initialize_Screen 0652                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                  ??_Update_Setup_Heater_Screen 0043  
                                   _init_UART 3988                                    ?_dec_2_bcd 002E  
                          ??_force_nec_state0 0001                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FE70                            ?_Initialize_Screen 0001  
                            ___lwdiv@quotient 0015                                __size_of_putch 000E  
                                   _read_volt 3060                         ?_Increase_Heater_Temp 0001  
    __end_of_I2C_Write_Address_Write_One_Byte 37C0     __size_of_I2C_Write_Address_Write_One_Byte 0020  
          ??_I2C_Write_Address_Write_One_Byte 0015             ?_I2C_Write_Address_Write_One_Byte 0013  
            _I2C_Write_Address_Write_One_Byte 37A0                         ??_Decrease_Alarm_Time 0043  
                              ___wmul@product 0015                                ??_Do_Beep_Good 0013  
                         ??_Initialize_Screen 0043                                  _Select_Field 0054  
                                    _INT0_isr 15A0                                      _INT1_isr 3ADE  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 0636  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 0035  
                                    _PIR1bits 000F9E                                 _In_Time_Setup 00FB  
                          ??_Do_Save_New_Time 0043                         __size_of_Wait_One_Sec 001C  
                                   _setup_day 0067                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                        ??_Do_Setup_Heater_Temp 0151  
                                   drawChar@c 002F                                     drawChar@i 0038  
                                   drawChar@j 0037                                     drawChar@x 0036  
                                   drawChar@y 002E                 __size_of_Activate_Buzzer_2KHz 0012  
                                  ?_drawPixel 0018                        __size_of_fillRectangle 00DC  
                   ??_Do_Save_New_Heater_Temp 0043                                    _ADCON0bits 000FC2  
                     __end_of_Exit_Time_Setup 3A18                             ___wmul@multiplier 0011  
                   __end_of_Initialize_Screen 09D2                                   ??_i2cLowSda 0011  
                                 ??_i2cLowScl 0011                 DS3231_Read_Alarm_Time@Address 0014  
                                ??_fillScreen 0026              __size_of_DS3231_Write_Alarm_Time 0076  
                                ??_drawCircle 0024                                    printf@flag 0035  
                                  printf@prec 0032                                    ?_init_UART 0001  
            __end_of_Update_Setup_Time_Screen 15A0                                   _INTCON2bits 000FF1  
     __end_of_I2C_Write_Address_Read_One_Byte 3666      __size_of_I2C_Write_Address_Read_One_Byte 0032  
           ??_I2C_Write_Address_Read_One_Byte 0015              ?_I2C_Write_Address_Read_One_Byte 0014  
             _I2C_Write_Address_Read_One_Byte 3634                                   _INTCON3bits 000FF0  
                                   copy_data0 2DD0                                     copy_data1 2DF0  
                                   drawtext@i 014D                        __size_of_drawFastVLine 0088  
                                   drawtext@x 014A                                     drawtext@y 0039  
                                  ?_read_volt 003B                                      _Nec_code 00E3  
                                    _Init_ADC 3A82                             write_command@cmd_ 0013  
  __end_of_Initialize_Setup_Alarm_Time_Screen 1CA2   __size_of_Initialize_Setup_Alarm_Time_Screen 010C  
        ??_Initialize_Setup_Alarm_Time_Screen 0043           ?_Initialize_Setup_Alarm_Time_Screen 0001  
          _Initialize_Setup_Alarm_Time_Screen 1B96                                   ??_OpenUSART 0013  
                                ?_DS1621_Init 0001                                      _Rcmd2red 349C  
                            __size_of_Do_Init 005C                           __size_of_write_data 0010  
                                ?_DS3231_Init 0001                               ??_Go_Next_Field 0031  
                             OpenUSART@config 0013        I2C_Write_Address_Write_One_Byte@Device 0015  
                               _Toggle_Heater 3910                                  _Time_Elapsed 0047  
                         _Increase_Alarm_Time 3200                              __size_of_i2cNack 000A  
                               _RTC_ALARM_Txt 00E1                                  _Wait_One_Sec 3818  
                                    __Hrparam 0000                        __size_of_do_update_pwm 00C2  
                          __end_of_fillScreen 3818                                      __Lrparam 0000  
                          __end_of_drawCircle 141C                                  ?_Turn_On_Fan 0001  
                     ??_Activate_Buzzer_500Hz 0011                              __size_of___awdiv 0096  
                            __size_of___awmod 0082                              __size_of___ftdiv 00E2  
                            __size_of___ftmul 00F8                              __size_of___fttol 00E6  
                            __size_of___lwdiv 005C                                      _Volt_Txt 00B8  
                            __size_of___lwmod 004C                          __size_of_Set_RPM_RGB 0052  
                                    ___awtoft 3556                                      ___ftpack 24AC  
                                    ___lbtoft 3738                                  ?_I2C_ReStart 0001  
                             ??_Go_Prev_Field 0031                              __size_of_get_RPM 003E  
                                 ??_bcd_2_dec 0011                          ?_Increase_Alarm_Time 0001  
                               _Update_Screen 001C                              __size_of_isdigit 0022  
                                    _delay_ms 315C                               ___lwdiv@divisor 0013  
                                 ??_dec_2_bcd 0030                               ___lwdiv@counter 0017  
                                    __ptext10 345E                                      __ptext11 310A  
                                    __ptext20 2A96                                      __ptext12 35CE  
                                    __ptext21 2A06                                      __ptext13 23E2  
                                    __ptext30 2634                                      __ptext22 141C  
                                    __ptext14 1A8A                                      __ptext31 2CB0  
                                    __ptext23 28E2                                      __ptext15 2976  
                                    __ptext40 38E2                                      __ptext32 3696  
                                    __ptext24 1D9A                                      __ptext16 3882  
                                    __ptext41 0652                                      __ptext33 1B96  
                                    __ptext25 3938                                      __ptext17 389A  
                                    __ptext50 399C                                      __ptext42 3602  
                                    __ptext34 3200                                      __ptext26 3A18  
                                    __ptext18 3A08                                      __ptext51 315C  
                                    __ptext43 37FC                                      __ptext35 38B2  
                                    __ptext27 394C                                      __ptext19 3924  
                                    __ptext60 3AC6                                      __ptext52 2D2E  
                                    __ptext44 2236                                      __ptext36 10BA  
                                    __ptext28 3960                                      __ptext61 39C0  
                                    __ptext53 3008                                      __ptext45 126E  
                                    __ptext37 38CA                                      __ptext29 27AA  
                                    __ptext70 329C                                      __ptext62 324E  
                                    __ptext54 2E88                                      __ptext46 36C0  
                                    __ptext38 0F00                                      __ptext71 3A38  
                                    __ptext63 2312                                      __ptext55 32EA  
                                    __ptext47 1E8C                                      __ptext39 3A28  
                                    __ptext80 09D2                                      __ptext72 3A48  
                                    __ptext64 197C                                      __ptext56 3A58  
                                    __ptext48 349C                                      __ptext81 3A74  
                                    __ptext73 3974                                      __ptext65 34DA  
                                    __ptext57 39AE                                      __ptext49 186C  
                                    __ptext90 2154                                      __ptext82 375E  
                                    __ptext74 2C2E                                      __ptext66 1716  
                                    __ptext58 3A66                                      __ptext91 24AC  
                                    __ptext83 36EA                                      __ptext75 284C  
                                    __ptext67 33CC                                      __ptext59 3818  
                                    __ptext92 37C0                                      __ptext84 3336  
                                    __ptext76 2F50                                      __ptext68 2B20  
                                    __ptext93 3A82                                      __ptext85 2FAC  
                                    __ptext77 3988                                      __ptext69 3666  
                                    __ptext94 3AA8                                      __ptext86 2572  
                                    __ptext78 2E18                                      __ptext95 37DE  
                                    __ptext87 3738                                      __ptext79 384E  
                                    __ptext96 3780                                      __ptext88 206E  
                                    __ptext97 3868                                      __ptext89 1CA2  
                                    __ptext98 31AE                                      __ptext99 26F2  
                      ??_Increase_Heater_Temp 0043                                      _fillRect 33CC  
                                    _drawChar 1716                          __end_of_Turn_Off_Fan 3868  
            __size_of_TFT_GreenTab_Initialize 002A                 __size_of_Decrease_Heater_Temp 0014  
  __end_of_Update_Setup_Screen_Cursor_Forward 10BA   __size_of_Update_Setup_Screen_Cursor_Forward 01BA  
        ??_Update_Setup_Screen_Cursor_Forward 002E           ?_Update_Setup_Screen_Cursor_Forward 0001  
          _Update_Setup_Screen_Cursor_Forward 0F00                                      _colstart 005B  
                 __end_of_Go_Prev_Alarm_Field 38CA                                      _drawtext 197C  
                                  strcpy@from 0013                       ?_DS3231_Read_Alarm_Time 0001  
                               _fillRectangle 2236                DS3231_Write_Alarm_Time@Address 0036  
                              ?_Toggle_Heater 0001                      __end_of_DS1621_Read_Temp 35CE  
                               __size_of_main 01D4                                 ??_Do_Beep_Bad 0013  
                     __size_of_Monitor_Heater 0054                               fillRectangle@hi 0021  
                             fillRectangle@lo 0022                 Update_Screen@neg_DS1621_tempC 0155  
                              _get_duty_cycle 1F7E                                 _drawFastVLine 2B20  
                                   printf@idx 002F                                      _spiwrite 3974  
                                   printf@val 0033                             DS3231_Init@Device 001A  
                                 ??_drawPixel 001B                                      _rowstart 0062  
                    __end_of_DS3231_Read_Time 2EEC                         ??_Increase_Alarm_Time 0043  
                  __size_of_Initialize_Screen 0380                              ?_Exit_Time_Setup 0001  
                        __end_of_Do_Beep_Good 3A66                                ?_Update_Screen 0001  
                                  _INTCONbits 000FF2            __end_of_Update_Setup_Heater_Screen 284C  
                  _Update_Setup_Heater_Screen 27AA                                 _do_update_pwm 2572  
                              OpenUSART@spbrg 0011                                   ??_init_UART 0014  
                                    isdigit@c 0013                __end_of_DS3231_Read_Alarm_Time 3336  
                                 ??_read_volt 003E                                     spiwrite@x 0011  
                                    intlevel2 0000                                ?_fillRectangle 0018  
                            Set_RPM_RGB@F4113 0134                         __end_of_Decrease_Time 2A96  
                    _Update_Setup_Time_Screen 141C                              ___lwmod@dividend 0018  
                       __end_of_write_command 3A58                               fillScreen@color 0024  
                       _DS3231_Turn_Off_Alarm 31AE                 DS3231_Write_Alarm_Time@Device 0035  
                     do_update_pwm@duty_cycle 014D                        __end_of_get_duty_cycle 206E  
                      __size_of_Increase_Time 0090                      _Select_Heater_Temp_Field 00FC  
                              fillRectangle@h 001A                                fillRectangle@w 0019  
                              fillRectangle@x 0023                                fillRectangle@y 0018  
                     ??_Exit_Setup_Alarm_Time 0043                                ?_drawFastVLine 0018  
                                    printf@ap 0030                      ??_Exit_Setup_Heater_Temp 0043  
                         __end_of_Do_Beep_Bad 3A74                                  ??_write_data 0013  
                                  _TIMER1_isr 3A9C                                 fillRect@color 0026  
                     _DS3231_Write_Alarm_Time 2D2E                                ?_do_update_pwm 0001  
                             ___lwmod@divisor 001A                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                               ___lwmod@counter 001C  
                                _setup_minute 006A                                  _setup_second 006C  
                     __size_of_Init_Interrupt 001E                               Set_RPM_RGB@temp 002A  
                       __end_of_setAddrWindow 32EA                         __end_of_Do_Setup_Time 24AC  
                          fillRectangle@color 001B                               ??_Toggle_Heater 003E  
                           do_update_pwm@dc_I 014E                             do_update_pwm@dc_f 014A  
                               drawChar@color 0030                                   _setup_month 006B  
                              Set_RPM_RGB@rpm 0028                            __end_of_write_data 3A48  
                   __size_of_force_nec_state0 0008                                  drawChar@line 0035  
                               ?_get_full_ADC 0011                      ??_check_for_button_input 0039  
                                drawChar@size 0034             __size_of_I2C_Write_Cmd_Write_Data 0020  
                        __size_of_DS1621_Init 001E                     ?_I2C_Write_Cmd_Write_Data 0013  
                        __size_of_DS3231_Init 00B8                               ?_get_duty_cycle 0028  
      __end_of_Update_Setup_Alarm_Time_Screen 23E2       __size_of_Update_Setup_Alarm_Time_Screen 00D0  
              _Update_Setup_Alarm_Time_Screen 2312  
