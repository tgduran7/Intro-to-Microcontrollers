

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 07 16:36:42 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  0025F6                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _wrap
    85  0025F6  01                 	db	1
    86                           
    87                           ;initializer for _NSLT_Count
    88  0025F7  30                 	db	48
    89  0025F8  30                 	db	48
    90  0025F9  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  0025FA  30                 	db	48
    94  0025FB  30                 	db	48
    95  0025FC  00                 	db	0
    96                           
    97                           ;initializer for _Act_Mode_Txt
    98  0025FD  44                 	db	68
    99  0025FE  00                 	db	0
   100                           
   101                           ;initializer for _FlashingR_Txt
   102  0025FF  30                 	db	48
   103  002600  00                 	db	0
   104                           
   105                           ;initializer for _FlashingS_Txt
   106  002601  30                 	db	48
   107  002602  00                 	db	0
   108                           
   109                           ;initializer for _SW_EWLT_Txt
   110  002603  30                 	db	48
   111  002604  00                 	db	0
   112                           
   113                           ;initializer for _SW_EWPED_Txt
   114  002605  30                 	db	48
   115  002606  00                 	db	0
   116                           
   117                           ;initializer for _SW_MODE_Txt
   118  002607  44                 	db	68
   119  002608  00                 	db	0
   120                           
   121                           ;initializer for _SW_NSLT_Txt
   122  002609  30                 	db	48
   123  00260A  00                 	db	0
   124                           
   125                           ;initializer for _SW_NSPED_Txt
   126  00260B  30                 	db	48
   127  00260C  00                 	db	0
   128                           
   129                           	psect	idataBANK0
   130  0026CA                     __pidataBANK0:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _EWLT_Count
   134  0026CA  30                 	db	48
   135  0026CB  30                 	db	48
   136  0026CC  00                 	db	0
   137                           
   138                           ;initializer for _EW_Count
   139  0026CD  30                 	db	48
   140  0026CE  30                 	db	48
   141  0026CF  00                 	db	0
   142                           
   143                           ;initializer for _PED_EW_Count
   144  0026D0  30                 	db	48
   145  0026D1  30                 	db	48
   146  0026D2  00                 	db	0
   147                           
   148                           ;initializer for _PED_NS_Count
   149  0026D3  30                 	db	48
   150  0026D4  30                 	db	48
   151  0026D5  00                 	db	0
   152                           
   153                           	psect	mediumconst
   154  00FDBA                     __pmediumconst:
   155                           	opt stack 0
   156  00FDBA  00                 	db	0
   157  00FDBB                     _font:
   158                           	opt stack 0
   159  00FDBB  00                 	db	0
   160  00FDBC  00                 	db	0
   161  00FDBD  00                 	db	0
   162  00FDBE  00                 	db	0
   163  00FDBF  00                 	db	0
   164  00FDC0  00                 	db	0
   165  00FDC1  00                 	db	0
   166  00FDC2  5F                 	db	95
   167  00FDC3  00                 	db	0
   168  00FDC4  00                 	db	0
   169  00FDC5  00                 	db	0
   170  00FDC6  07                 	db	7
   171  00FDC7  00                 	db	0
   172  00FDC8  07                 	db	7
   173  00FDC9  00                 	db	0
   174  00FDCA  14                 	db	20
   175  00FDCB  7F                 	db	127
   176  00FDCC  14                 	db	20
   177  00FDCD  7F                 	db	127
   178  00FDCE  14                 	db	20
   179  00FDCF  24                 	db	36
   180  00FDD0  2A                 	db	42
   181  00FDD1  7F                 	db	127
   182  00FDD2  2A                 	db	42
   183  00FDD3  12                 	db	18
   184  00FDD4  23                 	db	35
   185  00FDD5  13                 	db	19
   186  00FDD6  08                 	db	8
   187  00FDD7  64                 	db	100
   188  00FDD8  62                 	db	98
   189  00FDD9  36                 	db	54
   190  00FDDA  49                 	db	73
   191  00FDDB  56                 	db	86
   192  00FDDC  20                 	db	32
   193  00FDDD  50                 	db	80
   194  00FDDE  00                 	db	0
   195  00FDDF  08                 	db	8
   196  00FDE0  07                 	db	7
   197  00FDE1  03                 	db	3
   198  00FDE2  00                 	db	0
   199  00FDE3  00                 	db	0
   200  00FDE4  1C                 	db	28
   201  00FDE5  22                 	db	34
   202  00FDE6  41                 	db	65
   203  00FDE7  00                 	db	0
   204  00FDE8  00                 	db	0
   205  00FDE9  41                 	db	65
   206  00FDEA  22                 	db	34
   207  00FDEB  1C                 	db	28
   208  00FDEC  00                 	db	0
   209  00FDED  2A                 	db	42
   210  00FDEE  1C                 	db	28
   211  00FDEF  7F                 	db	127
   212  00FDF0  1C                 	db	28
   213  00FDF1  2A                 	db	42
   214  00FDF2  08                 	db	8
   215  00FDF3  08                 	db	8
   216  00FDF4  3E                 	db	62
   217  00FDF5  08                 	db	8
   218  00FDF6  08                 	db	8
   219  00FDF7  00                 	db	0
   220  00FDF8  80                 	db	128
   221  00FDF9  70                 	db	112
   222  00FDFA  30                 	db	48
   223  00FDFB  00                 	db	0
   224  00FDFC  08                 	db	8
   225  00FDFD  08                 	db	8
   226  00FDFE  08                 	db	8
   227  00FDFF  08                 	db	8
   228  00FE00  08                 	db	8
   229  00FE01  00                 	db	0
   230  00FE02  00                 	db	0
   231  00FE03  60                 	db	96
   232  00FE04  60                 	db	96
   233  00FE05  00                 	db	0
   234  00FE06  20                 	db	32
   235  00FE07  10                 	db	16
   236  00FE08  08                 	db	8
   237  00FE09  04                 	db	4
   238  00FE0A  02                 	db	2
   239  00FE0B  3E                 	db	62
   240  00FE0C  51                 	db	81
   241  00FE0D  49                 	db	73
   242  00FE0E  45                 	db	69
   243  00FE0F  3E                 	db	62
   244  00FE10  00                 	db	0
   245  00FE11  42                 	db	66
   246  00FE12  7F                 	db	127
   247  00FE13  40                 	db	64
   248  00FE14  00                 	db	0
   249  00FE15  72                 	db	114
   250  00FE16  49                 	db	73
   251  00FE17  49                 	db	73
   252  00FE18  49                 	db	73
   253  00FE19  46                 	db	70
   254  00FE1A  21                 	db	33
   255  00FE1B  41                 	db	65
   256  00FE1C  49                 	db	73
   257  00FE1D  4D                 	db	77
   258  00FE1E  33                 	db	51
   259  00FE1F  18                 	db	24
   260  00FE20  14                 	db	20
   261  00FE21  12                 	db	18
   262  00FE22  7F                 	db	127
   263  00FE23  10                 	db	16
   264  00FE24  27                 	db	39
   265  00FE25  45                 	db	69
   266  00FE26  45                 	db	69
   267  00FE27  45                 	db	69
   268  00FE28  39                 	db	57
   269  00FE29  3C                 	db	60
   270  00FE2A  4A                 	db	74
   271  00FE2B  49                 	db	73
   272  00FE2C  49                 	db	73
   273  00FE2D  31                 	db	49
   274  00FE2E  41                 	db	65
   275  00FE2F  21                 	db	33
   276  00FE30  11                 	db	17
   277  00FE31  09                 	db	9
   278  00FE32  07                 	db	7
   279  00FE33  36                 	db	54
   280  00FE34  49                 	db	73
   281  00FE35  49                 	db	73
   282  00FE36  49                 	db	73
   283  00FE37  36                 	db	54
   284  00FE38  46                 	db	70
   285  00FE39  49                 	db	73
   286  00FE3A  49                 	db	73
   287  00FE3B  29                 	db	41
   288  00FE3C  1E                 	db	30
   289  00FE3D  00                 	db	0
   290  00FE3E  00                 	db	0
   291  00FE3F  14                 	db	20
   292  00FE40  00                 	db	0
   293  00FE41  00                 	db	0
   294  00FE42  00                 	db	0
   295  00FE43  40                 	db	64
   296  00FE44  34                 	db	52
   297  00FE45  00                 	db	0
   298  00FE46  00                 	db	0
   299  00FE47  00                 	db	0
   300  00FE48  08                 	db	8
   301  00FE49  14                 	db	20
   302  00FE4A  22                 	db	34
   303  00FE4B  41                 	db	65
   304  00FE4C  14                 	db	20
   305  00FE4D  14                 	db	20
   306  00FE4E  14                 	db	20
   307  00FE4F  14                 	db	20
   308  00FE50  14                 	db	20
   309  00FE51  00                 	db	0
   310  00FE52  41                 	db	65
   311  00FE53  22                 	db	34
   312  00FE54  14                 	db	20
   313  00FE55  08                 	db	8
   314  00FE56  02                 	db	2
   315  00FE57  01                 	db	1
   316  00FE58  59                 	db	89
   317  00FE59  09                 	db	9
   318  00FE5A  06                 	db	6
   319  00FE5B  3E                 	db	62
   320  00FE5C  41                 	db	65
   321  00FE5D  5D                 	db	93
   322  00FE5E  59                 	db	89
   323  00FE5F  4E                 	db	78
   324  00FE60  7C                 	db	124
   325  00FE61  12                 	db	18
   326  00FE62  11                 	db	17
   327  00FE63  12                 	db	18
   328  00FE64  7C                 	db	124
   329  00FE65  7F                 	db	127
   330  00FE66  49                 	db	73
   331  00FE67  49                 	db	73
   332  00FE68  49                 	db	73
   333  00FE69  36                 	db	54
   334  00FE6A  3E                 	db	62
   335  00FE6B  41                 	db	65
   336  00FE6C  41                 	db	65
   337  00FE6D  41                 	db	65
   338  00FE6E  22                 	db	34
   339  00FE6F  7F                 	db	127
   340  00FE70  41                 	db	65
   341  00FE71  41                 	db	65
   342  00FE72  41                 	db	65
   343  00FE73  3E                 	db	62
   344  00FE74  7F                 	db	127
   345  00FE75  49                 	db	73
   346  00FE76  49                 	db	73
   347  00FE77  49                 	db	73
   348  00FE78  41                 	db	65
   349  00FE79  7F                 	db	127
   350  00FE7A  09                 	db	9
   351  00FE7B  09                 	db	9
   352  00FE7C  09                 	db	9
   353  00FE7D  01                 	db	1
   354  00FE7E  3E                 	db	62
   355  00FE7F  41                 	db	65
   356  00FE80  41                 	db	65
   357  00FE81  51                 	db	81
   358  00FE82  73                 	db	115
   359  00FE83  7F                 	db	127
   360  00FE84  08                 	db	8
   361  00FE85  08                 	db	8
   362  00FE86  08                 	db	8
   363  00FE87  7F                 	db	127
   364  00FE88  00                 	db	0
   365  00FE89  41                 	db	65
   366  00FE8A  7F                 	db	127
   367  00FE8B  41                 	db	65
   368  00FE8C  00                 	db	0
   369  00FE8D  20                 	db	32
   370  00FE8E  40                 	db	64
   371  00FE8F  41                 	db	65
   372  00FE90  3F                 	db	63
   373  00FE91  01                 	db	1
   374  00FE92  7F                 	db	127
   375  00FE93  08                 	db	8
   376  00FE94  14                 	db	20
   377  00FE95  22                 	db	34
   378  00FE96  41                 	db	65
   379  00FE97  7F                 	db	127
   380  00FE98  40                 	db	64
   381  00FE99  40                 	db	64
   382  00FE9A  40                 	db	64
   383  00FE9B  40                 	db	64
   384  00FE9C  7F                 	db	127
   385  00FE9D  02                 	db	2
   386  00FE9E  1C                 	db	28
   387  00FE9F  02                 	db	2
   388  00FEA0  7F                 	db	127
   389  00FEA1  7F                 	db	127
   390  00FEA2  04                 	db	4
   391  00FEA3  08                 	db	8
   392  00FEA4  10                 	db	16
   393  00FEA5  7F                 	db	127
   394  00FEA6  3E                 	db	62
   395  00FEA7  41                 	db	65
   396  00FEA8  41                 	db	65
   397  00FEA9  41                 	db	65
   398  00FEAA  3E                 	db	62
   399  00FEAB  7F                 	db	127
   400  00FEAC  09                 	db	9
   401  00FEAD  09                 	db	9
   402  00FEAE  09                 	db	9
   403  00FEAF  06                 	db	6
   404  00FEB0  3E                 	db	62
   405  00FEB1  41                 	db	65
   406  00FEB2  51                 	db	81
   407  00FEB3  21                 	db	33
   408  00FEB4  5E                 	db	94
   409  00FEB5  7F                 	db	127
   410  00FEB6  09                 	db	9
   411  00FEB7  19                 	db	25
   412  00FEB8  29                 	db	41
   413  00FEB9  46                 	db	70
   414  00FEBA                     __end_of_font:
   415                           	opt stack 0
   416  00FEBA                     _font2:
   417                           	opt stack 0
   418  00FEBA  26                 	db	38
   419  00FEBB  49                 	db	73
   420  00FEBC  49                 	db	73
   421  00FEBD  49                 	db	73
   422  00FEBE  32                 	db	50
   423  00FEBF  03                 	db	3
   424  00FEC0  01                 	db	1
   425  00FEC1  7F                 	db	127
   426  00FEC2  01                 	db	1
   427  00FEC3  03                 	db	3
   428  00FEC4  3F                 	db	63
   429  00FEC5  40                 	db	64
   430  00FEC6  40                 	db	64
   431  00FEC7  40                 	db	64
   432  00FEC8  3F                 	db	63
   433  00FEC9  1F                 	db	31
   434  00FECA  20                 	db	32
   435  00FECB  40                 	db	64
   436  00FECC  20                 	db	32
   437  00FECD  1F                 	db	31
   438  00FECE  3F                 	db	63
   439  00FECF  40                 	db	64
   440  00FED0  38                 	db	56
   441  00FED1  40                 	db	64
   442  00FED2  3F                 	db	63
   443  00FED3  63                 	db	99
   444  00FED4  14                 	db	20
   445  00FED5  08                 	db	8
   446  00FED6  14                 	db	20
   447  00FED7  63                 	db	99
   448  00FED8  03                 	db	3
   449  00FED9  04                 	db	4
   450  00FEDA  78                 	db	120
   451  00FEDB  04                 	db	4
   452  00FEDC  03                 	db	3
   453  00FEDD  61                 	db	97
   454  00FEDE  59                 	db	89
   455  00FEDF  49                 	db	73
   456  00FEE0  4D                 	db	77
   457  00FEE1  43                 	db	67
   458  00FEE2  00                 	db	0
   459  00FEE3  7F                 	db	127
   460  00FEE4  41                 	db	65
   461  00FEE5  41                 	db	65
   462  00FEE6  41                 	db	65
   463  00FEE7  02                 	db	2
   464  00FEE8  04                 	db	4
   465  00FEE9  08                 	db	8
   466  00FEEA  10                 	db	16
   467  00FEEB  20                 	db	32
   468  00FEEC  00                 	db	0
   469  00FEED  41                 	db	65
   470  00FEEE  41                 	db	65
   471  00FEEF  41                 	db	65
   472  00FEF0  7F                 	db	127
   473  00FEF1  04                 	db	4
   474  00FEF2  02                 	db	2
   475  00FEF3  01                 	db	1
   476  00FEF4  02                 	db	2
   477  00FEF5  04                 	db	4
   478  00FEF6  40                 	db	64
   479  00FEF7  40                 	db	64
   480  00FEF8  40                 	db	64
   481  00FEF9  40                 	db	64
   482  00FEFA  40                 	db	64
   483  00FEFB  00                 	db	0
   484  00FEFC  03                 	db	3
   485  00FEFD  07                 	db	7
   486  00FEFE  08                 	db	8
   487  00FEFF  00                 	db	0
   488  00FF00  20                 	db	32
   489  00FF01  54                 	db	84
   490  00FF02  54                 	db	84
   491  00FF03  78                 	db	120
   492  00FF04  40                 	db	64
   493  00FF05  7F                 	db	127
   494  00FF06  28                 	db	40
   495  00FF07  44                 	db	68
   496  00FF08  44                 	db	68
   497  00FF09  38                 	db	56
   498  00FF0A  38                 	db	56
   499  00FF0B  44                 	db	68
   500  00FF0C  44                 	db	68
   501  00FF0D  44                 	db	68
   502  00FF0E  28                 	db	40
   503  00FF0F  38                 	db	56
   504  00FF10  44                 	db	68
   505  00FF11  44                 	db	68
   506  00FF12  28                 	db	40
   507  00FF13  7F                 	db	127
   508  00FF14  38                 	db	56
   509  00FF15  54                 	db	84
   510  00FF16  54                 	db	84
   511  00FF17  54                 	db	84
   512  00FF18  18                 	db	24
   513  00FF19  00                 	db	0
   514  00FF1A  08                 	db	8
   515  00FF1B  7E                 	db	126
   516  00FF1C  09                 	db	9
   517  00FF1D  02                 	db	2
   518  00FF1E  18                 	db	24
   519  00FF1F  A4                 	db	164
   520  00FF20  A4                 	db	164
   521  00FF21  9C                 	db	156
   522  00FF22  78                 	db	120
   523  00FF23  7F                 	db	127
   524  00FF24  08                 	db	8
   525  00FF25  04                 	db	4
   526  00FF26  04                 	db	4
   527  00FF27  78                 	db	120
   528  00FF28  00                 	db	0
   529  00FF29  44                 	db	68
   530  00FF2A  7D                 	db	125
   531  00FF2B  40                 	db	64
   532  00FF2C  00                 	db	0
   533  00FF2D  20                 	db	32
   534  00FF2E  40                 	db	64
   535  00FF2F  40                 	db	64
   536  00FF30  3D                 	db	61
   537  00FF31  00                 	db	0
   538  00FF32  7F                 	db	127
   539  00FF33  10                 	db	16
   540  00FF34  28                 	db	40
   541  00FF35  44                 	db	68
   542  00FF36  00                 	db	0
   543  00FF37  00                 	db	0
   544  00FF38  41                 	db	65
   545  00FF39  7F                 	db	127
   546  00FF3A  40                 	db	64
   547  00FF3B  00                 	db	0
   548  00FF3C  7C                 	db	124
   549  00FF3D  04                 	db	4
   550  00FF3E  78                 	db	120
   551  00FF3F  04                 	db	4
   552  00FF40  78                 	db	120
   553  00FF41  7C                 	db	124
   554  00FF42  08                 	db	8
   555  00FF43  04                 	db	4
   556  00FF44  04                 	db	4
   557  00FF45  78                 	db	120
   558  00FF46  38                 	db	56
   559  00FF47  44                 	db	68
   560  00FF48  44                 	db	68
   561  00FF49  44                 	db	68
   562  00FF4A  38                 	db	56
   563  00FF4B  FC                 	db	252
   564  00FF4C  18                 	db	24
   565  00FF4D  24                 	db	36
   566  00FF4E  24                 	db	36
   567  00FF4F  18                 	db	24
   568  00FF50  18                 	db	24
   569  00FF51  24                 	db	36
   570  00FF52  24                 	db	36
   571  00FF53  18                 	db	24
   572  00FF54  FC                 	db	252
   573  00FF55  7C                 	db	124
   574  00FF56  08                 	db	8
   575  00FF57  04                 	db	4
   576  00FF58  04                 	db	4
   577  00FF59  08                 	db	8
   578  00FF5A  48                 	db	72
   579  00FF5B  54                 	db	84
   580  00FF5C  54                 	db	84
   581  00FF5D  54                 	db	84
   582  00FF5E  24                 	db	36
   583  00FF5F  04                 	db	4
   584  00FF60  04                 	db	4
   585  00FF61  3F                 	db	63
   586  00FF62  44                 	db	68
   587  00FF63  24                 	db	36
   588  00FF64  3C                 	db	60
   589  00FF65  40                 	db	64
   590  00FF66  40                 	db	64
   591  00FF67  20                 	db	32
   592  00FF68  7C                 	db	124
   593  00FF69  1C                 	db	28
   594  00FF6A  20                 	db	32
   595  00FF6B  40                 	db	64
   596  00FF6C  20                 	db	32
   597  00FF6D  1C                 	db	28
   598  00FF6E  3C                 	db	60
   599  00FF6F  40                 	db	64
   600  00FF70  30                 	db	48
   601  00FF71  40                 	db	64
   602  00FF72  3C                 	db	60
   603  00FF73  44                 	db	68
   604  00FF74  28                 	db	40
   605  00FF75  10                 	db	16
   606  00FF76  28                 	db	40
   607  00FF77  44                 	db	68
   608  00FF78  4C                 	db	76
   609  00FF79  90                 	db	144
   610  00FF7A  90                 	db	144
   611  00FF7B  90                 	db	144
   612  00FF7C  7C                 	db	124
   613  00FF7D  44                 	db	68
   614  00FF7E  64                 	db	100
   615  00FF7F  54                 	db	84
   616  00FF80  4C                 	db	76
   617  00FF81  44                 	db	68
   618  00FF82  00                 	db	0
   619  00FF83  08                 	db	8
   620  00FF84  36                 	db	54
   621  00FF85  41                 	db	65
   622  00FF86  00                 	db	0
   623  00FF87  00                 	db	0
   624  00FF88  00                 	db	0
   625  00FF89  77                 	db	119
   626  00FF8A  00                 	db	0
   627  00FF8B  00                 	db	0
   628  00FF8C  00                 	db	0
   629  00FF8D  41                 	db	65
   630  00FF8E  36                 	db	54
   631  00FF8F  08                 	db	8
   632  00FF90  00                 	db	0
   633  00FF91  02                 	db	2
   634  00FF92  01                 	db	1
   635  00FF93  02                 	db	2
   636  00FF94  04                 	db	4
   637  00FF95  02                 	db	2
   638  00FF96                     __end_of_font2:
   639                           	opt stack 0
   640  0000                     _ADCON0	set	4034
   641  0000                     _ADCON0bits	set	4034
   642  0000                     _ADCON1	set	4033
   643  0000                     _ADCON2	set	4032
   644  0000                     _ADRESH	set	4036
   645  0000                     _ADRESL	set	4035
   646  0000                     _CCP2CON	set	4026
   647  0000                     _CCPR2L	set	4027
   648  0000                     _INTCON2bits	set	4081
   649  0000                     _INTCON3bits	set	4080
   650  0000                     _INTCONbits	set	4082
   651  0000                     _OSCCON	set	4051
   652  0000                     _PIE1bits	set	3997
   653  0000                     _PIR1bits	set	3998
   654  0000                     _PIR2bits	set	4001
   655  0000                     _PORTAbits	set	3968
   656  0000                     _PORTBbits	set	3969
   657  0000                     _PORTCbits	set	3970
   658  0000                     _PORTDbits	set	3971
   659  0000                     _PORTEbits	set	3972
   660  0000                     _PR2	set	4043
   661  0000                     _RCSTA	set	4011
   662  0000                     _RCSTAbits	set	4011
   663  0000                     _SPBRG	set	4015
   664  0000                     _SPBRGH	set	4016
   665  0000                     _SSPBUF	set	4041
   666  0000                     _SSPCON1	set	4038
   667  0000                     _SSPSTAT	set	4039
   668  0000                     _SSPSTATbits	set	4039
   669  0000                     _T0CON	set	4053
   670  0000                     _T0CONbits	set	4053
   671  0000                     _T2CON	set	4042
   672  0000                     _T3CON	set	4017
   673  0000                     _T3CONbits	set	4017
   674  0000                     _TMR0H	set	4055
   675  0000                     _TMR0L	set	4054
   676  0000                     _TRISA	set	3986
   677  0000                     _TRISB	set	3987
   678  0000                     _TRISC	set	3988
   679  0000                     _TRISCbits	set	3988
   680  0000                     _TRISD	set	3989
   681  0000                     _TRISE	set	3990
   682  0000                     _TXREG	set	4013
   683  0000                     _TXSTA	set	4012
   684  0000                     _TXSTAbits	set	4012
   685  0000                     _RBPU	set	32655
   686  0000                     _TRMT	set	32097
   687  00FF96                     STR_1:
   688  00FF96  45                 	db	69	;'E'
   689  00FF97  43                 	db	67	;'C'
   690  00FF98  45                 	db	69	;'E'
   691  00FF99  33                 	db	51	;'3'
   692  00FF9A  33                 	db	51	;'3'
   693  00FF9B  30                 	db	48	;'0'
   694  00FF9C  31                 	db	49	;'1'
   695  00FF9D  4C                 	db	76	;'L'
   696  00FF9E  20                 	db	32
   697  00FF9F  53                 	db	83	;'S'
   698  00FFA0  50                 	db	80	;'P'
   699  00FFA1  52                 	db	82	;'R'
   700  00FFA2  49                 	db	73	;'I'
   701  00FFA3  4E                 	db	78	;'N'
   702  00FFA4  47                 	db	71	;'G'
   703  00FFA5  20                 	db	32
   704  00FFA6  32                 	db	50	;'2'
   705  00FFA7  32                 	db	50	;'2'
   706  00FFA8  2D                 	db	45
   707  00FFA9  53                 	db	83	;'S'
   708  00FFAA  31                 	db	49	;'1'
   709  00FFAB  00                 	db	0
   710  00FFAC                     STR_12:
   711  00FFAC  4E                 	db	78	;'N'
   712  00FFAD  53                 	db	83	;'S'
   713  00FFAE  50                 	db	80	;'P'
   714  00FFAF  20                 	db	32
   715  00FFB0  4E                 	db	78	;'N'
   716  00FFB1  53                 	db	83	;'S'
   717  00FFB2  4C                 	db	76	;'L'
   718  00FFB3  54                 	db	84	;'T'
   719  00FFB4  20                 	db	32
   720  00FFB5  45                 	db	69	;'E'
   721  00FFB6  57                 	db	87	;'W'
   722  00FFB7  50                 	db	80	;'P'
   723  00FFB8  20                 	db	32
   724  00FFB9  45                 	db	69	;'E'
   725  00FFBA  57                 	db	87	;'W'
   726  00FFBB  4C                 	db	76	;'L'
   727  00FFBC  54                 	db	84	;'T'
   728  00FFBD  20                 	db	32
   729  00FFBE  4D                 	db	77	;'M'
   730  00FFBF  52                 	db	82	;'R'
   731  00FFC0  00                 	db	0
   732  00FFC1                     STR_6:
   733  00FFC1  4E                 	db	78	;'N'
   734  00FFC2  4F                 	db	79	;'O'
   735  00FFC3  52                 	db	82	;'R'
   736  00FFC4  54                 	db	84	;'T'
   737  00FFC5  48                 	db	72	;'H'
   738  00FFC6  2F                 	db	47
   739  00FFC7  53                 	db	83	;'S'
   740  00FFC8  4F                 	db	79	;'O'
   741  00FFC9  55                 	db	85	;'U'
   742  00FFCA  54                 	db	84	;'T'
   743  00FFCB  48                 	db	72	;'H'
   744  00FFCC  00                 	db	0
   745  00FFCD                     STR_8:
   746  00FFCD  45                 	db	69	;'E'
   747  00FFCE  41                 	db	65	;'A'
   748  00FFCF  53                 	db	83	;'S'
   749  00FFD0  54                 	db	84	;'T'
   750  00FFD1  2F                 	db	47
   751  00FFD2  57                 	db	87	;'W'
   752  00FFD3  45                 	db	69	;'E'
   753  00FFD4  53                 	db	83	;'S'
   754  00FFD5  54                 	db	84	;'T'
   755  00FFD6  00                 	db	0
   756  00FFD7                     STR_7:
   757  00FFD7  4E                 	db	78	;'N'
   758  00FFD8  2F                 	db	47
   759  00FFD9  53                 	db	83	;'S'
   760  00FFDA  20                 	db	32
   761  00FFDB  4C                 	db	76	;'L'
   762  00FFDC  54                 	db	84	;'T'
   763  00FFDD  00                 	db	0
   764  00FFDE                     STR_9:
   765  00FFDE  45                 	db	69	;'E'
   766  00FFDF  2F                 	db	47
   767  00FFE0  57                 	db	87	;'W'
   768  00FFE1  20                 	db	32
   769  00FFE2  4C                 	db	76	;'L'
   770  00FFE3  54                 	db	84	;'T'
   771  00FFE4  00                 	db	0
   772  00FFE5                     STR_2:
   773  00FFE5  4D                 	db	77	;'M'
   774  00FFE6  6F                 	db	111	;'o'
   775  00FFE7  64                 	db	100	;'d'
   776  00FFE8  65                 	db	101	;'e'
   777  00FFE9  3A                 	db	58	;':'
   778  00FFEA  00                 	db	0
   779  00FFEB                     STR_3:
   780  00FFEB  46                 	db	70	;'F'
   781  00FFEC  52                 	db	82	;'R'
   782  00FFED  3A                 	db	58	;':'
   783  00FFEE  00                 	db	0
   784  00FFEF                     STR_4:
   785  00FFEF  46                 	db	70	;'F'
   786  00FFF0  53                 	db	83	;'S'
   787  00FFF1  3A                 	db	58	;':'
   788  00FFF2  00                 	db	0
   789  00FFF3                     STR_10:
   790  00FFF3  50                 	db	80	;'P'
   791  00FFF4  4E                 	db	78	;'N'
   792  00FFF5  53                 	db	83	;'S'
   793  00FFF6  00                 	db	0
   794  00FFF7                     STR_11:
   795  00FFF7  50                 	db	80	;'P'
   796  00FFF8  45                 	db	69	;'E'
   797  00FFF9  57                 	db	87	;'W'
   798  00FFFA  00                 	db	0
   799  00FFFB                     STR_14:
   800  00FFFB  20                 	db	32
   801  00FFFC  00                 	db	0
   802  00FFFD                     STR_5:
   803  00FFFD  2A                 	db	42
   804  00FFFE  00                 	db	0
   805  0000                     
   806                           ; #config settings
   807  00FFFF  00                 	db	0	; dummy byte at the end
   808  0000                     
   809                           	psect	cinit
   810  002050                     __pcinit:
   811                           	opt stack 0
   812  002050                     start_initialization:
   813                           	opt stack 0
   814  002050                     __initialization:
   815                           	opt stack 0
   816                           
   817                           ; Clear objects allocated to BANK0 (31 bytes)
   818  002050  EE00  F080         	lfsr	0,__pbssBANK0
   819  002054  0E1F               	movlw	31
   820  002056                     clear_0:
   821  002056  6AEE               	clrf	postinc0,c
   822  002058  06E8               	decf	wreg,f,c
   823  00205A  E1FD               	bnz	clear_0
   824                           
   825                           ; Clear objects allocated to COMRAM (25 bytes)
   826  00205C  EE00  F042         	lfsr	0,__pbssCOMRAM
   827  002060  0E19               	movlw	25
   828  002062                     clear_1:
   829  002062  6AEE               	clrf	postinc0,c
   830  002064  06E8               	decf	wreg,f,c
   831  002066  E1FD               	bnz	clear_1
   832                           
   833                           ; Initialize objects allocated to BANK0 (12 bytes)
   834                           ; load TBLPTR registers with __pidataBANK0
   835  002068  0ECA               	movlw	low __pidataBANK0
   836  00206A  6EF6               	movwf	tblptrl,c
   837  00206C  0E26               	movlw	high __pidataBANK0
   838  00206E  6EF7               	movwf	tblptrh,c
   839  002070  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   840  002072  6EF8               	movwf	tblptru,c
   841  002074  EE00  F0AE         	lfsr	0,__pdataBANK0
   842  002078  EE10 F00C          	lfsr	1,12
   843  00207C                     copy_data0:
   844  00207C  0009               	tblrd		*+
   845  00207E  CFF5 FFEE          	movff	tablat,postinc0
   846  002082  50E5               	movf	postdec1,w,c
   847  002084  50E1               	movf	fsr1l,w,c
   848  002086  E1FA               	bnz	copy_data0
   849                           
   850                           ; Initialize objects allocated to COMRAM (23 bytes)
   851                           ; load TBLPTR registers with __pidataCOMRAM
   852  002088  0EF6               	movlw	low __pidataCOMRAM
   853  00208A  6EF6               	movwf	tblptrl,c
   854  00208C  0E25               	movlw	high __pidataCOMRAM
   855  00208E  6EF7               	movwf	tblptrh,c
   856  002090  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   857  002092  6EF8               	movwf	tblptru,c
   858  002094  EE00  F05B         	lfsr	0,__pdataCOMRAM
   859  002098  EE10 F017          	lfsr	1,23
   860  00209C                     copy_data1:
   861  00209C  0009               	tblrd		*+
   862  00209E  CFF5 FFEE          	movff	tablat,postinc0
   863  0020A2  50E5               	movf	postdec1,w,c
   864  0020A4  50E1               	movf	fsr1l,w,c
   865  0020A6  E1FA               	bnz	copy_data1
   866  0020A8                     end_of_initialization:
   867                           	opt stack 0
   868  0020A8                     __end_of__initialization:
   869                           	opt stack 0
   870  0020A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   871  0020AA  6EF8               	movwf	tblptru,c
   872  0020AC  0100               	movlb	0
   873  0020AE  EFE3  F00C         	goto	_main	;jump to C main() function
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           postinc0	equ	0xFEE
   879                           wreg	equ	0xFE8
   880                           postdec1	equ	0xFE5
   881                           fsr1l	equ	0xFE1
   882                           
   883                           	psect	bssCOMRAM
   884  000042                     __pbssCOMRAM:
   885                           	opt stack 0
   886  000042                     _volt:
   887                           	opt stack 0
   888  000042                     	ds	3
   889  000045                     _MODE:
   890                           	opt stack 0
   891  000045                     	ds	2
   892  000047                     _nbr:
   893                           	opt stack 0
   894  000047                     	ds	2
   895  000049                     _txt:
   896                           	opt stack 0
   897  000049                     	ds	2
   898  00004B                     _Count:
   899                           	opt stack 0
   900  00004B                     	ds	1
   901  00004C                     _EW_PED_SW:
   902                           	opt stack 0
   903  00004C                     	ds	1
   904  00004D                     _FLASHING:
   905                           	opt stack 0
   906  00004D                     	ds	1
   907  00004E                     _FLASHING_REQUEST:
   908                           	opt stack 0
   909  00004E                     	ds	1
   910  00004F                     _NS_PED_SW:
   911                           	opt stack 0
   912  00004F                     	ds	1
   913  000050                     _PED_Count:
   914                           	opt stack 0
   915  000050                     	ds	1
   916  000051                     _SW_EWLT:
   917                           	opt stack 0
   918  000051                     	ds	1
   919  000052                     _SW_EWPED:
   920                           	opt stack 0
   921  000052                     	ds	1
   922  000053                     _SW_MODE:
   923                           	opt stack 0
   924  000053                     	ds	1
   925  000054                     _SW_NSLT:
   926                           	opt stack 0
   927  000054                     	ds	1
   928  000055                     _SW_NSPED:
   929                           	opt stack 0
   930  000055                     	ds	1
   931  000056                     __tft_type:
   932                           	opt stack 0
   933  000056                     	ds	1
   934  000057                     _colstart:
   935                           	opt stack 0
   936  000057                     	ds	1
   937  000058                     _dir:
   938                           	opt stack 0
   939  000058                     	ds	1
   940  000059                     _direction:
   941                           	opt stack 0
   942  000059                     	ds	1
   943  00005A                     _rowstart:
   944                           	opt stack 0
   945  00005A                     	ds	1
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1l	equ	0xFE1
   954                           
   955                           	psect	dataCOMRAM
   956  00005B                     __pdataCOMRAM:
   957                           	opt stack 0
   958  00005B                     _wrap:
   959                           	opt stack 0
   960  00005B                     	ds	1
   961  00005C                     _NSLT_Count:
   962                           	opt stack 0
   963  00005C                     	ds	3
   964  00005F                     _NS_Count:
   965                           	opt stack 0
   966  00005F                     	ds	3
   967  000062                     _Act_Mode_Txt:
   968                           	opt stack 0
   969  000062                     	ds	2
   970  000064                     _FlashingR_Txt:
   971                           	opt stack 0
   972  000064                     	ds	2
   973  000066                     _FlashingS_Txt:
   974                           	opt stack 0
   975  000066                     	ds	2
   976  000068                     _SW_EWLT_Txt:
   977                           	opt stack 0
   978  000068                     	ds	2
   979  00006A                     _SW_EWPED_Txt:
   980                           	opt stack 0
   981  00006A                     	ds	2
   982  00006C                     _SW_MODE_Txt:
   983                           	opt stack 0
   984  00006C                     	ds	2
   985  00006E                     _SW_NSLT_Txt:
   986                           	opt stack 0
   987  00006E                     	ds	2
   988  000070                     _SW_NSPED_Txt:
   989                           	opt stack 0
   990  000070                     	ds	2
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           postinc0	equ	0xFEE
   996                           wreg	equ	0xFE8
   997                           postdec1	equ	0xFE5
   998                           fsr1l	equ	0xFE1
   999                           
  1000                           	psect	bssBANK0
  1001  000080                     __pbssBANK0:
  1002                           	opt stack 0
  1003  000080                     _buffer:
  1004                           	opt stack 0
  1005  000080                     	ds	31
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           fsr1l	equ	0xFE1
  1014                           
  1015                           	psect	dataBANK0
  1016  0000AE                     __pdataBANK0:
  1017                           	opt stack 0
  1018  0000AE                     _EWLT_Count:
  1019                           	opt stack 0
  1020  0000AE                     	ds	3
  1021  0000B1                     _EW_Count:
  1022                           	opt stack 0
  1023  0000B1                     	ds	3
  1024  0000B4                     _PED_EW_Count:
  1025                           	opt stack 0
  1026  0000B4                     	ds	3
  1027  0000B7                     _PED_NS_Count:
  1028                           	opt stack 0
  1029  0000B7                     	ds	3
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  00009F                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  00009F                     drawtext@x:
  1043                           	opt stack 0
  1044  00009F                     update_LCD_color@direction:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x0
  1048  00009F                     	ds	1
  1049  0000A0                     update_LCD_color@Circle_Y:
  1050                           	opt stack 0
  1051  0000A0                     drawtext@textsize:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x1
  1055  0000A0                     	ds	1
  1056  0000A1                     Set_NS@color:
  1057                           	opt stack 0
  1058  0000A1                     Set_NS_LT@color:
  1059                           	opt stack 0
  1060  0000A1                     Set_EW@color:
  1061                           	opt stack 0
  1062  0000A1                     Set_EW_LT@color:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x2
  1066  0000A1                     	ds	1
  1067  0000A2                     drawtext@i:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x3
  1071  0000A2                     	ds	2
  1072  0000A4                     drawtext@cursor_y:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x5
  1076  0000A4                     	ds	1
  1077  0000A5                     drawtext@cursor_x:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x6
  1081  0000A5                     	ds	1
  1082  0000A6                     update_LCD_count@direction:
  1083                           	opt stack 0
  1084  0000A6                     update_LCD_PED_Count@direction:
  1085                           	opt stack 0
  1086  0000A6                     update_LCD_misc@nStep:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x7
  1090  0000A6                     	ds	2
  1091  0000A8                     update_LCD_misc@ch:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x9
  1095  0000A8                     	ds	1
  1096  0000A9                     Do_Flashing@FLASHING:
  1097                           	opt stack 0
  1098  0000A9                     PED_Control@Num_Sec:
  1099                           	opt stack 0
  1100  0000A9                     Wait_N_Seconds@seconds:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0xA
  1104  0000A9                     	ds	1
  1105  0000AA                     PED_Control@direction:
  1106                           	opt stack 0
  1107  0000AA                     Wait_N_Seconds@I:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0xB
  1111  0000AA                     	ds	1
  1112  0000AB                     PED_Control@i:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0xC
  1116  0000AB                     	ds	1
  1117  0000AC                     main@nStep:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0xD
  1121  0000AC                     	ds	2
  1122                           tblptru	equ	0xFF8
  1123                           tblptrh	equ	0xFF7
  1124                           tblptrl	equ	0xFF6
  1125                           tablat	equ	0xFF5
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           postdec1	equ	0xFE5
  1129                           fsr1l	equ	0xFE1
  1130                           
  1131                           	psect	cstackCOMRAM
  1132  000001                     __pcstackCOMRAM:
  1133                           	opt stack 0
  1134  000001                     ??_chkisr:
  1135  000001                     
  1136                           ; 0 bytes @ 0x0
  1137  000001                     	ds	14
  1138  00000F                     ?_strlen:
  1139                           	opt stack 0
  1140  00000F                     ?_get_full_ADC:
  1141                           	opt stack 0
  1142  00000F                     ?___wmul:
  1143                           	opt stack 0
  1144  00000F                     ?___awdiv:
  1145                           	opt stack 0
  1146  00000F                     ?___awmod:
  1147                           	opt stack 0
  1148  00000F                     ?___ftpack:
  1149                           	opt stack 0
  1150  00000F                     spiwrite@x:
  1151                           	opt stack 0
  1152  00000F                     OpenUSART@spbrg:
  1153                           	opt stack 0
  1154  00000F                     ___wmul@multiplier:
  1155                           	opt stack 0
  1156  00000F                     ___awdiv@dividend:
  1157                           	opt stack 0
  1158  00000F                     ___awmod@dividend:
  1159                           	opt stack 0
  1160  00000F                     strcpy@to:
  1161                           	opt stack 0
  1162  00000F                     strlen@s:
  1163                           	opt stack 0
  1164  00000F                     ___ftpack@arg:
  1165                           	opt stack 0
  1166  00000F                     ___ftge@ff1:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0xE
  1170  00000F                     	ds	1
  1171  000010                     spiwrite@spidata:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0xF
  1175  000010                     	ds	1
  1176  000011                     ??_strlen:
  1177  000011                     ??_get_full_ADC:
  1178  000011                     write_command@cmd_:
  1179                           	opt stack 0
  1180  000011                     write_data@data_:
  1181                           	opt stack 0
  1182  000011                     OpenUSART@config:
  1183                           	opt stack 0
  1184  000011                     ___wmul@multiplicand:
  1185                           	opt stack 0
  1186  000011                     ___awdiv@divisor:
  1187                           	opt stack 0
  1188  000011                     ___awmod@divisor:
  1189                           	opt stack 0
  1190  000011                     strcpy@from:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x10
  1194  000011                     	ds	1
  1195  000012                     setAddrWindow@y0:
  1196                           	opt stack 0
  1197  000012                     ___ftpack@exp:
  1198                           	opt stack 0
  1199  000012                     ___ftge@ff2:
  1200                           	opt stack 0
  1201                           
  1202                           ; 3 bytes @ 0x11
  1203  000012                     	ds	1
  1204  000013                     setAddrWindow@x1:
  1205                           	opt stack 0
  1206  000013                     ___awdiv@counter:
  1207                           	opt stack 0
  1208  000013                     ___awmod@counter:
  1209                           	opt stack 0
  1210  000013                     ___ftpack@sign:
  1211                           	opt stack 0
  1212  000013                     get_full_ADC@result:
  1213                           	opt stack 0
  1214  000013                     ___wmul@product:
  1215                           	opt stack 0
  1216  000013                     strcpy@cp:
  1217                           	opt stack 0
  1218  000013                     strlen@cp:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x12
  1222  000013                     	ds	1
  1223  000014                     ??___ftpack:
  1224  000014                     setAddrWindow@y1:
  1225                           	opt stack 0
  1226  000014                     ___awdiv@sign:
  1227                           	opt stack 0
  1228  000014                     ___awmod@sign:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x13
  1232  000014                     	ds	1
  1233  000015                     ??___ftge:
  1234  000015                     setAddrWindow@x0:
  1235                           	opt stack 0
  1236  000015                     delay_ms@ms:
  1237                           	opt stack 0
  1238  000015                     ___awdiv@quotient:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x14
  1242  000015                     	ds	1
  1243  000016                     drawPixel@y:
  1244                           	opt stack 0
  1245  000016                     drawFastVLine@y:
  1246                           	opt stack 0
  1247  000016                     fillRectangle@y:
  1248                           	opt stack 0
  1249  000016                     drawFastHLine@y:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x15
  1253  000016                     	ds	1
  1254  000017                     ??_delay_ms:
  1255  000017                     ?___awtoft:
  1256                           	opt stack 0
  1257  000017                     drawFastVLine@h:
  1258                           	opt stack 0
  1259  000017                     fillRectangle@w:
  1260                           	opt stack 0
  1261  000017                     drawFastHLine@w:
  1262                           	opt stack 0
  1263  000017                     drawPixel@color:
  1264                           	opt stack 0
  1265  000017                     ___awtoft@c:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x16
  1269  000017                     	ds	1
  1270  000018                     fillRectangle@h:
  1271                           	opt stack 0
  1272  000018                     drawFastVLine@color:
  1273                           	opt stack 0
  1274  000018                     drawFastHLine@color:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x17
  1278  000018                     	ds	1
  1279  000019                     drawPixel@x:
  1280                           	opt stack 0
  1281  000019                     delay_ms@count:
  1282                           	opt stack 0
  1283  000019                     fillRectangle@color:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x18
  1287  000019                     	ds	1
  1288  00001A                     ??_drawFastVLine:
  1289  00001A                     ??_drawFastHLine:
  1290  00001A                     ___awtoft@sign:
  1291                           	opt stack 0
  1292  00001A                     drawCircle@x0:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x19
  1296  00001A                     	ds	1
  1297  00001B                     ??_fillRectangle:
  1298  00001B                     ?___ftdiv:
  1299                           	opt stack 0
  1300  00001B                     ___ftdiv@f1:
  1301                           	opt stack 0
  1302                           
  1303                           ; 3 bytes @ 0x1A
  1304  00001B                     	ds	1
  1305  00001C                     drawCircle@y0:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x1B
  1309  00001C                     	ds	2
  1310  00001E                     drawFastVLine@hi:
  1311                           	opt stack 0
  1312  00001E                     drawFastHLine@hi:
  1313                           	opt stack 0
  1314  00001E                     drawCircle@r:
  1315                           	opt stack 0
  1316  00001E                     ___ftdiv@f2:
  1317                           	opt stack 0
  1318                           
  1319                           ; 3 bytes @ 0x1D
  1320  00001E                     	ds	1
  1321  00001F                     drawFastVLine@lo:
  1322                           	opt stack 0
  1323  00001F                     fillRectangle@hi:
  1324                           	opt stack 0
  1325  00001F                     drawFastHLine@lo:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x1E
  1329  00001F                     	ds	1
  1330  000020                     drawFastVLine@x:
  1331                           	opt stack 0
  1332  000020                     fillRectangle@lo:
  1333                           	opt stack 0
  1334  000020                     drawFastHLine@x:
  1335                           	opt stack 0
  1336  000020                     drawCircle@color:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x1F
  1340  000020                     	ds	1
  1341  000021                     ??___ftdiv:
  1342  000021                     fillRect@y:
  1343                           	opt stack 0
  1344  000021                     fillRectangle@x:
  1345                           	opt stack 0
  1346  000021                     fillCircleHelper@x0:
  1347                           	opt stack 0
  1348  000021                     drawRect@x:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x20
  1352  000021                     	ds	1
  1353  000022                     ??_drawCircle:
  1354  000022                     fillRect@w:
  1355                           	opt stack 0
  1356  000022                     fillScreen@color:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x21
  1360  000022                     	ds	1
  1361  000023                     fillRect@h:
  1362                           	opt stack 0
  1363  000023                     fillCircleHelper@y0:
  1364                           	opt stack 0
  1365  000023                     drawRect@y:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x22
  1369  000023                     	ds	1
  1370  000024                     ___ftdiv@cntr:
  1371                           	opt stack 0
  1372  000024                     fillRect@color:
  1373                           	opt stack 0
  1374  000024                     drawCircle@ddF_x:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x23
  1378  000024                     	ds	1
  1379  000025                     fillCircleHelper@r:
  1380                           	opt stack 0
  1381  000025                     drawRect@w:
  1382                           	opt stack 0
  1383  000025                     ___ftdiv@f3:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x24
  1387  000025                     	ds	1
  1388  000026                     ??_fillRect:
  1389  000026                     drawCircle@ddF_y:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x25
  1393  000026                     	ds	1
  1394  000027                     fillCircleHelper@cornername:
  1395                           	opt stack 0
  1396  000027                     drawRect@h:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x26
  1400  000027                     	ds	1
  1401  000028                     ___ftdiv@exp:
  1402                           	opt stack 0
  1403  000028                     drawCircle@f:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x27
  1407  000028                     	ds	1
  1408  000029                     fillRect@x:
  1409                           	opt stack 0
  1410  000029                     ___ftdiv@sign:
  1411                           	opt stack 0
  1412  000029                     fillCircleHelper@delta:
  1413                           	opt stack 0
  1414  000029                     drawRect@color:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x28
  1418  000029                     	ds	1
  1419  00002A                     fillRect@i:
  1420                           	opt stack 0
  1421  00002A                     drawCircle@x:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x29
  1425  00002A                     	ds	1
  1426  00002B                     ??_drawRect:
  1427  00002B                     fillCircleHelper@color:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x2A
  1431  00002B                     	ds	1
  1432  00002C                     drawChar@y:
  1433                           	opt stack 0
  1434  00002C                     drawCircle@y:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x2B
  1438  00002C                     	ds	1
  1439  00002D                     ??_fillCircleHelper:
  1440  00002D                     drawChar@c:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x2C
  1444  00002D                     	ds	1
  1445  00002E                     drawChar@color:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x2D
  1449  00002E                     	ds	1
  1450  00002F                     fillCircleHelper@ddF_x:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x2E
  1454  00002F                     	ds	1
  1455  000030                     drawChar@bg:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x2F
  1459  000030                     	ds	1
  1460  000031                     fillCircleHelper@ddF_y:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x30
  1464  000031                     	ds	1
  1465  000032                     drawChar@size:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x31
  1469  000032                     	ds	1
  1470  000033                     drawChar@line:
  1471                           	opt stack 0
  1472  000033                     fillCircleHelper@f:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x32
  1476  000033                     	ds	1
  1477  000034                     drawChar@x:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x33
  1481  000034                     	ds	1
  1482  000035                     drawChar@j:
  1483                           	opt stack 0
  1484  000035                     fillCircleHelper@x:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x34
  1488  000035                     	ds	1
  1489  000036                     drawChar@i:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x35
  1493  000036                     	ds	1
  1494  000037                     drawtext@y:
  1495                           	opt stack 0
  1496  000037                     fillCircleHelper@y:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x36
  1500  000037                     	ds	1
  1501  000038                     drawtext@_text:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x37
  1505  000038                     	ds	1
  1506  000039                     fillCircle@x0:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x38
  1510  000039                     	ds	1
  1511  00003A                     drawtext@color:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x39
  1515  00003A                     	ds	1
  1516  00003B                     fillCircle@y0:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x3A
  1520  00003B                     	ds	1
  1521  00003C                     drawtext@bg:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x3B
  1525  00003C                     	ds	1
  1526  00003D                     fillCircle@r:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x3C
  1530  00003D                     	ds	1
  1531  00003E                     drawtext@size:
  1532                           	opt stack 0
  1533                           
  1534                           ; 1 bytes @ 0x3D
  1535  00003E                     	ds	1
  1536  00003F                     ??_drawtext:
  1537  00003F                     fillCircle@color:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x3E
  1541  00003F                     	ds	2
  1542  000041                     update_LCD_color@color:
  1543                           	opt stack 0
  1544  000041                     update_LCD_count@count:
  1545                           	opt stack 0
  1546  000041                     update_LCD_PED_Count@count:
  1547                           	opt stack 0
  1548                           
  1549                           ; 1 bytes @ 0x40
  1550  000041                     	ds	1
  1551  000042                     tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1l	equ	0xFE1
  1559                           
  1560                           ; 0 bytes @ 0x41
  1561 ;;
  1562 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1563 ;;
  1564 ;; *************** function _main *****************
  1565 ;; Defined at:
  1566 ;;		line 350 in file "Lab9pC.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;  nStep           2   13[BANK0 ] int 
  1571 ;; Return value:  Size  Location     Type
  1572 ;;		None               void
  1573 ;; Registers used:
  1574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;Total ram usage:        2 bytes
  1585 ;; Hardware stack levels required when called:   13
  1586 ;; This function calls:
  1587 ;;		_Day_Mode
  1588 ;;		_Do_Flashing
  1589 ;;		_Do_Init
  1590 ;;		_Initialize_Screen
  1591 ;;		_Night_Mode
  1592 ;;		___awtoft
  1593 ;;		___ftdiv
  1594 ;;		___ftge
  1595 ;;		___wmul
  1596 ;;		_get_full_ADC
  1597 ;;		_init_IO
  1598 ;;		_init_UART
  1599 ;; This function is called by:
  1600 ;;		Startup code after reset
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text0
  1605  0019C6                     __ptext0:
  1606                           	opt stack 0
  1607  0019C6                     _main:
  1608                           	opt stack 18
  1609                           
  1610                           ;Lab9pC.c: 352: RBPU = 0;
  1611                           
  1612                           ;incstack = 0
  1613  0019C6  9EF1               	bcf	intcon2,7,c	;volatile
  1614                           
  1615                           ;Lab9pC.c: 353: Do_Init();
  1616  0019C8  ECBA  F012         	call	_Do_Init	;wreg free
  1617                           
  1618                           ;Lab9pC.c: 354: init_IO();
  1619  0019CC  EC07  F013         	call	_init_IO	;wreg free
  1620                           
  1621                           ;Lab9pC.c: 355: init_UART();
  1622  0019D0  EC28  F013         	call	_init_UART	;wreg free
  1623                           
  1624                           ;Lab9pC.c: 356: OSCCON = 0x70;
  1625  0019D4  0E70               	movlw	112
  1626  0019D6  6ED3               	movwf	4051,c	;volatile
  1627                           
  1628                           ;Lab9pC.c: 357: Initialize_Screen();
  1629  0019D8  EC0E  F000         	call	_Initialize_Screen	;wreg free
  1630                           
  1631                           ;Lab9pC.c: 360: int nStep = get_full_ADC();
  1632  0019DC  ECCD  F012         	call	_get_full_ADC	;wreg free
  1633  0019E0  C00F  F0AC         	movff	?_get_full_ADC,main@nStep
  1634  0019E4  C010  F0AD         	movff	?_get_full_ADC+1,main@nStep+1
  1635                           
  1636                           ;Lab9pC.c: 361: volt = nStep * 5 /1024.0;
  1637  0019E8  C0AC  F00F         	movff	main@nStep,___wmul@multiplier
  1638  0019EC  C0AD  F010         	movff	main@nStep+1,___wmul@multiplier+1
  1639  0019F0  0E00               	movlw	0
  1640  0019F2  6E12               	movwf	___wmul@multiplicand+1,c
  1641  0019F4  0E05               	movlw	5
  1642  0019F6  6E11               	movwf	___wmul@multiplicand,c
  1643  0019F8  ECA6  F012         	call	___wmul	;wreg free
  1644  0019FC  C00F  F017         	movff	?___wmul,___awtoft@c
  1645  001A00  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1646  001A04  EC27  F012         	call	___awtoft	;wreg free
  1647  001A08  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  1648  001A0C  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  1649  001A10  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  1650  001A14  0E00               	movlw	0
  1651  001A16  6E1E               	movwf	___ftdiv@f2,c
  1652  001A18  0E80               	movlw	128
  1653  001A1A  6E1F               	movwf	___ftdiv@f2+1,c
  1654  001A1C  0E44               	movlw	68
  1655  001A1E  6E20               	movwf	___ftdiv@f2+2,c
  1656  001A20  ECD0  F00A         	call	___ftdiv	;wreg free
  1657  001A24  C01B  F042         	movff	?___ftdiv,_volt
  1658  001A28  C01C  F043         	movff	?___ftdiv+1,_volt+1
  1659  001A2C  C01D  F044         	movff	?___ftdiv+2,_volt+2
  1660                           
  1661                           ;Lab9pC.c: 362: SW_MODE = volt < 2.5 ? 1:0;
  1662  001A30  C042  F00F         	movff	_volt,___ftge@ff1
  1663  001A34  C043  F010         	movff	_volt+1,___ftge@ff1+1
  1664  001A38  C044  F011         	movff	_volt+2,___ftge@ff1+2
  1665  001A3C  0E00               	movlw	0
  1666  001A3E  6E12               	movwf	___ftge@ff2,c
  1667  001A40  0E20               	movlw	32
  1668  001A42  6E13               	movwf	___ftge@ff2+1,c
  1669  001A44  0E40               	movlw	64
  1670  001A46  6E14               	movwf	___ftge@ff2+2,c
  1671  001A48  ECE0  F00D         	call	___ftge	;wreg free
  1672  001A4C  B0D8               	btfsc	status,0,c
  1673  001A4E  D002               	goto	u3980
  1674  001A50  0E01               	movlw	1
  1675  001A52  D001               	goto	u3990
  1676  001A54                     u3980:
  1677  001A54  0E00               	movlw	0
  1678  001A56                     u3990:
  1679  001A56  6E53               	movwf	_SW_MODE,c
  1680  001A58  D000               	goto	l5640
  1681  001A5A                     l5640:
  1682                           
  1683                           ;Lab9pC.c: 365: {
  1684                           ;Lab9pC.c: 366: if (SW_MODE)
  1685  001A5A  5053               	movf	_SW_MODE,w,c
  1686  001A5C  B4D8               	btfsc	status,2,c
  1687  001A5E  D003               	goto	l5644
  1688                           
  1689                           ;Lab9pC.c: 367: {
  1690                           ;Lab9pC.c: 368: Day_Mode();
  1691  001A60  ECAF  F00B         	call	_Day_Mode	;wreg free
  1692                           
  1693                           ;Lab9pC.c: 369: }
  1694  001A64  D003               	goto	l5646
  1695  001A66                     l5644:
  1696                           
  1697                           ;Lab9pC.c: 370: else
  1698                           ;Lab9pC.c: 371: {
  1699                           ;Lab9pC.c: 372: Night_Mode();
  1700  001A66  EC3E  F00D         	call	_Night_Mode	;wreg free
  1701  001A6A  D000               	goto	l5646
  1702  001A6C                     l5646:
  1703                           
  1704                           ;Lab9pC.c: 373: }
  1705                           ;Lab9pC.c: 374: if(FLASHING_REQUEST == 1)
  1706  001A6C  044E               	decf	_FLASHING_REQUEST,w,c
  1707  001A6E  A4D8               	btfss	status,2,c
  1708  001A70  D7F4               	goto	l5640
  1709                           
  1710                           ;Lab9pC.c: 375: {
  1711                           ;Lab9pC.c: 376: Do_Flashing();
  1712  001A72  EC59  F010         	call	_Do_Flashing	;wreg free
  1713  001A76  D7F1               	goto	l5640
  1714  001A78  EF0C  F000         	goto	start
  1715  001A7C                     __end_of_main:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           tblptrh	equ	0xFF7
  1719                           tblptrl	equ	0xFF6
  1720                           tablat	equ	0xFF5
  1721                           intcon2	equ	0xFF1
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1l	equ	0xFE1
  1726                           status	equ	0xFD8
  1727                           
  1728 ;; *************** function _init_IO *****************
  1729 ;; Defined at:
  1730 ;;		line 381 in file "Lab9pC.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;		None               void
  1737 ;; Registers used:
  1738 ;;		wreg, status,2
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;Total ram usage:        0 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    2
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text1
  1759  00260E                     __ptext1:
  1760                           	opt stack 0
  1761  00260E                     _init_IO:
  1762                           	opt stack 28
  1763                           
  1764                           ;Lab9pC.c: 383: TRISA = 0x1F;
  1765                           
  1766                           ;incstack = 0
  1767  00260E  0E1F               	movlw	31
  1768  002610  6E92               	movwf	3986,c	;volatile
  1769                           
  1770                           ;Lab9pC.c: 384: TRISB = 0x07;
  1771  002612  0E07               	movlw	7
  1772  002614  6E93               	movwf	3987,c	;volatile
  1773                           
  1774                           ;Lab9pC.c: 385: TRISC = 0x00;
  1775  002616  0E00               	movlw	0
  1776  002618  6E94               	movwf	3988,c	;volatile
  1777                           
  1778                           ;Lab9pC.c: 386: TRISD = 0x00;
  1779  00261A  0E00               	movlw	0
  1780  00261C  6E95               	movwf	3989,c	;volatile
  1781                           
  1782                           ;Lab9pC.c: 387: TRISE = 0x00;
  1783  00261E  0E00               	movlw	0
  1784  002620  6E96               	movwf	3990,c	;volatile
  1785  002622  0012               	return		;funcret
  1786  002624                     __end_of_init_IO:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           intcon2	equ	0xFF1
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           postdec1	equ	0xFE5
  1796                           fsr1l	equ	0xFE1
  1797                           status	equ	0xFD8
  1798                           
  1799 ;; *************** function _Night_Mode *****************
  1800 ;; Defined at:
  1801 ;;		line 551 in file "Lab9pC.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;		None               void
  1808 ;; Registers used:
  1809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;Total ram usage:        0 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:   12
  1822 ;; This function calls:
  1823 ;;		_Set_EW
  1824 ;;		_Set_EW_LT
  1825 ;;		_Set_NS
  1826 ;;		_Set_NS_LT
  1827 ;;		_Wait_N_Seconds
  1828 ;; This function is called by:
  1829 ;;		_main
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text2
  1834  001A7C                     __ptext2:
  1835                           	opt stack 0
  1836  001A7C                     _Night_Mode:
  1837                           	opt stack 18
  1838                           
  1839                           ;Lab9pC.c: 553: NS_PED_SW = 0;
  1840                           
  1841                           ;incstack = 0
  1842  001A7C  0E00               	movlw	0
  1843  001A7E  6E4F               	movwf	_NS_PED_SW,c
  1844                           
  1845                           ;Lab9pC.c: 554: EW_PED_SW = 0;
  1846  001A80  0E00               	movlw	0
  1847  001A82  6E4C               	movwf	_EW_PED_SW,c
  1848                           
  1849                           ;Lab9pC.c: 556: MODE = 0;
  1850  001A84  0E00               	movlw	0
  1851  001A86  6E46               	movwf	_MODE+1,c
  1852  001A88  0E00               	movlw	0
  1853  001A8A  6E45               	movwf	_MODE,c
  1854                           
  1855                           ;Lab9pC.c: 557: PORTBbits.RB7 = 0;
  1856  001A8C  9E81               	bcf	3969,7,c	;volatile
  1857                           
  1858                           ;Lab9pC.c: 558: Act_Mode_Txt[0] = 'N';
  1859  001A8E  0E4E               	movlw	78
  1860  001A90  6E62               	movwf	_Act_Mode_Txt,c
  1861                           
  1862                           ;Lab9pC.c: 560: Set_NS_LT(1);
  1863  001A92  0E01               	movlw	1
  1864  001A94  EC59  F011         	call	_Set_NS_LT
  1865                           
  1866                           ;Lab9pC.c: 561: Set_EW(1);
  1867  001A98  0E01               	movlw	1
  1868  001A9A  ECC5  F011         	call	_Set_EW
  1869                           
  1870                           ;Lab9pC.c: 562: Set_EW_LT(1);
  1871  001A9E  0E01               	movlw	1
  1872  001AA0  ECA1  F011         	call	_Set_EW_LT
  1873                           
  1874                           ;Lab9pC.c: 563: Set_NS(2);
  1875  001AA4  0E02               	movlw	2
  1876  001AA6  EC7D  F011         	call	_Set_NS
  1877                           
  1878                           ;Lab9pC.c: 564: Wait_N_Seconds(8);
  1879  001AAA  0E08               	movlw	8
  1880  001AAC  EC45  F012         	call	_Wait_N_Seconds
  1881                           
  1882                           ;Lab9pC.c: 565: Set_NS(3);
  1883  001AB0  0E03               	movlw	3
  1884  001AB2  EC7D  F011         	call	_Set_NS
  1885                           
  1886                           ;Lab9pC.c: 566: Wait_N_Seconds(3);
  1887  001AB6  0E03               	movlw	3
  1888  001AB8  EC45  F012         	call	_Wait_N_Seconds
  1889                           
  1890                           ;Lab9pC.c: 567: Set_NS(1);
  1891  001ABC  0E01               	movlw	1
  1892  001ABE  EC7D  F011         	call	_Set_NS
  1893                           
  1894                           ;Lab9pC.c: 568: if (PORTAbits.RA2 == 1)
  1895  001AC2  A480               	btfss	3968,2,c	;volatile
  1896  001AC4  D010               	goto	l5374
  1897                           
  1898                           ;Lab9pC.c: 569: {
  1899                           ;Lab9pC.c: 570: Set_EW_LT(2);
  1900  001AC6  0E02               	movlw	2
  1901  001AC8  ECA1  F011         	call	_Set_EW_LT
  1902                           
  1903                           ;Lab9pC.c: 571: Wait_N_Seconds(6);
  1904  001ACC  0E06               	movlw	6
  1905  001ACE  EC45  F012         	call	_Wait_N_Seconds
  1906                           
  1907                           ;Lab9pC.c: 572: Set_EW_LT(3);
  1908  001AD2  0E03               	movlw	3
  1909  001AD4  ECA1  F011         	call	_Set_EW_LT
  1910                           
  1911                           ;Lab9pC.c: 573: Wait_N_Seconds(3);
  1912  001AD8  0E03               	movlw	3
  1913  001ADA  EC45  F012         	call	_Wait_N_Seconds
  1914                           
  1915                           ;Lab9pC.c: 574: Set_EW_LT(1);
  1916  001ADE  0E01               	movlw	1
  1917  001AE0  ECA1  F011         	call	_Set_EW_LT
  1918  001AE4  D000               	goto	l5374
  1919  001AE6                     l5374:
  1920                           
  1921                           ;Lab9pC.c: 575: }
  1922                           ;Lab9pC.c: 576: Set_EW(2);
  1923  001AE6  0E02               	movlw	2
  1924  001AE8  ECC5  F011         	call	_Set_EW
  1925                           
  1926                           ;Lab9pC.c: 577: Wait_N_Seconds(8);
  1927  001AEC  0E08               	movlw	8
  1928  001AEE  EC45  F012         	call	_Wait_N_Seconds
  1929                           
  1930                           ;Lab9pC.c: 578: Set_EW(3);
  1931  001AF2  0E03               	movlw	3
  1932  001AF4  ECC5  F011         	call	_Set_EW
  1933                           
  1934                           ;Lab9pC.c: 579: Wait_N_Seconds(3);
  1935  001AF8  0E03               	movlw	3
  1936  001AFA  EC45  F012         	call	_Wait_N_Seconds
  1937                           
  1938                           ;Lab9pC.c: 580: Set_EW(1);
  1939  001AFE  0E01               	movlw	1
  1940  001B00  ECC5  F011         	call	_Set_EW
  1941                           
  1942                           ;Lab9pC.c: 581: if(PORTAbits.RA1 == 1)
  1943  001B04  A280               	btfss	3968,1,c	;volatile
  1944  001B06  D010               	goto	l493
  1945                           
  1946                           ;Lab9pC.c: 582: {
  1947                           ;Lab9pC.c: 583: Set_NS_LT(2);
  1948  001B08  0E02               	movlw	2
  1949  001B0A  EC59  F011         	call	_Set_NS_LT
  1950                           
  1951                           ;Lab9pC.c: 584: Wait_N_Seconds(6);
  1952  001B0E  0E06               	movlw	6
  1953  001B10  EC45  F012         	call	_Wait_N_Seconds
  1954                           
  1955                           ;Lab9pC.c: 585: Set_NS_LT(3);
  1956  001B14  0E03               	movlw	3
  1957  001B16  EC59  F011         	call	_Set_NS_LT
  1958                           
  1959                           ;Lab9pC.c: 586: Wait_N_Seconds(3);
  1960  001B1A  0E03               	movlw	3
  1961  001B1C  EC45  F012         	call	_Wait_N_Seconds
  1962                           
  1963                           ;Lab9pC.c: 587: Set_NS_LT(1);
  1964  001B20  0E01               	movlw	1
  1965  001B22  EC59  F011         	call	_Set_NS_LT
  1966  001B26  D000               	goto	l493
  1967  001B28                     l493:
  1968  001B28  0012               	return		;funcret
  1969  001B2A                     __end_of_Night_Mode:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           intcon2	equ	0xFF1
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1l	equ	0xFE1
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _Initialize_Screen *****************
  1983 ;; Defined at:
  1984 ;;		line 162 in file "Lab9pC.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;		None               void
  1991 ;; Registers used:
  1992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    9
  2005 ;; This function calls:
  2006 ;;		_LCD_Reset
  2007 ;;		_TFT_GreenTab_Initialize
  2008 ;;		_drawCircle
  2009 ;;		_drawRect
  2010 ;;		_drawtext
  2011 ;;		_fillCircle
  2012 ;;		_fillScreen
  2013 ;;		_strcpy
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text3
  2020  00001C                     __ptext3:
  2021                           	opt stack 0
  2022  00001C                     _Initialize_Screen:
  2023                           	opt stack 21
  2024                           
  2025                           ;Lab9pC.c: 164: LCD_Reset();
  2026                           
  2027                           ;incstack = 0
  2028  00001C  EC3C  F013         	call	_LCD_Reset	;wreg free
  2029                           
  2030                           ;Lab9pC.c: 165: TFT_GreenTab_Initialize();
  2031  000020  EC91  F012         	call	_TFT_GreenTab_Initialize	;wreg free
  2032                           
  2033                           ;Lab9pC.c: 166: fillScreen(0x0000);
  2034  000024  0E00               	movlw	0
  2035  000026  6E23               	movwf	fillScreen@color+1,c
  2036  000028  0E00               	movlw	0
  2037  00002A  6E22               	movwf	fillScreen@color,c
  2038  00002C  ECE0  F012         	call	_fillScreen	;wreg free
  2039                           
  2040                           ;Lab9pC.c: 169: txt = buffer;
  2041  000030  0E80               	movlw	low _buffer
  2042  000032  6E49               	movwf	_txt,c
  2043  000034  0E00               	movlw	high _buffer
  2044  000036  6E4A               	movwf	_txt+1,c
  2045                           
  2046                           ;Lab9pC.c: 170: strcpy(txt, "ECE3301L SPRING 22-S1");
  2047  000038  C049  F00F         	movff	_txt,strcpy@to
  2048  00003C  C04A  F010         	movff	_txt+1,strcpy@to+1
  2049  000040  0E96               	movlw	low STR_1
  2050  000042  6E11               	movwf	strcpy@from,c
  2051  000044  0EFF               	movlw	high STR_1
  2052  000046  6E12               	movwf	strcpy@from+1,c
  2053  000048  EC60  F012         	call	_strcpy	;wreg free
  2054                           
  2055                           ;Lab9pC.c: 171: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2056  00004C  0E02               	movlw	2
  2057  00004E  6E37               	movwf	drawtext@y,c
  2058  000050  C049  F038         	movff	_txt,drawtext@_text
  2059  000054  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2060  000058  0EFF               	movlw	255
  2061  00005A  6E3B               	movwf	drawtext@color+1,c
  2062  00005C  683A               	setf	drawtext@color,c
  2063  00005E  0E00               	movlw	0
  2064  000060  6E3D               	movwf	drawtext@bg+1,c
  2065  000062  0E00               	movlw	0
  2066  000064  6E3C               	movwf	drawtext@bg,c
  2067  000066  0E01               	movlw	1
  2068  000068  6E3E               	movwf	drawtext@size,c
  2069  00006A  0E02               	movlw	2
  2070  00006C  ECD2  F009         	call	_drawtext
  2071                           
  2072                           ;Lab9pC.c: 174: strcpy(txt, "Mode:");
  2073  000070  C049  F00F         	movff	_txt,strcpy@to
  2074  000074  C04A  F010         	movff	_txt+1,strcpy@to+1
  2075  000078  0EE5               	movlw	low STR_2
  2076  00007A  6E11               	movwf	strcpy@from,c
  2077  00007C  0EFF               	movlw	high STR_2
  2078  00007E  6E12               	movwf	strcpy@from+1,c
  2079  000080  EC60  F012         	call	_strcpy	;wreg free
  2080                           
  2081                           ;Lab9pC.c: 175: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2082  000084  0E0A               	movlw	10
  2083  000086  6E37               	movwf	drawtext@y,c
  2084  000088  C049  F038         	movff	_txt,drawtext@_text
  2085  00008C  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2086  000090  0EFF               	movlw	255
  2087  000092  6E3B               	movwf	drawtext@color+1,c
  2088  000094  683A               	setf	drawtext@color,c
  2089  000096  0E00               	movlw	0
  2090  000098  6E3D               	movwf	drawtext@bg+1,c
  2091  00009A  0E00               	movlw	0
  2092  00009C  6E3C               	movwf	drawtext@bg,c
  2093  00009E  0E01               	movlw	1
  2094  0000A0  6E3E               	movwf	drawtext@size,c
  2095  0000A2  0E02               	movlw	2
  2096  0000A4  ECD2  F009         	call	_drawtext
  2097                           
  2098                           ;Lab9pC.c: 176: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2099  0000A8  0E0A               	movlw	10
  2100  0000AA  6E37               	movwf	drawtext@y,c
  2101  0000AC  0E62               	movlw	low _Act_Mode_Txt
  2102  0000AE  6E38               	movwf	drawtext@_text,c
  2103  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2104  0000B2  6E39               	movwf	drawtext@_text+1,c
  2105  0000B4  0EFF               	movlw	255
  2106  0000B6  6E3B               	movwf	drawtext@color+1,c
  2107  0000B8  683A               	setf	drawtext@color,c
  2108  0000BA  0E00               	movlw	0
  2109  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2110  0000BE  0E00               	movlw	0
  2111  0000C0  6E3C               	movwf	drawtext@bg,c
  2112  0000C2  0E01               	movlw	1
  2113  0000C4  6E3E               	movwf	drawtext@size,c
  2114  0000C6  0E23               	movlw	35
  2115  0000C8  ECD2  F009         	call	_drawtext
  2116                           
  2117                           ;Lab9pC.c: 179: strcpy(txt, "FR:");
  2118  0000CC  C049  F00F         	movff	_txt,strcpy@to
  2119  0000D0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2120  0000D4  0EEB               	movlw	low STR_3
  2121  0000D6  6E11               	movwf	strcpy@from,c
  2122  0000D8  0EFF               	movlw	high STR_3
  2123  0000DA  6E12               	movwf	strcpy@from+1,c
  2124  0000DC  EC60  F012         	call	_strcpy	;wreg free
  2125                           
  2126                           ;Lab9pC.c: 180: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2127  0000E0  0E0A               	movlw	10
  2128  0000E2  6E37               	movwf	drawtext@y,c
  2129  0000E4  C049  F038         	movff	_txt,drawtext@_text
  2130  0000E8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2131  0000EC  0EFF               	movlw	255
  2132  0000EE  6E3B               	movwf	drawtext@color+1,c
  2133  0000F0  683A               	setf	drawtext@color,c
  2134  0000F2  0E00               	movlw	0
  2135  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2136  0000F6  0E00               	movlw	0
  2137  0000F8  6E3C               	movwf	drawtext@bg,c
  2138  0000FA  0E01               	movlw	1
  2139  0000FC  6E3E               	movwf	drawtext@size,c
  2140  0000FE  0E32               	movlw	50
  2141  000100  ECD2  F009         	call	_drawtext
  2142                           
  2143                           ;Lab9pC.c: 181: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2144  000104  0E0A               	movlw	10
  2145  000106  6E37               	movwf	drawtext@y,c
  2146  000108  0E64               	movlw	low _FlashingR_Txt
  2147  00010A  6E38               	movwf	drawtext@_text,c
  2148  00010C  0E00               	movlw	high _FlashingR_Txt
  2149  00010E  6E39               	movwf	drawtext@_text+1,c
  2150  000110  0EFF               	movlw	255
  2151  000112  6E3B               	movwf	drawtext@color+1,c
  2152  000114  683A               	setf	drawtext@color,c
  2153  000116  0E00               	movlw	0
  2154  000118  6E3D               	movwf	drawtext@bg+1,c
  2155  00011A  0E00               	movlw	0
  2156  00011C  6E3C               	movwf	drawtext@bg,c
  2157  00011E  0E01               	movlw	1
  2158  000120  6E3E               	movwf	drawtext@size,c
  2159  000122  0E46               	movlw	70
  2160  000124  ECD2  F009         	call	_drawtext
  2161                           
  2162                           ;Lab9pC.c: 184: strcpy(txt, "FS:");
  2163  000128  C049  F00F         	movff	_txt,strcpy@to
  2164  00012C  C04A  F010         	movff	_txt+1,strcpy@to+1
  2165  000130  0EEF               	movlw	low STR_4
  2166  000132  6E11               	movwf	strcpy@from,c
  2167  000134  0EFF               	movlw	high STR_4
  2168  000136  6E12               	movwf	strcpy@from+1,c
  2169  000138  EC60  F012         	call	_strcpy	;wreg free
  2170                           
  2171                           ;Lab9pC.c: 185: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2172  00013C  0E0A               	movlw	10
  2173  00013E  6E37               	movwf	drawtext@y,c
  2174  000140  C049  F038         	movff	_txt,drawtext@_text
  2175  000144  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2176  000148  0EFF               	movlw	255
  2177  00014A  6E3B               	movwf	drawtext@color+1,c
  2178  00014C  683A               	setf	drawtext@color,c
  2179  00014E  0E00               	movlw	0
  2180  000150  6E3D               	movwf	drawtext@bg+1,c
  2181  000152  0E00               	movlw	0
  2182  000154  6E3C               	movwf	drawtext@bg,c
  2183  000156  0E01               	movlw	1
  2184  000158  6E3E               	movwf	drawtext@size,c
  2185  00015A  0E50               	movlw	80
  2186  00015C  ECD2  F009         	call	_drawtext
  2187                           
  2188                           ;Lab9pC.c: 186: drawtext(100, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2189  000160  0E0A               	movlw	10
  2190  000162  6E37               	movwf	drawtext@y,c
  2191  000164  0E64               	movlw	low _FlashingR_Txt
  2192  000166  6E38               	movwf	drawtext@_text,c
  2193  000168  0E00               	movlw	high _FlashingR_Txt
  2194  00016A  6E39               	movwf	drawtext@_text+1,c
  2195  00016C  0EFF               	movlw	255
  2196  00016E  6E3B               	movwf	drawtext@color+1,c
  2197  000170  683A               	setf	drawtext@color,c
  2198  000172  0E00               	movlw	0
  2199  000174  6E3D               	movwf	drawtext@bg+1,c
  2200  000176  0E00               	movlw	0
  2201  000178  6E3C               	movwf	drawtext@bg,c
  2202  00017A  0E01               	movlw	1
  2203  00017C  6E3E               	movwf	drawtext@size,c
  2204  00017E  0E64               	movlw	100
  2205  000180  ECD2  F009         	call	_drawtext
  2206                           
  2207                           ;Lab9pC.c: 189: strcpy(txt, "*");
  2208  000184  C049  F00F         	movff	_txt,strcpy@to
  2209  000188  C04A  F010         	movff	_txt+1,strcpy@to+1
  2210  00018C  0EFD               	movlw	low STR_5
  2211  00018E  6E11               	movwf	strcpy@from,c
  2212  000190  0EFF               	movlw	high STR_5
  2213  000192  6E12               	movwf	strcpy@from+1,c
  2214  000194  EC60  F012         	call	_strcpy	;wreg free
  2215                           
  2216                           ;Lab9pC.c: 190: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2217  000198  0E0A               	movlw	10
  2218  00019A  6E37               	movwf	drawtext@y,c
  2219  00019C  C049  F038         	movff	_txt,drawtext@_text
  2220  0001A0  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2221  0001A4  0EFF               	movlw	255
  2222  0001A6  6E3B               	movwf	drawtext@color+1,c
  2223  0001A8  683A               	setf	drawtext@color,c
  2224  0001AA  0E00               	movlw	0
  2225  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2226  0001AE  0E00               	movlw	0
  2227  0001B0  6E3C               	movwf	drawtext@bg,c
  2228  0001B2  0E01               	movlw	1
  2229  0001B4  6E3E               	movwf	drawtext@size,c
  2230  0001B6  0E78               	movlw	120
  2231  0001B8  ECD2  F009         	call	_drawtext
  2232                           
  2233                           ;Lab9pC.c: 193: strcpy(txt, "NORTH/SOUTH");
  2234  0001BC  C049  F00F         	movff	_txt,strcpy@to
  2235  0001C0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2236  0001C4  0EC1               	movlw	low STR_6
  2237  0001C6  6E11               	movwf	strcpy@from,c
  2238  0001C8  0EFF               	movlw	high STR_6
  2239  0001CA  6E12               	movwf	strcpy@from+1,c
  2240  0001CC  EC60  F012         	call	_strcpy	;wreg free
  2241                           
  2242                           ;Lab9pC.c: 194: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  2243  0001D0  0E14               	movlw	20
  2244  0001D2  6E37               	movwf	drawtext@y,c
  2245  0001D4  C049  F038         	movff	_txt,drawtext@_text
  2246  0001D8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2247  0001DC  0E00               	movlw	0
  2248  0001DE  6E3B               	movwf	drawtext@color+1,c
  2249  0001E0  0E1F               	movlw	31
  2250  0001E2  6E3A               	movwf	drawtext@color,c
  2251  0001E4  0E00               	movlw	0
  2252  0001E6  6E3D               	movwf	drawtext@bg+1,c
  2253  0001E8  0E00               	movlw	0
  2254  0001EA  6E3C               	movwf	drawtext@bg,c
  2255  0001EC  0E01               	movlw	1
  2256  0001EE  6E3E               	movwf	drawtext@size,c
  2257  0001F0  0E1E               	movlw	30
  2258  0001F2  ECD2  F009         	call	_drawtext
  2259                           
  2260                           ;Lab9pC.c: 195: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  2261  0001F6  0E00               	movlw	0
  2262  0001F8  6E22               	movwf	drawRect@x+1,c
  2263  0001FA  0E1E               	movlw	30
  2264  0001FC  6E21               	movwf	drawRect@x,c
  2265  0001FE  0E00               	movlw	0
  2266  000200  6E24               	movwf	drawRect@y+1,c
  2267  000202  0E1B               	movlw	27
  2268  000204  6E23               	movwf	drawRect@y,c
  2269  000206  0E00               	movlw	0
  2270  000208  6E26               	movwf	drawRect@w+1,c
  2271  00020A  0E3C               	movlw	60
  2272  00020C  6E25               	movwf	drawRect@w,c
  2273  00020E  0E00               	movlw	0
  2274  000210  6E28               	movwf	drawRect@h+1,c
  2275  000212  0E12               	movlw	18
  2276  000214  6E27               	movwf	drawRect@h,c
  2277  000216  0E00               	movlw	0
  2278  000218  6E2A               	movwf	drawRect@color+1,c
  2279  00021A  0E1F               	movlw	31
  2280  00021C  6E29               	movwf	drawRect@color,c
  2281  00021E  ECF5  F00F         	call	_drawRect	;wreg free
  2282                           
  2283                           ;Lab9pC.c: 196: drawCircle(40, 20 + 15 , 7, 0xF800);
  2284  000222  0E00               	movlw	0
  2285  000224  6E1B               	movwf	drawCircle@x0+1,c
  2286  000226  0E28               	movlw	40
  2287  000228  6E1A               	movwf	drawCircle@x0,c
  2288  00022A  0E00               	movlw	0
  2289  00022C  6E1D               	movwf	drawCircle@y0+1,c
  2290  00022E  0E23               	movlw	35
  2291  000230  6E1C               	movwf	drawCircle@y0,c
  2292  000232  0E00               	movlw	0
  2293  000234  6E1F               	movwf	drawCircle@r+1,c
  2294  000236  0E07               	movlw	7
  2295  000238  6E1E               	movwf	drawCircle@r,c
  2296  00023A  0EF8               	movlw	248
  2297  00023C  6E21               	movwf	drawCircle@color+1,c
  2298  00023E  0E00               	movlw	0
  2299  000240  6E20               	movwf	drawCircle@color,c
  2300  000242  EC67  F006         	call	_drawCircle	;wreg free
  2301                           
  2302                           ;Lab9pC.c: 197: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  2303  000246  0E00               	movlw	0
  2304  000248  6E1B               	movwf	drawCircle@x0+1,c
  2305  00024A  0E3C               	movlw	60
  2306  00024C  6E1A               	movwf	drawCircle@x0,c
  2307  00024E  0E00               	movlw	0
  2308  000250  6E1D               	movwf	drawCircle@y0+1,c
  2309  000252  0E23               	movlw	35
  2310  000254  6E1C               	movwf	drawCircle@y0,c
  2311  000256  0E00               	movlw	0
  2312  000258  6E1F               	movwf	drawCircle@r+1,c
  2313  00025A  0E07               	movlw	7
  2314  00025C  6E1E               	movwf	drawCircle@r,c
  2315  00025E  0EFF               	movlw	255
  2316  000260  6E21               	movwf	drawCircle@color+1,c
  2317  000262  0EE0               	movlw	224
  2318  000264  6E20               	movwf	drawCircle@color,c
  2319  000266  EC67  F006         	call	_drawCircle	;wreg free
  2320                           
  2321                           ;Lab9pC.c: 198: fillCircle(80, 20 + 15 , 7, 0x07E0);
  2322  00026A  0E00               	movlw	0
  2323  00026C  6E3A               	movwf	fillCircle@x0+1,c
  2324  00026E  0E50               	movlw	80
  2325  000270  6E39               	movwf	fillCircle@x0,c
  2326  000272  0E00               	movlw	0
  2327  000274  6E3C               	movwf	fillCircle@y0+1,c
  2328  000276  0E23               	movlw	35
  2329  000278  6E3B               	movwf	fillCircle@y0,c
  2330  00027A  0E00               	movlw	0
  2331  00027C  6E3E               	movwf	fillCircle@r+1,c
  2332  00027E  0E07               	movlw	7
  2333  000280  6E3D               	movwf	fillCircle@r,c
  2334  000282  0E07               	movlw	7
  2335  000284  6E40               	movwf	fillCircle@color+1,c
  2336  000286  0EE0               	movlw	224
  2337  000288  6E3F               	movwf	fillCircle@color,c
  2338  00028A  ECE4  F010         	call	_fillCircle	;wreg free
  2339                           
  2340                           ;Lab9pC.c: 199: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  2341  00028E  0E1E               	movlw	30
  2342  000290  6E37               	movwf	drawtext@y,c
  2343  000292  0E5F               	movlw	low _NS_Count
  2344  000294  6E38               	movwf	drawtext@_text,c
  2345  000296  0E00               	movlw	high _NS_Count
  2346  000298  6E39               	movwf	drawtext@_text+1,c
  2347  00029A  0E00               	movlw	0
  2348  00029C  6E3B               	movwf	drawtext@color+1,c
  2349  00029E  0E1F               	movlw	31
  2350  0002A0  6E3A               	movwf	drawtext@color,c
  2351  0002A2  0E00               	movlw	0
  2352  0002A4  6E3D               	movwf	drawtext@bg+1,c
  2353  0002A6  0E00               	movlw	0
  2354  0002A8  6E3C               	movwf	drawtext@bg,c
  2355  0002AA  0E02               	movlw	2
  2356  0002AC  6E3E               	movwf	drawtext@size,c
  2357  0002AE  0E64               	movlw	100
  2358  0002B0  ECD2  F009         	call	_drawtext
  2359                           
  2360                           ;Lab9pC.c: 202: strcpy(txt, "N/S LT");
  2361  0002B4  C049  F00F         	movff	_txt,strcpy@to
  2362  0002B8  C04A  F010         	movff	_txt+1,strcpy@to+1
  2363  0002BC  0ED7               	movlw	low STR_7
  2364  0002BE  6E11               	movwf	strcpy@from,c
  2365  0002C0  0EFF               	movlw	high STR_7
  2366  0002C2  6E12               	movwf	strcpy@from+1,c
  2367  0002C4  EC60  F012         	call	_strcpy	;wreg free
  2368                           
  2369                           ;Lab9pC.c: 203: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  2370  0002C8  0E32               	movlw	50
  2371  0002CA  6E37               	movwf	drawtext@y,c
  2372  0002CC  C049  F038         	movff	_txt,drawtext@_text
  2373  0002D0  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2374  0002D4  0EF8               	movlw	248
  2375  0002D6  6E3B               	movwf	drawtext@color+1,c
  2376  0002D8  0E1F               	movlw	31
  2377  0002DA  6E3A               	movwf	drawtext@color,c
  2378  0002DC  0E00               	movlw	0
  2379  0002DE  6E3D               	movwf	drawtext@bg+1,c
  2380  0002E0  0E00               	movlw	0
  2381  0002E2  6E3C               	movwf	drawtext@bg,c
  2382  0002E4  0E01               	movlw	1
  2383  0002E6  6E3E               	movwf	drawtext@size,c
  2384  0002E8  0E1E               	movlw	30
  2385  0002EA  ECD2  F009         	call	_drawtext
  2386                           
  2387                           ;Lab9pC.c: 204: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  2388  0002EE  0E00               	movlw	0
  2389  0002F0  6E22               	movwf	drawRect@x+1,c
  2390  0002F2  0E1E               	movlw	30
  2391  0002F4  6E21               	movwf	drawRect@x,c
  2392  0002F6  0E00               	movlw	0
  2393  0002F8  6E24               	movwf	drawRect@y+1,c
  2394  0002FA  0E39               	movlw	57
  2395  0002FC  6E23               	movwf	drawRect@y,c
  2396  0002FE  0E00               	movlw	0
  2397  000300  6E26               	movwf	drawRect@w+1,c
  2398  000302  0E3C               	movlw	60
  2399  000304  6E25               	movwf	drawRect@w,c
  2400  000306  0E00               	movlw	0
  2401  000308  6E28               	movwf	drawRect@h+1,c
  2402  00030A  0E12               	movlw	18
  2403  00030C  6E27               	movwf	drawRect@h,c
  2404  00030E  0EF8               	movlw	248
  2405  000310  6E2A               	movwf	drawRect@color+1,c
  2406  000312  0E1F               	movlw	31
  2407  000314  6E29               	movwf	drawRect@color,c
  2408  000316  ECF5  F00F         	call	_drawRect	;wreg free
  2409                           
  2410                           ;Lab9pC.c: 205: fillCircle(40, 50 + 15, 7, 0xF800);
  2411  00031A  0E00               	movlw	0
  2412  00031C  6E3A               	movwf	fillCircle@x0+1,c
  2413  00031E  0E28               	movlw	40
  2414  000320  6E39               	movwf	fillCircle@x0,c
  2415  000322  0E00               	movlw	0
  2416  000324  6E3C               	movwf	fillCircle@y0+1,c
  2417  000326  0E41               	movlw	65
  2418  000328  6E3B               	movwf	fillCircle@y0,c
  2419  00032A  0E00               	movlw	0
  2420  00032C  6E3E               	movwf	fillCircle@r+1,c
  2421  00032E  0E07               	movlw	7
  2422  000330  6E3D               	movwf	fillCircle@r,c
  2423  000332  0EF8               	movlw	248
  2424  000334  6E40               	movwf	fillCircle@color+1,c
  2425  000336  0E00               	movlw	0
  2426  000338  6E3F               	movwf	fillCircle@color,c
  2427  00033A  ECE4  F010         	call	_fillCircle	;wreg free
  2428                           
  2429                           ;Lab9pC.c: 206: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2430  00033E  0E00               	movlw	0
  2431  000340  6E1B               	movwf	drawCircle@x0+1,c
  2432  000342  0E3C               	movlw	60
  2433  000344  6E1A               	movwf	drawCircle@x0,c
  2434  000346  0E00               	movlw	0
  2435  000348  6E1D               	movwf	drawCircle@y0+1,c
  2436  00034A  0E41               	movlw	65
  2437  00034C  6E1C               	movwf	drawCircle@y0,c
  2438  00034E  0E00               	movlw	0
  2439  000350  6E1F               	movwf	drawCircle@r+1,c
  2440  000352  0E07               	movlw	7
  2441  000354  6E1E               	movwf	drawCircle@r,c
  2442  000356  0EFF               	movlw	255
  2443  000358  6E21               	movwf	drawCircle@color+1,c
  2444  00035A  0EE0               	movlw	224
  2445  00035C  6E20               	movwf	drawCircle@color,c
  2446  00035E  EC67  F006         	call	_drawCircle	;wreg free
  2447                           
  2448                           ;Lab9pC.c: 207: drawCircle(80, 50 + 15, 7, 0x07E0);
  2449  000362  0E00               	movlw	0
  2450  000364  6E1B               	movwf	drawCircle@x0+1,c
  2451  000366  0E50               	movlw	80
  2452  000368  6E1A               	movwf	drawCircle@x0,c
  2453  00036A  0E00               	movlw	0
  2454  00036C  6E1D               	movwf	drawCircle@y0+1,c
  2455  00036E  0E41               	movlw	65
  2456  000370  6E1C               	movwf	drawCircle@y0,c
  2457  000372  0E00               	movlw	0
  2458  000374  6E1F               	movwf	drawCircle@r+1,c
  2459  000376  0E07               	movlw	7
  2460  000378  6E1E               	movwf	drawCircle@r,c
  2461  00037A  0E07               	movlw	7
  2462  00037C  6E21               	movwf	drawCircle@color+1,c
  2463  00037E  0EE0               	movlw	224
  2464  000380  6E20               	movwf	drawCircle@color,c
  2465  000382  EC67  F006         	call	_drawCircle	;wreg free
  2466                           
  2467                           ;Lab9pC.c: 208: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2468  000386  0E3C               	movlw	60
  2469  000388  6E37               	movwf	drawtext@y,c
  2470  00038A  0E5C               	movlw	low _NSLT_Count
  2471  00038C  6E38               	movwf	drawtext@_text,c
  2472  00038E  0E00               	movlw	high _NSLT_Count
  2473  000390  6E39               	movwf	drawtext@_text+1,c
  2474  000392  0EF8               	movlw	248
  2475  000394  6E3B               	movwf	drawtext@color+1,c
  2476  000396  0E1F               	movlw	31
  2477  000398  6E3A               	movwf	drawtext@color,c
  2478  00039A  0E00               	movlw	0
  2479  00039C  6E3D               	movwf	drawtext@bg+1,c
  2480  00039E  0E00               	movlw	0
  2481  0003A0  6E3C               	movwf	drawtext@bg,c
  2482  0003A2  0E02               	movlw	2
  2483  0003A4  6E3E               	movwf	drawtext@size,c
  2484  0003A6  0E64               	movlw	100
  2485  0003A8  ECD2  F009         	call	_drawtext
  2486                           
  2487                           ;Lab9pC.c: 211: strcpy(txt, "EAST/WEST");
  2488  0003AC  C049  F00F         	movff	_txt,strcpy@to
  2489  0003B0  C04A  F010         	movff	_txt+1,strcpy@to+1
  2490  0003B4  0ECD               	movlw	low STR_8
  2491  0003B6  6E11               	movwf	strcpy@from,c
  2492  0003B8  0EFF               	movlw	high STR_8
  2493  0003BA  6E12               	movwf	strcpy@from+1,c
  2494  0003BC  EC60  F012         	call	_strcpy	;wreg free
  2495                           
  2496                           ;Lab9pC.c: 212: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  2497  0003C0  0E50               	movlw	80
  2498  0003C2  6E37               	movwf	drawtext@y,c
  2499  0003C4  C049  F038         	movff	_txt,drawtext@_text
  2500  0003C8  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2501  0003CC  0E07               	movlw	7
  2502  0003CE  6E3B               	movwf	drawtext@color+1,c
  2503  0003D0  683A               	setf	drawtext@color,c
  2504  0003D2  0E00               	movlw	0
  2505  0003D4  6E3D               	movwf	drawtext@bg+1,c
  2506  0003D6  0E00               	movlw	0
  2507  0003D8  6E3C               	movwf	drawtext@bg,c
  2508  0003DA  0E01               	movlw	1
  2509  0003DC  6E3E               	movwf	drawtext@size,c
  2510  0003DE  0E1E               	movlw	30
  2511  0003E0  ECD2  F009         	call	_drawtext
  2512                           
  2513                           ;Lab9pC.c: 213: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  2514  0003E4  0E00               	movlw	0
  2515  0003E6  6E22               	movwf	drawRect@x+1,c
  2516  0003E8  0E1E               	movlw	30
  2517  0003EA  6E21               	movwf	drawRect@x,c
  2518  0003EC  0E00               	movlw	0
  2519  0003EE  6E24               	movwf	drawRect@y+1,c
  2520  0003F0  0E57               	movlw	87
  2521  0003F2  6E23               	movwf	drawRect@y,c
  2522  0003F4  0E00               	movlw	0
  2523  0003F6  6E26               	movwf	drawRect@w+1,c
  2524  0003F8  0E3C               	movlw	60
  2525  0003FA  6E25               	movwf	drawRect@w,c
  2526  0003FC  0E00               	movlw	0
  2527  0003FE  6E28               	movwf	drawRect@h+1,c
  2528  000400  0E12               	movlw	18
  2529  000402  6E27               	movwf	drawRect@h,c
  2530  000404  0E07               	movlw	7
  2531  000406  6E2A               	movwf	drawRect@color+1,c
  2532  000408  6829               	setf	drawRect@color,c
  2533  00040A  ECF5  F00F         	call	_drawRect	;wreg free
  2534                           
  2535                           ;Lab9pC.c: 214: fillCircle(40, 80 + 15, 7, 0xF800);
  2536  00040E  0E00               	movlw	0
  2537  000410  6E3A               	movwf	fillCircle@x0+1,c
  2538  000412  0E28               	movlw	40
  2539  000414  6E39               	movwf	fillCircle@x0,c
  2540  000416  0E00               	movlw	0
  2541  000418  6E3C               	movwf	fillCircle@y0+1,c
  2542  00041A  0E5F               	movlw	95
  2543  00041C  6E3B               	movwf	fillCircle@y0,c
  2544  00041E  0E00               	movlw	0
  2545  000420  6E3E               	movwf	fillCircle@r+1,c
  2546  000422  0E07               	movlw	7
  2547  000424  6E3D               	movwf	fillCircle@r,c
  2548  000426  0EF8               	movlw	248
  2549  000428  6E40               	movwf	fillCircle@color+1,c
  2550  00042A  0E00               	movlw	0
  2551  00042C  6E3F               	movwf	fillCircle@color,c
  2552  00042E  ECE4  F010         	call	_fillCircle	;wreg free
  2553                           
  2554                           ;Lab9pC.c: 215: drawCircle(60, 80 + 15, 7, 0xFFE0);
  2555  000432  0E00               	movlw	0
  2556  000434  6E1B               	movwf	drawCircle@x0+1,c
  2557  000436  0E3C               	movlw	60
  2558  000438  6E1A               	movwf	drawCircle@x0,c
  2559  00043A  0E00               	movlw	0
  2560  00043C  6E1D               	movwf	drawCircle@y0+1,c
  2561  00043E  0E5F               	movlw	95
  2562  000440  6E1C               	movwf	drawCircle@y0,c
  2563  000442  0E00               	movlw	0
  2564  000444  6E1F               	movwf	drawCircle@r+1,c
  2565  000446  0E07               	movlw	7
  2566  000448  6E1E               	movwf	drawCircle@r,c
  2567  00044A  0EFF               	movlw	255
  2568  00044C  6E21               	movwf	drawCircle@color+1,c
  2569  00044E  0EE0               	movlw	224
  2570  000450  6E20               	movwf	drawCircle@color,c
  2571  000452  EC67  F006         	call	_drawCircle	;wreg free
  2572                           
  2573                           ;Lab9pC.c: 216: drawCircle(80, 80 + 15, 7, 0x07E0);
  2574  000456  0E00               	movlw	0
  2575  000458  6E1B               	movwf	drawCircle@x0+1,c
  2576  00045A  0E50               	movlw	80
  2577  00045C  6E1A               	movwf	drawCircle@x0,c
  2578  00045E  0E00               	movlw	0
  2579  000460  6E1D               	movwf	drawCircle@y0+1,c
  2580  000462  0E5F               	movlw	95
  2581  000464  6E1C               	movwf	drawCircle@y0,c
  2582  000466  0E00               	movlw	0
  2583  000468  6E1F               	movwf	drawCircle@r+1,c
  2584  00046A  0E07               	movlw	7
  2585  00046C  6E1E               	movwf	drawCircle@r,c
  2586  00046E  0E07               	movlw	7
  2587  000470  6E21               	movwf	drawCircle@color+1,c
  2588  000472  0EE0               	movlw	224
  2589  000474  6E20               	movwf	drawCircle@color,c
  2590  000476  EC67  F006         	call	_drawCircle	;wreg free
  2591                           
  2592                           ;Lab9pC.c: 217: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2593  00047A  0E5A               	movlw	90
  2594  00047C  6E37               	movwf	drawtext@y,c
  2595  00047E  0EB1               	movlw	low _EW_Count
  2596  000480  6E38               	movwf	drawtext@_text,c
  2597  000482  0E00               	movlw	high _EW_Count
  2598  000484  6E39               	movwf	drawtext@_text+1,c
  2599  000486  0E07               	movlw	7
  2600  000488  6E3B               	movwf	drawtext@color+1,c
  2601  00048A  683A               	setf	drawtext@color,c
  2602  00048C  0E00               	movlw	0
  2603  00048E  6E3D               	movwf	drawtext@bg+1,c
  2604  000490  0E00               	movlw	0
  2605  000492  6E3C               	movwf	drawtext@bg,c
  2606  000494  0E02               	movlw	2
  2607  000496  6E3E               	movwf	drawtext@size,c
  2608  000498  0E64               	movlw	100
  2609  00049A  ECD2  F009         	call	_drawtext
  2610                           
  2611                           ;Lab9pC.c: 220: strcpy(txt, "E/W LT");
  2612  00049E  C049  F00F         	movff	_txt,strcpy@to
  2613  0004A2  C04A  F010         	movff	_txt+1,strcpy@to+1
  2614  0004A6  0EDE               	movlw	low STR_9
  2615  0004A8  6E11               	movwf	strcpy@from,c
  2616  0004AA  0EFF               	movlw	high STR_9
  2617  0004AC  6E12               	movwf	strcpy@from+1,c
  2618  0004AE  EC60  F012         	call	_strcpy	;wreg free
  2619                           
  2620                           ;Lab9pC.c: 221: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  2621  0004B2  0E6E               	movlw	110
  2622  0004B4  6E37               	movwf	drawtext@y,c
  2623  0004B6  C049  F038         	movff	_txt,drawtext@_text
  2624  0004BA  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2625  0004BE  0EFF               	movlw	255
  2626  0004C0  6E3B               	movwf	drawtext@color+1,c
  2627  0004C2  683A               	setf	drawtext@color,c
  2628  0004C4  0E00               	movlw	0
  2629  0004C6  6E3D               	movwf	drawtext@bg+1,c
  2630  0004C8  0E00               	movlw	0
  2631  0004CA  6E3C               	movwf	drawtext@bg,c
  2632  0004CC  0E01               	movlw	1
  2633  0004CE  6E3E               	movwf	drawtext@size,c
  2634  0004D0  0E1E               	movlw	30
  2635  0004D2  ECD2  F009         	call	_drawtext
  2636                           
  2637                           ;Lab9pC.c: 222: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  2638  0004D6  0E00               	movlw	0
  2639  0004D8  6E22               	movwf	drawRect@x+1,c
  2640  0004DA  0E1E               	movlw	30
  2641  0004DC  6E21               	movwf	drawRect@x,c
  2642  0004DE  0E00               	movlw	0
  2643  0004E0  6E24               	movwf	drawRect@y+1,c
  2644  0004E2  0E75               	movlw	117
  2645  0004E4  6E23               	movwf	drawRect@y,c
  2646  0004E6  0E00               	movlw	0
  2647  0004E8  6E26               	movwf	drawRect@w+1,c
  2648  0004EA  0E3C               	movlw	60
  2649  0004EC  6E25               	movwf	drawRect@w,c
  2650  0004EE  0E00               	movlw	0
  2651  0004F0  6E28               	movwf	drawRect@h+1,c
  2652  0004F2  0E12               	movlw	18
  2653  0004F4  6E27               	movwf	drawRect@h,c
  2654  0004F6  0EFF               	movlw	255
  2655  0004F8  6E2A               	movwf	drawRect@color+1,c
  2656  0004FA  6829               	setf	drawRect@color,c
  2657  0004FC  ECF5  F00F         	call	_drawRect	;wreg free
  2658                           
  2659                           ;Lab9pC.c: 223: fillCircle(40, 110 + 15, 7, 0xF800);
  2660  000500  0E00               	movlw	0
  2661  000502  6E3A               	movwf	fillCircle@x0+1,c
  2662  000504  0E28               	movlw	40
  2663  000506  6E39               	movwf	fillCircle@x0,c
  2664  000508  0E00               	movlw	0
  2665  00050A  6E3C               	movwf	fillCircle@y0+1,c
  2666  00050C  0E7D               	movlw	125
  2667  00050E  6E3B               	movwf	fillCircle@y0,c
  2668  000510  0E00               	movlw	0
  2669  000512  6E3E               	movwf	fillCircle@r+1,c
  2670  000514  0E07               	movlw	7
  2671  000516  6E3D               	movwf	fillCircle@r,c
  2672  000518  0EF8               	movlw	248
  2673  00051A  6E40               	movwf	fillCircle@color+1,c
  2674  00051C  0E00               	movlw	0
  2675  00051E  6E3F               	movwf	fillCircle@color,c
  2676  000520  ECE4  F010         	call	_fillCircle	;wreg free
  2677                           
  2678                           ;Lab9pC.c: 224: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2679  000524  0E00               	movlw	0
  2680  000526  6E1B               	movwf	drawCircle@x0+1,c
  2681  000528  0E3C               	movlw	60
  2682  00052A  6E1A               	movwf	drawCircle@x0,c
  2683  00052C  0E00               	movlw	0
  2684  00052E  6E1D               	movwf	drawCircle@y0+1,c
  2685  000530  0E7D               	movlw	125
  2686  000532  6E1C               	movwf	drawCircle@y0,c
  2687  000534  0E00               	movlw	0
  2688  000536  6E1F               	movwf	drawCircle@r+1,c
  2689  000538  0E07               	movlw	7
  2690  00053A  6E1E               	movwf	drawCircle@r,c
  2691  00053C  0EFF               	movlw	255
  2692  00053E  6E21               	movwf	drawCircle@color+1,c
  2693  000540  0EE0               	movlw	224
  2694  000542  6E20               	movwf	drawCircle@color,c
  2695  000544  EC67  F006         	call	_drawCircle	;wreg free
  2696                           
  2697                           ;Lab9pC.c: 225: drawCircle(80, 110 + 15, 7, 0x07E0);
  2698  000548  0E00               	movlw	0
  2699  00054A  6E1B               	movwf	drawCircle@x0+1,c
  2700  00054C  0E50               	movlw	80
  2701  00054E  6E1A               	movwf	drawCircle@x0,c
  2702  000550  0E00               	movlw	0
  2703  000552  6E1D               	movwf	drawCircle@y0+1,c
  2704  000554  0E7D               	movlw	125
  2705  000556  6E1C               	movwf	drawCircle@y0,c
  2706  000558  0E00               	movlw	0
  2707  00055A  6E1F               	movwf	drawCircle@r+1,c
  2708  00055C  0E07               	movlw	7
  2709  00055E  6E1E               	movwf	drawCircle@r,c
  2710  000560  0E07               	movlw	7
  2711  000562  6E21               	movwf	drawCircle@color+1,c
  2712  000564  0EE0               	movlw	224
  2713  000566  6E20               	movwf	drawCircle@color,c
  2714  000568  EC67  F006         	call	_drawCircle	;wreg free
  2715                           
  2716                           ;Lab9pC.c: 226: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2717  00056C  0E78               	movlw	120
  2718  00056E  6E37               	movwf	drawtext@y,c
  2719  000570  0EAE               	movlw	low _EWLT_Count
  2720  000572  6E38               	movwf	drawtext@_text,c
  2721  000574  0E00               	movlw	high _EWLT_Count
  2722  000576  6E39               	movwf	drawtext@_text+1,c
  2723  000578  0EFF               	movlw	255
  2724  00057A  6E3B               	movwf	drawtext@color+1,c
  2725  00057C  683A               	setf	drawtext@color,c
  2726  00057E  0E00               	movlw	0
  2727  000580  6E3D               	movwf	drawtext@bg+1,c
  2728  000582  0E00               	movlw	0
  2729  000584  6E3C               	movwf	drawtext@bg,c
  2730  000586  0E02               	movlw	2
  2731  000588  6E3E               	movwf	drawtext@size,c
  2732  00058A  0E64               	movlw	100
  2733  00058C  ECD2  F009         	call	_drawtext
  2734                           
  2735                           ;Lab9pC.c: 229: strcpy(txt, "PNS");
  2736  000590  C049  F00F         	movff	_txt,strcpy@to
  2737  000594  C04A  F010         	movff	_txt+1,strcpy@to+1
  2738  000598  0EF3               	movlw	low STR_10
  2739  00059A  6E11               	movwf	strcpy@from,c
  2740  00059C  0EFF               	movlw	high STR_10
  2741  00059E  6E12               	movwf	strcpy@from+1,c
  2742  0005A0  EC60  F012         	call	_strcpy	;wreg free
  2743                           
  2744                           ;Lab9pC.c: 230: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  2745  0005A4  0E14               	movlw	20
  2746  0005A6  6E37               	movwf	drawtext@y,c
  2747  0005A8  C049  F038         	movff	_txt,drawtext@_text
  2748  0005AC  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2749  0005B0  0E00               	movlw	0
  2750  0005B2  6E3B               	movwf	drawtext@color+1,c
  2751  0005B4  0E1F               	movlw	31
  2752  0005B6  6E3A               	movwf	drawtext@color,c
  2753  0005B8  0E00               	movlw	0
  2754  0005BA  6E3D               	movwf	drawtext@bg+1,c
  2755  0005BC  0E00               	movlw	0
  2756  0005BE  6E3C               	movwf	drawtext@bg,c
  2757  0005C0  0E01               	movlw	1
  2758  0005C2  6E3E               	movwf	drawtext@size,c
  2759  0005C4  0E03               	movlw	3
  2760  0005C6  ECD2  F009         	call	_drawtext
  2761                           
  2762                           ;Lab9pC.c: 231: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  2763  0005CA  0E1E               	movlw	30
  2764  0005CC  6E37               	movwf	drawtext@y,c
  2765  0005CE  0EB7               	movlw	low _PED_NS_Count
  2766  0005D0  6E38               	movwf	drawtext@_text,c
  2767  0005D2  0E00               	movlw	high _PED_NS_Count
  2768  0005D4  6E39               	movwf	drawtext@_text+1,c
  2769  0005D6  0E00               	movlw	0
  2770  0005D8  6E3B               	movwf	drawtext@color+1,c
  2771  0005DA  0E1F               	movlw	31
  2772  0005DC  6E3A               	movwf	drawtext@color,c
  2773  0005DE  0E00               	movlw	0
  2774  0005E0  6E3D               	movwf	drawtext@bg+1,c
  2775  0005E2  0E00               	movlw	0
  2776  0005E4  6E3C               	movwf	drawtext@bg,c
  2777  0005E6  0E02               	movlw	2
  2778  0005E8  6E3E               	movwf	drawtext@size,c
  2779  0005EA  0E02               	movlw	2
  2780  0005EC  ECD2  F009         	call	_drawtext
  2781                           
  2782                           ;Lab9pC.c: 234: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  2783  0005F0  0E5A               	movlw	90
  2784  0005F2  6E37               	movwf	drawtext@y,c
  2785  0005F4  0EB4               	movlw	low _PED_EW_Count
  2786  0005F6  6E38               	movwf	drawtext@_text,c
  2787  0005F8  0E00               	movlw	high _PED_EW_Count
  2788  0005FA  6E39               	movwf	drawtext@_text+1,c
  2789  0005FC  0E07               	movlw	7
  2790  0005FE  6E3B               	movwf	drawtext@color+1,c
  2791  000600  683A               	setf	drawtext@color,c
  2792  000602  0E00               	movlw	0
  2793  000604  6E3D               	movwf	drawtext@bg+1,c
  2794  000606  0E00               	movlw	0
  2795  000608  6E3C               	movwf	drawtext@bg,c
  2796  00060A  0E02               	movlw	2
  2797  00060C  6E3E               	movwf	drawtext@size,c
  2798  00060E  0E02               	movlw	2
  2799  000610  ECD2  F009         	call	_drawtext
  2800                           
  2801                           ;Lab9pC.c: 235: strcpy(txt, "PEW");
  2802  000614  C049  F00F         	movff	_txt,strcpy@to
  2803  000618  C04A  F010         	movff	_txt+1,strcpy@to+1
  2804  00061C  0EF7               	movlw	low STR_11
  2805  00061E  6E11               	movwf	strcpy@from,c
  2806  000620  0EFF               	movlw	high STR_11
  2807  000622  6E12               	movwf	strcpy@from+1,c
  2808  000624  EC60  F012         	call	_strcpy	;wreg free
  2809                           
  2810                           ;Lab9pC.c: 236: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  2811  000628  0E50               	movlw	80
  2812  00062A  6E37               	movwf	drawtext@y,c
  2813  00062C  C049  F038         	movff	_txt,drawtext@_text
  2814  000630  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2815  000634  0E07               	movlw	7
  2816  000636  6E3B               	movwf	drawtext@color+1,c
  2817  000638  683A               	setf	drawtext@color,c
  2818  00063A  0E00               	movlw	0
  2819  00063C  6E3D               	movwf	drawtext@bg+1,c
  2820  00063E  0E00               	movlw	0
  2821  000640  6E3C               	movwf	drawtext@bg,c
  2822  000642  0E01               	movlw	1
  2823  000644  6E3E               	movwf	drawtext@size,c
  2824  000646  0E03               	movlw	3
  2825  000648  ECD2  F009         	call	_drawtext
  2826                           
  2827                           ;Lab9pC.c: 239: strcpy(txt, "NSP NSLT EWP EWLT MR");
  2828  00064C  C049  F00F         	movff	_txt,strcpy@to
  2829  000650  C04A  F010         	movff	_txt+1,strcpy@to+1
  2830  000654  0EAC               	movlw	low STR_12
  2831  000656  6E11               	movwf	strcpy@from,c
  2832  000658  0EFF               	movlw	high STR_12
  2833  00065A  6E12               	movwf	strcpy@from+1,c
  2834  00065C  EC60  F012         	call	_strcpy	;wreg free
  2835                           
  2836                           ;Lab9pC.c: 240: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2837  000660  0E8C               	movlw	140
  2838  000662  6E37               	movwf	drawtext@y,c
  2839  000664  C049  F038         	movff	_txt,drawtext@_text
  2840  000668  C04A  F039         	movff	_txt+1,drawtext@_text+1
  2841  00066C  0EFF               	movlw	255
  2842  00066E  6E3B               	movwf	drawtext@color+1,c
  2843  000670  683A               	setf	drawtext@color,c
  2844  000672  0E00               	movlw	0
  2845  000674  6E3D               	movwf	drawtext@bg+1,c
  2846  000676  0E00               	movlw	0
  2847  000678  6E3C               	movwf	drawtext@bg,c
  2848  00067A  0E01               	movlw	1
  2849  00067C  6E3E               	movwf	drawtext@size,c
  2850  00067E  0E01               	movlw	1
  2851  000680  ECD2  F009         	call	_drawtext
  2852                           
  2853                           ;Lab9pC.c: 241: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2854  000684  0E95               	movlw	149
  2855  000686  6E37               	movwf	drawtext@y,c
  2856  000688  0E70               	movlw	low _SW_NSPED_Txt
  2857  00068A  6E38               	movwf	drawtext@_text,c
  2858  00068C  0E00               	movlw	high _SW_NSPED_Txt
  2859  00068E  6E39               	movwf	drawtext@_text+1,c
  2860  000690  0EFF               	movlw	255
  2861  000692  6E3B               	movwf	drawtext@color+1,c
  2862  000694  683A               	setf	drawtext@color,c
  2863  000696  0E00               	movlw	0
  2864  000698  6E3D               	movwf	drawtext@bg+1,c
  2865  00069A  0E00               	movlw	0
  2866  00069C  6E3C               	movwf	drawtext@bg,c
  2867  00069E  0E01               	movlw	1
  2868  0006A0  6E3E               	movwf	drawtext@size,c
  2869  0006A2  0E06               	movlw	6
  2870  0006A4  ECD2  F009         	call	_drawtext
  2871                           
  2872                           ;Lab9pC.c: 242: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2873  0006A8  0E95               	movlw	149
  2874  0006AA  6E37               	movwf	drawtext@y,c
  2875  0006AC  0E6E               	movlw	low _SW_NSLT_Txt
  2876  0006AE  6E38               	movwf	drawtext@_text,c
  2877  0006B0  0E00               	movlw	high _SW_NSLT_Txt
  2878  0006B2  6E39               	movwf	drawtext@_text+1,c
  2879  0006B4  0EFF               	movlw	255
  2880  0006B6  6E3B               	movwf	drawtext@color+1,c
  2881  0006B8  683A               	setf	drawtext@color,c
  2882  0006BA  0E00               	movlw	0
  2883  0006BC  6E3D               	movwf	drawtext@bg+1,c
  2884  0006BE  0E00               	movlw	0
  2885  0006C0  6E3C               	movwf	drawtext@bg,c
  2886  0006C2  0E01               	movlw	1
  2887  0006C4  6E3E               	movwf	drawtext@size,c
  2888  0006C6  0E20               	movlw	32
  2889  0006C8  ECD2  F009         	call	_drawtext
  2890                           
  2891                           ;Lab9pC.c: 243: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2892  0006CC  0E95               	movlw	149
  2893  0006CE  6E37               	movwf	drawtext@y,c
  2894  0006D0  0E6A               	movlw	low _SW_EWPED_Txt
  2895  0006D2  6E38               	movwf	drawtext@_text,c
  2896  0006D4  0E00               	movlw	high _SW_EWPED_Txt
  2897  0006D6  6E39               	movwf	drawtext@_text+1,c
  2898  0006D8  0EFF               	movlw	255
  2899  0006DA  6E3B               	movwf	drawtext@color+1,c
  2900  0006DC  683A               	setf	drawtext@color,c
  2901  0006DE  0E00               	movlw	0
  2902  0006E0  6E3D               	movwf	drawtext@bg+1,c
  2903  0006E2  0E00               	movlw	0
  2904  0006E4  6E3C               	movwf	drawtext@bg,c
  2905  0006E6  0E01               	movlw	1
  2906  0006E8  6E3E               	movwf	drawtext@size,c
  2907  0006EA  0E3A               	movlw	58
  2908  0006EC  ECD2  F009         	call	_drawtext
  2909                           
  2910                           ;Lab9pC.c: 244: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2911  0006F0  0E95               	movlw	149
  2912  0006F2  6E37               	movwf	drawtext@y,c
  2913  0006F4  0E68               	movlw	low _SW_EWLT_Txt
  2914  0006F6  6E38               	movwf	drawtext@_text,c
  2915  0006F8  0E00               	movlw	high _SW_EWLT_Txt
  2916  0006FA  6E39               	movwf	drawtext@_text+1,c
  2917  0006FC  0EFF               	movlw	255
  2918  0006FE  6E3B               	movwf	drawtext@color+1,c
  2919  000700  683A               	setf	drawtext@color,c
  2920  000702  0E00               	movlw	0
  2921  000704  6E3D               	movwf	drawtext@bg+1,c
  2922  000706  0E00               	movlw	0
  2923  000708  6E3C               	movwf	drawtext@bg,c
  2924  00070A  0E01               	movlw	1
  2925  00070C  6E3E               	movwf	drawtext@size,c
  2926  00070E  0E57               	movlw	87
  2927  000710  ECD2  F009         	call	_drawtext
  2928                           
  2929                           ;Lab9pC.c: 245: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  2930  000714  0E95               	movlw	149
  2931  000716  6E37               	movwf	drawtext@y,c
  2932  000718  0E6C               	movlw	low _SW_MODE_Txt
  2933  00071A  6E38               	movwf	drawtext@_text,c
  2934  00071C  0E00               	movlw	high _SW_MODE_Txt
  2935  00071E  6E39               	movwf	drawtext@_text+1,c
  2936  000720  0EFF               	movlw	255
  2937  000722  6E3B               	movwf	drawtext@color+1,c
  2938  000724  683A               	setf	drawtext@color,c
  2939  000726  0E00               	movlw	0
  2940  000728  6E3D               	movwf	drawtext@bg+1,c
  2941  00072A  0E00               	movlw	0
  2942  00072C  6E3C               	movwf	drawtext@bg,c
  2943  00072E  0E01               	movlw	1
  2944  000730  6E3E               	movwf	drawtext@size,c
  2945  000732  0E70               	movlw	112
  2946  000734  ECD2  F009         	call	_drawtext
  2947  000738  0012               	return		;funcret
  2948  00073A                     __end_of_Initialize_Screen:
  2949                           	opt stack 0
  2950                           tblptru	equ	0xFF8
  2951                           tblptrh	equ	0xFF7
  2952                           tblptrl	equ	0xFF6
  2953                           tablat	equ	0xFF5
  2954                           intcon2	equ	0xFF1
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           postdec1	equ	0xFE5
  2958                           fsr1l	equ	0xFE1
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _fillScreen *****************
  2962 ;; Defined at:
  2963 ;;		line 652 in file "ST7735_TFT.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;  color           2   33[COMRAM] unsigned int 
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;		None               void
  2970 ;; Registers used:
  2971 ;;		wreg, status,2, status,0, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2977 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;Total ram usage:        2 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    6
  2984 ;; This function calls:
  2985 ;;		_fillRectangle
  2986 ;; This function is called by:
  2987 ;;		_Initialize_Screen
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text4
  2992  0025C0                     __ptext4:
  2993                           	opt stack 0
  2994  0025C0                     _fillScreen:
  2995                           	opt stack 23
  2996                           
  2997                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  2998                           
  2999                           ;incstack = 0
  3000  0025C0  0E00               	movlw	0
  3001  0025C2  6E16               	movwf	fillRectangle@y,c
  3002  0025C4  0E80               	movlw	128
  3003  0025C6  6E17               	movwf	fillRectangle@w,c
  3004  0025C8  0EA0               	movlw	160
  3005  0025CA  6E18               	movwf	fillRectangle@h,c
  3006  0025CC  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3007  0025D0  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3008  0025D4  0E00               	movlw	0
  3009  0025D6  EC41  F00B         	call	_fillRectangle
  3010  0025DA  0012               	return		;funcret
  3011  0025DC                     __end_of_fillScreen:
  3012                           	opt stack 0
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           intcon2	equ	0xFF1
  3018                           postinc0	equ	0xFEE
  3019                           wreg	equ	0xFE8
  3020                           postdec1	equ	0xFE5
  3021                           fsr1l	equ	0xFE1
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _fillRectangle *****************
  3025 ;; Defined at:
  3026 ;;		line 536 in file "ST7735_TFT.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  x               1    wreg     unsigned char 
  3029 ;;  y               1   21[COMRAM] unsigned char 
  3030 ;;  w               1   22[COMRAM] unsigned char 
  3031 ;;  h               1   23[COMRAM] unsigned char 
  3032 ;;  color           2   24[COMRAM] unsigned int 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  x               1   32[COMRAM] unsigned char 
  3035 ;;  lo              1   31[COMRAM] unsigned char 
  3036 ;;  hi              1   30[COMRAM] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;		None               void
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3046 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;Total ram usage:       12 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    5
  3053 ;; This function calls:
  3054 ;;		_setAddrWindow
  3055 ;;		_spiwrite
  3056 ;; This function is called by:
  3057 ;;		_fillScreen
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text5
  3062  001682                     __ptext5:
  3063                           	opt stack 0
  3064  001682                     _fillRectangle:
  3065                           	opt stack 23
  3066                           
  3067                           ;incstack = 0
  3068                           ;fillRectangle@x stored from wreg
  3069  001682  6E21               	movwf	fillRectangle@x,c
  3070                           
  3071                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3072                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3073  001684  0E80               	movlw	128
  3074  001686  6021               	cpfslt	fillRectangle@x,c
  3075  001688  D069               	goto	l242
  3076  00168A  0E9F               	movlw	159
  3077  00168C  6416               	cpfsgt	fillRectangle@y,c
  3078  00168E  D001               	goto	l4828
  3079                           
  3080                           ;ST7735_TFT.c: 540: return;
  3081  001690  D065               	goto	l242
  3082  001692                     l4828:
  3083                           
  3084                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3085  001692  0EFF               	movlw	255
  3086  001694  6E1B               	movwf	??_fillRectangle& (0+255),c
  3087  001696  0EFF               	movlw	255
  3088  001698  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3089  00169A  5017               	movf	fillRectangle@w,w,c
  3090  00169C  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3091  0016A0  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3092  0016A2  261D               	addwf	??_fillRectangle+2,f,c
  3093  0016A4  0E00               	movlw	0
  3094  0016A6  221E               	addwfc	??_fillRectangle+3,f,c
  3095  0016A8  501B               	movf	??_fillRectangle,w,c
  3096  0016AA  261D               	addwf	??_fillRectangle+2,f,c
  3097  0016AC  501C               	movf	??_fillRectangle+1,w,c
  3098  0016AE  221E               	addwfc	??_fillRectangle+3,f,c
  3099  0016B0  BE1E               	btfsc	??_fillRectangle+3,7,c
  3100  0016B2  D00A               	goto	l243
  3101  0016B4  501E               	movf	??_fillRectangle+3,w,c
  3102  0016B6  E104               	bnz	u3490
  3103  0016B8  0E80               	movlw	128
  3104  0016BA  5C1D               	subwf	??_fillRectangle+2,w,c
  3105  0016BC  A0D8               	btfss	status,0,c
  3106  0016BE  D004               	goto	l243
  3107  0016C0                     u3490:
  3108                           
  3109                           ;ST7735_TFT.c: 542: w = 128 - x;
  3110  0016C0  5021               	movf	fillRectangle@x,w,c
  3111  0016C2  0800               	sublw	0
  3112  0016C4  0F80               	addlw	128
  3113  0016C6  6E17               	movwf	fillRectangle@w,c
  3114  0016C8                     l243:
  3115                           
  3116                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3117  0016C8  0EFF               	movlw	255
  3118  0016CA  6E1B               	movwf	??_fillRectangle& (0+255),c
  3119  0016CC  0EFF               	movlw	255
  3120  0016CE  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3121  0016D0  5018               	movf	fillRectangle@h,w,c
  3122  0016D2  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3123  0016D6  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3124  0016D8  261D               	addwf	??_fillRectangle+2,f,c
  3125  0016DA  0E00               	movlw	0
  3126  0016DC  221E               	addwfc	??_fillRectangle+3,f,c
  3127  0016DE  501B               	movf	??_fillRectangle,w,c
  3128  0016E0  261D               	addwf	??_fillRectangle+2,f,c
  3129  0016E2  501C               	movf	??_fillRectangle+1,w,c
  3130  0016E4  221E               	addwfc	??_fillRectangle+3,f,c
  3131  0016E6  BE1E               	btfsc	??_fillRectangle+3,7,c
  3132  0016E8  D00B               	goto	l4834
  3133  0016EA  501E               	movf	??_fillRectangle+3,w,c
  3134  0016EC  E104               	bnz	u3500
  3135  0016EE  0EA0               	movlw	160
  3136  0016F0  5C1D               	subwf	??_fillRectangle+2,w,c
  3137  0016F2  A0D8               	btfss	status,0,c
  3138  0016F4  D005               	goto	l4834
  3139  0016F6                     u3500:
  3140                           
  3141                           ;ST7735_TFT.c: 544: h = 160 - y;
  3142  0016F6  5016               	movf	fillRectangle@y,w,c
  3143  0016F8  0800               	sublw	0
  3144  0016FA  0FA0               	addlw	160
  3145  0016FC  6E18               	movwf	fillRectangle@h,c
  3146  0016FE  D000               	goto	l4834
  3147  001700                     l4834:
  3148                           
  3149                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3150  001700  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3151  001704  5021               	movf	fillRectangle@x,w,c
  3152  001706  2417               	addwf	fillRectangle@w,w,c
  3153  001708  6E1B               	movwf	??_fillRectangle& (0+255),c
  3154  00170A  041B               	decf	??_fillRectangle,w,c
  3155  00170C  6E13               	movwf	setAddrWindow@x1,c
  3156  00170E  5016               	movf	fillRectangle@y,w,c
  3157  001710  2418               	addwf	fillRectangle@h,w,c
  3158  001712  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3159  001714  041C               	decf	??_fillRectangle+1,w,c
  3160  001716  6E14               	movwf	setAddrWindow@y1,c
  3161  001718  5021               	movf	fillRectangle@x,w,c
  3162  00171A  EC0D  F011         	call	_setAddrWindow
  3163                           
  3164                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3165  00171E  501A               	movf	fillRectangle@color+1,w,c
  3166  001720  6E1F               	movwf	fillRectangle@hi,c
  3167  001722  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3168                           
  3169                           ;ST7735_TFT.c: 547: PORTCbits.RC0 = 1;
  3170  001726  8082               	bsf	3970,0,c	;volatile
  3171                           
  3172                           ;ST7735_TFT.c: 548: PORTCbits.RC1 = 0;
  3173  001728  9282               	bcf	3970,1,c	;volatile
  3174                           
  3175                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3176  00172A  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3177  00172E                     l4846:
  3178  00172E  5016               	movf	fillRectangle@y,w,c
  3179  001730  B4D8               	btfsc	status,2,c
  3180  001732  D013               	goto	l246
  3181  001734  D001               	goto	l245
  3182  001736  D011               	goto	l246
  3183  001738                     l245:
  3184                           
  3185                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3186  001738  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3187  00173C                     l4850:
  3188  00173C  5021               	movf	fillRectangle@x,w,c
  3189  00173E  B4D8               	btfsc	status,2,c
  3190  001740  D00A               	goto	l4860
  3191  001742  D001               	goto	l4854
  3192  001744  D008               	goto	l4860
  3193  001746                     l4854:
  3194                           
  3195                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3196  001746  501F               	movf	fillRectangle@hi,w,c
  3197  001748  EC32  F013         	call	_spiwrite
  3198                           
  3199                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3200  00174C  5020               	movf	fillRectangle@lo,w,c
  3201  00174E  EC32  F013         	call	_spiwrite
  3202  001752  0621               	decf	fillRectangle@x,f,c
  3203  001754  D7F3               	goto	l4850
  3204  001756                     l4860:
  3205  001756  0616               	decf	fillRectangle@y,f,c
  3206  001758  D7EA               	goto	l4846
  3207  00175A                     l246:
  3208                           
  3209                           ;ST7735_TFT.c: 554: }
  3210                           ;ST7735_TFT.c: 555: }
  3211                           ;ST7735_TFT.c: 556: PORTCbits.RC1 = 1;
  3212  00175A  8282               	bsf	3970,1,c	;volatile
  3213  00175C                     l242:
  3214  00175C  0012               	return		;funcret
  3215  00175E                     __end_of_fillRectangle:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           intcon2	equ	0xFF1
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           status	equ	0xFD8
  3227                           
  3228 ;; *************** function _drawRect *****************
  3229 ;; Defined at:
  3230 ;;		line 718 in file "ST7735_TFT.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  x               2   32[COMRAM] unsigned int 
  3233 ;;  y               2   34[COMRAM] unsigned int 
  3234 ;;  w               2   36[COMRAM] unsigned int 
  3235 ;;  h               2   38[COMRAM] unsigned int 
  3236 ;;  color           2   40[COMRAM] unsigned int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;		None
  3239 ;; Return value:  Size  Location     Type
  3240 ;;		None               void
  3241 ;; Registers used:
  3242 ;;		wreg, status,2, status,0, cstack
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:       11 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    6
  3255 ;; This function calls:
  3256 ;;		_drawFastHLine
  3257 ;;		_drawFastVLine
  3258 ;; This function is called by:
  3259 ;;		_Initialize_Screen
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text6
  3264  001FEA                     __ptext6:
  3265                           	opt stack 0
  3266  001FEA                     _drawRect:
  3267                           	opt stack 23
  3268                           
  3269                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3270                           
  3271                           ;incstack = 0
  3272  001FEA  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3273  001FEE  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3274  001FF2  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3275  001FF6  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3276  001FFA  5021               	movf	drawRect@x,w,c
  3277  001FFC  EC70  F00E         	call	_drawFastHLine
  3278                           
  3279                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3280  002000  5023               	movf	drawRect@y,w,c
  3281  002002  2427               	addwf	drawRect@h,w,c
  3282  002004  6E2B               	movwf	??_drawRect& (0+255),c
  3283  002006  042B               	decf	??_drawRect,w,c
  3284  002008  6E16               	movwf	drawFastHLine@y,c
  3285  00200A  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3286  00200E  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3287  002012  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3288  002016  5021               	movf	drawRect@x,w,c
  3289  002018  EC70  F00E         	call	_drawFastHLine
  3290                           
  3291                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3292  00201C  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3293  002020  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3294  002024  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3295  002028  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3296  00202C  5021               	movf	drawRect@x,w,c
  3297  00202E  ECB4  F00E         	call	_drawFastVLine
  3298                           
  3299                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3300  002032  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3301  002036  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3302  00203A  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3303  00203E  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3304  002042  5021               	movf	drawRect@x,w,c
  3305  002044  2425               	addwf	drawRect@w,w,c
  3306  002046  6E2B               	movwf	??_drawRect& (0+255),c
  3307  002048  042B               	decf	??_drawRect,w,c
  3308  00204A  ECB4  F00E         	call	_drawFastVLine
  3309  00204E  0012               	return		;funcret
  3310  002050                     __end_of_drawRect:
  3311                           	opt stack 0
  3312                           tblptru	equ	0xFF8
  3313                           tblptrh	equ	0xFF7
  3314                           tblptrl	equ	0xFF6
  3315                           tablat	equ	0xFF5
  3316                           intcon2	equ	0xFF1
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postdec1	equ	0xFE5
  3320                           fsr1l	equ	0xFE1
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function _drawFastHLine *****************
  3324 ;; Defined at:
  3325 ;;		line 657 in file "ST7735_TFT.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  x               1    wreg     unsigned char 
  3328 ;;  y               1   21[COMRAM] unsigned char 
  3329 ;;  w               1   22[COMRAM] unsigned char 
  3330 ;;  color           2   23[COMRAM] unsigned int 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  x               1   31[COMRAM] unsigned char 
  3333 ;;  lo              1   30[COMRAM] unsigned char 
  3334 ;;  hi              1   29[COMRAM] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;		None               void
  3337 ;; Registers used:
  3338 ;;		wreg, status,2, status,0, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3344 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;Total ram usage:       11 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    5
  3351 ;; This function calls:
  3352 ;;		_setAddrWindow
  3353 ;;		_spiwrite
  3354 ;; This function is called by:
  3355 ;;		_drawRect
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text7
  3360  001CE0                     __ptext7:
  3361                           	opt stack 0
  3362  001CE0                     _drawFastHLine:
  3363                           	opt stack 23
  3364                           
  3365                           ;incstack = 0
  3366                           ;drawFastHLine@x stored from wreg
  3367  001CE0  6E20               	movwf	drawFastHLine@x,c
  3368                           
  3369                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3370                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3371  001CE2  0E80               	movlw	128
  3372  001CE4  6020               	cpfslt	drawFastHLine@x,c
  3373  001CE6  D03F               	goto	l287
  3374  001CE8  0E9F               	movlw	159
  3375  001CEA  6416               	cpfsgt	drawFastHLine@y,c
  3376  001CEC  D001               	goto	l4868
  3377                           
  3378                           ;ST7735_TFT.c: 661: return;
  3379  001CEE  D03B               	goto	l287
  3380  001CF0                     l4868:
  3381                           
  3382                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3383  001CF0  0EFF               	movlw	255
  3384  001CF2  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3385  001CF4  0EFF               	movlw	255
  3386  001CF6  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3387  001CF8  5017               	movf	drawFastHLine@w,w,c
  3388  001CFA  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3389  001CFE  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3390  001D00  261C               	addwf	??_drawFastHLine+2,f,c
  3391  001D02  0E00               	movlw	0
  3392  001D04  221D               	addwfc	??_drawFastHLine+3,f,c
  3393  001D06  501A               	movf	??_drawFastHLine,w,c
  3394  001D08  261C               	addwf	??_drawFastHLine+2,f,c
  3395  001D0A  501B               	movf	??_drawFastHLine+1,w,c
  3396  001D0C  221D               	addwfc	??_drawFastHLine+3,f,c
  3397  001D0E  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3398  001D10  D00B               	goto	l4872
  3399  001D12  501D               	movf	??_drawFastHLine+3,w,c
  3400  001D14  E104               	bnz	u3570
  3401  001D16  0E80               	movlw	128
  3402  001D18  5C1C               	subwf	??_drawFastHLine+2,w,c
  3403  001D1A  A0D8               	btfss	status,0,c
  3404  001D1C  D005               	goto	l4872
  3405  001D1E                     u3570:
  3406                           
  3407                           ;ST7735_TFT.c: 663: w = 128 - x;
  3408  001D1E  5020               	movf	drawFastHLine@x,w,c
  3409  001D20  0800               	sublw	0
  3410  001D22  0F80               	addlw	128
  3411  001D24  6E17               	movwf	drawFastHLine@w,c
  3412  001D26  D000               	goto	l4872
  3413  001D28                     l4872:
  3414                           
  3415                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3416  001D28  5019               	movf	drawFastHLine@color+1,w,c
  3417  001D2A  6E1E               	movwf	drawFastHLine@hi,c
  3418  001D2C  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3419                           
  3420                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3421  001D30  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3422  001D34  5020               	movf	drawFastHLine@x,w,c
  3423  001D36  2417               	addwf	drawFastHLine@w,w,c
  3424  001D38  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3425  001D3A  041A               	decf	??_drawFastHLine,w,c
  3426  001D3C  6E13               	movwf	setAddrWindow@x1,c
  3427  001D3E  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3428  001D42  5020               	movf	drawFastHLine@x,w,c
  3429  001D44  EC0D  F011         	call	_setAddrWindow
  3430                           
  3431                           ;ST7735_TFT.c: 666: PORTCbits.RC0 = 1;
  3432  001D48  8082               	bsf	3970,0,c	;volatile
  3433                           
  3434                           ;ST7735_TFT.c: 667: PORTCbits.RC1 = 0;
  3435  001D4A  9282               	bcf	3970,1,c	;volatile
  3436                           
  3437                           ;ST7735_TFT.c: 669: while (w--) {
  3438  001D4C  D007               	goto	l4884
  3439  001D4E                     l4882:
  3440                           
  3441                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3442  001D4E  501E               	movf	drawFastHLine@hi,w,c
  3443  001D50  EC32  F013         	call	_spiwrite
  3444                           
  3445                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3446  001D54  501F               	movf	drawFastHLine@lo,w,c
  3447  001D56  EC32  F013         	call	_spiwrite
  3448  001D5A  D000               	goto	l4884
  3449  001D5C                     l4884:
  3450  001D5C  0617               	decf	drawFastHLine@w,f,c
  3451  001D5E  2817               	incf	drawFastHLine@w,w,c
  3452  001D60  A4D8               	btfss	status,2,c
  3453  001D62  D7F5               	goto	l4882
  3454                           
  3455                           ;ST7735_TFT.c: 672: }
  3456                           ;ST7735_TFT.c: 673: PORTCbits.RC1 = 1;
  3457  001D64  8282               	bsf	3970,1,c	;volatile
  3458  001D66                     l287:
  3459  001D66  0012               	return		;funcret
  3460  001D68                     __end_of_drawFastHLine:
  3461                           	opt stack 0
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           intcon2	equ	0xFF1
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           postdec1	equ	0xFE5
  3470                           fsr1l	equ	0xFE1
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _TFT_GreenTab_Initialize *****************
  3474 ;; Defined at:
  3475 ;;		line 677 in file "ST7735_TFT.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;		None               void
  3482 ;; Registers used:
  3483 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;Total ram usage:        0 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    5
  3496 ;; This function calls:
  3497 ;;		_Rcmd1
  3498 ;;		_Rcmd2red
  3499 ;;		_Rcmd3
  3500 ;;		_write_command
  3501 ;;		_write_data
  3502 ;; This function is called by:
  3503 ;;		_Initialize_Screen
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text8
  3508  002522                     __ptext8:
  3509                           	opt stack 0
  3510  002522                     _TFT_GreenTab_Initialize:
  3511                           	opt stack 24
  3512                           
  3513                           ;ST7735_TFT.c: 679: PORTCbits.RC1 = 1;
  3514                           
  3515                           ;incstack = 0
  3516  002522  8282               	bsf	3970,1,c	;volatile
  3517                           
  3518                           ;ST7735_TFT.c: 680: PORTCbits.RC0 = 0;
  3519  002524  9082               	bcf	3970,0,c	;volatile
  3520                           
  3521                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3522  002526  0E80               	movlw	128
  3523  002528  6EC7               	movwf	4039,c	;volatile
  3524                           
  3525                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3526  00252A  0E30               	movlw	48
  3527  00252C  6EC6               	movwf	4038,c	;volatile
  3528                           
  3529                           ;ST7735_TFT.c: 686: Rcmd1();
  3530  00252E  EC4A  F009         	call	_Rcmd1	;wreg free
  3531                           
  3532                           ;ST7735_TFT.c: 687: Rcmd2red();
  3533  002532  ECE9  F011         	call	_Rcmd2red	;wreg free
  3534                           
  3535                           ;ST7735_TFT.c: 688: Rcmd3();
  3536  002536  EC57  F00A         	call	_Rcmd3	;wreg free
  3537                           
  3538                           ;ST7735_TFT.c: 689: write_command(0x36);
  3539  00253A  0E36               	movlw	54
  3540  00253C  EC56  F013         	call	_write_command
  3541                           
  3542                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3543  002540  0EC0               	movlw	192
  3544  002542  EC4E  F013         	call	_write_data
  3545                           
  3546                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3547  002546  0E01               	movlw	1
  3548  002548  6E56               	movwf	__tft_type,c
  3549  00254A  0012               	return		;funcret
  3550  00254C                     __end_of_TFT_GreenTab_Initialize:
  3551                           	opt stack 0
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           intcon2	equ	0xFF1
  3557                           postinc0	equ	0xFEE
  3558                           wreg	equ	0xFE8
  3559                           postdec1	equ	0xFE5
  3560                           fsr1l	equ	0xFE1
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _Rcmd3 *****************
  3564 ;; Defined at:
  3565 ;;		line 371 in file "ST7735_TFT.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;		None               void
  3572 ;; Registers used:
  3573 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;Total ram usage:        0 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    4
  3586 ;; This function calls:
  3587 ;;		_delay_ms
  3588 ;;		_write_command
  3589 ;;		_write_data
  3590 ;; This function is called by:
  3591 ;;		_TFT_GreenTab_Initialize
  3592 ;;		_TFT_BlackTab_Initialize
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text9
  3597  0014AE                     __ptext9:
  3598                           	opt stack 0
  3599  0014AE                     _Rcmd3:
  3600                           	opt stack 24
  3601                           
  3602                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3603                           
  3604                           ;incstack = 0
  3605  0014AE  0EE0               	movlw	224
  3606  0014B0  EC56  F013         	call	_write_command
  3607                           
  3608                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3609  0014B4  0E02               	movlw	2
  3610  0014B6  EC4E  F013         	call	_write_data
  3611  0014BA  0E1C               	movlw	28
  3612  0014BC  EC4E  F013         	call	_write_data
  3613  0014C0  0E07               	movlw	7
  3614  0014C2  EC4E  F013         	call	_write_data
  3615  0014C6  0E12               	movlw	18
  3616  0014C8  EC4E  F013         	call	_write_data
  3617                           
  3618                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3619  0014CC  0E37               	movlw	55
  3620  0014CE  EC4E  F013         	call	_write_data
  3621  0014D2  0E32               	movlw	50
  3622  0014D4  EC4E  F013         	call	_write_data
  3623  0014D8  0E29               	movlw	41
  3624  0014DA  EC4E  F013         	call	_write_data
  3625  0014DE  0E2D               	movlw	45
  3626  0014E0  EC4E  F013         	call	_write_data
  3627                           
  3628                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3629  0014E4  0E29               	movlw	41
  3630  0014E6  EC4E  F013         	call	_write_data
  3631  0014EA  0E25               	movlw	37
  3632  0014EC  EC4E  F013         	call	_write_data
  3633  0014F0  0E2B               	movlw	43
  3634  0014F2  EC4E  F013         	call	_write_data
  3635  0014F6  0E39               	movlw	57
  3636  0014F8  EC4E  F013         	call	_write_data
  3637                           
  3638                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3639  0014FC  0E00               	movlw	0
  3640  0014FE  EC4E  F013         	call	_write_data
  3641  001502  0E01               	movlw	1
  3642  001504  EC4E  F013         	call	_write_data
  3643  001508  0E03               	movlw	3
  3644  00150A  EC4E  F013         	call	_write_data
  3645  00150E  0E10               	movlw	16
  3646  001510  EC4E  F013         	call	_write_data
  3647                           
  3648                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3649  001514  0EE1               	movlw	225
  3650  001516  EC56  F013         	call	_write_command
  3651                           
  3652                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3653  00151A  0E03               	movlw	3
  3654  00151C  EC4E  F013         	call	_write_data
  3655  001520  0E1D               	movlw	29
  3656  001522  EC4E  F013         	call	_write_data
  3657  001526  0E07               	movlw	7
  3658  001528  EC4E  F013         	call	_write_data
  3659  00152C  0E06               	movlw	6
  3660  00152E  EC4E  F013         	call	_write_data
  3661                           
  3662                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3663  001532  0E2E               	movlw	46
  3664  001534  EC4E  F013         	call	_write_data
  3665  001538  0E2C               	movlw	44
  3666  00153A  EC4E  F013         	call	_write_data
  3667  00153E  0E29               	movlw	41
  3668  001540  EC4E  F013         	call	_write_data
  3669  001544  0E2D               	movlw	45
  3670  001546  EC4E  F013         	call	_write_data
  3671                           
  3672                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3673  00154A  0E2E               	movlw	46
  3674  00154C  EC4E  F013         	call	_write_data
  3675  001550  0E2E               	movlw	46
  3676  001552  EC4E  F013         	call	_write_data
  3677  001556  0E37               	movlw	55
  3678  001558  EC4E  F013         	call	_write_data
  3679  00155C  0E3F               	movlw	63
  3680  00155E  EC4E  F013         	call	_write_data
  3681                           
  3682                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3683  001562  0E00               	movlw	0
  3684  001564  EC4E  F013         	call	_write_data
  3685  001568  0E00               	movlw	0
  3686  00156A  EC4E  F013         	call	_write_data
  3687  00156E  0E02               	movlw	2
  3688  001570  EC4E  F013         	call	_write_data
  3689  001574  0E10               	movlw	16
  3690  001576  EC4E  F013         	call	_write_data
  3691                           
  3692                           ;ST7735_TFT.c: 383: write_command(0x13);
  3693  00157A  0E13               	movlw	19
  3694  00157C  EC56  F013         	call	_write_command
  3695                           
  3696                           ;ST7735_TFT.c: 384: delay_ms(10);
  3697  001580  0E00               	movlw	0
  3698  001582  6E16               	movwf	delay_ms@ms+1,c
  3699  001584  0E0A               	movlw	10
  3700  001586  6E15               	movwf	delay_ms@ms,c
  3701  001588  ECBB  F010         	call	_delay_ms	;wreg free
  3702                           
  3703                           ;ST7735_TFT.c: 385: write_command(0x29);
  3704  00158C  0E29               	movlw	41
  3705  00158E  EC56  F013         	call	_write_command
  3706                           
  3707                           ;ST7735_TFT.c: 386: delay_ms(100);
  3708  001592  0E00               	movlw	0
  3709  001594  6E16               	movwf	delay_ms@ms+1,c
  3710  001596  0E64               	movlw	100
  3711  001598  6E15               	movwf	delay_ms@ms,c
  3712  00159A  ECBB  F010         	call	_delay_ms	;wreg free
  3713  00159E  0012               	return		;funcret
  3714  0015A0                     __end_of_Rcmd3:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           intcon2	equ	0xFF1
  3721                           postinc0	equ	0xFEE
  3722                           wreg	equ	0xFE8
  3723                           postdec1	equ	0xFE5
  3724                           fsr1l	equ	0xFE1
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _Rcmd2red *****************
  3728 ;; Defined at:
  3729 ;;		line 361 in file "ST7735_TFT.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;		None               void
  3736 ;; Registers used:
  3737 ;;		wreg, status,2, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;Total ram usage:        0 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; Hardware stack levels required when called:    4
  3750 ;; This function calls:
  3751 ;;		_write_command
  3752 ;;		_write_data
  3753 ;; This function is called by:
  3754 ;;		_TFT_GreenTab_Initialize
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text10
  3759  0023D2                     __ptext10:
  3760                           	opt stack 0
  3761  0023D2                     _Rcmd2red:
  3762                           	opt stack 24
  3763                           
  3764                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3765                           
  3766                           ;incstack = 0
  3767  0023D2  0E2A               	movlw	42
  3768  0023D4  EC56  F013         	call	_write_command
  3769                           
  3770                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3771  0023D8  0E00               	movlw	0
  3772  0023DA  EC4E  F013         	call	_write_data
  3773  0023DE  0E00               	movlw	0
  3774  0023E0  EC4E  F013         	call	_write_data
  3775                           
  3776                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3777  0023E4  0E00               	movlw	0
  3778  0023E6  EC4E  F013         	call	_write_data
  3779  0023EA  0E7F               	movlw	127
  3780  0023EC  EC4E  F013         	call	_write_data
  3781                           
  3782                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3783  0023F0  0E2B               	movlw	43
  3784  0023F2  EC56  F013         	call	_write_command
  3785                           
  3786                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3787  0023F6  0E00               	movlw	0
  3788  0023F8  EC4E  F013         	call	_write_data
  3789  0023FC  0E00               	movlw	0
  3790  0023FE  EC4E  F013         	call	_write_data
  3791                           
  3792                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3793  002402  0E00               	movlw	0
  3794  002404  EC4E  F013         	call	_write_data
  3795  002408  0E9F               	movlw	159
  3796  00240A  EC4E  F013         	call	_write_data
  3797  00240E  0012               	return		;funcret
  3798  002410                     __end_of_Rcmd2red:
  3799                           	opt stack 0
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           intcon2	equ	0xFF1
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           fsr1l	equ	0xFE1
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _Rcmd1 *****************
  3812 ;; Defined at:
  3813 ;;		line 314 in file "ST7735_TFT.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;		None               void
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;Total ram usage:        0 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    4
  3834 ;; This function calls:
  3835 ;;		_delay_ms
  3836 ;;		_write_command
  3837 ;;		_write_data
  3838 ;; This function is called by:
  3839 ;;		_TFT_GreenTab_Initialize
  3840 ;;		_TFT_BlackTab_Initialize
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text11
  3845  001294                     __ptext11:
  3846                           	opt stack 0
  3847  001294                     _Rcmd1:
  3848                           	opt stack 24
  3849                           
  3850                           ;ST7735_TFT.c: 316: write_command(0x01);
  3851                           
  3852                           ;incstack = 0
  3853  001294  0E01               	movlw	1
  3854  001296  EC56  F013         	call	_write_command
  3855                           
  3856                           ;ST7735_TFT.c: 317: delay_ms(150);
  3857  00129A  0E00               	movlw	0
  3858  00129C  6E16               	movwf	delay_ms@ms+1,c
  3859  00129E  0E96               	movlw	150
  3860  0012A0  6E15               	movwf	delay_ms@ms,c
  3861  0012A2  ECBB  F010         	call	_delay_ms	;wreg free
  3862                           
  3863                           ;ST7735_TFT.c: 318: write_command(0x11);
  3864  0012A6  0E11               	movlw	17
  3865  0012A8  EC56  F013         	call	_write_command
  3866                           
  3867                           ;ST7735_TFT.c: 319: delay_ms(500);
  3868  0012AC  0E01               	movlw	1
  3869  0012AE  6E16               	movwf	delay_ms@ms+1,c
  3870  0012B0  0EF4               	movlw	244
  3871  0012B2  6E15               	movwf	delay_ms@ms,c
  3872  0012B4  ECBB  F010         	call	_delay_ms	;wreg free
  3873                           
  3874                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3875  0012B8  0EB1               	movlw	177
  3876  0012BA  EC56  F013         	call	_write_command
  3877                           
  3878                           ;ST7735_TFT.c: 321: write_data(0x01);
  3879  0012BE  0E01               	movlw	1
  3880  0012C0  EC4E  F013         	call	_write_data
  3881                           
  3882                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3883  0012C4  0E2C               	movlw	44
  3884  0012C6  EC4E  F013         	call	_write_data
  3885                           
  3886                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3887  0012CA  0E2D               	movlw	45
  3888  0012CC  EC4E  F013         	call	_write_data
  3889                           
  3890                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3891  0012D0  0EB2               	movlw	178
  3892  0012D2  EC56  F013         	call	_write_command
  3893                           
  3894                           ;ST7735_TFT.c: 325: write_data(0x01);
  3895  0012D6  0E01               	movlw	1
  3896  0012D8  EC4E  F013         	call	_write_data
  3897                           
  3898                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3899  0012DC  0E2C               	movlw	44
  3900  0012DE  EC4E  F013         	call	_write_data
  3901                           
  3902                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3903  0012E2  0E2D               	movlw	45
  3904  0012E4  EC4E  F013         	call	_write_data
  3905                           
  3906                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3907  0012E8  0EB3               	movlw	179
  3908  0012EA  EC56  F013         	call	_write_command
  3909                           
  3910                           ;ST7735_TFT.c: 329: write_data(0x01);
  3911  0012EE  0E01               	movlw	1
  3912  0012F0  EC4E  F013         	call	_write_data
  3913                           
  3914                           ;ST7735_TFT.c: 330: write_data(0x2C);
  3915  0012F4  0E2C               	movlw	44
  3916  0012F6  EC4E  F013         	call	_write_data
  3917                           
  3918                           ;ST7735_TFT.c: 331: write_data(0x2D);
  3919  0012FA  0E2D               	movlw	45
  3920  0012FC  EC4E  F013         	call	_write_data
  3921                           
  3922                           ;ST7735_TFT.c: 332: write_data(0x01);
  3923  001300  0E01               	movlw	1
  3924  001302  EC4E  F013         	call	_write_data
  3925                           
  3926                           ;ST7735_TFT.c: 333: write_data(0x2C);
  3927  001306  0E2C               	movlw	44
  3928  001308  EC4E  F013         	call	_write_data
  3929                           
  3930                           ;ST7735_TFT.c: 334: write_data(0x2D);
  3931  00130C  0E2D               	movlw	45
  3932  00130E  EC4E  F013         	call	_write_data
  3933                           
  3934                           ;ST7735_TFT.c: 335: write_command(0xB4);
  3935  001312  0EB4               	movlw	180
  3936  001314  EC56  F013         	call	_write_command
  3937                           
  3938                           ;ST7735_TFT.c: 336: write_data(0x07);
  3939  001318  0E07               	movlw	7
  3940  00131A  EC4E  F013         	call	_write_data
  3941                           
  3942                           ;ST7735_TFT.c: 337: write_command(0xC0);
  3943  00131E  0EC0               	movlw	192
  3944  001320  EC56  F013         	call	_write_command
  3945                           
  3946                           ;ST7735_TFT.c: 338: write_data(0xA2);
  3947  001324  0EA2               	movlw	162
  3948  001326  EC4E  F013         	call	_write_data
  3949                           
  3950                           ;ST7735_TFT.c: 339: write_data(0x02);
  3951  00132A  0E02               	movlw	2
  3952  00132C  EC4E  F013         	call	_write_data
  3953                           
  3954                           ;ST7735_TFT.c: 340: write_data(0x84);
  3955  001330  0E84               	movlw	132
  3956  001332  EC4E  F013         	call	_write_data
  3957                           
  3958                           ;ST7735_TFT.c: 341: write_command(0xC1);
  3959  001336  0EC1               	movlw	193
  3960  001338  EC56  F013         	call	_write_command
  3961                           
  3962                           ;ST7735_TFT.c: 342: write_data(0xC5);
  3963  00133C  0EC5               	movlw	197
  3964  00133E  EC4E  F013         	call	_write_data
  3965                           
  3966                           ;ST7735_TFT.c: 343: write_command(0xC2);
  3967  001342  0EC2               	movlw	194
  3968  001344  EC56  F013         	call	_write_command
  3969                           
  3970                           ;ST7735_TFT.c: 344: write_data(0x0A);
  3971  001348  0E0A               	movlw	10
  3972  00134A  EC4E  F013         	call	_write_data
  3973                           
  3974                           ;ST7735_TFT.c: 345: write_data(0x00);
  3975  00134E  0E00               	movlw	0
  3976  001350  EC4E  F013         	call	_write_data
  3977                           
  3978                           ;ST7735_TFT.c: 346: write_command(0xC3);
  3979  001354  0EC3               	movlw	195
  3980  001356  EC56  F013         	call	_write_command
  3981                           
  3982                           ;ST7735_TFT.c: 347: write_data(0x8A);
  3983  00135A  0E8A               	movlw	138
  3984  00135C  EC4E  F013         	call	_write_data
  3985                           
  3986                           ;ST7735_TFT.c: 348: write_data(0x2A);
  3987  001360  0E2A               	movlw	42
  3988  001362  EC4E  F013         	call	_write_data
  3989                           
  3990                           ;ST7735_TFT.c: 349: write_command(0xC4);
  3991  001366  0EC4               	movlw	196
  3992  001368  EC56  F013         	call	_write_command
  3993                           
  3994                           ;ST7735_TFT.c: 350: write_data(0x8A);
  3995  00136C  0E8A               	movlw	138
  3996  00136E  EC4E  F013         	call	_write_data
  3997                           
  3998                           ;ST7735_TFT.c: 351: write_data(0xEE);
  3999  001372  0EEE               	movlw	238
  4000  001374  EC4E  F013         	call	_write_data
  4001                           
  4002                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4003  001378  0EC5               	movlw	197
  4004  00137A  EC56  F013         	call	_write_command
  4005                           
  4006                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4007  00137E  0E0E               	movlw	14
  4008  001380  EC4E  F013         	call	_write_data
  4009                           
  4010                           ;ST7735_TFT.c: 354: write_command(0x20);
  4011  001384  0E20               	movlw	32
  4012  001386  EC56  F013         	call	_write_command
  4013                           
  4014                           ;ST7735_TFT.c: 355: write_command(0x36);
  4015  00138A  0E36               	movlw	54
  4016  00138C  EC56  F013         	call	_write_command
  4017                           
  4018                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4019  001390  0EC8               	movlw	200
  4020  001392  EC4E  F013         	call	_write_data
  4021                           
  4022                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4023  001396  0E3A               	movlw	58
  4024  001398  EC56  F013         	call	_write_command
  4025                           
  4026                           ;ST7735_TFT.c: 358: write_data(0x05);
  4027  00139C  0E05               	movlw	5
  4028  00139E  EC4E  F013         	call	_write_data
  4029  0013A2  0012               	return		;funcret
  4030  0013A4                     __end_of_Rcmd1:
  4031                           	opt stack 0
  4032                           tblptru	equ	0xFF8
  4033                           tblptrh	equ	0xFF7
  4034                           tblptrl	equ	0xFF6
  4035                           tablat	equ	0xFF5
  4036                           intcon2	equ	0xFF1
  4037                           postinc0	equ	0xFEE
  4038                           wreg	equ	0xFE8
  4039                           postdec1	equ	0xFE5
  4040                           fsr1l	equ	0xFE1
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _LCD_Reset *****************
  4044 ;; Defined at:
  4045 ;;		line 250 in file "ST7735_TFT.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;		None               void
  4052 ;; Registers used:
  4053 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;Total ram usage:        0 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    4
  4066 ;; This function calls:
  4067 ;;		_delay_ms
  4068 ;; This function is called by:
  4069 ;;		_Initialize_Screen
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text12
  4074  002678                     __ptext12:
  4075                           	opt stack 0
  4076  002678                     _LCD_Reset:
  4077                           	opt stack 25
  4078                           
  4079                           ;ST7735_TFT.c: 252: PORTCbits.RC2 = 0;
  4080                           
  4081                           ;incstack = 0
  4082  002678  9482               	bcf	3970,2,c	;volatile
  4083                           
  4084                           ;ST7735_TFT.c: 253: delay_ms(100);
  4085  00267A  0E00               	movlw	0
  4086  00267C  6E16               	movwf	delay_ms@ms+1,c
  4087  00267E  0E64               	movlw	100
  4088  002680  6E15               	movwf	delay_ms@ms,c
  4089  002682  ECBB  F010         	call	_delay_ms	;wreg free
  4090                           
  4091                           ;ST7735_TFT.c: 254: PORTCbits.RC2 = 1;
  4092  002686  8482               	bsf	3970,2,c	;volatile
  4093  002688  0012               	return		;funcret
  4094  00268A                     __end_of_LCD_Reset:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           intcon2	equ	0xFF1
  4101                           postinc0	equ	0xFEE
  4102                           wreg	equ	0xFE8
  4103                           postdec1	equ	0xFE5
  4104                           fsr1l	equ	0xFE1
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function _delay_ms *****************
  4108 ;; Defined at:
  4109 ;;		line 97 in file "ST7735_TFT.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  ms              2   20[COMRAM] int 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  count           2   24[COMRAM] int 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;		None               void
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4123 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;Total ram usage:        6 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    3
  4130 ;; This function calls:
  4131 ;;		___wmul
  4132 ;; This function is called by:
  4133 ;;		_LCD_Reset
  4134 ;;		_Rcmd1
  4135 ;;		_Rcmd3
  4136 ;;		_Bcmd
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text13
  4141  002176                     __ptext13:
  4142                           	opt stack 0
  4143  002176                     _delay_ms:
  4144                           	opt stack 24
  4145                           
  4146                           ;ST7735_TFT.c: 103: int count;
  4147                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4148                           
  4149                           ;incstack = 0
  4150  002176  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4151  00217A  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4152  00217E  0E00               	movlw	0
  4153  002180  6E12               	movwf	___wmul@multiplicand+1,c
  4154  002182  0EFA               	movlw	250
  4155  002184  6E11               	movwf	___wmul@multiplicand,c
  4156  002186  ECA6  F012         	call	___wmul	;wreg free
  4157  00218A  C00F  F019         	movff	?___wmul,delay_ms@count
  4158  00218E  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4159                           
  4160                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4161  002192  C019  F017         	movff	delay_ms@count,??_delay_ms
  4162  002196  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4163  00219A  1E17               	comf	??_delay_ms,f,c
  4164  00219C  1E18               	comf	??_delay_ms+1,f,c
  4165  00219E  4A17               	infsnz	??_delay_ms,f,c
  4166  0021A0  2A18               	incf	??_delay_ms+1,f,c
  4167  0021A2  0EFF               	movlw	255
  4168  0021A4  2417               	addwf	??_delay_ms,w,c
  4169  0021A6  6E19               	movwf	delay_ms@count,c
  4170  0021A8  0EFF               	movlw	255
  4171  0021AA  2018               	addwfc	??_delay_ms+1,w,c
  4172  0021AC  6E1A               	movwf	delay_ms@count+1,c
  4173                           
  4174                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4175  0021AE  0EB8               	movlw	184
  4176  0021B0  6EB1               	movwf	4017,c	;volatile
  4177                           
  4178                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4179  0021B2  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4180                           
  4181                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4182  0021B6  501A               	movf	delay_ms@count+1,w,c
  4183  0021B8  6ED7               	movwf	4055,c	;volatile
  4184                           
  4185                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4186  0021BA  92A1               	bcf	4001,1,c	;volatile
  4187                           
  4188                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4189  0021BC  80B1               	bsf	4017,0,c	;volatile
  4190                           
  4191                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4192  0021BE  D000               	goto	l129
  4193  0021C0                     l129:
  4194  0021C0  A2A1               	btfss	4001,1,c	;volatile
  4195  0021C2  D7FE               	goto	l129
  4196                           
  4197                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4198  0021C4  90B1               	bcf	4017,0,c	;volatile
  4199  0021C6  0012               	return		;funcret
  4200  0021C8                     __end_of_delay_ms:
  4201                           	opt stack 0
  4202                           tblptru	equ	0xFF8
  4203                           tblptrh	equ	0xFF7
  4204                           tblptrl	equ	0xFF6
  4205                           tablat	equ	0xFF5
  4206                           intcon2	equ	0xFF1
  4207                           postinc0	equ	0xFEE
  4208                           wreg	equ	0xFE8
  4209                           postdec1	equ	0xFE5
  4210                           fsr1l	equ	0xFE1
  4211                           status	equ	0xFD8
  4212                           
  4213 ;; *************** function _Do_Init *****************
  4214 ;; Defined at:
  4215 ;;		line 265 in file "Lab9pC.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;		None               void
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, cstack
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;Total ram usage:        0 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    4
  4236 ;; This function calls:
  4237 ;;		_Init_ADC
  4238 ;;		_init_UART
  4239 ;; This function is called by:
  4240 ;;		_main
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text14
  4245  002574                     __ptext14:
  4246                           	opt stack 0
  4247  002574                     _Do_Init:
  4248                           	opt stack 26
  4249                           
  4250                           ;Lab9pC.c: 268: init_UART();
  4251                           
  4252                           ;incstack = 0
  4253  002574  EC28  F013         	call	_init_UART	;wreg free
  4254                           
  4255                           ;Lab9pC.c: 269: Init_ADC();
  4256  002578  EC5E  F013         	call	_Init_ADC	;wreg free
  4257                           
  4258                           ;Lab9pC.c: 271: OSCCON = 0x70;
  4259  00257C  0E70               	movlw	112
  4260  00257E  6ED3               	movwf	4051,c	;volatile
  4261                           
  4262                           ;Lab9pC.c: 272: TRISB = 0x07;
  4263  002580  0E07               	movlw	7
  4264  002582  6E93               	movwf	3987,c	;volatile
  4265                           
  4266                           ;Lab9pC.c: 275: INTCONbits.INT0IF = 0;
  4267  002584  92F2               	bcf	intcon,1,c	;volatile
  4268                           
  4269                           ;Lab9pC.c: 276: INTCON3bits.INT1IF = 0;
  4270  002586  90F0               	bcf	intcon3,0,c	;volatile
  4271                           
  4272                           ;Lab9pC.c: 277: INTCON3bits.INT2IF =0;
  4273  002588  92F0               	bcf	intcon3,1,c	;volatile
  4274                           
  4275                           ;Lab9pC.c: 279: INTCON2bits.INTEDG0=0 ;
  4276  00258A  9CF1               	bcf	intcon2,6,c	;volatile
  4277                           
  4278                           ;Lab9pC.c: 280: INTCON2bits.INTEDG1=0;
  4279  00258C  9AF1               	bcf	intcon2,5,c	;volatile
  4280                           
  4281                           ;Lab9pC.c: 281: INTCON2bits.INTEDG2=0;
  4282  00258E  98F1               	bcf	intcon2,4,c	;volatile
  4283                           
  4284                           ;Lab9pC.c: 283: INTCONbits.INT0IE =1;
  4285  002590  88F2               	bsf	intcon,4,c	;volatile
  4286                           
  4287                           ;Lab9pC.c: 284: INTCON3bits.INT1IE=1;
  4288  002592  86F0               	bsf	intcon3,3,c	;volatile
  4289                           
  4290                           ;Lab9pC.c: 285: INTCON3bits.INT2IE=1;
  4291  002594  88F0               	bsf	intcon3,4,c	;volatile
  4292                           
  4293                           ;Lab9pC.c: 287: INTCONbits.GIE=1;
  4294  002596  8EF2               	bsf	intcon,7,c	;volatile
  4295  002598  0012               	return		;funcret
  4296  00259A                     __end_of_Do_Init:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           intcon	equ	0xFF2
  4303                           intcon2	equ	0xFF1
  4304                           intcon3	equ	0xFF0
  4305                           postinc0	equ	0xFEE
  4306                           wreg	equ	0xFE8
  4307                           postdec1	equ	0xFE5
  4308                           fsr1l	equ	0xFE1
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _init_UART *****************
  4312 ;; Defined at:
  4313 ;;		line 248 in file "Lab9pC.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;		None
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;		None               void
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;Total ram usage:        0 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    3
  4334 ;; This function calls:
  4335 ;;		_OpenUSART
  4336 ;; This function is called by:
  4337 ;;		_Do_Init
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text15
  4343  002650                     __ptext15:
  4344                           	opt stack 0
  4345  002650                     _init_UART:
  4346                           	opt stack 27
  4347                           
  4348                           ;Lab9pC.c: 250: OpenUSART (0b01111111 & 0b10111111 &
  4349                           ;Lab9pC.c: 251: 0b11111110 & 0b11111101 & 0b11111111 &
  4350                           ;Lab9pC.c: 252: 0b11111111, 25);
  4351                           
  4352                           ;incstack = 0
  4353  002650  0E00               	movlw	0
  4354  002652  6E10               	movwf	OpenUSART@spbrg+1,c
  4355  002654  0E19               	movlw	25
  4356  002656  6E0F               	movwf	OpenUSART@spbrg,c
  4357  002658  0E3C               	movlw	60
  4358  00265A  ECBD  F00F         	call	_OpenUSART
  4359                           
  4360                           ;Lab9pC.c: 253: OSCCON = 0x60;
  4361  00265E  0E60               	movlw	96
  4362  002660  6ED3               	movwf	4051,c	;volatile
  4363  002662  0012               	return		;funcret
  4364  002664                     __end_of_init_UART:
  4365                           	opt stack 0
  4366                           tblptru	equ	0xFF8
  4367                           tblptrh	equ	0xFF7
  4368                           tblptrl	equ	0xFF6
  4369                           tablat	equ	0xFF5
  4370                           intcon	equ	0xFF2
  4371                           intcon2	equ	0xFF1
  4372                           intcon3	equ	0xFF0
  4373                           postinc0	equ	0xFEE
  4374                           wreg	equ	0xFE8
  4375                           postdec1	equ	0xFE5
  4376                           fsr1l	equ	0xFE1
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _OpenUSART *****************
  4380 ;; Defined at:
  4381 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;  config          1    wreg     unsigned char 
  4384 ;;  spbrg           2   14[COMRAM] unsigned int 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  config          1   16[COMRAM] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;		None               void
  4389 ;; Registers used:
  4390 ;;		wreg, status,2
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;Total ram usage:        3 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    2
  4403 ;; This function calls:
  4404 ;;		Nothing
  4405 ;; This function is called by:
  4406 ;;		_init_UART
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text16
  4411  001F7A                     __ptext16:
  4412                           	opt stack 0
  4413  001F7A                     _OpenUSART:
  4414                           	opt stack 27
  4415                           
  4416                           ;incstack = 0
  4417                           ;OpenUSART@config stored from wreg
  4418  001F7A  6E11               	movwf	OpenUSART@config,c
  4419  001F7C  0E00               	movlw	0
  4420  001F7E  6EAC               	movwf	4012,c	;volatile
  4421  001F80  0E00               	movlw	0
  4422  001F82  6EAB               	movwf	4011,c	;volatile
  4423  001F84  A011               	btfss	OpenUSART@config,0,c
  4424  001F86  D002               	goto	l4892
  4425  001F88  88AC               	bsf	4012,4,c	;volatile
  4426  001F8A  D000               	goto	l4892
  4427  001F8C                     l4892:
  4428  001F8C  A211               	btfss	OpenUSART@config,1,c
  4429  001F8E  D003               	goto	l4896
  4430  001F90  8CAC               	bsf	4012,6,c	;volatile
  4431  001F92  8CAB               	bsf	4011,6,c	;volatile
  4432  001F94  D000               	goto	l4896
  4433  001F96                     l4896:
  4434  001F96  A411               	btfss	OpenUSART@config,2,c
  4435  001F98  D002               	goto	l4900
  4436  001F9A  8EAC               	bsf	4012,7,c	;volatile
  4437  001F9C  D000               	goto	l4900
  4438  001F9E                     l4900:
  4439  001F9E  A611               	btfss	OpenUSART@config,3,c
  4440  001FA0  D002               	goto	l577
  4441  001FA2  88AB               	bsf	4011,4,c	;volatile
  4442  001FA4  D002               	goto	l4904
  4443  001FA6                     l577:
  4444  001FA6  8AAB               	bsf	4011,5,c	;volatile
  4445  001FA8  D000               	goto	l4904
  4446  001FAA                     l4904:
  4447  001FAA  B811               	btfsc	OpenUSART@config,4,c
  4448  001FAC  84AC               	bsf	4012,2,c	;volatile
  4449  001FAE  989E               	bcf	3998,4,c	;volatile
  4450  001FB0  AA11               	btfss	OpenUSART@config,5,c
  4451  001FB2  D002               	goto	l4912
  4452  001FB4  86AB               	bsf	4011,3,c	;volatile
  4453  001FB6  D000               	goto	l4912
  4454  001FB8                     l4912:
  4455  001FB8  AC11               	btfss	OpenUSART@config,6,c
  4456  001FBA  D002               	goto	l581
  4457  001FBC  8A9D               	bsf	3997,5,c	;volatile
  4458  001FBE  D001               	goto	l582
  4459  001FC0                     l581:
  4460  001FC0  9A9D               	bcf	3997,5,c	;volatile
  4461  001FC2                     l582:
  4462  001FC2  9A9E               	bcf	3998,5,c	;volatile
  4463  001FC4  AE11               	btfss	OpenUSART@config,7,c
  4464  001FC6  D002               	goto	l583
  4465  001FC8  889D               	bsf	3997,4,c	;volatile
  4466  001FCA  D001               	goto	l584
  4467  001FCC                     l583:
  4468  001FCC  989D               	bcf	3997,4,c	;volatile
  4469  001FCE                     l584:
  4470  001FCE  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4471  001FD2  5010               	movf	OpenUSART@spbrg+1,w,c
  4472  001FD4  6EB0               	movwf	4016,c	;volatile
  4473  001FD6  8AAC               	bsf	4012,5,c	;volatile
  4474  001FD8  8EAB               	bsf	4011,7,c	;volatile
  4475  001FDA  9C94               	bcf	3988,6,c	;volatile
  4476  001FDC  8E94               	bsf	3988,7,c	;volatile
  4477  001FDE  B8AC               	btfsc	4012,4,c	;volatile
  4478  001FE0  BEAC               	btfsc	4012,7,c	;volatile
  4479  001FE2  D002               	goto	l586
  4480  001FE4  8C94               	bsf	3988,6,c	;volatile
  4481  001FE6  D000               	goto	l586
  4482  001FE8                     l586:
  4483  001FE8  0012               	return		;funcret
  4484  001FEA                     __end_of_OpenUSART:
  4485                           	opt stack 0
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           intcon	equ	0xFF2
  4491                           intcon2	equ	0xFF1
  4492                           intcon3	equ	0xFF0
  4493                           postinc0	equ	0xFEE
  4494                           wreg	equ	0xFE8
  4495                           postdec1	equ	0xFE5
  4496                           fsr1l	equ	0xFE1
  4497                           status	equ	0xFD8
  4498                           
  4499 ;; *************** function _Init_ADC *****************
  4500 ;; Defined at:
  4501 ;;		line 390 in file "Lab9pC.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;		None               void
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;Total ram usage:        0 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    2
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_Do_Init
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text17
  4530  0026BC                     __ptext17:
  4531                           	opt stack 0
  4532  0026BC                     _Init_ADC:
  4533                           	opt stack 27
  4534                           
  4535                           ;Lab9pC.c: 392: ADCON0 = 0x01;
  4536                           
  4537                           ;incstack = 0
  4538  0026BC  0E01               	movlw	1
  4539  0026BE  6EC2               	movwf	4034,c	;volatile
  4540                           
  4541                           ;Lab9pC.c: 393: ADCON1= 0x0E;
  4542  0026C0  0E0E               	movlw	14
  4543  0026C2  6EC1               	movwf	4033,c	;volatile
  4544                           
  4545                           ;Lab9pC.c: 394: ADCON2= 0xA9;
  4546  0026C4  0EA9               	movlw	169
  4547  0026C6  6EC0               	movwf	4032,c	;volatile
  4548  0026C8  0012               	return		;funcret
  4549  0026CA                     __end_of_Init_ADC:
  4550                           	opt stack 0
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           intcon	equ	0xFF2
  4556                           intcon2	equ	0xFF1
  4557                           intcon3	equ	0xFF0
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           postdec1	equ	0xFE5
  4561                           fsr1l	equ	0xFE1
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _Do_Flashing *****************
  4565 ;; Defined at:
  4566 ;;		line 324 in file "Lab9pC.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  FLASHING        1   10[BANK0 ] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;		None               void
  4573 ;; Registers used:
  4574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;Total ram usage:        1 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:   11
  4587 ;; This function calls:
  4588 ;;		_Set_EW
  4589 ;;		_Set_EW_LT
  4590 ;;		_Set_NS
  4591 ;;		_Set_NS_LT
  4592 ;;		_Wait_One_Second
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text18
  4599  0020B2                     __ptext18:
  4600                           	opt stack 0
  4601  0020B2                     _Do_Flashing:
  4602                           	opt stack 19
  4603                           
  4604                           ;Lab9pC.c: 326: char FLASHING = 1;
  4605                           
  4606                           ;incstack = 0
  4607  0020B2  0E01               	movlw	1
  4608  0020B4  0100               	movlb	0	; () banked
  4609  0020B6  6FA9               	movwf	Do_Flashing@FLASHING& (0+255),b
  4610                           
  4611                           ;Lab9pC.c: 327: FLASHING_REQUEST = 0;
  4612  0020B8  0E00               	movlw	0
  4613  0020BA  6E4E               	movwf	_FLASHING_REQUEST,c
  4614                           
  4615                           ;Lab9pC.c: 328: while(FLASHING == 1)
  4616  0020BC  D026               	goto	l5286
  4617  0020BE                     l5268:
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;Lab9pC.c: 329: {
  4621                           ;Lab9pC.c: 330: if(FLASHING_REQUEST == 1)
  4622  0020BE  044E               	decf	_FLASHING_REQUEST,w,c
  4623  0020C0  A4D8               	btfss	status,2,c
  4624  0020C2  D006               	goto	l5272
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;Lab9pC.c: 331: {
  4628                           ;Lab9pC.c: 332: FLASHING_REQUEST = 0;
  4629  0020C4  0E00               	movlw	0
  4630  0020C6  6E4E               	movwf	_FLASHING_REQUEST,c
  4631                           
  4632                           ;Lab9pC.c: 333: FLASHING = 0;
  4633  0020C8  0E00               	movlw	0
  4634  0020CA  0100               	movlb	0	; () banked
  4635  0020CC  6FA9               	movwf	Do_Flashing@FLASHING& (0+255),b
  4636                           
  4637                           ;Lab9pC.c: 334: }
  4638  0020CE  D01D               	goto	l5286
  4639  0020D0                     l5272:
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;Lab9pC.c: 335: else
  4643                           ;Lab9pC.c: 336: {
  4644                           ;Lab9pC.c: 337: Set_NS(1);
  4645  0020D0  0E01               	movlw	1
  4646  0020D2  EC7D  F011         	call	_Set_NS
  4647                           
  4648                           ;Lab9pC.c: 338: Set_NS_LT(1);
  4649  0020D6  0E01               	movlw	1
  4650  0020D8  EC59  F011         	call	_Set_NS_LT
  4651                           
  4652                           ;Lab9pC.c: 339: Set_EW(1);
  4653  0020DC  0E01               	movlw	1
  4654  0020DE  ECC5  F011         	call	_Set_EW
  4655                           
  4656                           ;Lab9pC.c: 340: Set_EW_LT(1);
  4657  0020E2  0E01               	movlw	1
  4658  0020E4  ECA1  F011         	call	_Set_EW_LT
  4659                           
  4660                           ;Lab9pC.c: 341: Wait_One_Second();
  4661  0020E8  EC3B  F00F         	call	_Wait_One_Second	;wreg free
  4662                           
  4663                           ;Lab9pC.c: 342: Set_NS(0);
  4664  0020EC  0E00               	movlw	0
  4665  0020EE  EC7D  F011         	call	_Set_NS
  4666                           
  4667                           ;Lab9pC.c: 343: Set_NS_LT(0);
  4668  0020F2  0E00               	movlw	0
  4669  0020F4  EC59  F011         	call	_Set_NS_LT
  4670                           
  4671                           ;Lab9pC.c: 344: Set_EW(0);
  4672  0020F8  0E00               	movlw	0
  4673  0020FA  ECC5  F011         	call	_Set_EW
  4674                           
  4675                           ;Lab9pC.c: 345: Set_EW_LT(0);
  4676  0020FE  0E00               	movlw	0
  4677  002100  ECA1  F011         	call	_Set_EW_LT
  4678                           
  4679                           ;Lab9pC.c: 346: Wait_One_Second();
  4680  002104  EC3B  F00F         	call	_Wait_One_Second	;wreg free
  4681  002108  D000               	goto	l5286
  4682  00210A                     l5286:
  4683  00210A  0100               	movlb	0	; () banked
  4684  00210C  05A9               	decf	Do_Flashing@FLASHING& (0+255),w,b
  4685  00210E  B4D8               	btfsc	status,2,c
  4686  002110  D7D6               	goto	l5268
  4687                           
  4688                           ; BSR set to: 0
  4689                           
  4690                           ; BSR set to: 0
  4691  002112  0012               	return		;funcret
  4692  002114                     __end_of_Do_Flashing:
  4693                           	opt stack 0
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           intcon	equ	0xFF2
  4699                           intcon2	equ	0xFF1
  4700                           intcon3	equ	0xFF0
  4701                           postinc0	equ	0xFEE
  4702                           wreg	equ	0xFE8
  4703                           postdec1	equ	0xFE5
  4704                           fsr1l	equ	0xFE1
  4705                           status	equ	0xFD8
  4706                           
  4707 ;; *************** function _Day_Mode *****************
  4708 ;; Defined at:
  4709 ;;		line 497 in file "Lab9pC.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;		None
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;		None
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;Total ram usage:        0 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:   12
  4730 ;; This function calls:
  4731 ;;		_PED_Control
  4732 ;;		_Set_EW
  4733 ;;		_Set_EW_LT
  4734 ;;		_Set_NS
  4735 ;;		_Set_NS_LT
  4736 ;;		_Wait_N_Seconds
  4737 ;; This function is called by:
  4738 ;;		_main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text19
  4743  00175E                     __ptext19:
  4744                           	opt stack 0
  4745  00175E                     _Day_Mode:
  4746                           	opt stack 18
  4747                           
  4748                           ;Lab9pC.c: 499: MODE = 1;
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;incstack = 0
  4752  00175E  0E00               	movlw	0
  4753  001760  6E46               	movwf	_MODE+1,c
  4754  001762  0E01               	movlw	1
  4755  001764  6E45               	movwf	_MODE,c
  4756                           
  4757                           ;Lab9pC.c: 500: PORTBbits.RB7 = 1;
  4758  001766  8E81               	bsf	3969,7,c	;volatile
  4759                           
  4760                           ;Lab9pC.c: 501: Act_Mode_Txt[0] = 'D';
  4761  001768  0E44               	movlw	68
  4762  00176A  6E62               	movwf	_Act_Mode_Txt,c
  4763                           
  4764                           ;Lab9pC.c: 503: Set_NS(2);
  4765  00176C  0E02               	movlw	2
  4766  00176E  EC7D  F011         	call	_Set_NS
  4767                           
  4768                           ;Lab9pC.c: 504: Set_NS_LT(1);
  4769  001772  0E01               	movlw	1
  4770  001774  EC59  F011         	call	_Set_NS_LT
  4771                           
  4772                           ;Lab9pC.c: 505: Set_EW(1);
  4773  001778  0E01               	movlw	1
  4774  00177A  ECC5  F011         	call	_Set_EW
  4775                           
  4776                           ;Lab9pC.c: 506: Set_EW_LT(1);
  4777  00177E  0E01               	movlw	1
  4778  001780  ECA1  F011         	call	_Set_EW_LT
  4779                           
  4780                           ;Lab9pC.c: 507: if(NS_PED_SW == 1)
  4781  001784  044F               	decf	_NS_PED_SW,w,c
  4782  001786  A4D8               	btfss	status,2,c
  4783  001788  D007               	goto	l5306
  4784                           
  4785                           ;Lab9pC.c: 508: {
  4786                           ;Lab9pC.c: 509: PED_Control(0,7);
  4787  00178A  0E07               	movlw	7
  4788  00178C  0100               	movlb	0	; () banked
  4789  00178E  6FA9               	movwf	PED_Control@Num_Sec& (0+255),b
  4790  001790  0E00               	movlw	0
  4791  001792  EC8A  F010         	call	_PED_Control
  4792  001796  D000               	goto	l5306
  4793  001798                     l5306:
  4794                           
  4795                           ;Lab9pC.c: 510: }
  4796                           ;Lab9pC.c: 511: Set_NS(2);
  4797  001798  0E02               	movlw	2
  4798  00179A  EC7D  F011         	call	_Set_NS
  4799                           
  4800                           ;Lab9pC.c: 512: Wait_N_Seconds(9);
  4801  00179E  0E09               	movlw	9
  4802  0017A0  EC45  F012         	call	_Wait_N_Seconds
  4803                           
  4804                           ;Lab9pC.c: 513: Set_NS(3);
  4805  0017A4  0E03               	movlw	3
  4806  0017A6  EC7D  F011         	call	_Set_NS
  4807                           
  4808                           ;Lab9pC.c: 514: Wait_N_Seconds(3);
  4809  0017AA  0E03               	movlw	3
  4810  0017AC  EC45  F012         	call	_Wait_N_Seconds
  4811                           
  4812                           ;Lab9pC.c: 515: Set_NS(1);
  4813  0017B0  0E01               	movlw	1
  4814  0017B2  EC7D  F011         	call	_Set_NS
  4815                           
  4816                           ;Lab9pC.c: 516: if(PORTAbits.RA2 == 1)
  4817  0017B6  A480               	btfss	3968,2,c	;volatile
  4818  0017B8  D010               	goto	l5324
  4819                           
  4820                           ;Lab9pC.c: 517: {
  4821                           ;Lab9pC.c: 518: Set_EW_LT(2);
  4822  0017BA  0E02               	movlw	2
  4823  0017BC  ECA1  F011         	call	_Set_EW_LT
  4824                           
  4825                           ;Lab9pC.c: 519: Wait_N_Seconds(6);
  4826  0017C0  0E06               	movlw	6
  4827  0017C2  EC45  F012         	call	_Wait_N_Seconds
  4828                           
  4829                           ;Lab9pC.c: 521: Set_EW_LT(3);
  4830  0017C6  0E03               	movlw	3
  4831  0017C8  ECA1  F011         	call	_Set_EW_LT
  4832                           
  4833                           ;Lab9pC.c: 522: Wait_N_Seconds(3);
  4834  0017CC  0E03               	movlw	3
  4835  0017CE  EC45  F012         	call	_Wait_N_Seconds
  4836                           
  4837                           ;Lab9pC.c: 524: Set_EW_LT(1);
  4838  0017D2  0E01               	movlw	1
  4839  0017D4  ECA1  F011         	call	_Set_EW_LT
  4840  0017D8  D000               	goto	l5324
  4841  0017DA                     l5324:
  4842                           
  4843                           ;Lab9pC.c: 525: }
  4844                           ;Lab9pC.c: 527: Set_EW(2);
  4845  0017DA  0E02               	movlw	2
  4846  0017DC  ECC5  F011         	call	_Set_EW
  4847                           
  4848                           ;Lab9pC.c: 528: if(EW_PED_SW == 1)
  4849  0017E0  044C               	decf	_EW_PED_SW,w,c
  4850  0017E2  A4D8               	btfss	status,2,c
  4851  0017E4  D006               	goto	l486
  4852                           
  4853                           ;Lab9pC.c: 529: {
  4854                           ;Lab9pC.c: 530: PED_Control(2,10);
  4855  0017E6  0E0A               	movlw	10
  4856  0017E8  0100               	movlb	0	; () banked
  4857  0017EA  6FA9               	movwf	PED_Control@Num_Sec& (0+255),b
  4858  0017EC  0E02               	movlw	2
  4859  0017EE  EC8A  F010         	call	_PED_Control
  4860  0017F2                     l486:
  4861                           
  4862                           ;Lab9pC.c: 531: }
  4863                           ;Lab9pC.c: 533: Wait_N_Seconds(7);
  4864  0017F2  0E07               	movlw	7
  4865  0017F4  EC45  F012         	call	_Wait_N_Seconds
  4866                           
  4867                           ;Lab9pC.c: 535: Set_EW(3);
  4868  0017F8  0E03               	movlw	3
  4869  0017FA  ECC5  F011         	call	_Set_EW
  4870                           
  4871                           ;Lab9pC.c: 536: Wait_N_Seconds(3);
  4872  0017FE  0E03               	movlw	3
  4873  001800  EC45  F012         	call	_Wait_N_Seconds
  4874                           
  4875                           ;Lab9pC.c: 538: Set_EW(1);
  4876  001804  0E01               	movlw	1
  4877  001806  ECC5  F011         	call	_Set_EW
  4878                           
  4879                           ;Lab9pC.c: 540: if(PORTAbits.RA1 == 1)
  4880  00180A  A280               	btfss	3968,1,c	;volatile
  4881  00180C  D010               	goto	l488
  4882                           
  4883                           ;Lab9pC.c: 541: {
  4884                           ;Lab9pC.c: 542: Set_NS_LT(2);
  4885  00180E  0E02               	movlw	2
  4886  001810  EC59  F011         	call	_Set_NS_LT
  4887                           
  4888                           ;Lab9pC.c: 543: Wait_N_Seconds(6);
  4889  001814  0E06               	movlw	6
  4890  001816  EC45  F012         	call	_Wait_N_Seconds
  4891                           
  4892                           ;Lab9pC.c: 545: Set_NS_LT(3);
  4893  00181A  0E03               	movlw	3
  4894  00181C  EC59  F011         	call	_Set_NS_LT
  4895                           
  4896                           ;Lab9pC.c: 546: Wait_N_Seconds(3);
  4897  001820  0E03               	movlw	3
  4898  001822  EC45  F012         	call	_Wait_N_Seconds
  4899                           
  4900                           ;Lab9pC.c: 548: Set_NS_LT(1);
  4901  001826  0E01               	movlw	1
  4902  001828  EC59  F011         	call	_Set_NS_LT
  4903  00182C  D000               	goto	l488
  4904  00182E                     l488:
  4905  00182E  0012               	return		;funcret
  4906  001830                     __end_of_Day_Mode:
  4907                           	opt stack 0
  4908                           tblptru	equ	0xFF8
  4909                           tblptrh	equ	0xFF7
  4910                           tblptrl	equ	0xFF6
  4911                           tablat	equ	0xFF5
  4912                           intcon	equ	0xFF2
  4913                           intcon2	equ	0xFF1
  4914                           intcon3	equ	0xFF0
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           postdec1	equ	0xFE5
  4918                           fsr1l	equ	0xFE1
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function _Wait_N_Seconds *****************
  4922 ;; Defined at:
  4923 ;;		line 642 in file "Lab9pC.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  seconds         1    wreg     unsigned char 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  seconds         1   10[BANK0 ] unsigned char 
  4928 ;;  I               1   11[BANK0 ] unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;		None               void
  4931 ;; Registers used:
  4932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;Total ram usage:        2 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:   11
  4945 ;; This function calls:
  4946 ;;		_Wait_One_Second
  4947 ;;		_update_LCD_count
  4948 ;; This function is called by:
  4949 ;;		_Day_Mode
  4950 ;;		_Night_Mode
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text20
  4955  00248A                     __ptext20:
  4956                           	opt stack 0
  4957  00248A                     _Wait_N_Seconds:
  4958                           	opt stack 18
  4959                           
  4960                           ;incstack = 0
  4961                           ;Wait_N_Seconds@seconds stored from wreg
  4962  00248A  0100               	movlb	0	; () banked
  4963  00248C  6FA9               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;Lab9pC.c: 644: char I;
  4967                           ;Lab9pC.c: 645: for (I = seconds; I> 0; I--)
  4968  00248E  C0A9  F0AA         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4969  002492                     l5112:
  4970                           
  4971                           ; BSR set to: 0
  4972  002492  0100               	movlb	0	; () banked
  4973  002494  51AA               	movf	Wait_N_Seconds@I& (0+255),w,b
  4974  002496  0100               	movlb	0	; () banked
  4975  002498  B4D8               	btfsc	status,2,c
  4976  00249A  D00C               	goto	l5122
  4977  00249C  D001               	goto	l5116
  4978                           
  4979                           ; BSR set to: 0
  4980  00249E  D00A               	goto	l5122
  4981  0024A0                     l5116:
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;Lab9pC.c: 646: {
  4985                           ;Lab9pC.c: 647: update_LCD_count(direction, I);
  4986  0024A0  C0AA  F041         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4987  0024A4  5059               	movf	_direction,w,c
  4988  0024A6  EC3E  F007         	call	_update_LCD_count
  4989                           
  4990                           ;Lab9pC.c: 648: Wait_One_Second();
  4991  0024AA  EC3B  F00F         	call	_Wait_One_Second	;wreg free
  4992  0024AE  0100               	movlb	0	; () banked
  4993  0024B0  07AA               	decf	Wait_N_Seconds@I& (0+255),f,b
  4994  0024B2  D7EF               	goto	l5112
  4995  0024B4                     l5122:
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;Lab9pC.c: 649: }
  4999                           ;Lab9pC.c: 650: update_LCD_count(direction, 0);
  5000  0024B4  0E00               	movlw	0
  5001  0024B6  6E41               	movwf	update_LCD_count@count,c
  5002  0024B8  5059               	movf	_direction,w,c
  5003  0024BA  EC3E  F007         	call	_update_LCD_count
  5004  0024BE  0012               	return		;funcret
  5005  0024C0                     __end_of_Wait_N_Seconds:
  5006                           	opt stack 0
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           intcon	equ	0xFF2
  5012                           intcon2	equ	0xFF1
  5013                           intcon3	equ	0xFF0
  5014                           postinc0	equ	0xFEE
  5015                           wreg	equ	0xFE8
  5016                           postdec1	equ	0xFE5
  5017                           fsr1l	equ	0xFE1
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _update_LCD_count *****************
  5021 ;; Defined at:
  5022 ;;		line 700 in file "Lab9pC.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  direction       1    wreg     unsigned char 
  5025 ;;  count           1   64[COMRAM] unsigned char 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  direction       1    7[BANK0 ] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:        2 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    9
  5044 ;; This function calls:
  5045 ;;		___awdiv
  5046 ;;		___awmod
  5047 ;;		_drawtext
  5048 ;; This function is called by:
  5049 ;;		_Wait_N_Seconds
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text21
  5054  000E7C                     __ptext21:
  5055                           	opt stack 0
  5056  000E7C                     _update_LCD_count:
  5057                           	opt stack 19
  5058                           
  5059                           ;incstack = 0
  5060                           ;update_LCD_count@direction stored from wreg
  5061  000E7C  0100               	movlb	0	; () banked
  5062  000E7E  6FA6               	movwf	update_LCD_count@direction& (0+255),b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;Lab9pC.c: 702: switch (direction)
  5066  000E80  D0B2               	goto	l5022
  5067  000E82                     l5004:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;Lab9pC.c: 705: NS_Count[0] = count/10 + '0';
  5071  000E82  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5072  000E86  6A10               	clrf	___awdiv@dividend+1,c
  5073  000E88  0E00               	movlw	0
  5074  000E8A  6E12               	movwf	___awdiv@divisor+1,c
  5075  000E8C  0E0A               	movlw	10
  5076  000E8E  6E11               	movwf	___awdiv@divisor,c
  5077  000E90  EC95  F00D         	call	___awdiv	;wreg free
  5078  000E94  500F               	movf	?___awdiv,w,c
  5079  000E96  0F30               	addlw	48
  5080  000E98  6E5F               	movwf	_NS_Count,c
  5081                           
  5082                           ;Lab9pC.c: 706: NS_Count[1] = count%10 + '0';
  5083  000E9A  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5084  000E9E  6A10               	clrf	___awmod@dividend+1,c
  5085  000EA0  0E00               	movlw	0
  5086  000EA2  6E12               	movwf	___awmod@divisor+1,c
  5087  000EA4  0E0A               	movlw	10
  5088  000EA6  6E11               	movwf	___awmod@divisor,c
  5089  000EA8  EC7C  F00F         	call	___awmod	;wreg free
  5090  000EAC  500F               	movf	?___awmod,w,c
  5091  000EAE  0F30               	addlw	48
  5092  000EB0  6E60               	movwf	_NS_Count+1,c
  5093                           
  5094                           ;Lab9pC.c: 707: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  5095  000EB2  0E1E               	movlw	30
  5096  000EB4  6E37               	movwf	drawtext@y,c
  5097  000EB6  0E5F               	movlw	low _NS_Count
  5098  000EB8  6E38               	movwf	drawtext@_text,c
  5099  000EBA  0E00               	movlw	high _NS_Count
  5100  000EBC  6E39               	movwf	drawtext@_text+1,c
  5101  000EBE  0E00               	movlw	0
  5102  000EC0  6E3B               	movwf	drawtext@color+1,c
  5103  000EC2  0E1F               	movlw	31
  5104  000EC4  6E3A               	movwf	drawtext@color,c
  5105  000EC6  0E00               	movlw	0
  5106  000EC8  6E3D               	movwf	drawtext@bg+1,c
  5107  000ECA  0E00               	movlw	0
  5108  000ECC  6E3C               	movwf	drawtext@bg,c
  5109  000ECE  0E02               	movlw	2
  5110  000ED0  6E3E               	movwf	drawtext@size,c
  5111  000ED2  0E64               	movlw	100
  5112  000ED4  ECD2  F009         	call	_drawtext
  5113                           
  5114                           ;Lab9pC.c: 708: break;
  5115  000ED8  D095               	goto	l529
  5116  000EDA                     l5008:
  5117                           
  5118                           ;Lab9pC.c: 711: NSLT_Count[0] = count/10 + '0';
  5119  000EDA  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5120  000EDE  6A10               	clrf	___awdiv@dividend+1,c
  5121  000EE0  0E00               	movlw	0
  5122  000EE2  6E12               	movwf	___awdiv@divisor+1,c
  5123  000EE4  0E0A               	movlw	10
  5124  000EE6  6E11               	movwf	___awdiv@divisor,c
  5125  000EE8  EC95  F00D         	call	___awdiv	;wreg free
  5126  000EEC  500F               	movf	?___awdiv,w,c
  5127  000EEE  0F30               	addlw	48
  5128  000EF0  6E5C               	movwf	_NSLT_Count,c
  5129                           
  5130                           ;Lab9pC.c: 712: NSLT_Count[1] = count%10 + '0';
  5131  000EF2  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5132  000EF6  6A10               	clrf	___awmod@dividend+1,c
  5133  000EF8  0E00               	movlw	0
  5134  000EFA  6E12               	movwf	___awmod@divisor+1,c
  5135  000EFC  0E0A               	movlw	10
  5136  000EFE  6E11               	movwf	___awmod@divisor,c
  5137  000F00  EC7C  F00F         	call	___awmod	;wreg free
  5138  000F04  500F               	movf	?___awmod,w,c
  5139  000F06  0F30               	addlw	48
  5140  000F08  6E5D               	movwf	_NSLT_Count+1,c
  5141                           
  5142                           ;Lab9pC.c: 713: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5143  000F0A  0E3C               	movlw	60
  5144  000F0C  6E37               	movwf	drawtext@y,c
  5145  000F0E  0E5C               	movlw	low _NSLT_Count
  5146  000F10  6E38               	movwf	drawtext@_text,c
  5147  000F12  0E00               	movlw	high _NSLT_Count
  5148  000F14  6E39               	movwf	drawtext@_text+1,c
  5149  000F16  0EF8               	movlw	248
  5150  000F18  6E3B               	movwf	drawtext@color+1,c
  5151  000F1A  0E1F               	movlw	31
  5152  000F1C  6E3A               	movwf	drawtext@color,c
  5153  000F1E  0E00               	movlw	0
  5154  000F20  6E3D               	movwf	drawtext@bg+1,c
  5155  000F22  0E00               	movlw	0
  5156  000F24  6E3C               	movwf	drawtext@bg,c
  5157  000F26  0E02               	movlw	2
  5158  000F28  6E3E               	movwf	drawtext@size,c
  5159  000F2A  0E64               	movlw	100
  5160  000F2C  ECD2  F009         	call	_drawtext
  5161                           
  5162                           ;Lab9pC.c: 714: break;
  5163  000F30  D069               	goto	l529
  5164  000F32                     l5012:
  5165                           
  5166                           ;Lab9pC.c: 717: EW_Count[0] = count/10 + '0';
  5167  000F32  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5168  000F36  6A10               	clrf	___awdiv@dividend+1,c
  5169  000F38  0E00               	movlw	0
  5170  000F3A  6E12               	movwf	___awdiv@divisor+1,c
  5171  000F3C  0E0A               	movlw	10
  5172  000F3E  6E11               	movwf	___awdiv@divisor,c
  5173  000F40  EC95  F00D         	call	___awdiv	;wreg free
  5174  000F44  500F               	movf	?___awdiv,w,c
  5175  000F46  0F30               	addlw	48
  5176  000F48  0100               	movlb	0	; () banked
  5177  000F4A  6FB1               	movwf	_EW_Count& (0+255),b
  5178                           
  5179                           ;Lab9pC.c: 718: EW_Count[1] = count%10 + '0';
  5180  000F4C  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5181  000F50  6A10               	clrf	___awmod@dividend+1,c
  5182  000F52  0E00               	movlw	0
  5183  000F54  6E12               	movwf	___awmod@divisor+1,c
  5184  000F56  0E0A               	movlw	10
  5185  000F58  6E11               	movwf	___awmod@divisor,c
  5186  000F5A  EC7C  F00F         	call	___awmod	;wreg free
  5187  000F5E  500F               	movf	?___awmod,w,c
  5188  000F60  0F30               	addlw	48
  5189  000F62  0100               	movlb	0	; () banked
  5190  000F64  6FB2               	movwf	(_EW_Count+1)& (0+255),b
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;Lab9pC.c: 719: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5194  000F66  0E5A               	movlw	90
  5195  000F68  6E37               	movwf	drawtext@y,c
  5196  000F6A  0EB1               	movlw	low _EW_Count
  5197  000F6C  6E38               	movwf	drawtext@_text,c
  5198  000F6E  0E00               	movlw	high _EW_Count
  5199  000F70  6E39               	movwf	drawtext@_text+1,c
  5200  000F72  0E07               	movlw	7
  5201  000F74  6E3B               	movwf	drawtext@color+1,c
  5202  000F76  683A               	setf	drawtext@color,c
  5203  000F78  0E00               	movlw	0
  5204  000F7A  6E3D               	movwf	drawtext@bg+1,c
  5205  000F7C  0E00               	movlw	0
  5206  000F7E  6E3C               	movwf	drawtext@bg,c
  5207  000F80  0E02               	movlw	2
  5208  000F82  6E3E               	movwf	drawtext@size,c
  5209  000F84  0E64               	movlw	100
  5210  000F86  ECD2  F009         	call	_drawtext
  5211                           
  5212                           ;Lab9pC.c: 720: break;
  5213  000F8A  D03C               	goto	l529
  5214  000F8C                     l5016:
  5215                           
  5216                           ;Lab9pC.c: 723: EWLT_Count[0] = count/10 + '0';
  5217  000F8C  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5218  000F90  6A10               	clrf	___awdiv@dividend+1,c
  5219  000F92  0E00               	movlw	0
  5220  000F94  6E12               	movwf	___awdiv@divisor+1,c
  5221  000F96  0E0A               	movlw	10
  5222  000F98  6E11               	movwf	___awdiv@divisor,c
  5223  000F9A  EC95  F00D         	call	___awdiv	;wreg free
  5224  000F9E  500F               	movf	?___awdiv,w,c
  5225  000FA0  0F30               	addlw	48
  5226  000FA2  0100               	movlb	0	; () banked
  5227  000FA4  6FAE               	movwf	_EWLT_Count& (0+255),b
  5228                           
  5229                           ;Lab9pC.c: 724: EWLT_Count[1] = count%10 + '0';
  5230  000FA6  C041  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5231  000FAA  6A10               	clrf	___awmod@dividend+1,c
  5232  000FAC  0E00               	movlw	0
  5233  000FAE  6E12               	movwf	___awmod@divisor+1,c
  5234  000FB0  0E0A               	movlw	10
  5235  000FB2  6E11               	movwf	___awmod@divisor,c
  5236  000FB4  EC7C  F00F         	call	___awmod	;wreg free
  5237  000FB8  500F               	movf	?___awmod,w,c
  5238  000FBA  0F30               	addlw	48
  5239  000FBC  0100               	movlb	0	; () banked
  5240  000FBE  6FAF               	movwf	(_EWLT_Count+1)& (0+255),b
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;Lab9pC.c: 725: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5244  000FC0  0E78               	movlw	120
  5245  000FC2  6E37               	movwf	drawtext@y,c
  5246  000FC4  0EAE               	movlw	low _EWLT_Count
  5247  000FC6  6E38               	movwf	drawtext@_text,c
  5248  000FC8  0E00               	movlw	high _EWLT_Count
  5249  000FCA  6E39               	movwf	drawtext@_text+1,c
  5250  000FCC  0EFF               	movlw	255
  5251  000FCE  6E3B               	movwf	drawtext@color+1,c
  5252  000FD0  683A               	setf	drawtext@color,c
  5253  000FD2  0E00               	movlw	0
  5254  000FD4  6E3D               	movwf	drawtext@bg+1,c
  5255  000FD6  0E00               	movlw	0
  5256  000FD8  6E3C               	movwf	drawtext@bg,c
  5257  000FDA  0E02               	movlw	2
  5258  000FDC  6E3E               	movwf	drawtext@size,c
  5259  000FDE  0E64               	movlw	100
  5260  000FE0  ECD2  F009         	call	_drawtext
  5261                           
  5262                           ;Lab9pC.c: 727: }
  5263                           
  5264                           ;Lab9pC.c: 726: break;
  5265  000FE4  D00F               	goto	l529
  5266  000FE6                     l5022:
  5267  000FE6  0100               	movlb	0	; () banked
  5268  000FE8  51A6               	movf	update_LCD_count@direction& (0+255),w,b
  5269                           
  5270                           ; Switch size 1, requested type "space"
  5271                           ; Number of cases is 4, Range of values is 0 to 3
  5272                           ; switch strategies available:
  5273                           ; Name         Instructions Cycles
  5274                           ; simple_byte           13     7 (average)
  5275                           ;	Chosen strategy is simple_byte
  5276  000FEA  0A00               	xorlw	0	; case 0
  5277  000FEC  B4D8               	btfsc	status,2,c
  5278  000FEE  D749               	goto	l5004
  5279  000FF0  0A01               	xorlw	1	; case 1
  5280  000FF2  B4D8               	btfsc	status,2,c
  5281  000FF4  D772               	goto	l5008
  5282  000FF6  0A03               	xorlw	3	; case 2
  5283  000FF8  B4D8               	btfsc	status,2,c
  5284  000FFA  D79B               	goto	l5012
  5285  000FFC  0A01               	xorlw	1	; case 3
  5286  000FFE  B4D8               	btfsc	status,2,c
  5287  001000  D7C5               	goto	l5016
  5288  001002  D000               	goto	l529
  5289  001004                     l529:
  5290  001004  0012               	return		;funcret
  5291  001006                     __end_of_update_LCD_count:
  5292                           	opt stack 0
  5293                           tblptru	equ	0xFF8
  5294                           tblptrh	equ	0xFF7
  5295                           tblptrl	equ	0xFF6
  5296                           tablat	equ	0xFF5
  5297                           intcon	equ	0xFF2
  5298                           intcon2	equ	0xFF1
  5299                           intcon3	equ	0xFF0
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           postdec1	equ	0xFE5
  5303                           fsr1l	equ	0xFE1
  5304                           status	equ	0xFD8
  5305                           
  5306 ;; *************** function _Wait_One_Second *****************
  5307 ;; Defined at:
  5308 ;;		line 601 in file "Lab9pC.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;		None               void
  5315 ;; Registers used:
  5316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;Total ram usage:        0 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:   10
  5329 ;; This function calls:
  5330 ;;		_Wait_Half_Second
  5331 ;;		_drawtext
  5332 ;;		_strcpy
  5333 ;;		_update_LCD_misc
  5334 ;; This function is called by:
  5335 ;;		_Do_Flashing
  5336 ;;		_Wait_N_Seconds
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           	psect	text22
  5341  001E76                     __ptext22:
  5342                           	opt stack 0
  5343  001E76                     _Wait_One_Second:
  5344                           	opt stack 18
  5345                           
  5346                           ;Lab9pC.c: 603: PORTDbits.RD7 = 1;
  5347                           
  5348                           ;incstack = 0
  5349  001E76  8E83               	bsf	3971,7,c	;volatile
  5350                           
  5351                           ;Lab9pC.c: 604: strcpy(txt,"*");
  5352  001E78  C049  F00F         	movff	_txt,strcpy@to
  5353  001E7C  C04A  F010         	movff	_txt+1,strcpy@to+1
  5354  001E80  0EFD               	movlw	low STR_5
  5355  001E82  6E11               	movwf	strcpy@from,c
  5356  001E84  0EFF               	movlw	high STR_5
  5357  001E86  6E12               	movwf	strcpy@from+1,c
  5358  001E88  EC60  F012         	call	_strcpy	;wreg free
  5359                           
  5360                           ;Lab9pC.c: 605: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5361  001E8C  0E0A               	movlw	10
  5362  001E8E  6E37               	movwf	drawtext@y,c
  5363  001E90  C049  F038         	movff	_txt,drawtext@_text
  5364  001E94  C04A  F039         	movff	_txt+1,drawtext@_text+1
  5365  001E98  0EFF               	movlw	255
  5366  001E9A  6E3B               	movwf	drawtext@color+1,c
  5367  001E9C  683A               	setf	drawtext@color,c
  5368  001E9E  0E00               	movlw	0
  5369  001EA0  6E3D               	movwf	drawtext@bg+1,c
  5370  001EA2  0E00               	movlw	0
  5371  001EA4  6E3C               	movwf	drawtext@bg,c
  5372  001EA6  0E01               	movlw	1
  5373  001EA8  6E3E               	movwf	drawtext@size,c
  5374  001EAA  0E78               	movlw	120
  5375  001EAC  ECD2  F009         	call	_drawtext
  5376                           
  5377                           ;Lab9pC.c: 606: Wait_Half_Second();
  5378  001EB0  ECEE  F012         	call	_Wait_Half_Second	;wreg free
  5379                           
  5380                           ;Lab9pC.c: 608: PORTDbits.RD7 = 0;
  5381  001EB4  9E83               	bcf	3971,7,c	;volatile
  5382                           
  5383                           ;Lab9pC.c: 609: strcpy(txt," ");
  5384  001EB6  C049  F00F         	movff	_txt,strcpy@to
  5385  001EBA  C04A  F010         	movff	_txt+1,strcpy@to+1
  5386  001EBE  0EFB               	movlw	low STR_14
  5387  001EC0  6E11               	movwf	strcpy@from,c
  5388  001EC2  0EFF               	movlw	high STR_14
  5389  001EC4  6E12               	movwf	strcpy@from+1,c
  5390  001EC6  EC60  F012         	call	_strcpy	;wreg free
  5391                           
  5392                           ;Lab9pC.c: 610: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5393  001ECA  0E0A               	movlw	10
  5394  001ECC  6E37               	movwf	drawtext@y,c
  5395  001ECE  C049  F038         	movff	_txt,drawtext@_text
  5396  001ED2  C04A  F039         	movff	_txt+1,drawtext@_text+1
  5397  001ED6  0EFF               	movlw	255
  5398  001ED8  6E3B               	movwf	drawtext@color+1,c
  5399  001EDA  683A               	setf	drawtext@color,c
  5400  001EDC  0E00               	movlw	0
  5401  001EDE  6E3D               	movwf	drawtext@bg+1,c
  5402  001EE0  0E00               	movlw	0
  5403  001EE2  6E3C               	movwf	drawtext@bg,c
  5404  001EE4  0E01               	movlw	1
  5405  001EE6  6E3E               	movwf	drawtext@size,c
  5406  001EE8  0E78               	movlw	120
  5407  001EEA  ECD2  F009         	call	_drawtext
  5408                           
  5409                           ;Lab9pC.c: 611: Wait_Half_Second();
  5410  001EEE  ECEE  F012         	call	_Wait_Half_Second	;wreg free
  5411                           
  5412                           ;Lab9pC.c: 612: update_LCD_misc();
  5413  001EF2  EC51  F005         	call	_update_LCD_misc	;wreg free
  5414  001EF6  0012               	return		;funcret
  5415  001EF8                     __end_of_Wait_One_Second:
  5416                           	opt stack 0
  5417                           tblptru	equ	0xFF8
  5418                           tblptrh	equ	0xFF7
  5419                           tblptrl	equ	0xFF6
  5420                           tablat	equ	0xFF5
  5421                           intcon	equ	0xFF2
  5422                           intcon2	equ	0xFF1
  5423                           intcon3	equ	0xFF0
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           postdec1	equ	0xFE5
  5427                           fsr1l	equ	0xFE1
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function _Set_NS_LT *****************
  5431 ;; Defined at:
  5432 ;;		line 421 in file "Lab9pC.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  color           1    wreg     unsigned char 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  color           1    2[BANK0 ] unsigned char 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;		None               void
  5439 ;; Registers used:
  5440 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;Total ram usage:        1 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; Hardware stack levels required when called:    9
  5453 ;; This function calls:
  5454 ;;		_update_LCD_color
  5455 ;; This function is called by:
  5456 ;;		_Do_Flashing
  5457 ;;		_Day_Mode
  5458 ;;		_Night_Mode
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text23
  5463  0022B2                     __ptext23:
  5464                           	opt stack 0
  5465  0022B2                     _Set_NS_LT:
  5466                           	opt stack 20
  5467                           
  5468                           ;incstack = 0
  5469                           ;Set_NS_LT@color stored from wreg
  5470  0022B2  0100               	movlb	0	; () banked
  5471  0022B4  6FA1               	movwf	Set_NS_LT@color& (0+255),b
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;Lab9pC.c: 423: direction = 1;
  5475  0022B6  0E01               	movlw	1
  5476  0022B8  6E59               	movwf	_direction,c
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;Lab9pC.c: 424: update_LCD_color(direction, color);
  5480  0022BA  C0A1  F041         	movff	Set_NS_LT@color,update_LCD_color@color
  5481  0022BE  5059               	movf	_direction,w,c
  5482  0022C0  EC9D  F003         	call	_update_LCD_color
  5483                           
  5484                           ;Lab9pC.c: 426: switch(color)
  5485  0022C4  D00A               	goto	l5070
  5486  0022C6                     l443:
  5487                           
  5488                           ; BSR set to: 0
  5489  0022C6  9883               	bcf	3971,4,c	;volatile
  5490  0022C8  D001               	goto	L1
  5491  0022CA                     l445:
  5492                           
  5493                           ; BSR set to: 0
  5494  0022CA  8883               	bsf	3971,4,c	;volatile
  5495  0022CC                     L1:
  5496  0022CC  9A83               	bcf	3971,5,c	;volatile
  5497  0022CE  D014               	goto	l448
  5498  0022D0                     l446:
  5499                           
  5500                           ; BSR set to: 0
  5501  0022D0  9883               	bcf	3971,4,c	;volatile
  5502  0022D2  D001               	goto	L2
  5503  0022D4                     l447:
  5504                           
  5505                           ; BSR set to: 0
  5506  0022D4  8883               	bsf	3971,4,c	;volatile
  5507  0022D6                     L2:
  5508  0022D6  8A83               	bsf	3971,5,c	;volatile
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;Lab9pC.c: 432: }
  5512  0022D8  D00F               	goto	l448
  5513  0022DA                     l5070:
  5514  0022DA  0100               	movlb	0	; () banked
  5515  0022DC  51A1               	movf	Set_NS_LT@color& (0+255),w,b
  5516                           
  5517                           ; Switch size 1, requested type "space"
  5518                           ; Number of cases is 4, Range of values is 0 to 3
  5519                           ; switch strategies available:
  5520                           ; Name         Instructions Cycles
  5521                           ; simple_byte           13     7 (average)
  5522                           ;	Chosen strategy is simple_byte
  5523  0022DE  0A00               	xorlw	0	; case 0
  5524  0022E0  B4D8               	btfsc	status,2,c
  5525  0022E2  D7F1               	goto	l443
  5526  0022E4  0A01               	xorlw	1	; case 1
  5527  0022E6  B4D8               	btfsc	status,2,c
  5528  0022E8  D7F0               	goto	l445
  5529  0022EA  0A03               	xorlw	3	; case 2
  5530  0022EC  B4D8               	btfsc	status,2,c
  5531  0022EE  D7F0               	goto	l446
  5532  0022F0  0A01               	xorlw	1	; case 3
  5533  0022F2  B4D8               	btfsc	status,2,c
  5534  0022F4  D7EF               	goto	l447
  5535  0022F6  D000               	goto	l448
  5536  0022F8                     l448:
  5537                           
  5538                           ; BSR set to: 0
  5539  0022F8  0012               	return		;funcret
  5540  0022FA                     __end_of_Set_NS_LT:
  5541                           	opt stack 0
  5542                           tblptru	equ	0xFF8
  5543                           tblptrh	equ	0xFF7
  5544                           tblptrl	equ	0xFF6
  5545                           tablat	equ	0xFF5
  5546                           intcon	equ	0xFF2
  5547                           intcon2	equ	0xFF1
  5548                           intcon3	equ	0xFF0
  5549                           postinc0	equ	0xFEE
  5550                           wreg	equ	0xFE8
  5551                           postdec1	equ	0xFE5
  5552                           fsr1l	equ	0xFE1
  5553                           status	equ	0xFD8
  5554                           
  5555 ;; *************** function _Set_NS *****************
  5556 ;; Defined at:
  5557 ;;		line 407 in file "Lab9pC.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  color           1    wreg     unsigned char 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  color           1    2[BANK0 ] unsigned char 
  5562 ;; Return value:  Size  Location     Type
  5563 ;;		None               void
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;Total ram usage:        1 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; Hardware stack levels required when called:    9
  5578 ;; This function calls:
  5579 ;;		_update_LCD_color
  5580 ;; This function is called by:
  5581 ;;		_Do_Flashing
  5582 ;;		_Day_Mode
  5583 ;;		_Night_Mode
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text24
  5588  0022FA                     __ptext24:
  5589                           	opt stack 0
  5590  0022FA                     _Set_NS:
  5591                           	opt stack 20
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;incstack = 0
  5595                           ;Set_NS@color stored from wreg
  5596  0022FA  0100               	movlb	0	; () banked
  5597  0022FC  6FA1               	movwf	Set_NS@color& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;Lab9pC.c: 409: direction = 0;
  5601  0022FE  0E00               	movlw	0
  5602  002300  6E59               	movwf	_direction,c
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;Lab9pC.c: 410: update_LCD_color(direction, color);
  5606  002302  C0A1  F041         	movff	Set_NS@color,update_LCD_color@color
  5607  002306  5059               	movf	_direction,w,c
  5608  002308  EC9D  F003         	call	_update_LCD_color
  5609                           
  5610                           ;Lab9pC.c: 412: switch (color)
  5611  00230C  D00A               	goto	l5062
  5612  00230E                     l434:
  5613                           
  5614                           ; BSR set to: 0
  5615  00230E  9483               	bcf	3971,2,c	;volatile
  5616  002310  D001               	goto	L3
  5617  002312                     l436:
  5618                           
  5619                           ; BSR set to: 0
  5620  002312  8483               	bsf	3971,2,c	;volatile
  5621  002314                     L3:
  5622  002314  9683               	bcf	3971,3,c	;volatile
  5623  002316  D014               	goto	l439
  5624  002318                     l437:
  5625                           
  5626                           ; BSR set to: 0
  5627  002318  9483               	bcf	3971,2,c	;volatile
  5628  00231A  D001               	goto	L4
  5629  00231C                     l438:
  5630                           
  5631                           ; BSR set to: 0
  5632  00231C  8483               	bsf	3971,2,c	;volatile
  5633  00231E                     L4:
  5634  00231E  8683               	bsf	3971,3,c	;volatile
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;Lab9pC.c: 418: }
  5638  002320  D00F               	goto	l439
  5639  002322                     l5062:
  5640  002322  0100               	movlb	0	; () banked
  5641  002324  51A1               	movf	Set_NS@color& (0+255),w,b
  5642                           
  5643                           ; Switch size 1, requested type "space"
  5644                           ; Number of cases is 4, Range of values is 0 to 3
  5645                           ; switch strategies available:
  5646                           ; Name         Instructions Cycles
  5647                           ; simple_byte           13     7 (average)
  5648                           ;	Chosen strategy is simple_byte
  5649  002326  0A00               	xorlw	0	; case 0
  5650  002328  B4D8               	btfsc	status,2,c
  5651  00232A  D7F1               	goto	l434
  5652  00232C  0A01               	xorlw	1	; case 1
  5653  00232E  B4D8               	btfsc	status,2,c
  5654  002330  D7F0               	goto	l436
  5655  002332  0A03               	xorlw	3	; case 2
  5656  002334  B4D8               	btfsc	status,2,c
  5657  002336  D7F0               	goto	l437
  5658  002338  0A01               	xorlw	1	; case 3
  5659  00233A  B4D8               	btfsc	status,2,c
  5660  00233C  D7EF               	goto	l438
  5661  00233E  D000               	goto	l439
  5662  002340                     l439:
  5663                           
  5664                           ; BSR set to: 0
  5665  002340  0012               	return		;funcret
  5666  002342                     __end_of_Set_NS:
  5667                           	opt stack 0
  5668                           tblptru	equ	0xFF8
  5669                           tblptrh	equ	0xFF7
  5670                           tblptrl	equ	0xFF6
  5671                           tablat	equ	0xFF5
  5672                           intcon	equ	0xFF2
  5673                           intcon2	equ	0xFF1
  5674                           intcon3	equ	0xFF0
  5675                           postinc0	equ	0xFEE
  5676                           wreg	equ	0xFE8
  5677                           postdec1	equ	0xFE5
  5678                           fsr1l	equ	0xFE1
  5679                           status	equ	0xFD8
  5680                           
  5681 ;; *************** function _Set_EW_LT *****************
  5682 ;; Defined at:
  5683 ;;		line 449 in file "Lab9pC.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;  color           1    wreg     unsigned char 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  color           1    2[BANK0 ] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;Total ram usage:        1 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    9
  5704 ;; This function calls:
  5705 ;;		_update_LCD_color
  5706 ;; This function is called by:
  5707 ;;		_Do_Flashing
  5708 ;;		_Day_Mode
  5709 ;;		_Night_Mode
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text25
  5714  002342                     __ptext25:
  5715                           	opt stack 0
  5716  002342                     _Set_EW_LT:
  5717                           	opt stack 20
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;incstack = 0
  5721                           ;Set_EW_LT@color stored from wreg
  5722  002342  0100               	movlb	0	; () banked
  5723  002344  6FA1               	movwf	Set_EW_LT@color& (0+255),b
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;Lab9pC.c: 451: direction = 3;
  5727  002346  0E03               	movlw	3
  5728  002348  6E59               	movwf	_direction,c
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;Lab9pC.c: 452: update_LCD_color(direction, color);
  5732  00234A  C0A1  F041         	movff	Set_EW_LT@color,update_LCD_color@color
  5733  00234E  5059               	movf	_direction,w,c
  5734  002350  EC9D  F003         	call	_update_LCD_color
  5735                           
  5736                           ;Lab9pC.c: 454: switch(color)
  5737  002354  D00A               	goto	l5086
  5738  002356                     l461:
  5739                           
  5740                           ; BSR set to: 0
  5741  002356  9284               	bcf	3972,1,c	;volatile
  5742  002358  D001               	goto	L5
  5743  00235A                     l463:
  5744                           
  5745                           ; BSR set to: 0
  5746  00235A  8284               	bsf	3972,1,c	;volatile
  5747  00235C                     L5:
  5748  00235C  9484               	bcf	3972,2,c	;volatile
  5749  00235E  D014               	goto	l466
  5750  002360                     l464:
  5751                           
  5752                           ; BSR set to: 0
  5753  002360  9284               	bcf	3972,1,c	;volatile
  5754  002362  D001               	goto	L6
  5755  002364                     l465:
  5756                           
  5757                           ; BSR set to: 0
  5758  002364  8284               	bsf	3972,1,c	;volatile
  5759  002366                     L6:
  5760  002366  8484               	bsf	3972,2,c	;volatile
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;Lab9pC.c: 460: }
  5764  002368  D00F               	goto	l466
  5765  00236A                     l5086:
  5766  00236A  0100               	movlb	0	; () banked
  5767  00236C  51A1               	movf	Set_EW_LT@color& (0+255),w,b
  5768                           
  5769                           ; Switch size 1, requested type "space"
  5770                           ; Number of cases is 4, Range of values is 0 to 3
  5771                           ; switch strategies available:
  5772                           ; Name         Instructions Cycles
  5773                           ; simple_byte           13     7 (average)
  5774                           ;	Chosen strategy is simple_byte
  5775  00236E  0A00               	xorlw	0	; case 0
  5776  002370  B4D8               	btfsc	status,2,c
  5777  002372  D7F1               	goto	l461
  5778  002374  0A01               	xorlw	1	; case 1
  5779  002376  B4D8               	btfsc	status,2,c
  5780  002378  D7F0               	goto	l463
  5781  00237A  0A03               	xorlw	3	; case 2
  5782  00237C  B4D8               	btfsc	status,2,c
  5783  00237E  D7F0               	goto	l464
  5784  002380  0A01               	xorlw	1	; case 3
  5785  002382  B4D8               	btfsc	status,2,c
  5786  002384  D7EF               	goto	l465
  5787  002386  D000               	goto	l466
  5788  002388                     l466:
  5789                           
  5790                           ; BSR set to: 0
  5791  002388  0012               	return		;funcret
  5792  00238A                     __end_of_Set_EW_LT:
  5793                           	opt stack 0
  5794                           tblptru	equ	0xFF8
  5795                           tblptrh	equ	0xFF7
  5796                           tblptrl	equ	0xFF6
  5797                           tablat	equ	0xFF5
  5798                           intcon	equ	0xFF2
  5799                           intcon2	equ	0xFF1
  5800                           intcon3	equ	0xFF0
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           postdec1	equ	0xFE5
  5804                           fsr1l	equ	0xFE1
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _Set_EW *****************
  5808 ;; Defined at:
  5809 ;;		line 435 in file "Lab9pC.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  color           1    wreg     unsigned char 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  color           1    2[BANK0 ] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;		None               void
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;Total ram usage:        1 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    9
  5830 ;; This function calls:
  5831 ;;		_update_LCD_color
  5832 ;; This function is called by:
  5833 ;;		_Do_Flashing
  5834 ;;		_Day_Mode
  5835 ;;		_Night_Mode
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           	psect	text26
  5840  00238A                     __ptext26:
  5841                           	opt stack 0
  5842  00238A                     _Set_EW:
  5843                           	opt stack 20
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;incstack = 0
  5847                           ;Set_EW@color stored from wreg
  5848  00238A  0100               	movlb	0	; () banked
  5849  00238C  6FA1               	movwf	Set_EW@color& (0+255),b
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;Lab9pC.c: 437: direction = 2;
  5853  00238E  0E02               	movlw	2
  5854  002390  6E59               	movwf	_direction,c
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;Lab9pC.c: 438: update_LCD_color(direction, color);
  5858  002392  C0A1  F041         	movff	Set_EW@color,update_LCD_color@color
  5859  002396  5059               	movf	_direction,w,c
  5860  002398  EC9D  F003         	call	_update_LCD_color
  5861                           
  5862                           ;Lab9pC.c: 440: switch(color)
  5863  00239C  D00A               	goto	l5078
  5864  00239E                     l452:
  5865                           
  5866                           ; BSR set to: 0
  5867  00239E  9881               	bcf	3969,4,c	;volatile
  5868  0023A0  D001               	goto	L7
  5869  0023A2                     l454:
  5870                           
  5871                           ; BSR set to: 0
  5872  0023A2  8881               	bsf	3969,4,c	;volatile
  5873  0023A4                     L7:
  5874  0023A4  9A81               	bcf	3969,5,c	;volatile
  5875  0023A6  D014               	goto	l457
  5876  0023A8                     l455:
  5877                           
  5878                           ; BSR set to: 0
  5879  0023A8  9881               	bcf	3969,4,c	;volatile
  5880  0023AA  D001               	goto	L8
  5881  0023AC                     l456:
  5882                           
  5883                           ; BSR set to: 0
  5884  0023AC  8881               	bsf	3969,4,c	;volatile
  5885  0023AE                     L8:
  5886  0023AE  8A81               	bsf	3969,5,c	;volatile
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;Lab9pC.c: 446: }
  5890  0023B0  D00F               	goto	l457
  5891  0023B2                     l5078:
  5892  0023B2  0100               	movlb	0	; () banked
  5893  0023B4  51A1               	movf	Set_EW@color& (0+255),w,b
  5894                           
  5895                           ; Switch size 1, requested type "space"
  5896                           ; Number of cases is 4, Range of values is 0 to 3
  5897                           ; switch strategies available:
  5898                           ; Name         Instructions Cycles
  5899                           ; simple_byte           13     7 (average)
  5900                           ;	Chosen strategy is simple_byte
  5901  0023B6  0A00               	xorlw	0	; case 0
  5902  0023B8  B4D8               	btfsc	status,2,c
  5903  0023BA  D7F1               	goto	l452
  5904  0023BC  0A01               	xorlw	1	; case 1
  5905  0023BE  B4D8               	btfsc	status,2,c
  5906  0023C0  D7F0               	goto	l454
  5907  0023C2  0A03               	xorlw	3	; case 2
  5908  0023C4  B4D8               	btfsc	status,2,c
  5909  0023C6  D7F0               	goto	l455
  5910  0023C8  0A01               	xorlw	1	; case 3
  5911  0023CA  B4D8               	btfsc	status,2,c
  5912  0023CC  D7EF               	goto	l456
  5913  0023CE  D000               	goto	l457
  5914  0023D0                     l457:
  5915                           
  5916                           ; BSR set to: 0
  5917  0023D0  0012               	return		;funcret
  5918  0023D2                     __end_of_Set_EW:
  5919                           	opt stack 0
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           intcon	equ	0xFF2
  5925                           intcon2	equ	0xFF1
  5926                           intcon3	equ	0xFF0
  5927                           postinc0	equ	0xFEE
  5928                           wreg	equ	0xFE8
  5929                           postdec1	equ	0xFE5
  5930                           fsr1l	equ	0xFE1
  5931                           status	equ	0xFD8
  5932                           
  5933 ;; *************** function _update_LCD_color *****************
  5934 ;; Defined at:
  5935 ;;		line 653 in file "Lab9pC.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  direction       1    wreg     unsigned char 
  5938 ;;  color           1   64[COMRAM] unsigned char 
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;  direction       1    0[BANK0 ] unsigned char 
  5941 ;;  Circle_Y        1    1[BANK0 ] unsigned char 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;		None               void
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5951 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;Total ram usage:        3 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    8
  5958 ;; This function calls:
  5959 ;;		_drawCircle
  5960 ;;		_fillCircle
  5961 ;; This function is called by:
  5962 ;;		_Set_NS
  5963 ;;		_Set_NS_LT
  5964 ;;		_Set_EW
  5965 ;;		_Set_EW_LT
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text27
  5970  00073A                     __ptext27:
  5971                           	opt stack 0
  5972  00073A                     _update_LCD_color:
  5973                           	opt stack 20
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;incstack = 0
  5977                           ;update_LCD_color@direction stored from wreg
  5978  00073A  0100               	movlb	0	; () banked
  5979  00073C  6F9F               	movwf	update_LCD_color@direction& (0+255),b
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;Lab9pC.c: 655: char Circle_Y;
  5983                           ;Lab9pC.c: 656: Circle_Y = 20 + 15 + direction * 30;
  5984  00073E  0100               	movlb	0	; () banked
  5985  000740  519F               	movf	update_LCD_color@direction& (0+255),w,b
  5986  000742  0D1E               	mullw	30
  5987  000744  50F3               	movf	prodl,w,c
  5988  000746  0F23               	addlw	35
  5989  000748  0100               	movlb	0	; () banked
  5990  00074A  6FA0               	movwf	update_LCD_color@Circle_Y& (0+255),b
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;Lab9pC.c: 658: if (color == 0)
  5994  00074C  5041               	movf	update_LCD_color@color,w,c
  5995  00074E  A4D8               	btfss	status,2,c
  5996  000750  D067               	goto	l4958
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;Lab9pC.c: 659: {
  6000                           ;Lab9pC.c: 660: fillCircle(40, Circle_Y, 7, 0x0000);
  6001  000752  0E00               	movlw	0
  6002  000754  6E3A               	movwf	fillCircle@x0+1,c
  6003  000756  0E28               	movlw	40
  6004  000758  6E39               	movwf	fillCircle@x0,c
  6005  00075A  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6006  00075E  6A3C               	clrf	fillCircle@y0+1,c
  6007  000760  0E00               	movlw	0
  6008  000762  6E3E               	movwf	fillCircle@r+1,c
  6009  000764  0E07               	movlw	7
  6010  000766  6E3D               	movwf	fillCircle@r,c
  6011  000768  0E00               	movlw	0
  6012  00076A  6E40               	movwf	fillCircle@color+1,c
  6013  00076C  0E00               	movlw	0
  6014  00076E  6E3F               	movwf	fillCircle@color,c
  6015  000770  ECE4  F010         	call	_fillCircle	;wreg free
  6016                           
  6017                           ;Lab9pC.c: 661: fillCircle(60, Circle_Y, 7, 0x0000);
  6018  000774  0E00               	movlw	0
  6019  000776  6E3A               	movwf	fillCircle@x0+1,c
  6020  000778  0E3C               	movlw	60
  6021  00077A  6E39               	movwf	fillCircle@x0,c
  6022  00077C  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6023  000780  6A3C               	clrf	fillCircle@y0+1,c
  6024  000782  0E00               	movlw	0
  6025  000784  6E3E               	movwf	fillCircle@r+1,c
  6026  000786  0E07               	movlw	7
  6027  000788  6E3D               	movwf	fillCircle@r,c
  6028  00078A  0E00               	movlw	0
  6029  00078C  6E40               	movwf	fillCircle@color+1,c
  6030  00078E  0E00               	movlw	0
  6031  000790  6E3F               	movwf	fillCircle@color,c
  6032  000792  ECE4  F010         	call	_fillCircle	;wreg free
  6033                           
  6034                           ;Lab9pC.c: 662: fillCircle(80, Circle_Y, 7, 0x0000);
  6035  000796  0E00               	movlw	0
  6036  000798  6E3A               	movwf	fillCircle@x0+1,c
  6037  00079A  0E50               	movlw	80
  6038  00079C  6E39               	movwf	fillCircle@x0,c
  6039  00079E  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6040  0007A2  6A3C               	clrf	fillCircle@y0+1,c
  6041  0007A4  0E00               	movlw	0
  6042  0007A6  6E3E               	movwf	fillCircle@r+1,c
  6043  0007A8  0E07               	movlw	7
  6044  0007AA  6E3D               	movwf	fillCircle@r,c
  6045  0007AC  0E00               	movlw	0
  6046  0007AE  6E40               	movwf	fillCircle@color+1,c
  6047  0007B0  0E00               	movlw	0
  6048  0007B2  6E3F               	movwf	fillCircle@color,c
  6049  0007B4  ECE4  F010         	call	_fillCircle	;wreg free
  6050                           
  6051                           ;Lab9pC.c: 663: drawCircle(40, Circle_Y, 7, 0xF800);
  6052  0007B8  0E00               	movlw	0
  6053  0007BA  6E1B               	movwf	drawCircle@x0+1,c
  6054  0007BC  0E28               	movlw	40
  6055  0007BE  6E1A               	movwf	drawCircle@x0,c
  6056  0007C0  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6057  0007C4  6A1D               	clrf	drawCircle@y0+1,c
  6058  0007C6  0E00               	movlw	0
  6059  0007C8  6E1F               	movwf	drawCircle@r+1,c
  6060  0007CA  0E07               	movlw	7
  6061  0007CC  6E1E               	movwf	drawCircle@r,c
  6062  0007CE  0EF8               	movlw	248
  6063  0007D0  6E21               	movwf	drawCircle@color+1,c
  6064  0007D2  0E00               	movlw	0
  6065  0007D4  6E20               	movwf	drawCircle@color,c
  6066  0007D6  EC67  F006         	call	_drawCircle	;wreg free
  6067                           
  6068                           ;Lab9pC.c: 664: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6069  0007DA  0E00               	movlw	0
  6070  0007DC  6E1B               	movwf	drawCircle@x0+1,c
  6071  0007DE  0E3C               	movlw	60
  6072  0007E0  6E1A               	movwf	drawCircle@x0,c
  6073  0007E2  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6074  0007E6  6A1D               	clrf	drawCircle@y0+1,c
  6075  0007E8  0E00               	movlw	0
  6076  0007EA  6E1F               	movwf	drawCircle@r+1,c
  6077  0007EC  0E07               	movlw	7
  6078  0007EE  6E1E               	movwf	drawCircle@r,c
  6079  0007F0  0EFF               	movlw	255
  6080  0007F2  6E21               	movwf	drawCircle@color+1,c
  6081  0007F4  0EE0               	movlw	224
  6082  0007F6  6E20               	movwf	drawCircle@color,c
  6083  0007F8  EC67  F006         	call	_drawCircle	;wreg free
  6084                           
  6085                           ;Lab9pC.c: 665: drawCircle(80, Circle_Y, 7, 0x07E0);
  6086  0007FC  0E00               	movlw	0
  6087  0007FE  6E1B               	movwf	drawCircle@x0+1,c
  6088  000800  0E50               	movlw	80
  6089  000802  6E1A               	movwf	drawCircle@x0,c
  6090  000804  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6091  000808  6A1D               	clrf	drawCircle@y0+1,c
  6092  00080A  0E00               	movlw	0
  6093  00080C  6E1F               	movwf	drawCircle@r+1,c
  6094  00080E  0E07               	movlw	7
  6095  000810  6E1E               	movwf	drawCircle@r,c
  6096  000812  0E07               	movlw	7
  6097  000814  6E21               	movwf	drawCircle@color+1,c
  6098  000816  0EE0               	movlw	224
  6099  000818  6E20               	movwf	drawCircle@color,c
  6100  00081A  EC67  F006         	call	_drawCircle	;wreg free
  6101  00081E  D000               	goto	l4958
  6102  000820                     l4958:
  6103                           
  6104                           ;Lab9pC.c: 666: }
  6105                           ;Lab9pC.c: 668: if (color == 1)
  6106  000820  0441               	decf	update_LCD_color@color,w,c
  6107  000822  A4D8               	btfss	status,2,c
  6108  000824  D067               	goto	l4962
  6109                           
  6110                           ;Lab9pC.c: 669: {
  6111                           ;Lab9pC.c: 670: fillCircle(40, Circle_Y, 7, 0xF800);
  6112  000826  0E00               	movlw	0
  6113  000828  6E3A               	movwf	fillCircle@x0+1,c
  6114  00082A  0E28               	movlw	40
  6115  00082C  6E39               	movwf	fillCircle@x0,c
  6116  00082E  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6117  000832  6A3C               	clrf	fillCircle@y0+1,c
  6118  000834  0E00               	movlw	0
  6119  000836  6E3E               	movwf	fillCircle@r+1,c
  6120  000838  0E07               	movlw	7
  6121  00083A  6E3D               	movwf	fillCircle@r,c
  6122  00083C  0EF8               	movlw	248
  6123  00083E  6E40               	movwf	fillCircle@color+1,c
  6124  000840  0E00               	movlw	0
  6125  000842  6E3F               	movwf	fillCircle@color,c
  6126  000844  ECE4  F010         	call	_fillCircle	;wreg free
  6127                           
  6128                           ;Lab9pC.c: 671: fillCircle(60, Circle_Y, 7, 0x0000);
  6129  000848  0E00               	movlw	0
  6130  00084A  6E3A               	movwf	fillCircle@x0+1,c
  6131  00084C  0E3C               	movlw	60
  6132  00084E  6E39               	movwf	fillCircle@x0,c
  6133  000850  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6134  000854  6A3C               	clrf	fillCircle@y0+1,c
  6135  000856  0E00               	movlw	0
  6136  000858  6E3E               	movwf	fillCircle@r+1,c
  6137  00085A  0E07               	movlw	7
  6138  00085C  6E3D               	movwf	fillCircle@r,c
  6139  00085E  0E00               	movlw	0
  6140  000860  6E40               	movwf	fillCircle@color+1,c
  6141  000862  0E00               	movlw	0
  6142  000864  6E3F               	movwf	fillCircle@color,c
  6143  000866  ECE4  F010         	call	_fillCircle	;wreg free
  6144                           
  6145                           ;Lab9pC.c: 672: fillCircle(80, Circle_Y, 7, 0x0000);
  6146  00086A  0E00               	movlw	0
  6147  00086C  6E3A               	movwf	fillCircle@x0+1,c
  6148  00086E  0E50               	movlw	80
  6149  000870  6E39               	movwf	fillCircle@x0,c
  6150  000872  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6151  000876  6A3C               	clrf	fillCircle@y0+1,c
  6152  000878  0E00               	movlw	0
  6153  00087A  6E3E               	movwf	fillCircle@r+1,c
  6154  00087C  0E07               	movlw	7
  6155  00087E  6E3D               	movwf	fillCircle@r,c
  6156  000880  0E00               	movlw	0
  6157  000882  6E40               	movwf	fillCircle@color+1,c
  6158  000884  0E00               	movlw	0
  6159  000886  6E3F               	movwf	fillCircle@color,c
  6160  000888  ECE4  F010         	call	_fillCircle	;wreg free
  6161                           
  6162                           ;Lab9pC.c: 673: drawCircle(40, Circle_Y, 7, 0xF800);
  6163  00088C  0E00               	movlw	0
  6164  00088E  6E1B               	movwf	drawCircle@x0+1,c
  6165  000890  0E28               	movlw	40
  6166  000892  6E1A               	movwf	drawCircle@x0,c
  6167  000894  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6168  000898  6A1D               	clrf	drawCircle@y0+1,c
  6169  00089A  0E00               	movlw	0
  6170  00089C  6E1F               	movwf	drawCircle@r+1,c
  6171  00089E  0E07               	movlw	7
  6172  0008A0  6E1E               	movwf	drawCircle@r,c
  6173  0008A2  0EF8               	movlw	248
  6174  0008A4  6E21               	movwf	drawCircle@color+1,c
  6175  0008A6  0E00               	movlw	0
  6176  0008A8  6E20               	movwf	drawCircle@color,c
  6177  0008AA  EC67  F006         	call	_drawCircle	;wreg free
  6178                           
  6179                           ;Lab9pC.c: 674: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6180  0008AE  0E00               	movlw	0
  6181  0008B0  6E1B               	movwf	drawCircle@x0+1,c
  6182  0008B2  0E3C               	movlw	60
  6183  0008B4  6E1A               	movwf	drawCircle@x0,c
  6184  0008B6  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6185  0008BA  6A1D               	clrf	drawCircle@y0+1,c
  6186  0008BC  0E00               	movlw	0
  6187  0008BE  6E1F               	movwf	drawCircle@r+1,c
  6188  0008C0  0E07               	movlw	7
  6189  0008C2  6E1E               	movwf	drawCircle@r,c
  6190  0008C4  0EFF               	movlw	255
  6191  0008C6  6E21               	movwf	drawCircle@color+1,c
  6192  0008C8  0EE0               	movlw	224
  6193  0008CA  6E20               	movwf	drawCircle@color,c
  6194  0008CC  EC67  F006         	call	_drawCircle	;wreg free
  6195                           
  6196                           ;Lab9pC.c: 675: drawCircle(80, Circle_Y, 7, 0x07E0);
  6197  0008D0  0E00               	movlw	0
  6198  0008D2  6E1B               	movwf	drawCircle@x0+1,c
  6199  0008D4  0E50               	movlw	80
  6200  0008D6  6E1A               	movwf	drawCircle@x0,c
  6201  0008D8  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6202  0008DC  6A1D               	clrf	drawCircle@y0+1,c
  6203  0008DE  0E00               	movlw	0
  6204  0008E0  6E1F               	movwf	drawCircle@r+1,c
  6205  0008E2  0E07               	movlw	7
  6206  0008E4  6E1E               	movwf	drawCircle@r,c
  6207  0008E6  0E07               	movlw	7
  6208  0008E8  6E21               	movwf	drawCircle@color+1,c
  6209  0008EA  0EE0               	movlw	224
  6210  0008EC  6E20               	movwf	drawCircle@color,c
  6211  0008EE  EC67  F006         	call	_drawCircle	;wreg free
  6212  0008F2  D000               	goto	l4962
  6213  0008F4                     l4962:
  6214                           
  6215                           ;Lab9pC.c: 676: }
  6216                           ;Lab9pC.c: 679: if (color == 3)
  6217  0008F4  0E03               	movlw	3
  6218  0008F6  1841               	xorwf	update_LCD_color@color,w,c
  6219  0008F8  A4D8               	btfss	status,2,c
  6220  0008FA  D067               	goto	l4966
  6221                           
  6222                           ;Lab9pC.c: 680: {
  6223                           ;Lab9pC.c: 681: fillCircle(40, Circle_Y, 7, 0x0000);
  6224  0008FC  0E00               	movlw	0
  6225  0008FE  6E3A               	movwf	fillCircle@x0+1,c
  6226  000900  0E28               	movlw	40
  6227  000902  6E39               	movwf	fillCircle@x0,c
  6228  000904  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6229  000908  6A3C               	clrf	fillCircle@y0+1,c
  6230  00090A  0E00               	movlw	0
  6231  00090C  6E3E               	movwf	fillCircle@r+1,c
  6232  00090E  0E07               	movlw	7
  6233  000910  6E3D               	movwf	fillCircle@r,c
  6234  000912  0E00               	movlw	0
  6235  000914  6E40               	movwf	fillCircle@color+1,c
  6236  000916  0E00               	movlw	0
  6237  000918  6E3F               	movwf	fillCircle@color,c
  6238  00091A  ECE4  F010         	call	_fillCircle	;wreg free
  6239                           
  6240                           ;Lab9pC.c: 682: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6241  00091E  0E00               	movlw	0
  6242  000920  6E3A               	movwf	fillCircle@x0+1,c
  6243  000922  0E3C               	movlw	60
  6244  000924  6E39               	movwf	fillCircle@x0,c
  6245  000926  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6246  00092A  6A3C               	clrf	fillCircle@y0+1,c
  6247  00092C  0E00               	movlw	0
  6248  00092E  6E3E               	movwf	fillCircle@r+1,c
  6249  000930  0E07               	movlw	7
  6250  000932  6E3D               	movwf	fillCircle@r,c
  6251  000934  0EFF               	movlw	255
  6252  000936  6E40               	movwf	fillCircle@color+1,c
  6253  000938  0EE0               	movlw	224
  6254  00093A  6E3F               	movwf	fillCircle@color,c
  6255  00093C  ECE4  F010         	call	_fillCircle	;wreg free
  6256                           
  6257                           ;Lab9pC.c: 683: fillCircle(80, Circle_Y, 7, 0x0000);
  6258  000940  0E00               	movlw	0
  6259  000942  6E3A               	movwf	fillCircle@x0+1,c
  6260  000944  0E50               	movlw	80
  6261  000946  6E39               	movwf	fillCircle@x0,c
  6262  000948  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6263  00094C  6A3C               	clrf	fillCircle@y0+1,c
  6264  00094E  0E00               	movlw	0
  6265  000950  6E3E               	movwf	fillCircle@r+1,c
  6266  000952  0E07               	movlw	7
  6267  000954  6E3D               	movwf	fillCircle@r,c
  6268  000956  0E00               	movlw	0
  6269  000958  6E40               	movwf	fillCircle@color+1,c
  6270  00095A  0E00               	movlw	0
  6271  00095C  6E3F               	movwf	fillCircle@color,c
  6272  00095E  ECE4  F010         	call	_fillCircle	;wreg free
  6273                           
  6274                           ;Lab9pC.c: 684: drawCircle(40, Circle_Y, 7, 0xF800);
  6275  000962  0E00               	movlw	0
  6276  000964  6E1B               	movwf	drawCircle@x0+1,c
  6277  000966  0E28               	movlw	40
  6278  000968  6E1A               	movwf	drawCircle@x0,c
  6279  00096A  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6280  00096E  6A1D               	clrf	drawCircle@y0+1,c
  6281  000970  0E00               	movlw	0
  6282  000972  6E1F               	movwf	drawCircle@r+1,c
  6283  000974  0E07               	movlw	7
  6284  000976  6E1E               	movwf	drawCircle@r,c
  6285  000978  0EF8               	movlw	248
  6286  00097A  6E21               	movwf	drawCircle@color+1,c
  6287  00097C  0E00               	movlw	0
  6288  00097E  6E20               	movwf	drawCircle@color,c
  6289  000980  EC67  F006         	call	_drawCircle	;wreg free
  6290                           
  6291                           ;Lab9pC.c: 685: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6292  000984  0E00               	movlw	0
  6293  000986  6E1B               	movwf	drawCircle@x0+1,c
  6294  000988  0E3C               	movlw	60
  6295  00098A  6E1A               	movwf	drawCircle@x0,c
  6296  00098C  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6297  000990  6A1D               	clrf	drawCircle@y0+1,c
  6298  000992  0E00               	movlw	0
  6299  000994  6E1F               	movwf	drawCircle@r+1,c
  6300  000996  0E07               	movlw	7
  6301  000998  6E1E               	movwf	drawCircle@r,c
  6302  00099A  0EFF               	movlw	255
  6303  00099C  6E21               	movwf	drawCircle@color+1,c
  6304  00099E  0EE0               	movlw	224
  6305  0009A0  6E20               	movwf	drawCircle@color,c
  6306  0009A2  EC67  F006         	call	_drawCircle	;wreg free
  6307                           
  6308                           ;Lab9pC.c: 686: drawCircle(80, Circle_Y, 7, 0x07E0);
  6309  0009A6  0E00               	movlw	0
  6310  0009A8  6E1B               	movwf	drawCircle@x0+1,c
  6311  0009AA  0E50               	movlw	80
  6312  0009AC  6E1A               	movwf	drawCircle@x0,c
  6313  0009AE  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6314  0009B2  6A1D               	clrf	drawCircle@y0+1,c
  6315  0009B4  0E00               	movlw	0
  6316  0009B6  6E1F               	movwf	drawCircle@r+1,c
  6317  0009B8  0E07               	movlw	7
  6318  0009BA  6E1E               	movwf	drawCircle@r,c
  6319  0009BC  0E07               	movlw	7
  6320  0009BE  6E21               	movwf	drawCircle@color+1,c
  6321  0009C0  0EE0               	movlw	224
  6322  0009C2  6E20               	movwf	drawCircle@color,c
  6323  0009C4  EC67  F006         	call	_drawCircle	;wreg free
  6324  0009C8  D000               	goto	l4966
  6325  0009CA                     l4966:
  6326                           
  6327                           ;Lab9pC.c: 687: }
  6328                           ;Lab9pC.c: 689: if (color == 2)
  6329  0009CA  0E02               	movlw	2
  6330  0009CC  1841               	xorwf	update_LCD_color@color,w,c
  6331  0009CE  A4D8               	btfss	status,2,c
  6332  0009D0  D067               	goto	l520
  6333                           
  6334                           ;Lab9pC.c: 690: {
  6335                           ;Lab9pC.c: 691: fillCircle(40, Circle_Y, 7, 0x0000);
  6336  0009D2  0E00               	movlw	0
  6337  0009D4  6E3A               	movwf	fillCircle@x0+1,c
  6338  0009D6  0E28               	movlw	40
  6339  0009D8  6E39               	movwf	fillCircle@x0,c
  6340  0009DA  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6341  0009DE  6A3C               	clrf	fillCircle@y0+1,c
  6342  0009E0  0E00               	movlw	0
  6343  0009E2  6E3E               	movwf	fillCircle@r+1,c
  6344  0009E4  0E07               	movlw	7
  6345  0009E6  6E3D               	movwf	fillCircle@r,c
  6346  0009E8  0E00               	movlw	0
  6347  0009EA  6E40               	movwf	fillCircle@color+1,c
  6348  0009EC  0E00               	movlw	0
  6349  0009EE  6E3F               	movwf	fillCircle@color,c
  6350  0009F0  ECE4  F010         	call	_fillCircle	;wreg free
  6351                           
  6352                           ;Lab9pC.c: 692: fillCircle(60, Circle_Y, 7, 0x0000);
  6353  0009F4  0E00               	movlw	0
  6354  0009F6  6E3A               	movwf	fillCircle@x0+1,c
  6355  0009F8  0E3C               	movlw	60
  6356  0009FA  6E39               	movwf	fillCircle@x0,c
  6357  0009FC  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6358  000A00  6A3C               	clrf	fillCircle@y0+1,c
  6359  000A02  0E00               	movlw	0
  6360  000A04  6E3E               	movwf	fillCircle@r+1,c
  6361  000A06  0E07               	movlw	7
  6362  000A08  6E3D               	movwf	fillCircle@r,c
  6363  000A0A  0E00               	movlw	0
  6364  000A0C  6E40               	movwf	fillCircle@color+1,c
  6365  000A0E  0E00               	movlw	0
  6366  000A10  6E3F               	movwf	fillCircle@color,c
  6367  000A12  ECE4  F010         	call	_fillCircle	;wreg free
  6368                           
  6369                           ;Lab9pC.c: 693: fillCircle(80, Circle_Y, 7, 0x07E0);
  6370  000A16  0E00               	movlw	0
  6371  000A18  6E3A               	movwf	fillCircle@x0+1,c
  6372  000A1A  0E50               	movlw	80
  6373  000A1C  6E39               	movwf	fillCircle@x0,c
  6374  000A1E  C0A0  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6375  000A22  6A3C               	clrf	fillCircle@y0+1,c
  6376  000A24  0E00               	movlw	0
  6377  000A26  6E3E               	movwf	fillCircle@r+1,c
  6378  000A28  0E07               	movlw	7
  6379  000A2A  6E3D               	movwf	fillCircle@r,c
  6380  000A2C  0E07               	movlw	7
  6381  000A2E  6E40               	movwf	fillCircle@color+1,c
  6382  000A30  0EE0               	movlw	224
  6383  000A32  6E3F               	movwf	fillCircle@color,c
  6384  000A34  ECE4  F010         	call	_fillCircle	;wreg free
  6385                           
  6386                           ;Lab9pC.c: 694: drawCircle(40, Circle_Y, 7, 0xF800);
  6387  000A38  0E00               	movlw	0
  6388  000A3A  6E1B               	movwf	drawCircle@x0+1,c
  6389  000A3C  0E28               	movlw	40
  6390  000A3E  6E1A               	movwf	drawCircle@x0,c
  6391  000A40  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6392  000A44  6A1D               	clrf	drawCircle@y0+1,c
  6393  000A46  0E00               	movlw	0
  6394  000A48  6E1F               	movwf	drawCircle@r+1,c
  6395  000A4A  0E07               	movlw	7
  6396  000A4C  6E1E               	movwf	drawCircle@r,c
  6397  000A4E  0EF8               	movlw	248
  6398  000A50  6E21               	movwf	drawCircle@color+1,c
  6399  000A52  0E00               	movlw	0
  6400  000A54  6E20               	movwf	drawCircle@color,c
  6401  000A56  EC67  F006         	call	_drawCircle	;wreg free
  6402                           
  6403                           ;Lab9pC.c: 695: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6404  000A5A  0E00               	movlw	0
  6405  000A5C  6E1B               	movwf	drawCircle@x0+1,c
  6406  000A5E  0E3C               	movlw	60
  6407  000A60  6E1A               	movwf	drawCircle@x0,c
  6408  000A62  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6409  000A66  6A1D               	clrf	drawCircle@y0+1,c
  6410  000A68  0E00               	movlw	0
  6411  000A6A  6E1F               	movwf	drawCircle@r+1,c
  6412  000A6C  0E07               	movlw	7
  6413  000A6E  6E1E               	movwf	drawCircle@r,c
  6414  000A70  0EFF               	movlw	255
  6415  000A72  6E21               	movwf	drawCircle@color+1,c
  6416  000A74  0EE0               	movlw	224
  6417  000A76  6E20               	movwf	drawCircle@color,c
  6418  000A78  EC67  F006         	call	_drawCircle	;wreg free
  6419                           
  6420                           ;Lab9pC.c: 696: drawCircle(80, Circle_Y, 7, 0x07E0);
  6421  000A7C  0E00               	movlw	0
  6422  000A7E  6E1B               	movwf	drawCircle@x0+1,c
  6423  000A80  0E50               	movlw	80
  6424  000A82  6E1A               	movwf	drawCircle@x0,c
  6425  000A84  C0A0  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6426  000A88  6A1D               	clrf	drawCircle@y0+1,c
  6427  000A8A  0E00               	movlw	0
  6428  000A8C  6E1F               	movwf	drawCircle@r+1,c
  6429  000A8E  0E07               	movlw	7
  6430  000A90  6E1E               	movwf	drawCircle@r,c
  6431  000A92  0E07               	movlw	7
  6432  000A94  6E21               	movwf	drawCircle@color+1,c
  6433  000A96  0EE0               	movlw	224
  6434  000A98  6E20               	movwf	drawCircle@color,c
  6435  000A9A  EC67  F006         	call	_drawCircle	;wreg free
  6436  000A9E  D000               	goto	l520
  6437  000AA0                     l520:
  6438  000AA0  0012               	return		;funcret
  6439  000AA2                     __end_of_update_LCD_color:
  6440                           	opt stack 0
  6441                           tblptru	equ	0xFF8
  6442                           tblptrh	equ	0xFF7
  6443                           tblptrl	equ	0xFF6
  6444                           tablat	equ	0xFF5
  6445                           prodl	equ	0xFF3
  6446                           intcon	equ	0xFF2
  6447                           intcon2	equ	0xFF1
  6448                           intcon3	equ	0xFF0
  6449                           postinc0	equ	0xFEE
  6450                           wreg	equ	0xFE8
  6451                           postdec1	equ	0xFE5
  6452                           fsr1l	equ	0xFE1
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function _fillCircle *****************
  6456 ;; Defined at:
  6457 ;;		line 647 in file "ST7735_TFT.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  x0              2   56[COMRAM] int 
  6460 ;;  y0              2   58[COMRAM] int 
  6461 ;;  r               2   60[COMRAM] int 
  6462 ;;  color           2   62[COMRAM] unsigned int 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;		None               void
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6474 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;Total ram usage:        8 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    7
  6481 ;; This function calls:
  6482 ;;		_drawFastVLine
  6483 ;;		_fillCircleHelper
  6484 ;; This function is called by:
  6485 ;;		_Initialize_Screen
  6486 ;;		_update_LCD_color
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text28
  6491  0021C8                     __ptext28:
  6492                           	opt stack 0
  6493  0021C8                     _fillCircle:
  6494                           	opt stack 20
  6495                           
  6496                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6497                           
  6498                           ;incstack = 0
  6499  0021C8  503D               	movf	fillCircle@r,w,c
  6500  0021CA  0800               	sublw	0
  6501  0021CC  243B               	addwf	fillCircle@y0,w,c
  6502  0021CE  6E16               	movwf	drawFastVLine@y,c
  6503  0021D0  80D8               	bsf	status,0,c
  6504  0021D2  343D               	rlcf	fillCircle@r,w,c
  6505  0021D4  6E17               	movwf	drawFastVLine@h,c
  6506  0021D6  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  6507  0021DA  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  6508  0021DE  5039               	movf	fillCircle@x0,w,c
  6509  0021E0  ECB4  F00E         	call	_drawFastVLine
  6510                           
  6511                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  6512  0021E4  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  6513  0021E8  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6514  0021EC  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  6515  0021F0  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6516  0021F4  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  6517  0021F8  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6518  0021FC  0E00               	movlw	0
  6519  0021FE  6E28               	movwf	fillCircleHelper@cornername+1,c
  6520  002200  0E03               	movlw	3
  6521  002202  6E27               	movwf	fillCircleHelper@cornername,c
  6522  002204  0E00               	movlw	0
  6523  002206  6E2A               	movwf	fillCircleHelper@delta+1,c
  6524  002208  0E00               	movlw	0
  6525  00220A  6E29               	movwf	fillCircleHelper@delta,c
  6526  00220C  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  6527  002210  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6528  002214  ECAE  F008         	call	_fillCircleHelper	;wreg free
  6529  002218  0012               	return		;funcret
  6530  00221A                     __end_of_fillCircle:
  6531                           	opt stack 0
  6532                           tblptru	equ	0xFF8
  6533                           tblptrh	equ	0xFF7
  6534                           tblptrl	equ	0xFF6
  6535                           tablat	equ	0xFF5
  6536                           prodl	equ	0xFF3
  6537                           intcon	equ	0xFF2
  6538                           intcon2	equ	0xFF1
  6539                           intcon3	equ	0xFF0
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           postdec1	equ	0xFE5
  6543                           fsr1l	equ	0xFE1
  6544                           status	equ	0xFD8
  6545                           
  6546 ;; *************** function _fillCircleHelper *****************
  6547 ;; Defined at:
  6548 ;;		line 622 in file "ST7735_TFT.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;  x0              2   32[COMRAM] int 
  6551 ;;  y0              2   34[COMRAM] int 
  6552 ;;  r               2   36[COMRAM] int 
  6553 ;;  cornername      2   38[COMRAM] unsigned int 
  6554 ;;  delta           2   40[COMRAM] int 
  6555 ;;  color           2   42[COMRAM] unsigned int 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;  y               2   54[COMRAM] int 
  6558 ;;  x               2   52[COMRAM] int 
  6559 ;;  f               2   50[COMRAM] int 
  6560 ;;  ddF_y           2   48[COMRAM] int 
  6561 ;;  ddF_x           2   46[COMRAM] int 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;		None               void
  6564 ;; Registers used:
  6565 ;;		wreg, status,2, status,0, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6571 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;Total ram usage:       24 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    6
  6578 ;; This function calls:
  6579 ;;		_drawFastVLine
  6580 ;; This function is called by:
  6581 ;;		_fillCircle
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text29
  6586  00115C                     __ptext29:
  6587                           	opt stack 0
  6588  00115C                     _fillCircleHelper:
  6589                           	opt stack 20
  6590                           
  6591                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  6592                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6593                           
  6594                           ;incstack = 0
  6595  00115C  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6596  001160  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6597  001164  1E2D               	comf	??_fillCircleHelper,f,c
  6598  001166  1E2E               	comf	??_fillCircleHelper+1,f,c
  6599  001168  4A2D               	infsnz	??_fillCircleHelper,f,c
  6600  00116A  2A2E               	incf	??_fillCircleHelper+1,f,c
  6601  00116C  0E01               	movlw	1
  6602  00116E  242D               	addwf	??_fillCircleHelper,w,c
  6603  001170  6E33               	movwf	fillCircleHelper@f,c
  6604  001172  0E00               	movlw	0
  6605  001174  202E               	addwfc	??_fillCircleHelper+1,w,c
  6606  001176  6E34               	movwf	fillCircleHelper@f+1,c
  6607  001178  0E00               	movlw	0
  6608  00117A  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  6609  00117C  0E01               	movlw	1
  6610  00117E  6E2F               	movwf	fillCircleHelper@ddF_x,c
  6611  001180  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6612  001184  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6613  001188  90D8               	bcf	status,0,c
  6614  00118A  362D               	rlcf	??_fillCircleHelper,f,c
  6615  00118C  362E               	rlcf	??_fillCircleHelper+1,f,c
  6616  00118E  1E2D               	comf	??_fillCircleHelper,f,c
  6617  001190  1E2E               	comf	??_fillCircleHelper+1,f,c
  6618  001192  4A2D               	infsnz	??_fillCircleHelper,f,c
  6619  001194  2A2E               	incf	??_fillCircleHelper+1,f,c
  6620  001196  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6621  00119A  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6622  00119E  0E00               	movlw	0
  6623  0011A0  6E36               	movwf	fillCircleHelper@x+1,c
  6624  0011A2  0E00               	movlw	0
  6625  0011A4  6E35               	movwf	fillCircleHelper@x,c
  6626  0011A6  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  6627  0011AA  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  6628                           
  6629                           ;ST7735_TFT.c: 626: while (x<y) {
  6630  0011AE  D067               	goto	l4420
  6631  0011B0                     l4400:
  6632                           
  6633                           ;ST7735_TFT.c: 627: if (f >= 0) {
  6634  0011B0  BE34               	btfsc	fillCircleHelper@f+1,7,c
  6635  0011B2  D00B               	goto	l271
  6636                           
  6637                           ;ST7735_TFT.c: 628: y--;
  6638  0011B4  0637               	decf	fillCircleHelper@y,f,c
  6639  0011B6  A0D8               	btfss	status,0,c
  6640  0011B8  0638               	decf	fillCircleHelper@y+1,f,c
  6641                           
  6642                           ;ST7735_TFT.c: 629: ddF_y += 2;
  6643  0011BA  0E02               	movlw	2
  6644  0011BC  2631               	addwf	fillCircleHelper@ddF_y,f,c
  6645  0011BE  0E00               	movlw	0
  6646  0011C0  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  6647                           
  6648                           ;ST7735_TFT.c: 630: f += ddF_y;
  6649  0011C2  5031               	movf	fillCircleHelper@ddF_y,w,c
  6650  0011C4  2633               	addwf	fillCircleHelper@f,f,c
  6651  0011C6  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  6652  0011C8  2234               	addwfc	fillCircleHelper@f+1,f,c
  6653  0011CA                     l271:
  6654                           
  6655                           ;ST7735_TFT.c: 631: }
  6656                           ;ST7735_TFT.c: 632: x++;
  6657  0011CA  4A35               	infsnz	fillCircleHelper@x,f,c
  6658  0011CC  2A36               	incf	fillCircleHelper@x+1,f,c
  6659                           
  6660                           ;ST7735_TFT.c: 633: ddF_x += 2;
  6661  0011CE  0E02               	movlw	2
  6662  0011D0  262F               	addwf	fillCircleHelper@ddF_x,f,c
  6663  0011D2  0E00               	movlw	0
  6664  0011D4  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  6665                           
  6666                           ;ST7735_TFT.c: 634: f += ddF_x;
  6667  0011D6  502F               	movf	fillCircleHelper@ddF_x,w,c
  6668  0011D8  2633               	addwf	fillCircleHelper@f,f,c
  6669  0011DA  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  6670  0011DC  2234               	addwfc	fillCircleHelper@f+1,f,c
  6671                           
  6672                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  6673  0011DE  A027               	btfss	fillCircleHelper@cornername,0,c
  6674  0011E0  D025               	goto	l4416
  6675                           
  6676                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  6677  0011E2  5037               	movf	fillCircleHelper@y,w,c
  6678  0011E4  0800               	sublw	0
  6679  0011E6  2423               	addwf	fillCircleHelper@y0,w,c
  6680  0011E8  6E16               	movwf	drawFastVLine@y,c
  6681  0011EA  5037               	movf	fillCircleHelper@y,w,c
  6682  0011EC  2437               	addwf	fillCircleHelper@y,w,c
  6683  0011EE  2429               	addwf	fillCircleHelper@delta,w,c
  6684  0011F0  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6685  0011F2  282D               	incf	??_fillCircleHelper,w,c
  6686  0011F4  6E17               	movwf	drawFastVLine@h,c
  6687  0011F6  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6688  0011FA  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6689  0011FE  5021               	movf	fillCircleHelper@x0,w,c
  6690  001200  2435               	addwf	fillCircleHelper@x,w,c
  6691  001202  ECB4  F00E         	call	_drawFastVLine
  6692                           
  6693                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  6694  001206  5035               	movf	fillCircleHelper@x,w,c
  6695  001208  0800               	sublw	0
  6696  00120A  2423               	addwf	fillCircleHelper@y0,w,c
  6697  00120C  6E16               	movwf	drawFastVLine@y,c
  6698  00120E  5035               	movf	fillCircleHelper@x,w,c
  6699  001210  2435               	addwf	fillCircleHelper@x,w,c
  6700  001212  2429               	addwf	fillCircleHelper@delta,w,c
  6701  001214  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6702  001216  282D               	incf	??_fillCircleHelper,w,c
  6703  001218  6E17               	movwf	drawFastVLine@h,c
  6704  00121A  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6705  00121E  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6706  001222  5021               	movf	fillCircleHelper@x0,w,c
  6707  001224  2437               	addwf	fillCircleHelper@y,w,c
  6708  001226  ECB4  F00E         	call	_drawFastVLine
  6709  00122A  D000               	goto	l4416
  6710  00122C                     l4416:
  6711                           
  6712                           ;ST7735_TFT.c: 639: }
  6713                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  6714  00122C  A227               	btfss	fillCircleHelper@cornername,1,c
  6715  00122E  D027               	goto	l4420
  6716                           
  6717                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  6718  001230  5037               	movf	fillCircleHelper@y,w,c
  6719  001232  0800               	sublw	0
  6720  001234  2423               	addwf	fillCircleHelper@y0,w,c
  6721  001236  6E16               	movwf	drawFastVLine@y,c
  6722  001238  5037               	movf	fillCircleHelper@y,w,c
  6723  00123A  2437               	addwf	fillCircleHelper@y,w,c
  6724  00123C  2429               	addwf	fillCircleHelper@delta,w,c
  6725  00123E  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6726  001240  282D               	incf	??_fillCircleHelper,w,c
  6727  001242  6E17               	movwf	drawFastVLine@h,c
  6728  001244  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6729  001248  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6730  00124C  5035               	movf	fillCircleHelper@x,w,c
  6731  00124E  0800               	sublw	0
  6732  001250  2421               	addwf	fillCircleHelper@x0,w,c
  6733  001252  ECB4  F00E         	call	_drawFastVLine
  6734                           
  6735                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  6736  001256  5035               	movf	fillCircleHelper@x,w,c
  6737  001258  0800               	sublw	0
  6738  00125A  2423               	addwf	fillCircleHelper@y0,w,c
  6739  00125C  6E16               	movwf	drawFastVLine@y,c
  6740  00125E  5035               	movf	fillCircleHelper@x,w,c
  6741  001260  2435               	addwf	fillCircleHelper@x,w,c
  6742  001262  2429               	addwf	fillCircleHelper@delta,w,c
  6743  001264  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6744  001266  282D               	incf	??_fillCircleHelper,w,c
  6745  001268  6E17               	movwf	drawFastVLine@h,c
  6746  00126A  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6747  00126E  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6748  001272  5037               	movf	fillCircleHelper@y,w,c
  6749  001274  0800               	sublw	0
  6750  001276  2421               	addwf	fillCircleHelper@x0,w,c
  6751  001278  ECB4  F00E         	call	_drawFastVLine
  6752  00127C  D000               	goto	l4420
  6753  00127E                     l4420:
  6754  00127E  5037               	movf	fillCircleHelper@y,w,c
  6755  001280  5C35               	subwf	fillCircleHelper@x,w,c
  6756  001282  5036               	movf	fillCircleHelper@x+1,w,c
  6757  001284  0A80               	xorlw	128
  6758  001286  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6759  001288  5038               	movf	fillCircleHelper@y+1,w,c
  6760  00128A  0A80               	xorlw	128
  6761  00128C  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  6762  00128E  A0D8               	btfss	status,0,c
  6763  001290  D78F               	goto	l4400
  6764  001292  0012               	return		;funcret
  6765  001294                     __end_of_fillCircleHelper:
  6766                           	opt stack 0
  6767                           tblptru	equ	0xFF8
  6768                           tblptrh	equ	0xFF7
  6769                           tblptrl	equ	0xFF6
  6770                           tablat	equ	0xFF5
  6771                           prodl	equ	0xFF3
  6772                           intcon	equ	0xFF2
  6773                           intcon2	equ	0xFF1
  6774                           intcon3	equ	0xFF0
  6775                           postinc0	equ	0xFEE
  6776                           wreg	equ	0xFE8
  6777                           postdec1	equ	0xFE5
  6778                           fsr1l	equ	0xFE1
  6779                           status	equ	0xFD8
  6780                           
  6781 ;; *************** function _drawCircle *****************
  6782 ;; Defined at:
  6783 ;;		line 561 in file "ST7735_TFT.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  x0              2   25[COMRAM] int 
  6786 ;;  y0              2   27[COMRAM] int 
  6787 ;;  r               2   29[COMRAM] int 
  6788 ;;  color           2   31[COMRAM] unsigned int 
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  y               2   43[COMRAM] int 
  6791 ;;  x               2   41[COMRAM] int 
  6792 ;;  f               2   39[COMRAM] int 
  6793 ;;  ddF_y           2   37[COMRAM] int 
  6794 ;;  ddF_x           2   35[COMRAM] int 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;		None               void
  6797 ;; Registers used:
  6798 ;;		wreg, status,2, status,0, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6804 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;Total ram usage:       20 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    6
  6811 ;; This function calls:
  6812 ;;		_drawPixel
  6813 ;; This function is called by:
  6814 ;;		_Initialize_Screen
  6815 ;;		_update_LCD_color
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           	psect	text30
  6820  000CCE                     __ptext30:
  6821                           	opt stack 0
  6822  000CCE                     _drawCircle:
  6823                           	opt stack 21
  6824                           
  6825                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  6826                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6827                           
  6828                           ;incstack = 0
  6829  000CCE  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6830  000CD2  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6831  000CD6  1E22               	comf	??_drawCircle,f,c
  6832  000CD8  1E23               	comf	??_drawCircle+1,f,c
  6833  000CDA  4A22               	infsnz	??_drawCircle,f,c
  6834  000CDC  2A23               	incf	??_drawCircle+1,f,c
  6835  000CDE  0E01               	movlw	1
  6836  000CE0  2422               	addwf	??_drawCircle,w,c
  6837  000CE2  6E28               	movwf	drawCircle@f,c
  6838  000CE4  0E00               	movlw	0
  6839  000CE6  2023               	addwfc	??_drawCircle+1,w,c
  6840  000CE8  6E29               	movwf	drawCircle@f+1,c
  6841  000CEA  0E00               	movlw	0
  6842  000CEC  6E25               	movwf	drawCircle@ddF_x+1,c
  6843  000CEE  0E01               	movlw	1
  6844  000CF0  6E24               	movwf	drawCircle@ddF_x,c
  6845  000CF2  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6846  000CF6  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6847  000CFA  90D8               	bcf	status,0,c
  6848  000CFC  3622               	rlcf	??_drawCircle,f,c
  6849  000CFE  3623               	rlcf	??_drawCircle+1,f,c
  6850  000D00  1E22               	comf	??_drawCircle,f,c
  6851  000D02  1E23               	comf	??_drawCircle+1,f,c
  6852  000D04  4A22               	infsnz	??_drawCircle,f,c
  6853  000D06  2A23               	incf	??_drawCircle+1,f,c
  6854  000D08  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  6855  000D0C  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6856  000D10  0E00               	movlw	0
  6857  000D12  6E2B               	movwf	drawCircle@x+1,c
  6858  000D14  0E00               	movlw	0
  6859  000D16  6E2A               	movwf	drawCircle@x,c
  6860  000D18  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  6861  000D1C  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  6862                           
  6863                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  6864  000D20  501C               	movf	drawCircle@y0,w,c
  6865  000D22  241E               	addwf	drawCircle@r,w,c
  6866  000D24  6E16               	movwf	drawPixel@y,c
  6867  000D26  C020  F017         	movff	drawCircle@color,drawPixel@color
  6868  000D2A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6869  000D2E  501A               	movf	drawCircle@x0,w,c
  6870  000D30  EC79  F012         	call	_drawPixel
  6871                           
  6872                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  6873  000D34  501E               	movf	drawCircle@r,w,c
  6874  000D36  0800               	sublw	0
  6875  000D38  241C               	addwf	drawCircle@y0,w,c
  6876  000D3A  6E16               	movwf	drawPixel@y,c
  6877  000D3C  C020  F017         	movff	drawCircle@color,drawPixel@color
  6878  000D40  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6879  000D44  501A               	movf	drawCircle@x0,w,c
  6880  000D46  EC79  F012         	call	_drawPixel
  6881                           
  6882                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  6883  000D4A  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6884  000D4E  C020  F017         	movff	drawCircle@color,drawPixel@color
  6885  000D52  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6886  000D56  501A               	movf	drawCircle@x0,w,c
  6887  000D58  241E               	addwf	drawCircle@r,w,c
  6888  000D5A  EC79  F012         	call	_drawPixel
  6889                           
  6890                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  6891  000D5E  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6892  000D62  C020  F017         	movff	drawCircle@color,drawPixel@color
  6893  000D66  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6894  000D6A  501E               	movf	drawCircle@r,w,c
  6895  000D6C  0800               	sublw	0
  6896  000D6E  241A               	addwf	drawCircle@x0,w,c
  6897  000D70  EC79  F012         	call	_drawPixel
  6898                           
  6899                           ;ST7735_TFT.c: 569: while (x < y) {
  6900  000D74  D078               	goto	l4566
  6901  000D76                     l4538:
  6902                           
  6903                           ;ST7735_TFT.c: 570: if (f >= 0) {
  6904  000D76  BE29               	btfsc	drawCircle@f+1,7,c
  6905  000D78  D00B               	goto	l253
  6906                           
  6907                           ;ST7735_TFT.c: 571: y--;
  6908  000D7A  062C               	decf	drawCircle@y,f,c
  6909  000D7C  A0D8               	btfss	status,0,c
  6910  000D7E  062D               	decf	drawCircle@y+1,f,c
  6911                           
  6912                           ;ST7735_TFT.c: 572: ddF_y += 2;
  6913  000D80  0E02               	movlw	2
  6914  000D82  2626               	addwf	drawCircle@ddF_y,f,c
  6915  000D84  0E00               	movlw	0
  6916  000D86  2227               	addwfc	drawCircle@ddF_y+1,f,c
  6917                           
  6918                           ;ST7735_TFT.c: 573: f += ddF_y;
  6919  000D88  5026               	movf	drawCircle@ddF_y,w,c
  6920  000D8A  2628               	addwf	drawCircle@f,f,c
  6921  000D8C  5027               	movf	drawCircle@ddF_y+1,w,c
  6922  000D8E  2229               	addwfc	drawCircle@f+1,f,c
  6923  000D90                     l253:
  6924                           
  6925                           ;ST7735_TFT.c: 574: }
  6926                           ;ST7735_TFT.c: 575: x++;
  6927  000D90  4A2A               	infsnz	drawCircle@x,f,c
  6928  000D92  2A2B               	incf	drawCircle@x+1,f,c
  6929                           
  6930                           ;ST7735_TFT.c: 576: ddF_x += 2;
  6931  000D94  0E02               	movlw	2
  6932  000D96  2624               	addwf	drawCircle@ddF_x,f,c
  6933  000D98  0E00               	movlw	0
  6934  000D9A  2225               	addwfc	drawCircle@ddF_x+1,f,c
  6935                           
  6936                           ;ST7735_TFT.c: 577: f += ddF_x;
  6937  000D9C  5024               	movf	drawCircle@ddF_x,w,c
  6938  000D9E  2628               	addwf	drawCircle@f,f,c
  6939  000DA0  5025               	movf	drawCircle@ddF_x+1,w,c
  6940  000DA2  2229               	addwfc	drawCircle@f+1,f,c
  6941                           
  6942                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  6943  000DA4  501C               	movf	drawCircle@y0,w,c
  6944  000DA6  242C               	addwf	drawCircle@y,w,c
  6945  000DA8  6E16               	movwf	drawPixel@y,c
  6946  000DAA  C020  F017         	movff	drawCircle@color,drawPixel@color
  6947  000DAE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6948  000DB2  501A               	movf	drawCircle@x0,w,c
  6949  000DB4  242A               	addwf	drawCircle@x,w,c
  6950  000DB6  EC79  F012         	call	_drawPixel
  6951                           
  6952                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  6953  000DBA  501C               	movf	drawCircle@y0,w,c
  6954  000DBC  242C               	addwf	drawCircle@y,w,c
  6955  000DBE  6E16               	movwf	drawPixel@y,c
  6956  000DC0  C020  F017         	movff	drawCircle@color,drawPixel@color
  6957  000DC4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6958  000DC8  502A               	movf	drawCircle@x,w,c
  6959  000DCA  0800               	sublw	0
  6960  000DCC  241A               	addwf	drawCircle@x0,w,c
  6961  000DCE  EC79  F012         	call	_drawPixel
  6962                           
  6963                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  6964  000DD2  502C               	movf	drawCircle@y,w,c
  6965  000DD4  0800               	sublw	0
  6966  000DD6  241C               	addwf	drawCircle@y0,w,c
  6967  000DD8  6E16               	movwf	drawPixel@y,c
  6968  000DDA  C020  F017         	movff	drawCircle@color,drawPixel@color
  6969  000DDE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6970  000DE2  501A               	movf	drawCircle@x0,w,c
  6971  000DE4  242A               	addwf	drawCircle@x,w,c
  6972  000DE6  EC79  F012         	call	_drawPixel
  6973                           
  6974                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  6975  000DEA  502C               	movf	drawCircle@y,w,c
  6976  000DEC  0800               	sublw	0
  6977  000DEE  241C               	addwf	drawCircle@y0,w,c
  6978  000DF0  6E16               	movwf	drawPixel@y,c
  6979  000DF2  C020  F017         	movff	drawCircle@color,drawPixel@color
  6980  000DF6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6981  000DFA  502A               	movf	drawCircle@x,w,c
  6982  000DFC  0800               	sublw	0
  6983  000DFE  241A               	addwf	drawCircle@x0,w,c
  6984  000E00  EC79  F012         	call	_drawPixel
  6985                           
  6986                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  6987  000E04  501C               	movf	drawCircle@y0,w,c
  6988  000E06  242A               	addwf	drawCircle@x,w,c
  6989  000E08  6E16               	movwf	drawPixel@y,c
  6990  000E0A  C020  F017         	movff	drawCircle@color,drawPixel@color
  6991  000E0E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6992  000E12  501A               	movf	drawCircle@x0,w,c
  6993  000E14  242C               	addwf	drawCircle@y,w,c
  6994  000E16  EC79  F012         	call	_drawPixel
  6995                           
  6996                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  6997  000E1A  501C               	movf	drawCircle@y0,w,c
  6998  000E1C  242A               	addwf	drawCircle@x,w,c
  6999  000E1E  6E16               	movwf	drawPixel@y,c
  7000  000E20  C020  F017         	movff	drawCircle@color,drawPixel@color
  7001  000E24  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7002  000E28  502C               	movf	drawCircle@y,w,c
  7003  000E2A  0800               	sublw	0
  7004  000E2C  241A               	addwf	drawCircle@x0,w,c
  7005  000E2E  EC79  F012         	call	_drawPixel
  7006                           
  7007                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7008  000E32  502A               	movf	drawCircle@x,w,c
  7009  000E34  0800               	sublw	0
  7010  000E36  241C               	addwf	drawCircle@y0,w,c
  7011  000E38  6E16               	movwf	drawPixel@y,c
  7012  000E3A  C020  F017         	movff	drawCircle@color,drawPixel@color
  7013  000E3E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7014  000E42  501A               	movf	drawCircle@x0,w,c
  7015  000E44  242C               	addwf	drawCircle@y,w,c
  7016  000E46  EC79  F012         	call	_drawPixel
  7017                           
  7018                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7019  000E4A  502A               	movf	drawCircle@x,w,c
  7020  000E4C  0800               	sublw	0
  7021  000E4E  241C               	addwf	drawCircle@y0,w,c
  7022  000E50  6E16               	movwf	drawPixel@y,c
  7023  000E52  C020  F017         	movff	drawCircle@color,drawPixel@color
  7024  000E56  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7025  000E5A  502C               	movf	drawCircle@y,w,c
  7026  000E5C  0800               	sublw	0
  7027  000E5E  241A               	addwf	drawCircle@x0,w,c
  7028  000E60  EC79  F012         	call	_drawPixel
  7029  000E64  D000               	goto	l4566
  7030  000E66                     l4566:
  7031  000E66  502C               	movf	drawCircle@y,w,c
  7032  000E68  5C2A               	subwf	drawCircle@x,w,c
  7033  000E6A  502B               	movf	drawCircle@x+1,w,c
  7034  000E6C  0A80               	xorlw	128
  7035  000E6E  6E22               	movwf	??_drawCircle& (0+255),c
  7036  000E70  502D               	movf	drawCircle@y+1,w,c
  7037  000E72  0A80               	xorlw	128
  7038  000E74  5822               	subwfb	??_drawCircle& (0+255),w,c
  7039  000E76  A0D8               	btfss	status,0,c
  7040  000E78  D77E               	goto	l4538
  7041  000E7A  0012               	return		;funcret
  7042  000E7C                     __end_of_drawCircle:
  7043                           	opt stack 0
  7044                           tblptru	equ	0xFF8
  7045                           tblptrh	equ	0xFF7
  7046                           tblptrl	equ	0xFF6
  7047                           tablat	equ	0xFF5
  7048                           prodl	equ	0xFF3
  7049                           intcon	equ	0xFF2
  7050                           intcon2	equ	0xFF1
  7051                           intcon3	equ	0xFF0
  7052                           postinc0	equ	0xFEE
  7053                           wreg	equ	0xFE8
  7054                           postdec1	equ	0xFE5
  7055                           fsr1l	equ	0xFE1
  7056                           status	equ	0xFD8
  7057                           
  7058 ;; *************** function _PED_Control *****************
  7059 ;; Defined at:
  7060 ;;		line 477 in file "Lab9pC.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  direction       1    wreg     unsigned char 
  7063 ;;  Num_Sec         1   10[BANK0 ] unsigned char 
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;  direction       1   11[BANK0 ] unsigned char 
  7066 ;;  i               1   12[BANK0 ] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;		None               void
  7069 ;; Registers used:
  7070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7076 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;Total ram usage:        3 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:   11
  7083 ;; This function calls:
  7084 ;;		_Wait_One_Second_With_Beep
  7085 ;;		_update_LCD_PED_Count
  7086 ;; This function is called by:
  7087 ;;		_Day_Mode
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text31
  7092  002114                     __ptext31:
  7093                           	opt stack 0
  7094  002114                     _PED_Control:
  7095                           	opt stack 18
  7096                           
  7097                           ;incstack = 0
  7098                           ;PED_Control@direction stored from wreg
  7099  002114  0100               	movlb	0	; () banked
  7100  002116  6FAA               	movwf	PED_Control@direction& (0+255),b
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;Lab9pC.c: 479: for(char i = Num_Sec-1;i>0; i--)
  7104  002118  0100               	movlb	0	; () banked
  7105  00211A  05A9               	decf	PED_Control@Num_Sec& (0+255),w,b
  7106  00211C  0100               	movlb	0	; () banked
  7107  00211E  6FAB               	movwf	PED_Control@i& (0+255),b
  7108  002120                     l5090:
  7109                           
  7110                           ; BSR set to: 0
  7111  002120  0100               	movlb	0	; () banked
  7112  002122  51AB               	movf	PED_Control@i& (0+255),w,b
  7113  002124  0100               	movlb	0	; () banked
  7114  002126  B4D8               	btfsc	status,2,c
  7115  002128  D00D               	goto	l5100
  7116  00212A  D001               	goto	l5094
  7117                           
  7118                           ; BSR set to: 0
  7119  00212C  D00B               	goto	l5100
  7120  00212E                     l5094:
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;Lab9pC.c: 480: {
  7124                           ;Lab9pC.c: 481: update_LCD_PED_Count(direction, i);
  7125  00212E  C0AB  F041         	movff	PED_Control@i,update_LCD_PED_Count@count
  7126  002132  0100               	movlb	0	; () banked
  7127  002134  51AA               	movf	PED_Control@direction& (0+255),w,b
  7128  002136  EC18  F00C         	call	_update_LCD_PED_Count
  7129                           
  7130                           ;Lab9pC.c: 482: Wait_One_Second_With_Beep();
  7131  00213A  EC2B  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  7132  00213E  0100               	movlb	0	; () banked
  7133  002140  07AB               	decf	PED_Control@i& (0+255),f,b
  7134  002142  D7EE               	goto	l5090
  7135  002144                     l5100:
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;Lab9pC.c: 483: }
  7139                           ;Lab9pC.c: 485: update_LCD_PED_Count(direction, 0);
  7140  002144  0E00               	movlw	0
  7141  002146  6E41               	movwf	update_LCD_PED_Count@count,c
  7142  002148  0100               	movlb	0	; () banked
  7143  00214A  51AA               	movf	PED_Control@direction& (0+255),w,b
  7144  00214C  EC18  F00C         	call	_update_LCD_PED_Count
  7145                           
  7146                           ;Lab9pC.c: 486: Wait_One_Second_With_Beep();
  7147  002150  EC2B  F00E         	call	_Wait_One_Second_With_Beep	;wreg free
  7148                           
  7149                           ;Lab9pC.c: 488: switch(direction)
  7150  002154  D006               	goto	l5108
  7151  002156                     l5102:
  7152  002156  0E00               	movlw	0
  7153  002158  6E4F               	movwf	_NS_PED_SW,c
  7154                           
  7155                           ;Lab9pC.c: 491: break;
  7156  00215A  D00C               	goto	l481
  7157  00215C                     l5104:
  7158  00215C  0E00               	movlw	0
  7159  00215E  6E4C               	movwf	_EW_PED_SW,c
  7160                           
  7161                           ;Lab9pC.c: 494: }
  7162                           
  7163                           ;Lab9pC.c: 493: break;
  7164  002160  D009               	goto	l481
  7165  002162                     l5108:
  7166  002162  0100               	movlb	0	; () banked
  7167  002164  51AA               	movf	PED_Control@direction& (0+255),w,b
  7168                           
  7169                           ; Switch size 1, requested type "space"
  7170                           ; Number of cases is 2, Range of values is 0 to 2
  7171                           ; switch strategies available:
  7172                           ; Name         Instructions Cycles
  7173                           ; simple_byte            7     4 (average)
  7174                           ;	Chosen strategy is simple_byte
  7175  002166  0A00               	xorlw	0	; case 0
  7176  002168  B4D8               	btfsc	status,2,c
  7177  00216A  D7F5               	goto	l5102
  7178  00216C  0A02               	xorlw	2	; case 2
  7179  00216E  B4D8               	btfsc	status,2,c
  7180  002170  D7F5               	goto	l5104
  7181  002172  D000               	goto	l481
  7182  002174                     l481:
  7183  002174  0012               	return		;funcret
  7184  002176                     __end_of_PED_Control:
  7185                           	opt stack 0
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodl	equ	0xFF3
  7191                           intcon	equ	0xFF2
  7192                           intcon2	equ	0xFF1
  7193                           intcon3	equ	0xFF0
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           postdec1	equ	0xFE5
  7197                           fsr1l	equ	0xFE1
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function _update_LCD_PED_Count *****************
  7201 ;; Defined at:
  7202 ;;		line 730 in file "Lab9pC.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;  direction       1    wreg     unsigned char 
  7205 ;;  count           1   64[COMRAM] unsigned char 
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;  direction       1    7[BANK0 ] unsigned char 
  7208 ;; Return value:  Size  Location     Type
  7209 ;;		None               void
  7210 ;; Registers used:
  7211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7217 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;Total ram usage:        2 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:    9
  7224 ;; This function calls:
  7225 ;;		___awdiv
  7226 ;;		___awmod
  7227 ;;		_drawtext
  7228 ;; This function is called by:
  7229 ;;		_PED_Control
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text32
  7234  001830                     __ptext32:
  7235                           	opt stack 0
  7236  001830                     _update_LCD_PED_Count:
  7237                           	opt stack 19
  7238                           
  7239                           ;incstack = 0
  7240                           ;update_LCD_PED_Count@direction stored from wreg
  7241  001830  0100               	movlb	0	; () banked
  7242  001832  6FA6               	movwf	update_LCD_PED_Count@direction& (0+255),b
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;Lab9pC.c: 732: switch (direction)
  7246  001834  D05B               	goto	l4982
  7247  001836                     l4972:
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;Lab9pC.c: 735: PED_NS_Count[0] = count/10 + '0';
  7251  001836  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7252  00183A  6A10               	clrf	___awdiv@dividend+1,c
  7253  00183C  0E00               	movlw	0
  7254  00183E  6E12               	movwf	___awdiv@divisor+1,c
  7255  001840  0E0A               	movlw	10
  7256  001842  6E11               	movwf	___awdiv@divisor,c
  7257  001844  EC95  F00D         	call	___awdiv	;wreg free
  7258  001848  500F               	movf	?___awdiv,w,c
  7259  00184A  0F30               	addlw	48
  7260  00184C  0100               	movlb	0	; () banked
  7261  00184E  6FB7               	movwf	_PED_NS_Count& (0+255),b
  7262                           
  7263                           ;Lab9pC.c: 736: PED_NS_Count[1] = count%10 + '0';
  7264  001850  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7265  001854  6A10               	clrf	___awmod@dividend+1,c
  7266  001856  0E00               	movlw	0
  7267  001858  6E12               	movwf	___awmod@divisor+1,c
  7268  00185A  0E0A               	movlw	10
  7269  00185C  6E11               	movwf	___awmod@divisor,c
  7270  00185E  EC7C  F00F         	call	___awmod	;wreg free
  7271  001862  500F               	movf	?___awmod,w,c
  7272  001864  0F30               	addlw	48
  7273  001866  0100               	movlb	0	; () banked
  7274  001868  6FB8               	movwf	(_PED_NS_Count+1)& (0+255),b
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;Lab9pC.c: 737: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  7278  00186A  0E1E               	movlw	30
  7279  00186C  6E37               	movwf	drawtext@y,c
  7280  00186E  0EB7               	movlw	low _PED_NS_Count
  7281  001870  6E38               	movwf	drawtext@_text,c
  7282  001872  0E00               	movlw	high _PED_NS_Count
  7283  001874  6E39               	movwf	drawtext@_text+1,c
  7284  001876  0E00               	movlw	0
  7285  001878  6E3B               	movwf	drawtext@color+1,c
  7286  00187A  0E1F               	movlw	31
  7287  00187C  6E3A               	movwf	drawtext@color,c
  7288  00187E  0E00               	movlw	0
  7289  001880  6E3D               	movwf	drawtext@bg+1,c
  7290  001882  0E00               	movlw	0
  7291  001884  6E3C               	movwf	drawtext@bg,c
  7292  001886  0E02               	movlw	2
  7293  001888  6E3E               	movwf	drawtext@size,c
  7294  00188A  0E02               	movlw	2
  7295  00188C  ECD2  F009         	call	_drawtext
  7296                           
  7297                           ;Lab9pC.c: 738: break;
  7298  001890  D036               	goto	l536
  7299  001892                     l4976:
  7300                           
  7301                           ;Lab9pC.c: 741: PED_EW_Count[0] = count/10 + '0';
  7302  001892  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7303  001896  6A10               	clrf	___awdiv@dividend+1,c
  7304  001898  0E00               	movlw	0
  7305  00189A  6E12               	movwf	___awdiv@divisor+1,c
  7306  00189C  0E0A               	movlw	10
  7307  00189E  6E11               	movwf	___awdiv@divisor,c
  7308  0018A0  EC95  F00D         	call	___awdiv	;wreg free
  7309  0018A4  500F               	movf	?___awdiv,w,c
  7310  0018A6  0F30               	addlw	48
  7311  0018A8  0100               	movlb	0	; () banked
  7312  0018AA  6FB4               	movwf	_PED_EW_Count& (0+255),b
  7313                           
  7314                           ;Lab9pC.c: 742: PED_EW_Count[1] = count%10 + '0';
  7315  0018AC  C041  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7316  0018B0  6A10               	clrf	___awmod@dividend+1,c
  7317  0018B2  0E00               	movlw	0
  7318  0018B4  6E12               	movwf	___awmod@divisor+1,c
  7319  0018B6  0E0A               	movlw	10
  7320  0018B8  6E11               	movwf	___awmod@divisor,c
  7321  0018BA  EC7C  F00F         	call	___awmod	;wreg free
  7322  0018BE  500F               	movf	?___awmod,w,c
  7323  0018C0  0F30               	addlw	48
  7324  0018C2  0100               	movlb	0	; () banked
  7325  0018C4  6FB5               	movwf	(_PED_EW_Count+1)& (0+255),b
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;Lab9pC.c: 743: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  7329  0018C6  0E5A               	movlw	90
  7330  0018C8  6E37               	movwf	drawtext@y,c
  7331  0018CA  0EB4               	movlw	low _PED_EW_Count
  7332  0018CC  6E38               	movwf	drawtext@_text,c
  7333  0018CE  0E00               	movlw	high _PED_EW_Count
  7334  0018D0  6E39               	movwf	drawtext@_text+1,c
  7335  0018D2  0E07               	movlw	7
  7336  0018D4  6E3B               	movwf	drawtext@color+1,c
  7337  0018D6  683A               	setf	drawtext@color,c
  7338  0018D8  0E00               	movlw	0
  7339  0018DA  6E3D               	movwf	drawtext@bg+1,c
  7340  0018DC  0E00               	movlw	0
  7341  0018DE  6E3C               	movwf	drawtext@bg,c
  7342  0018E0  0E02               	movlw	2
  7343  0018E2  6E3E               	movwf	drawtext@size,c
  7344  0018E4  0E02               	movlw	2
  7345  0018E6  ECD2  F009         	call	_drawtext
  7346                           
  7347                           ;Lab9pC.c: 745: }
  7348                           
  7349                           ;Lab9pC.c: 744: break;
  7350  0018EA  D009               	goto	l536
  7351  0018EC                     l4982:
  7352  0018EC  0100               	movlb	0	; () banked
  7353  0018EE  51A6               	movf	update_LCD_PED_Count@direction& (0+255),w,b
  7354                           
  7355                           ; Switch size 1, requested type "space"
  7356                           ; Number of cases is 2, Range of values is 0 to 2
  7357                           ; switch strategies available:
  7358                           ; Name         Instructions Cycles
  7359                           ; simple_byte            7     4 (average)
  7360                           ;	Chosen strategy is simple_byte
  7361  0018F0  0A00               	xorlw	0	; case 0
  7362  0018F2  B4D8               	btfsc	status,2,c
  7363  0018F4  D7A0               	goto	l4972
  7364  0018F6  0A02               	xorlw	2	; case 2
  7365  0018F8  B4D8               	btfsc	status,2,c
  7366  0018FA  D7CB               	goto	l4976
  7367  0018FC  D000               	goto	l536
  7368  0018FE                     l536:
  7369  0018FE  0012               	return		;funcret
  7370  001900                     __end_of_update_LCD_PED_Count:
  7371                           	opt stack 0
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           prodl	equ	0xFF3
  7377                           intcon	equ	0xFF2
  7378                           intcon2	equ	0xFF1
  7379                           intcon3	equ	0xFF0
  7380                           postinc0	equ	0xFEE
  7381                           wreg	equ	0xFE8
  7382                           postdec1	equ	0xFE5
  7383                           fsr1l	equ	0xFE1
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function ___awmod *****************
  7387 ;; Defined at:
  7388 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  dividend        2   14[COMRAM] int 
  7391 ;;  divisor         2   16[COMRAM] int 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  sign            1   19[COMRAM] unsigned char 
  7394 ;;  counter         1   18[COMRAM] unsigned char 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  2   14[COMRAM] int 
  7397 ;; Registers used:
  7398 ;;		wreg, status,2, status,0
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7404 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;Total ram usage:        6 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    2
  7411 ;; This function calls:
  7412 ;;		Nothing
  7413 ;; This function is called by:
  7414 ;;		_update_LCD_count
  7415 ;;		_update_LCD_PED_Count
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text33
  7420  001EF8                     __ptext33:
  7421                           	opt stack 0
  7422  001EF8                     ___awmod:
  7423                           	opt stack 25
  7424                           
  7425                           ;incstack = 0
  7426  001EF8  0E00               	movlw	0
  7427  001EFA  6E14               	movwf	___awmod@sign,c
  7428  001EFC  AE10               	btfss	___awmod@dividend+1,7,c
  7429  001EFE  D007               	goto	l4704
  7430  001F00  6C0F               	negf	___awmod@dividend,c
  7431  001F02  1E10               	comf	___awmod@dividend+1,f,c
  7432  001F04  B0D8               	btfsc	status,0,c
  7433  001F06  2A10               	incf	___awmod@dividend+1,f,c
  7434  001F08  0E01               	movlw	1
  7435  001F0A  6E14               	movwf	___awmod@sign,c
  7436  001F0C  D000               	goto	l4704
  7437  001F0E                     l4704:
  7438  001F0E  AE12               	btfss	___awmod@divisor+1,7,c
  7439  001F10  D005               	goto	l4708
  7440  001F12  6C11               	negf	___awmod@divisor,c
  7441  001F14  1E12               	comf	___awmod@divisor+1,f,c
  7442  001F16  B0D8               	btfsc	status,0,c
  7443  001F18  2A12               	incf	___awmod@divisor+1,f,c
  7444  001F1A  D000               	goto	l4708
  7445  001F1C                     l4708:
  7446  001F1C  5011               	movf	___awmod@divisor,w,c
  7447  001F1E  1012               	iorwf	___awmod@divisor+1,w,c
  7448  001F20  B4D8               	btfsc	status,2,c
  7449  001F22  D01D               	goto	l4724
  7450  001F24  0E01               	movlw	1
  7451  001F26  6E13               	movwf	___awmod@counter,c
  7452  001F28  D005               	goto	l4714
  7453  001F2A                     l4712:
  7454  001F2A  90D8               	bcf	status,0,c
  7455  001F2C  3611               	rlcf	___awmod@divisor,f,c
  7456  001F2E  3612               	rlcf	___awmod@divisor+1,f,c
  7457  001F30  2A13               	incf	___awmod@counter,f,c
  7458  001F32  D000               	goto	l4714
  7459  001F34                     l4714:
  7460  001F34  BE12               	btfsc	___awmod@divisor+1,7,c
  7461  001F36  D002               	goto	l4716
  7462  001F38  D7F8               	goto	l4712
  7463  001F3A  D000               	goto	l4716
  7464  001F3C                     l4716:
  7465  001F3C  5011               	movf	___awmod@divisor,w,c
  7466  001F3E  5C0F               	subwf	___awmod@dividend,w,c
  7467  001F40  5012               	movf	___awmod@divisor+1,w,c
  7468  001F42  5810               	subwfb	___awmod@dividend+1,w,c
  7469  001F44  A0D8               	btfss	status,0,c
  7470  001F46  D005               	goto	l4720
  7471  001F48  5011               	movf	___awmod@divisor,w,c
  7472  001F4A  5E0F               	subwf	___awmod@dividend,f,c
  7473  001F4C  5012               	movf	___awmod@divisor+1,w,c
  7474  001F4E  5A10               	subwfb	___awmod@dividend+1,f,c
  7475  001F50  D000               	goto	l4720
  7476  001F52                     l4720:
  7477  001F52  90D8               	bcf	status,0,c
  7478  001F54  3212               	rrcf	___awmod@divisor+1,f,c
  7479  001F56  3211               	rrcf	___awmod@divisor,f,c
  7480  001F58  2E13               	decfsz	___awmod@counter,f,c
  7481  001F5A  D7F0               	goto	l4716
  7482  001F5C  D000               	goto	l4724
  7483  001F5E                     l4724:
  7484  001F5E  5014               	movf	___awmod@sign,w,c
  7485  001F60  B4D8               	btfsc	status,2,c
  7486  001F62  D005               	goto	l4728
  7487  001F64  6C0F               	negf	___awmod@dividend,c
  7488  001F66  1E10               	comf	___awmod@dividend+1,f,c
  7489  001F68  B0D8               	btfsc	status,0,c
  7490  001F6A  2A10               	incf	___awmod@dividend+1,f,c
  7491  001F6C  D000               	goto	l4728
  7492  001F6E                     l4728:
  7493  001F6E  C00F  F00F         	movff	___awmod@dividend,?___awmod
  7494  001F72  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  7495  001F76  D000               	goto	l795
  7496  001F78                     l795:
  7497  001F78  0012               	return		;funcret
  7498  001F7A                     __end_of___awmod:
  7499                           	opt stack 0
  7500                           tblptru	equ	0xFF8
  7501                           tblptrh	equ	0xFF7
  7502                           tblptrl	equ	0xFF6
  7503                           tablat	equ	0xFF5
  7504                           prodl	equ	0xFF3
  7505                           intcon	equ	0xFF2
  7506                           intcon2	equ	0xFF1
  7507                           intcon3	equ	0xFF0
  7508                           postinc0	equ	0xFEE
  7509                           wreg	equ	0xFE8
  7510                           postdec1	equ	0xFE5
  7511                           fsr1l	equ	0xFE1
  7512                           status	equ	0xFD8
  7513                           
  7514 ;; *************** function ___awdiv *****************
  7515 ;; Defined at:
  7516 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;  dividend        2   14[COMRAM] int 
  7519 ;;  divisor         2   16[COMRAM] int 
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;  quotient        2   20[COMRAM] int 
  7522 ;;  sign            1   19[COMRAM] unsigned char 
  7523 ;;  counter         1   18[COMRAM] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  2   14[COMRAM] int 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7533 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;Total ram usage:        8 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    2
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		_update_LCD_count
  7544 ;;		_update_LCD_PED_Count
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text34
  7549  001B2A                     __ptext34:
  7550                           	opt stack 0
  7551  001B2A                     ___awdiv:
  7552                           	opt stack 25
  7553                           
  7554                           ;incstack = 0
  7555  001B2A  0E00               	movlw	0
  7556  001B2C  6E14               	movwf	___awdiv@sign,c
  7557  001B2E  AE12               	btfss	___awdiv@divisor+1,7,c
  7558  001B30  D007               	goto	l4660
  7559  001B32  6C11               	negf	___awdiv@divisor,c
  7560  001B34  1E12               	comf	___awdiv@divisor+1,f,c
  7561  001B36  B0D8               	btfsc	status,0,c
  7562  001B38  2A12               	incf	___awdiv@divisor+1,f,c
  7563  001B3A  0E01               	movlw	1
  7564  001B3C  6E14               	movwf	___awdiv@sign,c
  7565  001B3E  D000               	goto	l4660
  7566  001B40                     l4660:
  7567  001B40  AE10               	btfss	___awdiv@dividend+1,7,c
  7568  001B42  D007               	goto	l4666
  7569  001B44  6C0F               	negf	___awdiv@dividend,c
  7570  001B46  1E10               	comf	___awdiv@dividend+1,f,c
  7571  001B48  B0D8               	btfsc	status,0,c
  7572  001B4A  2A10               	incf	___awdiv@dividend+1,f,c
  7573  001B4C  0E01               	movlw	1
  7574  001B4E  1A14               	xorwf	___awdiv@sign,f,c
  7575  001B50  D000               	goto	l4666
  7576  001B52                     l4666:
  7577  001B52  0E00               	movlw	0
  7578  001B54  6E16               	movwf	___awdiv@quotient+1,c
  7579  001B56  0E00               	movlw	0
  7580  001B58  6E15               	movwf	___awdiv@quotient,c
  7581  001B5A  5011               	movf	___awdiv@divisor,w,c
  7582  001B5C  1012               	iorwf	___awdiv@divisor+1,w,c
  7583  001B5E  B4D8               	btfsc	status,2,c
  7584  001B60  D021               	goto	l4688
  7585  001B62  0E01               	movlw	1
  7586  001B64  6E13               	movwf	___awdiv@counter,c
  7587  001B66  D005               	goto	l4674
  7588  001B68                     l4672:
  7589  001B68  90D8               	bcf	status,0,c
  7590  001B6A  3611               	rlcf	___awdiv@divisor,f,c
  7591  001B6C  3612               	rlcf	___awdiv@divisor+1,f,c
  7592  001B6E  2A13               	incf	___awdiv@counter,f,c
  7593  001B70  D000               	goto	l4674
  7594  001B72                     l4674:
  7595  001B72  BE12               	btfsc	___awdiv@divisor+1,7,c
  7596  001B74  D002               	goto	l4676
  7597  001B76  D7F8               	goto	l4672
  7598  001B78  D000               	goto	l4676
  7599  001B7A                     l4676:
  7600  001B7A  90D8               	bcf	status,0,c
  7601  001B7C  3615               	rlcf	___awdiv@quotient,f,c
  7602  001B7E  3616               	rlcf	___awdiv@quotient+1,f,c
  7603  001B80  5011               	movf	___awdiv@divisor,w,c
  7604  001B82  5C0F               	subwf	___awdiv@dividend,w,c
  7605  001B84  5012               	movf	___awdiv@divisor+1,w,c
  7606  001B86  5810               	subwfb	___awdiv@dividend+1,w,c
  7607  001B88  A0D8               	btfss	status,0,c
  7608  001B8A  D006               	goto	l4684
  7609  001B8C  5011               	movf	___awdiv@divisor,w,c
  7610  001B8E  5E0F               	subwf	___awdiv@dividend,f,c
  7611  001B90  5012               	movf	___awdiv@divisor+1,w,c
  7612  001B92  5A10               	subwfb	___awdiv@dividend+1,f,c
  7613  001B94  8015               	bsf	___awdiv@quotient,0,c
  7614  001B96  D000               	goto	l4684
  7615  001B98                     l4684:
  7616  001B98  90D8               	bcf	status,0,c
  7617  001B9A  3212               	rrcf	___awdiv@divisor+1,f,c
  7618  001B9C  3211               	rrcf	___awdiv@divisor,f,c
  7619  001B9E  2E13               	decfsz	___awdiv@counter,f,c
  7620  001BA0  D7EC               	goto	l4676
  7621  001BA2  D000               	goto	l4688
  7622  001BA4                     l4688:
  7623  001BA4  5014               	movf	___awdiv@sign,w,c
  7624  001BA6  B4D8               	btfsc	status,2,c
  7625  001BA8  D005               	goto	l4692
  7626  001BAA  6C15               	negf	___awdiv@quotient,c
  7627  001BAC  1E16               	comf	___awdiv@quotient+1,f,c
  7628  001BAE  B0D8               	btfsc	status,0,c
  7629  001BB0  2A16               	incf	___awdiv@quotient+1,f,c
  7630  001BB2  D000               	goto	l4692
  7631  001BB4                     l4692:
  7632  001BB4  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  7633  001BB8  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  7634  001BBC  D000               	goto	l782
  7635  001BBE                     l782:
  7636  001BBE  0012               	return		;funcret
  7637  001BC0                     __end_of___awdiv:
  7638                           	opt stack 0
  7639                           tblptru	equ	0xFF8
  7640                           tblptrh	equ	0xFF7
  7641                           tblptrl	equ	0xFF6
  7642                           tablat	equ	0xFF5
  7643                           prodl	equ	0xFF3
  7644                           intcon	equ	0xFF2
  7645                           intcon2	equ	0xFF1
  7646                           intcon3	equ	0xFF0
  7647                           postinc0	equ	0xFEE
  7648                           wreg	equ	0xFE8
  7649                           postdec1	equ	0xFE5
  7650                           fsr1l	equ	0xFE1
  7651                           status	equ	0xFD8
  7652                           
  7653 ;; *************** function _Wait_One_Second_With_Beep *****************
  7654 ;; Defined at:
  7655 ;;		line 615 in file "Lab9pC.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;		None
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;		None
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;Total ram usage:        0 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:   10
  7676 ;; This function calls:
  7677 ;;		_Activate_Buzzer
  7678 ;;		_Deactivate_Buzzer
  7679 ;;		_Wait_Half_Second
  7680 ;;		_drawtext
  7681 ;;		_strcpy
  7682 ;;		_update_LCD_misc
  7683 ;; This function is called by:
  7684 ;;		_PED_Control
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text35
  7689  001C56                     __ptext35:
  7690                           	opt stack 0
  7691  001C56                     _Wait_One_Second_With_Beep:
  7692                           	opt stack 18
  7693                           
  7694                           ;Lab9pC.c: 617: PORTDbits.RD7 = 1;
  7695                           
  7696                           ;incstack = 0
  7697  001C56  8E83               	bsf	3971,7,c	;volatile
  7698                           
  7699                           ;Lab9pC.c: 618: strcpy(txt,"*");
  7700  001C58  C049  F00F         	movff	_txt,strcpy@to
  7701  001C5C  C04A  F010         	movff	_txt+1,strcpy@to+1
  7702  001C60  0EFD               	movlw	low STR_5
  7703  001C62  6E11               	movwf	strcpy@from,c
  7704  001C64  0EFF               	movlw	high STR_5
  7705  001C66  6E12               	movwf	strcpy@from+1,c
  7706  001C68  EC60  F012         	call	_strcpy	;wreg free
  7707                           
  7708                           ;Lab9pC.c: 619: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7709  001C6C  0E0A               	movlw	10
  7710  001C6E  6E37               	movwf	drawtext@y,c
  7711  001C70  C049  F038         	movff	_txt,drawtext@_text
  7712  001C74  C04A  F039         	movff	_txt+1,drawtext@_text+1
  7713  001C78  0EFF               	movlw	255
  7714  001C7A  6E3B               	movwf	drawtext@color+1,c
  7715  001C7C  683A               	setf	drawtext@color,c
  7716  001C7E  0E00               	movlw	0
  7717  001C80  6E3D               	movwf	drawtext@bg+1,c
  7718  001C82  0E00               	movlw	0
  7719  001C84  6E3C               	movwf	drawtext@bg,c
  7720  001C86  0E01               	movlw	1
  7721  001C88  6E3E               	movwf	drawtext@size,c
  7722  001C8A  0E78               	movlw	120
  7723  001C8C  ECD2  F009         	call	_drawtext
  7724                           
  7725                           ;Lab9pC.c: 620: Activate_Buzzer();
  7726  001C90  EC45  F013         	call	_Activate_Buzzer	;wreg free
  7727                           
  7728                           ;Lab9pC.c: 621: Wait_Half_Second();
  7729  001C94  ECEE  F012         	call	_Wait_Half_Second	;wreg free
  7730                           
  7731                           ;Lab9pC.c: 623: PORTDbits.RD7 = 0;
  7732  001C98  9E83               	bcf	3971,7,c	;volatile
  7733                           
  7734                           ;Lab9pC.c: 624: strcpy(txt," ");
  7735  001C9A  C049  F00F         	movff	_txt,strcpy@to
  7736  001C9E  C04A  F010         	movff	_txt+1,strcpy@to+1
  7737  001CA2  0EFB               	movlw	low STR_14
  7738  001CA4  6E11               	movwf	strcpy@from,c
  7739  001CA6  0EFF               	movlw	high STR_14
  7740  001CA8  6E12               	movwf	strcpy@from+1,c
  7741  001CAA  EC60  F012         	call	_strcpy	;wreg free
  7742                           
  7743                           ;Lab9pC.c: 625: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7744  001CAE  0E0A               	movlw	10
  7745  001CB0  6E37               	movwf	drawtext@y,c
  7746  001CB2  C049  F038         	movff	_txt,drawtext@_text
  7747  001CB6  C04A  F039         	movff	_txt+1,drawtext@_text+1
  7748  001CBA  0EFF               	movlw	255
  7749  001CBC  6E3B               	movwf	drawtext@color+1,c
  7750  001CBE  683A               	setf	drawtext@color,c
  7751  001CC0  0E00               	movlw	0
  7752  001CC2  6E3D               	movwf	drawtext@bg+1,c
  7753  001CC4  0E00               	movlw	0
  7754  001CC6  6E3C               	movwf	drawtext@bg,c
  7755  001CC8  0E01               	movlw	1
  7756  001CCA  6E3E               	movwf	drawtext@size,c
  7757  001CCC  0E78               	movlw	120
  7758  001CCE  ECD2  F009         	call	_drawtext
  7759                           
  7760                           ;Lab9pC.c: 626: Deactivate_Buzzer();
  7761  001CD2  EC6B  F013         	call	_Deactivate_Buzzer	;wreg free
  7762                           
  7763                           ;Lab9pC.c: 627: Wait_Half_Second();
  7764  001CD6  ECEE  F012         	call	_Wait_Half_Second	;wreg free
  7765                           
  7766                           ;Lab9pC.c: 628: update_LCD_misc();
  7767  001CDA  EC51  F005         	call	_update_LCD_misc	;wreg free
  7768  001CDE  0012               	return		;funcret
  7769  001CE0                     __end_of_Wait_One_Second_With_Beep:
  7770                           	opt stack 0
  7771                           tblptru	equ	0xFF8
  7772                           tblptrh	equ	0xFF7
  7773                           tblptrl	equ	0xFF6
  7774                           tablat	equ	0xFF5
  7775                           prodl	equ	0xFF3
  7776                           intcon	equ	0xFF2
  7777                           intcon2	equ	0xFF1
  7778                           intcon3	equ	0xFF0
  7779                           postinc0	equ	0xFEE
  7780                           wreg	equ	0xFE8
  7781                           postdec1	equ	0xFE5
  7782                           fsr1l	equ	0xFE1
  7783                           status	equ	0xFD8
  7784                           
  7785 ;; *************** function _update_LCD_misc *****************
  7786 ;; Defined at:
  7787 ;;		line 748 in file "Lab9pC.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  nStep           2    7[BANK0 ] int 
  7792 ;;  ch              1    9[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;		None               void
  7795 ;; Registers used:
  7796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;Total ram usage:        3 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    9
  7809 ;; This function calls:
  7810 ;;		___awtoft
  7811 ;;		___ftdiv
  7812 ;;		___ftge
  7813 ;;		___wmul
  7814 ;;		_drawtext
  7815 ;;		_get_full_ADC
  7816 ;; This function is called by:
  7817 ;;		_Wait_One_Second
  7818 ;;		_Wait_One_Second_With_Beep
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           	psect	text36
  7823  000AA2                     __ptext36:
  7824                           	opt stack 0
  7825  000AA2                     _update_LCD_misc:
  7826                           	opt stack 18
  7827                           
  7828                           ;Lab9pC.c: 750: char ch = 0;
  7829                           
  7830                           ;incstack = 0
  7831  000AA2  0E00               	movlw	0
  7832  000AA4  0100               	movlb	0	; () banked
  7833  000AA6  6FA8               	movwf	update_LCD_misc@ch& (0+255),b
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;Lab9pC.c: 751: ADCON0 = ch*4+1;
  7837  000AA8  0100               	movlb	0	; () banked
  7838  000AAA  51A8               	movf	update_LCD_misc@ch& (0+255),w,b
  7839  000AAC  0D04               	mullw	4
  7840  000AAE  28F3               	incf	prodl,w,c
  7841  000AB0  6EC2               	movwf	4034,c	;volatile
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;Lab9pC.c: 752: int nStep = get_full_ADC();
  7845  000AB2  ECCD  F012         	call	_get_full_ADC	;wreg free
  7846  000AB6  C00F  F0A6         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7847  000ABA  C010  F0A7         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7848                           
  7849                           ;Lab9pC.c: 753: volt = nStep * 5 /1024.0;
  7850  000ABE  C0A6  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  7851  000AC2  C0A7  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  7852  000AC6  0E00               	movlw	0
  7853  000AC8  6E12               	movwf	___wmul@multiplicand+1,c
  7854  000ACA  0E05               	movlw	5
  7855  000ACC  6E11               	movwf	___wmul@multiplicand,c
  7856  000ACE  ECA6  F012         	call	___wmul	;wreg free
  7857  000AD2  C00F  F017         	movff	?___wmul,___awtoft@c
  7858  000AD6  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  7859  000ADA  EC27  F012         	call	___awtoft	;wreg free
  7860  000ADE  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  7861  000AE2  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  7862  000AE6  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  7863  000AEA  0E00               	movlw	0
  7864  000AEC  6E1E               	movwf	___ftdiv@f2,c
  7865  000AEE  0E80               	movlw	128
  7866  000AF0  6E1F               	movwf	___ftdiv@f2+1,c
  7867  000AF2  0E44               	movlw	68
  7868  000AF4  6E20               	movwf	___ftdiv@f2+2,c
  7869  000AF6  ECD0  F00A         	call	___ftdiv	;wreg free
  7870  000AFA  C01B  F042         	movff	?___ftdiv,_volt
  7871  000AFE  C01C  F043         	movff	?___ftdiv+1,_volt+1
  7872  000B02  C01D  F044         	movff	?___ftdiv+2,_volt+2
  7873                           
  7874                           ;Lab9pC.c: 754: SW_MODE = volt < 3.5 ? 1:0;
  7875  000B06  C042  F00F         	movff	_volt,___ftge@ff1
  7876  000B0A  C043  F010         	movff	_volt+1,___ftge@ff1+1
  7877  000B0E  C044  F011         	movff	_volt+2,___ftge@ff1+2
  7878  000B12  0E00               	movlw	0
  7879  000B14  6E12               	movwf	___ftge@ff2,c
  7880  000B16  0E60               	movlw	96
  7881  000B18  6E13               	movwf	___ftge@ff2+1,c
  7882  000B1A  0E40               	movlw	64
  7883  000B1C  6E14               	movwf	___ftge@ff2+2,c
  7884  000B1E  ECE0  F00D         	call	___ftge	;wreg free
  7885  000B22  B0D8               	btfsc	status,0,c
  7886  000B24  D002               	goto	u3260
  7887  000B26  0E01               	movlw	1
  7888  000B28  D001               	goto	u3270
  7889  000B2A                     u3260:
  7890  000B2A  0E00               	movlw	0
  7891  000B2C                     u3270:
  7892  000B2C  6E53               	movwf	_SW_MODE,c
  7893                           
  7894                           ;Lab9pC.c: 756: SW_NSPED = NS_PED_SW;
  7895  000B2E  C04F  F055         	movff	_NS_PED_SW,_SW_NSPED
  7896                           
  7897                           ;Lab9pC.c: 757: SW_NSLT = PORTAbits.RA1;
  7898  000B32  0E00               	movlw	0
  7899  000B34  B280               	btfsc	3968,1,c	;volatile
  7900  000B36  0E01               	movlw	1
  7901  000B38  6E54               	movwf	_SW_NSLT,c
  7902                           
  7903                           ;Lab9pC.c: 758: SW_EWPED = EW_PED_SW;
  7904  000B3A  C04C  F052         	movff	_EW_PED_SW,_SW_EWPED
  7905                           
  7906                           ;Lab9pC.c: 759: SW_EWLT = PORTAbits.RA2;
  7907  000B3E  0E00               	movlw	0
  7908  000B40  B480               	btfsc	3968,2,c	;volatile
  7909  000B42  0E01               	movlw	1
  7910  000B44  6E51               	movwf	_SW_EWLT,c
  7911                           
  7912                           ;Lab9pC.c: 761: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  7913  000B46  5055               	movf	_SW_NSPED,w,c
  7914  000B48  A4D8               	btfss	status,2,c
  7915  000B4A  D002               	goto	l4610
  7916  000B4C  0E30               	movlw	48
  7917  000B4E  D001               	goto	L9
  7918  000B50                     l4610:
  7919  000B50  0E31               	movlw	49
  7920  000B52                     L9:
  7921  000B52  6E70               	movwf	_SW_NSPED_Txt,c
  7922                           
  7923                           ;Lab9pC.c: 762: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  7924  000B54  5054               	movf	_SW_NSLT,w,c
  7925  000B56  A4D8               	btfss	status,2,c
  7926  000B58  D002               	goto	l4614
  7927  000B5A  0E30               	movlw	48
  7928  000B5C  D001               	goto	L10
  7929  000B5E                     l4614:
  7930  000B5E  0E31               	movlw	49
  7931  000B60                     L10:
  7932  000B60  6E6E               	movwf	_SW_NSLT_Txt,c
  7933                           
  7934                           ;Lab9pC.c: 763: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  7935  000B62  5052               	movf	_SW_EWPED,w,c
  7936  000B64  A4D8               	btfss	status,2,c
  7937  000B66  D002               	goto	l4618
  7938  000B68  0E30               	movlw	48
  7939  000B6A  D001               	goto	L11
  7940  000B6C                     l4618:
  7941  000B6C  0E31               	movlw	49
  7942  000B6E                     L11:
  7943  000B6E  6E6A               	movwf	_SW_EWPED_Txt,c
  7944                           
  7945                           ;Lab9pC.c: 764: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  7946  000B70  5051               	movf	_SW_EWLT,w,c
  7947  000B72  A4D8               	btfss	status,2,c
  7948  000B74  D002               	goto	l4622
  7949  000B76  0E30               	movlw	48
  7950  000B78  D001               	goto	L12
  7951  000B7A                     l4622:
  7952  000B7A  0E31               	movlw	49
  7953  000B7C                     L12:
  7954  000B7C  6E68               	movwf	_SW_EWLT_Txt,c
  7955                           
  7956                           ;Lab9pC.c: 765: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  7957  000B7E  5053               	movf	_SW_MODE,w,c
  7958  000B80  A4D8               	btfss	status,2,c
  7959  000B82  D002               	goto	l4626
  7960  000B84  0E4E               	movlw	78
  7961  000B86  D001               	goto	L13
  7962  000B88                     l4626:
  7963  000B88  0E44               	movlw	68
  7964  000B8A                     L13:
  7965  000B8A  6E6C               	movwf	_SW_MODE_Txt,c
  7966  000B8C  D000               	goto	l4628
  7967  000B8E                     l4628:
  7968                           
  7969                           ;Lab9pC.c: 767: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  7970  000B8E  0E0A               	movlw	10
  7971  000B90  6E37               	movwf	drawtext@y,c
  7972  000B92  0E62               	movlw	low _Act_Mode_Txt
  7973  000B94  6E38               	movwf	drawtext@_text,c
  7974  000B96  0E00               	movlw	high _Act_Mode_Txt
  7975  000B98  6E39               	movwf	drawtext@_text+1,c
  7976  000B9A  0EFF               	movlw	255
  7977  000B9C  6E3B               	movwf	drawtext@color+1,c
  7978  000B9E  683A               	setf	drawtext@color,c
  7979  000BA0  0E00               	movlw	0
  7980  000BA2  6E3D               	movwf	drawtext@bg+1,c
  7981  000BA4  0E00               	movlw	0
  7982  000BA6  6E3C               	movwf	drawtext@bg,c
  7983  000BA8  0E01               	movlw	1
  7984  000BAA  6E3E               	movwf	drawtext@size,c
  7985  000BAC  0E23               	movlw	35
  7986  000BAE  ECD2  F009         	call	_drawtext
  7987                           
  7988                           ;Lab9pC.c: 768: drawtext(70,10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  7989  000BB2  0E0A               	movlw	10
  7990  000BB4  6E37               	movwf	drawtext@y,c
  7991  000BB6  0E64               	movlw	low _FlashingR_Txt
  7992  000BB8  6E38               	movwf	drawtext@_text,c
  7993  000BBA  0E00               	movlw	high _FlashingR_Txt
  7994  000BBC  6E39               	movwf	drawtext@_text+1,c
  7995  000BBE  0EFF               	movlw	255
  7996  000BC0  6E3B               	movwf	drawtext@color+1,c
  7997  000BC2  683A               	setf	drawtext@color,c
  7998  000BC4  0E00               	movlw	0
  7999  000BC6  6E3D               	movwf	drawtext@bg+1,c
  8000  000BC8  0E00               	movlw	0
  8001  000BCA  6E3C               	movwf	drawtext@bg,c
  8002  000BCC  0E01               	movlw	1
  8003  000BCE  6E3E               	movwf	drawtext@size,c
  8004  000BD0  0E46               	movlw	70
  8005  000BD2  ECD2  F009         	call	_drawtext
  8006                           
  8007                           ;Lab9pC.c: 769: drawtext(100,10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  8008  000BD6  0E0A               	movlw	10
  8009  000BD8  6E37               	movwf	drawtext@y,c
  8010  000BDA  0E66               	movlw	low _FlashingS_Txt
  8011  000BDC  6E38               	movwf	drawtext@_text,c
  8012  000BDE  0E00               	movlw	high _FlashingS_Txt
  8013  000BE0  6E39               	movwf	drawtext@_text+1,c
  8014  000BE2  0EFF               	movlw	255
  8015  000BE4  6E3B               	movwf	drawtext@color+1,c
  8016  000BE6  683A               	setf	drawtext@color,c
  8017  000BE8  0E00               	movlw	0
  8018  000BEA  6E3D               	movwf	drawtext@bg+1,c
  8019  000BEC  0E00               	movlw	0
  8020  000BEE  6E3C               	movwf	drawtext@bg,c
  8021  000BF0  0E01               	movlw	1
  8022  000BF2  6E3E               	movwf	drawtext@size,c
  8023  000BF4  0E64               	movlw	100
  8024  000BF6  ECD2  F009         	call	_drawtext
  8025                           
  8026                           ;Lab9pC.c: 770: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  8027  000BFA  0E95               	movlw	149
  8028  000BFC  6E37               	movwf	drawtext@y,c
  8029  000BFE  0E70               	movlw	low _SW_NSPED_Txt
  8030  000C00  6E38               	movwf	drawtext@_text,c
  8031  000C02  0E00               	movlw	high _SW_NSPED_Txt
  8032  000C04  6E39               	movwf	drawtext@_text+1,c
  8033  000C06  0EFF               	movlw	255
  8034  000C08  6E3B               	movwf	drawtext@color+1,c
  8035  000C0A  683A               	setf	drawtext@color,c
  8036  000C0C  0E00               	movlw	0
  8037  000C0E  6E3D               	movwf	drawtext@bg+1,c
  8038  000C10  0E00               	movlw	0
  8039  000C12  6E3C               	movwf	drawtext@bg,c
  8040  000C14  0E01               	movlw	1
  8041  000C16  6E3E               	movwf	drawtext@size,c
  8042  000C18  0E06               	movlw	6
  8043  000C1A  ECD2  F009         	call	_drawtext
  8044                           
  8045                           ;Lab9pC.c: 771: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  8046  000C1E  0E95               	movlw	149
  8047  000C20  6E37               	movwf	drawtext@y,c
  8048  000C22  0E6E               	movlw	low _SW_NSLT_Txt
  8049  000C24  6E38               	movwf	drawtext@_text,c
  8050  000C26  0E00               	movlw	high _SW_NSLT_Txt
  8051  000C28  6E39               	movwf	drawtext@_text+1,c
  8052  000C2A  0EFF               	movlw	255
  8053  000C2C  6E3B               	movwf	drawtext@color+1,c
  8054  000C2E  683A               	setf	drawtext@color,c
  8055  000C30  0E00               	movlw	0
  8056  000C32  6E3D               	movwf	drawtext@bg+1,c
  8057  000C34  0E00               	movlw	0
  8058  000C36  6E3C               	movwf	drawtext@bg,c
  8059  000C38  0E01               	movlw	1
  8060  000C3A  6E3E               	movwf	drawtext@size,c
  8061  000C3C  0E20               	movlw	32
  8062  000C3E  ECD2  F009         	call	_drawtext
  8063                           
  8064                           ;Lab9pC.c: 772: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  8065  000C42  0E95               	movlw	149
  8066  000C44  6E37               	movwf	drawtext@y,c
  8067  000C46  0E6A               	movlw	low _SW_EWPED_Txt
  8068  000C48  6E38               	movwf	drawtext@_text,c
  8069  000C4A  0E00               	movlw	high _SW_EWPED_Txt
  8070  000C4C  6E39               	movwf	drawtext@_text+1,c
  8071  000C4E  0EFF               	movlw	255
  8072  000C50  6E3B               	movwf	drawtext@color+1,c
  8073  000C52  683A               	setf	drawtext@color,c
  8074  000C54  0E00               	movlw	0
  8075  000C56  6E3D               	movwf	drawtext@bg+1,c
  8076  000C58  0E00               	movlw	0
  8077  000C5A  6E3C               	movwf	drawtext@bg,c
  8078  000C5C  0E01               	movlw	1
  8079  000C5E  6E3E               	movwf	drawtext@size,c
  8080  000C60  0E3A               	movlw	58
  8081  000C62  ECD2  F009         	call	_drawtext
  8082                           
  8083                           ;Lab9pC.c: 773: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  8084  000C66  0E95               	movlw	149
  8085  000C68  6E37               	movwf	drawtext@y,c
  8086  000C6A  0E68               	movlw	low _SW_EWLT_Txt
  8087  000C6C  6E38               	movwf	drawtext@_text,c
  8088  000C6E  0E00               	movlw	high _SW_EWLT_Txt
  8089  000C70  6E39               	movwf	drawtext@_text+1,c
  8090  000C72  0EFF               	movlw	255
  8091  000C74  6E3B               	movwf	drawtext@color+1,c
  8092  000C76  683A               	setf	drawtext@color,c
  8093  000C78  0E00               	movlw	0
  8094  000C7A  6E3D               	movwf	drawtext@bg+1,c
  8095  000C7C  0E00               	movlw	0
  8096  000C7E  6E3C               	movwf	drawtext@bg,c
  8097  000C80  0E01               	movlw	1
  8098  000C82  6E3E               	movwf	drawtext@size,c
  8099  000C84  0E57               	movlw	87
  8100  000C86  ECD2  F009         	call	_drawtext
  8101                           
  8102                           ;Lab9pC.c: 774: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  8103  000C8A  0E95               	movlw	149
  8104  000C8C  6E37               	movwf	drawtext@y,c
  8105  000C8E  0E6C               	movlw	low _SW_MODE_Txt
  8106  000C90  6E38               	movwf	drawtext@_text,c
  8107  000C92  0E00               	movlw	high _SW_MODE_Txt
  8108  000C94  6E39               	movwf	drawtext@_text+1,c
  8109  000C96  0EFF               	movlw	255
  8110  000C98  6E3B               	movwf	drawtext@color+1,c
  8111  000C9A  683A               	setf	drawtext@color,c
  8112  000C9C  0E00               	movlw	0
  8113  000C9E  6E3D               	movwf	drawtext@bg+1,c
  8114  000CA0  0E00               	movlw	0
  8115  000CA2  6E3C               	movwf	drawtext@bg,c
  8116  000CA4  0E01               	movlw	1
  8117  000CA6  6E3E               	movwf	drawtext@size,c
  8118  000CA8  0E70               	movlw	112
  8119  000CAA  ECD2  F009         	call	_drawtext
  8120                           
  8121                           ;Lab9pC.c: 775: if (FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt[0]
      +                           = '1';
  8122  000CAE  504E               	movf	_FLASHING_REQUEST,w,c
  8123  000CB0  A4D8               	btfss	status,2,c
  8124  000CB2  D002               	goto	l4646
  8125  000CB4  0E30               	movlw	48
  8126  000CB6  D001               	goto	L14
  8127  000CB8                     l4646:
  8128  000CB8  0E31               	movlw	49
  8129  000CBA                     L14:
  8130  000CBA  6E64               	movwf	_FlashingR_Txt,c
  8131                           
  8132                           ;Lab9pC.c: 776: if (FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1';
  8133  000CBC  504D               	movf	_FLASHING,w,c
  8134  000CBE  A4D8               	btfss	status,2,c
  8135  000CC0  D002               	goto	l4650
  8136  000CC2  0E30               	movlw	48
  8137  000CC4  D001               	goto	L15
  8138  000CC6                     l4650:
  8139  000CC6  0E31               	movlw	49
  8140  000CC8                     L15:
  8141  000CC8  6E66               	movwf	_FlashingS_Txt,c
  8142  000CCA  D000               	goto	l553
  8143  000CCC                     l553:
  8144  000CCC  0012               	return		;funcret
  8145  000CCE                     __end_of_update_LCD_misc:
  8146                           	opt stack 0
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           prodl	equ	0xFF3
  8152                           intcon	equ	0xFF2
  8153                           intcon2	equ	0xFF1
  8154                           intcon3	equ	0xFF0
  8155                           postinc0	equ	0xFEE
  8156                           wreg	equ	0xFE8
  8157                           postdec1	equ	0xFE5
  8158                           fsr1l	equ	0xFE1
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _get_full_ADC *****************
  8162 ;; Defined at:
  8163 ;;		line 397 in file "Lab9pC.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  result          2   18[COMRAM] unsigned int 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  2   14[COMRAM] unsigned int 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8177 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8179 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8180 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8181 ;;Total ram usage:        6 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    2
  8184 ;; This function calls:
  8185 ;;		Nothing
  8186 ;; This function is called by:
  8187 ;;		_main
  8188 ;;		_update_LCD_misc
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           	psect	text37
  8193  00259A                     __ptext37:
  8194                           	opt stack 0
  8195  00259A                     _get_full_ADC:
  8196                           	opt stack 28
  8197                           
  8198                           ;Lab9pC.c: 399: unsigned int result;
  8199                           ;Lab9pC.c: 400: ADCON0bits.GO=1;
  8200                           
  8201                           ;incstack = 0
  8202  00259A  82C2               	bsf	4034,1,c	;volatile
  8203                           
  8204                           ;Lab9pC.c: 401: while(ADCON0bits.DONE==1);
  8205  00259C  D000               	goto	l427
  8206  00259E                     l427:
  8207  00259E  B2C2               	btfsc	4034,1,c	;volatile
  8208  0025A0  D7FE               	goto	l427
  8209                           
  8210                           ;Lab9pC.c: 402: result = (ADRESH * 0x100) + ADRESL;
  8211  0025A2  50C4               	movf	4036,w,c	;volatile
  8212  0025A4  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  8213  0025A6  6A11               	clrf	??_get_full_ADC& (0+255),c
  8214  0025A8  50C3               	movf	4035,w,c	;volatile
  8215  0025AA  2411               	addwf	??_get_full_ADC,w,c
  8216  0025AC  6E13               	movwf	get_full_ADC@result,c
  8217  0025AE  0E00               	movlw	0
  8218  0025B0  2012               	addwfc	??_get_full_ADC+1,w,c
  8219  0025B2  6E14               	movwf	get_full_ADC@result+1,c
  8220                           
  8221                           ;Lab9pC.c: 404: return result;
  8222  0025B4  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  8223  0025B8  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  8224  0025BC  D000               	goto	l430
  8225  0025BE                     l430:
  8226  0025BE  0012               	return		;funcret
  8227  0025C0                     __end_of_get_full_ADC:
  8228                           	opt stack 0
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodl	equ	0xFF3
  8234                           intcon	equ	0xFF2
  8235                           intcon2	equ	0xFF1
  8236                           intcon3	equ	0xFF0
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           postdec1	equ	0xFE5
  8240                           fsr1l	equ	0xFE1
  8241                           status	equ	0xFD8
  8242                           
  8243 ;; *************** function _drawtext *****************
  8244 ;; Defined at:
  8245 ;;		line 507 in file "ST7735_TFT.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;  x               1    wreg     unsigned char 
  8248 ;;  y               1   54[COMRAM] unsigned char 
  8249 ;;  _text           2   55[COMRAM] PTR unsigned char 
  8250 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8251 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8252 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8253 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8254 ;;  color           2   57[COMRAM] unsigned int 
  8255 ;;  bg              2   59[COMRAM] unsigned int 
  8256 ;;  size            1   61[COMRAM] unsigned char 
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  x               1    0[BANK0 ] unsigned char 
  8259 ;;  i               2    3[BANK0 ] unsigned int 
  8260 ;;  textsize        2    1[BANK0 ] unsigned int 
  8261 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  8262 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  8263 ;; Return value:  Size  Location     Type
  8264 ;;		None               void
  8265 ;; Registers used:
  8266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8272 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8273 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8274 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8275 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8276 ;;Total ram usage:       17 bytes
  8277 ;; Hardware stack levels used:    1
  8278 ;; Hardware stack levels required when called:    8
  8279 ;; This function calls:
  8280 ;;		_drawChar
  8281 ;;		_strlen
  8282 ;; This function is called by:
  8283 ;;		_Initialize_Screen
  8284 ;;		_Wait_One_Second
  8285 ;;		_Wait_One_Second_With_Beep
  8286 ;;		_update_LCD_count
  8287 ;;		_update_LCD_PED_Count
  8288 ;;		_update_LCD_misc
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text38
  8293  0013A4                     __ptext38:
  8294                           	opt stack 0
  8295  0013A4                     _drawtext:
  8296                           	opt stack 19
  8297                           
  8298                           ;incstack = 0
  8299                           ;drawtext@x stored from wreg
  8300  0013A4  0100               	movlb	0	; () banked
  8301  0013A6  6F9F               	movwf	drawtext@x& (0+255),b
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  8305                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  8306                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  8307  0013A8  C09F  F0A5         	movff	drawtext@x,drawtext@cursor_x
  8308                           
  8309                           ; BSR set to: 0
  8310  0013AC  C037  F0A4         	movff	drawtext@y,drawtext@cursor_y
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  8314  0013B0  C038  F00F         	movff	drawtext@_text,strlen@s
  8315  0013B4  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  8316  0013B8  EC08  F012         	call	_strlen	;wreg free
  8317  0013BC  C00F  F0A0         	movff	?_strlen,drawtext@textsize
  8318  0013C0  C010  F0A1         	movff	?_strlen+1,drawtext@textsize+1
  8319                           
  8320                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  8321  0013C4  0E00               	movlw	0
  8322  0013C6  0100               	movlb	0	; () banked
  8323  0013C8  6FA3               	movwf	(drawtext@i+1)& (0+255),b
  8324  0013CA  0E00               	movlw	0
  8325  0013CC  6FA2               	movwf	drawtext@i& (0+255),b
  8326  0013CE  D064               	goto	l4388
  8327  0013D0                     l4362:
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  8331  0013D0  505B               	movf	_wrap,w,c
  8332  0013D2  B4D8               	btfsc	status,2,c
  8333  0013D4  D034               	goto	l4378
  8334                           
  8335                           ; BSR set to: 0
  8336  0013D6  503E               	movf	drawtext@size,w,c
  8337  0013D8  0D05               	mullw	5
  8338  0013DA  0100               	movlb	0	; () banked
  8339  0013DC  51A5               	movf	drawtext@cursor_x& (0+255),w,b
  8340  0013DE  6E3F               	movwf	??_drawtext& (0+255),c
  8341  0013E0  6A40               	clrf	(??_drawtext+1)& (0+255),c
  8342  0013E2  50F3               	movf	prodl,w,c
  8343  0013E4  263F               	addwf	??_drawtext,f,c
  8344  0013E6  50F4               	movf	prodh,w,c
  8345  0013E8  2240               	addwfc	??_drawtext+1,f,c
  8346  0013EA  BE40               	btfsc	??_drawtext+1,7,c
  8347  0013EC  D028               	goto	l4378
  8348  0013EE  5040               	movf	??_drawtext+1,w,c
  8349  0013F0  E104               	bnz	u3020
  8350  0013F2  0E81               	movlw	129
  8351  0013F4  5C3F               	subwf	??_drawtext,w,c
  8352  0013F6  A0D8               	btfss	status,0,c
  8353  0013F8  D022               	goto	l4378
  8354  0013FA                     u3020:
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;ST7735_TFT.c: 515: cursor_x = 0;
  8358  0013FA  0E00               	movlw	0
  8359  0013FC  0100               	movlb	0	; () banked
  8360  0013FE  6FA5               	movwf	drawtext@cursor_x& (0+255),b
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  8364  001400  503E               	movf	drawtext@size,w,c
  8365  001402  0D07               	mullw	7
  8366  001404  50F3               	movf	prodl,w,c
  8367  001406  0100               	movlb	0	; () banked
  8368  001408  25A4               	addwf	drawtext@cursor_y& (0+255),w,b
  8369  00140A  0F03               	addlw	3
  8370  00140C  0100               	movlb	0	; () banked
  8371  00140E  6FA4               	movwf	drawtext@cursor_y& (0+255),b
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  8375  001410  0EA0               	movlw	160
  8376  001412  0100               	movlb	0	; () banked
  8377  001414  65A4               	cpfsgt	drawtext@cursor_y& (0+255),b
  8378  001416  D004               	goto	l4374
  8379                           
  8380                           ; BSR set to: 0
  8381  001418  0EA0               	movlw	160
  8382  00141A  0100               	movlb	0	; () banked
  8383  00141C  6FA4               	movwf	drawtext@cursor_y& (0+255),b
  8384  00141E  D000               	goto	l4374
  8385  001420                     l4374:
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  8389  001420  0100               	movlb	0	; () banked
  8390  001422  51A2               	movf	drawtext@i& (0+255),w,b
  8391  001424  2438               	addwf	drawtext@_text,w,c
  8392  001426  6ED9               	movwf	fsr2l,c
  8393  001428  0100               	movlb	0	; () banked
  8394  00142A  51A3               	movf	(drawtext@i+1)& (0+255),w,b
  8395  00142C  2039               	addwfc	drawtext@_text+1,w,c
  8396  00142E  6EDA               	movwf	fsr2h,c
  8397  001430  0E20               	movlw	32
  8398  001432  18DE               	xorwf	postinc2,w,c
  8399  001434  B4D8               	btfsc	status,2,c
  8400  001436  D02C               	goto	l4386
  8401  001438  D002               	goto	l4378
  8402                           
  8403                           ; BSR set to: 0
  8404  00143A  D02A               	goto	l4386
  8405                           
  8406                           ; BSR set to: 0
  8407  00143C  D000               	goto	l4378
  8408  00143E                     l4378:
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  8412  00143E  C0A4  F02C         	movff	drawtext@cursor_y,drawChar@y
  8413  001442  0100               	movlb	0	; () banked
  8414  001444  51A2               	movf	drawtext@i& (0+255),w,b
  8415  001446  2438               	addwf	drawtext@_text,w,c
  8416  001448  6ED9               	movwf	fsr2l,c
  8417  00144A  0100               	movlb	0	; () banked
  8418  00144C  51A3               	movf	(drawtext@i+1)& (0+255),w,b
  8419  00144E  2039               	addwfc	drawtext@_text+1,w,c
  8420  001450  6EDA               	movwf	fsr2h,c
  8421  001452  50DF               	movf	indf2,w,c
  8422  001454  6E2D               	movwf	drawChar@c,c
  8423  001456  C03A  F02E         	movff	drawtext@color,drawChar@color
  8424  00145A  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  8425  00145E  C03C  F030         	movff	drawtext@bg,drawChar@bg
  8426  001462  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  8427  001466  C03E  F032         	movff	drawtext@size,drawChar@size
  8428  00146A  0100               	movlb	0	; () banked
  8429  00146C  51A5               	movf	drawtext@cursor_x& (0+255),w,b
  8430  00146E  EC03  F008         	call	_drawChar
  8431                           
  8432                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  8433  001472  503E               	movf	drawtext@size,w,c
  8434  001474  0D06               	mullw	6
  8435  001476  50F3               	movf	prodl,w,c
  8436  001478  0100               	movlb	0	; () banked
  8437  00147A  25A5               	addwf	drawtext@cursor_x& (0+255),w,b
  8438  00147C  0100               	movlb	0	; () banked
  8439  00147E  6FA5               	movwf	drawtext@cursor_x& (0+255),b
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  8443  001480  0E80               	movlw	128
  8444  001482  0100               	movlb	0	; () banked
  8445  001484  65A5               	cpfsgt	drawtext@cursor_x& (0+255),b
  8446  001486  D004               	goto	l4386
  8447                           
  8448                           ; BSR set to: 0
  8449  001488  0E80               	movlw	128
  8450  00148A  0100               	movlb	0	; () banked
  8451  00148C  6FA5               	movwf	drawtext@cursor_x& (0+255),b
  8452                           
  8453                           ; BSR set to: 0
  8454  00148E  D000               	goto	l4386
  8455  001490                     l4386:
  8456                           
  8457                           ; BSR set to: 0
  8458  001490  0100               	movlb	0	; () banked
  8459  001492  4BA2               	infsnz	drawtext@i& (0+255),f,b
  8460  001494  2BA3               	incf	(drawtext@i+1)& (0+255),f,b
  8461  001496  D000               	goto	l4388
  8462  001498                     l4388:
  8463                           
  8464                           ; BSR set to: 0
  8465  001498  0100               	movlb	0	; () banked
  8466  00149A  51A0               	movf	drawtext@textsize& (0+255),w,b
  8467  00149C  0100               	movlb	0	; () banked
  8468  00149E  5DA2               	subwf	drawtext@i& (0+255),w,b
  8469  0014A0  0100               	movlb	0	; () banked
  8470  0014A2  51A1               	movf	(drawtext@textsize+1)& (0+255),w,b
  8471  0014A4  0100               	movlb	0	; () banked
  8472  0014A6  59A3               	subwfb	(drawtext@i+1)& (0+255),w,b
  8473  0014A8  A0D8               	btfss	status,0,c
  8474  0014AA  D792               	goto	l4362
  8475                           
  8476                           ; BSR set to: 0
  8477                           
  8478                           ; BSR set to: 0
  8479  0014AC  0012               	return		;funcret
  8480  0014AE                     __end_of_drawtext:
  8481                           	opt stack 0
  8482                           tblptru	equ	0xFF8
  8483                           tblptrh	equ	0xFF7
  8484                           tblptrl	equ	0xFF6
  8485                           tablat	equ	0xFF5
  8486                           prodh	equ	0xFF4
  8487                           prodl	equ	0xFF3
  8488                           intcon	equ	0xFF2
  8489                           intcon2	equ	0xFF1
  8490                           intcon3	equ	0xFF0
  8491                           postinc0	equ	0xFEE
  8492                           wreg	equ	0xFE8
  8493                           postdec1	equ	0xFE5
  8494                           fsr1l	equ	0xFE1
  8495                           indf2	equ	0xFDF
  8496                           postinc2	equ	0xFDE
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _strlen *****************
  8502 ;; Defined at:
  8503 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  s               2   14[COMRAM] PTR const unsigned char 
  8506 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8507 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8508 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8509 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  8512 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  8513 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  8514 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  8515 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  2   14[COMRAM] unsigned int 
  8518 ;; Registers used:
  8519 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8525 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;Total ram usage:        6 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    2
  8532 ;; This function calls:
  8533 ;;		Nothing
  8534 ;; This function is called by:
  8535 ;;		_drawtext
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text39
  8540  002410                     __ptext39:
  8541                           	opt stack 0
  8542  002410                     _strlen:
  8543                           	opt stack 24
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;incstack = 0
  8547  002410  C00F  F013         	movff	strlen@s,strlen@cp
  8548  002414  C010  F014         	movff	strlen@s+1,strlen@cp+1
  8549  002418  D003               	goto	l4312
  8550  00241A                     l4310:
  8551  00241A  4A13               	infsnz	strlen@cp,f,c
  8552  00241C  2A14               	incf	strlen@cp+1,f,c
  8553  00241E  D000               	goto	l4312
  8554  002420                     l4312:
  8555  002420  C013  FFD9         	movff	strlen@cp,fsr2l
  8556  002424  C014  FFDA         	movff	strlen@cp+1,fsr2h
  8557  002428  50DF               	movf	indf2,w,c
  8558  00242A  A4D8               	btfss	status,2,c
  8559  00242C  D7F6               	goto	l4310
  8560  00242E  C00F  F011         	movff	strlen@s,??_strlen
  8561  002432  C010  F012         	movff	strlen@s+1,??_strlen+1
  8562  002436  1E11               	comf	??_strlen,f,c
  8563  002438  1E12               	comf	??_strlen+1,f,c
  8564  00243A  4A11               	infsnz	??_strlen,f,c
  8565  00243C  2A12               	incf	??_strlen+1,f,c
  8566  00243E  5013               	movf	strlen@cp,w,c
  8567  002440  2411               	addwf	??_strlen,w,c
  8568  002442  6E0F               	movwf	?_strlen,c
  8569  002444  5014               	movf	strlen@cp+1,w,c
  8570  002446  2012               	addwfc	??_strlen+1,w,c
  8571  002448  6E10               	movwf	?_strlen+1,c
  8572  00244A  D000               	goto	l1146
  8573  00244C                     l1146:
  8574  00244C  0012               	return		;funcret
  8575  00244E                     __end_of_strlen:
  8576                           	opt stack 0
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodh	equ	0xFF4
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           intcon2	equ	0xFF1
  8585                           intcon3	equ	0xFF0
  8586                           postinc0	equ	0xFEE
  8587                           wreg	equ	0xFE8
  8588                           postdec1	equ	0xFE5
  8589                           fsr1l	equ	0xFE1
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           fsr2h	equ	0xFDA
  8593                           fsr2l	equ	0xFD9
  8594                           status	equ	0xFD8
  8595                           
  8596 ;; *************** function _drawChar *****************
  8597 ;; Defined at:
  8598 ;;		line 480 in file "ST7735_TFT.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  x               1    wreg     unsigned char 
  8601 ;;  y               1   43[COMRAM] unsigned char 
  8602 ;;  c               1   44[COMRAM] unsigned char 
  8603 ;;  color           2   45[COMRAM] unsigned int 
  8604 ;;  bg              2   47[COMRAM] unsigned int 
  8605 ;;  size            1   49[COMRAM] unsigned char 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  x               1   51[COMRAM] unsigned char 
  8608 ;;  line            1   50[COMRAM] unsigned char 
  8609 ;;  i               1   53[COMRAM] unsigned char 
  8610 ;;  j               1   52[COMRAM] unsigned char 
  8611 ;; Return value:  Size  Location     Type
  8612 ;;		None               void
  8613 ;; Registers used:
  8614 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8620 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8621 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8623 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;Total ram usage:       11 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    7
  8627 ;; This function calls:
  8628 ;;		___wmul
  8629 ;;		_drawPixel
  8630 ;;		_fillRect
  8631 ;; This function is called by:
  8632 ;;		_drawtext
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           	psect	text40
  8637  001006                     __ptext40:
  8638                           	opt stack 0
  8639  001006                     _drawChar:
  8640                           	opt stack 19
  8641                           
  8642                           ;incstack = 0
  8643                           ;drawChar@x stored from wreg
  8644  001006  6E34               	movwf	drawChar@x,c
  8645                           
  8646                           ;ST7735_TFT.c: 482: char i, j;
  8647                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  8648  001008  0E80               	movlw	128
  8649  00100A  6034               	cpfslt	drawChar@x,c
  8650  00100C  D0A6               	goto	l205
  8651  00100E  0E9F               	movlw	159
  8652  001010  642C               	cpfsgt	drawChar@y,c
  8653  001012  D001               	goto	l4258
  8654                           
  8655                           ;ST7735_TFT.c: 484: return;
  8656  001014  D0A2               	goto	l205
  8657  001016                     l4258:
  8658                           
  8659                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  8660  001016  5032               	movf	drawChar@size,w,c
  8661  001018  A4D8               	btfss	status,2,c
  8662  00101A  D003               	goto	l4262
  8663  00101C  0E01               	movlw	1
  8664  00101E  6E32               	movwf	drawChar@size,c
  8665  001020  D000               	goto	l4262
  8666  001022                     l4262:
  8667                           
  8668                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8669  001022  0E1F               	movlw	31
  8670  001024  642D               	cpfsgt	drawChar@c,c
  8671  001026  D004               	goto	l4266
  8672  001028  0E7E               	movlw	126
  8673  00102A  642D               	cpfsgt	drawChar@c,c
  8674  00102C  D003               	goto	l207
  8675  00102E  D000               	goto	l4266
  8676  001030                     l4266:
  8677                           
  8678                           ;ST7735_TFT.c: 487: c = '?';
  8679  001030  0E3F               	movlw	63
  8680  001032  6E2D               	movwf	drawChar@c,c
  8681  001034                     l207:
  8682                           
  8683                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8684  001034  0E00               	movlw	0
  8685  001036  6E36               	movwf	drawChar@i,c
  8686  001038                     l4268:
  8687  001038  0E04               	movlw	4
  8688  00103A  6436               	cpfsgt	drawChar@i,c
  8689  00103C  D001               	goto	l4272
  8690  00103E  D08D               	goto	l205
  8691  001040                     l4272:
  8692                           
  8693                           ;ST7735_TFT.c: 489: unsigned char line;
  8694                           ;ST7735_TFT.c: 490: if(c < 'S')
  8695  001040  0E53               	movlw	83
  8696  001042  602D               	cpfslt	drawChar@c,c
  8697  001044  D015               	goto	l4276
  8698                           
  8699                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8700  001046  0EE0               	movlw	224
  8701  001048  242D               	addwf	drawChar@c,w,c
  8702  00104A  6E0F               	movwf	___wmul@multiplier,c
  8703  00104C  6A10               	clrf	___wmul@multiplier+1,c
  8704  00104E  0EFF               	movlw	255
  8705  001050  2210               	addwfc	___wmul@multiplier+1,f,c
  8706  001052  0E00               	movlw	0
  8707  001054  6E12               	movwf	___wmul@multiplicand+1,c
  8708  001056  0E05               	movlw	5
  8709  001058  6E11               	movwf	___wmul@multiplicand,c
  8710  00105A  ECA6  F012         	call	___wmul	;wreg free
  8711  00105E  5036               	movf	drawChar@i,w,c
  8712  001060  260F               	addwf	?___wmul,f,c
  8713  001062  0E00               	movlw	0
  8714  001064  2210               	addwfc	?___wmul+1,f,c
  8715  001066  0EBB               	movlw	low _font
  8716  001068  240F               	addwf	?___wmul,w,c
  8717  00106A  6EF6               	movwf	tblptrl,c
  8718  00106C  0EFD               	movlw	high _font
  8719  00106E  D014               	goto	L16
  8720  001070                     l4276:
  8721                           
  8722                           ;ST7735_TFT.c: 492: else
  8723                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8724  001070  0EAD               	movlw	173
  8725  001072  242D               	addwf	drawChar@c,w,c
  8726  001074  6E0F               	movwf	___wmul@multiplier,c
  8727  001076  6A10               	clrf	___wmul@multiplier+1,c
  8728  001078  0EFF               	movlw	255
  8729  00107A  2210               	addwfc	___wmul@multiplier+1,f,c
  8730  00107C  0E00               	movlw	0
  8731  00107E  6E12               	movwf	___wmul@multiplicand+1,c
  8732  001080  0E05               	movlw	5
  8733  001082  6E11               	movwf	___wmul@multiplicand,c
  8734  001084  ECA6  F012         	call	___wmul	;wreg free
  8735  001088  5036               	movf	drawChar@i,w,c
  8736  00108A  260F               	addwf	?___wmul,f,c
  8737  00108C  0E00               	movlw	0
  8738  00108E  2210               	addwfc	?___wmul+1,f,c
  8739  001090  0EBA               	movlw	low _font2
  8740  001092  240F               	addwf	?___wmul,w,c
  8741  001094  6EF6               	movwf	tblptrl,c
  8742  001096  0EFE               	movlw	high _font2
  8743  001098                     L16:
  8744  001098  2010               	addwfc	?___wmul+1,w,c
  8745  00109A  6EF7               	movwf	tblptrh,c
  8746  00109C                     	if	0	;There are less than 3 active tblptr bytes
  8747  00109C                     	endif
  8748  00109C  0008               	tblrd		*
  8749  00109E  CFF5 F033          	movff	tablat,drawChar@line
  8750  0010A2  D000               	goto	l4278
  8751  0010A4                     l4278:
  8752                           
  8753                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8754  0010A4  0E00               	movlw	0
  8755  0010A6  6E35               	movwf	drawChar@j,c
  8756  0010A8                     l4280:
  8757  0010A8  0E06               	movlw	6
  8758  0010AA  6435               	cpfsgt	drawChar@j,c
  8759  0010AC  D001               	goto	l214
  8760  0010AE  D053               	goto	l4304
  8761  0010B0                     l214:
  8762                           
  8763                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8764  0010B0  A033               	btfss	drawChar@line,0,c
  8765  0010B2  D023               	goto	l4290
  8766                           
  8767                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8768  0010B4  0432               	decf	drawChar@size,w,c
  8769  0010B6  A4D8               	btfss	status,2,c
  8770  0010B8  D00C               	goto	l4288
  8771  0010BA  502C               	movf	drawChar@y,w,c
  8772  0010BC  2435               	addwf	drawChar@j,w,c
  8773  0010BE  6E16               	movwf	drawPixel@y,c
  8774  0010C0  C02E  F017         	movff	drawChar@color,drawPixel@color
  8775  0010C4  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  8776  0010C8  5034               	movf	drawChar@x,w,c
  8777  0010CA  2436               	addwf	drawChar@i,w,c
  8778  0010CC  EC79  F012         	call	_drawPixel
  8779  0010D0  D03E               	goto	l4298
  8780  0010D2                     l4288:
  8781                           
  8782                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8783  0010D2  5035               	movf	drawChar@j,w,c
  8784  0010D4  0232               	mulwf	drawChar@size,c
  8785  0010D6  50F3               	movf	prodl,w,c
  8786  0010D8  242C               	addwf	drawChar@y,w,c
  8787  0010DA  6E21               	movwf	fillRect@y,c
  8788  0010DC  C032  F022         	movff	drawChar@size,fillRect@w
  8789  0010E0  C032  F023         	movff	drawChar@size,fillRect@h
  8790  0010E4  C02E  F024         	movff	drawChar@color,fillRect@color
  8791  0010E8  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  8792  0010EC  5036               	movf	drawChar@i,w,c
  8793  0010EE  0232               	mulwf	drawChar@size,c
  8794  0010F0  50F3               	movf	prodl,w,c
  8795  0010F2  2434               	addwf	drawChar@x,w,c
  8796  0010F4  EC34  F011         	call	_fillRect
  8797                           
  8798                           ;ST7735_TFT.c: 498: }
  8799  0010F8  D02A               	goto	l4298
  8800  0010FA                     l4290:
  8801                           
  8802                           ;ST7735_TFT.c: 499: else if(bg != color) {
  8803  0010FA  502E               	movf	drawChar@color,w,c
  8804  0010FC  1830               	xorwf	drawChar@bg,w,c
  8805  0010FE  E104               	bnz	u2880
  8806  001100  502F               	movf	drawChar@color+1,w,c
  8807  001102  1831               	xorwf	drawChar@bg+1,w,c
  8808  001104  B4D8               	btfsc	status,2,c
  8809  001106  D023               	goto	l4298
  8810  001108                     u2880:
  8811                           
  8812                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  8813  001108  0432               	decf	drawChar@size,w,c
  8814  00110A  A4D8               	btfss	status,2,c
  8815  00110C  D00C               	goto	l4296
  8816  00110E  502C               	movf	drawChar@y,w,c
  8817  001110  2435               	addwf	drawChar@j,w,c
  8818  001112  6E16               	movwf	drawPixel@y,c
  8819  001114  C030  F017         	movff	drawChar@bg,drawPixel@color
  8820  001118  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  8821  00111C  5034               	movf	drawChar@x,w,c
  8822  00111E  2436               	addwf	drawChar@i,w,c
  8823  001120  EC79  F012         	call	_drawPixel
  8824  001124  D014               	goto	l4298
  8825  001126                     l4296:
  8826                           
  8827                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  8828  001126  5035               	movf	drawChar@j,w,c
  8829  001128  0232               	mulwf	drawChar@size,c
  8830  00112A  50F3               	movf	prodl,w,c
  8831  00112C  242C               	addwf	drawChar@y,w,c
  8832  00112E  6E21               	movwf	fillRect@y,c
  8833  001130  C032  F022         	movff	drawChar@size,fillRect@w
  8834  001134  C032  F023         	movff	drawChar@size,fillRect@h
  8835  001138  C030  F024         	movff	drawChar@bg,fillRect@color
  8836  00113C  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  8837  001140  5036               	movf	drawChar@i,w,c
  8838  001142  0232               	mulwf	drawChar@size,c
  8839  001144  50F3               	movf	prodl,w,c
  8840  001146  2434               	addwf	drawChar@x,w,c
  8841  001148  EC34  F011         	call	_fillRect
  8842  00114C  D000               	goto	l4298
  8843  00114E                     l4298:
  8844  00114E  2A35               	incf	drawChar@j,f,c
  8845  001150  90D8               	bcf	status,0,c
  8846  001152  3233               	rrcf	drawChar@line,f,c
  8847  001154  D7A9               	goto	l4280
  8848  001156                     l4304:
  8849  001156  2A36               	incf	drawChar@i,f,c
  8850  001158  D76F               	goto	l4268
  8851  00115A                     l205:
  8852  00115A  0012               	return		;funcret
  8853  00115C                     __end_of_drawChar:
  8854                           	opt stack 0
  8855                           tblptru	equ	0xFF8
  8856                           tblptrh	equ	0xFF7
  8857                           tblptrl	equ	0xFF6
  8858                           tablat	equ	0xFF5
  8859                           prodh	equ	0xFF4
  8860                           prodl	equ	0xFF3
  8861                           intcon	equ	0xFF2
  8862                           intcon2	equ	0xFF1
  8863                           intcon3	equ	0xFF0
  8864                           postinc0	equ	0xFEE
  8865                           wreg	equ	0xFE8
  8866                           postdec1	equ	0xFE5
  8867                           fsr1l	equ	0xFE1
  8868                           indf2	equ	0xFDF
  8869                           postinc2	equ	0xFDE
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function _fillRect *****************
  8875 ;; Defined at:
  8876 ;;		line 470 in file "ST7735_TFT.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  x               1    wreg     unsigned char 
  8879 ;;  y               1   32[COMRAM] unsigned char 
  8880 ;;  w               1   33[COMRAM] unsigned char 
  8881 ;;  h               1   34[COMRAM] unsigned char 
  8882 ;;  color           2   35[COMRAM] unsigned int 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  x               1   40[COMRAM] unsigned char 
  8885 ;;  i               2   41[COMRAM] int 
  8886 ;; Return value:  Size  Location     Type
  8887 ;;		None               void
  8888 ;; Registers used:
  8889 ;;		wreg, status,2, status,0, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8895 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;Total ram usage:       11 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    6
  8902 ;; This function calls:
  8903 ;;		_drawFastVLine
  8904 ;; This function is called by:
  8905 ;;		_drawChar
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           	psect	text41
  8910  002268                     __ptext41:
  8911                           	opt stack 0
  8912  002268                     _fillRect:
  8913                           	opt stack 19
  8914                           
  8915                           ;incstack = 0
  8916                           ;fillRect@x stored from wreg
  8917  002268  6E29               	movwf	fillRect@x,c
  8918                           
  8919                           ;ST7735_TFT.c: 472: signed int i;
  8920                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  8921  00226A  C029  F02A         	movff	fillRect@x,fillRect@i
  8922  00226E  6A2B               	clrf	fillRect@i+1,c
  8923  002270  D00E               	goto	l4246
  8924  002272                     l4242:
  8925                           
  8926                           ;ST7735_TFT.c: 475: {
  8927                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  8928  002272  C021  F016         	movff	fillRect@y,drawFastVLine@y
  8929  002276  C023  F017         	movff	fillRect@h,drawFastVLine@h
  8930  00227A  C024  F018         	movff	fillRect@color,drawFastVLine@color
  8931  00227E  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  8932  002282  502A               	movf	fillRect@i,w,c
  8933  002284  ECB4  F00E         	call	_drawFastVLine
  8934  002288  4A2A               	infsnz	fillRect@i,f,c
  8935  00228A  2A2B               	incf	fillRect@i+1,f,c
  8936  00228C  D000               	goto	l4246
  8937  00228E                     l4246:
  8938  00228E  5022               	movf	fillRect@w,w,c
  8939  002290  C029  F026         	movff	fillRect@x,??_fillRect
  8940  002294  6A27               	clrf	(??_fillRect+1)& (0+255),c
  8941  002296  2626               	addwf	??_fillRect,f,c
  8942  002298  0E00               	movlw	0
  8943  00229A  2227               	addwfc	??_fillRect+1,f,c
  8944  00229C  5026               	movf	??_fillRect,w,c
  8945  00229E  5C2A               	subwf	fillRect@i,w,c
  8946  0022A0  502B               	movf	fillRect@i+1,w,c
  8947  0022A2  0A80               	xorlw	128
  8948  0022A4  6E28               	movwf	(??_fillRect+2)& (0+255),c
  8949  0022A6  5027               	movf	??_fillRect+1,w,c
  8950  0022A8  0A80               	xorlw	128
  8951  0022AA  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  8952  0022AC  A0D8               	btfss	status,0,c
  8953  0022AE  D7E1               	goto	l4242
  8954  0022B0  0012               	return		;funcret
  8955  0022B2                     __end_of_fillRect:
  8956                           	opt stack 0
  8957                           tblptru	equ	0xFF8
  8958                           tblptrh	equ	0xFF7
  8959                           tblptrl	equ	0xFF6
  8960                           tablat	equ	0xFF5
  8961                           prodh	equ	0xFF4
  8962                           prodl	equ	0xFF3
  8963                           intcon	equ	0xFF2
  8964                           intcon2	equ	0xFF1
  8965                           intcon3	equ	0xFF0
  8966                           postinc0	equ	0xFEE
  8967                           wreg	equ	0xFE8
  8968                           postdec1	equ	0xFE5
  8969                           fsr1l	equ	0xFE1
  8970                           indf2	equ	0xFDF
  8971                           postinc2	equ	0xFDE
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _drawFastVLine *****************
  8977 ;; Defined at:
  8978 ;;		line 449 in file "ST7735_TFT.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;  x               1    wreg     unsigned char 
  8981 ;;  y               1   21[COMRAM] unsigned char 
  8982 ;;  h               1   22[COMRAM] unsigned char 
  8983 ;;  color           2   23[COMRAM] unsigned int 
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;  x               1   31[COMRAM] unsigned char 
  8986 ;;  lo              1   30[COMRAM] unsigned char 
  8987 ;;  hi              1   29[COMRAM] unsigned char 
  8988 ;; Return value:  Size  Location     Type
  8989 ;;		None               void
  8990 ;; Registers used:
  8991 ;;		wreg, status,2, status,0, cstack
  8992 ;; Tracked objects:
  8993 ;;		On entry : 0/0
  8994 ;;		On exit  : 0/0
  8995 ;;		Unchanged: 0/0
  8996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8997 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;Total ram usage:       11 bytes
  9002 ;; Hardware stack levels used:    1
  9003 ;; Hardware stack levels required when called:    5
  9004 ;; This function calls:
  9005 ;;		_setAddrWindow
  9006 ;;		_spiwrite
  9007 ;; This function is called by:
  9008 ;;		_fillRect
  9009 ;;		_fillCircleHelper
  9010 ;;		_fillCircle
  9011 ;;		_drawRect
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           	psect	text42
  9016  001D68                     __ptext42:
  9017                           	opt stack 0
  9018  001D68                     _drawFastVLine:
  9019                           	opt stack 19
  9020                           
  9021                           ;incstack = 0
  9022                           ;drawFastVLine@x stored from wreg
  9023  001D68  6E20               	movwf	drawFastVLine@x,c
  9024                           
  9025                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  9026                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  9027  001D6A  0E80               	movlw	128
  9028  001D6C  6020               	cpfslt	drawFastVLine@x,c
  9029  001D6E  D03F               	goto	l189
  9030  001D70  0E9F               	movlw	159
  9031  001D72  6416               	cpfsgt	drawFastVLine@y,c
  9032  001D74  D001               	goto	l4212
  9033                           
  9034                           ;ST7735_TFT.c: 453: return;
  9035  001D76  D03B               	goto	l189
  9036  001D78                     l4212:
  9037                           
  9038                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  9039  001D78  0EFF               	movlw	255
  9040  001D7A  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9041  001D7C  0EFF               	movlw	255
  9042  001D7E  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  9043  001D80  5017               	movf	drawFastVLine@h,w,c
  9044  001D82  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  9045  001D86  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  9046  001D88  261C               	addwf	??_drawFastVLine+2,f,c
  9047  001D8A  0E00               	movlw	0
  9048  001D8C  221D               	addwfc	??_drawFastVLine+3,f,c
  9049  001D8E  501A               	movf	??_drawFastVLine,w,c
  9050  001D90  261C               	addwf	??_drawFastVLine+2,f,c
  9051  001D92  501B               	movf	??_drawFastVLine+1,w,c
  9052  001D94  221D               	addwfc	??_drawFastVLine+3,f,c
  9053  001D96  BE1D               	btfsc	??_drawFastVLine+3,7,c
  9054  001D98  D00B               	goto	l4216
  9055  001D9A  501D               	movf	??_drawFastVLine+3,w,c
  9056  001D9C  E104               	bnz	u2730
  9057  001D9E  0EA0               	movlw	160
  9058  001DA0  5C1C               	subwf	??_drawFastVLine+2,w,c
  9059  001DA2  A0D8               	btfss	status,0,c
  9060  001DA4  D005               	goto	l4216
  9061  001DA6                     u2730:
  9062                           
  9063                           ;ST7735_TFT.c: 455: h = 160 - y;
  9064  001DA6  5016               	movf	drawFastVLine@y,w,c
  9065  001DA8  0800               	sublw	0
  9066  001DAA  0FA0               	addlw	160
  9067  001DAC  6E17               	movwf	drawFastVLine@h,c
  9068  001DAE  D000               	goto	l4216
  9069  001DB0                     l4216:
  9070                           
  9071                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  9072  001DB0  5019               	movf	drawFastVLine@color+1,w,c
  9073  001DB2  6E1E               	movwf	drawFastVLine@hi,c
  9074  001DB4  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  9075                           
  9076                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  9077  001DB8  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  9078  001DBC  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  9079  001DC0  5016               	movf	drawFastVLine@y,w,c
  9080  001DC2  2417               	addwf	drawFastVLine@h,w,c
  9081  001DC4  6E1A               	movwf	??_drawFastVLine& (0+255),c
  9082  001DC6  041A               	decf	??_drawFastVLine,w,c
  9083  001DC8  6E14               	movwf	setAddrWindow@y1,c
  9084  001DCA  5020               	movf	drawFastVLine@x,w,c
  9085  001DCC  EC0D  F011         	call	_setAddrWindow
  9086                           
  9087                           ;ST7735_TFT.c: 458: PORTCbits.RC0 = 1;
  9088  001DD0  8082               	bsf	3970,0,c	;volatile
  9089                           
  9090                           ;ST7735_TFT.c: 459: PORTCbits.RC1 = 0;
  9091  001DD2  9282               	bcf	3970,1,c	;volatile
  9092                           
  9093                           ;ST7735_TFT.c: 461: while (h--) {
  9094  001DD4  D007               	goto	l4228
  9095  001DD6                     l4226:
  9096                           
  9097                           ;ST7735_TFT.c: 462: spiwrite(hi);
  9098  001DD6  501E               	movf	drawFastVLine@hi,w,c
  9099  001DD8  EC32  F013         	call	_spiwrite
  9100                           
  9101                           ;ST7735_TFT.c: 463: spiwrite(lo);
  9102  001DDC  501F               	movf	drawFastVLine@lo,w,c
  9103  001DDE  EC32  F013         	call	_spiwrite
  9104  001DE2  D000               	goto	l4228
  9105  001DE4                     l4228:
  9106  001DE4  0617               	decf	drawFastVLine@h,f,c
  9107  001DE6  2817               	incf	drawFastVLine@h,w,c
  9108  001DE8  A4D8               	btfss	status,2,c
  9109  001DEA  D7F5               	goto	l4226
  9110                           
  9111                           ;ST7735_TFT.c: 464: }
  9112                           ;ST7735_TFT.c: 465: PORTCbits.RC1 = 1;
  9113  001DEC  8282               	bsf	3970,1,c	;volatile
  9114  001DEE                     l189:
  9115  001DEE  0012               	return		;funcret
  9116  001DF0                     __end_of_drawFastVLine:
  9117                           	opt stack 0
  9118                           tblptru	equ	0xFF8
  9119                           tblptrh	equ	0xFF7
  9120                           tblptrl	equ	0xFF6
  9121                           tablat	equ	0xFF5
  9122                           prodh	equ	0xFF4
  9123                           prodl	equ	0xFF3
  9124                           intcon	equ	0xFF2
  9125                           intcon2	equ	0xFF1
  9126                           intcon3	equ	0xFF0
  9127                           postinc0	equ	0xFEE
  9128                           wreg	equ	0xFE8
  9129                           postdec1	equ	0xFE5
  9130                           fsr1l	equ	0xFE1
  9131                           indf2	equ	0xFDF
  9132                           postinc2	equ	0xFDE
  9133                           fsr2h	equ	0xFDA
  9134                           fsr2l	equ	0xFD9
  9135                           status	equ	0xFD8
  9136                           
  9137 ;; *************** function _drawPixel *****************
  9138 ;; Defined at:
  9139 ;;		line 440 in file "ST7735_TFT.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  x               1    wreg     unsigned char 
  9142 ;;  y               1   21[COMRAM] unsigned char 
  9143 ;;  color           2   22[COMRAM] unsigned int 
  9144 ;; Auto vars:     Size  Location     Type
  9145 ;;  x               1   24[COMRAM] unsigned char 
  9146 ;; Return value:  Size  Location     Type
  9147 ;;		None               void
  9148 ;; Registers used:
  9149 ;;		wreg, status,2, status,0, cstack
  9150 ;; Tracked objects:
  9151 ;;		On entry : 0/0
  9152 ;;		On exit  : 0/0
  9153 ;;		Unchanged: 0/0
  9154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9155 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9159 ;;Total ram usage:        4 bytes
  9160 ;; Hardware stack levels used:    1
  9161 ;; Hardware stack levels required when called:    5
  9162 ;; This function calls:
  9163 ;;		_setAddrWindow
  9164 ;;		_write_data
  9165 ;; This function is called by:
  9166 ;;		_drawChar
  9167 ;;		_drawCircle
  9168 ;;		_drawCircleHelper
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           	psect	text43
  9173  0024F2                     __ptext43:
  9174                           	opt stack 0
  9175  0024F2                     _drawPixel:
  9176                           	opt stack 20
  9177                           
  9178                           ;incstack = 0
  9179                           ;drawPixel@x stored from wreg
  9180  0024F2  6E19               	movwf	drawPixel@x,c
  9181                           
  9182                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  9183  0024F4  0E80               	movlw	128
  9184  0024F6  6019               	cpfslt	drawPixel@x,c
  9185  0024F8  D013               	goto	l183
  9186  0024FA  0E9F               	movlw	159
  9187  0024FC  6416               	cpfsgt	drawPixel@y,c
  9188  0024FE  D001               	goto	l4234
  9189                           
  9190                           ;ST7735_TFT.c: 443: return;
  9191  002500  D00F               	goto	l183
  9192  002502                     l4234:
  9193                           
  9194                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  9195  002502  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  9196  002506  2819               	incf	drawPixel@x,w,c
  9197  002508  6E13               	movwf	setAddrWindow@x1,c
  9198  00250A  2816               	incf	drawPixel@y,w,c
  9199  00250C  6E14               	movwf	setAddrWindow@y1,c
  9200  00250E  5019               	movf	drawPixel@x,w,c
  9201  002510  EC0D  F011         	call	_setAddrWindow
  9202                           
  9203                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  9204  002514  5018               	movf	drawPixel@color+1,w,c
  9205  002516  EC4E  F013         	call	_write_data
  9206                           
  9207                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  9208  00251A  5017               	movf	drawPixel@color,w,c
  9209  00251C  EC4E  F013         	call	_write_data
  9210  002520                     l183:
  9211  002520  0012               	return		;funcret
  9212  002522                     __end_of_drawPixel:
  9213                           	opt stack 0
  9214                           tblptru	equ	0xFF8
  9215                           tblptrh	equ	0xFF7
  9216                           tblptrl	equ	0xFF6
  9217                           tablat	equ	0xFF5
  9218                           prodh	equ	0xFF4
  9219                           prodl	equ	0xFF3
  9220                           intcon	equ	0xFF2
  9221                           intcon2	equ	0xFF1
  9222                           intcon3	equ	0xFF0
  9223                           postinc0	equ	0xFEE
  9224                           wreg	equ	0xFE8
  9225                           postdec1	equ	0xFE5
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           fsr2h	equ	0xFDA
  9230                           fsr2l	equ	0xFD9
  9231                           status	equ	0xFD8
  9232                           
  9233 ;; *************** function _setAddrWindow *****************
  9234 ;; Defined at:
  9235 ;;		line 425 in file "ST7735_TFT.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;  x0              1    wreg     unsigned char 
  9238 ;;  y0              1   17[COMRAM] unsigned char 
  9239 ;;  x1              1   18[COMRAM] unsigned char 
  9240 ;;  y1              1   19[COMRAM] unsigned char 
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;  x0              1   20[COMRAM] unsigned char 
  9243 ;; Return value:  Size  Location     Type
  9244 ;;		None               void
  9245 ;; Registers used:
  9246 ;;		wreg, status,2, status,0, cstack
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9252 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9255 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9256 ;;Total ram usage:        4 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    4
  9259 ;; This function calls:
  9260 ;;		_write_command
  9261 ;;		_write_data
  9262 ;; This function is called by:
  9263 ;;		_drawPixel
  9264 ;;		_drawFastVLine
  9265 ;;		_fillRectangle
  9266 ;;		_drawFastHLine
  9267 ;; This function uses a non-reentrant model
  9268 ;;
  9269                           
  9270                           	psect	text44
  9271  00221A                     __ptext44:
  9272                           	opt stack 0
  9273  00221A                     _setAddrWindow:
  9274                           	opt stack 19
  9275                           
  9276                           ;incstack = 0
  9277                           ;setAddrWindow@x0 stored from wreg
  9278  00221A  6E15               	movwf	setAddrWindow@x0,c
  9279                           
  9280                           ;ST7735_TFT.c: 427: write_command(0x2A);
  9281  00221C  0E2A               	movlw	42
  9282  00221E  EC56  F013         	call	_write_command
  9283                           
  9284                           ;ST7735_TFT.c: 428: write_data(0);
  9285  002222  0E00               	movlw	0
  9286  002224  EC4E  F013         	call	_write_data
  9287                           
  9288                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  9289  002228  5015               	movf	setAddrWindow@x0,w,c
  9290  00222A  2457               	addwf	_colstart,w,c
  9291  00222C  EC4E  F013         	call	_write_data
  9292                           
  9293                           ;ST7735_TFT.c: 430: write_data(0);
  9294  002230  0E00               	movlw	0
  9295  002232  EC4E  F013         	call	_write_data
  9296                           
  9297                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  9298  002236  5013               	movf	setAddrWindow@x1,w,c
  9299  002238  2457               	addwf	_colstart,w,c
  9300  00223A  EC4E  F013         	call	_write_data
  9301                           
  9302                           ;ST7735_TFT.c: 432: write_command(0x2B);
  9303  00223E  0E2B               	movlw	43
  9304  002240  EC56  F013         	call	_write_command
  9305                           
  9306                           ;ST7735_TFT.c: 433: write_data(0);
  9307  002244  0E00               	movlw	0
  9308  002246  EC4E  F013         	call	_write_data
  9309                           
  9310                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  9311  00224A  5012               	movf	setAddrWindow@y0,w,c
  9312  00224C  245A               	addwf	_rowstart,w,c
  9313  00224E  EC4E  F013         	call	_write_data
  9314                           
  9315                           ;ST7735_TFT.c: 435: write_data(0);
  9316  002252  0E00               	movlw	0
  9317  002254  EC4E  F013         	call	_write_data
  9318                           
  9319                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  9320  002258  5014               	movf	setAddrWindow@y1,w,c
  9321  00225A  245A               	addwf	_rowstart,w,c
  9322  00225C  EC4E  F013         	call	_write_data
  9323                           
  9324                           ;ST7735_TFT.c: 437: write_command(0x2C);
  9325  002260  0E2C               	movlw	44
  9326  002262  EC56  F013         	call	_write_command
  9327  002266  0012               	return		;funcret
  9328  002268                     __end_of_setAddrWindow:
  9329                           	opt stack 0
  9330                           tblptru	equ	0xFF8
  9331                           tblptrh	equ	0xFF7
  9332                           tblptrl	equ	0xFF6
  9333                           tablat	equ	0xFF5
  9334                           prodh	equ	0xFF4
  9335                           prodl	equ	0xFF3
  9336                           intcon	equ	0xFF2
  9337                           intcon2	equ	0xFF1
  9338                           intcon3	equ	0xFF0
  9339                           postinc0	equ	0xFEE
  9340                           wreg	equ	0xFE8
  9341                           postdec1	equ	0xFE5
  9342                           fsr1l	equ	0xFE1
  9343                           indf2	equ	0xFDF
  9344                           postinc2	equ	0xFDE
  9345                           fsr2h	equ	0xFDA
  9346                           fsr2l	equ	0xFD9
  9347                           status	equ	0xFD8
  9348                           
  9349 ;; *************** function _write_data *****************
  9350 ;; Defined at:
  9351 ;;		line 242 in file "ST7735_TFT.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  data_           1    wreg     unsigned char 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;  data_           1   16[COMRAM] unsigned char 
  9356 ;; Return value:  Size  Location     Type
  9357 ;;		None               void
  9358 ;; Registers used:
  9359 ;;		wreg, status,2, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;Total ram usage:        1 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    3
  9372 ;; This function calls:
  9373 ;;		_spiwrite
  9374 ;; This function is called by:
  9375 ;;		_Rcmd1
  9376 ;;		_Rcmd2red
  9377 ;;		_Rcmd3
  9378 ;;		_setAddrWindow
  9379 ;;		_drawPixel
  9380 ;;		_TFT_GreenTab_Initialize
  9381 ;;		_Bcmd
  9382 ;;		_setScrollDefinition
  9383 ;;		_Rcmd2green
  9384 ;;		_VerticalScroll
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           	psect	text45
  9389  00269C                     __ptext45:
  9390                           	opt stack 0
  9391  00269C                     _write_data:
  9392                           	opt stack 19
  9393                           
  9394                           ;incstack = 0
  9395                           ;write_data@data_ stored from wreg
  9396  00269C  6E11               	movwf	write_data@data_,c
  9397                           
  9398                           ;ST7735_TFT.c: 244: PORTCbits.RC1 = 0;
  9399  00269E  9282               	bcf	3970,1,c	;volatile
  9400                           
  9401                           ;ST7735_TFT.c: 245: PORTCbits.RC0 = 1;
  9402  0026A0  8082               	bsf	3970,0,c	;volatile
  9403                           
  9404                           ;ST7735_TFT.c: 246: spiwrite(data_);
  9405  0026A2  5011               	movf	write_data@data_,w,c
  9406  0026A4  EC32  F013         	call	_spiwrite
  9407                           
  9408                           ;ST7735_TFT.c: 247: PORTCbits.RC1 = 1;
  9409  0026A8  8282               	bsf	3970,1,c	;volatile
  9410  0026AA  0012               	return		;funcret
  9411  0026AC                     __end_of_write_data:
  9412                           	opt stack 0
  9413                           tblptru	equ	0xFF8
  9414                           tblptrh	equ	0xFF7
  9415                           tblptrl	equ	0xFF6
  9416                           tablat	equ	0xFF5
  9417                           prodh	equ	0xFF4
  9418                           prodl	equ	0xFF3
  9419                           intcon	equ	0xFF2
  9420                           intcon2	equ	0xFF1
  9421                           intcon3	equ	0xFF0
  9422                           postinc0	equ	0xFEE
  9423                           wreg	equ	0xFE8
  9424                           postdec1	equ	0xFE5
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432 ;; *************** function _write_command *****************
  9433 ;; Defined at:
  9434 ;;		line 231 in file "ST7735_TFT.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  cmd_            1    wreg     unsigned char 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  cmd_            1   16[COMRAM] unsigned char 
  9439 ;; Return value:  Size  Location     Type
  9440 ;;		None               void
  9441 ;; Registers used:
  9442 ;;		wreg, status,2, cstack
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9452 ;;Total ram usage:        1 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    3
  9455 ;; This function calls:
  9456 ;;		_spiwrite
  9457 ;; This function is called by:
  9458 ;;		_Rcmd1
  9459 ;;		_Rcmd2red
  9460 ;;		_Rcmd3
  9461 ;;		_setAddrWindow
  9462 ;;		_TFT_GreenTab_Initialize
  9463 ;;		_Bcmd
  9464 ;;		_setScrollDefinition
  9465 ;;		_Rcmd2green
  9466 ;;		_VerticalScroll
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           	psect	text46
  9471  0026AC                     __ptext46:
  9472                           	opt stack 0
  9473  0026AC                     _write_command:
  9474                           	opt stack 19
  9475                           
  9476                           ;incstack = 0
  9477                           ;write_command@cmd_ stored from wreg
  9478  0026AC  6E11               	movwf	write_command@cmd_,c
  9479                           
  9480                           ;ST7735_TFT.c: 233: PORTCbits.RC1 = 0;
  9481  0026AE  9282               	bcf	3970,1,c	;volatile
  9482                           
  9483                           ;ST7735_TFT.c: 235: PORTCbits.RC0 = 0;
  9484  0026B0  9082               	bcf	3970,0,c	;volatile
  9485                           
  9486                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  9487  0026B2  5011               	movf	write_command@cmd_,w,c
  9488  0026B4  EC32  F013         	call	_spiwrite
  9489                           
  9490                           ;ST7735_TFT.c: 238: PORTCbits.RC1 = 1;
  9491  0026B8  8282               	bsf	3970,1,c	;volatile
  9492  0026BA  0012               	return		;funcret
  9493  0026BC                     __end_of_write_command:
  9494                           	opt stack 0
  9495                           tblptru	equ	0xFF8
  9496                           tblptrh	equ	0xFF7
  9497                           tblptrl	equ	0xFF6
  9498                           tablat	equ	0xFF5
  9499                           prodh	equ	0xFF4
  9500                           prodl	equ	0xFF3
  9501                           intcon	equ	0xFF2
  9502                           intcon2	equ	0xFF1
  9503                           intcon3	equ	0xFF0
  9504                           postinc0	equ	0xFEE
  9505                           wreg	equ	0xFE8
  9506                           postdec1	equ	0xFE5
  9507                           fsr1l	equ	0xFE1
  9508                           indf2	equ	0xFDF
  9509                           postinc2	equ	0xFDE
  9510                           fsr2h	equ	0xFDA
  9511                           fsr2l	equ	0xFD9
  9512                           status	equ	0xFD8
  9513                           
  9514 ;; *************** function _spiwrite *****************
  9515 ;; Defined at:
  9516 ;;		line 222 in file "ST7735_TFT.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;  spidata         1    wreg     unsigned char 
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;  spidata         1   15[COMRAM] unsigned char 
  9521 ;;  x               1   14[COMRAM] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9535 ;;Total ram usage:        2 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    2
  9538 ;; This function calls:
  9539 ;;		Nothing
  9540 ;; This function is called by:
  9541 ;;		_write_command
  9542 ;;		_write_data
  9543 ;;		_drawFastVLine
  9544 ;;		_fillRectangle
  9545 ;;		_drawFastHLine
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text47
  9550  002664                     __ptext47:
  9551                           	opt stack 0
  9552  002664                     _spiwrite:
  9553                           	opt stack 21
  9554                           
  9555                           ;incstack = 0
  9556                           ;spiwrite@spidata stored from wreg
  9557  002664  6E10               	movwf	spiwrite@spidata,c
  9558                           
  9559                           ;ST7735_TFT.c: 224: char x;
  9560                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  9561  002666  969E               	bcf	3998,3,c	;volatile
  9562                           
  9563                           ;ST7735_TFT.c: 226: x = SSPBUF;
  9564  002668  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  9565                           
  9566                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  9567  00266C  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  9568                           
  9569                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  9570  002670  D000               	goto	l139
  9571  002672                     l139:
  9572  002672  A0C7               	btfss	4039,0,c	;volatile
  9573  002674  D7FE               	goto	l139
  9574  002676  0012               	return		;funcret
  9575  002678                     __end_of_spiwrite:
  9576                           	opt stack 0
  9577                           tblptru	equ	0xFF8
  9578                           tblptrh	equ	0xFF7
  9579                           tblptrl	equ	0xFF6
  9580                           tablat	equ	0xFF5
  9581                           prodh	equ	0xFF4
  9582                           prodl	equ	0xFF3
  9583                           intcon	equ	0xFF2
  9584                           intcon2	equ	0xFF1
  9585                           intcon3	equ	0xFF0
  9586                           postinc0	equ	0xFEE
  9587                           wreg	equ	0xFE8
  9588                           postdec1	equ	0xFE5
  9589                           fsr1l	equ	0xFE1
  9590                           indf2	equ	0xFDF
  9591                           postinc2	equ	0xFDE
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596 ;; *************** function ___wmul *****************
  9597 ;; Defined at:
  9598 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;  multiplier      2   14[COMRAM] unsigned int 
  9601 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9602 ;; Auto vars:     Size  Location     Type
  9603 ;;  product         2   18[COMRAM] unsigned int 
  9604 ;; Return value:  Size  Location     Type
  9605 ;;                  2   14[COMRAM] unsigned int 
  9606 ;; Registers used:
  9607 ;;		wreg, status,2, status,0, prodl, prodh
  9608 ;; Tracked objects:
  9609 ;;		On entry : 0/0
  9610 ;;		On exit  : 0/0
  9611 ;;		Unchanged: 0/0
  9612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9613 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9616 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;Total ram usage:        6 bytes
  9618 ;; Hardware stack levels used:    1
  9619 ;; Hardware stack levels required when called:    2
  9620 ;; This function calls:
  9621 ;;		Nothing
  9622 ;; This function is called by:
  9623 ;;		_delay_ms
  9624 ;;		_drawChar
  9625 ;;		_main
  9626 ;;		_update_LCD_misc
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text48
  9631  00254C                     __ptext48:
  9632                           	opt stack 0
  9633  00254C                     ___wmul:
  9634                           	opt stack 28
  9635                           
  9636                           ;incstack = 0
  9637  00254C  500F               	movf	___wmul@multiplier,w,c
  9638  00254E  0211               	mulwf	___wmul@multiplicand,c
  9639  002550  CFF3 F013          	movff	prodl,___wmul@product
  9640  002554  CFF4 F014          	movff	prodh,___wmul@product+1
  9641  002558  500F               	movf	___wmul@multiplier,w,c
  9642  00255A  0212               	mulwf	___wmul@multiplicand+1,c
  9643  00255C  50F3               	movf	prodl,w,c
  9644  00255E  2614               	addwf	___wmul@product+1,f,c
  9645  002560  5010               	movf	___wmul@multiplier+1,w,c
  9646  002562  0211               	mulwf	___wmul@multiplicand,c
  9647  002564  50F3               	movf	prodl,w,c
  9648  002566  2614               	addwf	___wmul@product+1,f,c
  9649  002568  C013  F00F         	movff	___wmul@product,?___wmul
  9650  00256C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9651  002570  D000               	goto	l589
  9652  002572                     l589:
  9653  002572  0012               	return		;funcret
  9654  002574                     __end_of___wmul:
  9655                           	opt stack 0
  9656                           tblptru	equ	0xFF8
  9657                           tblptrh	equ	0xFF7
  9658                           tblptrl	equ	0xFF6
  9659                           tablat	equ	0xFF5
  9660                           prodh	equ	0xFF4
  9661                           prodl	equ	0xFF3
  9662                           intcon	equ	0xFF2
  9663                           intcon2	equ	0xFF1
  9664                           intcon3	equ	0xFF0
  9665                           postinc0	equ	0xFEE
  9666                           wreg	equ	0xFE8
  9667                           postdec1	equ	0xFE5
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           fsr2h	equ	0xFDA
  9672                           fsr2l	equ	0xFD9
  9673                           status	equ	0xFD8
  9674                           
  9675 ;; *************** function ___ftge *****************
  9676 ;; Defined at:
  9677 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  9678 ;; Parameters:    Size  Location     Type
  9679 ;;  ff1             3   14[COMRAM] float 
  9680 ;;  ff2             3   17[COMRAM] float 
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;		None
  9683 ;; Return value:  Size  Location     Type
  9684 ;;		None               void
  9685 ;; Registers used:
  9686 ;;		wreg, status,2, status,0
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9692 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9694 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9695 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;Total ram usage:        9 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    2
  9699 ;; This function calls:
  9700 ;;		Nothing
  9701 ;; This function is called by:
  9702 ;;		_main
  9703 ;;		_update_LCD_misc
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           	psect	text49
  9708  001BC0                     __ptext49:
  9709                           	opt stack 0
  9710  001BC0                     ___ftge:
  9711                           	opt stack 28
  9712                           
  9713                           ;incstack = 0
  9714  001BC0  AE11               	btfss	___ftge@ff1+2,7,c
  9715  001BC2  D017               	goto	l4492
  9716  001BC4  C00F  F015         	movff	___ftge@ff1,??___ftge
  9717  001BC8  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  9718  001BCC  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  9719  001BD0  1E15               	comf	??___ftge,f,c
  9720  001BD2  1E16               	comf	??___ftge+1,f,c
  9721  001BD4  1E17               	comf	??___ftge+2,f,c
  9722  001BD6  2A15               	incf	??___ftge,f,c
  9723  001BD8  0E00               	movlw	0
  9724  001BDA  2216               	addwfc	??___ftge+1,f,c
  9725  001BDC  2217               	addwfc	??___ftge+2,f,c
  9726  001BDE  0E00               	movlw	0
  9727  001BE0  2415               	addwf	??___ftge,w,c
  9728  001BE2  6E0F               	movwf	___ftge@ff1,c
  9729  001BE4  0E00               	movlw	0
  9730  001BE6  2016               	addwfc	??___ftge+1,w,c
  9731  001BE8  6E10               	movwf	___ftge@ff1+1,c
  9732  001BEA  0E80               	movlw	128
  9733  001BEC  2017               	addwfc	??___ftge+2,w,c
  9734  001BEE  6E11               	movwf	___ftge@ff1+2,c
  9735  001BF0  D000               	goto	l4492
  9736  001BF2                     l4492:
  9737  001BF2  AE14               	btfss	___ftge@ff2+2,7,c
  9738  001BF4  D017               	goto	l4496
  9739  001BF6  C012  F015         	movff	___ftge@ff2,??___ftge
  9740  001BFA  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  9741  001BFE  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  9742  001C02  1E15               	comf	??___ftge,f,c
  9743  001C04  1E16               	comf	??___ftge+1,f,c
  9744  001C06  1E17               	comf	??___ftge+2,f,c
  9745  001C08  2A15               	incf	??___ftge,f,c
  9746  001C0A  0E00               	movlw	0
  9747  001C0C  2216               	addwfc	??___ftge+1,f,c
  9748  001C0E  2217               	addwfc	??___ftge+2,f,c
  9749  001C10  0E00               	movlw	0
  9750  001C12  2415               	addwf	??___ftge,w,c
  9751  001C14  6E12               	movwf	___ftge@ff2,c
  9752  001C16  0E00               	movlw	0
  9753  001C18  2016               	addwfc	??___ftge+1,w,c
  9754  001C1A  6E13               	movwf	___ftge@ff2+1,c
  9755  001C1C  0E80               	movlw	128
  9756  001C1E  2017               	addwfc	??___ftge+2,w,c
  9757  001C20  6E14               	movwf	___ftge@ff2+2,c
  9758  001C22  D000               	goto	l4496
  9759  001C24                     l4496:
  9760  001C24  0E00               	movlw	0
  9761  001C26  1A0F               	xorwf	___ftge@ff1,f,c
  9762  001C28  0E00               	movlw	0
  9763  001C2A  1A10               	xorwf	___ftge@ff1+1,f,c
  9764  001C2C  0E80               	movlw	128
  9765  001C2E  1A11               	xorwf	___ftge@ff1+2,f,c
  9766  001C30  0E00               	movlw	0
  9767  001C32  1A12               	xorwf	___ftge@ff2,f,c
  9768  001C34  0E00               	movlw	0
  9769  001C36  1A13               	xorwf	___ftge@ff2+1,f,c
  9770  001C38  0E80               	movlw	128
  9771  001C3A  1A14               	xorwf	___ftge@ff2+2,f,c
  9772  001C3C  5012               	movf	___ftge@ff2,w,c
  9773  001C3E  5C0F               	subwf	___ftge@ff1,w,c
  9774  001C40  5013               	movf	___ftge@ff2+1,w,c
  9775  001C42  5810               	subwfb	___ftge@ff1+1,w,c
  9776  001C44  5014               	movf	___ftge@ff2+2,w,c
  9777  001C46  5811               	subwfb	___ftge@ff1+2,w,c
  9778  001C48  B0D8               	btfsc	status,0,c
  9779  001C4A  D002               	goto	l4502
  9780  001C4C  90D8               	bcf	status,0,c
  9781  001C4E  D002               	goto	l978
  9782  001C50                     l4502:
  9783  001C50  80D8               	bsf	status,0,c
  9784  001C52  D000               	goto	l978
  9785  001C54                     l978:
  9786  001C54  0012               	return		;funcret
  9787  001C56                     __end_of___ftge:
  9788                           	opt stack 0
  9789                           tblptru	equ	0xFF8
  9790                           tblptrh	equ	0xFF7
  9791                           tblptrl	equ	0xFF6
  9792                           tablat	equ	0xFF5
  9793                           prodh	equ	0xFF4
  9794                           prodl	equ	0xFF3
  9795                           intcon	equ	0xFF2
  9796                           intcon2	equ	0xFF1
  9797                           intcon3	equ	0xFF0
  9798                           postinc0	equ	0xFEE
  9799                           wreg	equ	0xFE8
  9800                           postdec1	equ	0xFE5
  9801                           fsr1l	equ	0xFE1
  9802                           indf2	equ	0xFDF
  9803                           postinc2	equ	0xFDE
  9804                           fsr2h	equ	0xFDA
  9805                           fsr2l	equ	0xFD9
  9806                           status	equ	0xFD8
  9807                           
  9808 ;; *************** function ___ftdiv *****************
  9809 ;; Defined at:
  9810 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;  f1              3   26[COMRAM] float 
  9813 ;;  f2              3   29[COMRAM] float 
  9814 ;; Auto vars:     Size  Location     Type
  9815 ;;  f3              3   36[COMRAM] float 
  9816 ;;  sign            1   40[COMRAM] unsigned char 
  9817 ;;  exp             1   39[COMRAM] unsigned char 
  9818 ;;  cntr            1   35[COMRAM] unsigned char 
  9819 ;; Return value:  Size  Location     Type
  9820 ;;                  3   26[COMRAM] float 
  9821 ;; Registers used:
  9822 ;;		wreg, status,2, status,0, cstack
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9828 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;Total ram usage:       15 bytes
  9833 ;; Hardware stack levels used:    1
  9834 ;; Hardware stack levels required when called:    3
  9835 ;; This function calls:
  9836 ;;		___ftpack
  9837 ;; This function is called by:
  9838 ;;		_main
  9839 ;;		_update_LCD_misc
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           	psect	text50
  9844  0015A0                     __ptext50:
  9845                           	opt stack 0
  9846  0015A0                     ___ftdiv:
  9847                           	opt stack 27
  9848                           
  9849                           ;incstack = 0
  9850  0015A0  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  9851  0015A4  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  9852  0015A6  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  9853  0015A8  341C               	rlcf	___ftdiv@f1+1,w,c
  9854  0015AA  3621               	rlcf	??___ftdiv& (0+255),f,c
  9855  0015AC  E301               	bnc	u3121
  9856  0015AE  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  9857  0015B0                     u3121:
  9858  0015B0  5021               	movf	??___ftdiv,w,c
  9859  0015B2  6E28               	movwf	___ftdiv@exp,c
  9860  0015B4  5028               	movf	___ftdiv@exp,w,c
  9861  0015B6  A4D8               	btfss	status,2,c
  9862  0015B8  D002               	goto	l4436
  9863  0015BA  D00E               	goto	l4438
  9864  0015BC  D061               	goto	l969
  9865  0015BE                     l4436:
  9866  0015BE  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  9867  0015C2  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  9868  0015C4  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  9869  0015C6  341F               	rlcf	___ftdiv@f2+1,w,c
  9870  0015C8  3621               	rlcf	??___ftdiv& (0+255),f,c
  9871  0015CA  E301               	bnc	u3141
  9872  0015CC  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  9873  0015CE                     u3141:
  9874  0015CE  5021               	movf	??___ftdiv,w,c
  9875  0015D0  6E29               	movwf	___ftdiv@sign,c
  9876  0015D2  5029               	movf	___ftdiv@sign,w,c
  9877  0015D4  A4D8               	btfss	status,2,c
  9878  0015D6  D007               	goto	l4442
  9879  0015D8                     l4438:
  9880  0015D8  0E00               	movlw	0
  9881  0015DA  6E1B               	movwf	?___ftdiv,c
  9882  0015DC  0E00               	movlw	0
  9883  0015DE  6E1C               	movwf	?___ftdiv+1,c
  9884  0015E0  0E00               	movlw	0
  9885  0015E2  6E1D               	movwf	?___ftdiv+2,c
  9886  0015E4  D04D               	goto	l969
  9887  0015E6                     l4442:
  9888  0015E6  0E00               	movlw	0
  9889  0015E8  6E25               	movwf	___ftdiv@f3,c
  9890  0015EA  0E00               	movlw	0
  9891  0015EC  6E26               	movwf	___ftdiv@f3+1,c
  9892  0015EE  0E00               	movlw	0
  9893  0015F0  6E27               	movwf	___ftdiv@f3+2,c
  9894  0015F2  5029               	movf	___ftdiv@sign,w,c
  9895  0015F4  0F89               	addlw	137
  9896  0015F6  5E28               	subwf	___ftdiv@exp,f,c
  9897  0015F8  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  9898  0015FC  5020               	movf	___ftdiv@f2+2,w,c
  9899  0015FE  1A29               	xorwf	___ftdiv@sign,f,c
  9900  001600  0E80               	movlw	128
  9901  001602  1629               	andwf	___ftdiv@sign,f,c
  9902  001604  8E1C               	bsf	___ftdiv@f1+1,7,c
  9903  001606  0EFF               	movlw	255
  9904  001608  161B               	andwf	___ftdiv@f1,f,c
  9905  00160A  0EFF               	movlw	255
  9906  00160C  161C               	andwf	___ftdiv@f1+1,f,c
  9907  00160E  0E00               	movlw	0
  9908  001610  161D               	andwf	___ftdiv@f1+2,f,c
  9909  001612  8E1F               	bsf	___ftdiv@f2+1,7,c
  9910  001614  0EFF               	movlw	255
  9911  001616  161E               	andwf	___ftdiv@f2,f,c
  9912  001618  0EFF               	movlw	255
  9913  00161A  161F               	andwf	___ftdiv@f2+1,f,c
  9914  00161C  0E00               	movlw	0
  9915  00161E  1620               	andwf	___ftdiv@f2+2,f,c
  9916  001620  0E18               	movlw	24
  9917  001622  6E24               	movwf	___ftdiv@cntr,c
  9918  001624  D000               	goto	l4462
  9919  001626                     l4462:
  9920  001626  90D8               	bcf	status,0,c
  9921  001628  3625               	rlcf	___ftdiv@f3,f,c
  9922  00162A  3626               	rlcf	___ftdiv@f3+1,f,c
  9923  00162C  3627               	rlcf	___ftdiv@f3+2,f,c
  9924  00162E  501E               	movf	___ftdiv@f2,w,c
  9925  001630  5C1B               	subwf	___ftdiv@f1,w,c
  9926  001632  501F               	movf	___ftdiv@f2+1,w,c
  9927  001634  581C               	subwfb	___ftdiv@f1+1,w,c
  9928  001636  5020               	movf	___ftdiv@f2+2,w,c
  9929  001638  581D               	subwfb	___ftdiv@f1+2,w,c
  9930  00163A  A0D8               	btfss	status,0,c
  9931  00163C  D007               	goto	l972
  9932  00163E  501E               	movf	___ftdiv@f2,w,c
  9933  001640  5E1B               	subwf	___ftdiv@f1,f,c
  9934  001642  501F               	movf	___ftdiv@f2+1,w,c
  9935  001644  5A1C               	subwfb	___ftdiv@f1+1,f,c
  9936  001646  5020               	movf	___ftdiv@f2+2,w,c
  9937  001648  5A1D               	subwfb	___ftdiv@f1+2,f,c
  9938  00164A  8025               	bsf	___ftdiv@f3,0,c
  9939  00164C                     l972:
  9940  00164C  90D8               	bcf	status,0,c
  9941  00164E  361B               	rlcf	___ftdiv@f1,f,c
  9942  001650  361C               	rlcf	___ftdiv@f1+1,f,c
  9943  001652  361D               	rlcf	___ftdiv@f1+2,f,c
  9944  001654  2E24               	decfsz	___ftdiv@cntr,f,c
  9945  001656  D7E7               	goto	l4462
  9946  001658  D000               	goto	l4472
  9947  00165A                     l4472:
  9948  00165A  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  9949  00165E  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9950  001662  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9951  001666  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  9952  00166A  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  9953  00166E  EC80  F00C         	call	___ftpack	;wreg free
  9954  001672  C00F  F01B         	movff	?___ftpack,?___ftdiv
  9955  001676  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  9956  00167A  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  9957  00167E  D000               	goto	l969
  9958  001680                     l969:
  9959  001680  0012               	return		;funcret
  9960  001682                     __end_of___ftdiv:
  9961                           	opt stack 0
  9962                           tblptru	equ	0xFF8
  9963                           tblptrh	equ	0xFF7
  9964                           tblptrl	equ	0xFF6
  9965                           tablat	equ	0xFF5
  9966                           prodh	equ	0xFF4
  9967                           prodl	equ	0xFF3
  9968                           intcon	equ	0xFF2
  9969                           intcon2	equ	0xFF1
  9970                           intcon3	equ	0xFF0
  9971                           postinc0	equ	0xFEE
  9972                           wreg	equ	0xFE8
  9973                           postdec1	equ	0xFE5
  9974                           fsr1l	equ	0xFE1
  9975                           indf2	equ	0xFDF
  9976                           postinc2	equ	0xFDE
  9977                           fsr2h	equ	0xFDA
  9978                           fsr2l	equ	0xFD9
  9979                           status	equ	0xFD8
  9980                           
  9981 ;; *************** function ___awtoft *****************
  9982 ;; Defined at:
  9983 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;  c               2   22[COMRAM] int 
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;  sign            1   25[COMRAM] unsigned char 
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  3   22[COMRAM] float 
  9990 ;; Registers used:
  9991 ;;		wreg, status,2, status,0, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9997 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;Total ram usage:        4 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    3
 10004 ;; This function calls:
 10005 ;;		___ftpack
 10006 ;; This function is called by:
 10007 ;;		_main
 10008 ;;		_update_LCD_misc
 10009 ;; This function uses a non-reentrant model
 10010 ;;
 10011                           
 10012                           	psect	text51
 10013  00244E                     __ptext51:
 10014                           	opt stack 0
 10015  00244E                     ___awtoft:
 10016                           	opt stack 27
 10017                           
 10018                           ;incstack = 0
 10019  00244E  0E00               	movlw	0
 10020  002450  6E1A               	movwf	___awtoft@sign,c
 10021  002452  AE18               	btfss	___awtoft@c+1,7,c
 10022  002454  D007               	goto	l4484
 10023  002456  6C17               	negf	___awtoft@c,c
 10024  002458  1E18               	comf	___awtoft@c+1,f,c
 10025  00245A  B0D8               	btfsc	status,0,c
 10026  00245C  2A18               	incf	___awtoft@c+1,f,c
 10027  00245E  0E01               	movlw	1
 10028  002460  6E1A               	movwf	___awtoft@sign,c
 10029  002462  D000               	goto	l4484
 10030  002464                     l4484:
 10031  002464  C017  F00F         	movff	___awtoft@c,___ftpack@arg
 10032  002468  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 10033  00246C  6A11               	clrf	___ftpack@arg+2,c
 10034  00246E  0E8E               	movlw	142
 10035  002470  6E12               	movwf	___ftpack@exp,c
 10036  002472  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
 10037  002476  EC80  F00C         	call	___ftpack	;wreg free
 10038  00247A  C00F  F017         	movff	?___ftpack,?___awtoft
 10039  00247E  C010  F018         	movff	?___ftpack+1,?___awtoft+1
 10040  002482  C011  F019         	movff	?___ftpack+2,?___awtoft+2
 10041  002486  D000               	goto	l807
 10042  002488                     l807:
 10043  002488  0012               	return		;funcret
 10044  00248A                     __end_of___awtoft:
 10045                           	opt stack 0
 10046                           tblptru	equ	0xFF8
 10047                           tblptrh	equ	0xFF7
 10048                           tblptrl	equ	0xFF6
 10049                           tablat	equ	0xFF5
 10050                           prodh	equ	0xFF4
 10051                           prodl	equ	0xFF3
 10052                           intcon	equ	0xFF2
 10053                           intcon2	equ	0xFF1
 10054                           intcon3	equ	0xFF0
 10055                           postinc0	equ	0xFEE
 10056                           wreg	equ	0xFE8
 10057                           postdec1	equ	0xFE5
 10058                           fsr1l	equ	0xFE1
 10059                           indf2	equ	0xFDF
 10060                           postinc2	equ	0xFDE
 10061                           fsr2h	equ	0xFDA
 10062                           fsr2l	equ	0xFD9
 10063                           status	equ	0xFD8
 10064                           
 10065 ;; *************** function ___ftpack *****************
 10066 ;; Defined at:
 10067 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;  arg             3   14[COMRAM] unsigned um
 10070 ;;  exp             1   17[COMRAM] unsigned char 
 10071 ;;  sign            1   18[COMRAM] unsigned char 
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;		None
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  3   14[COMRAM] float 
 10076 ;; Registers used:
 10077 ;;		wreg, status,2, status,0
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10083 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10087 ;;Total ram usage:        8 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    2
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		___awtoft
 10094 ;;		___ftdiv
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           	psect	text52
 10099  001900                     __ptext52:
 10100                           	opt stack 0
 10101  001900                     ___ftpack:
 10102                           	opt stack 27
 10103                           
 10104                           ;incstack = 0
 10105  001900  5012               	movf	___ftpack@exp,w,c
 10106  001902  B4D8               	btfsc	status,2,c
 10107  001904  D005               	goto	l4322
 10108  001906  500F               	movf	___ftpack@arg,w,c
 10109  001908  1010               	iorwf	___ftpack@arg+1,w,c
 10110  00190A  1011               	iorwf	___ftpack@arg+2,w,c
 10111  00190C  A4D8               	btfss	status,2,c
 10112  00190E  D00E               	goto	l4328
 10113  001910                     l4322:
 10114  001910  0E00               	movlw	0
 10115  001912  6E0F               	movwf	?___ftpack,c
 10116  001914  0E00               	movlw	0
 10117  001916  6E10               	movwf	?___ftpack+1,c
 10118  001918  0E00               	movlw	0
 10119  00191A  6E11               	movwf	?___ftpack+2,c
 10120  00191C  D053               	goto	l897
 10121  00191E  D006               	goto	l4328
 10122  001920                     l4326:
 10123  001920  2A12               	incf	___ftpack@exp,f,c
 10124  001922  90D8               	bcf	status,0,c
 10125  001924  3211               	rrcf	___ftpack@arg+2,f,c
 10126  001926  3210               	rrcf	___ftpack@arg+1,f,c
 10127  001928  320F               	rrcf	___ftpack@arg,f,c
 10128  00192A  D000               	goto	l4328
 10129  00192C                     l4328:
 10130  00192C  0E00               	movlw	0
 10131  00192E  140F               	andwf	___ftpack@arg,w,c
 10132  001930  6E14               	movwf	??___ftpack& (0+255),c
 10133  001932  0E00               	movlw	0
 10134  001934  1410               	andwf	___ftpack@arg+1,w,c
 10135  001936  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10136  001938  0EFE               	movlw	254
 10137  00193A  1411               	andwf	___ftpack@arg+2,w,c
 10138  00193C  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10139  00193E  5014               	movf	??___ftpack,w,c
 10140  001940  1015               	iorwf	??___ftpack+1,w,c
 10141  001942  1016               	iorwf	??___ftpack+2,w,c
 10142  001944  B4D8               	btfsc	status,2,c
 10143  001946  D00E               	goto	l4334
 10144  001948  D7EB               	goto	l4326
 10145  00194A  D00C               	goto	l4334
 10146  00194C                     l4330:
 10147  00194C  2A12               	incf	___ftpack@exp,f,c
 10148  00194E  0E01               	movlw	1
 10149  001950  260F               	addwf	___ftpack@arg,f,c
 10150  001952  0E00               	movlw	0
 10151  001954  2210               	addwfc	___ftpack@arg+1,f,c
 10152  001956  0E00               	movlw	0
 10153  001958  2211               	addwfc	___ftpack@arg+2,f,c
 10154  00195A  90D8               	bcf	status,0,c
 10155  00195C  3211               	rrcf	___ftpack@arg+2,f,c
 10156  00195E  3210               	rrcf	___ftpack@arg+1,f,c
 10157  001960  320F               	rrcf	___ftpack@arg,f,c
 10158  001962  D000               	goto	l4334
 10159  001964                     l4334:
 10160  001964  0E00               	movlw	0
 10161  001966  140F               	andwf	___ftpack@arg,w,c
 10162  001968  6E14               	movwf	??___ftpack& (0+255),c
 10163  00196A  0E00               	movlw	0
 10164  00196C  1410               	andwf	___ftpack@arg+1,w,c
 10165  00196E  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10166  001970  0EFF               	movlw	255
 10167  001972  1411               	andwf	___ftpack@arg+2,w,c
 10168  001974  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10169  001976  5014               	movf	??___ftpack,w,c
 10170  001978  1015               	iorwf	??___ftpack+1,w,c
 10171  00197A  1016               	iorwf	??___ftpack+2,w,c
 10172  00197C  B4D8               	btfsc	status,2,c
 10173  00197E  D008               	goto	l4338
 10174  001980  D7E5               	goto	l4330
 10175  001982  D006               	goto	l4338
 10176  001984                     l4336:
 10177  001984  0612               	decf	___ftpack@exp,f,c
 10178  001986  90D8               	bcf	status,0,c
 10179  001988  360F               	rlcf	___ftpack@arg,f,c
 10180  00198A  3610               	rlcf	___ftpack@arg+1,f,c
 10181  00198C  3611               	rlcf	___ftpack@arg+2,f,c
 10182  00198E  D000               	goto	l4338
 10183  001990                     l4338:
 10184  001990  BE10               	btfsc	___ftpack@arg+1,7,c
 10185  001992  D004               	goto	l908
 10186  001994  0E02               	movlw	2
 10187  001996  6012               	cpfslt	___ftpack@exp,c
 10188  001998  D7F5               	goto	l4336
 10189  00199A  D000               	goto	l908
 10190  00199C                     l908:
 10191  00199C  B012               	btfsc	___ftpack@exp,0,c
 10192  00199E  D002               	goto	l4344
 10193  0019A0  9E10               	bcf	___ftpack@arg+1,7,c
 10194  0019A2  D000               	goto	l4344
 10195  0019A4                     l4344:
 10196  0019A4  90D8               	bcf	status,0,c
 10197  0019A6  3212               	rrcf	___ftpack@exp,f,c
 10198  0019A8  5012               	movf	___ftpack@exp,w,c
 10199  0019AA  1211               	iorwf	___ftpack@arg+2,f,c
 10200  0019AC  5013               	movf	___ftpack@sign,w,c
 10201  0019AE  B4D8               	btfsc	status,2,c
 10202  0019B0  D002               	goto	l4350
 10203  0019B2  8E11               	bsf	___ftpack@arg+2,7,c
 10204  0019B4  D000               	goto	l4350
 10205  0019B6                     l4350:
 10206  0019B6  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10207  0019BA  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10208  0019BE  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10209  0019C2  D000               	goto	l897
 10210  0019C4                     l897:
 10211  0019C4  0012               	return		;funcret
 10212  0019C6                     __end_of___ftpack:
 10213                           	opt stack 0
 10214                           tblptru	equ	0xFF8
 10215                           tblptrh	equ	0xFF7
 10216                           tblptrl	equ	0xFF6
 10217                           tablat	equ	0xFF5
 10218                           prodh	equ	0xFF4
 10219                           prodl	equ	0xFF3
 10220                           intcon	equ	0xFF2
 10221                           intcon2	equ	0xFF1
 10222                           intcon3	equ	0xFF0
 10223                           postinc0	equ	0xFEE
 10224                           wreg	equ	0xFE8
 10225                           postdec1	equ	0xFE5
 10226                           fsr1l	equ	0xFE1
 10227                           indf2	equ	0xFDF
 10228                           postinc2	equ	0xFDE
 10229                           fsr2h	equ	0xFDA
 10230                           fsr2l	equ	0xFD9
 10231                           status	equ	0xFD8
 10232                           
 10233 ;; *************** function _strcpy *****************
 10234 ;; Defined at:
 10235 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;  to              2   14[COMRAM] PTR unsigned char 
 10238 ;;		 -> NULL(0), buffer(31), 
 10239 ;;  from            2   16[COMRAM] PTR const unsigned char 
 10240 ;;		 -> STR_16(2), STR_15(2), STR_14(2), STR_13(2), 
 10241 ;;		 -> STR_12(21), STR_11(4), STR_10(4), STR_9(7), 
 10242 ;;		 -> STR_8(10), STR_7(7), STR_6(12), STR_5(2), 
 10243 ;;		 -> STR_4(4), STR_3(4), STR_2(6), STR_1(22), 
 10244 ;; Auto vars:     Size  Location     Type
 10245 ;;  cp              2   18[COMRAM] PTR unsigned char 
 10246 ;;		 -> NULL(0), buffer(31), 
 10247 ;; Return value:  Size  Location     Type
 10248 ;;                  2   14[COMRAM] PTR unsigned char 
 10249 ;; Registers used:
 10250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10256 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10257 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10259 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;Total ram usage:        6 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    2
 10263 ;; This function calls:
 10264 ;;		Nothing
 10265 ;; This function is called by:
 10266 ;;		_Initialize_Screen
 10267 ;;		_Wait_One_Second
 10268 ;;		_Wait_One_Second_With_Beep
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           	psect	text53
 10273  0024C0                     __ptext53:
 10274                           	opt stack 0
 10275  0024C0                     _strcpy:
 10276                           	opt stack 25
 10277                           
 10278                           ;incstack = 0
 10279  0024C0  C00F  F013         	movff	strcpy@to,strcpy@cp
 10280  0024C4  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
 10281  0024C8  D005               	goto	l4574
 10282  0024CA                     l4572:
 10283  0024CA  4A13               	infsnz	strcpy@cp,f,c
 10284  0024CC  2A14               	incf	strcpy@cp+1,f,c
 10285  0024CE  4A11               	infsnz	strcpy@from,f,c
 10286  0024D0  2A12               	incf	strcpy@from+1,f,c
 10287  0024D2  D000               	goto	l4574
 10288  0024D4                     l4574:
 10289  0024D4  C011  FFF6         	movff	strcpy@from,tblptrl
 10290  0024D8  C012  FFF7         	movff	strcpy@from+1,tblptrh
 10291  0024DC                     	if	0	;tblptru may be non-zero
 10292  0024DC                     	endif
 10293  0024DC                     	if	0	;tblptru may be non-zero
 10294  0024DC                     	endif
 10295  0024DC  C013  FFD9         	movff	strcpy@cp,fsr2l
 10296  0024E0  C014  FFDA         	movff	strcpy@cp+1,fsr2h
 10297  0024E4  0008               	tblrd		*
 10298  0024E6  CFF5 FFDF          	movff	tablat,indf2
 10299  0024EA  50DF               	movf	indf2,w,c
 10300  0024EC  A4D8               	btfss	status,2,c
 10301  0024EE  D7ED               	goto	l4572
 10302                           
 10303                           ;	Return value of _strcpy is never used
 10304  0024F0  0012               	return		;funcret
 10305  0024F2                     __end_of_strcpy:
 10306                           	opt stack 0
 10307                           tblptru	equ	0xFF8
 10308                           tblptrh	equ	0xFF7
 10309                           tblptrl	equ	0xFF6
 10310                           tablat	equ	0xFF5
 10311                           prodh	equ	0xFF4
 10312                           prodl	equ	0xFF3
 10313                           intcon	equ	0xFF2
 10314                           intcon2	equ	0xFF1
 10315                           intcon3	equ	0xFF0
 10316                           postinc0	equ	0xFEE
 10317                           wreg	equ	0xFE8
 10318                           postdec1	equ	0xFE5
 10319                           fsr1l	equ	0xFE1
 10320                           indf2	equ	0xFDF
 10321                           postinc2	equ	0xFDE
 10322                           fsr2h	equ	0xFDA
 10323                           fsr2l	equ	0xFD9
 10324                           status	equ	0xFD8
 10325                           
 10326 ;; *************** function _Wait_Half_Second *****************
 10327 ;; Defined at:
 10328 ;;		line 631 in file "Lab9pC.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;		None
 10333 ;; Return value:  Size  Location     Type
 10334 ;;		None               void
 10335 ;; Registers used:
 10336 ;;		wreg, status,2
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;Total ram usage:        0 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; Hardware stack levels required when called:    2
 10349 ;; This function calls:
 10350 ;;		Nothing
 10351 ;; This function is called by:
 10352 ;;		_Wait_One_Second
 10353 ;;		_Wait_One_Second_With_Beep
 10354 ;;		_Old_Wait_One_Second
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           	psect	text54
 10359  0025DC                     __ptext54:
 10360                           	opt stack 0
 10361  0025DC                     _Wait_Half_Second:
 10362                           	opt stack 25
 10363                           
 10364                           ;Lab9pC.c: 633: T0CON = 0x03;
 10365                           
 10366                           ;incstack = 0
 10367  0025DC  0E03               	movlw	3
 10368  0025DE  6ED5               	movwf	4053,c	;volatile
 10369                           
 10370                           ;Lab9pC.c: 634: TMR0L = 0xDB;
 10371  0025E0  0EDB               	movlw	219
 10372  0025E2  6ED6               	movwf	4054,c	;volatile
 10373                           
 10374                           ;Lab9pC.c: 635: TMR0H = 0x0B;
 10375  0025E4  0E0B               	movlw	11
 10376  0025E6  6ED7               	movwf	4055,c	;volatile
 10377                           
 10378                           ;Lab9pC.c: 636: INTCONbits.TMR0IF = 0;
 10379  0025E8  94F2               	bcf	intcon,2,c	;volatile
 10380                           
 10381                           ;Lab9pC.c: 637: T0CONbits.TMR0ON = 1;
 10382  0025EA  8ED5               	bsf	4053,7,c	;volatile
 10383                           
 10384                           ;Lab9pC.c: 638: while (INTCONbits.TMR0IF == 0);
 10385  0025EC  D000               	goto	l505
 10386  0025EE                     l505:
 10387  0025EE  A4F2               	btfss	intcon,2,c	;volatile
 10388  0025F0  D7FE               	goto	l505
 10389                           
 10390                           ;Lab9pC.c: 639: T0CONbits.TMR0ON = 0;
 10391  0025F2  9ED5               	bcf	4053,7,c	;volatile
 10392  0025F4  0012               	return		;funcret
 10393  0025F6                     __end_of_Wait_Half_Second:
 10394                           	opt stack 0
 10395                           tblptru	equ	0xFF8
 10396                           tblptrh	equ	0xFF7
 10397                           tblptrl	equ	0xFF6
 10398                           tablat	equ	0xFF5
 10399                           prodh	equ	0xFF4
 10400                           prodl	equ	0xFF3
 10401                           intcon	equ	0xFF2
 10402                           intcon2	equ	0xFF1
 10403                           intcon3	equ	0xFF0
 10404                           postinc0	equ	0xFEE
 10405                           wreg	equ	0xFE8
 10406                           postdec1	equ	0xFE5
 10407                           fsr1l	equ	0xFE1
 10408                           indf2	equ	0xFDF
 10409                           postinc2	equ	0xFDE
 10410                           fsr2h	equ	0xFDA
 10411                           fsr2l	equ	0xFD9
 10412                           status	equ	0xFD8
 10413                           
 10414 ;; *************** function _Deactivate_Buzzer *****************
 10415 ;; Defined at:
 10416 ;;		line 471 in file "Lab9pC.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;		None
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;		None
 10421 ;; Return value:  Size  Location     Type
 10422 ;;		None               void
 10423 ;; Registers used:
 10424 ;;		wreg, status,2
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;Total ram usage:        0 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    2
 10437 ;; This function calls:
 10438 ;;		Nothing
 10439 ;; This function is called by:
 10440 ;;		_Wait_One_Second_With_Beep
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           	psect	text55
 10445  0026D6                     __ptext55:
 10446                           	opt stack 0
 10447  0026D6                     _Deactivate_Buzzer:
 10448                           	opt stack 25
 10449                           
 10450                           ;Lab9pC.c: 473: CCP2CON = 0x0;
 10451                           
 10452                           ;incstack = 0
 10453  0026D6  0E00               	movlw	0
 10454  0026D8  6EBA               	movwf	4026,c	;volatile
 10455                           
 10456                           ;Lab9pC.c: 474: PORTBbits.RB3 = 0;
 10457  0026DA  9681               	bcf	3969,3,c	;volatile
 10458  0026DC  0012               	return		;funcret
 10459  0026DE                     __end_of_Deactivate_Buzzer:
 10460                           	opt stack 0
 10461                           tblptru	equ	0xFF8
 10462                           tblptrh	equ	0xFF7
 10463                           tblptrl	equ	0xFF6
 10464                           tablat	equ	0xFF5
 10465                           prodh	equ	0xFF4
 10466                           prodl	equ	0xFF3
 10467                           intcon	equ	0xFF2
 10468                           intcon2	equ	0xFF1
 10469                           intcon3	equ	0xFF0
 10470                           postinc0	equ	0xFEE
 10471                           wreg	equ	0xFE8
 10472                           postdec1	equ	0xFE5
 10473                           fsr1l	equ	0xFE1
 10474                           indf2	equ	0xFDF
 10475                           postinc2	equ	0xFDE
 10476                           fsr2h	equ	0xFDA
 10477                           fsr2l	equ	0xFD9
 10478                           status	equ	0xFD8
 10479                           
 10480 ;; *************** function _Activate_Buzzer *****************
 10481 ;; Defined at:
 10482 ;;		line 463 in file "Lab9pC.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;		None
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;		None
 10487 ;; Return value:  Size  Location     Type
 10488 ;;		None               void
 10489 ;; Registers used:
 10490 ;;		wreg, status,2
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10500 ;;Total ram usage:        0 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    2
 10503 ;; This function calls:
 10504 ;;		Nothing
 10505 ;; This function is called by:
 10506 ;;		_Wait_One_Second_With_Beep
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           	psect	text56
 10511  00268A                     __ptext56:
 10512                           	opt stack 0
 10513  00268A                     _Activate_Buzzer:
 10514                           	opt stack 25
 10515                           
 10516                           ;Lab9pC.c: 465: PR2 = 0b11111001;
 10517                           
 10518                           ;incstack = 0
 10519  00268A  0EF9               	movlw	249
 10520  00268C  6ECB               	movwf	4043,c	;volatile
 10521                           
 10522                           ;Lab9pC.c: 466: T2CON = 0b00000101;
 10523  00268E  0E05               	movlw	5
 10524  002690  6ECA               	movwf	4042,c	;volatile
 10525                           
 10526                           ;Lab9pC.c: 467: CCPR2L = 0b01001010;
 10527  002692  0E4A               	movlw	74
 10528  002694  6EBB               	movwf	4027,c	;volatile
 10529                           
 10530                           ;Lab9pC.c: 468: CCP2CON = 0b00111100;
 10531  002696  0E3C               	movlw	60
 10532  002698  6EBA               	movwf	4026,c	;volatile
 10533  00269A  0012               	return		;funcret
 10534  00269C                     __end_of_Activate_Buzzer:
 10535                           	opt stack 0
 10536                           tblptru	equ	0xFF8
 10537                           tblptrh	equ	0xFF7
 10538                           tblptrl	equ	0xFF6
 10539                           tablat	equ	0xFF5
 10540                           prodh	equ	0xFF4
 10541                           prodl	equ	0xFF3
 10542                           intcon	equ	0xFF2
 10543                           intcon2	equ	0xFF1
 10544                           intcon3	equ	0xFF0
 10545                           postinc0	equ	0xFEE
 10546                           wreg	equ	0xFE8
 10547                           postdec1	equ	0xFE5
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           fsr2h	equ	0xFDA
 10552                           fsr2l	equ	0xFD9
 10553                           status	equ	0xFD8
 10554                           
 10555 ;; *************** function _chkisr *****************
 10556 ;; Defined at:
 10557 ;;		line 316 in file "Lab9pC.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;		None               void
 10564 ;; Registers used:
 10565 ;;		wreg, status,2, status,0, cstack
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10574 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;Total ram usage:       14 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    1
 10578 ;; This function calls:
 10579 ;;		_INT0_ISR
 10580 ;;		_INT1_ISR
 10581 ;;		_INT2_ISR
 10582 ;; This function is called by:
 10583 ;;		Interrupt level 2
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           	psect	intcode
 10588  000008                     __pintcode:
 10589                           	opt stack 0
 10590  000008                     _chkisr:
 10591                           	opt stack 18
 10592                           
 10593                           ;incstack = 0
 10594  000008  CFFA F001          	movff	pclath,??_chkisr
 10595  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 10596  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 10597  000014  EDF8  F00E         	call	int_func,f	;refresh shadow registers
 10598                           pclatu	equ	0xFFB
 10599                           pclath	equ	0xFFA
 10600                           tblptru	equ	0xFF8
 10601                           tblptrh	equ	0xFF7
 10602                           tblptrl	equ	0xFF6
 10603                           tablat	equ	0xFF5
 10604                           prodh	equ	0xFF4
 10605                           prodl	equ	0xFF3
 10606                           intcon	equ	0xFF2
 10607                           intcon2	equ	0xFF1
 10608                           intcon3	equ	0xFF0
 10609                           postinc0	equ	0xFEE
 10610                           fsr0l	equ	0xFE9
 10611                           wreg	equ	0xFE8
 10612                           postdec1	equ	0xFE5
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           fsr2h	equ	0xFDA
 10617                           fsr2l	equ	0xFD9
 10618                           status	equ	0xFD8
 10619                           
 10620                           	psect	intcode_body
 10621  001DF0                     __pintcode_body:
 10622                           	opt stack 18
 10623  001DF0                     int_func:
 10624                           	opt stack 18
 10625  001DF0  0006               	pop		; remove dummy address from shadow register refresh
 10626  001DF2  CFEA F004          	movff	fsr0h,??_chkisr+3
 10627  001DF6  CFE1 F005          	movff	fsr1l,??_chkisr+4
 10628  001DFA  CFE2 F006          	movff	fsr1h,??_chkisr+5
 10629  001DFE  CFD9 F007          	movff	fsr2l,??_chkisr+6
 10630  001E02  CFDA F008          	movff	fsr2h,??_chkisr+7
 10631  001E06  CFF3 F009          	movff	prodl,??_chkisr+8
 10632  001E0A  CFF4 F00A          	movff	prodh,??_chkisr+9
 10633  001E0E  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 10634  001E12  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 10635  001E16  CFF8 F00D          	movff	tblptru,??_chkisr+12
 10636  001E1A  CFF5 F00E          	movff	tablat,??_chkisr+13
 10637                           
 10638                           ;Lab9pC.c: 318: if (INTCONbits.INT0IF == 1) INT0_ISR();
 10639  001E1E  A2F2               	btfss	intcon,1,c	;volatile
 10640  001E20  D003               	goto	i2l2676
 10641  001E22  EC1D  F013         	call	_INT0_ISR	;wreg free
 10642  001E26  D000               	goto	i2l2676
 10643  001E28                     i2l2676:
 10644                           
 10645                           ;Lab9pC.c: 320: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 10646  001E28  A0F0               	btfss	intcon3,0,c	;volatile
 10647  001E2A  D003               	goto	i2l2680
 10648  001E2C  EC12  F013         	call	_INT1_ISR	;wreg free
 10649  001E30  D000               	goto	i2l2680
 10650  001E32                     i2l2680:
 10651                           
 10652                           ;Lab9pC.c: 321: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 10653  001E32  A2F0               	btfss	intcon3,1,c	;volatile
 10654  001E34  D003               	goto	i2l401
 10655  001E36  EC6F  F013         	call	_INT2_ISR	;wreg free
 10656  001E3A  D000               	goto	i2l401
 10657  001E3C                     i2l401:
 10658  001E3C  C00E  FFF5         	movff	??_chkisr+13,tablat
 10659  001E40  C00D  FFF8         	movff	??_chkisr+12,tblptru
 10660  001E44  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 10661  001E48  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 10662  001E4C  C00A  FFF4         	movff	??_chkisr+9,prodh
 10663  001E50  C009  FFF3         	movff	??_chkisr+8,prodl
 10664  001E54  C008  FFDA         	movff	??_chkisr+7,fsr2h
 10665  001E58  C007  FFD9         	movff	??_chkisr+6,fsr2l
 10666  001E5C  C006  FFE2         	movff	??_chkisr+5,fsr1h
 10667  001E60  C005  FFE1         	movff	??_chkisr+4,fsr1l
 10668  001E64  C004  FFEA         	movff	??_chkisr+3,fsr0h
 10669  001E68  C003  FFE9         	movff	??_chkisr+2,fsr0l
 10670  001E6C  C002  FFFB         	movff	??_chkisr+1,pclatu
 10671  001E70  C001  FFFA         	movff	??_chkisr,pclath
 10672  001E74  0011               	retfie		f
 10673  001E76                     __end_of_chkisr:
 10674                           	opt stack 0
 10675                           pclatu	equ	0xFFB
 10676                           pclath	equ	0xFFA
 10677                           tblptru	equ	0xFF8
 10678                           tblptrh	equ	0xFF7
 10679                           tblptrl	equ	0xFF6
 10680                           tablat	equ	0xFF5
 10681                           prodh	equ	0xFF4
 10682                           prodl	equ	0xFF3
 10683                           intcon	equ	0xFF2
 10684                           intcon2	equ	0xFF1
 10685                           intcon3	equ	0xFF0
 10686                           postinc0	equ	0xFEE
 10687                           fsr0h	equ	0xFEA
 10688                           fsr0l	equ	0xFE9
 10689                           wreg	equ	0xFE8
 10690                           postdec1	equ	0xFE5
 10691                           fsr1h	equ	0xFE2
 10692                           fsr1l	equ	0xFE1
 10693                           indf2	equ	0xFDF
 10694                           postinc2	equ	0xFDE
 10695                           fsr2h	equ	0xFDA
 10696                           fsr2l	equ	0xFD9
 10697                           status	equ	0xFD8
 10698                           
 10699 ;; *************** function _INT2_ISR *****************
 10700 ;; Defined at:
 10701 ;;		line 310 in file "Lab9pC.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;		None               void
 10708 ;; Registers used:
 10709 ;;		wreg, status,2
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;Total ram usage:        0 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; This function calls:
 10722 ;;		Nothing
 10723 ;; This function is called by:
 10724 ;;		_chkisr
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text58
 10729  0026DE                     __ptext58:
 10730                           	opt stack 0
 10731  0026DE                     _INT2_ISR:
 10732                           	opt stack 18
 10733                           
 10734                           ;Lab9pC.c: 312: INTCON3bits.INT2IF=0;
 10735                           
 10736                           ;incstack = 0
 10737  0026DE  92F0               	bcf	intcon3,1,c	;volatile
 10738                           
 10739                           ;Lab9pC.c: 313: FLASHING_REQUEST = 1;
 10740  0026E0  0E01               	movlw	1
 10741  0026E2  6E4E               	movwf	_FLASHING_REQUEST,c
 10742  0026E4  0012               	return		;funcret
 10743  0026E6                     __end_of_INT2_ISR:
 10744                           	opt stack 0
 10745                           pclatu	equ	0xFFB
 10746                           pclath	equ	0xFFA
 10747                           tblptru	equ	0xFF8
 10748                           tblptrh	equ	0xFF7
 10749                           tblptrl	equ	0xFF6
 10750                           tablat	equ	0xFF5
 10751                           prodh	equ	0xFF4
 10752                           prodl	equ	0xFF3
 10753                           intcon	equ	0xFF2
 10754                           intcon2	equ	0xFF1
 10755                           intcon3	equ	0xFF0
 10756                           postinc0	equ	0xFEE
 10757                           fsr0h	equ	0xFEA
 10758                           fsr0l	equ	0xFE9
 10759                           wreg	equ	0xFE8
 10760                           postdec1	equ	0xFE5
 10761                           fsr1h	equ	0xFE2
 10762                           fsr1l	equ	0xFE1
 10763                           indf2	equ	0xFDF
 10764                           postinc2	equ	0xFDE
 10765                           fsr2h	equ	0xFDA
 10766                           fsr2l	equ	0xFD9
 10767                           status	equ	0xFD8
 10768                           
 10769 ;; *************** function _INT1_ISR *****************
 10770 ;; Defined at:
 10771 ;;		line 300 in file "Lab9pC.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;		None
 10774 ;; Auto vars:     Size  Location     Type
 10775 ;;		None
 10776 ;; Return value:  Size  Location     Type
 10777 ;;		None               void
 10778 ;; Registers used:
 10779 ;;		wreg, status,2, status,0
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;Total ram usage:        0 bytes
 10790 ;; Hardware stack levels used:    1
 10791 ;; This function calls:
 10792 ;;		Nothing
 10793 ;; This function is called by:
 10794 ;;		_chkisr
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           	psect	text59
 10799  002624                     __ptext59:
 10800                           	opt stack 0
 10801  002624                     _INT1_ISR:
 10802                           	opt stack 18
 10803                           
 10804                           ;Lab9pC.c: 302: INTCON3bits.INT1IF=0;
 10805                           
 10806                           ;incstack = 0
 10807  002624  90F0               	bcf	intcon3,0,c	;volatile
 10808                           
 10809                           ;Lab9pC.c: 303: if(MODE == 1)
 10810  002626  0445               	decf	_MODE,w,c
 10811  002628  1046               	iorwf	_MODE+1,w,c
 10812  00262A  A4D8               	btfss	status,2,c
 10813  00262C  D002               	goto	i2l2302
 10814                           
 10815                           ;Lab9pC.c: 304: {
 10816                           ;Lab9pC.c: 305: EW_PED_SW = 1;
 10817  00262E  0E01               	movlw	1
 10818  002630  D001               	goto	L17
 10819  002632                     i2l2302:
 10820                           
 10821                           ;Lab9pC.c: 307: else EW_PED_SW = 0;
 10822  002632  0E00               	movlw	0
 10823  002634                     L17:
 10824  002634  6E4C               	movwf	_EW_PED_SW,c
 10825  002636  D000               	goto	i2l392
 10826  002638                     i2l392:
 10827  002638  0012               	return		;funcret
 10828  00263A                     __end_of_INT1_ISR:
 10829                           	opt stack 0
 10830                           pclatu	equ	0xFFB
 10831                           pclath	equ	0xFFA
 10832                           tblptru	equ	0xFF8
 10833                           tblptrh	equ	0xFF7
 10834                           tblptrl	equ	0xFF6
 10835                           tablat	equ	0xFF5
 10836                           prodh	equ	0xFF4
 10837                           prodl	equ	0xFF3
 10838                           intcon	equ	0xFF2
 10839                           intcon2	equ	0xFF1
 10840                           intcon3	equ	0xFF0
 10841                           postinc0	equ	0xFEE
 10842                           fsr0h	equ	0xFEA
 10843                           fsr0l	equ	0xFE9
 10844                           wreg	equ	0xFE8
 10845                           postdec1	equ	0xFE5
 10846                           fsr1h	equ	0xFE2
 10847                           fsr1l	equ	0xFE1
 10848                           indf2	equ	0xFDF
 10849                           postinc2	equ	0xFDE
 10850                           fsr2h	equ	0xFDA
 10851                           fsr2l	equ	0xFD9
 10852                           status	equ	0xFD8
 10853                           
 10854 ;; *************** function _INT0_ISR *****************
 10855 ;; Defined at:
 10856 ;;		line 290 in file "Lab9pC.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;		None
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;		None
 10861 ;; Return value:  Size  Location     Type
 10862 ;;		None               void
 10863 ;; Registers used:
 10864 ;;		wreg, status,2, status,0
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;Total ram usage:        0 bytes
 10875 ;; Hardware stack levels used:    1
 10876 ;; This function calls:
 10877 ;;		Nothing
 10878 ;; This function is called by:
 10879 ;;		_chkisr
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           	psect	text60
 10884  00263A                     __ptext60:
 10885                           	opt stack 0
 10886  00263A                     _INT0_ISR:
 10887                           	opt stack 18
 10888                           
 10889                           ;Lab9pC.c: 292: INTCONbits.INT0IF=0;
 10890                           
 10891                           ;incstack = 0
 10892  00263A  92F2               	bcf	intcon,1,c	;volatile
 10893                           
 10894                           ;Lab9pC.c: 293: if(MODE == 1)
 10895  00263C  0445               	decf	_MODE,w,c
 10896  00263E  1046               	iorwf	_MODE+1,w,c
 10897  002640  A4D8               	btfss	status,2,c
 10898  002642  D002               	goto	i2l2294
 10899                           
 10900                           ;Lab9pC.c: 294: {
 10901                           ;Lab9pC.c: 295: NS_PED_SW = 1;
 10902  002644  0E01               	movlw	1
 10903  002646  D001               	goto	L18
 10904  002648                     i2l2294:
 10905                           
 10906                           ;Lab9pC.c: 297: else NS_PED_SW = 0;
 10907  002648  0E00               	movlw	0
 10908  00264A                     L18:
 10909  00264A  6E4F               	movwf	_NS_PED_SW,c
 10910  00264C  D000               	goto	i2l387
 10911  00264E                     i2l387:
 10912  00264E  0012               	return		;funcret
 10913  002650                     __end_of_INT0_ISR:
 10914                           	opt stack 0
 10915                           pclatu	equ	0xFFB
 10916                           pclath	equ	0xFFA
 10917                           tblptru	equ	0xFF8
 10918                           tblptrh	equ	0xFF7
 10919                           tblptrl	equ	0xFF6
 10920                           tablat	equ	0xFF5
 10921                           prodh	equ	0xFF4
 10922                           prodl	equ	0xFF3
 10923                           intcon	equ	0xFF2
 10924                           intcon2	equ	0xFF1
 10925                           intcon3	equ	0xFF0
 10926                           postinc0	equ	0xFEE
 10927                           fsr0h	equ	0xFEA
 10928                           fsr0l	equ	0xFE9
 10929                           wreg	equ	0xFE8
 10930                           postdec1	equ	0xFE5
 10931                           fsr1h	equ	0xFE2
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           fsr2h	equ	0xFDA
 10936                           fsr2l	equ	0xFD9
 10937                           status	equ	0xFD8
 10938                           pclatu	equ	0xFFB
 10939                           pclath	equ	0xFFA
 10940                           tblptru	equ	0xFF8
 10941                           tblptrh	equ	0xFF7
 10942                           tblptrl	equ	0xFF6
 10943                           tablat	equ	0xFF5
 10944                           prodh	equ	0xFF4
 10945                           prodl	equ	0xFF3
 10946                           intcon	equ	0xFF2
 10947                           intcon2	equ	0xFF1
 10948                           intcon3	equ	0xFF0
 10949                           postinc0	equ	0xFEE
 10950                           fsr0h	equ	0xFEA
 10951                           fsr0l	equ	0xFE9
 10952                           wreg	equ	0xFE8
 10953                           postdec1	equ	0xFE5
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           fsr2h	equ	0xFDA
 10959                           fsr2l	equ	0xFD9
 10960                           status	equ	0xFD8
 10961                           
 10962                           	psect	rparam
 10963  0000                     pclatu	equ	0xFFB
 10964                           pclath	equ	0xFFA
 10965                           tblptru	equ	0xFF8
 10966                           tblptrh	equ	0xFF7
 10967                           tblptrl	equ	0xFF6
 10968                           tablat	equ	0xFF5
 10969                           prodh	equ	0xFF4
 10970                           prodl	equ	0xFF3
 10971                           intcon	equ	0xFF2
 10972                           intcon2	equ	0xFF1
 10973                           intcon3	equ	0xFF0
 10974                           postinc0	equ	0xFEE
 10975                           fsr0h	equ	0xFEA
 10976                           fsr0l	equ	0xFE9
 10977                           wreg	equ	0xFE8
 10978                           postdec1	equ	0xFE5
 10979                           fsr1h	equ	0xFE2
 10980                           fsr1l	equ	0xFE1
 10981                           indf2	equ	0xFDF
 10982                           postinc2	equ	0xFDE
 10983                           fsr2h	equ	0xFDA
 10984                           fsr2l	equ	0xFD9
 10985                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    475
    Data        35
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     113
    BANK0           128     15      58
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[21]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[7]), 
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), STR_5(CODE[2]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Initialize_Screen->_drawtext
    _Initialize_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _init_UART->_OpenUSART
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Wait_One_Second->_drawtext
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_drawtext
    _update_LCD_misc->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  702097
                                             13 BANK0      2     2      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  189048
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   67208
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     375
                           _Init_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          1     1      0  160127
                                             10 BANK0      1     1      0
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  278627
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   89480
                                             10 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28828
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   60522
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              2 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     1     0      1
                                              0 BANK0      2     2      0
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   89579
                                             10 BANK0      3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28704
                                             64 COMRAM     1     0      1
                                              7 BANK0      1     1      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1213
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1225
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   60522
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   32352
                                              7 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25981
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10774
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     882
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2718
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2211
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1948
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2189
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Wait_Half_Second
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___wmul
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Do_Init
     _Init_ADC
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      3A       5       45.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB      34        0.0%
DATA                 0      0      AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 07 16:36:42 2022

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 1C56                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 00A0                                 l205 115A  
                               l214 10B0                                 l207 1034  
                               l129 21C0                                 l242 175C  
                               l139 2672                                 l243 16C8  
                               l253 0D90                                 l245 1738  
                               l430 25BE                                 l246 175A  
                               l183 2520                                 l271 11CA  
                               l520 0AA0                                 l505 25EE  
                               l434 230E                                 l427 259E  
                               l443 22C6                                 l452 239E  
                               l436 2312                                 l189 1DEE  
                               l461 2356                                 l437 2318  
                               l445 22CA                                 l454 23A2  
                               l438 231C                                 l446 22D0  
                               l455 23A8                                 l463 235A  
                               l439 2340                                 l447 22D4  
                               l287 1D66                                 l536 18FE  
                               l456 23AC                                 l464 2360  
                               l448 22F8                                 l553 0CCC  
                               l481 2174                                 l457 23D0  
                               l465 2364                                 l529 1004  
                               l466 2388                                 l581 1FC0  
                               l493 1B28                                 l486 17F2  
                               l582 1FC2                                 l807 2488  
                               l583 1FCC                                 l488 182E  
                               l584 1FCE                                 l577 1FA6  
                               l586 1FE8                                 l908 199C  
                               l589 2572                                 l782 1BBE  
                               l795 1F78                                 l972 164C  
                               l897 19C4                                 l969 1680  
                               l978 1C54                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 00A6                                 _PR2 000FCB  
                 _Deactivate_Buzzer 26D6                                 _dir 0058  
                               _nbr 0047                                 _txt 0049  
                    drawFastHLine@w 0017                      drawFastHLine@x 0020  
                    drawFastHLine@y 0016                        ___awmod@sign 0014  
           __end_of_update_LCD_misc 0CCE                                 wreg 000FE8  
                ??_Wait_Half_Second 000F                  ?_Deactivate_Buzzer 0001  
                   ??_fillRectangle 001B                        __CFG_LVP$OFF 000000  
           _TFT_GreenTab_Initialize 2522                        ___ftdiv@cntr 0024  
                      ___ftdiv@sign 0029                        __CFG_WDT$OFF 000000  
                    drawFastVLine@h 0017                                l1146 244C  
                    drawFastVLine@x 0020                      drawFastVLine@y 0016  
                              l4212 1D78                                l5100 2144  
                              l5012 0F32                                l5004 0E82  
                              l4310 241A                                l5102 2156  
                              l5022 0FE6                                l4216 1DB0  
                              l4304 1156                                l4312 2420  
                              l5104 215C                                l4400 11B0  
                              l5016 0F8C                                l5008 0EDA  
                              l5112 2492                                l4330 194C  
                              l4322 1910                                l4234 2502  
                              l4226 1DD6                                l4242 2272  
                              l5122 24B4                                l4228 1DE4  
                              l5108 2162                                l4420 127E  
                              l5116 24A0                                l4350 19B6  
                              l4334 1964                                l4326 1920  
                              l4502 1C50                                l4246 228E  
                              l4262 1022                                l5062 2322  
                              l5070 22DA                                l4344 19A4  
                              l4336 1984                                l4328 192C  
                              l4280 10A8                                l4272 1040  
                              l4416 122C                                l4338 1990  
                              l4442 15E6                                l4290 10FA  
                              l4266 1030                                l4258 1016  
                              l4362 13D0                                l4610 0B50  
                              l5090 2120                                l5306 1798  
                              l4436 15BE                                l4276 1070  
                              l4268 1038                                l5324 17DA  
                              l4462 1626                                l4438 15D8  
                              l4278 10A4                                l4374 1420  
                              l4622 0B7A                                l4614 0B5E  
                              l5094 212E                                l5078 23B2  
                              l5086 236A                                l4472 165A  
                              l4296 1126                                l4288 10D2  
                              l4720 1F52                                l4712 1F2A  
                              l4704 1F0E                                l5272 20D0  
                              l4298 114E                                l4386 1490  
                              l4378 143E                                l4650 0CC6  
                              l4626 0B88                                l4618 0B6C  
                              l4714 1F34                                l4538 0D76  
                              l4572 24CA                                l4484 2464  
                              l4492 1BF2                                l4388 1498  
                              l4628 0B8E                                l4660 1B40  
                              l4716 1F3C                                l4724 1F5E  
                              l4708 1F1C                                l5268 20BE  
                              l4900 1F9E                                l4574 24D4  
                              l4646 0CB8                                l4566 0E66  
                              l5286 210A                                l5374 1AE6  
                              l4496 1C24                                l4672 1B68  
                              l4728 1F6E                                l4912 1FB8  
                              l4904 1FAA                                l5640 1A5A  
                              l4674 1B72                                l4666 1B52  
                              l4850 173C                                l4834 1700  
                              l4692 1BB4                                l4684 1B98  
                              l4676 1B7A                                l4860 1756  
                              l4828 1692                                l5644 1A66  
                              l4854 1746                                l4846 172E  
                              l5646 1A6C                                l4688 1BA4  
                              l4872 1D28                                l4962 08F4  
                              l4882 1D4E                                l4972 1836  
                              l4892 1F8C                                l4884 1D5C  
                              l4868 1CF0                                l4982 18EC  
                              l4966 09CA                                l4958 0820  
                              l4976 1892                                l4896 1F96  
                              STR_1 FF96                                STR_2 FFE5  
                              STR_3 FFEB                                STR_4 FFEF  
                              STR_5 FFFD                                STR_6 FFC1  
                              STR_7 FFD7                                STR_8 FFCD  
                              STR_9 FFDE                                u3020 13FA  
                              u3121 15B0                                u3141 15CE  
                              u3260 0B2A                                u3500 16F6  
                              u3270 0B2C                                u2730 1DA6  
                              u3570 1D1E                                u3490 16C0  
                              u2880 1108                                _MODE 0045  
                              u3980 1A54                                u3990 1A56  
                              _RBPU 007F8F                                _TRMT 007D61  
               ??_Deactivate_Buzzer 000F                                _main 19C6  
                              _font FDBB                        ___ftpack@arg 000F  
                      ___ftpack@exp 0012                                fsr0h 000FEA  
                              fsr1h 000FE2                      ??_get_full_ADC 0011  
                              fsr0l 000FE9                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 005B  
                              _volt 0042                     drawFastHLine@hi 001E  
                   drawFastHLine@lo 001F            __end_of_update_LCD_color 0AA2  
                              pclat 000FFA            __end_of_update_LCD_count 1006  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0018  
                   __end_of_Do_Init 259A                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___param_bank 000010  
                      _Act_Mode_Txt 0062                    __end_of_INT0_ISR 2650  
                  __end_of_INT1_ISR 263A                    __end_of_INT2_ISR 26E6  
                       _Do_Flashing 20B2           __end_of_Deactivate_Buzzer 26DE  
                   drawFastVLine@hi 001E                     drawFastVLine@lo 001F  
                       _SW_EWLT_Txt 0068                         _SW_MODE_Txt 006C  
                             ?_main 0001                     __end_of___awdiv 1BC0  
                   drawCircle@ddF_x 0024                               STR_10 FFF3  
                   drawCircle@ddF_y 0026                               STR_11 FFF7  
                             STR_12 FFAC                               STR_13 FFFD  
                             STR_14 FFFB                               STR_15 FFFD  
                             STR_16 FFFB                     __end_of___awmod 1F7A  
                   __end_of___ftdiv 1682                               _T0CON 000FD5  
                   ___awdiv@divisor 0011                               _T2CON 000FCA  
                             _T3CON 000FB1                               i2l401 1E3C  
                             i2l392 2638                               i2l387 264E  
                   ___awdiv@counter 0013                     drawCircle@color 0020  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 004B  
                      ?_PED_Control 00A9                               _Rcmd1 1294  
                             _Rcmd3 14AE                         _SW_NSLT_Txt 006E  
                     drawRect@color 0029                       ___awtoft@sign 001A  
                   __end_of_init_IO 2624                               _font2 FEBA  
             fillCircleHelper@ddF_x 002F               fillCircleHelper@ddF_y 0031  
                 ??_Wait_One_Second 0041                       ___ftpack@sign 0013  
             fillCircleHelper@delta 0029               fillCircleHelper@color 002B  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 0042  
                  __end_of_Day_Mode 1830                      _Wait_N_Seconds 248A  
                   write_data@data_ 0011                     __initialization 2050  
                      __end_of_main 1A7C                        __end_of_font FEBA  
                  __end_of_Init_ADC 26CA                    __end_of_Rcmd2red 2410  
                        _Night_Mode 1A7C                              ??_main 0042  
                     __activetblptr 000002               Wait_N_Seconds@seconds 00A9  
                 __end_of_LCD_Reset 268A                        _SW_EWPED_Txt 006A  
         ??_TFT_GreenTab_Initialize 001B                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              _ADRESH 000FC4  
                            _ADRESL 000FC3                              _CCPR2L 000FBB  
              PED_Control@direction 00AA                    ___awdiv@dividend 000F  
                  __end_of___awtoft 248A                    __end_of___ftpack 19C6  
                            i2l2302 2632                              i2l2294 2648  
                            i2l2680 1E32                           ??_Do_Init 0012  
                            i2l2676 1E28                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds 24C0                        _SW_NSPED_Txt 0070  
                  __end_of_delay_ms 21C8                              _Set_EW 238A  
                            _Set_NS 22FA                    __end_of_fillRect 22B2  
                  __end_of_drawChar 115C                    __end_of_drawRect 2050  
                __size_of_Set_EW_LT 0048                  __size_of_OpenUSART 0070  
                            ___ftge 1BC0                  __size_of_Set_NS_LT 0048  
          __size_of_Activate_Buzzer 0012                              ___wmul 254C  
                         ??___awdiv 0013           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 14AE                           ??___awmod 0013  
                         ??___ftdiv 0021                              _chkisr 0008  
                            _buffer 0080                              clear_0 2056  
                            clear_1 2062                    ___awdiv@quotient 0015  
                   ___awmod@divisor 0011          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0013                        drawtext@size 003E  
                            _strcpy 24C0                              _strlen 2410  
              __end_of_get_full_ADC 25C0                           ??_init_IO 000F  
                      __pdataCOMRAM 005B  __size_of_Wait_One_Second_With_Beep 008A  
                       Set_EW@color 00A1                        __mediumconst FDBA  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                    __end_of_spiwrite 2678  
                       Set_NS@color 00A1                          __accesstop 0080  
           __end_of__initialization 20A8                           ?_INT0_ISR 0001  
                         ?_INT1_ISR 0001                           ?_INT2_ISR 0001  
                        ___ftge@ff1 000F                          ___ftge@ff2 0012  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 001B                          ___ftdiv@f2 001E  
                        ___ftdiv@f3 0025                          ___awtoft@c 0017  
                     __end_of_Rcmd1 13A4                       __end_of_Rcmd3 15A0  
                    __pcstackCOMRAM 0001                        __pidataBANK0 26CA  
                     __end_of_font2 FF96                         ?_Night_Mode 0001  
                    drawPixel@color 0017              __size_of_write_command 0010  
               Do_Flashing@FLASHING 00A9                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT 238A                   __end_of_OpenUSART 1FEA  
                 __end_of_Set_NS_LT 22FA                __size_of_PED_Control 0062  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                   ?_update_LCD_color 0041  
                 ?_update_LCD_count 0041                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0042                  ??_update_LCD_count 0042  
                           ?___ftge 000F                             ?___wmul 000F  
                           ?_chkisr 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 0001  
         update_LCD_PED_Count@count 0041                           ?___awtoft 0017  
                         ?___ftpack 000F                     _Wait_One_Second 1E76  
                        _fillCircle 21C8                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 25C0                          _drawCircle 0CCE  
                        ??_Day_Mode 0042                           ?_delay_ms 0015  
                         ?_fillRect 0021           update_LCD_count@direction 00A6  
                         ?_drawChar 002C                             _SSPCON1 000FC6  
                         ?_drawRect 0021                             _SSPSTAT 000FC7  
             __end_of_fillRectangle 175E                           ?_drawtext 0037  
                           _SW_EWLT 0051                             _SW_MODE 0053  
                        ??_Init_ADC 000F                             _Do_Init 2574  
                           _SW_NSLT 0054                          ??_Rcmd2red 0012  
               __size_of_Night_Mode 00AE                       _write_command 26AC  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0048                     __size_of_Set_NS 0048  
             __end_of_drawFastHLine 1D68                   __end_of_drawPixel 2522  
             __end_of_drawFastVLine 1DF0                    _fillCircleHelper 115C  
                   __size_of___ftge 0096                             ___awdiv 1B2A  
                           ___awmod 1EF8                             ___ftdiv 15A0  
                   __size_of___wmul 0028               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 1E6E                           ?_spiwrite 0001  
                           __pcinit 2050                          ??___awtoft 001A  
                        ??___ftpack 0014                             __ramtop 1000  
                           __ptext0 19C6                             __ptext1 260E  
                           __ptext2 1A7C                             __ptext3 001C  
                           __ptext4 25C0                             __ptext5 1682  
                           __ptext6 1FEA                             __ptext7 1CE0  
                           __ptext8 2522                             __ptext9 14AE  
                 __end_of_init_UART 2664                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO 260E                           _T3CONbits 000FB1  
                  ___awmod@dividend 000F                          ??_delay_ms 0017  
                     drawtext@_text 0038                       drawtext@color 003A  
                        ??_fillRect 0026                          ??_drawChar 0033  
                         _LCD_Reset 2678                          ??_drawRect 002B  
                     _setAddrWindow 221A                      __pintcode_body 1DF0  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 20A8                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FDBA  
                           int_func 1DF0                           _PED_Count 0050  
                      _get_full_ADC 259A                        PED_Control@i 00AB  
                         _EW_PED_SW 004C       __size_of_update_LCD_PED_Count 00D0  
           __end_of_Wait_One_Second 1EF8                           _RCSTAbits 000FAB  
                           postdec1 000FE5                             postinc0 000FEE  
                           postinc2 000FDE                          ??_spiwrite 000F  
                           strlen@s 000F                     fillCircle@color 003F  
                       ?_fillCircle 0039                           _PORTAbits 000F80  
                  drawtext@cursor_x 00A5                    drawtext@cursor_y 00A4  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0022                           _NS_PED_SW 004F  
                       ?_drawCircle 001A                          drawChar@bg 0030  
                         _TRISCbits 000F94                      ?_setAddrWindow 0012  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 0042  
                  drawtext@textsize 00A0            __size_of_update_LCD_misc 022C  
                        drawPixel@x 0019                          drawPixel@y 0016  
                  _Wait_Half_Second 25DC                         ___ftdiv@exp 0028  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 00A9  
                get_full_ADC@result 0013                   __size_of_INT0_ISR 0016  
                 __size_of_INT1_ISR 0016                   __size_of_INT2_ISR 0008  
                    __end_of_Set_EW 23D2                      __end_of_Set_NS 2342  
                    __end_of___ftge 1C56                      __end_of___wmul 2574  
                     delay_ms@count 0019                          _write_data 269C  
                     __pidataCOMRAM 25F6                      __end_of_chkisr 1E76  
                      ??_Night_Mode 0042            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 003C                __size_of_Do_Flashing 0062  
                    __end_of_strcpy 24F2                      __end_of_strlen 244E  
               start_initialization 2050                   __size_of_Day_Mode 00D2  
                   ??_write_command 0011                           _Set_EW_LT 2342  
                         _OpenUSART 1F7A                           _Set_NS_LT 22B2  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode 1B2A  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 00AA                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0042                            ??_Set_NS 0042  
                   _Activate_Buzzer 268A                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0013  
                          ??_chkisr 0001                         __pdataBANK0 00AE  
                 update_LCD_misc@ch 00A8                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00B4  
         __size_of_update_LCD_color 0368           __size_of_update_LCD_count 018A  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0042                       ??_PED_Control 0042  
                   ??_setAddrWindow 0015                       __pcstackBANK0 009F  
                      _PED_NS_Count 00B7                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1294                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                            ?_Do_Init 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_Set_EW_LT 0001                          ?_OpenUSART 000F  
                 __size_of_drawRect 0066                          ?_Set_NS_LT 0001  
                 __size_of_drawtext 010A                   ??_update_LCD_misc 0041  
                         __pintcode 0008     __end_of_TFT_GreenTab_Initialize 254C  
                     __pmediumconst FDBA                            ?___awdiv 000F  
                          ?___awmod 000F                            ?___ftdiv 001B  
                         __tft_type 0056                           _direction 0059  
                drawFastVLine@color 0018                         ?_write_data 0001  
                         _drawPixel 24F2                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen 001C  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART 2650                  ?_Initialize_Screen 0001  
                          _FLASHING 004D   __end_of_Wait_One_Second_With_Beep 1CE0  
               __end_of_PED_Control 2176             __end_of_Activate_Buzzer 269C  
                          _INT0_ISR 263A                            _INT1_ISR 2624  
                          _INT2_ISR 26DE                      ___wmul@product 0013  
               ??_Initialize_Screen 0041                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 00B1                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                         drawChar@c 002D                           drawChar@i 0036  
                         drawChar@j 0035                        ??_fillCircle 0041  
                         drawChar@x 0034                           drawChar@y 002C  
                        ?_drawPixel 0016              __size_of_fillRectangle 00DC  
                          _NS_Count 005F                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second 25F6                   ___wmul@multiplier 000F  
         __end_of_Initialize_Screen 073A                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 0064                       _FlashingS_Txt 0066  
                      ??_drawCircle 0022        __end_of_update_LCD_PED_Count 1900  
                         main@nStep 00AC                            _SW_EWPED 0052  
             update_LCD_color@color 0041                            _Day_Mode 175E  
                          _SW_NSPED 0055           update_LCD_color@direction 009F  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1                         _INTCON3bits 000FF0  
                         copy_data0 207C                           copy_data1 209C  
                         drawtext@i 00A2              __size_of_drawFastVLine 0088  
                         drawtext@x 009F                           drawtext@y 0037  
                          _Init_ADC 26BC                   write_command@cmd_ 0011  
                       ??_Set_EW_LT 0042                         ??_OpenUSART 0011  
                       ??_Set_NS_LT 0042                            _Rcmd2red 23D2  
                  __size_of_Do_Init 0026                 __size_of_write_data 0010  
                   OpenUSART@config 0011                  __end_of_fillCircle 221A  
                          __Hrparam 0000                  __end_of_fillScreen 25DC  
             update_LCD_count@count 0041                            __Lrparam 0000  
                __end_of_drawCircle 0E7C                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                          ___awtoft 244E                            ___ftpack 1900  
                  _update_LCD_color 073A                    _update_LCD_count 0E7C  
                  __size_of_init_IO 0016                         _PED_Control 2114  
                          _delay_ms 2176                            __ptext10 23D2  
                          __ptext11 1294                            __ptext20 248A  
                          __ptext12 2678                            __ptext21 0E7C  
                          __ptext13 2176                            __ptext30 0CCE  
                          __ptext22 1E76                            __ptext14 2574  
                          __ptext31 2114                            __ptext23 22B2  
                          __ptext15 2650                            __ptext40 1006  
                          __ptext32 1830                            __ptext24 22FA  
                          __ptext16 1F7A                            __ptext41 2268  
                          __ptext33 1EF8                            __ptext25 2342  
                          __ptext17 26BC                            __ptext50 15A0  
                          __ptext42 1D68                            __ptext34 1B2A  
                          __ptext26 238A                            __ptext18 20B2  
                          __ptext51 244E                            __ptext43 24F2  
                          __ptext35 1C56                            __ptext27 073A  
                          __ptext19 175E                            __ptext60 263A  
                          __ptext52 1900                            __ptext44 221A  
                          __ptext36 0AA2                            __ptext28 21C8  
                          __ptext53 24C0                            __ptext45 269C  
                          __ptext37 259A                            __ptext29 115C  
                          __ptext54 25DC                            __ptext46 26AC  
                          __ptext38 13A4                            __ptext55 26D6  
                          __ptext47 2664                            __ptext39 2410  
                          __ptext56 268A                            __ptext48 254C  
                          __ptext49 1BC0                            __ptext58 26DE  
                          __ptext59 2624                            _fillRect 2268  
                          _drawChar 1006                            _drawRect 1FEA  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 004E  
                          _colstart 0057                            _drawtext 13A4  
                        strcpy@from 0011                       _fillRectangle 1682  
                  ?_Activate_Buzzer 0001                       __size_of_main 00B6  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 1CE0                      Set_EW_LT@color 00A1  
                     _drawFastVLine 1D68                       ??_Do_Flashing 0042  
                          _spiwrite 2664                         ??_drawPixel 0019  
                          _rowstart 005A                  fillCircleHelper@x0 0021  
                fillCircleHelper@y0 0023          __size_of_Initialize_Screen 071E  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 000F  
                       ??_init_UART 0012                          _EWLT_Count 00AE  
                 ?_fillCircleHelper 0021                           spiwrite@x 000F  
       ??_Wait_One_Second_With_Beep 0041                            intlevel2 0000  
                   _update_LCD_misc 0AA2                      ?_fillRectangle 0016  
                ??_fillCircleHelper 002D               __end_of_write_command 26BC  
                   fillScreen@color 0022                update_LCD_misc@nStep 00A6  
              _update_LCD_PED_Count 1830             __size_of_Wait_N_Seconds 0036  
                      fillCircle@x0 0039                        fillCircle@y0 003B  
                    ?_drawFastHLine 0016                      fillRectangle@h 0018  
                    fillRectangle@w 0017                      fillRectangle@x 0021  
                    fillRectangle@y 0016                      ?_drawFastVLine 0016  
                 fillCircleHelper@f 0033                   fillCircleHelper@r 0025  
                 fillCircleHelper@x 0035                   fillCircleHelper@y 0037  
                      ??_write_data 0011                       fillRect@color 0024  
          __size_of_Wait_One_Second 0082                            strcpy@cp 0013  
                          strlen@cp 0013                            strcpy@to 000F  
               __end_of_Do_Flashing 2114                          _NSLT_Count 005C  
                       fillCircle@r 003D               __end_of_setAddrWindow 2268  
                fillRectangle@color 0019                       drawChar@color 002E  
                __end_of_write_data 26AC                        drawChar@line 0033  
                    Set_NS_LT@color 00A1                       ?_get_full_ADC 000F  
                      drawChar@size 0032               ?_update_LCD_PED_Count 0041  
