
# 1 "../Lab9pB.X/ST7735_TFT.c"


void drawRoundRect(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned char r, unsigned int color);
void fillRoundRect(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned char r, unsigned int color);
void drawTriangle(signed int x0, signed int y0, signed int x1, signed int y1, signed int x2, signed int y2, unsigned int color);
void fillTriangle(signed int x0, signed int y0, signed int x1, signed int y1, signed int x2, signed int y2, unsigned int color);
void setTextWrap(BOOL w);
void invertDisplay(BOOL i);
void NormalDisplay();
int Color565(int r, int g, int b);
void spiwrite(unsigned char spidata);
void write_command(unsigned char cmd_);
void write_data(unsigned char data_);
void Rcmd1();
void Rcmd2red();
void Rcmd2green();
void Rcmd3();
void setScrollDefinition(unsigned char top_fix_height, unsigned char bottom_fix_height, BOOL _scroll_direction);
void setAddrWindow(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1);
void drawPixel(unsigned char x, unsigned char y, unsigned int color);
void drawFastVLine(unsigned char x, unsigned char y, unsigned char h, unsigned int color);
void fillRect(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned int color);
void drawtext(unsigned char x, unsigned char y, char *_text, unsigned int color, unsigned int bg, unsigned char size);
void drawChar(unsigned char x, unsigned char y, unsigned char c, unsigned int color, unsigned int bg, unsigned char size);
void fillRectangle(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned int color);
void drawCircle(signed int x0, signed int y0, signed int r, unsigned int color);
void drawCircleHelper(signed int x0, signed int y0, signed int r, unsigned int cornername, unsigned int color);
void fillCircle(signed int x0, signed int y0, signed int r, unsigned int color);
void fillCircleHelper(signed int x0, signed int y0, signed int r, unsigned int cornername, signed int delta, unsigned int color);
void fillScreen(unsigned int color) ;
void drawFastHLine(unsigned char x, unsigned char y, unsigned char w, unsigned int color);
void VerticalScroll(unsigned char _vsp);
void TFT_BlackTab_Initialize();
void TFT_GreenTab_Initialize();
void TFT_RedTab_Initialize(void);
void TFT_ST7735B_Initialize(void);
void LCD_Reset(void);
void drawRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h, unsigned int color);

BOOL wrap = TRUE;

# 4 "D:\Program Files (x86)\Microchip\xc8\v1.34\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 42
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 43 "../Lab9pB.X/ST7735_TFT.c"
unsigned char colstart = 0, rowstart = 0, _tft_type;

# 97
void delay_ms(int ms)
{




int count;
count = _XTAL_FREQ/4000/8 * ms;
count = (0xffff - count);

T3CON = 0xb8;

TMR0L = count & 0x00ff;
TMR0H = count >> 8;

PIR2bits.TMR3IF = 0;
T3CONbits.TMR3ON = 1;

while (PIR2bits.TMR3IF == 0);
T3CONbits.TMR3ON = 0;
}

const char font[] =
{
0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x5F, 0x00, 0x00,
0x00, 0x07, 0x00, 0x07, 0x00,
0x14, 0x7F, 0x14, 0x7F, 0x14,
0x24, 0x2A, 0x7F, 0x2A, 0x12,
0x23, 0x13, 0x08, 0x64, 0x62,
0x36, 0x49, 0x56, 0x20, 0x50,
0x00, 0x08, 0x07, 0x03, 0x00,
0x00, 0x1C, 0x22, 0x41, 0x00,
0x00, 0x41, 0x22, 0x1C, 0x00,
0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
0x08, 0x08, 0x3E, 0x08, 0x08,
0x00, 0x80, 0x70, 0x30, 0x00,
0x08, 0x08, 0x08, 0x08, 0x08,
0x00, 0x00, 0x60, 0x60, 0x00,
0x20, 0x10, 0x08, 0x04, 0x02,
0x3E, 0x51, 0x49, 0x45, 0x3E,
0x00, 0x42, 0x7F, 0x40, 0x00,
0x72, 0x49, 0x49, 0x49, 0x46,
0x21, 0x41, 0x49, 0x4D, 0x33,
0x18, 0x14, 0x12, 0x7F, 0x10,
0x27, 0x45, 0x45, 0x45, 0x39,
0x3C, 0x4A, 0x49, 0x49, 0x31,
0x41, 0x21, 0x11, 0x09, 0x07,
0x36, 0x49, 0x49, 0x49, 0x36,
0x46, 0x49, 0x49, 0x29, 0x1E,
0x00, 0x00, 0x14, 0x00, 0x00,
0x00, 0x40, 0x34, 0x00, 0x00,
0x00, 0x08, 0x14, 0x22, 0x41,
0x14, 0x14, 0x14, 0x14, 0x14,
0x00, 0x41, 0x22, 0x14, 0x08,
0x02, 0x01, 0x59, 0x09, 0x06,
0x3E, 0x41, 0x5D, 0x59, 0x4E,
0x7C, 0x12, 0x11, 0x12, 0x7C,
0x7F, 0x49, 0x49, 0x49, 0x36,
0x3E, 0x41, 0x41, 0x41, 0x22,
0x7F, 0x41, 0x41, 0x41, 0x3E,
0x7F, 0x49, 0x49, 0x49, 0x41,
0x7F, 0x09, 0x09, 0x09, 0x01,
0x3E, 0x41, 0x41, 0x51, 0x73,
0x7F, 0x08, 0x08, 0x08, 0x7F,
0x00, 0x41, 0x7F, 0x41, 0x00,
0x20, 0x40, 0x41, 0x3F, 0x01,
0x7F, 0x08, 0x14, 0x22, 0x41,
0x7F, 0x40, 0x40, 0x40, 0x40,
0x7F, 0x02, 0x1C, 0x02, 0x7F,
0x7F, 0x04, 0x08, 0x10, 0x7F,
0x3E, 0x41, 0x41, 0x41, 0x3E,
0x7F, 0x09, 0x09, 0x09, 0x06,
0x3E, 0x41, 0x51, 0x21, 0x5E,
0x7F, 0x09, 0x19, 0x29, 0x46
};

const char font2[] =
{
0x26, 0x49, 0x49, 0x49, 0x32,
0x03, 0x01, 0x7F, 0x01, 0x03,
0x3F, 0x40, 0x40, 0x40, 0x3F,
0x1F, 0x20, 0x40, 0x20, 0x1F,
0x3F, 0x40, 0x38, 0x40, 0x3F,
0x63, 0x14, 0x08, 0x14, 0x63,
0x03, 0x04, 0x78, 0x04, 0x03,
0x61, 0x59, 0x49, 0x4D, 0x43,
0x00, 0x7F, 0x41, 0x41, 0x41,
0x02, 0x04, 0x08, 0x10, 0x20,
0x00, 0x41, 0x41, 0x41, 0x7F,
0x04, 0x02, 0x01, 0x02, 0x04,
0x40, 0x40, 0x40, 0x40, 0x40,
0x00, 0x03, 0x07, 0x08, 0x00,
0x20, 0x54, 0x54, 0x78, 0x40,
0x7F, 0x28, 0x44, 0x44, 0x38,
0x38, 0x44, 0x44, 0x44, 0x28,
0x38, 0x44, 0x44, 0x28, 0x7F,
0x38, 0x54, 0x54, 0x54, 0x18,
0x00, 0x08, 0x7E, 0x09, 0x02,
0x18, 0xA4, 0xA4, 0x9C, 0x78,
0x7F, 0x08, 0x04, 0x04, 0x78,
0x00, 0x44, 0x7D, 0x40, 0x00,
0x20, 0x40, 0x40, 0x3D, 0x00,
0x7F, 0x10, 0x28, 0x44, 0x00,
0x00, 0x41, 0x7F, 0x40, 0x00,
0x7C, 0x04, 0x78, 0x04, 0x78,
0x7C, 0x08, 0x04, 0x04, 0x78,
0x38, 0x44, 0x44, 0x44, 0x38,
0xFC, 0x18, 0x24, 0x24, 0x18,
0x18, 0x24, 0x24, 0x18, 0xFC,
0x7C, 0x08, 0x04, 0x04, 0x08,
0x48, 0x54, 0x54, 0x54, 0x24,
0x04, 0x04, 0x3F, 0x44, 0x24,
0x3C, 0x40, 0x40, 0x20, 0x7C,
0x1C, 0x20, 0x40, 0x20, 0x1C,
0x3C, 0x40, 0x30, 0x40, 0x3C,
0x44, 0x28, 0x10, 0x28, 0x44,
0x4C, 0x90, 0x90, 0x90, 0x7C,
0x44, 0x64, 0x54, 0x4C, 0x44,
0x00, 0x08, 0x36, 0x41, 0x00,
0x00, 0x00, 0x77, 0x00, 0x00,
0x00, 0x41, 0x36, 0x08, 0x00,
0x02, 0x01, 0x02, 0x04, 0x02
};

void spiwrite(unsigned char spidata)
{
char x;
PIR1bits.SSPIF = 0;
x = SSPBUF;
SSPBUF = spidata;
while (!SSPSTATbits.BF);
}

void write_command(unsigned char cmd_)
{
TFT_CS = 0;

TFT_DC = 0;
spiwrite(cmd_);

TFT_CS = 1;

}

void write_data(unsigned char data_)
{
TFT_CS = 0;
TFT_DC = 1;
spiwrite(data_);
TFT_CS = 1;
}

void LCD_Reset(void)
{
TFT_RST = 0;
delay_ms(100);
TFT_RST = 1;
}

void Bcmd()
{
write_command(0x01);
delay_ms(50);
write_command(0x11);
delay_ms(500);
write_command(0x3A);
write_data(0x05);
delay_ms(10);
write_command(0xB1);
write_data(0x00);
write_data(0x06);
write_data(0x03);
delay_ms(10);
write_command(0x36);
write_data(0x08);
write_command(0xB6);
write_data(0x15);
write_data(0x02);
write_command(0xB4);
write_data(0x00);
write_command(0xC0);
write_data(0x02);
write_data(0x70);
delay_ms(10);
write_command(0xC1);
write_data(0x05);
write_command(0xC2);
write_data(0x01);
write_data(0x02);
write_command(0xC5);
write_data(0x3C);
write_data(0x38);
delay_ms(10);
write_command(0xFC);
write_data(0x11);
write_data(0x15);
write_command(0xE0);
write_data(0x09); write_data(0x16); write_data(0x09); write_data(0x20);
write_data(0x21); write_data(0x1B); write_data(0x13); write_data(0x19);
write_data(0x17); write_data(0x15); write_data(0x1E); write_data(0x2B);
write_data(0x04); write_data(0x05); write_data(0x02); write_data(0x0E);
write_command(0xE1);
write_data(0x0B); write_data(0x14); write_data(0x08); write_data(0x1E);
write_data(0x22); write_data(0x1D); write_data(0x18); write_data(0x1E);
write_data(0x1B); write_data(0x1A); write_data(0x24); write_data(0x2B);
write_data(0x06); write_data(0x06); write_data(0x02); write_data(0x0F);
delay_ms(10);
write_command(0x2A);
write_data(0x00); write_data(0x02); write_data(0x08); write_data(0x81);
write_command(0x2B);
write_data(0x00); write_data(0x01); write_data(0x08); write_data(0xA0);
write_command(0x13);
delay_ms(10);
write_command(0x29);
delay_ms(500);
}
void Rcmd1()
{
write_command(0x01);
delay_ms(150);
write_command(0x11);
delay_ms(500);
write_command(0xB1);
write_data(0x01);
write_data(0x2C);
write_data(0x2D);
write_command(0xB2);
write_data(0x01);
write_data(0x2C);
write_data(0x2D);
write_command(0xB3);
write_data(0x01);
write_data(0x2C);
write_data(0x2D);
write_data(0x01);
write_data(0x2C);
write_data(0x2D);
write_command(0xB4);
write_data(0x07);
write_command(0xC0);
write_data(0xA2);
write_data(0x02);
write_data(0x84);
write_command(0xC1);
write_data(0xC5);
write_command(0xC2);
write_data(0x0A);
write_data(0x00);
write_command(0xC3);
write_data(0x8A);
write_data(0x2A);
write_command(0xC4);
write_data(0x8A);
write_data(0xEE);
write_command(0xC5);
write_data(0x0E);
write_command(0x20);
write_command(0x36);
write_data(0xC8);
write_command(0x3A);
write_data(0x05);
}

void Rcmd2red()
{
write_command(0x2A);
write_data(0x00); write_data(0x00);
write_data(0x00); write_data(0x7F);
write_command(0x2B);
write_data(0x00); write_data(0x00);
write_data(0x00); write_data(0x9F);
}

void Rcmd3()
{
write_command(0xE0);
write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x12);
write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2D);
write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x39);
write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x10);
write_command(0xE1);
write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x06);
write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2D);
write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3F);
write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x10);
write_command(0x13);
delay_ms(10);
write_command(0x29);
delay_ms(100);
}

void setScrollDefinition(unsigned char top_fix_height, unsigned char bottom_fix_height, BOOL _scroll_direction)
{
unsigned char scroll_height;
scroll_height = 160 - top_fix_height - bottom_fix_height;
write_command(0x33);
write_data(0x00);
write_data(top_fix_height);
write_data(0x00);
write_data(scroll_height);
write_data(0x00);
write_data(bottom_fix_height);
write_command(0x36);
if(_scroll_direction){
if(_tft_type == 0){
write_data(0xD8);
}
if(_tft_type == 1){
write_data(0xD0);
}
if(_tft_type == 2){
write_data(0x18);
}
}
else{
if(_tft_type == 0){
write_data(0xC8);
}
if(_tft_type == 1){
write_data(0xC0);
}
if(_tft_type == 2){
write_data(0x08);
}
}
}

void setAddrWindow(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1)
{
write_command(0x2A);
write_data(0);
write_data(x0 + colstart);
write_data(0);
write_data(x1 + colstart);
write_command(0x2B);
write_data(0);
write_data(y0 + rowstart);
write_data(0);
write_data(y1 + rowstart);
write_command(0x2C);
}

void drawPixel(unsigned char x, unsigned char y, unsigned int color)
{
if((x >= 128) || (y >= 160))
return;
setAddrWindow(x,y,x+1,y+1);
write_data(color >> 8);
write_data(color & 0xFF);
}

void drawFastVLine(unsigned char x, unsigned char y, unsigned char h, unsigned int color)
{
unsigned char hi, lo;
if((x >= 128) || (y >= 160))
return;
if((y + h - 1) >= 160)
h = 160 - y;
hi = color >> 8; lo = color;
setAddrWindow(x, y, x, y + h - 1);
TFT_DC = 1;
TFT_CS = 0;

while (h--) {
spiwrite(hi);
spiwrite(lo);
}
TFT_CS = 1;


}

void fillRect(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned int color)
{
signed int i;

for (i = x; i < x + w; i++)
{
drawFastVLine(i, y, h, color);
}
}

void drawChar(unsigned char x, unsigned char y, unsigned char c, unsigned int color, unsigned int bg, unsigned char size)
{
char i, j;
if((x >= 128) || (y >= 160))
return;
if(size < 1) size = 1;
if((c < ' ') || (c > '~'))
c = '?';
for(i=0; i<5; i++ ) {
unsigned char line;
if(c < 'S')
line = font[(c - 32)*5 + i];
else
line = font2[(c - 'S')*5 + i];
for(j=0; j<7; j++, line >>= 1) {
if(line & 0x01) {
if(size == 1) drawPixel(x+i, y+j, color);
else fillRect(x+(i*size), y+(j*size), size, size, color);
}
else if(bg != color) {
if(size == 1) drawPixel(x+i, y+j, bg);
else fillRect(x+i*size, y+j*size, size, size, bg);
}
}
}
}

void drawtext(unsigned char x, unsigned char y, char *_text, unsigned int color, unsigned int bg, unsigned char size)
{
unsigned char cursor_x, cursor_y;
unsigned int textsize, i;
cursor_x = x, cursor_y = y;
textsize = strlen(_text);
for(i = 0; i < textsize; i++){
if(wrap && ((cursor_x + size * 5) > 128)){
cursor_x = 0;
cursor_y = cursor_y + size * 7 + 3 ;
if(cursor_y > 160) cursor_y = 160;
if(_text[i] == 0x20) goto _skip; }
drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
cursor_x = cursor_x + size * 6;
if(cursor_x > 128) cursor_x = 128;
_skip:;}
}

void Rcmd2green()
{
write_command(0x2A);
write_data(0x00); write_data(0x02);
write_data(0x00); write_data(0x7F + 0x02);
write_command(0x2B);
write_data(0x00); write_data(0x01);
write_data(0x00); write_data(0x9F + 0x01);
}


void fillRectangle(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned int color)
{
unsigned char hi, lo;
if((x >= 128) || (y >= 160))
return;
if((x + w - 1) >= 128)
w = 128 - x;
if((y + h - 1) >= 160)
h = 160 - y;
setAddrWindow(x, y, x+w-1, y+h-1);
hi = color >> 8; lo = color;
TFT_DC = 1;
TFT_CS = 0;

for(y=h; y>0; y--) {
for(x = w; x > 0; x--) {
spiwrite(hi);
spiwrite(lo);
}
}
TFT_CS = 1;


}

void drawCircle(signed int x0, signed int y0, signed int r, unsigned int color)
{
signed int f, ddF_x, ddF_y, x, y;
f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
drawPixel(x0 , y0 + r, color);
drawPixel(x0 , y0 - r, color);
drawPixel(x0+r, y0 , color);
drawPixel(x0-r, y0 , color);
while (x < y) {
if (f >= 0) {
y--;
ddF_y += 2;
f += ddF_y;
}
x++;
ddF_x += 2;
f += ddF_x;
drawPixel(x0 + x, y0 + y, color);
drawPixel(x0 - x, y0 + y, color);
drawPixel(x0 + x, y0 - y, color);
drawPixel(x0 - x, y0 - y, color);
drawPixel(x0 + y, y0 + x, color);
drawPixel(x0 - y, y0 + x, color);
drawPixel(x0 + y, y0 - x, color);
drawPixel(x0 - y, y0 - x, color);
}
}

void drawCircleHelper(signed int x0, signed int y0, signed int r, unsigned int cornername, unsigned int color)
{
signed int f, ddF_x, ddF_y, x, y;
f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
while (x<y) {
if (f >= 0) {
y--;
ddF_y += 2;
f += ddF_y;
}
x++;
ddF_x += 2;
f += ddF_x;
if (cornername & 0x4) {
drawPixel(x0 + x, y0 + y, color);
drawPixel(x0 + y, y0 + x, color);
}
if (cornername & 0x2) {
drawPixel(x0 + x, y0 - y, color);
drawPixel(x0 + y, y0 - x, color);
}
if (cornername & 0x8) {
drawPixel(x0 - y, y0 + x, color);
drawPixel(x0 - x, y0 + y, color);
}
if (cornername & 0x1) {
drawPixel(x0 - y, y0 - x, color);
drawPixel(x0 - x, y0 - y, color);
}
}
}


void fillCircleHelper(signed int x0, signed int y0, signed int r, unsigned int cornername, signed int delta, unsigned int color)
{
signed int f, ddF_x, ddF_y, x, y;
f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
while (x<y) {
if (f >= 0) {
y--;
ddF_y += 2;
f += ddF_y;
}
x++;
ddF_x += 2;
f += ddF_x;

if (cornername & 0x1) {
drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
}
if (cornername & 0x2) {
drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
}
}
}

void fillCircle(signed int x0, signed int y0, signed int r, unsigned int color)
{
drawFastVLine(x0, y0 - r, 2 * r + 1, color);
fillCircleHelper(x0, y0, r, 3, 0, color);
}
void fillScreen(unsigned int color)
{
fillRectangle(0, 0, 128, 160, color);
}

void drawFastHLine(unsigned char x, unsigned char y, unsigned char w, unsigned int color)
{
unsigned char hi, lo;
if((x >= 128) || (y >= 160))
return;
if((x + w - 1) >= 128)
w = 128 - x;
hi = color >> 8; lo = color;
setAddrWindow(x, y, x + w - 1, y);
TFT_DC = 1;
TFT_CS = 0;

while (w--) {
spiwrite(hi);
spiwrite(lo);
}
TFT_CS = 1;

}

void TFT_GreenTab_Initialize()
{
TFT_CS = 1;
TFT_DC = 0;

SSPSTAT=0x80;
SSPCON1=0x30;


Rcmd1();
Rcmd2red();
Rcmd3();
write_command(0x36);
write_data(0xC0);
_tft_type = 1;
}

void TFT_BlackTab_Initialize()
{
TFT_CS = 1;
TFT_DC = 0;

SSPSTAT=0x80;
SSPCON1=0x30;

Rcmd1();
Rcmd2green();
Rcmd3();
colstart = 2;
rowstart = 1;
_tft_type = 0;
}

void VerticalScroll(unsigned char _vsp)
{
write_command(0x37);
write_data(0x00);
write_data(_vsp);
}


void drawRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h, unsigned int color)
{
drawFastHLine(x, y, w, color);
drawFastHLine(x, y + h - 1, w, color);
drawFastVLine(x, y, h, color);
drawFastVLine(x + w - 1, y, h, color);
}

