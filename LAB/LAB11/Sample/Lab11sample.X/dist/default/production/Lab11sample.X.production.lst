

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 21 08:35:10 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	idataCOMRAM
    75  001488                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _tempSecond
    79  001488  FF                 	db	255
    80                           
    81                           ;initializer for _wrap
    82  001489  01                 	db	1
    83                           
    84                           	psect	idataBANK0
    85  000F00                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _D1
    89  000F00  00                 	db	0
    90  000F01  00                 	db	0
    91  000F02  01                 	db	1
    92  000F03  00                 	db	0
    93  000F04  00                 	db	0
    94  000F05  02                 	db	2
    95  000F06  00                 	db	0
    96  000F07  00                 	db	0
    97  000F08  05                 	db	5
    98  000F09  00                 	db	0
    99  000F0A  00                 	db	0
   100  000F0B  07                 	db	7
   101  000F0C  00                 	db	0
   102  000F0D  00                 	db	0
   103  000F0E  07                 	db	7
   104  000F0F  00                 	db	0
   105  000F10  00                 	db	0
   106  000F11  07                 	db	7
   107  000F12  00                 	db	0
   108  000F13  00                 	db	0
   109  000F14  07                 	db	7
   110                           
   111                           ;initializer for _D2
   112  000F15  00                 	db	0
   113  000F16  01                 	db	1
   114  000F17  00                 	db	0
   115  000F18  00                 	db	0
   116  000F19  04                 	db	4
   117  000F1A  00                 	db	0
   118  000F1B  00                 	db	0
   119  000F1C  05                 	db	5
   120  000F1D  00                 	db	0
   121  000F1E  00                 	db	0
   122  000F1F  07                 	db	7
   123  000F20  00                 	db	0
   124  000F21  00                 	db	0
   125  000F22  07                 	db	7
   126  000F23  00                 	db	0
   127  000F24  00                 	db	0
   128  000F25  07                 	db	7
   129  000F26  00                 	db	0
   130  000F27  00                 	db	0
   131  000F28  07                 	db	7
   132  000F29  00                 	db	0
   133                           
   134                           ;initializer for _D3
   135  000F2A  10                 	db	16
   136  000F2B  00                 	db	0
   137  000F2C  00                 	db	0
   138  000F2D  40                 	db	64
   139  000F2E  00                 	db	0
   140  000F2F  00                 	db	0
   141  000F30  50                 	db	80
   142  000F31  00                 	db	0
   143  000F32  00                 	db	0
   144  000F33  70                 	db	112
   145  000F34  00                 	db	0
   146  000F35  00                 	db	0
   147  000F36  70                 	db	112
   148  000F37  00                 	db	0
   149  000F38  00                 	db	0
   150  000F39  70                 	db	112
   151  000F3A  00                 	db	0
   152  000F3B  00                 	db	0
   153  000F3C  70                 	db	112
   154  000F3D  00                 	db	0
   155  000F3E  00                 	db	0
   156                           
   157                           ;initializer for _array1
   158  000F3F  A2                 	db	162
   159  000F40  62                 	db	98
   160  000F41  E2                 	db	226
   161  000F42  22                 	db	34
   162  000F43  02                 	db	2
   163  000F44  C2                 	db	194
   164  000F45  E0                 	db	224
   165  000F46  A8                 	db	168
   166  000F47  90                 	db	144
   167  000F48  68                 	db	104
   168  000F49  98                 	db	152
   169  000F4A  B0                 	db	176
   170  000F4B  30                 	db	48
   171  000F4C  18                 	db	24
   172  000F4D  7A                 	db	122
   173  000F4E  10                 	db	16
   174  000F4F  38                 	db	56
   175  000F50  5A                 	db	90
   176  000F51  42                 	db	66
   177  000F52  4A                 	db	74
   178  000F53  52                 	db	82
   179                           
   180                           	psect	idataBANK1
   181  000C5C                     __pidataBANK1:
   182                           	opt stack 0
   183                           
   184                           ;initializer for _txt1
   185  000C5C  43                 	db	67
   186  000C5D  48                 	db	72
   187  000C5E  2D                 	db	45
   188  000C5F  00                 	db	0
   189  000C60  43                 	db	67
   190  000C61  48                 	db	72
   191  000C62  20                 	db	32
   192  000C63  00                 	db	0
   193  000C64  43                 	db	67
   194  000C65  48                 	db	72
   195  000C66  2B                 	db	43
   196  000C67  00                 	db	0
   197  000C68  50                 	db	80
   198  000C69  52                 	db	82
   199  000C6A  56                 	db	86
   200  000C6B  00                 	db	0
   201  000C6C  4E                 	db	78
   202  000C6D  58                 	db	88
   203  000C6E  54                 	db	84
   204  000C6F  00                 	db	0
   205  000C70  50                 	db	80
   206  000C71  2F                 	db	47
   207  000C72  50                 	db	80
   208  000C73  00                 	db	0
   209  000C74  56                 	db	86
   210  000C75  4C                 	db	76
   211  000C76  2D                 	db	45
   212  000C77  00                 	db	0
   213  000C78  56                 	db	86
   214  000C79  4C                 	db	76
   215  000C7A  2B                 	db	43
   216  000C7B  00                 	db	0
   217  000C7C  45                 	db	69
   218  000C7D  51                 	db	81
   219  000C7E  20                 	db	32
   220  000C7F  00                 	db	0
   221  000C80  20                 	db	32
   222  000C81  30                 	db	48
   223  000C82  20                 	db	32
   224  000C83  00                 	db	0
   225  000C84  31                 	db	49
   226  000C85  30                 	db	48
   227  000C86  30                 	db	48
   228  000C87  00                 	db	0
   229  000C88  32                 	db	50
   230  000C89  30                 	db	48
   231  000C8A  30                 	db	48
   232  000C8B  00                 	db	0
   233  000C8C  20                 	db	32
   234  000C8D  31                 	db	49
   235  000C8E  20                 	db	32
   236  000C8F  00                 	db	0
   237  000C90  20                 	db	32
   238  000C91  32                 	db	50
   239  000C92  20                 	db	32
   240  000C93  00                 	db	0
   241  000C94  20                 	db	32
   242  000C95  33                 	db	51
   243  000C96  20                 	db	32
   244  000C97  00                 	db	0
   245  000C98  20                 	db	32
   246  000C99  34                 	db	52
   247  000C9A  20                 	db	32
   248  000C9B  00                 	db	0
   249  000C9C  20                 	db	32
   250  000C9D  35                 	db	53
   251  000C9E  20                 	db	32
   252  000C9F  00                 	db	0
   253  000CA0  20                 	db	32
   254  000CA1  36                 	db	54
   255  000CA2  20                 	db	32
   256  000CA3  00                 	db	0
   257  000CA4  20                 	db	32
   258  000CA5  37                 	db	55
   259  000CA6  20                 	db	32
   260  000CA7  00                 	db	0
   261  000CA8  20                 	db	32
   262  000CA9  38                 	db	56
   263  000CAA  20                 	db	32
   264  000CAB  00                 	db	0
   265  000CAC  20                 	db	32
   266  000CAD  39                 	db	57
   267  000CAE  20                 	db	32
   268  000CAF  00                 	db	0
   269                           
   270                           ;initializer for _color
   271  000CB0  F800               	dw	63488
   272  000CB2  F800               	dw	63488
   273  000CB4  F800               	dw	63488
   274  000CB6  001F               	dw	31
   275  000CB8  001F               	dw	31
   276  000CBA  07E0               	dw	2016
   277  000CBC  F81F               	dw	63519
   278  000CBE  F81F               	dw	63519
   279  000CC0  F81F               	dw	63519
   280  000CC2  0000               	dw	0
   281  000CC4  0000               	dw	0
   282  000CC6  0000               	dw	0
   283  000CC8  0000               	dw	0
   284  000CCA  0000               	dw	0
   285  000CCC  0000               	dw	0
   286  000CCE  0000               	dw	0
   287  000CD0  0000               	dw	0
   288  000CD2  0000               	dw	0
   289  000CD4  0000               	dw	0
   290  000CD6  0000               	dw	0
   291  000CD8  0000               	dw	0
   292                           
   293                           	psect	mediumconst
   294  00FD98                     __pmediumconst:
   295                           	opt stack 0
   296  00FD98  00                 	db	0
   297  00FD99                     _font:
   298                           	opt stack 0
   299  00FD99  00                 	db	0
   300  00FD9A  00                 	db	0
   301  00FD9B  00                 	db	0
   302  00FD9C  00                 	db	0
   303  00FD9D  00                 	db	0
   304  00FD9E  00                 	db	0
   305  00FD9F  00                 	db	0
   306  00FDA0  5F                 	db	95
   307  00FDA1  00                 	db	0
   308  00FDA2  00                 	db	0
   309  00FDA3  00                 	db	0
   310  00FDA4  07                 	db	7
   311  00FDA5  00                 	db	0
   312  00FDA6  07                 	db	7
   313  00FDA7  00                 	db	0
   314  00FDA8  14                 	db	20
   315  00FDA9  7F                 	db	127
   316  00FDAA  14                 	db	20
   317  00FDAB  7F                 	db	127
   318  00FDAC  14                 	db	20
   319  00FDAD  24                 	db	36
   320  00FDAE  2A                 	db	42
   321  00FDAF  7F                 	db	127
   322  00FDB0  2A                 	db	42
   323  00FDB1  12                 	db	18
   324  00FDB2  23                 	db	35
   325  00FDB3  13                 	db	19
   326  00FDB4  08                 	db	8
   327  00FDB5  64                 	db	100
   328  00FDB6  62                 	db	98
   329  00FDB7  36                 	db	54
   330  00FDB8  49                 	db	73
   331  00FDB9  56                 	db	86
   332  00FDBA  20                 	db	32
   333  00FDBB  50                 	db	80
   334  00FDBC  00                 	db	0
   335  00FDBD  08                 	db	8
   336  00FDBE  07                 	db	7
   337  00FDBF  03                 	db	3
   338  00FDC0  00                 	db	0
   339  00FDC1  00                 	db	0
   340  00FDC2  1C                 	db	28
   341  00FDC3  22                 	db	34
   342  00FDC4  41                 	db	65
   343  00FDC5  00                 	db	0
   344  00FDC6  00                 	db	0
   345  00FDC7  41                 	db	65
   346  00FDC8  22                 	db	34
   347  00FDC9  1C                 	db	28
   348  00FDCA  00                 	db	0
   349  00FDCB  2A                 	db	42
   350  00FDCC  1C                 	db	28
   351  00FDCD  7F                 	db	127
   352  00FDCE  1C                 	db	28
   353  00FDCF  2A                 	db	42
   354  00FDD0  08                 	db	8
   355  00FDD1  08                 	db	8
   356  00FDD2  3E                 	db	62
   357  00FDD3  08                 	db	8
   358  00FDD4  08                 	db	8
   359  00FDD5  00                 	db	0
   360  00FDD6  80                 	db	128
   361  00FDD7  70                 	db	112
   362  00FDD8  30                 	db	48
   363  00FDD9  00                 	db	0
   364  00FDDA  08                 	db	8
   365  00FDDB  08                 	db	8
   366  00FDDC  08                 	db	8
   367  00FDDD  08                 	db	8
   368  00FDDE  08                 	db	8
   369  00FDDF  00                 	db	0
   370  00FDE0  00                 	db	0
   371  00FDE1  60                 	db	96
   372  00FDE2  60                 	db	96
   373  00FDE3  00                 	db	0
   374  00FDE4  20                 	db	32
   375  00FDE5  10                 	db	16
   376  00FDE6  08                 	db	8
   377  00FDE7  04                 	db	4
   378  00FDE8  02                 	db	2
   379  00FDE9  3E                 	db	62
   380  00FDEA  51                 	db	81
   381  00FDEB  49                 	db	73
   382  00FDEC  45                 	db	69
   383  00FDED  3E                 	db	62
   384  00FDEE  00                 	db	0
   385  00FDEF  42                 	db	66
   386  00FDF0  7F                 	db	127
   387  00FDF1  40                 	db	64
   388  00FDF2  00                 	db	0
   389  00FDF3  72                 	db	114
   390  00FDF4  49                 	db	73
   391  00FDF5  49                 	db	73
   392  00FDF6  49                 	db	73
   393  00FDF7  46                 	db	70
   394  00FDF8  21                 	db	33
   395  00FDF9  41                 	db	65
   396  00FDFA  49                 	db	73
   397  00FDFB  4D                 	db	77
   398  00FDFC  33                 	db	51
   399  00FDFD  18                 	db	24
   400  00FDFE  14                 	db	20
   401  00FDFF  12                 	db	18
   402  00FE00  7F                 	db	127
   403  00FE01  10                 	db	16
   404  00FE02  27                 	db	39
   405  00FE03  45                 	db	69
   406  00FE04  45                 	db	69
   407  00FE05  45                 	db	69
   408  00FE06  39                 	db	57
   409  00FE07  3C                 	db	60
   410  00FE08  4A                 	db	74
   411  00FE09  49                 	db	73
   412  00FE0A  49                 	db	73
   413  00FE0B  31                 	db	49
   414  00FE0C  41                 	db	65
   415  00FE0D  21                 	db	33
   416  00FE0E  11                 	db	17
   417  00FE0F  09                 	db	9
   418  00FE10  07                 	db	7
   419  00FE11  36                 	db	54
   420  00FE12  49                 	db	73
   421  00FE13  49                 	db	73
   422  00FE14  49                 	db	73
   423  00FE15  36                 	db	54
   424  00FE16  46                 	db	70
   425  00FE17  49                 	db	73
   426  00FE18  49                 	db	73
   427  00FE19  29                 	db	41
   428  00FE1A  1E                 	db	30
   429  00FE1B  00                 	db	0
   430  00FE1C  00                 	db	0
   431  00FE1D  14                 	db	20
   432  00FE1E  00                 	db	0
   433  00FE1F  00                 	db	0
   434  00FE20  00                 	db	0
   435  00FE21  40                 	db	64
   436  00FE22  34                 	db	52
   437  00FE23  00                 	db	0
   438  00FE24  00                 	db	0
   439  00FE25  00                 	db	0
   440  00FE26  08                 	db	8
   441  00FE27  14                 	db	20
   442  00FE28  22                 	db	34
   443  00FE29  41                 	db	65
   444  00FE2A  14                 	db	20
   445  00FE2B  14                 	db	20
   446  00FE2C  14                 	db	20
   447  00FE2D  14                 	db	20
   448  00FE2E  14                 	db	20
   449  00FE2F  00                 	db	0
   450  00FE30  41                 	db	65
   451  00FE31  22                 	db	34
   452  00FE32  14                 	db	20
   453  00FE33  08                 	db	8
   454  00FE34  02                 	db	2
   455  00FE35  01                 	db	1
   456  00FE36  59                 	db	89
   457  00FE37  09                 	db	9
   458  00FE38  06                 	db	6
   459  00FE39  3E                 	db	62
   460  00FE3A  41                 	db	65
   461  00FE3B  5D                 	db	93
   462  00FE3C  59                 	db	89
   463  00FE3D  4E                 	db	78
   464  00FE3E  7C                 	db	124
   465  00FE3F  12                 	db	18
   466  00FE40  11                 	db	17
   467  00FE41  12                 	db	18
   468  00FE42  7C                 	db	124
   469  00FE43  7F                 	db	127
   470  00FE44  49                 	db	73
   471  00FE45  49                 	db	73
   472  00FE46  49                 	db	73
   473  00FE47  36                 	db	54
   474  00FE48  3E                 	db	62
   475  00FE49  41                 	db	65
   476  00FE4A  41                 	db	65
   477  00FE4B  41                 	db	65
   478  00FE4C  22                 	db	34
   479  00FE4D  7F                 	db	127
   480  00FE4E  41                 	db	65
   481  00FE4F  41                 	db	65
   482  00FE50  41                 	db	65
   483  00FE51  3E                 	db	62
   484  00FE52  7F                 	db	127
   485  00FE53  49                 	db	73
   486  00FE54  49                 	db	73
   487  00FE55  49                 	db	73
   488  00FE56  41                 	db	65
   489  00FE57  7F                 	db	127
   490  00FE58  09                 	db	9
   491  00FE59  09                 	db	9
   492  00FE5A  09                 	db	9
   493  00FE5B  01                 	db	1
   494  00FE5C  3E                 	db	62
   495  00FE5D  41                 	db	65
   496  00FE5E  41                 	db	65
   497  00FE5F  51                 	db	81
   498  00FE60  73                 	db	115
   499  00FE61  7F                 	db	127
   500  00FE62  08                 	db	8
   501  00FE63  08                 	db	8
   502  00FE64  08                 	db	8
   503  00FE65  7F                 	db	127
   504  00FE66  00                 	db	0
   505  00FE67  41                 	db	65
   506  00FE68  7F                 	db	127
   507  00FE69  41                 	db	65
   508  00FE6A  00                 	db	0
   509  00FE6B  20                 	db	32
   510  00FE6C  40                 	db	64
   511  00FE6D  41                 	db	65
   512  00FE6E  3F                 	db	63
   513  00FE6F  01                 	db	1
   514  00FE70  7F                 	db	127
   515  00FE71  08                 	db	8
   516  00FE72  14                 	db	20
   517  00FE73  22                 	db	34
   518  00FE74  41                 	db	65
   519  00FE75  7F                 	db	127
   520  00FE76  40                 	db	64
   521  00FE77  40                 	db	64
   522  00FE78  40                 	db	64
   523  00FE79  40                 	db	64
   524  00FE7A  7F                 	db	127
   525  00FE7B  02                 	db	2
   526  00FE7C  1C                 	db	28
   527  00FE7D  02                 	db	2
   528  00FE7E  7F                 	db	127
   529  00FE7F  7F                 	db	127
   530  00FE80  04                 	db	4
   531  00FE81  08                 	db	8
   532  00FE82  10                 	db	16
   533  00FE83  7F                 	db	127
   534  00FE84  3E                 	db	62
   535  00FE85  41                 	db	65
   536  00FE86  41                 	db	65
   537  00FE87  41                 	db	65
   538  00FE88  3E                 	db	62
   539  00FE89  7F                 	db	127
   540  00FE8A  09                 	db	9
   541  00FE8B  09                 	db	9
   542  00FE8C  09                 	db	9
   543  00FE8D  06                 	db	6
   544  00FE8E  3E                 	db	62
   545  00FE8F  41                 	db	65
   546  00FE90  51                 	db	81
   547  00FE91  21                 	db	33
   548  00FE92  5E                 	db	94
   549  00FE93  7F                 	db	127
   550  00FE94  09                 	db	9
   551  00FE95  19                 	db	25
   552  00FE96  29                 	db	41
   553  00FE97  46                 	db	70
   554  00FE98                     __end_of_font:
   555                           	opt stack 0
   556  00FE98                     _font2:
   557                           	opt stack 0
   558  00FE98  26                 	db	38
   559  00FE99  49                 	db	73
   560  00FE9A  49                 	db	73
   561  00FE9B  49                 	db	73
   562  00FE9C  32                 	db	50
   563  00FE9D  03                 	db	3
   564  00FE9E  01                 	db	1
   565  00FE9F  7F                 	db	127
   566  00FEA0  01                 	db	1
   567  00FEA1  03                 	db	3
   568  00FEA2  3F                 	db	63
   569  00FEA3  40                 	db	64
   570  00FEA4  40                 	db	64
   571  00FEA5  40                 	db	64
   572  00FEA6  3F                 	db	63
   573  00FEA7  1F                 	db	31
   574  00FEA8  20                 	db	32
   575  00FEA9  40                 	db	64
   576  00FEAA  20                 	db	32
   577  00FEAB  1F                 	db	31
   578  00FEAC  3F                 	db	63
   579  00FEAD  40                 	db	64
   580  00FEAE  38                 	db	56
   581  00FEAF  40                 	db	64
   582  00FEB0  3F                 	db	63
   583  00FEB1  63                 	db	99
   584  00FEB2  14                 	db	20
   585  00FEB3  08                 	db	8
   586  00FEB4  14                 	db	20
   587  00FEB5  63                 	db	99
   588  00FEB6  03                 	db	3
   589  00FEB7  04                 	db	4
   590  00FEB8  78                 	db	120
   591  00FEB9  04                 	db	4
   592  00FEBA  03                 	db	3
   593  00FEBB  61                 	db	97
   594  00FEBC  59                 	db	89
   595  00FEBD  49                 	db	73
   596  00FEBE  4D                 	db	77
   597  00FEBF  43                 	db	67
   598  00FEC0  00                 	db	0
   599  00FEC1  7F                 	db	127
   600  00FEC2  41                 	db	65
   601  00FEC3  41                 	db	65
   602  00FEC4  41                 	db	65
   603  00FEC5  02                 	db	2
   604  00FEC6  04                 	db	4
   605  00FEC7  08                 	db	8
   606  00FEC8  10                 	db	16
   607  00FEC9  20                 	db	32
   608  00FECA  00                 	db	0
   609  00FECB  41                 	db	65
   610  00FECC  41                 	db	65
   611  00FECD  41                 	db	65
   612  00FECE  7F                 	db	127
   613  00FECF  04                 	db	4
   614  00FED0  02                 	db	2
   615  00FED1  01                 	db	1
   616  00FED2  02                 	db	2
   617  00FED3  04                 	db	4
   618  00FED4  40                 	db	64
   619  00FED5  40                 	db	64
   620  00FED6  40                 	db	64
   621  00FED7  40                 	db	64
   622  00FED8  40                 	db	64
   623  00FED9  00                 	db	0
   624  00FEDA  03                 	db	3
   625  00FEDB  07                 	db	7
   626  00FEDC  08                 	db	8
   627  00FEDD  00                 	db	0
   628  00FEDE  20                 	db	32
   629  00FEDF  54                 	db	84
   630  00FEE0  54                 	db	84
   631  00FEE1  78                 	db	120
   632  00FEE2  40                 	db	64
   633  00FEE3  7F                 	db	127
   634  00FEE4  28                 	db	40
   635  00FEE5  44                 	db	68
   636  00FEE6  44                 	db	68
   637  00FEE7  38                 	db	56
   638  00FEE8  38                 	db	56
   639  00FEE9  44                 	db	68
   640  00FEEA  44                 	db	68
   641  00FEEB  44                 	db	68
   642  00FEEC  28                 	db	40
   643  00FEED  38                 	db	56
   644  00FEEE  44                 	db	68
   645  00FEEF  44                 	db	68
   646  00FEF0  28                 	db	40
   647  00FEF1  7F                 	db	127
   648  00FEF2  38                 	db	56
   649  00FEF3  54                 	db	84
   650  00FEF4  54                 	db	84
   651  00FEF5  54                 	db	84
   652  00FEF6  18                 	db	24
   653  00FEF7  00                 	db	0
   654  00FEF8  08                 	db	8
   655  00FEF9  7E                 	db	126
   656  00FEFA  09                 	db	9
   657  00FEFB  02                 	db	2
   658  00FEFC  18                 	db	24
   659  00FEFD  A4                 	db	164
   660  00FEFE  A4                 	db	164
   661  00FEFF  9C                 	db	156
   662  00FF00  78                 	db	120
   663  00FF01  7F                 	db	127
   664  00FF02  08                 	db	8
   665  00FF03  04                 	db	4
   666  00FF04  04                 	db	4
   667  00FF05  78                 	db	120
   668  00FF06  00                 	db	0
   669  00FF07  44                 	db	68
   670  00FF08  7D                 	db	125
   671  00FF09  40                 	db	64
   672  00FF0A  00                 	db	0
   673  00FF0B  20                 	db	32
   674  00FF0C  40                 	db	64
   675  00FF0D  40                 	db	64
   676  00FF0E  3D                 	db	61
   677  00FF0F  00                 	db	0
   678  00FF10  7F                 	db	127
   679  00FF11  10                 	db	16
   680  00FF12  28                 	db	40
   681  00FF13  44                 	db	68
   682  00FF14  00                 	db	0
   683  00FF15  00                 	db	0
   684  00FF16  41                 	db	65
   685  00FF17  7F                 	db	127
   686  00FF18  40                 	db	64
   687  00FF19  00                 	db	0
   688  00FF1A  7C                 	db	124
   689  00FF1B  04                 	db	4
   690  00FF1C  78                 	db	120
   691  00FF1D  04                 	db	4
   692  00FF1E  78                 	db	120
   693  00FF1F  7C                 	db	124
   694  00FF20  08                 	db	8
   695  00FF21  04                 	db	4
   696  00FF22  04                 	db	4
   697  00FF23  78                 	db	120
   698  00FF24  38                 	db	56
   699  00FF25  44                 	db	68
   700  00FF26  44                 	db	68
   701  00FF27  44                 	db	68
   702  00FF28  38                 	db	56
   703  00FF29  FC                 	db	252
   704  00FF2A  18                 	db	24
   705  00FF2B  24                 	db	36
   706  00FF2C  24                 	db	36
   707  00FF2D  18                 	db	24
   708  00FF2E  18                 	db	24
   709  00FF2F  24                 	db	36
   710  00FF30  24                 	db	36
   711  00FF31  18                 	db	24
   712  00FF32  FC                 	db	252
   713  00FF33  7C                 	db	124
   714  00FF34  08                 	db	8
   715  00FF35  04                 	db	4
   716  00FF36  04                 	db	4
   717  00FF37  08                 	db	8
   718  00FF38  48                 	db	72
   719  00FF39  54                 	db	84
   720  00FF3A  54                 	db	84
   721  00FF3B  54                 	db	84
   722  00FF3C  24                 	db	36
   723  00FF3D  04                 	db	4
   724  00FF3E  04                 	db	4
   725  00FF3F  3F                 	db	63
   726  00FF40  44                 	db	68
   727  00FF41  24                 	db	36
   728  00FF42  3C                 	db	60
   729  00FF43  40                 	db	64
   730  00FF44  40                 	db	64
   731  00FF45  20                 	db	32
   732  00FF46  7C                 	db	124
   733  00FF47  1C                 	db	28
   734  00FF48  20                 	db	32
   735  00FF49  40                 	db	64
   736  00FF4A  20                 	db	32
   737  00FF4B  1C                 	db	28
   738  00FF4C  3C                 	db	60
   739  00FF4D  40                 	db	64
   740  00FF4E  30                 	db	48
   741  00FF4F  40                 	db	64
   742  00FF50  3C                 	db	60
   743  00FF51  44                 	db	68
   744  00FF52  28                 	db	40
   745  00FF53  10                 	db	16
   746  00FF54  28                 	db	40
   747  00FF55  44                 	db	68
   748  00FF56  4C                 	db	76
   749  00FF57  90                 	db	144
   750  00FF58  90                 	db	144
   751  00FF59  90                 	db	144
   752  00FF5A  7C                 	db	124
   753  00FF5B  44                 	db	68
   754  00FF5C  64                 	db	100
   755  00FF5D  54                 	db	84
   756  00FF5E  4C                 	db	76
   757  00FF5F  44                 	db	68
   758  00FF60  00                 	db	0
   759  00FF61  08                 	db	8
   760  00FF62  36                 	db	54
   761  00FF63  41                 	db	65
   762  00FF64  00                 	db	0
   763  00FF65  00                 	db	0
   764  00FF66  00                 	db	0
   765  00FF67  77                 	db	119
   766  00FF68  00                 	db	0
   767  00FF69  00                 	db	0
   768  00FF6A  00                 	db	0
   769  00FF6B  41                 	db	65
   770  00FF6C  36                 	db	54
   771  00FF6D  08                 	db	8
   772  00FF6E  00                 	db	0
   773  00FF6F  02                 	db	2
   774  00FF70  01                 	db	1
   775  00FF71  02                 	db	2
   776  00FF72  04                 	db	4
   777  00FF73  02                 	db	2
   778  00FF74                     __end_of_font2:
   779                           	opt stack 0
   780  00FF74                     _dpowers:
   781                           	opt stack 0
   782  00FF74  0001               	dw	1
   783  00FF76  000A               	dw	10
   784  00FF78  0064               	dw	100
   785  00FF7A  03E8               	dw	1000
   786  00FF7C  2710               	dw	10000
   787  00FF7E                     __end_of_dpowers:
   788                           	opt stack 0
   789  00FF7E                     _hexpowers:
   790                           	opt stack 0
   791  00FF7E  0001               	dw	1
   792  00FF80  0010               	dw	16
   793  00FF82  0100               	dw	256
   794  00FF84  1000               	dw	4096
   795  00FF86                     __end_of_hexpowers:
   796                           	opt stack 0
   797  0000                     _ADCON1	set	4033
   798  0000                     _CCP2CON	set	4026
   799  0000                     _CCPR2L	set	4027
   800  0000                     _INTCON2bits	set	4081
   801  0000                     _INTCONbits	set	4082
   802  0000                     _OSCCON	set	4051
   803  0000                     _PIE1bits	set	3997
   804  0000                     _PIR1bits	set	3998
   805  0000                     _PIR2bits	set	4001
   806  0000                     _PORTBbits	set	3969
   807  0000                     _PORTCbits	set	3970
   808  0000                     _PORTDbits	set	3971
   809  0000                     _PR2	set	4043
   810  0000                     _RCSTA	set	4011
   811  0000                     _RCSTAbits	set	4011
   812  0000                     _SPBRG	set	4015
   813  0000                     _SPBRGH	set	4016
   814  0000                     _SSPBUF	set	4041
   815  0000                     _SSPCON1	set	4038
   816  0000                     _SSPSTAT	set	4039
   817  0000                     _SSPSTATbits	set	4039
   818  0000                     _T0CON	set	4053
   819  0000                     _T0CONbits	set	4053
   820  0000                     _T1CON	set	4045
   821  0000                     _T1CONbits	set	4045
   822  0000                     _T2CON	set	4042
   823  0000                     _T3CON	set	4017
   824  0000                     _T3CONbits	set	4017
   825  0000                     _TMR0H	set	4055
   826  0000                     _TMR0L	set	4054
   827  0000                     _TMR1H	set	4047
   828  0000                     _TMR1L	set	4046
   829  0000                     _TMR3H	set	4019
   830  0000                     _TMR3L	set	4018
   831  0000                     _TRISA	set	3986
   832  0000                     _TRISB	set	3987
   833  0000                     _TRISBbits	set	3987
   834  0000                     _TRISC	set	3988
   835  0000                     _TRISCbits	set	3988
   836  0000                     _TRISD	set	3989
   837  0000                     _TRISDbits	set	3989
   838  0000                     _TRISE	set	3990
   839  0000                     _TXREG	set	4013
   840  0000                     _TXSTA	set	4012
   841  0000                     _TXSTAbits	set	4012
   842  0000                     _TRMT	set	32097
   843  0000                     _nRBPU	set	32655
   844  00FF86                     STR_2:
   845  00FF86  20                 	db	32
   846  00FF87  54                 	db	84	;'T'
   847  00FF88  65                 	db	101	;'e'
   848  00FF89  6D                 	db	109	;'m'
   849  00FF8A  70                 	db	112	;'p'
   850  00FF8B  65                 	db	101	;'e'
   851  00FF8C  72                 	db	114	;'r'
   852  00FF8D  61                 	db	97	;'a'
   853  00FF8E  74                 	db	116	;'t'
   854  00FF8F  75                 	db	117	;'u'
   855  00FF90  72                 	db	114	;'r'
   856  00FF91  65                 	db	101	;'e'
   857  00FF92  20                 	db	32
   858  00FF93  3D                 	db	61	;'='
   859  00FF94  20                 	db	32
   860  00FF95  25                 	db	37
   861  00FF96  64                 	db	100	;'d'
   862  00FF97  20                 	db	32
   863  00FF98  64                 	db	100	;'d'
   864  00FF99  65                 	db	101	;'e'
   865  00FF9A  67                 	db	103	;'g'
   866  00FF9B  72                 	db	114	;'r'
   867  00FF9C  65                 	db	101	;'e'
   868  00FF9D  65                 	db	101	;'e'
   869  00FF9E  73                 	db	115	;'s'
   870  00FF9F  43                 	db	67	;'C'
   871  00FFA0  20                 	db	32
   872  00FFA1  3D                 	db	61	;'='
   873  00FFA2  20                 	db	32
   874  00FFA3  25                 	db	37
   875  00FFA4  64                 	db	100	;'d'
   876  00FFA5  20                 	db	32
   877  00FFA6  64                 	db	100	;'d'
   878  00FFA7  65                 	db	101	;'e'
   879  00FFA8  67                 	db	103	;'g'
   880  00FFA9  72                 	db	114	;'r'
   881  00FFAA  65                 	db	101	;'e'
   882  00FFAB  65                 	db	101	;'e'
   883  00FFAC  73                 	db	115	;'s'
   884  00FFAD  46                 	db	70	;'F'
   885  00FFAE  0D                 	db	13
   886  00FFAF  0A                 	db	10
   887  00FFB0  00                 	db	0
   888  00FFB1                     STR_1:
   889  00FFB1  25                 	db	37
   890  00FFB2  30                 	db	48	;'0'
   891  00FFB3  32                 	db	50	;'2'
   892  00FFB4  78                 	db	120	;'x'
   893  00FFB5  3A                 	db	58	;':'
   894  00FFB6  25                 	db	37
   895  00FFB7  30                 	db	48	;'0'
   896  00FFB8  32                 	db	50	;'2'
   897  00FFB9  78                 	db	120	;'x'
   898  00FFBA  3A                 	db	58	;':'
   899  00FFBB  25                 	db	37
   900  00FFBC  30                 	db	48	;'0'
   901  00FFBD  32                 	db	50	;'2'
   902  00FFBE  78                 	db	120	;'x'
   903  00FFBF  20                 	db	32
   904  00FFC0  25                 	db	37
   905  00FFC1  30                 	db	48	;'0'
   906  00FFC2  32                 	db	50	;'2'
   907  00FFC3  78                 	db	120	;'x'
   908  00FFC4  2F                 	db	47
   909  00FFC5  25                 	db	37
   910  00FFC6  30                 	db	48	;'0'
   911  00FFC7  32                 	db	50	;'2'
   912  00FFC8  78                 	db	120	;'x'
   913  00FFC9  2F                 	db	47
   914  00FFCA  25                 	db	37
   915  00FFCB  30                 	db	48	;'0'
   916  00FFCC  32                 	db	50	;'2'
   917  00FFCD  78                 	db	120	;'x'
   918  00FFCE  00                 	db	0
   919  00FFCF                     STR_3:
   920  00FFCF  45                 	db	69	;'E'
   921  00FFD0  43                 	db	67	;'C'
   922  00FFD1  45                 	db	69	;'E'
   923  00FFD2  33                 	db	51	;'3'
   924  00FFD3  33                 	db	51	;'3'
   925  00FFD4  30                 	db	48	;'0'
   926  00FFD5  31                 	db	49	;'1'
   927  00FFD6  4C                 	db	76	;'L'
   928  00FFD7  20                 	db	32
   929  00FFD8  53                 	db	83	;'S'
   930  00FFD9  70                 	db	112	;'p'
   931  00FFDA  72                 	db	114	;'r'
   932  00FFDB  69                 	db	105	;'i'
   933  00FFDC  6E                 	db	110	;'n'
   934  00FFDD  67                 	db	103	;'g'
   935  00FFDE  20                 	db	32
   936  00FFDF  32                 	db	50	;'2'
   937  00FFE0  32                 	db	50	;'2'
   938  00FFE1  2D                 	db	45
   939  00FFE2  53                 	db	83	;'S'
   940  00FFE3  31                 	db	49	;'1'
   941  00FFE4  00                 	db	0
   942  00FFE5                     STR_5:
   943  00FFE5  30                 	db	48	;'0'
   944  00FFE6  31                 	db	49	;'1'
   945  00FFE7  32                 	db	50	;'2'
   946  00FFE8  33                 	db	51	;'3'
   947  00FFE9  34                 	db	52	;'4'
   948  00FFEA  35                 	db	53	;'5'
   949  00FFEB  36                 	db	54	;'6'
   950  00FFEC  37                 	db	55	;'7'
   951  00FFED  38                 	db	56	;'8'
   952  00FFEE  39                 	db	57	;'9'
   953  00FFEF  61                 	db	97	;'a'
   954  00FFF0  62                 	db	98	;'b'
   955  00FFF1  63                 	db	99	;'c'
   956  00FFF2  64                 	db	100	;'d'
   957  00FFF3  65                 	db	101	;'e'
   958  00FFF4  66                 	db	102	;'f'
   959  00FFF5  00                 	db	0
   960  00FFF6                     STR_4:
   961  00FFF6  4C                 	db	76	;'L'
   962  00FFF7  41                 	db	65	;'A'
   963  00FFF8  42                 	db	66	;'B'
   964  00FFF9  20                 	db	32
   965  00FFFA  31                 	db	49	;'1'
   966  00FFFB  31                 	db	49	;'1'
   967  00FFFC  20                 	db	32
   968  00FFFD  00                 	db	0
   969                           
   970                           ; #config settings
   971  00FFFE  00                 	db	0	; dummy byte at the end
   972  0000                     
   973                           	psect	cinit
   974  000D56                     __pcinit:
   975                           	opt stack 0
   976  000D56                     start_initialization:
   977                           	opt stack 0
   978  000D56                     __initialization:
   979                           	opt stack 0
   980                           
   981                           ; Clear objects allocated to BANK0 (31 bytes)
   982  000D56  EE00  F0D4         	lfsr	0,__pbssBANK0
   983  000D5A  0E1F               	movlw	31
   984  000D5C                     clear_0:
   985  000D5C  6AEE               	clrf	postinc0,c
   986  000D5E  06E8               	decf	wreg,f,c
   987  000D60  E1FD               	bnz	clear_0
   988                           
   989                           ; Clear objects allocated to COMRAM (43 bytes)
   990  000D62  EE00  F043         	lfsr	0,__pbssCOMRAM
   991  000D66  0E2B               	movlw	43
   992  000D68                     clear_1:
   993  000D68  6AEE               	clrf	postinc0,c
   994  000D6A  06E8               	decf	wreg,f,c
   995  000D6C  E1FD               	bnz	clear_1
   996                           
   997                           ; Initialize objects allocated to BANK1 (126 bytes)
   998                           ; load TBLPTR registers with __pidataBANK1
   999  000D6E  0E5C               	movlw	low __pidataBANK1
  1000  000D70  6EF6               	movwf	tblptrl,c
  1001  000D72  0E0C               	movlw	high __pidataBANK1
  1002  000D74  6EF7               	movwf	tblptrh,c
  1003  000D76  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1004  000D78  6EF8               	movwf	tblptru,c
  1005  000D7A  EE01  F000         	lfsr	0,__pdataBANK1
  1006  000D7E  EE10 F07E          	lfsr	1,126
  1007  000D82                     copy_data0:
  1008  000D82  0009               	tblrd		*+
  1009  000D84  CFF5 FFEE          	movff	tablat,postinc0
  1010  000D88  50E5               	movf	postdec1,w,c
  1011  000D8A  50E1               	movf	fsr1l,w,c
  1012  000D8C  E1FA               	bnz	copy_data0
  1013                           
  1014                           ; Initialize objects allocated to BANK0 (84 bytes)
  1015                           ; load TBLPTR registers with __pidataBANK0
  1016  000D8E  0E00               	movlw	low __pidataBANK0
  1017  000D90  6EF6               	movwf	tblptrl,c
  1018  000D92  0E0F               	movlw	high __pidataBANK0
  1019  000D94  6EF7               	movwf	tblptrh,c
  1020  000D96  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1021  000D98  6EF8               	movwf	tblptru,c
  1022  000D9A  EE00  F080         	lfsr	0,__pdataBANK0
  1023  000D9E  EE10 F054          	lfsr	1,84
  1024  000DA2                     copy_data1:
  1025  000DA2  0009               	tblrd		*+
  1026  000DA4  CFF5 FFEE          	movff	tablat,postinc0
  1027  000DA8  50E5               	movf	postdec1,w,c
  1028  000DAA  50E1               	movf	fsr1l,w,c
  1029  000DAC  E1FA               	bnz	copy_data1
  1030                           
  1031                           ; Initialize objects allocated to COMRAM (2 bytes)
  1032                           ; load TBLPTR registers with __pidataCOMRAM
  1033  000DAE  0E88               	movlw	low __pidataCOMRAM
  1034  000DB0  6EF6               	movwf	tblptrl,c
  1035  000DB2  0E14               	movlw	high __pidataCOMRAM
  1036  000DB4  6EF7               	movwf	tblptrh,c
  1037  000DB6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1038  000DB8  6EF8               	movwf	tblptru,c
  1039  000DBA  0009               	tblrd		*+	;fetch initializer
  1040  000DBC  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1041  000DC0  0009               	tblrd		*+	;fetch initializer
  1042  000DC2  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1043  000DC6                     end_of_initialization:
  1044                           	opt stack 0
  1045  000DC6                     __end_of__initialization:
  1046                           	opt stack 0
  1047  000DC6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1048  000DC8  6EF8               	movwf	tblptru,c
  1049  000DCA  0100               	movlb	0
  1050  000DCC  EF01  F005         	goto	_main	;jump to C main() function
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           postinc0	equ	0xFEE
  1056                           wreg	equ	0xFE8
  1057                           postdec1	equ	0xFE5
  1058                           fsr1l	equ	0xFE1
  1059                           
  1060                           	psect	bssCOMRAM
  1061  000043                     __pbssCOMRAM:
  1062                           	opt stack 0
  1063  000043                     _Nec_code:
  1064                           	opt stack 0
  1065  000043                     	ds	4
  1066  000047                     _Time_Elapsed:
  1067                           	opt stack 0
  1068  000047                     	ds	2
  1069  000049                     _nbr:
  1070                           	opt stack 0
  1071  000049                     	ds	2
  1072  00004B                     _nec_ok:
  1073                           	opt stack 0
  1074  00004B                     	ds	2
  1075  00004D                     _txt:
  1076                           	opt stack 0
  1077  00004D                     	ds	2
  1078  00004F                     _Nec_code1:
  1079                           	opt stack 0
  1080  00004F                     	ds	1
  1081  000050                     _Nec_state:
  1082                           	opt stack 0
  1083  000050                     	ds	1
  1084  000051                     _TempSecond:
  1085                           	opt stack 0
  1086  000051                     	ds	1
  1087  000052                     __tft_type:
  1088                           	opt stack 0
  1089  000052                     	ds	1
  1090  000053                     _alarm_date:
  1091                           	opt stack 0
  1092  000053                     	ds	1
  1093  000054                     _alarm_hour:
  1094                           	opt stack 0
  1095  000054                     	ds	1
  1096  000055                     _alarm_minute:
  1097                           	opt stack 0
  1098  000055                     	ds	1
  1099  000056                     _alarm_second:
  1100                           	opt stack 0
  1101  000056                     	ds	1
  1102  000057                     _bit_count:
  1103                           	opt stack 0
  1104  000057                     	ds	1
  1105  000058                     _colstart:
  1106                           	opt stack 0
  1107  000058                     	ds	1
  1108  000059                     _day:
  1109                           	opt stack 0
  1110  000059                     	ds	1
  1111  00005A                     _dow:
  1112                           	opt stack 0
  1113  00005A                     	ds	1
  1114  00005B                     _found:
  1115                           	opt stack 0
  1116  00005B                     	ds	1
  1117  00005C                     _hour:
  1118                           	opt stack 0
  1119  00005C                     	ds	1
  1120  00005D                     _i:
  1121                           	opt stack 0
  1122  00005D                     	ds	1
  1123  00005E                     _minute:
  1124                           	opt stack 0
  1125  00005E                     	ds	1
  1126  00005F                     _month:
  1127                           	opt stack 0
  1128  00005F                     	ds	1
  1129  000060                     _rowstart:
  1130                           	opt stack 0
  1131  000060                     	ds	1
  1132  000061                     _second:
  1133                           	opt stack 0
  1134  000061                     	ds	1
  1135  000062                     _setup_alarm_hour:
  1136                           	opt stack 0
  1137  000062                     	ds	1
  1138  000063                     _setup_alarm_minute:
  1139                           	opt stack 0
  1140  000063                     	ds	1
  1141  000064                     _setup_alarm_second:
  1142                           	opt stack 0
  1143  000064                     	ds	1
  1144  000065                     _setup_day:
  1145                           	opt stack 0
  1146  000065                     	ds	1
  1147  000066                     _setup_hour:
  1148                           	opt stack 0
  1149  000066                     	ds	1
  1150  000067                     _setup_minute:
  1151                           	opt stack 0
  1152  000067                     	ds	1
  1153  000068                     _setup_month:
  1154                           	opt stack 0
  1155  000068                     	ds	1
  1156  000069                     _setup_second:
  1157                           	opt stack 0
  1158  000069                     	ds	1
  1159  00006A                     _setup_year:
  1160                           	opt stack 0
  1161  00006A                     	ds	1
  1162  00006B                     _tempC:
  1163                           	opt stack 0
  1164  00006B                     	ds	1
  1165  00006C                     _tempF:
  1166                           	opt stack 0
  1167  00006C                     	ds	1
  1168  00006D                     _year:
  1169                           	opt stack 0
  1170  00006D                     	ds	1
  1171                           tblptru	equ	0xFF8
  1172                           tblptrh	equ	0xFF7
  1173                           tblptrl	equ	0xFF6
  1174                           tablat	equ	0xFF5
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           postdec1	equ	0xFE5
  1178                           fsr1l	equ	0xFE1
  1179                           
  1180                           	psect	dataCOMRAM
  1181  00006E                     __pdataCOMRAM:
  1182                           	opt stack 0
  1183  00006E                     _tempSecond:
  1184                           	opt stack 0
  1185  00006E                     	ds	1
  1186  00006F                     _wrap:
  1187                           	opt stack 0
  1188  00006F                     	ds	1
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           postinc0	equ	0xFEE
  1194                           wreg	equ	0xFE8
  1195                           postdec1	equ	0xFE5
  1196                           fsr1l	equ	0xFE1
  1197                           
  1198                           	psect	bssBANK0
  1199  0000D4                     __pbssBANK0:
  1200                           	opt stack 0
  1201  0000D4                     _buffer:
  1202                           	opt stack 0
  1203  0000D4                     	ds	31
  1204                           tblptru	equ	0xFF8
  1205                           tblptrh	equ	0xFF7
  1206                           tblptrl	equ	0xFF6
  1207                           tablat	equ	0xFF5
  1208                           postinc0	equ	0xFEE
  1209                           wreg	equ	0xFE8
  1210                           postdec1	equ	0xFE5
  1211                           fsr1l	equ	0xFE1
  1212                           
  1213                           	psect	dataBANK0
  1214  000080                     __pdataBANK0:
  1215                           	opt stack 0
  1216  000080                     _D1:
  1217                           	opt stack 0
  1218  000080                     	ds	21
  1219  000095                     _D2:
  1220                           	opt stack 0
  1221  000095                     	ds	21
  1222  0000AA                     _D3:
  1223                           	opt stack 0
  1224  0000AA                     	ds	21
  1225  0000BF                     _array1:
  1226                           	opt stack 0
  1227  0000BF                     	ds	21
  1228                           tblptru	equ	0xFF8
  1229                           tblptrh	equ	0xFF7
  1230                           tblptrl	equ	0xFF6
  1231                           tablat	equ	0xFF5
  1232                           postinc0	equ	0xFEE
  1233                           wreg	equ	0xFE8
  1234                           postdec1	equ	0xFE5
  1235                           fsr1l	equ	0xFE1
  1236                           
  1237                           	psect	dataBANK1
  1238  000100                     __pdataBANK1:
  1239                           	opt stack 0
  1240  000100                     _txt1:
  1241                           	opt stack 0
  1242  000100                     	ds	84
  1243  000154                     _color:
  1244                           	opt stack 0
  1245  000154                     	ds	42
  1246                           tblptru	equ	0xFF8
  1247                           tblptrh	equ	0xFF7
  1248                           tblptrl	equ	0xFF6
  1249                           tablat	equ	0xFF5
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           fsr1l	equ	0xFE1
  1254                           
  1255                           	psect	cstackBANK0
  1256  0000F3                     __pcstackBANK0:
  1257                           	opt stack 0
  1258  0000F3                     drawtext@x:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x0
  1262  0000F3                     	ds	1
  1263  0000F4                     drawtext@textsize:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x1
  1267  0000F4                     	ds	2
  1268  0000F6                     drawtext@i:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x3
  1272  0000F6                     	ds	2
  1273  0000F8                     drawtext@cursor_y:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x5
  1277  0000F8                     	ds	1
  1278  0000F9                     drawtext@cursor_x:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x6
  1282  0000F9                     	ds	1
  1283  0000FA                     main@tempF:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x7
  1287  0000FA                     	ds	1
  1288  0000FB                     main@tempC:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0x8
  1292  0000FB                     	ds	1
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           postinc0	equ	0xFEE
  1298                           wreg	equ	0xFE8
  1299                           postdec1	equ	0xFE5
  1300                           fsr1l	equ	0xFE1
  1301                           
  1302                           	psect	cstackCOMRAM
  1303  000001                     __pcstackCOMRAM:
  1304                           	opt stack 0
  1305  000001                     ??_INT0_isr:
  1306  000001                     
  1307                           ; 1 bytes @ 0x0
  1308  000001                     	ds	2
  1309  000003                     ??_chkisr:
  1310                           
  1311                           ; 0 bytes @ 0x2
  1312  000003                     	ds	14
  1313  000011                     ??_isdigit:
  1314  000011                     ?_strlen:
  1315                           	opt stack 0
  1316  000011                     ?___wmul:
  1317                           	opt stack 0
  1318  000011                     ?___lwdiv:
  1319                           	opt stack 0
  1320  000011                     I2C_Read@ack:
  1321                           	opt stack 0
  1322  000011                     I2C_Write@outByte:
  1323                           	opt stack 0
  1324  000011                     putch@c:
  1325                           	opt stack 0
  1326  000011                     spiwrite@x:
  1327                           	opt stack 0
  1328  000011                     OpenUSART@spbrg:
  1329                           	opt stack 0
  1330  000011                     ___wmul@multiplier:
  1331                           	opt stack 0
  1332  000011                     ___lwdiv@dividend:
  1333                           	opt stack 0
  1334  000011                     strcpy@to:
  1335                           	opt stack 0
  1336  000011                     strlen@s:
  1337                           	opt stack 0
  1338  000011                     I2C_Init@c:
  1339                           	opt stack 0
  1340                           
  1341                           ; 4 bytes @ 0x10
  1342  000011                     	ds	1
  1343  000012                     I2C_Read@n:
  1344                           	opt stack 0
  1345  000012                     I2C_Write@n:
  1346                           	opt stack 0
  1347  000012                     spiwrite@spidata:
  1348                           	opt stack 0
  1349  000012                     _isdigit$2066:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x11
  1353  000012                     	ds	1
  1354  000013                     ??_strlen:
  1355  000013                     I2C_Read@inByte:
  1356                           	opt stack 0
  1357  000013                     I2C_Write_Cmd_Only@Cmd:
  1358                           	opt stack 0
  1359  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1360                           	opt stack 0
  1361  000013                     write_command@cmd_:
  1362                           	opt stack 0
  1363  000013                     write_data@data_:
  1364                           	opt stack 0
  1365  000013                     OpenUSART@config:
  1366                           	opt stack 0
  1367  000013                     isdigit@c:
  1368                           	opt stack 0
  1369  000013                     ___wmul@multiplicand:
  1370                           	opt stack 0
  1371  000013                     ___lwdiv@divisor:
  1372                           	opt stack 0
  1373  000013                     strcpy@from:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x12
  1377  000013                     	ds	1
  1378  000014                     ?_DS1621_Read_Temp:
  1379                           	opt stack 0
  1380  000014                     I2C_Write_Cmd_Only@Device:
  1381                           	opt stack 0
  1382  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1383                           	opt stack 0
  1384  000014                     DS3231_Read_Time@Address:
  1385                           	opt stack 0
  1386  000014                     setAddrWindow@y0:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x13
  1390  000014                     	ds	1
  1391  000015                     I2C_Write_Cmd_Write_Data@Device:
  1392                           	opt stack 0
  1393  000015                     DS3231_Read_Time@Device:
  1394                           	opt stack 0
  1395  000015                     setAddrWindow@x1:
  1396                           	opt stack 0
  1397  000015                     ___lwdiv@counter:
  1398                           	opt stack 0
  1399  000015                     ___wmul@product:
  1400                           	opt stack 0
  1401  000015                     strcpy@cp:
  1402                           	opt stack 0
  1403  000015                     strlen@cp:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x14
  1407  000015                     	ds	1
  1408  000016                     DS1621_Init@Device:
  1409                           	opt stack 0
  1410  000016                     DS1621_Read_Temp@Cmd:
  1411                           	opt stack 0
  1412  000016                     setAddrWindow@y1:
  1413                           	opt stack 0
  1414  000016                     ___lwdiv@quotient:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x15
  1418  000016                     	ds	1
  1419  000017                     ?___awdiv:
  1420                           	opt stack 0
  1421  000017                     DS1621_Read_Temp@Data_Ret:
  1422                           	opt stack 0
  1423  000017                     setAddrWindow@x0:
  1424                           	opt stack 0
  1425  000017                     delay_ms@ms:
  1426                           	opt stack 0
  1427  000017                     ___awdiv@dividend:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x16
  1431  000017                     	ds	1
  1432  000018                     ?___lwmod:
  1433                           	opt stack 0
  1434  000018                     DS1621_Read_Temp@Device:
  1435                           	opt stack 0
  1436  000018                     drawPixel@y:
  1437                           	opt stack 0
  1438  000018                     drawFastVLine@y:
  1439                           	opt stack 0
  1440  000018                     fillRectangle@y:
  1441                           	opt stack 0
  1442  000018                     ___lwmod@dividend:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x17
  1446  000018                     	ds	1
  1447  000019                     ??_delay_ms:
  1448  000019                     drawFastVLine@h:
  1449                           	opt stack 0
  1450  000019                     fillRectangle@w:
  1451                           	opt stack 0
  1452  000019                     drawPixel@color:
  1453                           	opt stack 0
  1454  000019                     ___awdiv@divisor:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x18
  1458  000019                     	ds	1
  1459  00001A                     fillRectangle@h:
  1460                           	opt stack 0
  1461  00001A                     drawFastVLine@color:
  1462                           	opt stack 0
  1463  00001A                     ___lwmod@divisor:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x19
  1467  00001A                     	ds	1
  1468  00001B                     drawPixel@x:
  1469                           	opt stack 0
  1470  00001B                     ___awdiv@counter:
  1471                           	opt stack 0
  1472  00001B                     delay_ms@count:
  1473                           	opt stack 0
  1474  00001B                     fillRectangle@color:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x1A
  1478  00001B                     	ds	1
  1479  00001C                     ??_drawFastVLine:
  1480  00001C                     ___awdiv@sign:
  1481                           	opt stack 0
  1482  00001C                     ___lwmod@counter:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x1B
  1486  00001C                     	ds	1
  1487  00001D                     ??_fillRectangle:
  1488  00001D                     ?_printf:
  1489                           	opt stack 0
  1490  00001D                     printf@f:
  1491                           	opt stack 0
  1492  00001D                     ___awdiv@quotient:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x1C
  1496  00001D                     	ds	3
  1497  000020                     drawFastVLine@hi:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x1F
  1501  000020                     	ds	1
  1502  000021                     drawFastVLine@lo:
  1503                           	opt stack 0
  1504  000021                     fillRectangle@hi:
  1505                           	opt stack 0
  1506                           
  1507                           ; 1 bytes @ 0x20
  1508  000021                     	ds	1
  1509  000022                     drawFastVLine@x:
  1510                           	opt stack 0
  1511  000022                     fillRectangle@lo:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x21
  1515  000022                     	ds	1
  1516  000023                     fillRect@y:
  1517                           	opt stack 0
  1518  000023                     fillRectangle@x:
  1519                           	opt stack 0
  1520                           
  1521                           ; 1 bytes @ 0x22
  1522  000023                     	ds	1
  1523  000024                     fillRect@w:
  1524                           	opt stack 0
  1525  000024                     fillScreen@color:
  1526                           	opt stack 0
  1527                           
  1528                           ; 2 bytes @ 0x23
  1529  000024                     	ds	1
  1530  000025                     fillRect@h:
  1531                           	opt stack 0
  1532                           
  1533                           ; 1 bytes @ 0x24
  1534  000025                     	ds	1
  1535  000026                     fillRect@color:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x25
  1539  000026                     	ds	2
  1540  000028                     ??_fillRect:
  1541                           
  1542                           ; 0 bytes @ 0x27
  1543  000028                     	ds	3
  1544  00002B                     ??_printf:
  1545  00002B                     fillRect@x:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x2A
  1549  00002B                     	ds	1
  1550  00002C                     fillRect@i:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x2B
  1554  00002C                     	ds	2
  1555  00002E                     drawChar@y:
  1556                           	opt stack 0
  1557                           
  1558                           ; 1 bytes @ 0x2D
  1559  00002E                     	ds	1
  1560  00002F                     drawChar@c:
  1561                           	opt stack 0
  1562  00002F                     printf@idx:
  1563                           	opt stack 0
  1564                           
  1565                           ; 1 bytes @ 0x2E
  1566  00002F                     	ds	1
  1567  000030                     drawChar@color:
  1568                           	opt stack 0
  1569  000030                     printf@ap:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0x2F
  1573  000030                     	ds	2
  1574  000032                     printf@prec:
  1575                           	opt stack 0
  1576  000032                     drawChar@bg:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x31
  1580  000032                     	ds	1
  1581  000033                     printf@val:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x32
  1585  000033                     	ds	1
  1586  000034                     drawChar@size:
  1587                           	opt stack 0
  1588                           
  1589                           ; 1 bytes @ 0x33
  1590  000034                     	ds	1
  1591  000035                     drawChar@line:
  1592                           	opt stack 0
  1593  000035                     printf@flag:
  1594                           	opt stack 0
  1595                           
  1596                           ; 1 bytes @ 0x34
  1597  000035                     	ds	1
  1598  000036                     drawChar@x:
  1599                           	opt stack 0
  1600  000036                     printf@width:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x35
  1604  000036                     	ds	1
  1605  000037                     drawChar@j:
  1606                           	opt stack 0
  1607                           
  1608                           ; 1 bytes @ 0x36
  1609  000037                     	ds	1
  1610  000038                     drawChar@i:
  1611                           	opt stack 0
  1612  000038                     printf@c:
  1613                           	opt stack 0
  1614                           
  1615                           ; 1 bytes @ 0x37
  1616  000038                     	ds	1
  1617  000039                     drawtext@y:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x38
  1621  000039                     	ds	1
  1622  00003A                     drawtext@_text:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x39
  1626  00003A                     	ds	2
  1627  00003C                     drawtext@color:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x3B
  1631  00003C                     	ds	2
  1632  00003E                     drawtext@bg:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x3D
  1636  00003E                     	ds	2
  1637  000040                     drawtext@size:
  1638                           	opt stack 0
  1639                           
  1640                           ; 1 bytes @ 0x3F
  1641  000040                     	ds	1
  1642  000041                     ??_drawtext:
  1643                           
  1644                           ; 0 bytes @ 0x40
  1645  000041                     	ds	2
  1646  000043                     tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1l	equ	0xFE1
  1654                           
  1655                           ; 0 bytes @ 0x42
  1656 ;;
  1657 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1658 ;;
  1659 ;; *************** function _main *****************
  1660 ;; Defined at:
  1661 ;;		line 175 in file "../Lab11sample.X/Lab11_sample_Sp22.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  tempC           1    8[BANK0 ] char 
  1666 ;;  tempF           1    7[BANK0 ] char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;		None               void
  1669 ;; Registers used:
  1670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;Total ram usage:        2 bytes
  1681 ;; Hardware stack levels required when called:   12
  1682 ;; This function calls:
  1683 ;;		_DS1621_Read_Temp
  1684 ;;		_DS3231_Read_Time
  1685 ;;		_Do_Init
  1686 ;;		___awdiv
  1687 ;;		___wmul
  1688 ;;		_printf
  1689 ;; This function is called by:
  1690 ;;		Startup code after reset
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text0
  1695  000A02                     __ptext0:
  1696                           	opt stack 0
  1697  000A02                     _main:
  1698                           	opt stack 19
  1699                           
  1700                           ;Lab11_sample_Sp22.c: 177: Do_Init();
  1701                           
  1702                           ;incstack = 0
  1703  000A02  EC69  F008         	call	_Do_Init	;wreg free
  1704  000A06  D000               	goto	l4732
  1705  000A08                     l4732:
  1706                           
  1707                           ;Lab11_sample_Sp22.c: 189: {
  1708                           ;Lab11_sample_Sp22.c: 191: DS3231_Read_Time();
  1709  000A08  EC20  F007         	call	_DS3231_Read_Time	;wreg free
  1710                           
  1711                           ;Lab11_sample_Sp22.c: 192: if(tempSecond != second)
  1712  000A0C  5061               	movf	_second,w,c
  1713  000A0E  186E               	xorwf	_tempSecond,w,c
  1714  000A10  B4D8               	btfsc	status,2,c
  1715  000A12  D7FA               	goto	l4732
  1716                           
  1717                           ;Lab11_sample_Sp22.c: 193: {
  1718                           ;Lab11_sample_Sp22.c: 194: tempSecond = second;
  1719  000A14  C061  F06E         	movff	_second,_tempSecond
  1720                           
  1721                           ;Lab11_sample_Sp22.c: 195: signed char tempC = DS1621_Read_Temp();
  1722  000A18  ECE8  F008         	call	_DS1621_Read_Temp	;wreg free
  1723  000A1C  5014               	movf	?_DS1621_Read_Temp,w,c
  1724  000A1E  0100               	movlb	0	; () banked
  1725  000A20  6FFB               	movwf	main@tempC& (0+255),b
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;Lab11_sample_Sp22.c: 196: signed char tempF = (tempC * 9 / 5) + 32;
  1729  000A22  0100               	movlb	0	; () banked
  1730  000A24  51FB               	movf	main@tempC& (0+255),w,b
  1731  000A26  6E11               	movwf	___wmul@multiplier,c
  1732  000A28  6A12               	clrf	___wmul@multiplier+1,c
  1733  000A2A  BE11               	btfsc	___wmul@multiplier,7,c
  1734  000A2C  0612               	decf	___wmul@multiplier+1,f,c
  1735  000A2E  0E00               	movlw	0
  1736  000A30  6E14               	movwf	___wmul@multiplicand+1,c
  1737  000A32  0E09               	movlw	9
  1738  000A34  6E13               	movwf	___wmul@multiplicand,c
  1739  000A36  EC64  F009         	call	___wmul	;wreg free
  1740  000A3A  C011  F017         	movff	?___wmul,___awdiv@dividend
  1741  000A3E  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1742  000A42  0E00               	movlw	0
  1743  000A44  6E1A               	movwf	___awdiv@divisor+1,c
  1744  000A46  0E05               	movlw	5
  1745  000A48  6E19               	movwf	___awdiv@divisor,c
  1746  000A4A  EC58  F005         	call	___awdiv	;wreg free
  1747  000A4E  5017               	movf	?___awdiv,w,c
  1748  000A50  0F20               	addlw	32
  1749  000A52  0100               	movlb	0	; () banked
  1750  000A54  6FFA               	movwf	main@tempF& (0+255),b
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;Lab11_sample_Sp22.c: 197: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,mo
      +                          nth,day,year);
  1754  000A56  0EB1               	movlw	low STR_1
  1755  000A58  6E1D               	movwf	printf@f,c
  1756  000A5A  0EFF               	movlw	high STR_1
  1757  000A5C  6E1E               	movwf	printf@f+1,c
  1758  000A5E  C05C  F01F         	movff	_hour,?_printf+2
  1759  000A62  6A20               	clrf	?_printf+3,c
  1760  000A64  C05E  F021         	movff	_minute,?_printf+4
  1761  000A68  6A22               	clrf	?_printf+5,c
  1762  000A6A  C061  F023         	movff	_second,?_printf+6
  1763  000A6E  6A24               	clrf	?_printf+7,c
  1764  000A70  C05F  F025         	movff	_month,?_printf+8
  1765  000A74  6A26               	clrf	?_printf+9,c
  1766  000A76  C059  F027         	movff	_day,?_printf+10
  1767  000A7A  6A28               	clrf	?_printf+11,c
  1768  000A7C  C06D  F029         	movff	_year,?_printf+12
  1769  000A80  6A2A               	clrf	?_printf+13,c
  1770  000A82  EC0E  F000         	call	_printf	;wreg free
  1771                           
  1772                           ;Lab11_sample_Sp22.c: 198: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC
      +                          , tempF);
  1773  000A86  0E86               	movlw	low STR_2
  1774  000A88  6E1D               	movwf	printf@f,c
  1775  000A8A  0EFF               	movlw	high STR_2
  1776  000A8C  6E1E               	movwf	printf@f+1,c
  1777  000A8E  0100               	movlb	0	; () banked
  1778  000A90  51FB               	movf	main@tempC& (0+255),w,b
  1779  000A92  6E1F               	movwf	?_printf+2,c
  1780  000A94  6A20               	clrf	?_printf+3,c
  1781  000A96  BE1F               	btfsc	?_printf+2,7,c
  1782  000A98  0620               	decf	?_printf+3,f,c
  1783  000A9A  0100               	movlb	0	; () banked
  1784  000A9C  51FA               	movf	main@tempF& (0+255),w,b
  1785  000A9E  6E21               	movwf	?_printf+4,c
  1786  000AA0  6A22               	clrf	?_printf+5,c
  1787  000AA2  BE21               	btfsc	?_printf+4,7,c
  1788  000AA4  0622               	decf	?_printf+5,f,c
  1789  000AA6  EC0E  F000         	call	_printf	;wreg free
  1790  000AAA  D7AE               	goto	l4732
  1791  000AAC  EF0C  F000         	goto	start
  1792  000AB0                     __end_of_main:
  1793                           	opt stack 0
  1794                           tblptru	equ	0xFF8
  1795                           tblptrh	equ	0xFF7
  1796                           tblptrl	equ	0xFF6
  1797                           tablat	equ	0xFF5
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           status	equ	0xFD8
  1803                           
  1804 ;; *************** function _printf *****************
  1805 ;; Defined at:
  1806 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  f               2   28[COMRAM] PTR const unsigned char 
  1809 ;;		 -> STR_2(43), STR_1(30), 
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  idx             1   46[COMRAM] unsigned char 
  1812 ;;  tmpval          4    0        struct .
  1813 ;;  cp              3    0        PTR const unsigned char 
  1814 ;;  width           2   53[COMRAM] int 
  1815 ;;  val             2   50[COMRAM] unsigned int 
  1816 ;;  ap              2   47[COMRAM] PTR void [1]
  1817 ;;		 -> ?_printf(2), 
  1818 ;;  len             2    0        unsigned int 
  1819 ;;  c               1   55[COMRAM] char 
  1820 ;;  flag            1   52[COMRAM] unsigned char 
  1821 ;;  prec            1   49[COMRAM] char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  2   28[COMRAM] int 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1831 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;Total ram usage:       28 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    4
  1838 ;; This function calls:
  1839 ;;		___lwdiv
  1840 ;;		___lwmod
  1841 ;;		___wmul
  1842 ;;		_isdigit
  1843 ;;		_putch
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text1
  1850  00001C                     __ptext1:
  1851                           	opt stack 0
  1852  00001C                     _printf:
  1853                           	opt stack 26
  1854                           
  1855                           ;doprnt.c: 466: va_list ap;
  1856                           ;doprnt.c: 499: signed char c;
  1857                           ;doprnt.c: 501: int width;
  1858                           ;doprnt.c: 506: signed char prec;
  1859                           ;doprnt.c: 508: unsigned char flag;
  1860                           ;doprnt.c: 523: union {
  1861                           ;doprnt.c: 524: unsigned long vd;
  1862                           ;doprnt.c: 525: double integ;
  1863                           ;doprnt.c: 526: } tmpval;
  1864                           ;doprnt.c: 528: unsigned int val;
  1865                           ;doprnt.c: 529: unsigned len;
  1866                           ;doprnt.c: 530: const char * cp;
  1867                           ;doprnt.c: 533: *ap = __va_start();
  1868                           
  1869                           ;incstack = 0
  1870  00001C  0E1F               	movlw	low (?_printf+2)
  1871  00001E  6E30               	movwf	printf@ap,c
  1872  000020  0E00               	movlw	high (?_printf+2)
  1873  000022  6E31               	movwf	printf@ap+1,c
  1874                           
  1875                           ;doprnt.c: 536: while(c = *f++) {
  1876  000024  D199               	goto	l4570
  1877  000026                     l4444:
  1878                           
  1879                           ;doprnt.c: 538: if(c != '%')
  1880  000026  0E25               	movlw	37
  1881  000028  1838               	xorwf	printf@c,w,c
  1882  00002A  B4D8               	btfsc	status,2,c
  1883  00002C  D004               	goto	l4448
  1884                           
  1885                           ;doprnt.c: 540: {
  1886                           ;doprnt.c: 541: (putch(c) );
  1887  00002E  5038               	movf	printf@c,w,c
  1888  000030  EC16  F00A         	call	_putch
  1889                           
  1890                           ;doprnt.c: 542: continue;
  1891  000034  D191               	goto	l4570
  1892  000036                     l4448:
  1893                           
  1894                           ;doprnt.c: 543: }
  1895                           ;doprnt.c: 546: width = 0;
  1896  000036  0E00               	movlw	0
  1897  000038  6E37               	movwf	printf@width+1,c
  1898  00003A  0E00               	movlw	0
  1899  00003C  6E36               	movwf	printf@width,c
  1900                           
  1901                           ;doprnt.c: 548: flag = 0;
  1902  00003E  0E00               	movlw	0
  1903  000040  6E35               	movwf	printf@flag,c
  1904                           
  1905                           ;doprnt.c: 551: switch(*f) {
  1906                           
  1907                           ;doprnt.c: 550: for(;;) {
  1908  000042  D005               	goto	l4454
  1909  000044                     l4450:
  1910                           
  1911                           ;doprnt.c: 580: flag |= 0x04;
  1912  000044  8435               	bsf	printf@flag,2,c
  1913                           
  1914                           ;doprnt.c: 581: f++;
  1915  000046  4A1D               	infsnz	printf@f,f,c
  1916  000048  2A1E               	incf	printf@f+1,f,c
  1917                           
  1918                           ;doprnt.c: 582: continue;
  1919  00004A  D001               	goto	l4454
  1920                           
  1921                           ;doprnt.c: 584: }
  1922  00004C  D00B               	goto	l4456
  1923  00004E                     l4454:
  1924  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  1925  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  1926  000056                     	if	0	;tblptru may be non-zero
  1927  000056                     	endif
  1928  000056                     	if	0	;tblptru may be non-zero
  1929  000056                     	endif
  1930  000056  0008               	tblrd		*
  1931  000058  50F5               	movf	tablat,w,c
  1932                           
  1933                           ; Switch size 1, requested type "space"
  1934                           ; Number of cases is 1, Range of values is 48 to 48
  1935                           ; switch strategies available:
  1936                           ; Name         Instructions Cycles
  1937                           ; simple_byte            4     3 (average)
  1938                           ;	Chosen strategy is simple_byte
  1939  00005A  0A30               	xorlw	48	; case 48
  1940  00005C  B4D8               	btfsc	status,2,c
  1941  00005E  D7F2               	goto	l4450
  1942                           
  1943                           ;doprnt.c: 585: break;
  1944  000060  D001               	goto	l4456
  1945                           
  1946                           ;doprnt.c: 586: }
  1947  000062  D7F5               	goto	l4454
  1948  000064                     l4456:
  1949                           
  1950                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1951  000064  C01D  FFF6         	movff	printf@f,tblptrl
  1952  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  1953  00006C                     	if	0	;tblptru may be non-zero
  1954  00006C                     	endif
  1955  00006C                     	if	0	;tblptru may be non-zero
  1956  00006C                     	endif
  1957  00006C  0008               	tblrd		*
  1958  00006E  50F5               	movf	tablat,w,c
  1959  000070  EC78  F009         	call	_isdigit
  1960  000074  A0D8               	btfss	status,0,c
  1961  000076  D03B               	goto	l4472
  1962                           
  1963                           ;doprnt.c: 598: width = 0;
  1964  000078  0E00               	movlw	0
  1965  00007A  6E37               	movwf	printf@width+1,c
  1966  00007C  0E00               	movlw	0
  1967  00007E  6E36               	movwf	printf@width,c
  1968  000080  D000               	goto	l4460
  1969  000082                     l4460:
  1970                           
  1971                           ;doprnt.c: 600: width *= 10;
  1972  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  1973  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  1974  00008A  0E00               	movlw	0
  1975  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  1976  00008E  0E0A               	movlw	10
  1977  000090  6E13               	movwf	___wmul@multiplicand,c
  1978  000092  EC64  F009         	call	___wmul	;wreg free
  1979  000096  C011  F036         	movff	?___wmul,printf@width
  1980  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  1981                           
  1982                           ;doprnt.c: 601: width += *f++ - '0';
  1983  00009E  0ED0               	movlw	208
  1984  0000A0  6E2B               	movwf	??_printf& (0+255),c
  1985  0000A2  0EFF               	movlw	255
  1986  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  1987  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  1988  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  1989  0000AE                     	if	0	;tblptru may be non-zero
  1990  0000AE                     	endif
  1991  0000AE                     	if	0	;tblptru may be non-zero
  1992  0000AE                     	endif
  1993  0000AE  0008               	tblrd		*
  1994  0000B0  50F5               	movf	tablat,w,c
  1995  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  1996  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  1997  0000B6  502B               	movf	??_printf,w,c
  1998  0000B8  262D               	addwf	??_printf+2,f,c
  1999  0000BA  502C               	movf	??_printf+1,w,c
  2000  0000BC  222E               	addwfc	??_printf+3,f,c
  2001  0000BE  502D               	movf	??_printf+2,w,c
  2002  0000C0  2636               	addwf	printf@width,f,c
  2003  0000C2  502E               	movf	??_printf+3,w,c
  2004  0000C4  2237               	addwfc	printf@width+1,f,c
  2005  0000C6  4A1D               	infsnz	printf@f,f,c
  2006  0000C8  2A1E               	incf	printf@f+1,f,c
  2007                           
  2008                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2009  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2010  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2011  0000D2                     	if	0	;tblptru may be non-zero
  2012  0000D2                     	endif
  2013  0000D2                     	if	0	;tblptru may be non-zero
  2014  0000D2                     	endif
  2015  0000D2  0008               	tblrd		*
  2016  0000D4  50F5               	movf	tablat,w,c
  2017  0000D6  EC78  F009         	call	_isdigit
  2018  0000DA  A0D8               	btfss	status,0,c
  2019  0000DC  D008               	goto	l4472
  2020  0000DE  D7D1               	goto	l4460
  2021                           
  2022                           ;doprnt.c: 608: }
  2023                           ;doprnt.c: 635: switch(c = *f++) {
  2024  0000E0  D006               	goto	l4472
  2025                           
  2026                           ;doprnt.c: 638: goto alldone;
  2027                           
  2028                           ;doprnt.c: 637: case 0:
  2029  0000E2  D148               	goto	l652
  2030                           
  2031                           ;doprnt.c: 698: case 'i':
  2032                           ;doprnt.c: 699: break;
  2033                           
  2034                           ;doprnt.c: 697: case 'd':
  2035  0000E4  D01B               	goto	l615
  2036  0000E6                     l4468:
  2037                           
  2038                           ;doprnt.c: 721: flag |= 0x80;
  2039  0000E6  8E35               	bsf	printf@flag,7,c
  2040                           
  2041                           ;doprnt.c: 723: break;
  2042  0000E8  D019               	goto	l615
  2043                           
  2044                           ;doprnt.c: 813: continue;
  2045                           
  2046                           ;doprnt.c: 802: default:
  2047  0000EA  D136               	goto	l4570
  2048                           
  2049                           ;doprnt.c: 822: }
  2050  0000EC  D017               	goto	l615
  2051  0000EE                     l4472:
  2052  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2053  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2054  0000F6  4A1D               	infsnz	printf@f,f,c
  2055  0000F8  2A1E               	incf	printf@f+1,f,c
  2056  0000FA                     	if	0	;tblptru may be non-zero
  2057  0000FA                     	endif
  2058  0000FA                     	if	0	;tblptru may be non-zero
  2059  0000FA                     	endif
  2060  0000FA  0008               	tblrd		*
  2061  0000FC  CFF5 F038          	movff	tablat,printf@c
  2062  000100  5038               	movf	printf@c,w,c
  2063                           
  2064                           ; Switch size 1, requested type "space"
  2065                           ; Number of cases is 4, Range of values is 0 to 120
  2066                           ; switch strategies available:
  2067                           ; Name         Instructions Cycles
  2068                           ; simple_byte           13     7 (average)
  2069                           ;	Chosen strategy is simple_byte
  2070  000102  0A00               	xorlw	0	; case 0
  2071  000104  B4D8               	btfsc	status,2,c
  2072  000106  D136               	goto	l652
  2073  000108  0A64               	xorlw	100	; case 100
  2074  00010A  B4D8               	btfsc	status,2,c
  2075  00010C  D007               	goto	l615
  2076  00010E  0A0D               	xorlw	13	; case 105
  2077  000110  B4D8               	btfsc	status,2,c
  2078  000112  D004               	goto	l615
  2079  000114  0A11               	xorlw	17	; case 120
  2080  000116  B4D8               	btfsc	status,2,c
  2081  000118  D7E6               	goto	l4468
  2082  00011A  D11E               	goto	l4570
  2083  00011C                     l615:
  2084                           
  2085                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2086  00011C  BE35               	btfsc	printf@flag,7,c
  2087  00011E  D015               	goto	l4484
  2088                           
  2089                           ;doprnt.c: 1253: {
  2090                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2091  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2092  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2093  000128  CFDE F033          	movff	postinc2,printf@val
  2094  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2095  000130  0E02               	movlw	2
  2096  000132  2630               	addwf	printf@ap,f,c
  2097  000134  0E00               	movlw	0
  2098  000136  2231               	addwfc	printf@ap+1,f,c
  2099                           
  2100                           ;doprnt.c: 1261: if((int)val < 0) {
  2101  000138  AE34               	btfss	printf@val+1,7,c
  2102  00013A  D04E               	goto	l4518
  2103                           
  2104                           ;doprnt.c: 1262: flag |= 0x03;
  2105  00013C  0E03               	movlw	3
  2106  00013E  1235               	iorwf	printf@flag,f,c
  2107                           
  2108                           ;doprnt.c: 1263: val = -val;
  2109  000140  6C33               	negf	printf@val,c
  2110  000142  1E34               	comf	printf@val+1,f,c
  2111  000144  B0D8               	btfsc	status,0,c
  2112  000146  2A34               	incf	printf@val+1,f,c
  2113                           
  2114                           ;doprnt.c: 1264: }
  2115                           ;doprnt.c: 1266: }
  2116  000148  D047               	goto	l4518
  2117  00014A                     l4484:
  2118                           
  2119                           ;doprnt.c: 1268: else
  2120                           ;doprnt.c: 1273: {
  2121                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2122  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2123  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2124  000152  CFDE F033          	movff	postinc2,printf@val
  2125  000156  CFDD F034          	movff	postdec2,printf@val+1
  2126  00015A  0E02               	movlw	2
  2127  00015C  2630               	addwf	printf@ap,f,c
  2128  00015E  0E00               	movlw	0
  2129  000160  2231               	addwfc	printf@ap+1,f,c
  2130                           
  2131                           ;doprnt.c: 1287: }
  2132                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2133  000162  D03A               	goto	l4518
  2134  000164                     l4488:
  2135                           
  2136                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2137  000164  0E01               	movlw	1
  2138  000166  6E38               	movwf	printf@c,c
  2139  000168                     l4490:
  2140  000168  0E05               	movlw	5
  2141  00016A  1838               	xorwf	printf@c,w,c
  2142  00016C  B4D8               	btfsc	status,2,c
  2143  00016E  D03D               	goto	l4520
  2144  000170  D001               	goto	l4494
  2145  000172  D03B               	goto	l4520
  2146  000174                     l4494:
  2147                           
  2148                           ;doprnt.c: 1306: if(val < dpowers[c])
  2149  000174  5038               	movf	printf@c,w,c
  2150  000176  0D02               	mullw	2
  2151  000178  0E74               	movlw	low _dpowers
  2152  00017A  24F3               	addwf	prodl,w,c
  2153  00017C  6EF6               	movwf	tblptrl,c
  2154  00017E  0EFF               	movlw	high _dpowers
  2155  000180  20F4               	addwfc	prodh,w,c
  2156  000182  6EF7               	movwf	tblptrh,c
  2157  000184                     	if	0	;There are less than 3 active tblptr bytes
  2158  000184                     	endif
  2159  000184  0009               	tblrd		*+
  2160  000186  50F5               	movf	tablat,w,c
  2161  000188  5C33               	subwf	printf@val,w,c
  2162  00018A  0009               	tblrd		*+
  2163  00018C  50F5               	movf	tablat,w,c
  2164  00018E  5834               	subwfb	printf@val+1,w,c
  2165  000190  A0D8               	btfss	status,0,c
  2166  000192  D02B               	goto	l4520
  2167  000194  D001               	goto	l4498
  2168                           
  2169                           ;doprnt.c: 1307: break;
  2170  000196  D029               	goto	l4520
  2171  000198                     l4498:
  2172  000198  2A38               	incf	printf@c,f,c
  2173  00019A  D7E6               	goto	l4490
  2174                           
  2175                           ;doprnt.c: 1309: break;
  2176  00019C  D026               	goto	l4520
  2177  00019E                     l4502:
  2178                           
  2179                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2180  00019E  0E01               	movlw	1
  2181  0001A0  6E38               	movwf	printf@c,c
  2182  0001A2                     l4504:
  2183  0001A2  0E04               	movlw	4
  2184  0001A4  1838               	xorwf	printf@c,w,c
  2185  0001A6  B4D8               	btfsc	status,2,c
  2186  0001A8  D020               	goto	l4520
  2187  0001AA  D001               	goto	l4508
  2188  0001AC  D01E               	goto	l4520
  2189  0001AE                     l4508:
  2190                           
  2191                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2192  0001AE  5038               	movf	printf@c,w,c
  2193  0001B0  0D02               	mullw	2
  2194  0001B2  0E7E               	movlw	low _hexpowers
  2195  0001B4  24F3               	addwf	prodl,w,c
  2196  0001B6  6EF6               	movwf	tblptrl,c
  2197  0001B8  0EFF               	movlw	high _hexpowers
  2198  0001BA  20F4               	addwfc	prodh,w,c
  2199  0001BC  6EF7               	movwf	tblptrh,c
  2200  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2201  0001BE                     	endif
  2202  0001BE  0009               	tblrd		*+
  2203  0001C0  50F5               	movf	tablat,w,c
  2204  0001C2  5C33               	subwf	printf@val,w,c
  2205  0001C4  0009               	tblrd		*+
  2206  0001C6  50F5               	movf	tablat,w,c
  2207  0001C8  5834               	subwfb	printf@val+1,w,c
  2208  0001CA  A0D8               	btfss	status,0,c
  2209  0001CC  D00E               	goto	l4520
  2210  0001CE  D001               	goto	l4512
  2211                           
  2212                           ;doprnt.c: 1318: break;
  2213  0001D0  D00C               	goto	l4520
  2214  0001D2                     l4512:
  2215  0001D2  2A38               	incf	printf@c,f,c
  2216  0001D4  D7E6               	goto	l4504
  2217                           
  2218                           ;doprnt.c: 1336: }
  2219                           
  2220                           ;doprnt.c: 1320: break;
  2221  0001D6  D009               	goto	l4520
  2222  0001D8                     l4518:
  2223  0001D8  5035               	movf	printf@flag,w,c
  2224  0001DA  0B80               	andlw	128
  2225                           
  2226                           ; Switch size 1, requested type "space"
  2227                           ; Number of cases is 2, Range of values is 0 to 128
  2228                           ; switch strategies available:
  2229                           ; Name         Instructions Cycles
  2230                           ; simple_byte            7     4 (average)
  2231                           ;	Chosen strategy is simple_byte
  2232  0001DC  0A00               	xorlw	0	; case 0
  2233  0001DE  B4D8               	btfsc	status,2,c
  2234  0001E0  D7C1               	goto	l4488
  2235  0001E2  0A80               	xorlw	128	; case 128
  2236  0001E4  B4D8               	btfsc	status,2,c
  2237  0001E6  D7DB               	goto	l4502
  2238  0001E8  D000               	goto	l4520
  2239  0001EA                     l4520:
  2240                           
  2241                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2242  0001EA  5036               	movf	printf@width,w,c
  2243  0001EC  1037               	iorwf	printf@width+1,w,c
  2244  0001EE  B4D8               	btfsc	status,2,c
  2245  0001F0  D00A               	goto	l4526
  2246  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2247  0001F6  0E03               	movlw	3
  2248  0001F8  162B               	andwf	??_printf,f,c
  2249  0001FA  B4D8               	btfsc	status,2,c
  2250  0001FC  D004               	goto	l4526
  2251                           
  2252                           ;doprnt.c: 1346: width--;
  2253  0001FE  0636               	decf	printf@width,f,c
  2254  000200  A0D8               	btfss	status,0,c
  2255  000202  0637               	decf	printf@width+1,f,c
  2256  000204  D000               	goto	l4526
  2257  000206                     l4526:
  2258                           
  2259                           ;doprnt.c: 1381: if(width > c)
  2260  000206  0E80               	movlw	128
  2261  000208  BE38               	btfsc	printf@c,7,c
  2262  00020A  0E7F               	movlw	127
  2263  00020C  6E2B               	movwf	??_printf& (0+255),c
  2264  00020E  5036               	movf	printf@width,w,c
  2265  000210  5C38               	subwf	printf@c,w,c
  2266  000212  5037               	movf	printf@width+1,w,c
  2267  000214  0A80               	xorlw	128
  2268  000216  582B               	subwfb	??_printf& (0+255),w,c
  2269  000218  B0D8               	btfsc	status,0,c
  2270  00021A  D007               	goto	l4530
  2271                           
  2272                           ;doprnt.c: 1382: width -= c;
  2273  00021C  5038               	movf	printf@c,w,c
  2274  00021E  5E36               	subwf	printf@width,f,c
  2275  000220  0E00               	movlw	0
  2276  000222  BE38               	btfsc	printf@c,7,c
  2277  000224  0EFF               	movlw	255
  2278  000226  5A37               	subwfb	printf@width+1,f,c
  2279  000228  D005               	goto	l4532
  2280  00022A                     l4530:
  2281                           
  2282                           ;doprnt.c: 1383: else
  2283                           ;doprnt.c: 1384: width = 0;
  2284  00022A  0E00               	movlw	0
  2285  00022C  6E37               	movwf	printf@width+1,c
  2286  00022E  0E00               	movlw	0
  2287  000230  6E36               	movwf	printf@width,c
  2288  000232  D000               	goto	l4532
  2289  000234                     l4532:
  2290                           
  2291                           ;doprnt.c: 1387: if(flag & 0x04) {
  2292  000234  A435               	btfss	printf@flag,2,c
  2293  000236  D01A               	goto	l4544
  2294                           
  2295                           ;doprnt.c: 1392: if(flag & 0x03)
  2296  000238  C035  F02B         	movff	printf@flag,??_printf
  2297  00023C  0E03               	movlw	3
  2298  00023E  162B               	andwf	??_printf,f,c
  2299  000240  B4D8               	btfsc	status,2,c
  2300  000242  D004               	goto	l4538
  2301                           
  2302                           ;doprnt.c: 1393: (putch('-') );
  2303  000244  0E2D               	movlw	45
  2304  000246  EC16  F00A         	call	_putch
  2305  00024A  D000               	goto	l4538
  2306  00024C                     l4538:
  2307                           
  2308                           ;doprnt.c: 1415: if(width)
  2309  00024C  5036               	movf	printf@width,w,c
  2310  00024E  1037               	iorwf	printf@width+1,w,c
  2311  000250  B4D8               	btfsc	status,2,c
  2312  000252  D026               	goto	l4554
  2313  000254                     l4540:
  2314                           
  2315                           ;doprnt.c: 1417: (putch('0') );
  2316  000254  0E30               	movlw	48
  2317  000256  EC16  F00A         	call	_putch
  2318                           
  2319                           ;doprnt.c: 1418: while(--width);
  2320  00025A  0636               	decf	printf@width,f,c
  2321  00025C  A0D8               	btfss	status,0,c
  2322  00025E  0637               	decf	printf@width+1,f,c
  2323  000260  5036               	movf	printf@width,w,c
  2324  000262  1037               	iorwf	printf@width+1,w,c
  2325  000264  B4D8               	btfsc	status,2,c
  2326  000266  D01C               	goto	l4554
  2327  000268  D7F5               	goto	l4540
  2328                           
  2329                           ;doprnt.c: 1420: } else
  2330  00026A  D01A               	goto	l4554
  2331  00026C                     l4544:
  2332                           
  2333                           ;doprnt.c: 1422: {
  2334                           ;doprnt.c: 1424: if(width
  2335                           ;doprnt.c: 1428: )
  2336  00026C  5036               	movf	printf@width,w,c
  2337  00026E  1037               	iorwf	printf@width+1,w,c
  2338  000270  B4D8               	btfsc	status,2,c
  2339  000272  D00C               	goto	l4550
  2340  000274                     l4546:
  2341                           
  2342                           ;doprnt.c: 1430: (putch(' ') );
  2343  000274  0E20               	movlw	32
  2344  000276  EC16  F00A         	call	_putch
  2345                           
  2346                           ;doprnt.c: 1431: while(--width);
  2347  00027A  0636               	decf	printf@width,f,c
  2348  00027C  A0D8               	btfss	status,0,c
  2349  00027E  0637               	decf	printf@width+1,f,c
  2350  000280  5036               	movf	printf@width,w,c
  2351  000282  1037               	iorwf	printf@width+1,w,c
  2352  000284  B4D8               	btfsc	status,2,c
  2353  000286  D002               	goto	l4550
  2354  000288  D7F5               	goto	l4546
  2355  00028A  D000               	goto	l4550
  2356  00028C                     l4550:
  2357                           
  2358                           ;doprnt.c: 1438: if(flag & 0x03)
  2359  00028C  C035  F02B         	movff	printf@flag,??_printf
  2360  000290  0E03               	movlw	3
  2361  000292  162B               	andwf	??_printf,f,c
  2362  000294  B4D8               	btfsc	status,2,c
  2363  000296  D004               	goto	l4554
  2364                           
  2365                           ;doprnt.c: 1439: (putch('-') );
  2366  000298  0E2D               	movlw	45
  2367  00029A  EC16  F00A         	call	_putch
  2368  00029E  D000               	goto	l4554
  2369  0002A0                     l4554:
  2370                           
  2371                           ;doprnt.c: 1469: }
  2372                           ;doprnt.c: 1472: prec = c;
  2373  0002A0  C038  F032         	movff	printf@c,printf@prec
  2374                           
  2375                           ;doprnt.c: 1474: while(prec--) {
  2376  0002A4  D053               	goto	l4568
  2377                           
  2378                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2379  0002A6  D045               	goto	l4564
  2380  0002A8                     l4556:
  2381                           
  2382                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2383  0002A8  5032               	movf	printf@prec,w,c
  2384  0002AA  0D02               	mullw	2
  2385  0002AC  0E74               	movlw	low _dpowers
  2386  0002AE  24F3               	addwf	prodl,w,c
  2387  0002B0  6EF6               	movwf	tblptrl,c
  2388  0002B2  0EFF               	movlw	high _dpowers
  2389  0002B4  20F4               	addwfc	prodh,w,c
  2390  0002B6  6EF7               	movwf	tblptrh,c
  2391  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2392  0002B8                     	endif
  2393  0002B8  0009               	tblrd		*+
  2394  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2395  0002BE  000A               	tblrd		*-
  2396  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2397  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2398  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2399  0002CC  EC52  F007         	call	___lwdiv	;wreg free
  2400  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2401  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2402  0002D8  0E00               	movlw	0
  2403  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2404  0002DC  0E0A               	movlw	10
  2405  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2406  0002E0  ECFA  F007         	call	___lwmod	;wreg free
  2407  0002E4  5018               	movf	?___lwmod,w,c
  2408  0002E6  0F30               	addlw	48
  2409  0002E8  6E38               	movwf	printf@c,c
  2410                           
  2411                           ;doprnt.c: 1491: break;
  2412  0002EA  D02C               	goto	l4566
  2413  0002EC                     l4558:
  2414                           
  2415                           ;doprnt.c: 1499: {
  2416                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2417  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2418  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2419  0002F4  5032               	movf	printf@prec,w,c
  2420  0002F6  0D02               	mullw	2
  2421  0002F8  0E7E               	movlw	low _hexpowers
  2422  0002FA  24F3               	addwf	prodl,w,c
  2423  0002FC  6EF6               	movwf	tblptrl,c
  2424  0002FE  0EFF               	movlw	high _hexpowers
  2425  000300  20F4               	addwfc	prodh,w,c
  2426  000302  6EF7               	movwf	tblptrh,c
  2427  000304                     	if	0	;There are less than 3 active tblptr bytes
  2428  000304                     	endif
  2429  000304  0009               	tblrd		*+
  2430  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2431  00030A  000A               	tblrd		*-
  2432  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2433  000310  EC52  F007         	call	___lwdiv	;wreg free
  2434  000314  5011               	movf	?___lwdiv,w,c
  2435  000316  0B0F               	andlw	15
  2436  000318  6E2F               	movwf	printf@idx,c
  2437                           
  2438                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2439  00031A  502F               	movf	printf@idx,w,c
  2440  00031C  0D01               	mullw	1
  2441  00031E  0EE5               	movlw	low STR_5
  2442  000320  24F3               	addwf	prodl,w,c
  2443  000322  6EF6               	movwf	tblptrl,c
  2444  000324  0EFF               	movlw	high STR_5
  2445  000326  20F4               	addwfc	prodh,w,c
  2446  000328  6EF7               	movwf	tblptrh,c
  2447  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2448  00032A                     	endif
  2449  00032A  0008               	tblrd		*
  2450  00032C  CFF5 F038          	movff	tablat,printf@c
  2451                           
  2452                           ;doprnt.c: 1523: }
  2453                           
  2454                           ;doprnt.c: 1508: }
  2455                           ;doprnt.c: 1510: break;
  2456  000330  D009               	goto	l4566
  2457  000332                     l4564:
  2458  000332  5035               	movf	printf@flag,w,c
  2459  000334  0B80               	andlw	128
  2460                           
  2461                           ; Switch size 1, requested type "space"
  2462                           ; Number of cases is 2, Range of values is 0 to 128
  2463                           ; switch strategies available:
  2464                           ; Name         Instructions Cycles
  2465                           ; simple_byte            7     4 (average)
  2466                           ;	Chosen strategy is simple_byte
  2467  000336  0A00               	xorlw	0	; case 0
  2468  000338  B4D8               	btfsc	status,2,c
  2469  00033A  D7B6               	goto	l4556
  2470  00033C  0A80               	xorlw	128	; case 128
  2471  00033E  B4D8               	btfsc	status,2,c
  2472  000340  D7D5               	goto	l4558
  2473  000342  D000               	goto	l4566
  2474  000344                     l4566:
  2475                           
  2476                           ;doprnt.c: 1524: (putch(c) );
  2477  000344  5038               	movf	printf@c,w,c
  2478  000346  EC16  F00A         	call	_putch
  2479  00034A  D000               	goto	l4568
  2480  00034C                     l4568:
  2481  00034C  0632               	decf	printf@prec,f,c
  2482  00034E  2832               	incf	printf@prec,w,c
  2483  000350  B4D8               	btfsc	status,2,c
  2484  000352  D002               	goto	l4570
  2485  000354  D7EE               	goto	l4564
  2486  000356  D000               	goto	l4570
  2487  000358                     l4570:
  2488  000358  C01D  FFF6         	movff	printf@f,tblptrl
  2489  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2490  000360  4A1D               	infsnz	printf@f,f,c
  2491  000362  2A1E               	incf	printf@f+1,f,c
  2492  000364                     	if	0	;tblptru may be non-zero
  2493  000364                     	endif
  2494  000364                     	if	0	;tblptru may be non-zero
  2495  000364                     	endif
  2496  000364  0008               	tblrd		*
  2497  000366  CFF5 F038          	movff	tablat,printf@c
  2498  00036A  5038               	movf	printf@c,w,c
  2499  00036C  B4D8               	btfsc	status,2,c
  2500  00036E  D002               	goto	l652
  2501  000370  D65A               	goto	l4444
  2502  000372  D000               	goto	l652
  2503  000374                     l652:
  2504  000374  0012               	return		;funcret
  2505  000376                     __end_of_printf:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           prodh	equ	0xFF4
  2512                           prodl	equ	0xFF3
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           postdec1	equ	0xFE5
  2516                           fsr1l	equ	0xFE1
  2517                           postinc2	equ	0xFDE
  2518                           postdec2	equ	0xFDD
  2519                           fsr2h	equ	0xFDA
  2520                           fsr2l	equ	0xFD9
  2521                           status	equ	0xFD8
  2522                           
  2523 ;; *************** function _putch *****************
  2524 ;; Defined at:
  2525 ;;		line 110 in file "../Lab11sample.X/Lab11_sample_Sp22.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  c               1    wreg     unsigned char 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;  c               1   16[COMRAM] unsigned char 
  2530 ;; Return value:  Size  Location     Type
  2531 ;;		None               void
  2532 ;; Registers used:
  2533 ;;		wreg
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;Total ram usage:        1 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    3
  2546 ;; This function calls:
  2547 ;;		Nothing
  2548 ;; This function is called by:
  2549 ;;		_printf
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text2
  2554  00142C                     __ptext2:
  2555                           	opt stack 0
  2556  00142C                     _putch:
  2557                           	opt stack 26
  2558                           
  2559                           ;incstack = 0
  2560                           ;putch@c stored from wreg
  2561  00142C  6E11               	movwf	putch@c,c
  2562                           
  2563                           ;Lab11_sample_Sp22.c: 112: while (!TRMT);
  2564  00142E  D000               	goto	l337
  2565  001430                     l337:
  2566  001430  A2AC               	btfss	4012,1,c	;volatile
  2567  001432  D7FE               	goto	l337
  2568                           
  2569                           ;Lab11_sample_Sp22.c: 113: TXREG = c;
  2570  001434  C011  FFAD         	movff	putch@c,4013	;volatile
  2571  001438  0012               	return		;funcret
  2572  00143A                     __end_of_putch:
  2573                           	opt stack 0
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           postdec1	equ	0xFE5
  2583                           fsr1l	equ	0xFE1
  2584                           postinc2	equ	0xFDE
  2585                           postdec2	equ	0xFDD
  2586                           fsr2h	equ	0xFDA
  2587                           fsr2l	equ	0xFD9
  2588                           status	equ	0xFD8
  2589                           
  2590 ;; *************** function _isdigit *****************
  2591 ;; Defined at:
  2592 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;  c               1    wreg     unsigned char 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  c               1   18[COMRAM] unsigned char 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;		None               void
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;Total ram usage:        3 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    3
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_printf
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text3
  2621  0012F0                     __ptext3:
  2622                           	opt stack 0
  2623  0012F0                     _isdigit:
  2624                           	opt stack 26
  2625                           
  2626                           ;incstack = 0
  2627                           ;isdigit@c stored from wreg
  2628  0012F0  6E13               	movwf	isdigit@c,c
  2629  0012F2  0E00               	movlw	0
  2630  0012F4  6E12               	movwf	_isdigit$2066,c
  2631  0012F6  0E3A               	movlw	58
  2632  0012F8  6013               	cpfslt	isdigit@c,c
  2633  0012FA  D006               	goto	l4326
  2634  0012FC  0E2F               	movlw	47
  2635  0012FE  6413               	cpfsgt	isdigit@c,c
  2636  001300  D003               	goto	l4326
  2637  001302  0E01               	movlw	1
  2638  001304  6E12               	movwf	_isdigit$2066,c
  2639  001306  D000               	goto	l4326
  2640  001308                     l4326:
  2641  001308  C012  F011         	movff	_isdigit$2066,??_isdigit
  2642  00130C  3011               	rrcf	??_isdigit,w,c
  2643  00130E  D000               	goto	l1119
  2644  001310                     l1119:
  2645  001310  0012               	return		;funcret
  2646  001312                     __end_of_isdigit:
  2647                           	opt stack 0
  2648                           tblptru	equ	0xFF8
  2649                           tblptrh	equ	0xFF7
  2650                           tblptrl	equ	0xFF6
  2651                           tablat	equ	0xFF5
  2652                           prodh	equ	0xFF4
  2653                           prodl	equ	0xFF3
  2654                           postinc0	equ	0xFEE
  2655                           wreg	equ	0xFE8
  2656                           postdec1	equ	0xFE5
  2657                           fsr1l	equ	0xFE1
  2658                           postinc2	equ	0xFDE
  2659                           postdec2	equ	0xFDD
  2660                           fsr2h	equ	0xFDA
  2661                           fsr2l	equ	0xFD9
  2662                           status	equ	0xFD8
  2663                           
  2664 ;; *************** function ___lwmod *****************
  2665 ;; Defined at:
  2666 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  dividend        2   23[COMRAM] unsigned int 
  2669 ;;  divisor         2   25[COMRAM] unsigned int 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  counter         1   27[COMRAM] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  2   23[COMRAM] unsigned int 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;Total ram usage:        5 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    3
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_printf
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text4
  2696  000FF4                     __ptext4:
  2697                           	opt stack 0
  2698  000FF4                     ___lwmod:
  2699                           	opt stack 26
  2700                           
  2701                           ;incstack = 0
  2702  000FF4  501A               	movf	___lwmod@divisor,w,c
  2703  000FF6  101B               	iorwf	___lwmod@divisor+1,w,c
  2704  000FF8  B4D8               	btfsc	status,2,c
  2705  000FFA  D01D               	goto	l1221
  2706  000FFC  0E01               	movlw	1
  2707  000FFE  6E1C               	movwf	___lwmod@counter,c
  2708  001000  D005               	goto	l4358
  2709  001002                     l4356:
  2710  001002  90D8               	bcf	status,0,c
  2711  001004  361A               	rlcf	___lwmod@divisor,f,c
  2712  001006  361B               	rlcf	___lwmod@divisor+1,f,c
  2713  001008  2A1C               	incf	___lwmod@counter,f,c
  2714  00100A  D000               	goto	l4358
  2715  00100C                     l4358:
  2716  00100C  BE1B               	btfsc	___lwmod@divisor+1,7,c
  2717  00100E  D002               	goto	l4360
  2718  001010  D7F8               	goto	l4356
  2719  001012  D000               	goto	l4360
  2720  001014                     l4360:
  2721  001014  501A               	movf	___lwmod@divisor,w,c
  2722  001016  5C18               	subwf	___lwmod@dividend,w,c
  2723  001018  501B               	movf	___lwmod@divisor+1,w,c
  2724  00101A  5819               	subwfb	___lwmod@dividend+1,w,c
  2725  00101C  A0D8               	btfss	status,0,c
  2726  00101E  D005               	goto	l4364
  2727  001020  501A               	movf	___lwmod@divisor,w,c
  2728  001022  5E18               	subwf	___lwmod@dividend,f,c
  2729  001024  501B               	movf	___lwmod@divisor+1,w,c
  2730  001026  5A19               	subwfb	___lwmod@dividend+1,f,c
  2731  001028  D000               	goto	l4364
  2732  00102A                     l4364:
  2733  00102A  90D8               	bcf	status,0,c
  2734  00102C  321B               	rrcf	___lwmod@divisor+1,f,c
  2735  00102E  321A               	rrcf	___lwmod@divisor,f,c
  2736  001030  2E1C               	decfsz	___lwmod@counter,f,c
  2737  001032  D7F0               	goto	l4360
  2738  001034  D000               	goto	l1221
  2739  001036                     l1221:
  2740  001036  C018  F018         	movff	___lwmod@dividend,?___lwmod
  2741  00103A  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  2742  00103E  0012               	return		;funcret
  2743  001040                     __end_of___lwmod:
  2744                           	opt stack 0
  2745                           tblptru	equ	0xFF8
  2746                           tblptrh	equ	0xFF7
  2747                           tblptrl	equ	0xFF6
  2748                           tablat	equ	0xFF5
  2749                           prodh	equ	0xFF4
  2750                           prodl	equ	0xFF3
  2751                           postinc0	equ	0xFEE
  2752                           wreg	equ	0xFE8
  2753                           postdec1	equ	0xFE5
  2754                           fsr1l	equ	0xFE1
  2755                           postinc2	equ	0xFDE
  2756                           postdec2	equ	0xFDD
  2757                           fsr2h	equ	0xFDA
  2758                           fsr2l	equ	0xFD9
  2759                           status	equ	0xFD8
  2760                           
  2761 ;; *************** function ___lwdiv *****************
  2762 ;; Defined at:
  2763 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  dividend        2   16[COMRAM] unsigned int 
  2766 ;;  divisor         2   18[COMRAM] unsigned int 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  quotient        2   21[COMRAM] unsigned int 
  2769 ;;  counter         1   20[COMRAM] unsigned char 
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  2   16[COMRAM] unsigned int 
  2772 ;; Registers used:
  2773 ;;		wreg, status,2, status,0
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;Total ram usage:        7 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    3
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		_printf
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text5
  2794  000EA4                     __ptext5:
  2795                           	opt stack 0
  2796  000EA4                     ___lwdiv:
  2797                           	opt stack 26
  2798                           
  2799                           ;incstack = 0
  2800  000EA4  0E00               	movlw	0
  2801  000EA6  6E17               	movwf	___lwdiv@quotient+1,c
  2802  000EA8  0E00               	movlw	0
  2803  000EAA  6E16               	movwf	___lwdiv@quotient,c
  2804  000EAC  5013               	movf	___lwdiv@divisor,w,c
  2805  000EAE  1014               	iorwf	___lwdiv@divisor+1,w,c
  2806  000EB0  B4D8               	btfsc	status,2,c
  2807  000EB2  D021               	goto	l1211
  2808  000EB4  0E01               	movlw	1
  2809  000EB6  6E15               	movwf	___lwdiv@counter,c
  2810  000EB8  D005               	goto	l4338
  2811  000EBA                     l4336:
  2812  000EBA  90D8               	bcf	status,0,c
  2813  000EBC  3613               	rlcf	___lwdiv@divisor,f,c
  2814  000EBE  3614               	rlcf	___lwdiv@divisor+1,f,c
  2815  000EC0  2A15               	incf	___lwdiv@counter,f,c
  2816  000EC2  D000               	goto	l4338
  2817  000EC4                     l4338:
  2818  000EC4  BE14               	btfsc	___lwdiv@divisor+1,7,c
  2819  000EC6  D002               	goto	l4340
  2820  000EC8  D7F8               	goto	l4336
  2821  000ECA  D000               	goto	l4340
  2822  000ECC                     l4340:
  2823  000ECC  90D8               	bcf	status,0,c
  2824  000ECE  3616               	rlcf	___lwdiv@quotient,f,c
  2825  000ED0  3617               	rlcf	___lwdiv@quotient+1,f,c
  2826  000ED2  5013               	movf	___lwdiv@divisor,w,c
  2827  000ED4  5C11               	subwf	___lwdiv@dividend,w,c
  2828  000ED6  5014               	movf	___lwdiv@divisor+1,w,c
  2829  000ED8  5812               	subwfb	___lwdiv@dividend+1,w,c
  2830  000EDA  A0D8               	btfss	status,0,c
  2831  000EDC  D006               	goto	l4348
  2832  000EDE  5013               	movf	___lwdiv@divisor,w,c
  2833  000EE0  5E11               	subwf	___lwdiv@dividend,f,c
  2834  000EE2  5014               	movf	___lwdiv@divisor+1,w,c
  2835  000EE4  5A12               	subwfb	___lwdiv@dividend+1,f,c
  2836  000EE6  8016               	bsf	___lwdiv@quotient,0,c
  2837  000EE8  D000               	goto	l4348
  2838  000EEA                     l4348:
  2839  000EEA  90D8               	bcf	status,0,c
  2840  000EEC  3214               	rrcf	___lwdiv@divisor+1,f,c
  2841  000EEE  3213               	rrcf	___lwdiv@divisor,f,c
  2842  000EF0  2E15               	decfsz	___lwdiv@counter,f,c
  2843  000EF2  D7EC               	goto	l4340
  2844  000EF4  D000               	goto	l1211
  2845  000EF6                     l1211:
  2846  000EF6  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  2847  000EFA  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2848  000EFE  0012               	return		;funcret
  2849  000F00                     __end_of___lwdiv:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           prodh	equ	0xFF4
  2856                           prodl	equ	0xFF3
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postdec1	equ	0xFE5
  2860                           fsr1l	equ	0xFE1
  2861                           postinc2	equ	0xFDE
  2862                           postdec2	equ	0xFDD
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function ___awdiv *****************
  2868 ;; Defined at:
  2869 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  dividend        2   22[COMRAM] int 
  2872 ;;  divisor         2   24[COMRAM] int 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  quotient        2   28[COMRAM] int 
  2875 ;;  sign            1   27[COMRAM] unsigned char 
  2876 ;;  counter         1   26[COMRAM] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  2   22[COMRAM] int 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;Total ram usage:        8 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    3
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_main
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text6
  2901  000AB0                     __ptext6:
  2902                           	opt stack 0
  2903  000AB0                     ___awdiv:
  2904                           	opt stack 27
  2905                           
  2906                           ;incstack = 0
  2907  000AB0  0E00               	movlw	0
  2908  000AB2  6E1C               	movwf	___awdiv@sign,c
  2909  000AB4  AE1A               	btfss	___awdiv@divisor+1,7,c
  2910  000AB6  D007               	goto	l4636
  2911  000AB8  6C19               	negf	___awdiv@divisor,c
  2912  000ABA  1E1A               	comf	___awdiv@divisor+1,f,c
  2913  000ABC  B0D8               	btfsc	status,0,c
  2914  000ABE  2A1A               	incf	___awdiv@divisor+1,f,c
  2915  000AC0  0E01               	movlw	1
  2916  000AC2  6E1C               	movwf	___awdiv@sign,c
  2917  000AC4  D000               	goto	l4636
  2918  000AC6                     l4636:
  2919  000AC6  AE18               	btfss	___awdiv@dividend+1,7,c
  2920  000AC8  D007               	goto	l4642
  2921  000ACA  6C17               	negf	___awdiv@dividend,c
  2922  000ACC  1E18               	comf	___awdiv@dividend+1,f,c
  2923  000ACE  B0D8               	btfsc	status,0,c
  2924  000AD0  2A18               	incf	___awdiv@dividend+1,f,c
  2925  000AD2  0E01               	movlw	1
  2926  000AD4  1A1C               	xorwf	___awdiv@sign,f,c
  2927  000AD6  D000               	goto	l4642
  2928  000AD8                     l4642:
  2929  000AD8  0E00               	movlw	0
  2930  000ADA  6E1E               	movwf	___awdiv@quotient+1,c
  2931  000ADC  0E00               	movlw	0
  2932  000ADE  6E1D               	movwf	___awdiv@quotient,c
  2933  000AE0  5019               	movf	___awdiv@divisor,w,c
  2934  000AE2  101A               	iorwf	___awdiv@divisor+1,w,c
  2935  000AE4  B4D8               	btfsc	status,2,c
  2936  000AE6  D021               	goto	l4664
  2937  000AE8  0E01               	movlw	1
  2938  000AEA  6E1B               	movwf	___awdiv@counter,c
  2939  000AEC  D005               	goto	l4650
  2940  000AEE                     l4648:
  2941  000AEE  90D8               	bcf	status,0,c
  2942  000AF0  3619               	rlcf	___awdiv@divisor,f,c
  2943  000AF2  361A               	rlcf	___awdiv@divisor+1,f,c
  2944  000AF4  2A1B               	incf	___awdiv@counter,f,c
  2945  000AF6  D000               	goto	l4650
  2946  000AF8                     l4650:
  2947  000AF8  BE1A               	btfsc	___awdiv@divisor+1,7,c
  2948  000AFA  D002               	goto	l4652
  2949  000AFC  D7F8               	goto	l4648
  2950  000AFE  D000               	goto	l4652
  2951  000B00                     l4652:
  2952  000B00  90D8               	bcf	status,0,c
  2953  000B02  361D               	rlcf	___awdiv@quotient,f,c
  2954  000B04  361E               	rlcf	___awdiv@quotient+1,f,c
  2955  000B06  5019               	movf	___awdiv@divisor,w,c
  2956  000B08  5C17               	subwf	___awdiv@dividend,w,c
  2957  000B0A  501A               	movf	___awdiv@divisor+1,w,c
  2958  000B0C  5818               	subwfb	___awdiv@dividend+1,w,c
  2959  000B0E  A0D8               	btfss	status,0,c
  2960  000B10  D006               	goto	l4660
  2961  000B12  5019               	movf	___awdiv@divisor,w,c
  2962  000B14  5E17               	subwf	___awdiv@dividend,f,c
  2963  000B16  501A               	movf	___awdiv@divisor+1,w,c
  2964  000B18  5A18               	subwfb	___awdiv@dividend+1,f,c
  2965  000B1A  801D               	bsf	___awdiv@quotient,0,c
  2966  000B1C  D000               	goto	l4660
  2967  000B1E                     l4660:
  2968  000B1E  90D8               	bcf	status,0,c
  2969  000B20  321A               	rrcf	___awdiv@divisor+1,f,c
  2970  000B22  3219               	rrcf	___awdiv@divisor,f,c
  2971  000B24  2E1B               	decfsz	___awdiv@counter,f,c
  2972  000B26  D7EC               	goto	l4652
  2973  000B28  D000               	goto	l4664
  2974  000B2A                     l4664:
  2975  000B2A  501C               	movf	___awdiv@sign,w,c
  2976  000B2C  B4D8               	btfsc	status,2,c
  2977  000B2E  D005               	goto	l4668
  2978  000B30  6C1D               	negf	___awdiv@quotient,c
  2979  000B32  1E1E               	comf	___awdiv@quotient+1,f,c
  2980  000B34  B0D8               	btfsc	status,0,c
  2981  000B36  2A1E               	incf	___awdiv@quotient+1,f,c
  2982  000B38  D000               	goto	l4668
  2983  000B3A                     l4668:
  2984  000B3A  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  2985  000B3E  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  2986  000B42  D000               	goto	l881
  2987  000B44                     l881:
  2988  000B44  0012               	return		;funcret
  2989  000B46                     __end_of___awdiv:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           prodh	equ	0xFF4
  2996                           prodl	equ	0xFF3
  2997                           postinc0	equ	0xFEE
  2998                           wreg	equ	0xFE8
  2999                           postdec1	equ	0xFE5
  3000                           fsr1l	equ	0xFE1
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           fsr2h	equ	0xFDA
  3004                           fsr2l	equ	0xFD9
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _Do_Init *****************
  3008 ;; Defined at:
  3009 ;;		line 153 in file "../Lab11sample.X/Lab11_sample_Sp22.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:   11
  3030 ;; This function calls:
  3031 ;;		_DS1621_Init
  3032 ;;		_I2C_Init
  3033 ;;		_Initialize_Screen
  3034 ;;		_init_INTERRUPT
  3035 ;;		_init_UART
  3036 ;; This function is called by:
  3037 ;;		_main
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text7
  3042  0010D2                     __ptext7:
  3043                           	opt stack 0
  3044  0010D2                     _Do_Init:
  3045                           	opt stack 19
  3046                           
  3047                           ;Lab11_sample_Sp22.c: 155: init_UART();
  3048                           
  3049                           ;incstack = 0
  3050  0010D2  ECCE  F009         	call	_init_UART	;wreg free
  3051                           
  3052                           ;Lab11_sample_Sp22.c: 156: Initialize_Screen();
  3053  0010D6  ECA3  F005         	call	_Initialize_Screen	;wreg free
  3054                           
  3055                           ;Lab11_sample_Sp22.c: 157: init_INTERRUPT();
  3056  0010DA  EC1F  F009         	call	_init_INTERRUPT	;wreg free
  3057                           
  3058                           ;Lab11_sample_Sp22.c: 158: OSCCON=0x70;
  3059  0010DE  0E70               	movlw	112
  3060  0010E0  6ED3               	movwf	4051,c	;volatile
  3061                           
  3062                           ;Lab11_sample_Sp22.c: 160: ADCON1= 0x0F;
  3063  0010E2  0E0F               	movlw	15
  3064  0010E4  6EC1               	movwf	4033,c	;volatile
  3065                           
  3066                           ;Lab11_sample_Sp22.c: 161: TRISA = 0x01;
  3067  0010E6  0E01               	movlw	1
  3068  0010E8  6E92               	movwf	3986,c	;volatile
  3069                           
  3070                           ;Lab11_sample_Sp22.c: 162: TRISB = 0x00;
  3071  0010EA  0E00               	movlw	0
  3072  0010EC  6E93               	movwf	3987,c	;volatile
  3073                           
  3074                           ;Lab11_sample_Sp22.c: 163: TRISC = 0x00;
  3075  0010EE  0E00               	movlw	0
  3076  0010F0  6E94               	movwf	3988,c	;volatile
  3077                           
  3078                           ;Lab11_sample_Sp22.c: 164: TRISD = 0x00;
  3079  0010F2  0E00               	movlw	0
  3080  0010F4  6E95               	movwf	3989,c	;volatile
  3081                           
  3082                           ;Lab11_sample_Sp22.c: 165: TRISE = 0x00;
  3083  0010F6  0E00               	movlw	0
  3084  0010F8  6E96               	movwf	3990,c	;volatile
  3085                           
  3086                           ;Lab11_sample_Sp22.c: 166: nRBPU=0;
  3087  0010FA  9EF1               	bcf	intcon2,7,c	;volatile
  3088                           
  3089                           ;Lab11_sample_Sp22.c: 167: I2C_Init(100000);
  3090  0010FC  0EA0               	movlw	160
  3091  0010FE  6E11               	movwf	I2C_Init@c,c
  3092  001100  0E86               	movlw	134
  3093  001102  6E12               	movwf	I2C_Init@c+1,c
  3094  001104  0E01               	movlw	1
  3095  001106  6E13               	movwf	I2C_Init@c+2,c
  3096  001108  0E00               	movlw	0
  3097  00110A  6E14               	movwf	I2C_Init@c+3,c
  3098  00110C  EC29  F00A         	call	_I2C_Init	;wreg free
  3099                           
  3100                           ;Lab11_sample_Sp22.c: 169: DS1621_Init();
  3101  001110  EC99  F009         	call	_DS1621_Init	;wreg free
  3102  001114  0012               	return		;funcret
  3103  001116                     __end_of_Do_Init:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon2	equ	0xFF1
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1l	equ	0xFE1
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function _init_UART *****************
  3123 ;; Defined at:
  3124 ;;		line 116 in file "../Lab11sample.X/Lab11_sample_Sp22.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;		None               void
  3131 ;; Registers used:
  3132 ;;		wreg, status,2, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:        0 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    4
  3145 ;; This function calls:
  3146 ;;		_OpenUSART
  3147 ;; This function is called by:
  3148 ;;		_Do_Init
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text8
  3153  00139C                     __ptext8:
  3154                           	opt stack 0
  3155  00139C                     _init_UART:
  3156                           	opt stack 25
  3157                           
  3158                           ;Lab11_sample_Sp22.c: 118: OpenUSART (0b01111111 & 0b10111111 &
  3159                           ;Lab11_sample_Sp22.c: 119: 0b11111110 & 0b11111101 & 0b11111111 &
  3160                           ;Lab11_sample_Sp22.c: 120: 0b11111111, 25);
  3161                           
  3162                           ;incstack = 0
  3163  00139C  0E00               	movlw	0
  3164  00139E  6E12               	movwf	OpenUSART@spbrg+1,c
  3165  0013A0  0E19               	movlw	25
  3166  0013A2  6E11               	movwf	OpenUSART@spbrg,c
  3167  0013A4  0E3C               	movlw	60
  3168  0013A6  ECE8  F006         	call	_OpenUSART
  3169                           
  3170                           ;Lab11_sample_Sp22.c: 121: OSCCON = 0x70;
  3171  0013AA  0E70               	movlw	112
  3172  0013AC  6ED3               	movwf	4051,c	;volatile
  3173  0013AE  0012               	return		;funcret
  3174  0013B0                     __end_of_init_UART:
  3175                           	opt stack 0
  3176                           tblptru	equ	0xFF8
  3177                           tblptrh	equ	0xFF7
  3178                           tblptrl	equ	0xFF6
  3179                           tablat	equ	0xFF5
  3180                           prodh	equ	0xFF4
  3181                           prodl	equ	0xFF3
  3182                           intcon2	equ	0xFF1
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1l	equ	0xFE1
  3187                           postinc2	equ	0xFDE
  3188                           postdec2	equ	0xFDD
  3189                           fsr2h	equ	0xFDA
  3190                           fsr2l	equ	0xFD9
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function _OpenUSART *****************
  3194 ;; Defined at:
  3195 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  config          1    wreg     unsigned char 
  3198 ;;  spbrg           2   16[COMRAM] unsigned int 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  config          1   18[COMRAM] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;		None               void
  3203 ;; Registers used:
  3204 ;;		wreg, status,2
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;Total ram usage:        3 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    3
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_init_UART
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text9
  3225  000DD0                     __ptext9:
  3226                           	opt stack 0
  3227  000DD0                     _OpenUSART:
  3228                           	opt stack 25
  3229                           
  3230                           ;incstack = 0
  3231                           ;OpenUSART@config stored from wreg
  3232  000DD0  6E13               	movwf	OpenUSART@config,c
  3233  000DD2  0E00               	movlw	0
  3234  000DD4  6EAC               	movwf	4012,c	;volatile
  3235  000DD6  0E00               	movlw	0
  3236  000DD8  6EAB               	movwf	4011,c	;volatile
  3237  000DDA  A013               	btfss	OpenUSART@config,0,c
  3238  000DDC  D002               	goto	l4124
  3239  000DDE  88AC               	bsf	4012,4,c	;volatile
  3240  000DE0  D000               	goto	l4124
  3241  000DE2                     l4124:
  3242  000DE2  A213               	btfss	OpenUSART@config,1,c
  3243  000DE4  D003               	goto	l4128
  3244  000DE6  8CAC               	bsf	4012,6,c	;volatile
  3245  000DE8  8CAB               	bsf	4011,6,c	;volatile
  3246  000DEA  D000               	goto	l4128
  3247  000DEC                     l4128:
  3248  000DEC  A413               	btfss	OpenUSART@config,2,c
  3249  000DEE  D002               	goto	l4132
  3250  000DF0  8EAC               	bsf	4012,7,c	;volatile
  3251  000DF2  D000               	goto	l4132
  3252  000DF4                     l4132:
  3253  000DF4  A613               	btfss	OpenUSART@config,3,c
  3254  000DF6  D002               	goto	l676
  3255  000DF8  88AB               	bsf	4011,4,c	;volatile
  3256  000DFA  D002               	goto	l4136
  3257  000DFC                     l676:
  3258  000DFC  8AAB               	bsf	4011,5,c	;volatile
  3259  000DFE  D000               	goto	l4136
  3260  000E00                     l4136:
  3261  000E00  B813               	btfsc	OpenUSART@config,4,c
  3262  000E02  84AC               	bsf	4012,2,c	;volatile
  3263  000E04  989E               	bcf	3998,4,c	;volatile
  3264  000E06  AA13               	btfss	OpenUSART@config,5,c
  3265  000E08  D002               	goto	l4144
  3266  000E0A  86AB               	bsf	4011,3,c	;volatile
  3267  000E0C  D000               	goto	l4144
  3268  000E0E                     l4144:
  3269  000E0E  AC13               	btfss	OpenUSART@config,6,c
  3270  000E10  D002               	goto	l680
  3271  000E12  8A9D               	bsf	3997,5,c	;volatile
  3272  000E14  D001               	goto	l681
  3273  000E16                     l680:
  3274  000E16  9A9D               	bcf	3997,5,c	;volatile
  3275  000E18                     l681:
  3276  000E18  9A9E               	bcf	3998,5,c	;volatile
  3277  000E1A  AE13               	btfss	OpenUSART@config,7,c
  3278  000E1C  D002               	goto	l682
  3279  000E1E  889D               	bsf	3997,4,c	;volatile
  3280  000E20  D001               	goto	l683
  3281  000E22                     l682:
  3282  000E22  989D               	bcf	3997,4,c	;volatile
  3283  000E24                     l683:
  3284  000E24  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3285  000E28  5012               	movf	OpenUSART@spbrg+1,w,c
  3286  000E2A  6EB0               	movwf	4016,c	;volatile
  3287  000E2C  8AAC               	bsf	4012,5,c	;volatile
  3288  000E2E  8EAB               	bsf	4011,7,c	;volatile
  3289  000E30  9C94               	bcf	3988,6,c	;volatile
  3290  000E32  8E94               	bsf	3988,7,c	;volatile
  3291  000E34  B8AC               	btfsc	4012,4,c	;volatile
  3292  000E36  BEAC               	btfsc	4012,7,c	;volatile
  3293  000E38  D002               	goto	l685
  3294  000E3A  8C94               	bsf	3988,6,c	;volatile
  3295  000E3C  D000               	goto	l685
  3296  000E3E                     l685:
  3297  000E3E  0012               	return		;funcret
  3298  000E40                     __end_of_OpenUSART:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon2	equ	0xFF1
  3307                           postinc0	equ	0xFEE
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           fsr1l	equ	0xFE1
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _init_INTERRUPT *****************
  3318 ;; Defined at:
  3319 ;;		line 130 in file "../Lab11sample.X/Lab11_sample_Sp22.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;		None
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg, status,2
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;Total ram usage:        0 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    3
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_Do_Init
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text10
  3348  00123E                     __ptext10:
  3349                           	opt stack 0
  3350  00123E                     _init_INTERRUPT:
  3351                           	opt stack 26
  3352                           
  3353                           ;Lab11_sample_Sp22.c: 132: INTCONbits.INT0IF = 0;
  3354                           
  3355                           ;incstack = 0
  3356  00123E  92F2               	bcf	intcon,1,c	;volatile
  3357                           
  3358                           ;Lab11_sample_Sp22.c: 133: INTCON2bits.INTEDG0 = 0;
  3359  001240  9CF1               	bcf	intcon2,6,c	;volatile
  3360                           
  3361                           ;Lab11_sample_Sp22.c: 134: INTCONbits.INT0IE = 1;
  3362  001242  88F2               	bsf	intcon,4,c	;volatile
  3363                           
  3364                           ;Lab11_sample_Sp22.c: 135: TMR1H = 0;
  3365  001244  0E00               	movlw	0
  3366  001246  6ECF               	movwf	4047,c	;volatile
  3367                           
  3368                           ;Lab11_sample_Sp22.c: 136: TMR1L = 0;
  3369  001248  0E00               	movlw	0
  3370  00124A  6ECE               	movwf	4046,c	;volatile
  3371                           
  3372                           ;Lab11_sample_Sp22.c: 137: PIR1bits.TMR1IF = 0;
  3373  00124C  909E               	bcf	3998,0,c	;volatile
  3374                           
  3375                           ;Lab11_sample_Sp22.c: 138: PIE1bits.TMR1IE = 1;
  3376  00124E  809D               	bsf	3997,0,c	;volatile
  3377                           
  3378                           ;Lab11_sample_Sp22.c: 139: INTCONbits.PEIE = 1;
  3379  001250  8CF2               	bsf	intcon,6,c	;volatile
  3380                           
  3381                           ;Lab11_sample_Sp22.c: 140: INTCONbits.GIE = 1;
  3382  001252  8EF2               	bsf	intcon,7,c	;volatile
  3383                           
  3384                           ;Lab11_sample_Sp22.c: 141: nec_ok = 0;
  3385  001254  0E00               	movlw	0
  3386  001256  6E4C               	movwf	_nec_ok+1,c
  3387  001258  0E00               	movlw	0
  3388  00125A  6E4B               	movwf	_nec_ok,c
  3389                           
  3390                           ;Lab11_sample_Sp22.c: 142: Nec_code = 0x00;
  3391  00125C  0E00               	movlw	0
  3392  00125E  6E43               	movwf	_Nec_code,c
  3393  001260  0E00               	movlw	0
  3394  001262  6E44               	movwf	_Nec_code+1,c
  3395  001264  0E00               	movlw	0
  3396  001266  6E45               	movwf	_Nec_code+2,c
  3397  001268  0E00               	movlw	0
  3398  00126A  6E46               	movwf	_Nec_code+3,c
  3399  00126C  0012               	return		;funcret
  3400  00126E                     __end_of_init_INTERRUPT:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon	equ	0xFF2
  3409                           intcon2	equ	0xFF1
  3410                           postinc0	equ	0xFEE
  3411                           wreg	equ	0xFE8
  3412                           postdec1	equ	0xFE5
  3413                           fsr1l	equ	0xFE1
  3414                           postinc2	equ	0xFDE
  3415                           postdec2	equ	0xFDD
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _Initialize_Screen *****************
  3421 ;; Defined at:
  3422 ;;		line 277 in file "../Lab11sample.X/Lab11_sample_Sp22.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:   10
  3443 ;; This function calls:
  3444 ;;		_LCD_Reset
  3445 ;;		_TFT_GreenTab_Initialize
  3446 ;;		_drawtext
  3447 ;;		_fillScreen
  3448 ;;		_strcpy
  3449 ;; This function is called by:
  3450 ;;		_Do_Init
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text11
  3455  000B46                     __ptext11:
  3456                           	opt stack 0
  3457  000B46                     _Initialize_Screen:
  3458                           	opt stack 19
  3459                           
  3460                           ;Lab11_sample_Sp22.c: 279: LCD_Reset();
  3461                           
  3462                           ;incstack = 0
  3463  000B46  ECE2  F009         	call	_LCD_Reset	;wreg free
  3464                           
  3465                           ;Lab11_sample_Sp22.c: 280: TFT_GreenTab_Initialize();
  3466  000B4A  EC4F  F009         	call	_TFT_GreenTab_Initialize	;wreg free
  3467                           
  3468                           ;Lab11_sample_Sp22.c: 281: fillScreen(0x0000);
  3469  000B4E  0E00               	movlw	0
  3470  000B50  6E25               	movwf	fillScreen@color+1,c
  3471  000B52  0E00               	movlw	0
  3472  000B54  6E24               	movwf	fillScreen@color,c
  3473  000B56  ECA8  F009         	call	_fillScreen	;wreg free
  3474                           
  3475                           ;Lab11_sample_Sp22.c: 284: txt = buffer;
  3476  000B5A  0ED4               	movlw	low _buffer
  3477  000B5C  6E4D               	movwf	_txt,c
  3478  000B5E  0E00               	movlw	high _buffer
  3479  000B60  6E4E               	movwf	_txt+1,c
  3480                           
  3481                           ;Lab11_sample_Sp22.c: 285: strcpy(txt, "ECE3301L Spring 22-S1");
  3482  000B62  C04D  F011         	movff	_txt,strcpy@to
  3483  000B66  C04E  F012         	movff	_txt+1,strcpy@to+1
  3484  000B6A  0ECF               	movlw	low STR_3
  3485  000B6C  6E13               	movwf	strcpy@from,c
  3486  000B6E  0EFF               	movlw	high STR_3
  3487  000B70  6E14               	movwf	strcpy@from+1,c
  3488  000B72  EC06  F009         	call	_strcpy	;wreg free
  3489                           
  3490                           ;Lab11_sample_Sp22.c: 286: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3491  000B76  0E02               	movlw	2
  3492  000B78  6E39               	movwf	drawtext@y,c
  3493  000B7A  C04D  F03A         	movff	_txt,drawtext@_text
  3494  000B7E  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  3495  000B82  0EFF               	movlw	255
  3496  000B84  6E3D               	movwf	drawtext@color+1,c
  3497  000B86  683C               	setf	drawtext@color,c
  3498  000B88  0E00               	movlw	0
  3499  000B8A  6E3F               	movwf	drawtext@bg+1,c
  3500  000B8C  0E00               	movlw	0
  3501  000B8E  6E3E               	movwf	drawtext@bg,c
  3502  000B90  0E01               	movlw	1
  3503  000B92  6E40               	movwf	drawtext@size,c
  3504  000B94  0E02               	movlw	2
  3505  000B96  EC95  F003         	call	_drawtext
  3506                           
  3507                           ;Lab11_sample_Sp22.c: 288: strcpy(txt, "LAB 11 ");
  3508  000B9A  C04D  F011         	movff	_txt,strcpy@to
  3509  000B9E  C04E  F012         	movff	_txt+1,strcpy@to+1
  3510  000BA2  0EF6               	movlw	low STR_4
  3511  000BA4  6E13               	movwf	strcpy@from,c
  3512  000BA6  0EFF               	movlw	high STR_4
  3513  000BA8  6E14               	movwf	strcpy@from+1,c
  3514  000BAA  EC06  F009         	call	_strcpy	;wreg free
  3515                           
  3516                           ;Lab11_sample_Sp22.c: 289: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3517  000BAE  0E0A               	movlw	10
  3518  000BB0  6E39               	movwf	drawtext@y,c
  3519  000BB2  C04D  F03A         	movff	_txt,drawtext@_text
  3520  000BB6  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  3521  000BBA  0EFF               	movlw	255
  3522  000BBC  6E3D               	movwf	drawtext@color+1,c
  3523  000BBE  683C               	setf	drawtext@color,c
  3524  000BC0  0E00               	movlw	0
  3525  000BC2  6E3F               	movwf	drawtext@bg+1,c
  3526  000BC4  0E00               	movlw	0
  3527  000BC6  6E3E               	movwf	drawtext@bg,c
  3528  000BC8  0E01               	movlw	1
  3529  000BCA  6E40               	movwf	drawtext@size,c
  3530  000BCC  0E32               	movlw	50
  3531  000BCE  EC95  F003         	call	_drawtext
  3532  000BD2  0012               	return		;funcret
  3533  000BD4                     __end_of_Initialize_Screen:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           intcon2	equ	0xFF1
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postdec1	equ	0xFE5
  3546                           fsr1l	equ	0xFE1
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function _strcpy *****************
  3554 ;; Defined at:
  3555 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  to              2   16[COMRAM] PTR unsigned char 
  3558 ;;		 -> NULL(0), buffer(31), 
  3559 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3560 ;;		 -> STR_4(8), STR_3(22), 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3563 ;;		 -> NULL(0), buffer(31), 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  2   16[COMRAM] PTR unsigned char 
  3566 ;; Registers used:
  3567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;Total ram usage:        6 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    3
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_Initialize_Screen
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text12
  3588  00120C                     __ptext12:
  3589                           	opt stack 0
  3590  00120C                     _strcpy:
  3591                           	opt stack 25
  3592                           
  3593                           ;incstack = 0
  3594  00120C  C011  F015         	movff	strcpy@to,strcpy@cp
  3595  001210  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3596  001214  D005               	goto	l4196
  3597  001216                     l4194:
  3598  001216  4A15               	infsnz	strcpy@cp,f,c
  3599  001218  2A16               	incf	strcpy@cp+1,f,c
  3600  00121A  4A13               	infsnz	strcpy@from,f,c
  3601  00121C  2A14               	incf	strcpy@from+1,f,c
  3602  00121E  D000               	goto	l4196
  3603  001220                     l4196:
  3604  001220  C013  FFF6         	movff	strcpy@from,tblptrl
  3605  001224  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3606  001228                     	if	0	;tblptru may be non-zero
  3607  001228                     	endif
  3608  001228                     	if	0	;tblptru may be non-zero
  3609  001228                     	endif
  3610  001228  C015  FFD9         	movff	strcpy@cp,fsr2l
  3611  00122C  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3612  001230  0008               	tblrd		*
  3613  001232  CFF5 FFDF          	movff	tablat,indf2
  3614  001236  50DF               	movf	indf2,w,c
  3615  001238  A4D8               	btfss	status,2,c
  3616  00123A  D7ED               	goto	l4194
  3617                           
  3618                           ;	Return value of _strcpy is never used
  3619  00123C  0012               	return		;funcret
  3620  00123E                     __end_of_strcpy:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           prodh	equ	0xFF4
  3627                           prodl	equ	0xFF3
  3628                           intcon	equ	0xFF2
  3629                           intcon2	equ	0xFF1
  3630                           postinc0	equ	0xFEE
  3631                           wreg	equ	0xFE8
  3632                           postdec1	equ	0xFE5
  3633                           fsr1l	equ	0xFE1
  3634                           indf2	equ	0xFDF
  3635                           postinc2	equ	0xFDE
  3636                           postdec2	equ	0xFDD
  3637                           fsr2h	equ	0xFDA
  3638                           fsr2l	equ	0xFD9
  3639                           status	equ	0xFD8
  3640                           
  3641 ;; *************** function _fillScreen *****************
  3642 ;; Defined at:
  3643 ;;		line 619 in file "../Lab11sample.X/ST7735_TFT.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  color           2   35[COMRAM] unsigned int 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;		None               void
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, status,0, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;Total ram usage:        2 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    7
  3664 ;; This function calls:
  3665 ;;		_fillRectangle
  3666 ;; This function is called by:
  3667 ;;		_Initialize_Screen
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text13
  3672  001350                     __ptext13:
  3673                           	opt stack 0
  3674  001350                     _fillScreen:
  3675                           	opt stack 21
  3676                           
  3677                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  3678                           
  3679                           ;incstack = 0
  3680  001350  0E00               	movlw	0
  3681  001352  6E18               	movwf	fillRectangle@y,c
  3682  001354  0E80               	movlw	128
  3683  001356  6E19               	movwf	fillRectangle@w,c
  3684  001358  0EA0               	movlw	160
  3685  00135A  6E1A               	movwf	fillRectangle@h,c
  3686  00135C  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3687  001360  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3688  001364  0E00               	movlw	0
  3689  001366  EC93  F004         	call	_fillRectangle
  3690  00136A  0012               	return		;funcret
  3691  00136C                     __end_of_fillScreen:
  3692                           	opt stack 0
  3693                           tblptru	equ	0xFF8
  3694                           tblptrh	equ	0xFF7
  3695                           tblptrl	equ	0xFF6
  3696                           tablat	equ	0xFF5
  3697                           prodh	equ	0xFF4
  3698                           prodl	equ	0xFF3
  3699                           intcon	equ	0xFF2
  3700                           intcon2	equ	0xFF1
  3701                           postinc0	equ	0xFEE
  3702                           wreg	equ	0xFE8
  3703                           postdec1	equ	0xFE5
  3704                           fsr1l	equ	0xFE1
  3705                           indf2	equ	0xFDF
  3706                           postinc2	equ	0xFDE
  3707                           postdec2	equ	0xFDD
  3708                           fsr2h	equ	0xFDA
  3709                           fsr2l	equ	0xFD9
  3710                           status	equ	0xFD8
  3711                           
  3712 ;; *************** function _fillRectangle *****************
  3713 ;; Defined at:
  3714 ;;		line 503 in file "../Lab11sample.X/ST7735_TFT.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;  x               1    wreg     unsigned char 
  3717 ;;  y               1   23[COMRAM] unsigned char 
  3718 ;;  w               1   24[COMRAM] unsigned char 
  3719 ;;  h               1   25[COMRAM] unsigned char 
  3720 ;;  color           2   26[COMRAM] unsigned int 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  x               1   34[COMRAM] unsigned char 
  3723 ;;  lo              1   33[COMRAM] unsigned char 
  3724 ;;  hi              1   32[COMRAM] unsigned char 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;		None               void
  3727 ;; Registers used:
  3728 ;;		wreg, status,2, status,0, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3734 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3735 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;Total ram usage:       12 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    6
  3741 ;; This function calls:
  3742 ;;		_setAddrWindow
  3743 ;;		_spiwrite
  3744 ;; This function is called by:
  3745 ;;		_fillScreen
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text14
  3750  000926                     __ptext14:
  3751                           	opt stack 0
  3752  000926                     _fillRectangle:
  3753                           	opt stack 21
  3754                           
  3755                           ;incstack = 0
  3756                           ;fillRectangle@x stored from wreg
  3757  000926  6E23               	movwf	fillRectangle@x,c
  3758                           
  3759                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  3760                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  3761  000928  0E80               	movlw	128
  3762  00092A  6023               	cpfslt	fillRectangle@x,c
  3763  00092C  D069               	goto	l522
  3764  00092E  0E9F               	movlw	159
  3765  000930  6418               	cpfsgt	fillRectangle@y,c
  3766  000932  D001               	goto	l4054
  3767                           
  3768                           ;ST7735_TFT.c: 507: return;
  3769  000934  D065               	goto	l522
  3770  000936                     l4054:
  3771                           
  3772                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  3773  000936  0EFF               	movlw	255
  3774  000938  6E1D               	movwf	??_fillRectangle& (0+255),c
  3775  00093A  0EFF               	movlw	255
  3776  00093C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3777  00093E  5019               	movf	fillRectangle@w,w,c
  3778  000940  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3779  000944  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3780  000946  261F               	addwf	??_fillRectangle+2,f,c
  3781  000948  0E00               	movlw	0
  3782  00094A  2220               	addwfc	??_fillRectangle+3,f,c
  3783  00094C  501D               	movf	??_fillRectangle,w,c
  3784  00094E  261F               	addwf	??_fillRectangle+2,f,c
  3785  000950  501E               	movf	??_fillRectangle+1,w,c
  3786  000952  2220               	addwfc	??_fillRectangle+3,f,c
  3787  000954  BE20               	btfsc	??_fillRectangle+3,7,c
  3788  000956  D00A               	goto	l523
  3789  000958  5020               	movf	??_fillRectangle+3,w,c
  3790  00095A  E104               	bnz	u2720
  3791  00095C  0E80               	movlw	128
  3792  00095E  5C1F               	subwf	??_fillRectangle+2,w,c
  3793  000960  A0D8               	btfss	status,0,c
  3794  000962  D004               	goto	l523
  3795  000964                     u2720:
  3796                           
  3797                           ;ST7735_TFT.c: 509: w = 128 - x;
  3798  000964  5023               	movf	fillRectangle@x,w,c
  3799  000966  0800               	sublw	0
  3800  000968  0F80               	addlw	128
  3801  00096A  6E19               	movwf	fillRectangle@w,c
  3802  00096C                     l523:
  3803                           
  3804                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  3805  00096C  0EFF               	movlw	255
  3806  00096E  6E1D               	movwf	??_fillRectangle& (0+255),c
  3807  000970  0EFF               	movlw	255
  3808  000972  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3809  000974  501A               	movf	fillRectangle@h,w,c
  3810  000976  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  3811  00097A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3812  00097C  261F               	addwf	??_fillRectangle+2,f,c
  3813  00097E  0E00               	movlw	0
  3814  000980  2220               	addwfc	??_fillRectangle+3,f,c
  3815  000982  501D               	movf	??_fillRectangle,w,c
  3816  000984  261F               	addwf	??_fillRectangle+2,f,c
  3817  000986  501E               	movf	??_fillRectangle+1,w,c
  3818  000988  2220               	addwfc	??_fillRectangle+3,f,c
  3819  00098A  BE20               	btfsc	??_fillRectangle+3,7,c
  3820  00098C  D00B               	goto	l4060
  3821  00098E  5020               	movf	??_fillRectangle+3,w,c
  3822  000990  E104               	bnz	u2730
  3823  000992  0EA0               	movlw	160
  3824  000994  5C1F               	subwf	??_fillRectangle+2,w,c
  3825  000996  A0D8               	btfss	status,0,c
  3826  000998  D005               	goto	l4060
  3827  00099A                     u2730:
  3828                           
  3829                           ;ST7735_TFT.c: 511: h = 160 - y;
  3830  00099A  5018               	movf	fillRectangle@y,w,c
  3831  00099C  0800               	sublw	0
  3832  00099E  0FA0               	addlw	160
  3833  0009A0  6E1A               	movwf	fillRectangle@h,c
  3834  0009A2  D000               	goto	l4060
  3835  0009A4                     l4060:
  3836                           
  3837                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  3838  0009A4  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  3839  0009A8  5023               	movf	fillRectangle@x,w,c
  3840  0009AA  2419               	addwf	fillRectangle@w,w,c
  3841  0009AC  6E1D               	movwf	??_fillRectangle& (0+255),c
  3842  0009AE  041D               	decf	??_fillRectangle,w,c
  3843  0009B0  6E15               	movwf	setAddrWindow@x1,c
  3844  0009B2  5018               	movf	fillRectangle@y,w,c
  3845  0009B4  241A               	addwf	fillRectangle@h,w,c
  3846  0009B6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3847  0009B8  041E               	decf	??_fillRectangle+1,w,c
  3848  0009BA  6E16               	movwf	setAddrWindow@y1,c
  3849  0009BC  5023               	movf	fillRectangle@x,w,c
  3850  0009BE  ECD3  F007         	call	_setAddrWindow
  3851                           
  3852                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  3853  0009C2  501C               	movf	fillRectangle@color+1,w,c
  3854  0009C4  6E21               	movwf	fillRectangle@hi,c
  3855  0009C6  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  3856                           
  3857                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  3858  0009CA  8082               	bsf	3970,0,c	;volatile
  3859                           
  3860                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  3861  0009CC  9282               	bcf	3970,1,c	;volatile
  3862                           
  3863                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  3864  0009CE  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  3865  0009D2                     l4072:
  3866  0009D2  5018               	movf	fillRectangle@y,w,c
  3867  0009D4  B4D8               	btfsc	status,2,c
  3868  0009D6  D013               	goto	l526
  3869  0009D8  D001               	goto	l525
  3870  0009DA  D011               	goto	l526
  3871  0009DC                     l525:
  3872                           
  3873                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  3874  0009DC  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  3875  0009E0                     l4076:
  3876  0009E0  5023               	movf	fillRectangle@x,w,c
  3877  0009E2  B4D8               	btfsc	status,2,c
  3878  0009E4  D00A               	goto	l4086
  3879  0009E6  D001               	goto	l4080
  3880  0009E8  D008               	goto	l4086
  3881  0009EA                     l4080:
  3882                           
  3883                           ;ST7735_TFT.c: 519: spiwrite(hi);
  3884  0009EA  5021               	movf	fillRectangle@hi,w,c
  3885  0009EC  ECD8  F009         	call	_spiwrite
  3886                           
  3887                           ;ST7735_TFT.c: 520: spiwrite(lo);
  3888  0009F0  5022               	movf	fillRectangle@lo,w,c
  3889  0009F2  ECD8  F009         	call	_spiwrite
  3890  0009F6  0623               	decf	fillRectangle@x,f,c
  3891  0009F8  D7F3               	goto	l4076
  3892  0009FA                     l4086:
  3893  0009FA  0618               	decf	fillRectangle@y,f,c
  3894  0009FC  D7EA               	goto	l4072
  3895  0009FE                     l526:
  3896                           
  3897                           ;ST7735_TFT.c: 521: }
  3898                           ;ST7735_TFT.c: 522: }
  3899                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  3900  0009FE  8282               	bsf	3970,1,c	;volatile
  3901  000A00                     l522:
  3902  000A00  0012               	return		;funcret
  3903  000A02                     __end_of_fillRectangle:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           intcon2	equ	0xFF1
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           postdec1	equ	0xFE5
  3916                           fsr1l	equ	0xFE1
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _drawtext *****************
  3925 ;; Defined at:
  3926 ;;		line 474 in file "../Lab11sample.X/ST7735_TFT.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  x               1    wreg     unsigned char 
  3929 ;;  y               1   56[COMRAM] unsigned char 
  3930 ;;  _text           2   57[COMRAM] PTR unsigned char 
  3931 ;;		 -> NULL(0), buffer(31), 
  3932 ;;  color           2   59[COMRAM] unsigned int 
  3933 ;;  bg              2   61[COMRAM] unsigned int 
  3934 ;;  size            1   63[COMRAM] unsigned char 
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;  x               1    0[BANK0 ] unsigned char 
  3937 ;;  i               2    3[BANK0 ] unsigned int 
  3938 ;;  textsize        2    1[BANK0 ] unsigned int 
  3939 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  3940 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;		None               void
  3943 ;; Registers used:
  3944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3950 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;Total ram usage:       17 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    9
  3957 ;; This function calls:
  3958 ;;		_drawChar
  3959 ;;		_strlen
  3960 ;; This function is called by:
  3961 ;;		_Initialize_Screen
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text15
  3966  00072A                     __ptext15:
  3967                           	opt stack 0
  3968  00072A                     _drawtext:
  3969                           	opt stack 19
  3970                           
  3971                           ;incstack = 0
  3972                           ;drawtext@x stored from wreg
  3973  00072A  0100               	movlb	0	; () banked
  3974  00072C  6FF3               	movwf	drawtext@x& (0+255),b
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  3978                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  3979                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  3980  00072E  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  3981                           
  3982                           ; BSR set to: 0
  3983  000732  C039  F0F8         	movff	drawtext@y,drawtext@cursor_y
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  3987  000736  C03A  F011         	movff	drawtext@_text,strlen@s
  3988  00073A  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  3989  00073E  EC8B  F008         	call	_strlen	;wreg free
  3990  000742  C011  F0F4         	movff	?_strlen,drawtext@textsize
  3991  000746  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  3992                           
  3993                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  3994  00074A  0E00               	movlw	0
  3995  00074C  0100               	movlb	0	; () banked
  3996  00074E  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  3997  000750  0E00               	movlw	0
  3998  000752  6FF6               	movwf	drawtext@i& (0+255),b
  3999  000754  D064               	goto	l4232
  4000  000756                     l4206:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4004  000756  506F               	movf	_wrap,w,c
  4005  000758  B4D8               	btfsc	status,2,c
  4006  00075A  D034               	goto	l4222
  4007                           
  4008                           ; BSR set to: 0
  4009  00075C  5040               	movf	drawtext@size,w,c
  4010  00075E  0D05               	mullw	5
  4011  000760  0100               	movlb	0	; () banked
  4012  000762  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  4013  000764  6E41               	movwf	??_drawtext& (0+255),c
  4014  000766  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4015  000768  50F3               	movf	prodl,w,c
  4016  00076A  2641               	addwf	??_drawtext,f,c
  4017  00076C  50F4               	movf	prodh,w,c
  4018  00076E  2242               	addwfc	??_drawtext+1,f,c
  4019  000770  BE42               	btfsc	??_drawtext+1,7,c
  4020  000772  D028               	goto	l4222
  4021  000774  5042               	movf	??_drawtext+1,w,c
  4022  000776  E104               	bnz	u2900
  4023  000778  0E81               	movlw	129
  4024  00077A  5C41               	subwf	??_drawtext,w,c
  4025  00077C  A0D8               	btfss	status,0,c
  4026  00077E  D022               	goto	l4222
  4027  000780                     u2900:
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4031  000780  0E00               	movlw	0
  4032  000782  0100               	movlb	0	; () banked
  4033  000784  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4037  000786  5040               	movf	drawtext@size,w,c
  4038  000788  0D07               	mullw	7
  4039  00078A  50F3               	movf	prodl,w,c
  4040  00078C  0100               	movlb	0	; () banked
  4041  00078E  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  4042  000790  0F03               	addlw	3
  4043  000792  0100               	movlb	0	; () banked
  4044  000794  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4048  000796  0EA0               	movlw	160
  4049  000798  0100               	movlb	0	; () banked
  4050  00079A  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  4051  00079C  D004               	goto	l4218
  4052                           
  4053                           ; BSR set to: 0
  4054  00079E  0EA0               	movlw	160
  4055  0007A0  0100               	movlb	0	; () banked
  4056  0007A2  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  4057  0007A4  D000               	goto	l4218
  4058  0007A6                     l4218:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4062  0007A6  0100               	movlb	0	; () banked
  4063  0007A8  51F6               	movf	drawtext@i& (0+255),w,b
  4064  0007AA  243A               	addwf	drawtext@_text,w,c
  4065  0007AC  6ED9               	movwf	fsr2l,c
  4066  0007AE  0100               	movlb	0	; () banked
  4067  0007B0  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  4068  0007B2  203B               	addwfc	drawtext@_text+1,w,c
  4069  0007B4  6EDA               	movwf	fsr2h,c
  4070  0007B6  0E20               	movlw	32
  4071  0007B8  18DE               	xorwf	postinc2,w,c
  4072  0007BA  B4D8               	btfsc	status,2,c
  4073  0007BC  D02C               	goto	l4230
  4074  0007BE  D002               	goto	l4222
  4075                           
  4076                           ; BSR set to: 0
  4077  0007C0  D02A               	goto	l4230
  4078                           
  4079                           ; BSR set to: 0
  4080  0007C2  D000               	goto	l4222
  4081  0007C4                     l4222:
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4085  0007C4  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  4086  0007C8  0100               	movlb	0	; () banked
  4087  0007CA  51F6               	movf	drawtext@i& (0+255),w,b
  4088  0007CC  243A               	addwf	drawtext@_text,w,c
  4089  0007CE  6ED9               	movwf	fsr2l,c
  4090  0007D0  0100               	movlb	0	; () banked
  4091  0007D2  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  4092  0007D4  203B               	addwfc	drawtext@_text+1,w,c
  4093  0007D6  6EDA               	movwf	fsr2h,c
  4094  0007D8  50DF               	movf	indf2,w,c
  4095  0007DA  6E2F               	movwf	drawChar@c,c
  4096  0007DC  C03C  F030         	movff	drawtext@color,drawChar@color
  4097  0007E0  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4098  0007E4  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4099  0007E8  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4100  0007EC  C040  F034         	movff	drawtext@size,drawChar@size
  4101  0007F0  0100               	movlb	0	; () banked
  4102  0007F2  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  4103  0007F4  ECBB  F001         	call	_drawChar
  4104                           
  4105                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4106  0007F8  5040               	movf	drawtext@size,w,c
  4107  0007FA  0D06               	mullw	6
  4108  0007FC  50F3               	movf	prodl,w,c
  4109  0007FE  0100               	movlb	0	; () banked
  4110  000800  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  4111  000802  0100               	movlb	0	; () banked
  4112  000804  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4116  000806  0E80               	movlw	128
  4117  000808  0100               	movlb	0	; () banked
  4118  00080A  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  4119  00080C  D004               	goto	l4230
  4120                           
  4121                           ; BSR set to: 0
  4122  00080E  0E80               	movlw	128
  4123  000810  0100               	movlb	0	; () banked
  4124  000812  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  4125                           
  4126                           ; BSR set to: 0
  4127  000814  D000               	goto	l4230
  4128  000816                     l4230:
  4129                           
  4130                           ; BSR set to: 0
  4131  000816  0100               	movlb	0	; () banked
  4132  000818  4BF6               	infsnz	drawtext@i& (0+255),f,b
  4133  00081A  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  4134  00081C  D000               	goto	l4232
  4135  00081E                     l4232:
  4136                           
  4137                           ; BSR set to: 0
  4138  00081E  0100               	movlb	0	; () banked
  4139  000820  51F4               	movf	drawtext@textsize& (0+255),w,b
  4140  000822  0100               	movlb	0	; () banked
  4141  000824  5DF6               	subwf	drawtext@i& (0+255),w,b
  4142  000826  0100               	movlb	0	; () banked
  4143  000828  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  4144  00082A  0100               	movlb	0	; () banked
  4145  00082C  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  4146  00082E  A0D8               	btfss	status,0,c
  4147  000830  D792               	goto	l4206
  4148                           
  4149                           ; BSR set to: 0
  4150                           
  4151                           ; BSR set to: 0
  4152  000832  0012               	return		;funcret
  4153  000834                     __end_of_drawtext:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           intcon2	equ	0xFF1
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           postdec1	equ	0xFE5
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           postdec2	equ	0xFDD
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function _strlen *****************
  4175 ;; Defined at:
  4176 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4179 ;;		 -> NULL(0), buffer(31), 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4182 ;;		 -> NULL(0), buffer(31), 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  2   16[COMRAM] unsigned int 
  4185 ;; Registers used:
  4186 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4192 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;Total ram usage:        6 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    3
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_drawtext
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text16
  4207  001116                     __ptext16:
  4208                           	opt stack 0
  4209  001116                     _strlen:
  4210                           	opt stack 24
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;incstack = 0
  4214  001116  C011  F015         	movff	strlen@s,strlen@cp
  4215  00111A  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4216  00111E  D003               	goto	l4044
  4217  001120                     l4042:
  4218  001120  4A15               	infsnz	strlen@cp,f,c
  4219  001122  2A16               	incf	strlen@cp+1,f,c
  4220  001124  D000               	goto	l4044
  4221  001126                     l4044:
  4222  001126  C015  FFD9         	movff	strlen@cp,fsr2l
  4223  00112A  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4224  00112E  50DF               	movf	indf2,w,c
  4225  001130  A4D8               	btfss	status,2,c
  4226  001132  D7F6               	goto	l4042
  4227  001134  C011  F013         	movff	strlen@s,??_strlen
  4228  001138  C012  F014         	movff	strlen@s+1,??_strlen+1
  4229  00113C  1E13               	comf	??_strlen,f,c
  4230  00113E  1E14               	comf	??_strlen+1,f,c
  4231  001140  4A13               	infsnz	??_strlen,f,c
  4232  001142  2A14               	incf	??_strlen+1,f,c
  4233  001144  5015               	movf	strlen@cp,w,c
  4234  001146  2413               	addwf	??_strlen,w,c
  4235  001148  6E11               	movwf	?_strlen,c
  4236  00114A  5016               	movf	strlen@cp+1,w,c
  4237  00114C  2014               	addwfc	??_strlen+1,w,c
  4238  00114E  6E12               	movwf	?_strlen+1,c
  4239  001150  D000               	goto	l1250
  4240  001152                     l1250:
  4241  001152  0012               	return		;funcret
  4242  001154                     __end_of_strlen:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           prodh	equ	0xFF4
  4249                           prodl	equ	0xFF3
  4250                           intcon	equ	0xFF2
  4251                           intcon2	equ	0xFF1
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           postdec1	equ	0xFE5
  4255                           fsr1l	equ	0xFE1
  4256                           indf2	equ	0xFDF
  4257                           postinc2	equ	0xFDE
  4258                           postdec2	equ	0xFDD
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263 ;; *************** function _drawChar *****************
  4264 ;; Defined at:
  4265 ;;		line 447 in file "../Lab11sample.X/ST7735_TFT.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  x               1    wreg     unsigned char 
  4268 ;;  y               1   45[COMRAM] unsigned char 
  4269 ;;  c               1   46[COMRAM] unsigned char 
  4270 ;;  color           2   47[COMRAM] unsigned int 
  4271 ;;  bg              2   49[COMRAM] unsigned int 
  4272 ;;  size            1   51[COMRAM] unsigned char 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  x               1   53[COMRAM] unsigned char 
  4275 ;;  line            1   52[COMRAM] unsigned char 
  4276 ;;  i               1   55[COMRAM] unsigned char 
  4277 ;;  j               1   54[COMRAM] unsigned char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;		None               void
  4280 ;; Registers used:
  4281 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4287 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;Total ram usage:       11 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    8
  4294 ;; This function calls:
  4295 ;;		___wmul
  4296 ;;		_drawPixel
  4297 ;;		_fillRect
  4298 ;; This function is called by:
  4299 ;;		_drawtext
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text17
  4304  000376                     __ptext17:
  4305                           	opt stack 0
  4306  000376                     _drawChar:
  4307                           	opt stack 19
  4308                           
  4309                           ;incstack = 0
  4310                           ;drawChar@x stored from wreg
  4311  000376  6E36               	movwf	drawChar@x,c
  4312                           
  4313                           ;ST7735_TFT.c: 449: char i, j;
  4314                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4315  000378  0E80               	movlw	128
  4316  00037A  6036               	cpfslt	drawChar@x,c
  4317  00037C  D0A6               	goto	l485
  4318  00037E  0E9F               	movlw	159
  4319  000380  642E               	cpfsgt	drawChar@y,c
  4320  000382  D001               	goto	l3990
  4321                           
  4322                           ;ST7735_TFT.c: 451: return;
  4323  000384  D0A2               	goto	l485
  4324  000386                     l3990:
  4325                           
  4326                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4327  000386  5034               	movf	drawChar@size,w,c
  4328  000388  A4D8               	btfss	status,2,c
  4329  00038A  D003               	goto	l3994
  4330  00038C  0E01               	movlw	1
  4331  00038E  6E34               	movwf	drawChar@size,c
  4332  000390  D000               	goto	l3994
  4333  000392                     l3994:
  4334                           
  4335                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  4336  000392  0E1F               	movlw	31
  4337  000394  642F               	cpfsgt	drawChar@c,c
  4338  000396  D004               	goto	l3998
  4339  000398  0E7E               	movlw	126
  4340  00039A  642F               	cpfsgt	drawChar@c,c
  4341  00039C  D003               	goto	l487
  4342  00039E  D000               	goto	l3998
  4343  0003A0                     l3998:
  4344                           
  4345                           ;ST7735_TFT.c: 454: c = '?';
  4346  0003A0  0E3F               	movlw	63
  4347  0003A2  6E2F               	movwf	drawChar@c,c
  4348  0003A4                     l487:
  4349                           
  4350                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  4351  0003A4  0E00               	movlw	0
  4352  0003A6  6E38               	movwf	drawChar@i,c
  4353  0003A8                     l4000:
  4354  0003A8  0E04               	movlw	4
  4355  0003AA  6438               	cpfsgt	drawChar@i,c
  4356  0003AC  D001               	goto	l4004
  4357  0003AE  D08D               	goto	l485
  4358  0003B0                     l4004:
  4359                           
  4360                           ;ST7735_TFT.c: 456: unsigned char line;
  4361                           ;ST7735_TFT.c: 457: if(c < 'S')
  4362  0003B0  0E53               	movlw	83
  4363  0003B2  602F               	cpfslt	drawChar@c,c
  4364  0003B4  D015               	goto	l4008
  4365                           
  4366                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  4367  0003B6  0EE0               	movlw	224
  4368  0003B8  242F               	addwf	drawChar@c,w,c
  4369  0003BA  6E11               	movwf	___wmul@multiplier,c
  4370  0003BC  6A12               	clrf	___wmul@multiplier+1,c
  4371  0003BE  0EFF               	movlw	255
  4372  0003C0  2212               	addwfc	___wmul@multiplier+1,f,c
  4373  0003C2  0E00               	movlw	0
  4374  0003C4  6E14               	movwf	___wmul@multiplicand+1,c
  4375  0003C6  0E05               	movlw	5
  4376  0003C8  6E13               	movwf	___wmul@multiplicand,c
  4377  0003CA  EC64  F009         	call	___wmul	;wreg free
  4378  0003CE  5038               	movf	drawChar@i,w,c
  4379  0003D0  2611               	addwf	?___wmul,f,c
  4380  0003D2  0E00               	movlw	0
  4381  0003D4  2212               	addwfc	?___wmul+1,f,c
  4382  0003D6  0E99               	movlw	low _font
  4383  0003D8  2411               	addwf	?___wmul,w,c
  4384  0003DA  6EF6               	movwf	tblptrl,c
  4385  0003DC  0EFD               	movlw	high _font
  4386  0003DE  D014               	goto	L1
  4387  0003E0                     l4008:
  4388                           
  4389                           ;ST7735_TFT.c: 459: else
  4390                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  4391  0003E0  0EAD               	movlw	173
  4392  0003E2  242F               	addwf	drawChar@c,w,c
  4393  0003E4  6E11               	movwf	___wmul@multiplier,c
  4394  0003E6  6A12               	clrf	___wmul@multiplier+1,c
  4395  0003E8  0EFF               	movlw	255
  4396  0003EA  2212               	addwfc	___wmul@multiplier+1,f,c
  4397  0003EC  0E00               	movlw	0
  4398  0003EE  6E14               	movwf	___wmul@multiplicand+1,c
  4399  0003F0  0E05               	movlw	5
  4400  0003F2  6E13               	movwf	___wmul@multiplicand,c
  4401  0003F4  EC64  F009         	call	___wmul	;wreg free
  4402  0003F8  5038               	movf	drawChar@i,w,c
  4403  0003FA  2611               	addwf	?___wmul,f,c
  4404  0003FC  0E00               	movlw	0
  4405  0003FE  2212               	addwfc	?___wmul+1,f,c
  4406  000400  0E98               	movlw	low _font2
  4407  000402  2411               	addwf	?___wmul,w,c
  4408  000404  6EF6               	movwf	tblptrl,c
  4409  000406  0EFE               	movlw	high _font2
  4410  000408                     L1:
  4411  000408  2012               	addwfc	?___wmul+1,w,c
  4412  00040A  6EF7               	movwf	tblptrh,c
  4413  00040C                     	if	0	;There are less than 3 active tblptr bytes
  4414  00040C                     	endif
  4415  00040C  0008               	tblrd		*
  4416  00040E  CFF5 F035          	movff	tablat,drawChar@line
  4417  000412  D000               	goto	l4010
  4418  000414                     l4010:
  4419                           
  4420                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  4421  000414  0E00               	movlw	0
  4422  000416  6E37               	movwf	drawChar@j,c
  4423  000418                     l4012:
  4424  000418  0E06               	movlw	6
  4425  00041A  6437               	cpfsgt	drawChar@j,c
  4426  00041C  D001               	goto	l494
  4427  00041E  D053               	goto	l4036
  4428  000420                     l494:
  4429                           
  4430                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  4431  000420  A035               	btfss	drawChar@line,0,c
  4432  000422  D023               	goto	l4022
  4433                           
  4434                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  4435  000424  0434               	decf	drawChar@size,w,c
  4436  000426  A4D8               	btfss	status,2,c
  4437  000428  D00C               	goto	l4020
  4438  00042A  502E               	movf	drawChar@y,w,c
  4439  00042C  2437               	addwf	drawChar@j,w,c
  4440  00042E  6E18               	movwf	drawPixel@y,c
  4441  000430  C030  F019         	movff	drawChar@color,drawPixel@color
  4442  000434  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  4443  000438  5036               	movf	drawChar@x,w,c
  4444  00043A  2438               	addwf	drawChar@i,w,c
  4445  00043C  EC37  F009         	call	_drawPixel
  4446  000440  D03E               	goto	l4030
  4447  000442                     l4020:
  4448                           
  4449                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4450  000442  5037               	movf	drawChar@j,w,c
  4451  000444  0234               	mulwf	drawChar@size,c
  4452  000446  50F3               	movf	prodl,w,c
  4453  000448  242E               	addwf	drawChar@y,w,c
  4454  00044A  6E23               	movwf	fillRect@y,c
  4455  00044C  C034  F024         	movff	drawChar@size,fillRect@w
  4456  000450  C034  F025         	movff	drawChar@size,fillRect@h
  4457  000454  C030  F026         	movff	drawChar@color,fillRect@color
  4458  000458  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4459  00045C  5038               	movf	drawChar@i,w,c
  4460  00045E  0234               	mulwf	drawChar@size,c
  4461  000460  50F3               	movf	prodl,w,c
  4462  000462  2436               	addwf	drawChar@x,w,c
  4463  000464  EC20  F008         	call	_fillRect
  4464                           
  4465                           ;ST7735_TFT.c: 465: }
  4466  000468  D02A               	goto	l4030
  4467  00046A                     l4022:
  4468                           
  4469                           ;ST7735_TFT.c: 466: else if(bg != color) {
  4470  00046A  5030               	movf	drawChar@color,w,c
  4471  00046C  1832               	xorwf	drawChar@bg,w,c
  4472  00046E  E104               	bnz	u2650
  4473  000470  5031               	movf	drawChar@color+1,w,c
  4474  000472  1833               	xorwf	drawChar@bg+1,w,c
  4475  000474  B4D8               	btfsc	status,2,c
  4476  000476  D023               	goto	l4030
  4477  000478                     u2650:
  4478                           
  4479                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  4480  000478  0434               	decf	drawChar@size,w,c
  4481  00047A  A4D8               	btfss	status,2,c
  4482  00047C  D00C               	goto	l4028
  4483  00047E  502E               	movf	drawChar@y,w,c
  4484  000480  2437               	addwf	drawChar@j,w,c
  4485  000482  6E18               	movwf	drawPixel@y,c
  4486  000484  C032  F019         	movff	drawChar@bg,drawPixel@color
  4487  000488  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4488  00048C  5036               	movf	drawChar@x,w,c
  4489  00048E  2438               	addwf	drawChar@i,w,c
  4490  000490  EC37  F009         	call	_drawPixel
  4491  000494  D014               	goto	l4030
  4492  000496                     l4028:
  4493                           
  4494                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  4495  000496  5037               	movf	drawChar@j,w,c
  4496  000498  0234               	mulwf	drawChar@size,c
  4497  00049A  50F3               	movf	prodl,w,c
  4498  00049C  242E               	addwf	drawChar@y,w,c
  4499  00049E  6E23               	movwf	fillRect@y,c
  4500  0004A0  C034  F024         	movff	drawChar@size,fillRect@w
  4501  0004A4  C034  F025         	movff	drawChar@size,fillRect@h
  4502  0004A8  C032  F026         	movff	drawChar@bg,fillRect@color
  4503  0004AC  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4504  0004B0  5038               	movf	drawChar@i,w,c
  4505  0004B2  0234               	mulwf	drawChar@size,c
  4506  0004B4  50F3               	movf	prodl,w,c
  4507  0004B6  2436               	addwf	drawChar@x,w,c
  4508  0004B8  EC20  F008         	call	_fillRect
  4509  0004BC  D000               	goto	l4030
  4510  0004BE                     l4030:
  4511  0004BE  2A37               	incf	drawChar@j,f,c
  4512  0004C0  90D8               	bcf	status,0,c
  4513  0004C2  3235               	rrcf	drawChar@line,f,c
  4514  0004C4  D7A9               	goto	l4012
  4515  0004C6                     l4036:
  4516  0004C6  2A38               	incf	drawChar@i,f,c
  4517  0004C8  D76F               	goto	l4000
  4518  0004CA                     l485:
  4519  0004CA  0012               	return		;funcret
  4520  0004CC                     __end_of_drawChar:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           tblptrh	equ	0xFF7
  4524                           tblptrl	equ	0xFF6
  4525                           tablat	equ	0xFF5
  4526                           prodh	equ	0xFF4
  4527                           prodl	equ	0xFF3
  4528                           intcon	equ	0xFF2
  4529                           intcon2	equ	0xFF1
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           postdec1	equ	0xFE5
  4533                           fsr1l	equ	0xFE1
  4534                           indf2	equ	0xFDF
  4535                           postinc2	equ	0xFDE
  4536                           postdec2	equ	0xFDD
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _fillRect *****************
  4542 ;; Defined at:
  4543 ;;		line 437 in file "../Lab11sample.X/ST7735_TFT.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;  x               1    wreg     unsigned char 
  4546 ;;  y               1   34[COMRAM] unsigned char 
  4547 ;;  w               1   35[COMRAM] unsigned char 
  4548 ;;  h               1   36[COMRAM] unsigned char 
  4549 ;;  color           2   37[COMRAM] unsigned int 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  x               1   42[COMRAM] unsigned char 
  4552 ;;  i               2   43[COMRAM] int 
  4553 ;; Return value:  Size  Location     Type
  4554 ;;		None               void
  4555 ;; Registers used:
  4556 ;;		wreg, status,2, status,0, cstack
  4557 ;; Tracked objects:
  4558 ;;		On entry : 0/0
  4559 ;;		On exit  : 0/0
  4560 ;;		Unchanged: 0/0
  4561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4562 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;Total ram usage:       11 bytes
  4567 ;; Hardware stack levels used:    1
  4568 ;; Hardware stack levels required when called:    7
  4569 ;; This function calls:
  4570 ;;		_drawFastVLine
  4571 ;; This function is called by:
  4572 ;;		_drawChar
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text18
  4577  001040                     __ptext18:
  4578                           	opt stack 0
  4579  001040                     _fillRect:
  4580                           	opt stack 19
  4581                           
  4582                           ;incstack = 0
  4583                           ;fillRect@x stored from wreg
  4584  001040  6E2B               	movwf	fillRect@x,c
  4585                           
  4586                           ;ST7735_TFT.c: 439: signed int i;
  4587                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  4588  001042  C02B  F02C         	movff	fillRect@x,fillRect@i
  4589  001046  6A2D               	clrf	fillRect@i+1,c
  4590  001048  D00E               	goto	l3852
  4591  00104A                     l3848:
  4592                           
  4593                           ;ST7735_TFT.c: 442: {
  4594                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  4595  00104A  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4596  00104E  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4597  001052  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4598  001056  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4599  00105A  502C               	movf	fillRect@i,w,c
  4600  00105C  ECEA  F005         	call	_drawFastVLine
  4601  001060  4A2C               	infsnz	fillRect@i,f,c
  4602  001062  2A2D               	incf	fillRect@i+1,f,c
  4603  001064  D000               	goto	l3852
  4604  001066                     l3852:
  4605  001066  5024               	movf	fillRect@w,w,c
  4606  001068  C02B  F028         	movff	fillRect@x,??_fillRect
  4607  00106C  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4608  00106E  2628               	addwf	??_fillRect,f,c
  4609  001070  0E00               	movlw	0
  4610  001072  2229               	addwfc	??_fillRect+1,f,c
  4611  001074  5028               	movf	??_fillRect,w,c
  4612  001076  5C2C               	subwf	fillRect@i,w,c
  4613  001078  502D               	movf	fillRect@i+1,w,c
  4614  00107A  0A80               	xorlw	128
  4615  00107C  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4616  00107E  5029               	movf	??_fillRect+1,w,c
  4617  001080  0A80               	xorlw	128
  4618  001082  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4619  001084  A0D8               	btfss	status,0,c
  4620  001086  D7E1               	goto	l3848
  4621  001088  0012               	return		;funcret
  4622  00108A                     __end_of_fillRect:
  4623                           	opt stack 0
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           intcon	equ	0xFF2
  4631                           intcon2	equ	0xFF1
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           postdec1	equ	0xFE5
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           postdec2	equ	0xFDD
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _drawFastVLine *****************
  4644 ;; Defined at:
  4645 ;;		line 416 in file "../Lab11sample.X/ST7735_TFT.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  x               1    wreg     unsigned char 
  4648 ;;  y               1   23[COMRAM] unsigned char 
  4649 ;;  h               1   24[COMRAM] unsigned char 
  4650 ;;  color           2   25[COMRAM] unsigned int 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  x               1   33[COMRAM] unsigned char 
  4653 ;;  lo              1   32[COMRAM] unsigned char 
  4654 ;;  hi              1   31[COMRAM] unsigned char 
  4655 ;; Return value:  Size  Location     Type
  4656 ;;		None               void
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4664 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;Total ram usage:       11 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    6
  4671 ;; This function calls:
  4672 ;;		_setAddrWindow
  4673 ;;		_spiwrite
  4674 ;; This function is called by:
  4675 ;;		_fillRect
  4676 ;;		_fillCircleHelper
  4677 ;;		_fillCircle
  4678 ;;		_drawRect
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           	psect	text19
  4683  000BD4                     __ptext19:
  4684                           	opt stack 0
  4685  000BD4                     _drawFastVLine:
  4686                           	opt stack 19
  4687                           
  4688                           ;incstack = 0
  4689                           ;drawFastVLine@x stored from wreg
  4690  000BD4  6E22               	movwf	drawFastVLine@x,c
  4691                           
  4692                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  4693                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  4694  000BD6  0E80               	movlw	128
  4695  000BD8  6022               	cpfslt	drawFastVLine@x,c
  4696  000BDA  D03F               	goto	l469
  4697  000BDC  0E9F               	movlw	159
  4698  000BDE  6418               	cpfsgt	drawFastVLine@y,c
  4699  000BE0  D001               	goto	l3788
  4700                           
  4701                           ;ST7735_TFT.c: 420: return;
  4702  000BE2  D03B               	goto	l469
  4703  000BE4                     l3788:
  4704                           
  4705                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  4706  000BE4  0EFF               	movlw	255
  4707  000BE6  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4708  000BE8  0EFF               	movlw	255
  4709  000BEA  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4710  000BEC  5019               	movf	drawFastVLine@h,w,c
  4711  000BEE  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4712  000BF2  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4713  000BF4  261E               	addwf	??_drawFastVLine+2,f,c
  4714  000BF6  0E00               	movlw	0
  4715  000BF8  221F               	addwfc	??_drawFastVLine+3,f,c
  4716  000BFA  501C               	movf	??_drawFastVLine,w,c
  4717  000BFC  261E               	addwf	??_drawFastVLine+2,f,c
  4718  000BFE  501D               	movf	??_drawFastVLine+1,w,c
  4719  000C00  221F               	addwfc	??_drawFastVLine+3,f,c
  4720  000C02  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4721  000C04  D00B               	goto	l3792
  4722  000C06  501F               	movf	??_drawFastVLine+3,w,c
  4723  000C08  E104               	bnz	u2460
  4724  000C0A  0EA0               	movlw	160
  4725  000C0C  5C1E               	subwf	??_drawFastVLine+2,w,c
  4726  000C0E  A0D8               	btfss	status,0,c
  4727  000C10  D005               	goto	l3792
  4728  000C12                     u2460:
  4729                           
  4730                           ;ST7735_TFT.c: 422: h = 160 - y;
  4731  000C12  5018               	movf	drawFastVLine@y,w,c
  4732  000C14  0800               	sublw	0
  4733  000C16  0FA0               	addlw	160
  4734  000C18  6E19               	movwf	drawFastVLine@h,c
  4735  000C1A  D000               	goto	l3792
  4736  000C1C                     l3792:
  4737                           
  4738                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  4739  000C1C  501B               	movf	drawFastVLine@color+1,w,c
  4740  000C1E  6E20               	movwf	drawFastVLine@hi,c
  4741  000C20  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4742                           
  4743                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  4744  000C24  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4745  000C28  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4746  000C2C  5018               	movf	drawFastVLine@y,w,c
  4747  000C2E  2419               	addwf	drawFastVLine@h,w,c
  4748  000C30  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4749  000C32  041C               	decf	??_drawFastVLine,w,c
  4750  000C34  6E16               	movwf	setAddrWindow@y1,c
  4751  000C36  5022               	movf	drawFastVLine@x,w,c
  4752  000C38  ECD3  F007         	call	_setAddrWindow
  4753                           
  4754                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  4755  000C3C  8082               	bsf	3970,0,c	;volatile
  4756                           
  4757                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  4758  000C3E  9282               	bcf	3970,1,c	;volatile
  4759                           
  4760                           ;ST7735_TFT.c: 428: while (h--) {
  4761  000C40  D007               	goto	l3804
  4762  000C42                     l3802:
  4763                           
  4764                           ;ST7735_TFT.c: 429: spiwrite(hi);
  4765  000C42  5020               	movf	drawFastVLine@hi,w,c
  4766  000C44  ECD8  F009         	call	_spiwrite
  4767                           
  4768                           ;ST7735_TFT.c: 430: spiwrite(lo);
  4769  000C48  5021               	movf	drawFastVLine@lo,w,c
  4770  000C4A  ECD8  F009         	call	_spiwrite
  4771  000C4E  D000               	goto	l3804
  4772  000C50                     l3804:
  4773  000C50  0619               	decf	drawFastVLine@h,f,c
  4774  000C52  2819               	incf	drawFastVLine@h,w,c
  4775  000C54  A4D8               	btfss	status,2,c
  4776  000C56  D7F5               	goto	l3802
  4777                           
  4778                           ;ST7735_TFT.c: 431: }
  4779                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  4780  000C58  8282               	bsf	3970,1,c	;volatile
  4781  000C5A                     l469:
  4782  000C5A  0012               	return		;funcret
  4783  000C5C                     __end_of_drawFastVLine:
  4784                           	opt stack 0
  4785                           tblptru	equ	0xFF8
  4786                           tblptrh	equ	0xFF7
  4787                           tblptrl	equ	0xFF6
  4788                           tablat	equ	0xFF5
  4789                           prodh	equ	0xFF4
  4790                           prodl	equ	0xFF3
  4791                           intcon	equ	0xFF2
  4792                           intcon2	equ	0xFF1
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           postdec1	equ	0xFE5
  4796                           fsr1l	equ	0xFE1
  4797                           indf2	equ	0xFDF
  4798                           postinc2	equ	0xFDE
  4799                           postdec2	equ	0xFDD
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _drawPixel *****************
  4805 ;; Defined at:
  4806 ;;		line 407 in file "../Lab11sample.X/ST7735_TFT.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  x               1    wreg     unsigned char 
  4809 ;;  y               1   23[COMRAM] unsigned char 
  4810 ;;  color           2   24[COMRAM] unsigned int 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  x               1   26[COMRAM] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4822 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;Total ram usage:        4 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    6
  4829 ;; This function calls:
  4830 ;;		_setAddrWindow
  4831 ;;		_write_data
  4832 ;; This function is called by:
  4833 ;;		_drawChar
  4834 ;;		_drawCircle
  4835 ;;		_drawCircleHelper
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text20
  4840  00126E                     __ptext20:
  4841                           	opt stack 0
  4842  00126E                     _drawPixel:
  4843                           	opt stack 20
  4844                           
  4845                           ;incstack = 0
  4846                           ;drawPixel@x stored from wreg
  4847  00126E  6E1B               	movwf	drawPixel@x,c
  4848                           
  4849                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  4850  001270  0E80               	movlw	128
  4851  001272  601B               	cpfslt	drawPixel@x,c
  4852  001274  D013               	goto	l463
  4853  001276  0E9F               	movlw	159
  4854  001278  6418               	cpfsgt	drawPixel@y,c
  4855  00127A  D001               	goto	l3840
  4856                           
  4857                           ;ST7735_TFT.c: 410: return;
  4858  00127C  D00F               	goto	l463
  4859  00127E                     l3840:
  4860                           
  4861                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  4862  00127E  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  4863  001282  281B               	incf	drawPixel@x,w,c
  4864  001284  6E15               	movwf	setAddrWindow@x1,c
  4865  001286  2818               	incf	drawPixel@y,w,c
  4866  001288  6E16               	movwf	setAddrWindow@y1,c
  4867  00128A  501B               	movf	drawPixel@x,w,c
  4868  00128C  ECD3  F007         	call	_setAddrWindow
  4869                           
  4870                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  4871  001290  501A               	movf	drawPixel@color+1,w,c
  4872  001292  EC06  F00A         	call	_write_data
  4873                           
  4874                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  4875  001296  5019               	movf	drawPixel@color,w,c
  4876  001298  EC06  F00A         	call	_write_data
  4877  00129C                     l463:
  4878  00129C  0012               	return		;funcret
  4879  00129E                     __end_of_drawPixel:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           intcon2	equ	0xFF1
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _setAddrWindow *****************
  4901 ;; Defined at:
  4902 ;;		line 392 in file "../Lab11sample.X/ST7735_TFT.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  x0              1    wreg     unsigned char 
  4905 ;;  y0              1   19[COMRAM] unsigned char 
  4906 ;;  x1              1   20[COMRAM] unsigned char 
  4907 ;;  y1              1   21[COMRAM] unsigned char 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  x0              1   22[COMRAM] unsigned char 
  4910 ;; Return value:  Size  Location     Type
  4911 ;;		None               void
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0, cstack
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4919 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;Total ram usage:        4 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    5
  4926 ;; This function calls:
  4927 ;;		_write_command
  4928 ;;		_write_data
  4929 ;; This function is called by:
  4930 ;;		_drawPixel
  4931 ;;		_drawFastVLine
  4932 ;;		_fillRectangle
  4933 ;;		_drawFastHLine
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text21
  4938  000FA6                     __ptext21:
  4939                           	opt stack 0
  4940  000FA6                     _setAddrWindow:
  4941                           	opt stack 21
  4942                           
  4943                           ;incstack = 0
  4944                           ;setAddrWindow@x0 stored from wreg
  4945  000FA6  6E17               	movwf	setAddrWindow@x0,c
  4946                           
  4947                           ;ST7735_TFT.c: 394: write_command(0x2A);
  4948  000FA8  0E2A               	movlw	42
  4949  000FAA  EC0E  F00A         	call	_write_command
  4950                           
  4951                           ;ST7735_TFT.c: 395: write_data(0);
  4952  000FAE  0E00               	movlw	0
  4953  000FB0  EC06  F00A         	call	_write_data
  4954                           
  4955                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  4956  000FB4  5017               	movf	setAddrWindow@x0,w,c
  4957  000FB6  2458               	addwf	_colstart,w,c
  4958  000FB8  EC06  F00A         	call	_write_data
  4959                           
  4960                           ;ST7735_TFT.c: 397: write_data(0);
  4961  000FBC  0E00               	movlw	0
  4962  000FBE  EC06  F00A         	call	_write_data
  4963                           
  4964                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  4965  000FC2  5015               	movf	setAddrWindow@x1,w,c
  4966  000FC4  2458               	addwf	_colstart,w,c
  4967  000FC6  EC06  F00A         	call	_write_data
  4968                           
  4969                           ;ST7735_TFT.c: 399: write_command(0x2B);
  4970  000FCA  0E2B               	movlw	43
  4971  000FCC  EC0E  F00A         	call	_write_command
  4972                           
  4973                           ;ST7735_TFT.c: 400: write_data(0);
  4974  000FD0  0E00               	movlw	0
  4975  000FD2  EC06  F00A         	call	_write_data
  4976                           
  4977                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  4978  000FD6  5014               	movf	setAddrWindow@y0,w,c
  4979  000FD8  2460               	addwf	_rowstart,w,c
  4980  000FDA  EC06  F00A         	call	_write_data
  4981                           
  4982                           ;ST7735_TFT.c: 402: write_data(0);
  4983  000FDE  0E00               	movlw	0
  4984  000FE0  EC06  F00A         	call	_write_data
  4985                           
  4986                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  4987  000FE4  5016               	movf	setAddrWindow@y1,w,c
  4988  000FE6  2460               	addwf	_rowstart,w,c
  4989  000FE8  EC06  F00A         	call	_write_data
  4990                           
  4991                           ;ST7735_TFT.c: 404: write_command(0x2C);
  4992  000FEC  0E2C               	movlw	44
  4993  000FEE  EC0E  F00A         	call	_write_command
  4994  000FF2  0012               	return		;funcret
  4995  000FF4                     __end_of_setAddrWindow:
  4996                           	opt stack 0
  4997                           tblptru	equ	0xFF8
  4998                           tblptrh	equ	0xFF7
  4999                           tblptrl	equ	0xFF6
  5000                           tablat	equ	0xFF5
  5001                           prodh	equ	0xFF4
  5002                           prodl	equ	0xFF3
  5003                           intcon	equ	0xFF2
  5004                           intcon2	equ	0xFF1
  5005                           postinc0	equ	0xFEE
  5006                           wreg	equ	0xFE8
  5007                           postdec1	equ	0xFE5
  5008                           fsr1l	equ	0xFE1
  5009                           indf2	equ	0xFDF
  5010                           postinc2	equ	0xFDE
  5011                           postdec2	equ	0xFDD
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _TFT_GreenTab_Initialize *****************
  5017 ;; Defined at:
  5018 ;;		line 644 in file "../Lab11sample.X/ST7735_TFT.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;		None               void
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;Total ram usage:        0 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    6
  5039 ;; This function calls:
  5040 ;;		_Rcmd1
  5041 ;;		_Rcmd2red
  5042 ;;		_Rcmd3
  5043 ;;		_write_command
  5044 ;;		_write_data
  5045 ;; This function is called by:
  5046 ;;		_Initialize_Screen
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text22
  5051  00129E                     __ptext22:
  5052                           	opt stack 0
  5053  00129E                     _TFT_GreenTab_Initialize:
  5054                           	opt stack 22
  5055                           
  5056                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  5057                           
  5058                           ;incstack = 0
  5059  00129E  8282               	bsf	3970,1,c	;volatile
  5060                           
  5061                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  5062  0012A0  9082               	bcf	3970,0,c	;volatile
  5063                           
  5064                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5065  0012A2  0E80               	movlw	128
  5066  0012A4  6EC7               	movwf	4039,c	;volatile
  5067                           
  5068                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5069  0012A6  0E30               	movlw	48
  5070  0012A8  6EC6               	movwf	4038,c	;volatile
  5071                           
  5072                           ;ST7735_TFT.c: 653: Rcmd1();
  5073  0012AA  EC0D  F003         	call	_Rcmd1	;wreg free
  5074                           
  5075                           ;ST7735_TFT.c: 654: Rcmd2red();
  5076  0012AE  ECAA  F008         	call	_Rcmd2red	;wreg free
  5077                           
  5078                           ;ST7735_TFT.c: 655: Rcmd3();
  5079  0012B2  EC1A  F004         	call	_Rcmd3	;wreg free
  5080                           
  5081                           ;ST7735_TFT.c: 656: write_command(0x36);
  5082  0012B6  0E36               	movlw	54
  5083  0012B8  EC0E  F00A         	call	_write_command
  5084                           
  5085                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5086  0012BC  0EC0               	movlw	192
  5087  0012BE  EC06  F00A         	call	_write_data
  5088                           
  5089                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5090  0012C2  0E01               	movlw	1
  5091  0012C4  6E52               	movwf	__tft_type,c
  5092  0012C6  0012               	return		;funcret
  5093  0012C8                     __end_of_TFT_GreenTab_Initialize:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           intcon2	equ	0xFF1
  5103                           postinc0	equ	0xFEE
  5104                           wreg	equ	0xFE8
  5105                           postdec1	equ	0xFE5
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _Rcmd3 *****************
  5115 ;; Defined at:
  5116 ;;		line 338 in file "../Lab11sample.X/ST7735_TFT.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;		None
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;		None
  5121 ;; Return value:  Size  Location     Type
  5122 ;;		None               void
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;Total ram usage:        0 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    5
  5137 ;; This function calls:
  5138 ;;		_delay_ms
  5139 ;;		_write_command
  5140 ;;		_write_data
  5141 ;; This function is called by:
  5142 ;;		_TFT_GreenTab_Initialize
  5143 ;;		_TFT_BlackTab_Initialize
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text23
  5148  000834                     __ptext23:
  5149                           	opt stack 0
  5150  000834                     _Rcmd3:
  5151                           	opt stack 22
  5152                           
  5153                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5154                           
  5155                           ;incstack = 0
  5156  000834  0EE0               	movlw	224
  5157  000836  EC0E  F00A         	call	_write_command
  5158                           
  5159                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5160  00083A  0E02               	movlw	2
  5161  00083C  EC06  F00A         	call	_write_data
  5162  000840  0E1C               	movlw	28
  5163  000842  EC06  F00A         	call	_write_data
  5164  000846  0E07               	movlw	7
  5165  000848  EC06  F00A         	call	_write_data
  5166  00084C  0E12               	movlw	18
  5167  00084E  EC06  F00A         	call	_write_data
  5168                           
  5169                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5170  000852  0E37               	movlw	55
  5171  000854  EC06  F00A         	call	_write_data
  5172  000858  0E32               	movlw	50
  5173  00085A  EC06  F00A         	call	_write_data
  5174  00085E  0E29               	movlw	41
  5175  000860  EC06  F00A         	call	_write_data
  5176  000864  0E2D               	movlw	45
  5177  000866  EC06  F00A         	call	_write_data
  5178                           
  5179                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5180  00086A  0E29               	movlw	41
  5181  00086C  EC06  F00A         	call	_write_data
  5182  000870  0E25               	movlw	37
  5183  000872  EC06  F00A         	call	_write_data
  5184  000876  0E2B               	movlw	43
  5185  000878  EC06  F00A         	call	_write_data
  5186  00087C  0E39               	movlw	57
  5187  00087E  EC06  F00A         	call	_write_data
  5188                           
  5189                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5190  000882  0E00               	movlw	0
  5191  000884  EC06  F00A         	call	_write_data
  5192  000888  0E01               	movlw	1
  5193  00088A  EC06  F00A         	call	_write_data
  5194  00088E  0E03               	movlw	3
  5195  000890  EC06  F00A         	call	_write_data
  5196  000894  0E10               	movlw	16
  5197  000896  EC06  F00A         	call	_write_data
  5198                           
  5199                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5200  00089A  0EE1               	movlw	225
  5201  00089C  EC0E  F00A         	call	_write_command
  5202                           
  5203                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5204  0008A0  0E03               	movlw	3
  5205  0008A2  EC06  F00A         	call	_write_data
  5206  0008A6  0E1D               	movlw	29
  5207  0008A8  EC06  F00A         	call	_write_data
  5208  0008AC  0E07               	movlw	7
  5209  0008AE  EC06  F00A         	call	_write_data
  5210  0008B2  0E06               	movlw	6
  5211  0008B4  EC06  F00A         	call	_write_data
  5212                           
  5213                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5214  0008B8  0E2E               	movlw	46
  5215  0008BA  EC06  F00A         	call	_write_data
  5216  0008BE  0E2C               	movlw	44
  5217  0008C0  EC06  F00A         	call	_write_data
  5218  0008C4  0E29               	movlw	41
  5219  0008C6  EC06  F00A         	call	_write_data
  5220  0008CA  0E2D               	movlw	45
  5221  0008CC  EC06  F00A         	call	_write_data
  5222                           
  5223                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5224  0008D0  0E2E               	movlw	46
  5225  0008D2  EC06  F00A         	call	_write_data
  5226  0008D6  0E2E               	movlw	46
  5227  0008D8  EC06  F00A         	call	_write_data
  5228  0008DC  0E37               	movlw	55
  5229  0008DE  EC06  F00A         	call	_write_data
  5230  0008E2  0E3F               	movlw	63
  5231  0008E4  EC06  F00A         	call	_write_data
  5232                           
  5233                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5234  0008E8  0E00               	movlw	0
  5235  0008EA  EC06  F00A         	call	_write_data
  5236  0008EE  0E00               	movlw	0
  5237  0008F0  EC06  F00A         	call	_write_data
  5238  0008F4  0E02               	movlw	2
  5239  0008F6  EC06  F00A         	call	_write_data
  5240  0008FA  0E10               	movlw	16
  5241  0008FC  EC06  F00A         	call	_write_data
  5242                           
  5243                           ;ST7735_TFT.c: 350: write_command(0x13);
  5244  000900  0E13               	movlw	19
  5245  000902  EC0E  F00A         	call	_write_command
  5246                           
  5247                           ;ST7735_TFT.c: 351: delay_ms(10);
  5248  000906  0E00               	movlw	0
  5249  000908  6E18               	movwf	delay_ms@ms+1,c
  5250  00090A  0E0A               	movlw	10
  5251  00090C  6E17               	movwf	delay_ms@ms,c
  5252  00090E  ECAA  F007         	call	_delay_ms	;wreg free
  5253                           
  5254                           ;ST7735_TFT.c: 352: write_command(0x29);
  5255  000912  0E29               	movlw	41
  5256  000914  EC0E  F00A         	call	_write_command
  5257                           
  5258                           ;ST7735_TFT.c: 353: delay_ms(100);
  5259  000918  0E00               	movlw	0
  5260  00091A  6E18               	movwf	delay_ms@ms+1,c
  5261  00091C  0E64               	movlw	100
  5262  00091E  6E17               	movwf	delay_ms@ms,c
  5263  000920  ECAA  F007         	call	_delay_ms	;wreg free
  5264  000924  0012               	return		;funcret
  5265  000926                     __end_of_Rcmd3:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           intcon2	equ	0xFF1
  5275                           postinc0	equ	0xFEE
  5276                           wreg	equ	0xFE8
  5277                           postdec1	equ	0xFE5
  5278                           fsr1l	equ	0xFE1
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _Rcmd2red *****************
  5287 ;; Defined at:
  5288 ;;		line 328 in file "../Lab11sample.X/ST7735_TFT.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;		None               void
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    5
  5309 ;; This function calls:
  5310 ;;		_write_command
  5311 ;;		_write_data
  5312 ;; This function is called by:
  5313 ;;		_TFT_GreenTab_Initialize
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text24
  5318  001154                     __ptext24:
  5319                           	opt stack 0
  5320  001154                     _Rcmd2red:
  5321                           	opt stack 22
  5322                           
  5323                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5324                           
  5325                           ;incstack = 0
  5326  001154  0E2A               	movlw	42
  5327  001156  EC0E  F00A         	call	_write_command
  5328                           
  5329                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5330  00115A  0E00               	movlw	0
  5331  00115C  EC06  F00A         	call	_write_data
  5332  001160  0E00               	movlw	0
  5333  001162  EC06  F00A         	call	_write_data
  5334                           
  5335                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  5336  001166  0E00               	movlw	0
  5337  001168  EC06  F00A         	call	_write_data
  5338  00116C  0E7F               	movlw	127
  5339  00116E  EC06  F00A         	call	_write_data
  5340                           
  5341                           ;ST7735_TFT.c: 333: write_command(0x2B);
  5342  001172  0E2B               	movlw	43
  5343  001174  EC0E  F00A         	call	_write_command
  5344                           
  5345                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  5346  001178  0E00               	movlw	0
  5347  00117A  EC06  F00A         	call	_write_data
  5348  00117E  0E00               	movlw	0
  5349  001180  EC06  F00A         	call	_write_data
  5350                           
  5351                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  5352  001184  0E00               	movlw	0
  5353  001186  EC06  F00A         	call	_write_data
  5354  00118A  0E9F               	movlw	159
  5355  00118C  EC06  F00A         	call	_write_data
  5356  001190  0012               	return		;funcret
  5357  001192                     __end_of_Rcmd2red:
  5358                           	opt stack 0
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           intcon2	equ	0xFF1
  5367                           postinc0	equ	0xFEE
  5368                           wreg	equ	0xFE8
  5369                           postdec1	equ	0xFE5
  5370                           fsr1l	equ	0xFE1
  5371                           indf2	equ	0xFDF
  5372                           postinc2	equ	0xFDE
  5373                           postdec2	equ	0xFDD
  5374                           fsr2h	equ	0xFDA
  5375                           fsr2l	equ	0xFD9
  5376                           status	equ	0xFD8
  5377                           
  5378 ;; *************** function _Rcmd1 *****************
  5379 ;; Defined at:
  5380 ;;		line 281 in file "../Lab11sample.X/ST7735_TFT.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;		None
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;		None
  5385 ;; Return value:  Size  Location     Type
  5386 ;;		None               void
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    5
  5401 ;; This function calls:
  5402 ;;		_delay_ms
  5403 ;;		_write_command
  5404 ;;		_write_data
  5405 ;; This function is called by:
  5406 ;;		_TFT_GreenTab_Initialize
  5407 ;;		_TFT_BlackTab_Initialize
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text25
  5412  00061A                     __ptext25:
  5413                           	opt stack 0
  5414  00061A                     _Rcmd1:
  5415                           	opt stack 22
  5416                           
  5417                           ;ST7735_TFT.c: 283: write_command(0x01);
  5418                           
  5419                           ;incstack = 0
  5420  00061A  0E01               	movlw	1
  5421  00061C  EC0E  F00A         	call	_write_command
  5422                           
  5423                           ;ST7735_TFT.c: 284: delay_ms(150);
  5424  000620  0E00               	movlw	0
  5425  000622  6E18               	movwf	delay_ms@ms+1,c
  5426  000624  0E96               	movlw	150
  5427  000626  6E17               	movwf	delay_ms@ms,c
  5428  000628  ECAA  F007         	call	_delay_ms	;wreg free
  5429                           
  5430                           ;ST7735_TFT.c: 285: write_command(0x11);
  5431  00062C  0E11               	movlw	17
  5432  00062E  EC0E  F00A         	call	_write_command
  5433                           
  5434                           ;ST7735_TFT.c: 286: delay_ms(500);
  5435  000632  0E01               	movlw	1
  5436  000634  6E18               	movwf	delay_ms@ms+1,c
  5437  000636  0EF4               	movlw	244
  5438  000638  6E17               	movwf	delay_ms@ms,c
  5439  00063A  ECAA  F007         	call	_delay_ms	;wreg free
  5440                           
  5441                           ;ST7735_TFT.c: 287: write_command(0xB1);
  5442  00063E  0EB1               	movlw	177
  5443  000640  EC0E  F00A         	call	_write_command
  5444                           
  5445                           ;ST7735_TFT.c: 288: write_data(0x01);
  5446  000644  0E01               	movlw	1
  5447  000646  EC06  F00A         	call	_write_data
  5448                           
  5449                           ;ST7735_TFT.c: 289: write_data(0x2C);
  5450  00064A  0E2C               	movlw	44
  5451  00064C  EC06  F00A         	call	_write_data
  5452                           
  5453                           ;ST7735_TFT.c: 290: write_data(0x2D);
  5454  000650  0E2D               	movlw	45
  5455  000652  EC06  F00A         	call	_write_data
  5456                           
  5457                           ;ST7735_TFT.c: 291: write_command(0xB2);
  5458  000656  0EB2               	movlw	178
  5459  000658  EC0E  F00A         	call	_write_command
  5460                           
  5461                           ;ST7735_TFT.c: 292: write_data(0x01);
  5462  00065C  0E01               	movlw	1
  5463  00065E  EC06  F00A         	call	_write_data
  5464                           
  5465                           ;ST7735_TFT.c: 293: write_data(0x2C);
  5466  000662  0E2C               	movlw	44
  5467  000664  EC06  F00A         	call	_write_data
  5468                           
  5469                           ;ST7735_TFT.c: 294: write_data(0x2D);
  5470  000668  0E2D               	movlw	45
  5471  00066A  EC06  F00A         	call	_write_data
  5472                           
  5473                           ;ST7735_TFT.c: 295: write_command(0xB3);
  5474  00066E  0EB3               	movlw	179
  5475  000670  EC0E  F00A         	call	_write_command
  5476                           
  5477                           ;ST7735_TFT.c: 296: write_data(0x01);
  5478  000674  0E01               	movlw	1
  5479  000676  EC06  F00A         	call	_write_data
  5480                           
  5481                           ;ST7735_TFT.c: 297: write_data(0x2C);
  5482  00067A  0E2C               	movlw	44
  5483  00067C  EC06  F00A         	call	_write_data
  5484                           
  5485                           ;ST7735_TFT.c: 298: write_data(0x2D);
  5486  000680  0E2D               	movlw	45
  5487  000682  EC06  F00A         	call	_write_data
  5488                           
  5489                           ;ST7735_TFT.c: 299: write_data(0x01);
  5490  000686  0E01               	movlw	1
  5491  000688  EC06  F00A         	call	_write_data
  5492                           
  5493                           ;ST7735_TFT.c: 300: write_data(0x2C);
  5494  00068C  0E2C               	movlw	44
  5495  00068E  EC06  F00A         	call	_write_data
  5496                           
  5497                           ;ST7735_TFT.c: 301: write_data(0x2D);
  5498  000692  0E2D               	movlw	45
  5499  000694  EC06  F00A         	call	_write_data
  5500                           
  5501                           ;ST7735_TFT.c: 302: write_command(0xB4);
  5502  000698  0EB4               	movlw	180
  5503  00069A  EC0E  F00A         	call	_write_command
  5504                           
  5505                           ;ST7735_TFT.c: 303: write_data(0x07);
  5506  00069E  0E07               	movlw	7
  5507  0006A0  EC06  F00A         	call	_write_data
  5508                           
  5509                           ;ST7735_TFT.c: 304: write_command(0xC0);
  5510  0006A4  0EC0               	movlw	192
  5511  0006A6  EC0E  F00A         	call	_write_command
  5512                           
  5513                           ;ST7735_TFT.c: 305: write_data(0xA2);
  5514  0006AA  0EA2               	movlw	162
  5515  0006AC  EC06  F00A         	call	_write_data
  5516                           
  5517                           ;ST7735_TFT.c: 306: write_data(0x02);
  5518  0006B0  0E02               	movlw	2
  5519  0006B2  EC06  F00A         	call	_write_data
  5520                           
  5521                           ;ST7735_TFT.c: 307: write_data(0x84);
  5522  0006B6  0E84               	movlw	132
  5523  0006B8  EC06  F00A         	call	_write_data
  5524                           
  5525                           ;ST7735_TFT.c: 308: write_command(0xC1);
  5526  0006BC  0EC1               	movlw	193
  5527  0006BE  EC0E  F00A         	call	_write_command
  5528                           
  5529                           ;ST7735_TFT.c: 309: write_data(0xC5);
  5530  0006C2  0EC5               	movlw	197
  5531  0006C4  EC06  F00A         	call	_write_data
  5532                           
  5533                           ;ST7735_TFT.c: 310: write_command(0xC2);
  5534  0006C8  0EC2               	movlw	194
  5535  0006CA  EC0E  F00A         	call	_write_command
  5536                           
  5537                           ;ST7735_TFT.c: 311: write_data(0x0A);
  5538  0006CE  0E0A               	movlw	10
  5539  0006D0  EC06  F00A         	call	_write_data
  5540                           
  5541                           ;ST7735_TFT.c: 312: write_data(0x00);
  5542  0006D4  0E00               	movlw	0
  5543  0006D6  EC06  F00A         	call	_write_data
  5544                           
  5545                           ;ST7735_TFT.c: 313: write_command(0xC3);
  5546  0006DA  0EC3               	movlw	195
  5547  0006DC  EC0E  F00A         	call	_write_command
  5548                           
  5549                           ;ST7735_TFT.c: 314: write_data(0x8A);
  5550  0006E0  0E8A               	movlw	138
  5551  0006E2  EC06  F00A         	call	_write_data
  5552                           
  5553                           ;ST7735_TFT.c: 315: write_data(0x2A);
  5554  0006E6  0E2A               	movlw	42
  5555  0006E8  EC06  F00A         	call	_write_data
  5556                           
  5557                           ;ST7735_TFT.c: 316: write_command(0xC4);
  5558  0006EC  0EC4               	movlw	196
  5559  0006EE  EC0E  F00A         	call	_write_command
  5560                           
  5561                           ;ST7735_TFT.c: 317: write_data(0x8A);
  5562  0006F2  0E8A               	movlw	138
  5563  0006F4  EC06  F00A         	call	_write_data
  5564                           
  5565                           ;ST7735_TFT.c: 318: write_data(0xEE);
  5566  0006F8  0EEE               	movlw	238
  5567  0006FA  EC06  F00A         	call	_write_data
  5568                           
  5569                           ;ST7735_TFT.c: 319: write_command(0xC5);
  5570  0006FE  0EC5               	movlw	197
  5571  000700  EC0E  F00A         	call	_write_command
  5572                           
  5573                           ;ST7735_TFT.c: 320: write_data(0x0E);
  5574  000704  0E0E               	movlw	14
  5575  000706  EC06  F00A         	call	_write_data
  5576                           
  5577                           ;ST7735_TFT.c: 321: write_command(0x20);
  5578  00070A  0E20               	movlw	32
  5579  00070C  EC0E  F00A         	call	_write_command
  5580                           
  5581                           ;ST7735_TFT.c: 322: write_command(0x36);
  5582  000710  0E36               	movlw	54
  5583  000712  EC0E  F00A         	call	_write_command
  5584                           
  5585                           ;ST7735_TFT.c: 323: write_data(0xC8);
  5586  000716  0EC8               	movlw	200
  5587  000718  EC06  F00A         	call	_write_data
  5588                           
  5589                           ;ST7735_TFT.c: 324: write_command(0x3A);
  5590  00071C  0E3A               	movlw	58
  5591  00071E  EC0E  F00A         	call	_write_command
  5592                           
  5593                           ;ST7735_TFT.c: 325: write_data(0x05);
  5594  000722  0E05               	movlw	5
  5595  000724  EC06  F00A         	call	_write_data
  5596  000728  0012               	return		;funcret
  5597  00072A                     __end_of_Rcmd1:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           intcon2	equ	0xFF1
  5607                           postinc0	equ	0xFEE
  5608                           wreg	equ	0xFE8
  5609                           postdec1	equ	0xFE5
  5610                           fsr1l	equ	0xFE1
  5611                           indf2	equ	0xFDF
  5612                           postinc2	equ	0xFDE
  5613                           postdec2	equ	0xFDD
  5614                           fsr2h	equ	0xFDA
  5615                           fsr2l	equ	0xFD9
  5616                           status	equ	0xFD8
  5617                           
  5618 ;; *************** function _write_data *****************
  5619 ;; Defined at:
  5620 ;;		line 209 in file "../Lab11sample.X/ST7735_TFT.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  data_           1    wreg     unsigned char 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  data_           1   18[COMRAM] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;		None               void
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;Total ram usage:        1 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    4
  5641 ;; This function calls:
  5642 ;;		_spiwrite
  5643 ;; This function is called by:
  5644 ;;		_Rcmd1
  5645 ;;		_Rcmd2red
  5646 ;;		_Rcmd3
  5647 ;;		_setAddrWindow
  5648 ;;		_drawPixel
  5649 ;;		_TFT_GreenTab_Initialize
  5650 ;;		_Bcmd
  5651 ;;		_setScrollDefinition
  5652 ;;		_Rcmd2green
  5653 ;;		_VerticalScroll
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           	psect	text26
  5658  00140C                     __ptext26:
  5659                           	opt stack 0
  5660  00140C                     _write_data:
  5661                           	opt stack 21
  5662                           
  5663                           ;incstack = 0
  5664                           ;write_data@data_ stored from wreg
  5665  00140C  6E13               	movwf	write_data@data_,c
  5666                           
  5667                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  5668  00140E  9282               	bcf	3970,1,c	;volatile
  5669                           
  5670                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  5671  001410  8082               	bsf	3970,0,c	;volatile
  5672                           
  5673                           ;ST7735_TFT.c: 213: spiwrite(data_);
  5674  001412  5013               	movf	write_data@data_,w,c
  5675  001414  ECD8  F009         	call	_spiwrite
  5676                           
  5677                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  5678  001418  8282               	bsf	3970,1,c	;volatile
  5679  00141A  0012               	return		;funcret
  5680  00141C                     __end_of_write_data:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           intcon	equ	0xFF2
  5689                           intcon2	equ	0xFF1
  5690                           postinc0	equ	0xFEE
  5691                           wreg	equ	0xFE8
  5692                           postdec1	equ	0xFE5
  5693                           fsr1l	equ	0xFE1
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _write_command *****************
  5702 ;; Defined at:
  5703 ;;		line 198 in file "../Lab11sample.X/ST7735_TFT.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  cmd_            1    wreg     unsigned char 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  cmd_            1   18[COMRAM] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;		None               void
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;Total ram usage:        1 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    4
  5724 ;; This function calls:
  5725 ;;		_spiwrite
  5726 ;; This function is called by:
  5727 ;;		_Rcmd1
  5728 ;;		_Rcmd2red
  5729 ;;		_Rcmd3
  5730 ;;		_setAddrWindow
  5731 ;;		_TFT_GreenTab_Initialize
  5732 ;;		_Bcmd
  5733 ;;		_setScrollDefinition
  5734 ;;		_Rcmd2green
  5735 ;;		_VerticalScroll
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text27
  5740  00141C                     __ptext27:
  5741                           	opt stack 0
  5742  00141C                     _write_command:
  5743                           	opt stack 21
  5744                           
  5745                           ;incstack = 0
  5746                           ;write_command@cmd_ stored from wreg
  5747  00141C  6E13               	movwf	write_command@cmd_,c
  5748                           
  5749                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  5750  00141E  9282               	bcf	3970,1,c	;volatile
  5751                           
  5752                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  5753  001420  9082               	bcf	3970,0,c	;volatile
  5754                           
  5755                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  5756  001422  5013               	movf	write_command@cmd_,w,c
  5757  001424  ECD8  F009         	call	_spiwrite
  5758                           
  5759                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  5760  001428  8282               	bsf	3970,1,c	;volatile
  5761  00142A  0012               	return		;funcret
  5762  00142C                     __end_of_write_command:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           intcon	equ	0xFF2
  5771                           intcon2	equ	0xFF1
  5772                           postinc0	equ	0xFEE
  5773                           wreg	equ	0xFE8
  5774                           postdec1	equ	0xFE5
  5775                           fsr1l	equ	0xFE1
  5776                           indf2	equ	0xFDF
  5777                           postinc2	equ	0xFDE
  5778                           postdec2	equ	0xFDD
  5779                           fsr2h	equ	0xFDA
  5780                           fsr2l	equ	0xFD9
  5781                           status	equ	0xFD8
  5782                           
  5783 ;; *************** function _spiwrite *****************
  5784 ;; Defined at:
  5785 ;;		line 189 in file "../Lab11sample.X/ST7735_TFT.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  spidata         1    wreg     unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  spidata         1   17[COMRAM] unsigned char 
  5790 ;;  x               1   16[COMRAM] unsigned char 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;		None               void
  5793 ;; Registers used:
  5794 ;;		wreg
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;Total ram usage:        2 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:    3
  5807 ;; This function calls:
  5808 ;;		Nothing
  5809 ;; This function is called by:
  5810 ;;		_write_command
  5811 ;;		_write_data
  5812 ;;		_drawFastVLine
  5813 ;;		_fillRectangle
  5814 ;;		_drawFastHLine
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text28
  5819  0013B0                     __ptext28:
  5820                           	opt stack 0
  5821  0013B0                     _spiwrite:
  5822                           	opt stack 23
  5823                           
  5824                           ;incstack = 0
  5825                           ;spiwrite@spidata stored from wreg
  5826  0013B0  6E12               	movwf	spiwrite@spidata,c
  5827                           
  5828                           ;ST7735_TFT.c: 191: char x;
  5829                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  5830  0013B2  969E               	bcf	3998,3,c	;volatile
  5831                           
  5832                           ;ST7735_TFT.c: 193: x = SSPBUF;
  5833  0013B4  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  5834                           
  5835                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  5836  0013B8  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5837                           
  5838                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  5839  0013BC  D000               	goto	l419
  5840  0013BE                     l419:
  5841  0013BE  A0C7               	btfss	4039,0,c	;volatile
  5842  0013C0  D7FE               	goto	l419
  5843  0013C2  0012               	return		;funcret
  5844  0013C4                     __end_of_spiwrite:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           tblptrh	equ	0xFF7
  5848                           tblptrl	equ	0xFF6
  5849                           tablat	equ	0xFF5
  5850                           prodh	equ	0xFF4
  5851                           prodl	equ	0xFF3
  5852                           intcon	equ	0xFF2
  5853                           intcon2	equ	0xFF1
  5854                           postinc0	equ	0xFEE
  5855                           wreg	equ	0xFE8
  5856                           postdec1	equ	0xFE5
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _LCD_Reset *****************
  5866 ;; Defined at:
  5867 ;;		line 217 in file "../Lab11sample.X/ST7735_TFT.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;		None               void
  5874 ;; Registers used:
  5875 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;Total ram usage:        0 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    5
  5888 ;; This function calls:
  5889 ;;		_delay_ms
  5890 ;; This function is called by:
  5891 ;;		_Initialize_Screen
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text29
  5896  0013C4                     __ptext29:
  5897                           	opt stack 0
  5898  0013C4                     _LCD_Reset:
  5899                           	opt stack 23
  5900                           
  5901                           ;ST7735_TFT.c: 219: PORTCbits.RC2 = 0;
  5902                           
  5903                           ;incstack = 0
  5904  0013C4  9482               	bcf	3970,2,c	;volatile
  5905                           
  5906                           ;ST7735_TFT.c: 220: delay_ms(100);
  5907  0013C6  0E00               	movlw	0
  5908  0013C8  6E18               	movwf	delay_ms@ms+1,c
  5909  0013CA  0E64               	movlw	100
  5910  0013CC  6E17               	movwf	delay_ms@ms,c
  5911  0013CE  ECAA  F007         	call	_delay_ms	;wreg free
  5912                           
  5913                           ;ST7735_TFT.c: 221: PORTCbits.RC2 = 1;
  5914  0013D2  8482               	bsf	3970,2,c	;volatile
  5915  0013D4  0012               	return		;funcret
  5916  0013D6                     __end_of_LCD_Reset:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           prodh	equ	0xFF4
  5923                           prodl	equ	0xFF3
  5924                           intcon	equ	0xFF2
  5925                           intcon2	equ	0xFF1
  5926                           postinc0	equ	0xFEE
  5927                           wreg	equ	0xFE8
  5928                           postdec1	equ	0xFE5
  5929                           fsr1l	equ	0xFE1
  5930                           indf2	equ	0xFDF
  5931                           postinc2	equ	0xFDE
  5932                           postdec2	equ	0xFDD
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _delay_ms *****************
  5938 ;; Defined at:
  5939 ;;		line 64 in file "../Lab11sample.X/ST7735_TFT.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  ms              2   22[COMRAM] int 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  count           2   26[COMRAM] int 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;		None               void
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;Total ram usage:        6 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    4
  5960 ;; This function calls:
  5961 ;;		___wmul
  5962 ;; This function is called by:
  5963 ;;		_LCD_Reset
  5964 ;;		_Rcmd1
  5965 ;;		_Rcmd3
  5966 ;;		_Bcmd
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text30
  5971  000F54                     __ptext30:
  5972                           	opt stack 0
  5973  000F54                     _delay_ms:
  5974                           	opt stack 22
  5975                           
  5976                           ;ST7735_TFT.c: 70: int count;
  5977                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  5978                           
  5979                           ;incstack = 0
  5980  000F54  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  5981  000F58  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5982  000F5C  0E00               	movlw	0
  5983  000F5E  6E14               	movwf	___wmul@multiplicand+1,c
  5984  000F60  0EFA               	movlw	250
  5985  000F62  6E13               	movwf	___wmul@multiplicand,c
  5986  000F64  EC64  F009         	call	___wmul	;wreg free
  5987  000F68  C011  F01B         	movff	?___wmul,delay_ms@count
  5988  000F6C  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  5989                           
  5990                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  5991  000F70  C01B  F019         	movff	delay_ms@count,??_delay_ms
  5992  000F74  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  5993  000F78  1E19               	comf	??_delay_ms,f,c
  5994  000F7A  1E1A               	comf	??_delay_ms+1,f,c
  5995  000F7C  4A19               	infsnz	??_delay_ms,f,c
  5996  000F7E  2A1A               	incf	??_delay_ms+1,f,c
  5997  000F80  0EFF               	movlw	255
  5998  000F82  2419               	addwf	??_delay_ms,w,c
  5999  000F84  6E1B               	movwf	delay_ms@count,c
  6000  000F86  0EFF               	movlw	255
  6001  000F88  201A               	addwfc	??_delay_ms+1,w,c
  6002  000F8A  6E1C               	movwf	delay_ms@count+1,c
  6003                           
  6004                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6005  000F8C  0EB8               	movlw	184
  6006  000F8E  6EB1               	movwf	4017,c	;volatile
  6007                           
  6008                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6009  000F90  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6010                           
  6011                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6012  000F94  501C               	movf	delay_ms@count+1,w,c
  6013  000F96  6EB3               	movwf	4019,c	;volatile
  6014                           
  6015                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6016  000F98  92A1               	bcf	4001,1,c	;volatile
  6017                           
  6018                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6019  000F9A  80B1               	bsf	4017,0,c	;volatile
  6020                           
  6021                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6022  000F9C  D000               	goto	l409
  6023  000F9E                     l409:
  6024  000F9E  A2A1               	btfss	4001,1,c	;volatile
  6025  000FA0  D7FE               	goto	l409
  6026                           
  6027                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6028  000FA2  90B1               	bcf	4017,0,c	;volatile
  6029  000FA4  0012               	return		;funcret
  6030  000FA6                     __end_of_delay_ms:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodh	equ	0xFF4
  6037                           prodl	equ	0xFF3
  6038                           intcon	equ	0xFF2
  6039                           intcon2	equ	0xFF1
  6040                           postinc0	equ	0xFEE
  6041                           wreg	equ	0xFE8
  6042                           postdec1	equ	0xFE5
  6043                           fsr1l	equ	0xFE1
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           fsr2h	equ	0xFDA
  6048                           fsr2l	equ	0xFD9
  6049                           status	equ	0xFD8
  6050                           
  6051 ;; *************** function ___wmul *****************
  6052 ;; Defined at:
  6053 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;  multiplier      2   16[COMRAM] unsigned int 
  6056 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  product         2   20[COMRAM] unsigned int 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  2   16[COMRAM] unsigned int 
  6061 ;; Registers used:
  6062 ;;		wreg, status,2, status,0, prodl, prodh
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6068 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;Total ram usage:        6 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    3
  6075 ;; This function calls:
  6076 ;;		Nothing
  6077 ;; This function is called by:
  6078 ;;		_main
  6079 ;;		_delay_ms
  6080 ;;		_drawChar
  6081 ;;		_printf
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text31
  6086  0012C8                     __ptext31:
  6087                           	opt stack 0
  6088  0012C8                     ___wmul:
  6089                           	opt stack 26
  6090                           
  6091                           ;incstack = 0
  6092  0012C8  5011               	movf	___wmul@multiplier,w,c
  6093  0012CA  0213               	mulwf	___wmul@multiplicand,c
  6094  0012CC  CFF3 F015          	movff	prodl,___wmul@product
  6095  0012D0  CFF4 F016          	movff	prodh,___wmul@product+1
  6096  0012D4  5011               	movf	___wmul@multiplier,w,c
  6097  0012D6  0214               	mulwf	___wmul@multiplicand+1,c
  6098  0012D8  50F3               	movf	prodl,w,c
  6099  0012DA  2616               	addwf	___wmul@product+1,f,c
  6100  0012DC  5012               	movf	___wmul@multiplier+1,w,c
  6101  0012DE  0213               	mulwf	___wmul@multiplicand,c
  6102  0012E0  50F3               	movf	prodl,w,c
  6103  0012E2  2616               	addwf	___wmul@product+1,f,c
  6104  0012E4  C015  F011         	movff	___wmul@product,?___wmul
  6105  0012E8  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6106  0012EC  D000               	goto	l688
  6107  0012EE                     l688:
  6108  0012EE  0012               	return		;funcret
  6109  0012F0                     __end_of___wmul:
  6110                           	opt stack 0
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon	equ	0xFF2
  6118                           intcon2	equ	0xFF1
  6119                           postinc0	equ	0xFEE
  6120                           wreg	equ	0xFE8
  6121                           postdec1	equ	0xFE5
  6122                           fsr1l	equ	0xFE1
  6123                           indf2	equ	0xFDF
  6124                           postinc2	equ	0xFDE
  6125                           postdec2	equ	0xFDD
  6126                           fsr2h	equ	0xFDA
  6127                           fsr2l	equ	0xFD9
  6128                           status	equ	0xFD8
  6129                           
  6130 ;; *************** function _I2C_Init *****************
  6131 ;; Defined at:
  6132 ;;		line 14 in file "../Lab11sample.X/I2C_Soft.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;  c               4   16[COMRAM] unsigned long 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;		None               void
  6139 ;; Registers used:
  6140 ;;		wreg, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6146 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;Total ram usage:        4 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    4
  6153 ;; This function calls:
  6154 ;;		_i2cHighScl
  6155 ;;		_i2cHighSda
  6156 ;; This function is called by:
  6157 ;;		_Do_Init
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text32
  6162  001452                     __ptext32:
  6163                           	opt stack 0
  6164  001452                     _I2C_Init:
  6165                           	opt stack 25
  6166                           
  6167                           ;I2C_Soft.c: 16: i2cHighScl();
  6168                           
  6169                           ;incstack = 0
  6170  001452  EC1D  F00A         	call	_i2cHighScl	;wreg free
  6171                           
  6172                           ;I2C_Soft.c: 17: i2cHighSda();
  6173  001456  EC3C  F00A         	call	_i2cHighSda	;wreg free
  6174  00145A  0012               	return		;funcret
  6175  00145C                     __end_of_I2C_Init:
  6176                           	opt stack 0
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           prodh	equ	0xFF4
  6182                           prodl	equ	0xFF3
  6183                           intcon	equ	0xFF2
  6184                           intcon2	equ	0xFF1
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           postdec1	equ	0xFE5
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function _DS1621_Init *****************
  6197 ;; Defined at:
  6198 ;;		line 21 in file "../Lab11sample.X/I2C_Support.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;		None
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  Device          1   21[COMRAM] unsigned char 
  6203 ;; Return value:  Size  Location     Type
  6204 ;;		None               void
  6205 ;; Registers used:
  6206 ;;		wreg, status,2, status,0, cstack
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;Total ram usage:        1 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    6
  6219 ;; This function calls:
  6220 ;;		_I2C_Write_Cmd_Only
  6221 ;;		_I2C_Write_Cmd_Write_Data
  6222 ;; This function is called by:
  6223 ;;		_Do_Init
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text33
  6228  001332                     __ptext33:
  6229                           	opt stack 0
  6230  001332                     _DS1621_Init:
  6231                           	opt stack 23
  6232                           
  6233                           ;I2C_Support.c: 23: char Device = 0x48;
  6234                           
  6235                           ;incstack = 0
  6236  001332  0E48               	movlw	72
  6237  001334  6E16               	movwf	DS1621_Init@Device,c
  6238                           
  6239                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data(Device, 0xAC, 0x02);
  6240  001336  0EAC               	movlw	172
  6241  001338  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  6242  00133A  0E02               	movlw	2
  6243  00133C  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  6244  00133E  5016               	movf	DS1621_Init@Device,w,c
  6245  001340  EC89  F009         	call	_I2C_Write_Cmd_Write_Data
  6246                           
  6247                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  6248  001344  0EEE               	movlw	238
  6249  001346  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  6250  001348  5016               	movf	DS1621_Init@Device,w,c
  6251  00134A  ECB6  F009         	call	_I2C_Write_Cmd_Only
  6252  00134E  0012               	return		;funcret
  6253  001350                     __end_of_DS1621_Init:
  6254                           	opt stack 0
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           intcon	equ	0xFF2
  6262                           intcon2	equ	0xFF1
  6263                           postinc0	equ	0xFEE
  6264                           wreg	equ	0xFE8
  6265                           postdec1	equ	0xFE5
  6266                           fsr1l	equ	0xFE1
  6267                           indf2	equ	0xFDF
  6268                           postinc2	equ	0xFDE
  6269                           postdec2	equ	0xFDD
  6270                           fsr2h	equ	0xFDA
  6271                           fsr2l	equ	0xFD9
  6272                           status	equ	0xFD8
  6273                           
  6274 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  6275 ;; Defined at:
  6276 ;;		line 152 in file "../Lab11sample.X/I2C_Soft.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  Device          1    wreg     unsigned char 
  6279 ;;  Cmd             1   18[COMRAM] unsigned char 
  6280 ;;  Data_Out        1   19[COMRAM] unsigned char 
  6281 ;; Auto vars:     Size  Location     Type
  6282 ;;  Device          1   20[COMRAM] unsigned char 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;		None               void
  6285 ;; Registers used:
  6286 ;;		wreg, status,2, status,0, cstack
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6292 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;Total ram usage:        3 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    5
  6299 ;; This function calls:
  6300 ;;		_I2C_Start
  6301 ;;		_I2C_Stop
  6302 ;;		_I2C_Write
  6303 ;; This function is called by:
  6304 ;;		_DS1621_Init
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text34
  6309  001312                     __ptext34:
  6310                           	opt stack 0
  6311  001312                     _I2C_Write_Cmd_Write_Data:
  6312                           	opt stack 23
  6313                           
  6314                           ;incstack = 0
  6315                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  6316  001312  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  6317                           
  6318                           ;I2C_Soft.c: 154: I2C_Start();
  6319  001314  ECF4  F009         	call	_I2C_Start	;wreg free
  6320                           
  6321                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  6322  001318  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  6323  00131A  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  6324  00131C  ECC9  F008         	call	_I2C_Write
  6325                           
  6326                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  6327  001320  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  6328  001322  ECC9  F008         	call	_I2C_Write
  6329                           
  6330                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  6331  001326  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  6332  001328  ECC9  F008         	call	_I2C_Write
  6333                           
  6334                           ;I2C_Soft.c: 158: I2C_Stop();
  6335  00132C  ECEB  F009         	call	_I2C_Stop	;wreg free
  6336  001330  0012               	return		;funcret
  6337  001332                     __end_of_I2C_Write_Cmd_Write_Data:
  6338                           	opt stack 0
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           intcon	equ	0xFF2
  6346                           intcon2	equ	0xFF1
  6347                           postinc0	equ	0xFEE
  6348                           wreg	equ	0xFE8
  6349                           postdec1	equ	0xFE5
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _I2C_Write_Cmd_Only *****************
  6359 ;; Defined at:
  6360 ;;		line 144 in file "../Lab11sample.X/I2C_Soft.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  Device          1    wreg     unsigned char 
  6363 ;;  Cmd             1   18[COMRAM] unsigned char 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  Device          1   19[COMRAM] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;		None               void
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0, cstack
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6375 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;Total ram usage:        2 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    5
  6382 ;; This function calls:
  6383 ;;		_I2C_Start
  6384 ;;		_I2C_Stop
  6385 ;;		_I2C_Write
  6386 ;; This function is called by:
  6387 ;;		_DS1621_Init
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text35
  6392  00136C                     __ptext35:
  6393                           	opt stack 0
  6394  00136C                     _I2C_Write_Cmd_Only:
  6395                           	opt stack 23
  6396                           
  6397                           ;incstack = 0
  6398                           ;I2C_Write_Cmd_Only@Device stored from wreg
  6399  00136C  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  6400                           
  6401                           ;I2C_Soft.c: 146: I2C_Start();
  6402  00136E  ECF4  F009         	call	_I2C_Start	;wreg free
  6403                           
  6404                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  6405  001372  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  6406  001374  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  6407  001376  ECC9  F008         	call	_I2C_Write
  6408                           
  6409                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  6410  00137A  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  6411  00137C  ECC9  F008         	call	_I2C_Write
  6412                           
  6413                           ;I2C_Soft.c: 149: I2C_Stop();
  6414  001380  ECEB  F009         	call	_I2C_Stop	;wreg free
  6415  001384  0012               	return		;funcret
  6416  001386                     __end_of_I2C_Write_Cmd_Only:
  6417                           	opt stack 0
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           intcon2	equ	0xFF1
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           postdec1	equ	0xFE5
  6429                           fsr1l	equ	0xFE1
  6430                           indf2	equ	0xFDF
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function _DS3231_Read_Time *****************
  6438 ;; Defined at:
  6439 ;;		line 44 in file "../Lab11sample.X/I2C_Support.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;  Device          1   20[COMRAM] unsigned char 
  6444 ;;  Address         1   19[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;		None               void
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;Total ram usage:        2 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    6
  6461 ;; This function calls:
  6462 ;;		_I2C_ReStart
  6463 ;;		_I2C_Read
  6464 ;;		_I2C_Start
  6465 ;;		_I2C_Stop
  6466 ;;		_I2C_Write
  6467 ;; This function is called by:
  6468 ;;		_main
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text36
  6473  000E40                     __ptext36:
  6474                           	opt stack 0
  6475  000E40                     _DS3231_Read_Time:
  6476                           	opt stack 24
  6477                           
  6478                           ;I2C_Support.c: 46: char Device = 0x68;
  6479                           
  6480                           ;incstack = 0
  6481  000E40  0E68               	movlw	104
  6482  000E42  6E15               	movwf	DS3231_Read_Time@Device,c
  6483                           
  6484                           ;I2C_Support.c: 47: char Address = 0x00;
  6485  000E44  0E00               	movlw	0
  6486  000E46  6E14               	movwf	DS3231_Read_Time@Address,c
  6487                           
  6488                           ;I2C_Support.c: 49: I2C_Start();
  6489  000E48  ECF4  F009         	call	_I2C_Start	;wreg free
  6490                           
  6491                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
  6492  000E4C  5015               	movf	DS3231_Read_Time@Device,w,c
  6493  000E4E  2415               	addwf	DS3231_Read_Time@Device,w,c
  6494  000E50  ECC9  F008         	call	_I2C_Write
  6495                           
  6496                           ;I2C_Support.c: 51: I2C_Write(Address);
  6497  000E54  5014               	movf	DS3231_Read_Time@Address,w,c
  6498  000E56  ECC9  F008         	call	_I2C_Write
  6499                           
  6500                           ;I2C_Support.c: 52: I2C_ReStart();
  6501  000E5A  ECC3  F009         	call	_I2C_ReStart	;wreg free
  6502                           
  6503                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
  6504  000E5E  80D8               	bsf	status,0,c
  6505  000E60  3415               	rlcf	DS3231_Read_Time@Device,w,c
  6506  000E62  ECC9  F008         	call	_I2C_Write
  6507                           
  6508                           ;I2C_Support.c: 54: second = I2C_Read(1);
  6509  000E66  0E01               	movlw	1
  6510  000E68  EC45  F008         	call	_I2C_Read
  6511  000E6C  6E61               	movwf	_second,c
  6512                           
  6513                           ;I2C_Support.c: 55: minute = I2C_Read(1);
  6514  000E6E  0E01               	movlw	1
  6515  000E70  EC45  F008         	call	_I2C_Read
  6516  000E74  6E5E               	movwf	_minute,c
  6517                           
  6518                           ;I2C_Support.c: 56: hour = I2C_Read(1);
  6519  000E76  0E01               	movlw	1
  6520  000E78  EC45  F008         	call	_I2C_Read
  6521  000E7C  6E5C               	movwf	_hour,c
  6522                           
  6523                           ;I2C_Support.c: 57: dow = I2C_Read(1);
  6524  000E7E  0E01               	movlw	1
  6525  000E80  EC45  F008         	call	_I2C_Read
  6526  000E84  6E5A               	movwf	_dow,c
  6527                           
  6528                           ;I2C_Support.c: 58: day = I2C_Read(1);
  6529  000E86  0E01               	movlw	1
  6530  000E88  EC45  F008         	call	_I2C_Read
  6531  000E8C  6E59               	movwf	_day,c
  6532                           
  6533                           ;I2C_Support.c: 59: month = I2C_Read(1);
  6534  000E8E  0E01               	movlw	1
  6535  000E90  EC45  F008         	call	_I2C_Read
  6536  000E94  6E5F               	movwf	_month,c
  6537                           
  6538                           ;I2C_Support.c: 60: year = I2C_Read(0);
  6539  000E96  0E00               	movlw	0
  6540  000E98  EC45  F008         	call	_I2C_Read
  6541  000E9C  6E6D               	movwf	_year,c
  6542                           
  6543                           ;I2C_Support.c: 61: I2C_Stop();
  6544  000E9E  ECEB  F009         	call	_I2C_Stop	;wreg free
  6545  000EA2  0012               	return		;funcret
  6546  000EA4                     __end_of_DS3231_Read_Time:
  6547                           	opt stack 0
  6548                           tblptru	equ	0xFF8
  6549                           tblptrh	equ	0xFF7
  6550                           tblptrl	equ	0xFF6
  6551                           tablat	equ	0xFF5
  6552                           prodh	equ	0xFF4
  6553                           prodl	equ	0xFF3
  6554                           intcon	equ	0xFF2
  6555                           intcon2	equ	0xFF1
  6556                           postinc0	equ	0xFEE
  6557                           wreg	equ	0xFE8
  6558                           postdec1	equ	0xFE5
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function _DS1621_Read_Temp *****************
  6568 ;; Defined at:
  6569 ;;		line 29 in file "../Lab11sample.X/I2C_Support.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;		None
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  Device          1   23[COMRAM] unsigned char 
  6574 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  6575 ;;  Cmd             1   21[COMRAM] unsigned char 
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  2   19[COMRAM] int 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2, status,0, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;Total ram usage:        5 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    6
  6592 ;; This function calls:
  6593 ;;		_I2C_ReStart
  6594 ;;		_I2C_Read
  6595 ;;		_I2C_Start
  6596 ;;		_I2C_Stop
  6597 ;;		_I2C_Write
  6598 ;; This function is called by:
  6599 ;;		_main
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           	psect	text37
  6604  0011D0                     __ptext37:
  6605                           	opt stack 0
  6606  0011D0                     _DS1621_Read_Temp:
  6607                           	opt stack 24
  6608                           
  6609                           ;I2C_Support.c: 31: char Device = 0x48;
  6610                           
  6611                           ;incstack = 0
  6612  0011D0  0E48               	movlw	72
  6613  0011D2  6E18               	movwf	DS1621_Read_Temp@Device,c
  6614                           
  6615                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  6616  0011D4  0EAA               	movlw	170
  6617  0011D6  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  6618                           
  6619                           ;I2C_Support.c: 33: char Data_Ret;
  6620                           ;I2C_Support.c: 34: I2C_Start();
  6621  0011D8  ECF4  F009         	call	_I2C_Start	;wreg free
  6622                           
  6623                           ;I2C_Support.c: 35: I2C_Write((Device << 1) | 0);
  6624  0011DC  5018               	movf	DS1621_Read_Temp@Device,w,c
  6625  0011DE  2418               	addwf	DS1621_Read_Temp@Device,w,c
  6626  0011E0  ECC9  F008         	call	_I2C_Write
  6627                           
  6628                           ;I2C_Support.c: 36: I2C_Write(Cmd);
  6629  0011E4  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  6630  0011E6  ECC9  F008         	call	_I2C_Write
  6631                           
  6632                           ;I2C_Support.c: 37: I2C_ReStart();
  6633  0011EA  ECC3  F009         	call	_I2C_ReStart	;wreg free
  6634                           
  6635                           ;I2C_Support.c: 38: I2C_Write((Device << 1) | 1);
  6636  0011EE  80D8               	bsf	status,0,c
  6637  0011F0  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  6638  0011F2  ECC9  F008         	call	_I2C_Write
  6639                           
  6640                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
  6641  0011F6  0E00               	movlw	0
  6642  0011F8  EC45  F008         	call	_I2C_Read
  6643  0011FC  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  6644                           
  6645                           ;I2C_Support.c: 40: I2C_Stop();
  6646  0011FE  ECEB  F009         	call	_I2C_Stop	;wreg free
  6647                           
  6648                           ;I2C_Support.c: 41: return Data_Ret;
  6649  001202  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  6650  001206  6A15               	clrf	?_DS1621_Read_Temp+1,c
  6651  001208  D000               	goto	l117
  6652  00120A                     l117:
  6653  00120A  0012               	return		;funcret
  6654  00120C                     __end_of_DS1621_Read_Temp:
  6655                           	opt stack 0
  6656                           tblptru	equ	0xFF8
  6657                           tblptrh	equ	0xFF7
  6658                           tblptrl	equ	0xFF6
  6659                           tablat	equ	0xFF5
  6660                           prodh	equ	0xFF4
  6661                           prodl	equ	0xFF3
  6662                           intcon	equ	0xFF2
  6663                           intcon2	equ	0xFF1
  6664                           postinc0	equ	0xFEE
  6665                           wreg	equ	0xFE8
  6666                           postdec1	equ	0xFE5
  6667                           fsr1l	equ	0xFE1
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           fsr2h	equ	0xFDA
  6672                           fsr2l	equ	0xFD9
  6673                           status	equ	0xFD8
  6674                           
  6675 ;; *************** function _I2C_Write *****************
  6676 ;; Defined at:
  6677 ;;		line 41 in file "../Lab11sample.X/I2C_Soft.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  outByte         1    wreg     unsigned char 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  outByte         1   16[COMRAM] unsigned char 
  6682 ;;  n               1   17[COMRAM] unsigned char 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;		None               void
  6685 ;; Registers used:
  6686 ;;		wreg, status,2, status,0, cstack
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;Total ram usage:        2 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    4
  6699 ;; This function calls:
  6700 ;;		_i2cHighScl
  6701 ;;		_i2cHighSda
  6702 ;;		_i2cLowScl
  6703 ;;		_i2cLowSda
  6704 ;; This function is called by:
  6705 ;;		_I2C_Write_Cmd_Only
  6706 ;;		_I2C_Write_Cmd_Write_Data
  6707 ;;		_DS1621_Read_Temp
  6708 ;;		_DS3231_Read_Time
  6709 ;;		_I2C_Write_Address_Read_One_Byte
  6710 ;;		_I2C_Write_Address_Write_One_Byte
  6711 ;;		_I2C_Write_Cmd_Read_One_Byte
  6712 ;;		_DS3231_Setup_Time
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text38
  6717  001192                     __ptext38:
  6718                           	opt stack 0
  6719  001192                     _I2C_Write:
  6720                           	opt stack 23
  6721                           
  6722                           ;incstack = 0
  6723                           ;I2C_Write@outByte stored from wreg
  6724  001192  6E11               	movwf	I2C_Write@outByte,c
  6725                           
  6726                           ;I2C_Soft.c: 43: unsigned char n;
  6727                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
  6728  001194  0E00               	movlw	0
  6729  001196  6E12               	movwf	I2C_Write@n,c
  6730  001198                     l3856:
  6731  001198  0E07               	movlw	7
  6732  00119A  6412               	cpfsgt	I2C_Write@n,c
  6733  00119C  D001               	goto	l37
  6734  00119E  D011               	goto	l3874
  6735  0011A0                     l37:
  6736                           
  6737                           ;I2C_Soft.c: 45: {
  6738                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
  6739  0011A0  AE11               	btfss	I2C_Write@outByte,7,c
  6740  0011A2  D003               	goto	l3862
  6741  0011A4  EC3C  F00A         	call	_i2cHighSda	;wreg free
  6742  0011A8  D003               	goto	l3864
  6743  0011AA                     l3862:
  6744                           
  6745                           ;I2C_Soft.c: 47: else i2cLowSda();
  6746  0011AA  EC33  F00A         	call	_i2cLowSda	;wreg free
  6747  0011AE  D000               	goto	l3864
  6748  0011B0                     l3864:
  6749                           
  6750                           ;I2C_Soft.c: 48: i2cHighScl();
  6751  0011B0  EC1D  F00A         	call	_i2cHighScl	;wreg free
  6752                           
  6753                           ;I2C_Soft.c: 49: i2cLowScl();
  6754  0011B4  EC38  F00A         	call	_i2cLowScl	;wreg free
  6755                           
  6756                           ;I2C_Soft.c: 50: outByte = outByte << 1;
  6757  0011B8  5011               	movf	I2C_Write@outByte,w,c
  6758  0011BA  2411               	addwf	I2C_Write@outByte,w,c
  6759  0011BC  6E11               	movwf	I2C_Write@outByte,c
  6760  0011BE  2A12               	incf	I2C_Write@n,f,c
  6761  0011C0  D7EB               	goto	l3856
  6762  0011C2                     l3874:
  6763                           
  6764                           ;I2C_Soft.c: 51: }
  6765                           ;I2C_Soft.c: 52: i2cHighSda();
  6766  0011C2  EC3C  F00A         	call	_i2cHighSda	;wreg free
  6767                           
  6768                           ;I2C_Soft.c: 53: i2cHighScl();
  6769  0011C6  EC1D  F00A         	call	_i2cHighScl	;wreg free
  6770                           
  6771                           ;I2C_Soft.c: 54: i2cLowScl();
  6772  0011CA  EC38  F00A         	call	_i2cLowScl	;wreg free
  6773  0011CE  0012               	return		;funcret
  6774  0011D0                     __end_of_I2C_Write:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           intcon2	equ	0xFF1
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           postdec1	equ	0xFE5
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function _I2C_Stop *****************
  6796 ;; Defined at:
  6797 ;;		line 88 in file "../Lab11sample.X/I2C_Soft.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;		None
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:        0 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    4
  6818 ;; This function calls:
  6819 ;;		_i2cHighScl
  6820 ;;		_i2cHighSda
  6821 ;;		_i2cLowScl
  6822 ;;		_i2cLowSda
  6823 ;; This function is called by:
  6824 ;;		_I2C_Write_Cmd_Only
  6825 ;;		_I2C_Write_Cmd_Write_Data
  6826 ;;		_DS1621_Read_Temp
  6827 ;;		_DS3231_Read_Time
  6828 ;;		_I2C_Write_Address_Read_One_Byte
  6829 ;;		_I2C_Write_Address_Write_One_Byte
  6830 ;;		_I2C_Write_Cmd_Read_One_Byte
  6831 ;;		_DS3231_Setup_Time
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text39
  6836  0013D6                     __ptext39:
  6837                           	opt stack 0
  6838  0013D6                     _I2C_Stop:
  6839                           	opt stack 23
  6840                           
  6841                           ;I2C_Soft.c: 90: i2cLowScl();
  6842                           
  6843                           ;incstack = 0
  6844  0013D6  EC38  F00A         	call	_i2cLowScl	;wreg free
  6845                           
  6846                           ;I2C_Soft.c: 91: i2cLowSda();
  6847  0013DA  EC33  F00A         	call	_i2cLowSda	;wreg free
  6848                           
  6849                           ;I2C_Soft.c: 92: i2cHighScl();
  6850  0013DE  EC1D  F00A         	call	_i2cHighScl	;wreg free
  6851                           
  6852                           ;I2C_Soft.c: 93: i2cHighSda();
  6853  0013E2  EC3C  F00A         	call	_i2cHighSda	;wreg free
  6854  0013E6  0012               	return		;funcret
  6855  0013E8                     __end_of_I2C_Stop:
  6856                           	opt stack 0
  6857                           tblptru	equ	0xFF8
  6858                           tblptrh	equ	0xFF7
  6859                           tblptrl	equ	0xFF6
  6860                           tablat	equ	0xFF5
  6861                           prodh	equ	0xFF4
  6862                           prodl	equ	0xFF3
  6863                           intcon	equ	0xFF2
  6864                           intcon2	equ	0xFF1
  6865                           postinc0	equ	0xFEE
  6866                           wreg	equ	0xFE8
  6867                           postdec1	equ	0xFE5
  6868                           fsr1l	equ	0xFE1
  6869                           indf2	equ	0xFDF
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function _I2C_Start *****************
  6877 ;; Defined at:
  6878 ;;		line 71 in file "../Lab11sample.X/I2C_Soft.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;		None
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;		None
  6883 ;; Return value:  Size  Location     Type
  6884 ;;		None               void
  6885 ;; Registers used:
  6886 ;;		wreg, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;Total ram usage:        0 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    4
  6899 ;; This function calls:
  6900 ;;		_i2cHighScl
  6901 ;;		_i2cHighSda
  6902 ;;		_i2cLowScl
  6903 ;;		_i2cLowSda
  6904 ;; This function is called by:
  6905 ;;		_I2C_Write_Cmd_Only
  6906 ;;		_I2C_Write_Cmd_Write_Data
  6907 ;;		_DS1621_Read_Temp
  6908 ;;		_DS3231_Read_Time
  6909 ;;		_I2C_Write_Address_Read_One_Byte
  6910 ;;		_I2C_Write_Address_Write_One_Byte
  6911 ;;		_I2C_Write_Cmd_Read_One_Byte
  6912 ;;		_DS3231_Setup_Time
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text40
  6917  0013E8                     __ptext40:
  6918                           	opt stack 0
  6919  0013E8                     _I2C_Start:
  6920                           	opt stack 23
  6921                           
  6922                           ;I2C_Soft.c: 73: i2cHighSda();
  6923                           
  6924                           ;incstack = 0
  6925  0013E8  EC3C  F00A         	call	_i2cHighSda	;wreg free
  6926                           
  6927                           ;I2C_Soft.c: 74: i2cHighScl();
  6928  0013EC  EC1D  F00A         	call	_i2cHighScl	;wreg free
  6929                           
  6930                           ;I2C_Soft.c: 75: i2cLowSda();
  6931  0013F0  EC33  F00A         	call	_i2cLowSda	;wreg free
  6932                           
  6933                           ;I2C_Soft.c: 76: i2cLowScl();
  6934  0013F4  EC38  F00A         	call	_i2cLowScl	;wreg free
  6935  0013F8  0012               	return		;funcret
  6936  0013FA                     __end_of_I2C_Start:
  6937                           	opt stack 0
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           intcon2	equ	0xFF1
  6946                           postinc0	equ	0xFEE
  6947                           wreg	equ	0xFE8
  6948                           postdec1	equ	0xFE5
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _I2C_Read *****************
  6958 ;; Defined at:
  6959 ;;		line 20 in file "../Lab11sample.X/I2C_Soft.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;  ack             1    wreg     unsigned char 
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;  ack             1   16[COMRAM] unsigned char 
  6964 ;;  inByte          1   18[COMRAM] unsigned char 
  6965 ;;  n               1   17[COMRAM] unsigned char 
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  1    wreg      unsigned char 
  6968 ;; Registers used:
  6969 ;;		wreg, status,2, status,0, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;Total ram usage:        3 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    5
  6982 ;; This function calls:
  6983 ;;		_i2cAck
  6984 ;;		_i2cHighScl
  6985 ;;		_i2cHighSda
  6986 ;;		_i2cLowScl
  6987 ;;		_i2cNack
  6988 ;; This function is called by:
  6989 ;;		_DS1621_Read_Temp
  6990 ;;		_DS3231_Read_Time
  6991 ;;		_I2C_Write_Address_Read_One_Byte
  6992 ;;		_I2C_Write_Cmd_Read_One_Byte
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text41
  6997  00108A                     __ptext41:
  6998                           	opt stack 0
  6999  00108A                     _I2C_Read:
  7000                           	opt stack 24
  7001                           
  7002                           ;incstack = 0
  7003                           ;I2C_Read@ack stored from wreg
  7004  00108A  6E11               	movwf	I2C_Read@ack,c
  7005                           
  7006                           ;I2C_Soft.c: 22: unsigned char inByte, n;
  7007                           ;I2C_Soft.c: 23: i2cHighSda();
  7008  00108C  EC3C  F00A         	call	_i2cHighSda	;wreg free
  7009                           
  7010                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
  7011  001090  0E00               	movlw	0
  7012  001092  6E12               	movwf	I2C_Read@n,c
  7013  001094                     l4242:
  7014  001094  0E07               	movlw	7
  7015  001096  6412               	cpfsgt	I2C_Read@n,c
  7016  001098  D001               	goto	l4246
  7017  00109A  D00F               	goto	l4260
  7018  00109C                     l4246:
  7019                           
  7020                           ;I2C_Soft.c: 25: {
  7021                           ;I2C_Soft.c: 26: i2cHighScl();
  7022  00109C  EC1D  F00A         	call	_i2cHighScl	;wreg free
  7023                           
  7024                           ;I2C_Soft.c: 28: if (PORTDbits.RD7)
  7025  0010A0  AE83               	btfss	3971,7,c	;volatile
  7026  0010A2  D003               	goto	l4252
  7027                           
  7028                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
  7029  0010A4  80D8               	bsf	status,0,c
  7030  0010A6  3613               	rlcf	I2C_Read@inByte,f,c
  7031  0010A8  D004               	goto	l4254
  7032  0010AA                     l4252:
  7033                           
  7034                           ;I2C_Soft.c: 30: else
  7035                           ;I2C_Soft.c: 31: inByte = inByte << 1;
  7036  0010AA  5013               	movf	I2C_Read@inByte,w,c
  7037  0010AC  2413               	addwf	I2C_Read@inByte,w,c
  7038  0010AE  6E13               	movwf	I2C_Read@inByte,c
  7039  0010B0  D000               	goto	l4254
  7040  0010B2                     l4254:
  7041                           
  7042                           ;I2C_Soft.c: 32: i2cLowScl();
  7043  0010B2  EC38  F00A         	call	_i2cLowScl	;wreg free
  7044  0010B6  2A12               	incf	I2C_Read@n,f,c
  7045  0010B8  D7ED               	goto	l4242
  7046  0010BA                     l4260:
  7047                           
  7048                           ;I2C_Soft.c: 33: }
  7049                           ;I2C_Soft.c: 34: if (ack) i2cAck();
  7050  0010BA  5011               	movf	I2C_Read@ack,w,c
  7051  0010BC  B4D8               	btfsc	status,2,c
  7052  0010BE  D003               	goto	l4264
  7053  0010C0  ECFD  F009         	call	_i2cAck	;wreg free
  7054  0010C4  D003               	goto	l4266
  7055  0010C6                     l4264:
  7056                           
  7057                           ;I2C_Soft.c: 35: else i2cNack();
  7058  0010C6  EC2E  F00A         	call	_i2cNack	;wreg free
  7059  0010CA  D000               	goto	l4266
  7060  0010CC                     l4266:
  7061                           
  7062                           ;I2C_Soft.c: 38: return(inByte);
  7063  0010CC  5013               	movf	I2C_Read@inByte,w,c
  7064  0010CE  D000               	goto	l34
  7065  0010D0                     l34:
  7066  0010D0  0012               	return		;funcret
  7067  0010D2                     __end_of_I2C_Read:
  7068                           	opt stack 0
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           prodh	equ	0xFF4
  7074                           prodl	equ	0xFF3
  7075                           intcon	equ	0xFF2
  7076                           intcon2	equ	0xFF1
  7077                           postinc0	equ	0xFEE
  7078                           wreg	equ	0xFE8
  7079                           postdec1	equ	0xFE5
  7080                           fsr1l	equ	0xFE1
  7081                           indf2	equ	0xFDF
  7082                           postinc2	equ	0xFDE
  7083                           postdec2	equ	0xFDD
  7084                           fsr2h	equ	0xFDA
  7085                           fsr2l	equ	0xFD9
  7086                           status	equ	0xFD8
  7087                           
  7088 ;; *************** function _i2cNack *****************
  7089 ;; Defined at:
  7090 ;;		line 57 in file "../Lab11sample.X/I2C_Soft.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;		None               void
  7097 ;; Registers used:
  7098 ;;		wreg, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7108 ;;Total ram usage:        0 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    4
  7111 ;; This function calls:
  7112 ;;		_i2cHighScl
  7113 ;;		_i2cLowScl
  7114 ;; This function is called by:
  7115 ;;		_I2C_Read
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text42
  7120  00145C                     __ptext42:
  7121                           	opt stack 0
  7122  00145C                     _i2cNack:
  7123                           	opt stack 24
  7124                           
  7125                           ;I2C_Soft.c: 59: i2cHighScl();
  7126                           
  7127                           ;incstack = 0
  7128  00145C  EC1D  F00A         	call	_i2cHighScl	;wreg free
  7129                           
  7130                           ;I2C_Soft.c: 60: i2cLowScl();
  7131  001460  EC38  F00A         	call	_i2cLowScl	;wreg free
  7132  001464  0012               	return		;funcret
  7133  001466                     __end_of_i2cNack:
  7134                           	opt stack 0
  7135                           tblptru	equ	0xFF8
  7136                           tblptrh	equ	0xFF7
  7137                           tblptrl	equ	0xFF6
  7138                           tablat	equ	0xFF5
  7139                           prodh	equ	0xFF4
  7140                           prodl	equ	0xFF3
  7141                           intcon	equ	0xFF2
  7142                           intcon2	equ	0xFF1
  7143                           postinc0	equ	0xFEE
  7144                           wreg	equ	0xFE8
  7145                           postdec1	equ	0xFE5
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _i2cAck *****************
  7155 ;; Defined at:
  7156 ;;		line 63 in file "../Lab11sample.X/I2C_Soft.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;		None
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;		None
  7161 ;; Return value:  Size  Location     Type
  7162 ;;		None               void
  7163 ;; Registers used:
  7164 ;;		wreg, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;Total ram usage:        0 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    4
  7177 ;; This function calls:
  7178 ;;		_i2cHighScl
  7179 ;;		_i2cHighSda
  7180 ;;		_i2cLowScl
  7181 ;;		_i2cLowSda
  7182 ;; This function is called by:
  7183 ;;		_I2C_Read
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text43
  7188  0013FA                     __ptext43:
  7189                           	opt stack 0
  7190  0013FA                     _i2cAck:
  7191                           	opt stack 24
  7192                           
  7193                           ;I2C_Soft.c: 65: i2cLowSda();
  7194                           
  7195                           ;incstack = 0
  7196  0013FA  EC33  F00A         	call	_i2cLowSda	;wreg free
  7197                           
  7198                           ;I2C_Soft.c: 66: i2cHighScl();
  7199  0013FE  EC1D  F00A         	call	_i2cHighScl	;wreg free
  7200                           
  7201                           ;I2C_Soft.c: 67: i2cLowScl();
  7202  001402  EC38  F00A         	call	_i2cLowScl	;wreg free
  7203                           
  7204                           ;I2C_Soft.c: 68: i2cHighSda();
  7205  001406  EC3C  F00A         	call	_i2cHighSda	;wreg free
  7206  00140A  0012               	return		;funcret
  7207  00140C                     __end_of_i2cAck:
  7208                           	opt stack 0
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodh	equ	0xFF4
  7214                           prodl	equ	0xFF3
  7215                           intcon	equ	0xFF2
  7216                           intcon2	equ	0xFF1
  7217                           postinc0	equ	0xFEE
  7218                           wreg	equ	0xFE8
  7219                           postdec1	equ	0xFE5
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function _I2C_ReStart *****************
  7229 ;; Defined at:
  7230 ;;		line 79 in file "../Lab11sample.X/I2C_Soft.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;		None
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;		None               void
  7237 ;; Registers used:
  7238 ;;		wreg, cstack
  7239 ;; Tracked objects:
  7240 ;;		On entry : 0/0
  7241 ;;		On exit  : 0/0
  7242 ;;		Unchanged: 0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;Total ram usage:        0 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    4
  7251 ;; This function calls:
  7252 ;;		_i2cHighScl
  7253 ;;		_i2cHighSda
  7254 ;;		_i2cLowScl
  7255 ;;		_i2cLowSda
  7256 ;; This function is called by:
  7257 ;;		_DS1621_Read_Temp
  7258 ;;		_DS3231_Read_Time
  7259 ;;		_I2C_Write_Address_Read_One_Byte
  7260 ;;		_I2C_Write_Cmd_Read_One_Byte
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text44
  7265  001386                     __ptext44:
  7266                           	opt stack 0
  7267  001386                     _I2C_ReStart:
  7268                           	opt stack 25
  7269                           
  7270                           ;I2C_Soft.c: 81: i2cLowScl();
  7271                           
  7272                           ;incstack = 0
  7273  001386  EC38  F00A         	call	_i2cLowScl	;wreg free
  7274                           
  7275                           ;I2C_Soft.c: 82: i2cHighSda();
  7276  00138A  EC3C  F00A         	call	_i2cHighSda	;wreg free
  7277                           
  7278                           ;I2C_Soft.c: 83: i2cHighScl();
  7279  00138E  EC1D  F00A         	call	_i2cHighScl	;wreg free
  7280                           
  7281                           ;I2C_Soft.c: 84: i2cLowSda();
  7282  001392  EC33  F00A         	call	_i2cLowSda	;wreg free
  7283                           
  7284                           ;I2C_Soft.c: 85: i2cLowScl();
  7285  001396  EC38  F00A         	call	_i2cLowScl	;wreg free
  7286  00139A  0012               	return		;funcret
  7287  00139C                     __end_of_I2C_ReStart:
  7288                           	opt stack 0
  7289                           tblptru	equ	0xFF8
  7290                           tblptrh	equ	0xFF7
  7291                           tblptrl	equ	0xFF6
  7292                           tablat	equ	0xFF5
  7293                           prodh	equ	0xFF4
  7294                           prodl	equ	0xFF3
  7295                           intcon	equ	0xFF2
  7296                           intcon2	equ	0xFF1
  7297                           postinc0	equ	0xFEE
  7298                           wreg	equ	0xFE8
  7299                           postdec1	equ	0xFE5
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _i2cLowSda *****************
  7309 ;; Defined at:
  7310 ;;		line 102 in file "../Lab11sample.X/I2C_Soft.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;		None
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;		None               void
  7317 ;; Registers used:
  7318 ;;		None
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;Total ram usage:        0 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    3
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_I2C_Write
  7335 ;;		_i2cAck
  7336 ;;		_I2C_Start
  7337 ;;		_I2C_ReStart
  7338 ;;		_I2C_Stop
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text45
  7343  001466                     __ptext45:
  7344                           	opt stack 0
  7345  001466                     _i2cLowSda:
  7346                           	opt stack 23
  7347                           
  7348                           ;I2C_Soft.c: 104: PORTDbits.RD7 = 0;
  7349                           
  7350                           ;incstack = 0
  7351  001466  9E83               	bcf	3971,7,c	;volatile
  7352                           
  7353                           ;I2C_Soft.c: 105: TRISDbits.TRISD7 = 0;
  7354  001468  9E95               	bcf	3989,7,c	;volatile
  7355                           
  7356                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7357  00146A  D000               	nop2		;2 cycle nop
  7358  00146C  D000               	nop2		;2 cycle nop
  7359  00146E  0012               	return		;funcret
  7360  001470                     __end_of_i2cLowSda:
  7361                           	opt stack 0
  7362                           tblptru	equ	0xFF8
  7363                           tblptrh	equ	0xFF7
  7364                           tblptrl	equ	0xFF6
  7365                           tablat	equ	0xFF5
  7366                           prodh	equ	0xFF4
  7367                           prodl	equ	0xFF3
  7368                           intcon	equ	0xFF2
  7369                           intcon2	equ	0xFF1
  7370                           postinc0	equ	0xFEE
  7371                           wreg	equ	0xFE8
  7372                           postdec1	equ	0xFE5
  7373                           fsr1l	equ	0xFE1
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           postdec2	equ	0xFDD
  7377                           fsr2h	equ	0xFDA
  7378                           fsr2l	equ	0xFD9
  7379                           status	equ	0xFD8
  7380                           
  7381 ;; *************** function _i2cLowScl *****************
  7382 ;; Defined at:
  7383 ;;		line 115 in file "../Lab11sample.X/I2C_Soft.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;		None
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;		None               void
  7390 ;; Registers used:
  7391 ;;		None
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;Total ram usage:        0 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    3
  7404 ;; This function calls:
  7405 ;;		Nothing
  7406 ;; This function is called by:
  7407 ;;		_I2C_Read
  7408 ;;		_I2C_Write
  7409 ;;		_i2cNack
  7410 ;;		_i2cAck
  7411 ;;		_I2C_Start
  7412 ;;		_I2C_ReStart
  7413 ;;		_I2C_Stop
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           	psect	text46
  7418  001470                     __ptext46:
  7419                           	opt stack 0
  7420  001470                     _i2cLowScl:
  7421                           	opt stack 23
  7422                           
  7423                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
  7424                           
  7425                           ;incstack = 0
  7426  001470  9881               	bcf	3969,4,c	;volatile
  7427                           
  7428                           ;I2C_Soft.c: 118: TRISBbits.TRISB4 = 0;
  7429  001472  9893               	bcf	3987,4,c	;volatile
  7430                           
  7431                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  7432  001474  D000               	nop2		;2 cycle nop
  7433  001476  0012               	return		;funcret
  7434  001478                     __end_of_i2cLowScl:
  7435                           	opt stack 0
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           intcon2	equ	0xFF1
  7444                           postinc0	equ	0xFEE
  7445                           wreg	equ	0xFE8
  7446                           postdec1	equ	0xFE5
  7447                           fsr1l	equ	0xFE1
  7448                           indf2	equ	0xFDF
  7449                           postinc2	equ	0xFDE
  7450                           postdec2	equ	0xFDD
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455 ;; *************** function _i2cHighSda *****************
  7456 ;; Defined at:
  7457 ;;		line 96 in file "../Lab11sample.X/I2C_Soft.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;		None
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;		None               void
  7464 ;; Registers used:
  7465 ;;		None
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;Total ram usage:        0 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    3
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_I2C_Init
  7482 ;;		_I2C_Read
  7483 ;;		_I2C_Write
  7484 ;;		_i2cAck
  7485 ;;		_I2C_Start
  7486 ;;		_I2C_ReStart
  7487 ;;		_I2C_Stop
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           	psect	text47
  7492  001478                     __ptext47:
  7493                           	opt stack 0
  7494  001478                     _i2cHighSda:
  7495                           	opt stack 25
  7496                           
  7497                           ;I2C_Soft.c: 98: TRISDbits.TRISD7 = 1;
  7498                           
  7499                           ;incstack = 0
  7500  001478  8E95               	bsf	3989,7,c	;volatile
  7501                           
  7502                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7503  00147A  D000               	nop2		;2 cycle nop
  7504  00147C  D000               	nop2		;2 cycle nop
  7505  00147E  0012               	return		;funcret
  7506  001480                     __end_of_i2cHighSda:
  7507                           	opt stack 0
  7508                           tblptru	equ	0xFF8
  7509                           tblptrh	equ	0xFF7
  7510                           tblptrl	equ	0xFF6
  7511                           tablat	equ	0xFF5
  7512                           prodh	equ	0xFF4
  7513                           prodl	equ	0xFF3
  7514                           intcon	equ	0xFF2
  7515                           intcon2	equ	0xFF1
  7516                           postinc0	equ	0xFEE
  7517                           wreg	equ	0xFE8
  7518                           postdec1	equ	0xFE5
  7519                           fsr1l	equ	0xFE1
  7520                           indf2	equ	0xFDF
  7521                           postinc2	equ	0xFDE
  7522                           postdec2	equ	0xFDD
  7523                           fsr2h	equ	0xFDA
  7524                           fsr2l	equ	0xFD9
  7525                           status	equ	0xFD8
  7526                           
  7527 ;; *************** function _i2cHighScl *****************
  7528 ;; Defined at:
  7529 ;;		line 109 in file "../Lab11sample.X/I2C_Soft.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;		None
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;		None
  7534 ;; Return value:  Size  Location     Type
  7535 ;;		None               void
  7536 ;; Registers used:
  7537 ;;		wreg
  7538 ;; Tracked objects:
  7539 ;;		On entry : 0/0
  7540 ;;		On exit  : 0/0
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;Total ram usage:        0 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    3
  7550 ;; This function calls:
  7551 ;;		Nothing
  7552 ;; This function is called by:
  7553 ;;		_I2C_Init
  7554 ;;		_I2C_Read
  7555 ;;		_I2C_Write
  7556 ;;		_i2cNack
  7557 ;;		_i2cAck
  7558 ;;		_I2C_Start
  7559 ;;		_I2C_ReStart
  7560 ;;		_I2C_Stop
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text48
  7565  00143A                     __ptext48:
  7566                           	opt stack 0
  7567  00143A                     _i2cHighScl:
  7568                           	opt stack 25
  7569                           
  7570                           ;I2C_Soft.c: 111: TRISBbits.TRISB4 = 1;
  7571                           
  7572                           ;incstack = 0
  7573  00143A  8893               	bsf	3987,4,c	;volatile
  7574                           
  7575                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7576  00143C  0E06               	movlw	6
  7577  00143E                     u3617:
  7578  00143E  2EE8               	decfsz	wreg,f,c
  7579  001440  D7FE               	goto	u3617
  7580  001442  D000               	nop2		;nop
  7581  001444  0012               	return		;funcret
  7582  001446                     __end_of_i2cHighScl:
  7583                           	opt stack 0
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           intcon2	equ	0xFF1
  7592                           postinc0	equ	0xFEE
  7593                           wreg	equ	0xFE8
  7594                           postdec1	equ	0xFE5
  7595                           fsr1l	equ	0xFE1
  7596                           indf2	equ	0xFDF
  7597                           postinc2	equ	0xFDE
  7598                           postdec2	equ	0xFDD
  7599                           fsr2h	equ	0xFDA
  7600                           fsr2l	equ	0xFD9
  7601                           status	equ	0xFD8
  7602                           
  7603 ;; *************** function _chkisr *****************
  7604 ;; Defined at:
  7605 ;;		line 14 in file "../Lab11sample.X/Interrupt.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;		None
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;		None
  7610 ;; Return value:  Size  Location     Type
  7611 ;;		None               void
  7612 ;; Registers used:
  7613 ;;		wreg, status,2, status,0, cstack
  7614 ;; Tracked objects:
  7615 ;;		On entry : 0/0
  7616 ;;		On exit  : 0/0
  7617 ;;		Unchanged: 0/0
  7618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;Total ram usage:       14 bytes
  7624 ;; Hardware stack levels used:    1
  7625 ;; Hardware stack levels required when called:    2
  7626 ;; This function calls:
  7627 ;;		_INT0_isr
  7628 ;;		_TIMER1_isr
  7629 ;; This function is called by:
  7630 ;;		Interrupt level 2
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634                           	psect	intcode
  7635  000008                     __pintcode:
  7636                           	opt stack 0
  7637  000008                     _chkisr:
  7638                           	opt stack 19
  7639                           
  7640                           ;incstack = 0
  7641  000008  CFFA F003          	movff	pclath,??_chkisr
  7642  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  7643  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  7644  000014  ED6D  F006         	call	int_func,f	;refresh shadow registers
  7645                           pclatu	equ	0xFFB
  7646                           pclath	equ	0xFFA
  7647                           tblptru	equ	0xFF8
  7648                           tblptrh	equ	0xFF7
  7649                           tblptrl	equ	0xFF6
  7650                           tablat	equ	0xFF5
  7651                           prodh	equ	0xFF4
  7652                           prodl	equ	0xFF3
  7653                           intcon	equ	0xFF2
  7654                           intcon2	equ	0xFF1
  7655                           postinc0	equ	0xFEE
  7656                           fsr0l	equ	0xFE9
  7657                           wreg	equ	0xFE8
  7658                           postdec1	equ	0xFE5
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667                           	psect	intcode_body
  7668  000CDA                     __pintcode_body:
  7669                           	opt stack 19
  7670  000CDA                     int_func:
  7671                           	opt stack 19
  7672  000CDA  0006               	pop		; remove dummy address from shadow register refresh
  7673  000CDC  CFEA F006          	movff	fsr0h,??_chkisr+3
  7674  000CE0  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7675  000CE4  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7676  000CE8  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7677  000CEC  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7678  000CF0  CFF3 F00B          	movff	prodl,??_chkisr+8
  7679  000CF4  CFF4 F00C          	movff	prodh,??_chkisr+9
  7680  000CF8  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7681  000CFC  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7682  000D00  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7683  000D04  CFF5 F010          	movff	tablat,??_chkisr+13
  7684                           
  7685                           ;Interrupt.c: 16: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7686  000D08  A09E               	btfss	3998,0,c	;volatile
  7687  000D0A  D003               	goto	i2l2356
  7688  000D0C  EC23  F00A         	call	_TIMER1_isr	;wreg free
  7689  000D10  D000               	goto	i2l2356
  7690  000D12                     i2l2356:
  7691                           
  7692                           ;Interrupt.c: 17: if (INTCONbits.INT0IF == 1) INT0_isr();
  7693  000D12  A2F2               	btfss	intcon,1,c	;volatile
  7694  000D14  D003               	goto	i2l158
  7695  000D16  EC66  F002         	call	_INT0_isr	;wreg free
  7696  000D1A  D000               	goto	i2l158
  7697  000D1C                     i2l158:
  7698  000D1C  C010  FFF5         	movff	??_chkisr+13,tablat
  7699  000D20  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7700  000D24  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7701  000D28  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7702  000D2C  C00C  FFF4         	movff	??_chkisr+9,prodh
  7703  000D30  C00B  FFF3         	movff	??_chkisr+8,prodl
  7704  000D34  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7705  000D38  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7706  000D3C  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7707  000D40  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7708  000D44  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7709  000D48  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7710  000D4C  C004  FFFB         	movff	??_chkisr+1,pclatu
  7711  000D50  C003  FFFA         	movff	??_chkisr,pclath
  7712  000D54  0011               	retfie		f
  7713  000D56                     __end_of_chkisr:
  7714                           	opt stack 0
  7715                           pclatu	equ	0xFFB
  7716                           pclath	equ	0xFFA
  7717                           tblptru	equ	0xFF8
  7718                           tblptrh	equ	0xFF7
  7719                           tblptrl	equ	0xFF6
  7720                           tablat	equ	0xFF5
  7721                           prodh	equ	0xFF4
  7722                           prodl	equ	0xFF3
  7723                           intcon	equ	0xFF2
  7724                           intcon2	equ	0xFF1
  7725                           postinc0	equ	0xFEE
  7726                           fsr0h	equ	0xFEA
  7727                           fsr0l	equ	0xFE9
  7728                           wreg	equ	0xFE8
  7729                           postdec1	equ	0xFE5
  7730                           fsr1h	equ	0xFE2
  7731                           fsr1l	equ	0xFE1
  7732                           indf2	equ	0xFDF
  7733                           postinc2	equ	0xFDE
  7734                           postdec2	equ	0xFDD
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function _TIMER1_isr *****************
  7740 ;; Defined at:
  7741 ;;		line 20 in file "../Lab11sample.X/Interrupt.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;		None
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;		None               void
  7748 ;; Registers used:
  7749 ;;		wreg, status,2
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;Total ram usage:        0 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; This function calls:
  7762 ;;		Nothing
  7763 ;; This function is called by:
  7764 ;;		_chkisr
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           	psect	text50
  7769  001446                     __ptext50:
  7770                           	opt stack 0
  7771  001446                     _TIMER1_isr:
  7772                           	opt stack 20
  7773                           
  7774                           ;Interrupt.c: 22: Nec_state = 0;
  7775                           
  7776                           ;incstack = 0
  7777  001446  0E00               	movlw	0
  7778  001448  6E50               	movwf	_Nec_state,c
  7779                           
  7780                           ;Interrupt.c: 23: INTCON2bits.INTEDG0 = 0;
  7781  00144A  9CF1               	bcf	intcon2,6,c	;volatile
  7782                           
  7783                           ;Interrupt.c: 24: T1CONbits.TMR1ON = 0;
  7784  00144C  90CD               	bcf	4045,0,c	;volatile
  7785                           
  7786                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  7787  00144E  909E               	bcf	3998,0,c	;volatile
  7788  001450  0012               	return		;funcret
  7789  001452                     __end_of_TIMER1_isr:
  7790                           	opt stack 0
  7791                           pclatu	equ	0xFFB
  7792                           pclath	equ	0xFFA
  7793                           tblptru	equ	0xFF8
  7794                           tblptrh	equ	0xFF7
  7795                           tblptrl	equ	0xFF6
  7796                           tablat	equ	0xFF5
  7797                           prodh	equ	0xFF4
  7798                           prodl	equ	0xFF3
  7799                           intcon	equ	0xFF2
  7800                           intcon2	equ	0xFF1
  7801                           postinc0	equ	0xFEE
  7802                           fsr0h	equ	0xFEA
  7803                           fsr0l	equ	0xFE9
  7804                           wreg	equ	0xFE8
  7805                           postdec1	equ	0xFE5
  7806                           fsr1h	equ	0xFE2
  7807                           fsr1l	equ	0xFE1
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function _INT0_isr *****************
  7816 ;; Defined at:
  7817 ;;		line 34 in file "../Lab11sample.X/Interrupt.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;		None
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;		None
  7822 ;; Return value:  Size  Location     Type
  7823 ;;		None               void
  7824 ;; Registers used:
  7825 ;;		wreg, status,2, status,0, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7833 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7835 ;;Total ram usage:        2 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    1
  7838 ;; This function calls:
  7839 ;;		_force_nec_state0
  7840 ;; This function is called by:
  7841 ;;		_chkisr
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text51
  7846  0004CC                     __ptext51:
  7847                           	opt stack 0
  7848  0004CC                     _INT0_isr:
  7849                           	opt stack 19
  7850                           
  7851                           ;Interrupt.c: 36: INTCONbits.INT0IF = 0;
  7852                           
  7853                           ;incstack = 0
  7854  0004CC  92F2               	bcf	intcon,1,c	;volatile
  7855                           
  7856                           ;Interrupt.c: 37: if (Nec_state != 0)
  7857  0004CE  5050               	movf	_Nec_state,w,c
  7858  0004D0  B4D8               	btfsc	status,2,c
  7859  0004D2  D091               	goto	i2l2036
  7860                           
  7861                           ;Interrupt.c: 38: {
  7862                           ;Interrupt.c: 39: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7863  0004D4  50CE               	movf	4046,w,c	;volatile
  7864  0004D6  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7865  0004DA  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7866  0004DC  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7867  0004E0  6A01               	clrf	??_INT0_isr,c
  7868  0004E2  1001               	iorwf	??_INT0_isr,w,c
  7869  0004E4  6E47               	movwf	_Time_Elapsed,c
  7870  0004E6  5002               	movf	??_INT0_isr+1,w,c
  7871  0004E8  6E48               	movwf	_Time_Elapsed+1,c
  7872                           
  7873                           ;Interrupt.c: 40: TMR1H = 0;
  7874  0004EA  0E00               	movlw	0
  7875  0004EC  6ECF               	movwf	4047,c	;volatile
  7876                           
  7877                           ;Interrupt.c: 41: TMR1L = 0;
  7878  0004EE  0E00               	movlw	0
  7879  0004F0  6ECE               	movwf	4046,c	;volatile
  7880                           
  7881                           ;Interrupt.c: 42: }
  7882                           ;Interrupt.c: 44: switch(Nec_state)
  7883  0004F2  D081               	goto	i2l2036
  7884  0004F4                     i2l1976:
  7885                           
  7886                           ;Interrupt.c: 47: {
  7887                           ;Interrupt.c: 49: TMR1H = 0;
  7888  0004F4  0E00               	movlw	0
  7889  0004F6  6ECF               	movwf	4047,c	;volatile
  7890                           
  7891                           ;Interrupt.c: 50: TMR1L = 0;
  7892  0004F8  0E00               	movlw	0
  7893  0004FA  6ECE               	movwf	4046,c	;volatile
  7894                           
  7895                           ;Interrupt.c: 51: PIR1bits.TMR1IF = 0;
  7896  0004FC  909E               	bcf	3998,0,c	;volatile
  7897                           
  7898                           ;Interrupt.c: 52: T1CON= 0x90;
  7899  0004FE  0E90               	movlw	144
  7900  000500  6ECD               	movwf	4045,c	;volatile
  7901                           
  7902                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 1;
  7903  000502  80CD               	bsf	4045,0,c	;volatile
  7904                           
  7905                           ;Interrupt.c: 54: bit_count = 0;
  7906  000504  0E00               	movlw	0
  7907  000506  6E57               	movwf	_bit_count,c
  7908                           
  7909                           ;Interrupt.c: 55: Nec_code = 0;
  7910  000508  0E00               	movlw	0
  7911  00050A  6E43               	movwf	_Nec_code,c
  7912  00050C  0E00               	movlw	0
  7913  00050E  6E44               	movwf	_Nec_code+1,c
  7914  000510  0E00               	movlw	0
  7915  000512  6E45               	movwf	_Nec_code+2,c
  7916  000514  0E00               	movlw	0
  7917  000516  6E46               	movwf	_Nec_code+3,c
  7918                           
  7919                           ;Interrupt.c: 56: Nec_state = 1;
  7920  000518  0E01               	movlw	1
  7921  00051A  D01F               	goto	L2
  7922  00051C                     i2l1982:
  7923                           
  7924                           ;Interrupt.c: 57: INTCON2bits.INTEDG0 = 1;
  7925  00051C  8CF1               	bsf	intcon2,6,c	;volatile
  7926                           
  7927                           ;Interrupt.c: 58: return;
  7928  00051E  D07C               	goto	i2l170
  7929  000520                     i2l1986:
  7930                           
  7931                           ;Interrupt.c: 62: {
  7932                           ;Interrupt.c: 63: if((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
  7933  000520  0E35               	movlw	53
  7934  000522  5C47               	subwf	_Time_Elapsed,w,c
  7935  000524  0E21               	movlw	33
  7936  000526  5848               	subwfb	_Time_Elapsed+1,w,c
  7937  000528  A0D8               	btfss	status,0,c
  7938  00052A  D076               	goto	i2l170
  7939  00052C  0E1C               	movlw	28
  7940  00052E  5C47               	subwf	_Time_Elapsed,w,c
  7941  000530  0E25               	movlw	37
  7942  000532  5848               	subwfb	_Time_Elapsed+1,w,c
  7943  000534  B0D8               	btfsc	status,0,c
  7944  000536  D070               	goto	i2l170
  7945                           
  7946                           ;Interrupt.c: 64: {
  7947                           ;Interrupt.c: 65: Nec_state = 2;
  7948  000538  0E02               	movlw	2
  7949  00053A  D01F               	goto	L3
  7950  00053C                     i2l1992:
  7951                           
  7952                           ;Interrupt.c: 66: INTCON2bits.INTEDG0 = 0;
  7953  00053C  9CF1               	bcf	intcon2,6,c	;volatile
  7954                           
  7955                           ;Interrupt.c: 67: }
  7956                           ;Interrupt.c: 68: return;
  7957  00053E  D06C               	goto	i2l170
  7958  000540                     i2l1996:
  7959                           
  7960                           ;Interrupt.c: 72: {
  7961                           ;Interrupt.c: 73: if((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
  7962  000540  0EA1               	movlw	161
  7963  000542  5C47               	subwf	_Time_Elapsed,w,c
  7964  000544  0E0F               	movlw	15
  7965  000546  5848               	subwfb	_Time_Elapsed+1,w,c
  7966  000548  A0D8               	btfss	status,0,c
  7967  00054A  D066               	goto	i2l170
  7968  00054C  0E88               	movlw	136
  7969  00054E  5C47               	subwf	_Time_Elapsed,w,c
  7970  000550  0E13               	movlw	19
  7971  000552  5848               	subwfb	_Time_Elapsed+1,w,c
  7972  000554  B0D8               	btfsc	status,0,c
  7973  000556  D060               	goto	i2l170
  7974                           
  7975                           ;Interrupt.c: 74: {
  7976                           ;Interrupt.c: 75: Nec_state = 3;
  7977  000558  0E03               	movlw	3
  7978  00055A                     L2:
  7979  00055A  6E50               	movwf	_Nec_state,c
  7980  00055C  D7DF               	goto	i2l1982
  7981                           
  7982                           ;Interrupt.c: 77: }
  7983                           ;Interrupt.c: 78: return;
  7984                           
  7985                           ;Interrupt.c: 76: INTCON2bits.INTEDG0 = 1;
  7986  00055E  D05C               	goto	i2l170
  7987  000560                     i2l2006:
  7988                           
  7989                           ;Interrupt.c: 82: {
  7990                           ;Interrupt.c: 83: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  7991  000560  0E91               	movlw	145
  7992  000562  5C47               	subwf	_Time_Elapsed,w,c
  7993  000564  0E01               	movlw	1
  7994  000566  5848               	subwfb	_Time_Elapsed+1,w,c
  7995  000568  A0D8               	btfss	status,0,c
  7996  00056A  D056               	goto	i2l170
  7997  00056C  0E08               	movlw	8
  7998  00056E  5C47               	subwf	_Time_Elapsed,w,c
  7999  000570  0E07               	movlw	7
  8000  000572  5848               	subwfb	_Time_Elapsed+1,w,c
  8001  000574  B0D8               	btfsc	status,0,c
  8002  000576  D050               	goto	i2l170
  8003                           
  8004                           ;Interrupt.c: 84: {
  8005                           ;Interrupt.c: 85: Nec_state = 4;
  8006  000578  0E04               	movlw	4
  8007  00057A                     L3:
  8008  00057A  6E50               	movwf	_Nec_state,c
  8009  00057C  D7DF               	goto	i2l1992
  8010                           
  8011                           ;Interrupt.c: 87: }
  8012                           ;Interrupt.c: 88: return;
  8013                           
  8014                           ;Interrupt.c: 86: INTCON2bits.INTEDG0 = 0;
  8015  00057E  D04C               	goto	i2l170
  8016  000580                     i2l2016:
  8017                           
  8018                           ;Interrupt.c: 92: {
  8019                           ;Interrupt.c: 93: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  8020  000580  0E91               	movlw	145
  8021  000582  5C47               	subwf	_Time_Elapsed,w,c
  8022  000584  0E01               	movlw	1
  8023  000586  5848               	subwfb	_Time_Elapsed+1,w,c
  8024  000588  A0D8               	btfss	status,0,c
  8025  00058A  D030               	goto	i2l2028
  8026  00058C  0E08               	movlw	8
  8027  00058E  5C47               	subwf	_Time_Elapsed,w,c
  8028  000590  0E07               	movlw	7
  8029  000592  5848               	subwfb	_Time_Elapsed+1,w,c
  8030  000594  B0D8               	btfsc	status,0,c
  8031  000596  D02A               	goto	i2l2028
  8032                           
  8033                           ;Interrupt.c: 94: {
  8034                           ;Interrupt.c: 95: Nec_code = Nec_code << 1;
  8035  000598  90D8               	bcf	status,0,c
  8036  00059A  3443               	rlcf	_Nec_code,w,c
  8037  00059C  6E43               	movwf	_Nec_code,c
  8038  00059E  3444               	rlcf	_Nec_code+1,w,c
  8039  0005A0  6E44               	movwf	_Nec_code+1,c
  8040  0005A2  3445               	rlcf	_Nec_code+2,w,c
  8041  0005A4  6E45               	movwf	_Nec_code+2,c
  8042  0005A6  3446               	rlcf	_Nec_code+3,w,c
  8043  0005A8  6E46               	movwf	_Nec_code+3,c
  8044                           
  8045                           ;Interrupt.c: 96: if(Time_Elapsed > 1000)
  8046  0005AA  0EE9               	movlw	233
  8047  0005AC  5C47               	subwf	_Time_Elapsed,w,c
  8048  0005AE  0E03               	movlw	3
  8049  0005B0  5848               	subwfb	_Time_Elapsed+1,w,c
  8050  0005B2  A0D8               	btfss	status,0,c
  8051  0005B4  D00C               	goto	i2l179
  8052                           
  8053                           ;Interrupt.c: 97: {
  8054                           ;Interrupt.c: 98: Nec_code = Nec_code + 1;
  8055  0005B6  0E01               	movlw	1
  8056  0005B8  2443               	addwf	_Nec_code,w,c
  8057  0005BA  6E43               	movwf	_Nec_code,c
  8058  0005BC  0E00               	movlw	0
  8059  0005BE  2044               	addwfc	_Nec_code+1,w,c
  8060  0005C0  6E44               	movwf	_Nec_code+1,c
  8061  0005C2  0E00               	movlw	0
  8062  0005C4  2045               	addwfc	_Nec_code+2,w,c
  8063  0005C6  6E45               	movwf	_Nec_code+2,c
  8064  0005C8  0E00               	movlw	0
  8065  0005CA  2046               	addwfc	_Nec_code+3,w,c
  8066  0005CC  6E46               	movwf	_Nec_code+3,c
  8067  0005CE                     i2l179:
  8068                           
  8069                           ;Interrupt.c: 99: }
  8070                           ;Interrupt.c: 100: bit_count = bit_count + 1;
  8071  0005CE  2857               	incf	_bit_count,w,c
  8072  0005D0  6E57               	movwf	_bit_count,c
  8073                           
  8074                           ;Interrupt.c: 101: if(bit_count > 31)
  8075  0005D2  0E1F               	movlw	31
  8076  0005D4  6457               	cpfsgt	_bit_count,c
  8077  0005D6  D007               	goto	i2l180
  8078                           
  8079                           ;Interrupt.c: 102: {
  8080                           ;Interrupt.c: 103: nec_ok = 1;
  8081  0005D8  0E00               	movlw	0
  8082  0005DA  6E4C               	movwf	_nec_ok+1,c
  8083  0005DC  0E01               	movlw	1
  8084  0005DE  6E4B               	movwf	_nec_ok,c
  8085                           
  8086                           ;Interrupt.c: 104: INTCONbits.INT0IE = 0;
  8087  0005E0  98F2               	bcf	intcon,4,c	;volatile
  8088                           
  8089                           ;Interrupt.c: 105: Nec_state = 0;
  8090  0005E2  0E00               	movlw	0
  8091  0005E4  6E50               	movwf	_Nec_state,c
  8092  0005E6                     i2l180:
  8093                           
  8094                           ;Interrupt.c: 106: }
  8095                           ;Interrupt.c: 107: Nec_state = 3;
  8096  0005E6  0E03               	movlw	3
  8097  0005E8  6E50               	movwf	_Nec_state,c
  8098                           
  8099                           ;Interrupt.c: 108: }
  8100  0005EA  D798               	goto	i2l1982
  8101  0005EC                     i2l2028:
  8102                           
  8103                           ;Interrupt.c: 109: else
  8104                           ;Interrupt.c: 110: {
  8105                           ;Interrupt.c: 111: force_nec_state0();
  8106  0005EC  EC40  F00A         	call	_force_nec_state0	;wreg free
  8107  0005F0  D795               	goto	i2l1982
  8108  0005F2  D794               	goto	i2l1982
  8109                           
  8110                           ;Interrupt.c: 115: }
  8111                           ;Interrupt.c: 116: }
  8112                           
  8113                           ;Interrupt.c: 114: return;
  8114                           
  8115                           ;Interrupt.c: 112: }
  8116                           ;Interrupt.c: 113: INTCON2bits.INTEDG0 = 1;
  8117  0005F4  D011               	goto	i2l170
  8118  0005F6                     i2l2036:
  8119  0005F6  5050               	movf	_Nec_state,w,c
  8120                           
  8121                           ; Switch size 1, requested type "space"
  8122                           ; Number of cases is 5, Range of values is 0 to 4
  8123                           ; switch strategies available:
  8124                           ; Name         Instructions Cycles
  8125                           ; simple_byte           16     9 (average)
  8126                           ;	Chosen strategy is simple_byte
  8127  0005F8  0A00               	xorlw	0	; case 0
  8128  0005FA  B4D8               	btfsc	status,2,c
  8129  0005FC  D77B               	goto	i2l1976
  8130  0005FE  0A01               	xorlw	1	; case 1
  8131  000600  B4D8               	btfsc	status,2,c
  8132  000602  D78E               	goto	i2l1986
  8133  000604  0A03               	xorlw	3	; case 2
  8134  000606  B4D8               	btfsc	status,2,c
  8135  000608  D79B               	goto	i2l1996
  8136  00060A  0A01               	xorlw	1	; case 3
  8137  00060C  B4D8               	btfsc	status,2,c
  8138  00060E  D7A8               	goto	i2l2006
  8139  000610  0A07               	xorlw	7	; case 4
  8140  000612  B4D8               	btfsc	status,2,c
  8141  000614  D7B5               	goto	i2l2016
  8142  000616  D000               	goto	i2l170
  8143  000618                     i2l170:
  8144  000618  0012               	return		;funcret
  8145  00061A                     __end_of_INT0_isr:
  8146                           	opt stack 0
  8147                           pclatu	equ	0xFFB
  8148                           pclath	equ	0xFFA
  8149                           tblptru	equ	0xFF8
  8150                           tblptrh	equ	0xFF7
  8151                           tblptrl	equ	0xFF6
  8152                           tablat	equ	0xFF5
  8153                           prodh	equ	0xFF4
  8154                           prodl	equ	0xFF3
  8155                           intcon	equ	0xFF2
  8156                           intcon2	equ	0xFF1
  8157                           postinc0	equ	0xFEE
  8158                           fsr0h	equ	0xFEA
  8159                           fsr0l	equ	0xFE9
  8160                           wreg	equ	0xFE8
  8161                           postdec1	equ	0xFE5
  8162                           fsr1h	equ	0xFE2
  8163                           fsr1l	equ	0xFE1
  8164                           indf2	equ	0xFDF
  8165                           postinc2	equ	0xFDE
  8166                           postdec2	equ	0xFDD
  8167                           fsr2h	equ	0xFDA
  8168                           fsr2l	equ	0xFD9
  8169                           status	equ	0xFD8
  8170                           
  8171 ;; *************** function _force_nec_state0 *****************
  8172 ;; Defined at:
  8173 ;;		line 28 in file "../Lab11sample.X/Interrupt.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;		None
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;		None
  8178 ;; Return value:  Size  Location     Type
  8179 ;;		None               void
  8180 ;; Registers used:
  8181 ;;		wreg, status,2
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8191 ;;Total ram usage:        0 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; This function calls:
  8194 ;;		Nothing
  8195 ;; This function is called by:
  8196 ;;		_INT0_isr
  8197 ;; This function uses a non-reentrant model
  8198 ;;
  8199                           
  8200                           	psect	text52
  8201  001480                     __ptext52:
  8202                           	opt stack 0
  8203  001480                     _force_nec_state0:
  8204                           	opt stack 19
  8205                           
  8206                           ;Interrupt.c: 30: Nec_state=0;
  8207                           
  8208                           ;incstack = 0
  8209  001480  0E00               	movlw	0
  8210  001482  6E50               	movwf	_Nec_state,c
  8211                           
  8212                           ;Interrupt.c: 31: T1CONbits.TMR1ON = 0;
  8213  001484  90CD               	bcf	4045,0,c	;volatile
  8214  001486  0012               	return		;funcret
  8215  001488                     __end_of_force_nec_state0:
  8216                           	opt stack 0
  8217                           pclatu	equ	0xFFB
  8218                           pclath	equ	0xFFA
  8219                           tblptru	equ	0xFF8
  8220                           tblptrh	equ	0xFF7
  8221                           tblptrl	equ	0xFF6
  8222                           tablat	equ	0xFF5
  8223                           prodh	equ	0xFF4
  8224                           prodl	equ	0xFF3
  8225                           intcon	equ	0xFF2
  8226                           intcon2	equ	0xFF1
  8227                           postinc0	equ	0xFEE
  8228                           fsr0h	equ	0xFEA
  8229                           fsr0l	equ	0xFE9
  8230                           wreg	equ	0xFE8
  8231                           postdec1	equ	0xFE5
  8232                           fsr1h	equ	0xFE2
  8233                           fsr1l	equ	0xFE1
  8234                           indf2	equ	0xFDF
  8235                           postinc2	equ	0xFDE
  8236                           postdec2	equ	0xFDD
  8237                           fsr2h	equ	0xFDA
  8238                           fsr2l	equ	0xFD9
  8239                           status	equ	0xFD8
  8240                           pclatu	equ	0xFFB
  8241                           pclath	equ	0xFFA
  8242                           tblptru	equ	0xFF8
  8243                           tblptrh	equ	0xFF7
  8244                           tblptrl	equ	0xFF6
  8245                           tablat	equ	0xFF5
  8246                           prodh	equ	0xFF4
  8247                           prodl	equ	0xFF3
  8248                           intcon	equ	0xFF2
  8249                           intcon2	equ	0xFF1
  8250                           postinc0	equ	0xFEE
  8251                           fsr0h	equ	0xFEA
  8252                           fsr0l	equ	0xFE9
  8253                           wreg	equ	0xFE8
  8254                           postdec1	equ	0xFE5
  8255                           fsr1h	equ	0xFE2
  8256                           fsr1l	equ	0xFE1
  8257                           indf2	equ	0xFDF
  8258                           postinc2	equ	0xFDE
  8259                           postdec2	equ	0xFDD
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8
  8263                           
  8264                           	psect	rparam
  8265  0000                     pclatu	equ	0xFFB
  8266                           pclath	equ	0xFFA
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           intcon	equ	0xFF2
  8274                           intcon2	equ	0xFF1
  8275                           postinc0	equ	0xFEE
  8276                           fsr0h	equ	0xFEA
  8277                           fsr0l	equ	0xFE9
  8278                           wreg	equ	0xFE8
  8279                           postdec1	equ	0xFE5
  8280                           fsr1h	equ	0xFE2
  8281                           fsr1l	equ	0xFE1
  8282                           indf2	equ	0xFDF
  8283                           postinc2	equ	0xFDE
  8284                           postdec2	equ	0xFDD
  8285                           fsr2h	equ	0xFDA
  8286                           fsr2l	equ	0xFD9
  8287                           status	equ	0xFD8


Data Sizes:
    Strings     120
    Constant    493
    Data        212
    BSS         74
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66     111
    BANK0           128      9     124
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_4(CODE[8]), STR_3(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    ___awdiv->___wmul
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   27873
                                              7 BANK0      2     2      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                            _Do_Init
                            ___awdiv
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3447
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     575
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   22215
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   21178
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawtext                                            17     9      8   12331
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (5) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (6) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     597
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     314
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     218
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     2     2      0     295
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     360
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     136
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (11) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (12) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      9      7C       5       96.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     169      34        0.0%
DATA                 0      0     169       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 21 08:35:10 2022

                                _i 005D                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                               _D1 0080                                 _D2 0095  
                               _D3 00AA                                 l34 10D0  
                               l37 11A0                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l117 120A  
                              l409 0F9E                                l337 1430  
                              l522 0A00                                l419 13BE  
                              l523 096C                                l525 09DC  
                              l526 09FE                                l463 129C  
                              l615 011C                                l652 0374  
                              l469 0C5A                                l485 04CA  
                              l494 0420                                l487 03A4  
                              l680 0E16                                l681 0E18  
                              l682 0E22                                l683 0E24  
                              l676 0DFC                                l685 0E3E  
                              l688 12EE                                l881 0B44  
                              _PR2 000FCB                                _day 0059  
             __size_of_I2C_ReStart 0016                                _dow 005A  
                              _nbr 0049                                _txt 004D  
                              wreg 000FE8                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 129E  
                     __CFG_WDT$OFF 000000                               l1211 0EF6  
                   drawFastVLine@h 0019                               l1221 1036  
                             l1119 1310                               l1250 1152  
                             l4000 03A8                               l4010 0414  
                             l4020 0442                               l4012 0418  
                             l4004 03B0                     drawFastVLine@x 0022  
                   drawFastVLine@y 0018                               l4030 04BE  
                             l4022 046A                               l4008 03E0  
                             l4042 1120                               l4028 0496  
                             l4036 04C6                               l4044 1126  
                             l4060 09A4                               l4132 0DF4  
                             l4124 0DE2                               l4230 0816  
                             l4222 07C4                               l4206 0756  
                             l4054 0936                               l4232 081E  
                             l4080 09EA                               l4072 09D2  
                             l4144 0E0E                               l4136 0E00  
                             l4128 0DEC                               l4242 1094  
                             l4218 07A6                               l4252 10AA  
                             l4260 10BA                               l4076 09E0  
                             l4340 0ECC                               l4254 10B2  
                             l4246 109C                               l4086 09FA  
                             l4326 1308                               l4502 019E  
                             l4264 10C6                               l4336 0EBA  
                             l4360 1014                               l4512 01D2  
                             l4504 01A2                               l4520 01EA  
                             l4266 10CC                               l3802 0C42  
                             l4194 1216                               l4338 0EC4  
                             l4530 022A                               l4450 0044  
                             l3804 0C50                               l4196 1220  
                             l4348 0EEA                               l4364 102A  
                             l4356 1002                               l4540 0254  
                             l4532 0234                               l4508 01AE  
                             l4460 0082                               l4444 0026  
                             l4358 100C                               l4550 028C  
                             l4526 0206                               l4518 01D8  
                             l4454 004E                               l3840 127E  
                             l4544 026C                               l4472 00EE  
                             l4456 0064                               l4448 0036  
                             l4650 0AF8                               l4642 0AD8  
                             l4546 0274                               l4554 02A0  
                             l4538 024C                               l4490 0168  
                             l4570 0358                               l3852 1066  
                             l4660 0B1E                               l4652 0B00  
                             l4636 0AC6                               l4556 02A8  
                             l4564 0332                               l4484 014A  
                             l4468 00E6                               l4732 0A08  
                             l3862 11AA                               l4558 02EC  
                             l4566 0344                               l4494 0174  
   I2C_Write_Cmd_Write_Data@Device 0015                               l3864 11B0  
                             l3856 1198                               l3792 0C1C  
                             l3848 104A                               l4648 0AEE  
                             l4664 0B2A                               l4568 034C  
                             l4488 0164                               l3874 11C2  
                             l4498 0198                               l3788 0BE4  
                             l4668 0B3A                               l3990 0386  
                             l3994 0392                               l3998 03A0  
                             STR_1 FFB1                               STR_2 FF86  
                             STR_3 FFCF                               STR_4 FFF6  
                             STR_5 FFE5                               u2460 0C12  
                             u2720 0964                               u2650 0478  
                             u2730 099A                               u2900 0780  
                             u3617 143E                               _TRMT 007D61  
                             _main 0A02                               _font FD99  
                             _hour 005C                   __end_of_I2C_Init 145C  
                 __end_of_I2C_Read 10D2                               _year 006D  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 13E8  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1116                    ??_drawFastVLine 001C  
                  __end_of_i2cNack 1466                       ___param_bank 000010  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 061A  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 0B46  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 0F00  
                  __end_of___lwmod 1040                              i2l170 0618  
                            i2l180 05E6                              i2l158 0D1C  
                            i2l179 05CE                    ___awdiv@counter 001B  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR3H 000FB3                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 061A  
                            _Rcmd3 0834                              _nRBPU 007F8F  
                       _i2cHighSda 1478                         _i2cHighScl 143A  
                  __end_of_dpowers FF7E                              _color 0154  
                            _font2 FE98                              _found 005B  
                  __end_of_isdigit 1312                              _tempC 006B  
                            _tempF 006C                              _month 005F  
                            _putch 142C                  __end_of_I2C_Start 13FA  
                __end_of_I2C_Write 11D0                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 0D56  
                     __end_of_main 0AB0                       __end_of_font FE98  
                 __end_of_Rcmd2red 1192                             ??_main 0043  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 13D6          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0030  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             i2l2006 0560  
                           i2l2016 0580                             i2l2028 05EC  
                           i2l2036 05F6                             i2l2356 0D12  
                        ??_Do_Init 0043                             i2l1982 051C  
                           i2l1992 053C                             i2l1976 04F4  
                           i2l1986 0520                             i2l1996 0540  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 0011                   _force_nec_state0 1480  
                 __end_of_delay_ms 0FA6                             _i2cAck 13FA  
                       _TempSecond 0051                   __end_of_fillRect 108A  
                 __end_of_drawChar 04CC                 __size_of_OpenUSART 0070  
                           ___wmul 12C8                          ??___awdiv 001B  
                 __end_of_drawtext 0834                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 00BF  
                        ??___lwmod 001C                             _buffer 00D4  
                           _nec_ok 004B                             clear_0 0D5C  
                           clear_1 0D68                   ___awdiv@quotient 001D  
                           _minute 005E                             _second 0061  
                           _printf 001C                       drawtext@size 0040  
                           _strcpy 120C                             _strlen 1116  
                     __pdataCOMRAM 006E                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD98  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 1332  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 13C4  
                       __accesstop 0080            __end_of__initialization 0DC6  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0063  
               _setup_alarm_second 0064                      ___rparam_used 000001  
                    __end_of_Rcmd1 072A                      __end_of_Rcmd3 0926  
                   __pcstackCOMRAM 0001                       __pidataBANK0 0F00  
                     __pidataBANK1 0C5C                      __end_of_font2 FF74  
                __end_of_i2cLowSda 1470                  __end_of_i2cLowScl 1478  
                    __end_of_putch 143A                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                       ??_I2C_Read 0011                       _alarm_minute 0055  
                     _alarm_second 0056                         ??_I2C_Stop 0011  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 0E40  
                          ??_putch 0011                         __pbssBANK0 00D4  
                 _setup_alarm_hour 0062                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0012                         _alarm_date 0053  
                       ??_INT0_isr 0001                         _alarm_hour 0054  
                          ?_i2cAck 0001                 __CFG_CCP2MX$PORTBE 000000  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                       _fillScreen 1350                     _init_INTERRUPT 123E  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 0A02  
                        ?_drawtext 0039                            _Do_Init 10D2  
         _I2C_Write_Cmd_Write_Data 1312         __end_of_I2C_Write_Cmd_Only 1386  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                          _i2cNack 145C                 __end_of_TIMER1_isr 1452  
                    _write_command 141C                          _I2C_Start 13E8  
                        _I2C_Write 1192                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 1350                  __end_of_drawPixel 129E  
            __end_of_drawFastVLine 0C5C                            ___awdiv 0AB0  
                  __size_of___wmul 0028                            ___lwdiv 0EA4  
                          ___lwmod 0FF4                    __size_of_chkisr 0D4E  
                        ?_spiwrite 0001                            __pcinit 0D56  
                          __ramtop 1000                            __ptext0 0A02  
                          __ptext1 001C                            __ptext2 142C  
                          __ptext3 12F0                            __ptext4 0FF4  
                          __ptext5 0EA4          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 0AB0                            __ptext7 10D2  
                          __ptext8 139C                            __ptext9 0DD0  
                  __size_of_printf 035A                  __end_of_init_UART 13B0  
           __end_of_init_INTERRUPT 126E                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF86           __end_of_force_nec_state0 1488  
                        _T1CONbits 000FCD                            _dpowers FF74  
                          _isdigit 12F0                          _T3CONbits 000FB1  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 139C  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028                         ??_drawChar 0035  
                        _LCD_Reset 13C4                      _setAddrWindow 0FA6  
                   __pintcode_body 0CDA                         delay_ms@ms 0017  
             end_of_initialization 0DC6                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD98  
        __size_of_DS3231_Read_Time 0064                            int_func 0CDA  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         _tempSecond 006E  
                        _RCSTAbits 000FAB                            printf@c 0038  
                          printf@f 001D                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 0011  
                          strlen@s 0011        I2C_Write_Cmd_Write_Data@Cmd 0013  
                 drawtext@cursor_x 00F9                   drawtext@cursor_y 00F8  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                        ?_fillScreen 0024  
                       _setup_hour 0066                         _setup_year 006A  
                       drawChar@bg 0032                          _TRISBbits 000F93  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00F4  
                       drawPixel@x 001B                         drawPixel@y 0018  
                      _DS1621_Init 1332                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 014E  
                   __end_of_i2cAck 140C           DS1621_Read_Temp@Data_Ret 0017  
               __end_of_i2cHighSda 1480                 __end_of_i2cHighScl 1446  
                   __end_of___wmul 12F0                      delay_ms@count 001B  
                       _write_data 140C                      __pidataCOMRAM 1488  
                   __end_of_chkisr 0D56           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 1386                         drawtext@bg 003E  
                        _Nec_code1 004F                          _i2cLowSda 1466  
                        _i2cLowScl 1470                     __end_of_printf 0376  
                   __end_of_strcpy 123E                     __end_of_strlen 1154  
                        _Nec_state 0050                start_initialization 0D56  
                  ??_write_command 0013                          _OpenUSART 0DD0  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
                         ??___wmul 0015                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 11D0  
                         ??_strcpy 0015                           ??_strlen 0013  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                      __pbssCOMRAM 0043         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00F3  
                      ??_LCD_Reset 001D                       _isdigit$2066 0012  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 0E40  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                        I2C_Read@ack 0011  
                        _bit_count 0057                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 12C8                      __pmediumconst FD98  
                         ?___awdiv 0017                          __tft_type 0052  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 136C  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 126E  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 1452                           _I2C_Read 108A  
                         _I2C_Stop 13D6                  _Initialize_Screen 0B46  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 139C                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF7E  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 04CC  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                   ??_init_INTERRUPT 0011  
                        _setup_day 0065                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 0BD4  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                         printf@flag 0035  
                       printf@prec 0032                          main@tempC 00FB  
                        main@tempF 00FA                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 0D82  
                        copy_data1 0DA2                          drawtext@i 00F6  
           __size_of_drawFastVLine 0088                          drawtext@x 00F3  
                        drawtext@y 0039                           _Nec_code 0043  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                     ?_DS1621_Init 0001                           _Rcmd2red 1154  
                 __size_of_Do_Init 0044                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0047  
                 __size_of_i2cNack 000A                           __Hrparam 0000  
               __end_of_fillScreen 136C                           __Lrparam 0000  
                 __size_of___awdiv 0096                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C                       ?_I2C_ReStart 0001  
                 __size_of_isdigit 0022                           _delay_ms 0F54  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 123E                           __ptext11 0B46  
                         __ptext20 126E                           __ptext12 120C  
                         __ptext21 0FA6                           __ptext13 1350  
                         __ptext30 0F54                           __ptext22 129E  
                         __ptext14 0926                           __ptext31 12C8  
                         __ptext23 0834                           __ptext15 072A  
                         __ptext40 13E8                           __ptext32 1452  
                         __ptext24 1154                           __ptext16 1116  
                         __ptext41 108A                           __ptext33 1332  
                         __ptext25 061A                           __ptext17 0376  
                         __ptext50 1446                           __ptext42 145C  
                         __ptext34 1312                           __ptext26 140C  
                         __ptext18 1040                           __ptext51 04CC  
                         __ptext43 13FA                           __ptext35 136C  
                         __ptext27 141C                           __ptext19 0BD4  
                         __ptext52 1480                           __ptext44 1386  
                         __ptext36 0E40                           __ptext28 13B0  
                         __ptext45 1466                           __ptext37 11D0  
                         __ptext29 13C4                           __ptext46 1470  
                         __ptext38 1192                           __ptext47 1478  
                         __ptext39 13D6                           __ptext48 143A  
                         _fillRect 1040                           _drawChar 0376  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0058  
                         _drawtext 072A                         strcpy@from 0013  
                    _fillRectangle 0926           __end_of_DS1621_Read_Temp 120C  
                    __size_of_main 00AE                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 0BD4  
                        printf@idx 002F                           _spiwrite 13B0  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0060           __end_of_DS3231_Read_Time 0EA4  
       __size_of_Initialize_Screen 008E                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                         isdigit@c 0013                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
                 ___lwmod@dividend 0018              __end_of_write_command 142C  
                  fillScreen@color 0024                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 1446                      fillRect@color 0026  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0067                       _setup_second 0069  
            __end_of_setAddrWindow 0FF4                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 0068  
               __end_of_write_data 141C          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
