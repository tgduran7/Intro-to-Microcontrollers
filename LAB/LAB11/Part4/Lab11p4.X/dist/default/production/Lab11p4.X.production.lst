

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 21 16:42:04 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  00199A                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _tempSecond
    86  00199A  FF                 	db	255
    87                           
    88                           ;initializer for _wrap
    89  00199B  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  0013B4                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _D1
    96  0013B4  00                 	db	0
    97  0013B5  00                 	db	0
    98  0013B6  01                 	db	1
    99  0013B7  00                 	db	0
   100  0013B8  00                 	db	0
   101  0013B9  02                 	db	2
   102  0013BA  00                 	db	0
   103  0013BB  00                 	db	0
   104  0013BC  05                 	db	5
   105  0013BD  00                 	db	0
   106  0013BE  00                 	db	0
   107  0013BF  07                 	db	7
   108  0013C0  00                 	db	0
   109  0013C1  00                 	db	0
   110  0013C2  07                 	db	7
   111  0013C3  00                 	db	0
   112  0013C4  00                 	db	0
   113  0013C5  07                 	db	7
   114  0013C6  00                 	db	0
   115  0013C7  00                 	db	0
   116  0013C8  07                 	db	7
   117                           
   118                           ;initializer for _D2
   119  0013C9  00                 	db	0
   120  0013CA  01                 	db	1
   121  0013CB  00                 	db	0
   122  0013CC  00                 	db	0
   123  0013CD  04                 	db	4
   124  0013CE  00                 	db	0
   125  0013CF  00                 	db	0
   126  0013D0  05                 	db	5
   127  0013D1  00                 	db	0
   128  0013D2  00                 	db	0
   129  0013D3  07                 	db	7
   130  0013D4  00                 	db	0
   131  0013D5  00                 	db	0
   132  0013D6  07                 	db	7
   133  0013D7  00                 	db	0
   134  0013D8  00                 	db	0
   135  0013D9  07                 	db	7
   136  0013DA  00                 	db	0
   137  0013DB  00                 	db	0
   138  0013DC  07                 	db	7
   139  0013DD  00                 	db	0
   140                           
   141                           ;initializer for _D3
   142  0013DE  10                 	db	16
   143  0013DF  00                 	db	0
   144  0013E0  00                 	db	0
   145  0013E1  40                 	db	64
   146  0013E2  00                 	db	0
   147  0013E3  00                 	db	0
   148  0013E4  50                 	db	80
   149  0013E5  00                 	db	0
   150  0013E6  00                 	db	0
   151  0013E7  70                 	db	112
   152  0013E8  00                 	db	0
   153  0013E9  00                 	db	0
   154  0013EA  70                 	db	112
   155  0013EB  00                 	db	0
   156  0013EC  00                 	db	0
   157  0013ED  70                 	db	112
   158  0013EE  00                 	db	0
   159  0013EF  00                 	db	0
   160  0013F0  70                 	db	112
   161  0013F1  00                 	db	0
   162  0013F2  00                 	db	0
   163                           
   164                           ;initializer for _array1
   165  0013F3  A2                 	db	162
   166  0013F4  62                 	db	98
   167  0013F5  E2                 	db	226
   168  0013F6  22                 	db	34
   169  0013F7  02                 	db	2
   170  0013F8  C2                 	db	194
   171  0013F9  E0                 	db	224
   172  0013FA  A8                 	db	168
   173  0013FB  90                 	db	144
   174  0013FC  68                 	db	104
   175  0013FD  98                 	db	152
   176  0013FE  B0                 	db	176
   177  0013FF  30                 	db	48
   178  001400  18                 	db	24
   179  001401  7A                 	db	122
   180  001402  10                 	db	16
   181  001403  38                 	db	56
   182  001404  5A                 	db	90
   183  001405  42                 	db	66
   184  001406  4A                 	db	74
   185  001407  52                 	db	82
   186                           
   187                           	psect	idataBANK1
   188  0010C0                     __pidataBANK1:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _color
   192  0010C0  F800               	dw	63488
   193  0010C2  F800               	dw	63488
   194  0010C4  F800               	dw	63488
   195  0010C6  001F               	dw	31
   196  0010C8  001F               	dw	31
   197  0010CA  07E0               	dw	2016
   198  0010CC  F81F               	dw	63519
   199  0010CE  F81F               	dw	63519
   200  0010D0  F81F               	dw	63519
   201  0010D2  0000               	dw	0
   202  0010D4  0000               	dw	0
   203  0010D6  0000               	dw	0
   204  0010D8  0000               	dw	0
   205  0010DA  0000               	dw	0
   206  0010DC  0000               	dw	0
   207  0010DE  0000               	dw	0
   208  0010E0  0000               	dw	0
   209  0010E2  0000               	dw	0
   210  0010E4  0000               	dw	0
   211  0010E6  0000               	dw	0
   212  0010E8  0000               	dw	0
   213                           
   214                           ;initializer for _txt1
   215  0010EA  43                 	db	67
   216  0010EB  48                 	db	72
   217  0010EC  2D                 	db	45
   218  0010ED  00                 	db	0
   219  0010EE  43                 	db	67
   220  0010EF  48                 	db	72
   221  0010F0  20                 	db	32
   222  0010F1  00                 	db	0
   223  0010F2  43                 	db	67
   224  0010F3  48                 	db	72
   225  0010F4  2B                 	db	43
   226  0010F5  00                 	db	0
   227  0010F6  50                 	db	80
   228  0010F7  52                 	db	82
   229  0010F8  56                 	db	86
   230  0010F9  00                 	db	0
   231  0010FA  4E                 	db	78
   232  0010FB  58                 	db	88
   233  0010FC  54                 	db	84
   234  0010FD  00                 	db	0
   235  0010FE  50                 	db	80
   236  0010FF  2F                 	db	47
   237  001100  50                 	db	80
   238  001101  00                 	db	0
   239  001102  56                 	db	86
   240  001103  4C                 	db	76
   241  001104  2D                 	db	45
   242  001105  00                 	db	0
   243  001106  56                 	db	86
   244  001107  4C                 	db	76
   245  001108  2B                 	db	43
   246  001109  00                 	db	0
   247  00110A  45                 	db	69
   248  00110B  51                 	db	81
   249  00110C  20                 	db	32
   250  00110D  00                 	db	0
   251  00110E  20                 	db	32
   252  00110F  30                 	db	48
   253  001110  20                 	db	32
   254  001111  00                 	db	0
   255  001112  31                 	db	49
   256  001113  30                 	db	48
   257  001114  30                 	db	48
   258  001115  00                 	db	0
   259  001116  32                 	db	50
   260  001117  30                 	db	48
   261  001118  30                 	db	48
   262  001119  00                 	db	0
   263  00111A  20                 	db	32
   264  00111B  31                 	db	49
   265  00111C  20                 	db	32
   266  00111D  00                 	db	0
   267  00111E  20                 	db	32
   268  00111F  32                 	db	50
   269  001120  20                 	db	32
   270  001121  00                 	db	0
   271  001122  20                 	db	32
   272  001123  33                 	db	51
   273  001124  20                 	db	32
   274  001125  00                 	db	0
   275  001126  20                 	db	32
   276  001127  34                 	db	52
   277  001128  20                 	db	32
   278  001129  00                 	db	0
   279  00112A  20                 	db	32
   280  00112B  35                 	db	53
   281  00112C  20                 	db	32
   282  00112D  00                 	db	0
   283  00112E  20                 	db	32
   284  00112F  36                 	db	54
   285  001130  20                 	db	32
   286  001131  00                 	db	0
   287  001132  20                 	db	32
   288  001133  37                 	db	55
   289  001134  20                 	db	32
   290  001135  00                 	db	0
   291  001136  20                 	db	32
   292  001137  38                 	db	56
   293  001138  20                 	db	32
   294  001139  00                 	db	0
   295  00113A  20                 	db	32
   296  00113B  39                 	db	57
   297  00113C  20                 	db	32
   298  00113D  00                 	db	0
   299                           
   300                           	psect	mediumconst
   301  00FD7C                     __pmediumconst:
   302                           	opt stack 0
   303  00FD7C  00                 	db	0
   304  00FD7D                     _font:
   305                           	opt stack 0
   306  00FD7D  00                 	db	0
   307  00FD7E  00                 	db	0
   308  00FD7F  00                 	db	0
   309  00FD80  00                 	db	0
   310  00FD81  00                 	db	0
   311  00FD82  00                 	db	0
   312  00FD83  00                 	db	0
   313  00FD84  5F                 	db	95
   314  00FD85  00                 	db	0
   315  00FD86  00                 	db	0
   316  00FD87  00                 	db	0
   317  00FD88  07                 	db	7
   318  00FD89  00                 	db	0
   319  00FD8A  07                 	db	7
   320  00FD8B  00                 	db	0
   321  00FD8C  14                 	db	20
   322  00FD8D  7F                 	db	127
   323  00FD8E  14                 	db	20
   324  00FD8F  7F                 	db	127
   325  00FD90  14                 	db	20
   326  00FD91  24                 	db	36
   327  00FD92  2A                 	db	42
   328  00FD93  7F                 	db	127
   329  00FD94  2A                 	db	42
   330  00FD95  12                 	db	18
   331  00FD96  23                 	db	35
   332  00FD97  13                 	db	19
   333  00FD98  08                 	db	8
   334  00FD99  64                 	db	100
   335  00FD9A  62                 	db	98
   336  00FD9B  36                 	db	54
   337  00FD9C  49                 	db	73
   338  00FD9D  56                 	db	86
   339  00FD9E  20                 	db	32
   340  00FD9F  50                 	db	80
   341  00FDA0  00                 	db	0
   342  00FDA1  08                 	db	8
   343  00FDA2  07                 	db	7
   344  00FDA3  03                 	db	3
   345  00FDA4  00                 	db	0
   346  00FDA5  00                 	db	0
   347  00FDA6  1C                 	db	28
   348  00FDA7  22                 	db	34
   349  00FDA8  41                 	db	65
   350  00FDA9  00                 	db	0
   351  00FDAA  00                 	db	0
   352  00FDAB  41                 	db	65
   353  00FDAC  22                 	db	34
   354  00FDAD  1C                 	db	28
   355  00FDAE  00                 	db	0
   356  00FDAF  2A                 	db	42
   357  00FDB0  1C                 	db	28
   358  00FDB1  7F                 	db	127
   359  00FDB2  1C                 	db	28
   360  00FDB3  2A                 	db	42
   361  00FDB4  08                 	db	8
   362  00FDB5  08                 	db	8
   363  00FDB6  3E                 	db	62
   364  00FDB7  08                 	db	8
   365  00FDB8  08                 	db	8
   366  00FDB9  00                 	db	0
   367  00FDBA  80                 	db	128
   368  00FDBB  70                 	db	112
   369  00FDBC  30                 	db	48
   370  00FDBD  00                 	db	0
   371  00FDBE  08                 	db	8
   372  00FDBF  08                 	db	8
   373  00FDC0  08                 	db	8
   374  00FDC1  08                 	db	8
   375  00FDC2  08                 	db	8
   376  00FDC3  00                 	db	0
   377  00FDC4  00                 	db	0
   378  00FDC5  60                 	db	96
   379  00FDC6  60                 	db	96
   380  00FDC7  00                 	db	0
   381  00FDC8  20                 	db	32
   382  00FDC9  10                 	db	16
   383  00FDCA  08                 	db	8
   384  00FDCB  04                 	db	4
   385  00FDCC  02                 	db	2
   386  00FDCD  3E                 	db	62
   387  00FDCE  51                 	db	81
   388  00FDCF  49                 	db	73
   389  00FDD0  45                 	db	69
   390  00FDD1  3E                 	db	62
   391  00FDD2  00                 	db	0
   392  00FDD3  42                 	db	66
   393  00FDD4  7F                 	db	127
   394  00FDD5  40                 	db	64
   395  00FDD6  00                 	db	0
   396  00FDD7  72                 	db	114
   397  00FDD8  49                 	db	73
   398  00FDD9  49                 	db	73
   399  00FDDA  49                 	db	73
   400  00FDDB  46                 	db	70
   401  00FDDC  21                 	db	33
   402  00FDDD  41                 	db	65
   403  00FDDE  49                 	db	73
   404  00FDDF  4D                 	db	77
   405  00FDE0  33                 	db	51
   406  00FDE1  18                 	db	24
   407  00FDE2  14                 	db	20
   408  00FDE3  12                 	db	18
   409  00FDE4  7F                 	db	127
   410  00FDE5  10                 	db	16
   411  00FDE6  27                 	db	39
   412  00FDE7  45                 	db	69
   413  00FDE8  45                 	db	69
   414  00FDE9  45                 	db	69
   415  00FDEA  39                 	db	57
   416  00FDEB  3C                 	db	60
   417  00FDEC  4A                 	db	74
   418  00FDED  49                 	db	73
   419  00FDEE  49                 	db	73
   420  00FDEF  31                 	db	49
   421  00FDF0  41                 	db	65
   422  00FDF1  21                 	db	33
   423  00FDF2  11                 	db	17
   424  00FDF3  09                 	db	9
   425  00FDF4  07                 	db	7
   426  00FDF5  36                 	db	54
   427  00FDF6  49                 	db	73
   428  00FDF7  49                 	db	73
   429  00FDF8  49                 	db	73
   430  00FDF9  36                 	db	54
   431  00FDFA  46                 	db	70
   432  00FDFB  49                 	db	73
   433  00FDFC  49                 	db	73
   434  00FDFD  29                 	db	41
   435  00FDFE  1E                 	db	30
   436  00FDFF  00                 	db	0
   437  00FE00  00                 	db	0
   438  00FE01  14                 	db	20
   439  00FE02  00                 	db	0
   440  00FE03  00                 	db	0
   441  00FE04  00                 	db	0
   442  00FE05  40                 	db	64
   443  00FE06  34                 	db	52
   444  00FE07  00                 	db	0
   445  00FE08  00                 	db	0
   446  00FE09  00                 	db	0
   447  00FE0A  08                 	db	8
   448  00FE0B  14                 	db	20
   449  00FE0C  22                 	db	34
   450  00FE0D  41                 	db	65
   451  00FE0E  14                 	db	20
   452  00FE0F  14                 	db	20
   453  00FE10  14                 	db	20
   454  00FE11  14                 	db	20
   455  00FE12  14                 	db	20
   456  00FE13  00                 	db	0
   457  00FE14  41                 	db	65
   458  00FE15  22                 	db	34
   459  00FE16  14                 	db	20
   460  00FE17  08                 	db	8
   461  00FE18  02                 	db	2
   462  00FE19  01                 	db	1
   463  00FE1A  59                 	db	89
   464  00FE1B  09                 	db	9
   465  00FE1C  06                 	db	6
   466  00FE1D  3E                 	db	62
   467  00FE1E  41                 	db	65
   468  00FE1F  5D                 	db	93
   469  00FE20  59                 	db	89
   470  00FE21  4E                 	db	78
   471  00FE22  7C                 	db	124
   472  00FE23  12                 	db	18
   473  00FE24  11                 	db	17
   474  00FE25  12                 	db	18
   475  00FE26  7C                 	db	124
   476  00FE27  7F                 	db	127
   477  00FE28  49                 	db	73
   478  00FE29  49                 	db	73
   479  00FE2A  49                 	db	73
   480  00FE2B  36                 	db	54
   481  00FE2C  3E                 	db	62
   482  00FE2D  41                 	db	65
   483  00FE2E  41                 	db	65
   484  00FE2F  41                 	db	65
   485  00FE30  22                 	db	34
   486  00FE31  7F                 	db	127
   487  00FE32  41                 	db	65
   488  00FE33  41                 	db	65
   489  00FE34  41                 	db	65
   490  00FE35  3E                 	db	62
   491  00FE36  7F                 	db	127
   492  00FE37  49                 	db	73
   493  00FE38  49                 	db	73
   494  00FE39  49                 	db	73
   495  00FE3A  41                 	db	65
   496  00FE3B  7F                 	db	127
   497  00FE3C  09                 	db	9
   498  00FE3D  09                 	db	9
   499  00FE3E  09                 	db	9
   500  00FE3F  01                 	db	1
   501  00FE40  3E                 	db	62
   502  00FE41  41                 	db	65
   503  00FE42  41                 	db	65
   504  00FE43  51                 	db	81
   505  00FE44  73                 	db	115
   506  00FE45  7F                 	db	127
   507  00FE46  08                 	db	8
   508  00FE47  08                 	db	8
   509  00FE48  08                 	db	8
   510  00FE49  7F                 	db	127
   511  00FE4A  00                 	db	0
   512  00FE4B  41                 	db	65
   513  00FE4C  7F                 	db	127
   514  00FE4D  41                 	db	65
   515  00FE4E  00                 	db	0
   516  00FE4F  20                 	db	32
   517  00FE50  40                 	db	64
   518  00FE51  41                 	db	65
   519  00FE52  3F                 	db	63
   520  00FE53  01                 	db	1
   521  00FE54  7F                 	db	127
   522  00FE55  08                 	db	8
   523  00FE56  14                 	db	20
   524  00FE57  22                 	db	34
   525  00FE58  41                 	db	65
   526  00FE59  7F                 	db	127
   527  00FE5A  40                 	db	64
   528  00FE5B  40                 	db	64
   529  00FE5C  40                 	db	64
   530  00FE5D  40                 	db	64
   531  00FE5E  7F                 	db	127
   532  00FE5F  02                 	db	2
   533  00FE60  1C                 	db	28
   534  00FE61  02                 	db	2
   535  00FE62  7F                 	db	127
   536  00FE63  7F                 	db	127
   537  00FE64  04                 	db	4
   538  00FE65  08                 	db	8
   539  00FE66  10                 	db	16
   540  00FE67  7F                 	db	127
   541  00FE68  3E                 	db	62
   542  00FE69  41                 	db	65
   543  00FE6A  41                 	db	65
   544  00FE6B  41                 	db	65
   545  00FE6C  3E                 	db	62
   546  00FE6D  7F                 	db	127
   547  00FE6E  09                 	db	9
   548  00FE6F  09                 	db	9
   549  00FE70  09                 	db	9
   550  00FE71  06                 	db	6
   551  00FE72  3E                 	db	62
   552  00FE73  41                 	db	65
   553  00FE74  51                 	db	81
   554  00FE75  21                 	db	33
   555  00FE76  5E                 	db	94
   556  00FE77  7F                 	db	127
   557  00FE78  09                 	db	9
   558  00FE79  19                 	db	25
   559  00FE7A  29                 	db	41
   560  00FE7B  46                 	db	70
   561  00FE7C                     __end_of_font:
   562                           	opt stack 0
   563  00FE7C                     _font2:
   564                           	opt stack 0
   565  00FE7C  26                 	db	38
   566  00FE7D  49                 	db	73
   567  00FE7E  49                 	db	73
   568  00FE7F  49                 	db	73
   569  00FE80  32                 	db	50
   570  00FE81  03                 	db	3
   571  00FE82  01                 	db	1
   572  00FE83  7F                 	db	127
   573  00FE84  01                 	db	1
   574  00FE85  03                 	db	3
   575  00FE86  3F                 	db	63
   576  00FE87  40                 	db	64
   577  00FE88  40                 	db	64
   578  00FE89  40                 	db	64
   579  00FE8A  3F                 	db	63
   580  00FE8B  1F                 	db	31
   581  00FE8C  20                 	db	32
   582  00FE8D  40                 	db	64
   583  00FE8E  20                 	db	32
   584  00FE8F  1F                 	db	31
   585  00FE90  3F                 	db	63
   586  00FE91  40                 	db	64
   587  00FE92  38                 	db	56
   588  00FE93  40                 	db	64
   589  00FE94  3F                 	db	63
   590  00FE95  63                 	db	99
   591  00FE96  14                 	db	20
   592  00FE97  08                 	db	8
   593  00FE98  14                 	db	20
   594  00FE99  63                 	db	99
   595  00FE9A  03                 	db	3
   596  00FE9B  04                 	db	4
   597  00FE9C  78                 	db	120
   598  00FE9D  04                 	db	4
   599  00FE9E  03                 	db	3
   600  00FE9F  61                 	db	97
   601  00FEA0  59                 	db	89
   602  00FEA1  49                 	db	73
   603  00FEA2  4D                 	db	77
   604  00FEA3  43                 	db	67
   605  00FEA4  00                 	db	0
   606  00FEA5  7F                 	db	127
   607  00FEA6  41                 	db	65
   608  00FEA7  41                 	db	65
   609  00FEA8  41                 	db	65
   610  00FEA9  02                 	db	2
   611  00FEAA  04                 	db	4
   612  00FEAB  08                 	db	8
   613  00FEAC  10                 	db	16
   614  00FEAD  20                 	db	32
   615  00FEAE  00                 	db	0
   616  00FEAF  41                 	db	65
   617  00FEB0  41                 	db	65
   618  00FEB1  41                 	db	65
   619  00FEB2  7F                 	db	127
   620  00FEB3  04                 	db	4
   621  00FEB4  02                 	db	2
   622  00FEB5  01                 	db	1
   623  00FEB6  02                 	db	2
   624  00FEB7  04                 	db	4
   625  00FEB8  40                 	db	64
   626  00FEB9  40                 	db	64
   627  00FEBA  40                 	db	64
   628  00FEBB  40                 	db	64
   629  00FEBC  40                 	db	64
   630  00FEBD  00                 	db	0
   631  00FEBE  03                 	db	3
   632  00FEBF  07                 	db	7
   633  00FEC0  08                 	db	8
   634  00FEC1  00                 	db	0
   635  00FEC2  20                 	db	32
   636  00FEC3  54                 	db	84
   637  00FEC4  54                 	db	84
   638  00FEC5  78                 	db	120
   639  00FEC6  40                 	db	64
   640  00FEC7  7F                 	db	127
   641  00FEC8  28                 	db	40
   642  00FEC9  44                 	db	68
   643  00FECA  44                 	db	68
   644  00FECB  38                 	db	56
   645  00FECC  38                 	db	56
   646  00FECD  44                 	db	68
   647  00FECE  44                 	db	68
   648  00FECF  44                 	db	68
   649  00FED0  28                 	db	40
   650  00FED1  38                 	db	56
   651  00FED2  44                 	db	68
   652  00FED3  44                 	db	68
   653  00FED4  28                 	db	40
   654  00FED5  7F                 	db	127
   655  00FED6  38                 	db	56
   656  00FED7  54                 	db	84
   657  00FED8  54                 	db	84
   658  00FED9  54                 	db	84
   659  00FEDA  18                 	db	24
   660  00FEDB  00                 	db	0
   661  00FEDC  08                 	db	8
   662  00FEDD  7E                 	db	126
   663  00FEDE  09                 	db	9
   664  00FEDF  02                 	db	2
   665  00FEE0  18                 	db	24
   666  00FEE1  A4                 	db	164
   667  00FEE2  A4                 	db	164
   668  00FEE3  9C                 	db	156
   669  00FEE4  78                 	db	120
   670  00FEE5  7F                 	db	127
   671  00FEE6  08                 	db	8
   672  00FEE7  04                 	db	4
   673  00FEE8  04                 	db	4
   674  00FEE9  78                 	db	120
   675  00FEEA  00                 	db	0
   676  00FEEB  44                 	db	68
   677  00FEEC  7D                 	db	125
   678  00FEED  40                 	db	64
   679  00FEEE  00                 	db	0
   680  00FEEF  20                 	db	32
   681  00FEF0  40                 	db	64
   682  00FEF1  40                 	db	64
   683  00FEF2  3D                 	db	61
   684  00FEF3  00                 	db	0
   685  00FEF4  7F                 	db	127
   686  00FEF5  10                 	db	16
   687  00FEF6  28                 	db	40
   688  00FEF7  44                 	db	68
   689  00FEF8  00                 	db	0
   690  00FEF9  00                 	db	0
   691  00FEFA  41                 	db	65
   692  00FEFB  7F                 	db	127
   693  00FEFC  40                 	db	64
   694  00FEFD  00                 	db	0
   695  00FEFE  7C                 	db	124
   696  00FEFF  04                 	db	4
   697  00FF00  78                 	db	120
   698  00FF01  04                 	db	4
   699  00FF02  78                 	db	120
   700  00FF03  7C                 	db	124
   701  00FF04  08                 	db	8
   702  00FF05  04                 	db	4
   703  00FF06  04                 	db	4
   704  00FF07  78                 	db	120
   705  00FF08  38                 	db	56
   706  00FF09  44                 	db	68
   707  00FF0A  44                 	db	68
   708  00FF0B  44                 	db	68
   709  00FF0C  38                 	db	56
   710  00FF0D  FC                 	db	252
   711  00FF0E  18                 	db	24
   712  00FF0F  24                 	db	36
   713  00FF10  24                 	db	36
   714  00FF11  18                 	db	24
   715  00FF12  18                 	db	24
   716  00FF13  24                 	db	36
   717  00FF14  24                 	db	36
   718  00FF15  18                 	db	24
   719  00FF16  FC                 	db	252
   720  00FF17  7C                 	db	124
   721  00FF18  08                 	db	8
   722  00FF19  04                 	db	4
   723  00FF1A  04                 	db	4
   724  00FF1B  08                 	db	8
   725  00FF1C  48                 	db	72
   726  00FF1D  54                 	db	84
   727  00FF1E  54                 	db	84
   728  00FF1F  54                 	db	84
   729  00FF20  24                 	db	36
   730  00FF21  04                 	db	4
   731  00FF22  04                 	db	4
   732  00FF23  3F                 	db	63
   733  00FF24  44                 	db	68
   734  00FF25  24                 	db	36
   735  00FF26  3C                 	db	60
   736  00FF27  40                 	db	64
   737  00FF28  40                 	db	64
   738  00FF29  20                 	db	32
   739  00FF2A  7C                 	db	124
   740  00FF2B  1C                 	db	28
   741  00FF2C  20                 	db	32
   742  00FF2D  40                 	db	64
   743  00FF2E  20                 	db	32
   744  00FF2F  1C                 	db	28
   745  00FF30  3C                 	db	60
   746  00FF31  40                 	db	64
   747  00FF32  30                 	db	48
   748  00FF33  40                 	db	64
   749  00FF34  3C                 	db	60
   750  00FF35  44                 	db	68
   751  00FF36  28                 	db	40
   752  00FF37  10                 	db	16
   753  00FF38  28                 	db	40
   754  00FF39  44                 	db	68
   755  00FF3A  4C                 	db	76
   756  00FF3B  90                 	db	144
   757  00FF3C  90                 	db	144
   758  00FF3D  90                 	db	144
   759  00FF3E  7C                 	db	124
   760  00FF3F  44                 	db	68
   761  00FF40  64                 	db	100
   762  00FF41  54                 	db	84
   763  00FF42  4C                 	db	76
   764  00FF43  44                 	db	68
   765  00FF44  00                 	db	0
   766  00FF45  08                 	db	8
   767  00FF46  36                 	db	54
   768  00FF47  41                 	db	65
   769  00FF48  00                 	db	0
   770  00FF49  00                 	db	0
   771  00FF4A  00                 	db	0
   772  00FF4B  77                 	db	119
   773  00FF4C  00                 	db	0
   774  00FF4D  00                 	db	0
   775  00FF4E  00                 	db	0
   776  00FF4F  41                 	db	65
   777  00FF50  36                 	db	54
   778  00FF51  08                 	db	8
   779  00FF52  00                 	db	0
   780  00FF53  02                 	db	2
   781  00FF54  01                 	db	1
   782  00FF55  02                 	db	2
   783  00FF56  04                 	db	4
   784  00FF57  02                 	db	2
   785  00FF58                     __end_of_font2:
   786                           	opt stack 0
   787  00FF58                     _dpowers:
   788                           	opt stack 0
   789  00FF58  0001               	dw	1
   790  00FF5A  000A               	dw	10
   791  00FF5C  0064               	dw	100
   792  00FF5E  03E8               	dw	1000
   793  00FF60  2710               	dw	10000
   794  00FF62                     __end_of_dpowers:
   795                           	opt stack 0
   796  00FF62                     _hexpowers:
   797                           	opt stack 0
   798  00FF62  0001               	dw	1
   799  00FF64  0010               	dw	16
   800  00FF66  0100               	dw	256
   801  00FF68  1000               	dw	4096
   802  00FF6A                     __end_of_hexpowers:
   803                           	opt stack 0
   804  0000                     _ADCON1	set	4033
   805  0000                     _CCP2CON	set	4026
   806  0000                     _CCPR2L	set	4027
   807  0000                     _INTCON2bits	set	4081
   808  0000                     _INTCONbits	set	4082
   809  0000                     _OSCCON	set	4051
   810  0000                     _PIE1bits	set	3997
   811  0000                     _PIR1bits	set	3998
   812  0000                     _PIR2bits	set	4001
   813  0000                     _PORTBbits	set	3969
   814  0000                     _PORTCbits	set	3970
   815  0000                     _PORTD	set	3971
   816  0000                     _PORTDbits	set	3971
   817  0000                     _PORTE	set	3972
   818  0000                     _PR2	set	4043
   819  0000                     _RCSTA	set	4011
   820  0000                     _RCSTAbits	set	4011
   821  0000                     _SPBRG	set	4015
   822  0000                     _SPBRGH	set	4016
   823  0000                     _SSPBUF	set	4041
   824  0000                     _SSPCON1	set	4038
   825  0000                     _SSPSTAT	set	4039
   826  0000                     _SSPSTATbits	set	4039
   827  0000                     _T0CON	set	4053
   828  0000                     _T0CONbits	set	4053
   829  0000                     _T1CON	set	4045
   830  0000                     _T1CONbits	set	4045
   831  0000                     _T2CON	set	4042
   832  0000                     _T3CON	set	4017
   833  0000                     _T3CONbits	set	4017
   834  0000                     _TMR0H	set	4055
   835  0000                     _TMR0L	set	4054
   836  0000                     _TMR1H	set	4047
   837  0000                     _TMR1L	set	4046
   838  0000                     _TMR3H	set	4019
   839  0000                     _TMR3L	set	4018
   840  0000                     _TRISA	set	3986
   841  0000                     _TRISB	set	3987
   842  0000                     _TRISBbits	set	3987
   843  0000                     _TRISC	set	3988
   844  0000                     _TRISCbits	set	3988
   845  0000                     _TRISD	set	3989
   846  0000                     _TRISDbits	set	3989
   847  0000                     _TRISE	set	3990
   848  0000                     _TXREG	set	4013
   849  0000                     _TXSTA	set	4012
   850  0000                     _TXSTAbits	set	4012
   851  0000                     _RBPU	set	32655
   852  0000                     _TRMT	set	32097
   853  00FF6A                     STR_2:
   854  00FF6A  20                 	db	32
   855  00FF6B  54                 	db	84	;'T'
   856  00FF6C  65                 	db	101	;'e'
   857  00FF6D  6D                 	db	109	;'m'
   858  00FF6E  70                 	db	112	;'p'
   859  00FF6F  65                 	db	101	;'e'
   860  00FF70  72                 	db	114	;'r'
   861  00FF71  61                 	db	97	;'a'
   862  00FF72  74                 	db	116	;'t'
   863  00FF73  75                 	db	117	;'u'
   864  00FF74  72                 	db	114	;'r'
   865  00FF75  65                 	db	101	;'e'
   866  00FF76  20                 	db	32
   867  00FF77  3D                 	db	61	;'='
   868  00FF78  20                 	db	32
   869  00FF79  25                 	db	37
   870  00FF7A  64                 	db	100	;'d'
   871  00FF7B  20                 	db	32
   872  00FF7C  64                 	db	100	;'d'
   873  00FF7D  65                 	db	101	;'e'
   874  00FF7E  67                 	db	103	;'g'
   875  00FF7F  72                 	db	114	;'r'
   876  00FF80  65                 	db	101	;'e'
   877  00FF81  65                 	db	101	;'e'
   878  00FF82  73                 	db	115	;'s'
   879  00FF83  43                 	db	67	;'C'
   880  00FF84  20                 	db	32
   881  00FF85  3D                 	db	61	;'='
   882  00FF86  20                 	db	32
   883  00FF87  25                 	db	37
   884  00FF88  64                 	db	100	;'d'
   885  00FF89  20                 	db	32
   886  00FF8A  64                 	db	100	;'d'
   887  00FF8B  65                 	db	101	;'e'
   888  00FF8C  67                 	db	103	;'g'
   889  00FF8D  72                 	db	114	;'r'
   890  00FF8E  65                 	db	101	;'e'
   891  00FF8F  65                 	db	101	;'e'
   892  00FF90  73                 	db	115	;'s'
   893  00FF91  46                 	db	70	;'F'
   894  00FF92  0D                 	db	13
   895  00FF93  0A                 	db	10
   896  00FF94  00                 	db	0
   897  00FF95                     STR_1:
   898  00FF95  25                 	db	37
   899  00FF96  30                 	db	48	;'0'
   900  00FF97  32                 	db	50	;'2'
   901  00FF98  78                 	db	120	;'x'
   902  00FF99  3A                 	db	58	;':'
   903  00FF9A  25                 	db	37
   904  00FF9B  30                 	db	48	;'0'
   905  00FF9C  32                 	db	50	;'2'
   906  00FF9D  78                 	db	120	;'x'
   907  00FF9E  3A                 	db	58	;':'
   908  00FF9F  25                 	db	37
   909  00FFA0  30                 	db	48	;'0'
   910  00FFA1  32                 	db	50	;'2'
   911  00FFA2  78                 	db	120	;'x'
   912  00FFA3  20                 	db	32
   913  00FFA4  25                 	db	37
   914  00FFA5  30                 	db	48	;'0'
   915  00FFA6  32                 	db	50	;'2'
   916  00FFA7  78                 	db	120	;'x'
   917  00FFA8  2F                 	db	47
   918  00FFA9  25                 	db	37
   919  00FFAA  30                 	db	48	;'0'
   920  00FFAB  32                 	db	50	;'2'
   921  00FFAC  78                 	db	120	;'x'
   922  00FFAD  2F                 	db	47
   923  00FFAE  25                 	db	37
   924  00FFAF  30                 	db	48	;'0'
   925  00FFB0  32                 	db	50	;'2'
   926  00FFB1  78                 	db	120	;'x'
   927  00FFB2  00                 	db	0
   928  00FFB3                     STR_3:
   929  00FFB3  4E                 	db	78	;'N'
   930  00FFB4  45                 	db	69	;'E'
   931  00FFB5  43                 	db	67	;'C'
   932  00FFB6  5F                 	db	95	;'_'
   933  00FFB7  43                 	db	67	;'C'
   934  00FFB8  6F                 	db	111	;'o'
   935  00FFB9  64                 	db	100	;'d'
   936  00FFBA  65                 	db	101	;'e'
   937  00FFBB  20                 	db	32
   938  00FFBC  3D                 	db	61	;'='
   939  00FFBD  20                 	db	32
   940  00FFBE  25                 	db	37
   941  00FFBF  78                 	db	120	;'x'
   942  00FFC0  20                 	db	32
   943  00FFC1  46                 	db	70	;'F'
   944  00FFC2  6F                 	db	111	;'o'
   945  00FFC3  75                 	db	117	;'u'
   946  00FFC4  6E                 	db	110	;'n'
   947  00FFC5  64                 	db	100	;'d'
   948  00FFC6  20                 	db	32
   949  00FFC7  3D                 	db	61	;'='
   950  00FFC8  20                 	db	32
   951  00FFC9  25                 	db	37
   952  00FFCA  64                 	db	100	;'d'
   953  00FFCB  20                 	db	32
   954  00FFCC  0D                 	db	13
   955  00FFCD  0A                 	db	10
   956  00FFCE  00                 	db	0
   957  00FFCF                     STR_4:
   958  00FFCF  45                 	db	69	;'E'
   959  00FFD0  43                 	db	67	;'C'
   960  00FFD1  45                 	db	69	;'E'
   961  00FFD2  33                 	db	51	;'3'
   962  00FFD3  33                 	db	51	;'3'
   963  00FFD4  30                 	db	48	;'0'
   964  00FFD5  31                 	db	49	;'1'
   965  00FFD6  4C                 	db	76	;'L'
   966  00FFD7  20                 	db	32
   967  00FFD8  53                 	db	83	;'S'
   968  00FFD9  70                 	db	112	;'p'
   969  00FFDA  72                 	db	114	;'r'
   970  00FFDB  69                 	db	105	;'i'
   971  00FFDC  6E                 	db	110	;'n'
   972  00FFDD  67                 	db	103	;'g'
   973  00FFDE  20                 	db	32
   974  00FFDF  32                 	db	50	;'2'
   975  00FFE0  32                 	db	50	;'2'
   976  00FFE1  2D                 	db	45
   977  00FFE2  53                 	db	83	;'S'
   978  00FFE3  31                 	db	49	;'1'
   979  00FFE4  00                 	db	0
   980  00FFE5                     STR_6:
   981  00FFE5  30                 	db	48	;'0'
   982  00FFE6  31                 	db	49	;'1'
   983  00FFE7  32                 	db	50	;'2'
   984  00FFE8  33                 	db	51	;'3'
   985  00FFE9  34                 	db	52	;'4'
   986  00FFEA  35                 	db	53	;'5'
   987  00FFEB  36                 	db	54	;'6'
   988  00FFEC  37                 	db	55	;'7'
   989  00FFED  38                 	db	56	;'8'
   990  00FFEE  39                 	db	57	;'9'
   991  00FFEF  61                 	db	97	;'a'
   992  00FFF0  62                 	db	98	;'b'
   993  00FFF1  63                 	db	99	;'c'
   994  00FFF2  64                 	db	100	;'d'
   995  00FFF3  65                 	db	101	;'e'
   996  00FFF4  66                 	db	102	;'f'
   997  00FFF5  00                 	db	0
   998  00FFF6                     STR_5:
   999  00FFF6  4C                 	db	76	;'L'
  1000  00FFF7  41                 	db	65	;'A'
  1001  00FFF8  42                 	db	66	;'B'
  1002  00FFF9  20                 	db	32
  1003  00FFFA  31                 	db	49	;'1'
  1004  00FFFB  31                 	db	49	;'1'
  1005  00FFFC  20                 	db	32
  1006  00FFFD  00                 	db	0
  1007                           
  1008                           ; #config settings
  1009  00FFFE  00                 	db	0	; dummy byte at the end
  1010  0000                     
  1011                           	psect	cinit
  1012  0011BA                     __pcinit:
  1013                           	opt stack 0
  1014  0011BA                     start_initialization:
  1015                           	opt stack 0
  1016  0011BA                     __initialization:
  1017                           	opt stack 0
  1018                           
  1019                           ; Clear objects allocated to BANK0 (31 bytes)
  1020  0011BA  EE00  F0D4         	lfsr	0,__pbssBANK0
  1021  0011BE  0E1F               	movlw	31
  1022  0011C0                     clear_0:
  1023  0011C0  6AEE               	clrf	postinc0,c
  1024  0011C2  06E8               	decf	wreg,f,c
  1025  0011C4  E1FD               	bnz	clear_0
  1026                           
  1027                           ; Clear objects allocated to COMRAM (41 bytes)
  1028  0011C6  EE00  F044         	lfsr	0,__pbssCOMRAM
  1029  0011CA  0E29               	movlw	41
  1030  0011CC                     clear_1:
  1031  0011CC  6AEE               	clrf	postinc0,c
  1032  0011CE  06E8               	decf	wreg,f,c
  1033  0011D0  E1FD               	bnz	clear_1
  1034                           
  1035                           ; Initialize objects allocated to BANK1 (126 bytes)
  1036                           ; load TBLPTR registers with __pidataBANK1
  1037  0011D2  0EC0               	movlw	low __pidataBANK1
  1038  0011D4  6EF6               	movwf	tblptrl,c
  1039  0011D6  0E10               	movlw	high __pidataBANK1
  1040  0011D8  6EF7               	movwf	tblptrh,c
  1041  0011DA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1042  0011DC  6EF8               	movwf	tblptru,c
  1043  0011DE  EE01  F000         	lfsr	0,__pdataBANK1
  1044  0011E2  EE10 F07E          	lfsr	1,126
  1045  0011E6                     copy_data0:
  1046  0011E6  0009               	tblrd		*+
  1047  0011E8  CFF5 FFEE          	movff	tablat,postinc0
  1048  0011EC  50E5               	movf	postdec1,w,c
  1049  0011EE  50E1               	movf	fsr1l,w,c
  1050  0011F0  E1FA               	bnz	copy_data0
  1051                           
  1052                           ; Initialize objects allocated to BANK0 (84 bytes)
  1053                           ; load TBLPTR registers with __pidataBANK0
  1054  0011F2  0EB4               	movlw	low __pidataBANK0
  1055  0011F4  6EF6               	movwf	tblptrl,c
  1056  0011F6  0E13               	movlw	high __pidataBANK0
  1057  0011F8  6EF7               	movwf	tblptrh,c
  1058  0011FA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1059  0011FC  6EF8               	movwf	tblptru,c
  1060  0011FE  EE00  F080         	lfsr	0,__pdataBANK0
  1061  001202  EE10 F054          	lfsr	1,84
  1062  001206                     copy_data1:
  1063  001206  0009               	tblrd		*+
  1064  001208  CFF5 FFEE          	movff	tablat,postinc0
  1065  00120C  50E5               	movf	postdec1,w,c
  1066  00120E  50E1               	movf	fsr1l,w,c
  1067  001210  E1FA               	bnz	copy_data1
  1068                           
  1069                           ; Initialize objects allocated to COMRAM (2 bytes)
  1070                           ; load TBLPTR registers with __pidataCOMRAM
  1071  001212  0E9A               	movlw	low __pidataCOMRAM
  1072  001214  6EF6               	movwf	tblptrl,c
  1073  001216  0E19               	movlw	high __pidataCOMRAM
  1074  001218  6EF7               	movwf	tblptrh,c
  1075  00121A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1076  00121C  6EF8               	movwf	tblptru,c
  1077  00121E  0009               	tblrd		*+	;fetch initializer
  1078  001220  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1079  001224  0009               	tblrd		*+	;fetch initializer
  1080  001226  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1081  00122A                     end_of_initialization:
  1082                           	opt stack 0
  1083  00122A                     __end_of__initialization:
  1084                           	opt stack 0
  1085  00122A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1086  00122C  6EF8               	movwf	tblptru,c
  1087  00122E  0100               	movlb	0
  1088  001230  EFBB  F001         	goto	_main	;jump to C main() function
  1089                           tblptru	equ	0xFF8
  1090                           tblptrh	equ	0xFF7
  1091                           tblptrl	equ	0xFF6
  1092                           tablat	equ	0xFF5
  1093                           postinc0	equ	0xFEE
  1094                           wreg	equ	0xFE8
  1095                           postdec1	equ	0xFE5
  1096                           fsr1l	equ	0xFE1
  1097                           
  1098                           	psect	bssCOMRAM
  1099  000044                     __pbssCOMRAM:
  1100                           	opt stack 0
  1101  000044                     _Nec_code:
  1102                           	opt stack 0
  1103  000044                     	ds	4
  1104  000048                     _Time_Elapsed:
  1105                           	opt stack 0
  1106  000048                     	ds	2
  1107  00004A                     _nbr:
  1108                           	opt stack 0
  1109  00004A                     	ds	2
  1110  00004C                     _nec_ok:
  1111                           	opt stack 0
  1112  00004C                     	ds	2
  1113  00004E                     _txt:
  1114                           	opt stack 0
  1115  00004E                     	ds	2
  1116  000050                     _Nec_code1:
  1117                           	opt stack 0
  1118  000050                     	ds	1
  1119  000051                     _Nec_state:
  1120                           	opt stack 0
  1121  000051                     	ds	1
  1122  000052                     _TempSecond:
  1123                           	opt stack 0
  1124  000052                     	ds	1
  1125  000053                     __tft_type:
  1126                           	opt stack 0
  1127  000053                     	ds	1
  1128  000054                     _alarm_date:
  1129                           	opt stack 0
  1130  000054                     	ds	1
  1131  000055                     _alarm_hour:
  1132                           	opt stack 0
  1133  000055                     	ds	1
  1134  000056                     _alarm_minute:
  1135                           	opt stack 0
  1136  000056                     	ds	1
  1137  000057                     _alarm_second:
  1138                           	opt stack 0
  1139  000057                     	ds	1
  1140  000058                     _bit_count:
  1141                           	opt stack 0
  1142  000058                     	ds	1
  1143  000059                     _colstart:
  1144                           	opt stack 0
  1145  000059                     	ds	1
  1146  00005A                     _day:
  1147                           	opt stack 0
  1148  00005A                     	ds	1
  1149  00005B                     _dow:
  1150                           	opt stack 0
  1151  00005B                     	ds	1
  1152  00005C                     _found:
  1153                           	opt stack 0
  1154  00005C                     	ds	1
  1155  00005D                     _hour:
  1156                           	opt stack 0
  1157  00005D                     	ds	1
  1158  00005E                     _i:
  1159                           	opt stack 0
  1160  00005E                     	ds	1
  1161  00005F                     _minute:
  1162                           	opt stack 0
  1163  00005F                     	ds	1
  1164  000060                     _month:
  1165                           	opt stack 0
  1166  000060                     	ds	1
  1167  000061                     _rowstart:
  1168                           	opt stack 0
  1169  000061                     	ds	1
  1170  000062                     _second:
  1171                           	opt stack 0
  1172  000062                     	ds	1
  1173  000063                     _setup_alarm_hour:
  1174                           	opt stack 0
  1175  000063                     	ds	1
  1176  000064                     _setup_alarm_minute:
  1177                           	opt stack 0
  1178  000064                     	ds	1
  1179  000065                     _setup_alarm_second:
  1180                           	opt stack 0
  1181  000065                     	ds	1
  1182  000066                     _setup_day:
  1183                           	opt stack 0
  1184  000066                     	ds	1
  1185  000067                     _setup_hour:
  1186                           	opt stack 0
  1187  000067                     	ds	1
  1188  000068                     _setup_minute:
  1189                           	opt stack 0
  1190  000068                     	ds	1
  1191  000069                     _setup_month:
  1192                           	opt stack 0
  1193  000069                     	ds	1
  1194  00006A                     _setup_second:
  1195                           	opt stack 0
  1196  00006A                     	ds	1
  1197  00006B                     _setup_year:
  1198                           	opt stack 0
  1199  00006B                     	ds	1
  1200  00006C                     _year:
  1201                           	opt stack 0
  1202  00006C                     	ds	1
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           postdec1	equ	0xFE5
  1210                           fsr1l	equ	0xFE1
  1211                           
  1212                           	psect	dataCOMRAM
  1213  00006D                     __pdataCOMRAM:
  1214                           	opt stack 0
  1215  00006D                     _tempSecond:
  1216                           	opt stack 0
  1217  00006D                     	ds	1
  1218  00006E                     _wrap:
  1219                           	opt stack 0
  1220  00006E                     	ds	1
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postdec1	equ	0xFE5
  1228                           fsr1l	equ	0xFE1
  1229                           
  1230                           	psect	bssBANK0
  1231  0000D4                     __pbssBANK0:
  1232                           	opt stack 0
  1233  0000D4                     _buffer:
  1234                           	opt stack 0
  1235  0000D4                     	ds	31
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           postinc0	equ	0xFEE
  1241                           wreg	equ	0xFE8
  1242                           postdec1	equ	0xFE5
  1243                           fsr1l	equ	0xFE1
  1244                           
  1245                           	psect	dataBANK0
  1246  000080                     __pdataBANK0:
  1247                           	opt stack 0
  1248  000080                     _D1:
  1249                           	opt stack 0
  1250  000080                     	ds	21
  1251  000095                     _D2:
  1252                           	opt stack 0
  1253  000095                     	ds	21
  1254  0000AA                     _D3:
  1255                           	opt stack 0
  1256  0000AA                     	ds	21
  1257  0000BF                     _array1:
  1258                           	opt stack 0
  1259  0000BF                     	ds	21
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1l	equ	0xFE1
  1268                           
  1269                           	psect	dataBANK1
  1270  000100                     __pdataBANK1:
  1271                           	opt stack 0
  1272  000100                     _color:
  1273                           	opt stack 0
  1274  000100                     	ds	42
  1275  00012A                     _txt1:
  1276                           	opt stack 0
  1277  00012A                     	ds	84
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           postdec1	equ	0xFE5
  1285                           fsr1l	equ	0xFE1
  1286                           
  1287                           	psect	cstackBANK0
  1288  0000F3                     __pcstackBANK0:
  1289                           	opt stack 0
  1290  0000F3                     drawtext@x:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x0
  1294  0000F3                     	ds	1
  1295  0000F4                     drawtext@textsize:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x1
  1299  0000F4                     	ds	2
  1300  0000F6                     drawtext@i:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x3
  1304  0000F6                     	ds	2
  1305  0000F8                     drawtext@cursor_y:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x5
  1309  0000F8                     	ds	1
  1310  0000F9                     drawtext@cursor_x:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x6
  1314  0000F9                     	ds	1
  1315  0000FA                     main@tempF:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x7
  1319  0000FA                     	ds	1
  1320  0000FB                     main@tempC:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x8
  1324  0000FB                     	ds	1
  1325  0000FC                     main@i:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x9
  1329  0000FC                     	ds	2
  1330  0000FE                     main@found:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0xB
  1334  0000FE                     	ds	1
  1335                           tblptru	equ	0xFF8
  1336                           tblptrh	equ	0xFF7
  1337                           tblptrl	equ	0xFF6
  1338                           tablat	equ	0xFF5
  1339                           postinc0	equ	0xFEE
  1340                           wreg	equ	0xFE8
  1341                           postdec1	equ	0xFE5
  1342                           fsr1l	equ	0xFE1
  1343                           
  1344                           	psect	cstackCOMRAM
  1345  000001                     __pcstackCOMRAM:
  1346                           	opt stack 0
  1347  000001                     ??_INT0_isr:
  1348  000001                     
  1349                           ; 1 bytes @ 0x0
  1350  000001                     	ds	2
  1351  000003                     ??_chkisr:
  1352                           
  1353                           ; 0 bytes @ 0x2
  1354  000003                     	ds	14
  1355  000011                     ??_isdigit:
  1356  000011                     ?_strlen:
  1357                           	opt stack 0
  1358  000011                     ?___wmul:
  1359                           	opt stack 0
  1360  000011                     ?___lwdiv:
  1361                           	opt stack 0
  1362  000011                     I2C_Read@ack:
  1363                           	opt stack 0
  1364  000011                     I2C_Write@outByte:
  1365                           	opt stack 0
  1366  000011                     spiwrite@x:
  1367                           	opt stack 0
  1368  000011                     putch@c:
  1369                           	opt stack 0
  1370  000011                     OpenUSART@spbrg:
  1371                           	opt stack 0
  1372  000011                     ___wmul@multiplier:
  1373                           	opt stack 0
  1374  000011                     ___lwdiv@dividend:
  1375                           	opt stack 0
  1376  000011                     strcpy@to:
  1377                           	opt stack 0
  1378  000011                     strlen@s:
  1379                           	opt stack 0
  1380  000011                     I2C_Init@c:
  1381                           	opt stack 0
  1382                           
  1383                           ; 4 bytes @ 0x10
  1384  000011                     	ds	1
  1385  000012                     I2C_Read@n:
  1386                           	opt stack 0
  1387  000012                     I2C_Write@n:
  1388                           	opt stack 0
  1389  000012                     spiwrite@spidata:
  1390                           	opt stack 0
  1391  000012                     _isdigit$2040:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x11
  1395  000012                     	ds	1
  1396  000013                     ??_strlen:
  1397  000013                     I2C_Read@inByte:
  1398                           	opt stack 0
  1399  000013                     I2C_Write_Cmd_Only@Cmd:
  1400                           	opt stack 0
  1401  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1402                           	opt stack 0
  1403  000013                     write_command@cmd_:
  1404                           	opt stack 0
  1405  000013                     write_data@data_:
  1406                           	opt stack 0
  1407  000013                     OpenUSART@config:
  1408                           	opt stack 0
  1409  000013                     isdigit@c:
  1410                           	opt stack 0
  1411  000013                     ___wmul@multiplicand:
  1412                           	opt stack 0
  1413  000013                     ___lwdiv@divisor:
  1414                           	opt stack 0
  1415  000013                     strcpy@from:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x12
  1419  000013                     	ds	1
  1420  000014                     ?_DS1621_Read_Temp:
  1421                           	opt stack 0
  1422  000014                     I2C_Write_Cmd_Only@Device:
  1423                           	opt stack 0
  1424  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1425                           	opt stack 0
  1426  000014                     setAddrWindow@y0:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x13
  1430  000014                     	ds	1
  1431  000015                     I2C_Write_Cmd_Write_Data@Device:
  1432                           	opt stack 0
  1433  000015                     setAddrWindow@x1:
  1434                           	opt stack 0
  1435  000015                     ___lwdiv@counter:
  1436                           	opt stack 0
  1437  000015                     ___wmul@product:
  1438                           	opt stack 0
  1439  000015                     strcpy@cp:
  1440                           	opt stack 0
  1441  000015                     strlen@cp:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x14
  1445  000015                     	ds	1
  1446  000016                     DS1621_Init@Device:
  1447                           	opt stack 0
  1448  000016                     DS1621_Read_Temp@Data_Ret:
  1449                           	opt stack 0
  1450  000016                     setAddrWindow@y1:
  1451                           	opt stack 0
  1452  000016                     ___lwdiv@quotient:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x15
  1456  000016                     	ds	1
  1457  000017                     ?___awdiv:
  1458                           	opt stack 0
  1459  000017                     setAddrWindow@x0:
  1460                           	opt stack 0
  1461  000017                     delay_ms@ms:
  1462                           	opt stack 0
  1463  000017                     ___awdiv@dividend:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x16
  1467  000017                     	ds	1
  1468  000018                     ?___lwmod:
  1469                           	opt stack 0
  1470  000018                     drawPixel@y:
  1471                           	opt stack 0
  1472  000018                     drawFastVLine@y:
  1473                           	opt stack 0
  1474  000018                     fillRectangle@y:
  1475                           	opt stack 0
  1476  000018                     ___lwmod@dividend:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x17
  1480  000018                     	ds	1
  1481  000019                     ??_delay_ms:
  1482  000019                     drawFastVLine@h:
  1483                           	opt stack 0
  1484  000019                     fillRectangle@w:
  1485                           	opt stack 0
  1486  000019                     drawPixel@color:
  1487                           	opt stack 0
  1488  000019                     ___awdiv@divisor:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x18
  1492  000019                     	ds	1
  1493  00001A                     fillRectangle@h:
  1494                           	opt stack 0
  1495  00001A                     drawFastVLine@color:
  1496                           	opt stack 0
  1497  00001A                     ___lwmod@divisor:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x19
  1501  00001A                     	ds	1
  1502  00001B                     drawPixel@x:
  1503                           	opt stack 0
  1504  00001B                     ___awdiv@counter:
  1505                           	opt stack 0
  1506  00001B                     delay_ms@count:
  1507                           	opt stack 0
  1508  00001B                     fillRectangle@color:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x1A
  1512  00001B                     	ds	1
  1513  00001C                     ??_drawFastVLine:
  1514  00001C                     ___awdiv@sign:
  1515                           	opt stack 0
  1516  00001C                     ___lwmod@counter:
  1517                           	opt stack 0
  1518  00001C                     drawCircle@x0:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x1B
  1522  00001C                     	ds	1
  1523  00001D                     ??_fillRectangle:
  1524  00001D                     ?_printf:
  1525                           	opt stack 0
  1526  00001D                     printf@f:
  1527                           	opt stack 0
  1528  00001D                     ___awdiv@quotient:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x1C
  1532  00001D                     	ds	1
  1533  00001E                     drawCircle@y0:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x1D
  1537  00001E                     	ds	2
  1538  000020                     drawFastVLine@hi:
  1539                           	opt stack 0
  1540  000020                     drawCircle@r:
  1541                           	opt stack 0
  1542                           
  1543                           ; 2 bytes @ 0x1F
  1544  000020                     	ds	1
  1545  000021                     drawFastVLine@lo:
  1546                           	opt stack 0
  1547  000021                     fillRectangle@hi:
  1548                           	opt stack 0
  1549                           
  1550                           ; 1 bytes @ 0x20
  1551  000021                     	ds	1
  1552  000022                     drawFastVLine@x:
  1553                           	opt stack 0
  1554  000022                     fillRectangle@lo:
  1555                           	opt stack 0
  1556  000022                     drawCircle@color:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x21
  1560  000022                     	ds	1
  1561  000023                     fillRect@y:
  1562                           	opt stack 0
  1563  000023                     fillRectangle@x:
  1564                           	opt stack 0
  1565  000023                     fillCircleHelper@x0:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x22
  1569  000023                     	ds	1
  1570  000024                     ??_drawCircle:
  1571  000024                     fillRect@w:
  1572                           	opt stack 0
  1573  000024                     fillScreen@color:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x23
  1577  000024                     	ds	1
  1578  000025                     fillRect@h:
  1579                           	opt stack 0
  1580  000025                     fillCircleHelper@y0:
  1581                           	opt stack 0
  1582                           
  1583                           ; 2 bytes @ 0x24
  1584  000025                     	ds	1
  1585  000026                     fillRect@color:
  1586                           	opt stack 0
  1587  000026                     drawCircle@ddF_x:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x25
  1591  000026                     	ds	1
  1592  000027                     fillCircleHelper@r:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x26
  1596  000027                     	ds	1
  1597  000028                     ??_fillRect:
  1598  000028                     drawCircle@ddF_y:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x27
  1602  000028                     	ds	1
  1603  000029                     fillCircleHelper@cornername:
  1604                           	opt stack 0
  1605                           
  1606                           ; 2 bytes @ 0x28
  1607  000029                     	ds	1
  1608  00002A                     drawCircle@f:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x29
  1612  00002A                     	ds	1
  1613  00002B                     ??_printf:
  1614  00002B                     fillRect@x:
  1615                           	opt stack 0
  1616  00002B                     fillCircleHelper@delta:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x2A
  1620  00002B                     	ds	1
  1621  00002C                     fillRect@i:
  1622                           	opt stack 0
  1623  00002C                     drawCircle@x:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x2B
  1627  00002C                     	ds	1
  1628  00002D                     fillCircleHelper@color:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x2C
  1632  00002D                     	ds	1
  1633  00002E                     drawChar@y:
  1634                           	opt stack 0
  1635  00002E                     drawCircle@y:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x2D
  1639  00002E                     	ds	1
  1640  00002F                     ??_fillCircleHelper:
  1641  00002F                     drawChar@c:
  1642                           	opt stack 0
  1643  00002F                     printf@idx:
  1644                           	opt stack 0
  1645                           
  1646                           ; 1 bytes @ 0x2E
  1647  00002F                     	ds	1
  1648  000030                     drawChar@color:
  1649                           	opt stack 0
  1650  000030                     printf@ap:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x2F
  1654  000030                     	ds	1
  1655  000031                     fillCircleHelper@ddF_x:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x30
  1659  000031                     	ds	1
  1660  000032                     printf@prec:
  1661                           	opt stack 0
  1662  000032                     drawChar@bg:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x31
  1666  000032                     	ds	1
  1667  000033                     fillCircleHelper@ddF_y:
  1668                           	opt stack 0
  1669  000033                     printf@val:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x32
  1673  000033                     	ds	1
  1674  000034                     drawChar@size:
  1675                           	opt stack 0
  1676                           
  1677                           ; 1 bytes @ 0x33
  1678  000034                     	ds	1
  1679  000035                     drawChar@line:
  1680                           	opt stack 0
  1681  000035                     printf@flag:
  1682                           	opt stack 0
  1683  000035                     fillCircleHelper@f:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x34
  1687  000035                     	ds	1
  1688  000036                     drawChar@x:
  1689                           	opt stack 0
  1690  000036                     printf@width:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x35
  1694  000036                     	ds	1
  1695  000037                     drawChar@j:
  1696                           	opt stack 0
  1697  000037                     fillCircleHelper@x:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x36
  1701  000037                     	ds	1
  1702  000038                     drawChar@i:
  1703                           	opt stack 0
  1704  000038                     printf@c:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x37
  1708  000038                     	ds	1
  1709  000039                     drawtext@y:
  1710                           	opt stack 0
  1711  000039                     fillCircleHelper@y:
  1712                           	opt stack 0
  1713                           
  1714                           ; 2 bytes @ 0x38
  1715  000039                     	ds	1
  1716  00003A                     drawtext@_text:
  1717                           	opt stack 0
  1718                           
  1719                           ; 2 bytes @ 0x39
  1720  00003A                     	ds	1
  1721  00003B                     fillCircle@x0:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x3A
  1725  00003B                     	ds	1
  1726  00003C                     drawtext@color:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x3B
  1730  00003C                     	ds	1
  1731  00003D                     fillCircle@y0:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x3C
  1735  00003D                     	ds	1
  1736  00003E                     drawtext@bg:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x3D
  1740  00003E                     	ds	1
  1741  00003F                     fillCircle@r:
  1742                           	opt stack 0
  1743                           
  1744                           ; 2 bytes @ 0x3E
  1745  00003F                     	ds	1
  1746  000040                     drawtext@size:
  1747                           	opt stack 0
  1748                           
  1749                           ; 1 bytes @ 0x3F
  1750  000040                     	ds	1
  1751  000041                     ??_drawtext:
  1752  000041                     fillCircle@color:
  1753                           	opt stack 0
  1754                           
  1755                           ; 2 bytes @ 0x40
  1756  000041                     	ds	2
  1757  000043                     ??_main:
  1758                           
  1759                           ; 0 bytes @ 0x42
  1760  000043                     	ds	1
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           
  1770 ;;
  1771 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1772 ;;
  1773 ;; *************** function _main *****************
  1774 ;; Defined at:
  1775 ;;		line 156 in file "Lab11p4.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  i               2    9[BANK0 ] int 
  1780 ;;  found           1   11[BANK0 ] unsigned char 
  1781 ;;  tempC           1    8[BANK0 ] char 
  1782 ;;  tempF           1    7[BANK0 ] char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;		None               void
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;Total ram usage:        6 bytes
  1797 ;; Hardware stack levels required when called:   11
  1798 ;; This function calls:
  1799 ;;		_Activate_Buzzer
  1800 ;;		_DS1621_Read_Temp
  1801 ;;		_DS3231_Read_Time
  1802 ;;		_DS3231_Setup_Time
  1803 ;;		_Deactivate_Buzzer
  1804 ;;		_Do_Init
  1805 ;;		_Initialize_Screen
  1806 ;;		_Wait_Half_Second
  1807 ;;		___awdiv
  1808 ;;		___wmul
  1809 ;;		_drawCircle
  1810 ;;		_drawtext
  1811 ;;		_fillCircle
  1812 ;;		_printf
  1813 ;; This function is called by:
  1814 ;;		Startup code after reset
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text0
  1819  000376                     __ptext0:
  1820                           	opt stack 0
  1821  000376                     _main:
  1822                           	opt stack 20
  1823                           
  1824                           ;Lab11p4.c: 158: Do_Init();
  1825                           
  1826                           ;incstack = 0
  1827  000376  ECEC  F00A         	call	_Do_Init	;wreg free
  1828                           
  1829                           ;Lab11p4.c: 159: Initialize_Screen();
  1830  00037A  ECD5  F007         	call	_Initialize_Screen	;wreg free
  1831                           
  1832                           ;Lab11p4.c: 170: DS3231_Setup_Time();
  1833  00037E  EC80  F009         	call	_DS3231_Setup_Time	;wreg free
  1834  000382  D000               	goto	l5328
  1835  000384                     l5328:
  1836                           
  1837                           ;Lab11p4.c: 172: {
  1838                           ;Lab11p4.c: 174: DS3231_Read_Time();
  1839  000384  ECAE  F009         	call	_DS3231_Read_Time	;wreg free
  1840                           
  1841                           ;Lab11p4.c: 175: if(tempSecond != second)
  1842  000388  5062               	movf	_second,w,c
  1843  00038A  186D               	xorwf	_tempSecond,w,c
  1844  00038C  B4D8               	btfsc	status,2,c
  1845  00038E  D04C               	goto	l5342
  1846                           
  1847                           ;Lab11p4.c: 176: {
  1848                           ;Lab11p4.c: 177: tempSecond = second;
  1849  000390  C062  F06D         	movff	_second,_tempSecond
  1850                           
  1851                           ;Lab11p4.c: 178: signed char tempC = DS1621_Read_Temp();
  1852  000394  EC9A  F00B         	call	_DS1621_Read_Temp	;wreg free
  1853  000398  5014               	movf	?_DS1621_Read_Temp,w,c
  1854  00039A  0100               	movlb	0	; () banked
  1855  00039C  6FFB               	movwf	main@tempC& (0+255),b
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;Lab11p4.c: 179: signed char tempF = (tempC * 9 / 5) + 32;
  1859  00039E  0100               	movlb	0	; () banked
  1860  0003A0  51FB               	movf	main@tempC& (0+255),w,b
  1861  0003A2  6E11               	movwf	___wmul@multiplier,c
  1862  0003A4  6A12               	clrf	___wmul@multiplier+1,c
  1863  0003A6  BE11               	btfsc	___wmul@multiplier,7,c
  1864  0003A8  0612               	decf	___wmul@multiplier+1,f,c
  1865  0003AA  0E00               	movlw	0
  1866  0003AC  6E14               	movwf	___wmul@multiplicand+1,c
  1867  0003AE  0E09               	movlw	9
  1868  0003B0  6E13               	movwf	___wmul@multiplicand,c
  1869  0003B2  ECC7  F00B         	call	___wmul	;wreg free
  1870  0003B6  C011  F017         	movff	?___wmul,___awdiv@dividend
  1871  0003BA  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1872  0003BE  0E00               	movlw	0
  1873  0003C0  6E1A               	movwf	___awdiv@divisor+1,c
  1874  0003C2  0E05               	movlw	5
  1875  0003C4  6E19               	movwf	___awdiv@divisor,c
  1876  0003C6  EC8A  F007         	call	___awdiv	;wreg free
  1877  0003CA  5017               	movf	?___awdiv,w,c
  1878  0003CC  0F20               	addlw	32
  1879  0003CE  0100               	movlb	0	; () banked
  1880  0003D0  6FFA               	movwf	main@tempF& (0+255),b
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;Lab11p4.c: 180: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  1884  0003D2  0E95               	movlw	low STR_1
  1885  0003D4  6E1D               	movwf	printf@f,c
  1886  0003D6  0EFF               	movlw	high STR_1
  1887  0003D8  6E1E               	movwf	printf@f+1,c
  1888  0003DA  C05D  F01F         	movff	_hour,?_printf+2
  1889  0003DE  6A20               	clrf	?_printf+3,c
  1890  0003E0  C05F  F021         	movff	_minute,?_printf+4
  1891  0003E4  6A22               	clrf	?_printf+5,c
  1892  0003E6  C062  F023         	movff	_second,?_printf+6
  1893  0003EA  6A24               	clrf	?_printf+7,c
  1894  0003EC  C060  F025         	movff	_month,?_printf+8
  1895  0003F0  6A26               	clrf	?_printf+9,c
  1896  0003F2  C05A  F027         	movff	_day,?_printf+10
  1897  0003F6  6A28               	clrf	?_printf+11,c
  1898  0003F8  C06C  F029         	movff	_year,?_printf+12
  1899  0003FC  6A2A               	clrf	?_printf+13,c
  1900  0003FE  EC0E  F000         	call	_printf	;wreg free
  1901                           
  1902                           ;Lab11p4.c: 181: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1903  000402  0E6A               	movlw	low STR_2
  1904  000404  6E1D               	movwf	printf@f,c
  1905  000406  0EFF               	movlw	high STR_2
  1906  000408  6E1E               	movwf	printf@f+1,c
  1907  00040A  0100               	movlb	0	; () banked
  1908  00040C  51FB               	movf	main@tempC& (0+255),w,b
  1909  00040E  6E1F               	movwf	?_printf+2,c
  1910  000410  6A20               	clrf	?_printf+3,c
  1911  000412  BE1F               	btfsc	?_printf+2,7,c
  1912  000414  0620               	decf	?_printf+3,f,c
  1913  000416  0100               	movlb	0	; () banked
  1914  000418  51FA               	movf	main@tempF& (0+255),w,b
  1915  00041A  6E21               	movwf	?_printf+4,c
  1916  00041C  6A22               	clrf	?_printf+5,c
  1917  00041E  BE21               	btfsc	?_printf+4,7,c
  1918  000420  0622               	decf	?_printf+5,f,c
  1919  000422  EC0E  F000         	call	_printf	;wreg free
  1920  000426  D000               	goto	l5342
  1921  000428                     l5342:
  1922                           
  1923                           ;Lab11p4.c: 182: }
  1924                           ;Lab11p4.c: 184: if (nec_ok == 1)
  1925  000428  044C               	decf	_nec_ok,w,c
  1926  00042A  104D               	iorwf	_nec_ok+1,w,c
  1927  00042C  A4D8               	btfss	status,2,c
  1928  00042E  D7AA               	goto	l5328
  1929                           
  1930                           ;Lab11p4.c: 185: {
  1931                           ;Lab11p4.c: 187: nec_ok = 0;
  1932  000430  0E00               	movlw	0
  1933  000432  6E4D               	movwf	_nec_ok+1,c
  1934  000434  0E00               	movlw	0
  1935  000436  6E4C               	movwf	_nec_ok,c
  1936                           
  1937                           ;Lab11p4.c: 189: INTCONbits.INT0IE = 1;
  1938  000438  88F2               	bsf	intcon,4,c	;volatile
  1939                           
  1940                           ;Lab11p4.c: 190: INTCON2bits.INTEDG0 = 0;
  1941  00043A  9CF1               	bcf	intcon2,6,c	;volatile
  1942                           
  1943                           ;Lab11p4.c: 192: char found = 0xff;
  1944  00043C  0100               	movlb	0	; () banked
  1945  00043E  69FE               	setf	main@found& (0+255),b
  1946                           
  1947                           ;Lab11p4.c: 194: for(int i = 0; i < 21; i++)
  1948  000440  0E00               	movlw	0
  1949  000442  0100               	movlb	0	; () banked
  1950  000444  6FFD               	movwf	(main@i+1)& (0+255),b
  1951  000446  0E00               	movlw	0
  1952  000448  6FFC               	movwf	main@i& (0+255),b
  1953  00044A                     l5352:
  1954                           
  1955                           ; BSR set to: 0
  1956  00044A  0100               	movlb	0	; () banked
  1957  00044C  BFFD               	btfsc	(main@i+1)& (0+255),7,b
  1958  00044E  D00A               	goto	l5356
  1959  000450  0100               	movlb	0	; () banked
  1960  000452  51FD               	movf	(main@i+1)& (0+255),w,b
  1961  000454  E11B               	bnz	l5364
  1962  000456  0E15               	movlw	21
  1963  000458  0100               	movlb	0	; () banked
  1964  00045A  5DFC               	subwf	main@i& (0+255),w,b
  1965  00045C  B0D8               	btfsc	status,0,c
  1966  00045E  D016               	goto	l5364
  1967  000460  D001               	goto	l5356
  1968                           
  1969                           ; BSR set to: 0
  1970  000462  D014               	goto	l5364
  1971  000464                     l5356:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;Lab11p4.c: 195: {
  1975                           ;Lab11p4.c: 196: if (Nec_code1 == array1[i])
  1976  000464  0EBF               	movlw	low _array1
  1977  000466  0100               	movlb	0	; () banked
  1978  000468  25FC               	addwf	main@i& (0+255),w,b
  1979  00046A  6ED9               	movwf	fsr2l,c
  1980  00046C  0E00               	movlw	high _array1
  1981  00046E  0100               	movlb	0	; () banked
  1982  000470  21FD               	addwfc	(main@i+1)& (0+255),w,b
  1983  000472  6EDA               	movwf	fsr2h,c
  1984  000474  5050               	movf	_Nec_code1,w,c
  1985  000476  18DE               	xorwf	postinc2,w,c
  1986  000478  A4D8               	btfss	status,2,c
  1987  00047A  D003               	goto	l5360
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;Lab11p4.c: 197: {
  1991                           ;Lab11p4.c: 198: found = i;
  1992  00047C  C0FC  F0FE         	movff	main@i,main@found
  1993  000480  D000               	goto	l5360
  1994  000482                     l5360:
  1995                           
  1996                           ; BSR set to: 0
  1997  000482  0100               	movlb	0	; () banked
  1998  000484  4BFC               	infsnz	main@i& (0+255),f,b
  1999  000486  2BFD               	incf	(main@i+1)& (0+255),f,b
  2000  000488  D7E0               	goto	l5352
  2001                           
  2002                           ; BSR set to: 0
  2003  00048A  D000               	goto	l5364
  2004  00048C                     l5364:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;Lab11p4.c: 199: }
  2008                           ;Lab11p4.c: 200: }
  2009                           ;Lab11p4.c: 201: if (found != 0xff)
  2010  00048C  0100               	movlb	0	; () banked
  2011  00048E  29FE               	incf	main@found& (0+255),w,b
  2012  000490  B4D8               	btfsc	status,2,c
  2013  000492  D044               	goto	l5372
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;Lab11p4.c: 202: {
  2017                           ;Lab11p4.c: 203: fillCircle(60, 80, 20, color[found]);
  2018  000494  0E00               	movlw	0
  2019  000496  6E3C               	movwf	fillCircle@x0+1,c
  2020  000498  0E3C               	movlw	60
  2021  00049A  6E3B               	movwf	fillCircle@x0,c
  2022  00049C  0E00               	movlw	0
  2023  00049E  6E3E               	movwf	fillCircle@y0+1,c
  2024  0004A0  0E50               	movlw	80
  2025  0004A2  6E3D               	movwf	fillCircle@y0,c
  2026  0004A4  0E00               	movlw	0
  2027  0004A6  6E40               	movwf	fillCircle@r+1,c
  2028  0004A8  0E14               	movlw	20
  2029  0004AA  6E3F               	movwf	fillCircle@r,c
  2030  0004AC  0100               	movlb	0	; () banked
  2031  0004AE  51FE               	movf	main@found& (0+255),w,b
  2032  0004B0  0D02               	mullw	2
  2033  0004B2  0E00               	movlw	low _color
  2034  0004B4  24F3               	addwf	prodl,w,c
  2035  0004B6  6ED9               	movwf	fsr2l,c
  2036  0004B8  0E01               	movlw	high _color
  2037  0004BA  20F4               	addwfc	prodh,w,c
  2038  0004BC  6EDA               	movwf	fsr2h,c
  2039  0004BE  CFDE F041          	movff	postinc2,fillCircle@color
  2040  0004C2  CFDD F042          	movff	postdec2,fillCircle@color+1
  2041  0004C6  EC04  F00A         	call	_fillCircle	;wreg free
  2042                           
  2043                           ;Lab11p4.c: 204: drawCircle(60, 80, 20, 0xFFFF);
  2044  0004CA  0E00               	movlw	0
  2045  0004CC  6E1D               	movwf	drawCircle@x0+1,c
  2046  0004CE  0E3C               	movlw	60
  2047  0004D0  6E1C               	movwf	drawCircle@x0,c
  2048  0004D2  0E00               	movlw	0
  2049  0004D4  6E1F               	movwf	drawCircle@y0+1,c
  2050  0004D6  0E50               	movlw	80
  2051  0004D8  6E1E               	movwf	drawCircle@y0,c
  2052  0004DA  0E00               	movlw	0
  2053  0004DC  6E21               	movwf	drawCircle@r+1,c
  2054  0004DE  0E14               	movlw	20
  2055  0004E0  6E20               	movwf	drawCircle@r,c
  2056  0004E2  0EFF               	movlw	255
  2057  0004E4  6E23               	movwf	drawCircle@color+1,c
  2058  0004E6  6822               	setf	drawCircle@color,c
  2059  0004E8  ECCF  F002         	call	_drawCircle	;wreg free
  2060                           
  2061                           ;Lab11p4.c: 205: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2062  0004EC  0E4D               	movlw	77
  2063  0004EE  6E39               	movwf	drawtext@y,c
  2064  0004F0  0100               	movlb	0	; () banked
  2065  0004F2  51FE               	movf	main@found& (0+255),w,b
  2066  0004F4  0D04               	mullw	4
  2067  0004F6  0E2A               	movlw	low _txt1
  2068  0004F8  24F3               	addwf	prodl,w,c
  2069  0004FA  6E3A               	movwf	drawtext@_text,c
  2070  0004FC  0E01               	movlw	high _txt1
  2071  0004FE  20F4               	addwfc	prodh,w,c
  2072  000500  6E3B               	movwf	drawtext@_text+1,c
  2073  000502  0EFF               	movlw	255
  2074  000504  6E3D               	movwf	drawtext@color+1,c
  2075  000506  683C               	setf	drawtext@color,c
  2076  000508  0E00               	movlw	0
  2077  00050A  6E3F               	movwf	drawtext@bg+1,c
  2078  00050C  0E00               	movlw	0
  2079  00050E  6E3E               	movwf	drawtext@bg,c
  2080  000510  0E01               	movlw	1
  2081  000512  6E40               	movwf	drawtext@size,c
  2082  000514  0E34               	movlw	52
  2083  000516  EC1E  F006         	call	_drawtext
  2084  00051A  D000               	goto	l5372
  2085  00051C                     l5372:
  2086                           
  2087                           ;Lab11p4.c: 206: }
  2088                           ;Lab11p4.c: 207: printf ("NEC_Code = %x Found = %d \r\n", Nec_code1, found);
  2089  00051C  0EB3               	movlw	low STR_3
  2090  00051E  6E1D               	movwf	printf@f,c
  2091  000520  0EFF               	movlw	high STR_3
  2092  000522  6E1E               	movwf	printf@f+1,c
  2093  000524  C050  F01F         	movff	_Nec_code1,?_printf+2
  2094  000528  6A20               	clrf	?_printf+3,c
  2095  00052A  C0FE  F021         	movff	main@found,?_printf+4
  2096  00052E  6A22               	clrf	?_printf+5,c
  2097  000530  EC0E  F000         	call	_printf	;wreg free
  2098                           
  2099                           ;Lab11p4.c: 208: if (found == 8)
  2100  000534  0E08               	movlw	8
  2101  000536  0100               	movlb	0	; () banked
  2102  000538  19FE               	xorwf	main@found& (0+255),w,b
  2103  00053A  A4D8               	btfss	status,2,c
  2104  00053C  D003               	goto	l5378
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;Lab11p4.c: 209: {
  2108                           ;Lab11p4.c: 210: DS3231_Setup_Time();
  2109  00053E  EC80  F009         	call	_DS3231_Setup_Time	;wreg free
  2110  000542  D000               	goto	l5378
  2111  000544                     l5378:
  2112                           
  2113                           ;Lab11p4.c: 211: }
  2114                           ;Lab11p4.c: 212: PORTD=D1[found] | D3[found];
  2115  000544  0100               	movlb	0	; () banked
  2116  000546  51FE               	movf	main@found& (0+255),w,b
  2117  000548  0D01               	mullw	1
  2118  00054A  0EAA               	movlw	low _D3
  2119  00054C  24F3               	addwf	prodl,w,c
  2120  00054E  6ED9               	movwf	fsr2l,c
  2121  000550  0E00               	movlw	high _D3
  2122  000552  20F4               	addwfc	prodh,w,c
  2123  000554  6EDA               	movwf	fsr2h,c
  2124  000556  50DF               	movf	indf2,w,c
  2125  000558  6E43               	movwf	??_main& (0+255),c
  2126  00055A  0100               	movlb	0	; () banked
  2127  00055C  51FE               	movf	main@found& (0+255),w,b
  2128  00055E  0D01               	mullw	1
  2129  000560  0E80               	movlw	low _D1
  2130  000562  24F3               	addwf	prodl,w,c
  2131  000564  6ED9               	movwf	fsr2l,c
  2132  000566  0E00               	movlw	high _D1
  2133  000568  20F4               	addwfc	prodh,w,c
  2134  00056A  6EDA               	movwf	fsr2h,c
  2135  00056C  50DF               	movf	indf2,w,c
  2136  00056E  1043               	iorwf	??_main,w,c
  2137  000570  6E83               	movwf	3971,c	;volatile
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;Lab11p4.c: 213: PORTE=D2[found];
  2141  000572  0100               	movlb	0	; () banked
  2142  000574  51FE               	movf	main@found& (0+255),w,b
  2143  000576  0D01               	mullw	1
  2144  000578  0E95               	movlw	low _D2
  2145  00057A  24F3               	addwf	prodl,w,c
  2146  00057C  6ED9               	movwf	fsr2l,c
  2147  00057E  0E00               	movlw	high _D2
  2148  000580  20F4               	addwfc	prodh,w,c
  2149  000582  6EDA               	movwf	fsr2h,c
  2150  000584  50DF               	movf	indf2,w,c
  2151  000586  6E84               	movwf	3972,c	;volatile
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;Lab11p4.c: 214: PORTBbits.RB7 = 1;
  2155  000588  8E81               	bsf	3969,7,c	;volatile
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;Lab11p4.c: 215: Activate_Buzzer();
  2159  00058A  EC82  F00C         	call	_Activate_Buzzer	;wreg free
  2160                           
  2161                           ;Lab11p4.c: 216: Wait_Half_Second();
  2162  00058E  EC19  F00C         	call	_Wait_Half_Second	;wreg free
  2163                           
  2164                           ;Lab11p4.c: 217: PORTBbits.RB7 = 0;
  2165  000592  9E81               	bcf	3969,7,c	;volatile
  2166                           
  2167                           ;Lab11p4.c: 218: Deactivate_Buzzer();
  2168  000594  ECBD  F00C         	call	_Deactivate_Buzzer	;wreg free
  2169  000598  D6F5               	goto	l5328
  2170  00059A  EF0C  F000         	goto	start
  2171  00059E                     __end_of_main:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodh	equ	0xFF4
  2178                           prodl	equ	0xFF3
  2179                           intcon	equ	0xFF2
  2180                           intcon2	equ	0xFF1
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           postdec1	equ	0xFE5
  2184                           fsr1l	equ	0xFE1
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           fsr2h	equ	0xFDA
  2189                           fsr2l	equ	0xFD9
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _printf *****************
  2193 ;; Defined at:
  2194 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2197 ;;		 -> STR_3(28), STR_2(43), STR_1(30), 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  idx             1   46[COMRAM] unsigned char 
  2200 ;;  tmpval          4    0        struct .
  2201 ;;  cp              3    0        PTR const unsigned char 
  2202 ;;  width           2   53[COMRAM] int 
  2203 ;;  val             2   50[COMRAM] unsigned int 
  2204 ;;  ap              2   47[COMRAM] PTR void [1]
  2205 ;;		 -> ?_printf(2), 
  2206 ;;  len             2    0        unsigned int 
  2207 ;;  c               1   55[COMRAM] char 
  2208 ;;  flag            1   52[COMRAM] unsigned char 
  2209 ;;  prec            1   49[COMRAM] char 
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  2   28[COMRAM] int 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2219 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;Total ram usage:       28 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    4
  2226 ;; This function calls:
  2227 ;;		___lwdiv
  2228 ;;		___lwmod
  2229 ;;		___wmul
  2230 ;;		_isdigit
  2231 ;;		_putch
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text1
  2238  00001C                     __ptext1:
  2239                           	opt stack 0
  2240  00001C                     _printf:
  2241                           	opt stack 26
  2242                           
  2243                           ;doprnt.c: 466: va_list ap;
  2244                           ;doprnt.c: 499: signed char c;
  2245                           ;doprnt.c: 501: int width;
  2246                           ;doprnt.c: 506: signed char prec;
  2247                           ;doprnt.c: 508: unsigned char flag;
  2248                           ;doprnt.c: 523: union {
  2249                           ;doprnt.c: 524: unsigned long vd;
  2250                           ;doprnt.c: 525: double integ;
  2251                           ;doprnt.c: 526: } tmpval;
  2252                           ;doprnt.c: 528: unsigned int val;
  2253                           ;doprnt.c: 529: unsigned len;
  2254                           ;doprnt.c: 530: const char * cp;
  2255                           ;doprnt.c: 533: *ap = __va_start();
  2256                           
  2257                           ;incstack = 0
  2258  00001C  0E1F               	movlw	low (?_printf+2)
  2259  00001E  6E30               	movwf	printf@ap,c
  2260  000020  0E00               	movlw	high (?_printf+2)
  2261  000022  6E31               	movwf	printf@ap+1,c
  2262                           
  2263                           ;doprnt.c: 536: while(c = *f++) {
  2264  000024  D199               	goto	l4996
  2265  000026                     l4870:
  2266                           
  2267                           ;doprnt.c: 538: if(c != '%')
  2268  000026  0E25               	movlw	37
  2269  000028  1838               	xorwf	printf@c,w,c
  2270  00002A  B4D8               	btfsc	status,2,c
  2271  00002C  D004               	goto	l4874
  2272                           
  2273                           ;doprnt.c: 540: {
  2274                           ;doprnt.c: 541: (putch(c) );
  2275  00002E  5038               	movf	printf@c,w,c
  2276  000030  EC9B  F00C         	call	_putch
  2277                           
  2278                           ;doprnt.c: 542: continue;
  2279  000034  D191               	goto	l4996
  2280  000036                     l4874:
  2281                           
  2282                           ;doprnt.c: 543: }
  2283                           ;doprnt.c: 546: width = 0;
  2284  000036  0E00               	movlw	0
  2285  000038  6E37               	movwf	printf@width+1,c
  2286  00003A  0E00               	movlw	0
  2287  00003C  6E36               	movwf	printf@width,c
  2288                           
  2289                           ;doprnt.c: 548: flag = 0;
  2290  00003E  0E00               	movlw	0
  2291  000040  6E35               	movwf	printf@flag,c
  2292                           
  2293                           ;doprnt.c: 551: switch(*f) {
  2294                           
  2295                           ;doprnt.c: 550: for(;;) {
  2296  000042  D005               	goto	l4880
  2297  000044                     l4876:
  2298                           
  2299                           ;doprnt.c: 580: flag |= 0x04;
  2300  000044  8435               	bsf	printf@flag,2,c
  2301                           
  2302                           ;doprnt.c: 581: f++;
  2303  000046  4A1D               	infsnz	printf@f,f,c
  2304  000048  2A1E               	incf	printf@f+1,f,c
  2305                           
  2306                           ;doprnt.c: 582: continue;
  2307  00004A  D001               	goto	l4880
  2308                           
  2309                           ;doprnt.c: 584: }
  2310  00004C  D00B               	goto	l4882
  2311  00004E                     l4880:
  2312  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  2313  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  2314  000056                     	if	0	;tblptru may be non-zero
  2315  000056                     	endif
  2316  000056                     	if	0	;tblptru may be non-zero
  2317  000056                     	endif
  2318  000056  0008               	tblrd		*
  2319  000058  50F5               	movf	tablat,w,c
  2320                           
  2321                           ; Switch size 1, requested type "space"
  2322                           ; Number of cases is 1, Range of values is 48 to 48
  2323                           ; switch strategies available:
  2324                           ; Name         Instructions Cycles
  2325                           ; simple_byte            4     3 (average)
  2326                           ;	Chosen strategy is simple_byte
  2327  00005A  0A30               	xorlw	48	; case 48
  2328  00005C  B4D8               	btfsc	status,2,c
  2329  00005E  D7F2               	goto	l4876
  2330                           
  2331                           ;doprnt.c: 585: break;
  2332  000060  D001               	goto	l4882
  2333                           
  2334                           ;doprnt.c: 586: }
  2335  000062  D7F5               	goto	l4880
  2336  000064                     l4882:
  2337                           
  2338                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2339  000064  C01D  FFF6         	movff	printf@f,tblptrl
  2340  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  2341  00006C                     	if	0	;tblptru may be non-zero
  2342  00006C                     	endif
  2343  00006C                     	if	0	;tblptru may be non-zero
  2344  00006C                     	endif
  2345  00006C  0008               	tblrd		*
  2346  00006E  50F5               	movf	tablat,w,c
  2347  000070  ECDB  F00B         	call	_isdigit
  2348  000074  A0D8               	btfss	status,0,c
  2349  000076  D03B               	goto	l4898
  2350                           
  2351                           ;doprnt.c: 598: width = 0;
  2352  000078  0E00               	movlw	0
  2353  00007A  6E37               	movwf	printf@width+1,c
  2354  00007C  0E00               	movlw	0
  2355  00007E  6E36               	movwf	printf@width,c
  2356  000080  D000               	goto	l4886
  2357  000082                     l4886:
  2358                           
  2359                           ;doprnt.c: 600: width *= 10;
  2360  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  2361  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2362  00008A  0E00               	movlw	0
  2363  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2364  00008E  0E0A               	movlw	10
  2365  000090  6E13               	movwf	___wmul@multiplicand,c
  2366  000092  ECC7  F00B         	call	___wmul	;wreg free
  2367  000096  C011  F036         	movff	?___wmul,printf@width
  2368  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  2369                           
  2370                           ;doprnt.c: 601: width += *f++ - '0';
  2371  00009E  0ED0               	movlw	208
  2372  0000A0  6E2B               	movwf	??_printf& (0+255),c
  2373  0000A2  0EFF               	movlw	255
  2374  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  2375  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  2376  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2377  0000AE                     	if	0	;tblptru may be non-zero
  2378  0000AE                     	endif
  2379  0000AE                     	if	0	;tblptru may be non-zero
  2380  0000AE                     	endif
  2381  0000AE  0008               	tblrd		*
  2382  0000B0  50F5               	movf	tablat,w,c
  2383  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  2384  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  2385  0000B6  502B               	movf	??_printf,w,c
  2386  0000B8  262D               	addwf	??_printf+2,f,c
  2387  0000BA  502C               	movf	??_printf+1,w,c
  2388  0000BC  222E               	addwfc	??_printf+3,f,c
  2389  0000BE  502D               	movf	??_printf+2,w,c
  2390  0000C0  2636               	addwf	printf@width,f,c
  2391  0000C2  502E               	movf	??_printf+3,w,c
  2392  0000C4  2237               	addwfc	printf@width+1,f,c
  2393  0000C6  4A1D               	infsnz	printf@f,f,c
  2394  0000C8  2A1E               	incf	printf@f+1,f,c
  2395                           
  2396                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2397  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2398  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2399  0000D2                     	if	0	;tblptru may be non-zero
  2400  0000D2                     	endif
  2401  0000D2                     	if	0	;tblptru may be non-zero
  2402  0000D2                     	endif
  2403  0000D2  0008               	tblrd		*
  2404  0000D4  50F5               	movf	tablat,w,c
  2405  0000D6  ECDB  F00B         	call	_isdigit
  2406  0000DA  A0D8               	btfss	status,0,c
  2407  0000DC  D008               	goto	l4898
  2408  0000DE  D7D1               	goto	l4886
  2409                           
  2410                           ;doprnt.c: 608: }
  2411                           ;doprnt.c: 635: switch(c = *f++) {
  2412  0000E0  D006               	goto	l4898
  2413                           
  2414                           ;doprnt.c: 638: goto alldone;
  2415                           
  2416                           ;doprnt.c: 637: case 0:
  2417  0000E2  D148               	goto	l662
  2418                           
  2419                           ;doprnt.c: 698: case 'i':
  2420                           ;doprnt.c: 699: break;
  2421                           
  2422                           ;doprnt.c: 697: case 'd':
  2423  0000E4  D01B               	goto	l625
  2424  0000E6                     l4894:
  2425                           
  2426                           ;doprnt.c: 721: flag |= 0x80;
  2427  0000E6  8E35               	bsf	printf@flag,7,c
  2428                           
  2429                           ;doprnt.c: 723: break;
  2430  0000E8  D019               	goto	l625
  2431                           
  2432                           ;doprnt.c: 813: continue;
  2433                           
  2434                           ;doprnt.c: 802: default:
  2435  0000EA  D136               	goto	l4996
  2436                           
  2437                           ;doprnt.c: 822: }
  2438  0000EC  D017               	goto	l625
  2439  0000EE                     l4898:
  2440  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2441  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2442  0000F6  4A1D               	infsnz	printf@f,f,c
  2443  0000F8  2A1E               	incf	printf@f+1,f,c
  2444  0000FA                     	if	0	;tblptru may be non-zero
  2445  0000FA                     	endif
  2446  0000FA                     	if	0	;tblptru may be non-zero
  2447  0000FA                     	endif
  2448  0000FA  0008               	tblrd		*
  2449  0000FC  CFF5 F038          	movff	tablat,printf@c
  2450  000100  5038               	movf	printf@c,w,c
  2451                           
  2452                           ; Switch size 1, requested type "space"
  2453                           ; Number of cases is 4, Range of values is 0 to 120
  2454                           ; switch strategies available:
  2455                           ; Name         Instructions Cycles
  2456                           ; simple_byte           13     7 (average)
  2457                           ;	Chosen strategy is simple_byte
  2458  000102  0A00               	xorlw	0	; case 0
  2459  000104  B4D8               	btfsc	status,2,c
  2460  000106  D136               	goto	l662
  2461  000108  0A64               	xorlw	100	; case 100
  2462  00010A  B4D8               	btfsc	status,2,c
  2463  00010C  D007               	goto	l625
  2464  00010E  0A0D               	xorlw	13	; case 105
  2465  000110  B4D8               	btfsc	status,2,c
  2466  000112  D004               	goto	l625
  2467  000114  0A11               	xorlw	17	; case 120
  2468  000116  B4D8               	btfsc	status,2,c
  2469  000118  D7E6               	goto	l4894
  2470  00011A  D11E               	goto	l4996
  2471  00011C                     l625:
  2472                           
  2473                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2474  00011C  BE35               	btfsc	printf@flag,7,c
  2475  00011E  D015               	goto	l4910
  2476                           
  2477                           ;doprnt.c: 1253: {
  2478                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2479  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2480  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2481  000128  CFDE F033          	movff	postinc2,printf@val
  2482  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2483  000130  0E02               	movlw	2
  2484  000132  2630               	addwf	printf@ap,f,c
  2485  000134  0E00               	movlw	0
  2486  000136  2231               	addwfc	printf@ap+1,f,c
  2487                           
  2488                           ;doprnt.c: 1261: if((int)val < 0) {
  2489  000138  AE34               	btfss	printf@val+1,7,c
  2490  00013A  D04E               	goto	l4944
  2491                           
  2492                           ;doprnt.c: 1262: flag |= 0x03;
  2493  00013C  0E03               	movlw	3
  2494  00013E  1235               	iorwf	printf@flag,f,c
  2495                           
  2496                           ;doprnt.c: 1263: val = -val;
  2497  000140  6C33               	negf	printf@val,c
  2498  000142  1E34               	comf	printf@val+1,f,c
  2499  000144  B0D8               	btfsc	status,0,c
  2500  000146  2A34               	incf	printf@val+1,f,c
  2501                           
  2502                           ;doprnt.c: 1264: }
  2503                           ;doprnt.c: 1266: }
  2504  000148  D047               	goto	l4944
  2505  00014A                     l4910:
  2506                           
  2507                           ;doprnt.c: 1268: else
  2508                           ;doprnt.c: 1273: {
  2509                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2510  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2511  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2512  000152  CFDE F033          	movff	postinc2,printf@val
  2513  000156  CFDD F034          	movff	postdec2,printf@val+1
  2514  00015A  0E02               	movlw	2
  2515  00015C  2630               	addwf	printf@ap,f,c
  2516  00015E  0E00               	movlw	0
  2517  000160  2231               	addwfc	printf@ap+1,f,c
  2518                           
  2519                           ;doprnt.c: 1287: }
  2520                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2521  000162  D03A               	goto	l4944
  2522  000164                     l4914:
  2523                           
  2524                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2525  000164  0E01               	movlw	1
  2526  000166  6E38               	movwf	printf@c,c
  2527  000168                     l4916:
  2528  000168  0E05               	movlw	5
  2529  00016A  1838               	xorwf	printf@c,w,c
  2530  00016C  B4D8               	btfsc	status,2,c
  2531  00016E  D03D               	goto	l4946
  2532  000170  D001               	goto	l4920
  2533  000172  D03B               	goto	l4946
  2534  000174                     l4920:
  2535                           
  2536                           ;doprnt.c: 1306: if(val < dpowers[c])
  2537  000174  5038               	movf	printf@c,w,c
  2538  000176  0D02               	mullw	2
  2539  000178  0E58               	movlw	low _dpowers
  2540  00017A  24F3               	addwf	prodl,w,c
  2541  00017C  6EF6               	movwf	tblptrl,c
  2542  00017E  0EFF               	movlw	high _dpowers
  2543  000180  20F4               	addwfc	prodh,w,c
  2544  000182  6EF7               	movwf	tblptrh,c
  2545  000184                     	if	0	;There are less than 3 active tblptr bytes
  2546  000184                     	endif
  2547  000184  0009               	tblrd		*+
  2548  000186  50F5               	movf	tablat,w,c
  2549  000188  5C33               	subwf	printf@val,w,c
  2550  00018A  0009               	tblrd		*+
  2551  00018C  50F5               	movf	tablat,w,c
  2552  00018E  5834               	subwfb	printf@val+1,w,c
  2553  000190  A0D8               	btfss	status,0,c
  2554  000192  D02B               	goto	l4946
  2555  000194  D001               	goto	l4924
  2556                           
  2557                           ;doprnt.c: 1307: break;
  2558  000196  D029               	goto	l4946
  2559  000198                     l4924:
  2560  000198  2A38               	incf	printf@c,f,c
  2561  00019A  D7E6               	goto	l4916
  2562                           
  2563                           ;doprnt.c: 1309: break;
  2564  00019C  D026               	goto	l4946
  2565  00019E                     l4928:
  2566                           
  2567                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2568  00019E  0E01               	movlw	1
  2569  0001A0  6E38               	movwf	printf@c,c
  2570  0001A2                     l4930:
  2571  0001A2  0E04               	movlw	4
  2572  0001A4  1838               	xorwf	printf@c,w,c
  2573  0001A6  B4D8               	btfsc	status,2,c
  2574  0001A8  D020               	goto	l4946
  2575  0001AA  D001               	goto	l4934
  2576  0001AC  D01E               	goto	l4946
  2577  0001AE                     l4934:
  2578                           
  2579                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2580  0001AE  5038               	movf	printf@c,w,c
  2581  0001B0  0D02               	mullw	2
  2582  0001B2  0E62               	movlw	low _hexpowers
  2583  0001B4  24F3               	addwf	prodl,w,c
  2584  0001B6  6EF6               	movwf	tblptrl,c
  2585  0001B8  0EFF               	movlw	high _hexpowers
  2586  0001BA  20F4               	addwfc	prodh,w,c
  2587  0001BC  6EF7               	movwf	tblptrh,c
  2588  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2589  0001BE                     	endif
  2590  0001BE  0009               	tblrd		*+
  2591  0001C0  50F5               	movf	tablat,w,c
  2592  0001C2  5C33               	subwf	printf@val,w,c
  2593  0001C4  0009               	tblrd		*+
  2594  0001C6  50F5               	movf	tablat,w,c
  2595  0001C8  5834               	subwfb	printf@val+1,w,c
  2596  0001CA  A0D8               	btfss	status,0,c
  2597  0001CC  D00E               	goto	l4946
  2598  0001CE  D001               	goto	l4938
  2599                           
  2600                           ;doprnt.c: 1318: break;
  2601  0001D0  D00C               	goto	l4946
  2602  0001D2                     l4938:
  2603  0001D2  2A38               	incf	printf@c,f,c
  2604  0001D4  D7E6               	goto	l4930
  2605                           
  2606                           ;doprnt.c: 1336: }
  2607                           
  2608                           ;doprnt.c: 1320: break;
  2609  0001D6  D009               	goto	l4946
  2610  0001D8                     l4944:
  2611  0001D8  5035               	movf	printf@flag,w,c
  2612  0001DA  0B80               	andlw	128
  2613                           
  2614                           ; Switch size 1, requested type "space"
  2615                           ; Number of cases is 2, Range of values is 0 to 128
  2616                           ; switch strategies available:
  2617                           ; Name         Instructions Cycles
  2618                           ; simple_byte            7     4 (average)
  2619                           ;	Chosen strategy is simple_byte
  2620  0001DC  0A00               	xorlw	0	; case 0
  2621  0001DE  B4D8               	btfsc	status,2,c
  2622  0001E0  D7C1               	goto	l4914
  2623  0001E2  0A80               	xorlw	128	; case 128
  2624  0001E4  B4D8               	btfsc	status,2,c
  2625  0001E6  D7DB               	goto	l4928
  2626  0001E8  D000               	goto	l4946
  2627  0001EA                     l4946:
  2628                           
  2629                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2630  0001EA  5036               	movf	printf@width,w,c
  2631  0001EC  1037               	iorwf	printf@width+1,w,c
  2632  0001EE  B4D8               	btfsc	status,2,c
  2633  0001F0  D00A               	goto	l4952
  2634  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2635  0001F6  0E03               	movlw	3
  2636  0001F8  162B               	andwf	??_printf,f,c
  2637  0001FA  B4D8               	btfsc	status,2,c
  2638  0001FC  D004               	goto	l4952
  2639                           
  2640                           ;doprnt.c: 1346: width--;
  2641  0001FE  0636               	decf	printf@width,f,c
  2642  000200  A0D8               	btfss	status,0,c
  2643  000202  0637               	decf	printf@width+1,f,c
  2644  000204  D000               	goto	l4952
  2645  000206                     l4952:
  2646                           
  2647                           ;doprnt.c: 1381: if(width > c)
  2648  000206  0E80               	movlw	128
  2649  000208  BE38               	btfsc	printf@c,7,c
  2650  00020A  0E7F               	movlw	127
  2651  00020C  6E2B               	movwf	??_printf& (0+255),c
  2652  00020E  5036               	movf	printf@width,w,c
  2653  000210  5C38               	subwf	printf@c,w,c
  2654  000212  5037               	movf	printf@width+1,w,c
  2655  000214  0A80               	xorlw	128
  2656  000216  582B               	subwfb	??_printf& (0+255),w,c
  2657  000218  B0D8               	btfsc	status,0,c
  2658  00021A  D007               	goto	l4956
  2659                           
  2660                           ;doprnt.c: 1382: width -= c;
  2661  00021C  5038               	movf	printf@c,w,c
  2662  00021E  5E36               	subwf	printf@width,f,c
  2663  000220  0E00               	movlw	0
  2664  000222  BE38               	btfsc	printf@c,7,c
  2665  000224  0EFF               	movlw	255
  2666  000226  5A37               	subwfb	printf@width+1,f,c
  2667  000228  D005               	goto	l4958
  2668  00022A                     l4956:
  2669                           
  2670                           ;doprnt.c: 1383: else
  2671                           ;doprnt.c: 1384: width = 0;
  2672  00022A  0E00               	movlw	0
  2673  00022C  6E37               	movwf	printf@width+1,c
  2674  00022E  0E00               	movlw	0
  2675  000230  6E36               	movwf	printf@width,c
  2676  000232  D000               	goto	l4958
  2677  000234                     l4958:
  2678                           
  2679                           ;doprnt.c: 1387: if(flag & 0x04) {
  2680  000234  A435               	btfss	printf@flag,2,c
  2681  000236  D01A               	goto	l4970
  2682                           
  2683                           ;doprnt.c: 1392: if(flag & 0x03)
  2684  000238  C035  F02B         	movff	printf@flag,??_printf
  2685  00023C  0E03               	movlw	3
  2686  00023E  162B               	andwf	??_printf,f,c
  2687  000240  B4D8               	btfsc	status,2,c
  2688  000242  D004               	goto	l4964
  2689                           
  2690                           ;doprnt.c: 1393: (putch('-') );
  2691  000244  0E2D               	movlw	45
  2692  000246  EC9B  F00C         	call	_putch
  2693  00024A  D000               	goto	l4964
  2694  00024C                     l4964:
  2695                           
  2696                           ;doprnt.c: 1415: if(width)
  2697  00024C  5036               	movf	printf@width,w,c
  2698  00024E  1037               	iorwf	printf@width+1,w,c
  2699  000250  B4D8               	btfsc	status,2,c
  2700  000252  D026               	goto	l4980
  2701  000254                     l4966:
  2702                           
  2703                           ;doprnt.c: 1417: (putch('0') );
  2704  000254  0E30               	movlw	48
  2705  000256  EC9B  F00C         	call	_putch
  2706                           
  2707                           ;doprnt.c: 1418: while(--width);
  2708  00025A  0636               	decf	printf@width,f,c
  2709  00025C  A0D8               	btfss	status,0,c
  2710  00025E  0637               	decf	printf@width+1,f,c
  2711  000260  5036               	movf	printf@width,w,c
  2712  000262  1037               	iorwf	printf@width+1,w,c
  2713  000264  B4D8               	btfsc	status,2,c
  2714  000266  D01C               	goto	l4980
  2715  000268  D7F5               	goto	l4966
  2716                           
  2717                           ;doprnt.c: 1420: } else
  2718  00026A  D01A               	goto	l4980
  2719  00026C                     l4970:
  2720                           
  2721                           ;doprnt.c: 1422: {
  2722                           ;doprnt.c: 1424: if(width
  2723                           ;doprnt.c: 1428: )
  2724  00026C  5036               	movf	printf@width,w,c
  2725  00026E  1037               	iorwf	printf@width+1,w,c
  2726  000270  B4D8               	btfsc	status,2,c
  2727  000272  D00C               	goto	l4976
  2728  000274                     l4972:
  2729                           
  2730                           ;doprnt.c: 1430: (putch(' ') );
  2731  000274  0E20               	movlw	32
  2732  000276  EC9B  F00C         	call	_putch
  2733                           
  2734                           ;doprnt.c: 1431: while(--width);
  2735  00027A  0636               	decf	printf@width,f,c
  2736  00027C  A0D8               	btfss	status,0,c
  2737  00027E  0637               	decf	printf@width+1,f,c
  2738  000280  5036               	movf	printf@width,w,c
  2739  000282  1037               	iorwf	printf@width+1,w,c
  2740  000284  B4D8               	btfsc	status,2,c
  2741  000286  D002               	goto	l4976
  2742  000288  D7F5               	goto	l4972
  2743  00028A  D000               	goto	l4976
  2744  00028C                     l4976:
  2745                           
  2746                           ;doprnt.c: 1438: if(flag & 0x03)
  2747  00028C  C035  F02B         	movff	printf@flag,??_printf
  2748  000290  0E03               	movlw	3
  2749  000292  162B               	andwf	??_printf,f,c
  2750  000294  B4D8               	btfsc	status,2,c
  2751  000296  D004               	goto	l4980
  2752                           
  2753                           ;doprnt.c: 1439: (putch('-') );
  2754  000298  0E2D               	movlw	45
  2755  00029A  EC9B  F00C         	call	_putch
  2756  00029E  D000               	goto	l4980
  2757  0002A0                     l4980:
  2758                           
  2759                           ;doprnt.c: 1469: }
  2760                           ;doprnt.c: 1472: prec = c;
  2761  0002A0  C038  F032         	movff	printf@c,printf@prec
  2762                           
  2763                           ;doprnt.c: 1474: while(prec--) {
  2764  0002A4  D053               	goto	l4994
  2765                           
  2766                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2767  0002A6  D045               	goto	l4990
  2768  0002A8                     l4982:
  2769                           
  2770                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2771  0002A8  5032               	movf	printf@prec,w,c
  2772  0002AA  0D02               	mullw	2
  2773  0002AC  0E58               	movlw	low _dpowers
  2774  0002AE  24F3               	addwf	prodl,w,c
  2775  0002B0  6EF6               	movwf	tblptrl,c
  2776  0002B2  0EFF               	movlw	high _dpowers
  2777  0002B4  20F4               	addwfc	prodh,w,c
  2778  0002B6  6EF7               	movwf	tblptrh,c
  2779  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2780  0002B8                     	endif
  2781  0002B8  0009               	tblrd		*+
  2782  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2783  0002BE  000A               	tblrd		*-
  2784  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2785  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2786  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2787  0002CC  EC52  F009         	call	___lwdiv	;wreg free
  2788  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2789  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2790  0002D8  0E00               	movlw	0
  2791  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2792  0002DC  0E0A               	movlw	10
  2793  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2794  0002E0  EC7D  F00A         	call	___lwmod	;wreg free
  2795  0002E4  5018               	movf	?___lwmod,w,c
  2796  0002E6  0F30               	addlw	48
  2797  0002E8  6E38               	movwf	printf@c,c
  2798                           
  2799                           ;doprnt.c: 1491: break;
  2800  0002EA  D02C               	goto	l4992
  2801  0002EC                     l4984:
  2802                           
  2803                           ;doprnt.c: 1499: {
  2804                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2805  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2806  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2807  0002F4  5032               	movf	printf@prec,w,c
  2808  0002F6  0D02               	mullw	2
  2809  0002F8  0E62               	movlw	low _hexpowers
  2810  0002FA  24F3               	addwf	prodl,w,c
  2811  0002FC  6EF6               	movwf	tblptrl,c
  2812  0002FE  0EFF               	movlw	high _hexpowers
  2813  000300  20F4               	addwfc	prodh,w,c
  2814  000302  6EF7               	movwf	tblptrh,c
  2815  000304                     	if	0	;There are less than 3 active tblptr bytes
  2816  000304                     	endif
  2817  000304  0009               	tblrd		*+
  2818  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2819  00030A  000A               	tblrd		*-
  2820  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2821  000310  EC52  F009         	call	___lwdiv	;wreg free
  2822  000314  5011               	movf	?___lwdiv,w,c
  2823  000316  0B0F               	andlw	15
  2824  000318  6E2F               	movwf	printf@idx,c
  2825                           
  2826                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2827  00031A  502F               	movf	printf@idx,w,c
  2828  00031C  0D01               	mullw	1
  2829  00031E  0EE5               	movlw	low STR_6
  2830  000320  24F3               	addwf	prodl,w,c
  2831  000322  6EF6               	movwf	tblptrl,c
  2832  000324  0EFF               	movlw	high STR_6
  2833  000326  20F4               	addwfc	prodh,w,c
  2834  000328  6EF7               	movwf	tblptrh,c
  2835  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2836  00032A                     	endif
  2837  00032A  0008               	tblrd		*
  2838  00032C  CFF5 F038          	movff	tablat,printf@c
  2839                           
  2840                           ;doprnt.c: 1523: }
  2841                           
  2842                           ;doprnt.c: 1508: }
  2843                           ;doprnt.c: 1510: break;
  2844  000330  D009               	goto	l4992
  2845  000332                     l4990:
  2846  000332  5035               	movf	printf@flag,w,c
  2847  000334  0B80               	andlw	128
  2848                           
  2849                           ; Switch size 1, requested type "space"
  2850                           ; Number of cases is 2, Range of values is 0 to 128
  2851                           ; switch strategies available:
  2852                           ; Name         Instructions Cycles
  2853                           ; simple_byte            7     4 (average)
  2854                           ;	Chosen strategy is simple_byte
  2855  000336  0A00               	xorlw	0	; case 0
  2856  000338  B4D8               	btfsc	status,2,c
  2857  00033A  D7B6               	goto	l4982
  2858  00033C  0A80               	xorlw	128	; case 128
  2859  00033E  B4D8               	btfsc	status,2,c
  2860  000340  D7D5               	goto	l4984
  2861  000342  D000               	goto	l4992
  2862  000344                     l4992:
  2863                           
  2864                           ;doprnt.c: 1524: (putch(c) );
  2865  000344  5038               	movf	printf@c,w,c
  2866  000346  EC9B  F00C         	call	_putch
  2867  00034A  D000               	goto	l4994
  2868  00034C                     l4994:
  2869  00034C  0632               	decf	printf@prec,f,c
  2870  00034E  2832               	incf	printf@prec,w,c
  2871  000350  B4D8               	btfsc	status,2,c
  2872  000352  D002               	goto	l4996
  2873  000354  D7EE               	goto	l4990
  2874  000356  D000               	goto	l4996
  2875  000358                     l4996:
  2876  000358  C01D  FFF6         	movff	printf@f,tblptrl
  2877  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2878  000360  4A1D               	infsnz	printf@f,f,c
  2879  000362  2A1E               	incf	printf@f+1,f,c
  2880  000364                     	if	0	;tblptru may be non-zero
  2881  000364                     	endif
  2882  000364                     	if	0	;tblptru may be non-zero
  2883  000364                     	endif
  2884  000364  0008               	tblrd		*
  2885  000366  CFF5 F038          	movff	tablat,printf@c
  2886  00036A  5038               	movf	printf@c,w,c
  2887  00036C  B4D8               	btfsc	status,2,c
  2888  00036E  D002               	goto	l662
  2889  000370  D65A               	goto	l4870
  2890  000372  D000               	goto	l662
  2891  000374                     l662:
  2892  000374  0012               	return		;funcret
  2893  000376                     __end_of_printf:
  2894                           	opt stack 0
  2895                           tblptru	equ	0xFF8
  2896                           tblptrh	equ	0xFF7
  2897                           tblptrl	equ	0xFF6
  2898                           tablat	equ	0xFF5
  2899                           prodh	equ	0xFF4
  2900                           prodl	equ	0xFF3
  2901                           intcon	equ	0xFF2
  2902                           intcon2	equ	0xFF1
  2903                           postinc0	equ	0xFEE
  2904                           wreg	equ	0xFE8
  2905                           postdec1	equ	0xFE5
  2906                           fsr1l	equ	0xFE1
  2907                           indf2	equ	0xFDF
  2908                           postinc2	equ	0xFDE
  2909                           postdec2	equ	0xFDD
  2910                           fsr2h	equ	0xFDA
  2911                           fsr2l	equ	0xFD9
  2912                           status	equ	0xFD8
  2913                           
  2914 ;; *************** function _putch *****************
  2915 ;; Defined at:
  2916 ;;		line 115 in file "Lab11p4.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  c               1    wreg     unsigned char 
  2919 ;; Auto vars:     Size  Location     Type
  2920 ;;  c               1   16[COMRAM] unsigned char 
  2921 ;; Return value:  Size  Location     Type
  2922 ;;		None               void
  2923 ;; Registers used:
  2924 ;;		wreg
  2925 ;; Tracked objects:
  2926 ;;		On entry : 0/0
  2927 ;;		On exit  : 0/0
  2928 ;;		Unchanged: 0/0
  2929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2934 ;;Total ram usage:        1 bytes
  2935 ;; Hardware stack levels used:    1
  2936 ;; Hardware stack levels required when called:    3
  2937 ;; This function calls:
  2938 ;;		Nothing
  2939 ;; This function is called by:
  2940 ;;		_printf
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text2
  2945  001936                     __ptext2:
  2946                           	opt stack 0
  2947  001936                     _putch:
  2948                           	opt stack 26
  2949                           
  2950                           ;incstack = 0
  2951                           ;putch@c stored from wreg
  2952  001936  6E11               	movwf	putch@c,c
  2953                           
  2954                           ;Lab11p4.c: 117: while (!TRMT);
  2955  001938  D000               	goto	l553
  2956  00193A                     l553:
  2957  00193A  A2AC               	btfss	4012,1,c	;volatile
  2958  00193C  D7FE               	goto	l553
  2959                           
  2960                           ;Lab11p4.c: 118: TXREG = c;
  2961  00193E  C011  FFAD         	movff	putch@c,4013	;volatile
  2962  001942  0012               	return		;funcret
  2963  001944                     __end_of_putch:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           intcon2	equ	0xFF1
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _isdigit *****************
  2985 ;; Defined at:
  2986 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  c               1    wreg     unsigned char 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  c               1   18[COMRAM] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;		None               void
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        3 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    3
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_printf
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text3
  3015  0017B6                     __ptext3:
  3016                           	opt stack 0
  3017  0017B6                     _isdigit:
  3018                           	opt stack 26
  3019                           
  3020                           ;incstack = 0
  3021                           ;isdigit@c stored from wreg
  3022  0017B6  6E13               	movwf	isdigit@c,c
  3023  0017B8  0E00               	movlw	0
  3024  0017BA  6E12               	movwf	_isdigit$2040,c
  3025  0017BC  0E3A               	movlw	58
  3026  0017BE  6013               	cpfslt	isdigit@c,c
  3027  0017C0  D006               	goto	l4650
  3028  0017C2  0E2F               	movlw	47
  3029  0017C4  6413               	cpfsgt	isdigit@c,c
  3030  0017C6  D003               	goto	l4650
  3031  0017C8  0E01               	movlw	1
  3032  0017CA  6E12               	movwf	_isdigit$2040,c
  3033  0017CC  D000               	goto	l4650
  3034  0017CE                     l4650:
  3035  0017CE  C012  F011         	movff	_isdigit$2040,??_isdigit
  3036  0017D2  3011               	rrcf	??_isdigit,w,c
  3037  0017D4  D000               	goto	l1129
  3038  0017D6                     l1129:
  3039  0017D6  0012               	return		;funcret
  3040  0017D8                     __end_of_isdigit:
  3041                           	opt stack 0
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           prodh	equ	0xFF4
  3047                           prodl	equ	0xFF3
  3048                           intcon	equ	0xFF2
  3049                           intcon2	equ	0xFF1
  3050                           postinc0	equ	0xFEE
  3051                           wreg	equ	0xFE8
  3052                           postdec1	equ	0xFE5
  3053                           fsr1l	equ	0xFE1
  3054                           indf2	equ	0xFDF
  3055                           postinc2	equ	0xFDE
  3056                           postdec2	equ	0xFDD
  3057                           fsr2h	equ	0xFDA
  3058                           fsr2l	equ	0xFD9
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function ___lwmod *****************
  3062 ;; Defined at:
  3063 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  dividend        2   23[COMRAM] unsigned int 
  3066 ;;  divisor         2   25[COMRAM] unsigned int 
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  counter         1   27[COMRAM] unsigned char 
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  2   23[COMRAM] unsigned int 
  3071 ;; Registers used:
  3072 ;;		wreg, status,2, status,0
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3078 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;Total ram usage:        5 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    3
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_printf
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text4
  3093  0014FA                     __ptext4:
  3094                           	opt stack 0
  3095  0014FA                     ___lwmod:
  3096                           	opt stack 26
  3097                           
  3098                           ;incstack = 0
  3099  0014FA  501A               	movf	___lwmod@divisor,w,c
  3100  0014FC  101B               	iorwf	___lwmod@divisor+1,w,c
  3101  0014FE  B4D8               	btfsc	status,2,c
  3102  001500  D01D               	goto	l1231
  3103  001502  0E01               	movlw	1
  3104  001504  6E1C               	movwf	___lwmod@counter,c
  3105  001506  D005               	goto	l4682
  3106  001508                     l4680:
  3107  001508  90D8               	bcf	status,0,c
  3108  00150A  361A               	rlcf	___lwmod@divisor,f,c
  3109  00150C  361B               	rlcf	___lwmod@divisor+1,f,c
  3110  00150E  2A1C               	incf	___lwmod@counter,f,c
  3111  001510  D000               	goto	l4682
  3112  001512                     l4682:
  3113  001512  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3114  001514  D002               	goto	l4684
  3115  001516  D7F8               	goto	l4680
  3116  001518  D000               	goto	l4684
  3117  00151A                     l4684:
  3118  00151A  501A               	movf	___lwmod@divisor,w,c
  3119  00151C  5C18               	subwf	___lwmod@dividend,w,c
  3120  00151E  501B               	movf	___lwmod@divisor+1,w,c
  3121  001520  5819               	subwfb	___lwmod@dividend+1,w,c
  3122  001522  A0D8               	btfss	status,0,c
  3123  001524  D005               	goto	l4688
  3124  001526  501A               	movf	___lwmod@divisor,w,c
  3125  001528  5E18               	subwf	___lwmod@dividend,f,c
  3126  00152A  501B               	movf	___lwmod@divisor+1,w,c
  3127  00152C  5A19               	subwfb	___lwmod@dividend+1,f,c
  3128  00152E  D000               	goto	l4688
  3129  001530                     l4688:
  3130  001530  90D8               	bcf	status,0,c
  3131  001532  321B               	rrcf	___lwmod@divisor+1,f,c
  3132  001534  321A               	rrcf	___lwmod@divisor,f,c
  3133  001536  2E1C               	decfsz	___lwmod@counter,f,c
  3134  001538  D7F0               	goto	l4684
  3135  00153A  D000               	goto	l1231
  3136  00153C                     l1231:
  3137  00153C  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3138  001540  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3139  001544  0012               	return		;funcret
  3140  001546                     __end_of___lwmod:
  3141                           	opt stack 0
  3142                           tblptru	equ	0xFF8
  3143                           tblptrh	equ	0xFF7
  3144                           tblptrl	equ	0xFF6
  3145                           tablat	equ	0xFF5
  3146                           prodh	equ	0xFF4
  3147                           prodl	equ	0xFF3
  3148                           intcon	equ	0xFF2
  3149                           intcon2	equ	0xFF1
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           postdec1	equ	0xFE5
  3153                           fsr1l	equ	0xFE1
  3154                           indf2	equ	0xFDF
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function ___lwdiv *****************
  3162 ;; Defined at:
  3163 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  dividend        2   16[COMRAM] unsigned int 
  3166 ;;  divisor         2   18[COMRAM] unsigned int 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  quotient        2   21[COMRAM] unsigned int 
  3169 ;;  counter         1   20[COMRAM] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  2   16[COMRAM] unsigned int 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3179 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;Total ram usage:        7 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    3
  3186 ;; This function calls:
  3187 ;;		Nothing
  3188 ;; This function is called by:
  3189 ;;		_printf
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text5
  3194  0012A4                     __ptext5:
  3195                           	opt stack 0
  3196  0012A4                     ___lwdiv:
  3197                           	opt stack 26
  3198                           
  3199                           ;incstack = 0
  3200  0012A4  0E00               	movlw	0
  3201  0012A6  6E17               	movwf	___lwdiv@quotient+1,c
  3202  0012A8  0E00               	movlw	0
  3203  0012AA  6E16               	movwf	___lwdiv@quotient,c
  3204  0012AC  5013               	movf	___lwdiv@divisor,w,c
  3205  0012AE  1014               	iorwf	___lwdiv@divisor+1,w,c
  3206  0012B0  B4D8               	btfsc	status,2,c
  3207  0012B2  D021               	goto	l1221
  3208  0012B4  0E01               	movlw	1
  3209  0012B6  6E15               	movwf	___lwdiv@counter,c
  3210  0012B8  D005               	goto	l4662
  3211  0012BA                     l4660:
  3212  0012BA  90D8               	bcf	status,0,c
  3213  0012BC  3613               	rlcf	___lwdiv@divisor,f,c
  3214  0012BE  3614               	rlcf	___lwdiv@divisor+1,f,c
  3215  0012C0  2A15               	incf	___lwdiv@counter,f,c
  3216  0012C2  D000               	goto	l4662
  3217  0012C4                     l4662:
  3218  0012C4  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3219  0012C6  D002               	goto	l4664
  3220  0012C8  D7F8               	goto	l4660
  3221  0012CA  D000               	goto	l4664
  3222  0012CC                     l4664:
  3223  0012CC  90D8               	bcf	status,0,c
  3224  0012CE  3616               	rlcf	___lwdiv@quotient,f,c
  3225  0012D0  3617               	rlcf	___lwdiv@quotient+1,f,c
  3226  0012D2  5013               	movf	___lwdiv@divisor,w,c
  3227  0012D4  5C11               	subwf	___lwdiv@dividend,w,c
  3228  0012D6  5014               	movf	___lwdiv@divisor+1,w,c
  3229  0012D8  5812               	subwfb	___lwdiv@dividend+1,w,c
  3230  0012DA  A0D8               	btfss	status,0,c
  3231  0012DC  D006               	goto	l4672
  3232  0012DE  5013               	movf	___lwdiv@divisor,w,c
  3233  0012E0  5E11               	subwf	___lwdiv@dividend,f,c
  3234  0012E2  5014               	movf	___lwdiv@divisor+1,w,c
  3235  0012E4  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3236  0012E6  8016               	bsf	___lwdiv@quotient,0,c
  3237  0012E8  D000               	goto	l4672
  3238  0012EA                     l4672:
  3239  0012EA  90D8               	bcf	status,0,c
  3240  0012EC  3214               	rrcf	___lwdiv@divisor+1,f,c
  3241  0012EE  3213               	rrcf	___lwdiv@divisor,f,c
  3242  0012F0  2E15               	decfsz	___lwdiv@counter,f,c
  3243  0012F2  D7EC               	goto	l4664
  3244  0012F4  D000               	goto	l1221
  3245  0012F6                     l1221:
  3246  0012F6  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3247  0012FA  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3248  0012FE  0012               	return		;funcret
  3249  001300                     __end_of___lwdiv:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           intcon	equ	0xFF2
  3258                           intcon2	equ	0xFF1
  3259                           postinc0	equ	0xFEE
  3260                           wreg	equ	0xFE8
  3261                           postdec1	equ	0xFE5
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _fillCircle *****************
  3271 ;; Defined at:
  3272 ;;		line 614 in file "ST7735_TFT.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  x0              2   58[COMRAM] int 
  3275 ;;  y0              2   60[COMRAM] int 
  3276 ;;  r               2   62[COMRAM] int 
  3277 ;;  color           2   64[COMRAM] unsigned int 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;		None               void
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3289 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;Total ram usage:        8 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    8
  3296 ;; This function calls:
  3297 ;;		_drawFastVLine
  3298 ;;		_fillCircleHelper
  3299 ;; This function is called by:
  3300 ;;		_main
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text6
  3305  001408                     __ptext6:
  3306                           	opt stack 0
  3307  001408                     _fillCircle:
  3308                           	opt stack 22
  3309                           
  3310                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3311                           
  3312                           ;incstack = 0
  3313  001408  503F               	movf	fillCircle@r,w,c
  3314  00140A  0800               	sublw	0
  3315  00140C  243D               	addwf	fillCircle@y0,w,c
  3316  00140E  6E18               	movwf	drawFastVLine@y,c
  3317  001410  80D8               	bsf	status,0,c
  3318  001412  343F               	rlcf	fillCircle@r,w,c
  3319  001414  6E19               	movwf	drawFastVLine@h,c
  3320  001416  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3321  00141A  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3322  00141E  503B               	movf	fillCircle@x0,w,c
  3323  001420  EC1C  F008         	call	_drawFastVLine
  3324                           
  3325                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3326  001424  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3327  001428  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3328  00142C  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3329  001430  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3330  001434  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3331  001438  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3332  00143C  0E00               	movlw	0
  3333  00143E  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3334  001440  0E03               	movlw	3
  3335  001442  6E29               	movwf	fillCircleHelper@cornername,c
  3336  001444  0E00               	movlw	0
  3337  001446  6E2C               	movwf	fillCircleHelper@delta+1,c
  3338  001448  0E00               	movlw	0
  3339  00144A  6E2B               	movwf	fillCircleHelper@delta,c
  3340  00144C  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3341  001450  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3342  001454  ECFA  F004         	call	_fillCircleHelper	;wreg free
  3343  001458  0012               	return		;funcret
  3344  00145A                     __end_of_fillCircle:
  3345                           	opt stack 0
  3346                           tblptru	equ	0xFF8
  3347                           tblptrh	equ	0xFF7
  3348                           tblptrl	equ	0xFF6
  3349                           tablat	equ	0xFF5
  3350                           prodh	equ	0xFF4
  3351                           prodl	equ	0xFF3
  3352                           intcon	equ	0xFF2
  3353                           intcon2	equ	0xFF1
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           postdec1	equ	0xFE5
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _fillCircleHelper *****************
  3366 ;; Defined at:
  3367 ;;		line 589 in file "ST7735_TFT.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  x0              2   34[COMRAM] int 
  3370 ;;  y0              2   36[COMRAM] int 
  3371 ;;  r               2   38[COMRAM] int 
  3372 ;;  cornername      2   40[COMRAM] unsigned int 
  3373 ;;  delta           2   42[COMRAM] int 
  3374 ;;  color           2   44[COMRAM] unsigned int 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  y               2   56[COMRAM] int 
  3377 ;;  x               2   54[COMRAM] int 
  3378 ;;  f               2   52[COMRAM] int 
  3379 ;;  ddF_y           2   50[COMRAM] int 
  3380 ;;  ddF_x           2   48[COMRAM] int 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;		None               void
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:       24 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    7
  3397 ;; This function calls:
  3398 ;;		_drawFastVLine
  3399 ;; This function is called by:
  3400 ;;		_fillCircle
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text7
  3405  0009F4                     __ptext7:
  3406                           	opt stack 0
  3407  0009F4                     _fillCircleHelper:
  3408                           	opt stack 22
  3409                           
  3410                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3411                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3412                           
  3413                           ;incstack = 0
  3414  0009F4  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3415  0009F8  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3416  0009FC  1E2F               	comf	??_fillCircleHelper,f,c
  3417  0009FE  1E30               	comf	??_fillCircleHelper+1,f,c
  3418  000A00  4A2F               	infsnz	??_fillCircleHelper,f,c
  3419  000A02  2A30               	incf	??_fillCircleHelper+1,f,c
  3420  000A04  0E01               	movlw	1
  3421  000A06  242F               	addwf	??_fillCircleHelper,w,c
  3422  000A08  6E35               	movwf	fillCircleHelper@f,c
  3423  000A0A  0E00               	movlw	0
  3424  000A0C  2030               	addwfc	??_fillCircleHelper+1,w,c
  3425  000A0E  6E36               	movwf	fillCircleHelper@f+1,c
  3426  000A10  0E00               	movlw	0
  3427  000A12  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3428  000A14  0E01               	movlw	1
  3429  000A16  6E31               	movwf	fillCircleHelper@ddF_x,c
  3430  000A18  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3431  000A1C  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3432  000A20  90D8               	bcf	status,0,c
  3433  000A22  362F               	rlcf	??_fillCircleHelper,f,c
  3434  000A24  3630               	rlcf	??_fillCircleHelper+1,f,c
  3435  000A26  1E2F               	comf	??_fillCircleHelper,f,c
  3436  000A28  1E30               	comf	??_fillCircleHelper+1,f,c
  3437  000A2A  4A2F               	infsnz	??_fillCircleHelper,f,c
  3438  000A2C  2A30               	incf	??_fillCircleHelper+1,f,c
  3439  000A2E  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3440  000A32  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3441  000A36  0E00               	movlw	0
  3442  000A38  6E38               	movwf	fillCircleHelper@x+1,c
  3443  000A3A  0E00               	movlw	0
  3444  000A3C  6E37               	movwf	fillCircleHelper@x,c
  3445  000A3E  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3446  000A42  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3447                           
  3448                           ;ST7735_TFT.c: 593: while (x<y) {
  3449  000A46  D067               	goto	l4608
  3450  000A48                     l4588:
  3451                           
  3452                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3453  000A48  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3454  000A4A  D00B               	goto	l366
  3455                           
  3456                           ;ST7735_TFT.c: 595: y--;
  3457  000A4C  0639               	decf	fillCircleHelper@y,f,c
  3458  000A4E  A0D8               	btfss	status,0,c
  3459  000A50  063A               	decf	fillCircleHelper@y+1,f,c
  3460                           
  3461                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3462  000A52  0E02               	movlw	2
  3463  000A54  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3464  000A56  0E00               	movlw	0
  3465  000A58  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3466                           
  3467                           ;ST7735_TFT.c: 597: f += ddF_y;
  3468  000A5A  5033               	movf	fillCircleHelper@ddF_y,w,c
  3469  000A5C  2635               	addwf	fillCircleHelper@f,f,c
  3470  000A5E  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3471  000A60  2236               	addwfc	fillCircleHelper@f+1,f,c
  3472  000A62                     l366:
  3473                           
  3474                           ;ST7735_TFT.c: 598: }
  3475                           ;ST7735_TFT.c: 599: x++;
  3476  000A62  4A37               	infsnz	fillCircleHelper@x,f,c
  3477  000A64  2A38               	incf	fillCircleHelper@x+1,f,c
  3478                           
  3479                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3480  000A66  0E02               	movlw	2
  3481  000A68  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3482  000A6A  0E00               	movlw	0
  3483  000A6C  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3484                           
  3485                           ;ST7735_TFT.c: 601: f += ddF_x;
  3486  000A6E  5031               	movf	fillCircleHelper@ddF_x,w,c
  3487  000A70  2635               	addwf	fillCircleHelper@f,f,c
  3488  000A72  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3489  000A74  2236               	addwfc	fillCircleHelper@f+1,f,c
  3490                           
  3491                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3492  000A76  A029               	btfss	fillCircleHelper@cornername,0,c
  3493  000A78  D025               	goto	l4604
  3494                           
  3495                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3496  000A7A  5039               	movf	fillCircleHelper@y,w,c
  3497  000A7C  0800               	sublw	0
  3498  000A7E  2425               	addwf	fillCircleHelper@y0,w,c
  3499  000A80  6E18               	movwf	drawFastVLine@y,c
  3500  000A82  5039               	movf	fillCircleHelper@y,w,c
  3501  000A84  2439               	addwf	fillCircleHelper@y,w,c
  3502  000A86  242B               	addwf	fillCircleHelper@delta,w,c
  3503  000A88  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3504  000A8A  282F               	incf	??_fillCircleHelper,w,c
  3505  000A8C  6E19               	movwf	drawFastVLine@h,c
  3506  000A8E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3507  000A92  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3508  000A96  5023               	movf	fillCircleHelper@x0,w,c
  3509  000A98  2437               	addwf	fillCircleHelper@x,w,c
  3510  000A9A  EC1C  F008         	call	_drawFastVLine
  3511                           
  3512                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3513  000A9E  5037               	movf	fillCircleHelper@x,w,c
  3514  000AA0  0800               	sublw	0
  3515  000AA2  2425               	addwf	fillCircleHelper@y0,w,c
  3516  000AA4  6E18               	movwf	drawFastVLine@y,c
  3517  000AA6  5037               	movf	fillCircleHelper@x,w,c
  3518  000AA8  2437               	addwf	fillCircleHelper@x,w,c
  3519  000AAA  242B               	addwf	fillCircleHelper@delta,w,c
  3520  000AAC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3521  000AAE  282F               	incf	??_fillCircleHelper,w,c
  3522  000AB0  6E19               	movwf	drawFastVLine@h,c
  3523  000AB2  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3524  000AB6  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3525  000ABA  5023               	movf	fillCircleHelper@x0,w,c
  3526  000ABC  2439               	addwf	fillCircleHelper@y,w,c
  3527  000ABE  EC1C  F008         	call	_drawFastVLine
  3528  000AC2  D000               	goto	l4604
  3529  000AC4                     l4604:
  3530                           
  3531                           ;ST7735_TFT.c: 606: }
  3532                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3533  000AC4  A229               	btfss	fillCircleHelper@cornername,1,c
  3534  000AC6  D027               	goto	l4608
  3535                           
  3536                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3537  000AC8  5039               	movf	fillCircleHelper@y,w,c
  3538  000ACA  0800               	sublw	0
  3539  000ACC  2425               	addwf	fillCircleHelper@y0,w,c
  3540  000ACE  6E18               	movwf	drawFastVLine@y,c
  3541  000AD0  5039               	movf	fillCircleHelper@y,w,c
  3542  000AD2  2439               	addwf	fillCircleHelper@y,w,c
  3543  000AD4  242B               	addwf	fillCircleHelper@delta,w,c
  3544  000AD6  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3545  000AD8  282F               	incf	??_fillCircleHelper,w,c
  3546  000ADA  6E19               	movwf	drawFastVLine@h,c
  3547  000ADC  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3548  000AE0  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3549  000AE4  5037               	movf	fillCircleHelper@x,w,c
  3550  000AE6  0800               	sublw	0
  3551  000AE8  2423               	addwf	fillCircleHelper@x0,w,c
  3552  000AEA  EC1C  F008         	call	_drawFastVLine
  3553                           
  3554                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3555  000AEE  5037               	movf	fillCircleHelper@x,w,c
  3556  000AF0  0800               	sublw	0
  3557  000AF2  2425               	addwf	fillCircleHelper@y0,w,c
  3558  000AF4  6E18               	movwf	drawFastVLine@y,c
  3559  000AF6  5037               	movf	fillCircleHelper@x,w,c
  3560  000AF8  2437               	addwf	fillCircleHelper@x,w,c
  3561  000AFA  242B               	addwf	fillCircleHelper@delta,w,c
  3562  000AFC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3563  000AFE  282F               	incf	??_fillCircleHelper,w,c
  3564  000B00  6E19               	movwf	drawFastVLine@h,c
  3565  000B02  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3566  000B06  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3567  000B0A  5039               	movf	fillCircleHelper@y,w,c
  3568  000B0C  0800               	sublw	0
  3569  000B0E  2423               	addwf	fillCircleHelper@x0,w,c
  3570  000B10  EC1C  F008         	call	_drawFastVLine
  3571  000B14  D000               	goto	l4608
  3572  000B16                     l4608:
  3573  000B16  5039               	movf	fillCircleHelper@y,w,c
  3574  000B18  5C37               	subwf	fillCircleHelper@x,w,c
  3575  000B1A  5038               	movf	fillCircleHelper@x+1,w,c
  3576  000B1C  0A80               	xorlw	128
  3577  000B1E  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3578  000B20  503A               	movf	fillCircleHelper@y+1,w,c
  3579  000B22  0A80               	xorlw	128
  3580  000B24  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3581  000B26  A0D8               	btfss	status,0,c
  3582  000B28  D78F               	goto	l4588
  3583  000B2A  0012               	return		;funcret
  3584  000B2C                     __end_of_fillCircleHelper:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           intcon2	equ	0xFF1
  3594                           postinc0	equ	0xFEE
  3595                           wreg	equ	0xFE8
  3596                           postdec1	equ	0xFE5
  3597                           fsr1l	equ	0xFE1
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           postdec2	equ	0xFDD
  3601                           fsr2h	equ	0xFDA
  3602                           fsr2l	equ	0xFD9
  3603                           status	equ	0xFD8
  3604                           
  3605 ;; *************** function _drawCircle *****************
  3606 ;; Defined at:
  3607 ;;		line 528 in file "ST7735_TFT.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  x0              2   27[COMRAM] int 
  3610 ;;  y0              2   29[COMRAM] int 
  3611 ;;  r               2   31[COMRAM] int 
  3612 ;;  color           2   33[COMRAM] unsigned int 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  y               2   45[COMRAM] int 
  3615 ;;  x               2   43[COMRAM] int 
  3616 ;;  f               2   41[COMRAM] int 
  3617 ;;  ddF_y           2   39[COMRAM] int 
  3618 ;;  ddF_x           2   37[COMRAM] int 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;		None               void
  3621 ;; Registers used:
  3622 ;;		wreg, status,2, status,0, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3628 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;Total ram usage:       20 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    7
  3635 ;; This function calls:
  3636 ;;		_drawPixel
  3637 ;; This function is called by:
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text8
  3643  00059E                     __ptext8:
  3644                           	opt stack 0
  3645  00059E                     _drawCircle:
  3646                           	opt stack 23
  3647                           
  3648                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3649                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3650                           
  3651                           ;incstack = 0
  3652  00059E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3653  0005A2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3654  0005A6  1E24               	comf	??_drawCircle,f,c
  3655  0005A8  1E25               	comf	??_drawCircle+1,f,c
  3656  0005AA  4A24               	infsnz	??_drawCircle,f,c
  3657  0005AC  2A25               	incf	??_drawCircle+1,f,c
  3658  0005AE  0E01               	movlw	1
  3659  0005B0  2424               	addwf	??_drawCircle,w,c
  3660  0005B2  6E2A               	movwf	drawCircle@f,c
  3661  0005B4  0E00               	movlw	0
  3662  0005B6  2025               	addwfc	??_drawCircle+1,w,c
  3663  0005B8  6E2B               	movwf	drawCircle@f+1,c
  3664  0005BA  0E00               	movlw	0
  3665  0005BC  6E27               	movwf	drawCircle@ddF_x+1,c
  3666  0005BE  0E01               	movlw	1
  3667  0005C0  6E26               	movwf	drawCircle@ddF_x,c
  3668  0005C2  C020  F024         	movff	drawCircle@r,??_drawCircle
  3669  0005C6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3670  0005CA  90D8               	bcf	status,0,c
  3671  0005CC  3624               	rlcf	??_drawCircle,f,c
  3672  0005CE  3625               	rlcf	??_drawCircle+1,f,c
  3673  0005D0  1E24               	comf	??_drawCircle,f,c
  3674  0005D2  1E25               	comf	??_drawCircle+1,f,c
  3675  0005D4  4A24               	infsnz	??_drawCircle,f,c
  3676  0005D6  2A25               	incf	??_drawCircle+1,f,c
  3677  0005D8  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3678  0005DC  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3679  0005E0  0E00               	movlw	0
  3680  0005E2  6E2D               	movwf	drawCircle@x+1,c
  3681  0005E4  0E00               	movlw	0
  3682  0005E6  6E2C               	movwf	drawCircle@x,c
  3683  0005E8  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3684  0005EC  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3685                           
  3686                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3687  0005F0  501E               	movf	drawCircle@y0,w,c
  3688  0005F2  2420               	addwf	drawCircle@r,w,c
  3689  0005F4  6E18               	movwf	drawPixel@y,c
  3690  0005F6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3691  0005FA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3692  0005FE  501C               	movf	drawCircle@x0,w,c
  3693  000600  EC82  F00B         	call	_drawPixel
  3694                           
  3695                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3696  000604  5020               	movf	drawCircle@r,w,c
  3697  000606  0800               	sublw	0
  3698  000608  241E               	addwf	drawCircle@y0,w,c
  3699  00060A  6E18               	movwf	drawPixel@y,c
  3700  00060C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3701  000610  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3702  000614  501C               	movf	drawCircle@x0,w,c
  3703  000616  EC82  F00B         	call	_drawPixel
  3704                           
  3705                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3706  00061A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3707  00061E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3708  000622  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3709  000626  501C               	movf	drawCircle@x0,w,c
  3710  000628  2420               	addwf	drawCircle@r,w,c
  3711  00062A  EC82  F00B         	call	_drawPixel
  3712                           
  3713                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3714  00062E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3715  000632  C022  F019         	movff	drawCircle@color,drawPixel@color
  3716  000636  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3717  00063A  5020               	movf	drawCircle@r,w,c
  3718  00063C  0800               	sublw	0
  3719  00063E  241C               	addwf	drawCircle@x0,w,c
  3720  000640  EC82  F00B         	call	_drawPixel
  3721                           
  3722                           ;ST7735_TFT.c: 536: while (x < y) {
  3723  000644  D078               	goto	l4800
  3724  000646                     l4772:
  3725                           
  3726                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3727  000646  BE2B               	btfsc	drawCircle@f+1,7,c
  3728  000648  D00B               	goto	l348
  3729                           
  3730                           ;ST7735_TFT.c: 538: y--;
  3731  00064A  062E               	decf	drawCircle@y,f,c
  3732  00064C  A0D8               	btfss	status,0,c
  3733  00064E  062F               	decf	drawCircle@y+1,f,c
  3734                           
  3735                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3736  000650  0E02               	movlw	2
  3737  000652  2628               	addwf	drawCircle@ddF_y,f,c
  3738  000654  0E00               	movlw	0
  3739  000656  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3740                           
  3741                           ;ST7735_TFT.c: 540: f += ddF_y;
  3742  000658  5028               	movf	drawCircle@ddF_y,w,c
  3743  00065A  262A               	addwf	drawCircle@f,f,c
  3744  00065C  5029               	movf	drawCircle@ddF_y+1,w,c
  3745  00065E  222B               	addwfc	drawCircle@f+1,f,c
  3746  000660                     l348:
  3747                           
  3748                           ;ST7735_TFT.c: 541: }
  3749                           ;ST7735_TFT.c: 542: x++;
  3750  000660  4A2C               	infsnz	drawCircle@x,f,c
  3751  000662  2A2D               	incf	drawCircle@x+1,f,c
  3752                           
  3753                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3754  000664  0E02               	movlw	2
  3755  000666  2626               	addwf	drawCircle@ddF_x,f,c
  3756  000668  0E00               	movlw	0
  3757  00066A  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3758                           
  3759                           ;ST7735_TFT.c: 544: f += ddF_x;
  3760  00066C  5026               	movf	drawCircle@ddF_x,w,c
  3761  00066E  262A               	addwf	drawCircle@f,f,c
  3762  000670  5027               	movf	drawCircle@ddF_x+1,w,c
  3763  000672  222B               	addwfc	drawCircle@f+1,f,c
  3764                           
  3765                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3766  000674  501E               	movf	drawCircle@y0,w,c
  3767  000676  242E               	addwf	drawCircle@y,w,c
  3768  000678  6E18               	movwf	drawPixel@y,c
  3769  00067A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3770  00067E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3771  000682  501C               	movf	drawCircle@x0,w,c
  3772  000684  242C               	addwf	drawCircle@x,w,c
  3773  000686  EC82  F00B         	call	_drawPixel
  3774                           
  3775                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3776  00068A  501E               	movf	drawCircle@y0,w,c
  3777  00068C  242E               	addwf	drawCircle@y,w,c
  3778  00068E  6E18               	movwf	drawPixel@y,c
  3779  000690  C022  F019         	movff	drawCircle@color,drawPixel@color
  3780  000694  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3781  000698  502C               	movf	drawCircle@x,w,c
  3782  00069A  0800               	sublw	0
  3783  00069C  241C               	addwf	drawCircle@x0,w,c
  3784  00069E  EC82  F00B         	call	_drawPixel
  3785                           
  3786                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3787  0006A2  502E               	movf	drawCircle@y,w,c
  3788  0006A4  0800               	sublw	0
  3789  0006A6  241E               	addwf	drawCircle@y0,w,c
  3790  0006A8  6E18               	movwf	drawPixel@y,c
  3791  0006AA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3792  0006AE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3793  0006B2  501C               	movf	drawCircle@x0,w,c
  3794  0006B4  242C               	addwf	drawCircle@x,w,c
  3795  0006B6  EC82  F00B         	call	_drawPixel
  3796                           
  3797                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3798  0006BA  502E               	movf	drawCircle@y,w,c
  3799  0006BC  0800               	sublw	0
  3800  0006BE  241E               	addwf	drawCircle@y0,w,c
  3801  0006C0  6E18               	movwf	drawPixel@y,c
  3802  0006C2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3803  0006C6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3804  0006CA  502C               	movf	drawCircle@x,w,c
  3805  0006CC  0800               	sublw	0
  3806  0006CE  241C               	addwf	drawCircle@x0,w,c
  3807  0006D0  EC82  F00B         	call	_drawPixel
  3808                           
  3809                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3810  0006D4  501E               	movf	drawCircle@y0,w,c
  3811  0006D6  242C               	addwf	drawCircle@x,w,c
  3812  0006D8  6E18               	movwf	drawPixel@y,c
  3813  0006DA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3814  0006DE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3815  0006E2  501C               	movf	drawCircle@x0,w,c
  3816  0006E4  242E               	addwf	drawCircle@y,w,c
  3817  0006E6  EC82  F00B         	call	_drawPixel
  3818                           
  3819                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3820  0006EA  501E               	movf	drawCircle@y0,w,c
  3821  0006EC  242C               	addwf	drawCircle@x,w,c
  3822  0006EE  6E18               	movwf	drawPixel@y,c
  3823  0006F0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3824  0006F4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3825  0006F8  502E               	movf	drawCircle@y,w,c
  3826  0006FA  0800               	sublw	0
  3827  0006FC  241C               	addwf	drawCircle@x0,w,c
  3828  0006FE  EC82  F00B         	call	_drawPixel
  3829                           
  3830                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3831  000702  502C               	movf	drawCircle@x,w,c
  3832  000704  0800               	sublw	0
  3833  000706  241E               	addwf	drawCircle@y0,w,c
  3834  000708  6E18               	movwf	drawPixel@y,c
  3835  00070A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3836  00070E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3837  000712  501C               	movf	drawCircle@x0,w,c
  3838  000714  242E               	addwf	drawCircle@y,w,c
  3839  000716  EC82  F00B         	call	_drawPixel
  3840                           
  3841                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3842  00071A  502C               	movf	drawCircle@x,w,c
  3843  00071C  0800               	sublw	0
  3844  00071E  241E               	addwf	drawCircle@y0,w,c
  3845  000720  6E18               	movwf	drawPixel@y,c
  3846  000722  C022  F019         	movff	drawCircle@color,drawPixel@color
  3847  000726  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3848  00072A  502E               	movf	drawCircle@y,w,c
  3849  00072C  0800               	sublw	0
  3850  00072E  241C               	addwf	drawCircle@x0,w,c
  3851  000730  EC82  F00B         	call	_drawPixel
  3852  000734  D000               	goto	l4800
  3853  000736                     l4800:
  3854  000736  502E               	movf	drawCircle@y,w,c
  3855  000738  5C2C               	subwf	drawCircle@x,w,c
  3856  00073A  502D               	movf	drawCircle@x+1,w,c
  3857  00073C  0A80               	xorlw	128
  3858  00073E  6E24               	movwf	??_drawCircle& (0+255),c
  3859  000740  502F               	movf	drawCircle@y+1,w,c
  3860  000742  0A80               	xorlw	128
  3861  000744  5824               	subwfb	??_drawCircle& (0+255),w,c
  3862  000746  A0D8               	btfss	status,0,c
  3863  000748  D77E               	goto	l4772
  3864  00074A  0012               	return		;funcret
  3865  00074C                     __end_of_drawCircle:
  3866                           	opt stack 0
  3867                           tblptru	equ	0xFF8
  3868                           tblptrh	equ	0xFF7
  3869                           tblptrl	equ	0xFF6
  3870                           tablat	equ	0xFF5
  3871                           prodh	equ	0xFF4
  3872                           prodl	equ	0xFF3
  3873                           intcon	equ	0xFF2
  3874                           intcon2	equ	0xFF1
  3875                           postinc0	equ	0xFEE
  3876                           wreg	equ	0xFE8
  3877                           postdec1	equ	0xFE5
  3878                           fsr1l	equ	0xFE1
  3879                           indf2	equ	0xFDF
  3880                           postinc2	equ	0xFDE
  3881                           postdec2	equ	0xFDD
  3882                           fsr2h	equ	0xFDA
  3883                           fsr2l	equ	0xFD9
  3884                           status	equ	0xFD8
  3885                           
  3886 ;; *************** function ___awdiv *****************
  3887 ;; Defined at:
  3888 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  dividend        2   22[COMRAM] int 
  3891 ;;  divisor         2   24[COMRAM] int 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  quotient        2   28[COMRAM] int 
  3894 ;;  sign            1   27[COMRAM] unsigned char 
  3895 ;;  counter         1   26[COMRAM] unsigned char 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  2   22[COMRAM] int 
  3898 ;; Registers used:
  3899 ;;		wreg, status,2, status,0
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3905 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;Total ram usage:        8 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    3
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_main
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text9
  3920  000F14                     __ptext9:
  3921                           	opt stack 0
  3922  000F14                     ___awdiv:
  3923                           	opt stack 27
  3924                           
  3925                           ;incstack = 0
  3926  000F14  0E00               	movlw	0
  3927  000F16  6E1C               	movwf	___awdiv@sign,c
  3928  000F18  AE1A               	btfss	___awdiv@divisor+1,7,c
  3929  000F1A  D007               	goto	l5012
  3930  000F1C  6C19               	negf	___awdiv@divisor,c
  3931  000F1E  1E1A               	comf	___awdiv@divisor+1,f,c
  3932  000F20  B0D8               	btfsc	status,0,c
  3933  000F22  2A1A               	incf	___awdiv@divisor+1,f,c
  3934  000F24  0E01               	movlw	1
  3935  000F26  6E1C               	movwf	___awdiv@sign,c
  3936  000F28  D000               	goto	l5012
  3937  000F2A                     l5012:
  3938  000F2A  AE18               	btfss	___awdiv@dividend+1,7,c
  3939  000F2C  D007               	goto	l5018
  3940  000F2E  6C17               	negf	___awdiv@dividend,c
  3941  000F30  1E18               	comf	___awdiv@dividend+1,f,c
  3942  000F32  B0D8               	btfsc	status,0,c
  3943  000F34  2A18               	incf	___awdiv@dividend+1,f,c
  3944  000F36  0E01               	movlw	1
  3945  000F38  1A1C               	xorwf	___awdiv@sign,f,c
  3946  000F3A  D000               	goto	l5018
  3947  000F3C                     l5018:
  3948  000F3C  0E00               	movlw	0
  3949  000F3E  6E1E               	movwf	___awdiv@quotient+1,c
  3950  000F40  0E00               	movlw	0
  3951  000F42  6E1D               	movwf	___awdiv@quotient,c
  3952  000F44  5019               	movf	___awdiv@divisor,w,c
  3953  000F46  101A               	iorwf	___awdiv@divisor+1,w,c
  3954  000F48  B4D8               	btfsc	status,2,c
  3955  000F4A  D021               	goto	l5040
  3956  000F4C  0E01               	movlw	1
  3957  000F4E  6E1B               	movwf	___awdiv@counter,c
  3958  000F50  D005               	goto	l5026
  3959  000F52                     l5024:
  3960  000F52  90D8               	bcf	status,0,c
  3961  000F54  3619               	rlcf	___awdiv@divisor,f,c
  3962  000F56  361A               	rlcf	___awdiv@divisor+1,f,c
  3963  000F58  2A1B               	incf	___awdiv@counter,f,c
  3964  000F5A  D000               	goto	l5026
  3965  000F5C                     l5026:
  3966  000F5C  BE1A               	btfsc	___awdiv@divisor+1,7,c
  3967  000F5E  D002               	goto	l5028
  3968  000F60  D7F8               	goto	l5024
  3969  000F62  D000               	goto	l5028
  3970  000F64                     l5028:
  3971  000F64  90D8               	bcf	status,0,c
  3972  000F66  361D               	rlcf	___awdiv@quotient,f,c
  3973  000F68  361E               	rlcf	___awdiv@quotient+1,f,c
  3974  000F6A  5019               	movf	___awdiv@divisor,w,c
  3975  000F6C  5C17               	subwf	___awdiv@dividend,w,c
  3976  000F6E  501A               	movf	___awdiv@divisor+1,w,c
  3977  000F70  5818               	subwfb	___awdiv@dividend+1,w,c
  3978  000F72  A0D8               	btfss	status,0,c
  3979  000F74  D006               	goto	l5036
  3980  000F76  5019               	movf	___awdiv@divisor,w,c
  3981  000F78  5E17               	subwf	___awdiv@dividend,f,c
  3982  000F7A  501A               	movf	___awdiv@divisor+1,w,c
  3983  000F7C  5A18               	subwfb	___awdiv@dividend+1,f,c
  3984  000F7E  801D               	bsf	___awdiv@quotient,0,c
  3985  000F80  D000               	goto	l5036
  3986  000F82                     l5036:
  3987  000F82  90D8               	bcf	status,0,c
  3988  000F84  321A               	rrcf	___awdiv@divisor+1,f,c
  3989  000F86  3219               	rrcf	___awdiv@divisor,f,c
  3990  000F88  2E1B               	decfsz	___awdiv@counter,f,c
  3991  000F8A  D7EC               	goto	l5028
  3992  000F8C  D000               	goto	l5040
  3993  000F8E                     l5040:
  3994  000F8E  501C               	movf	___awdiv@sign,w,c
  3995  000F90  B4D8               	btfsc	status,2,c
  3996  000F92  D005               	goto	l5044
  3997  000F94  6C1D               	negf	___awdiv@quotient,c
  3998  000F96  1E1E               	comf	___awdiv@quotient+1,f,c
  3999  000F98  B0D8               	btfsc	status,0,c
  4000  000F9A  2A1E               	incf	___awdiv@quotient+1,f,c
  4001  000F9C  D000               	goto	l5044
  4002  000F9E                     l5044:
  4003  000F9E  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4004  000FA2  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4005  000FA6  D000               	goto	l891
  4006  000FA8                     l891:
  4007  000FA8  0012               	return		;funcret
  4008  000FAA                     __end_of___awdiv:
  4009                           	opt stack 0
  4010                           tblptru	equ	0xFF8
  4011                           tblptrh	equ	0xFF7
  4012                           tblptrl	equ	0xFF6
  4013                           tablat	equ	0xFF5
  4014                           prodh	equ	0xFF4
  4015                           prodl	equ	0xFF3
  4016                           intcon	equ	0xFF2
  4017                           intcon2	equ	0xFF1
  4018                           postinc0	equ	0xFEE
  4019                           wreg	equ	0xFE8
  4020                           postdec1	equ	0xFE5
  4021                           fsr1l	equ	0xFE1
  4022                           indf2	equ	0xFDF
  4023                           postinc2	equ	0xFDE
  4024                           postdec2	equ	0xFDD
  4025                           fsr2h	equ	0xFDA
  4026                           fsr2l	equ	0xFD9
  4027                           status	equ	0xFD8
  4028                           
  4029 ;; *************** function _Wait_Half_Second *****************
  4030 ;; Defined at:
  4031 ;;		line 254 in file "Lab11p4.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;		None
  4036 ;; Return value:  Size  Location     Type
  4037 ;;		None               void
  4038 ;; Registers used:
  4039 ;;		wreg, status,2
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;Total ram usage:        0 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    3
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_main
  4056 ;;		_Wait_One_Sec
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text10
  4061  001832                     __ptext10:
  4062                           	opt stack 0
  4063  001832                     _Wait_Half_Second:
  4064                           	opt stack 27
  4065                           
  4066                           ;Lab11p4.c: 256: T0CON = 0x03;
  4067                           
  4068                           ;incstack = 0
  4069  001832  0E03               	movlw	3
  4070  001834  6ED5               	movwf	4053,c	;volatile
  4071                           
  4072                           ;Lab11p4.c: 257: TMR0L = 0xDB;
  4073  001836  0EDB               	movlw	219
  4074  001838  6ED6               	movwf	4054,c	;volatile
  4075                           
  4076                           ;Lab11p4.c: 258: TMR0H = 0x0B;
  4077  00183A  0E0B               	movlw	11
  4078  00183C  6ED7               	movwf	4055,c	;volatile
  4079                           
  4080                           ;Lab11p4.c: 259: INTCONbits.TMR0IF = 0;
  4081  00183E  94F2               	bcf	intcon,2,c	;volatile
  4082                           
  4083                           ;Lab11p4.c: 260: T0CONbits.TMR0ON = 1;
  4084  001840  8ED5               	bsf	4053,7,c	;volatile
  4085                           
  4086                           ;Lab11p4.c: 261: while (INTCONbits.TMR0IF == 0);
  4087  001842  D000               	goto	l590
  4088  001844                     l590:
  4089  001844  A4F2               	btfss	intcon,2,c	;volatile
  4090  001846  D7FE               	goto	l590
  4091                           
  4092                           ;Lab11p4.c: 262: T0CONbits.TMR0ON = 0;
  4093  001848  9ED5               	bcf	4053,7,c	;volatile
  4094  00184A  0012               	return		;funcret
  4095  00184C                     __end_of_Wait_Half_Second:
  4096                           	opt stack 0
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           intcon2	equ	0xFF1
  4105                           postinc0	equ	0xFEE
  4106                           wreg	equ	0xFE8
  4107                           postdec1	equ	0xFE5
  4108                           fsr1l	equ	0xFE1
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _Initialize_Screen *****************
  4117 ;; Defined at:
  4118 ;;		line 239 in file "Lab11p4.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;		None
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;		None               void
  4125 ;; Registers used:
  4126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;Total ram usage:        0 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:   10
  4139 ;; This function calls:
  4140 ;;		_LCD_Reset
  4141 ;;		_TFT_GreenTab_Initialize
  4142 ;;		_drawtext
  4143 ;;		_fillScreen
  4144 ;;		_strcpy
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text11
  4151  000FAA                     __ptext11:
  4152                           	opt stack 0
  4153  000FAA                     _Initialize_Screen:
  4154                           	opt stack 20
  4155                           
  4156                           ;Lab11p4.c: 241: LCD_Reset();
  4157                           
  4158                           ;incstack = 0
  4159  000FAA  EC5E  F00C         	call	_LCD_Reset	;wreg free
  4160                           
  4161                           ;Lab11p4.c: 242: TFT_GreenTab_Initialize();
  4162  000FAE  ECB2  F00B         	call	_TFT_GreenTab_Initialize	;wreg free
  4163                           
  4164                           ;Lab11p4.c: 243: fillScreen(0x0000);
  4165  000FB2  0E00               	movlw	0
  4166  000FB4  6E25               	movwf	fillScreen@color+1,c
  4167  000FB6  0E00               	movlw	0
  4168  000FB8  6E24               	movwf	fillScreen@color,c
  4169  000FBA  EC0B  F00C         	call	_fillScreen	;wreg free
  4170                           
  4171                           ;Lab11p4.c: 246: txt = buffer;
  4172  000FBE  0ED4               	movlw	low _buffer
  4173  000FC0  6E4E               	movwf	_txt,c
  4174  000FC2  0E00               	movlw	high _buffer
  4175  000FC4  6E4F               	movwf	_txt+1,c
  4176                           
  4177                           ;Lab11p4.c: 247: strcpy(txt, "ECE3301L Spring 22-S1");
  4178  000FC6  C04E  F011         	movff	_txt,strcpy@to
  4179  000FCA  C04F  F012         	movff	_txt+1,strcpy@to+1
  4180  000FCE  0ECF               	movlw	low STR_4
  4181  000FD0  6E13               	movwf	strcpy@from,c
  4182  000FD2  0EFF               	movlw	high STR_4
  4183  000FD4  6E14               	movwf	strcpy@from+1,c
  4184  000FD6  EC69  F00B         	call	_strcpy	;wreg free
  4185                           
  4186                           ;Lab11p4.c: 248: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4187  000FDA  0E02               	movlw	2
  4188  000FDC  6E39               	movwf	drawtext@y,c
  4189  000FDE  C04E  F03A         	movff	_txt,drawtext@_text
  4190  000FE2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4191  000FE6  0EFF               	movlw	255
  4192  000FE8  6E3D               	movwf	drawtext@color+1,c
  4193  000FEA  683C               	setf	drawtext@color,c
  4194  000FEC  0E00               	movlw	0
  4195  000FEE  6E3F               	movwf	drawtext@bg+1,c
  4196  000FF0  0E00               	movlw	0
  4197  000FF2  6E3E               	movwf	drawtext@bg,c
  4198  000FF4  0E01               	movlw	1
  4199  000FF6  6E40               	movwf	drawtext@size,c
  4200  000FF8  0E02               	movlw	2
  4201  000FFA  EC1E  F006         	call	_drawtext
  4202                           
  4203                           ;Lab11p4.c: 250: strcpy(txt, "LAB 11 ");
  4204  000FFE  C04E  F011         	movff	_txt,strcpy@to
  4205  001002  C04F  F012         	movff	_txt+1,strcpy@to+1
  4206  001006  0EF6               	movlw	low STR_5
  4207  001008  6E13               	movwf	strcpy@from,c
  4208  00100A  0EFF               	movlw	high STR_5
  4209  00100C  6E14               	movwf	strcpy@from+1,c
  4210  00100E  EC69  F00B         	call	_strcpy	;wreg free
  4211                           
  4212                           ;Lab11p4.c: 251: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4213  001012  0E0A               	movlw	10
  4214  001014  6E39               	movwf	drawtext@y,c
  4215  001016  C04E  F03A         	movff	_txt,drawtext@_text
  4216  00101A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4217  00101E  0EFF               	movlw	255
  4218  001020  6E3D               	movwf	drawtext@color+1,c
  4219  001022  683C               	setf	drawtext@color,c
  4220  001024  0E00               	movlw	0
  4221  001026  6E3F               	movwf	drawtext@bg+1,c
  4222  001028  0E00               	movlw	0
  4223  00102A  6E3E               	movwf	drawtext@bg,c
  4224  00102C  0E01               	movlw	1
  4225  00102E  6E40               	movwf	drawtext@size,c
  4226  001030  0E32               	movlw	50
  4227  001032  EC1E  F006         	call	_drawtext
  4228  001036  0012               	return		;funcret
  4229  001038                     __end_of_Initialize_Screen:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           tblptrh	equ	0xFF7
  4233                           tblptrl	equ	0xFF6
  4234                           tablat	equ	0xFF5
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           intcon	equ	0xFF2
  4238                           intcon2	equ	0xFF1
  4239                           postinc0	equ	0xFEE
  4240                           wreg	equ	0xFE8
  4241                           postdec1	equ	0xFE5
  4242                           fsr1l	equ	0xFE1
  4243                           indf2	equ	0xFDF
  4244                           postinc2	equ	0xFDE
  4245                           postdec2	equ	0xFDD
  4246                           fsr2h	equ	0xFDA
  4247                           fsr2l	equ	0xFD9
  4248                           status	equ	0xFD8
  4249                           
  4250 ;; *************** function _strcpy *****************
  4251 ;; Defined at:
  4252 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;  to              2   16[COMRAM] PTR unsigned char 
  4255 ;;		 -> NULL(0), buffer(31), 
  4256 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4257 ;;		 -> STR_5(8), STR_4(22), 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4260 ;;		 -> NULL(0), buffer(31), 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  2   16[COMRAM] PTR unsigned char 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4270 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;Total ram usage:        6 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    3
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_Initialize_Screen
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           	psect	text12
  4285  0016D2                     __ptext12:
  4286                           	opt stack 0
  4287  0016D2                     _strcpy:
  4288                           	opt stack 26
  4289                           
  4290                           ;incstack = 0
  4291  0016D2  C011  F015         	movff	strcpy@to,strcpy@cp
  4292  0016D6  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4293  0016DA  D005               	goto	l4640
  4294  0016DC                     l4638:
  4295  0016DC  4A15               	infsnz	strcpy@cp,f,c
  4296  0016DE  2A16               	incf	strcpy@cp+1,f,c
  4297  0016E0  4A13               	infsnz	strcpy@from,f,c
  4298  0016E2  2A14               	incf	strcpy@from+1,f,c
  4299  0016E4  D000               	goto	l4640
  4300  0016E6                     l4640:
  4301  0016E6  C013  FFF6         	movff	strcpy@from,tblptrl
  4302  0016EA  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4303  0016EE                     	if	0	;tblptru may be non-zero
  4304  0016EE                     	endif
  4305  0016EE                     	if	0	;tblptru may be non-zero
  4306  0016EE                     	endif
  4307  0016EE  C015  FFD9         	movff	strcpy@cp,fsr2l
  4308  0016F2  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4309  0016F6  0008               	tblrd		*
  4310  0016F8  CFF5 FFDF          	movff	tablat,indf2
  4311  0016FC  50DF               	movf	indf2,w,c
  4312  0016FE  A4D8               	btfss	status,2,c
  4313  001700  D7ED               	goto	l4638
  4314                           
  4315                           ;	Return value of _strcpy is never used
  4316  001702  0012               	return		;funcret
  4317  001704                     __end_of_strcpy:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           intcon2	equ	0xFF1
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           postdec1	equ	0xFE5
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _fillScreen *****************
  4339 ;; Defined at:
  4340 ;;		line 619 in file "ST7735_TFT.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  color           2   35[COMRAM] unsigned int 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;		None               void
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;Total ram usage:        2 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    7
  4361 ;; This function calls:
  4362 ;;		_fillRectangle
  4363 ;; This function is called by:
  4364 ;;		_Initialize_Screen
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text13
  4369  001816                     __ptext13:
  4370                           	opt stack 0
  4371  001816                     _fillScreen:
  4372                           	opt stack 22
  4373                           
  4374                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4375                           
  4376                           ;incstack = 0
  4377  001816  0E00               	movlw	0
  4378  001818  6E18               	movwf	fillRectangle@y,c
  4379  00181A  0E80               	movlw	128
  4380  00181C  6E19               	movwf	fillRectangle@w,c
  4381  00181E  0EA0               	movlw	160
  4382  001820  6E1A               	movwf	fillRectangle@h,c
  4383  001822  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4384  001826  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4385  00182A  0E00               	movlw	0
  4386  00182C  EC1C  F007         	call	_fillRectangle
  4387  001830  0012               	return		;funcret
  4388  001832                     __end_of_fillScreen:
  4389                           	opt stack 0
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           intcon	equ	0xFF2
  4397                           intcon2	equ	0xFF1
  4398                           postinc0	equ	0xFEE
  4399                           wreg	equ	0xFE8
  4400                           postdec1	equ	0xFE5
  4401                           fsr1l	equ	0xFE1
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           postdec2	equ	0xFDD
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _fillRectangle *****************
  4410 ;; Defined at:
  4411 ;;		line 503 in file "ST7735_TFT.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  x               1    wreg     unsigned char 
  4414 ;;  y               1   23[COMRAM] unsigned char 
  4415 ;;  w               1   24[COMRAM] unsigned char 
  4416 ;;  h               1   25[COMRAM] unsigned char 
  4417 ;;  color           2   26[COMRAM] unsigned int 
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;  x               1   34[COMRAM] unsigned char 
  4420 ;;  lo              1   33[COMRAM] unsigned char 
  4421 ;;  hi              1   32[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;		None               void
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4431 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;Total ram usage:       12 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    6
  4438 ;; This function calls:
  4439 ;;		_setAddrWindow
  4440 ;;		_spiwrite
  4441 ;; This function is called by:
  4442 ;;		_fillScreen
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text14
  4447  000E38                     __ptext14:
  4448                           	opt stack 0
  4449  000E38                     _fillRectangle:
  4450                           	opt stack 22
  4451                           
  4452                           ;incstack = 0
  4453                           ;fillRectangle@x stored from wreg
  4454  000E38  6E23               	movwf	fillRectangle@x,c
  4455                           
  4456                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4457                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4458  000E3A  0E80               	movlw	128
  4459  000E3C  6023               	cpfslt	fillRectangle@x,c
  4460  000E3E  D069               	goto	l337
  4461  000E40  0E9F               	movlw	159
  4462  000E42  6418               	cpfsgt	fillRectangle@y,c
  4463  000E44  D001               	goto	l4388
  4464                           
  4465                           ;ST7735_TFT.c: 507: return;
  4466  000E46  D065               	goto	l337
  4467  000E48                     l4388:
  4468                           
  4469                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4470  000E48  0EFF               	movlw	255
  4471  000E4A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4472  000E4C  0EFF               	movlw	255
  4473  000E4E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4474  000E50  5019               	movf	fillRectangle@w,w,c
  4475  000E52  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4476  000E56  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4477  000E58  261F               	addwf	??_fillRectangle+2,f,c
  4478  000E5A  0E00               	movlw	0
  4479  000E5C  2220               	addwfc	??_fillRectangle+3,f,c
  4480  000E5E  501D               	movf	??_fillRectangle,w,c
  4481  000E60  261F               	addwf	??_fillRectangle+2,f,c
  4482  000E62  501E               	movf	??_fillRectangle+1,w,c
  4483  000E64  2220               	addwfc	??_fillRectangle+3,f,c
  4484  000E66  BE20               	btfsc	??_fillRectangle+3,7,c
  4485  000E68  D00A               	goto	l338
  4486  000E6A  5020               	movf	??_fillRectangle+3,w,c
  4487  000E6C  E104               	bnz	u2930
  4488  000E6E  0E80               	movlw	128
  4489  000E70  5C1F               	subwf	??_fillRectangle+2,w,c
  4490  000E72  A0D8               	btfss	status,0,c
  4491  000E74  D004               	goto	l338
  4492  000E76                     u2930:
  4493                           
  4494                           ;ST7735_TFT.c: 509: w = 128 - x;
  4495  000E76  5023               	movf	fillRectangle@x,w,c
  4496  000E78  0800               	sublw	0
  4497  000E7A  0F80               	addlw	128
  4498  000E7C  6E19               	movwf	fillRectangle@w,c
  4499  000E7E                     l338:
  4500                           
  4501                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4502  000E7E  0EFF               	movlw	255
  4503  000E80  6E1D               	movwf	??_fillRectangle& (0+255),c
  4504  000E82  0EFF               	movlw	255
  4505  000E84  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4506  000E86  501A               	movf	fillRectangle@h,w,c
  4507  000E88  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4508  000E8C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4509  000E8E  261F               	addwf	??_fillRectangle+2,f,c
  4510  000E90  0E00               	movlw	0
  4511  000E92  2220               	addwfc	??_fillRectangle+3,f,c
  4512  000E94  501D               	movf	??_fillRectangle,w,c
  4513  000E96  261F               	addwf	??_fillRectangle+2,f,c
  4514  000E98  501E               	movf	??_fillRectangle+1,w,c
  4515  000E9A  2220               	addwfc	??_fillRectangle+3,f,c
  4516  000E9C  BE20               	btfsc	??_fillRectangle+3,7,c
  4517  000E9E  D00B               	goto	l4394
  4518  000EA0  5020               	movf	??_fillRectangle+3,w,c
  4519  000EA2  E104               	bnz	u2940
  4520  000EA4  0EA0               	movlw	160
  4521  000EA6  5C1F               	subwf	??_fillRectangle+2,w,c
  4522  000EA8  A0D8               	btfss	status,0,c
  4523  000EAA  D005               	goto	l4394
  4524  000EAC                     u2940:
  4525                           
  4526                           ;ST7735_TFT.c: 511: h = 160 - y;
  4527  000EAC  5018               	movf	fillRectangle@y,w,c
  4528  000EAE  0800               	sublw	0
  4529  000EB0  0FA0               	addlw	160
  4530  000EB2  6E1A               	movwf	fillRectangle@h,c
  4531  000EB4  D000               	goto	l4394
  4532  000EB6                     l4394:
  4533                           
  4534                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4535  000EB6  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4536  000EBA  5023               	movf	fillRectangle@x,w,c
  4537  000EBC  2419               	addwf	fillRectangle@w,w,c
  4538  000EBE  6E1D               	movwf	??_fillRectangle& (0+255),c
  4539  000EC0  041D               	decf	??_fillRectangle,w,c
  4540  000EC2  6E15               	movwf	setAddrWindow@x1,c
  4541  000EC4  5018               	movf	fillRectangle@y,w,c
  4542  000EC6  241A               	addwf	fillRectangle@h,w,c
  4543  000EC8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4544  000ECA  041E               	decf	??_fillRectangle+1,w,c
  4545  000ECC  6E16               	movwf	setAddrWindow@y1,c
  4546  000ECE  5023               	movf	fillRectangle@x,w,c
  4547  000ED0  EC56  F00A         	call	_setAddrWindow
  4548                           
  4549                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4550  000ED4  501C               	movf	fillRectangle@color+1,w,c
  4551  000ED6  6E21               	movwf	fillRectangle@hi,c
  4552  000ED8  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4553                           
  4554                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  4555  000EDC  8082               	bsf	3970,0,c	;volatile
  4556                           
  4557                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  4558  000EDE  9282               	bcf	3970,1,c	;volatile
  4559                           
  4560                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4561  000EE0  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4562  000EE4                     l4406:
  4563  000EE4  5018               	movf	fillRectangle@y,w,c
  4564  000EE6  B4D8               	btfsc	status,2,c
  4565  000EE8  D013               	goto	l341
  4566  000EEA  D001               	goto	l340
  4567  000EEC  D011               	goto	l341
  4568  000EEE                     l340:
  4569                           
  4570                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4571  000EEE  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4572  000EF2                     l4410:
  4573  000EF2  5023               	movf	fillRectangle@x,w,c
  4574  000EF4  B4D8               	btfsc	status,2,c
  4575  000EF6  D00A               	goto	l4420
  4576  000EF8  D001               	goto	l4414
  4577  000EFA  D008               	goto	l4420
  4578  000EFC                     l4414:
  4579                           
  4580                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4581  000EFC  5021               	movf	fillRectangle@hi,w,c
  4582  000EFE  EC4A  F00C         	call	_spiwrite
  4583                           
  4584                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4585  000F02  5022               	movf	fillRectangle@lo,w,c
  4586  000F04  EC4A  F00C         	call	_spiwrite
  4587  000F08  0623               	decf	fillRectangle@x,f,c
  4588  000F0A  D7F3               	goto	l4410
  4589  000F0C                     l4420:
  4590  000F0C  0618               	decf	fillRectangle@y,f,c
  4591  000F0E  D7EA               	goto	l4406
  4592  000F10                     l341:
  4593                           
  4594                           ;ST7735_TFT.c: 521: }
  4595                           ;ST7735_TFT.c: 522: }
  4596                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  4597  000F10  8282               	bsf	3970,1,c	;volatile
  4598  000F12                     l337:
  4599  000F12  0012               	return		;funcret
  4600  000F14                     __end_of_fillRectangle:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodh	equ	0xFF4
  4607                           prodl	equ	0xFF3
  4608                           intcon	equ	0xFF2
  4609                           intcon2	equ	0xFF1
  4610                           postinc0	equ	0xFEE
  4611                           wreg	equ	0xFE8
  4612                           postdec1	equ	0xFE5
  4613                           fsr1l	equ	0xFE1
  4614                           indf2	equ	0xFDF
  4615                           postinc2	equ	0xFDE
  4616                           postdec2	equ	0xFDD
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8
  4620                           
  4621 ;; *************** function _drawtext *****************
  4622 ;; Defined at:
  4623 ;;		line 474 in file "ST7735_TFT.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;  x               1    wreg     unsigned char 
  4626 ;;  y               1   56[COMRAM] unsigned char 
  4627 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4628 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4629 ;;  color           2   59[COMRAM] unsigned int 
  4630 ;;  bg              2   61[COMRAM] unsigned int 
  4631 ;;  size            1   63[COMRAM] unsigned char 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  x               1    0[BANK0 ] unsigned char 
  4634 ;;  i               2    3[BANK0 ] unsigned int 
  4635 ;;  textsize        2    1[BANK0 ] unsigned int 
  4636 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4637 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4647 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;Total ram usage:       17 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    9
  4654 ;; This function calls:
  4655 ;;		_drawChar
  4656 ;;		_strlen
  4657 ;; This function is called by:
  4658 ;;		_main
  4659 ;;		_Initialize_Screen
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text15
  4664  000C3C                     __ptext15:
  4665                           	opt stack 0
  4666  000C3C                     _drawtext:
  4667                           	opt stack 21
  4668                           
  4669                           ;incstack = 0
  4670                           ;drawtext@x stored from wreg
  4671  000C3C  0100               	movlb	0	; () banked
  4672  000C3E  6FF3               	movwf	drawtext@x& (0+255),b
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4676                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4677                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4678  000C40  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  4679                           
  4680                           ; BSR set to: 0
  4681  000C44  C039  F0F8         	movff	drawtext@y,drawtext@cursor_y
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4685  000C48  C03A  F011         	movff	drawtext@_text,strlen@s
  4686  000C4C  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4687  000C50  EC0C  F00B         	call	_strlen	;wreg free
  4688  000C54  C011  F0F4         	movff	?_strlen,drawtext@textsize
  4689  000C58  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  4690                           
  4691                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4692  000C5C  0E00               	movlw	0
  4693  000C5E  0100               	movlb	0	; () banked
  4694  000C60  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  4695  000C62  0E00               	movlw	0
  4696  000C64  6FF6               	movwf	drawtext@i& (0+255),b
  4697  000C66  D064               	goto	l4576
  4698  000C68                     l4550:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4702  000C68  506E               	movf	_wrap,w,c
  4703  000C6A  B4D8               	btfsc	status,2,c
  4704  000C6C  D034               	goto	l4566
  4705                           
  4706                           ; BSR set to: 0
  4707  000C6E  5040               	movf	drawtext@size,w,c
  4708  000C70  0D05               	mullw	5
  4709  000C72  0100               	movlb	0	; () banked
  4710  000C74  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  4711  000C76  6E41               	movwf	??_drawtext& (0+255),c
  4712  000C78  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4713  000C7A  50F3               	movf	prodl,w,c
  4714  000C7C  2641               	addwf	??_drawtext,f,c
  4715  000C7E  50F4               	movf	prodh,w,c
  4716  000C80  2242               	addwfc	??_drawtext+1,f,c
  4717  000C82  BE42               	btfsc	??_drawtext+1,7,c
  4718  000C84  D028               	goto	l4566
  4719  000C86  5042               	movf	??_drawtext+1,w,c
  4720  000C88  E104               	bnz	u3140
  4721  000C8A  0E81               	movlw	129
  4722  000C8C  5C41               	subwf	??_drawtext,w,c
  4723  000C8E  A0D8               	btfss	status,0,c
  4724  000C90  D022               	goto	l4566
  4725  000C92                     u3140:
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4729  000C92  0E00               	movlw	0
  4730  000C94  0100               	movlb	0	; () banked
  4731  000C96  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4735  000C98  5040               	movf	drawtext@size,w,c
  4736  000C9A  0D07               	mullw	7
  4737  000C9C  50F3               	movf	prodl,w,c
  4738  000C9E  0100               	movlb	0	; () banked
  4739  000CA0  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  4740  000CA2  0F03               	addlw	3
  4741  000CA4  0100               	movlb	0	; () banked
  4742  000CA6  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4746  000CA8  0EA0               	movlw	160
  4747  000CAA  0100               	movlb	0	; () banked
  4748  000CAC  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  4749  000CAE  D004               	goto	l4562
  4750                           
  4751                           ; BSR set to: 0
  4752  000CB0  0EA0               	movlw	160
  4753  000CB2  0100               	movlb	0	; () banked
  4754  000CB4  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  4755  000CB6  D000               	goto	l4562
  4756  000CB8                     l4562:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4760  000CB8  0100               	movlb	0	; () banked
  4761  000CBA  51F6               	movf	drawtext@i& (0+255),w,b
  4762  000CBC  243A               	addwf	drawtext@_text,w,c
  4763  000CBE  6ED9               	movwf	fsr2l,c
  4764  000CC0  0100               	movlb	0	; () banked
  4765  000CC2  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  4766  000CC4  203B               	addwfc	drawtext@_text+1,w,c
  4767  000CC6  6EDA               	movwf	fsr2h,c
  4768  000CC8  0E20               	movlw	32
  4769  000CCA  18DE               	xorwf	postinc2,w,c
  4770  000CCC  B4D8               	btfsc	status,2,c
  4771  000CCE  D02C               	goto	l4574
  4772  000CD0  D002               	goto	l4566
  4773                           
  4774                           ; BSR set to: 0
  4775  000CD2  D02A               	goto	l4574
  4776                           
  4777                           ; BSR set to: 0
  4778  000CD4  D000               	goto	l4566
  4779  000CD6                     l4566:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4783  000CD6  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  4784  000CDA  0100               	movlb	0	; () banked
  4785  000CDC  51F6               	movf	drawtext@i& (0+255),w,b
  4786  000CDE  243A               	addwf	drawtext@_text,w,c
  4787  000CE0  6ED9               	movwf	fsr2l,c
  4788  000CE2  0100               	movlb	0	; () banked
  4789  000CE4  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  4790  000CE6  203B               	addwfc	drawtext@_text+1,w,c
  4791  000CE8  6EDA               	movwf	fsr2h,c
  4792  000CEA  50DF               	movf	indf2,w,c
  4793  000CEC  6E2F               	movwf	drawChar@c,c
  4794  000CEE  C03C  F030         	movff	drawtext@color,drawChar@color
  4795  000CF2  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4796  000CF6  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4797  000CFA  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4798  000CFE  C040  F034         	movff	drawtext@size,drawChar@size
  4799  000D02  0100               	movlb	0	; () banked
  4800  000D04  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  4801  000D06  ECA6  F003         	call	_drawChar
  4802                           
  4803                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4804  000D0A  5040               	movf	drawtext@size,w,c
  4805  000D0C  0D06               	mullw	6
  4806  000D0E  50F3               	movf	prodl,w,c
  4807  000D10  0100               	movlb	0	; () banked
  4808  000D12  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  4809  000D14  0100               	movlb	0	; () banked
  4810  000D16  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4814  000D18  0E80               	movlw	128
  4815  000D1A  0100               	movlb	0	; () banked
  4816  000D1C  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  4817  000D1E  D004               	goto	l4574
  4818                           
  4819                           ; BSR set to: 0
  4820  000D20  0E80               	movlw	128
  4821  000D22  0100               	movlb	0	; () banked
  4822  000D24  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  4823                           
  4824                           ; BSR set to: 0
  4825  000D26  D000               	goto	l4574
  4826  000D28                     l4574:
  4827                           
  4828                           ; BSR set to: 0
  4829  000D28  0100               	movlb	0	; () banked
  4830  000D2A  4BF6               	infsnz	drawtext@i& (0+255),f,b
  4831  000D2C  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  4832  000D2E  D000               	goto	l4576
  4833  000D30                     l4576:
  4834                           
  4835                           ; BSR set to: 0
  4836  000D30  0100               	movlb	0	; () banked
  4837  000D32  51F4               	movf	drawtext@textsize& (0+255),w,b
  4838  000D34  0100               	movlb	0	; () banked
  4839  000D36  5DF6               	subwf	drawtext@i& (0+255),w,b
  4840  000D38  0100               	movlb	0	; () banked
  4841  000D3A  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  4842  000D3C  0100               	movlb	0	; () banked
  4843  000D3E  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  4844  000D40  A0D8               	btfss	status,0,c
  4845  000D42  D792               	goto	l4550
  4846                           
  4847                           ; BSR set to: 0
  4848                           
  4849                           ; BSR set to: 0
  4850  000D44  0012               	return		;funcret
  4851  000D46                     __end_of_drawtext:
  4852                           	opt stack 0
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           prodh	equ	0xFF4
  4858                           prodl	equ	0xFF3
  4859                           intcon	equ	0xFF2
  4860                           intcon2	equ	0xFF1
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           postdec1	equ	0xFE5
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872 ;; *************** function _strlen *****************
  4873 ;; Defined at:
  4874 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4877 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4880 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  2   16[COMRAM] unsigned int 
  4883 ;; Registers used:
  4884 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;Total ram usage:        6 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    3
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_drawtext
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text16
  4905  001618                     __ptext16:
  4906                           	opt stack 0
  4907  001618                     _strlen:
  4908                           	opt stack 26
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;incstack = 0
  4912  001618  C011  F015         	movff	strlen@s,strlen@cp
  4913  00161C  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4914  001620  D003               	goto	l4378
  4915  001622                     l4376:
  4916  001622  4A15               	infsnz	strlen@cp,f,c
  4917  001624  2A16               	incf	strlen@cp+1,f,c
  4918  001626  D000               	goto	l4378
  4919  001628                     l4378:
  4920  001628  C015  FFD9         	movff	strlen@cp,fsr2l
  4921  00162C  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4922  001630  50DF               	movf	indf2,w,c
  4923  001632  A4D8               	btfss	status,2,c
  4924  001634  D7F6               	goto	l4376
  4925  001636  C011  F013         	movff	strlen@s,??_strlen
  4926  00163A  C012  F014         	movff	strlen@s+1,??_strlen+1
  4927  00163E  1E13               	comf	??_strlen,f,c
  4928  001640  1E14               	comf	??_strlen+1,f,c
  4929  001642  4A13               	infsnz	??_strlen,f,c
  4930  001644  2A14               	incf	??_strlen+1,f,c
  4931  001646  5015               	movf	strlen@cp,w,c
  4932  001648  2413               	addwf	??_strlen,w,c
  4933  00164A  6E11               	movwf	?_strlen,c
  4934  00164C  5016               	movf	strlen@cp+1,w,c
  4935  00164E  2014               	addwfc	??_strlen+1,w,c
  4936  001650  6E12               	movwf	?_strlen+1,c
  4937  001652  D000               	goto	l1260
  4938  001654                     l1260:
  4939  001654  0012               	return		;funcret
  4940  001656                     __end_of_strlen:
  4941                           	opt stack 0
  4942                           tblptru	equ	0xFF8
  4943                           tblptrh	equ	0xFF7
  4944                           tblptrl	equ	0xFF6
  4945                           tablat	equ	0xFF5
  4946                           prodh	equ	0xFF4
  4947                           prodl	equ	0xFF3
  4948                           intcon	equ	0xFF2
  4949                           intcon2	equ	0xFF1
  4950                           postinc0	equ	0xFEE
  4951                           wreg	equ	0xFE8
  4952                           postdec1	equ	0xFE5
  4953                           fsr1l	equ	0xFE1
  4954                           indf2	equ	0xFDF
  4955                           postinc2	equ	0xFDE
  4956                           postdec2	equ	0xFDD
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           
  4961 ;; *************** function _drawChar *****************
  4962 ;; Defined at:
  4963 ;;		line 447 in file "ST7735_TFT.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  x               1    wreg     unsigned char 
  4966 ;;  y               1   45[COMRAM] unsigned char 
  4967 ;;  c               1   46[COMRAM] unsigned char 
  4968 ;;  color           2   47[COMRAM] unsigned int 
  4969 ;;  bg              2   49[COMRAM] unsigned int 
  4970 ;;  size            1   51[COMRAM] unsigned char 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  x               1   53[COMRAM] unsigned char 
  4973 ;;  line            1   52[COMRAM] unsigned char 
  4974 ;;  i               1   55[COMRAM] unsigned char 
  4975 ;;  j               1   54[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;		None               void
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4985 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;Total ram usage:       11 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    8
  4992 ;; This function calls:
  4993 ;;		___wmul
  4994 ;;		_drawPixel
  4995 ;;		_fillRect
  4996 ;; This function is called by:
  4997 ;;		_drawtext
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text17
  5002  00074C                     __ptext17:
  5003                           	opt stack 0
  5004  00074C                     _drawChar:
  5005                           	opt stack 21
  5006                           
  5007                           ;incstack = 0
  5008                           ;drawChar@x stored from wreg
  5009  00074C  6E36               	movwf	drawChar@x,c
  5010                           
  5011                           ;ST7735_TFT.c: 449: char i, j;
  5012                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5013  00074E  0E80               	movlw	128
  5014  000750  6036               	cpfslt	drawChar@x,c
  5015  000752  D0A6               	goto	l300
  5016  000754  0E9F               	movlw	159
  5017  000756  642E               	cpfsgt	drawChar@y,c
  5018  000758  D001               	goto	l4324
  5019                           
  5020                           ;ST7735_TFT.c: 451: return;
  5021  00075A  D0A2               	goto	l300
  5022  00075C                     l4324:
  5023                           
  5024                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5025  00075C  5034               	movf	drawChar@size,w,c
  5026  00075E  A4D8               	btfss	status,2,c
  5027  000760  D003               	goto	l4328
  5028  000762  0E01               	movlw	1
  5029  000764  6E34               	movwf	drawChar@size,c
  5030  000766  D000               	goto	l4328
  5031  000768                     l4328:
  5032                           
  5033                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5034  000768  0E1F               	movlw	31
  5035  00076A  642F               	cpfsgt	drawChar@c,c
  5036  00076C  D004               	goto	l4332
  5037  00076E  0E7E               	movlw	126
  5038  000770  642F               	cpfsgt	drawChar@c,c
  5039  000772  D003               	goto	l302
  5040  000774  D000               	goto	l4332
  5041  000776                     l4332:
  5042                           
  5043                           ;ST7735_TFT.c: 454: c = '?';
  5044  000776  0E3F               	movlw	63
  5045  000778  6E2F               	movwf	drawChar@c,c
  5046  00077A                     l302:
  5047                           
  5048                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5049  00077A  0E00               	movlw	0
  5050  00077C  6E38               	movwf	drawChar@i,c
  5051  00077E                     l4334:
  5052  00077E  0E04               	movlw	4
  5053  000780  6438               	cpfsgt	drawChar@i,c
  5054  000782  D001               	goto	l4338
  5055  000784  D08D               	goto	l300
  5056  000786                     l4338:
  5057                           
  5058                           ;ST7735_TFT.c: 456: unsigned char line;
  5059                           ;ST7735_TFT.c: 457: if(c < 'S')
  5060  000786  0E53               	movlw	83
  5061  000788  602F               	cpfslt	drawChar@c,c
  5062  00078A  D015               	goto	l4342
  5063                           
  5064                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5065  00078C  0EE0               	movlw	224
  5066  00078E  242F               	addwf	drawChar@c,w,c
  5067  000790  6E11               	movwf	___wmul@multiplier,c
  5068  000792  6A12               	clrf	___wmul@multiplier+1,c
  5069  000794  0EFF               	movlw	255
  5070  000796  2212               	addwfc	___wmul@multiplier+1,f,c
  5071  000798  0E00               	movlw	0
  5072  00079A  6E14               	movwf	___wmul@multiplicand+1,c
  5073  00079C  0E05               	movlw	5
  5074  00079E  6E13               	movwf	___wmul@multiplicand,c
  5075  0007A0  ECC7  F00B         	call	___wmul	;wreg free
  5076  0007A4  5038               	movf	drawChar@i,w,c
  5077  0007A6  2611               	addwf	?___wmul,f,c
  5078  0007A8  0E00               	movlw	0
  5079  0007AA  2212               	addwfc	?___wmul+1,f,c
  5080  0007AC  0E7D               	movlw	low _font
  5081  0007AE  2411               	addwf	?___wmul,w,c
  5082  0007B0  6EF6               	movwf	tblptrl,c
  5083  0007B2  0EFD               	movlw	high _font
  5084  0007B4  D014               	goto	L1
  5085  0007B6                     l4342:
  5086                           
  5087                           ;ST7735_TFT.c: 459: else
  5088                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5089  0007B6  0EAD               	movlw	173
  5090  0007B8  242F               	addwf	drawChar@c,w,c
  5091  0007BA  6E11               	movwf	___wmul@multiplier,c
  5092  0007BC  6A12               	clrf	___wmul@multiplier+1,c
  5093  0007BE  0EFF               	movlw	255
  5094  0007C0  2212               	addwfc	___wmul@multiplier+1,f,c
  5095  0007C2  0E00               	movlw	0
  5096  0007C4  6E14               	movwf	___wmul@multiplicand+1,c
  5097  0007C6  0E05               	movlw	5
  5098  0007C8  6E13               	movwf	___wmul@multiplicand,c
  5099  0007CA  ECC7  F00B         	call	___wmul	;wreg free
  5100  0007CE  5038               	movf	drawChar@i,w,c
  5101  0007D0  2611               	addwf	?___wmul,f,c
  5102  0007D2  0E00               	movlw	0
  5103  0007D4  2212               	addwfc	?___wmul+1,f,c
  5104  0007D6  0E7C               	movlw	low _font2
  5105  0007D8  2411               	addwf	?___wmul,w,c
  5106  0007DA  6EF6               	movwf	tblptrl,c
  5107  0007DC  0EFE               	movlw	high _font2
  5108  0007DE                     L1:
  5109  0007DE  2012               	addwfc	?___wmul+1,w,c
  5110  0007E0  6EF7               	movwf	tblptrh,c
  5111  0007E2                     	if	0	;There are less than 3 active tblptr bytes
  5112  0007E2                     	endif
  5113  0007E2  0008               	tblrd		*
  5114  0007E4  CFF5 F035          	movff	tablat,drawChar@line
  5115  0007E8  D000               	goto	l4344
  5116  0007EA                     l4344:
  5117                           
  5118                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5119  0007EA  0E00               	movlw	0
  5120  0007EC  6E37               	movwf	drawChar@j,c
  5121  0007EE                     l4346:
  5122  0007EE  0E06               	movlw	6
  5123  0007F0  6437               	cpfsgt	drawChar@j,c
  5124  0007F2  D001               	goto	l309
  5125  0007F4  D053               	goto	l4370
  5126  0007F6                     l309:
  5127                           
  5128                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5129  0007F6  A035               	btfss	drawChar@line,0,c
  5130  0007F8  D023               	goto	l4356
  5131                           
  5132                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5133  0007FA  0434               	decf	drawChar@size,w,c
  5134  0007FC  A4D8               	btfss	status,2,c
  5135  0007FE  D00C               	goto	l4354
  5136  000800  502E               	movf	drawChar@y,w,c
  5137  000802  2437               	addwf	drawChar@j,w,c
  5138  000804  6E18               	movwf	drawPixel@y,c
  5139  000806  C030  F019         	movff	drawChar@color,drawPixel@color
  5140  00080A  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5141  00080E  5036               	movf	drawChar@x,w,c
  5142  000810  2438               	addwf	drawChar@i,w,c
  5143  000812  EC82  F00B         	call	_drawPixel
  5144  000816  D03E               	goto	l4364
  5145  000818                     l4354:
  5146                           
  5147                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5148  000818  5037               	movf	drawChar@j,w,c
  5149  00081A  0234               	mulwf	drawChar@size,c
  5150  00081C  50F3               	movf	prodl,w,c
  5151  00081E  242E               	addwf	drawChar@y,w,c
  5152  000820  6E23               	movwf	fillRect@y,c
  5153  000822  C034  F024         	movff	drawChar@size,fillRect@w
  5154  000826  C034  F025         	movff	drawChar@size,fillRect@h
  5155  00082A  C030  F026         	movff	drawChar@color,fillRect@color
  5156  00082E  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5157  000832  5038               	movf	drawChar@i,w,c
  5158  000834  0234               	mulwf	drawChar@size,c
  5159  000836  50F3               	movf	prodl,w,c
  5160  000838  2436               	addwf	drawChar@x,w,c
  5161  00083A  ECA3  F00A         	call	_fillRect
  5162                           
  5163                           ;ST7735_TFT.c: 465: }
  5164  00083E  D02A               	goto	l4364
  5165  000840                     l4356:
  5166                           
  5167                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5168  000840  5030               	movf	drawChar@color,w,c
  5169  000842  1832               	xorwf	drawChar@bg,w,c
  5170  000844  E104               	bnz	u2860
  5171  000846  5031               	movf	drawChar@color+1,w,c
  5172  000848  1833               	xorwf	drawChar@bg+1,w,c
  5173  00084A  B4D8               	btfsc	status,2,c
  5174  00084C  D023               	goto	l4364
  5175  00084E                     u2860:
  5176                           
  5177                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5178  00084E  0434               	decf	drawChar@size,w,c
  5179  000850  A4D8               	btfss	status,2,c
  5180  000852  D00C               	goto	l4362
  5181  000854  502E               	movf	drawChar@y,w,c
  5182  000856  2437               	addwf	drawChar@j,w,c
  5183  000858  6E18               	movwf	drawPixel@y,c
  5184  00085A  C032  F019         	movff	drawChar@bg,drawPixel@color
  5185  00085E  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5186  000862  5036               	movf	drawChar@x,w,c
  5187  000864  2438               	addwf	drawChar@i,w,c
  5188  000866  EC82  F00B         	call	_drawPixel
  5189  00086A  D014               	goto	l4364
  5190  00086C                     l4362:
  5191                           
  5192                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5193  00086C  5037               	movf	drawChar@j,w,c
  5194  00086E  0234               	mulwf	drawChar@size,c
  5195  000870  50F3               	movf	prodl,w,c
  5196  000872  242E               	addwf	drawChar@y,w,c
  5197  000874  6E23               	movwf	fillRect@y,c
  5198  000876  C034  F024         	movff	drawChar@size,fillRect@w
  5199  00087A  C034  F025         	movff	drawChar@size,fillRect@h
  5200  00087E  C032  F026         	movff	drawChar@bg,fillRect@color
  5201  000882  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5202  000886  5038               	movf	drawChar@i,w,c
  5203  000888  0234               	mulwf	drawChar@size,c
  5204  00088A  50F3               	movf	prodl,w,c
  5205  00088C  2436               	addwf	drawChar@x,w,c
  5206  00088E  ECA3  F00A         	call	_fillRect
  5207  000892  D000               	goto	l4364
  5208  000894                     l4364:
  5209  000894  2A37               	incf	drawChar@j,f,c
  5210  000896  90D8               	bcf	status,0,c
  5211  000898  3235               	rrcf	drawChar@line,f,c
  5212  00089A  D7A9               	goto	l4346
  5213  00089C                     l4370:
  5214  00089C  2A38               	incf	drawChar@i,f,c
  5215  00089E  D76F               	goto	l4334
  5216  0008A0                     l300:
  5217  0008A0  0012               	return		;funcret
  5218  0008A2                     __end_of_drawChar:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           intcon	equ	0xFF2
  5227                           intcon2	equ	0xFF1
  5228                           postinc0	equ	0xFEE
  5229                           wreg	equ	0xFE8
  5230                           postdec1	equ	0xFE5
  5231                           fsr1l	equ	0xFE1
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _fillRect *****************
  5240 ;; Defined at:
  5241 ;;		line 437 in file "ST7735_TFT.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  x               1    wreg     unsigned char 
  5244 ;;  y               1   34[COMRAM] unsigned char 
  5245 ;;  w               1   35[COMRAM] unsigned char 
  5246 ;;  h               1   36[COMRAM] unsigned char 
  5247 ;;  color           2   37[COMRAM] unsigned int 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  x               1   42[COMRAM] unsigned char 
  5250 ;;  i               2   43[COMRAM] int 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5260 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;Total ram usage:       11 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    7
  5267 ;; This function calls:
  5268 ;;		_drawFastVLine
  5269 ;; This function is called by:
  5270 ;;		_drawChar
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text18
  5275  001546                     __ptext18:
  5276                           	opt stack 0
  5277  001546                     _fillRect:
  5278                           	opt stack 21
  5279                           
  5280                           ;incstack = 0
  5281                           ;fillRect@x stored from wreg
  5282  001546  6E2B               	movwf	fillRect@x,c
  5283                           
  5284                           ;ST7735_TFT.c: 439: signed int i;
  5285                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5286  001548  C02B  F02C         	movff	fillRect@x,fillRect@i
  5287  00154C  6A2D               	clrf	fillRect@i+1,c
  5288  00154E  D00E               	goto	l4198
  5289  001550                     l4194:
  5290                           
  5291                           ;ST7735_TFT.c: 442: {
  5292                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5293  001550  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5294  001554  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5295  001558  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5296  00155C  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5297  001560  502C               	movf	fillRect@i,w,c
  5298  001562  EC1C  F008         	call	_drawFastVLine
  5299  001566  4A2C               	infsnz	fillRect@i,f,c
  5300  001568  2A2D               	incf	fillRect@i+1,f,c
  5301  00156A  D000               	goto	l4198
  5302  00156C                     l4198:
  5303  00156C  5024               	movf	fillRect@w,w,c
  5304  00156E  C02B  F028         	movff	fillRect@x,??_fillRect
  5305  001572  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5306  001574  2628               	addwf	??_fillRect,f,c
  5307  001576  0E00               	movlw	0
  5308  001578  2229               	addwfc	??_fillRect+1,f,c
  5309  00157A  5028               	movf	??_fillRect,w,c
  5310  00157C  5C2C               	subwf	fillRect@i,w,c
  5311  00157E  502D               	movf	fillRect@i+1,w,c
  5312  001580  0A80               	xorlw	128
  5313  001582  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5314  001584  5029               	movf	??_fillRect+1,w,c
  5315  001586  0A80               	xorlw	128
  5316  001588  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5317  00158A  A0D8               	btfss	status,0,c
  5318  00158C  D7E1               	goto	l4194
  5319  00158E  0012               	return		;funcret
  5320  001590                     __end_of_fillRect:
  5321                           	opt stack 0
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon	equ	0xFF2
  5329                           intcon2	equ	0xFF1
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           postdec1	equ	0xFE5
  5333                           fsr1l	equ	0xFE1
  5334                           indf2	equ	0xFDF
  5335                           postinc2	equ	0xFDE
  5336                           postdec2	equ	0xFDD
  5337                           fsr2h	equ	0xFDA
  5338                           fsr2l	equ	0xFD9
  5339                           status	equ	0xFD8
  5340                           
  5341 ;; *************** function _drawFastVLine *****************
  5342 ;; Defined at:
  5343 ;;		line 416 in file "ST7735_TFT.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  x               1    wreg     unsigned char 
  5346 ;;  y               1   23[COMRAM] unsigned char 
  5347 ;;  h               1   24[COMRAM] unsigned char 
  5348 ;;  color           2   25[COMRAM] unsigned int 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  x               1   33[COMRAM] unsigned char 
  5351 ;;  lo              1   32[COMRAM] unsigned char 
  5352 ;;  hi              1   31[COMRAM] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;		None               void
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;Total ram usage:       11 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    6
  5369 ;; This function calls:
  5370 ;;		_setAddrWindow
  5371 ;;		_spiwrite
  5372 ;; This function is called by:
  5373 ;;		_fillRect
  5374 ;;		_fillCircleHelper
  5375 ;;		_fillCircle
  5376 ;;		_drawRect
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text19
  5381  001038                     __ptext19:
  5382                           	opt stack 0
  5383  001038                     _drawFastVLine:
  5384                           	opt stack 22
  5385                           
  5386                           ;incstack = 0
  5387                           ;drawFastVLine@x stored from wreg
  5388  001038  6E22               	movwf	drawFastVLine@x,c
  5389                           
  5390                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5391                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5392  00103A  0E80               	movlw	128
  5393  00103C  6022               	cpfslt	drawFastVLine@x,c
  5394  00103E  D03F               	goto	l284
  5395  001040  0E9F               	movlw	159
  5396  001042  6418               	cpfsgt	drawFastVLine@y,c
  5397  001044  D001               	goto	l4104
  5398                           
  5399                           ;ST7735_TFT.c: 420: return;
  5400  001046  D03B               	goto	l284
  5401  001048                     l4104:
  5402                           
  5403                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5404  001048  0EFF               	movlw	255
  5405  00104A  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5406  00104C  0EFF               	movlw	255
  5407  00104E  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5408  001050  5019               	movf	drawFastVLine@h,w,c
  5409  001052  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5410  001056  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5411  001058  261E               	addwf	??_drawFastVLine+2,f,c
  5412  00105A  0E00               	movlw	0
  5413  00105C  221F               	addwfc	??_drawFastVLine+3,f,c
  5414  00105E  501C               	movf	??_drawFastVLine,w,c
  5415  001060  261E               	addwf	??_drawFastVLine+2,f,c
  5416  001062  501D               	movf	??_drawFastVLine+1,w,c
  5417  001064  221F               	addwfc	??_drawFastVLine+3,f,c
  5418  001066  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5419  001068  D00B               	goto	l4108
  5420  00106A  501F               	movf	??_drawFastVLine+3,w,c
  5421  00106C  E104               	bnz	u2670
  5422  00106E  0EA0               	movlw	160
  5423  001070  5C1E               	subwf	??_drawFastVLine+2,w,c
  5424  001072  A0D8               	btfss	status,0,c
  5425  001074  D005               	goto	l4108
  5426  001076                     u2670:
  5427                           
  5428                           ;ST7735_TFT.c: 422: h = 160 - y;
  5429  001076  5018               	movf	drawFastVLine@y,w,c
  5430  001078  0800               	sublw	0
  5431  00107A  0FA0               	addlw	160
  5432  00107C  6E19               	movwf	drawFastVLine@h,c
  5433  00107E  D000               	goto	l4108
  5434  001080                     l4108:
  5435                           
  5436                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5437  001080  501B               	movf	drawFastVLine@color+1,w,c
  5438  001082  6E20               	movwf	drawFastVLine@hi,c
  5439  001084  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5440                           
  5441                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5442  001088  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5443  00108C  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5444  001090  5018               	movf	drawFastVLine@y,w,c
  5445  001092  2419               	addwf	drawFastVLine@h,w,c
  5446  001094  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5447  001096  041C               	decf	??_drawFastVLine,w,c
  5448  001098  6E16               	movwf	setAddrWindow@y1,c
  5449  00109A  5022               	movf	drawFastVLine@x,w,c
  5450  00109C  EC56  F00A         	call	_setAddrWindow
  5451                           
  5452                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  5453  0010A0  8082               	bsf	3970,0,c	;volatile
  5454                           
  5455                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  5456  0010A2  9282               	bcf	3970,1,c	;volatile
  5457                           
  5458                           ;ST7735_TFT.c: 428: while (h--) {
  5459  0010A4  D007               	goto	l4120
  5460  0010A6                     l4118:
  5461                           
  5462                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5463  0010A6  5020               	movf	drawFastVLine@hi,w,c
  5464  0010A8  EC4A  F00C         	call	_spiwrite
  5465                           
  5466                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5467  0010AC  5021               	movf	drawFastVLine@lo,w,c
  5468  0010AE  EC4A  F00C         	call	_spiwrite
  5469  0010B2  D000               	goto	l4120
  5470  0010B4                     l4120:
  5471  0010B4  0619               	decf	drawFastVLine@h,f,c
  5472  0010B6  2819               	incf	drawFastVLine@h,w,c
  5473  0010B8  A4D8               	btfss	status,2,c
  5474  0010BA  D7F5               	goto	l4118
  5475                           
  5476                           ;ST7735_TFT.c: 431: }
  5477                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  5478  0010BC  8282               	bsf	3970,1,c	;volatile
  5479  0010BE                     l284:
  5480  0010BE  0012               	return		;funcret
  5481  0010C0                     __end_of_drawFastVLine:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           intcon2	equ	0xFF1
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           postdec1	equ	0xFE5
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           postinc2	equ	0xFDE
  5497                           postdec2	equ	0xFDD
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function _drawPixel *****************
  5503 ;; Defined at:
  5504 ;;		line 407 in file "ST7735_TFT.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  x               1    wreg     unsigned char 
  5507 ;;  y               1   23[COMRAM] unsigned char 
  5508 ;;  color           2   24[COMRAM] unsigned int 
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  x               1   26[COMRAM] unsigned char 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;		None               void
  5513 ;; Registers used:
  5514 ;;		wreg, status,2, status,0, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5520 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5523 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5524 ;;Total ram usage:        4 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    6
  5527 ;; This function calls:
  5528 ;;		_setAddrWindow
  5529 ;;		_write_data
  5530 ;; This function is called by:
  5531 ;;		_drawChar
  5532 ;;		_drawCircle
  5533 ;;		_drawCircleHelper
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           	psect	text20
  5538  001704                     __ptext20:
  5539                           	opt stack 0
  5540  001704                     _drawPixel:
  5541                           	opt stack 22
  5542                           
  5543                           ;incstack = 0
  5544                           ;drawPixel@x stored from wreg
  5545  001704  6E1B               	movwf	drawPixel@x,c
  5546                           
  5547                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5548  001706  0E80               	movlw	128
  5549  001708  601B               	cpfslt	drawPixel@x,c
  5550  00170A  D013               	goto	l278
  5551  00170C  0E9F               	movlw	159
  5552  00170E  6418               	cpfsgt	drawPixel@y,c
  5553  001710  D001               	goto	l4186
  5554                           
  5555                           ;ST7735_TFT.c: 410: return;
  5556  001712  D00F               	goto	l278
  5557  001714                     l4186:
  5558                           
  5559                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5560  001714  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5561  001718  281B               	incf	drawPixel@x,w,c
  5562  00171A  6E15               	movwf	setAddrWindow@x1,c
  5563  00171C  2818               	incf	drawPixel@y,w,c
  5564  00171E  6E16               	movwf	setAddrWindow@y1,c
  5565  001720  501B               	movf	drawPixel@x,w,c
  5566  001722  EC56  F00A         	call	_setAddrWindow
  5567                           
  5568                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5569  001726  501A               	movf	drawPixel@color+1,w,c
  5570  001728  EC8B  F00C         	call	_write_data
  5571                           
  5572                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5573  00172C  5019               	movf	drawPixel@color,w,c
  5574  00172E  EC8B  F00C         	call	_write_data
  5575  001732                     l278:
  5576  001732  0012               	return		;funcret
  5577  001734                     __end_of_drawPixel:
  5578                           	opt stack 0
  5579                           tblptru	equ	0xFF8
  5580                           tblptrh	equ	0xFF7
  5581                           tblptrl	equ	0xFF6
  5582                           tablat	equ	0xFF5
  5583                           prodh	equ	0xFF4
  5584                           prodl	equ	0xFF3
  5585                           intcon	equ	0xFF2
  5586                           intcon2	equ	0xFF1
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           postdec1	equ	0xFE5
  5590                           fsr1l	equ	0xFE1
  5591                           indf2	equ	0xFDF
  5592                           postinc2	equ	0xFDE
  5593                           postdec2	equ	0xFDD
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function _setAddrWindow *****************
  5599 ;; Defined at:
  5600 ;;		line 392 in file "ST7735_TFT.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  x0              1    wreg     unsigned char 
  5603 ;;  y0              1   19[COMRAM] unsigned char 
  5604 ;;  x1              1   20[COMRAM] unsigned char 
  5605 ;;  y1              1   21[COMRAM] unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  x0              1   22[COMRAM] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5617 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;Total ram usage:        4 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    5
  5624 ;; This function calls:
  5625 ;;		_write_command
  5626 ;;		_write_data
  5627 ;; This function is called by:
  5628 ;;		_drawPixel
  5629 ;;		_drawFastVLine
  5630 ;;		_fillRectangle
  5631 ;;		_drawFastHLine
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text21
  5636  0014AC                     __ptext21:
  5637                           	opt stack 0
  5638  0014AC                     _setAddrWindow:
  5639                           	opt stack 22
  5640                           
  5641                           ;incstack = 0
  5642                           ;setAddrWindow@x0 stored from wreg
  5643  0014AC  6E17               	movwf	setAddrWindow@x0,c
  5644                           
  5645                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5646  0014AE  0E2A               	movlw	42
  5647  0014B0  EC93  F00C         	call	_write_command
  5648                           
  5649                           ;ST7735_TFT.c: 395: write_data(0);
  5650  0014B4  0E00               	movlw	0
  5651  0014B6  EC8B  F00C         	call	_write_data
  5652                           
  5653                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5654  0014BA  5017               	movf	setAddrWindow@x0,w,c
  5655  0014BC  2459               	addwf	_colstart,w,c
  5656  0014BE  EC8B  F00C         	call	_write_data
  5657                           
  5658                           ;ST7735_TFT.c: 397: write_data(0);
  5659  0014C2  0E00               	movlw	0
  5660  0014C4  EC8B  F00C         	call	_write_data
  5661                           
  5662                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5663  0014C8  5015               	movf	setAddrWindow@x1,w,c
  5664  0014CA  2459               	addwf	_colstart,w,c
  5665  0014CC  EC8B  F00C         	call	_write_data
  5666                           
  5667                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5668  0014D0  0E2B               	movlw	43
  5669  0014D2  EC93  F00C         	call	_write_command
  5670                           
  5671                           ;ST7735_TFT.c: 400: write_data(0);
  5672  0014D6  0E00               	movlw	0
  5673  0014D8  EC8B  F00C         	call	_write_data
  5674                           
  5675                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5676  0014DC  5014               	movf	setAddrWindow@y0,w,c
  5677  0014DE  2461               	addwf	_rowstart,w,c
  5678  0014E0  EC8B  F00C         	call	_write_data
  5679                           
  5680                           ;ST7735_TFT.c: 402: write_data(0);
  5681  0014E4  0E00               	movlw	0
  5682  0014E6  EC8B  F00C         	call	_write_data
  5683                           
  5684                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5685  0014EA  5016               	movf	setAddrWindow@y1,w,c
  5686  0014EC  2461               	addwf	_rowstart,w,c
  5687  0014EE  EC8B  F00C         	call	_write_data
  5688                           
  5689                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5690  0014F2  0E2C               	movlw	44
  5691  0014F4  EC93  F00C         	call	_write_command
  5692  0014F8  0012               	return		;funcret
  5693  0014FA                     __end_of_setAddrWindow:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodh	equ	0xFF4
  5700                           prodl	equ	0xFF3
  5701                           intcon	equ	0xFF2
  5702                           intcon2	equ	0xFF1
  5703                           postinc0	equ	0xFEE
  5704                           wreg	equ	0xFE8
  5705                           postdec1	equ	0xFE5
  5706                           fsr1l	equ	0xFE1
  5707                           indf2	equ	0xFDF
  5708                           postinc2	equ	0xFDE
  5709                           postdec2	equ	0xFDD
  5710                           fsr2h	equ	0xFDA
  5711                           fsr2l	equ	0xFD9
  5712                           status	equ	0xFD8
  5713                           
  5714 ;; *************** function _TFT_GreenTab_Initialize *****************
  5715 ;; Defined at:
  5716 ;;		line 644 in file "ST7735_TFT.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;		None
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;		None               void
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;Total ram usage:        0 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    6
  5737 ;; This function calls:
  5738 ;;		_Rcmd1
  5739 ;;		_Rcmd2red
  5740 ;;		_Rcmd3
  5741 ;;		_write_command
  5742 ;;		_write_data
  5743 ;; This function is called by:
  5744 ;;		_Initialize_Screen
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           	psect	text22
  5749  001764                     __ptext22:
  5750                           	opt stack 0
  5751  001764                     _TFT_GreenTab_Initialize:
  5752                           	opt stack 23
  5753                           
  5754                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  5755                           
  5756                           ;incstack = 0
  5757  001764  8282               	bsf	3970,1,c	;volatile
  5758                           
  5759                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  5760  001766  9082               	bcf	3970,0,c	;volatile
  5761                           
  5762                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5763  001768  0E80               	movlw	128
  5764  00176A  6EC7               	movwf	4039,c	;volatile
  5765                           
  5766                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5767  00176C  0E30               	movlw	48
  5768  00176E  6EC6               	movwf	4038,c	;volatile
  5769                           
  5770                           ;ST7735_TFT.c: 653: Rcmd1();
  5771  001770  EC96  F005         	call	_Rcmd1	;wreg free
  5772                           
  5773                           ;ST7735_TFT.c: 654: Rcmd2red();
  5774  001774  EC2B  F00B         	call	_Rcmd2red	;wreg free
  5775                           
  5776                           ;ST7735_TFT.c: 655: Rcmd3();
  5777  001778  ECA3  F006         	call	_Rcmd3	;wreg free
  5778                           
  5779                           ;ST7735_TFT.c: 656: write_command(0x36);
  5780  00177C  0E36               	movlw	54
  5781  00177E  EC93  F00C         	call	_write_command
  5782                           
  5783                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5784  001782  0EC0               	movlw	192
  5785  001784  EC8B  F00C         	call	_write_data
  5786                           
  5787                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5788  001788  0E01               	movlw	1
  5789  00178A  6E53               	movwf	__tft_type,c
  5790  00178C  0012               	return		;funcret
  5791  00178E                     __end_of_TFT_GreenTab_Initialize:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           intcon2	equ	0xFF1
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           postdec1	equ	0xFE5
  5804                           fsr1l	equ	0xFE1
  5805                           indf2	equ	0xFDF
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _Rcmd3 *****************
  5813 ;; Defined at:
  5814 ;;		line 338 in file "ST7735_TFT.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;		None               void
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    5
  5835 ;; This function calls:
  5836 ;;		_delay_ms
  5837 ;;		_write_command
  5838 ;;		_write_data
  5839 ;; This function is called by:
  5840 ;;		_TFT_GreenTab_Initialize
  5841 ;;		_TFT_BlackTab_Initialize
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text23
  5846  000D46                     __ptext23:
  5847                           	opt stack 0
  5848  000D46                     _Rcmd3:
  5849                           	opt stack 23
  5850                           
  5851                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5852                           
  5853                           ;incstack = 0
  5854  000D46  0EE0               	movlw	224
  5855  000D48  EC93  F00C         	call	_write_command
  5856                           
  5857                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5858  000D4C  0E02               	movlw	2
  5859  000D4E  EC8B  F00C         	call	_write_data
  5860  000D52  0E1C               	movlw	28
  5861  000D54  EC8B  F00C         	call	_write_data
  5862  000D58  0E07               	movlw	7
  5863  000D5A  EC8B  F00C         	call	_write_data
  5864  000D5E  0E12               	movlw	18
  5865  000D60  EC8B  F00C         	call	_write_data
  5866                           
  5867                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5868  000D64  0E37               	movlw	55
  5869  000D66  EC8B  F00C         	call	_write_data
  5870  000D6A  0E32               	movlw	50
  5871  000D6C  EC8B  F00C         	call	_write_data
  5872  000D70  0E29               	movlw	41
  5873  000D72  EC8B  F00C         	call	_write_data
  5874  000D76  0E2D               	movlw	45
  5875  000D78  EC8B  F00C         	call	_write_data
  5876                           
  5877                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5878  000D7C  0E29               	movlw	41
  5879  000D7E  EC8B  F00C         	call	_write_data
  5880  000D82  0E25               	movlw	37
  5881  000D84  EC8B  F00C         	call	_write_data
  5882  000D88  0E2B               	movlw	43
  5883  000D8A  EC8B  F00C         	call	_write_data
  5884  000D8E  0E39               	movlw	57
  5885  000D90  EC8B  F00C         	call	_write_data
  5886                           
  5887                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5888  000D94  0E00               	movlw	0
  5889  000D96  EC8B  F00C         	call	_write_data
  5890  000D9A  0E01               	movlw	1
  5891  000D9C  EC8B  F00C         	call	_write_data
  5892  000DA0  0E03               	movlw	3
  5893  000DA2  EC8B  F00C         	call	_write_data
  5894  000DA6  0E10               	movlw	16
  5895  000DA8  EC8B  F00C         	call	_write_data
  5896                           
  5897                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5898  000DAC  0EE1               	movlw	225
  5899  000DAE  EC93  F00C         	call	_write_command
  5900                           
  5901                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5902  000DB2  0E03               	movlw	3
  5903  000DB4  EC8B  F00C         	call	_write_data
  5904  000DB8  0E1D               	movlw	29
  5905  000DBA  EC8B  F00C         	call	_write_data
  5906  000DBE  0E07               	movlw	7
  5907  000DC0  EC8B  F00C         	call	_write_data
  5908  000DC4  0E06               	movlw	6
  5909  000DC6  EC8B  F00C         	call	_write_data
  5910                           
  5911                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5912  000DCA  0E2E               	movlw	46
  5913  000DCC  EC8B  F00C         	call	_write_data
  5914  000DD0  0E2C               	movlw	44
  5915  000DD2  EC8B  F00C         	call	_write_data
  5916  000DD6  0E29               	movlw	41
  5917  000DD8  EC8B  F00C         	call	_write_data
  5918  000DDC  0E2D               	movlw	45
  5919  000DDE  EC8B  F00C         	call	_write_data
  5920                           
  5921                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5922  000DE2  0E2E               	movlw	46
  5923  000DE4  EC8B  F00C         	call	_write_data
  5924  000DE8  0E2E               	movlw	46
  5925  000DEA  EC8B  F00C         	call	_write_data
  5926  000DEE  0E37               	movlw	55
  5927  000DF0  EC8B  F00C         	call	_write_data
  5928  000DF4  0E3F               	movlw	63
  5929  000DF6  EC8B  F00C         	call	_write_data
  5930                           
  5931                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5932  000DFA  0E00               	movlw	0
  5933  000DFC  EC8B  F00C         	call	_write_data
  5934  000E00  0E00               	movlw	0
  5935  000E02  EC8B  F00C         	call	_write_data
  5936  000E06  0E02               	movlw	2
  5937  000E08  EC8B  F00C         	call	_write_data
  5938  000E0C  0E10               	movlw	16
  5939  000E0E  EC8B  F00C         	call	_write_data
  5940                           
  5941                           ;ST7735_TFT.c: 350: write_command(0x13);
  5942  000E12  0E13               	movlw	19
  5943  000E14  EC93  F00C         	call	_write_command
  5944                           
  5945                           ;ST7735_TFT.c: 351: delay_ms(10);
  5946  000E18  0E00               	movlw	0
  5947  000E1A  6E18               	movwf	delay_ms@ms+1,c
  5948  000E1C  0E0A               	movlw	10
  5949  000E1E  6E17               	movwf	delay_ms@ms,c
  5950  000E20  EC2D  F00A         	call	_delay_ms	;wreg free
  5951                           
  5952                           ;ST7735_TFT.c: 352: write_command(0x29);
  5953  000E24  0E29               	movlw	41
  5954  000E26  EC93  F00C         	call	_write_command
  5955                           
  5956                           ;ST7735_TFT.c: 353: delay_ms(100);
  5957  000E2A  0E00               	movlw	0
  5958  000E2C  6E18               	movwf	delay_ms@ms+1,c
  5959  000E2E  0E64               	movlw	100
  5960  000E30  6E17               	movwf	delay_ms@ms,c
  5961  000E32  EC2D  F00A         	call	_delay_ms	;wreg free
  5962  000E36  0012               	return		;funcret
  5963  000E38                     __end_of_Rcmd3:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           intcon	equ	0xFF2
  5972                           intcon2	equ	0xFF1
  5973                           postinc0	equ	0xFEE
  5974                           wreg	equ	0xFE8
  5975                           postdec1	equ	0xFE5
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984 ;; *************** function _Rcmd2red *****************
  5985 ;; Defined at:
  5986 ;;		line 328 in file "ST7735_TFT.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;		None
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;		None
  5991 ;; Return value:  Size  Location     Type
  5992 ;;		None               void
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;Total ram usage:        0 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    5
  6007 ;; This function calls:
  6008 ;;		_write_command
  6009 ;;		_write_data
  6010 ;; This function is called by:
  6011 ;;		_TFT_GreenTab_Initialize
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015                           	psect	text24
  6016  001656                     __ptext24:
  6017                           	opt stack 0
  6018  001656                     _Rcmd2red:
  6019                           	opt stack 23
  6020                           
  6021                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6022                           
  6023                           ;incstack = 0
  6024  001656  0E2A               	movlw	42
  6025  001658  EC93  F00C         	call	_write_command
  6026                           
  6027                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6028  00165C  0E00               	movlw	0
  6029  00165E  EC8B  F00C         	call	_write_data
  6030  001662  0E00               	movlw	0
  6031  001664  EC8B  F00C         	call	_write_data
  6032                           
  6033                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6034  001668  0E00               	movlw	0
  6035  00166A  EC8B  F00C         	call	_write_data
  6036  00166E  0E7F               	movlw	127
  6037  001670  EC8B  F00C         	call	_write_data
  6038                           
  6039                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6040  001674  0E2B               	movlw	43
  6041  001676  EC93  F00C         	call	_write_command
  6042                           
  6043                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6044  00167A  0E00               	movlw	0
  6045  00167C  EC8B  F00C         	call	_write_data
  6046  001680  0E00               	movlw	0
  6047  001682  EC8B  F00C         	call	_write_data
  6048                           
  6049                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6050  001686  0E00               	movlw	0
  6051  001688  EC8B  F00C         	call	_write_data
  6052  00168C  0E9F               	movlw	159
  6053  00168E  EC8B  F00C         	call	_write_data
  6054  001692  0012               	return		;funcret
  6055  001694                     __end_of_Rcmd2red:
  6056                           	opt stack 0
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           intcon	equ	0xFF2
  6064                           intcon2	equ	0xFF1
  6065                           postinc0	equ	0xFEE
  6066                           wreg	equ	0xFE8
  6067                           postdec1	equ	0xFE5
  6068                           fsr1l	equ	0xFE1
  6069                           indf2	equ	0xFDF
  6070                           postinc2	equ	0xFDE
  6071                           postdec2	equ	0xFDD
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function _Rcmd1 *****************
  6077 ;; Defined at:
  6078 ;;		line 281 in file "ST7735_TFT.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;		None               void
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;Total ram usage:        0 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    5
  6099 ;; This function calls:
  6100 ;;		_delay_ms
  6101 ;;		_write_command
  6102 ;;		_write_data
  6103 ;; This function is called by:
  6104 ;;		_TFT_GreenTab_Initialize
  6105 ;;		_TFT_BlackTab_Initialize
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text25
  6110  000B2C                     __ptext25:
  6111                           	opt stack 0
  6112  000B2C                     _Rcmd1:
  6113                           	opt stack 23
  6114                           
  6115                           ;ST7735_TFT.c: 283: write_command(0x01);
  6116                           
  6117                           ;incstack = 0
  6118  000B2C  0E01               	movlw	1
  6119  000B2E  EC93  F00C         	call	_write_command
  6120                           
  6121                           ;ST7735_TFT.c: 284: delay_ms(150);
  6122  000B32  0E00               	movlw	0
  6123  000B34  6E18               	movwf	delay_ms@ms+1,c
  6124  000B36  0E96               	movlw	150
  6125  000B38  6E17               	movwf	delay_ms@ms,c
  6126  000B3A  EC2D  F00A         	call	_delay_ms	;wreg free
  6127                           
  6128                           ;ST7735_TFT.c: 285: write_command(0x11);
  6129  000B3E  0E11               	movlw	17
  6130  000B40  EC93  F00C         	call	_write_command
  6131                           
  6132                           ;ST7735_TFT.c: 286: delay_ms(500);
  6133  000B44  0E01               	movlw	1
  6134  000B46  6E18               	movwf	delay_ms@ms+1,c
  6135  000B48  0EF4               	movlw	244
  6136  000B4A  6E17               	movwf	delay_ms@ms,c
  6137  000B4C  EC2D  F00A         	call	_delay_ms	;wreg free
  6138                           
  6139                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6140  000B50  0EB1               	movlw	177
  6141  000B52  EC93  F00C         	call	_write_command
  6142                           
  6143                           ;ST7735_TFT.c: 288: write_data(0x01);
  6144  000B56  0E01               	movlw	1
  6145  000B58  EC8B  F00C         	call	_write_data
  6146                           
  6147                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6148  000B5C  0E2C               	movlw	44
  6149  000B5E  EC8B  F00C         	call	_write_data
  6150                           
  6151                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6152  000B62  0E2D               	movlw	45
  6153  000B64  EC8B  F00C         	call	_write_data
  6154                           
  6155                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6156  000B68  0EB2               	movlw	178
  6157  000B6A  EC93  F00C         	call	_write_command
  6158                           
  6159                           ;ST7735_TFT.c: 292: write_data(0x01);
  6160  000B6E  0E01               	movlw	1
  6161  000B70  EC8B  F00C         	call	_write_data
  6162                           
  6163                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6164  000B74  0E2C               	movlw	44
  6165  000B76  EC8B  F00C         	call	_write_data
  6166                           
  6167                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6168  000B7A  0E2D               	movlw	45
  6169  000B7C  EC8B  F00C         	call	_write_data
  6170                           
  6171                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6172  000B80  0EB3               	movlw	179
  6173  000B82  EC93  F00C         	call	_write_command
  6174                           
  6175                           ;ST7735_TFT.c: 296: write_data(0x01);
  6176  000B86  0E01               	movlw	1
  6177  000B88  EC8B  F00C         	call	_write_data
  6178                           
  6179                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6180  000B8C  0E2C               	movlw	44
  6181  000B8E  EC8B  F00C         	call	_write_data
  6182                           
  6183                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6184  000B92  0E2D               	movlw	45
  6185  000B94  EC8B  F00C         	call	_write_data
  6186                           
  6187                           ;ST7735_TFT.c: 299: write_data(0x01);
  6188  000B98  0E01               	movlw	1
  6189  000B9A  EC8B  F00C         	call	_write_data
  6190                           
  6191                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6192  000B9E  0E2C               	movlw	44
  6193  000BA0  EC8B  F00C         	call	_write_data
  6194                           
  6195                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6196  000BA4  0E2D               	movlw	45
  6197  000BA6  EC8B  F00C         	call	_write_data
  6198                           
  6199                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6200  000BAA  0EB4               	movlw	180
  6201  000BAC  EC93  F00C         	call	_write_command
  6202                           
  6203                           ;ST7735_TFT.c: 303: write_data(0x07);
  6204  000BB0  0E07               	movlw	7
  6205  000BB2  EC8B  F00C         	call	_write_data
  6206                           
  6207                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6208  000BB6  0EC0               	movlw	192
  6209  000BB8  EC93  F00C         	call	_write_command
  6210                           
  6211                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6212  000BBC  0EA2               	movlw	162
  6213  000BBE  EC8B  F00C         	call	_write_data
  6214                           
  6215                           ;ST7735_TFT.c: 306: write_data(0x02);
  6216  000BC2  0E02               	movlw	2
  6217  000BC4  EC8B  F00C         	call	_write_data
  6218                           
  6219                           ;ST7735_TFT.c: 307: write_data(0x84);
  6220  000BC8  0E84               	movlw	132
  6221  000BCA  EC8B  F00C         	call	_write_data
  6222                           
  6223                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6224  000BCE  0EC1               	movlw	193
  6225  000BD0  EC93  F00C         	call	_write_command
  6226                           
  6227                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6228  000BD4  0EC5               	movlw	197
  6229  000BD6  EC8B  F00C         	call	_write_data
  6230                           
  6231                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6232  000BDA  0EC2               	movlw	194
  6233  000BDC  EC93  F00C         	call	_write_command
  6234                           
  6235                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6236  000BE0  0E0A               	movlw	10
  6237  000BE2  EC8B  F00C         	call	_write_data
  6238                           
  6239                           ;ST7735_TFT.c: 312: write_data(0x00);
  6240  000BE6  0E00               	movlw	0
  6241  000BE8  EC8B  F00C         	call	_write_data
  6242                           
  6243                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6244  000BEC  0EC3               	movlw	195
  6245  000BEE  EC93  F00C         	call	_write_command
  6246                           
  6247                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6248  000BF2  0E8A               	movlw	138
  6249  000BF4  EC8B  F00C         	call	_write_data
  6250                           
  6251                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6252  000BF8  0E2A               	movlw	42
  6253  000BFA  EC8B  F00C         	call	_write_data
  6254                           
  6255                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6256  000BFE  0EC4               	movlw	196
  6257  000C00  EC93  F00C         	call	_write_command
  6258                           
  6259                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6260  000C04  0E8A               	movlw	138
  6261  000C06  EC8B  F00C         	call	_write_data
  6262                           
  6263                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6264  000C0A  0EEE               	movlw	238
  6265  000C0C  EC8B  F00C         	call	_write_data
  6266                           
  6267                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6268  000C10  0EC5               	movlw	197
  6269  000C12  EC93  F00C         	call	_write_command
  6270                           
  6271                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6272  000C16  0E0E               	movlw	14
  6273  000C18  EC8B  F00C         	call	_write_data
  6274                           
  6275                           ;ST7735_TFT.c: 321: write_command(0x20);
  6276  000C1C  0E20               	movlw	32
  6277  000C1E  EC93  F00C         	call	_write_command
  6278                           
  6279                           ;ST7735_TFT.c: 322: write_command(0x36);
  6280  000C22  0E36               	movlw	54
  6281  000C24  EC93  F00C         	call	_write_command
  6282                           
  6283                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6284  000C28  0EC8               	movlw	200
  6285  000C2A  EC8B  F00C         	call	_write_data
  6286                           
  6287                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6288  000C2E  0E3A               	movlw	58
  6289  000C30  EC93  F00C         	call	_write_command
  6290                           
  6291                           ;ST7735_TFT.c: 325: write_data(0x05);
  6292  000C34  0E05               	movlw	5
  6293  000C36  EC8B  F00C         	call	_write_data
  6294  000C3A  0012               	return		;funcret
  6295  000C3C                     __end_of_Rcmd1:
  6296                           	opt stack 0
  6297                           tblptru	equ	0xFF8
  6298                           tblptrh	equ	0xFF7
  6299                           tblptrl	equ	0xFF6
  6300                           tablat	equ	0xFF5
  6301                           prodh	equ	0xFF4
  6302                           prodl	equ	0xFF3
  6303                           intcon	equ	0xFF2
  6304                           intcon2	equ	0xFF1
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           postdec1	equ	0xFE5
  6308                           fsr1l	equ	0xFE1
  6309                           indf2	equ	0xFDF
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function _write_data *****************
  6317 ;; Defined at:
  6318 ;;		line 209 in file "ST7735_TFT.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  data_           1    wreg     unsigned char 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  data_           1   18[COMRAM] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;Total ram usage:        1 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    4
  6339 ;; This function calls:
  6340 ;;		_spiwrite
  6341 ;; This function is called by:
  6342 ;;		_Rcmd1
  6343 ;;		_Rcmd2red
  6344 ;;		_Rcmd3
  6345 ;;		_setAddrWindow
  6346 ;;		_drawPixel
  6347 ;;		_TFT_GreenTab_Initialize
  6348 ;;		_Bcmd
  6349 ;;		_setScrollDefinition
  6350 ;;		_Rcmd2green
  6351 ;;		_VerticalScroll
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text26
  6356  001916                     __ptext26:
  6357                           	opt stack 0
  6358  001916                     _write_data:
  6359                           	opt stack 22
  6360                           
  6361                           ;incstack = 0
  6362                           ;write_data@data_ stored from wreg
  6363  001916  6E13               	movwf	write_data@data_,c
  6364                           
  6365                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  6366  001918  9282               	bcf	3970,1,c	;volatile
  6367                           
  6368                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  6369  00191A  8082               	bsf	3970,0,c	;volatile
  6370                           
  6371                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6372  00191C  5013               	movf	write_data@data_,w,c
  6373  00191E  EC4A  F00C         	call	_spiwrite
  6374                           
  6375                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  6376  001922  8282               	bsf	3970,1,c	;volatile
  6377  001924  0012               	return		;funcret
  6378  001926                     __end_of_write_data:
  6379                           	opt stack 0
  6380                           tblptru	equ	0xFF8
  6381                           tblptrh	equ	0xFF7
  6382                           tblptrl	equ	0xFF6
  6383                           tablat	equ	0xFF5
  6384                           prodh	equ	0xFF4
  6385                           prodl	equ	0xFF3
  6386                           intcon	equ	0xFF2
  6387                           intcon2	equ	0xFF1
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           postdec1	equ	0xFE5
  6391                           fsr1l	equ	0xFE1
  6392                           indf2	equ	0xFDF
  6393                           postinc2	equ	0xFDE
  6394                           postdec2	equ	0xFDD
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _write_command *****************
  6400 ;; Defined at:
  6401 ;;		line 198 in file "ST7735_TFT.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  cmd_            1    wreg     unsigned char 
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;  cmd_            1   18[COMRAM] unsigned char 
  6406 ;; Return value:  Size  Location     Type
  6407 ;;		None               void
  6408 ;; Registers used:
  6409 ;;		wreg, status,2, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;Total ram usage:        1 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    4
  6422 ;; This function calls:
  6423 ;;		_spiwrite
  6424 ;; This function is called by:
  6425 ;;		_Rcmd1
  6426 ;;		_Rcmd2red
  6427 ;;		_Rcmd3
  6428 ;;		_setAddrWindow
  6429 ;;		_TFT_GreenTab_Initialize
  6430 ;;		_Bcmd
  6431 ;;		_setScrollDefinition
  6432 ;;		_Rcmd2green
  6433 ;;		_VerticalScroll
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           	psect	text27
  6438  001926                     __ptext27:
  6439                           	opt stack 0
  6440  001926                     _write_command:
  6441                           	opt stack 22
  6442                           
  6443                           ;incstack = 0
  6444                           ;write_command@cmd_ stored from wreg
  6445  001926  6E13               	movwf	write_command@cmd_,c
  6446                           
  6447                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  6448  001928  9282               	bcf	3970,1,c	;volatile
  6449                           
  6450                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  6451  00192A  9082               	bcf	3970,0,c	;volatile
  6452                           
  6453                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6454  00192C  5013               	movf	write_command@cmd_,w,c
  6455  00192E  EC4A  F00C         	call	_spiwrite
  6456                           
  6457                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  6458  001932  8282               	bsf	3970,1,c	;volatile
  6459  001934  0012               	return		;funcret
  6460  001936                     __end_of_write_command:
  6461                           	opt stack 0
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           postinc0	equ	0xFEE
  6471                           wreg	equ	0xFE8
  6472                           postdec1	equ	0xFE5
  6473                           fsr1l	equ	0xFE1
  6474                           indf2	equ	0xFDF
  6475                           postinc2	equ	0xFDE
  6476                           postdec2	equ	0xFDD
  6477                           fsr2h	equ	0xFDA
  6478                           fsr2l	equ	0xFD9
  6479                           status	equ	0xFD8
  6480                           
  6481 ;; *************** function _spiwrite *****************
  6482 ;; Defined at:
  6483 ;;		line 189 in file "ST7735_TFT.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;  spidata         1    wreg     unsigned char 
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;  spidata         1   17[COMRAM] unsigned char 
  6488 ;;  x               1   16[COMRAM] unsigned char 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;		None               void
  6491 ;; Registers used:
  6492 ;;		wreg
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;Total ram usage:        2 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    3
  6505 ;; This function calls:
  6506 ;;		Nothing
  6507 ;; This function is called by:
  6508 ;;		_write_command
  6509 ;;		_write_data
  6510 ;;		_drawFastVLine
  6511 ;;		_fillRectangle
  6512 ;;		_drawFastHLine
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text28
  6517  001894                     __ptext28:
  6518                           	opt stack 0
  6519  001894                     _spiwrite:
  6520                           	opt stack 24
  6521                           
  6522                           ;incstack = 0
  6523                           ;spiwrite@spidata stored from wreg
  6524  001894  6E12               	movwf	spiwrite@spidata,c
  6525                           
  6526                           ;ST7735_TFT.c: 191: char x;
  6527                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6528  001896  969E               	bcf	3998,3,c	;volatile
  6529                           
  6530                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6531  001898  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6532                           
  6533                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6534  00189C  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6535                           
  6536                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6537  0018A0  D000               	goto	l234
  6538  0018A2                     l234:
  6539  0018A2  A0C7               	btfss	4039,0,c	;volatile
  6540  0018A4  D7FE               	goto	l234
  6541  0018A6  0012               	return		;funcret
  6542  0018A8                     __end_of_spiwrite:
  6543                           	opt stack 0
  6544                           tblptru	equ	0xFF8
  6545                           tblptrh	equ	0xFF7
  6546                           tblptrl	equ	0xFF6
  6547                           tablat	equ	0xFF5
  6548                           prodh	equ	0xFF4
  6549                           prodl	equ	0xFF3
  6550                           intcon	equ	0xFF2
  6551                           intcon2	equ	0xFF1
  6552                           postinc0	equ	0xFEE
  6553                           wreg	equ	0xFE8
  6554                           postdec1	equ	0xFE5
  6555                           fsr1l	equ	0xFE1
  6556                           indf2	equ	0xFDF
  6557                           postinc2	equ	0xFDE
  6558                           postdec2	equ	0xFDD
  6559                           fsr2h	equ	0xFDA
  6560                           fsr2l	equ	0xFD9
  6561                           status	equ	0xFD8
  6562                           
  6563 ;; *************** function _LCD_Reset *****************
  6564 ;; Defined at:
  6565 ;;		line 217 in file "ST7735_TFT.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;		None
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;		None
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;Total ram usage:        0 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    5
  6586 ;; This function calls:
  6587 ;;		_delay_ms
  6588 ;; This function is called by:
  6589 ;;		_Initialize_Screen
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text29
  6594  0018BC                     __ptext29:
  6595                           	opt stack 0
  6596  0018BC                     _LCD_Reset:
  6597                           	opt stack 24
  6598                           
  6599                           ;ST7735_TFT.c: 219: PORTCbits.RC2 = 0;
  6600                           
  6601                           ;incstack = 0
  6602  0018BC  9482               	bcf	3970,2,c	;volatile
  6603                           
  6604                           ;ST7735_TFT.c: 220: delay_ms(100);
  6605  0018BE  0E00               	movlw	0
  6606  0018C0  6E18               	movwf	delay_ms@ms+1,c
  6607  0018C2  0E64               	movlw	100
  6608  0018C4  6E17               	movwf	delay_ms@ms,c
  6609  0018C6  EC2D  F00A         	call	_delay_ms	;wreg free
  6610                           
  6611                           ;ST7735_TFT.c: 221: PORTCbits.RC2 = 1;
  6612  0018CA  8482               	bsf	3970,2,c	;volatile
  6613  0018CC  0012               	return		;funcret
  6614  0018CE                     __end_of_LCD_Reset:
  6615                           	opt stack 0
  6616                           tblptru	equ	0xFF8
  6617                           tblptrh	equ	0xFF7
  6618                           tblptrl	equ	0xFF6
  6619                           tablat	equ	0xFF5
  6620                           prodh	equ	0xFF4
  6621                           prodl	equ	0xFF3
  6622                           intcon	equ	0xFF2
  6623                           intcon2	equ	0xFF1
  6624                           postinc0	equ	0xFEE
  6625                           wreg	equ	0xFE8
  6626                           postdec1	equ	0xFE5
  6627                           fsr1l	equ	0xFE1
  6628                           indf2	equ	0xFDF
  6629                           postinc2	equ	0xFDE
  6630                           postdec2	equ	0xFDD
  6631                           fsr2h	equ	0xFDA
  6632                           fsr2l	equ	0xFD9
  6633                           status	equ	0xFD8
  6634                           
  6635 ;; *************** function _delay_ms *****************
  6636 ;; Defined at:
  6637 ;;		line 64 in file "ST7735_TFT.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  ms              2   22[COMRAM] int 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  count           2   26[COMRAM] int 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;		None               void
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;Total ram usage:        6 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    4
  6658 ;; This function calls:
  6659 ;;		___wmul
  6660 ;; This function is called by:
  6661 ;;		_LCD_Reset
  6662 ;;		_Rcmd1
  6663 ;;		_Rcmd3
  6664 ;;		_Bcmd
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text30
  6669  00145A                     __ptext30:
  6670                           	opt stack 0
  6671  00145A                     _delay_ms:
  6672                           	opt stack 23
  6673                           
  6674                           ;ST7735_TFT.c: 70: int count;
  6675                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6676                           
  6677                           ;incstack = 0
  6678  00145A  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6679  00145E  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6680  001462  0E00               	movlw	0
  6681  001464  6E14               	movwf	___wmul@multiplicand+1,c
  6682  001466  0EFA               	movlw	250
  6683  001468  6E13               	movwf	___wmul@multiplicand,c
  6684  00146A  ECC7  F00B         	call	___wmul	;wreg free
  6685  00146E  C011  F01B         	movff	?___wmul,delay_ms@count
  6686  001472  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6687                           
  6688                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6689  001476  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6690  00147A  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6691  00147E  1E19               	comf	??_delay_ms,f,c
  6692  001480  1E1A               	comf	??_delay_ms+1,f,c
  6693  001482  4A19               	infsnz	??_delay_ms,f,c
  6694  001484  2A1A               	incf	??_delay_ms+1,f,c
  6695  001486  0EFF               	movlw	255
  6696  001488  2419               	addwf	??_delay_ms,w,c
  6697  00148A  6E1B               	movwf	delay_ms@count,c
  6698  00148C  0EFF               	movlw	255
  6699  00148E  201A               	addwfc	??_delay_ms+1,w,c
  6700  001490  6E1C               	movwf	delay_ms@count+1,c
  6701                           
  6702                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6703  001492  0EB8               	movlw	184
  6704  001494  6EB1               	movwf	4017,c	;volatile
  6705                           
  6706                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6707  001496  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6708                           
  6709                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6710  00149A  501C               	movf	delay_ms@count+1,w,c
  6711  00149C  6EB3               	movwf	4019,c	;volatile
  6712                           
  6713                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6714  00149E  92A1               	bcf	4001,1,c	;volatile
  6715                           
  6716                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6717  0014A0  80B1               	bsf	4017,0,c	;volatile
  6718                           
  6719                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6720  0014A2  D000               	goto	l224
  6721  0014A4                     l224:
  6722  0014A4  A2A1               	btfss	4001,1,c	;volatile
  6723  0014A6  D7FE               	goto	l224
  6724                           
  6725                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6726  0014A8  90B1               	bcf	4017,0,c	;volatile
  6727  0014AA  0012               	return		;funcret
  6728  0014AC                     __end_of_delay_ms:
  6729                           	opt stack 0
  6730                           tblptru	equ	0xFF8
  6731                           tblptrh	equ	0xFF7
  6732                           tblptrl	equ	0xFF6
  6733                           tablat	equ	0xFF5
  6734                           prodh	equ	0xFF4
  6735                           prodl	equ	0xFF3
  6736                           intcon	equ	0xFF2
  6737                           intcon2	equ	0xFF1
  6738                           postinc0	equ	0xFEE
  6739                           wreg	equ	0xFE8
  6740                           postdec1	equ	0xFE5
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function ___wmul *****************
  6750 ;; Defined at:
  6751 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  multiplier      2   16[COMRAM] unsigned int 
  6754 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  product         2   20[COMRAM] unsigned int 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  2   16[COMRAM] unsigned int 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0, prodl, prodh
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;Total ram usage:        6 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    3
  6773 ;; This function calls:
  6774 ;;		Nothing
  6775 ;; This function is called by:
  6776 ;;		_delay_ms
  6777 ;;		_drawChar
  6778 ;;		_main
  6779 ;;		_printf
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text31
  6784  00178E                     __ptext31:
  6785                           	opt stack 0
  6786  00178E                     ___wmul:
  6787                           	opt stack 26
  6788                           
  6789                           ;incstack = 0
  6790  00178E  5011               	movf	___wmul@multiplier,w,c
  6791  001790  0213               	mulwf	___wmul@multiplicand,c
  6792  001792  CFF3 F015          	movff	prodl,___wmul@product
  6793  001796  CFF4 F016          	movff	prodh,___wmul@product+1
  6794  00179A  5011               	movf	___wmul@multiplier,w,c
  6795  00179C  0214               	mulwf	___wmul@multiplicand+1,c
  6796  00179E  50F3               	movf	prodl,w,c
  6797  0017A0  2616               	addwf	___wmul@product+1,f,c
  6798  0017A2  5012               	movf	___wmul@multiplier+1,w,c
  6799  0017A4  0213               	mulwf	___wmul@multiplicand,c
  6800  0017A6  50F3               	movf	prodl,w,c
  6801  0017A8  2616               	addwf	___wmul@product+1,f,c
  6802  0017AA  C015  F011         	movff	___wmul@product,?___wmul
  6803  0017AE  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6804  0017B2  D000               	goto	l698
  6805  0017B4                     l698:
  6806  0017B4  0012               	return		;funcret
  6807  0017B6                     __end_of___wmul:
  6808                           	opt stack 0
  6809                           tblptru	equ	0xFF8
  6810                           tblptrh	equ	0xFF7
  6811                           tblptrl	equ	0xFF6
  6812                           tablat	equ	0xFF5
  6813                           prodh	equ	0xFF4
  6814                           prodl	equ	0xFF3
  6815                           intcon	equ	0xFF2
  6816                           intcon2	equ	0xFF1
  6817                           postinc0	equ	0xFEE
  6818                           wreg	equ	0xFE8
  6819                           postdec1	equ	0xFE5
  6820                           fsr1l	equ	0xFE1
  6821                           indf2	equ	0xFDF
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function _Do_Init *****************
  6829 ;; Defined at:
  6830 ;;		line 136 in file "Lab11p4.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;		None
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;		None
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, status,2, status,0, cstack
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;Total ram usage:        0 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    7
  6851 ;; This function calls:
  6852 ;;		_DS1621_Init
  6853 ;;		_I2C_Init
  6854 ;;		_init_INTERRUPT
  6855 ;;		_init_UART
  6856 ;; This function is called by:
  6857 ;;		_main
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text32
  6862  0015D8                     __ptext32:
  6863                           	opt stack 0
  6864  0015D8                     _Do_Init:
  6865                           	opt stack 23
  6866                           
  6867                           ;Lab11p4.c: 138: init_UART();
  6868                           
  6869                           ;incstack = 0
  6870  0015D8  EC54  F00C         	call	_init_UART	;wreg free
  6871                           
  6872                           ;Lab11p4.c: 139: init_INTERRUPT();
  6873  0015DC  EC33  F00C         	call	_init_INTERRUPT	;wreg free
  6874                           
  6875                           ;Lab11p4.c: 140: OSCCON=0x70;
  6876  0015E0  0E70               	movlw	112
  6877  0015E2  6ED3               	movwf	4051,c	;volatile
  6878                           
  6879                           ;Lab11p4.c: 142: ADCON1= 0x0F;
  6880  0015E4  0E0F               	movlw	15
  6881  0015E6  6EC1               	movwf	4033,c	;volatile
  6882                           
  6883                           ;Lab11p4.c: 143: TRISA = 0x00;
  6884  0015E8  0E00               	movlw	0
  6885  0015EA  6E92               	movwf	3986,c	;volatile
  6886                           
  6887                           ;Lab11p4.c: 144: TRISB = 0x11;
  6888  0015EC  0E11               	movlw	17
  6889  0015EE  6E93               	movwf	3987,c	;volatile
  6890                           
  6891                           ;Lab11p4.c: 145: TRISC = 0x00;
  6892  0015F0  0E00               	movlw	0
  6893  0015F2  6E94               	movwf	3988,c	;volatile
  6894                           
  6895                           ;Lab11p4.c: 146: TRISD = 0x80;
  6896  0015F4  0E80               	movlw	128
  6897  0015F6  6E95               	movwf	3989,c	;volatile
  6898                           
  6899                           ;Lab11p4.c: 147: TRISE = 0x00;
  6900  0015F8  0E00               	movlw	0
  6901  0015FA  6E96               	movwf	3990,c	;volatile
  6902                           
  6903                           ;Lab11p4.c: 148: RBPU=0;
  6904  0015FC  9EF1               	bcf	intcon2,7,c	;volatile
  6905                           
  6906                           ;Lab11p4.c: 149: I2C_Init(100000);
  6907  0015FE  0EA0               	movlw	160
  6908  001600  6E11               	movwf	I2C_Init@c,c
  6909  001602  0E86               	movlw	134
  6910  001604  6E12               	movwf	I2C_Init@c+1,c
  6911  001606  0E01               	movlw	1
  6912  001608  6E13               	movwf	I2C_Init@c+2,c
  6913  00160A  0E00               	movlw	0
  6914  00160C  6E14               	movwf	I2C_Init@c+3,c
  6915  00160E  ECAE  F00C         	call	_I2C_Init	;wreg free
  6916                           
  6917                           ;Lab11p4.c: 151: DS1621_Init();
  6918  001612  ECFC  F00B         	call	_DS1621_Init	;wreg free
  6919  001616  0012               	return		;funcret
  6920  001618                     __end_of_Do_Init:
  6921                           	opt stack 0
  6922                           tblptru	equ	0xFF8
  6923                           tblptrh	equ	0xFF7
  6924                           tblptrl	equ	0xFF6
  6925                           tablat	equ	0xFF5
  6926                           prodh	equ	0xFF4
  6927                           prodl	equ	0xFF3
  6928                           intcon	equ	0xFF2
  6929                           intcon2	equ	0xFF1
  6930                           postinc0	equ	0xFEE
  6931                           wreg	equ	0xFE8
  6932                           postdec1	equ	0xFE5
  6933                           fsr1l	equ	0xFE1
  6934                           indf2	equ	0xFDF
  6935                           postinc2	equ	0xFDE
  6936                           postdec2	equ	0xFDD
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           
  6941 ;; *************** function _init_UART *****************
  6942 ;; Defined at:
  6943 ;;		line 121 in file "Lab11p4.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;		None               void
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;Total ram usage:        0 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    4
  6964 ;; This function calls:
  6965 ;;		_OpenUSART
  6966 ;; This function is called by:
  6967 ;;		_Do_Init
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text33
  6972  0018A8                     __ptext33:
  6973                           	opt stack 0
  6974  0018A8                     _init_UART:
  6975                           	opt stack 25
  6976                           
  6977                           ;Lab11p4.c: 123: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 &
  6978                           ;Lab11p4.c: 124: 0b11111101 & 0b11111111 & 0b11111111, 25);
  6979                           
  6980                           ;incstack = 0
  6981  0018A8  0E00               	movlw	0
  6982  0018AA  6E12               	movwf	OpenUSART@spbrg+1,c
  6983  0018AC  0E19               	movlw	25
  6984  0018AE  6E11               	movwf	OpenUSART@spbrg,c
  6985  0018B0  0E3C               	movlw	60
  6986  0018B2  EC1A  F009         	call	_OpenUSART
  6987                           
  6988                           ;Lab11p4.c: 125: OSCCON = 0x70;
  6989  0018B6  0E70               	movlw	112
  6990  0018B8  6ED3               	movwf	4051,c	;volatile
  6991  0018BA  0012               	return		;funcret
  6992  0018BC                     __end_of_init_UART:
  6993                           	opt stack 0
  6994                           tblptru	equ	0xFF8
  6995                           tblptrh	equ	0xFF7
  6996                           tblptrl	equ	0xFF6
  6997                           tablat	equ	0xFF5
  6998                           prodh	equ	0xFF4
  6999                           prodl	equ	0xFF3
  7000                           intcon	equ	0xFF2
  7001                           intcon2	equ	0xFF1
  7002                           postinc0	equ	0xFEE
  7003                           wreg	equ	0xFE8
  7004                           postdec1	equ	0xFE5
  7005                           fsr1l	equ	0xFE1
  7006                           indf2	equ	0xFDF
  7007                           postinc2	equ	0xFDE
  7008                           postdec2	equ	0xFDD
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function _OpenUSART *****************
  7014 ;; Defined at:
  7015 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  config          1    wreg     unsigned char 
  7018 ;;  spbrg           2   16[COMRAM] unsigned int 
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;  config          1   18[COMRAM] unsigned char 
  7021 ;; Return value:  Size  Location     Type
  7022 ;;		None               void
  7023 ;; Registers used:
  7024 ;;		wreg, status,2
  7025 ;; Tracked objects:
  7026 ;;		On entry : 0/0
  7027 ;;		On exit  : 0/0
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7030 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;Total ram usage:        3 bytes
  7035 ;; Hardware stack levels used:    1
  7036 ;; Hardware stack levels required when called:    3
  7037 ;; This function calls:
  7038 ;;		Nothing
  7039 ;; This function is called by:
  7040 ;;		_init_UART
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text34
  7045  001234                     __ptext34:
  7046                           	opt stack 0
  7047  001234                     _OpenUSART:
  7048                           	opt stack 25
  7049                           
  7050                           ;incstack = 0
  7051                           ;OpenUSART@config stored from wreg
  7052  001234  6E13               	movwf	OpenUSART@config,c
  7053  001236  0E00               	movlw	0
  7054  001238  6EAC               	movwf	4012,c	;volatile
  7055  00123A  0E00               	movlw	0
  7056  00123C  6EAB               	movwf	4011,c	;volatile
  7057  00123E  A013               	btfss	OpenUSART@config,0,c
  7058  001240  D002               	goto	l4430
  7059  001242  88AC               	bsf	4012,4,c	;volatile
  7060  001244  D000               	goto	l4430
  7061  001246                     l4430:
  7062  001246  A213               	btfss	OpenUSART@config,1,c
  7063  001248  D003               	goto	l4434
  7064  00124A  8CAC               	bsf	4012,6,c	;volatile
  7065  00124C  8CAB               	bsf	4011,6,c	;volatile
  7066  00124E  D000               	goto	l4434
  7067  001250                     l4434:
  7068  001250  A413               	btfss	OpenUSART@config,2,c
  7069  001252  D002               	goto	l4438
  7070  001254  8EAC               	bsf	4012,7,c	;volatile
  7071  001256  D000               	goto	l4438
  7072  001258                     l4438:
  7073  001258  A613               	btfss	OpenUSART@config,3,c
  7074  00125A  D002               	goto	l686
  7075  00125C  88AB               	bsf	4011,4,c	;volatile
  7076  00125E  D002               	goto	l4442
  7077  001260                     l686:
  7078  001260  8AAB               	bsf	4011,5,c	;volatile
  7079  001262  D000               	goto	l4442
  7080  001264                     l4442:
  7081  001264  B813               	btfsc	OpenUSART@config,4,c
  7082  001266  84AC               	bsf	4012,2,c	;volatile
  7083  001268  989E               	bcf	3998,4,c	;volatile
  7084  00126A  AA13               	btfss	OpenUSART@config,5,c
  7085  00126C  D002               	goto	l4450
  7086  00126E  86AB               	bsf	4011,3,c	;volatile
  7087  001270  D000               	goto	l4450
  7088  001272                     l4450:
  7089  001272  AC13               	btfss	OpenUSART@config,6,c
  7090  001274  D002               	goto	l690
  7091  001276  8A9D               	bsf	3997,5,c	;volatile
  7092  001278  D001               	goto	l691
  7093  00127A                     l690:
  7094  00127A  9A9D               	bcf	3997,5,c	;volatile
  7095  00127C                     l691:
  7096  00127C  9A9E               	bcf	3998,5,c	;volatile
  7097  00127E  AE13               	btfss	OpenUSART@config,7,c
  7098  001280  D002               	goto	l692
  7099  001282  889D               	bsf	3997,4,c	;volatile
  7100  001284  D001               	goto	l693
  7101  001286                     l692:
  7102  001286  989D               	bcf	3997,4,c	;volatile
  7103  001288                     l693:
  7104  001288  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7105  00128C  5012               	movf	OpenUSART@spbrg+1,w,c
  7106  00128E  6EB0               	movwf	4016,c	;volatile
  7107  001290  8AAC               	bsf	4012,5,c	;volatile
  7108  001292  8EAB               	bsf	4011,7,c	;volatile
  7109  001294  9C94               	bcf	3988,6,c	;volatile
  7110  001296  8E94               	bsf	3988,7,c	;volatile
  7111  001298  B8AC               	btfsc	4012,4,c	;volatile
  7112  00129A  BEAC               	btfsc	4012,7,c	;volatile
  7113  00129C  D002               	goto	l695
  7114  00129E  8C94               	bsf	3988,6,c	;volatile
  7115  0012A0  D000               	goto	l695
  7116  0012A2                     l695:
  7117  0012A2  0012               	return		;funcret
  7118  0012A4                     __end_of_OpenUSART:
  7119                           	opt stack 0
  7120                           tblptru	equ	0xFF8
  7121                           tblptrh	equ	0xFF7
  7122                           tblptrl	equ	0xFF6
  7123                           tablat	equ	0xFF5
  7124                           prodh	equ	0xFF4
  7125                           prodl	equ	0xFF3
  7126                           intcon	equ	0xFF2
  7127                           intcon2	equ	0xFF1
  7128                           postinc0	equ	0xFEE
  7129                           wreg	equ	0xFE8
  7130                           postdec1	equ	0xFE5
  7131                           fsr1l	equ	0xFE1
  7132                           indf2	equ	0xFDF
  7133                           postinc2	equ	0xFDE
  7134                           postdec2	equ	0xFDD
  7135                           fsr2h	equ	0xFDA
  7136                           fsr2l	equ	0xFD9
  7137                           status	equ	0xFD8
  7138                           
  7139 ;; *************** function _init_INTERRUPT *****************
  7140 ;; Defined at:
  7141 ;;		line 13 in file "Interrupt.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;		None
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;		None               void
  7148 ;; Registers used:
  7149 ;;		wreg, status,2
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;Total ram usage:        0 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    3
  7162 ;; This function calls:
  7163 ;;		Nothing
  7164 ;; This function is called by:
  7165 ;;		_Do_Init
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text35
  7170  001866                     __ptext35:
  7171                           	opt stack 0
  7172  001866                     _init_INTERRUPT:
  7173                           	opt stack 26
  7174                           
  7175                           ;Interrupt.c: 15: INTCONbits.INT0IF = 0;
  7176                           
  7177                           ;incstack = 0
  7178  001866  92F2               	bcf	intcon,1,c	;volatile
  7179                           
  7180                           ;Interrupt.c: 16: INTCON2bits.INTEDG0 = 0;
  7181  001868  9CF1               	bcf	intcon2,6,c	;volatile
  7182                           
  7183                           ;Interrupt.c: 17: INTCONbits.INT0IE = 1;
  7184  00186A  88F2               	bsf	intcon,4,c	;volatile
  7185                           
  7186                           ;Interrupt.c: 18: TMR1H = 0;
  7187  00186C  0E00               	movlw	0
  7188  00186E  6ECF               	movwf	4047,c	;volatile
  7189                           
  7190                           ;Interrupt.c: 19: TMR1L = 0;
  7191  001870  0E00               	movlw	0
  7192  001872  6ECE               	movwf	4046,c	;volatile
  7193                           
  7194                           ;Interrupt.c: 20: PIR1bits.TMR1IF = 0;
  7195  001874  909E               	bcf	3998,0,c	;volatile
  7196                           
  7197                           ;Interrupt.c: 21: PIE1bits.TMR1IE = 1;
  7198  001876  809D               	bsf	3997,0,c	;volatile
  7199                           
  7200                           ;Interrupt.c: 22: INTCONbits.PEIE = 1;
  7201  001878  8CF2               	bsf	intcon,6,c	;volatile
  7202                           
  7203                           ;Interrupt.c: 23: INTCONbits.GIE = 1;
  7204  00187A  8EF2               	bsf	intcon,7,c	;volatile
  7205  00187C  0012               	return		;funcret
  7206  00187E                     __end_of_init_INTERRUPT:
  7207                           	opt stack 0
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           intcon2	equ	0xFF1
  7216                           postinc0	equ	0xFEE
  7217                           wreg	equ	0xFE8
  7218                           postdec1	equ	0xFE5
  7219                           fsr1l	equ	0xFE1
  7220                           indf2	equ	0xFDF
  7221                           postinc2	equ	0xFDE
  7222                           postdec2	equ	0xFDD
  7223                           fsr2h	equ	0xFDA
  7224                           fsr2l	equ	0xFD9
  7225                           status	equ	0xFD8
  7226                           
  7227 ;; *************** function _I2C_Init *****************
  7228 ;; Defined at:
  7229 ;;		line 14 in file "I2C_Soft.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  c               4   16[COMRAM] unsigned long 
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;		None
  7234 ;; Return value:  Size  Location     Type
  7235 ;;		None               void
  7236 ;; Registers used:
  7237 ;;		wreg, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7243 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;Total ram usage:        4 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    4
  7250 ;; This function calls:
  7251 ;;		_i2cHighScl
  7252 ;;		_i2cHighSda
  7253 ;; This function is called by:
  7254 ;;		_Do_Init
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text36
  7259  00195C                     __ptext36:
  7260                           	opt stack 0
  7261  00195C                     _I2C_Init:
  7262                           	opt stack 25
  7263                           
  7264                           ;I2C_Soft.c: 16: i2cHighScl();
  7265                           
  7266                           ;incstack = 0
  7267  00195C  ECA2  F00C         	call	_i2cHighScl	;wreg free
  7268                           
  7269                           ;I2C_Soft.c: 17: i2cHighSda();
  7270  001960  ECC5  F00C         	call	_i2cHighSda	;wreg free
  7271  001964  0012               	return		;funcret
  7272  001966                     __end_of_I2C_Init:
  7273                           	opt stack 0
  7274                           tblptru	equ	0xFF8
  7275                           tblptrh	equ	0xFF7
  7276                           tblptrl	equ	0xFF6
  7277                           tablat	equ	0xFF5
  7278                           prodh	equ	0xFF4
  7279                           prodl	equ	0xFF3
  7280                           intcon	equ	0xFF2
  7281                           intcon2	equ	0xFF1
  7282                           postinc0	equ	0xFEE
  7283                           wreg	equ	0xFE8
  7284                           postdec1	equ	0xFE5
  7285                           fsr1l	equ	0xFE1
  7286                           indf2	equ	0xFDF
  7287                           postinc2	equ	0xFDE
  7288                           postdec2	equ	0xFDD
  7289                           fsr2h	equ	0xFDA
  7290                           fsr2l	equ	0xFD9
  7291                           status	equ	0xFD8
  7292                           
  7293 ;; *************** function _DS1621_Init *****************
  7294 ;; Defined at:
  7295 ;;		line 21 in file "I2C_Support.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;  Device          1   21[COMRAM] unsigned char 
  7300 ;; Return value:  Size  Location     Type
  7301 ;;		None               void
  7302 ;; Registers used:
  7303 ;;		wreg, status,2, status,0, cstack
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;Total ram usage:        1 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    6
  7316 ;; This function calls:
  7317 ;;		_I2C_Write_Cmd_Only
  7318 ;;		_I2C_Write_Cmd_Write_Data
  7319 ;; This function is called by:
  7320 ;;		_Do_Init
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           	psect	text37
  7325  0017F8                     __ptext37:
  7326                           	opt stack 0
  7327  0017F8                     _DS1621_Init:
  7328                           	opt stack 23
  7329                           
  7330                           ;I2C_Support.c: 23: char Device = 0x48;
  7331                           
  7332                           ;incstack = 0
  7333  0017F8  0E48               	movlw	72
  7334  0017FA  6E16               	movwf	DS1621_Init@Device,c
  7335                           
  7336                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7337  0017FC  0EAC               	movlw	172
  7338  0017FE  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7339  001800  0E02               	movlw	2
  7340  001802  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7341  001804  5016               	movf	DS1621_Init@Device,w,c
  7342  001806  ECEC  F00B         	call	_I2C_Write_Cmd_Write_Data
  7343                           
  7344                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7345  00180A  0EEE               	movlw	238
  7346  00180C  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7347  00180E  5016               	movf	DS1621_Init@Device,w,c
  7348  001810  EC26  F00C         	call	_I2C_Write_Cmd_Only
  7349  001814  0012               	return		;funcret
  7350  001816                     __end_of_DS1621_Init:
  7351                           	opt stack 0
  7352                           tblptru	equ	0xFF8
  7353                           tblptrh	equ	0xFF7
  7354                           tblptrl	equ	0xFF6
  7355                           tablat	equ	0xFF5
  7356                           prodh	equ	0xFF4
  7357                           prodl	equ	0xFF3
  7358                           intcon	equ	0xFF2
  7359                           intcon2	equ	0xFF1
  7360                           postinc0	equ	0xFEE
  7361                           wreg	equ	0xFE8
  7362                           postdec1	equ	0xFE5
  7363                           fsr1l	equ	0xFE1
  7364                           indf2	equ	0xFDF
  7365                           postinc2	equ	0xFDE
  7366                           postdec2	equ	0xFDD
  7367                           fsr2h	equ	0xFDA
  7368                           fsr2l	equ	0xFD9
  7369                           status	equ	0xFD8
  7370                           
  7371 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7372 ;; Defined at:
  7373 ;;		line 152 in file "I2C_Soft.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;  Device          1    wreg     unsigned char 
  7376 ;;  Cmd             1   18[COMRAM] unsigned char 
  7377 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  Device          1   20[COMRAM] unsigned char 
  7380 ;; Return value:  Size  Location     Type
  7381 ;;		None               void
  7382 ;; Registers used:
  7383 ;;		wreg, status,2, status,0, cstack
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7389 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7392 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;Total ram usage:        3 bytes
  7394 ;; Hardware stack levels used:    1
  7395 ;; Hardware stack levels required when called:    5
  7396 ;; This function calls:
  7397 ;;		_I2C_Start
  7398 ;;		_I2C_Stop
  7399 ;;		_I2C_Write
  7400 ;; This function is called by:
  7401 ;;		_DS1621_Init
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           	psect	text38
  7406  0017D8                     __ptext38:
  7407                           	opt stack 0
  7408  0017D8                     _I2C_Write_Cmd_Write_Data:
  7409                           	opt stack 23
  7410                           
  7411                           ;incstack = 0
  7412                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7413  0017D8  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7414                           
  7415                           ;I2C_Soft.c: 154: I2C_Start();
  7416  0017DA  EC70  F00C         	call	_I2C_Start	;wreg free
  7417                           
  7418                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  7419  0017DE  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7420  0017E0  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7421  0017E2  EC4A  F00B         	call	_I2C_Write
  7422                           
  7423                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  7424  0017E6  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7425  0017E8  EC4A  F00B         	call	_I2C_Write
  7426                           
  7427                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  7428  0017EC  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7429  0017EE  EC4A  F00B         	call	_I2C_Write
  7430                           
  7431                           ;I2C_Soft.c: 158: I2C_Stop();
  7432  0017F2  EC67  F00C         	call	_I2C_Stop	;wreg free
  7433  0017F6  0012               	return		;funcret
  7434  0017F8                     __end_of_I2C_Write_Cmd_Write_Data:
  7435                           	opt stack 0
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           intcon2	equ	0xFF1
  7444                           postinc0	equ	0xFEE
  7445                           wreg	equ	0xFE8
  7446                           postdec1	equ	0xFE5
  7447                           fsr1l	equ	0xFE1
  7448                           indf2	equ	0xFDF
  7449                           postinc2	equ	0xFDE
  7450                           postdec2	equ	0xFDD
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455 ;; *************** function _I2C_Write_Cmd_Only *****************
  7456 ;; Defined at:
  7457 ;;		line 144 in file "I2C_Soft.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  Device          1    wreg     unsigned char 
  7460 ;;  Cmd             1   18[COMRAM] unsigned char 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  Device          1   19[COMRAM] unsigned char 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;		None               void
  7465 ;; Registers used:
  7466 ;;		wreg, status,2, status,0, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7472 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;Total ram usage:        2 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    5
  7479 ;; This function calls:
  7480 ;;		_I2C_Start
  7481 ;;		_I2C_Stop
  7482 ;;		_I2C_Write
  7483 ;; This function is called by:
  7484 ;;		_DS1621_Init
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text39
  7489  00184C                     __ptext39:
  7490                           	opt stack 0
  7491  00184C                     _I2C_Write_Cmd_Only:
  7492                           	opt stack 23
  7493                           
  7494                           ;incstack = 0
  7495                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7496  00184C  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7497                           
  7498                           ;I2C_Soft.c: 146: I2C_Start();
  7499  00184E  EC70  F00C         	call	_I2C_Start	;wreg free
  7500                           
  7501                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  7502  001852  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7503  001854  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7504  001856  EC4A  F00B         	call	_I2C_Write
  7505                           
  7506                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  7507  00185A  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7508  00185C  EC4A  F00B         	call	_I2C_Write
  7509                           
  7510                           ;I2C_Soft.c: 149: I2C_Stop();
  7511  001860  EC67  F00C         	call	_I2C_Stop	;wreg free
  7512  001864  0012               	return		;funcret
  7513  001866                     __end_of_I2C_Write_Cmd_Only:
  7514                           	opt stack 0
  7515                           tblptru	equ	0xFF8
  7516                           tblptrh	equ	0xFF7
  7517                           tblptrl	equ	0xFF6
  7518                           tablat	equ	0xFF5
  7519                           prodh	equ	0xFF4
  7520                           prodl	equ	0xFF3
  7521                           intcon	equ	0xFF2
  7522                           intcon2	equ	0xFF1
  7523                           postinc0	equ	0xFEE
  7524                           wreg	equ	0xFE8
  7525                           postdec1	equ	0xFE5
  7526                           fsr1l	equ	0xFE1
  7527                           indf2	equ	0xFDF
  7528                           postinc2	equ	0xFDE
  7529                           postdec2	equ	0xFDD
  7530                           fsr2h	equ	0xFDA
  7531                           fsr2l	equ	0xFD9
  7532                           status	equ	0xFD8
  7533                           
  7534 ;; *************** function _Deactivate_Buzzer *****************
  7535 ;; Defined at:
  7536 ;;		line 233 in file "Lab11p4.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;		None
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;		None               void
  7543 ;; Registers used:
  7544 ;;		wreg, status,2
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;Total ram usage:        0 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:    3
  7557 ;; This function calls:
  7558 ;;		Nothing
  7559 ;; This function is called by:
  7560 ;;		_main
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text40
  7565  00197A                     __ptext40:
  7566                           	opt stack 0
  7567  00197A                     _Deactivate_Buzzer:
  7568                           	opt stack 27
  7569                           
  7570                           ;Lab11p4.c: 235: CCP2CON = 0x0;
  7571                           
  7572                           ;incstack = 0
  7573  00197A  0E00               	movlw	0
  7574  00197C  6EBA               	movwf	4026,c	;volatile
  7575                           
  7576                           ;Lab11p4.c: 236: PORTBbits.RB3 = 0;
  7577  00197E  9681               	bcf	3969,3,c	;volatile
  7578  001980  0012               	return		;funcret
  7579  001982                     __end_of_Deactivate_Buzzer:
  7580                           	opt stack 0
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           prodh	equ	0xFF4
  7586                           prodl	equ	0xFF3
  7587                           intcon	equ	0xFF2
  7588                           intcon2	equ	0xFF1
  7589                           postinc0	equ	0xFEE
  7590                           wreg	equ	0xFE8
  7591                           postdec1	equ	0xFE5
  7592                           fsr1l	equ	0xFE1
  7593                           indf2	equ	0xFDF
  7594                           postinc2	equ	0xFDE
  7595                           postdec2	equ	0xFDD
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600 ;; *************** function _DS3231_Setup_Time *****************
  7601 ;; Defined at:
  7602 ;;		line 65 in file "I2C_Support.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;		None
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;		None
  7607 ;; Return value:  Size  Location     Type
  7608 ;;		None               void
  7609 ;; Registers used:
  7610 ;;		wreg, status,2, status,0, cstack
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;Total ram usage:        0 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; Hardware stack levels required when called:    5
  7623 ;; This function calls:
  7624 ;;		_I2C_Start
  7625 ;;		_I2C_Stop
  7626 ;;		_I2C_Write
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text41
  7633  001300                     __ptext41:
  7634                           	opt stack 0
  7635  001300                     _DS3231_Setup_Time:
  7636                           	opt stack 25
  7637                           
  7638                           ;I2C_Support.c: 70: second = 0x00;
  7639                           
  7640                           ;incstack = 0
  7641  001300  0E00               	movlw	0
  7642  001302  6E62               	movwf	_second,c
  7643                           
  7644                           ;I2C_Support.c: 71: minute = 0x01;
  7645  001304  0E01               	movlw	1
  7646  001306  6E5F               	movwf	_minute,c
  7647                           
  7648                           ;I2C_Support.c: 72: hour = 0x02;
  7649  001308  0E02               	movlw	2
  7650  00130A  6E5D               	movwf	_hour,c
  7651                           
  7652                           ;I2C_Support.c: 73: dow = 0x04;
  7653  00130C  0E04               	movlw	4
  7654  00130E  6E5B               	movwf	_dow,c
  7655                           
  7656                           ;I2C_Support.c: 74: day = 0x21;
  7657  001310  0E21               	movlw	33
  7658  001312  6E5A               	movwf	_day,c
  7659                           
  7660                           ;I2C_Support.c: 75: month = 0x04;
  7661  001314  0E04               	movlw	4
  7662  001316  6E60               	movwf	_month,c
  7663                           
  7664                           ;I2C_Support.c: 76: year = 0x22;
  7665  001318  0E22               	movlw	34
  7666  00131A  6E6C               	movwf	_year,c
  7667                           
  7668                           ;I2C_Support.c: 78: I2C_Start();
  7669  00131C  EC70  F00C         	call	_I2C_Start	;wreg free
  7670                           
  7671                           ;I2C_Support.c: 79: I2C_Write((0x68 << 1) | 0);
  7672  001320  0ED0               	movlw	208
  7673  001322  EC4A  F00B         	call	_I2C_Write
  7674                           
  7675                           ;I2C_Support.c: 80: I2C_Write(0x00);
  7676  001326  0E00               	movlw	0
  7677  001328  EC4A  F00B         	call	_I2C_Write
  7678                           
  7679                           ;I2C_Support.c: 81: I2C_Write(second);
  7680  00132C  5062               	movf	_second,w,c
  7681  00132E  EC4A  F00B         	call	_I2C_Write
  7682                           
  7683                           ;I2C_Support.c: 82: I2C_Write(minute);
  7684  001332  505F               	movf	_minute,w,c
  7685  001334  EC4A  F00B         	call	_I2C_Write
  7686                           
  7687                           ;I2C_Support.c: 83: I2C_Write(hour);
  7688  001338  505D               	movf	_hour,w,c
  7689  00133A  EC4A  F00B         	call	_I2C_Write
  7690                           
  7691                           ;I2C_Support.c: 84: I2C_Write(dow);
  7692  00133E  505B               	movf	_dow,w,c
  7693  001340  EC4A  F00B         	call	_I2C_Write
  7694                           
  7695                           ;I2C_Support.c: 85: I2C_Write(day);
  7696  001344  505A               	movf	_day,w,c
  7697  001346  EC4A  F00B         	call	_I2C_Write
  7698                           
  7699                           ;I2C_Support.c: 86: I2C_Write(month);
  7700  00134A  5060               	movf	_month,w,c
  7701  00134C  EC4A  F00B         	call	_I2C_Write
  7702                           
  7703                           ;I2C_Support.c: 87: I2C_Write(year);
  7704  001350  506C               	movf	_year,w,c
  7705  001352  EC4A  F00B         	call	_I2C_Write
  7706                           
  7707                           ;I2C_Support.c: 88: I2C_Stop();
  7708  001356  EC67  F00C         	call	_I2C_Stop	;wreg free
  7709  00135A  0012               	return		;funcret
  7710  00135C                     __end_of_DS3231_Setup_Time:
  7711                           	opt stack 0
  7712                           tblptru	equ	0xFF8
  7713                           tblptrh	equ	0xFF7
  7714                           tblptrl	equ	0xFF6
  7715                           tablat	equ	0xFF5
  7716                           prodh	equ	0xFF4
  7717                           prodl	equ	0xFF3
  7718                           intcon	equ	0xFF2
  7719                           intcon2	equ	0xFF1
  7720                           postinc0	equ	0xFEE
  7721                           wreg	equ	0xFE8
  7722                           postdec1	equ	0xFE5
  7723                           fsr1l	equ	0xFE1
  7724                           indf2	equ	0xFDF
  7725                           postinc2	equ	0xFDE
  7726                           postdec2	equ	0xFDD
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           
  7731 ;; *************** function _DS3231_Read_Time *****************
  7732 ;; Defined at:
  7733 ;;		line 45 in file "I2C_Support.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;		None
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;		None
  7738 ;; Return value:  Size  Location     Type
  7739 ;;		None               void
  7740 ;; Registers used:
  7741 ;;		wreg, status,2, status,0, cstack
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;Total ram usage:        0 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; Hardware stack levels required when called:    6
  7754 ;; This function calls:
  7755 ;;		_I2C_ReStart
  7756 ;;		_I2C_Read
  7757 ;;		_I2C_Start
  7758 ;;		_I2C_Stop
  7759 ;;		_I2C_Write
  7760 ;; This function is called by:
  7761 ;;		_main
  7762 ;; This function uses a non-reentrant model
  7763 ;;
  7764                           
  7765                           	psect	text42
  7766  00135C                     __ptext42:
  7767                           	opt stack 0
  7768  00135C                     _DS3231_Read_Time:
  7769                           	opt stack 24
  7770                           
  7771                           ;I2C_Support.c: 50: I2C_Start();
  7772                           
  7773                           ;incstack = 0
  7774  00135C  EC70  F00C         	call	_I2C_Start	;wreg free
  7775                           
  7776                           ;I2C_Support.c: 51: I2C_Write((0x68 << 1) | 0);
  7777  001360  0ED0               	movlw	208
  7778  001362  EC4A  F00B         	call	_I2C_Write
  7779                           
  7780                           ;I2C_Support.c: 52: I2C_Write(0x00);
  7781  001366  0E00               	movlw	0
  7782  001368  EC4A  F00B         	call	_I2C_Write
  7783                           
  7784                           ;I2C_Support.c: 53: I2C_ReStart();
  7785  00136C  EC3F  F00C         	call	_I2C_ReStart	;wreg free
  7786                           
  7787                           ;I2C_Support.c: 54: I2C_Write((0x68 << 1) | 1);
  7788  001370  0ED1               	movlw	209
  7789  001372  EC4A  F00B         	call	_I2C_Write
  7790                           
  7791                           ;I2C_Support.c: 55: second = I2C_Read(1);
  7792  001376  0E01               	movlw	1
  7793  001378  ECC8  F00A         	call	_I2C_Read
  7794  00137C  6E62               	movwf	_second,c
  7795                           
  7796                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  7797  00137E  0E01               	movlw	1
  7798  001380  ECC8  F00A         	call	_I2C_Read
  7799  001384  6E5F               	movwf	_minute,c
  7800                           
  7801                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  7802  001386  0E01               	movlw	1
  7803  001388  ECC8  F00A         	call	_I2C_Read
  7804  00138C  6E5D               	movwf	_hour,c
  7805                           
  7806                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  7807  00138E  0E01               	movlw	1
  7808  001390  ECC8  F00A         	call	_I2C_Read
  7809  001394  6E5B               	movwf	_dow,c
  7810                           
  7811                           ;I2C_Support.c: 59: day = I2C_Read(1);
  7812  001396  0E01               	movlw	1
  7813  001398  ECC8  F00A         	call	_I2C_Read
  7814  00139C  6E5A               	movwf	_day,c
  7815                           
  7816                           ;I2C_Support.c: 60: month = I2C_Read(1);
  7817  00139E  0E01               	movlw	1
  7818  0013A0  ECC8  F00A         	call	_I2C_Read
  7819  0013A4  6E60               	movwf	_month,c
  7820                           
  7821                           ;I2C_Support.c: 61: year = I2C_Read(0);
  7822  0013A6  0E00               	movlw	0
  7823  0013A8  ECC8  F00A         	call	_I2C_Read
  7824  0013AC  6E6C               	movwf	_year,c
  7825                           
  7826                           ;I2C_Support.c: 62: I2C_Stop();
  7827  0013AE  EC67  F00C         	call	_I2C_Stop	;wreg free
  7828  0013B2  0012               	return		;funcret
  7829  0013B4                     __end_of_DS3231_Read_Time:
  7830                           	opt stack 0
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           intcon	equ	0xFF2
  7838                           intcon2	equ	0xFF1
  7839                           postinc0	equ	0xFEE
  7840                           wreg	equ	0xFE8
  7841                           postdec1	equ	0xFE5
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _DS1621_Read_Temp *****************
  7851 ;; Defined at:
  7852 ;;		line 29 in file "I2C_Support.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  Data_Ret        1   21[COMRAM] unsigned char 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  2   19[COMRAM] int 
  7859 ;; Registers used:
  7860 ;;		wreg, status,2, status,0, cstack
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;Total ram usage:        3 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    6
  7873 ;; This function calls:
  7874 ;;		_I2C_ReStart
  7875 ;;		_I2C_Read
  7876 ;;		_I2C_Start
  7877 ;;		_I2C_Stop
  7878 ;;		_I2C_Write
  7879 ;; This function is called by:
  7880 ;;		_main
  7881 ;; This function uses a non-reentrant model
  7882 ;;
  7883                           
  7884                           	psect	text43
  7885  001734                     __ptext43:
  7886                           	opt stack 0
  7887  001734                     _DS1621_Read_Temp:
  7888                           	opt stack 24
  7889                           
  7890                           ;I2C_Support.c: 34: char Data_Ret;
  7891                           ;I2C_Support.c: 35: I2C_Start();
  7892                           
  7893                           ;incstack = 0
  7894  001734  EC70  F00C         	call	_I2C_Start	;wreg free
  7895                           
  7896                           ;I2C_Support.c: 36: I2C_Write((0x48 << 1) | 0);
  7897  001738  0E90               	movlw	144
  7898  00173A  EC4A  F00B         	call	_I2C_Write
  7899                           
  7900                           ;I2C_Support.c: 37: I2C_Write(0xAA);
  7901  00173E  0EAA               	movlw	170
  7902  001740  EC4A  F00B         	call	_I2C_Write
  7903                           
  7904                           ;I2C_Support.c: 38: I2C_ReStart();
  7905  001744  EC3F  F00C         	call	_I2C_ReStart	;wreg free
  7906                           
  7907                           ;I2C_Support.c: 39: I2C_Write((0x48 << 1) | 1);
  7908  001748  0E91               	movlw	145
  7909  00174A  EC4A  F00B         	call	_I2C_Write
  7910                           
  7911                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  7912  00174E  0E00               	movlw	0
  7913  001750  ECC8  F00A         	call	_I2C_Read
  7914  001754  6E16               	movwf	DS1621_Read_Temp@Data_Ret,c
  7915                           
  7916                           ;I2C_Support.c: 41: I2C_Stop();
  7917  001756  EC67  F00C         	call	_I2C_Stop	;wreg free
  7918                           
  7919                           ;I2C_Support.c: 42: return Data_Ret;
  7920  00175A  C016  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  7921  00175E  6A15               	clrf	?_DS1621_Read_Temp+1,c
  7922  001760  D000               	goto	l117
  7923  001762                     l117:
  7924  001762  0012               	return		;funcret
  7925  001764                     __end_of_DS1621_Read_Temp:
  7926                           	opt stack 0
  7927                           tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           intcon	equ	0xFF2
  7934                           intcon2	equ	0xFF1
  7935                           postinc0	equ	0xFEE
  7936                           wreg	equ	0xFE8
  7937                           postdec1	equ	0xFE5
  7938                           fsr1l	equ	0xFE1
  7939                           indf2	equ	0xFDF
  7940                           postinc2	equ	0xFDE
  7941                           postdec2	equ	0xFDD
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _I2C_Write *****************
  7947 ;; Defined at:
  7948 ;;		line 41 in file "I2C_Soft.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  outByte         1    wreg     unsigned char 
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;  outByte         1   16[COMRAM] unsigned char 
  7953 ;;  n               1   17[COMRAM] unsigned char 
  7954 ;; Return value:  Size  Location     Type
  7955 ;;		None               void
  7956 ;; Registers used:
  7957 ;;		wreg, status,2, status,0, cstack
  7958 ;; Tracked objects:
  7959 ;;		On entry : 0/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7966 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;Total ram usage:        2 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; Hardware stack levels required when called:    4
  7970 ;; This function calls:
  7971 ;;		_i2cHighScl
  7972 ;;		_i2cHighSda
  7973 ;;		_i2cLowScl
  7974 ;;		_i2cLowSda
  7975 ;; This function is called by:
  7976 ;;		_I2C_Write_Cmd_Only
  7977 ;;		_I2C_Write_Cmd_Write_Data
  7978 ;;		_DS1621_Read_Temp
  7979 ;;		_DS3231_Read_Time
  7980 ;;		_DS3231_Setup_Time
  7981 ;;		_I2C_Write_Address_Read_One_Byte
  7982 ;;		_I2C_Write_Address_Write_One_Byte
  7983 ;;		_I2C_Write_Cmd_Read_One_Byte
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           	psect	text44
  7988  001694                     __ptext44:
  7989                           	opt stack 0
  7990  001694                     _I2C_Write:
  7991                           	opt stack 23
  7992                           
  7993                           ;incstack = 0
  7994                           ;I2C_Write@outByte stored from wreg
  7995  001694  6E11               	movwf	I2C_Write@outByte,c
  7996                           
  7997                           ;I2C_Soft.c: 43: unsigned char n;
  7998                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
  7999  001696  0E00               	movlw	0
  8000  001698  6E12               	movwf	I2C_Write@n,c
  8001  00169A                     l4130:
  8002  00169A  0E07               	movlw	7
  8003  00169C  6412               	cpfsgt	I2C_Write@n,c
  8004  00169E  D001               	goto	l37
  8005  0016A0  D011               	goto	l4148
  8006  0016A2                     l37:
  8007                           
  8008                           ;I2C_Soft.c: 45: {
  8009                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
  8010  0016A2  AE11               	btfss	I2C_Write@outByte,7,c
  8011  0016A4  D003               	goto	l4136
  8012  0016A6  ECC5  F00C         	call	_i2cHighSda	;wreg free
  8013  0016AA  D003               	goto	l4138
  8014  0016AC                     l4136:
  8015                           
  8016                           ;I2C_Soft.c: 47: else i2cLowSda();
  8017  0016AC  ECB8  F00C         	call	_i2cLowSda	;wreg free
  8018  0016B0  D000               	goto	l4138
  8019  0016B2                     l4138:
  8020                           
  8021                           ;I2C_Soft.c: 48: i2cHighScl();
  8022  0016B2  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8023                           
  8024                           ;I2C_Soft.c: 49: i2cLowScl();
  8025  0016B6  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8026                           
  8027                           ;I2C_Soft.c: 50: outByte = outByte << 1;
  8028  0016BA  5011               	movf	I2C_Write@outByte,w,c
  8029  0016BC  2411               	addwf	I2C_Write@outByte,w,c
  8030  0016BE  6E11               	movwf	I2C_Write@outByte,c
  8031  0016C0  2A12               	incf	I2C_Write@n,f,c
  8032  0016C2  D7EB               	goto	l4130
  8033  0016C4                     l4148:
  8034                           
  8035                           ;I2C_Soft.c: 51: }
  8036                           ;I2C_Soft.c: 52: i2cHighSda();
  8037  0016C4  ECC5  F00C         	call	_i2cHighSda	;wreg free
  8038                           
  8039                           ;I2C_Soft.c: 53: i2cHighScl();
  8040  0016C8  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8041                           
  8042                           ;I2C_Soft.c: 54: i2cLowScl();
  8043  0016CC  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8044  0016D0  0012               	return		;funcret
  8045  0016D2                     __end_of_I2C_Write:
  8046                           	opt stack 0
  8047                           tblptru	equ	0xFF8
  8048                           tblptrh	equ	0xFF7
  8049                           tblptrl	equ	0xFF6
  8050                           tablat	equ	0xFF5
  8051                           prodh	equ	0xFF4
  8052                           prodl	equ	0xFF3
  8053                           intcon	equ	0xFF2
  8054                           intcon2	equ	0xFF1
  8055                           postinc0	equ	0xFEE
  8056                           wreg	equ	0xFE8
  8057                           postdec1	equ	0xFE5
  8058                           fsr1l	equ	0xFE1
  8059                           indf2	equ	0xFDF
  8060                           postinc2	equ	0xFDE
  8061                           postdec2	equ	0xFDD
  8062                           fsr2h	equ	0xFDA
  8063                           fsr2l	equ	0xFD9
  8064                           status	equ	0xFD8
  8065                           
  8066 ;; *************** function _I2C_Stop *****************
  8067 ;; Defined at:
  8068 ;;		line 88 in file "I2C_Soft.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;		None
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;		None
  8073 ;; Return value:  Size  Location     Type
  8074 ;;		None               void
  8075 ;; Registers used:
  8076 ;;		wreg, cstack
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;Total ram usage:        0 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    4
  8089 ;; This function calls:
  8090 ;;		_i2cHighScl
  8091 ;;		_i2cHighSda
  8092 ;;		_i2cLowScl
  8093 ;;		_i2cLowSda
  8094 ;; This function is called by:
  8095 ;;		_I2C_Write_Cmd_Only
  8096 ;;		_I2C_Write_Cmd_Write_Data
  8097 ;;		_DS1621_Read_Temp
  8098 ;;		_DS3231_Read_Time
  8099 ;;		_DS3231_Setup_Time
  8100 ;;		_I2C_Write_Address_Read_One_Byte
  8101 ;;		_I2C_Write_Address_Write_One_Byte
  8102 ;;		_I2C_Write_Cmd_Read_One_Byte
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text45
  8107  0018CE                     __ptext45:
  8108                           	opt stack 0
  8109  0018CE                     _I2C_Stop:
  8110                           	opt stack 23
  8111                           
  8112                           ;I2C_Soft.c: 90: i2cLowScl();
  8113                           
  8114                           ;incstack = 0
  8115  0018CE  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8116                           
  8117                           ;I2C_Soft.c: 91: i2cLowSda();
  8118  0018D2  ECB8  F00C         	call	_i2cLowSda	;wreg free
  8119                           
  8120                           ;I2C_Soft.c: 92: i2cHighScl();
  8121  0018D6  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8122                           
  8123                           ;I2C_Soft.c: 93: i2cHighSda();
  8124  0018DA  ECC5  F00C         	call	_i2cHighSda	;wreg free
  8125  0018DE  0012               	return		;funcret
  8126  0018E0                     __end_of_I2C_Stop:
  8127                           	opt stack 0
  8128                           tblptru	equ	0xFF8
  8129                           tblptrh	equ	0xFF7
  8130                           tblptrl	equ	0xFF6
  8131                           tablat	equ	0xFF5
  8132                           prodh	equ	0xFF4
  8133                           prodl	equ	0xFF3
  8134                           intcon	equ	0xFF2
  8135                           intcon2	equ	0xFF1
  8136                           postinc0	equ	0xFEE
  8137                           wreg	equ	0xFE8
  8138                           postdec1	equ	0xFE5
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           postdec2	equ	0xFDD
  8143                           fsr2h	equ	0xFDA
  8144                           fsr2l	equ	0xFD9
  8145                           status	equ	0xFD8
  8146                           
  8147 ;; *************** function _I2C_Start *****************
  8148 ;; Defined at:
  8149 ;;		line 71 in file "I2C_Soft.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;		None
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;		None
  8154 ;; Return value:  Size  Location     Type
  8155 ;;		None               void
  8156 ;; Registers used:
  8157 ;;		wreg, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;Total ram usage:        0 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    4
  8170 ;; This function calls:
  8171 ;;		_i2cHighScl
  8172 ;;		_i2cHighSda
  8173 ;;		_i2cLowScl
  8174 ;;		_i2cLowSda
  8175 ;; This function is called by:
  8176 ;;		_I2C_Write_Cmd_Only
  8177 ;;		_I2C_Write_Cmd_Write_Data
  8178 ;;		_DS1621_Read_Temp
  8179 ;;		_DS3231_Read_Time
  8180 ;;		_DS3231_Setup_Time
  8181 ;;		_I2C_Write_Address_Read_One_Byte
  8182 ;;		_I2C_Write_Address_Write_One_Byte
  8183 ;;		_I2C_Write_Cmd_Read_One_Byte
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           	psect	text46
  8188  0018E0                     __ptext46:
  8189                           	opt stack 0
  8190  0018E0                     _I2C_Start:
  8191                           	opt stack 23
  8192                           
  8193                           ;I2C_Soft.c: 73: i2cHighSda();
  8194                           
  8195                           ;incstack = 0
  8196  0018E0  ECC5  F00C         	call	_i2cHighSda	;wreg free
  8197                           
  8198                           ;I2C_Soft.c: 74: i2cHighScl();
  8199  0018E4  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8200                           
  8201                           ;I2C_Soft.c: 75: i2cLowSda();
  8202  0018E8  ECB8  F00C         	call	_i2cLowSda	;wreg free
  8203                           
  8204                           ;I2C_Soft.c: 76: i2cLowScl();
  8205  0018EC  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8206  0018F0  0012               	return		;funcret
  8207  0018F2                     __end_of_I2C_Start:
  8208                           	opt stack 0
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           intcon	equ	0xFF2
  8216                           intcon2	equ	0xFF1
  8217                           postinc0	equ	0xFEE
  8218                           wreg	equ	0xFE8
  8219                           postdec1	equ	0xFE5
  8220                           fsr1l	equ	0xFE1
  8221                           indf2	equ	0xFDF
  8222                           postinc2	equ	0xFDE
  8223                           postdec2	equ	0xFDD
  8224                           fsr2h	equ	0xFDA
  8225                           fsr2l	equ	0xFD9
  8226                           status	equ	0xFD8
  8227                           
  8228 ;; *************** function _I2C_Read *****************
  8229 ;; Defined at:
  8230 ;;		line 20 in file "I2C_Soft.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  ack             1    wreg     unsigned char 
  8233 ;; Auto vars:     Size  Location     Type
  8234 ;;  ack             1   16[COMRAM] unsigned char 
  8235 ;;  inByte          1   18[COMRAM] unsigned char 
  8236 ;;  n               1   17[COMRAM] unsigned char 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  1    wreg      unsigned char 
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0, cstack
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;Total ram usage:        3 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    5
  8253 ;; This function calls:
  8254 ;;		_i2cAck
  8255 ;;		_i2cHighScl
  8256 ;;		_i2cHighSda
  8257 ;;		_i2cLowScl
  8258 ;;		_i2cNack
  8259 ;; This function is called by:
  8260 ;;		_DS1621_Read_Temp
  8261 ;;		_DS3231_Read_Time
  8262 ;;		_I2C_Write_Address_Read_One_Byte
  8263 ;;		_I2C_Write_Cmd_Read_One_Byte
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           	psect	text47
  8268  001590                     __ptext47:
  8269                           	opt stack 0
  8270  001590                     _I2C_Read:
  8271                           	opt stack 24
  8272                           
  8273                           ;incstack = 0
  8274                           ;I2C_Read@ack stored from wreg
  8275  001590  6E11               	movwf	I2C_Read@ack,c
  8276                           
  8277                           ;I2C_Soft.c: 22: unsigned char inByte, n;
  8278                           ;I2C_Soft.c: 23: i2cHighSda();
  8279  001592  ECC5  F00C         	call	_i2cHighSda	;wreg free
  8280                           
  8281                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
  8282  001596  0E00               	movlw	0
  8283  001598  6E12               	movwf	I2C_Read@n,c
  8284  00159A                     l4482:
  8285  00159A  0E07               	movlw	7
  8286  00159C  6412               	cpfsgt	I2C_Read@n,c
  8287  00159E  D001               	goto	l4486
  8288  0015A0  D00F               	goto	l4500
  8289  0015A2                     l4486:
  8290                           
  8291                           ;I2C_Soft.c: 25: {
  8292                           ;I2C_Soft.c: 26: i2cHighScl();
  8293  0015A2  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8294                           
  8295                           ;I2C_Soft.c: 28: if (PORTDbits.RD7)
  8296  0015A6  AE83               	btfss	3971,7,c	;volatile
  8297  0015A8  D003               	goto	l4492
  8298                           
  8299                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
  8300  0015AA  80D8               	bsf	status,0,c
  8301  0015AC  3613               	rlcf	I2C_Read@inByte,f,c
  8302  0015AE  D004               	goto	l4494
  8303  0015B0                     l4492:
  8304                           
  8305                           ;I2C_Soft.c: 30: else
  8306                           ;I2C_Soft.c: 31: inByte = inByte << 1;
  8307  0015B0  5013               	movf	I2C_Read@inByte,w,c
  8308  0015B2  2413               	addwf	I2C_Read@inByte,w,c
  8309  0015B4  6E13               	movwf	I2C_Read@inByte,c
  8310  0015B6  D000               	goto	l4494
  8311  0015B8                     l4494:
  8312                           
  8313                           ;I2C_Soft.c: 32: i2cLowScl();
  8314  0015B8  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8315  0015BC  2A12               	incf	I2C_Read@n,f,c
  8316  0015BE  D7ED               	goto	l4482
  8317  0015C0                     l4500:
  8318                           
  8319                           ;I2C_Soft.c: 33: }
  8320                           ;I2C_Soft.c: 34: if (ack) i2cAck();
  8321  0015C0  5011               	movf	I2C_Read@ack,w,c
  8322  0015C2  B4D8               	btfsc	status,2,c
  8323  0015C4  D003               	goto	l4504
  8324  0015C6  EC79  F00C         	call	_i2cAck	;wreg free
  8325  0015CA  D003               	goto	l4506
  8326  0015CC                     l4504:
  8327                           
  8328                           ;I2C_Soft.c: 35: else i2cNack();
  8329  0015CC  ECB3  F00C         	call	_i2cNack	;wreg free
  8330  0015D0  D000               	goto	l4506
  8331  0015D2                     l4506:
  8332                           
  8333                           ;I2C_Soft.c: 38: return(inByte);
  8334  0015D2  5013               	movf	I2C_Read@inByte,w,c
  8335  0015D4  D000               	goto	l34
  8336  0015D6                     l34:
  8337  0015D6  0012               	return		;funcret
  8338  0015D8                     __end_of_I2C_Read:
  8339                           	opt stack 0
  8340                           tblptru	equ	0xFF8
  8341                           tblptrh	equ	0xFF7
  8342                           tblptrl	equ	0xFF6
  8343                           tablat	equ	0xFF5
  8344                           prodh	equ	0xFF4
  8345                           prodl	equ	0xFF3
  8346                           intcon	equ	0xFF2
  8347                           intcon2	equ	0xFF1
  8348                           postinc0	equ	0xFEE
  8349                           wreg	equ	0xFE8
  8350                           postdec1	equ	0xFE5
  8351                           fsr1l	equ	0xFE1
  8352                           indf2	equ	0xFDF
  8353                           postinc2	equ	0xFDE
  8354                           postdec2	equ	0xFDD
  8355                           fsr2h	equ	0xFDA
  8356                           fsr2l	equ	0xFD9
  8357                           status	equ	0xFD8
  8358                           
  8359 ;; *************** function _i2cNack *****************
  8360 ;; Defined at:
  8361 ;;		line 57 in file "I2C_Soft.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;		None
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;		None
  8366 ;; Return value:  Size  Location     Type
  8367 ;;		None               void
  8368 ;; Registers used:
  8369 ;;		wreg, cstack
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;Total ram usage:        0 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    4
  8382 ;; This function calls:
  8383 ;;		_i2cHighScl
  8384 ;;		_i2cLowScl
  8385 ;; This function is called by:
  8386 ;;		_I2C_Read
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           	psect	text48
  8391  001966                     __ptext48:
  8392                           	opt stack 0
  8393  001966                     _i2cNack:
  8394                           	opt stack 24
  8395                           
  8396                           ;I2C_Soft.c: 59: i2cHighScl();
  8397                           
  8398                           ;incstack = 0
  8399  001966  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8400                           
  8401                           ;I2C_Soft.c: 60: i2cLowScl();
  8402  00196A  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8403  00196E  0012               	return		;funcret
  8404  001970                     __end_of_i2cNack:
  8405                           	opt stack 0
  8406                           tblptru	equ	0xFF8
  8407                           tblptrh	equ	0xFF7
  8408                           tblptrl	equ	0xFF6
  8409                           tablat	equ	0xFF5
  8410                           prodh	equ	0xFF4
  8411                           prodl	equ	0xFF3
  8412                           intcon	equ	0xFF2
  8413                           intcon2	equ	0xFF1
  8414                           postinc0	equ	0xFEE
  8415                           wreg	equ	0xFE8
  8416                           postdec1	equ	0xFE5
  8417                           fsr1l	equ	0xFE1
  8418                           indf2	equ	0xFDF
  8419                           postinc2	equ	0xFDE
  8420                           postdec2	equ	0xFDD
  8421                           fsr2h	equ	0xFDA
  8422                           fsr2l	equ	0xFD9
  8423                           status	equ	0xFD8
  8424                           
  8425 ;; *************** function _i2cAck *****************
  8426 ;; Defined at:
  8427 ;;		line 63 in file "I2C_Soft.c"
  8428 ;; Parameters:    Size  Location     Type
  8429 ;;		None
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;		None
  8432 ;; Return value:  Size  Location     Type
  8433 ;;		None               void
  8434 ;; Registers used:
  8435 ;;		wreg, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;Total ram usage:        0 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    4
  8448 ;; This function calls:
  8449 ;;		_i2cHighScl
  8450 ;;		_i2cHighSda
  8451 ;;		_i2cLowScl
  8452 ;;		_i2cLowSda
  8453 ;; This function is called by:
  8454 ;;		_I2C_Read
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           	psect	text49
  8459  0018F2                     __ptext49:
  8460                           	opt stack 0
  8461  0018F2                     _i2cAck:
  8462                           	opt stack 24
  8463                           
  8464                           ;I2C_Soft.c: 65: i2cLowSda();
  8465                           
  8466                           ;incstack = 0
  8467  0018F2  ECB8  F00C         	call	_i2cLowSda	;wreg free
  8468                           
  8469                           ;I2C_Soft.c: 66: i2cHighScl();
  8470  0018F6  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8471                           
  8472                           ;I2C_Soft.c: 67: i2cLowScl();
  8473  0018FA  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8474                           
  8475                           ;I2C_Soft.c: 68: i2cHighSda();
  8476  0018FE  ECC5  F00C         	call	_i2cHighSda	;wreg free
  8477  001902  0012               	return		;funcret
  8478  001904                     __end_of_i2cAck:
  8479                           	opt stack 0
  8480                           tblptru	equ	0xFF8
  8481                           tblptrh	equ	0xFF7
  8482                           tblptrl	equ	0xFF6
  8483                           tablat	equ	0xFF5
  8484                           prodh	equ	0xFF4
  8485                           prodl	equ	0xFF3
  8486                           intcon	equ	0xFF2
  8487                           intcon2	equ	0xFF1
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           postdec1	equ	0xFE5
  8491                           fsr1l	equ	0xFE1
  8492                           indf2	equ	0xFDF
  8493                           postinc2	equ	0xFDE
  8494                           postdec2	equ	0xFDD
  8495                           fsr2h	equ	0xFDA
  8496                           fsr2l	equ	0xFD9
  8497                           status	equ	0xFD8
  8498                           
  8499 ;; *************** function _I2C_ReStart *****************
  8500 ;; Defined at:
  8501 ;;		line 79 in file "I2C_Soft.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;		None
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;		None
  8506 ;; Return value:  Size  Location     Type
  8507 ;;		None               void
  8508 ;; Registers used:
  8509 ;;		wreg, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;Total ram usage:        0 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    4
  8522 ;; This function calls:
  8523 ;;		_i2cHighScl
  8524 ;;		_i2cHighSda
  8525 ;;		_i2cLowScl
  8526 ;;		_i2cLowSda
  8527 ;; This function is called by:
  8528 ;;		_DS1621_Read_Temp
  8529 ;;		_DS3231_Read_Time
  8530 ;;		_I2C_Write_Address_Read_One_Byte
  8531 ;;		_I2C_Write_Cmd_Read_One_Byte
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           	psect	text50
  8536  00187E                     __ptext50:
  8537                           	opt stack 0
  8538  00187E                     _I2C_ReStart:
  8539                           	opt stack 25
  8540                           
  8541                           ;I2C_Soft.c: 81: i2cLowScl();
  8542                           
  8543                           ;incstack = 0
  8544  00187E  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8545                           
  8546                           ;I2C_Soft.c: 82: i2cHighSda();
  8547  001882  ECC5  F00C         	call	_i2cHighSda	;wreg free
  8548                           
  8549                           ;I2C_Soft.c: 83: i2cHighScl();
  8550  001886  ECA2  F00C         	call	_i2cHighScl	;wreg free
  8551                           
  8552                           ;I2C_Soft.c: 84: i2cLowSda();
  8553  00188A  ECB8  F00C         	call	_i2cLowSda	;wreg free
  8554                           
  8555                           ;I2C_Soft.c: 85: i2cLowScl();
  8556  00188E  ECC1  F00C         	call	_i2cLowScl	;wreg free
  8557  001892  0012               	return		;funcret
  8558  001894                     __end_of_I2C_ReStart:
  8559                           	opt stack 0
  8560                           tblptru	equ	0xFF8
  8561                           tblptrh	equ	0xFF7
  8562                           tblptrl	equ	0xFF6
  8563                           tablat	equ	0xFF5
  8564                           prodh	equ	0xFF4
  8565                           prodl	equ	0xFF3
  8566                           intcon	equ	0xFF2
  8567                           intcon2	equ	0xFF1
  8568                           postinc0	equ	0xFEE
  8569                           wreg	equ	0xFE8
  8570                           postdec1	equ	0xFE5
  8571                           fsr1l	equ	0xFE1
  8572                           indf2	equ	0xFDF
  8573                           postinc2	equ	0xFDE
  8574                           postdec2	equ	0xFDD
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _i2cLowSda *****************
  8580 ;; Defined at:
  8581 ;;		line 102 in file "I2C_Soft.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;		None               void
  8588 ;; Registers used:
  8589 ;;		None
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;Total ram usage:        0 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    3
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_I2C_Write
  8606 ;;		_i2cAck
  8607 ;;		_I2C_Start
  8608 ;;		_I2C_ReStart
  8609 ;;		_I2C_Stop
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text51
  8614  001970                     __ptext51:
  8615                           	opt stack 0
  8616  001970                     _i2cLowSda:
  8617                           	opt stack 23
  8618                           
  8619                           ;I2C_Soft.c: 104: PORTDbits.RD7 = 0;
  8620                           
  8621                           ;incstack = 0
  8622  001970  9E83               	bcf	3971,7,c	;volatile
  8623                           
  8624                           ;I2C_Soft.c: 105: TRISDbits.TRISD7 = 0;
  8625  001972  9E95               	bcf	3989,7,c	;volatile
  8626                           
  8627                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8628  001974  D000               	nop2		;2 cycle nop
  8629  001976  D000               	nop2		;2 cycle nop
  8630  001978  0012               	return		;funcret
  8631  00197A                     __end_of_i2cLowSda:
  8632                           	opt stack 0
  8633                           tblptru	equ	0xFF8
  8634                           tblptrh	equ	0xFF7
  8635                           tblptrl	equ	0xFF6
  8636                           tablat	equ	0xFF5
  8637                           prodh	equ	0xFF4
  8638                           prodl	equ	0xFF3
  8639                           intcon	equ	0xFF2
  8640                           intcon2	equ	0xFF1
  8641                           postinc0	equ	0xFEE
  8642                           wreg	equ	0xFE8
  8643                           postdec1	equ	0xFE5
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _i2cLowScl *****************
  8653 ;; Defined at:
  8654 ;;		line 115 in file "I2C_Soft.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;		None
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;		None
  8659 ;; Return value:  Size  Location     Type
  8660 ;;		None               void
  8661 ;; Registers used:
  8662 ;;		None
  8663 ;; Tracked objects:
  8664 ;;		On entry : 0/0
  8665 ;;		On exit  : 0/0
  8666 ;;		Unchanged: 0/0
  8667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;Total ram usage:        0 bytes
  8673 ;; Hardware stack levels used:    1
  8674 ;; Hardware stack levels required when called:    3
  8675 ;; This function calls:
  8676 ;;		Nothing
  8677 ;; This function is called by:
  8678 ;;		_I2C_Read
  8679 ;;		_I2C_Write
  8680 ;;		_i2cNack
  8681 ;;		_i2cAck
  8682 ;;		_I2C_Start
  8683 ;;		_I2C_ReStart
  8684 ;;		_I2C_Stop
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           	psect	text52
  8689  001982                     __ptext52:
  8690                           	opt stack 0
  8691  001982                     _i2cLowScl:
  8692                           	opt stack 23
  8693                           
  8694                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
  8695                           
  8696                           ;incstack = 0
  8697  001982  9881               	bcf	3969,4,c	;volatile
  8698                           
  8699                           ;I2C_Soft.c: 118: TRISBbits.TRISB4 = 0;
  8700  001984  9893               	bcf	3987,4,c	;volatile
  8701                           
  8702                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8703  001986  D000               	nop2		;2 cycle nop
  8704  001988  0012               	return		;funcret
  8705  00198A                     __end_of_i2cLowScl:
  8706                           	opt stack 0
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           prodh	equ	0xFF4
  8712                           prodl	equ	0xFF3
  8713                           intcon	equ	0xFF2
  8714                           intcon2	equ	0xFF1
  8715                           postinc0	equ	0xFEE
  8716                           wreg	equ	0xFE8
  8717                           postdec1	equ	0xFE5
  8718                           fsr1l	equ	0xFE1
  8719                           indf2	equ	0xFDF
  8720                           postinc2	equ	0xFDE
  8721                           postdec2	equ	0xFDD
  8722                           fsr2h	equ	0xFDA
  8723                           fsr2l	equ	0xFD9
  8724                           status	equ	0xFD8
  8725                           
  8726 ;; *************** function _i2cHighSda *****************
  8727 ;; Defined at:
  8728 ;;		line 96 in file "I2C_Soft.c"
  8729 ;; Parameters:    Size  Location     Type
  8730 ;;		None
  8731 ;; Auto vars:     Size  Location     Type
  8732 ;;		None
  8733 ;; Return value:  Size  Location     Type
  8734 ;;		None               void
  8735 ;; Registers used:
  8736 ;;		None
  8737 ;; Tracked objects:
  8738 ;;		On entry : 0/0
  8739 ;;		On exit  : 0/0
  8740 ;;		Unchanged: 0/0
  8741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;Total ram usage:        0 bytes
  8747 ;; Hardware stack levels used:    1
  8748 ;; Hardware stack levels required when called:    3
  8749 ;; This function calls:
  8750 ;;		Nothing
  8751 ;; This function is called by:
  8752 ;;		_I2C_Init
  8753 ;;		_I2C_Read
  8754 ;;		_I2C_Write
  8755 ;;		_i2cAck
  8756 ;;		_I2C_Start
  8757 ;;		_I2C_ReStart
  8758 ;;		_I2C_Stop
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text53
  8763  00198A                     __ptext53:
  8764                           	opt stack 0
  8765  00198A                     _i2cHighSda:
  8766                           	opt stack 25
  8767                           
  8768                           ;I2C_Soft.c: 98: TRISDbits.TRISD7 = 1;
  8769                           
  8770                           ;incstack = 0
  8771  00198A  8E95               	bsf	3989,7,c	;volatile
  8772                           
  8773                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8774  00198C  D000               	nop2		;2 cycle nop
  8775  00198E  D000               	nop2		;2 cycle nop
  8776  001990  0012               	return		;funcret
  8777  001992                     __end_of_i2cHighSda:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           intcon2	equ	0xFF1
  8787                           postinc0	equ	0xFEE
  8788                           wreg	equ	0xFE8
  8789                           postdec1	equ	0xFE5
  8790                           fsr1l	equ	0xFE1
  8791                           indf2	equ	0xFDF
  8792                           postinc2	equ	0xFDE
  8793                           postdec2	equ	0xFDD
  8794                           fsr2h	equ	0xFDA
  8795                           fsr2l	equ	0xFD9
  8796                           status	equ	0xFD8
  8797                           
  8798 ;; *************** function _i2cHighScl *****************
  8799 ;; Defined at:
  8800 ;;		line 109 in file "I2C_Soft.c"
  8801 ;; Parameters:    Size  Location     Type
  8802 ;;		None
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;		None
  8805 ;; Return value:  Size  Location     Type
  8806 ;;		None               void
  8807 ;; Registers used:
  8808 ;;		wreg
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;Total ram usage:        0 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    3
  8821 ;; This function calls:
  8822 ;;		Nothing
  8823 ;; This function is called by:
  8824 ;;		_I2C_Init
  8825 ;;		_I2C_Read
  8826 ;;		_I2C_Write
  8827 ;;		_i2cNack
  8828 ;;		_i2cAck
  8829 ;;		_I2C_Start
  8830 ;;		_I2C_ReStart
  8831 ;;		_I2C_Stop
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text54
  8836  001944                     __ptext54:
  8837                           	opt stack 0
  8838  001944                     _i2cHighScl:
  8839                           	opt stack 25
  8840                           
  8841                           ;I2C_Soft.c: 111: TRISBbits.TRISB4 = 1;
  8842                           
  8843                           ;incstack = 0
  8844  001944  8893               	bsf	3987,4,c	;volatile
  8845                           
  8846                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8847  001946  0E06               	movlw	6
  8848  001948                     u3897:
  8849  001948  2EE8               	decfsz	wreg,f,c
  8850  00194A  D7FE               	goto	u3897
  8851  00194C  D000               	nop2		;nop
  8852  00194E  0012               	return		;funcret
  8853  001950                     __end_of_i2cHighScl:
  8854                           	opt stack 0
  8855                           tblptru	equ	0xFF8
  8856                           tblptrh	equ	0xFF7
  8857                           tblptrl	equ	0xFF6
  8858                           tablat	equ	0xFF5
  8859                           prodh	equ	0xFF4
  8860                           prodl	equ	0xFF3
  8861                           intcon	equ	0xFF2
  8862                           intcon2	equ	0xFF1
  8863                           postinc0	equ	0xFEE
  8864                           wreg	equ	0xFE8
  8865                           postdec1	equ	0xFE5
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function _Activate_Buzzer *****************
  8875 ;; Defined at:
  8876 ;;		line 225 in file "Lab11p4.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;		None
  8879 ;; Auto vars:     Size  Location     Type
  8880 ;;		None
  8881 ;; Return value:  Size  Location     Type
  8882 ;;		None               void
  8883 ;; Registers used:
  8884 ;;		wreg, status,2
  8885 ;; Tracked objects:
  8886 ;;		On entry : 0/0
  8887 ;;		On exit  : 0/0
  8888 ;;		Unchanged: 0/0
  8889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;Total ram usage:        0 bytes
  8895 ;; Hardware stack levels used:    1
  8896 ;; Hardware stack levels required when called:    3
  8897 ;; This function calls:
  8898 ;;		Nothing
  8899 ;; This function is called by:
  8900 ;;		_main
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text55
  8905  001904                     __ptext55:
  8906                           	opt stack 0
  8907  001904                     _Activate_Buzzer:
  8908                           	opt stack 27
  8909                           
  8910                           ;Lab11p4.c: 227: PR2 = 0b11111001;
  8911                           
  8912                           ;incstack = 0
  8913  001904  0EF9               	movlw	249
  8914  001906  6ECB               	movwf	4043,c	;volatile
  8915                           
  8916                           ;Lab11p4.c: 228: T2CON = 0b00000101;
  8917  001908  0E05               	movlw	5
  8918  00190A  6ECA               	movwf	4042,c	;volatile
  8919                           
  8920                           ;Lab11p4.c: 229: CCPR2L = 0b01001010;
  8921  00190C  0E4A               	movlw	74
  8922  00190E  6EBB               	movwf	4027,c	;volatile
  8923                           
  8924                           ;Lab11p4.c: 230: CCP2CON = 0b00111100;
  8925  001910  0E3C               	movlw	60
  8926  001912  6EBA               	movwf	4026,c	;volatile
  8927  001914  0012               	return		;funcret
  8928  001916                     __end_of_Activate_Buzzer:
  8929                           	opt stack 0
  8930                           tblptru	equ	0xFF8
  8931                           tblptrh	equ	0xFF7
  8932                           tblptrl	equ	0xFF6
  8933                           tablat	equ	0xFF5
  8934                           prodh	equ	0xFF4
  8935                           prodl	equ	0xFF3
  8936                           intcon	equ	0xFF2
  8937                           intcon2	equ	0xFF1
  8938                           postinc0	equ	0xFEE
  8939                           wreg	equ	0xFE8
  8940                           postdec1	equ	0xFE5
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           fsr2h	equ	0xFDA
  8946                           fsr2l	equ	0xFD9
  8947                           status	equ	0xFD8
  8948                           
  8949 ;; *************** function _chkisr *****************
  8950 ;; Defined at:
  8951 ;;		line 26 in file "Interrupt.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;		None
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;		None
  8956 ;; Return value:  Size  Location     Type
  8957 ;;		None               void
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;Total ram usage:       14 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    2
  8972 ;; This function calls:
  8973 ;;		_INT0_isr
  8974 ;;		_TIMER1_isr
  8975 ;; This function is called by:
  8976 ;;		Interrupt level 2
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	intcode
  8981  000008                     __pintcode:
  8982                           	opt stack 0
  8983  000008                     _chkisr:
  8984                           	opt stack 20
  8985                           
  8986                           ;incstack = 0
  8987  000008  CFFA F003          	movff	pclath,??_chkisr
  8988  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  8989  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  8990  000014  ED9F  F008         	call	int_func,f	;refresh shadow registers
  8991                           pclatu	equ	0xFFB
  8992                           pclath	equ	0xFFA
  8993                           tblptru	equ	0xFF8
  8994                           tblptrh	equ	0xFF7
  8995                           tblptrl	equ	0xFF6
  8996                           tablat	equ	0xFF5
  8997                           prodh	equ	0xFF4
  8998                           prodl	equ	0xFF3
  8999                           intcon	equ	0xFF2
  9000                           intcon2	equ	0xFF1
  9001                           postinc0	equ	0xFEE
  9002                           fsr0l	equ	0xFE9
  9003                           wreg	equ	0xFE8
  9004                           postdec1	equ	0xFE5
  9005                           fsr1l	equ	0xFE1
  9006                           indf2	equ	0xFDF
  9007                           postinc2	equ	0xFDE
  9008                           postdec2	equ	0xFDD
  9009                           fsr2h	equ	0xFDA
  9010                           fsr2l	equ	0xFD9
  9011                           status	equ	0xFD8
  9012                           
  9013                           	psect	intcode_body
  9014  00113E                     __pintcode_body:
  9015                           	opt stack 20
  9016  00113E                     int_func:
  9017                           	opt stack 20
  9018  00113E  0006               	pop		; remove dummy address from shadow register refresh
  9019  001140  CFEA F006          	movff	fsr0h,??_chkisr+3
  9020  001144  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9021  001148  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9022  00114C  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9023  001150  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9024  001154  CFF3 F00B          	movff	prodl,??_chkisr+8
  9025  001158  CFF4 F00C          	movff	prodh,??_chkisr+9
  9026  00115C  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9027  001160  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9028  001164  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9029  001168  CFF5 F010          	movff	tablat,??_chkisr+13
  9030                           
  9031                           ;Interrupt.c: 28: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9032  00116C  A09E               	btfss	3998,0,c	;volatile
  9033  00116E  D003               	goto	i2l2414
  9034  001170  ECA8  F00C         	call	_TIMER1_isr	;wreg free
  9035  001174  D000               	goto	i2l2414
  9036  001176                     i2l2414:
  9037                           
  9038                           ;Interrupt.c: 29: if (INTCONbits.INT0IF == 1) INT0_isr();
  9039  001176  A2F2               	btfss	intcon,1,c	;volatile
  9040  001178  D003               	goto	i2l165
  9041  00117A  EC51  F004         	call	_INT0_isr	;wreg free
  9042  00117E  D000               	goto	i2l165
  9043  001180                     i2l165:
  9044  001180  C010  FFF5         	movff	??_chkisr+13,tablat
  9045  001184  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9046  001188  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9047  00118C  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9048  001190  C00C  FFF4         	movff	??_chkisr+9,prodh
  9049  001194  C00B  FFF3         	movff	??_chkisr+8,prodl
  9050  001198  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9051  00119C  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9052  0011A0  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9053  0011A4  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9054  0011A8  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9055  0011AC  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9056  0011B0  C004  FFFB         	movff	??_chkisr+1,pclatu
  9057  0011B4  C003  FFFA         	movff	??_chkisr,pclath
  9058  0011B8  0011               	retfie		f
  9059  0011BA                     __end_of_chkisr:
  9060                           	opt stack 0
  9061                           pclatu	equ	0xFFB
  9062                           pclath	equ	0xFFA
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           prodh	equ	0xFF4
  9068                           prodl	equ	0xFF3
  9069                           intcon	equ	0xFF2
  9070                           intcon2	equ	0xFF1
  9071                           postinc0	equ	0xFEE
  9072                           fsr0h	equ	0xFEA
  9073                           fsr0l	equ	0xFE9
  9074                           wreg	equ	0xFE8
  9075                           postdec1	equ	0xFE5
  9076                           fsr1h	equ	0xFE2
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           postdec2	equ	0xFDD
  9081                           fsr2h	equ	0xFDA
  9082                           fsr2l	equ	0xFD9
  9083                           status	equ	0xFD8
  9084                           
  9085 ;; *************** function _TIMER1_isr *****************
  9086 ;; Defined at:
  9087 ;;		line 32 in file "Interrupt.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;		None
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;		None               void
  9094 ;; Registers used:
  9095 ;;		wreg, status,2
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;Total ram usage:        0 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; This function calls:
  9108 ;;		Nothing
  9109 ;; This function is called by:
  9110 ;;		_chkisr
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           	psect	text57
  9115  001950                     __ptext57:
  9116                           	opt stack 0
  9117  001950                     _TIMER1_isr:
  9118                           	opt stack 21
  9119                           
  9120                           ;Interrupt.c: 34: Nec_state = 0;
  9121                           
  9122                           ;incstack = 0
  9123  001950  0E00               	movlw	0
  9124  001952  6E51               	movwf	_Nec_state,c
  9125                           
  9126                           ;Interrupt.c: 35: INTCON2bits.INTEDG0 = 0;
  9127  001954  9CF1               	bcf	intcon2,6,c	;volatile
  9128                           
  9129                           ;Interrupt.c: 36: T1CONbits.TMR1ON = 0;
  9130  001956  90CD               	bcf	4045,0,c	;volatile
  9131                           
  9132                           ;Interrupt.c: 37: PIR1bits.TMR1IF = 0;
  9133  001958  909E               	bcf	3998,0,c	;volatile
  9134  00195A  0012               	return		;funcret
  9135  00195C                     __end_of_TIMER1_isr:
  9136                           	opt stack 0
  9137                           pclatu	equ	0xFFB
  9138                           pclath	equ	0xFFA
  9139                           tblptru	equ	0xFF8
  9140                           tblptrh	equ	0xFF7
  9141                           tblptrl	equ	0xFF6
  9142                           tablat	equ	0xFF5
  9143                           prodh	equ	0xFF4
  9144                           prodl	equ	0xFF3
  9145                           intcon	equ	0xFF2
  9146                           intcon2	equ	0xFF1
  9147                           postinc0	equ	0xFEE
  9148                           fsr0h	equ	0xFEA
  9149                           fsr0l	equ	0xFE9
  9150                           wreg	equ	0xFE8
  9151                           postdec1	equ	0xFE5
  9152                           fsr1h	equ	0xFE2
  9153                           fsr1l	equ	0xFE1
  9154                           indf2	equ	0xFDF
  9155                           postinc2	equ	0xFDE
  9156                           postdec2	equ	0xFDD
  9157                           fsr2h	equ	0xFDA
  9158                           fsr2l	equ	0xFD9
  9159                           status	equ	0xFD8
  9160                           
  9161 ;; *************** function _INT0_isr *****************
  9162 ;; Defined at:
  9163 ;;		line 46 in file "Interrupt.c"
  9164 ;; Parameters:    Size  Location     Type
  9165 ;;		None
  9166 ;; Auto vars:     Size  Location     Type
  9167 ;;		None
  9168 ;; Return value:  Size  Location     Type
  9169 ;;		None               void
  9170 ;; Registers used:
  9171 ;;		wreg, status,2, status,0, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9179 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9181 ;;Total ram usage:        2 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    1
  9184 ;; This function calls:
  9185 ;;		_force_nec_state0
  9186 ;; This function is called by:
  9187 ;;		_chkisr
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           	psect	text58
  9192  0008A2                     __ptext58:
  9193                           	opt stack 0
  9194  0008A2                     _INT0_isr:
  9195                           	opt stack 20
  9196                           
  9197                           ;Interrupt.c: 48: INTCONbits.INT0IF = 0;
  9198                           
  9199                           ;incstack = 0
  9200  0008A2  92F2               	bcf	intcon,1,c	;volatile
  9201                           
  9202                           ;Interrupt.c: 49: if (Nec_state != 0)
  9203  0008A4  5051               	movf	_Nec_state,w,c
  9204  0008A6  B4D8               	btfsc	status,2,c
  9205  0008A8  D093               	goto	i2l2078
  9206                           
  9207                           ;Interrupt.c: 50: {
  9208                           ;Interrupt.c: 51: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9209  0008AA  50CE               	movf	4046,w,c	;volatile
  9210  0008AC  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9211  0008B0  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9212  0008B2  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9213  0008B6  6A01               	clrf	??_INT0_isr,c
  9214  0008B8  1001               	iorwf	??_INT0_isr,w,c
  9215  0008BA  6E48               	movwf	_Time_Elapsed,c
  9216  0008BC  5002               	movf	??_INT0_isr+1,w,c
  9217  0008BE  6E49               	movwf	_Time_Elapsed+1,c
  9218                           
  9219                           ;Interrupt.c: 52: TMR1H = 0;
  9220  0008C0  0E00               	movlw	0
  9221  0008C2  6ECF               	movwf	4047,c	;volatile
  9222                           
  9223                           ;Interrupt.c: 53: TMR1L = 0;
  9224  0008C4  0E00               	movlw	0
  9225  0008C6  6ECE               	movwf	4046,c	;volatile
  9226                           
  9227                           ;Interrupt.c: 54: }
  9228                           ;Interrupt.c: 56: switch(Nec_state)
  9229  0008C8  D083               	goto	i2l2078
  9230  0008CA                     i2l2016:
  9231                           
  9232                           ;Interrupt.c: 59: {
  9233                           ;Interrupt.c: 61: TMR1H = 0;
  9234  0008CA  0E00               	movlw	0
  9235  0008CC  6ECF               	movwf	4047,c	;volatile
  9236                           
  9237                           ;Interrupt.c: 62: TMR1L = 0;
  9238  0008CE  0E00               	movlw	0
  9239  0008D0  6ECE               	movwf	4046,c	;volatile
  9240                           
  9241                           ;Interrupt.c: 63: PIR1bits.TMR1IF = 0;
  9242  0008D2  909E               	bcf	3998,0,c	;volatile
  9243                           
  9244                           ;Interrupt.c: 64: T1CON= 0x90;
  9245  0008D4  0E90               	movlw	144
  9246  0008D6  6ECD               	movwf	4045,c	;volatile
  9247                           
  9248                           ;Interrupt.c: 65: T1CONbits.TMR1ON = 1;
  9249  0008D8  80CD               	bsf	4045,0,c	;volatile
  9250                           
  9251                           ;Interrupt.c: 66: bit_count = 0;
  9252  0008DA  0E00               	movlw	0
  9253  0008DC  6E58               	movwf	_bit_count,c
  9254                           
  9255                           ;Interrupt.c: 67: Nec_code = 0;
  9256  0008DE  0E00               	movlw	0
  9257  0008E0  6E44               	movwf	_Nec_code,c
  9258  0008E2  0E00               	movlw	0
  9259  0008E4  6E45               	movwf	_Nec_code+1,c
  9260  0008E6  0E00               	movlw	0
  9261  0008E8  6E46               	movwf	_Nec_code+2,c
  9262  0008EA  0E00               	movlw	0
  9263  0008EC  6E47               	movwf	_Nec_code+3,c
  9264                           
  9265                           ;Interrupt.c: 68: Nec_state = 1;
  9266  0008EE  0E01               	movlw	1
  9267  0008F0  D01F               	goto	L2
  9268  0008F2                     i2l2022:
  9269                           
  9270                           ;Interrupt.c: 69: INTCON2bits.INTEDG0 = 1;
  9271  0008F2  8CF1               	bsf	intcon2,6,c	;volatile
  9272                           
  9273                           ;Interrupt.c: 70: return;
  9274  0008F4  D07E               	goto	i2l177
  9275  0008F6                     i2l2026:
  9276                           
  9277                           ;Interrupt.c: 74: {
  9278                           ;Interrupt.c: 75: if((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
  9279  0008F6  0E35               	movlw	53
  9280  0008F8  5C48               	subwf	_Time_Elapsed,w,c
  9281  0008FA  0E21               	movlw	33
  9282  0008FC  5849               	subwfb	_Time_Elapsed+1,w,c
  9283  0008FE  A0D8               	btfss	status,0,c
  9284  000900  D078               	goto	i2l177
  9285  000902  0E1C               	movlw	28
  9286  000904  5C48               	subwf	_Time_Elapsed,w,c
  9287  000906  0E25               	movlw	37
  9288  000908  5849               	subwfb	_Time_Elapsed+1,w,c
  9289  00090A  B0D8               	btfsc	status,0,c
  9290  00090C  D072               	goto	i2l177
  9291                           
  9292                           ;Interrupt.c: 76: {
  9293                           ;Interrupt.c: 77: Nec_state = 2;
  9294  00090E  0E02               	movlw	2
  9295  000910  D01F               	goto	L3
  9296  000912                     i2l2032:
  9297                           
  9298                           ;Interrupt.c: 78: INTCON2bits.INTEDG0 = 0;
  9299  000912  9CF1               	bcf	intcon2,6,c	;volatile
  9300                           
  9301                           ;Interrupt.c: 79: }
  9302                           ;Interrupt.c: 80: return;
  9303  000914  D06E               	goto	i2l177
  9304  000916                     i2l2036:
  9305                           
  9306                           ;Interrupt.c: 84: {
  9307                           ;Interrupt.c: 85: if((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
  9308  000916  0EA1               	movlw	161
  9309  000918  5C48               	subwf	_Time_Elapsed,w,c
  9310  00091A  0E0F               	movlw	15
  9311  00091C  5849               	subwfb	_Time_Elapsed+1,w,c
  9312  00091E  A0D8               	btfss	status,0,c
  9313  000920  D068               	goto	i2l177
  9314  000922  0E88               	movlw	136
  9315  000924  5C48               	subwf	_Time_Elapsed,w,c
  9316  000926  0E13               	movlw	19
  9317  000928  5849               	subwfb	_Time_Elapsed+1,w,c
  9318  00092A  B0D8               	btfsc	status,0,c
  9319  00092C  D062               	goto	i2l177
  9320                           
  9321                           ;Interrupt.c: 86: {
  9322                           ;Interrupt.c: 87: Nec_state = 3;
  9323  00092E  0E03               	movlw	3
  9324  000930                     L2:
  9325  000930  6E51               	movwf	_Nec_state,c
  9326  000932  D7DF               	goto	i2l2022
  9327                           
  9328                           ;Interrupt.c: 89: }
  9329                           ;Interrupt.c: 90: return;
  9330                           
  9331                           ;Interrupt.c: 88: INTCON2bits.INTEDG0 = 1;
  9332  000934  D05E               	goto	i2l177
  9333  000936                     i2l2046:
  9334                           
  9335                           ;Interrupt.c: 94: {
  9336                           ;Interrupt.c: 95: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  9337  000936  0E91               	movlw	145
  9338  000938  5C48               	subwf	_Time_Elapsed,w,c
  9339  00093A  0E01               	movlw	1
  9340  00093C  5849               	subwfb	_Time_Elapsed+1,w,c
  9341  00093E  A0D8               	btfss	status,0,c
  9342  000940  D058               	goto	i2l177
  9343  000942  0E08               	movlw	8
  9344  000944  5C48               	subwf	_Time_Elapsed,w,c
  9345  000946  0E07               	movlw	7
  9346  000948  5849               	subwfb	_Time_Elapsed+1,w,c
  9347  00094A  B0D8               	btfsc	status,0,c
  9348  00094C  D052               	goto	i2l177
  9349                           
  9350                           ;Interrupt.c: 96: {
  9351                           ;Interrupt.c: 97: Nec_state = 4;
  9352  00094E  0E04               	movlw	4
  9353  000950                     L3:
  9354  000950  6E51               	movwf	_Nec_state,c
  9355  000952  D7DF               	goto	i2l2032
  9356                           
  9357                           ;Interrupt.c: 99: }
  9358                           ;Interrupt.c: 100: return;
  9359                           
  9360                           ;Interrupt.c: 98: INTCON2bits.INTEDG0 = 0;
  9361  000954  D04E               	goto	i2l177
  9362  000956                     i2l2056:
  9363                           
  9364                           ;Interrupt.c: 104: {
  9365                           ;Interrupt.c: 105: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  9366  000956  0E91               	movlw	145
  9367  000958  5C48               	subwf	_Time_Elapsed,w,c
  9368  00095A  0E01               	movlw	1
  9369  00095C  5849               	subwfb	_Time_Elapsed+1,w,c
  9370  00095E  A0D8               	btfss	status,0,c
  9371  000960  D032               	goto	i2l2070
  9372  000962  0E08               	movlw	8
  9373  000964  5C48               	subwf	_Time_Elapsed,w,c
  9374  000966  0E07               	movlw	7
  9375  000968  5849               	subwfb	_Time_Elapsed+1,w,c
  9376  00096A  B0D8               	btfsc	status,0,c
  9377  00096C  D02C               	goto	i2l2070
  9378                           
  9379                           ;Interrupt.c: 106: {
  9380                           ;Interrupt.c: 107: Nec_code = Nec_code << 1;
  9381  00096E  90D8               	bcf	status,0,c
  9382  000970  3444               	rlcf	_Nec_code,w,c
  9383  000972  6E44               	movwf	_Nec_code,c
  9384  000974  3445               	rlcf	_Nec_code+1,w,c
  9385  000976  6E45               	movwf	_Nec_code+1,c
  9386  000978  3446               	rlcf	_Nec_code+2,w,c
  9387  00097A  6E46               	movwf	_Nec_code+2,c
  9388  00097C  3447               	rlcf	_Nec_code+3,w,c
  9389  00097E  6E47               	movwf	_Nec_code+3,c
  9390                           
  9391                           ;Interrupt.c: 108: if(Time_Elapsed > 1000)
  9392  000980  0EE9               	movlw	233
  9393  000982  5C48               	subwf	_Time_Elapsed,w,c
  9394  000984  0E03               	movlw	3
  9395  000986  5849               	subwfb	_Time_Elapsed+1,w,c
  9396  000988  A0D8               	btfss	status,0,c
  9397  00098A  D00C               	goto	i2l186
  9398                           
  9399                           ;Interrupt.c: 109: {
  9400                           ;Interrupt.c: 110: Nec_code = Nec_code + 1;
  9401  00098C  0E01               	movlw	1
  9402  00098E  2444               	addwf	_Nec_code,w,c
  9403  000990  6E44               	movwf	_Nec_code,c
  9404  000992  0E00               	movlw	0
  9405  000994  2045               	addwfc	_Nec_code+1,w,c
  9406  000996  6E45               	movwf	_Nec_code+1,c
  9407  000998  0E00               	movlw	0
  9408  00099A  2046               	addwfc	_Nec_code+2,w,c
  9409  00099C  6E46               	movwf	_Nec_code+2,c
  9410  00099E  0E00               	movlw	0
  9411  0009A0  2047               	addwfc	_Nec_code+3,w,c
  9412  0009A2  6E47               	movwf	_Nec_code+3,c
  9413  0009A4                     i2l186:
  9414                           
  9415                           ;Interrupt.c: 111: }
  9416                           ;Interrupt.c: 112: bit_count = bit_count + 1;
  9417  0009A4  2858               	incf	_bit_count,w,c
  9418  0009A6  6E58               	movwf	_bit_count,c
  9419                           
  9420                           ;Interrupt.c: 113: if(bit_count > 31)
  9421  0009A8  0E1F               	movlw	31
  9422  0009AA  6458               	cpfsgt	_bit_count,c
  9423  0009AC  D009               	goto	i2l187
  9424                           
  9425                           ;Interrupt.c: 114: {
  9426                           ;Interrupt.c: 115: nec_ok = 1;
  9427  0009AE  0E00               	movlw	0
  9428  0009B0  6E4D               	movwf	_nec_ok+1,c
  9429  0009B2  0E01               	movlw	1
  9430  0009B4  6E4C               	movwf	_nec_ok,c
  9431                           
  9432                           ;Interrupt.c: 116: Nec_code1 = (char) ((Nec_code >> 8));
  9433  0009B6  C045  F050         	movff	_Nec_code+1,_Nec_code1
  9434                           
  9435                           ;Interrupt.c: 117: INTCONbits.INT0IE = 0;
  9436  0009BA  98F2               	bcf	intcon,4,c	;volatile
  9437                           
  9438                           ;Interrupt.c: 118: Nec_state = 0;
  9439  0009BC  0E00               	movlw	0
  9440  0009BE  6E51               	movwf	_Nec_state,c
  9441  0009C0                     i2l187:
  9442                           
  9443                           ;Interrupt.c: 119: }
  9444                           ;Interrupt.c: 120: Nec_state = 3;
  9445  0009C0  0E03               	movlw	3
  9446  0009C2  6E51               	movwf	_Nec_state,c
  9447                           
  9448                           ;Interrupt.c: 121: }
  9449  0009C4  D796               	goto	i2l2022
  9450  0009C6                     i2l2070:
  9451                           
  9452                           ;Interrupt.c: 122: else
  9453                           ;Interrupt.c: 123: {
  9454                           ;Interrupt.c: 124: force_nec_state0();
  9455  0009C6  ECC9  F00C         	call	_force_nec_state0	;wreg free
  9456  0009CA  D793               	goto	i2l2022
  9457  0009CC  D792               	goto	i2l2022
  9458                           
  9459                           ;Interrupt.c: 128: }
  9460                           ;Interrupt.c: 129: }
  9461                           
  9462                           ;Interrupt.c: 127: return;
  9463                           
  9464                           ;Interrupt.c: 125: }
  9465                           ;Interrupt.c: 126: INTCON2bits.INTEDG0 = 1;
  9466  0009CE  D011               	goto	i2l177
  9467  0009D0                     i2l2078:
  9468  0009D0  5051               	movf	_Nec_state,w,c
  9469                           
  9470                           ; Switch size 1, requested type "space"
  9471                           ; Number of cases is 5, Range of values is 0 to 4
  9472                           ; switch strategies available:
  9473                           ; Name         Instructions Cycles
  9474                           ; simple_byte           16     9 (average)
  9475                           ;	Chosen strategy is simple_byte
  9476  0009D2  0A00               	xorlw	0	; case 0
  9477  0009D4  B4D8               	btfsc	status,2,c
  9478  0009D6  D779               	goto	i2l2016
  9479  0009D8  0A01               	xorlw	1	; case 1
  9480  0009DA  B4D8               	btfsc	status,2,c
  9481  0009DC  D78C               	goto	i2l2026
  9482  0009DE  0A03               	xorlw	3	; case 2
  9483  0009E0  B4D8               	btfsc	status,2,c
  9484  0009E2  D799               	goto	i2l2036
  9485  0009E4  0A01               	xorlw	1	; case 3
  9486  0009E6  B4D8               	btfsc	status,2,c
  9487  0009E8  D7A6               	goto	i2l2046
  9488  0009EA  0A07               	xorlw	7	; case 4
  9489  0009EC  B4D8               	btfsc	status,2,c
  9490  0009EE  D7B3               	goto	i2l2056
  9491  0009F0  D000               	goto	i2l177
  9492  0009F2                     i2l177:
  9493  0009F2  0012               	return		;funcret
  9494  0009F4                     __end_of_INT0_isr:
  9495                           	opt stack 0
  9496                           pclatu	equ	0xFFB
  9497                           pclath	equ	0xFFA
  9498                           tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           intcon	equ	0xFF2
  9505                           intcon2	equ	0xFF1
  9506                           postinc0	equ	0xFEE
  9507                           fsr0h	equ	0xFEA
  9508                           fsr0l	equ	0xFE9
  9509                           wreg	equ	0xFE8
  9510                           postdec1	equ	0xFE5
  9511                           fsr1h	equ	0xFE2
  9512                           fsr1l	equ	0xFE1
  9513                           indf2	equ	0xFDF
  9514                           postinc2	equ	0xFDE
  9515                           postdec2	equ	0xFDD
  9516                           fsr2h	equ	0xFDA
  9517                           fsr2l	equ	0xFD9
  9518                           status	equ	0xFD8
  9519                           
  9520 ;; *************** function _force_nec_state0 *****************
  9521 ;; Defined at:
  9522 ;;		line 40 in file "Interrupt.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;		None
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg, status,2
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;Total ram usage:        0 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; This function calls:
  9543 ;;		Nothing
  9544 ;; This function is called by:
  9545 ;;		_INT0_isr
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text59
  9550  001992                     __ptext59:
  9551                           	opt stack 0
  9552  001992                     _force_nec_state0:
  9553                           	opt stack 20
  9554                           
  9555                           ;Interrupt.c: 42: Nec_state=0;
  9556                           
  9557                           ;incstack = 0
  9558  001992  0E00               	movlw	0
  9559  001994  6E51               	movwf	_Nec_state,c
  9560                           
  9561                           ;Interrupt.c: 43: T1CONbits.TMR1ON = 0;
  9562  001996  90CD               	bcf	4045,0,c	;volatile
  9563  001998  0012               	return		;funcret
  9564  00199A                     __end_of_force_nec_state0:
  9565                           	opt stack 0
  9566                           pclatu	equ	0xFFB
  9567                           pclath	equ	0xFFA
  9568                           tblptru	equ	0xFF8
  9569                           tblptrh	equ	0xFF7
  9570                           tblptrl	equ	0xFF6
  9571                           tablat	equ	0xFF5
  9572                           prodh	equ	0xFF4
  9573                           prodl	equ	0xFF3
  9574                           intcon	equ	0xFF2
  9575                           intcon2	equ	0xFF1
  9576                           postinc0	equ	0xFEE
  9577                           fsr0h	equ	0xFEA
  9578                           fsr0l	equ	0xFE9
  9579                           wreg	equ	0xFE8
  9580                           postdec1	equ	0xFE5
  9581                           fsr1h	equ	0xFE2
  9582                           fsr1l	equ	0xFE1
  9583                           indf2	equ	0xFDF
  9584                           postinc2	equ	0xFDE
  9585                           postdec2	equ	0xFDD
  9586                           fsr2h	equ	0xFDA
  9587                           fsr2l	equ	0xFD9
  9588                           status	equ	0xFD8
  9589                           pclatu	equ	0xFFB
  9590                           pclath	equ	0xFFA
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon2	equ	0xFF1
  9599                           postinc0	equ	0xFEE
  9600                           fsr0h	equ	0xFEA
  9601                           fsr0l	equ	0xFE9
  9602                           wreg	equ	0xFE8
  9603                           postdec1	equ	0xFE5
  9604                           fsr1h	equ	0xFE2
  9605                           fsr1l	equ	0xFE1
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           postdec2	equ	0xFDD
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613                           	psect	rparam
  9614  0000                     pclatu	equ	0xFFB
  9615                           pclath	equ	0xFFA
  9616                           tblptru	equ	0xFF8
  9617                           tblptrh	equ	0xFF7
  9618                           tblptrl	equ	0xFF6
  9619                           tablat	equ	0xFF5
  9620                           prodh	equ	0xFF4
  9621                           prodl	equ	0xFF3
  9622                           intcon	equ	0xFF2
  9623                           intcon2	equ	0xFF1
  9624                           postinc0	equ	0xFEE
  9625                           fsr0h	equ	0xFEA
  9626                           fsr0l	equ	0xFE9
  9627                           wreg	equ	0xFE8
  9628                           postdec1	equ	0xFE5
  9629                           fsr1h	equ	0xFE2
  9630                           fsr1l	equ	0xFE1
  9631                           indf2	equ	0xFDF
  9632                           postinc2	equ	0xFDE
  9633                           postdec2	equ	0xFDD
  9634                           fsr2h	equ	0xFDA
  9635                           fsr2l	equ	0xFD9
  9636                           status	equ	0xFD8


Data Sizes:
    Strings     148
    Constant    493
    Data        212
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     110
    BANK0           128     12     127
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_5(CODE[8]), STR_4(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_3(CODE[28]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   56398
                                             66 COMRAM     1     1      0
                                              7 BANK0      5     5      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                  _Initialize_Screen
                   _Wait_Half_Second
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3521
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     575
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   21503
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12656
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    0     0      0     133
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     0     0      0     331
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     1      2     365
                                             19 COMRAM     3     1      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_Half_Second
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      7F       5       99.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6E       1       86.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16B      34        0.0%
DATA                 0      0     16B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 21 16:42:04 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 0080                                 _D2 0095  
                               _D3 00AA                                 l34 15D6  
                               l37 16A2                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l300 08A0  
                              l117 1762                                l302 077A  
                              l224 14A4                                l234 18A2  
                              l340 0EEE                                l309 07F6  
                              l341 0F10                                l337 0F12  
                              l338 0E7E                                l284 10BE  
                              l348 0660                                l278 1732  
                              l366 0A62                                l553 193A  
                              l625 011C                                l590 1844  
                              l662 0374                                l690 127A  
                              l691 127C                                l692 1286  
                              l693 1288                                l686 1260  
                              l695 12A2                                l698 17B4  
                              l891 0FA8                  ?_Wait_Half_Second 0001  
                              _PR2 000FCB                                _day 005A  
                _Deactivate_Buzzer 197A               __size_of_I2C_ReStart 0016  
                              _dow 005B                                _nbr 004A  
                              _txt 004E                                prod 000FF3  
                              wreg 000FE8                 ??_Wait_Half_Second 0011  
               ?_Deactivate_Buzzer 0001                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1764  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0019  
                             l1221 12F6                               l1231 153C  
                             l1129 17D6                               l1260 1654  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l4120 10B4                               l4104 1048  
                             l4130 169A                               l4108 1080  
                             l5012 0F2A                               l4118 10A6  
                             l4136 16AC                               l5024 0F52  
                             l5040 0F8E                               l4138 16B2  
                             l4410 0EF2                               l5026 0F5C  
                             l5018 0F3C                               l4500 15C0  
                             l4148 16C4                               l4332 0776  
                             l4324 075C                               l4420 0F0C  
                             l5044 0F9E                               l5036 0F82  
                             l5028 0F64                               l4430 1246  
                             l4342 07B6                               l4334 077E  
                             l4414 0EFC                               l4406 0EE4  
                             l4504 15CC                               l4344 07EA  
                             l4328 0768                               l4506 15D2  
                             l4450 1272                               l4442 1264  
                             l4434 1250                               l4186 1714  
                             l4194 1550                               l4362 086C  
                             l4354 0818                               l4370 089C  
                             l4346 07EE                               l4338 0786  
                             l4364 0894                               l4356 0840  
                             l4604 0AC4                               l4438 1258  
                             l4198 156C                               l4550 0C68  
                             l5342 0428                               l4376 1622  
                             l4640 16E6                               l4800 0736  
                             l4608 0B16                               l5360 0482  
                             l5352 044A                               l5328 0384  
                             l4482 159A                               l4378 1628  
                             l4562 0CB8                               l4394 0EB6  
                             l4650 17CE                               l4492 15B0  
                             l4388 0E48                               l4660 12BA  
                             l5372 051C                               l5364 048C  
                             l5356 0464                               l4494 15B8  
                             l4486 15A2                               l4574 0D28  
                             l4566 0CD6                               l4638 16DC  
                             l4662 12C4                               l4910 014A  
   I2C_Write_Cmd_Write_Data@Device 0015                               l4576 0D30  
                             l4672 12EA                               l4664 12CC  
                             l4680 1508                               l4920 0174  
                             l4682 1512                               l4930 01A2  
                             l4914 0164                               l5378 0544  
                             l4772 0646                               l4588 0A48  
                             l4684 151A                               l4924 0198  
                             l4916 0168                               l4934 01AE  
                             l4870 0026                               l4688 1530  
                             l4952 0206                               l4928 019E  
                             l4944 01D8                               l4880 004E  
                             l4970 026C                               l4938 01D2  
                             l4946 01EA                               l4882 0064  
                             l4874 0036                               l4972 0274  
                             l4980 02A0                               l4964 024C  
                             l4956 022A                               l4876 0044  
                             l4982 02A8                               l4990 0332  
                             l4966 0254                               l4958 0234  
                             l4894 00E6                               l4886 0082  
                             l4984 02EC                               l4992 0344  
                             l4976 028C                               l4994 034C  
                             l4898 00EE                               l4996 0358  
                             STR_1 FF95                               STR_2 FF6A  
                             STR_3 FFB3                               STR_4 FFCF  
                             STR_5 FFF6                               STR_6 FFE5  
                             u3140 0C92                               u2670 1076  
                             u2930 0E76                               u2860 084E  
                             u2940 0EAC                               u3897 1948  
                             _RBPU 007F8F                               _TRMT 007D61  
              ??_Deactivate_Buzzer 0011                               _main 0376  
                             _font FD7D                               _hour 005D  
                 __end_of_I2C_Init 1966                   __end_of_I2C_Read 15D8  
                             _year 006C                               fsr0h 000FEA  
                             _txt1 012A                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006E  
                 __end_of_I2C_Stop 18E0                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 1618  
                  ??_drawFastVLine 001C                    __end_of_i2cNack 1970  
                     ___param_bank 000010                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 09F4          __end_of_Deactivate_Buzzer 1982  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 0FAA  
                  drawCircle@ddF_x 0026                    drawCircle@ddF_y 0028  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 1300  
                  __end_of___lwmod 1546                              i2l165 1180  
                            i2l177 09F2                              i2l186 09A4  
                            i2l187 09C0                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR3H 000FB3  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            _Rcmd1 0B2C                              _Rcmd3 0D46  
                       _i2cHighSda 198A                         _i2cHighScl 1944  
                  __end_of_dpowers FF62                              _color 0100  
                            _font2 FE7C              fillCircleHelper@ddF_x 0031  
            fillCircleHelper@ddF_y 0033                              _found 005C  
                  __end_of_isdigit 17D8                              _month 0060  
            fillCircleHelper@delta 002B                              _putch 1936  
            fillCircleHelper@color 002D                              main@i 00FC  
                __end_of_I2C_Start 18F2                  __end_of_I2C_Write 16D2  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 11BA                       __end_of_main 059E  
                     __end_of_font FE7C                   __end_of_Rcmd2red 1694  
                           ??_main 0043                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 18CE  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0018                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             i2l2022 08F2  
                           i2l2032 0912                             i2l2016 08CA  
                           i2l2026 08F6                             i2l2036 0916  
                           i2l2070 09C6                             i2l2046 0936  
                           i2l2056 0956                             i2l2078 09D0  
                           i2l2414 1176                          ??_Do_Init 0017  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 0011                   _force_nec_state0 1992  
                 __end_of_delay_ms 14AC                             _i2cAck 18F2  
                       _TempSecond 0052                   __end_of_fillRect 1590  
                 __end_of_drawChar 08A2                 __size_of_OpenUSART 0070  
         __size_of_Activate_Buzzer 0012                             ___wmul 178E  
                        ??___awdiv 001B          __size_of_fillCircleHelper 0138  
                 __end_of_drawtext 0D46                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 00BF  
                        ??___lwmod 001C                             _buffer 00D4  
                           _nec_ok 004C                             clear_0 11C0  
                           clear_1 11CC                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 16D2  
                           _strlen 1618                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD7C                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 17F8                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 18A8                         __accesstop 0080  
          __end_of__initialization 122A                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                      __end_of_Rcmd1 0C3C  
                    __end_of_Rcmd3 0E38                     __pcstackCOMRAM 0001  
                     __pidataBANK0 13B4                       __pidataBANK1 10C0  
                    __end_of_font2 FF58                  __end_of_i2cLowSda 197A  
                __end_of_i2cLowScl 198A                      __end_of_putch 1944  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011         fillCircleHelper@cornername 0029  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 12A4  
                          ??_putch 0011                         __pbssBANK0 00D4  
                 _setup_alarm_hour 0063                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         _fillCircle 1408  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                ??_Activate_Buzzer 0011                         _fillScreen 1816  
                       _drawCircle 059E                     _init_INTERRUPT 1866  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 0F14  
                        ?_drawtext 0039                  _DS3231_Setup_Time 1300  
                          _Do_Init 15D8           _I2C_Write_Cmd_Write_Data 17D8  
       __end_of_I2C_Write_Cmd_Only 1866                         ??_Rcmd2red 0014  
                          _i2cNack 1966                 __end_of_TIMER1_isr 195C  
               ?_DS3231_Setup_Time 0001                      _write_command 1926  
                        _I2C_Start 18E0                          _I2C_Write 1694  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 1816  
                __end_of_drawPixel 1734                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 10C0                   _fillCircleHelper 09F4  
                          ___awdiv 0F14                    __size_of___wmul 0028  
                          ___lwdiv 12A4                            ___lwmod 14FA  
                  __size_of_chkisr 11B2                          ?_spiwrite 0001  
                          __pcinit 11BA                            __ramtop 1000  
                          __ptext0 0376                            __ptext1 001C  
                          __ptext2 1936                            __ptext3 17B6  
                          __ptext4 14FA                            __ptext5 12A4  
        __size_of_DS1621_Read_Temp 0030                            __ptext6 1408  
                          __ptext7 09F4                            __ptext8 059E  
                          __ptext9 0F14                    __size_of_printf 035A  
                __end_of_init_UART 18BC             __end_of_init_INTERRUPT 187E  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF6A  
         __end_of_force_nec_state0 199A                          _T1CONbits 000FCD  
                          _dpowers FF58                            _isdigit 17B6  
                        _T3CONbits 000FB1                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 1894                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 135C                         ??_drawChar 0035  
                        _LCD_Reset 18BC                      _setAddrWindow 14AC  
                   __pintcode_body 113E                         delay_ms@ms 0017  
             end_of_initialization 122A                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD7C  
        __size_of_DS3231_Read_Time 0058                            int_func 113E  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006D                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 00F9  
                 drawtext@cursor_y 00F8                          _PORTBbits 000F81  
                        _PORTCbits 000F82                          _PORTDbits 000F83  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_year 006B                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISBbits 000F93  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00F4  
                       drawPixel@x 001B                         drawPixel@y 0018  
                 _Wait_Half_Second 1832                        _DS1621_Init 17F8  
                      printf@width 0036                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0152                     __end_of_i2cAck 1904  
         DS1621_Read_Temp@Data_Ret 0016                 __end_of_i2cHighSda 1992  
               __end_of_i2cHighScl 1950                     __end_of___wmul 17B6  
                    delay_ms@count 001B                         _write_data 1916  
                    __pidataCOMRAM 199A                     __end_of_chkisr 11BA  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 187E  
                       drawtext@bg 003E                          _Nec_code1 0050  
                        _i2cLowSda 1970                          _i2cLowScl 1982  
                   __end_of_printf 0376                     __end_of_strcpy 1704  
                   __end_of_strlen 1656                          _Nec_state 0051  
              start_initialization 11BA         __size_of_DS3231_Setup_Time 005C  
                  ??_write_command 0013                          _OpenUSART 1234  
              __size_of_fillCircle 0052                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 1904                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 1734                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00F3                        ??_LCD_Reset 001D  
                     _isdigit$2040 0012           __end_of_fillCircleHelper 0B2C  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 135C  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 178E                      __pmediumconst FD7C  
                         ?___awdiv 0017                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 184C  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 1704  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 195C                           _I2C_Read 1590  
                         _I2C_Stop 18CE                  _Initialize_Screen 0FAA  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 18A8                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF62  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 1916  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 08A2               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                   ??_init_INTERRUPT 0011  
                        _setup_day 0066                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                     ??_fillCircle 0043                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC           __end_of_Wait_Half_Second 184C  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 1038  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                        main@found 00FE                          main@tempC 00FB  
                        main@tempF 00FA                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 11E6  
                        copy_data1 1206                          drawtext@i 00F6  
           __size_of_drawFastVLine 0088                          drawtext@x 00F3  
                        drawtext@y 0039                           _Nec_code 0044  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                     ?_DS1621_Init 0001                           _Rcmd2red 1656  
                 __size_of_Do_Init 0040                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0048  
               __end_of_fillCircle 145A                   __size_of_i2cNack 000A  
                         __Hrparam 0000                 __end_of_fillScreen 1832  
                         __Lrparam 0000                 __end_of_drawCircle 074C  
                 __size_of___awdiv 0096                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C                       ?_I2C_ReStart 0001  
                 __size_of_isdigit 0022                           _delay_ms 145A  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 1832                           __ptext11 0FAA  
                         __ptext20 1704                           __ptext12 16D2  
                         __ptext21 14AC                           __ptext13 1816  
                         __ptext30 145A                           __ptext22 1764  
                         __ptext14 0E38                           __ptext31 178E  
                         __ptext23 0D46                           __ptext15 0C3C  
                         __ptext40 197A                           __ptext32 15D8  
                         __ptext24 1656                           __ptext16 1618  
                         __ptext41 1300                           __ptext33 18A8  
                         __ptext25 0B2C                           __ptext17 074C  
                         __ptext50 187E                           __ptext42 135C  
                         __ptext34 1234                           __ptext26 1916  
                         __ptext18 1546                           __ptext51 1970  
                         __ptext43 1734                           __ptext35 1866  
                         __ptext27 1926                           __ptext19 1038  
                         __ptext52 1982                           __ptext44 1694  
                         __ptext36 195C                           __ptext28 1894  
                         __ptext53 198A                           __ptext45 18CE  
                         __ptext37 17F8                           __ptext29 18BC  
                         __ptext54 1944                           __ptext46 18E0  
                         __ptext38 17D8                           __ptext55 1904  
                         __ptext47 1590                           __ptext39 184C  
                         __ptext48 1966                           __ptext57 1950  
                         __ptext49 18F2                           __ptext58 08A2  
                         __ptext59 1992                           _fillRect 1546  
                         _drawChar 074C   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 0059                           _drawtext 0C3C  
                       strcpy@from 0013                      _fillRectangle 0E38  
         __end_of_DS1621_Read_Temp 1764                   ?_Activate_Buzzer 0001  
                    __size_of_main 0228                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 1038  
                        printf@idx 002F                           _spiwrite 1894  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 13B4  
               fillCircleHelper@x0 0023                 fillCircleHelper@y0 0025  
       __size_of_Initialize_Screen 008E                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                         isdigit@c 0013                  ?_fillCircleHelper 0023  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                 ??_fillCircleHelper 002F  
                 ___lwmod@dividend 0018              __end_of_write_command 1936  
                  fillScreen@color 0024                       fillCircle@x0 003B  
                     fillCircle@y0 003D                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                  fillCircleHelper@f 0035  
                fillCircleHelper@r 0027                  fillCircleHelper@x 0037  
                fillCircleHelper@y 0039                       ??_write_data 0013  
                       _TIMER1_isr 1950                      fillRect@color 0026  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0068                       _setup_second 006A  
                      fillCircle@r 003F              __end_of_setAddrWindow 14FA  
               fillRectangle@color 001B                      drawChar@color 0030  
                      _setup_month 0069                 __end_of_write_data 1926  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
