

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Mar 24 09:33:08 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00D9EB                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _wrap
    75  00D9EB  01                 	db	1
    76                           
    77                           ;initializer for _EWLT_Count
    78  00D9EC  30                 	db	48
    79  00D9ED  30                 	db	48
    80  00D9EE  00                 	db	0
    81                           
    82                           ;initializer for _EW_Count
    83  00D9EF  30                 	db	48
    84  00D9F0  30                 	db	48
    85  00D9F1  00                 	db	0
    86                           
    87                           ;initializer for _NSLT_Count
    88  00D9F2  30                 	db	48
    89  00D9F3  30                 	db	48
    90  00D9F4  00                 	db	0
    91                           
    92                           ;initializer for _NS_Count
    93  00D9F5  30                 	db	48
    94  00D9F6  30                 	db	48
    95  00D9F7  00                 	db	0
    96                           
    97                           ;initializer for _PED_EW_Count
    98  00D9F8  30                 	db	48
    99  00D9F9  30                 	db	48
   100  00D9FA  00                 	db	0
   101                           
   102                           ;initializer for _PED_NS_Count
   103  00D9FB  30                 	db	48
   104  00D9FC  30                 	db	48
   105  00D9FD  00                 	db	0
   106                           
   107                           ;initializer for _Act_Mode_Txt
   108  00D9FE  44                 	db	68
   109  00D9FF  00                 	db	0
   110                           
   111                           ;initializer for _FlashingR_Txt
   112  00DA00  30                 	db	48
   113  00DA01  00                 	db	0
   114                           
   115                           ;initializer for _FlashingS_Txt
   116  00DA02  30                 	db	48
   117  00DA03  00                 	db	0
   118                           
   119                           ;initializer for _SW_EWLT_Txt
   120  00DA04  30                 	db	48
   121  00DA05  00                 	db	0
   122                           
   123                           ;initializer for _SW_EWPED_Txt
   124  00DA06  30                 	db	48
   125  00DA07  00                 	db	0
   126                           
   127                           ;initializer for _SW_MODE_Txt
   128  00DA08  44                 	db	68
   129  00DA09  00                 	db	0
   130                           
   131                           ;initializer for _SW_NSLT_Txt
   132  00DA0A  30                 	db	48
   133  00DA0B  00                 	db	0
   134                           
   135                           ;initializer for _SW_NSPED_Txt
   136  00DA0C  30                 	db	48
   137  00DA0D  00                 	db	0
   138                           
   139                           	psect	mediumconst
   140  00FDBA                     __pmediumconst:
   141                           	opt stack 0
   142  00FDBA  00                 	db	0
   143  00FDBB                     _font:
   144                           	opt stack 0
   145  00FDBB  00                 	db	0
   146  00FDBC  00                 	db	0
   147  00FDBD  00                 	db	0
   148  00FDBE  00                 	db	0
   149  00FDBF  00                 	db	0
   150  00FDC0  00                 	db	0
   151  00FDC1  00                 	db	0
   152  00FDC2  5F                 	db	95
   153  00FDC3  00                 	db	0
   154  00FDC4  00                 	db	0
   155  00FDC5  00                 	db	0
   156  00FDC6  07                 	db	7
   157  00FDC7  00                 	db	0
   158  00FDC8  07                 	db	7
   159  00FDC9  00                 	db	0
   160  00FDCA  14                 	db	20
   161  00FDCB  7F                 	db	127
   162  00FDCC  14                 	db	20
   163  00FDCD  7F                 	db	127
   164  00FDCE  14                 	db	20
   165  00FDCF  24                 	db	36
   166  00FDD0  2A                 	db	42
   167  00FDD1  7F                 	db	127
   168  00FDD2  2A                 	db	42
   169  00FDD3  12                 	db	18
   170  00FDD4  23                 	db	35
   171  00FDD5  13                 	db	19
   172  00FDD6  08                 	db	8
   173  00FDD7  64                 	db	100
   174  00FDD8  62                 	db	98
   175  00FDD9  36                 	db	54
   176  00FDDA  49                 	db	73
   177  00FDDB  56                 	db	86
   178  00FDDC  20                 	db	32
   179  00FDDD  50                 	db	80
   180  00FDDE  00                 	db	0
   181  00FDDF  08                 	db	8
   182  00FDE0  07                 	db	7
   183  00FDE1  03                 	db	3
   184  00FDE2  00                 	db	0
   185  00FDE3  00                 	db	0
   186  00FDE4  1C                 	db	28
   187  00FDE5  22                 	db	34
   188  00FDE6  41                 	db	65
   189  00FDE7  00                 	db	0
   190  00FDE8  00                 	db	0
   191  00FDE9  41                 	db	65
   192  00FDEA  22                 	db	34
   193  00FDEB  1C                 	db	28
   194  00FDEC  00                 	db	0
   195  00FDED  2A                 	db	42
   196  00FDEE  1C                 	db	28
   197  00FDEF  7F                 	db	127
   198  00FDF0  1C                 	db	28
   199  00FDF1  2A                 	db	42
   200  00FDF2  08                 	db	8
   201  00FDF3  08                 	db	8
   202  00FDF4  3E                 	db	62
   203  00FDF5  08                 	db	8
   204  00FDF6  08                 	db	8
   205  00FDF7  00                 	db	0
   206  00FDF8  80                 	db	128
   207  00FDF9  70                 	db	112
   208  00FDFA  30                 	db	48
   209  00FDFB  00                 	db	0
   210  00FDFC  08                 	db	8
   211  00FDFD  08                 	db	8
   212  00FDFE  08                 	db	8
   213  00FDFF  08                 	db	8
   214  00FE00  08                 	db	8
   215  00FE01  00                 	db	0
   216  00FE02  00                 	db	0
   217  00FE03  60                 	db	96
   218  00FE04  60                 	db	96
   219  00FE05  00                 	db	0
   220  00FE06  20                 	db	32
   221  00FE07  10                 	db	16
   222  00FE08  08                 	db	8
   223  00FE09  04                 	db	4
   224  00FE0A  02                 	db	2
   225  00FE0B  3E                 	db	62
   226  00FE0C  51                 	db	81
   227  00FE0D  49                 	db	73
   228  00FE0E  45                 	db	69
   229  00FE0F  3E                 	db	62
   230  00FE10  00                 	db	0
   231  00FE11  42                 	db	66
   232  00FE12  7F                 	db	127
   233  00FE13  40                 	db	64
   234  00FE14  00                 	db	0
   235  00FE15  72                 	db	114
   236  00FE16  49                 	db	73
   237  00FE17  49                 	db	73
   238  00FE18  49                 	db	73
   239  00FE19  46                 	db	70
   240  00FE1A  21                 	db	33
   241  00FE1B  41                 	db	65
   242  00FE1C  49                 	db	73
   243  00FE1D  4D                 	db	77
   244  00FE1E  33                 	db	51
   245  00FE1F  18                 	db	24
   246  00FE20  14                 	db	20
   247  00FE21  12                 	db	18
   248  00FE22  7F                 	db	127
   249  00FE23  10                 	db	16
   250  00FE24  27                 	db	39
   251  00FE25  45                 	db	69
   252  00FE26  45                 	db	69
   253  00FE27  45                 	db	69
   254  00FE28  39                 	db	57
   255  00FE29  3C                 	db	60
   256  00FE2A  4A                 	db	74
   257  00FE2B  49                 	db	73
   258  00FE2C  49                 	db	73
   259  00FE2D  31                 	db	49
   260  00FE2E  41                 	db	65
   261  00FE2F  21                 	db	33
   262  00FE30  11                 	db	17
   263  00FE31  09                 	db	9
   264  00FE32  07                 	db	7
   265  00FE33  36                 	db	54
   266  00FE34  49                 	db	73
   267  00FE35  49                 	db	73
   268  00FE36  49                 	db	73
   269  00FE37  36                 	db	54
   270  00FE38  46                 	db	70
   271  00FE39  49                 	db	73
   272  00FE3A  49                 	db	73
   273  00FE3B  29                 	db	41
   274  00FE3C  1E                 	db	30
   275  00FE3D  00                 	db	0
   276  00FE3E  00                 	db	0
   277  00FE3F  14                 	db	20
   278  00FE40  00                 	db	0
   279  00FE41  00                 	db	0
   280  00FE42  00                 	db	0
   281  00FE43  40                 	db	64
   282  00FE44  34                 	db	52
   283  00FE45  00                 	db	0
   284  00FE46  00                 	db	0
   285  00FE47  00                 	db	0
   286  00FE48  08                 	db	8
   287  00FE49  14                 	db	20
   288  00FE4A  22                 	db	34
   289  00FE4B  41                 	db	65
   290  00FE4C  14                 	db	20
   291  00FE4D  14                 	db	20
   292  00FE4E  14                 	db	20
   293  00FE4F  14                 	db	20
   294  00FE50  14                 	db	20
   295  00FE51  00                 	db	0
   296  00FE52  41                 	db	65
   297  00FE53  22                 	db	34
   298  00FE54  14                 	db	20
   299  00FE55  08                 	db	8
   300  00FE56  02                 	db	2
   301  00FE57  01                 	db	1
   302  00FE58  59                 	db	89
   303  00FE59  09                 	db	9
   304  00FE5A  06                 	db	6
   305  00FE5B  3E                 	db	62
   306  00FE5C  41                 	db	65
   307  00FE5D  5D                 	db	93
   308  00FE5E  59                 	db	89
   309  00FE5F  4E                 	db	78
   310  00FE60  7C                 	db	124
   311  00FE61  12                 	db	18
   312  00FE62  11                 	db	17
   313  00FE63  12                 	db	18
   314  00FE64  7C                 	db	124
   315  00FE65  7F                 	db	127
   316  00FE66  49                 	db	73
   317  00FE67  49                 	db	73
   318  00FE68  49                 	db	73
   319  00FE69  36                 	db	54
   320  00FE6A  3E                 	db	62
   321  00FE6B  41                 	db	65
   322  00FE6C  41                 	db	65
   323  00FE6D  41                 	db	65
   324  00FE6E  22                 	db	34
   325  00FE6F  7F                 	db	127
   326  00FE70  41                 	db	65
   327  00FE71  41                 	db	65
   328  00FE72  41                 	db	65
   329  00FE73  3E                 	db	62
   330  00FE74  7F                 	db	127
   331  00FE75  49                 	db	73
   332  00FE76  49                 	db	73
   333  00FE77  49                 	db	73
   334  00FE78  41                 	db	65
   335  00FE79  7F                 	db	127
   336  00FE7A  09                 	db	9
   337  00FE7B  09                 	db	9
   338  00FE7C  09                 	db	9
   339  00FE7D  01                 	db	1
   340  00FE7E  3E                 	db	62
   341  00FE7F  41                 	db	65
   342  00FE80  41                 	db	65
   343  00FE81  51                 	db	81
   344  00FE82  73                 	db	115
   345  00FE83  7F                 	db	127
   346  00FE84  08                 	db	8
   347  00FE85  08                 	db	8
   348  00FE86  08                 	db	8
   349  00FE87  7F                 	db	127
   350  00FE88  00                 	db	0
   351  00FE89  41                 	db	65
   352  00FE8A  7F                 	db	127
   353  00FE8B  41                 	db	65
   354  00FE8C  00                 	db	0
   355  00FE8D  20                 	db	32
   356  00FE8E  40                 	db	64
   357  00FE8F  41                 	db	65
   358  00FE90  3F                 	db	63
   359  00FE91  01                 	db	1
   360  00FE92  7F                 	db	127
   361  00FE93  08                 	db	8
   362  00FE94  14                 	db	20
   363  00FE95  22                 	db	34
   364  00FE96  41                 	db	65
   365  00FE97  7F                 	db	127
   366  00FE98  40                 	db	64
   367  00FE99  40                 	db	64
   368  00FE9A  40                 	db	64
   369  00FE9B  40                 	db	64
   370  00FE9C  7F                 	db	127
   371  00FE9D  02                 	db	2
   372  00FE9E  1C                 	db	28
   373  00FE9F  02                 	db	2
   374  00FEA0  7F                 	db	127
   375  00FEA1  7F                 	db	127
   376  00FEA2  04                 	db	4
   377  00FEA3  08                 	db	8
   378  00FEA4  10                 	db	16
   379  00FEA5  7F                 	db	127
   380  00FEA6  3E                 	db	62
   381  00FEA7  41                 	db	65
   382  00FEA8  41                 	db	65
   383  00FEA9  41                 	db	65
   384  00FEAA  3E                 	db	62
   385  00FEAB  7F                 	db	127
   386  00FEAC  09                 	db	9
   387  00FEAD  09                 	db	9
   388  00FEAE  09                 	db	9
   389  00FEAF  06                 	db	6
   390  00FEB0  3E                 	db	62
   391  00FEB1  41                 	db	65
   392  00FEB2  51                 	db	81
   393  00FEB3  21                 	db	33
   394  00FEB4  5E                 	db	94
   395  00FEB5  7F                 	db	127
   396  00FEB6  09                 	db	9
   397  00FEB7  19                 	db	25
   398  00FEB8  29                 	db	41
   399  00FEB9  46                 	db	70
   400  00FEBA                     __end_of_font:
   401                           	opt stack 0
   402  00FEBA                     _font2:
   403                           	opt stack 0
   404  00FEBA  26                 	db	38
   405  00FEBB  49                 	db	73
   406  00FEBC  49                 	db	73
   407  00FEBD  49                 	db	73
   408  00FEBE  32                 	db	50
   409  00FEBF  03                 	db	3
   410  00FEC0  01                 	db	1
   411  00FEC1  7F                 	db	127
   412  00FEC2  01                 	db	1
   413  00FEC3  03                 	db	3
   414  00FEC4  3F                 	db	63
   415  00FEC5  40                 	db	64
   416  00FEC6  40                 	db	64
   417  00FEC7  40                 	db	64
   418  00FEC8  3F                 	db	63
   419  00FEC9  1F                 	db	31
   420  00FECA  20                 	db	32
   421  00FECB  40                 	db	64
   422  00FECC  20                 	db	32
   423  00FECD  1F                 	db	31
   424  00FECE  3F                 	db	63
   425  00FECF  40                 	db	64
   426  00FED0  38                 	db	56
   427  00FED1  40                 	db	64
   428  00FED2  3F                 	db	63
   429  00FED3  63                 	db	99
   430  00FED4  14                 	db	20
   431  00FED5  08                 	db	8
   432  00FED6  14                 	db	20
   433  00FED7  63                 	db	99
   434  00FED8  03                 	db	3
   435  00FED9  04                 	db	4
   436  00FEDA  78                 	db	120
   437  00FEDB  04                 	db	4
   438  00FEDC  03                 	db	3
   439  00FEDD  61                 	db	97
   440  00FEDE  59                 	db	89
   441  00FEDF  49                 	db	73
   442  00FEE0  4D                 	db	77
   443  00FEE1  43                 	db	67
   444  00FEE2  00                 	db	0
   445  00FEE3  7F                 	db	127
   446  00FEE4  41                 	db	65
   447  00FEE5  41                 	db	65
   448  00FEE6  41                 	db	65
   449  00FEE7  02                 	db	2
   450  00FEE8  04                 	db	4
   451  00FEE9  08                 	db	8
   452  00FEEA  10                 	db	16
   453  00FEEB  20                 	db	32
   454  00FEEC  00                 	db	0
   455  00FEED  41                 	db	65
   456  00FEEE  41                 	db	65
   457  00FEEF  41                 	db	65
   458  00FEF0  7F                 	db	127
   459  00FEF1  04                 	db	4
   460  00FEF2  02                 	db	2
   461  00FEF3  01                 	db	1
   462  00FEF4  02                 	db	2
   463  00FEF5  04                 	db	4
   464  00FEF6  40                 	db	64
   465  00FEF7  40                 	db	64
   466  00FEF8  40                 	db	64
   467  00FEF9  40                 	db	64
   468  00FEFA  40                 	db	64
   469  00FEFB  00                 	db	0
   470  00FEFC  03                 	db	3
   471  00FEFD  07                 	db	7
   472  00FEFE  08                 	db	8
   473  00FEFF  00                 	db	0
   474  00FF00  20                 	db	32
   475  00FF01  54                 	db	84
   476  00FF02  54                 	db	84
   477  00FF03  78                 	db	120
   478  00FF04  40                 	db	64
   479  00FF05  7F                 	db	127
   480  00FF06  28                 	db	40
   481  00FF07  44                 	db	68
   482  00FF08  44                 	db	68
   483  00FF09  38                 	db	56
   484  00FF0A  38                 	db	56
   485  00FF0B  44                 	db	68
   486  00FF0C  44                 	db	68
   487  00FF0D  44                 	db	68
   488  00FF0E  28                 	db	40
   489  00FF0F  38                 	db	56
   490  00FF10  44                 	db	68
   491  00FF11  44                 	db	68
   492  00FF12  28                 	db	40
   493  00FF13  7F                 	db	127
   494  00FF14  38                 	db	56
   495  00FF15  54                 	db	84
   496  00FF16  54                 	db	84
   497  00FF17  54                 	db	84
   498  00FF18  18                 	db	24
   499  00FF19  00                 	db	0
   500  00FF1A  08                 	db	8
   501  00FF1B  7E                 	db	126
   502  00FF1C  09                 	db	9
   503  00FF1D  02                 	db	2
   504  00FF1E  18                 	db	24
   505  00FF1F  A4                 	db	164
   506  00FF20  A4                 	db	164
   507  00FF21  9C                 	db	156
   508  00FF22  78                 	db	120
   509  00FF23  7F                 	db	127
   510  00FF24  08                 	db	8
   511  00FF25  04                 	db	4
   512  00FF26  04                 	db	4
   513  00FF27  78                 	db	120
   514  00FF28  00                 	db	0
   515  00FF29  44                 	db	68
   516  00FF2A  7D                 	db	125
   517  00FF2B  40                 	db	64
   518  00FF2C  00                 	db	0
   519  00FF2D  20                 	db	32
   520  00FF2E  40                 	db	64
   521  00FF2F  40                 	db	64
   522  00FF30  3D                 	db	61
   523  00FF31  00                 	db	0
   524  00FF32  7F                 	db	127
   525  00FF33  10                 	db	16
   526  00FF34  28                 	db	40
   527  00FF35  44                 	db	68
   528  00FF36  00                 	db	0
   529  00FF37  00                 	db	0
   530  00FF38  41                 	db	65
   531  00FF39  7F                 	db	127
   532  00FF3A  40                 	db	64
   533  00FF3B  00                 	db	0
   534  00FF3C  7C                 	db	124
   535  00FF3D  04                 	db	4
   536  00FF3E  78                 	db	120
   537  00FF3F  04                 	db	4
   538  00FF40  78                 	db	120
   539  00FF41  7C                 	db	124
   540  00FF42  08                 	db	8
   541  00FF43  04                 	db	4
   542  00FF44  04                 	db	4
   543  00FF45  78                 	db	120
   544  00FF46  38                 	db	56
   545  00FF47  44                 	db	68
   546  00FF48  44                 	db	68
   547  00FF49  44                 	db	68
   548  00FF4A  38                 	db	56
   549  00FF4B  FC                 	db	252
   550  00FF4C  18                 	db	24
   551  00FF4D  24                 	db	36
   552  00FF4E  24                 	db	36
   553  00FF4F  18                 	db	24
   554  00FF50  18                 	db	24
   555  00FF51  24                 	db	36
   556  00FF52  24                 	db	36
   557  00FF53  18                 	db	24
   558  00FF54  FC                 	db	252
   559  00FF55  7C                 	db	124
   560  00FF56  08                 	db	8
   561  00FF57  04                 	db	4
   562  00FF58  04                 	db	4
   563  00FF59  08                 	db	8
   564  00FF5A  48                 	db	72
   565  00FF5B  54                 	db	84
   566  00FF5C  54                 	db	84
   567  00FF5D  54                 	db	84
   568  00FF5E  24                 	db	36
   569  00FF5F  04                 	db	4
   570  00FF60  04                 	db	4
   571  00FF61  3F                 	db	63
   572  00FF62  44                 	db	68
   573  00FF63  24                 	db	36
   574  00FF64  3C                 	db	60
   575  00FF65  40                 	db	64
   576  00FF66  40                 	db	64
   577  00FF67  20                 	db	32
   578  00FF68  7C                 	db	124
   579  00FF69  1C                 	db	28
   580  00FF6A  20                 	db	32
   581  00FF6B  40                 	db	64
   582  00FF6C  20                 	db	32
   583  00FF6D  1C                 	db	28
   584  00FF6E  3C                 	db	60
   585  00FF6F  40                 	db	64
   586  00FF70  30                 	db	48
   587  00FF71  40                 	db	64
   588  00FF72  3C                 	db	60
   589  00FF73  44                 	db	68
   590  00FF74  28                 	db	40
   591  00FF75  10                 	db	16
   592  00FF76  28                 	db	40
   593  00FF77  44                 	db	68
   594  00FF78  4C                 	db	76
   595  00FF79  90                 	db	144
   596  00FF7A  90                 	db	144
   597  00FF7B  90                 	db	144
   598  00FF7C  7C                 	db	124
   599  00FF7D  44                 	db	68
   600  00FF7E  64                 	db	100
   601  00FF7F  54                 	db	84
   602  00FF80  4C                 	db	76
   603  00FF81  44                 	db	68
   604  00FF82  00                 	db	0
   605  00FF83  08                 	db	8
   606  00FF84  36                 	db	54
   607  00FF85  41                 	db	65
   608  00FF86  00                 	db	0
   609  00FF87  00                 	db	0
   610  00FF88  00                 	db	0
   611  00FF89  77                 	db	119
   612  00FF8A  00                 	db	0
   613  00FF8B  00                 	db	0
   614  00FF8C  00                 	db	0
   615  00FF8D  41                 	db	65
   616  00FF8E  36                 	db	54
   617  00FF8F  08                 	db	8
   618  00FF90  00                 	db	0
   619  00FF91  02                 	db	2
   620  00FF92  01                 	db	1
   621  00FF93  02                 	db	2
   622  00FF94  04                 	db	4
   623  00FF95  02                 	db	2
   624  00FF96                     __end_of_font2:
   625                           	opt stack 0
   626  0000                     _ADCON0	set	4034
   627  0000                     _ADCON0bits	set	4034
   628  0000                     _ADCON1	set	4033
   629  0000                     _ADCON2	set	4032
   630  0000                     _ADRESH	set	4036
   631  0000                     _ADRESL	set	4035
   632  0000                     _CCP2CON	set	4026
   633  0000                     _CCPR2L	set	4027
   634  0000                     _INTCONbits	set	4082
   635  0000                     _OSCCON	set	4051
   636  0000                     _PIE1bits	set	3997
   637  0000                     _PIR1bits	set	3998
   638  0000                     _PIR2bits	set	4001
   639  0000                     _PORTAbits	set	3968
   640  0000                     _PORTBbits	set	3969
   641  0000                     _PORTCbits	set	3970
   642  0000                     _PORTDbits	set	3971
   643  0000                     _PORTEbits	set	3972
   644  0000                     _PR2	set	4043
   645  0000                     _RCSTA	set	4011
   646  0000                     _RCSTAbits	set	4011
   647  0000                     _SPBRG	set	4015
   648  0000                     _SPBRGH	set	4016
   649  0000                     _SSPBUF	set	4041
   650  0000                     _SSPCON1	set	4038
   651  0000                     _SSPSTAT	set	4039
   652  0000                     _SSPSTATbits	set	4039
   653  0000                     _T0CON	set	4053
   654  0000                     _T0CONbits	set	4053
   655  0000                     _T2CON	set	4042
   656  0000                     _T3CON	set	4017
   657  0000                     _T3CONbits	set	4017
   658  0000                     _TMR0H	set	4055
   659  0000                     _TMR0L	set	4054
   660  0000                     _TRISA	set	3986
   661  0000                     _TRISB	set	3987
   662  0000                     _TRISC	set	3988
   663  0000                     _TRISCbits	set	3988
   664  0000                     _TRISD	set	3989
   665  0000                     _TRISE	set	3990
   666  0000                     _TXREG	set	4013
   667  0000                     _TXSTA	set	4012
   668  0000                     _TXSTAbits	set	4012
   669  0000                     _TRMT	set	32097
   670  00FF96                     STR_1:
   671  00FF96  45                 	db	69	;'E'
   672  00FF97  43                 	db	67	;'C'
   673  00FF98  45                 	db	69	;'E'
   674  00FF99  33                 	db	51	;'3'
   675  00FF9A  33                 	db	51	;'3'
   676  00FF9B  30                 	db	48	;'0'
   677  00FF9C  31                 	db	49	;'1'
   678  00FF9D  4C                 	db	76	;'L'
   679  00FF9E  20                 	db	32
   680  00FF9F  53                 	db	83	;'S'
   681  00FFA0  50                 	db	80	;'P'
   682  00FFA1  52                 	db	82	;'R'
   683  00FFA2  49                 	db	73	;'I'
   684  00FFA3  4E                 	db	78	;'N'
   685  00FFA4  47                 	db	71	;'G'
   686  00FFA5  20                 	db	32
   687  00FFA6  32                 	db	50	;'2'
   688  00FFA7  32                 	db	50	;'2'
   689  00FFA8  2D                 	db	45
   690  00FFA9  53                 	db	83	;'S'
   691  00FFAA  31                 	db	49	;'1'
   692  00FFAB  00                 	db	0
   693  00FFAC                     STR_12:
   694  00FFAC  4E                 	db	78	;'N'
   695  00FFAD  53                 	db	83	;'S'
   696  00FFAE  50                 	db	80	;'P'
   697  00FFAF  20                 	db	32
   698  00FFB0  4E                 	db	78	;'N'
   699  00FFB1  53                 	db	83	;'S'
   700  00FFB2  4C                 	db	76	;'L'
   701  00FFB3  54                 	db	84	;'T'
   702  00FFB4  20                 	db	32
   703  00FFB5  45                 	db	69	;'E'
   704  00FFB6  57                 	db	87	;'W'
   705  00FFB7  50                 	db	80	;'P'
   706  00FFB8  20                 	db	32
   707  00FFB9  45                 	db	69	;'E'
   708  00FFBA  57                 	db	87	;'W'
   709  00FFBB  4C                 	db	76	;'L'
   710  00FFBC  54                 	db	84	;'T'
   711  00FFBD  20                 	db	32
   712  00FFBE  4D                 	db	77	;'M'
   713  00FFBF  52                 	db	82	;'R'
   714  00FFC0  00                 	db	0
   715  00FFC1                     STR_6:
   716  00FFC1  4E                 	db	78	;'N'
   717  00FFC2  4F                 	db	79	;'O'
   718  00FFC3  52                 	db	82	;'R'
   719  00FFC4  54                 	db	84	;'T'
   720  00FFC5  48                 	db	72	;'H'
   721  00FFC6  2F                 	db	47
   722  00FFC7  53                 	db	83	;'S'
   723  00FFC8  4F                 	db	79	;'O'
   724  00FFC9  55                 	db	85	;'U'
   725  00FFCA  54                 	db	84	;'T'
   726  00FFCB  48                 	db	72	;'H'
   727  00FFCC  00                 	db	0
   728  00FFCD                     STR_8:
   729  00FFCD  45                 	db	69	;'E'
   730  00FFCE  41                 	db	65	;'A'
   731  00FFCF  53                 	db	83	;'S'
   732  00FFD0  54                 	db	84	;'T'
   733  00FFD1  2F                 	db	47
   734  00FFD2  57                 	db	87	;'W'
   735  00FFD3  45                 	db	69	;'E'
   736  00FFD4  53                 	db	83	;'S'
   737  00FFD5  54                 	db	84	;'T'
   738  00FFD6  00                 	db	0
   739  00FFD7                     STR_7:
   740  00FFD7  4E                 	db	78	;'N'
   741  00FFD8  2F                 	db	47
   742  00FFD9  53                 	db	83	;'S'
   743  00FFDA  20                 	db	32
   744  00FFDB  4C                 	db	76	;'L'
   745  00FFDC  54                 	db	84	;'T'
   746  00FFDD  00                 	db	0
   747  00FFDE                     STR_9:
   748  00FFDE  45                 	db	69	;'E'
   749  00FFDF  2F                 	db	47
   750  00FFE0  57                 	db	87	;'W'
   751  00FFE1  20                 	db	32
   752  00FFE2  4C                 	db	76	;'L'
   753  00FFE3  54                 	db	84	;'T'
   754  00FFE4  00                 	db	0
   755  00FFE5                     STR_2:
   756  00FFE5  4D                 	db	77	;'M'
   757  00FFE6  6F                 	db	111	;'o'
   758  00FFE7  64                 	db	100	;'d'
   759  00FFE8  65                 	db	101	;'e'
   760  00FFE9  3A                 	db	58	;':'
   761  00FFEA  00                 	db	0
   762  00FFEB                     STR_3:
   763  00FFEB  46                 	db	70	;'F'
   764  00FFEC  52                 	db	82	;'R'
   765  00FFED  3A                 	db	58	;':'
   766  00FFEE  00                 	db	0
   767  00FFEF                     STR_4:
   768  00FFEF  46                 	db	70	;'F'
   769  00FFF0  53                 	db	83	;'S'
   770  00FFF1  3A                 	db	58	;':'
   771  00FFF2  00                 	db	0
   772  00FFF3                     STR_10:
   773  00FFF3  50                 	db	80	;'P'
   774  00FFF4  4E                 	db	78	;'N'
   775  00FFF5  53                 	db	83	;'S'
   776  00FFF6  00                 	db	0
   777  00FFF7                     STR_11:
   778  00FFF7  50                 	db	80	;'P'
   779  00FFF8  45                 	db	69	;'E'
   780  00FFF9  57                 	db	87	;'W'
   781  00FFFA  00                 	db	0
   782  00FFFB                     STR_14:
   783  00FFFB  20                 	db	32
   784  00FFFC  00                 	db	0
   785  00FFFD                     STR_5:
   786  00FFFD  2A                 	db	42
   787  00FFFE  00                 	db	0
   788  0000                     
   789                           ; #config settings
   790  00FFFF  00                 	db	0	; dummy byte at the end
   791  0000                     
   792                           	psect	cinit
   793  00DC00                     __pcinit:
   794                           	opt stack 0
   795  00DC00                     start_initialization:
   796                           	opt stack 0
   797  00DC00                     __initialization:
   798                           	opt stack 0
   799                           
   800                           ; Clear objects allocated to BANK0 (31 bytes)
   801  00DC00  EE00  F080         	lfsr	0,__pbssBANK0
   802  00DC04  0E1F               	movlw	31
   803  00DC06                     clear_0:
   804  00DC06  6AEE               	clrf	postinc0,c
   805  00DC08  06E8               	decf	wreg,f,c
   806  00DC0A  E1FD               	bnz	clear_0
   807                           
   808                           ; Clear objects allocated to COMRAM (23 bytes)
   809  00DC0C  EE00  F065         	lfsr	0,__pbssCOMRAM
   810  00DC10  0E17               	movlw	23
   811  00DC12                     clear_1:
   812  00DC12  6AEE               	clrf	postinc0,c
   813  00DC14  06E8               	decf	wreg,f,c
   814  00DC16  E1FD               	bnz	clear_1
   815                           
   816                           ; Initialize objects allocated to COMRAM (35 bytes)
   817                           ; load TBLPTR registers with __pidataCOMRAM
   818  00DC18  0EEB               	movlw	low __pidataCOMRAM
   819  00DC1A  6EF6               	movwf	tblptrl,c
   820  00DC1C  0ED9               	movlw	high __pidataCOMRAM
   821  00DC1E  6EF7               	movwf	tblptrh,c
   822  00DC20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   823  00DC22  6EF8               	movwf	tblptru,c
   824  00DC24  EE00  F042         	lfsr	0,__pdataCOMRAM
   825  00DC28  EE10 F023          	lfsr	1,35
   826  00DC2C                     copy_data0:
   827  00DC2C  0009               	tblrd		*+
   828  00DC2E  CFF5 FFEE          	movff	tablat,postinc0
   829  00DC32  50E5               	movf	postdec1,w,c
   830  00DC34  50E1               	movf	fsr1l,w,c
   831  00DC36  E1FA               	bnz	copy_data0
   832  00DC38                     end_of_initialization:
   833                           	opt stack 0
   834  00DC38                     __end_of__initialization:
   835                           	opt stack 0
   836  00DC38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   837  00DC3A  6EF8               	movwf	tblptru,c
   838  00DC3C  0100               	movlb	0
   839  00DC3E  EFEA  F071         	goto	_main	;jump to C main() function
   840                           tblptru	equ	0xFF8
   841                           tblptrh	equ	0xFF7
   842                           tblptrl	equ	0xFF6
   843                           tablat	equ	0xFF5
   844                           postinc0	equ	0xFEE
   845                           wreg	equ	0xFE8
   846                           postdec1	equ	0xFE5
   847                           fsr1l	equ	0xFE1
   848                           
   849                           	psect	bssCOMRAM
   850  000065                     __pbssCOMRAM:
   851                           	opt stack 0
   852  000065                     _volt:
   853                           	opt stack 0
   854  000065                     	ds	3
   855  000068                     _MODE:
   856                           	opt stack 0
   857  000068                     	ds	2
   858  00006A                     _nbr:
   859                           	opt stack 0
   860  00006A                     	ds	2
   861  00006C                     _txt:
   862                           	opt stack 0
   863  00006C                     	ds	2
   864  00006E                     _Count:
   865                           	opt stack 0
   866  00006E                     	ds	1
   867  00006F                     _FLASHING:
   868                           	opt stack 0
   869  00006F                     	ds	1
   870  000070                     _FLASHING_REQUEST:
   871                           	opt stack 0
   872  000070                     	ds	1
   873  000071                     _PED_Count:
   874                           	opt stack 0
   875  000071                     	ds	1
   876  000072                     _SW_EWLT:
   877                           	opt stack 0
   878  000072                     	ds	1
   879  000073                     _SW_EWPED:
   880                           	opt stack 0
   881  000073                     	ds	1
   882  000074                     _SW_MODE:
   883                           	opt stack 0
   884  000074                     	ds	1
   885  000075                     _SW_NSLT:
   886                           	opt stack 0
   887  000075                     	ds	1
   888  000076                     _SW_NSPED:
   889                           	opt stack 0
   890  000076                     	ds	1
   891  000077                     __tft_type:
   892                           	opt stack 0
   893  000077                     	ds	1
   894  000078                     _colstart:
   895                           	opt stack 0
   896  000078                     	ds	1
   897  000079                     _dir:
   898                           	opt stack 0
   899  000079                     	ds	1
   900  00007A                     _direction:
   901                           	opt stack 0
   902  00007A                     	ds	1
   903  00007B                     _rowstart:
   904                           	opt stack 0
   905  00007B                     	ds	1
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           
   915                           	psect	dataCOMRAM
   916  000042                     __pdataCOMRAM:
   917                           	opt stack 0
   918  000042                     _wrap:
   919                           	opt stack 0
   920  000042                     	ds	1
   921  000043                     _EWLT_Count:
   922                           	opt stack 0
   923  000043                     	ds	3
   924  000046                     _EW_Count:
   925                           	opt stack 0
   926  000046                     	ds	3
   927  000049                     _NSLT_Count:
   928                           	opt stack 0
   929  000049                     	ds	3
   930  00004C                     _NS_Count:
   931                           	opt stack 0
   932  00004C                     	ds	3
   933  00004F                     _PED_EW_Count:
   934                           	opt stack 0
   935  00004F                     	ds	3
   936  000052                     _PED_NS_Count:
   937                           	opt stack 0
   938  000052                     	ds	3
   939  000055                     _Act_Mode_Txt:
   940                           	opt stack 0
   941  000055                     	ds	2
   942  000057                     _FlashingR_Txt:
   943                           	opt stack 0
   944  000057                     	ds	2
   945  000059                     _FlashingS_Txt:
   946                           	opt stack 0
   947  000059                     	ds	2
   948  00005B                     _SW_EWLT_Txt:
   949                           	opt stack 0
   950  00005B                     	ds	2
   951  00005D                     _SW_EWPED_Txt:
   952                           	opt stack 0
   953  00005D                     	ds	2
   954  00005F                     _SW_MODE_Txt:
   955                           	opt stack 0
   956  00005F                     	ds	2
   957  000061                     _SW_NSLT_Txt:
   958                           	opt stack 0
   959  000061                     	ds	2
   960  000063                     _SW_NSPED_Txt:
   961                           	opt stack 0
   962  000063                     	ds	2
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	bssBANK0
   973  000080                     __pbssBANK0:
   974                           	opt stack 0
   975  000080                     _buffer:
   976                           	opt stack 0
   977  000080                     	ds	31
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           
   987                           	psect	cstackCOMRAM
   988  000001                     __pcstackCOMRAM:
   989                           	opt stack 0
   990  000001                     ?_strlen:
   991                           	opt stack 0
   992  000001                     ?_get_full_ADC:
   993                           	opt stack 0
   994  000001                     ?___wmul:
   995                           	opt stack 0
   996  000001                     ?___awdiv:
   997                           	opt stack 0
   998  000001                     ?___awmod:
   999                           	opt stack 0
  1000  000001                     ?___ftpack:
  1001                           	opt stack 0
  1002  000001                     spiwrite@x:
  1003                           	opt stack 0
  1004  000001                     OpenUSART@spbrg:
  1005                           	opt stack 0
  1006  000001                     ___wmul@multiplier:
  1007                           	opt stack 0
  1008  000001                     ___awdiv@dividend:
  1009                           	opt stack 0
  1010  000001                     ___awmod@dividend:
  1011                           	opt stack 0
  1012  000001                     strcpy@to:
  1013                           	opt stack 0
  1014  000001                     strlen@s:
  1015                           	opt stack 0
  1016  000001                     ___ftpack@arg:
  1017                           	opt stack 0
  1018  000001                     ___ftge@ff1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 3 bytes @ 0x0
  1022  000001                     	ds	1
  1023  000002                     spiwrite@spidata:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x1
  1027  000002                     	ds	1
  1028  000003                     ??_strlen:
  1029  000003                     ??_get_full_ADC:
  1030  000003                     write_command@cmd_:
  1031                           	opt stack 0
  1032  000003                     write_data@data_:
  1033                           	opt stack 0
  1034  000003                     OpenUSART@config:
  1035                           	opt stack 0
  1036  000003                     ___wmul@multiplicand:
  1037                           	opt stack 0
  1038  000003                     ___awdiv@divisor:
  1039                           	opt stack 0
  1040  000003                     ___awmod@divisor:
  1041                           	opt stack 0
  1042  000003                     strcpy@from:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x2
  1046  000003                     	ds	1
  1047  000004                     setAddrWindow@y0:
  1048                           	opt stack 0
  1049  000004                     ___ftpack@exp:
  1050                           	opt stack 0
  1051  000004                     ___ftge@ff2:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0x3
  1055  000004                     	ds	1
  1056  000005                     setAddrWindow@x1:
  1057                           	opt stack 0
  1058  000005                     ___awdiv@counter:
  1059                           	opt stack 0
  1060  000005                     ___awmod@counter:
  1061                           	opt stack 0
  1062  000005                     ___ftpack@sign:
  1063                           	opt stack 0
  1064  000005                     get_full_ADC@result:
  1065                           	opt stack 0
  1066  000005                     ___wmul@product:
  1067                           	opt stack 0
  1068  000005                     strcpy@cp:
  1069                           	opt stack 0
  1070  000005                     strlen@cp:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x4
  1074  000005                     	ds	1
  1075  000006                     ??___ftpack:
  1076  000006                     setAddrWindow@y1:
  1077                           	opt stack 0
  1078  000006                     ___awdiv@sign:
  1079                           	opt stack 0
  1080  000006                     ___awmod@sign:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x5
  1084  000006                     	ds	1
  1085  000007                     ??___ftge:
  1086  000007                     setAddrWindow@x0:
  1087                           	opt stack 0
  1088  000007                     delay_ms@ms:
  1089                           	opt stack 0
  1090  000007                     ___awdiv@quotient:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0x6
  1094  000007                     	ds	1
  1095  000008                     drawPixel@y:
  1096                           	opt stack 0
  1097  000008                     drawFastVLine@y:
  1098                           	opt stack 0
  1099  000008                     fillRectangle@y:
  1100                           	opt stack 0
  1101  000008                     drawFastHLine@y:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x7
  1105  000008                     	ds	1
  1106  000009                     ??_delay_ms:
  1107  000009                     ?___awtoft:
  1108                           	opt stack 0
  1109  000009                     drawFastVLine@h:
  1110                           	opt stack 0
  1111  000009                     fillRectangle@w:
  1112                           	opt stack 0
  1113  000009                     drawFastHLine@w:
  1114                           	opt stack 0
  1115  000009                     drawPixel@color:
  1116                           	opt stack 0
  1117  000009                     ___awtoft@c:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x8
  1121  000009                     	ds	1
  1122  00000A                     fillRectangle@h:
  1123                           	opt stack 0
  1124  00000A                     drawFastVLine@color:
  1125                           	opt stack 0
  1126  00000A                     drawFastHLine@color:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x9
  1130  00000A                     	ds	1
  1131  00000B                     drawPixel@x:
  1132                           	opt stack 0
  1133  00000B                     delay_ms@count:
  1134                           	opt stack 0
  1135  00000B                     fillRectangle@color:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0xA
  1139  00000B                     	ds	1
  1140  00000C                     ??_drawFastVLine:
  1141  00000C                     ??_drawFastHLine:
  1142  00000C                     ___awtoft@sign:
  1143                           	opt stack 0
  1144  00000C                     drawCircle@x0:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0xB
  1148  00000C                     	ds	1
  1149  00000D                     ??_fillRectangle:
  1150  00000D                     ?___ftdiv:
  1151                           	opt stack 0
  1152  00000D                     ___ftdiv@f1:
  1153                           	opt stack 0
  1154                           
  1155                           ; 3 bytes @ 0xC
  1156  00000D                     	ds	1
  1157  00000E                     drawCircle@y0:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0xD
  1161  00000E                     	ds	2
  1162  000010                     drawFastVLine@hi:
  1163                           	opt stack 0
  1164  000010                     drawFastHLine@hi:
  1165                           	opt stack 0
  1166  000010                     drawCircle@r:
  1167                           	opt stack 0
  1168  000010                     ___ftdiv@f2:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0xF
  1172  000010                     	ds	1
  1173  000011                     drawFastVLine@lo:
  1174                           	opt stack 0
  1175  000011                     fillRectangle@hi:
  1176                           	opt stack 0
  1177  000011                     drawFastHLine@lo:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x10
  1181  000011                     	ds	1
  1182  000012                     drawFastVLine@x:
  1183                           	opt stack 0
  1184  000012                     fillRectangle@lo:
  1185                           	opt stack 0
  1186  000012                     drawFastHLine@x:
  1187                           	opt stack 0
  1188  000012                     drawCircle@color:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x11
  1192  000012                     	ds	1
  1193  000013                     ??___ftdiv:
  1194  000013                     fillRect@y:
  1195                           	opt stack 0
  1196  000013                     fillRectangle@x:
  1197                           	opt stack 0
  1198  000013                     fillCircleHelper@x0:
  1199                           	opt stack 0
  1200  000013                     drawRect@x:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x12
  1204  000013                     	ds	1
  1205  000014                     ??_drawCircle:
  1206  000014                     fillRect@w:
  1207                           	opt stack 0
  1208  000014                     fillScreen@color:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x13
  1212  000014                     	ds	1
  1213  000015                     fillRect@h:
  1214                           	opt stack 0
  1215  000015                     fillCircleHelper@y0:
  1216                           	opt stack 0
  1217  000015                     drawRect@y:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x14
  1221  000015                     	ds	1
  1222  000016                     ___ftdiv@cntr:
  1223                           	opt stack 0
  1224  000016                     fillRect@color:
  1225                           	opt stack 0
  1226  000016                     drawCircle@ddF_x:
  1227                           	opt stack 0
  1228                           
  1229                           ; 2 bytes @ 0x15
  1230  000016                     	ds	1
  1231  000017                     fillCircleHelper@r:
  1232                           	opt stack 0
  1233  000017                     drawRect@w:
  1234                           	opt stack 0
  1235  000017                     ___ftdiv@f3:
  1236                           	opt stack 0
  1237                           
  1238                           ; 3 bytes @ 0x16
  1239  000017                     	ds	1
  1240  000018                     ??_fillRect:
  1241  000018                     drawCircle@ddF_y:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x17
  1245  000018                     	ds	1
  1246  000019                     fillCircleHelper@cornername:
  1247                           	opt stack 0
  1248  000019                     drawRect@h:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x18
  1252  000019                     	ds	1
  1253  00001A                     ___ftdiv@exp:
  1254                           	opt stack 0
  1255  00001A                     drawCircle@f:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x19
  1259  00001A                     	ds	1
  1260  00001B                     fillRect@x:
  1261                           	opt stack 0
  1262  00001B                     ___ftdiv@sign:
  1263                           	opt stack 0
  1264  00001B                     fillCircleHelper@delta:
  1265                           	opt stack 0
  1266  00001B                     drawRect@color:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x1A
  1270  00001B                     	ds	1
  1271  00001C                     fillRect@i:
  1272                           	opt stack 0
  1273  00001C                     drawCircle@x:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x1B
  1277  00001C                     	ds	1
  1278  00001D                     ??_drawRect:
  1279  00001D                     fillCircleHelper@color:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x1C
  1283  00001D                     	ds	1
  1284  00001E                     drawChar@y:
  1285                           	opt stack 0
  1286  00001E                     drawCircle@y:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x1D
  1290  00001E                     	ds	1
  1291  00001F                     ??_fillCircleHelper:
  1292  00001F                     drawChar@c:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x1E
  1296  00001F                     	ds	1
  1297  000020                     drawChar@color:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x1F
  1301  000020                     	ds	1
  1302  000021                     fillCircleHelper@ddF_x:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x20
  1306  000021                     	ds	1
  1307  000022                     drawChar@bg:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x21
  1311  000022                     	ds	1
  1312  000023                     fillCircleHelper@ddF_y:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x22
  1316  000023                     	ds	1
  1317  000024                     drawChar@size:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x23
  1321  000024                     	ds	1
  1322  000025                     drawChar@line:
  1323                           	opt stack 0
  1324  000025                     fillCircleHelper@f:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x24
  1328  000025                     	ds	1
  1329  000026                     drawChar@x:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x25
  1333  000026                     	ds	1
  1334  000027                     drawChar@j:
  1335                           	opt stack 0
  1336  000027                     fillCircleHelper@x:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x26
  1340  000027                     	ds	1
  1341  000028                     drawChar@i:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x27
  1345  000028                     	ds	1
  1346  000029                     drawtext@y:
  1347                           	opt stack 0
  1348  000029                     fillCircleHelper@y:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x28
  1352  000029                     	ds	1
  1353  00002A                     drawtext@_text:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x29
  1357  00002A                     	ds	1
  1358  00002B                     fillCircle@x0:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x2A
  1362  00002B                     	ds	1
  1363  00002C                     drawtext@color:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x2B
  1367  00002C                     	ds	1
  1368  00002D                     fillCircle@y0:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x2C
  1372  00002D                     	ds	1
  1373  00002E                     drawtext@bg:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x2D
  1377  00002E                     	ds	1
  1378  00002F                     fillCircle@r:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x2E
  1382  00002F                     	ds	1
  1383  000030                     drawtext@size:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x2F
  1387  000030                     	ds	1
  1388  000031                     ??_drawtext:
  1389  000031                     fillCircle@color:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x30
  1393  000031                     	ds	2
  1394  000033                     update_LCD_color@color:
  1395                           	opt stack 0
  1396  000033                     drawtext@textsize:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x32
  1400  000033                     	ds	1
  1401  000034                     update_LCD_color@direction:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x33
  1405  000034                     	ds	1
  1406  000035                     drawtext@x:
  1407                           	opt stack 0
  1408  000035                     update_LCD_color@Circle_Y:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x34
  1412  000035                     	ds	1
  1413  000036                     Set_NS@color:
  1414                           	opt stack 0
  1415  000036                     Set_NS_LT@color:
  1416                           	opt stack 0
  1417  000036                     Set_EW@color:
  1418                           	opt stack 0
  1419  000036                     Set_EW_LT@color:
  1420                           	opt stack 0
  1421  000036                     drawtext@i:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x35
  1425  000036                     	ds	2
  1426  000038                     drawtext@cursor_y:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x37
  1430  000038                     	ds	1
  1431  000039                     drawtext@cursor_x:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x38
  1435  000039                     	ds	1
  1436  00003A                     update_LCD_count@count:
  1437                           	opt stack 0
  1438  00003A                     update_LCD_PED_Count@count:
  1439                           	opt stack 0
  1440  00003A                     update_LCD_misc@nStep:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x39
  1444  00003A                     	ds	1
  1445  00003B                     update_LCD_count@direction:
  1446                           	opt stack 0
  1447  00003B                     update_LCD_PED_Count@direction:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x3A
  1451  00003B                     	ds	1
  1452  00003C                     update_LCD_misc@ch:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x3B
  1456  00003C                     	ds	1
  1457  00003D                     PED_Control@Num_Sec:
  1458                           	opt stack 0
  1459  00003D                     Wait_N_Seconds@seconds:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x3C
  1463  00003D                     	ds	1
  1464  00003E                     PED_Control@direction:
  1465                           	opt stack 0
  1466  00003E                     Wait_N_Seconds@I:
  1467                           	opt stack 0
  1468                           
  1469                           ; 1 bytes @ 0x3D
  1470  00003E                     	ds	1
  1471  00003F                     PED_Control@i:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x3E
  1475  00003F                     	ds	1
  1476  000040                     main@nStep:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x3F
  1480  000040                     	ds	2
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490 ;;
  1491 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1492 ;;
  1493 ;; *************** function _main *****************
  1494 ;; Defined at:
  1495 ;;		line 265 in file "Lab8pE.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  nStep           2   63[COMRAM] int 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;		None               void
  1502 ;; Registers used:
  1503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;Total ram usage:        2 bytes
  1514 ;; Hardware stack levels required when called:   11
  1515 ;; This function calls:
  1516 ;;		_Day_Mode
  1517 ;;		_Init_ADC
  1518 ;;		_Initialize_Screen
  1519 ;;		_Night_Mode
  1520 ;;		___awtoft
  1521 ;;		___ftdiv
  1522 ;;		___ftge
  1523 ;;		___wmul
  1524 ;;		_get_full_ADC
  1525 ;;		_init_IO
  1526 ;;		_init_UART
  1527 ;; This function is called by:
  1528 ;;		Startup code after reset
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text0
  1533  00E3D4                     __ptext0:
  1534                           	opt stack 0
  1535  00E3D4                     _main:
  1536                           	opt stack 20
  1537                           
  1538                           ;Lab8pE.c: 267: init_IO();
  1539                           
  1540                           ;incstack = 0
  1541  00E3D4  ECCF  F06C         	call	_init_IO	;wreg free
  1542                           
  1543                           ;Lab8pE.c: 268: Init_ADC();
  1544  00E3D8  EC92  F06C         	call	_Init_ADC	;wreg free
  1545                           
  1546                           ;Lab8pE.c: 269: init_UART();
  1547  00E3DC  ECC5  F06C         	call	_init_UART	;wreg free
  1548                           
  1549                           ;Lab8pE.c: 270: OSCCON = 0x70;
  1550  00E3E0  0E70               	movlw	112
  1551  00E3E2  6ED3               	movwf	4051,c	;volatile
  1552                           
  1553                           ;Lab8pE.c: 271: Initialize_Screen();
  1554  00E3E4  EC4E  F07B         	call	_Initialize_Screen	;wreg free
  1555                           
  1556                           ;Lab8pE.c: 274: int nStep = get_full_ADC();
  1557  00E3E8  EC07  F06D         	call	_get_full_ADC	;wreg free
  1558  00E3EC  C001  F040         	movff	?_get_full_ADC,main@nStep
  1559  00E3F0  C002  F041         	movff	?_get_full_ADC+1,main@nStep+1
  1560                           
  1561                           ;Lab8pE.c: 275: volt = nStep * 5 /1024.0;
  1562  00E3F4  C040  F001         	movff	main@nStep,___wmul@multiplier
  1563  00E3F8  C041  F002         	movff	main@nStep+1,___wmul@multiplier+1
  1564  00E3FC  0E00               	movlw	0
  1565  00E3FE  6E04               	movwf	___wmul@multiplicand+1,c
  1566  00E400  0E05               	movlw	5
  1567  00E402  6E03               	movwf	___wmul@multiplicand,c
  1568  00E404  EC1A  F06D         	call	___wmul	;wreg free
  1569  00E408  C001  F009         	movff	?___wmul,___awtoft@c
  1570  00E40C  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  1571  00E410  ECA4  F06D         	call	___awtoft	;wreg free
  1572  00E414  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  1573  00E418  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  1574  00E41C  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  1575  00E420  0E00               	movlw	0
  1576  00E422  6E10               	movwf	___ftdiv@f2,c
  1577  00E424  0E80               	movlw	128
  1578  00E426  6E11               	movwf	___ftdiv@f2+1,c
  1579  00E428  0E44               	movlw	68
  1580  00E42A  6E12               	movwf	___ftdiv@f2+2,c
  1581  00E42C  EC45  F074         	call	___ftdiv	;wreg free
  1582  00E430  C00D  F065         	movff	?___ftdiv,_volt
  1583  00E434  C00E  F066         	movff	?___ftdiv+1,_volt+1
  1584  00E438  C00F  F067         	movff	?___ftdiv+2,_volt+2
  1585                           
  1586                           ;Lab8pE.c: 276: SW_MODE = volt < 2.5 ? 1:0;
  1587  00E43C  C065  F001         	movff	_volt,___ftge@ff1
  1588  00E440  C066  F002         	movff	_volt+1,___ftge@ff1+1
  1589  00E444  C067  F003         	movff	_volt+2,___ftge@ff1+2
  1590  00E448  0E00               	movlw	0
  1591  00E44A  6E04               	movwf	___ftge@ff2,c
  1592  00E44C  0E20               	movlw	32
  1593  00E44E  6E05               	movwf	___ftge@ff2+1,c
  1594  00E450  0E40               	movlw	64
  1595  00E452  6E06               	movwf	___ftge@ff2+2,c
  1596  00E454  EC01  F071         	call	___ftge	;wreg free
  1597  00E458  B0D8               	btfsc	status,0,c
  1598  00E45A  D002               	goto	u2520
  1599  00E45C  0E01               	movlw	1
  1600  00E45E  D001               	goto	u2530
  1601  00E460                     u2520:
  1602  00E460  0E00               	movlw	0
  1603  00E462                     u2530:
  1604  00E462  6E74               	movwf	_SW_MODE,c
  1605  00E464  D000               	goto	l3937
  1606  00E466                     l3937:
  1607                           
  1608                           ;Lab8pE.c: 279: {
  1609                           ;Lab8pE.c: 280: if (SW_MODE)
  1610  00E466  5074               	movf	_SW_MODE,w,c
  1611  00E468  B4D8               	btfsc	status,2,c
  1612  00E46A  D003               	goto	l3941
  1613                           
  1614                           ;Lab8pE.c: 281: {
  1615                           ;Lab8pE.c: 282: Day_Mode();
  1616  00E46C  EC03  F073         	call	_Day_Mode	;wreg free
  1617                           
  1618                           ;Lab8pE.c: 283: }
  1619  00E470  D7FA               	goto	l3937
  1620  00E472                     l3941:
  1621                           
  1622                           ;Lab8pE.c: 284: else
  1623                           ;Lab8pE.c: 285: {
  1624                           ;Lab8pE.c: 286: Night_Mode();
  1625  00E472  EC97  F071         	call	_Night_Mode	;wreg free
  1626  00E476  D7F7               	goto	l3937
  1627  00E478  EF00  F000         	goto	start
  1628  00E47C                     __end_of_main:
  1629                           	opt stack 0
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1l	equ	0xFE1
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _init_UART *****************
  1641 ;; Defined at:
  1642 ;;		line 251 in file "Lab8pE.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;		None               void
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        0 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    1
  1663 ;; This function calls:
  1664 ;;		_OpenUSART
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text1
  1671  00D98A                     __ptext1:
  1672                           	opt stack 0
  1673  00D98A                     _init_UART:
  1674                           	opt stack 29
  1675                           
  1676                           ;Lab8pE.c: 253: OpenUSART (0b01111111 & 0b10111111 &
  1677                           ;Lab8pE.c: 254: 0b11111110 & 0b11111101 & 0b11111111 &
  1678                           ;Lab8pE.c: 255: 0b11111111, 25);
  1679                           
  1680                           ;incstack = 0
  1681  00D98A  0E00               	movlw	0
  1682  00D98C  6E02               	movwf	OpenUSART@spbrg+1,c
  1683  00D98E  0E19               	movlw	25
  1684  00D990  6E01               	movwf	OpenUSART@spbrg,c
  1685  00D992  0E3C               	movlw	60
  1686  00D994  EC7A  F06F         	call	_OpenUSART
  1687                           
  1688                           ;Lab8pE.c: 256: OSCCON = 0x60;
  1689  00D998  0E60               	movlw	96
  1690  00D99A  6ED3               	movwf	4051,c	;volatile
  1691  00D99C  0012               	return		;funcret
  1692  00D99E                     __end_of_init_UART:
  1693                           	opt stack 0
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           postinc0	equ	0xFEE
  1699                           wreg	equ	0xFE8
  1700                           postdec1	equ	0xFE5
  1701                           fsr1l	equ	0xFE1
  1702                           status	equ	0xFD8
  1703                           
  1704 ;; *************** function _OpenUSART *****************
  1705 ;; Defined at:
  1706 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;  config          1    wreg     unsigned char 
  1709 ;;  spbrg           2    0[COMRAM] unsigned int 
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  config          1    2[COMRAM] unsigned char 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;		None               void
  1714 ;; Registers used:
  1715 ;;		wreg, status,2
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;Total ram usage:        3 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_init_UART
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text2
  1735  00DEF4                     __ptext2:
  1736                           	opt stack 0
  1737  00DEF4                     _OpenUSART:
  1738                           	opt stack 29
  1739                           
  1740                           ;incstack = 0
  1741                           ;OpenUSART@config stored from wreg
  1742  00DEF4  6E03               	movwf	OpenUSART@config,c
  1743  00DEF6  0E00               	movlw	0
  1744  00DEF8  6EAC               	movwf	4012,c	;volatile
  1745  00DEFA  0E00               	movlw	0
  1746  00DEFC  6EAB               	movwf	4011,c	;volatile
  1747  00DEFE  A003               	btfss	OpenUSART@config,0,c
  1748  00DF00  D002               	goto	l3365
  1749  00DF02  88AC               	bsf	4012,4,c	;volatile
  1750  00DF04  D000               	goto	l3365
  1751  00DF06                     l3365:
  1752  00DF06  A203               	btfss	OpenUSART@config,1,c
  1753  00DF08  D003               	goto	l3369
  1754  00DF0A  8CAC               	bsf	4012,6,c	;volatile
  1755  00DF0C  8CAB               	bsf	4011,6,c	;volatile
  1756  00DF0E  D000               	goto	l3369
  1757  00DF10                     l3369:
  1758  00DF10  A403               	btfss	OpenUSART@config,2,c
  1759  00DF12  D002               	goto	l3373
  1760  00DF14  8EAC               	bsf	4012,7,c	;volatile
  1761  00DF16  D000               	goto	l3373
  1762  00DF18                     l3373:
  1763  00DF18  A603               	btfss	OpenUSART@config,3,c
  1764  00DF1A  D002               	goto	l518
  1765  00DF1C  88AB               	bsf	4011,4,c	;volatile
  1766  00DF1E  D002               	goto	l3377
  1767  00DF20                     l518:
  1768  00DF20  8AAB               	bsf	4011,5,c	;volatile
  1769  00DF22  D000               	goto	l3377
  1770  00DF24                     l3377:
  1771  00DF24  B803               	btfsc	OpenUSART@config,4,c
  1772  00DF26  84AC               	bsf	4012,2,c	;volatile
  1773  00DF28  989E               	bcf	3998,4,c	;volatile
  1774  00DF2A  AA03               	btfss	OpenUSART@config,5,c
  1775  00DF2C  D002               	goto	l3385
  1776  00DF2E  86AB               	bsf	4011,3,c	;volatile
  1777  00DF30  D000               	goto	l3385
  1778  00DF32                     l3385:
  1779  00DF32  AC03               	btfss	OpenUSART@config,6,c
  1780  00DF34  D002               	goto	l522
  1781  00DF36  8A9D               	bsf	3997,5,c	;volatile
  1782  00DF38  D001               	goto	l523
  1783  00DF3A                     l522:
  1784  00DF3A  9A9D               	bcf	3997,5,c	;volatile
  1785  00DF3C                     l523:
  1786  00DF3C  9A9E               	bcf	3998,5,c	;volatile
  1787  00DF3E  AE03               	btfss	OpenUSART@config,7,c
  1788  00DF40  D002               	goto	l524
  1789  00DF42  889D               	bsf	3997,4,c	;volatile
  1790  00DF44  D001               	goto	l525
  1791  00DF46                     l524:
  1792  00DF46  989D               	bcf	3997,4,c	;volatile
  1793  00DF48                     l525:
  1794  00DF48  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1795  00DF4C  5002               	movf	OpenUSART@spbrg+1,w,c
  1796  00DF4E  6EB0               	movwf	4016,c	;volatile
  1797  00DF50  8AAC               	bsf	4012,5,c	;volatile
  1798  00DF52  8EAB               	bsf	4011,7,c	;volatile
  1799  00DF54  9C94               	bcf	3988,6,c	;volatile
  1800  00DF56  8E94               	bsf	3988,7,c	;volatile
  1801  00DF58  B8AC               	btfsc	4012,4,c	;volatile
  1802  00DF5A  BEAC               	btfsc	4012,7,c	;volatile
  1803  00DF5C  D002               	goto	l527
  1804  00DF5E  8C94               	bsf	3988,6,c	;volatile
  1805  00DF60  D000               	goto	l527
  1806  00DF62                     l527:
  1807  00DF62  0012               	return		;funcret
  1808  00DF64                     __end_of_OpenUSART:
  1809                           	opt stack 0
  1810                           tblptru	equ	0xFF8
  1811                           tblptrh	equ	0xFF7
  1812                           tblptrl	equ	0xFF6
  1813                           tablat	equ	0xFF5
  1814                           postinc0	equ	0xFEE
  1815                           wreg	equ	0xFE8
  1816                           postdec1	equ	0xFE5
  1817                           fsr1l	equ	0xFE1
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _init_IO *****************
  1821 ;; Defined at:
  1822 ;;		line 292 in file "Lab8pE.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;		None               void
  1829 ;; Registers used:
  1830 ;;		wreg, status,2
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text3
  1850  00D99E                     __ptext3:
  1851                           	opt stack 0
  1852  00D99E                     _init_IO:
  1853                           	opt stack 30
  1854                           
  1855                           ;Lab8pE.c: 294: TRISA = 0x1F;
  1856                           
  1857                           ;incstack = 0
  1858  00D99E  0E1F               	movlw	31
  1859  00D9A0  6E92               	movwf	3986,c	;volatile
  1860                           
  1861                           ;Lab8pE.c: 295: TRISB = 0x00;
  1862  00D9A2  0E00               	movlw	0
  1863  00D9A4  6E93               	movwf	3987,c	;volatile
  1864                           
  1865                           ;Lab8pE.c: 296: TRISC = 0x00;
  1866  00D9A6  0E00               	movlw	0
  1867  00D9A8  6E94               	movwf	3988,c	;volatile
  1868                           
  1869                           ;Lab8pE.c: 297: TRISD = 0x00;
  1870  00D9AA  0E00               	movlw	0
  1871  00D9AC  6E95               	movwf	3989,c	;volatile
  1872                           
  1873                           ;Lab8pE.c: 298: TRISE = 0x00;
  1874  00D9AE  0E00               	movlw	0
  1875  00D9B0  6E96               	movwf	3990,c	;volatile
  1876  00D9B2  0012               	return		;funcret
  1877  00D9B4                     __end_of_init_IO:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _Night_Mode *****************
  1890 ;; Defined at:
  1891 ;;		line 454 in file "Lab8pE.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;		None               void
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:   10
  1912 ;; This function calls:
  1913 ;;		_Set_EW
  1914 ;;		_Set_EW_LT
  1915 ;;		_Set_NS
  1916 ;;		_Set_NS_LT
  1917 ;;		_Wait_N_Seconds
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text4
  1924  00E32E                     __ptext4:
  1925                           	opt stack 0
  1926  00E32E                     _Night_Mode:
  1927                           	opt stack 20
  1928                           
  1929                           ;Lab8pE.c: 456: MODE = 0;
  1930                           
  1931                           ;incstack = 0
  1932  00E32E  0E00               	movlw	0
  1933  00E330  6E69               	movwf	_MODE+1,c
  1934  00E332  0E00               	movlw	0
  1935  00E334  6E68               	movwf	_MODE,c
  1936                           
  1937                           ;Lab8pE.c: 457: PORTBbits.RB7 = 0;
  1938  00E336  9E81               	bcf	3969,7,c	;volatile
  1939                           
  1940                           ;Lab8pE.c: 458: Act_Mode_Txt[0] = 'N';
  1941  00E338  0E4E               	movlw	78
  1942  00E33A  6E55               	movwf	_Act_Mode_Txt,c
  1943                           
  1944                           ;Lab8pE.c: 460: Set_NS_LT(1);
  1945  00E33C  0E01               	movlw	1
  1946  00E33E  EC87  F06E         	call	_Set_NS_LT
  1947                           
  1948                           ;Lab8pE.c: 461: Set_EW(1);
  1949  00E342  0E01               	movlw	1
  1950  00E344  EC21  F06E         	call	_Set_EW
  1951                           
  1952                           ;Lab8pE.c: 462: Set_EW_LT(1);
  1953  00E348  0E01               	movlw	1
  1954  00E34A  EC43  F06E         	call	_Set_EW_LT
  1955                           
  1956                           ;Lab8pE.c: 463: Set_NS(2);
  1957  00E34E  0E02               	movlw	2
  1958  00E350  EC65  F06E         	call	_Set_NS
  1959                           
  1960                           ;Lab8pE.c: 464: Wait_N_Seconds(8);
  1961  00E354  0E08               	movlw	8
  1962  00E356  EC43  F06D         	call	_Wait_N_Seconds
  1963                           
  1964                           ;Lab8pE.c: 465: Set_NS(3);
  1965  00E35A  0E03               	movlw	3
  1966  00E35C  EC65  F06E         	call	_Set_NS
  1967                           
  1968                           ;Lab8pE.c: 466: Wait_N_Seconds(3);
  1969  00E360  0E03               	movlw	3
  1970  00E362  EC43  F06D         	call	_Wait_N_Seconds
  1971                           
  1972                           ;Lab8pE.c: 467: Set_NS(1);
  1973  00E366  0E01               	movlw	1
  1974  00E368  EC65  F06E         	call	_Set_NS
  1975                           
  1976                           ;Lab8pE.c: 468: if (PORTAbits.RA2 == 1)
  1977  00E36C  A480               	btfss	3968,2,c	;volatile
  1978  00E36E  D010               	goto	l3673
  1979                           
  1980                           ;Lab8pE.c: 469: {
  1981                           ;Lab8pE.c: 470: Set_EW_LT(2);
  1982  00E370  0E02               	movlw	2
  1983  00E372  EC43  F06E         	call	_Set_EW_LT
  1984                           
  1985                           ;Lab8pE.c: 471: Wait_N_Seconds(6);
  1986  00E376  0E06               	movlw	6
  1987  00E378  EC43  F06D         	call	_Wait_N_Seconds
  1988                           
  1989                           ;Lab8pE.c: 472: Set_EW_LT(3);
  1990  00E37C  0E03               	movlw	3
  1991  00E37E  EC43  F06E         	call	_Set_EW_LT
  1992                           
  1993                           ;Lab8pE.c: 473: Wait_N_Seconds(3);
  1994  00E382  0E03               	movlw	3
  1995  00E384  EC43  F06D         	call	_Wait_N_Seconds
  1996                           
  1997                           ;Lab8pE.c: 474: Set_EW_LT(1);
  1998  00E388  0E01               	movlw	1
  1999  00E38A  EC43  F06E         	call	_Set_EW_LT
  2000  00E38E  D000               	goto	l3673
  2001  00E390                     l3673:
  2002                           
  2003                           ;Lab8pE.c: 475: }
  2004                           ;Lab8pE.c: 476: Set_EW(2);
  2005  00E390  0E02               	movlw	2
  2006  00E392  EC21  F06E         	call	_Set_EW
  2007                           
  2008                           ;Lab8pE.c: 477: Wait_N_Seconds(8);
  2009  00E396  0E08               	movlw	8
  2010  00E398  EC43  F06D         	call	_Wait_N_Seconds
  2011                           
  2012                           ;Lab8pE.c: 478: Set_EW(3);
  2013  00E39C  0E03               	movlw	3
  2014  00E39E  EC21  F06E         	call	_Set_EW
  2015                           
  2016                           ;Lab8pE.c: 479: Wait_N_Seconds(3);
  2017  00E3A2  0E03               	movlw	3
  2018  00E3A4  EC43  F06D         	call	_Wait_N_Seconds
  2019                           
  2020                           ;Lab8pE.c: 480: Set_EW(1);
  2021  00E3A8  0E01               	movlw	1
  2022  00E3AA  EC21  F06E         	call	_Set_EW
  2023                           
  2024                           ;Lab8pE.c: 481: if(PORTAbits.RA1 == 1)
  2025  00E3AE  A280               	btfss	3968,1,c	;volatile
  2026  00E3B0  D010               	goto	l438
  2027                           
  2028                           ;Lab8pE.c: 482: {
  2029                           ;Lab8pE.c: 483: Set_NS_LT(2);
  2030  00E3B2  0E02               	movlw	2
  2031  00E3B4  EC87  F06E         	call	_Set_NS_LT
  2032                           
  2033                           ;Lab8pE.c: 484: Wait_N_Seconds(6);
  2034  00E3B8  0E06               	movlw	6
  2035  00E3BA  EC43  F06D         	call	_Wait_N_Seconds
  2036                           
  2037                           ;Lab8pE.c: 485: Set_NS_LT(3);
  2038  00E3BE  0E03               	movlw	3
  2039  00E3C0  EC87  F06E         	call	_Set_NS_LT
  2040                           
  2041                           ;Lab8pE.c: 486: Wait_N_Seconds(3);
  2042  00E3C4  0E03               	movlw	3
  2043  00E3C6  EC43  F06D         	call	_Wait_N_Seconds
  2044                           
  2045                           ;Lab8pE.c: 487: Set_NS_LT(1);
  2046  00E3CA  0E01               	movlw	1
  2047  00E3CC  EC87  F06E         	call	_Set_NS_LT
  2048  00E3D0  D000               	goto	l438
  2049  00E3D2                     l438:
  2050  00E3D2  0012               	return		;funcret
  2051  00E3D4                     __end_of_Night_Mode:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           tblptrh	equ	0xFF7
  2055                           tblptrl	equ	0xFF6
  2056                           tablat	equ	0xFF5
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           postdec1	equ	0xFE5
  2060                           fsr1l	equ	0xFE1
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _Initialize_Screen *****************
  2064 ;; Defined at:
  2065 ;;		line 165 in file "Lab8pE.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;		None               void
  2072 ;; Registers used:
  2073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    7
  2086 ;; This function calls:
  2087 ;;		_LCD_Reset
  2088 ;;		_TFT_GreenTab_Initialize
  2089 ;;		_drawCircle
  2090 ;;		_drawRect
  2091 ;;		_drawtext
  2092 ;;		_fillCircle
  2093 ;;		_fillScreen
  2094 ;;		_strcpy
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text5
  2101  00F69C                     __ptext5:
  2102                           	opt stack 0
  2103  00F69C                     _Initialize_Screen:
  2104                           	opt stack 23
  2105                           
  2106                           ;Lab8pE.c: 167: LCD_Reset();
  2107                           
  2108                           ;incstack = 0
  2109  00F69C  ECB2  F06C         	call	_LCD_Reset	;wreg free
  2110                           
  2111                           ;Lab8pE.c: 168: TFT_GreenTab_Initialize();
  2112  00F6A0  EC2E  F06D         	call	_TFT_GreenTab_Initialize	;wreg free
  2113                           
  2114                           ;Lab8pE.c: 169: fillScreen(0x0000);
  2115  00F6A4  0E00               	movlw	0
  2116  00F6A6  6E15               	movwf	fillScreen@color+1,c
  2117  00F6A8  0E00               	movlw	0
  2118  00F6AA  6E14               	movwf	fillScreen@color,c
  2119  00F6AC  ECE7  F06C         	call	_fillScreen	;wreg free
  2120                           
  2121                           ;Lab8pE.c: 172: txt = buffer;
  2122  00F6B0  0E80               	movlw	low _buffer
  2123  00F6B2  6E6C               	movwf	_txt,c
  2124  00F6B4  0E00               	movlw	high _buffer
  2125  00F6B6  6E6D               	movwf	_txt+1,c
  2126                           
  2127                           ;Lab8pE.c: 173: strcpy(txt, "ECE3301L SPRING 22-S1");
  2128  00F6B8  C06C  F001         	movff	_txt,strcpy@to
  2129  00F6BC  C06D  F002         	movff	_txt+1,strcpy@to+1
  2130  00F6C0  0E96               	movlw	low STR_1
  2131  00F6C2  6E03               	movwf	strcpy@from,c
  2132  00F6C4  0EFF               	movlw	high STR_1
  2133  00F6C6  6E04               	movwf	strcpy@from+1,c
  2134  00F6C8  EC72  F06D         	call	_strcpy	;wreg free
  2135                           
  2136                           ;Lab8pE.c: 174: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2137  00F6CC  0E02               	movlw	2
  2138  00F6CE  6E29               	movwf	drawtext@y,c
  2139  00F6D0  C06C  F02A         	movff	_txt,drawtext@_text
  2140  00F6D4  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2141  00F6D8  0EFF               	movlw	255
  2142  00F6DA  6E2D               	movwf	drawtext@color+1,c
  2143  00F6DC  682C               	setf	drawtext@color,c
  2144  00F6DE  0E00               	movlw	0
  2145  00F6E0  6E2F               	movwf	drawtext@bg+1,c
  2146  00F6E2  0E00               	movlw	0
  2147  00F6E4  6E2E               	movwf	drawtext@bg,c
  2148  00F6E6  0E01               	movlw	1
  2149  00F6E8  6E30               	movwf	drawtext@size,c
  2150  00F6EA  0E02               	movlw	2
  2151  00F6EC  ECD6  F073         	call	_drawtext
  2152                           
  2153                           ;Lab8pE.c: 177: strcpy(txt, "Mode:");
  2154  00F6F0  C06C  F001         	movff	_txt,strcpy@to
  2155  00F6F4  C06D  F002         	movff	_txt+1,strcpy@to+1
  2156  00F6F8  0EE5               	movlw	low STR_2
  2157  00F6FA  6E03               	movwf	strcpy@from,c
  2158  00F6FC  0EFF               	movlw	high STR_2
  2159  00F6FE  6E04               	movwf	strcpy@from+1,c
  2160  00F700  EC72  F06D         	call	_strcpy	;wreg free
  2161                           
  2162                           ;Lab8pE.c: 178: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2163  00F704  0E0A               	movlw	10
  2164  00F706  6E29               	movwf	drawtext@y,c
  2165  00F708  C06C  F02A         	movff	_txt,drawtext@_text
  2166  00F70C  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2167  00F710  0EFF               	movlw	255
  2168  00F712  6E2D               	movwf	drawtext@color+1,c
  2169  00F714  682C               	setf	drawtext@color,c
  2170  00F716  0E00               	movlw	0
  2171  00F718  6E2F               	movwf	drawtext@bg+1,c
  2172  00F71A  0E00               	movlw	0
  2173  00F71C  6E2E               	movwf	drawtext@bg,c
  2174  00F71E  0E01               	movlw	1
  2175  00F720  6E30               	movwf	drawtext@size,c
  2176  00F722  0E02               	movlw	2
  2177  00F724  ECD6  F073         	call	_drawtext
  2178                           
  2179                           ;Lab8pE.c: 179: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2180  00F728  0E0A               	movlw	10
  2181  00F72A  6E29               	movwf	drawtext@y,c
  2182  00F72C  0E55               	movlw	low _Act_Mode_Txt
  2183  00F72E  6E2A               	movwf	drawtext@_text,c
  2184  00F730  0E00               	movlw	high _Act_Mode_Txt
  2185  00F732  6E2B               	movwf	drawtext@_text+1,c
  2186  00F734  0EFF               	movlw	255
  2187  00F736  6E2D               	movwf	drawtext@color+1,c
  2188  00F738  682C               	setf	drawtext@color,c
  2189  00F73A  0E00               	movlw	0
  2190  00F73C  6E2F               	movwf	drawtext@bg+1,c
  2191  00F73E  0E00               	movlw	0
  2192  00F740  6E2E               	movwf	drawtext@bg,c
  2193  00F742  0E01               	movlw	1
  2194  00F744  6E30               	movwf	drawtext@size,c
  2195  00F746  0E23               	movlw	35
  2196  00F748  ECD6  F073         	call	_drawtext
  2197                           
  2198                           ;Lab8pE.c: 182: strcpy(txt, "FR:");
  2199  00F74C  C06C  F001         	movff	_txt,strcpy@to
  2200  00F750  C06D  F002         	movff	_txt+1,strcpy@to+1
  2201  00F754  0EEB               	movlw	low STR_3
  2202  00F756  6E03               	movwf	strcpy@from,c
  2203  00F758  0EFF               	movlw	high STR_3
  2204  00F75A  6E04               	movwf	strcpy@from+1,c
  2205  00F75C  EC72  F06D         	call	_strcpy	;wreg free
  2206                           
  2207                           ;Lab8pE.c: 183: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2208  00F760  0E0A               	movlw	10
  2209  00F762  6E29               	movwf	drawtext@y,c
  2210  00F764  C06C  F02A         	movff	_txt,drawtext@_text
  2211  00F768  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2212  00F76C  0EFF               	movlw	255
  2213  00F76E  6E2D               	movwf	drawtext@color+1,c
  2214  00F770  682C               	setf	drawtext@color,c
  2215  00F772  0E00               	movlw	0
  2216  00F774  6E2F               	movwf	drawtext@bg+1,c
  2217  00F776  0E00               	movlw	0
  2218  00F778  6E2E               	movwf	drawtext@bg,c
  2219  00F77A  0E01               	movlw	1
  2220  00F77C  6E30               	movwf	drawtext@size,c
  2221  00F77E  0E32               	movlw	50
  2222  00F780  ECD6  F073         	call	_drawtext
  2223                           
  2224                           ;Lab8pE.c: 184: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2225  00F784  0E0A               	movlw	10
  2226  00F786  6E29               	movwf	drawtext@y,c
  2227  00F788  0E57               	movlw	low _FlashingR_Txt
  2228  00F78A  6E2A               	movwf	drawtext@_text,c
  2229  00F78C  0E00               	movlw	high _FlashingR_Txt
  2230  00F78E  6E2B               	movwf	drawtext@_text+1,c
  2231  00F790  0EFF               	movlw	255
  2232  00F792  6E2D               	movwf	drawtext@color+1,c
  2233  00F794  682C               	setf	drawtext@color,c
  2234  00F796  0E00               	movlw	0
  2235  00F798  6E2F               	movwf	drawtext@bg+1,c
  2236  00F79A  0E00               	movlw	0
  2237  00F79C  6E2E               	movwf	drawtext@bg,c
  2238  00F79E  0E01               	movlw	1
  2239  00F7A0  6E30               	movwf	drawtext@size,c
  2240  00F7A2  0E46               	movlw	70
  2241  00F7A4  ECD6  F073         	call	_drawtext
  2242                           
  2243                           ;Lab8pE.c: 187: strcpy(txt, "FS:");
  2244  00F7A8  C06C  F001         	movff	_txt,strcpy@to
  2245  00F7AC  C06D  F002         	movff	_txt+1,strcpy@to+1
  2246  00F7B0  0EEF               	movlw	low STR_4
  2247  00F7B2  6E03               	movwf	strcpy@from,c
  2248  00F7B4  0EFF               	movlw	high STR_4
  2249  00F7B6  6E04               	movwf	strcpy@from+1,c
  2250  00F7B8  EC72  F06D         	call	_strcpy	;wreg free
  2251                           
  2252                           ;Lab8pE.c: 188: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2253  00F7BC  0E0A               	movlw	10
  2254  00F7BE  6E29               	movwf	drawtext@y,c
  2255  00F7C0  C06C  F02A         	movff	_txt,drawtext@_text
  2256  00F7C4  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2257  00F7C8  0EFF               	movlw	255
  2258  00F7CA  6E2D               	movwf	drawtext@color+1,c
  2259  00F7CC  682C               	setf	drawtext@color,c
  2260  00F7CE  0E00               	movlw	0
  2261  00F7D0  6E2F               	movwf	drawtext@bg+1,c
  2262  00F7D2  0E00               	movlw	0
  2263  00F7D4  6E2E               	movwf	drawtext@bg,c
  2264  00F7D6  0E01               	movlw	1
  2265  00F7D8  6E30               	movwf	drawtext@size,c
  2266  00F7DA  0E50               	movlw	80
  2267  00F7DC  ECD6  F073         	call	_drawtext
  2268                           
  2269                           ;Lab8pE.c: 189: drawtext(100, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2270  00F7E0  0E0A               	movlw	10
  2271  00F7E2  6E29               	movwf	drawtext@y,c
  2272  00F7E4  0E57               	movlw	low _FlashingR_Txt
  2273  00F7E6  6E2A               	movwf	drawtext@_text,c
  2274  00F7E8  0E00               	movlw	high _FlashingR_Txt
  2275  00F7EA  6E2B               	movwf	drawtext@_text+1,c
  2276  00F7EC  0EFF               	movlw	255
  2277  00F7EE  6E2D               	movwf	drawtext@color+1,c
  2278  00F7F0  682C               	setf	drawtext@color,c
  2279  00F7F2  0E00               	movlw	0
  2280  00F7F4  6E2F               	movwf	drawtext@bg+1,c
  2281  00F7F6  0E00               	movlw	0
  2282  00F7F8  6E2E               	movwf	drawtext@bg,c
  2283  00F7FA  0E01               	movlw	1
  2284  00F7FC  6E30               	movwf	drawtext@size,c
  2285  00F7FE  0E64               	movlw	100
  2286  00F800  ECD6  F073         	call	_drawtext
  2287                           
  2288                           ;Lab8pE.c: 192: strcpy(txt, "*");
  2289  00F804  C06C  F001         	movff	_txt,strcpy@to
  2290  00F808  C06D  F002         	movff	_txt+1,strcpy@to+1
  2291  00F80C  0EFD               	movlw	low STR_5
  2292  00F80E  6E03               	movwf	strcpy@from,c
  2293  00F810  0EFF               	movlw	high STR_5
  2294  00F812  6E04               	movwf	strcpy@from+1,c
  2295  00F814  EC72  F06D         	call	_strcpy	;wreg free
  2296                           
  2297                           ;Lab8pE.c: 193: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2298  00F818  0E0A               	movlw	10
  2299  00F81A  6E29               	movwf	drawtext@y,c
  2300  00F81C  C06C  F02A         	movff	_txt,drawtext@_text
  2301  00F820  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2302  00F824  0EFF               	movlw	255
  2303  00F826  6E2D               	movwf	drawtext@color+1,c
  2304  00F828  682C               	setf	drawtext@color,c
  2305  00F82A  0E00               	movlw	0
  2306  00F82C  6E2F               	movwf	drawtext@bg+1,c
  2307  00F82E  0E00               	movlw	0
  2308  00F830  6E2E               	movwf	drawtext@bg,c
  2309  00F832  0E01               	movlw	1
  2310  00F834  6E30               	movwf	drawtext@size,c
  2311  00F836  0E78               	movlw	120
  2312  00F838  ECD6  F073         	call	_drawtext
  2313                           
  2314                           ;Lab8pE.c: 196: strcpy(txt, "NORTH/SOUTH");
  2315  00F83C  C06C  F001         	movff	_txt,strcpy@to
  2316  00F840  C06D  F002         	movff	_txt+1,strcpy@to+1
  2317  00F844  0EC1               	movlw	low STR_6
  2318  00F846  6E03               	movwf	strcpy@from,c
  2319  00F848  0EFF               	movlw	high STR_6
  2320  00F84A  6E04               	movwf	strcpy@from+1,c
  2321  00F84C  EC72  F06D         	call	_strcpy	;wreg free
  2322                           
  2323                           ;Lab8pE.c: 197: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  2324  00F850  0E14               	movlw	20
  2325  00F852  6E29               	movwf	drawtext@y,c
  2326  00F854  C06C  F02A         	movff	_txt,drawtext@_text
  2327  00F858  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2328  00F85C  0E00               	movlw	0
  2329  00F85E  6E2D               	movwf	drawtext@color+1,c
  2330  00F860  0E1F               	movlw	31
  2331  00F862  6E2C               	movwf	drawtext@color,c
  2332  00F864  0E00               	movlw	0
  2333  00F866  6E2F               	movwf	drawtext@bg+1,c
  2334  00F868  0E00               	movlw	0
  2335  00F86A  6E2E               	movwf	drawtext@bg,c
  2336  00F86C  0E01               	movlw	1
  2337  00F86E  6E30               	movwf	drawtext@size,c
  2338  00F870  0E1E               	movlw	30
  2339  00F872  ECD6  F073         	call	_drawtext
  2340                           
  2341                           ;Lab8pE.c: 198: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  2342  00F876  0E00               	movlw	0
  2343  00F878  6E14               	movwf	drawRect@x+1,c
  2344  00F87A  0E1E               	movlw	30
  2345  00F87C  6E13               	movwf	drawRect@x,c
  2346  00F87E  0E00               	movlw	0
  2347  00F880  6E16               	movwf	drawRect@y+1,c
  2348  00F882  0E1B               	movlw	27
  2349  00F884  6E15               	movwf	drawRect@y,c
  2350  00F886  0E00               	movlw	0
  2351  00F888  6E18               	movwf	drawRect@w+1,c
  2352  00F88A  0E3C               	movlw	60
  2353  00F88C  6E17               	movwf	drawRect@w,c
  2354  00F88E  0E00               	movlw	0
  2355  00F890  6E1A               	movwf	drawRect@h+1,c
  2356  00F892  0E12               	movlw	18
  2357  00F894  6E19               	movwf	drawRect@h,c
  2358  00F896  0E00               	movlw	0
  2359  00F898  6E1C               	movwf	drawRect@color+1,c
  2360  00F89A  0E1F               	movlw	31
  2361  00F89C  6E1B               	movwf	drawRect@color,c
  2362  00F89E  EC47  F06F         	call	_drawRect	;wreg free
  2363                           
  2364                           ;Lab8pE.c: 199: drawCircle(40, 20 + 15 , 7, 0xF800);
  2365  00F8A2  0E00               	movlw	0
  2366  00F8A4  6E0D               	movwf	drawCircle@x0+1,c
  2367  00F8A6  0E28               	movlw	40
  2368  00F8A8  6E0C               	movwf	drawCircle@x0,c
  2369  00F8AA  0E00               	movlw	0
  2370  00F8AC  6E0F               	movwf	drawCircle@y0+1,c
  2371  00F8AE  0E23               	movlw	35
  2372  00F8B0  6E0E               	movwf	drawCircle@y0,c
  2373  00F8B2  0E00               	movlw	0
  2374  00F8B4  6E11               	movwf	drawCircle@r+1,c
  2375  00F8B6  0E07               	movlw	7
  2376  00F8B8  6E10               	movwf	drawCircle@r,c
  2377  00F8BA  0EF8               	movlw	248
  2378  00F8BC  6E13               	movwf	drawCircle@color+1,c
  2379  00F8BE  0E00               	movlw	0
  2380  00F8C0  6E12               	movwf	drawCircle@color,c
  2381  00F8C2  ECBD  F077         	call	_drawCircle	;wreg free
  2382                           
  2383                           ;Lab8pE.c: 200: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  2384  00F8C6  0E00               	movlw	0
  2385  00F8C8  6E0D               	movwf	drawCircle@x0+1,c
  2386  00F8CA  0E3C               	movlw	60
  2387  00F8CC  6E0C               	movwf	drawCircle@x0,c
  2388  00F8CE  0E00               	movlw	0
  2389  00F8D0  6E0F               	movwf	drawCircle@y0+1,c
  2390  00F8D2  0E23               	movlw	35
  2391  00F8D4  6E0E               	movwf	drawCircle@y0,c
  2392  00F8D6  0E00               	movlw	0
  2393  00F8D8  6E11               	movwf	drawCircle@r+1,c
  2394  00F8DA  0E07               	movlw	7
  2395  00F8DC  6E10               	movwf	drawCircle@r,c
  2396  00F8DE  0EFF               	movlw	255
  2397  00F8E0  6E13               	movwf	drawCircle@color+1,c
  2398  00F8E2  0EE0               	movlw	224
  2399  00F8E4  6E12               	movwf	drawCircle@color,c
  2400  00F8E6  ECBD  F077         	call	_drawCircle	;wreg free
  2401                           
  2402                           ;Lab8pE.c: 201: fillCircle(80, 20 + 15 , 7, 0x07E0);
  2403  00F8EA  0E00               	movlw	0
  2404  00F8EC  6E2C               	movwf	fillCircle@x0+1,c
  2405  00F8EE  0E50               	movlw	80
  2406  00F8F0  6E2B               	movwf	fillCircle@x0,c
  2407  00F8F2  0E00               	movlw	0
  2408  00F8F4  6E2E               	movwf	fillCircle@y0+1,c
  2409  00F8F6  0E23               	movlw	35
  2410  00F8F8  6E2D               	movwf	fillCircle@y0,c
  2411  00F8FA  0E00               	movlw	0
  2412  00F8FC  6E30               	movwf	fillCircle@r+1,c
  2413  00F8FE  0E07               	movlw	7
  2414  00F900  6E2F               	movwf	fillCircle@r,c
  2415  00F902  0E07               	movlw	7
  2416  00F904  6E32               	movwf	fillCircle@color+1,c
  2417  00F906  0EE0               	movlw	224
  2418  00F908  6E31               	movwf	fillCircle@color,c
  2419  00F90A  ECF5  F06E         	call	_fillCircle	;wreg free
  2420                           
  2421                           ;Lab8pE.c: 202: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  2422  00F90E  0E1E               	movlw	30
  2423  00F910  6E29               	movwf	drawtext@y,c
  2424  00F912  0E4C               	movlw	low _NS_Count
  2425  00F914  6E2A               	movwf	drawtext@_text,c
  2426  00F916  0E00               	movlw	high _NS_Count
  2427  00F918  6E2B               	movwf	drawtext@_text+1,c
  2428  00F91A  0E00               	movlw	0
  2429  00F91C  6E2D               	movwf	drawtext@color+1,c
  2430  00F91E  0E1F               	movlw	31
  2431  00F920  6E2C               	movwf	drawtext@color,c
  2432  00F922  0E00               	movlw	0
  2433  00F924  6E2F               	movwf	drawtext@bg+1,c
  2434  00F926  0E00               	movlw	0
  2435  00F928  6E2E               	movwf	drawtext@bg,c
  2436  00F92A  0E02               	movlw	2
  2437  00F92C  6E30               	movwf	drawtext@size,c
  2438  00F92E  0E64               	movlw	100
  2439  00F930  ECD6  F073         	call	_drawtext
  2440                           
  2441                           ;Lab8pE.c: 205: strcpy(txt, "N/S LT");
  2442  00F934  C06C  F001         	movff	_txt,strcpy@to
  2443  00F938  C06D  F002         	movff	_txt+1,strcpy@to+1
  2444  00F93C  0ED7               	movlw	low STR_7
  2445  00F93E  6E03               	movwf	strcpy@from,c
  2446  00F940  0EFF               	movlw	high STR_7
  2447  00F942  6E04               	movwf	strcpy@from+1,c
  2448  00F944  EC72  F06D         	call	_strcpy	;wreg free
  2449                           
  2450                           ;Lab8pE.c: 206: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  2451  00F948  0E32               	movlw	50
  2452  00F94A  6E29               	movwf	drawtext@y,c
  2453  00F94C  C06C  F02A         	movff	_txt,drawtext@_text
  2454  00F950  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2455  00F954  0EF8               	movlw	248
  2456  00F956  6E2D               	movwf	drawtext@color+1,c
  2457  00F958  0E1F               	movlw	31
  2458  00F95A  6E2C               	movwf	drawtext@color,c
  2459  00F95C  0E00               	movlw	0
  2460  00F95E  6E2F               	movwf	drawtext@bg+1,c
  2461  00F960  0E00               	movlw	0
  2462  00F962  6E2E               	movwf	drawtext@bg,c
  2463  00F964  0E01               	movlw	1
  2464  00F966  6E30               	movwf	drawtext@size,c
  2465  00F968  0E1E               	movlw	30
  2466  00F96A  ECD6  F073         	call	_drawtext
  2467                           
  2468                           ;Lab8pE.c: 207: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  2469  00F96E  0E00               	movlw	0
  2470  00F970  6E14               	movwf	drawRect@x+1,c
  2471  00F972  0E1E               	movlw	30
  2472  00F974  6E13               	movwf	drawRect@x,c
  2473  00F976  0E00               	movlw	0
  2474  00F978  6E16               	movwf	drawRect@y+1,c
  2475  00F97A  0E39               	movlw	57
  2476  00F97C  6E15               	movwf	drawRect@y,c
  2477  00F97E  0E00               	movlw	0
  2478  00F980  6E18               	movwf	drawRect@w+1,c
  2479  00F982  0E3C               	movlw	60
  2480  00F984  6E17               	movwf	drawRect@w,c
  2481  00F986  0E00               	movlw	0
  2482  00F988  6E1A               	movwf	drawRect@h+1,c
  2483  00F98A  0E12               	movlw	18
  2484  00F98C  6E19               	movwf	drawRect@h,c
  2485  00F98E  0EF8               	movlw	248
  2486  00F990  6E1C               	movwf	drawRect@color+1,c
  2487  00F992  0E1F               	movlw	31
  2488  00F994  6E1B               	movwf	drawRect@color,c
  2489  00F996  EC47  F06F         	call	_drawRect	;wreg free
  2490                           
  2491                           ;Lab8pE.c: 208: fillCircle(40, 50 + 15, 7, 0xF800);
  2492  00F99A  0E00               	movlw	0
  2493  00F99C  6E2C               	movwf	fillCircle@x0+1,c
  2494  00F99E  0E28               	movlw	40
  2495  00F9A0  6E2B               	movwf	fillCircle@x0,c
  2496  00F9A2  0E00               	movlw	0
  2497  00F9A4  6E2E               	movwf	fillCircle@y0+1,c
  2498  00F9A6  0E41               	movlw	65
  2499  00F9A8  6E2D               	movwf	fillCircle@y0,c
  2500  00F9AA  0E00               	movlw	0
  2501  00F9AC  6E30               	movwf	fillCircle@r+1,c
  2502  00F9AE  0E07               	movlw	7
  2503  00F9B0  6E2F               	movwf	fillCircle@r,c
  2504  00F9B2  0EF8               	movlw	248
  2505  00F9B4  6E32               	movwf	fillCircle@color+1,c
  2506  00F9B6  0E00               	movlw	0
  2507  00F9B8  6E31               	movwf	fillCircle@color,c
  2508  00F9BA  ECF5  F06E         	call	_fillCircle	;wreg free
  2509                           
  2510                           ;Lab8pE.c: 209: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2511  00F9BE  0E00               	movlw	0
  2512  00F9C0  6E0D               	movwf	drawCircle@x0+1,c
  2513  00F9C2  0E3C               	movlw	60
  2514  00F9C4  6E0C               	movwf	drawCircle@x0,c
  2515  00F9C6  0E00               	movlw	0
  2516  00F9C8  6E0F               	movwf	drawCircle@y0+1,c
  2517  00F9CA  0E41               	movlw	65
  2518  00F9CC  6E0E               	movwf	drawCircle@y0,c
  2519  00F9CE  0E00               	movlw	0
  2520  00F9D0  6E11               	movwf	drawCircle@r+1,c
  2521  00F9D2  0E07               	movlw	7
  2522  00F9D4  6E10               	movwf	drawCircle@r,c
  2523  00F9D6  0EFF               	movlw	255
  2524  00F9D8  6E13               	movwf	drawCircle@color+1,c
  2525  00F9DA  0EE0               	movlw	224
  2526  00F9DC  6E12               	movwf	drawCircle@color,c
  2527  00F9DE  ECBD  F077         	call	_drawCircle	;wreg free
  2528                           
  2529                           ;Lab8pE.c: 210: drawCircle(80, 50 + 15, 7, 0x07E0);
  2530  00F9E2  0E00               	movlw	0
  2531  00F9E4  6E0D               	movwf	drawCircle@x0+1,c
  2532  00F9E6  0E50               	movlw	80
  2533  00F9E8  6E0C               	movwf	drawCircle@x0,c
  2534  00F9EA  0E00               	movlw	0
  2535  00F9EC  6E0F               	movwf	drawCircle@y0+1,c
  2536  00F9EE  0E41               	movlw	65
  2537  00F9F0  6E0E               	movwf	drawCircle@y0,c
  2538  00F9F2  0E00               	movlw	0
  2539  00F9F4  6E11               	movwf	drawCircle@r+1,c
  2540  00F9F6  0E07               	movlw	7
  2541  00F9F8  6E10               	movwf	drawCircle@r,c
  2542  00F9FA  0E07               	movlw	7
  2543  00F9FC  6E13               	movwf	drawCircle@color+1,c
  2544  00F9FE  0EE0               	movlw	224
  2545  00FA00  6E12               	movwf	drawCircle@color,c
  2546  00FA02  ECBD  F077         	call	_drawCircle	;wreg free
  2547                           
  2548                           ;Lab8pE.c: 211: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2549  00FA06  0E3C               	movlw	60
  2550  00FA08  6E29               	movwf	drawtext@y,c
  2551  00FA0A  0E49               	movlw	low _NSLT_Count
  2552  00FA0C  6E2A               	movwf	drawtext@_text,c
  2553  00FA0E  0E00               	movlw	high _NSLT_Count
  2554  00FA10  6E2B               	movwf	drawtext@_text+1,c
  2555  00FA12  0EF8               	movlw	248
  2556  00FA14  6E2D               	movwf	drawtext@color+1,c
  2557  00FA16  0E1F               	movlw	31
  2558  00FA18  6E2C               	movwf	drawtext@color,c
  2559  00FA1A  0E00               	movlw	0
  2560  00FA1C  6E2F               	movwf	drawtext@bg+1,c
  2561  00FA1E  0E00               	movlw	0
  2562  00FA20  6E2E               	movwf	drawtext@bg,c
  2563  00FA22  0E02               	movlw	2
  2564  00FA24  6E30               	movwf	drawtext@size,c
  2565  00FA26  0E64               	movlw	100
  2566  00FA28  ECD6  F073         	call	_drawtext
  2567                           
  2568                           ;Lab8pE.c: 214: strcpy(txt, "EAST/WEST");
  2569  00FA2C  C06C  F001         	movff	_txt,strcpy@to
  2570  00FA30  C06D  F002         	movff	_txt+1,strcpy@to+1
  2571  00FA34  0ECD               	movlw	low STR_8
  2572  00FA36  6E03               	movwf	strcpy@from,c
  2573  00FA38  0EFF               	movlw	high STR_8
  2574  00FA3A  6E04               	movwf	strcpy@from+1,c
  2575  00FA3C  EC72  F06D         	call	_strcpy	;wreg free
  2576                           
  2577                           ;Lab8pE.c: 215: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  2578  00FA40  0E50               	movlw	80
  2579  00FA42  6E29               	movwf	drawtext@y,c
  2580  00FA44  C06C  F02A         	movff	_txt,drawtext@_text
  2581  00FA48  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2582  00FA4C  0E07               	movlw	7
  2583  00FA4E  6E2D               	movwf	drawtext@color+1,c
  2584  00FA50  682C               	setf	drawtext@color,c
  2585  00FA52  0E00               	movlw	0
  2586  00FA54  6E2F               	movwf	drawtext@bg+1,c
  2587  00FA56  0E00               	movlw	0
  2588  00FA58  6E2E               	movwf	drawtext@bg,c
  2589  00FA5A  0E01               	movlw	1
  2590  00FA5C  6E30               	movwf	drawtext@size,c
  2591  00FA5E  0E1E               	movlw	30
  2592  00FA60  ECD6  F073         	call	_drawtext
  2593                           
  2594                           ;Lab8pE.c: 216: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  2595  00FA64  0E00               	movlw	0
  2596  00FA66  6E14               	movwf	drawRect@x+1,c
  2597  00FA68  0E1E               	movlw	30
  2598  00FA6A  6E13               	movwf	drawRect@x,c
  2599  00FA6C  0E00               	movlw	0
  2600  00FA6E  6E16               	movwf	drawRect@y+1,c
  2601  00FA70  0E57               	movlw	87
  2602  00FA72  6E15               	movwf	drawRect@y,c
  2603  00FA74  0E00               	movlw	0
  2604  00FA76  6E18               	movwf	drawRect@w+1,c
  2605  00FA78  0E3C               	movlw	60
  2606  00FA7A  6E17               	movwf	drawRect@w,c
  2607  00FA7C  0E00               	movlw	0
  2608  00FA7E  6E1A               	movwf	drawRect@h+1,c
  2609  00FA80  0E12               	movlw	18
  2610  00FA82  6E19               	movwf	drawRect@h,c
  2611  00FA84  0E07               	movlw	7
  2612  00FA86  6E1C               	movwf	drawRect@color+1,c
  2613  00FA88  681B               	setf	drawRect@color,c
  2614  00FA8A  EC47  F06F         	call	_drawRect	;wreg free
  2615                           
  2616                           ;Lab8pE.c: 217: fillCircle(40, 80 + 15, 7, 0xF800);
  2617  00FA8E  0E00               	movlw	0
  2618  00FA90  6E2C               	movwf	fillCircle@x0+1,c
  2619  00FA92  0E28               	movlw	40
  2620  00FA94  6E2B               	movwf	fillCircle@x0,c
  2621  00FA96  0E00               	movlw	0
  2622  00FA98  6E2E               	movwf	fillCircle@y0+1,c
  2623  00FA9A  0E5F               	movlw	95
  2624  00FA9C  6E2D               	movwf	fillCircle@y0,c
  2625  00FA9E  0E00               	movlw	0
  2626  00FAA0  6E30               	movwf	fillCircle@r+1,c
  2627  00FAA2  0E07               	movlw	7
  2628  00FAA4  6E2F               	movwf	fillCircle@r,c
  2629  00FAA6  0EF8               	movlw	248
  2630  00FAA8  6E32               	movwf	fillCircle@color+1,c
  2631  00FAAA  0E00               	movlw	0
  2632  00FAAC  6E31               	movwf	fillCircle@color,c
  2633  00FAAE  ECF5  F06E         	call	_fillCircle	;wreg free
  2634                           
  2635                           ;Lab8pE.c: 218: drawCircle(60, 80 + 15, 7, 0xFFE0);
  2636  00FAB2  0E00               	movlw	0
  2637  00FAB4  6E0D               	movwf	drawCircle@x0+1,c
  2638  00FAB6  0E3C               	movlw	60
  2639  00FAB8  6E0C               	movwf	drawCircle@x0,c
  2640  00FABA  0E00               	movlw	0
  2641  00FABC  6E0F               	movwf	drawCircle@y0+1,c
  2642  00FABE  0E5F               	movlw	95
  2643  00FAC0  6E0E               	movwf	drawCircle@y0,c
  2644  00FAC2  0E00               	movlw	0
  2645  00FAC4  6E11               	movwf	drawCircle@r+1,c
  2646  00FAC6  0E07               	movlw	7
  2647  00FAC8  6E10               	movwf	drawCircle@r,c
  2648  00FACA  0EFF               	movlw	255
  2649  00FACC  6E13               	movwf	drawCircle@color+1,c
  2650  00FACE  0EE0               	movlw	224
  2651  00FAD0  6E12               	movwf	drawCircle@color,c
  2652  00FAD2  ECBD  F077         	call	_drawCircle	;wreg free
  2653                           
  2654                           ;Lab8pE.c: 219: drawCircle(80, 80 + 15, 7, 0x07E0);
  2655  00FAD6  0E00               	movlw	0
  2656  00FAD8  6E0D               	movwf	drawCircle@x0+1,c
  2657  00FADA  0E50               	movlw	80
  2658  00FADC  6E0C               	movwf	drawCircle@x0,c
  2659  00FADE  0E00               	movlw	0
  2660  00FAE0  6E0F               	movwf	drawCircle@y0+1,c
  2661  00FAE2  0E5F               	movlw	95
  2662  00FAE4  6E0E               	movwf	drawCircle@y0,c
  2663  00FAE6  0E00               	movlw	0
  2664  00FAE8  6E11               	movwf	drawCircle@r+1,c
  2665  00FAEA  0E07               	movlw	7
  2666  00FAEC  6E10               	movwf	drawCircle@r,c
  2667  00FAEE  0E07               	movlw	7
  2668  00FAF0  6E13               	movwf	drawCircle@color+1,c
  2669  00FAF2  0EE0               	movlw	224
  2670  00FAF4  6E12               	movwf	drawCircle@color,c
  2671  00FAF6  ECBD  F077         	call	_drawCircle	;wreg free
  2672                           
  2673                           ;Lab8pE.c: 220: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2674  00FAFA  0E5A               	movlw	90
  2675  00FAFC  6E29               	movwf	drawtext@y,c
  2676  00FAFE  0E46               	movlw	low _EW_Count
  2677  00FB00  6E2A               	movwf	drawtext@_text,c
  2678  00FB02  0E00               	movlw	high _EW_Count
  2679  00FB04  6E2B               	movwf	drawtext@_text+1,c
  2680  00FB06  0E07               	movlw	7
  2681  00FB08  6E2D               	movwf	drawtext@color+1,c
  2682  00FB0A  682C               	setf	drawtext@color,c
  2683  00FB0C  0E00               	movlw	0
  2684  00FB0E  6E2F               	movwf	drawtext@bg+1,c
  2685  00FB10  0E00               	movlw	0
  2686  00FB12  6E2E               	movwf	drawtext@bg,c
  2687  00FB14  0E02               	movlw	2
  2688  00FB16  6E30               	movwf	drawtext@size,c
  2689  00FB18  0E64               	movlw	100
  2690  00FB1A  ECD6  F073         	call	_drawtext
  2691                           
  2692                           ;Lab8pE.c: 223: strcpy(txt, "E/W LT");
  2693  00FB1E  C06C  F001         	movff	_txt,strcpy@to
  2694  00FB22  C06D  F002         	movff	_txt+1,strcpy@to+1
  2695  00FB26  0EDE               	movlw	low STR_9
  2696  00FB28  6E03               	movwf	strcpy@from,c
  2697  00FB2A  0EFF               	movlw	high STR_9
  2698  00FB2C  6E04               	movwf	strcpy@from+1,c
  2699  00FB2E  EC72  F06D         	call	_strcpy	;wreg free
  2700                           
  2701                           ;Lab8pE.c: 224: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  2702  00FB32  0E6E               	movlw	110
  2703  00FB34  6E29               	movwf	drawtext@y,c
  2704  00FB36  C06C  F02A         	movff	_txt,drawtext@_text
  2705  00FB3A  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2706  00FB3E  0EFF               	movlw	255
  2707  00FB40  6E2D               	movwf	drawtext@color+1,c
  2708  00FB42  682C               	setf	drawtext@color,c
  2709  00FB44  0E00               	movlw	0
  2710  00FB46  6E2F               	movwf	drawtext@bg+1,c
  2711  00FB48  0E00               	movlw	0
  2712  00FB4A  6E2E               	movwf	drawtext@bg,c
  2713  00FB4C  0E01               	movlw	1
  2714  00FB4E  6E30               	movwf	drawtext@size,c
  2715  00FB50  0E1E               	movlw	30
  2716  00FB52  ECD6  F073         	call	_drawtext
  2717                           
  2718                           ;Lab8pE.c: 225: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  2719  00FB56  0E00               	movlw	0
  2720  00FB58  6E14               	movwf	drawRect@x+1,c
  2721  00FB5A  0E1E               	movlw	30
  2722  00FB5C  6E13               	movwf	drawRect@x,c
  2723  00FB5E  0E00               	movlw	0
  2724  00FB60  6E16               	movwf	drawRect@y+1,c
  2725  00FB62  0E75               	movlw	117
  2726  00FB64  6E15               	movwf	drawRect@y,c
  2727  00FB66  0E00               	movlw	0
  2728  00FB68  6E18               	movwf	drawRect@w+1,c
  2729  00FB6A  0E3C               	movlw	60
  2730  00FB6C  6E17               	movwf	drawRect@w,c
  2731  00FB6E  0E00               	movlw	0
  2732  00FB70  6E1A               	movwf	drawRect@h+1,c
  2733  00FB72  0E12               	movlw	18
  2734  00FB74  6E19               	movwf	drawRect@h,c
  2735  00FB76  0EFF               	movlw	255
  2736  00FB78  6E1C               	movwf	drawRect@color+1,c
  2737  00FB7A  681B               	setf	drawRect@color,c
  2738  00FB7C  EC47  F06F         	call	_drawRect	;wreg free
  2739                           
  2740                           ;Lab8pE.c: 226: fillCircle(40, 110 + 15, 7, 0xF800);
  2741  00FB80  0E00               	movlw	0
  2742  00FB82  6E2C               	movwf	fillCircle@x0+1,c
  2743  00FB84  0E28               	movlw	40
  2744  00FB86  6E2B               	movwf	fillCircle@x0,c
  2745  00FB88  0E00               	movlw	0
  2746  00FB8A  6E2E               	movwf	fillCircle@y0+1,c
  2747  00FB8C  0E7D               	movlw	125
  2748  00FB8E  6E2D               	movwf	fillCircle@y0,c
  2749  00FB90  0E00               	movlw	0
  2750  00FB92  6E30               	movwf	fillCircle@r+1,c
  2751  00FB94  0E07               	movlw	7
  2752  00FB96  6E2F               	movwf	fillCircle@r,c
  2753  00FB98  0EF8               	movlw	248
  2754  00FB9A  6E32               	movwf	fillCircle@color+1,c
  2755  00FB9C  0E00               	movlw	0
  2756  00FB9E  6E31               	movwf	fillCircle@color,c
  2757  00FBA0  ECF5  F06E         	call	_fillCircle	;wreg free
  2758                           
  2759                           ;Lab8pE.c: 227: drawCircle(60, 110 + 15, 7, 0xFFE0);
  2760  00FBA4  0E00               	movlw	0
  2761  00FBA6  6E0D               	movwf	drawCircle@x0+1,c
  2762  00FBA8  0E3C               	movlw	60
  2763  00FBAA  6E0C               	movwf	drawCircle@x0,c
  2764  00FBAC  0E00               	movlw	0
  2765  00FBAE  6E0F               	movwf	drawCircle@y0+1,c
  2766  00FBB0  0E7D               	movlw	125
  2767  00FBB2  6E0E               	movwf	drawCircle@y0,c
  2768  00FBB4  0E00               	movlw	0
  2769  00FBB6  6E11               	movwf	drawCircle@r+1,c
  2770  00FBB8  0E07               	movlw	7
  2771  00FBBA  6E10               	movwf	drawCircle@r,c
  2772  00FBBC  0EFF               	movlw	255
  2773  00FBBE  6E13               	movwf	drawCircle@color+1,c
  2774  00FBC0  0EE0               	movlw	224
  2775  00FBC2  6E12               	movwf	drawCircle@color,c
  2776  00FBC4  ECBD  F077         	call	_drawCircle	;wreg free
  2777                           
  2778                           ;Lab8pE.c: 228: drawCircle(80, 110 + 15, 7, 0x07E0);
  2779  00FBC8  0E00               	movlw	0
  2780  00FBCA  6E0D               	movwf	drawCircle@x0+1,c
  2781  00FBCC  0E50               	movlw	80
  2782  00FBCE  6E0C               	movwf	drawCircle@x0,c
  2783  00FBD0  0E00               	movlw	0
  2784  00FBD2  6E0F               	movwf	drawCircle@y0+1,c
  2785  00FBD4  0E7D               	movlw	125
  2786  00FBD6  6E0E               	movwf	drawCircle@y0,c
  2787  00FBD8  0E00               	movlw	0
  2788  00FBDA  6E11               	movwf	drawCircle@r+1,c
  2789  00FBDC  0E07               	movlw	7
  2790  00FBDE  6E10               	movwf	drawCircle@r,c
  2791  00FBE0  0E07               	movlw	7
  2792  00FBE2  6E13               	movwf	drawCircle@color+1,c
  2793  00FBE4  0EE0               	movlw	224
  2794  00FBE6  6E12               	movwf	drawCircle@color,c
  2795  00FBE8  ECBD  F077         	call	_drawCircle	;wreg free
  2796                           
  2797                           ;Lab8pE.c: 229: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2798  00FBEC  0E78               	movlw	120
  2799  00FBEE  6E29               	movwf	drawtext@y,c
  2800  00FBF0  0E43               	movlw	low _EWLT_Count
  2801  00FBF2  6E2A               	movwf	drawtext@_text,c
  2802  00FBF4  0E00               	movlw	high _EWLT_Count
  2803  00FBF6  6E2B               	movwf	drawtext@_text+1,c
  2804  00FBF8  0EFF               	movlw	255
  2805  00FBFA  6E2D               	movwf	drawtext@color+1,c
  2806  00FBFC  682C               	setf	drawtext@color,c
  2807  00FBFE  0E00               	movlw	0
  2808  00FC00  6E2F               	movwf	drawtext@bg+1,c
  2809  00FC02  0E00               	movlw	0
  2810  00FC04  6E2E               	movwf	drawtext@bg,c
  2811  00FC06  0E02               	movlw	2
  2812  00FC08  6E30               	movwf	drawtext@size,c
  2813  00FC0A  0E64               	movlw	100
  2814  00FC0C  ECD6  F073         	call	_drawtext
  2815                           
  2816                           ;Lab8pE.c: 232: strcpy(txt, "PNS");
  2817  00FC10  C06C  F001         	movff	_txt,strcpy@to
  2818  00FC14  C06D  F002         	movff	_txt+1,strcpy@to+1
  2819  00FC18  0EF3               	movlw	low STR_10
  2820  00FC1A  6E03               	movwf	strcpy@from,c
  2821  00FC1C  0EFF               	movlw	high STR_10
  2822  00FC1E  6E04               	movwf	strcpy@from+1,c
  2823  00FC20  EC72  F06D         	call	_strcpy	;wreg free
  2824                           
  2825                           ;Lab8pE.c: 233: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  2826  00FC24  0E14               	movlw	20
  2827  00FC26  6E29               	movwf	drawtext@y,c
  2828  00FC28  C06C  F02A         	movff	_txt,drawtext@_text
  2829  00FC2C  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2830  00FC30  0E00               	movlw	0
  2831  00FC32  6E2D               	movwf	drawtext@color+1,c
  2832  00FC34  0E1F               	movlw	31
  2833  00FC36  6E2C               	movwf	drawtext@color,c
  2834  00FC38  0E00               	movlw	0
  2835  00FC3A  6E2F               	movwf	drawtext@bg+1,c
  2836  00FC3C  0E00               	movlw	0
  2837  00FC3E  6E2E               	movwf	drawtext@bg,c
  2838  00FC40  0E01               	movlw	1
  2839  00FC42  6E30               	movwf	drawtext@size,c
  2840  00FC44  0E03               	movlw	3
  2841  00FC46  ECD6  F073         	call	_drawtext
  2842                           
  2843                           ;Lab8pE.c: 234: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  2844  00FC4A  0E1E               	movlw	30
  2845  00FC4C  6E29               	movwf	drawtext@y,c
  2846  00FC4E  0E52               	movlw	low _PED_NS_Count
  2847  00FC50  6E2A               	movwf	drawtext@_text,c
  2848  00FC52  0E00               	movlw	high _PED_NS_Count
  2849  00FC54  6E2B               	movwf	drawtext@_text+1,c
  2850  00FC56  0E00               	movlw	0
  2851  00FC58  6E2D               	movwf	drawtext@color+1,c
  2852  00FC5A  0E1F               	movlw	31
  2853  00FC5C  6E2C               	movwf	drawtext@color,c
  2854  00FC5E  0E00               	movlw	0
  2855  00FC60  6E2F               	movwf	drawtext@bg+1,c
  2856  00FC62  0E00               	movlw	0
  2857  00FC64  6E2E               	movwf	drawtext@bg,c
  2858  00FC66  0E02               	movlw	2
  2859  00FC68  6E30               	movwf	drawtext@size,c
  2860  00FC6A  0E02               	movlw	2
  2861  00FC6C  ECD6  F073         	call	_drawtext
  2862                           
  2863                           ;Lab8pE.c: 237: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  2864  00FC70  0E5A               	movlw	90
  2865  00FC72  6E29               	movwf	drawtext@y,c
  2866  00FC74  0E4F               	movlw	low _PED_EW_Count
  2867  00FC76  6E2A               	movwf	drawtext@_text,c
  2868  00FC78  0E00               	movlw	high _PED_EW_Count
  2869  00FC7A  6E2B               	movwf	drawtext@_text+1,c
  2870  00FC7C  0E07               	movlw	7
  2871  00FC7E  6E2D               	movwf	drawtext@color+1,c
  2872  00FC80  682C               	setf	drawtext@color,c
  2873  00FC82  0E00               	movlw	0
  2874  00FC84  6E2F               	movwf	drawtext@bg+1,c
  2875  00FC86  0E00               	movlw	0
  2876  00FC88  6E2E               	movwf	drawtext@bg,c
  2877  00FC8A  0E02               	movlw	2
  2878  00FC8C  6E30               	movwf	drawtext@size,c
  2879  00FC8E  0E02               	movlw	2
  2880  00FC90  ECD6  F073         	call	_drawtext
  2881                           
  2882                           ;Lab8pE.c: 238: strcpy(txt, "PEW");
  2883  00FC94  C06C  F001         	movff	_txt,strcpy@to
  2884  00FC98  C06D  F002         	movff	_txt+1,strcpy@to+1
  2885  00FC9C  0EF7               	movlw	low STR_11
  2886  00FC9E  6E03               	movwf	strcpy@from,c
  2887  00FCA0  0EFF               	movlw	high STR_11
  2888  00FCA2  6E04               	movwf	strcpy@from+1,c
  2889  00FCA4  EC72  F06D         	call	_strcpy	;wreg free
  2890                           
  2891                           ;Lab8pE.c: 239: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  2892  00FCA8  0E50               	movlw	80
  2893  00FCAA  6E29               	movwf	drawtext@y,c
  2894  00FCAC  C06C  F02A         	movff	_txt,drawtext@_text
  2895  00FCB0  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2896  00FCB4  0E07               	movlw	7
  2897  00FCB6  6E2D               	movwf	drawtext@color+1,c
  2898  00FCB8  682C               	setf	drawtext@color,c
  2899  00FCBA  0E00               	movlw	0
  2900  00FCBC  6E2F               	movwf	drawtext@bg+1,c
  2901  00FCBE  0E00               	movlw	0
  2902  00FCC0  6E2E               	movwf	drawtext@bg,c
  2903  00FCC2  0E01               	movlw	1
  2904  00FCC4  6E30               	movwf	drawtext@size,c
  2905  00FCC6  0E03               	movlw	3
  2906  00FCC8  ECD6  F073         	call	_drawtext
  2907                           
  2908                           ;Lab8pE.c: 242: strcpy(txt, "NSP NSLT EWP EWLT MR");
  2909  00FCCC  C06C  F001         	movff	_txt,strcpy@to
  2910  00FCD0  C06D  F002         	movff	_txt+1,strcpy@to+1
  2911  00FCD4  0EAC               	movlw	low STR_12
  2912  00FCD6  6E03               	movwf	strcpy@from,c
  2913  00FCD8  0EFF               	movlw	high STR_12
  2914  00FCDA  6E04               	movwf	strcpy@from+1,c
  2915  00FCDC  EC72  F06D         	call	_strcpy	;wreg free
  2916                           
  2917                           ;Lab8pE.c: 243: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  2918  00FCE0  0E8C               	movlw	140
  2919  00FCE2  6E29               	movwf	drawtext@y,c
  2920  00FCE4  C06C  F02A         	movff	_txt,drawtext@_text
  2921  00FCE8  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  2922  00FCEC  0EFF               	movlw	255
  2923  00FCEE  6E2D               	movwf	drawtext@color+1,c
  2924  00FCF0  682C               	setf	drawtext@color,c
  2925  00FCF2  0E00               	movlw	0
  2926  00FCF4  6E2F               	movwf	drawtext@bg+1,c
  2927  00FCF6  0E00               	movlw	0
  2928  00FCF8  6E2E               	movwf	drawtext@bg,c
  2929  00FCFA  0E01               	movlw	1
  2930  00FCFC  6E30               	movwf	drawtext@size,c
  2931  00FCFE  0E01               	movlw	1
  2932  00FD00  ECD6  F073         	call	_drawtext
  2933                           
  2934                           ;Lab8pE.c: 244: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2935  00FD04  0E95               	movlw	149
  2936  00FD06  6E29               	movwf	drawtext@y,c
  2937  00FD08  0E63               	movlw	low _SW_NSPED_Txt
  2938  00FD0A  6E2A               	movwf	drawtext@_text,c
  2939  00FD0C  0E00               	movlw	high _SW_NSPED_Txt
  2940  00FD0E  6E2B               	movwf	drawtext@_text+1,c
  2941  00FD10  0EFF               	movlw	255
  2942  00FD12  6E2D               	movwf	drawtext@color+1,c
  2943  00FD14  682C               	setf	drawtext@color,c
  2944  00FD16  0E00               	movlw	0
  2945  00FD18  6E2F               	movwf	drawtext@bg+1,c
  2946  00FD1A  0E00               	movlw	0
  2947  00FD1C  6E2E               	movwf	drawtext@bg,c
  2948  00FD1E  0E01               	movlw	1
  2949  00FD20  6E30               	movwf	drawtext@size,c
  2950  00FD22  0E06               	movlw	6
  2951  00FD24  ECD6  F073         	call	_drawtext
  2952                           
  2953                           ;Lab8pE.c: 245: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2954  00FD28  0E95               	movlw	149
  2955  00FD2A  6E29               	movwf	drawtext@y,c
  2956  00FD2C  0E61               	movlw	low _SW_NSLT_Txt
  2957  00FD2E  6E2A               	movwf	drawtext@_text,c
  2958  00FD30  0E00               	movlw	high _SW_NSLT_Txt
  2959  00FD32  6E2B               	movwf	drawtext@_text+1,c
  2960  00FD34  0EFF               	movlw	255
  2961  00FD36  6E2D               	movwf	drawtext@color+1,c
  2962  00FD38  682C               	setf	drawtext@color,c
  2963  00FD3A  0E00               	movlw	0
  2964  00FD3C  6E2F               	movwf	drawtext@bg+1,c
  2965  00FD3E  0E00               	movlw	0
  2966  00FD40  6E2E               	movwf	drawtext@bg,c
  2967  00FD42  0E01               	movlw	1
  2968  00FD44  6E30               	movwf	drawtext@size,c
  2969  00FD46  0E20               	movlw	32
  2970  00FD48  ECD6  F073         	call	_drawtext
  2971                           
  2972                           ;Lab8pE.c: 246: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2973  00FD4C  0E95               	movlw	149
  2974  00FD4E  6E29               	movwf	drawtext@y,c
  2975  00FD50  0E5D               	movlw	low _SW_EWPED_Txt
  2976  00FD52  6E2A               	movwf	drawtext@_text,c
  2977  00FD54  0E00               	movlw	high _SW_EWPED_Txt
  2978  00FD56  6E2B               	movwf	drawtext@_text+1,c
  2979  00FD58  0EFF               	movlw	255
  2980  00FD5A  6E2D               	movwf	drawtext@color+1,c
  2981  00FD5C  682C               	setf	drawtext@color,c
  2982  00FD5E  0E00               	movlw	0
  2983  00FD60  6E2F               	movwf	drawtext@bg+1,c
  2984  00FD62  0E00               	movlw	0
  2985  00FD64  6E2E               	movwf	drawtext@bg,c
  2986  00FD66  0E01               	movlw	1
  2987  00FD68  6E30               	movwf	drawtext@size,c
  2988  00FD6A  0E3A               	movlw	58
  2989  00FD6C  ECD6  F073         	call	_drawtext
  2990                           
  2991                           ;Lab8pE.c: 247: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2992  00FD70  0E95               	movlw	149
  2993  00FD72  6E29               	movwf	drawtext@y,c
  2994  00FD74  0E5B               	movlw	low _SW_EWLT_Txt
  2995  00FD76  6E2A               	movwf	drawtext@_text,c
  2996  00FD78  0E00               	movlw	high _SW_EWLT_Txt
  2997  00FD7A  6E2B               	movwf	drawtext@_text+1,c
  2998  00FD7C  0EFF               	movlw	255
  2999  00FD7E  6E2D               	movwf	drawtext@color+1,c
  3000  00FD80  682C               	setf	drawtext@color,c
  3001  00FD82  0E00               	movlw	0
  3002  00FD84  6E2F               	movwf	drawtext@bg+1,c
  3003  00FD86  0E00               	movlw	0
  3004  00FD88  6E2E               	movwf	drawtext@bg,c
  3005  00FD8A  0E01               	movlw	1
  3006  00FD8C  6E30               	movwf	drawtext@size,c
  3007  00FD8E  0E57               	movlw	87
  3008  00FD90  ECD6  F073         	call	_drawtext
  3009                           
  3010                           ;Lab8pE.c: 248: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3011  00FD94  0E95               	movlw	149
  3012  00FD96  6E29               	movwf	drawtext@y,c
  3013  00FD98  0E5F               	movlw	low _SW_MODE_Txt
  3014  00FD9A  6E2A               	movwf	drawtext@_text,c
  3015  00FD9C  0E00               	movlw	high _SW_MODE_Txt
  3016  00FD9E  6E2B               	movwf	drawtext@_text+1,c
  3017  00FDA0  0EFF               	movlw	255
  3018  00FDA2  6E2D               	movwf	drawtext@color+1,c
  3019  00FDA4  682C               	setf	drawtext@color,c
  3020  00FDA6  0E00               	movlw	0
  3021  00FDA8  6E2F               	movwf	drawtext@bg+1,c
  3022  00FDAA  0E00               	movlw	0
  3023  00FDAC  6E2E               	movwf	drawtext@bg,c
  3024  00FDAE  0E01               	movlw	1
  3025  00FDB0  6E30               	movwf	drawtext@size,c
  3026  00FDB2  0E70               	movlw	112
  3027  00FDB4  ECD6  F073         	call	_drawtext
  3028  00FDB8  0012               	return		;funcret
  3029  00FDBA                     __end_of_Initialize_Screen:
  3030                           	opt stack 0
  3031                           tblptru	equ	0xFF8
  3032                           tblptrh	equ	0xFF7
  3033                           tblptrl	equ	0xFF6
  3034                           tablat	equ	0xFF5
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           postdec1	equ	0xFE5
  3038                           fsr1l	equ	0xFE1
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _fillScreen *****************
  3042 ;; Defined at:
  3043 ;;		line 652 in file "ST7735_TFT.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;  color           2   19[COMRAM] unsigned int 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;		None               void
  3050 ;; Registers used:
  3051 ;;		wreg, status,2, status,0, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;Total ram usage:        2 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    4
  3064 ;; This function calls:
  3065 ;;		_fillRectangle
  3066 ;; This function is called by:
  3067 ;;		_Initialize_Screen
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text6
  3072  00D9CE                     __ptext6:
  3073                           	opt stack 0
  3074  00D9CE                     _fillScreen:
  3075                           	opt stack 25
  3076                           
  3077                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3078                           
  3079                           ;incstack = 0
  3080  00D9CE  0E00               	movlw	0
  3081  00D9D0  6E08               	movwf	fillRectangle@y,c
  3082  00D9D2  0E80               	movlw	128
  3083  00D9D4  6E09               	movwf	fillRectangle@w,c
  3084  00D9D6  0EA0               	movlw	160
  3085  00D9D8  6E0A               	movwf	fillRectangle@h,c
  3086  00D9DA  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3087  00D9DE  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3088  00D9E2  0E00               	movlw	0
  3089  00D9E4  EC68  F073         	call	_fillRectangle
  3090  00D9E8  0012               	return		;funcret
  3091  00D9EA                     __end_of_fillScreen:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           postinc0	equ	0xFEE
  3098                           wreg	equ	0xFE8
  3099                           postdec1	equ	0xFE5
  3100                           fsr1l	equ	0xFE1
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function _fillRectangle *****************
  3104 ;; Defined at:
  3105 ;;		line 536 in file "ST7735_TFT.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  x               1    wreg     unsigned char 
  3108 ;;  y               1    7[COMRAM] unsigned char 
  3109 ;;  w               1    8[COMRAM] unsigned char 
  3110 ;;  h               1    9[COMRAM] unsigned char 
  3111 ;;  color           2   10[COMRAM] unsigned int 
  3112 ;; Auto vars:     Size  Location     Type
  3113 ;;  x               1   18[COMRAM] unsigned char 
  3114 ;;  lo              1   17[COMRAM] unsigned char 
  3115 ;;  hi              1   16[COMRAM] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;		None               void
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3125 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;Total ram usage:       12 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    3
  3132 ;; This function calls:
  3133 ;;		_setAddrWindow
  3134 ;;		_spiwrite
  3135 ;; This function is called by:
  3136 ;;		_fillScreen
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text7
  3141  00E6D0                     __ptext7:
  3142                           	opt stack 0
  3143  00E6D0                     _fillRectangle:
  3144                           	opt stack 25
  3145                           
  3146                           ;incstack = 0
  3147                           ;fillRectangle@x stored from wreg
  3148  00E6D0  6E13               	movwf	fillRectangle@x,c
  3149                           
  3150                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3151                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3152  00E6D2  0E80               	movlw	128
  3153  00E6D4  6013               	cpfslt	fillRectangle@x,c
  3154  00E6D6  D069               	goto	l226
  3155  00E6D8  0E9F               	movlw	159
  3156  00E6DA  6408               	cpfsgt	fillRectangle@y,c
  3157  00E6DC  D001               	goto	l3187
  3158                           
  3159                           ;ST7735_TFT.c: 540: return;
  3160  00E6DE  D065               	goto	l226
  3161  00E6E0                     l3187:
  3162                           
  3163                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3164  00E6E0  0EFF               	movlw	255
  3165  00E6E2  6E0D               	movwf	??_fillRectangle& (0+255),c
  3166  00E6E4  0EFF               	movlw	255
  3167  00E6E6  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3168  00E6E8  5009               	movf	fillRectangle@w,w,c
  3169  00E6EA  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3170  00E6EE  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3171  00E6F0  260F               	addwf	??_fillRectangle+2,f,c
  3172  00E6F2  0E00               	movlw	0
  3173  00E6F4  2210               	addwfc	??_fillRectangle+3,f,c
  3174  00E6F6  500D               	movf	??_fillRectangle,w,c
  3175  00E6F8  260F               	addwf	??_fillRectangle+2,f,c
  3176  00E6FA  500E               	movf	??_fillRectangle+1,w,c
  3177  00E6FC  2210               	addwfc	??_fillRectangle+3,f,c
  3178  00E6FE  BE10               	btfsc	??_fillRectangle+3,7,c
  3179  00E700  D00A               	goto	l227
  3180  00E702  5010               	movf	??_fillRectangle+3,w,c
  3181  00E704  E104               	bnz	u2050
  3182  00E706  0E80               	movlw	128
  3183  00E708  5C0F               	subwf	??_fillRectangle+2,w,c
  3184  00E70A  A0D8               	btfss	status,0,c
  3185  00E70C  D004               	goto	l227
  3186  00E70E                     u2050:
  3187                           
  3188                           ;ST7735_TFT.c: 542: w = 128 - x;
  3189  00E70E  5013               	movf	fillRectangle@x,w,c
  3190  00E710  0800               	sublw	0
  3191  00E712  0F80               	addlw	128
  3192  00E714  6E09               	movwf	fillRectangle@w,c
  3193  00E716                     l227:
  3194                           
  3195                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3196  00E716  0EFF               	movlw	255
  3197  00E718  6E0D               	movwf	??_fillRectangle& (0+255),c
  3198  00E71A  0EFF               	movlw	255
  3199  00E71C  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3200  00E71E  500A               	movf	fillRectangle@h,w,c
  3201  00E720  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3202  00E724  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3203  00E726  260F               	addwf	??_fillRectangle+2,f,c
  3204  00E728  0E00               	movlw	0
  3205  00E72A  2210               	addwfc	??_fillRectangle+3,f,c
  3206  00E72C  500D               	movf	??_fillRectangle,w,c
  3207  00E72E  260F               	addwf	??_fillRectangle+2,f,c
  3208  00E730  500E               	movf	??_fillRectangle+1,w,c
  3209  00E732  2210               	addwfc	??_fillRectangle+3,f,c
  3210  00E734  BE10               	btfsc	??_fillRectangle+3,7,c
  3211  00E736  D00B               	goto	l3193
  3212  00E738  5010               	movf	??_fillRectangle+3,w,c
  3213  00E73A  E104               	bnz	u2060
  3214  00E73C  0EA0               	movlw	160
  3215  00E73E  5C0F               	subwf	??_fillRectangle+2,w,c
  3216  00E740  A0D8               	btfss	status,0,c
  3217  00E742  D005               	goto	l3193
  3218  00E744                     u2060:
  3219                           
  3220                           ;ST7735_TFT.c: 544: h = 160 - y;
  3221  00E744  5008               	movf	fillRectangle@y,w,c
  3222  00E746  0800               	sublw	0
  3223  00E748  0FA0               	addlw	160
  3224  00E74A  6E0A               	movwf	fillRectangle@h,c
  3225  00E74C  D000               	goto	l3193
  3226  00E74E                     l3193:
  3227                           
  3228                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3229  00E74E  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3230  00E752  5013               	movf	fillRectangle@x,w,c
  3231  00E754  2409               	addwf	fillRectangle@w,w,c
  3232  00E756  6E0D               	movwf	??_fillRectangle& (0+255),c
  3233  00E758  040D               	decf	??_fillRectangle,w,c
  3234  00E75A  6E05               	movwf	setAddrWindow@x1,c
  3235  00E75C  5008               	movf	fillRectangle@y,w,c
  3236  00E75E  240A               	addwf	fillRectangle@h,w,c
  3237  00E760  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3238  00E762  040E               	decf	??_fillRectangle+1,w,c
  3239  00E764  6E06               	movwf	setAddrWindow@y1,c
  3240  00E766  5013               	movf	fillRectangle@x,w,c
  3241  00E768  ECCE  F06E         	call	_setAddrWindow
  3242                           
  3243                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3244  00E76C  500C               	movf	fillRectangle@color+1,w,c
  3245  00E76E  6E11               	movwf	fillRectangle@hi,c
  3246  00E770  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3247                           
  3248                           ;ST7735_TFT.c: 547: PORTCbits.RC0 = 1;
  3249  00E774  8082               	bsf	3970,0,c	;volatile
  3250                           
  3251                           ;ST7735_TFT.c: 548: PORTCbits.RC1 = 0;
  3252  00E776  9282               	bcf	3970,1,c	;volatile
  3253                           
  3254                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3255  00E778  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3256  00E77C                     l3205:
  3257  00E77C  5008               	movf	fillRectangle@y,w,c
  3258  00E77E  B4D8               	btfsc	status,2,c
  3259  00E780  D013               	goto	l230
  3260  00E782  D001               	goto	l229
  3261  00E784  D011               	goto	l230
  3262  00E786                     l229:
  3263                           
  3264                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3265  00E786  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3266  00E78A                     l3209:
  3267  00E78A  5013               	movf	fillRectangle@x,w,c
  3268  00E78C  B4D8               	btfsc	status,2,c
  3269  00E78E  D00A               	goto	l3219
  3270  00E790  D001               	goto	l3213
  3271  00E792  D008               	goto	l3219
  3272  00E794                     l3213:
  3273                           
  3274                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3275  00E794  5011               	movf	fillRectangle@hi,w,c
  3276  00E796  ECBB  F06C         	call	_spiwrite
  3277                           
  3278                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3279  00E79A  5012               	movf	fillRectangle@lo,w,c
  3280  00E79C  ECBB  F06C         	call	_spiwrite
  3281  00E7A0  0613               	decf	fillRectangle@x,f,c
  3282  00E7A2  D7F3               	goto	l3209
  3283  00E7A4                     l3219:
  3284  00E7A4  0608               	decf	fillRectangle@y,f,c
  3285  00E7A6  D7EA               	goto	l3205
  3286  00E7A8                     l230:
  3287                           
  3288                           ;ST7735_TFT.c: 554: }
  3289                           ;ST7735_TFT.c: 555: }
  3290                           ;ST7735_TFT.c: 556: PORTCbits.RC1 = 1;
  3291  00E7A8  8282               	bsf	3970,1,c	;volatile
  3292  00E7AA                     l226:
  3293  00E7AA  0012               	return		;funcret
  3294  00E7AC                     __end_of_fillRectangle:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           postdec1	equ	0xFE5
  3303                           fsr1l	equ	0xFE1
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _drawRect *****************
  3307 ;; Defined at:
  3308 ;;		line 718 in file "ST7735_TFT.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  x               2   18[COMRAM] unsigned int 
  3311 ;;  y               2   20[COMRAM] unsigned int 
  3312 ;;  w               2   22[COMRAM] unsigned int 
  3313 ;;  h               2   24[COMRAM] unsigned int 
  3314 ;;  color           2   26[COMRAM] unsigned int 
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;		None               void
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3326 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;Total ram usage:       11 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    4
  3333 ;; This function calls:
  3334 ;;		_drawFastHLine
  3335 ;;		_drawFastVLine
  3336 ;; This function is called by:
  3337 ;;		_Initialize_Screen
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text8
  3342  00DE8E                     __ptext8:
  3343                           	opt stack 0
  3344  00DE8E                     _drawRect:
  3345                           	opt stack 25
  3346                           
  3347                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3348                           
  3349                           ;incstack = 0
  3350  00DE8E  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3351  00DE92  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3352  00DE96  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3353  00DE9A  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3354  00DE9E  5013               	movf	drawRect@x,w,c
  3355  00DEA0  EC78  F070         	call	_drawFastHLine
  3356                           
  3357                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3358  00DEA4  5015               	movf	drawRect@y,w,c
  3359  00DEA6  2419               	addwf	drawRect@h,w,c
  3360  00DEA8  6E1D               	movwf	??_drawRect& (0+255),c
  3361  00DEAA  041D               	decf	??_drawRect,w,c
  3362  00DEAC  6E08               	movwf	drawFastHLine@y,c
  3363  00DEAE  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3364  00DEB2  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3365  00DEB6  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3366  00DEBA  5013               	movf	drawRect@x,w,c
  3367  00DEBC  EC78  F070         	call	_drawFastHLine
  3368                           
  3369                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3370  00DEC0  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3371  00DEC4  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3372  00DEC8  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3373  00DECC  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3374  00DED0  5013               	movf	drawRect@x,w,c
  3375  00DED2  EC34  F070         	call	_drawFastVLine
  3376                           
  3377                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3378  00DED6  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3379  00DEDA  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3380  00DEDE  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3381  00DEE2  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3382  00DEE6  5013               	movf	drawRect@x,w,c
  3383  00DEE8  2417               	addwf	drawRect@w,w,c
  3384  00DEEA  6E1D               	movwf	??_drawRect& (0+255),c
  3385  00DEEC  041D               	decf	??_drawRect,w,c
  3386  00DEEE  EC34  F070         	call	_drawFastVLine
  3387  00DEF2  0012               	return		;funcret
  3388  00DEF4                     __end_of_drawRect:
  3389                           	opt stack 0
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           postinc0	equ	0xFEE
  3395                           wreg	equ	0xFE8
  3396                           postdec1	equ	0xFE5
  3397                           fsr1l	equ	0xFE1
  3398                           status	equ	0xFD8
  3399                           
  3400 ;; *************** function _drawFastHLine *****************
  3401 ;; Defined at:
  3402 ;;		line 657 in file "ST7735_TFT.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  x               1    wreg     unsigned char 
  3405 ;;  y               1    7[COMRAM] unsigned char 
  3406 ;;  w               1    8[COMRAM] unsigned char 
  3407 ;;  color           2    9[COMRAM] unsigned int 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  x               1   17[COMRAM] unsigned char 
  3410 ;;  lo              1   16[COMRAM] unsigned char 
  3411 ;;  hi              1   15[COMRAM] unsigned char 
  3412 ;; Return value:  Size  Location     Type
  3413 ;;		None               void
  3414 ;; Registers used:
  3415 ;;		wreg, status,2, status,0, cstack
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3421 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;Total ram usage:       11 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    3
  3428 ;; This function calls:
  3429 ;;		_setAddrWindow
  3430 ;;		_spiwrite
  3431 ;; This function is called by:
  3432 ;;		_drawRect
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text9
  3437  00E0F0                     __ptext9:
  3438                           	opt stack 0
  3439  00E0F0                     _drawFastHLine:
  3440                           	opt stack 25
  3441                           
  3442                           ;incstack = 0
  3443                           ;drawFastHLine@x stored from wreg
  3444  00E0F0  6E12               	movwf	drawFastHLine@x,c
  3445                           
  3446                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3447                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3448  00E0F2  0E80               	movlw	128
  3449  00E0F4  6012               	cpfslt	drawFastHLine@x,c
  3450  00E0F6  D03F               	goto	l271
  3451  00E0F8  0E9F               	movlw	159
  3452  00E0FA  6408               	cpfsgt	drawFastHLine@y,c
  3453  00E0FC  D001               	goto	l3227
  3454                           
  3455                           ;ST7735_TFT.c: 661: return;
  3456  00E0FE  D03B               	goto	l271
  3457  00E100                     l3227:
  3458                           
  3459                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3460  00E100  0EFF               	movlw	255
  3461  00E102  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3462  00E104  0EFF               	movlw	255
  3463  00E106  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3464  00E108  5009               	movf	drawFastHLine@w,w,c
  3465  00E10A  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3466  00E10E  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3467  00E110  260E               	addwf	??_drawFastHLine+2,f,c
  3468  00E112  0E00               	movlw	0
  3469  00E114  220F               	addwfc	??_drawFastHLine+3,f,c
  3470  00E116  500C               	movf	??_drawFastHLine,w,c
  3471  00E118  260E               	addwf	??_drawFastHLine+2,f,c
  3472  00E11A  500D               	movf	??_drawFastHLine+1,w,c
  3473  00E11C  220F               	addwfc	??_drawFastHLine+3,f,c
  3474  00E11E  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3475  00E120  D00B               	goto	l3231
  3476  00E122  500F               	movf	??_drawFastHLine+3,w,c
  3477  00E124  E104               	bnz	u2130
  3478  00E126  0E80               	movlw	128
  3479  00E128  5C0E               	subwf	??_drawFastHLine+2,w,c
  3480  00E12A  A0D8               	btfss	status,0,c
  3481  00E12C  D005               	goto	l3231
  3482  00E12E                     u2130:
  3483                           
  3484                           ;ST7735_TFT.c: 663: w = 128 - x;
  3485  00E12E  5012               	movf	drawFastHLine@x,w,c
  3486  00E130  0800               	sublw	0
  3487  00E132  0F80               	addlw	128
  3488  00E134  6E09               	movwf	drawFastHLine@w,c
  3489  00E136  D000               	goto	l3231
  3490  00E138                     l3231:
  3491                           
  3492                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3493  00E138  500B               	movf	drawFastHLine@color+1,w,c
  3494  00E13A  6E10               	movwf	drawFastHLine@hi,c
  3495  00E13C  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3496                           
  3497                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3498  00E140  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3499  00E144  5012               	movf	drawFastHLine@x,w,c
  3500  00E146  2409               	addwf	drawFastHLine@w,w,c
  3501  00E148  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3502  00E14A  040C               	decf	??_drawFastHLine,w,c
  3503  00E14C  6E05               	movwf	setAddrWindow@x1,c
  3504  00E14E  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3505  00E152  5012               	movf	drawFastHLine@x,w,c
  3506  00E154  ECCE  F06E         	call	_setAddrWindow
  3507                           
  3508                           ;ST7735_TFT.c: 666: PORTCbits.RC0 = 1;
  3509  00E158  8082               	bsf	3970,0,c	;volatile
  3510                           
  3511                           ;ST7735_TFT.c: 667: PORTCbits.RC1 = 0;
  3512  00E15A  9282               	bcf	3970,1,c	;volatile
  3513                           
  3514                           ;ST7735_TFT.c: 669: while (w--) {
  3515  00E15C  D007               	goto	l3243
  3516  00E15E                     l3241:
  3517                           
  3518                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3519  00E15E  5010               	movf	drawFastHLine@hi,w,c
  3520  00E160  ECBB  F06C         	call	_spiwrite
  3521                           
  3522                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3523  00E164  5011               	movf	drawFastHLine@lo,w,c
  3524  00E166  ECBB  F06C         	call	_spiwrite
  3525  00E16A  D000               	goto	l3243
  3526  00E16C                     l3243:
  3527  00E16C  0609               	decf	drawFastHLine@w,f,c
  3528  00E16E  2809               	incf	drawFastHLine@w,w,c
  3529  00E170  A4D8               	btfss	status,2,c
  3530  00E172  D7F5               	goto	l3241
  3531                           
  3532                           ;ST7735_TFT.c: 672: }
  3533                           ;ST7735_TFT.c: 673: PORTCbits.RC1 = 1;
  3534  00E174  8282               	bsf	3970,1,c	;volatile
  3535  00E176                     l271:
  3536  00E176  0012               	return		;funcret
  3537  00E178                     __end_of_drawFastHLine:
  3538                           	opt stack 0
  3539                           tblptru	equ	0xFF8
  3540                           tblptrh	equ	0xFF7
  3541                           tblptrl	equ	0xFF6
  3542                           tablat	equ	0xFF5
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postdec1	equ	0xFE5
  3546                           fsr1l	equ	0xFE1
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function _TFT_GreenTab_Initialize *****************
  3550 ;; Defined at:
  3551 ;;		line 677 in file "ST7735_TFT.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;		None
  3556 ;; Return value:  Size  Location     Type
  3557 ;;		None               void
  3558 ;; Registers used:
  3559 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3560 ;; Tracked objects:
  3561 ;;		On entry : 0/0
  3562 ;;		On exit  : 0/0
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;Total ram usage:        0 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; Hardware stack levels required when called:    3
  3572 ;; This function calls:
  3573 ;;		_Rcmd1
  3574 ;;		_Rcmd2red
  3575 ;;		_Rcmd3
  3576 ;;		_write_command
  3577 ;;		_write_data
  3578 ;; This function is called by:
  3579 ;;		_Initialize_Screen
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text10
  3584  00DA5C                     __ptext10:
  3585                           	opt stack 0
  3586  00DA5C                     _TFT_GreenTab_Initialize:
  3587                           	opt stack 26
  3588                           
  3589                           ;ST7735_TFT.c: 679: PORTCbits.RC1 = 1;
  3590                           
  3591                           ;incstack = 0
  3592  00DA5C  8282               	bsf	3970,1,c	;volatile
  3593                           
  3594                           ;ST7735_TFT.c: 680: PORTCbits.RC0 = 0;
  3595  00DA5E  9082               	bcf	3970,0,c	;volatile
  3596                           
  3597                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3598  00DA60  0E80               	movlw	128
  3599  00DA62  6EC7               	movwf	4039,c	;volatile
  3600                           
  3601                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3602  00DA64  0E30               	movlw	48
  3603  00DA66  6EC6               	movwf	4038,c	;volatile
  3604                           
  3605                           ;ST7735_TFT.c: 686: Rcmd1();
  3606  00DA68  EC2F  F075         	call	_Rcmd1	;wreg free
  3607                           
  3608                           ;ST7735_TFT.c: 687: Rcmd2red();
  3609  00DA6C  ECE1  F06D         	call	_Rcmd2red	;wreg free
  3610                           
  3611                           ;ST7735_TFT.c: 688: Rcmd3();
  3612  00DA70  ECB6  F074         	call	_Rcmd3	;wreg free
  3613                           
  3614                           ;ST7735_TFT.c: 689: write_command(0x36);
  3615  00DA74  0E36               	movlw	54
  3616  00DA76  EC99  F06C         	call	_write_command
  3617                           
  3618                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3619  00DA7A  0EC0               	movlw	192
  3620  00DA7C  ECA1  F06C         	call	_write_data
  3621                           
  3622                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3623  00DA80  0E01               	movlw	1
  3624  00DA82  6E77               	movwf	__tft_type,c
  3625  00DA84  0012               	return		;funcret
  3626  00DA86                     __end_of_TFT_GreenTab_Initialize:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1l	equ	0xFE1
  3636                           status	equ	0xFD8
  3637                           
  3638 ;; *************** function _Rcmd3 *****************
  3639 ;; Defined at:
  3640 ;;		line 371 in file "ST7735_TFT.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;		None
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;		None
  3645 ;; Return value:  Size  Location     Type
  3646 ;;		None               void
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;Total ram usage:        0 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    2
  3661 ;; This function calls:
  3662 ;;		_delay_ms
  3663 ;;		_write_command
  3664 ;;		_write_data
  3665 ;; This function is called by:
  3666 ;;		_TFT_GreenTab_Initialize
  3667 ;;		_TFT_BlackTab_Initialize
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text11
  3672  00E96C                     __ptext11:
  3673                           	opt stack 0
  3674  00E96C                     _Rcmd3:
  3675                           	opt stack 26
  3676                           
  3677                           ;ST7735_TFT.c: 373: write_command(0xE0);
  3678                           
  3679                           ;incstack = 0
  3680  00E96C  0EE0               	movlw	224
  3681  00E96E  EC99  F06C         	call	_write_command
  3682                           
  3683                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3684  00E972  0E02               	movlw	2
  3685  00E974  ECA1  F06C         	call	_write_data
  3686  00E978  0E1C               	movlw	28
  3687  00E97A  ECA1  F06C         	call	_write_data
  3688  00E97E  0E07               	movlw	7
  3689  00E980  ECA1  F06C         	call	_write_data
  3690  00E984  0E12               	movlw	18
  3691  00E986  ECA1  F06C         	call	_write_data
  3692                           
  3693                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3694  00E98A  0E37               	movlw	55
  3695  00E98C  ECA1  F06C         	call	_write_data
  3696  00E990  0E32               	movlw	50
  3697  00E992  ECA1  F06C         	call	_write_data
  3698  00E996  0E29               	movlw	41
  3699  00E998  ECA1  F06C         	call	_write_data
  3700  00E99C  0E2D               	movlw	45
  3701  00E99E  ECA1  F06C         	call	_write_data
  3702                           
  3703                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3704  00E9A2  0E29               	movlw	41
  3705  00E9A4  ECA1  F06C         	call	_write_data
  3706  00E9A8  0E25               	movlw	37
  3707  00E9AA  ECA1  F06C         	call	_write_data
  3708  00E9AE  0E2B               	movlw	43
  3709  00E9B0  ECA1  F06C         	call	_write_data
  3710  00E9B4  0E39               	movlw	57
  3711  00E9B6  ECA1  F06C         	call	_write_data
  3712                           
  3713                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3714  00E9BA  0E00               	movlw	0
  3715  00E9BC  ECA1  F06C         	call	_write_data
  3716  00E9C0  0E01               	movlw	1
  3717  00E9C2  ECA1  F06C         	call	_write_data
  3718  00E9C6  0E03               	movlw	3
  3719  00E9C8  ECA1  F06C         	call	_write_data
  3720  00E9CC  0E10               	movlw	16
  3721  00E9CE  ECA1  F06C         	call	_write_data
  3722                           
  3723                           ;ST7735_TFT.c: 378: write_command(0xE1);
  3724  00E9D2  0EE1               	movlw	225
  3725  00E9D4  EC99  F06C         	call	_write_command
  3726                           
  3727                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3728  00E9D8  0E03               	movlw	3
  3729  00E9DA  ECA1  F06C         	call	_write_data
  3730  00E9DE  0E1D               	movlw	29
  3731  00E9E0  ECA1  F06C         	call	_write_data
  3732  00E9E4  0E07               	movlw	7
  3733  00E9E6  ECA1  F06C         	call	_write_data
  3734  00E9EA  0E06               	movlw	6
  3735  00E9EC  ECA1  F06C         	call	_write_data
  3736                           
  3737                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3738  00E9F0  0E2E               	movlw	46
  3739  00E9F2  ECA1  F06C         	call	_write_data
  3740  00E9F6  0E2C               	movlw	44
  3741  00E9F8  ECA1  F06C         	call	_write_data
  3742  00E9FC  0E29               	movlw	41
  3743  00E9FE  ECA1  F06C         	call	_write_data
  3744  00EA02  0E2D               	movlw	45
  3745  00EA04  ECA1  F06C         	call	_write_data
  3746                           
  3747                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3748  00EA08  0E2E               	movlw	46
  3749  00EA0A  ECA1  F06C         	call	_write_data
  3750  00EA0E  0E2E               	movlw	46
  3751  00EA10  ECA1  F06C         	call	_write_data
  3752  00EA14  0E37               	movlw	55
  3753  00EA16  ECA1  F06C         	call	_write_data
  3754  00EA1A  0E3F               	movlw	63
  3755  00EA1C  ECA1  F06C         	call	_write_data
  3756                           
  3757                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3758  00EA20  0E00               	movlw	0
  3759  00EA22  ECA1  F06C         	call	_write_data
  3760  00EA26  0E00               	movlw	0
  3761  00EA28  ECA1  F06C         	call	_write_data
  3762  00EA2C  0E02               	movlw	2
  3763  00EA2E  ECA1  F06C         	call	_write_data
  3764  00EA32  0E10               	movlw	16
  3765  00EA34  ECA1  F06C         	call	_write_data
  3766                           
  3767                           ;ST7735_TFT.c: 383: write_command(0x13);
  3768  00EA38  0E13               	movlw	19
  3769  00EA3A  EC99  F06C         	call	_write_command
  3770                           
  3771                           ;ST7735_TFT.c: 384: delay_ms(10);
  3772  00EA3E  0E00               	movlw	0
  3773  00EA40  6E08               	movwf	delay_ms@ms+1,c
  3774  00EA42  0E0A               	movlw	10
  3775  00EA44  6E07               	movwf	delay_ms@ms,c
  3776  00EA46  EC1E  F06F         	call	_delay_ms	;wreg free
  3777                           
  3778                           ;ST7735_TFT.c: 385: write_command(0x29);
  3779  00EA4A  0E29               	movlw	41
  3780  00EA4C  EC99  F06C         	call	_write_command
  3781                           
  3782                           ;ST7735_TFT.c: 386: delay_ms(100);
  3783  00EA50  0E00               	movlw	0
  3784  00EA52  6E08               	movwf	delay_ms@ms+1,c
  3785  00EA54  0E64               	movlw	100
  3786  00EA56  6E07               	movwf	delay_ms@ms,c
  3787  00EA58  EC1E  F06F         	call	_delay_ms	;wreg free
  3788  00EA5C  0012               	return		;funcret
  3789  00EA5E                     __end_of_Rcmd3:
  3790                           	opt stack 0
  3791                           tblptru	equ	0xFF8
  3792                           tblptrh	equ	0xFF7
  3793                           tblptrl	equ	0xFF6
  3794                           tablat	equ	0xFF5
  3795                           postinc0	equ	0xFEE
  3796                           wreg	equ	0xFE8
  3797                           postdec1	equ	0xFE5
  3798                           fsr1l	equ	0xFE1
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _Rcmd2red *****************
  3802 ;; Defined at:
  3803 ;;		line 361 in file "ST7735_TFT.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;		None               void
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;Total ram usage:        0 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    2
  3824 ;; This function calls:
  3825 ;;		_write_command
  3826 ;;		_write_data
  3827 ;; This function is called by:
  3828 ;;		_TFT_GreenTab_Initialize
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	text12
  3833  00DBC2                     __ptext12:
  3834                           	opt stack 0
  3835  00DBC2                     _Rcmd2red:
  3836                           	opt stack 26
  3837                           
  3838                           ;ST7735_TFT.c: 363: write_command(0x2A);
  3839                           
  3840                           ;incstack = 0
  3841  00DBC2  0E2A               	movlw	42
  3842  00DBC4  EC99  F06C         	call	_write_command
  3843                           
  3844                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  3845  00DBC8  0E00               	movlw	0
  3846  00DBCA  ECA1  F06C         	call	_write_data
  3847  00DBCE  0E00               	movlw	0
  3848  00DBD0  ECA1  F06C         	call	_write_data
  3849                           
  3850                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  3851  00DBD4  0E00               	movlw	0
  3852  00DBD6  ECA1  F06C         	call	_write_data
  3853  00DBDA  0E7F               	movlw	127
  3854  00DBDC  ECA1  F06C         	call	_write_data
  3855                           
  3856                           ;ST7735_TFT.c: 366: write_command(0x2B);
  3857  00DBE0  0E2B               	movlw	43
  3858  00DBE2  EC99  F06C         	call	_write_command
  3859                           
  3860                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  3861  00DBE6  0E00               	movlw	0
  3862  00DBE8  ECA1  F06C         	call	_write_data
  3863  00DBEC  0E00               	movlw	0
  3864  00DBEE  ECA1  F06C         	call	_write_data
  3865                           
  3866                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  3867  00DBF2  0E00               	movlw	0
  3868  00DBF4  ECA1  F06C         	call	_write_data
  3869  00DBF8  0E9F               	movlw	159
  3870  00DBFA  ECA1  F06C         	call	_write_data
  3871  00DBFE  0012               	return		;funcret
  3872  00DC00                     __end_of_Rcmd2red:
  3873                           	opt stack 0
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           postdec1	equ	0xFE5
  3881                           fsr1l	equ	0xFE1
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _Rcmd1 *****************
  3885 ;; Defined at:
  3886 ;;		line 314 in file "ST7735_TFT.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;		None               void
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    2
  3907 ;; This function calls:
  3908 ;;		_delay_ms
  3909 ;;		_write_command
  3910 ;;		_write_data
  3911 ;; This function is called by:
  3912 ;;		_TFT_GreenTab_Initialize
  3913 ;;		_TFT_BlackTab_Initialize
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text13
  3918  00EA5E                     __ptext13:
  3919                           	opt stack 0
  3920  00EA5E                     _Rcmd1:
  3921                           	opt stack 26
  3922                           
  3923                           ;ST7735_TFT.c: 316: write_command(0x01);
  3924                           
  3925                           ;incstack = 0
  3926  00EA5E  0E01               	movlw	1
  3927  00EA60  EC99  F06C         	call	_write_command
  3928                           
  3929                           ;ST7735_TFT.c: 317: delay_ms(150);
  3930  00EA64  0E00               	movlw	0
  3931  00EA66  6E08               	movwf	delay_ms@ms+1,c
  3932  00EA68  0E96               	movlw	150
  3933  00EA6A  6E07               	movwf	delay_ms@ms,c
  3934  00EA6C  EC1E  F06F         	call	_delay_ms	;wreg free
  3935                           
  3936                           ;ST7735_TFT.c: 318: write_command(0x11);
  3937  00EA70  0E11               	movlw	17
  3938  00EA72  EC99  F06C         	call	_write_command
  3939                           
  3940                           ;ST7735_TFT.c: 319: delay_ms(500);
  3941  00EA76  0E01               	movlw	1
  3942  00EA78  6E08               	movwf	delay_ms@ms+1,c
  3943  00EA7A  0EF4               	movlw	244
  3944  00EA7C  6E07               	movwf	delay_ms@ms,c
  3945  00EA7E  EC1E  F06F         	call	_delay_ms	;wreg free
  3946                           
  3947                           ;ST7735_TFT.c: 320: write_command(0xB1);
  3948  00EA82  0EB1               	movlw	177
  3949  00EA84  EC99  F06C         	call	_write_command
  3950                           
  3951                           ;ST7735_TFT.c: 321: write_data(0x01);
  3952  00EA88  0E01               	movlw	1
  3953  00EA8A  ECA1  F06C         	call	_write_data
  3954                           
  3955                           ;ST7735_TFT.c: 322: write_data(0x2C);
  3956  00EA8E  0E2C               	movlw	44
  3957  00EA90  ECA1  F06C         	call	_write_data
  3958                           
  3959                           ;ST7735_TFT.c: 323: write_data(0x2D);
  3960  00EA94  0E2D               	movlw	45
  3961  00EA96  ECA1  F06C         	call	_write_data
  3962                           
  3963                           ;ST7735_TFT.c: 324: write_command(0xB2);
  3964  00EA9A  0EB2               	movlw	178
  3965  00EA9C  EC99  F06C         	call	_write_command
  3966                           
  3967                           ;ST7735_TFT.c: 325: write_data(0x01);
  3968  00EAA0  0E01               	movlw	1
  3969  00EAA2  ECA1  F06C         	call	_write_data
  3970                           
  3971                           ;ST7735_TFT.c: 326: write_data(0x2C);
  3972  00EAA6  0E2C               	movlw	44
  3973  00EAA8  ECA1  F06C         	call	_write_data
  3974                           
  3975                           ;ST7735_TFT.c: 327: write_data(0x2D);
  3976  00EAAC  0E2D               	movlw	45
  3977  00EAAE  ECA1  F06C         	call	_write_data
  3978                           
  3979                           ;ST7735_TFT.c: 328: write_command(0xB3);
  3980  00EAB2  0EB3               	movlw	179
  3981  00EAB4  EC99  F06C         	call	_write_command
  3982                           
  3983                           ;ST7735_TFT.c: 329: write_data(0x01);
  3984  00EAB8  0E01               	movlw	1
  3985  00EABA  ECA1  F06C         	call	_write_data
  3986                           
  3987                           ;ST7735_TFT.c: 330: write_data(0x2C);
  3988  00EABE  0E2C               	movlw	44
  3989  00EAC0  ECA1  F06C         	call	_write_data
  3990                           
  3991                           ;ST7735_TFT.c: 331: write_data(0x2D);
  3992  00EAC4  0E2D               	movlw	45
  3993  00EAC6  ECA1  F06C         	call	_write_data
  3994                           
  3995                           ;ST7735_TFT.c: 332: write_data(0x01);
  3996  00EACA  0E01               	movlw	1
  3997  00EACC  ECA1  F06C         	call	_write_data
  3998                           
  3999                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4000  00EAD0  0E2C               	movlw	44
  4001  00EAD2  ECA1  F06C         	call	_write_data
  4002                           
  4003                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4004  00EAD6  0E2D               	movlw	45
  4005  00EAD8  ECA1  F06C         	call	_write_data
  4006                           
  4007                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4008  00EADC  0EB4               	movlw	180
  4009  00EADE  EC99  F06C         	call	_write_command
  4010                           
  4011                           ;ST7735_TFT.c: 336: write_data(0x07);
  4012  00EAE2  0E07               	movlw	7
  4013  00EAE4  ECA1  F06C         	call	_write_data
  4014                           
  4015                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4016  00EAE8  0EC0               	movlw	192
  4017  00EAEA  EC99  F06C         	call	_write_command
  4018                           
  4019                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4020  00EAEE  0EA2               	movlw	162
  4021  00EAF0  ECA1  F06C         	call	_write_data
  4022                           
  4023                           ;ST7735_TFT.c: 339: write_data(0x02);
  4024  00EAF4  0E02               	movlw	2
  4025  00EAF6  ECA1  F06C         	call	_write_data
  4026                           
  4027                           ;ST7735_TFT.c: 340: write_data(0x84);
  4028  00EAFA  0E84               	movlw	132
  4029  00EAFC  ECA1  F06C         	call	_write_data
  4030                           
  4031                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4032  00EB00  0EC1               	movlw	193
  4033  00EB02  EC99  F06C         	call	_write_command
  4034                           
  4035                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4036  00EB06  0EC5               	movlw	197
  4037  00EB08  ECA1  F06C         	call	_write_data
  4038                           
  4039                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4040  00EB0C  0EC2               	movlw	194
  4041  00EB0E  EC99  F06C         	call	_write_command
  4042                           
  4043                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4044  00EB12  0E0A               	movlw	10
  4045  00EB14  ECA1  F06C         	call	_write_data
  4046                           
  4047                           ;ST7735_TFT.c: 345: write_data(0x00);
  4048  00EB18  0E00               	movlw	0
  4049  00EB1A  ECA1  F06C         	call	_write_data
  4050                           
  4051                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4052  00EB1E  0EC3               	movlw	195
  4053  00EB20  EC99  F06C         	call	_write_command
  4054                           
  4055                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4056  00EB24  0E8A               	movlw	138
  4057  00EB26  ECA1  F06C         	call	_write_data
  4058                           
  4059                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4060  00EB2A  0E2A               	movlw	42
  4061  00EB2C  ECA1  F06C         	call	_write_data
  4062                           
  4063                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4064  00EB30  0EC4               	movlw	196
  4065  00EB32  EC99  F06C         	call	_write_command
  4066                           
  4067                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4068  00EB36  0E8A               	movlw	138
  4069  00EB38  ECA1  F06C         	call	_write_data
  4070                           
  4071                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4072  00EB3C  0EEE               	movlw	238
  4073  00EB3E  ECA1  F06C         	call	_write_data
  4074                           
  4075                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4076  00EB42  0EC5               	movlw	197
  4077  00EB44  EC99  F06C         	call	_write_command
  4078                           
  4079                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4080  00EB48  0E0E               	movlw	14
  4081  00EB4A  ECA1  F06C         	call	_write_data
  4082                           
  4083                           ;ST7735_TFT.c: 354: write_command(0x20);
  4084  00EB4E  0E20               	movlw	32
  4085  00EB50  EC99  F06C         	call	_write_command
  4086                           
  4087                           ;ST7735_TFT.c: 355: write_command(0x36);
  4088  00EB54  0E36               	movlw	54
  4089  00EB56  EC99  F06C         	call	_write_command
  4090                           
  4091                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4092  00EB5A  0EC8               	movlw	200
  4093  00EB5C  ECA1  F06C         	call	_write_data
  4094                           
  4095                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4096  00EB60  0E3A               	movlw	58
  4097  00EB62  EC99  F06C         	call	_write_command
  4098                           
  4099                           ;ST7735_TFT.c: 358: write_data(0x05);
  4100  00EB66  0E05               	movlw	5
  4101  00EB68  ECA1  F06C         	call	_write_data
  4102  00EB6C  0012               	return		;funcret
  4103  00EB6E                     __end_of_Rcmd1:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           postinc0	equ	0xFEE
  4110                           wreg	equ	0xFE8
  4111                           postdec1	equ	0xFE5
  4112                           fsr1l	equ	0xFE1
  4113                           status	equ	0xFD8
  4114                           
  4115 ;; *************** function _LCD_Reset *****************
  4116 ;; Defined at:
  4117 ;;		line 250 in file "ST7735_TFT.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;		None               void
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;Total ram usage:        0 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    2
  4138 ;; This function calls:
  4139 ;;		_delay_ms
  4140 ;; This function is called by:
  4141 ;;		_Initialize_Screen
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           	psect	text14
  4146  00D964                     __ptext14:
  4147                           	opt stack 0
  4148  00D964                     _LCD_Reset:
  4149                           	opt stack 27
  4150                           
  4151                           ;ST7735_TFT.c: 252: PORTCbits.RC2 = 0;
  4152                           
  4153                           ;incstack = 0
  4154  00D964  9482               	bcf	3970,2,c	;volatile
  4155                           
  4156                           ;ST7735_TFT.c: 253: delay_ms(100);
  4157  00D966  0E00               	movlw	0
  4158  00D968  6E08               	movwf	delay_ms@ms+1,c
  4159  00D96A  0E64               	movlw	100
  4160  00D96C  6E07               	movwf	delay_ms@ms,c
  4161  00D96E  EC1E  F06F         	call	_delay_ms	;wreg free
  4162                           
  4163                           ;ST7735_TFT.c: 254: PORTCbits.RC2 = 1;
  4164  00D972  8482               	bsf	3970,2,c	;volatile
  4165  00D974  0012               	return		;funcret
  4166  00D976                     __end_of_LCD_Reset:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           postinc0	equ	0xFEE
  4173                           wreg	equ	0xFE8
  4174                           postdec1	equ	0xFE5
  4175                           fsr1l	equ	0xFE1
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _delay_ms *****************
  4179 ;; Defined at:
  4180 ;;		line 97 in file "ST7735_TFT.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  ms              2    6[COMRAM] int 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  count           2   10[COMRAM] int 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;		None               void
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4194 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;Total ram usage:        6 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    1
  4201 ;; This function calls:
  4202 ;;		___wmul
  4203 ;; This function is called by:
  4204 ;;		_LCD_Reset
  4205 ;;		_Rcmd1
  4206 ;;		_Rcmd3
  4207 ;;		_Bcmd
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text15
  4212  00DE3C                     __ptext15:
  4213                           	opt stack 0
  4214  00DE3C                     _delay_ms:
  4215                           	opt stack 26
  4216                           
  4217                           ;ST7735_TFT.c: 103: int count;
  4218                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4219                           
  4220                           ;incstack = 0
  4221  00DE3C  C007  F001         	movff	delay_ms@ms,___wmul@multiplier
  4222  00DE40  C008  F002         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4223  00DE44  0E00               	movlw	0
  4224  00DE46  6E04               	movwf	___wmul@multiplicand+1,c
  4225  00DE48  0EFA               	movlw	250
  4226  00DE4A  6E03               	movwf	___wmul@multiplicand,c
  4227  00DE4C  EC1A  F06D         	call	___wmul	;wreg free
  4228  00DE50  C001  F00B         	movff	?___wmul,delay_ms@count
  4229  00DE54  C002  F00C         	movff	?___wmul+1,delay_ms@count+1
  4230                           
  4231                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4232  00DE58  C00B  F009         	movff	delay_ms@count,??_delay_ms
  4233  00DE5C  C00C  F00A         	movff	delay_ms@count+1,??_delay_ms+1
  4234  00DE60  1E09               	comf	??_delay_ms,f,c
  4235  00DE62  1E0A               	comf	??_delay_ms+1,f,c
  4236  00DE64  4A09               	infsnz	??_delay_ms,f,c
  4237  00DE66  2A0A               	incf	??_delay_ms+1,f,c
  4238  00DE68  0EFF               	movlw	255
  4239  00DE6A  2409               	addwf	??_delay_ms,w,c
  4240  00DE6C  6E0B               	movwf	delay_ms@count,c
  4241  00DE6E  0EFF               	movlw	255
  4242  00DE70  200A               	addwfc	??_delay_ms+1,w,c
  4243  00DE72  6E0C               	movwf	delay_ms@count+1,c
  4244                           
  4245                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4246  00DE74  0EB8               	movlw	184
  4247  00DE76  6EB1               	movwf	4017,c	;volatile
  4248                           
  4249                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4250  00DE78  C00B  FFD6         	movff	delay_ms@count,4054	;volatile
  4251                           
  4252                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4253  00DE7C  500C               	movf	delay_ms@count+1,w,c
  4254  00DE7E  6ED7               	movwf	4055,c	;volatile
  4255                           
  4256                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4257  00DE80  92A1               	bcf	4001,1,c	;volatile
  4258                           
  4259                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4260  00DE82  80B1               	bsf	4017,0,c	;volatile
  4261                           
  4262                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4263  00DE84  D000               	goto	l113
  4264  00DE86                     l113:
  4265  00DE86  A2A1               	btfss	4001,1,c	;volatile
  4266  00DE88  D7FE               	goto	l113
  4267                           
  4268                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4269  00DE8A  90B1               	bcf	4017,0,c	;volatile
  4270  00DE8C  0012               	return		;funcret
  4271  00DE8E                     __end_of_delay_ms:
  4272                           	opt stack 0
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           postinc0	equ	0xFEE
  4278                           wreg	equ	0xFE8
  4279                           postdec1	equ	0xFE5
  4280                           fsr1l	equ	0xFE1
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _Init_ADC *****************
  4284 ;; Defined at:
  4285 ;;		line 301 in file "Lab8pE.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;		None               void
  4292 ;; Registers used:
  4293 ;;		wreg, status,2
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;Total ram usage:        0 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_main
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text16
  4313  00D924                     __ptext16:
  4314                           	opt stack 0
  4315  00D924                     _Init_ADC:
  4316                           	opt stack 30
  4317                           
  4318                           ;Lab8pE.c: 303: ADCON0 = 0x01;
  4319                           
  4320                           ;incstack = 0
  4321  00D924  0E01               	movlw	1
  4322  00D926  6EC2               	movwf	4034,c	;volatile
  4323                           
  4324                           ;Lab8pE.c: 304: ADCON1= 0x0E;
  4325  00D928  0E0E               	movlw	14
  4326  00D92A  6EC1               	movwf	4033,c	;volatile
  4327                           
  4328                           ;Lab8pE.c: 305: ADCON2= 0xA9;
  4329  00D92C  0EA9               	movlw	169
  4330  00D92E  6EC0               	movwf	4032,c	;volatile
  4331  00D930  0012               	return		;funcret
  4332  00D932                     __end_of_Init_ADC:
  4333                           	opt stack 0
  4334                           tblptru	equ	0xFF8
  4335                           tblptrh	equ	0xFF7
  4336                           tblptrl	equ	0xFF6
  4337                           tablat	equ	0xFF5
  4338                           postinc0	equ	0xFEE
  4339                           wreg	equ	0xFE8
  4340                           postdec1	equ	0xFE5
  4341                           fsr1l	equ	0xFE1
  4342                           status	equ	0xFD8
  4343                           
  4344 ;; *************** function _Day_Mode *****************
  4345 ;; Defined at:
  4346 ;;		line 400 in file "Lab8pE.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;		None               void
  4353 ;; Registers used:
  4354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;Total ram usage:        0 bytes
  4365 ;; Hardware stack levels used:    1
  4366 ;; Hardware stack levels required when called:   10
  4367 ;; This function calls:
  4368 ;;		_PED_Control
  4369 ;;		_Set_EW
  4370 ;;		_Set_EW_LT
  4371 ;;		_Set_NS
  4372 ;;		_Set_NS_LT
  4373 ;;		_Wait_N_Seconds
  4374 ;; This function is called by:
  4375 ;;		_main
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text17
  4380  00E606                     __ptext17:
  4381                           	opt stack 0
  4382  00E606                     _Day_Mode:
  4383                           	opt stack 20
  4384                           
  4385                           ;Lab8pE.c: 402: MODE = 1;
  4386                           
  4387                           ;incstack = 0
  4388  00E606  0E00               	movlw	0
  4389  00E608  6E69               	movwf	_MODE+1,c
  4390  00E60A  0E01               	movlw	1
  4391  00E60C  6E68               	movwf	_MODE,c
  4392                           
  4393                           ;Lab8pE.c: 403: PORTBbits.RB7 = 1;
  4394  00E60E  8E81               	bsf	3969,7,c	;volatile
  4395                           
  4396                           ;Lab8pE.c: 404: Act_Mode_Txt[0] = 'D';
  4397  00E610  0E44               	movlw	68
  4398  00E612  6E55               	movwf	_Act_Mode_Txt,c
  4399                           
  4400                           ;Lab8pE.c: 406: Set_NS(2);
  4401  00E614  0E02               	movlw	2
  4402  00E616  EC65  F06E         	call	_Set_NS
  4403                           
  4404                           ;Lab8pE.c: 407: Set_NS_LT(1);
  4405  00E61A  0E01               	movlw	1
  4406  00E61C  EC87  F06E         	call	_Set_NS_LT
  4407                           
  4408                           ;Lab8pE.c: 408: Set_EW(1);
  4409  00E620  0E01               	movlw	1
  4410  00E622  EC21  F06E         	call	_Set_EW
  4411                           
  4412                           ;Lab8pE.c: 409: Set_EW_LT(1);
  4413  00E626  0E01               	movlw	1
  4414  00E628  EC43  F06E         	call	_Set_EW_LT
  4415                           
  4416                           ;Lab8pE.c: 410: if(PORTAbits.RA3 == 1)
  4417  00E62C  A680               	btfss	3968,3,c	;volatile
  4418  00E62E  D006               	goto	l3605
  4419                           
  4420                           ;Lab8pE.c: 411: {
  4421                           ;Lab8pE.c: 412: PED_Control(0,7);
  4422  00E630  0E07               	movlw	7
  4423  00E632  6E3D               	movwf	PED_Control@Num_Sec,c
  4424  00E634  0E00               	movlw	0
  4425  00E636  EC8B  F06D         	call	_PED_Control
  4426  00E63A  D000               	goto	l3605
  4427  00E63C                     l3605:
  4428                           
  4429                           ;Lab8pE.c: 413: }
  4430                           ;Lab8pE.c: 414: Set_NS(2);
  4431  00E63C  0E02               	movlw	2
  4432  00E63E  EC65  F06E         	call	_Set_NS
  4433                           
  4434                           ;Lab8pE.c: 415: Wait_N_Seconds(9);
  4435  00E642  0E09               	movlw	9
  4436  00E644  EC43  F06D         	call	_Wait_N_Seconds
  4437                           
  4438                           ;Lab8pE.c: 416: Set_NS(3);
  4439  00E648  0E03               	movlw	3
  4440  00E64A  EC65  F06E         	call	_Set_NS
  4441                           
  4442                           ;Lab8pE.c: 417: Wait_N_Seconds(3);
  4443  00E64E  0E03               	movlw	3
  4444  00E650  EC43  F06D         	call	_Wait_N_Seconds
  4445                           
  4446                           ;Lab8pE.c: 418: Set_NS(1);
  4447  00E654  0E01               	movlw	1
  4448  00E656  EC65  F06E         	call	_Set_NS
  4449                           
  4450                           ;Lab8pE.c: 419: if(PORTAbits.RA2 == 1)
  4451  00E65A  A480               	btfss	3968,2,c	;volatile
  4452  00E65C  D010               	goto	l3623
  4453                           
  4454                           ;Lab8pE.c: 420: {
  4455                           ;Lab8pE.c: 421: Set_EW_LT(2);
  4456  00E65E  0E02               	movlw	2
  4457  00E660  EC43  F06E         	call	_Set_EW_LT
  4458                           
  4459                           ;Lab8pE.c: 422: Wait_N_Seconds(6);
  4460  00E664  0E06               	movlw	6
  4461  00E666  EC43  F06D         	call	_Wait_N_Seconds
  4462                           
  4463                           ;Lab8pE.c: 424: Set_EW_LT(3);
  4464  00E66A  0E03               	movlw	3
  4465  00E66C  EC43  F06E         	call	_Set_EW_LT
  4466                           
  4467                           ;Lab8pE.c: 425: Wait_N_Seconds(3);
  4468  00E670  0E03               	movlw	3
  4469  00E672  EC43  F06D         	call	_Wait_N_Seconds
  4470                           
  4471                           ;Lab8pE.c: 427: Set_EW_LT(1);
  4472  00E676  0E01               	movlw	1
  4473  00E678  EC43  F06E         	call	_Set_EW_LT
  4474  00E67C  D000               	goto	l3623
  4475  00E67E                     l3623:
  4476                           
  4477                           ;Lab8pE.c: 428: }
  4478                           ;Lab8pE.c: 430: Set_EW(2);
  4479  00E67E  0E02               	movlw	2
  4480  00E680  EC21  F06E         	call	_Set_EW
  4481                           
  4482                           ;Lab8pE.c: 431: if(PORTAbits.RA4 == 1)
  4483  00E684  A880               	btfss	3968,4,c	;volatile
  4484  00E686  D005               	goto	l431
  4485                           
  4486                           ;Lab8pE.c: 432: {
  4487                           ;Lab8pE.c: 433: PED_Control(2,10);
  4488  00E688  0E0A               	movlw	10
  4489  00E68A  6E3D               	movwf	PED_Control@Num_Sec,c
  4490  00E68C  0E02               	movlw	2
  4491  00E68E  EC8B  F06D         	call	_PED_Control
  4492  00E692                     l431:
  4493                           
  4494                           ;Lab8pE.c: 434: }
  4495                           ;Lab8pE.c: 436: Wait_N_Seconds(7);
  4496  00E692  0E07               	movlw	7
  4497  00E694  EC43  F06D         	call	_Wait_N_Seconds
  4498                           
  4499                           ;Lab8pE.c: 438: Set_EW(3);
  4500  00E698  0E03               	movlw	3
  4501  00E69A  EC21  F06E         	call	_Set_EW
  4502                           
  4503                           ;Lab8pE.c: 439: Wait_N_Seconds(3);
  4504  00E69E  0E03               	movlw	3
  4505  00E6A0  EC43  F06D         	call	_Wait_N_Seconds
  4506                           
  4507                           ;Lab8pE.c: 441: Set_EW(1);
  4508  00E6A4  0E01               	movlw	1
  4509  00E6A6  EC21  F06E         	call	_Set_EW
  4510                           
  4511                           ;Lab8pE.c: 443: if(PORTAbits.RA1 == 1)
  4512  00E6AA  A280               	btfss	3968,1,c	;volatile
  4513  00E6AC  D010               	goto	l433
  4514                           
  4515                           ;Lab8pE.c: 444: {
  4516                           ;Lab8pE.c: 445: Set_NS_LT(2);
  4517  00E6AE  0E02               	movlw	2
  4518  00E6B0  EC87  F06E         	call	_Set_NS_LT
  4519                           
  4520                           ;Lab8pE.c: 446: Wait_N_Seconds(6);
  4521  00E6B4  0E06               	movlw	6
  4522  00E6B6  EC43  F06D         	call	_Wait_N_Seconds
  4523                           
  4524                           ;Lab8pE.c: 448: Set_NS_LT(3);
  4525  00E6BA  0E03               	movlw	3
  4526  00E6BC  EC87  F06E         	call	_Set_NS_LT
  4527                           
  4528                           ;Lab8pE.c: 449: Wait_N_Seconds(3);
  4529  00E6C0  0E03               	movlw	3
  4530  00E6C2  EC43  F06D         	call	_Wait_N_Seconds
  4531                           
  4532                           ;Lab8pE.c: 451: Set_NS_LT(1);
  4533  00E6C6  0E01               	movlw	1
  4534  00E6C8  EC87  F06E         	call	_Set_NS_LT
  4535  00E6CC  D000               	goto	l433
  4536  00E6CE                     l433:
  4537  00E6CE  0012               	return		;funcret
  4538  00E6D0                     __end_of_Day_Mode:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           postinc0	equ	0xFEE
  4545                           wreg	equ	0xFE8
  4546                           postdec1	equ	0xFE5
  4547                           fsr1l	equ	0xFE1
  4548                           status	equ	0xFD8
  4549                           
  4550 ;; *************** function _Wait_N_Seconds *****************
  4551 ;; Defined at:
  4552 ;;		line 542 in file "Lab8pE.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  seconds         1    wreg     unsigned char 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  seconds         1   60[COMRAM] unsigned char 
  4557 ;;  I               1   61[COMRAM] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;Total ram usage:        2 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    9
  4574 ;; This function calls:
  4575 ;;		_Wait_One_Second
  4576 ;;		_update_LCD_count
  4577 ;; This function is called by:
  4578 ;;		_Day_Mode
  4579 ;;		_Night_Mode
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text18
  4584  00DA86                     __ptext18:
  4585                           	opt stack 0
  4586  00DA86                     _Wait_N_Seconds:
  4587                           	opt stack 20
  4588                           
  4589                           ;incstack = 0
  4590                           ;Wait_N_Seconds@seconds stored from wreg
  4591  00DA86  6E3D               	movwf	Wait_N_Seconds@seconds,c
  4592                           
  4593                           ;Lab8pE.c: 544: char I;
  4594                           ;Lab8pE.c: 545: for (I = seconds; I> 0; I--)
  4595  00DA88  C03D  F03E         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4596  00DA8C                     l3457:
  4597  00DA8C  503E               	movf	Wait_N_Seconds@I,w,c
  4598  00DA8E  B4D8               	btfsc	status,2,c
  4599  00DA90  D00B               	goto	l3467
  4600  00DA92  D001               	goto	l3461
  4601  00DA94  D009               	goto	l3467
  4602  00DA96                     l3461:
  4603                           
  4604                           ;Lab8pE.c: 546: {
  4605                           ;Lab8pE.c: 547: update_LCD_count(direction, I);
  4606  00DA96  C03E  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4607  00DA9A  507A               	movf	_direction,w,c
  4608  00DA9C  ECFE  F076         	call	_update_LCD_count
  4609                           
  4610                           ;Lab8pE.c: 548: Wait_One_Second();
  4611  00DAA0  ECF3  F06F         	call	_Wait_One_Second	;wreg free
  4612  00DAA4  063E               	decf	Wait_N_Seconds@I,f,c
  4613  00DAA6  D7F2               	goto	l3457
  4614  00DAA8                     l3467:
  4615                           
  4616                           ;Lab8pE.c: 549: }
  4617                           ;Lab8pE.c: 550: update_LCD_count(direction, 0);
  4618  00DAA8  0E00               	movlw	0
  4619  00DAAA  6E3A               	movwf	update_LCD_count@count,c
  4620  00DAAC  507A               	movf	_direction,w,c
  4621  00DAAE  ECFE  F076         	call	_update_LCD_count
  4622  00DAB2  0012               	return		;funcret
  4623  00DAB4                     __end_of_Wait_N_Seconds:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           postinc0	equ	0xFEE
  4630                           wreg	equ	0xFE8
  4631                           postdec1	equ	0xFE5
  4632                           fsr1l	equ	0xFE1
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _update_LCD_count *****************
  4636 ;; Defined at:
  4637 ;;		line 600 in file "Lab8pE.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  direction       1    wreg     unsigned char 
  4640 ;;  count           1   57[COMRAM] unsigned char 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;  direction       1   58[COMRAM] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;		None               void
  4645 ;; Registers used:
  4646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4652 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;Total ram usage:        2 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    7
  4659 ;; This function calls:
  4660 ;;		___awdiv
  4661 ;;		___awmod
  4662 ;;		_drawtext
  4663 ;; This function is called by:
  4664 ;;		_Wait_N_Seconds
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text19
  4669  00EDFC                     __ptext19:
  4670                           	opt stack 0
  4671  00EDFC                     _update_LCD_count:
  4672                           	opt stack 21
  4673                           
  4674                           ;incstack = 0
  4675                           ;update_LCD_count@direction stored from wreg
  4676  00EDFC  6E3B               	movwf	update_LCD_count@direction,c
  4677                           
  4678                           ;Lab8pE.c: 602: switch (direction)
  4679  00EDFE  D0AE               	goto	l3331
  4680  00EE00                     l3313:
  4681                           
  4682                           ;Lab8pE.c: 605: NS_Count[0] = count/10 + '0';
  4683  00EE00  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4684  00EE04  6A02               	clrf	___awdiv@dividend+1,c
  4685  00EE06  0E00               	movlw	0
  4686  00EE08  6E04               	movwf	___awdiv@divisor+1,c
  4687  00EE0A  0E0A               	movlw	10
  4688  00EE0C  6E03               	movwf	___awdiv@divisor,c
  4689  00EE0E  EC4C  F071         	call	___awdiv	;wreg free
  4690  00EE12  5001               	movf	?___awdiv,w,c
  4691  00EE14  0F30               	addlw	48
  4692  00EE16  6E4C               	movwf	_NS_Count,c
  4693                           
  4694                           ;Lab8pE.c: 606: NS_Count[1] = count%10 + '0';
  4695  00EE18  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4696  00EE1C  6A02               	clrf	___awmod@dividend+1,c
  4697  00EE1E  0E00               	movlw	0
  4698  00EE20  6E04               	movwf	___awmod@divisor+1,c
  4699  00EE22  0E0A               	movlw	10
  4700  00EE24  6E03               	movwf	___awmod@divisor,c
  4701  00EE26  ECB2  F06F         	call	___awmod	;wreg free
  4702  00EE2A  5001               	movf	?___awmod,w,c
  4703  00EE2C  0F30               	addlw	48
  4704  00EE2E  6E4D               	movwf	_NS_Count+1,c
  4705                           
  4706                           ;Lab8pE.c: 607: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  4707  00EE30  0E1E               	movlw	30
  4708  00EE32  6E29               	movwf	drawtext@y,c
  4709  00EE34  0E4C               	movlw	low _NS_Count
  4710  00EE36  6E2A               	movwf	drawtext@_text,c
  4711  00EE38  0E00               	movlw	high _NS_Count
  4712  00EE3A  6E2B               	movwf	drawtext@_text+1,c
  4713  00EE3C  0E00               	movlw	0
  4714  00EE3E  6E2D               	movwf	drawtext@color+1,c
  4715  00EE40  0E1F               	movlw	31
  4716  00EE42  6E2C               	movwf	drawtext@color,c
  4717  00EE44  0E00               	movlw	0
  4718  00EE46  6E2F               	movwf	drawtext@bg+1,c
  4719  00EE48  0E00               	movlw	0
  4720  00EE4A  6E2E               	movwf	drawtext@bg,c
  4721  00EE4C  0E02               	movlw	2
  4722  00EE4E  6E30               	movwf	drawtext@size,c
  4723  00EE50  0E64               	movlw	100
  4724  00EE52  ECD6  F073         	call	_drawtext
  4725                           
  4726                           ;Lab8pE.c: 608: break;
  4727  00EE56  D090               	goto	l474
  4728  00EE58                     l3317:
  4729                           
  4730                           ;Lab8pE.c: 611: NSLT_Count[0] = count/10 + '0';
  4731  00EE58  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4732  00EE5C  6A02               	clrf	___awdiv@dividend+1,c
  4733  00EE5E  0E00               	movlw	0
  4734  00EE60  6E04               	movwf	___awdiv@divisor+1,c
  4735  00EE62  0E0A               	movlw	10
  4736  00EE64  6E03               	movwf	___awdiv@divisor,c
  4737  00EE66  EC4C  F071         	call	___awdiv	;wreg free
  4738  00EE6A  5001               	movf	?___awdiv,w,c
  4739  00EE6C  0F30               	addlw	48
  4740  00EE6E  6E49               	movwf	_NSLT_Count,c
  4741                           
  4742                           ;Lab8pE.c: 612: NSLT_Count[1] = count%10 + '0';
  4743  00EE70  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4744  00EE74  6A02               	clrf	___awmod@dividend+1,c
  4745  00EE76  0E00               	movlw	0
  4746  00EE78  6E04               	movwf	___awmod@divisor+1,c
  4747  00EE7A  0E0A               	movlw	10
  4748  00EE7C  6E03               	movwf	___awmod@divisor,c
  4749  00EE7E  ECB2  F06F         	call	___awmod	;wreg free
  4750  00EE82  5001               	movf	?___awmod,w,c
  4751  00EE84  0F30               	addlw	48
  4752  00EE86  6E4A               	movwf	_NSLT_Count+1,c
  4753                           
  4754                           ;Lab8pE.c: 613: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  4755  00EE88  0E3C               	movlw	60
  4756  00EE8A  6E29               	movwf	drawtext@y,c
  4757  00EE8C  0E49               	movlw	low _NSLT_Count
  4758  00EE8E  6E2A               	movwf	drawtext@_text,c
  4759  00EE90  0E00               	movlw	high _NSLT_Count
  4760  00EE92  6E2B               	movwf	drawtext@_text+1,c
  4761  00EE94  0EF8               	movlw	248
  4762  00EE96  6E2D               	movwf	drawtext@color+1,c
  4763  00EE98  0E1F               	movlw	31
  4764  00EE9A  6E2C               	movwf	drawtext@color,c
  4765  00EE9C  0E00               	movlw	0
  4766  00EE9E  6E2F               	movwf	drawtext@bg+1,c
  4767  00EEA0  0E00               	movlw	0
  4768  00EEA2  6E2E               	movwf	drawtext@bg,c
  4769  00EEA4  0E02               	movlw	2
  4770  00EEA6  6E30               	movwf	drawtext@size,c
  4771  00EEA8  0E64               	movlw	100
  4772  00EEAA  ECD6  F073         	call	_drawtext
  4773                           
  4774                           ;Lab8pE.c: 614: break;
  4775  00EEAE  D064               	goto	l474
  4776  00EEB0                     l3321:
  4777                           
  4778                           ;Lab8pE.c: 617: EW_Count[0] = count/10 + '0';
  4779  00EEB0  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4780  00EEB4  6A02               	clrf	___awdiv@dividend+1,c
  4781  00EEB6  0E00               	movlw	0
  4782  00EEB8  6E04               	movwf	___awdiv@divisor+1,c
  4783  00EEBA  0E0A               	movlw	10
  4784  00EEBC  6E03               	movwf	___awdiv@divisor,c
  4785  00EEBE  EC4C  F071         	call	___awdiv	;wreg free
  4786  00EEC2  5001               	movf	?___awdiv,w,c
  4787  00EEC4  0F30               	addlw	48
  4788  00EEC6  6E46               	movwf	_EW_Count,c
  4789                           
  4790                           ;Lab8pE.c: 618: EW_Count[1] = count%10 + '0';
  4791  00EEC8  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4792  00EECC  6A02               	clrf	___awmod@dividend+1,c
  4793  00EECE  0E00               	movlw	0
  4794  00EED0  6E04               	movwf	___awmod@divisor+1,c
  4795  00EED2  0E0A               	movlw	10
  4796  00EED4  6E03               	movwf	___awmod@divisor,c
  4797  00EED6  ECB2  F06F         	call	___awmod	;wreg free
  4798  00EEDA  5001               	movf	?___awmod,w,c
  4799  00EEDC  0F30               	addlw	48
  4800  00EEDE  6E47               	movwf	_EW_Count+1,c
  4801                           
  4802                           ;Lab8pE.c: 619: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  4803  00EEE0  0E5A               	movlw	90
  4804  00EEE2  6E29               	movwf	drawtext@y,c
  4805  00EEE4  0E46               	movlw	low _EW_Count
  4806  00EEE6  6E2A               	movwf	drawtext@_text,c
  4807  00EEE8  0E00               	movlw	high _EW_Count
  4808  00EEEA  6E2B               	movwf	drawtext@_text+1,c
  4809  00EEEC  0E07               	movlw	7
  4810  00EEEE  6E2D               	movwf	drawtext@color+1,c
  4811  00EEF0  682C               	setf	drawtext@color,c
  4812  00EEF2  0E00               	movlw	0
  4813  00EEF4  6E2F               	movwf	drawtext@bg+1,c
  4814  00EEF6  0E00               	movlw	0
  4815  00EEF8  6E2E               	movwf	drawtext@bg,c
  4816  00EEFA  0E02               	movlw	2
  4817  00EEFC  6E30               	movwf	drawtext@size,c
  4818  00EEFE  0E64               	movlw	100
  4819  00EF00  ECD6  F073         	call	_drawtext
  4820                           
  4821                           ;Lab8pE.c: 620: break;
  4822  00EF04  D039               	goto	l474
  4823  00EF06                     l3325:
  4824                           
  4825                           ;Lab8pE.c: 623: EWLT_Count[0] = count/10 + '0';
  4826  00EF06  C03A  F001         	movff	update_LCD_count@count,___awdiv@dividend
  4827  00EF0A  6A02               	clrf	___awdiv@dividend+1,c
  4828  00EF0C  0E00               	movlw	0
  4829  00EF0E  6E04               	movwf	___awdiv@divisor+1,c
  4830  00EF10  0E0A               	movlw	10
  4831  00EF12  6E03               	movwf	___awdiv@divisor,c
  4832  00EF14  EC4C  F071         	call	___awdiv	;wreg free
  4833  00EF18  5001               	movf	?___awdiv,w,c
  4834  00EF1A  0F30               	addlw	48
  4835  00EF1C  6E43               	movwf	_EWLT_Count,c
  4836                           
  4837                           ;Lab8pE.c: 624: EWLT_Count[1] = count%10 + '0';
  4838  00EF1E  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  4839  00EF22  6A02               	clrf	___awmod@dividend+1,c
  4840  00EF24  0E00               	movlw	0
  4841  00EF26  6E04               	movwf	___awmod@divisor+1,c
  4842  00EF28  0E0A               	movlw	10
  4843  00EF2A  6E03               	movwf	___awmod@divisor,c
  4844  00EF2C  ECB2  F06F         	call	___awmod	;wreg free
  4845  00EF30  5001               	movf	?___awmod,w,c
  4846  00EF32  0F30               	addlw	48
  4847  00EF34  6E44               	movwf	_EWLT_Count+1,c
  4848                           
  4849                           ;Lab8pE.c: 625: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  4850  00EF36  0E78               	movlw	120
  4851  00EF38  6E29               	movwf	drawtext@y,c
  4852  00EF3A  0E43               	movlw	low _EWLT_Count
  4853  00EF3C  6E2A               	movwf	drawtext@_text,c
  4854  00EF3E  0E00               	movlw	high _EWLT_Count
  4855  00EF40  6E2B               	movwf	drawtext@_text+1,c
  4856  00EF42  0EFF               	movlw	255
  4857  00EF44  6E2D               	movwf	drawtext@color+1,c
  4858  00EF46  682C               	setf	drawtext@color,c
  4859  00EF48  0E00               	movlw	0
  4860  00EF4A  6E2F               	movwf	drawtext@bg+1,c
  4861  00EF4C  0E00               	movlw	0
  4862  00EF4E  6E2E               	movwf	drawtext@bg,c
  4863  00EF50  0E02               	movlw	2
  4864  00EF52  6E30               	movwf	drawtext@size,c
  4865  00EF54  0E64               	movlw	100
  4866  00EF56  ECD6  F073         	call	_drawtext
  4867                           
  4868                           ;Lab8pE.c: 627: }
  4869                           
  4870                           ;Lab8pE.c: 626: break;
  4871  00EF5A  D00E               	goto	l474
  4872  00EF5C                     l3331:
  4873  00EF5C  503B               	movf	update_LCD_count@direction,w,c
  4874                           
  4875                           ; Switch size 1, requested type "space"
  4876                           ; Number of cases is 4, Range of values is 0 to 3
  4877                           ; switch strategies available:
  4878                           ; Name         Instructions Cycles
  4879                           ; simple_byte           13     7 (average)
  4880                           ;	Chosen strategy is simple_byte
  4881  00EF5E  0A00               	xorlw	0	; case 0
  4882  00EF60  B4D8               	btfsc	status,2,c
  4883  00EF62  D74E               	goto	l3313
  4884  00EF64  0A01               	xorlw	1	; case 1
  4885  00EF66  B4D8               	btfsc	status,2,c
  4886  00EF68  D777               	goto	l3317
  4887  00EF6A  0A03               	xorlw	3	; case 2
  4888  00EF6C  B4D8               	btfsc	status,2,c
  4889  00EF6E  D7A0               	goto	l3321
  4890  00EF70  0A01               	xorlw	1	; case 3
  4891  00EF72  B4D8               	btfsc	status,2,c
  4892  00EF74  D7C8               	goto	l3325
  4893  00EF76  D000               	goto	l474
  4894  00EF78                     l474:
  4895  00EF78  0012               	return		;funcret
  4896  00EF7A                     __end_of_update_LCD_count:
  4897                           	opt stack 0
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           postinc0	equ	0xFEE
  4903                           wreg	equ	0xFE8
  4904                           postdec1	equ	0xFE5
  4905                           fsr1l	equ	0xFE1
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _Wait_One_Second *****************
  4909 ;; Defined at:
  4910 ;;		line 501 in file "Lab8pE.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;		None               void
  4917 ;; Registers used:
  4918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;Total ram usage:        0 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    8
  4931 ;; This function calls:
  4932 ;;		_Wait_Half_Second
  4933 ;;		_drawtext
  4934 ;;		_strcpy
  4935 ;;		_update_LCD_misc
  4936 ;; This function is called by:
  4937 ;;		_Wait_N_Seconds
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text20
  4942  00DFE6                     __ptext20:
  4943                           	opt stack 0
  4944  00DFE6                     _Wait_One_Second:
  4945                           	opt stack 20
  4946                           
  4947                           ;Lab8pE.c: 503: PORTDbits.RD7 = 1;
  4948                           
  4949                           ;incstack = 0
  4950  00DFE6  8E83               	bsf	3971,7,c	;volatile
  4951                           
  4952                           ;Lab8pE.c: 504: strcpy(txt,"*");
  4953  00DFE8  C06C  F001         	movff	_txt,strcpy@to
  4954  00DFEC  C06D  F002         	movff	_txt+1,strcpy@to+1
  4955  00DFF0  0EFD               	movlw	low STR_5
  4956  00DFF2  6E03               	movwf	strcpy@from,c
  4957  00DFF4  0EFF               	movlw	high STR_5
  4958  00DFF6  6E04               	movwf	strcpy@from+1,c
  4959  00DFF8  EC72  F06D         	call	_strcpy	;wreg free
  4960                           
  4961                           ;Lab8pE.c: 505: drawtext(120,10,txt,0xFFFF,0x0000,1);
  4962  00DFFC  0E0A               	movlw	10
  4963  00DFFE  6E29               	movwf	drawtext@y,c
  4964  00E000  C06C  F02A         	movff	_txt,drawtext@_text
  4965  00E004  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  4966  00E008  0EFF               	movlw	255
  4967  00E00A  6E2D               	movwf	drawtext@color+1,c
  4968  00E00C  682C               	setf	drawtext@color,c
  4969  00E00E  0E00               	movlw	0
  4970  00E010  6E2F               	movwf	drawtext@bg+1,c
  4971  00E012  0E00               	movlw	0
  4972  00E014  6E2E               	movwf	drawtext@bg,c
  4973  00E016  0E01               	movlw	1
  4974  00E018  6E30               	movwf	drawtext@size,c
  4975  00E01A  0E78               	movlw	120
  4976  00E01C  ECD6  F073         	call	_drawtext
  4977                           
  4978                           ;Lab8pE.c: 506: Wait_Half_Second();
  4979  00E020  ECDA  F06C         	call	_Wait_Half_Second	;wreg free
  4980                           
  4981                           ;Lab8pE.c: 508: PORTDbits.RD7 = 0;
  4982  00E024  9E83               	bcf	3971,7,c	;volatile
  4983                           
  4984                           ;Lab8pE.c: 509: strcpy(txt," ");
  4985  00E026  C06C  F001         	movff	_txt,strcpy@to
  4986  00E02A  C06D  F002         	movff	_txt+1,strcpy@to+1
  4987  00E02E  0EFB               	movlw	low STR_14
  4988  00E030  6E03               	movwf	strcpy@from,c
  4989  00E032  0EFF               	movlw	high STR_14
  4990  00E034  6E04               	movwf	strcpy@from+1,c
  4991  00E036  EC72  F06D         	call	_strcpy	;wreg free
  4992                           
  4993                           ;Lab8pE.c: 510: drawtext(120,10,txt,0xFFFF,0x0000,1);
  4994  00E03A  0E0A               	movlw	10
  4995  00E03C  6E29               	movwf	drawtext@y,c
  4996  00E03E  C06C  F02A         	movff	_txt,drawtext@_text
  4997  00E042  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  4998  00E046  0EFF               	movlw	255
  4999  00E048  6E2D               	movwf	drawtext@color+1,c
  5000  00E04A  682C               	setf	drawtext@color,c
  5001  00E04C  0E00               	movlw	0
  5002  00E04E  6E2F               	movwf	drawtext@bg+1,c
  5003  00E050  0E00               	movlw	0
  5004  00E052  6E2E               	movwf	drawtext@bg,c
  5005  00E054  0E01               	movlw	1
  5006  00E056  6E30               	movwf	drawtext@size,c
  5007  00E058  0E78               	movlw	120
  5008  00E05A  ECD6  F073         	call	_drawtext
  5009                           
  5010                           ;Lab8pE.c: 511: Wait_Half_Second();
  5011  00E05E  ECDA  F06C         	call	_Wait_Half_Second	;wreg free
  5012                           
  5013                           ;Lab8pE.c: 512: update_LCD_misc();
  5014  00E062  EC94  F078         	call	_update_LCD_misc	;wreg free
  5015  00E066  0012               	return		;funcret
  5016  00E068                     __end_of_Wait_One_Second:
  5017                           	opt stack 0
  5018                           tblptru	equ	0xFF8
  5019                           tblptrh	equ	0xFF7
  5020                           tblptrl	equ	0xFF6
  5021                           tablat	equ	0xFF5
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1l	equ	0xFE1
  5026                           status	equ	0xFD8
  5027                           
  5028 ;; *************** function _Set_NS_LT *****************
  5029 ;; Defined at:
  5030 ;;		line 332 in file "Lab8pE.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  color           1    wreg     unsigned char 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;  color           1   53[COMRAM] unsigned char 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;		None               void
  5037 ;; Registers used:
  5038 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;Total ram usage:        1 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    7
  5051 ;; This function calls:
  5052 ;;		_update_LCD_color
  5053 ;; This function is called by:
  5054 ;;		_Day_Mode
  5055 ;;		_Night_Mode
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text21
  5060  00DD0E                     __ptext21:
  5061                           	opt stack 0
  5062  00DD0E                     _Set_NS_LT:
  5063                           	opt stack 22
  5064                           
  5065                           ;incstack = 0
  5066                           ;Set_NS_LT@color stored from wreg
  5067  00DD0E  6E36               	movwf	Set_NS_LT@color,c
  5068                           
  5069                           ;Lab8pE.c: 334: direction = 1;
  5070  00DD10  0E01               	movlw	1
  5071  00DD12  6E7A               	movwf	_direction,c
  5072                           
  5073                           ;Lab8pE.c: 335: update_LCD_color(direction, color);
  5074  00DD14  C036  F033         	movff	Set_NS_LT@color,update_LCD_color@color
  5075  00DD18  507A               	movf	_direction,w,c
  5076  00DD1A  EC9D  F079         	call	_update_LCD_color
  5077                           
  5078                           ;Lab8pE.c: 337: switch(color)
  5079  00DD1E  D00A               	goto	l3423
  5080  00DD20                     l392:
  5081  00DD20  9281               	bcf	3969,1,c	;volatile
  5082  00DD22  D001               	goto	L1
  5083  00DD24                     l394:
  5084  00DD24  8281               	bsf	3969,1,c	;volatile
  5085  00DD26                     L1:
  5086  00DD26  9481               	bcf	3969,2,c	;volatile
  5087  00DD28  D013               	goto	l397
  5088  00DD2A                     l395:
  5089  00DD2A  9281               	bcf	3969,1,c	;volatile
  5090  00DD2C  D001               	goto	L2
  5091  00DD2E                     l396:
  5092  00DD2E  8281               	bsf	3969,1,c	;volatile
  5093  00DD30                     L2:
  5094  00DD30  8481               	bsf	3969,2,c	;volatile
  5095                           
  5096                           ;Lab8pE.c: 343: }
  5097  00DD32  D00E               	goto	l397
  5098  00DD34                     l3423:
  5099  00DD34  5036               	movf	Set_NS_LT@color,w,c
  5100                           
  5101                           ; Switch size 1, requested type "space"
  5102                           ; Number of cases is 4, Range of values is 0 to 3
  5103                           ; switch strategies available:
  5104                           ; Name         Instructions Cycles
  5105                           ; simple_byte           13     7 (average)
  5106                           ;	Chosen strategy is simple_byte
  5107  00DD36  0A00               	xorlw	0	; case 0
  5108  00DD38  B4D8               	btfsc	status,2,c
  5109  00DD3A  D7F2               	goto	l392
  5110  00DD3C  0A01               	xorlw	1	; case 1
  5111  00DD3E  B4D8               	btfsc	status,2,c
  5112  00DD40  D7F1               	goto	l394
  5113  00DD42  0A03               	xorlw	3	; case 2
  5114  00DD44  B4D8               	btfsc	status,2,c
  5115  00DD46  D7F1               	goto	l395
  5116  00DD48  0A01               	xorlw	1	; case 3
  5117  00DD4A  B4D8               	btfsc	status,2,c
  5118  00DD4C  D7F0               	goto	l396
  5119  00DD4E  D000               	goto	l397
  5120  00DD50                     l397:
  5121  00DD50  0012               	return		;funcret
  5122  00DD52                     __end_of_Set_NS_LT:
  5123                           	opt stack 0
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           postinc0	equ	0xFEE
  5129                           wreg	equ	0xFE8
  5130                           postdec1	equ	0xFE5
  5131                           fsr1l	equ	0xFE1
  5132                           status	equ	0xFD8
  5133                           
  5134 ;; *************** function _Set_NS *****************
  5135 ;; Defined at:
  5136 ;;		line 318 in file "Lab8pE.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  color           1    wreg     unsigned char 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  color           1   53[COMRAM] unsigned char 
  5141 ;; Return value:  Size  Location     Type
  5142 ;;		None               void
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;Total ram usage:        1 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    7
  5157 ;; This function calls:
  5158 ;;		_update_LCD_color
  5159 ;; This function is called by:
  5160 ;;		_Day_Mode
  5161 ;;		_Night_Mode
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text22
  5166  00DCCA                     __ptext22:
  5167                           	opt stack 0
  5168  00DCCA                     _Set_NS:
  5169                           	opt stack 22
  5170                           
  5171                           ;incstack = 0
  5172                           ;Set_NS@color stored from wreg
  5173  00DCCA  6E36               	movwf	Set_NS@color,c
  5174                           
  5175                           ;Lab8pE.c: 320: direction = 0;
  5176  00DCCC  0E00               	movlw	0
  5177  00DCCE  6E7A               	movwf	_direction,c
  5178                           
  5179                           ;Lab8pE.c: 321: update_LCD_color(direction, color);
  5180  00DCD0  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  5181  00DCD4  507A               	movf	_direction,w,c
  5182  00DCD6  EC9D  F079         	call	_update_LCD_color
  5183                           
  5184                           ;Lab8pE.c: 323: switch (color)
  5185  00DCDA  D00A               	goto	l3415
  5186  00DCDC                     l383:
  5187  00DCDC  9A80               	bcf	3968,5,c	;volatile
  5188  00DCDE  D001               	goto	L3
  5189  00DCE0                     l385:
  5190  00DCE0  8A80               	bsf	3968,5,c	;volatile
  5191  00DCE2                     L3:
  5192  00DCE2  9081               	bcf	3969,0,c	;volatile
  5193  00DCE4  D013               	goto	l388
  5194  00DCE6                     l386:
  5195  00DCE6  9A80               	bcf	3968,5,c	;volatile
  5196  00DCE8  D001               	goto	L4
  5197  00DCEA                     l387:
  5198  00DCEA  8A80               	bsf	3968,5,c	;volatile
  5199  00DCEC                     L4:
  5200  00DCEC  8081               	bsf	3969,0,c	;volatile
  5201                           
  5202                           ;Lab8pE.c: 329: }
  5203  00DCEE  D00E               	goto	l388
  5204  00DCF0                     l3415:
  5205  00DCF0  5036               	movf	Set_NS@color,w,c
  5206                           
  5207                           ; Switch size 1, requested type "space"
  5208                           ; Number of cases is 4, Range of values is 0 to 3
  5209                           ; switch strategies available:
  5210                           ; Name         Instructions Cycles
  5211                           ; simple_byte           13     7 (average)
  5212                           ;	Chosen strategy is simple_byte
  5213  00DCF2  0A00               	xorlw	0	; case 0
  5214  00DCF4  B4D8               	btfsc	status,2,c
  5215  00DCF6  D7F2               	goto	l383
  5216  00DCF8  0A01               	xorlw	1	; case 1
  5217  00DCFA  B4D8               	btfsc	status,2,c
  5218  00DCFC  D7F1               	goto	l385
  5219  00DCFE  0A03               	xorlw	3	; case 2
  5220  00DD00  B4D8               	btfsc	status,2,c
  5221  00DD02  D7F1               	goto	l386
  5222  00DD04  0A01               	xorlw	1	; case 3
  5223  00DD06  B4D8               	btfsc	status,2,c
  5224  00DD08  D7F0               	goto	l387
  5225  00DD0A  D000               	goto	l388
  5226  00DD0C                     l388:
  5227  00DD0C  0012               	return		;funcret
  5228  00DD0E                     __end_of_Set_NS:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           postinc0	equ	0xFEE
  5235                           wreg	equ	0xFE8
  5236                           postdec1	equ	0xFE5
  5237                           fsr1l	equ	0xFE1
  5238                           status	equ	0xFD8
  5239                           
  5240 ;; *************** function _Set_EW_LT *****************
  5241 ;; Defined at:
  5242 ;;		line 360 in file "Lab8pE.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  color           1    wreg     unsigned char 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  color           1   53[COMRAM] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;Total ram usage:        1 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    7
  5263 ;; This function calls:
  5264 ;;		_update_LCD_color
  5265 ;; This function is called by:
  5266 ;;		_Day_Mode
  5267 ;;		_Night_Mode
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text23
  5272  00DC86                     __ptext23:
  5273                           	opt stack 0
  5274  00DC86                     _Set_EW_LT:
  5275                           	opt stack 22
  5276                           
  5277                           ;incstack = 0
  5278                           ;Set_EW_LT@color stored from wreg
  5279  00DC86  6E36               	movwf	Set_EW_LT@color,c
  5280                           
  5281                           ;Lab8pE.c: 362: direction = 3;
  5282  00DC88  0E03               	movlw	3
  5283  00DC8A  6E7A               	movwf	_direction,c
  5284                           
  5285                           ;Lab8pE.c: 363: update_LCD_color(direction, color);
  5286  00DC8C  C036  F033         	movff	Set_EW_LT@color,update_LCD_color@color
  5287  00DC90  507A               	movf	_direction,w,c
  5288  00DC92  EC9D  F079         	call	_update_LCD_color
  5289                           
  5290                           ;Lab8pE.c: 365: switch(color)
  5291  00DC96  D00A               	goto	l3439
  5292  00DC98                     l410:
  5293  00DC98  9284               	bcf	3972,1,c	;volatile
  5294  00DC9A  D001               	goto	L5
  5295  00DC9C                     l412:
  5296  00DC9C  8284               	bsf	3972,1,c	;volatile
  5297  00DC9E                     L5:
  5298  00DC9E  9484               	bcf	3972,2,c	;volatile
  5299  00DCA0  D013               	goto	l415
  5300  00DCA2                     l413:
  5301  00DCA2  9284               	bcf	3972,1,c	;volatile
  5302  00DCA4  D001               	goto	L6
  5303  00DCA6                     l414:
  5304  00DCA6  8284               	bsf	3972,1,c	;volatile
  5305  00DCA8                     L6:
  5306  00DCA8  8484               	bsf	3972,2,c	;volatile
  5307                           
  5308                           ;Lab8pE.c: 371: }
  5309  00DCAA  D00E               	goto	l415
  5310  00DCAC                     l3439:
  5311  00DCAC  5036               	movf	Set_EW_LT@color,w,c
  5312                           
  5313                           ; Switch size 1, requested type "space"
  5314                           ; Number of cases is 4, Range of values is 0 to 3
  5315                           ; switch strategies available:
  5316                           ; Name         Instructions Cycles
  5317                           ; simple_byte           13     7 (average)
  5318                           ;	Chosen strategy is simple_byte
  5319  00DCAE  0A00               	xorlw	0	; case 0
  5320  00DCB0  B4D8               	btfsc	status,2,c
  5321  00DCB2  D7F2               	goto	l410
  5322  00DCB4  0A01               	xorlw	1	; case 1
  5323  00DCB6  B4D8               	btfsc	status,2,c
  5324  00DCB8  D7F1               	goto	l412
  5325  00DCBA  0A03               	xorlw	3	; case 2
  5326  00DCBC  B4D8               	btfsc	status,2,c
  5327  00DCBE  D7F1               	goto	l413
  5328  00DCC0  0A01               	xorlw	1	; case 3
  5329  00DCC2  B4D8               	btfsc	status,2,c
  5330  00DCC4  D7F0               	goto	l414
  5331  00DCC6  D000               	goto	l415
  5332  00DCC8                     l415:
  5333  00DCC8  0012               	return		;funcret
  5334  00DCCA                     __end_of_Set_EW_LT:
  5335                           	opt stack 0
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           postinc0	equ	0xFEE
  5341                           wreg	equ	0xFE8
  5342                           postdec1	equ	0xFE5
  5343                           fsr1l	equ	0xFE1
  5344                           status	equ	0xFD8
  5345                           
  5346 ;; *************** function _Set_EW *****************
  5347 ;; Defined at:
  5348 ;;		line 346 in file "Lab8pE.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  color           1    wreg     unsigned char 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  color           1   53[COMRAM] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;		None               void
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;Total ram usage:        1 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    7
  5369 ;; This function calls:
  5370 ;;		_update_LCD_color
  5371 ;; This function is called by:
  5372 ;;		_Day_Mode
  5373 ;;		_Night_Mode
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text24
  5378  00DC42                     __ptext24:
  5379                           	opt stack 0
  5380  00DC42                     _Set_EW:
  5381                           	opt stack 22
  5382                           
  5383                           ;incstack = 0
  5384                           ;Set_EW@color stored from wreg
  5385  00DC42  6E36               	movwf	Set_EW@color,c
  5386                           
  5387                           ;Lab8pE.c: 348: direction = 2;
  5388  00DC44  0E02               	movlw	2
  5389  00DC46  6E7A               	movwf	_direction,c
  5390                           
  5391                           ;Lab8pE.c: 349: update_LCD_color(direction, color);
  5392  00DC48  C036  F033         	movff	Set_EW@color,update_LCD_color@color
  5393  00DC4C  507A               	movf	_direction,w,c
  5394  00DC4E  EC9D  F079         	call	_update_LCD_color
  5395                           
  5396                           ;Lab8pE.c: 351: switch(color)
  5397  00DC52  D00A               	goto	l3431
  5398  00DC54                     l401:
  5399  00DC54  9881               	bcf	3969,4,c	;volatile
  5400  00DC56  D001               	goto	L7
  5401  00DC58                     l403:
  5402  00DC58  8881               	bsf	3969,4,c	;volatile
  5403  00DC5A                     L7:
  5404  00DC5A  9A81               	bcf	3969,5,c	;volatile
  5405  00DC5C  D013               	goto	l406
  5406  00DC5E                     l404:
  5407  00DC5E  9881               	bcf	3969,4,c	;volatile
  5408  00DC60  D001               	goto	L8
  5409  00DC62                     l405:
  5410  00DC62  8881               	bsf	3969,4,c	;volatile
  5411  00DC64                     L8:
  5412  00DC64  8A81               	bsf	3969,5,c	;volatile
  5413                           
  5414                           ;Lab8pE.c: 357: }
  5415  00DC66  D00E               	goto	l406
  5416  00DC68                     l3431:
  5417  00DC68  5036               	movf	Set_EW@color,w,c
  5418                           
  5419                           ; Switch size 1, requested type "space"
  5420                           ; Number of cases is 4, Range of values is 0 to 3
  5421                           ; switch strategies available:
  5422                           ; Name         Instructions Cycles
  5423                           ; simple_byte           13     7 (average)
  5424                           ;	Chosen strategy is simple_byte
  5425  00DC6A  0A00               	xorlw	0	; case 0
  5426  00DC6C  B4D8               	btfsc	status,2,c
  5427  00DC6E  D7F2               	goto	l401
  5428  00DC70  0A01               	xorlw	1	; case 1
  5429  00DC72  B4D8               	btfsc	status,2,c
  5430  00DC74  D7F1               	goto	l403
  5431  00DC76  0A03               	xorlw	3	; case 2
  5432  00DC78  B4D8               	btfsc	status,2,c
  5433  00DC7A  D7F1               	goto	l404
  5434  00DC7C  0A01               	xorlw	1	; case 3
  5435  00DC7E  B4D8               	btfsc	status,2,c
  5436  00DC80  D7F0               	goto	l405
  5437  00DC82  D000               	goto	l406
  5438  00DC84                     l406:
  5439  00DC84  0012               	return		;funcret
  5440  00DC86                     __end_of_Set_EW:
  5441                           	opt stack 0
  5442                           tblptru	equ	0xFF8
  5443                           tblptrh	equ	0xFF7
  5444                           tblptrl	equ	0xFF6
  5445                           tablat	equ	0xFF5
  5446                           postinc0	equ	0xFEE
  5447                           wreg	equ	0xFE8
  5448                           postdec1	equ	0xFE5
  5449                           fsr1l	equ	0xFE1
  5450                           status	equ	0xFD8
  5451                           
  5452 ;; *************** function _update_LCD_color *****************
  5453 ;; Defined at:
  5454 ;;		line 553 in file "Lab8pE.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  direction       1    wreg     unsigned char 
  5457 ;;  color           1   50[COMRAM] unsigned char 
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  direction       1   51[COMRAM] unsigned char 
  5460 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;		None               void
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5470 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;Total ram usage:        3 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    6
  5477 ;; This function calls:
  5478 ;;		_drawCircle
  5479 ;;		_fillCircle
  5480 ;; This function is called by:
  5481 ;;		_Set_NS
  5482 ;;		_Set_NS_LT
  5483 ;;		_Set_EW
  5484 ;;		_Set_EW_LT
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text25
  5489  00F33A                     __ptext25:
  5490                           	opt stack 0
  5491  00F33A                     _update_LCD_color:
  5492                           	opt stack 22
  5493                           
  5494                           ;incstack = 0
  5495                           ;update_LCD_color@direction stored from wreg
  5496  00F33A  6E34               	movwf	update_LCD_color@direction,c
  5497                           
  5498                           ;Lab8pE.c: 555: char Circle_Y;
  5499                           ;Lab8pE.c: 556: Circle_Y = 20 + 15 + direction * 30;
  5500  00F33C  5034               	movf	update_LCD_color@direction,w,c
  5501  00F33E  0D1E               	mullw	30
  5502  00F340  50F3               	movf	prodl,w,c
  5503  00F342  0F23               	addlw	35
  5504  00F344  6E35               	movwf	update_LCD_color@Circle_Y,c
  5505                           
  5506                           ;Lab8pE.c: 558: if (color == 0)
  5507  00F346  5033               	movf	update_LCD_color@color,w,c
  5508  00F348  A4D8               	btfss	status,2,c
  5509  00F34A  D067               	goto	l3251
  5510                           
  5511                           ;Lab8pE.c: 559: {
  5512                           ;Lab8pE.c: 560: fillCircle(40, Circle_Y, 7, 0x0000);
  5513  00F34C  0E00               	movlw	0
  5514  00F34E  6E2C               	movwf	fillCircle@x0+1,c
  5515  00F350  0E28               	movlw	40
  5516  00F352  6E2B               	movwf	fillCircle@x0,c
  5517  00F354  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5518  00F358  6A2E               	clrf	fillCircle@y0+1,c
  5519  00F35A  0E00               	movlw	0
  5520  00F35C  6E30               	movwf	fillCircle@r+1,c
  5521  00F35E  0E07               	movlw	7
  5522  00F360  6E2F               	movwf	fillCircle@r,c
  5523  00F362  0E00               	movlw	0
  5524  00F364  6E32               	movwf	fillCircle@color+1,c
  5525  00F366  0E00               	movlw	0
  5526  00F368  6E31               	movwf	fillCircle@color,c
  5527  00F36A  ECF5  F06E         	call	_fillCircle	;wreg free
  5528                           
  5529                           ;Lab8pE.c: 561: fillCircle(60, Circle_Y, 7, 0x0000);
  5530  00F36E  0E00               	movlw	0
  5531  00F370  6E2C               	movwf	fillCircle@x0+1,c
  5532  00F372  0E3C               	movlw	60
  5533  00F374  6E2B               	movwf	fillCircle@x0,c
  5534  00F376  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5535  00F37A  6A2E               	clrf	fillCircle@y0+1,c
  5536  00F37C  0E00               	movlw	0
  5537  00F37E  6E30               	movwf	fillCircle@r+1,c
  5538  00F380  0E07               	movlw	7
  5539  00F382  6E2F               	movwf	fillCircle@r,c
  5540  00F384  0E00               	movlw	0
  5541  00F386  6E32               	movwf	fillCircle@color+1,c
  5542  00F388  0E00               	movlw	0
  5543  00F38A  6E31               	movwf	fillCircle@color,c
  5544  00F38C  ECF5  F06E         	call	_fillCircle	;wreg free
  5545                           
  5546                           ;Lab8pE.c: 562: fillCircle(80, Circle_Y, 7, 0x0000);
  5547  00F390  0E00               	movlw	0
  5548  00F392  6E2C               	movwf	fillCircle@x0+1,c
  5549  00F394  0E50               	movlw	80
  5550  00F396  6E2B               	movwf	fillCircle@x0,c
  5551  00F398  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5552  00F39C  6A2E               	clrf	fillCircle@y0+1,c
  5553  00F39E  0E00               	movlw	0
  5554  00F3A0  6E30               	movwf	fillCircle@r+1,c
  5555  00F3A2  0E07               	movlw	7
  5556  00F3A4  6E2F               	movwf	fillCircle@r,c
  5557  00F3A6  0E00               	movlw	0
  5558  00F3A8  6E32               	movwf	fillCircle@color+1,c
  5559  00F3AA  0E00               	movlw	0
  5560  00F3AC  6E31               	movwf	fillCircle@color,c
  5561  00F3AE  ECF5  F06E         	call	_fillCircle	;wreg free
  5562                           
  5563                           ;Lab8pE.c: 563: drawCircle(40, Circle_Y, 7, 0xF800);
  5564  00F3B2  0E00               	movlw	0
  5565  00F3B4  6E0D               	movwf	drawCircle@x0+1,c
  5566  00F3B6  0E28               	movlw	40
  5567  00F3B8  6E0C               	movwf	drawCircle@x0,c
  5568  00F3BA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5569  00F3BE  6A0F               	clrf	drawCircle@y0+1,c
  5570  00F3C0  0E00               	movlw	0
  5571  00F3C2  6E11               	movwf	drawCircle@r+1,c
  5572  00F3C4  0E07               	movlw	7
  5573  00F3C6  6E10               	movwf	drawCircle@r,c
  5574  00F3C8  0EF8               	movlw	248
  5575  00F3CA  6E13               	movwf	drawCircle@color+1,c
  5576  00F3CC  0E00               	movlw	0
  5577  00F3CE  6E12               	movwf	drawCircle@color,c
  5578  00F3D0  ECBD  F077         	call	_drawCircle	;wreg free
  5579                           
  5580                           ;Lab8pE.c: 564: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5581  00F3D4  0E00               	movlw	0
  5582  00F3D6  6E0D               	movwf	drawCircle@x0+1,c
  5583  00F3D8  0E3C               	movlw	60
  5584  00F3DA  6E0C               	movwf	drawCircle@x0,c
  5585  00F3DC  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5586  00F3E0  6A0F               	clrf	drawCircle@y0+1,c
  5587  00F3E2  0E00               	movlw	0
  5588  00F3E4  6E11               	movwf	drawCircle@r+1,c
  5589  00F3E6  0E07               	movlw	7
  5590  00F3E8  6E10               	movwf	drawCircle@r,c
  5591  00F3EA  0EFF               	movlw	255
  5592  00F3EC  6E13               	movwf	drawCircle@color+1,c
  5593  00F3EE  0EE0               	movlw	224
  5594  00F3F0  6E12               	movwf	drawCircle@color,c
  5595  00F3F2  ECBD  F077         	call	_drawCircle	;wreg free
  5596                           
  5597                           ;Lab8pE.c: 565: drawCircle(80, Circle_Y, 7, 0x07E0);
  5598  00F3F6  0E00               	movlw	0
  5599  00F3F8  6E0D               	movwf	drawCircle@x0+1,c
  5600  00F3FA  0E50               	movlw	80
  5601  00F3FC  6E0C               	movwf	drawCircle@x0,c
  5602  00F3FE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5603  00F402  6A0F               	clrf	drawCircle@y0+1,c
  5604  00F404  0E00               	movlw	0
  5605  00F406  6E11               	movwf	drawCircle@r+1,c
  5606  00F408  0E07               	movlw	7
  5607  00F40A  6E10               	movwf	drawCircle@r,c
  5608  00F40C  0E07               	movlw	7
  5609  00F40E  6E13               	movwf	drawCircle@color+1,c
  5610  00F410  0EE0               	movlw	224
  5611  00F412  6E12               	movwf	drawCircle@color,c
  5612  00F414  ECBD  F077         	call	_drawCircle	;wreg free
  5613  00F418  D000               	goto	l3251
  5614  00F41A                     l3251:
  5615                           
  5616                           ;Lab8pE.c: 566: }
  5617                           ;Lab8pE.c: 568: if (color == 1)
  5618  00F41A  0433               	decf	update_LCD_color@color,w,c
  5619  00F41C  A4D8               	btfss	status,2,c
  5620  00F41E  D067               	goto	l3255
  5621                           
  5622                           ;Lab8pE.c: 569: {
  5623                           ;Lab8pE.c: 570: fillCircle(40, Circle_Y, 7, 0xF800);
  5624  00F420  0E00               	movlw	0
  5625  00F422  6E2C               	movwf	fillCircle@x0+1,c
  5626  00F424  0E28               	movlw	40
  5627  00F426  6E2B               	movwf	fillCircle@x0,c
  5628  00F428  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5629  00F42C  6A2E               	clrf	fillCircle@y0+1,c
  5630  00F42E  0E00               	movlw	0
  5631  00F430  6E30               	movwf	fillCircle@r+1,c
  5632  00F432  0E07               	movlw	7
  5633  00F434  6E2F               	movwf	fillCircle@r,c
  5634  00F436  0EF8               	movlw	248
  5635  00F438  6E32               	movwf	fillCircle@color+1,c
  5636  00F43A  0E00               	movlw	0
  5637  00F43C  6E31               	movwf	fillCircle@color,c
  5638  00F43E  ECF5  F06E         	call	_fillCircle	;wreg free
  5639                           
  5640                           ;Lab8pE.c: 571: fillCircle(60, Circle_Y, 7, 0x0000);
  5641  00F442  0E00               	movlw	0
  5642  00F444  6E2C               	movwf	fillCircle@x0+1,c
  5643  00F446  0E3C               	movlw	60
  5644  00F448  6E2B               	movwf	fillCircle@x0,c
  5645  00F44A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5646  00F44E  6A2E               	clrf	fillCircle@y0+1,c
  5647  00F450  0E00               	movlw	0
  5648  00F452  6E30               	movwf	fillCircle@r+1,c
  5649  00F454  0E07               	movlw	7
  5650  00F456  6E2F               	movwf	fillCircle@r,c
  5651  00F458  0E00               	movlw	0
  5652  00F45A  6E32               	movwf	fillCircle@color+1,c
  5653  00F45C  0E00               	movlw	0
  5654  00F45E  6E31               	movwf	fillCircle@color,c
  5655  00F460  ECF5  F06E         	call	_fillCircle	;wreg free
  5656                           
  5657                           ;Lab8pE.c: 572: fillCircle(80, Circle_Y, 7, 0x0000);
  5658  00F464  0E00               	movlw	0
  5659  00F466  6E2C               	movwf	fillCircle@x0+1,c
  5660  00F468  0E50               	movlw	80
  5661  00F46A  6E2B               	movwf	fillCircle@x0,c
  5662  00F46C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5663  00F470  6A2E               	clrf	fillCircle@y0+1,c
  5664  00F472  0E00               	movlw	0
  5665  00F474  6E30               	movwf	fillCircle@r+1,c
  5666  00F476  0E07               	movlw	7
  5667  00F478  6E2F               	movwf	fillCircle@r,c
  5668  00F47A  0E00               	movlw	0
  5669  00F47C  6E32               	movwf	fillCircle@color+1,c
  5670  00F47E  0E00               	movlw	0
  5671  00F480  6E31               	movwf	fillCircle@color,c
  5672  00F482  ECF5  F06E         	call	_fillCircle	;wreg free
  5673                           
  5674                           ;Lab8pE.c: 573: drawCircle(40, Circle_Y, 7, 0xF800);
  5675  00F486  0E00               	movlw	0
  5676  00F488  6E0D               	movwf	drawCircle@x0+1,c
  5677  00F48A  0E28               	movlw	40
  5678  00F48C  6E0C               	movwf	drawCircle@x0,c
  5679  00F48E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5680  00F492  6A0F               	clrf	drawCircle@y0+1,c
  5681  00F494  0E00               	movlw	0
  5682  00F496  6E11               	movwf	drawCircle@r+1,c
  5683  00F498  0E07               	movlw	7
  5684  00F49A  6E10               	movwf	drawCircle@r,c
  5685  00F49C  0EF8               	movlw	248
  5686  00F49E  6E13               	movwf	drawCircle@color+1,c
  5687  00F4A0  0E00               	movlw	0
  5688  00F4A2  6E12               	movwf	drawCircle@color,c
  5689  00F4A4  ECBD  F077         	call	_drawCircle	;wreg free
  5690                           
  5691                           ;Lab8pE.c: 574: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5692  00F4A8  0E00               	movlw	0
  5693  00F4AA  6E0D               	movwf	drawCircle@x0+1,c
  5694  00F4AC  0E3C               	movlw	60
  5695  00F4AE  6E0C               	movwf	drawCircle@x0,c
  5696  00F4B0  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5697  00F4B4  6A0F               	clrf	drawCircle@y0+1,c
  5698  00F4B6  0E00               	movlw	0
  5699  00F4B8  6E11               	movwf	drawCircle@r+1,c
  5700  00F4BA  0E07               	movlw	7
  5701  00F4BC  6E10               	movwf	drawCircle@r,c
  5702  00F4BE  0EFF               	movlw	255
  5703  00F4C0  6E13               	movwf	drawCircle@color+1,c
  5704  00F4C2  0EE0               	movlw	224
  5705  00F4C4  6E12               	movwf	drawCircle@color,c
  5706  00F4C6  ECBD  F077         	call	_drawCircle	;wreg free
  5707                           
  5708                           ;Lab8pE.c: 575: drawCircle(80, Circle_Y, 7, 0x07E0);
  5709  00F4CA  0E00               	movlw	0
  5710  00F4CC  6E0D               	movwf	drawCircle@x0+1,c
  5711  00F4CE  0E50               	movlw	80
  5712  00F4D0  6E0C               	movwf	drawCircle@x0,c
  5713  00F4D2  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5714  00F4D6  6A0F               	clrf	drawCircle@y0+1,c
  5715  00F4D8  0E00               	movlw	0
  5716  00F4DA  6E11               	movwf	drawCircle@r+1,c
  5717  00F4DC  0E07               	movlw	7
  5718  00F4DE  6E10               	movwf	drawCircle@r,c
  5719  00F4E0  0E07               	movlw	7
  5720  00F4E2  6E13               	movwf	drawCircle@color+1,c
  5721  00F4E4  0EE0               	movlw	224
  5722  00F4E6  6E12               	movwf	drawCircle@color,c
  5723  00F4E8  ECBD  F077         	call	_drawCircle	;wreg free
  5724  00F4EC  D000               	goto	l3255
  5725  00F4EE                     l3255:
  5726                           
  5727                           ;Lab8pE.c: 576: }
  5728                           ;Lab8pE.c: 579: if (color == 3)
  5729  00F4EE  0E03               	movlw	3
  5730  00F4F0  1833               	xorwf	update_LCD_color@color,w,c
  5731  00F4F2  A4D8               	btfss	status,2,c
  5732  00F4F4  D067               	goto	l3259
  5733                           
  5734                           ;Lab8pE.c: 580: {
  5735                           ;Lab8pE.c: 581: fillCircle(40, Circle_Y, 7, 0x0000);
  5736  00F4F6  0E00               	movlw	0
  5737  00F4F8  6E2C               	movwf	fillCircle@x0+1,c
  5738  00F4FA  0E28               	movlw	40
  5739  00F4FC  6E2B               	movwf	fillCircle@x0,c
  5740  00F4FE  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5741  00F502  6A2E               	clrf	fillCircle@y0+1,c
  5742  00F504  0E00               	movlw	0
  5743  00F506  6E30               	movwf	fillCircle@r+1,c
  5744  00F508  0E07               	movlw	7
  5745  00F50A  6E2F               	movwf	fillCircle@r,c
  5746  00F50C  0E00               	movlw	0
  5747  00F50E  6E32               	movwf	fillCircle@color+1,c
  5748  00F510  0E00               	movlw	0
  5749  00F512  6E31               	movwf	fillCircle@color,c
  5750  00F514  ECF5  F06E         	call	_fillCircle	;wreg free
  5751                           
  5752                           ;Lab8pE.c: 582: fillCircle(60, Circle_Y, 7, 0xFFE0);
  5753  00F518  0E00               	movlw	0
  5754  00F51A  6E2C               	movwf	fillCircle@x0+1,c
  5755  00F51C  0E3C               	movlw	60
  5756  00F51E  6E2B               	movwf	fillCircle@x0,c
  5757  00F520  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5758  00F524  6A2E               	clrf	fillCircle@y0+1,c
  5759  00F526  0E00               	movlw	0
  5760  00F528  6E30               	movwf	fillCircle@r+1,c
  5761  00F52A  0E07               	movlw	7
  5762  00F52C  6E2F               	movwf	fillCircle@r,c
  5763  00F52E  0EFF               	movlw	255
  5764  00F530  6E32               	movwf	fillCircle@color+1,c
  5765  00F532  0EE0               	movlw	224
  5766  00F534  6E31               	movwf	fillCircle@color,c
  5767  00F536  ECF5  F06E         	call	_fillCircle	;wreg free
  5768                           
  5769                           ;Lab8pE.c: 583: fillCircle(80, Circle_Y, 7, 0x0000);
  5770  00F53A  0E00               	movlw	0
  5771  00F53C  6E2C               	movwf	fillCircle@x0+1,c
  5772  00F53E  0E50               	movlw	80
  5773  00F540  6E2B               	movwf	fillCircle@x0,c
  5774  00F542  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5775  00F546  6A2E               	clrf	fillCircle@y0+1,c
  5776  00F548  0E00               	movlw	0
  5777  00F54A  6E30               	movwf	fillCircle@r+1,c
  5778  00F54C  0E07               	movlw	7
  5779  00F54E  6E2F               	movwf	fillCircle@r,c
  5780  00F550  0E00               	movlw	0
  5781  00F552  6E32               	movwf	fillCircle@color+1,c
  5782  00F554  0E00               	movlw	0
  5783  00F556  6E31               	movwf	fillCircle@color,c
  5784  00F558  ECF5  F06E         	call	_fillCircle	;wreg free
  5785                           
  5786                           ;Lab8pE.c: 584: drawCircle(40, Circle_Y, 7, 0xF800);
  5787  00F55C  0E00               	movlw	0
  5788  00F55E  6E0D               	movwf	drawCircle@x0+1,c
  5789  00F560  0E28               	movlw	40
  5790  00F562  6E0C               	movwf	drawCircle@x0,c
  5791  00F564  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5792  00F568  6A0F               	clrf	drawCircle@y0+1,c
  5793  00F56A  0E00               	movlw	0
  5794  00F56C  6E11               	movwf	drawCircle@r+1,c
  5795  00F56E  0E07               	movlw	7
  5796  00F570  6E10               	movwf	drawCircle@r,c
  5797  00F572  0EF8               	movlw	248
  5798  00F574  6E13               	movwf	drawCircle@color+1,c
  5799  00F576  0E00               	movlw	0
  5800  00F578  6E12               	movwf	drawCircle@color,c
  5801  00F57A  ECBD  F077         	call	_drawCircle	;wreg free
  5802                           
  5803                           ;Lab8pE.c: 585: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5804  00F57E  0E00               	movlw	0
  5805  00F580  6E0D               	movwf	drawCircle@x0+1,c
  5806  00F582  0E3C               	movlw	60
  5807  00F584  6E0C               	movwf	drawCircle@x0,c
  5808  00F586  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5809  00F58A  6A0F               	clrf	drawCircle@y0+1,c
  5810  00F58C  0E00               	movlw	0
  5811  00F58E  6E11               	movwf	drawCircle@r+1,c
  5812  00F590  0E07               	movlw	7
  5813  00F592  6E10               	movwf	drawCircle@r,c
  5814  00F594  0EFF               	movlw	255
  5815  00F596  6E13               	movwf	drawCircle@color+1,c
  5816  00F598  0EE0               	movlw	224
  5817  00F59A  6E12               	movwf	drawCircle@color,c
  5818  00F59C  ECBD  F077         	call	_drawCircle	;wreg free
  5819                           
  5820                           ;Lab8pE.c: 586: drawCircle(80, Circle_Y, 7, 0x07E0);
  5821  00F5A0  0E00               	movlw	0
  5822  00F5A2  6E0D               	movwf	drawCircle@x0+1,c
  5823  00F5A4  0E50               	movlw	80
  5824  00F5A6  6E0C               	movwf	drawCircle@x0,c
  5825  00F5A8  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5826  00F5AC  6A0F               	clrf	drawCircle@y0+1,c
  5827  00F5AE  0E00               	movlw	0
  5828  00F5B0  6E11               	movwf	drawCircle@r+1,c
  5829  00F5B2  0E07               	movlw	7
  5830  00F5B4  6E10               	movwf	drawCircle@r,c
  5831  00F5B6  0E07               	movlw	7
  5832  00F5B8  6E13               	movwf	drawCircle@color+1,c
  5833  00F5BA  0EE0               	movlw	224
  5834  00F5BC  6E12               	movwf	drawCircle@color,c
  5835  00F5BE  ECBD  F077         	call	_drawCircle	;wreg free
  5836  00F5C2  D000               	goto	l3259
  5837  00F5C4                     l3259:
  5838                           
  5839                           ;Lab8pE.c: 587: }
  5840                           ;Lab8pE.c: 589: if (color == 2)
  5841  00F5C4  0E02               	movlw	2
  5842  00F5C6  1833               	xorwf	update_LCD_color@color,w,c
  5843  00F5C8  A4D8               	btfss	status,2,c
  5844  00F5CA  D067               	goto	l465
  5845                           
  5846                           ;Lab8pE.c: 590: {
  5847                           ;Lab8pE.c: 591: fillCircle(40, Circle_Y, 7, 0x0000);
  5848  00F5CC  0E00               	movlw	0
  5849  00F5CE  6E2C               	movwf	fillCircle@x0+1,c
  5850  00F5D0  0E28               	movlw	40
  5851  00F5D2  6E2B               	movwf	fillCircle@x0,c
  5852  00F5D4  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5853  00F5D8  6A2E               	clrf	fillCircle@y0+1,c
  5854  00F5DA  0E00               	movlw	0
  5855  00F5DC  6E30               	movwf	fillCircle@r+1,c
  5856  00F5DE  0E07               	movlw	7
  5857  00F5E0  6E2F               	movwf	fillCircle@r,c
  5858  00F5E2  0E00               	movlw	0
  5859  00F5E4  6E32               	movwf	fillCircle@color+1,c
  5860  00F5E6  0E00               	movlw	0
  5861  00F5E8  6E31               	movwf	fillCircle@color,c
  5862  00F5EA  ECF5  F06E         	call	_fillCircle	;wreg free
  5863                           
  5864                           ;Lab8pE.c: 592: fillCircle(60, Circle_Y, 7, 0x0000);
  5865  00F5EE  0E00               	movlw	0
  5866  00F5F0  6E2C               	movwf	fillCircle@x0+1,c
  5867  00F5F2  0E3C               	movlw	60
  5868  00F5F4  6E2B               	movwf	fillCircle@x0,c
  5869  00F5F6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5870  00F5FA  6A2E               	clrf	fillCircle@y0+1,c
  5871  00F5FC  0E00               	movlw	0
  5872  00F5FE  6E30               	movwf	fillCircle@r+1,c
  5873  00F600  0E07               	movlw	7
  5874  00F602  6E2F               	movwf	fillCircle@r,c
  5875  00F604  0E00               	movlw	0
  5876  00F606  6E32               	movwf	fillCircle@color+1,c
  5877  00F608  0E00               	movlw	0
  5878  00F60A  6E31               	movwf	fillCircle@color,c
  5879  00F60C  ECF5  F06E         	call	_fillCircle	;wreg free
  5880                           
  5881                           ;Lab8pE.c: 593: fillCircle(80, Circle_Y, 7, 0x07E0);
  5882  00F610  0E00               	movlw	0
  5883  00F612  6E2C               	movwf	fillCircle@x0+1,c
  5884  00F614  0E50               	movlw	80
  5885  00F616  6E2B               	movwf	fillCircle@x0,c
  5886  00F618  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5887  00F61C  6A2E               	clrf	fillCircle@y0+1,c
  5888  00F61E  0E00               	movlw	0
  5889  00F620  6E30               	movwf	fillCircle@r+1,c
  5890  00F622  0E07               	movlw	7
  5891  00F624  6E2F               	movwf	fillCircle@r,c
  5892  00F626  0E07               	movlw	7
  5893  00F628  6E32               	movwf	fillCircle@color+1,c
  5894  00F62A  0EE0               	movlw	224
  5895  00F62C  6E31               	movwf	fillCircle@color,c
  5896  00F62E  ECF5  F06E         	call	_fillCircle	;wreg free
  5897                           
  5898                           ;Lab8pE.c: 594: drawCircle(40, Circle_Y, 7, 0xF800);
  5899  00F632  0E00               	movlw	0
  5900  00F634  6E0D               	movwf	drawCircle@x0+1,c
  5901  00F636  0E28               	movlw	40
  5902  00F638  6E0C               	movwf	drawCircle@x0,c
  5903  00F63A  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5904  00F63E  6A0F               	clrf	drawCircle@y0+1,c
  5905  00F640  0E00               	movlw	0
  5906  00F642  6E11               	movwf	drawCircle@r+1,c
  5907  00F644  0E07               	movlw	7
  5908  00F646  6E10               	movwf	drawCircle@r,c
  5909  00F648  0EF8               	movlw	248
  5910  00F64A  6E13               	movwf	drawCircle@color+1,c
  5911  00F64C  0E00               	movlw	0
  5912  00F64E  6E12               	movwf	drawCircle@color,c
  5913  00F650  ECBD  F077         	call	_drawCircle	;wreg free
  5914                           
  5915                           ;Lab8pE.c: 595: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5916  00F654  0E00               	movlw	0
  5917  00F656  6E0D               	movwf	drawCircle@x0+1,c
  5918  00F658  0E3C               	movlw	60
  5919  00F65A  6E0C               	movwf	drawCircle@x0,c
  5920  00F65C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5921  00F660  6A0F               	clrf	drawCircle@y0+1,c
  5922  00F662  0E00               	movlw	0
  5923  00F664  6E11               	movwf	drawCircle@r+1,c
  5924  00F666  0E07               	movlw	7
  5925  00F668  6E10               	movwf	drawCircle@r,c
  5926  00F66A  0EFF               	movlw	255
  5927  00F66C  6E13               	movwf	drawCircle@color+1,c
  5928  00F66E  0EE0               	movlw	224
  5929  00F670  6E12               	movwf	drawCircle@color,c
  5930  00F672  ECBD  F077         	call	_drawCircle	;wreg free
  5931                           
  5932                           ;Lab8pE.c: 596: drawCircle(80, Circle_Y, 7, 0x07E0);
  5933  00F676  0E00               	movlw	0
  5934  00F678  6E0D               	movwf	drawCircle@x0+1,c
  5935  00F67A  0E50               	movlw	80
  5936  00F67C  6E0C               	movwf	drawCircle@x0,c
  5937  00F67E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5938  00F682  6A0F               	clrf	drawCircle@y0+1,c
  5939  00F684  0E00               	movlw	0
  5940  00F686  6E11               	movwf	drawCircle@r+1,c
  5941  00F688  0E07               	movlw	7
  5942  00F68A  6E10               	movwf	drawCircle@r,c
  5943  00F68C  0E07               	movlw	7
  5944  00F68E  6E13               	movwf	drawCircle@color+1,c
  5945  00F690  0EE0               	movlw	224
  5946  00F692  6E12               	movwf	drawCircle@color,c
  5947  00F694  ECBD  F077         	call	_drawCircle	;wreg free
  5948  00F698  D000               	goto	l465
  5949  00F69A                     l465:
  5950  00F69A  0012               	return		;funcret
  5951  00F69C                     __end_of_update_LCD_color:
  5952                           	opt stack 0
  5953                           tblptru	equ	0xFF8
  5954                           tblptrh	equ	0xFF7
  5955                           tblptrl	equ	0xFF6
  5956                           tablat	equ	0xFF5
  5957                           prodl	equ	0xFF3
  5958                           postinc0	equ	0xFEE
  5959                           wreg	equ	0xFE8
  5960                           postdec1	equ	0xFE5
  5961                           fsr1l	equ	0xFE1
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _fillCircle *****************
  5965 ;; Defined at:
  5966 ;;		line 647 in file "ST7735_TFT.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  x0              2   42[COMRAM] int 
  5969 ;;  y0              2   44[COMRAM] int 
  5970 ;;  r               2   46[COMRAM] int 
  5971 ;;  color           2   48[COMRAM] unsigned int 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;		None               void
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5983 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;Total ram usage:        8 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    5
  5990 ;; This function calls:
  5991 ;;		_drawFastVLine
  5992 ;;		_fillCircleHelper
  5993 ;; This function is called by:
  5994 ;;		_Initialize_Screen
  5995 ;;		_update_LCD_color
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text26
  6000  00DDEA                     __ptext26:
  6001                           	opt stack 0
  6002  00DDEA                     _fillCircle:
  6003                           	opt stack 22
  6004                           
  6005                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6006                           
  6007                           ;incstack = 0
  6008  00DDEA  502F               	movf	fillCircle@r,w,c
  6009  00DDEC  0800               	sublw	0
  6010  00DDEE  242D               	addwf	fillCircle@y0,w,c
  6011  00DDF0  6E08               	movwf	drawFastVLine@y,c
  6012  00DDF2  80D8               	bsf	status,0,c
  6013  00DDF4  342F               	rlcf	fillCircle@r,w,c
  6014  00DDF6  6E09               	movwf	drawFastVLine@h,c
  6015  00DDF8  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  6016  00DDFC  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  6017  00DE00  502B               	movf	fillCircle@x0,w,c
  6018  00DE02  EC34  F070         	call	_drawFastVLine
  6019                           
  6020                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  6021  00DE06  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  6022  00DE0A  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6023  00DE0E  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  6024  00DE12  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6025  00DE16  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  6026  00DE1A  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6027  00DE1E  0E00               	movlw	0
  6028  00DE20  6E1A               	movwf	fillCircleHelper@cornername+1,c
  6029  00DE22  0E03               	movlw	3
  6030  00DE24  6E19               	movwf	fillCircleHelper@cornername,c
  6031  00DE26  0E00               	movlw	0
  6032  00DE28  6E1C               	movwf	fillCircleHelper@delta+1,c
  6033  00DE2A  0E00               	movlw	0
  6034  00DE2C  6E1B               	movwf	fillCircleHelper@delta,c
  6035  00DE2E  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  6036  00DE32  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6037  00DE36  ECB7  F075         	call	_fillCircleHelper	;wreg free
  6038  00DE3A  0012               	return		;funcret
  6039  00DE3C                     __end_of_fillCircle:
  6040                           	opt stack 0
  6041                           tblptru	equ	0xFF8
  6042                           tblptrh	equ	0xFF7
  6043                           tblptrl	equ	0xFF6
  6044                           tablat	equ	0xFF5
  6045                           prodl	equ	0xFF3
  6046                           postinc0	equ	0xFEE
  6047                           wreg	equ	0xFE8
  6048                           postdec1	equ	0xFE5
  6049                           fsr1l	equ	0xFE1
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function _fillCircleHelper *****************
  6053 ;; Defined at:
  6054 ;;		line 622 in file "ST7735_TFT.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  x0              2   18[COMRAM] int 
  6057 ;;  y0              2   20[COMRAM] int 
  6058 ;;  r               2   22[COMRAM] int 
  6059 ;;  cornername      2   24[COMRAM] unsigned int 
  6060 ;;  delta           2   26[COMRAM] int 
  6061 ;;  color           2   28[COMRAM] unsigned int 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  y               2   40[COMRAM] int 
  6064 ;;  x               2   38[COMRAM] int 
  6065 ;;  f               2   36[COMRAM] int 
  6066 ;;  ddF_y           2   34[COMRAM] int 
  6067 ;;  ddF_x           2   32[COMRAM] int 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;		None               void
  6070 ;; Registers used:
  6071 ;;		wreg, status,2, status,0, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6077 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;Total ram usage:       24 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    4
  6084 ;; This function calls:
  6085 ;;		_drawFastVLine
  6086 ;; This function is called by:
  6087 ;;		_fillCircle
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text27
  6092  00EB6E                     __ptext27:
  6093                           	opt stack 0
  6094  00EB6E                     _fillCircleHelper:
  6095                           	opt stack 22
  6096                           
  6097                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  6098                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6099                           
  6100                           ;incstack = 0
  6101  00EB6E  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6102  00EB72  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6103  00EB76  1E1F               	comf	??_fillCircleHelper,f,c
  6104  00EB78  1E20               	comf	??_fillCircleHelper+1,f,c
  6105  00EB7A  4A1F               	infsnz	??_fillCircleHelper,f,c
  6106  00EB7C  2A20               	incf	??_fillCircleHelper+1,f,c
  6107  00EB7E  0E01               	movlw	1
  6108  00EB80  241F               	addwf	??_fillCircleHelper,w,c
  6109  00EB82  6E25               	movwf	fillCircleHelper@f,c
  6110  00EB84  0E00               	movlw	0
  6111  00EB86  2020               	addwfc	??_fillCircleHelper+1,w,c
  6112  00EB88  6E26               	movwf	fillCircleHelper@f+1,c
  6113  00EB8A  0E00               	movlw	0
  6114  00EB8C  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  6115  00EB8E  0E01               	movlw	1
  6116  00EB90  6E21               	movwf	fillCircleHelper@ddF_x,c
  6117  00EB92  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6118  00EB96  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6119  00EB9A  90D8               	bcf	status,0,c
  6120  00EB9C  361F               	rlcf	??_fillCircleHelper,f,c
  6121  00EB9E  3620               	rlcf	??_fillCircleHelper+1,f,c
  6122  00EBA0  1E1F               	comf	??_fillCircleHelper,f,c
  6123  00EBA2  1E20               	comf	??_fillCircleHelper+1,f,c
  6124  00EBA4  4A1F               	infsnz	??_fillCircleHelper,f,c
  6125  00EBA6  2A20               	incf	??_fillCircleHelper+1,f,c
  6126  00EBA8  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6127  00EBAC  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6128  00EBB0  0E00               	movlw	0
  6129  00EBB2  6E28               	movwf	fillCircleHelper@x+1,c
  6130  00EBB4  0E00               	movlw	0
  6131  00EBB6  6E27               	movwf	fillCircleHelper@x,c
  6132  00EBB8  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  6133  00EBBC  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  6134                           
  6135                           ;ST7735_TFT.c: 626: while (x<y) {
  6136  00EBC0  D067               	goto	l2799
  6137  00EBC2                     l2779:
  6138                           
  6139                           ;ST7735_TFT.c: 627: if (f >= 0) {
  6140  00EBC2  BE26               	btfsc	fillCircleHelper@f+1,7,c
  6141  00EBC4  D00B               	goto	l255
  6142                           
  6143                           ;ST7735_TFT.c: 628: y--;
  6144  00EBC6  0629               	decf	fillCircleHelper@y,f,c
  6145  00EBC8  A0D8               	btfss	status,0,c
  6146  00EBCA  062A               	decf	fillCircleHelper@y+1,f,c
  6147                           
  6148                           ;ST7735_TFT.c: 629: ddF_y += 2;
  6149  00EBCC  0E02               	movlw	2
  6150  00EBCE  2623               	addwf	fillCircleHelper@ddF_y,f,c
  6151  00EBD0  0E00               	movlw	0
  6152  00EBD2  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  6153                           
  6154                           ;ST7735_TFT.c: 630: f += ddF_y;
  6155  00EBD4  5023               	movf	fillCircleHelper@ddF_y,w,c
  6156  00EBD6  2625               	addwf	fillCircleHelper@f,f,c
  6157  00EBD8  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  6158  00EBDA  2226               	addwfc	fillCircleHelper@f+1,f,c
  6159  00EBDC                     l255:
  6160                           
  6161                           ;ST7735_TFT.c: 631: }
  6162                           ;ST7735_TFT.c: 632: x++;
  6163  00EBDC  4A27               	infsnz	fillCircleHelper@x,f,c
  6164  00EBDE  2A28               	incf	fillCircleHelper@x+1,f,c
  6165                           
  6166                           ;ST7735_TFT.c: 633: ddF_x += 2;
  6167  00EBE0  0E02               	movlw	2
  6168  00EBE2  2621               	addwf	fillCircleHelper@ddF_x,f,c
  6169  00EBE4  0E00               	movlw	0
  6170  00EBE6  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  6171                           
  6172                           ;ST7735_TFT.c: 634: f += ddF_x;
  6173  00EBE8  5021               	movf	fillCircleHelper@ddF_x,w,c
  6174  00EBEA  2625               	addwf	fillCircleHelper@f,f,c
  6175  00EBEC  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  6176  00EBEE  2226               	addwfc	fillCircleHelper@f+1,f,c
  6177                           
  6178                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  6179  00EBF0  A019               	btfss	fillCircleHelper@cornername,0,c
  6180  00EBF2  D025               	goto	l2795
  6181                           
  6182                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  6183  00EBF4  5029               	movf	fillCircleHelper@y,w,c
  6184  00EBF6  0800               	sublw	0
  6185  00EBF8  2415               	addwf	fillCircleHelper@y0,w,c
  6186  00EBFA  6E08               	movwf	drawFastVLine@y,c
  6187  00EBFC  5029               	movf	fillCircleHelper@y,w,c
  6188  00EBFE  2429               	addwf	fillCircleHelper@y,w,c
  6189  00EC00  241B               	addwf	fillCircleHelper@delta,w,c
  6190  00EC02  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6191  00EC04  281F               	incf	??_fillCircleHelper,w,c
  6192  00EC06  6E09               	movwf	drawFastVLine@h,c
  6193  00EC08  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6194  00EC0C  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6195  00EC10  5013               	movf	fillCircleHelper@x0,w,c
  6196  00EC12  2427               	addwf	fillCircleHelper@x,w,c
  6197  00EC14  EC34  F070         	call	_drawFastVLine
  6198                           
  6199                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  6200  00EC18  5027               	movf	fillCircleHelper@x,w,c
  6201  00EC1A  0800               	sublw	0
  6202  00EC1C  2415               	addwf	fillCircleHelper@y0,w,c
  6203  00EC1E  6E08               	movwf	drawFastVLine@y,c
  6204  00EC20  5027               	movf	fillCircleHelper@x,w,c
  6205  00EC22  2427               	addwf	fillCircleHelper@x,w,c
  6206  00EC24  241B               	addwf	fillCircleHelper@delta,w,c
  6207  00EC26  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6208  00EC28  281F               	incf	??_fillCircleHelper,w,c
  6209  00EC2A  6E09               	movwf	drawFastVLine@h,c
  6210  00EC2C  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6211  00EC30  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6212  00EC34  5013               	movf	fillCircleHelper@x0,w,c
  6213  00EC36  2429               	addwf	fillCircleHelper@y,w,c
  6214  00EC38  EC34  F070         	call	_drawFastVLine
  6215  00EC3C  D000               	goto	l2795
  6216  00EC3E                     l2795:
  6217                           
  6218                           ;ST7735_TFT.c: 639: }
  6219                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  6220  00EC3E  A219               	btfss	fillCircleHelper@cornername,1,c
  6221  00EC40  D027               	goto	l2799
  6222                           
  6223                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  6224  00EC42  5029               	movf	fillCircleHelper@y,w,c
  6225  00EC44  0800               	sublw	0
  6226  00EC46  2415               	addwf	fillCircleHelper@y0,w,c
  6227  00EC48  6E08               	movwf	drawFastVLine@y,c
  6228  00EC4A  5029               	movf	fillCircleHelper@y,w,c
  6229  00EC4C  2429               	addwf	fillCircleHelper@y,w,c
  6230  00EC4E  241B               	addwf	fillCircleHelper@delta,w,c
  6231  00EC50  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6232  00EC52  281F               	incf	??_fillCircleHelper,w,c
  6233  00EC54  6E09               	movwf	drawFastVLine@h,c
  6234  00EC56  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6235  00EC5A  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6236  00EC5E  5027               	movf	fillCircleHelper@x,w,c
  6237  00EC60  0800               	sublw	0
  6238  00EC62  2413               	addwf	fillCircleHelper@x0,w,c
  6239  00EC64  EC34  F070         	call	_drawFastVLine
  6240                           
  6241                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  6242  00EC68  5027               	movf	fillCircleHelper@x,w,c
  6243  00EC6A  0800               	sublw	0
  6244  00EC6C  2415               	addwf	fillCircleHelper@y0,w,c
  6245  00EC6E  6E08               	movwf	drawFastVLine@y,c
  6246  00EC70  5027               	movf	fillCircleHelper@x,w,c
  6247  00EC72  2427               	addwf	fillCircleHelper@x,w,c
  6248  00EC74  241B               	addwf	fillCircleHelper@delta,w,c
  6249  00EC76  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6250  00EC78  281F               	incf	??_fillCircleHelper,w,c
  6251  00EC7A  6E09               	movwf	drawFastVLine@h,c
  6252  00EC7C  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6253  00EC80  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6254  00EC84  5029               	movf	fillCircleHelper@y,w,c
  6255  00EC86  0800               	sublw	0
  6256  00EC88  2413               	addwf	fillCircleHelper@x0,w,c
  6257  00EC8A  EC34  F070         	call	_drawFastVLine
  6258  00EC8E  D000               	goto	l2799
  6259  00EC90                     l2799:
  6260  00EC90  5029               	movf	fillCircleHelper@y,w,c
  6261  00EC92  5C27               	subwf	fillCircleHelper@x,w,c
  6262  00EC94  5028               	movf	fillCircleHelper@x+1,w,c
  6263  00EC96  0A80               	xorlw	128
  6264  00EC98  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6265  00EC9A  502A               	movf	fillCircleHelper@y+1,w,c
  6266  00EC9C  0A80               	xorlw	128
  6267  00EC9E  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  6268  00ECA0  A0D8               	btfss	status,0,c
  6269  00ECA2  D78F               	goto	l2779
  6270  00ECA4  0012               	return		;funcret
  6271  00ECA6                     __end_of_fillCircleHelper:
  6272                           	opt stack 0
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodl	equ	0xFF3
  6278                           postinc0	equ	0xFEE
  6279                           wreg	equ	0xFE8
  6280                           postdec1	equ	0xFE5
  6281                           fsr1l	equ	0xFE1
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function _drawCircle *****************
  6285 ;; Defined at:
  6286 ;;		line 561 in file "ST7735_TFT.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  x0              2   11[COMRAM] int 
  6289 ;;  y0              2   13[COMRAM] int 
  6290 ;;  r               2   15[COMRAM] int 
  6291 ;;  color           2   17[COMRAM] unsigned int 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  y               2   29[COMRAM] int 
  6294 ;;  x               2   27[COMRAM] int 
  6295 ;;  f               2   25[COMRAM] int 
  6296 ;;  ddF_y           2   23[COMRAM] int 
  6297 ;;  ddF_x           2   21[COMRAM] int 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;		None               void
  6300 ;; Registers used:
  6301 ;;		wreg, status,2, status,0, cstack
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6307 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;Total ram usage:       20 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    4
  6314 ;; This function calls:
  6315 ;;		_drawPixel
  6316 ;; This function is called by:
  6317 ;;		_Initialize_Screen
  6318 ;;		_update_LCD_color
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text28
  6323  00EF7A                     __ptext28:
  6324                           	opt stack 0
  6325  00EF7A                     _drawCircle:
  6326                           	opt stack 23
  6327                           
  6328                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  6329                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6330                           
  6331                           ;incstack = 0
  6332  00EF7A  C010  F014         	movff	drawCircle@r,??_drawCircle
  6333  00EF7E  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  6334  00EF82  1E14               	comf	??_drawCircle,f,c
  6335  00EF84  1E15               	comf	??_drawCircle+1,f,c
  6336  00EF86  4A14               	infsnz	??_drawCircle,f,c
  6337  00EF88  2A15               	incf	??_drawCircle+1,f,c
  6338  00EF8A  0E01               	movlw	1
  6339  00EF8C  2414               	addwf	??_drawCircle,w,c
  6340  00EF8E  6E1A               	movwf	drawCircle@f,c
  6341  00EF90  0E00               	movlw	0
  6342  00EF92  2015               	addwfc	??_drawCircle+1,w,c
  6343  00EF94  6E1B               	movwf	drawCircle@f+1,c
  6344  00EF96  0E00               	movlw	0
  6345  00EF98  6E17               	movwf	drawCircle@ddF_x+1,c
  6346  00EF9A  0E01               	movlw	1
  6347  00EF9C  6E16               	movwf	drawCircle@ddF_x,c
  6348  00EF9E  C010  F014         	movff	drawCircle@r,??_drawCircle
  6349  00EFA2  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  6350  00EFA6  90D8               	bcf	status,0,c
  6351  00EFA8  3614               	rlcf	??_drawCircle,f,c
  6352  00EFAA  3615               	rlcf	??_drawCircle+1,f,c
  6353  00EFAC  1E14               	comf	??_drawCircle,f,c
  6354  00EFAE  1E15               	comf	??_drawCircle+1,f,c
  6355  00EFB0  4A14               	infsnz	??_drawCircle,f,c
  6356  00EFB2  2A15               	incf	??_drawCircle+1,f,c
  6357  00EFB4  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  6358  00EFB8  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6359  00EFBC  0E00               	movlw	0
  6360  00EFBE  6E1D               	movwf	drawCircle@x+1,c
  6361  00EFC0  0E00               	movlw	0
  6362  00EFC2  6E1C               	movwf	drawCircle@x,c
  6363  00EFC4  C010  F01E         	movff	drawCircle@r,drawCircle@y
  6364  00EFC8  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  6365                           
  6366                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  6367  00EFCC  500E               	movf	drawCircle@y0,w,c
  6368  00EFCE  2410               	addwf	drawCircle@r,w,c
  6369  00EFD0  6E08               	movwf	drawPixel@y,c
  6370  00EFD2  C012  F009         	movff	drawCircle@color,drawPixel@color
  6371  00EFD6  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6372  00EFDA  500C               	movf	drawCircle@x0,w,c
  6373  00EFDC  EC5A  F06D         	call	_drawPixel
  6374                           
  6375                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  6376  00EFE0  5010               	movf	drawCircle@r,w,c
  6377  00EFE2  0800               	sublw	0
  6378  00EFE4  240E               	addwf	drawCircle@y0,w,c
  6379  00EFE6  6E08               	movwf	drawPixel@y,c
  6380  00EFE8  C012  F009         	movff	drawCircle@color,drawPixel@color
  6381  00EFEC  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6382  00EFF0  500C               	movf	drawCircle@x0,w,c
  6383  00EFF2  EC5A  F06D         	call	_drawPixel
  6384                           
  6385                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  6386  00EFF6  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  6387  00EFFA  C012  F009         	movff	drawCircle@color,drawPixel@color
  6388  00EFFE  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6389  00F002  500C               	movf	drawCircle@x0,w,c
  6390  00F004  2410               	addwf	drawCircle@r,w,c
  6391  00F006  EC5A  F06D         	call	_drawPixel
  6392                           
  6393                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  6394  00F00A  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  6395  00F00E  C012  F009         	movff	drawCircle@color,drawPixel@color
  6396  00F012  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6397  00F016  5010               	movf	drawCircle@r,w,c
  6398  00F018  0800               	sublw	0
  6399  00F01A  240C               	addwf	drawCircle@x0,w,c
  6400  00F01C  EC5A  F06D         	call	_drawPixel
  6401                           
  6402                           ;ST7735_TFT.c: 569: while (x < y) {
  6403  00F020  D078               	goto	l2945
  6404  00F022                     l2917:
  6405                           
  6406                           ;ST7735_TFT.c: 570: if (f >= 0) {
  6407  00F022  BE1B               	btfsc	drawCircle@f+1,7,c
  6408  00F024  D00B               	goto	l237
  6409                           
  6410                           ;ST7735_TFT.c: 571: y--;
  6411  00F026  061E               	decf	drawCircle@y,f,c
  6412  00F028  A0D8               	btfss	status,0,c
  6413  00F02A  061F               	decf	drawCircle@y+1,f,c
  6414                           
  6415                           ;ST7735_TFT.c: 572: ddF_y += 2;
  6416  00F02C  0E02               	movlw	2
  6417  00F02E  2618               	addwf	drawCircle@ddF_y,f,c
  6418  00F030  0E00               	movlw	0
  6419  00F032  2219               	addwfc	drawCircle@ddF_y+1,f,c
  6420                           
  6421                           ;ST7735_TFT.c: 573: f += ddF_y;
  6422  00F034  5018               	movf	drawCircle@ddF_y,w,c
  6423  00F036  261A               	addwf	drawCircle@f,f,c
  6424  00F038  5019               	movf	drawCircle@ddF_y+1,w,c
  6425  00F03A  221B               	addwfc	drawCircle@f+1,f,c
  6426  00F03C                     l237:
  6427                           
  6428                           ;ST7735_TFT.c: 574: }
  6429                           ;ST7735_TFT.c: 575: x++;
  6430  00F03C  4A1C               	infsnz	drawCircle@x,f,c
  6431  00F03E  2A1D               	incf	drawCircle@x+1,f,c
  6432                           
  6433                           ;ST7735_TFT.c: 576: ddF_x += 2;
  6434  00F040  0E02               	movlw	2
  6435  00F042  2616               	addwf	drawCircle@ddF_x,f,c
  6436  00F044  0E00               	movlw	0
  6437  00F046  2217               	addwfc	drawCircle@ddF_x+1,f,c
  6438                           
  6439                           ;ST7735_TFT.c: 577: f += ddF_x;
  6440  00F048  5016               	movf	drawCircle@ddF_x,w,c
  6441  00F04A  261A               	addwf	drawCircle@f,f,c
  6442  00F04C  5017               	movf	drawCircle@ddF_x+1,w,c
  6443  00F04E  221B               	addwfc	drawCircle@f+1,f,c
  6444                           
  6445                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  6446  00F050  500E               	movf	drawCircle@y0,w,c
  6447  00F052  241E               	addwf	drawCircle@y,w,c
  6448  00F054  6E08               	movwf	drawPixel@y,c
  6449  00F056  C012  F009         	movff	drawCircle@color,drawPixel@color
  6450  00F05A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6451  00F05E  500C               	movf	drawCircle@x0,w,c
  6452  00F060  241C               	addwf	drawCircle@x,w,c
  6453  00F062  EC5A  F06D         	call	_drawPixel
  6454                           
  6455                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  6456  00F066  500E               	movf	drawCircle@y0,w,c
  6457  00F068  241E               	addwf	drawCircle@y,w,c
  6458  00F06A  6E08               	movwf	drawPixel@y,c
  6459  00F06C  C012  F009         	movff	drawCircle@color,drawPixel@color
  6460  00F070  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6461  00F074  501C               	movf	drawCircle@x,w,c
  6462  00F076  0800               	sublw	0
  6463  00F078  240C               	addwf	drawCircle@x0,w,c
  6464  00F07A  EC5A  F06D         	call	_drawPixel
  6465                           
  6466                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  6467  00F07E  501E               	movf	drawCircle@y,w,c
  6468  00F080  0800               	sublw	0
  6469  00F082  240E               	addwf	drawCircle@y0,w,c
  6470  00F084  6E08               	movwf	drawPixel@y,c
  6471  00F086  C012  F009         	movff	drawCircle@color,drawPixel@color
  6472  00F08A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6473  00F08E  500C               	movf	drawCircle@x0,w,c
  6474  00F090  241C               	addwf	drawCircle@x,w,c
  6475  00F092  EC5A  F06D         	call	_drawPixel
  6476                           
  6477                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  6478  00F096  501E               	movf	drawCircle@y,w,c
  6479  00F098  0800               	sublw	0
  6480  00F09A  240E               	addwf	drawCircle@y0,w,c
  6481  00F09C  6E08               	movwf	drawPixel@y,c
  6482  00F09E  C012  F009         	movff	drawCircle@color,drawPixel@color
  6483  00F0A2  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6484  00F0A6  501C               	movf	drawCircle@x,w,c
  6485  00F0A8  0800               	sublw	0
  6486  00F0AA  240C               	addwf	drawCircle@x0,w,c
  6487  00F0AC  EC5A  F06D         	call	_drawPixel
  6488                           
  6489                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  6490  00F0B0  500E               	movf	drawCircle@y0,w,c
  6491  00F0B2  241C               	addwf	drawCircle@x,w,c
  6492  00F0B4  6E08               	movwf	drawPixel@y,c
  6493  00F0B6  C012  F009         	movff	drawCircle@color,drawPixel@color
  6494  00F0BA  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6495  00F0BE  500C               	movf	drawCircle@x0,w,c
  6496  00F0C0  241E               	addwf	drawCircle@y,w,c
  6497  00F0C2  EC5A  F06D         	call	_drawPixel
  6498                           
  6499                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  6500  00F0C6  500E               	movf	drawCircle@y0,w,c
  6501  00F0C8  241C               	addwf	drawCircle@x,w,c
  6502  00F0CA  6E08               	movwf	drawPixel@y,c
  6503  00F0CC  C012  F009         	movff	drawCircle@color,drawPixel@color
  6504  00F0D0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6505  00F0D4  501E               	movf	drawCircle@y,w,c
  6506  00F0D6  0800               	sublw	0
  6507  00F0D8  240C               	addwf	drawCircle@x0,w,c
  6508  00F0DA  EC5A  F06D         	call	_drawPixel
  6509                           
  6510                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  6511  00F0DE  501C               	movf	drawCircle@x,w,c
  6512  00F0E0  0800               	sublw	0
  6513  00F0E2  240E               	addwf	drawCircle@y0,w,c
  6514  00F0E4  6E08               	movwf	drawPixel@y,c
  6515  00F0E6  C012  F009         	movff	drawCircle@color,drawPixel@color
  6516  00F0EA  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6517  00F0EE  500C               	movf	drawCircle@x0,w,c
  6518  00F0F0  241E               	addwf	drawCircle@y,w,c
  6519  00F0F2  EC5A  F06D         	call	_drawPixel
  6520                           
  6521                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  6522  00F0F6  501C               	movf	drawCircle@x,w,c
  6523  00F0F8  0800               	sublw	0
  6524  00F0FA  240E               	addwf	drawCircle@y0,w,c
  6525  00F0FC  6E08               	movwf	drawPixel@y,c
  6526  00F0FE  C012  F009         	movff	drawCircle@color,drawPixel@color
  6527  00F102  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6528  00F106  501E               	movf	drawCircle@y,w,c
  6529  00F108  0800               	sublw	0
  6530  00F10A  240C               	addwf	drawCircle@x0,w,c
  6531  00F10C  EC5A  F06D         	call	_drawPixel
  6532  00F110  D000               	goto	l2945
  6533  00F112                     l2945:
  6534  00F112  501E               	movf	drawCircle@y,w,c
  6535  00F114  5C1C               	subwf	drawCircle@x,w,c
  6536  00F116  501D               	movf	drawCircle@x+1,w,c
  6537  00F118  0A80               	xorlw	128
  6538  00F11A  6E14               	movwf	??_drawCircle& (0+255),c
  6539  00F11C  501F               	movf	drawCircle@y+1,w,c
  6540  00F11E  0A80               	xorlw	128
  6541  00F120  5814               	subwfb	??_drawCircle& (0+255),w,c
  6542  00F122  A0D8               	btfss	status,0,c
  6543  00F124  D77E               	goto	l2917
  6544  00F126  0012               	return		;funcret
  6545  00F128                     __end_of_drawCircle:
  6546                           	opt stack 0
  6547                           tblptru	equ	0xFF8
  6548                           tblptrh	equ	0xFF7
  6549                           tblptrl	equ	0xFF6
  6550                           tablat	equ	0xFF5
  6551                           prodl	equ	0xFF3
  6552                           postinc0	equ	0xFEE
  6553                           wreg	equ	0xFE8
  6554                           postdec1	equ	0xFE5
  6555                           fsr1l	equ	0xFE1
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function _PED_Control *****************
  6559 ;; Defined at:
  6560 ;;		line 388 in file "Lab8pE.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  direction       1    wreg     unsigned char 
  6563 ;;  Num_Sec         1   60[COMRAM] unsigned char 
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  direction       1   61[COMRAM] unsigned char 
  6566 ;;  i               1   62[COMRAM] unsigned char 
  6567 ;; Return value:  Size  Location     Type
  6568 ;;		None               void
  6569 ;; Registers used:
  6570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6571 ;; Tracked objects:
  6572 ;;		On entry : 0/0
  6573 ;;		On exit  : 0/0
  6574 ;;		Unchanged: 0/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6576 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;Total ram usage:        3 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    9
  6583 ;; This function calls:
  6584 ;;		_Wait_One_Second_With_Beep
  6585 ;;		_update_LCD_PED_Count
  6586 ;; This function is called by:
  6587 ;;		_Day_Mode
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text29
  6592  00DB16                     __ptext29:
  6593                           	opt stack 0
  6594  00DB16                     _PED_Control:
  6595                           	opt stack 20
  6596                           
  6597                           ;incstack = 0
  6598                           ;PED_Control@direction stored from wreg
  6599  00DB16  6E3E               	movwf	PED_Control@direction,c
  6600                           
  6601                           ;Lab8pE.c: 390: for(char i = Num_Sec-1;i>0; i--)
  6602  00DB18  043D               	decf	PED_Control@Num_Sec,w,c
  6603  00DB1A  6E3F               	movwf	PED_Control@i,c
  6604  00DB1C                     l3443:
  6605  00DB1C  503F               	movf	PED_Control@i,w,c
  6606  00DB1E  B4D8               	btfsc	status,2,c
  6607  00DB20  D00B               	goto	l3453
  6608  00DB22  D001               	goto	l3447
  6609  00DB24  D009               	goto	l3453
  6610  00DB26                     l3447:
  6611                           
  6612                           ;Lab8pE.c: 391: {
  6613                           ;Lab8pE.c: 392: update_LCD_PED_Count(direction, i);
  6614  00DB26  C03F  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  6615  00DB2A  503E               	movf	PED_Control@direction,w,c
  6616  00DB2C  EC3E  F072         	call	_update_LCD_PED_Count
  6617                           
  6618                           ;Lab8pE.c: 393: Wait_One_Second_With_Beep();
  6619  00DB30  ECBC  F070         	call	_Wait_One_Second_With_Beep	;wreg free
  6620  00DB34  063F               	decf	PED_Control@i,f,c
  6621  00DB36  D7F2               	goto	l3443
  6622  00DB38                     l3453:
  6623                           
  6624                           ;Lab8pE.c: 394: }
  6625                           ;Lab8pE.c: 396: update_LCD_PED_Count(direction, 0);
  6626  00DB38  0E00               	movlw	0
  6627  00DB3A  6E3A               	movwf	update_LCD_PED_Count@count,c
  6628  00DB3C  503E               	movf	PED_Control@direction,w,c
  6629  00DB3E  EC3E  F072         	call	_update_LCD_PED_Count
  6630                           
  6631                           ;Lab8pE.c: 397: Wait_One_Second_With_Beep();
  6632  00DB42  ECBC  F070         	call	_Wait_One_Second_With_Beep	;wreg free
  6633  00DB46  0012               	return		;funcret
  6634  00DB48                     __end_of_PED_Control:
  6635                           	opt stack 0
  6636                           tblptru	equ	0xFF8
  6637                           tblptrh	equ	0xFF7
  6638                           tblptrl	equ	0xFF6
  6639                           tablat	equ	0xFF5
  6640                           prodl	equ	0xFF3
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           postdec1	equ	0xFE5
  6644                           fsr1l	equ	0xFE1
  6645                           status	equ	0xFD8
  6646                           
  6647 ;; *************** function _update_LCD_PED_Count *****************
  6648 ;; Defined at:
  6649 ;;		line 630 in file "Lab8pE.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  direction       1    wreg     unsigned char 
  6652 ;;  count           1   57[COMRAM] unsigned char 
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;  direction       1   58[COMRAM] unsigned char 
  6655 ;; Return value:  Size  Location     Type
  6656 ;;		None               void
  6657 ;; Registers used:
  6658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6664 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;Total ram usage:        2 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    7
  6671 ;; This function calls:
  6672 ;;		___awdiv
  6673 ;;		___awmod
  6674 ;;		_drawtext
  6675 ;; This function is called by:
  6676 ;;		_PED_Control
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text30
  6681  00E47C                     __ptext30:
  6682                           	opt stack 0
  6683  00E47C                     _update_LCD_PED_Count:
  6684                           	opt stack 21
  6685                           
  6686                           ;incstack = 0
  6687                           ;update_LCD_PED_Count@direction stored from wreg
  6688  00E47C  6E3B               	movwf	update_LCD_PED_Count@direction,c
  6689                           
  6690                           ;Lab8pE.c: 632: switch (direction)
  6691  00E47E  D057               	goto	l3275
  6692  00E480                     l3265:
  6693                           
  6694                           ;Lab8pE.c: 635: PED_NS_Count[0] = count/10 + '0';
  6695  00E480  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  6696  00E484  6A02               	clrf	___awdiv@dividend+1,c
  6697  00E486  0E00               	movlw	0
  6698  00E488  6E04               	movwf	___awdiv@divisor+1,c
  6699  00E48A  0E0A               	movlw	10
  6700  00E48C  6E03               	movwf	___awdiv@divisor,c
  6701  00E48E  EC4C  F071         	call	___awdiv	;wreg free
  6702  00E492  5001               	movf	?___awdiv,w,c
  6703  00E494  0F30               	addlw	48
  6704  00E496  6E52               	movwf	_PED_NS_Count,c
  6705                           
  6706                           ;Lab8pE.c: 636: PED_NS_Count[1] = count%10 + '0';
  6707  00E498  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  6708  00E49C  6A02               	clrf	___awmod@dividend+1,c
  6709  00E49E  0E00               	movlw	0
  6710  00E4A0  6E04               	movwf	___awmod@divisor+1,c
  6711  00E4A2  0E0A               	movlw	10
  6712  00E4A4  6E03               	movwf	___awmod@divisor,c
  6713  00E4A6  ECB2  F06F         	call	___awmod	;wreg free
  6714  00E4AA  5001               	movf	?___awmod,w,c
  6715  00E4AC  0F30               	addlw	48
  6716  00E4AE  6E53               	movwf	_PED_NS_Count+1,c
  6717                           
  6718                           ;Lab8pE.c: 637: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  6719  00E4B0  0E1E               	movlw	30
  6720  00E4B2  6E29               	movwf	drawtext@y,c
  6721  00E4B4  0E52               	movlw	low _PED_NS_Count
  6722  00E4B6  6E2A               	movwf	drawtext@_text,c
  6723  00E4B8  0E00               	movlw	high _PED_NS_Count
  6724  00E4BA  6E2B               	movwf	drawtext@_text+1,c
  6725  00E4BC  0E00               	movlw	0
  6726  00E4BE  6E2D               	movwf	drawtext@color+1,c
  6727  00E4C0  0E1F               	movlw	31
  6728  00E4C2  6E2C               	movwf	drawtext@color,c
  6729  00E4C4  0E00               	movlw	0
  6730  00E4C6  6E2F               	movwf	drawtext@bg+1,c
  6731  00E4C8  0E00               	movlw	0
  6732  00E4CA  6E2E               	movwf	drawtext@bg,c
  6733  00E4CC  0E02               	movlw	2
  6734  00E4CE  6E30               	movwf	drawtext@size,c
  6735  00E4D0  0E02               	movlw	2
  6736  00E4D2  ECD6  F073         	call	_drawtext
  6737                           
  6738                           ;Lab8pE.c: 638: break;
  6739  00E4D6  D033               	goto	l481
  6740  00E4D8                     l3269:
  6741                           
  6742                           ;Lab8pE.c: 641: PED_EW_Count[0] = count/10 + '0';
  6743  00E4D8  C03A  F001         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  6744  00E4DC  6A02               	clrf	___awdiv@dividend+1,c
  6745  00E4DE  0E00               	movlw	0
  6746  00E4E0  6E04               	movwf	___awdiv@divisor+1,c
  6747  00E4E2  0E0A               	movlw	10
  6748  00E4E4  6E03               	movwf	___awdiv@divisor,c
  6749  00E4E6  EC4C  F071         	call	___awdiv	;wreg free
  6750  00E4EA  5001               	movf	?___awdiv,w,c
  6751  00E4EC  0F30               	addlw	48
  6752  00E4EE  6E4F               	movwf	_PED_EW_Count,c
  6753                           
  6754                           ;Lab8pE.c: 642: PED_EW_Count[1] = count%10 + '0';
  6755  00E4F0  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  6756  00E4F4  6A02               	clrf	___awmod@dividend+1,c
  6757  00E4F6  0E00               	movlw	0
  6758  00E4F8  6E04               	movwf	___awmod@divisor+1,c
  6759  00E4FA  0E0A               	movlw	10
  6760  00E4FC  6E03               	movwf	___awmod@divisor,c
  6761  00E4FE  ECB2  F06F         	call	___awmod	;wreg free
  6762  00E502  5001               	movf	?___awmod,w,c
  6763  00E504  0F30               	addlw	48
  6764  00E506  6E50               	movwf	_PED_EW_Count+1,c
  6765                           
  6766                           ;Lab8pE.c: 643: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  6767  00E508  0E5A               	movlw	90
  6768  00E50A  6E29               	movwf	drawtext@y,c
  6769  00E50C  0E4F               	movlw	low _PED_EW_Count
  6770  00E50E  6E2A               	movwf	drawtext@_text,c
  6771  00E510  0E00               	movlw	high _PED_EW_Count
  6772  00E512  6E2B               	movwf	drawtext@_text+1,c
  6773  00E514  0E07               	movlw	7
  6774  00E516  6E2D               	movwf	drawtext@color+1,c
  6775  00E518  682C               	setf	drawtext@color,c
  6776  00E51A  0E00               	movlw	0
  6777  00E51C  6E2F               	movwf	drawtext@bg+1,c
  6778  00E51E  0E00               	movlw	0
  6779  00E520  6E2E               	movwf	drawtext@bg,c
  6780  00E522  0E02               	movlw	2
  6781  00E524  6E30               	movwf	drawtext@size,c
  6782  00E526  0E02               	movlw	2
  6783  00E528  ECD6  F073         	call	_drawtext
  6784                           
  6785                           ;Lab8pE.c: 645: }
  6786                           
  6787                           ;Lab8pE.c: 644: break;
  6788  00E52C  D008               	goto	l481
  6789  00E52E                     l3275:
  6790  00E52E  503B               	movf	update_LCD_PED_Count@direction,w,c
  6791                           
  6792                           ; Switch size 1, requested type "space"
  6793                           ; Number of cases is 2, Range of values is 0 to 2
  6794                           ; switch strategies available:
  6795                           ; Name         Instructions Cycles
  6796                           ; simple_byte            7     4 (average)
  6797                           ;	Chosen strategy is simple_byte
  6798  00E530  0A00               	xorlw	0	; case 0
  6799  00E532  B4D8               	btfsc	status,2,c
  6800  00E534  D7A5               	goto	l3265
  6801  00E536  0A02               	xorlw	2	; case 2
  6802  00E538  B4D8               	btfsc	status,2,c
  6803  00E53A  D7CE               	goto	l3269
  6804  00E53C  D000               	goto	l481
  6805  00E53E                     l481:
  6806  00E53E  0012               	return		;funcret
  6807  00E540                     __end_of_update_LCD_PED_Count:
  6808                           	opt stack 0
  6809                           tblptru	equ	0xFF8
  6810                           tblptrh	equ	0xFF7
  6811                           tblptrl	equ	0xFF6
  6812                           tablat	equ	0xFF5
  6813                           prodl	equ	0xFF3
  6814                           postinc0	equ	0xFEE
  6815                           wreg	equ	0xFE8
  6816                           postdec1	equ	0xFE5
  6817                           fsr1l	equ	0xFE1
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function ___awmod *****************
  6821 ;; Defined at:
  6822 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  dividend        2    0[COMRAM] int 
  6825 ;;  divisor         2    2[COMRAM] int 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  sign            1    5[COMRAM] unsigned char 
  6828 ;;  counter         1    4[COMRAM] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  2    0[COMRAM] int 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, status,0
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6838 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;Total ram usage:        6 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_update_LCD_count
  6848 ;;		_update_LCD_PED_Count
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text31
  6853  00DF64                     __ptext31:
  6854                           	opt stack 0
  6855  00DF64                     ___awmod:
  6856                           	opt stack 27
  6857                           
  6858                           ;incstack = 0
  6859  00DF64  0E00               	movlw	0
  6860  00DF66  6E06               	movwf	___awmod@sign,c
  6861  00DF68  AE02               	btfss	___awmod@dividend+1,7,c
  6862  00DF6A  D007               	goto	l3063
  6863  00DF6C  6C01               	negf	___awmod@dividend,c
  6864  00DF6E  1E02               	comf	___awmod@dividend+1,f,c
  6865  00DF70  B0D8               	btfsc	status,0,c
  6866  00DF72  2A02               	incf	___awmod@dividend+1,f,c
  6867  00DF74  0E01               	movlw	1
  6868  00DF76  6E06               	movwf	___awmod@sign,c
  6869  00DF78  D000               	goto	l3063
  6870  00DF7A                     l3063:
  6871  00DF7A  AE04               	btfss	___awmod@divisor+1,7,c
  6872  00DF7C  D005               	goto	l3067
  6873  00DF7E  6C03               	negf	___awmod@divisor,c
  6874  00DF80  1E04               	comf	___awmod@divisor+1,f,c
  6875  00DF82  B0D8               	btfsc	status,0,c
  6876  00DF84  2A04               	incf	___awmod@divisor+1,f,c
  6877  00DF86  D000               	goto	l3067
  6878  00DF88                     l3067:
  6879  00DF88  5003               	movf	___awmod@divisor,w,c
  6880  00DF8A  1004               	iorwf	___awmod@divisor+1,w,c
  6881  00DF8C  B4D8               	btfsc	status,2,c
  6882  00DF8E  D01D               	goto	l3083
  6883  00DF90  0E01               	movlw	1
  6884  00DF92  6E05               	movwf	___awmod@counter,c
  6885  00DF94  D005               	goto	l3073
  6886  00DF96                     l3071:
  6887  00DF96  90D8               	bcf	status,0,c
  6888  00DF98  3603               	rlcf	___awmod@divisor,f,c
  6889  00DF9A  3604               	rlcf	___awmod@divisor+1,f,c
  6890  00DF9C  2A05               	incf	___awmod@counter,f,c
  6891  00DF9E  D000               	goto	l3073
  6892  00DFA0                     l3073:
  6893  00DFA0  BE04               	btfsc	___awmod@divisor+1,7,c
  6894  00DFA2  D002               	goto	l3075
  6895  00DFA4  D7F8               	goto	l3071
  6896  00DFA6  D000               	goto	l3075
  6897  00DFA8                     l3075:
  6898  00DFA8  5003               	movf	___awmod@divisor,w,c
  6899  00DFAA  5C01               	subwf	___awmod@dividend,w,c
  6900  00DFAC  5004               	movf	___awmod@divisor+1,w,c
  6901  00DFAE  5802               	subwfb	___awmod@dividend+1,w,c
  6902  00DFB0  A0D8               	btfss	status,0,c
  6903  00DFB2  D005               	goto	l3079
  6904  00DFB4  5003               	movf	___awmod@divisor,w,c
  6905  00DFB6  5E01               	subwf	___awmod@dividend,f,c
  6906  00DFB8  5004               	movf	___awmod@divisor+1,w,c
  6907  00DFBA  5A02               	subwfb	___awmod@dividend+1,f,c
  6908  00DFBC  D000               	goto	l3079
  6909  00DFBE                     l3079:
  6910  00DFBE  90D8               	bcf	status,0,c
  6911  00DFC0  3204               	rrcf	___awmod@divisor+1,f,c
  6912  00DFC2  3203               	rrcf	___awmod@divisor,f,c
  6913  00DFC4  2E05               	decfsz	___awmod@counter,f,c
  6914  00DFC6  D7F0               	goto	l3075
  6915  00DFC8  D000               	goto	l3083
  6916  00DFCA                     l3083:
  6917  00DFCA  5006               	movf	___awmod@sign,w,c
  6918  00DFCC  B4D8               	btfsc	status,2,c
  6919  00DFCE  D005               	goto	l3087
  6920  00DFD0  6C01               	negf	___awmod@dividend,c
  6921  00DFD2  1E02               	comf	___awmod@dividend+1,f,c
  6922  00DFD4  B0D8               	btfsc	status,0,c
  6923  00DFD6  2A02               	incf	___awmod@dividend+1,f,c
  6924  00DFD8  D000               	goto	l3087
  6925  00DFDA                     l3087:
  6926  00DFDA  C001  F001         	movff	___awmod@dividend,?___awmod
  6927  00DFDE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  6928  00DFE2  D000               	goto	l736
  6929  00DFE4                     l736:
  6930  00DFE4  0012               	return		;funcret
  6931  00DFE6                     __end_of___awmod:
  6932                           	opt stack 0
  6933                           tblptru	equ	0xFF8
  6934                           tblptrh	equ	0xFF7
  6935                           tblptrl	equ	0xFF6
  6936                           tablat	equ	0xFF5
  6937                           prodl	equ	0xFF3
  6938                           postinc0	equ	0xFEE
  6939                           wreg	equ	0xFE8
  6940                           postdec1	equ	0xFE5
  6941                           fsr1l	equ	0xFE1
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function ___awdiv *****************
  6945 ;; Defined at:
  6946 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  dividend        2    0[COMRAM] int 
  6949 ;;  divisor         2    2[COMRAM] int 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;  quotient        2    6[COMRAM] int 
  6952 ;;  sign            1    5[COMRAM] unsigned char 
  6953 ;;  counter         1    4[COMRAM] unsigned char 
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  2    0[COMRAM] int 
  6956 ;; Registers used:
  6957 ;;		wreg, status,2, status,0
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;Total ram usage:        8 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; This function calls:
  6970 ;;		Nothing
  6971 ;; This function is called by:
  6972 ;;		_update_LCD_count
  6973 ;;		_update_LCD_PED_Count
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           	psect	text32
  6978  00E298                     __ptext32:
  6979                           	opt stack 0
  6980  00E298                     ___awdiv:
  6981                           	opt stack 27
  6982                           
  6983                           ;incstack = 0
  6984  00E298  0E00               	movlw	0
  6985  00E29A  6E06               	movwf	___awdiv@sign,c
  6986  00E29C  AE04               	btfss	___awdiv@divisor+1,7,c
  6987  00E29E  D007               	goto	l3019
  6988  00E2A0  6C03               	negf	___awdiv@divisor,c
  6989  00E2A2  1E04               	comf	___awdiv@divisor+1,f,c
  6990  00E2A4  B0D8               	btfsc	status,0,c
  6991  00E2A6  2A04               	incf	___awdiv@divisor+1,f,c
  6992  00E2A8  0E01               	movlw	1
  6993  00E2AA  6E06               	movwf	___awdiv@sign,c
  6994  00E2AC  D000               	goto	l3019
  6995  00E2AE                     l3019:
  6996  00E2AE  AE02               	btfss	___awdiv@dividend+1,7,c
  6997  00E2B0  D007               	goto	l3025
  6998  00E2B2  6C01               	negf	___awdiv@dividend,c
  6999  00E2B4  1E02               	comf	___awdiv@dividend+1,f,c
  7000  00E2B6  B0D8               	btfsc	status,0,c
  7001  00E2B8  2A02               	incf	___awdiv@dividend+1,f,c
  7002  00E2BA  0E01               	movlw	1
  7003  00E2BC  1A06               	xorwf	___awdiv@sign,f,c
  7004  00E2BE  D000               	goto	l3025
  7005  00E2C0                     l3025:
  7006  00E2C0  0E00               	movlw	0
  7007  00E2C2  6E08               	movwf	___awdiv@quotient+1,c
  7008  00E2C4  0E00               	movlw	0
  7009  00E2C6  6E07               	movwf	___awdiv@quotient,c
  7010  00E2C8  5003               	movf	___awdiv@divisor,w,c
  7011  00E2CA  1004               	iorwf	___awdiv@divisor+1,w,c
  7012  00E2CC  B4D8               	btfsc	status,2,c
  7013  00E2CE  D021               	goto	l3047
  7014  00E2D0  0E01               	movlw	1
  7015  00E2D2  6E05               	movwf	___awdiv@counter,c
  7016  00E2D4  D005               	goto	l3033
  7017  00E2D6                     l3031:
  7018  00E2D6  90D8               	bcf	status,0,c
  7019  00E2D8  3603               	rlcf	___awdiv@divisor,f,c
  7020  00E2DA  3604               	rlcf	___awdiv@divisor+1,f,c
  7021  00E2DC  2A05               	incf	___awdiv@counter,f,c
  7022  00E2DE  D000               	goto	l3033
  7023  00E2E0                     l3033:
  7024  00E2E0  BE04               	btfsc	___awdiv@divisor+1,7,c
  7025  00E2E2  D002               	goto	l3035
  7026  00E2E4  D7F8               	goto	l3031
  7027  00E2E6  D000               	goto	l3035
  7028  00E2E8                     l3035:
  7029  00E2E8  90D8               	bcf	status,0,c
  7030  00E2EA  3607               	rlcf	___awdiv@quotient,f,c
  7031  00E2EC  3608               	rlcf	___awdiv@quotient+1,f,c
  7032  00E2EE  5003               	movf	___awdiv@divisor,w,c
  7033  00E2F0  5C01               	subwf	___awdiv@dividend,w,c
  7034  00E2F2  5004               	movf	___awdiv@divisor+1,w,c
  7035  00E2F4  5802               	subwfb	___awdiv@dividend+1,w,c
  7036  00E2F6  A0D8               	btfss	status,0,c
  7037  00E2F8  D006               	goto	l3043
  7038  00E2FA  5003               	movf	___awdiv@divisor,w,c
  7039  00E2FC  5E01               	subwf	___awdiv@dividend,f,c
  7040  00E2FE  5004               	movf	___awdiv@divisor+1,w,c
  7041  00E300  5A02               	subwfb	___awdiv@dividend+1,f,c
  7042  00E302  8007               	bsf	___awdiv@quotient,0,c
  7043  00E304  D000               	goto	l3043
  7044  00E306                     l3043:
  7045  00E306  90D8               	bcf	status,0,c
  7046  00E308  3204               	rrcf	___awdiv@divisor+1,f,c
  7047  00E30A  3203               	rrcf	___awdiv@divisor,f,c
  7048  00E30C  2E05               	decfsz	___awdiv@counter,f,c
  7049  00E30E  D7EC               	goto	l3035
  7050  00E310  D000               	goto	l3047
  7051  00E312                     l3047:
  7052  00E312  5006               	movf	___awdiv@sign,w,c
  7053  00E314  B4D8               	btfsc	status,2,c
  7054  00E316  D005               	goto	l3051
  7055  00E318  6C07               	negf	___awdiv@quotient,c
  7056  00E31A  1E08               	comf	___awdiv@quotient+1,f,c
  7057  00E31C  B0D8               	btfsc	status,0,c
  7058  00E31E  2A08               	incf	___awdiv@quotient+1,f,c
  7059  00E320  D000               	goto	l3051
  7060  00E322                     l3051:
  7061  00E322  C007  F001         	movff	___awdiv@quotient,?___awdiv
  7062  00E326  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  7063  00E32A  D000               	goto	l723
  7064  00E32C                     l723:
  7065  00E32C  0012               	return		;funcret
  7066  00E32E                     __end_of___awdiv:
  7067                           	opt stack 0
  7068                           tblptru	equ	0xFF8
  7069                           tblptrh	equ	0xFF7
  7070                           tblptrl	equ	0xFF6
  7071                           tablat	equ	0xFF5
  7072                           prodl	equ	0xFF3
  7073                           postinc0	equ	0xFEE
  7074                           wreg	equ	0xFE8
  7075                           postdec1	equ	0xFE5
  7076                           fsr1l	equ	0xFE1
  7077                           status	equ	0xFD8
  7078                           
  7079 ;; *************** function _Wait_One_Second_With_Beep *****************
  7080 ;; Defined at:
  7081 ;;		line 515 in file "Lab8pE.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;		None               void
  7088 ;; Registers used:
  7089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;Total ram usage:        0 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    8
  7102 ;; This function calls:
  7103 ;;		_Activate_Buzzer
  7104 ;;		_Deactivate_Buzzer
  7105 ;;		_Wait_Half_Second
  7106 ;;		_drawtext
  7107 ;;		_strcpy
  7108 ;;		_update_LCD_misc
  7109 ;; This function is called by:
  7110 ;;		_PED_Control
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           	psect	text33
  7115  00E178                     __ptext33:
  7116                           	opt stack 0
  7117  00E178                     _Wait_One_Second_With_Beep:
  7118                           	opt stack 20
  7119                           
  7120                           ;Lab8pE.c: 517: PORTDbits.RD7 = 1;
  7121                           
  7122                           ;incstack = 0
  7123  00E178  8E83               	bsf	3971,7,c	;volatile
  7124                           
  7125                           ;Lab8pE.c: 518: strcpy(txt,"*");
  7126  00E17A  C06C  F001         	movff	_txt,strcpy@to
  7127  00E17E  C06D  F002         	movff	_txt+1,strcpy@to+1
  7128  00E182  0EFD               	movlw	low STR_5
  7129  00E184  6E03               	movwf	strcpy@from,c
  7130  00E186  0EFF               	movlw	high STR_5
  7131  00E188  6E04               	movwf	strcpy@from+1,c
  7132  00E18A  EC72  F06D         	call	_strcpy	;wreg free
  7133                           
  7134                           ;Lab8pE.c: 519: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7135  00E18E  0E0A               	movlw	10
  7136  00E190  6E29               	movwf	drawtext@y,c
  7137  00E192  C06C  F02A         	movff	_txt,drawtext@_text
  7138  00E196  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  7139  00E19A  0EFF               	movlw	255
  7140  00E19C  6E2D               	movwf	drawtext@color+1,c
  7141  00E19E  682C               	setf	drawtext@color,c
  7142  00E1A0  0E00               	movlw	0
  7143  00E1A2  6E2F               	movwf	drawtext@bg+1,c
  7144  00E1A4  0E00               	movlw	0
  7145  00E1A6  6E2E               	movwf	drawtext@bg,c
  7146  00E1A8  0E01               	movlw	1
  7147  00E1AA  6E30               	movwf	drawtext@size,c
  7148  00E1AC  0E78               	movlw	120
  7149  00E1AE  ECD6  F073         	call	_drawtext
  7150                           
  7151                           ;Lab8pE.c: 520: Activate_Buzzer();
  7152  00E1B2  ECA9  F06C         	call	_Activate_Buzzer	;wreg free
  7153                           
  7154                           ;Lab8pE.c: 521: Wait_Half_Second();
  7155  00E1B6  ECDA  F06C         	call	_Wait_Half_Second	;wreg free
  7156                           
  7157                           ;Lab8pE.c: 523: PORTDbits.RD7 = 0;
  7158  00E1BA  9E83               	bcf	3971,7,c	;volatile
  7159                           
  7160                           ;Lab8pE.c: 524: strcpy(txt," ");
  7161  00E1BC  C06C  F001         	movff	_txt,strcpy@to
  7162  00E1C0  C06D  F002         	movff	_txt+1,strcpy@to+1
  7163  00E1C4  0EFB               	movlw	low STR_14
  7164  00E1C6  6E03               	movwf	strcpy@from,c
  7165  00E1C8  0EFF               	movlw	high STR_14
  7166  00E1CA  6E04               	movwf	strcpy@from+1,c
  7167  00E1CC  EC72  F06D         	call	_strcpy	;wreg free
  7168                           
  7169                           ;Lab8pE.c: 525: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7170  00E1D0  0E0A               	movlw	10
  7171  00E1D2  6E29               	movwf	drawtext@y,c
  7172  00E1D4  C06C  F02A         	movff	_txt,drawtext@_text
  7173  00E1D8  C06D  F02B         	movff	_txt+1,drawtext@_text+1
  7174  00E1DC  0EFF               	movlw	255
  7175  00E1DE  6E2D               	movwf	drawtext@color+1,c
  7176  00E1E0  682C               	setf	drawtext@color,c
  7177  00E1E2  0E00               	movlw	0
  7178  00E1E4  6E2F               	movwf	drawtext@bg+1,c
  7179  00E1E6  0E00               	movlw	0
  7180  00E1E8  6E2E               	movwf	drawtext@bg,c
  7181  00E1EA  0E01               	movlw	1
  7182  00E1EC  6E30               	movwf	drawtext@size,c
  7183  00E1EE  0E78               	movlw	120
  7184  00E1F0  ECD6  F073         	call	_drawtext
  7185                           
  7186                           ;Lab8pE.c: 526: Deactivate_Buzzer();
  7187  00E1F4  EC8E  F06C         	call	_Deactivate_Buzzer	;wreg free
  7188                           
  7189                           ;Lab8pE.c: 527: Wait_Half_Second();
  7190  00E1F8  ECDA  F06C         	call	_Wait_Half_Second	;wreg free
  7191                           
  7192                           ;Lab8pE.c: 528: update_LCD_misc();
  7193  00E1FC  EC94  F078         	call	_update_LCD_misc	;wreg free
  7194  00E200  0012               	return		;funcret
  7195  00E202                     __end_of_Wait_One_Second_With_Beep:
  7196                           	opt stack 0
  7197                           tblptru	equ	0xFF8
  7198                           tblptrh	equ	0xFF7
  7199                           tblptrl	equ	0xFF6
  7200                           tablat	equ	0xFF5
  7201                           prodl	equ	0xFF3
  7202                           postinc0	equ	0xFEE
  7203                           wreg	equ	0xFE8
  7204                           postdec1	equ	0xFE5
  7205                           fsr1l	equ	0xFE1
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _update_LCD_misc *****************
  7209 ;; Defined at:
  7210 ;;		line 648 in file "Lab8pE.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  nStep           2   57[COMRAM] int 
  7215 ;;  ch              1   59[COMRAM] unsigned char 
  7216 ;; Return value:  Size  Location     Type
  7217 ;;		None               void
  7218 ;; Registers used:
  7219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7228 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7229 ;;Total ram usage:        3 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    7
  7232 ;; This function calls:
  7233 ;;		___awtoft
  7234 ;;		___ftdiv
  7235 ;;		___ftge
  7236 ;;		___wmul
  7237 ;;		_drawtext
  7238 ;;		_get_full_ADC
  7239 ;; This function is called by:
  7240 ;;		_Wait_One_Second
  7241 ;;		_Wait_One_Second_With_Beep
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text34
  7246  00F128                     __ptext34:
  7247                           	opt stack 0
  7248  00F128                     _update_LCD_misc:
  7249                           	opt stack 20
  7250                           
  7251                           ;Lab8pE.c: 650: char ch = 0;
  7252                           
  7253                           ;incstack = 0
  7254  00F128  0E00               	movlw	0
  7255  00F12A  6E3C               	movwf	update_LCD_misc@ch,c
  7256                           
  7257                           ;Lab8pE.c: 651: ADCON0 = ch*4+1;
  7258  00F12C  503C               	movf	update_LCD_misc@ch,w,c
  7259  00F12E  0D04               	mullw	4
  7260  00F130  28F3               	incf	prodl,w,c
  7261  00F132  6EC2               	movwf	4034,c	;volatile
  7262                           
  7263                           ;Lab8pE.c: 652: int nStep = get_full_ADC();
  7264  00F134  EC07  F06D         	call	_get_full_ADC	;wreg free
  7265  00F138  C001  F03A         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7266  00F13C  C002  F03B         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7267                           
  7268                           ;Lab8pE.c: 653: volt = nStep * 5 /1024.0;
  7269  00F140  C03A  F001         	movff	update_LCD_misc@nStep,___wmul@multiplier
  7270  00F144  C03B  F002         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  7271  00F148  0E00               	movlw	0
  7272  00F14A  6E04               	movwf	___wmul@multiplicand+1,c
  7273  00F14C  0E05               	movlw	5
  7274  00F14E  6E03               	movwf	___wmul@multiplicand,c
  7275  00F150  EC1A  F06D         	call	___wmul	;wreg free
  7276  00F154  C001  F009         	movff	?___wmul,___awtoft@c
  7277  00F158  C002  F00A         	movff	?___wmul+1,___awtoft@c+1
  7278  00F15C  ECA4  F06D         	call	___awtoft	;wreg free
  7279  00F160  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  7280  00F164  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  7281  00F168  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  7282  00F16C  0E00               	movlw	0
  7283  00F16E  6E10               	movwf	___ftdiv@f2,c
  7284  00F170  0E80               	movlw	128
  7285  00F172  6E11               	movwf	___ftdiv@f2+1,c
  7286  00F174  0E44               	movlw	68
  7287  00F176  6E12               	movwf	___ftdiv@f2+2,c
  7288  00F178  EC45  F074         	call	___ftdiv	;wreg free
  7289  00F17C  C00D  F065         	movff	?___ftdiv,_volt
  7290  00F180  C00E  F066         	movff	?___ftdiv+1,_volt+1
  7291  00F184  C00F  F067         	movff	?___ftdiv+2,_volt+2
  7292                           
  7293                           ;Lab8pE.c: 654: SW_MODE = volt < 3.5 ? 1:0;
  7294  00F188  C065  F001         	movff	_volt,___ftge@ff1
  7295  00F18C  C066  F002         	movff	_volt+1,___ftge@ff1+1
  7296  00F190  C067  F003         	movff	_volt+2,___ftge@ff1+2
  7297  00F194  0E00               	movlw	0
  7298  00F196  6E04               	movwf	___ftge@ff2,c
  7299  00F198  0E60               	movlw	96
  7300  00F19A  6E05               	movwf	___ftge@ff2+1,c
  7301  00F19C  0E40               	movlw	64
  7302  00F19E  6E06               	movwf	___ftge@ff2+2,c
  7303  00F1A0  EC01  F071         	call	___ftge	;wreg free
  7304  00F1A4  B0D8               	btfsc	status,0,c
  7305  00F1A6  D002               	goto	u1840
  7306  00F1A8  0E01               	movlw	1
  7307  00F1AA  D001               	goto	u1850
  7308  00F1AC                     u1840:
  7309  00F1AC  0E00               	movlw	0
  7310  00F1AE                     u1850:
  7311  00F1AE  6E74               	movwf	_SW_MODE,c
  7312                           
  7313                           ;Lab8pE.c: 656: SW_NSPED = PORTAbits.RA3;
  7314  00F1B0  0E00               	movlw	0
  7315  00F1B2  B680               	btfsc	3968,3,c	;volatile
  7316  00F1B4  0E01               	movlw	1
  7317  00F1B6  6E76               	movwf	_SW_NSPED,c
  7318                           
  7319                           ;Lab8pE.c: 657: SW_NSLT = PORTAbits.RA1;
  7320  00F1B8  0E00               	movlw	0
  7321  00F1BA  B280               	btfsc	3968,1,c	;volatile
  7322  00F1BC  0E01               	movlw	1
  7323  00F1BE  6E75               	movwf	_SW_NSLT,c
  7324                           
  7325                           ;Lab8pE.c: 658: SW_EWPED = PORTAbits.RA4;
  7326  00F1C0  0E00               	movlw	0
  7327  00F1C2  B880               	btfsc	3968,4,c	;volatile
  7328  00F1C4  0E01               	movlw	1
  7329  00F1C6  6E73               	movwf	_SW_EWPED,c
  7330                           
  7331                           ;Lab8pE.c: 659: SW_EWLT = PORTAbits.RA2;
  7332  00F1C8  0E00               	movlw	0
  7333  00F1CA  B480               	btfsc	3968,2,c	;volatile
  7334  00F1CC  0E01               	movlw	1
  7335  00F1CE  6E72               	movwf	_SW_EWLT,c
  7336                           
  7337                           ;Lab8pE.c: 661: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  7338  00F1D0  5076               	movf	_SW_NSPED,w,c
  7339  00F1D2  A4D8               	btfss	status,2,c
  7340  00F1D4  D002               	goto	l2977
  7341  00F1D6  0E30               	movlw	48
  7342  00F1D8  D001               	goto	L9
  7343  00F1DA                     l2977:
  7344  00F1DA  0E31               	movlw	49
  7345  00F1DC                     L9:
  7346  00F1DC  6E63               	movwf	_SW_NSPED_Txt,c
  7347                           
  7348                           ;Lab8pE.c: 662: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  7349  00F1DE  5075               	movf	_SW_NSLT,w,c
  7350  00F1E0  A4D8               	btfss	status,2,c
  7351  00F1E2  D002               	goto	l2981
  7352  00F1E4  0E30               	movlw	48
  7353  00F1E6  D001               	goto	L10
  7354  00F1E8                     l2981:
  7355  00F1E8  0E31               	movlw	49
  7356  00F1EA                     L10:
  7357  00F1EA  6E61               	movwf	_SW_NSLT_Txt,c
  7358                           
  7359                           ;Lab8pE.c: 663: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  7360  00F1EC  5073               	movf	_SW_EWPED,w,c
  7361  00F1EE  A4D8               	btfss	status,2,c
  7362  00F1F0  D002               	goto	l2985
  7363  00F1F2  0E30               	movlw	48
  7364  00F1F4  D001               	goto	L11
  7365  00F1F6                     l2985:
  7366  00F1F6  0E31               	movlw	49
  7367  00F1F8                     L11:
  7368  00F1F8  6E5D               	movwf	_SW_EWPED_Txt,c
  7369                           
  7370                           ;Lab8pE.c: 664: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  7371  00F1FA  5072               	movf	_SW_EWLT,w,c
  7372  00F1FC  A4D8               	btfss	status,2,c
  7373  00F1FE  D002               	goto	l2989
  7374  00F200  0E30               	movlw	48
  7375  00F202  D001               	goto	L12
  7376  00F204                     l2989:
  7377  00F204  0E31               	movlw	49
  7378  00F206                     L12:
  7379  00F206  6E5B               	movwf	_SW_EWLT_Txt,c
  7380                           
  7381                           ;Lab8pE.c: 665: if (SW_MODE == 0) SW_MODE_Txt[0] = 'N'; else SW_MODE_Txt[0] = 'D';
  7382  00F208  5074               	movf	_SW_MODE,w,c
  7383  00F20A  A4D8               	btfss	status,2,c
  7384  00F20C  D002               	goto	l2993
  7385  00F20E  0E4E               	movlw	78
  7386  00F210  D001               	goto	L13
  7387  00F212                     l2993:
  7388  00F212  0E44               	movlw	68
  7389  00F214                     L13:
  7390  00F214  6E5F               	movwf	_SW_MODE_Txt,c
  7391  00F216  D000               	goto	l2995
  7392  00F218                     l2995:
  7393                           
  7394                           ;Lab8pE.c: 667: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  7395  00F218  0E0A               	movlw	10
  7396  00F21A  6E29               	movwf	drawtext@y,c
  7397  00F21C  0E55               	movlw	low _Act_Mode_Txt
  7398  00F21E  6E2A               	movwf	drawtext@_text,c
  7399  00F220  0E00               	movlw	high _Act_Mode_Txt
  7400  00F222  6E2B               	movwf	drawtext@_text+1,c
  7401  00F224  0EFF               	movlw	255
  7402  00F226  6E2D               	movwf	drawtext@color+1,c
  7403  00F228  682C               	setf	drawtext@color,c
  7404  00F22A  0E00               	movlw	0
  7405  00F22C  6E2F               	movwf	drawtext@bg+1,c
  7406  00F22E  0E00               	movlw	0
  7407  00F230  6E2E               	movwf	drawtext@bg,c
  7408  00F232  0E01               	movlw	1
  7409  00F234  6E30               	movwf	drawtext@size,c
  7410  00F236  0E23               	movlw	35
  7411  00F238  ECD6  F073         	call	_drawtext
  7412                           
  7413                           ;Lab8pE.c: 668: drawtext(70,10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  7414  00F23C  0E0A               	movlw	10
  7415  00F23E  6E29               	movwf	drawtext@y,c
  7416  00F240  0E57               	movlw	low _FlashingR_Txt
  7417  00F242  6E2A               	movwf	drawtext@_text,c
  7418  00F244  0E00               	movlw	high _FlashingR_Txt
  7419  00F246  6E2B               	movwf	drawtext@_text+1,c
  7420  00F248  0EFF               	movlw	255
  7421  00F24A  6E2D               	movwf	drawtext@color+1,c
  7422  00F24C  682C               	setf	drawtext@color,c
  7423  00F24E  0E00               	movlw	0
  7424  00F250  6E2F               	movwf	drawtext@bg+1,c
  7425  00F252  0E00               	movlw	0
  7426  00F254  6E2E               	movwf	drawtext@bg,c
  7427  00F256  0E01               	movlw	1
  7428  00F258  6E30               	movwf	drawtext@size,c
  7429  00F25A  0E46               	movlw	70
  7430  00F25C  ECD6  F073         	call	_drawtext
  7431                           
  7432                           ;Lab8pE.c: 669: drawtext(100,10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  7433  00F260  0E0A               	movlw	10
  7434  00F262  6E29               	movwf	drawtext@y,c
  7435  00F264  0E59               	movlw	low _FlashingS_Txt
  7436  00F266  6E2A               	movwf	drawtext@_text,c
  7437  00F268  0E00               	movlw	high _FlashingS_Txt
  7438  00F26A  6E2B               	movwf	drawtext@_text+1,c
  7439  00F26C  0EFF               	movlw	255
  7440  00F26E  6E2D               	movwf	drawtext@color+1,c
  7441  00F270  682C               	setf	drawtext@color,c
  7442  00F272  0E00               	movlw	0
  7443  00F274  6E2F               	movwf	drawtext@bg+1,c
  7444  00F276  0E00               	movlw	0
  7445  00F278  6E2E               	movwf	drawtext@bg,c
  7446  00F27A  0E01               	movlw	1
  7447  00F27C  6E30               	movwf	drawtext@size,c
  7448  00F27E  0E64               	movlw	100
  7449  00F280  ECD6  F073         	call	_drawtext
  7450                           
  7451                           ;Lab8pE.c: 670: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  7452  00F284  0E95               	movlw	149
  7453  00F286  6E29               	movwf	drawtext@y,c
  7454  00F288  0E63               	movlw	low _SW_NSPED_Txt
  7455  00F28A  6E2A               	movwf	drawtext@_text,c
  7456  00F28C  0E00               	movlw	high _SW_NSPED_Txt
  7457  00F28E  6E2B               	movwf	drawtext@_text+1,c
  7458  00F290  0EFF               	movlw	255
  7459  00F292  6E2D               	movwf	drawtext@color+1,c
  7460  00F294  682C               	setf	drawtext@color,c
  7461  00F296  0E00               	movlw	0
  7462  00F298  6E2F               	movwf	drawtext@bg+1,c
  7463  00F29A  0E00               	movlw	0
  7464  00F29C  6E2E               	movwf	drawtext@bg,c
  7465  00F29E  0E01               	movlw	1
  7466  00F2A0  6E30               	movwf	drawtext@size,c
  7467  00F2A2  0E06               	movlw	6
  7468  00F2A4  ECD6  F073         	call	_drawtext
  7469                           
  7470                           ;Lab8pE.c: 671: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  7471  00F2A8  0E95               	movlw	149
  7472  00F2AA  6E29               	movwf	drawtext@y,c
  7473  00F2AC  0E61               	movlw	low _SW_NSLT_Txt
  7474  00F2AE  6E2A               	movwf	drawtext@_text,c
  7475  00F2B0  0E00               	movlw	high _SW_NSLT_Txt
  7476  00F2B2  6E2B               	movwf	drawtext@_text+1,c
  7477  00F2B4  0EFF               	movlw	255
  7478  00F2B6  6E2D               	movwf	drawtext@color+1,c
  7479  00F2B8  682C               	setf	drawtext@color,c
  7480  00F2BA  0E00               	movlw	0
  7481  00F2BC  6E2F               	movwf	drawtext@bg+1,c
  7482  00F2BE  0E00               	movlw	0
  7483  00F2C0  6E2E               	movwf	drawtext@bg,c
  7484  00F2C2  0E01               	movlw	1
  7485  00F2C4  6E30               	movwf	drawtext@size,c
  7486  00F2C6  0E20               	movlw	32
  7487  00F2C8  ECD6  F073         	call	_drawtext
  7488                           
  7489                           ;Lab8pE.c: 672: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  7490  00F2CC  0E95               	movlw	149
  7491  00F2CE  6E29               	movwf	drawtext@y,c
  7492  00F2D0  0E5D               	movlw	low _SW_EWPED_Txt
  7493  00F2D2  6E2A               	movwf	drawtext@_text,c
  7494  00F2D4  0E00               	movlw	high _SW_EWPED_Txt
  7495  00F2D6  6E2B               	movwf	drawtext@_text+1,c
  7496  00F2D8  0EFF               	movlw	255
  7497  00F2DA  6E2D               	movwf	drawtext@color+1,c
  7498  00F2DC  682C               	setf	drawtext@color,c
  7499  00F2DE  0E00               	movlw	0
  7500  00F2E0  6E2F               	movwf	drawtext@bg+1,c
  7501  00F2E2  0E00               	movlw	0
  7502  00F2E4  6E2E               	movwf	drawtext@bg,c
  7503  00F2E6  0E01               	movlw	1
  7504  00F2E8  6E30               	movwf	drawtext@size,c
  7505  00F2EA  0E3A               	movlw	58
  7506  00F2EC  ECD6  F073         	call	_drawtext
  7507                           
  7508                           ;Lab8pE.c: 673: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  7509  00F2F0  0E95               	movlw	149
  7510  00F2F2  6E29               	movwf	drawtext@y,c
  7511  00F2F4  0E5B               	movlw	low _SW_EWLT_Txt
  7512  00F2F6  6E2A               	movwf	drawtext@_text,c
  7513  00F2F8  0E00               	movlw	high _SW_EWLT_Txt
  7514  00F2FA  6E2B               	movwf	drawtext@_text+1,c
  7515  00F2FC  0EFF               	movlw	255
  7516  00F2FE  6E2D               	movwf	drawtext@color+1,c
  7517  00F300  682C               	setf	drawtext@color,c
  7518  00F302  0E00               	movlw	0
  7519  00F304  6E2F               	movwf	drawtext@bg+1,c
  7520  00F306  0E00               	movlw	0
  7521  00F308  6E2E               	movwf	drawtext@bg,c
  7522  00F30A  0E01               	movlw	1
  7523  00F30C  6E30               	movwf	drawtext@size,c
  7524  00F30E  0E57               	movlw	87
  7525  00F310  ECD6  F073         	call	_drawtext
  7526                           
  7527                           ;Lab8pE.c: 674: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  7528  00F314  0E95               	movlw	149
  7529  00F316  6E29               	movwf	drawtext@y,c
  7530  00F318  0E5F               	movlw	low _SW_MODE_Txt
  7531  00F31A  6E2A               	movwf	drawtext@_text,c
  7532  00F31C  0E00               	movlw	high _SW_MODE_Txt
  7533  00F31E  6E2B               	movwf	drawtext@_text+1,c
  7534  00F320  0EFF               	movlw	255
  7535  00F322  6E2D               	movwf	drawtext@color+1,c
  7536  00F324  682C               	setf	drawtext@color,c
  7537  00F326  0E00               	movlw	0
  7538  00F328  6E2F               	movwf	drawtext@bg+1,c
  7539  00F32A  0E00               	movlw	0
  7540  00F32C  6E2E               	movwf	drawtext@bg,c
  7541  00F32E  0E01               	movlw	1
  7542  00F330  6E30               	movwf	drawtext@size,c
  7543  00F332  0E70               	movlw	112
  7544  00F334  ECD6  F073         	call	_drawtext
  7545  00F338  0012               	return		;funcret
  7546  00F33A                     __end_of_update_LCD_misc:
  7547                           	opt stack 0
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           prodl	equ	0xFF3
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           postdec1	equ	0xFE5
  7556                           fsr1l	equ	0xFE1
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function _get_full_ADC *****************
  7560 ;; Defined at:
  7561 ;;		line 308 in file "Lab8pE.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;  result          2    4[COMRAM] unsigned int 
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  2    0[COMRAM] unsigned int 
  7568 ;; Registers used:
  7569 ;;		wreg, status,2, status,0
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7575 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;Total ram usage:        6 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; This function calls:
  7582 ;;		Nothing
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;;		_update_LCD_misc
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text35
  7590  00DA0E                     __ptext35:
  7591                           	opt stack 0
  7592  00DA0E                     _get_full_ADC:
  7593                           	opt stack 30
  7594                           
  7595                           ;Lab8pE.c: 310: unsigned int result;
  7596                           ;Lab8pE.c: 311: ADCON0bits.GO=1;
  7597                           
  7598                           ;incstack = 0
  7599  00DA0E  82C2               	bsf	4034,1,c	;volatile
  7600                           
  7601                           ;Lab8pE.c: 312: while(ADCON0bits.DONE==1);
  7602  00DA10  D000               	goto	l376
  7603  00DA12                     l376:
  7604  00DA12  B2C2               	btfsc	4034,1,c	;volatile
  7605  00DA14  D7FE               	goto	l376
  7606                           
  7607                           ;Lab8pE.c: 313: result = (ADRESH * 0x100) + ADRESL;
  7608  00DA16  50C4               	movf	4036,w,c	;volatile
  7609  00DA18  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  7610  00DA1A  6A03               	clrf	??_get_full_ADC& (0+255),c
  7611  00DA1C  50C3               	movf	4035,w,c	;volatile
  7612  00DA1E  2403               	addwf	??_get_full_ADC,w,c
  7613  00DA20  6E05               	movwf	get_full_ADC@result,c
  7614  00DA22  0E00               	movlw	0
  7615  00DA24  2004               	addwfc	??_get_full_ADC+1,w,c
  7616  00DA26  6E06               	movwf	get_full_ADC@result+1,c
  7617                           
  7618                           ;Lab8pE.c: 315: return result;
  7619  00DA28  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  7620  00DA2C  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  7621  00DA30  D000               	goto	l379
  7622  00DA32                     l379:
  7623  00DA32  0012               	return		;funcret
  7624  00DA34                     __end_of_get_full_ADC:
  7625                           	opt stack 0
  7626                           tblptru	equ	0xFF8
  7627                           tblptrh	equ	0xFF7
  7628                           tblptrl	equ	0xFF6
  7629                           tablat	equ	0xFF5
  7630                           prodl	equ	0xFF3
  7631                           postinc0	equ	0xFEE
  7632                           wreg	equ	0xFE8
  7633                           postdec1	equ	0xFE5
  7634                           fsr1l	equ	0xFE1
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _drawtext *****************
  7638 ;; Defined at:
  7639 ;;		line 507 in file "ST7735_TFT.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  x               1    wreg     unsigned char 
  7642 ;;  y               1   40[COMRAM] unsigned char 
  7643 ;;  _text           2   41[COMRAM] PTR unsigned char 
  7644 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  7645 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  7646 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  7647 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7648 ;;  color           2   43[COMRAM] unsigned int 
  7649 ;;  bg              2   45[COMRAM] unsigned int 
  7650 ;;  size            1   47[COMRAM] unsigned char 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;  x               1   52[COMRAM] unsigned char 
  7653 ;;  i               2   53[COMRAM] unsigned int 
  7654 ;;  textsize        2   50[COMRAM] unsigned int 
  7655 ;;  cursor_x        1   56[COMRAM] unsigned char 
  7656 ;;  cursor_y        1   55[COMRAM] unsigned char 
  7657 ;; Return value:  Size  Location     Type
  7658 ;;		None               void
  7659 ;; Registers used:
  7660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7666 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7670 ;;Total ram usage:       17 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    6
  7673 ;; This function calls:
  7674 ;;		_drawChar
  7675 ;;		_strlen
  7676 ;; This function is called by:
  7677 ;;		_Initialize_Screen
  7678 ;;		_Wait_One_Second
  7679 ;;		_Wait_One_Second_With_Beep
  7680 ;;		_update_LCD_count
  7681 ;;		_update_LCD_PED_Count
  7682 ;;		_update_LCD_misc
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text36
  7687  00E7AC                     __ptext36:
  7688                           	opt stack 0
  7689  00E7AC                     _drawtext:
  7690                           	opt stack 21
  7691                           
  7692                           ;incstack = 0
  7693                           ;drawtext@x stored from wreg
  7694  00E7AC  6E35               	movwf	drawtext@x,c
  7695                           
  7696                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
  7697                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
  7698                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
  7699  00E7AE  C035  F039         	movff	drawtext@x,drawtext@cursor_x
  7700  00E7B2  C029  F038         	movff	drawtext@y,drawtext@cursor_y
  7701                           
  7702                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
  7703  00E7B6  C02A  F001         	movff	drawtext@_text,strlen@s
  7704  00E7BA  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
  7705  00E7BE  ECC2  F06D         	call	_strlen	;wreg free
  7706  00E7C2  C001  F033         	movff	?_strlen,drawtext@textsize
  7707  00E7C6  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
  7708                           
  7709                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
  7710  00E7CA  0E00               	movlw	0
  7711  00E7CC  6E37               	movwf	drawtext@i+1,c
  7712  00E7CE  0E00               	movlw	0
  7713  00E7D0  6E36               	movwf	drawtext@i,c
  7714  00E7D2  D054               	goto	l2767
  7715  00E7D4                     l2741:
  7716                           
  7717                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
  7718  00E7D4  5042               	movf	_wrap,w,c
  7719  00E7D6  B4D8               	btfsc	status,2,c
  7720  00E7D8  D02C               	goto	l2757
  7721  00E7DA  5030               	movf	drawtext@size,w,c
  7722  00E7DC  0D05               	mullw	5
  7723  00E7DE  5039               	movf	drawtext@cursor_x,w,c
  7724  00E7E0  6E31               	movwf	??_drawtext& (0+255),c
  7725  00E7E2  6A32               	clrf	(??_drawtext+1)& (0+255),c
  7726  00E7E4  50F3               	movf	prodl,w,c
  7727  00E7E6  2631               	addwf	??_drawtext,f,c
  7728  00E7E8  50F4               	movf	prodh,w,c
  7729  00E7EA  2232               	addwfc	??_drawtext+1,f,c
  7730  00E7EC  BE32               	btfsc	??_drawtext+1,7,c
  7731  00E7EE  D021               	goto	l2757
  7732  00E7F0  5032               	movf	??_drawtext+1,w,c
  7733  00E7F2  E104               	bnz	u1610
  7734  00E7F4  0E81               	movlw	129
  7735  00E7F6  5C31               	subwf	??_drawtext,w,c
  7736  00E7F8  A0D8               	btfss	status,0,c
  7737  00E7FA  D01B               	goto	l2757
  7738  00E7FC                     u1610:
  7739                           
  7740                           ;ST7735_TFT.c: 515: cursor_x = 0;
  7741  00E7FC  0E00               	movlw	0
  7742  00E7FE  6E39               	movwf	drawtext@cursor_x,c
  7743                           
  7744                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
  7745  00E800  5030               	movf	drawtext@size,w,c
  7746  00E802  0D07               	mullw	7
  7747  00E804  50F3               	movf	prodl,w,c
  7748  00E806  2438               	addwf	drawtext@cursor_y,w,c
  7749  00E808  0F03               	addlw	3
  7750  00E80A  6E38               	movwf	drawtext@cursor_y,c
  7751                           
  7752                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
  7753  00E80C  0EA0               	movlw	160
  7754  00E80E  6438               	cpfsgt	drawtext@cursor_y,c
  7755  00E810  D003               	goto	l2753
  7756  00E812  0EA0               	movlw	160
  7757  00E814  6E38               	movwf	drawtext@cursor_y,c
  7758  00E816  D000               	goto	l2753
  7759  00E818                     l2753:
  7760                           
  7761                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
  7762  00E818  5036               	movf	drawtext@i,w,c
  7763  00E81A  242A               	addwf	drawtext@_text,w,c
  7764  00E81C  6ED9               	movwf	fsr2l,c
  7765  00E81E  5037               	movf	drawtext@i+1,w,c
  7766  00E820  202B               	addwfc	drawtext@_text+1,w,c
  7767  00E822  6EDA               	movwf	fsr2h,c
  7768  00E824  0E20               	movlw	32
  7769  00E826  18DE               	xorwf	postinc2,w,c
  7770  00E828  B4D8               	btfsc	status,2,c
  7771  00E82A  D025               	goto	l2765
  7772  00E82C  D002               	goto	l2757
  7773  00E82E  D023               	goto	l2765
  7774  00E830  D000               	goto	l2757
  7775  00E832                     l2757:
  7776                           
  7777                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  7778  00E832  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
  7779  00E836  5036               	movf	drawtext@i,w,c
  7780  00E838  242A               	addwf	drawtext@_text,w,c
  7781  00E83A  6ED9               	movwf	fsr2l,c
  7782  00E83C  5037               	movf	drawtext@i+1,w,c
  7783  00E83E  202B               	addwfc	drawtext@_text+1,w,c
  7784  00E840  6EDA               	movwf	fsr2h,c
  7785  00E842  50DF               	movf	indf2,w,c
  7786  00E844  6E1F               	movwf	drawChar@c,c
  7787  00E846  C02C  F020         	movff	drawtext@color,drawChar@color
  7788  00E84A  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
  7789  00E84E  C02E  F022         	movff	drawtext@bg,drawChar@bg
  7790  00E852  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
  7791  00E856  C030  F024         	movff	drawtext@size,drawChar@size
  7792  00E85A  5039               	movf	drawtext@cursor_x,w,c
  7793  00E85C  EC53  F076         	call	_drawChar
  7794                           
  7795                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
  7796  00E860  5030               	movf	drawtext@size,w,c
  7797  00E862  0D06               	mullw	6
  7798  00E864  50F3               	movf	prodl,w,c
  7799  00E866  2439               	addwf	drawtext@cursor_x,w,c
  7800  00E868  6E39               	movwf	drawtext@cursor_x,c
  7801                           
  7802                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
  7803  00E86A  0E80               	movlw	128
  7804  00E86C  6439               	cpfsgt	drawtext@cursor_x,c
  7805  00E86E  D003               	goto	l2765
  7806  00E870  0E80               	movlw	128
  7807  00E872  6E39               	movwf	drawtext@cursor_x,c
  7808  00E874  D000               	goto	l2765
  7809  00E876                     l2765:
  7810  00E876  4A36               	infsnz	drawtext@i,f,c
  7811  00E878  2A37               	incf	drawtext@i+1,f,c
  7812  00E87A  D000               	goto	l2767
  7813  00E87C                     l2767:
  7814  00E87C  5033               	movf	drawtext@textsize,w,c
  7815  00E87E  5C36               	subwf	drawtext@i,w,c
  7816  00E880  5034               	movf	drawtext@textsize+1,w,c
  7817  00E882  5837               	subwfb	drawtext@i+1,w,c
  7818  00E884  A0D8               	btfss	status,0,c
  7819  00E886  D7A6               	goto	l2741
  7820  00E888  0012               	return		;funcret
  7821  00E88A                     __end_of_drawtext:
  7822                           	opt stack 0
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodh	equ	0xFF4
  7828                           prodl	equ	0xFF3
  7829                           postinc0	equ	0xFEE
  7830                           wreg	equ	0xFE8
  7831                           postdec1	equ	0xFE5
  7832                           fsr1l	equ	0xFE1
  7833                           indf2	equ	0xFDF
  7834                           postinc2	equ	0xFDE
  7835                           fsr2h	equ	0xFDA
  7836                           fsr2l	equ	0xFD9
  7837                           status	equ	0xFD8
  7838                           
  7839 ;; *************** function _strlen *****************
  7840 ;; Defined at:
  7841 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  7842 ;; Parameters:    Size  Location     Type
  7843 ;;  s               2    0[COMRAM] PTR const unsigned char 
  7844 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  7845 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  7846 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  7847 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7848 ;; Auto vars:     Size  Location     Type
  7849 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  7850 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
  7851 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
  7852 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
  7853 ;;		 -> NS_Count(3), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  2    0[COMRAM] unsigned int 
  7856 ;; Registers used:
  7857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7858 ;; Tracked objects:
  7859 ;;		On entry : 0/0
  7860 ;;		On exit  : 0/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7863 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7864 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7865 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;Total ram usage:        6 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; This function calls:
  7870 ;;		Nothing
  7871 ;; This function is called by:
  7872 ;;		_drawtext
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           	psect	text37
  7877  00DB84                     __ptext37:
  7878                           	opt stack 0
  7879  00DB84                     _strlen:
  7880                           	opt stack 26
  7881                           
  7882                           ;incstack = 0
  7883  00DB84  C001  F005         	movff	strlen@s,strlen@cp
  7884  00DB88  C002  F006         	movff	strlen@s+1,strlen@cp+1
  7885  00DB8C  D003               	goto	l2691
  7886  00DB8E                     l2689:
  7887  00DB8E  4A05               	infsnz	strlen@cp,f,c
  7888  00DB90  2A06               	incf	strlen@cp+1,f,c
  7889  00DB92  D000               	goto	l2691
  7890  00DB94                     l2691:
  7891  00DB94  C005  FFD9         	movff	strlen@cp,fsr2l
  7892  00DB98  C006  FFDA         	movff	strlen@cp+1,fsr2h
  7893  00DB9C  50DF               	movf	indf2,w,c
  7894  00DB9E  A4D8               	btfss	status,2,c
  7895  00DBA0  D7F6               	goto	l2689
  7896  00DBA2  C001  F003         	movff	strlen@s,??_strlen
  7897  00DBA6  C002  F004         	movff	strlen@s+1,??_strlen+1
  7898  00DBAA  1E03               	comf	??_strlen,f,c
  7899  00DBAC  1E04               	comf	??_strlen+1,f,c
  7900  00DBAE  4A03               	infsnz	??_strlen,f,c
  7901  00DBB0  2A04               	incf	??_strlen+1,f,c
  7902  00DBB2  5005               	movf	strlen@cp,w,c
  7903  00DBB4  2403               	addwf	??_strlen,w,c
  7904  00DBB6  6E01               	movwf	?_strlen,c
  7905  00DBB8  5006               	movf	strlen@cp+1,w,c
  7906  00DBBA  2004               	addwfc	??_strlen+1,w,c
  7907  00DBBC  6E02               	movwf	?_strlen+1,c
  7908  00DBBE  D000               	goto	l1087
  7909  00DBC0                     l1087:
  7910  00DBC0  0012               	return		;funcret
  7911  00DBC2                     __end_of_strlen:
  7912                           	opt stack 0
  7913                           tblptru	equ	0xFF8
  7914                           tblptrh	equ	0xFF7
  7915                           tblptrl	equ	0xFF6
  7916                           tablat	equ	0xFF5
  7917                           prodh	equ	0xFF4
  7918                           prodl	equ	0xFF3
  7919                           postinc0	equ	0xFEE
  7920                           wreg	equ	0xFE8
  7921                           postdec1	equ	0xFE5
  7922                           fsr1l	equ	0xFE1
  7923                           indf2	equ	0xFDF
  7924                           postinc2	equ	0xFDE
  7925                           fsr2h	equ	0xFDA
  7926                           fsr2l	equ	0xFD9
  7927                           status	equ	0xFD8
  7928                           
  7929 ;; *************** function _drawChar *****************
  7930 ;; Defined at:
  7931 ;;		line 480 in file "ST7735_TFT.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  x               1    wreg     unsigned char 
  7934 ;;  y               1   29[COMRAM] unsigned char 
  7935 ;;  c               1   30[COMRAM] unsigned char 
  7936 ;;  color           2   31[COMRAM] unsigned int 
  7937 ;;  bg              2   33[COMRAM] unsigned int 
  7938 ;;  size            1   35[COMRAM] unsigned char 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  x               1   37[COMRAM] unsigned char 
  7941 ;;  line            1   36[COMRAM] unsigned char 
  7942 ;;  i               1   39[COMRAM] unsigned char 
  7943 ;;  j               1   38[COMRAM] unsigned char 
  7944 ;; Return value:  Size  Location     Type
  7945 ;;		None               void
  7946 ;; Registers used:
  7947 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7953 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;Total ram usage:       11 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; Hardware stack levels required when called:    5
  7960 ;; This function calls:
  7961 ;;		___wmul
  7962 ;;		_drawPixel
  7963 ;;		_fillRect
  7964 ;; This function is called by:
  7965 ;;		_drawtext
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           	psect	text38
  7970  00ECA6                     __ptext38:
  7971                           	opt stack 0
  7972  00ECA6                     _drawChar:
  7973                           	opt stack 21
  7974                           
  7975                           ;incstack = 0
  7976                           ;drawChar@x stored from wreg
  7977  00ECA6  6E26               	movwf	drawChar@x,c
  7978                           
  7979                           ;ST7735_TFT.c: 482: char i, j;
  7980                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
  7981  00ECA8  0E80               	movlw	128
  7982  00ECAA  6026               	cpfslt	drawChar@x,c
  7983  00ECAC  D0A6               	goto	l189
  7984  00ECAE  0E9F               	movlw	159
  7985  00ECB0  641E               	cpfsgt	drawChar@y,c
  7986  00ECB2  D001               	goto	l2637
  7987                           
  7988                           ;ST7735_TFT.c: 484: return;
  7989  00ECB4  D0A2               	goto	l189
  7990  00ECB6                     l2637:
  7991                           
  7992                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
  7993  00ECB6  5024               	movf	drawChar@size,w,c
  7994  00ECB8  A4D8               	btfss	status,2,c
  7995  00ECBA  D003               	goto	l2641
  7996  00ECBC  0E01               	movlw	1
  7997  00ECBE  6E24               	movwf	drawChar@size,c
  7998  00ECC0  D000               	goto	l2641
  7999  00ECC2                     l2641:
  8000                           
  8001                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
  8002  00ECC2  0E1F               	movlw	31
  8003  00ECC4  641F               	cpfsgt	drawChar@c,c
  8004  00ECC6  D004               	goto	l2645
  8005  00ECC8  0E7E               	movlw	126
  8006  00ECCA  641F               	cpfsgt	drawChar@c,c
  8007  00ECCC  D003               	goto	l191
  8008  00ECCE  D000               	goto	l2645
  8009  00ECD0                     l2645:
  8010                           
  8011                           ;ST7735_TFT.c: 487: c = '?';
  8012  00ECD0  0E3F               	movlw	63
  8013  00ECD2  6E1F               	movwf	drawChar@c,c
  8014  00ECD4                     l191:
  8015                           
  8016                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
  8017  00ECD4  0E00               	movlw	0
  8018  00ECD6  6E28               	movwf	drawChar@i,c
  8019  00ECD8                     l2647:
  8020  00ECD8  0E04               	movlw	4
  8021  00ECDA  6428               	cpfsgt	drawChar@i,c
  8022  00ECDC  D001               	goto	l2651
  8023  00ECDE  D08D               	goto	l189
  8024  00ECE0                     l2651:
  8025                           
  8026                           ;ST7735_TFT.c: 489: unsigned char line;
  8027                           ;ST7735_TFT.c: 490: if(c < 'S')
  8028  00ECE0  0E53               	movlw	83
  8029  00ECE2  601F               	cpfslt	drawChar@c,c
  8030  00ECE4  D015               	goto	l2655
  8031                           
  8032                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
  8033  00ECE6  0EE0               	movlw	224
  8034  00ECE8  241F               	addwf	drawChar@c,w,c
  8035  00ECEA  6E01               	movwf	___wmul@multiplier,c
  8036  00ECEC  6A02               	clrf	___wmul@multiplier+1,c
  8037  00ECEE  0EFF               	movlw	255
  8038  00ECF0  2202               	addwfc	___wmul@multiplier+1,f,c
  8039  00ECF2  0E00               	movlw	0
  8040  00ECF4  6E04               	movwf	___wmul@multiplicand+1,c
  8041  00ECF6  0E05               	movlw	5
  8042  00ECF8  6E03               	movwf	___wmul@multiplicand,c
  8043  00ECFA  EC1A  F06D         	call	___wmul	;wreg free
  8044  00ECFE  5028               	movf	drawChar@i,w,c
  8045  00ED00  2601               	addwf	?___wmul,f,c
  8046  00ED02  0E00               	movlw	0
  8047  00ED04  2202               	addwfc	?___wmul+1,f,c
  8048  00ED06  0EBB               	movlw	low _font
  8049  00ED08  2401               	addwf	?___wmul,w,c
  8050  00ED0A  6EF6               	movwf	tblptrl,c
  8051  00ED0C  0EFD               	movlw	high _font
  8052  00ED0E  D014               	goto	L14
  8053  00ED10                     l2655:
  8054                           
  8055                           ;ST7735_TFT.c: 492: else
  8056                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
  8057  00ED10  0EAD               	movlw	173
  8058  00ED12  241F               	addwf	drawChar@c,w,c
  8059  00ED14  6E01               	movwf	___wmul@multiplier,c
  8060  00ED16  6A02               	clrf	___wmul@multiplier+1,c
  8061  00ED18  0EFF               	movlw	255
  8062  00ED1A  2202               	addwfc	___wmul@multiplier+1,f,c
  8063  00ED1C  0E00               	movlw	0
  8064  00ED1E  6E04               	movwf	___wmul@multiplicand+1,c
  8065  00ED20  0E05               	movlw	5
  8066  00ED22  6E03               	movwf	___wmul@multiplicand,c
  8067  00ED24  EC1A  F06D         	call	___wmul	;wreg free
  8068  00ED28  5028               	movf	drawChar@i,w,c
  8069  00ED2A  2601               	addwf	?___wmul,f,c
  8070  00ED2C  0E00               	movlw	0
  8071  00ED2E  2202               	addwfc	?___wmul+1,f,c
  8072  00ED30  0EBA               	movlw	low _font2
  8073  00ED32  2401               	addwf	?___wmul,w,c
  8074  00ED34  6EF6               	movwf	tblptrl,c
  8075  00ED36  0EFE               	movlw	high _font2
  8076  00ED38                     L14:
  8077  00ED38  2002               	addwfc	?___wmul+1,w,c
  8078  00ED3A  6EF7               	movwf	tblptrh,c
  8079  00ED3C                     	if	0	;There are less than 3 active tblptr bytes
  8080  00ED3C                     	endif
  8081  00ED3C  0008               	tblrd		*
  8082  00ED3E  CFF5 F025          	movff	tablat,drawChar@line
  8083  00ED42  D000               	goto	l2657
  8084  00ED44                     l2657:
  8085                           
  8086                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
  8087  00ED44  0E00               	movlw	0
  8088  00ED46  6E27               	movwf	drawChar@j,c
  8089  00ED48                     l2659:
  8090  00ED48  0E06               	movlw	6
  8091  00ED4A  6427               	cpfsgt	drawChar@j,c
  8092  00ED4C  D001               	goto	l198
  8093  00ED4E  D053               	goto	l2683
  8094  00ED50                     l198:
  8095                           
  8096                           ;ST7735_TFT.c: 495: if(line & 0x01) {
  8097  00ED50  A025               	btfss	drawChar@line,0,c
  8098  00ED52  D023               	goto	l2669
  8099                           
  8100                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
  8101  00ED54  0424               	decf	drawChar@size,w,c
  8102  00ED56  A4D8               	btfss	status,2,c
  8103  00ED58  D00C               	goto	l2667
  8104  00ED5A  501E               	movf	drawChar@y,w,c
  8105  00ED5C  2427               	addwf	drawChar@j,w,c
  8106  00ED5E  6E08               	movwf	drawPixel@y,c
  8107  00ED60  C020  F009         	movff	drawChar@color,drawPixel@color
  8108  00ED64  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
  8109  00ED68  5026               	movf	drawChar@x,w,c
  8110  00ED6A  2428               	addwf	drawChar@i,w,c
  8111  00ED6C  EC5A  F06D         	call	_drawPixel
  8112  00ED70  D03E               	goto	l2677
  8113  00ED72                     l2667:
  8114                           
  8115                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
  8116  00ED72  5027               	movf	drawChar@j,w,c
  8117  00ED74  0224               	mulwf	drawChar@size,c
  8118  00ED76  50F3               	movf	prodl,w,c
  8119  00ED78  241E               	addwf	drawChar@y,w,c
  8120  00ED7A  6E13               	movwf	fillRect@y,c
  8121  00ED7C  C024  F014         	movff	drawChar@size,fillRect@w
  8122  00ED80  C024  F015         	movff	drawChar@size,fillRect@h
  8123  00ED84  C020  F016         	movff	drawChar@color,fillRect@color
  8124  00ED88  C021  F017         	movff	drawChar@color+1,fillRect@color+1
  8125  00ED8C  5028               	movf	drawChar@i,w,c
  8126  00ED8E  0224               	mulwf	drawChar@size,c
  8127  00ED90  50F3               	movf	prodl,w,c
  8128  00ED92  2426               	addwf	drawChar@x,w,c
  8129  00ED94  ECA9  F06E         	call	_fillRect
  8130                           
  8131                           ;ST7735_TFT.c: 498: }
  8132  00ED98  D02A               	goto	l2677
  8133  00ED9A                     l2669:
  8134                           
  8135                           ;ST7735_TFT.c: 499: else if(bg != color) {
  8136  00ED9A  5020               	movf	drawChar@color,w,c
  8137  00ED9C  1822               	xorwf	drawChar@bg,w,c
  8138  00ED9E  E104               	bnz	u1470
  8139  00EDA0  5021               	movf	drawChar@color+1,w,c
  8140  00EDA2  1823               	xorwf	drawChar@bg+1,w,c
  8141  00EDA4  B4D8               	btfsc	status,2,c
  8142  00EDA6  D023               	goto	l2677
  8143  00EDA8                     u1470:
  8144                           
  8145                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
  8146  00EDA8  0424               	decf	drawChar@size,w,c
  8147  00EDAA  A4D8               	btfss	status,2,c
  8148  00EDAC  D00C               	goto	l2675
  8149  00EDAE  501E               	movf	drawChar@y,w,c
  8150  00EDB0  2427               	addwf	drawChar@j,w,c
  8151  00EDB2  6E08               	movwf	drawPixel@y,c
  8152  00EDB4  C022  F009         	movff	drawChar@bg,drawPixel@color
  8153  00EDB8  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
  8154  00EDBC  5026               	movf	drawChar@x,w,c
  8155  00EDBE  2428               	addwf	drawChar@i,w,c
  8156  00EDC0  EC5A  F06D         	call	_drawPixel
  8157  00EDC4  D014               	goto	l2677
  8158  00EDC6                     l2675:
  8159                           
  8160                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
  8161  00EDC6  5027               	movf	drawChar@j,w,c
  8162  00EDC8  0224               	mulwf	drawChar@size,c
  8163  00EDCA  50F3               	movf	prodl,w,c
  8164  00EDCC  241E               	addwf	drawChar@y,w,c
  8165  00EDCE  6E13               	movwf	fillRect@y,c
  8166  00EDD0  C024  F014         	movff	drawChar@size,fillRect@w
  8167  00EDD4  C024  F015         	movff	drawChar@size,fillRect@h
  8168  00EDD8  C022  F016         	movff	drawChar@bg,fillRect@color
  8169  00EDDC  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
  8170  00EDE0  5028               	movf	drawChar@i,w,c
  8171  00EDE2  0224               	mulwf	drawChar@size,c
  8172  00EDE4  50F3               	movf	prodl,w,c
  8173  00EDE6  2426               	addwf	drawChar@x,w,c
  8174  00EDE8  ECA9  F06E         	call	_fillRect
  8175  00EDEC  D000               	goto	l2677
  8176  00EDEE                     l2677:
  8177  00EDEE  2A27               	incf	drawChar@j,f,c
  8178  00EDF0  90D8               	bcf	status,0,c
  8179  00EDF2  3225               	rrcf	drawChar@line,f,c
  8180  00EDF4  D7A9               	goto	l2659
  8181  00EDF6                     l2683:
  8182  00EDF6  2A28               	incf	drawChar@i,f,c
  8183  00EDF8  D76F               	goto	l2647
  8184  00EDFA                     l189:
  8185  00EDFA  0012               	return		;funcret
  8186  00EDFC                     __end_of_drawChar:
  8187                           	opt stack 0
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           postinc0	equ	0xFEE
  8195                           wreg	equ	0xFE8
  8196                           postdec1	equ	0xFE5
  8197                           fsr1l	equ	0xFE1
  8198                           indf2	equ	0xFDF
  8199                           postinc2	equ	0xFDE
  8200                           fsr2h	equ	0xFDA
  8201                           fsr2l	equ	0xFD9
  8202                           status	equ	0xFD8
  8203                           
  8204 ;; *************** function _fillRect *****************
  8205 ;; Defined at:
  8206 ;;		line 470 in file "ST7735_TFT.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  x               1    wreg     unsigned char 
  8209 ;;  y               1   18[COMRAM] unsigned char 
  8210 ;;  w               1   19[COMRAM] unsigned char 
  8211 ;;  h               1   20[COMRAM] unsigned char 
  8212 ;;  color           2   21[COMRAM] unsigned int 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  x               1   26[COMRAM] unsigned char 
  8215 ;;  i               2   27[COMRAM] int 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;		None               void
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8225 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8228 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;Total ram usage:       11 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    4
  8232 ;; This function calls:
  8233 ;;		_drawFastVLine
  8234 ;; This function is called by:
  8235 ;;		_drawChar
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           	psect	text39
  8240  00DD52                     __ptext39:
  8241                           	opt stack 0
  8242  00DD52                     _fillRect:
  8243                           	opt stack 21
  8244                           
  8245                           ;incstack = 0
  8246                           ;fillRect@x stored from wreg
  8247  00DD52  6E1B               	movwf	fillRect@x,c
  8248                           
  8249                           ;ST7735_TFT.c: 472: signed int i;
  8250                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
  8251  00DD54  C01B  F01C         	movff	fillRect@x,fillRect@i
  8252  00DD58  6A1D               	clrf	fillRect@i+1,c
  8253  00DD5A  D00E               	goto	l2625
  8254  00DD5C                     l2621:
  8255                           
  8256                           ;ST7735_TFT.c: 475: {
  8257                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
  8258  00DD5C  C013  F008         	movff	fillRect@y,drawFastVLine@y
  8259  00DD60  C015  F009         	movff	fillRect@h,drawFastVLine@h
  8260  00DD64  C016  F00A         	movff	fillRect@color,drawFastVLine@color
  8261  00DD68  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
  8262  00DD6C  501C               	movf	fillRect@i,w,c
  8263  00DD6E  EC34  F070         	call	_drawFastVLine
  8264  00DD72  4A1C               	infsnz	fillRect@i,f,c
  8265  00DD74  2A1D               	incf	fillRect@i+1,f,c
  8266  00DD76  D000               	goto	l2625
  8267  00DD78                     l2625:
  8268  00DD78  5014               	movf	fillRect@w,w,c
  8269  00DD7A  C01B  F018         	movff	fillRect@x,??_fillRect
  8270  00DD7E  6A19               	clrf	(??_fillRect+1)& (0+255),c
  8271  00DD80  2618               	addwf	??_fillRect,f,c
  8272  00DD82  0E00               	movlw	0
  8273  00DD84  2219               	addwfc	??_fillRect+1,f,c
  8274  00DD86  5018               	movf	??_fillRect,w,c
  8275  00DD88  5C1C               	subwf	fillRect@i,w,c
  8276  00DD8A  501D               	movf	fillRect@i+1,w,c
  8277  00DD8C  0A80               	xorlw	128
  8278  00DD8E  6E1A               	movwf	(??_fillRect+2)& (0+255),c
  8279  00DD90  5019               	movf	??_fillRect+1,w,c
  8280  00DD92  0A80               	xorlw	128
  8281  00DD94  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
  8282  00DD96  A0D8               	btfss	status,0,c
  8283  00DD98  D7E1               	goto	l2621
  8284  00DD9A  0012               	return		;funcret
  8285  00DD9C                     __end_of_fillRect:
  8286                           	opt stack 0
  8287                           tblptru	equ	0xFF8
  8288                           tblptrh	equ	0xFF7
  8289                           tblptrl	equ	0xFF6
  8290                           tablat	equ	0xFF5
  8291                           prodh	equ	0xFF4
  8292                           prodl	equ	0xFF3
  8293                           postinc0	equ	0xFEE
  8294                           wreg	equ	0xFE8
  8295                           postdec1	equ	0xFE5
  8296                           fsr1l	equ	0xFE1
  8297                           indf2	equ	0xFDF
  8298                           postinc2	equ	0xFDE
  8299                           fsr2h	equ	0xFDA
  8300                           fsr2l	equ	0xFD9
  8301                           status	equ	0xFD8
  8302                           
  8303 ;; *************** function _drawFastVLine *****************
  8304 ;; Defined at:
  8305 ;;		line 449 in file "ST7735_TFT.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  x               1    wreg     unsigned char 
  8308 ;;  y               1    7[COMRAM] unsigned char 
  8309 ;;  h               1    8[COMRAM] unsigned char 
  8310 ;;  color           2    9[COMRAM] unsigned int 
  8311 ;; Auto vars:     Size  Location     Type
  8312 ;;  x               1   17[COMRAM] unsigned char 
  8313 ;;  lo              1   16[COMRAM] unsigned char 
  8314 ;;  hi              1   15[COMRAM] unsigned char 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;		None               void
  8317 ;; Registers used:
  8318 ;;		wreg, status,2, status,0, cstack
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;Total ram usage:       11 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    3
  8331 ;; This function calls:
  8332 ;;		_setAddrWindow
  8333 ;;		_spiwrite
  8334 ;; This function is called by:
  8335 ;;		_fillRect
  8336 ;;		_fillCircleHelper
  8337 ;;		_fillCircle
  8338 ;;		_drawRect
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           	psect	text40
  8343  00E068                     __ptext40:
  8344                           	opt stack 0
  8345  00E068                     _drawFastVLine:
  8346                           	opt stack 21
  8347                           
  8348                           ;incstack = 0
  8349                           ;drawFastVLine@x stored from wreg
  8350  00E068  6E12               	movwf	drawFastVLine@x,c
  8351                           
  8352                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
  8353                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
  8354  00E06A  0E80               	movlw	128
  8355  00E06C  6012               	cpfslt	drawFastVLine@x,c
  8356  00E06E  D03F               	goto	l173
  8357  00E070  0E9F               	movlw	159
  8358  00E072  6408               	cpfsgt	drawFastVLine@y,c
  8359  00E074  D001               	goto	l2591
  8360                           
  8361                           ;ST7735_TFT.c: 453: return;
  8362  00E076  D03B               	goto	l173
  8363  00E078                     l2591:
  8364                           
  8365                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
  8366  00E078  0EFF               	movlw	255
  8367  00E07A  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8368  00E07C  0EFF               	movlw	255
  8369  00E07E  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
  8370  00E080  5009               	movf	drawFastVLine@h,w,c
  8371  00E082  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
  8372  00E086  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
  8373  00E088  260E               	addwf	??_drawFastVLine+2,f,c
  8374  00E08A  0E00               	movlw	0
  8375  00E08C  220F               	addwfc	??_drawFastVLine+3,f,c
  8376  00E08E  500C               	movf	??_drawFastVLine,w,c
  8377  00E090  260E               	addwf	??_drawFastVLine+2,f,c
  8378  00E092  500D               	movf	??_drawFastVLine+1,w,c
  8379  00E094  220F               	addwfc	??_drawFastVLine+3,f,c
  8380  00E096  BE0F               	btfsc	??_drawFastVLine+3,7,c
  8381  00E098  D00B               	goto	l2595
  8382  00E09A  500F               	movf	??_drawFastVLine+3,w,c
  8383  00E09C  E104               	bnz	u1320
  8384  00E09E  0EA0               	movlw	160
  8385  00E0A0  5C0E               	subwf	??_drawFastVLine+2,w,c
  8386  00E0A2  A0D8               	btfss	status,0,c
  8387  00E0A4  D005               	goto	l2595
  8388  00E0A6                     u1320:
  8389                           
  8390                           ;ST7735_TFT.c: 455: h = 160 - y;
  8391  00E0A6  5008               	movf	drawFastVLine@y,w,c
  8392  00E0A8  0800               	sublw	0
  8393  00E0AA  0FA0               	addlw	160
  8394  00E0AC  6E09               	movwf	drawFastVLine@h,c
  8395  00E0AE  D000               	goto	l2595
  8396  00E0B0                     l2595:
  8397                           
  8398                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
  8399  00E0B0  500B               	movf	drawFastVLine@color+1,w,c
  8400  00E0B2  6E10               	movwf	drawFastVLine@hi,c
  8401  00E0B4  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
  8402                           
  8403                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
  8404  00E0B8  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
  8405  00E0BC  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
  8406  00E0C0  5008               	movf	drawFastVLine@y,w,c
  8407  00E0C2  2409               	addwf	drawFastVLine@h,w,c
  8408  00E0C4  6E0C               	movwf	??_drawFastVLine& (0+255),c
  8409  00E0C6  040C               	decf	??_drawFastVLine,w,c
  8410  00E0C8  6E06               	movwf	setAddrWindow@y1,c
  8411  00E0CA  5012               	movf	drawFastVLine@x,w,c
  8412  00E0CC  ECCE  F06E         	call	_setAddrWindow
  8413                           
  8414                           ;ST7735_TFT.c: 458: PORTCbits.RC0 = 1;
  8415  00E0D0  8082               	bsf	3970,0,c	;volatile
  8416                           
  8417                           ;ST7735_TFT.c: 459: PORTCbits.RC1 = 0;
  8418  00E0D2  9282               	bcf	3970,1,c	;volatile
  8419                           
  8420                           ;ST7735_TFT.c: 461: while (h--) {
  8421  00E0D4  D007               	goto	l2607
  8422  00E0D6                     l2605:
  8423                           
  8424                           ;ST7735_TFT.c: 462: spiwrite(hi);
  8425  00E0D6  5010               	movf	drawFastVLine@hi,w,c
  8426  00E0D8  ECBB  F06C         	call	_spiwrite
  8427                           
  8428                           ;ST7735_TFT.c: 463: spiwrite(lo);
  8429  00E0DC  5011               	movf	drawFastVLine@lo,w,c
  8430  00E0DE  ECBB  F06C         	call	_spiwrite
  8431  00E0E2  D000               	goto	l2607
  8432  00E0E4                     l2607:
  8433  00E0E4  0609               	decf	drawFastVLine@h,f,c
  8434  00E0E6  2809               	incf	drawFastVLine@h,w,c
  8435  00E0E8  A4D8               	btfss	status,2,c
  8436  00E0EA  D7F5               	goto	l2605
  8437                           
  8438                           ;ST7735_TFT.c: 464: }
  8439                           ;ST7735_TFT.c: 465: PORTCbits.RC1 = 1;
  8440  00E0EC  8282               	bsf	3970,1,c	;volatile
  8441  00E0EE                     l173:
  8442  00E0EE  0012               	return		;funcret
  8443  00E0F0                     __end_of_drawFastVLine:
  8444                           	opt stack 0
  8445                           tblptru	equ	0xFF8
  8446                           tblptrh	equ	0xFF7
  8447                           tblptrl	equ	0xFF6
  8448                           tablat	equ	0xFF5
  8449                           prodh	equ	0xFF4
  8450                           prodl	equ	0xFF3
  8451                           postinc0	equ	0xFEE
  8452                           wreg	equ	0xFE8
  8453                           postdec1	equ	0xFE5
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           fsr2h	equ	0xFDA
  8458                           fsr2l	equ	0xFD9
  8459                           status	equ	0xFD8
  8460                           
  8461 ;; *************** function _drawPixel *****************
  8462 ;; Defined at:
  8463 ;;		line 440 in file "ST7735_TFT.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  x               1    wreg     unsigned char 
  8466 ;;  y               1    7[COMRAM] unsigned char 
  8467 ;;  color           2    8[COMRAM] unsigned int 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  x               1   10[COMRAM] unsigned char 
  8470 ;; Return value:  Size  Location     Type
  8471 ;;		None               void
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, status,0, cstack
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8479 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;Total ram usage:        4 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    3
  8486 ;; This function calls:
  8487 ;;		_setAddrWindow
  8488 ;;		_write_data
  8489 ;; This function is called by:
  8490 ;;		_drawChar
  8491 ;;		_drawCircle
  8492 ;;		_drawCircleHelper
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           	psect	text41
  8497  00DAB4                     __ptext41:
  8498                           	opt stack 0
  8499  00DAB4                     _drawPixel:
  8500                           	opt stack 22
  8501                           
  8502                           ;incstack = 0
  8503                           ;drawPixel@x stored from wreg
  8504  00DAB4  6E0B               	movwf	drawPixel@x,c
  8505                           
  8506                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
  8507  00DAB6  0E80               	movlw	128
  8508  00DAB8  600B               	cpfslt	drawPixel@x,c
  8509  00DABA  D013               	goto	l167
  8510  00DABC  0E9F               	movlw	159
  8511  00DABE  6408               	cpfsgt	drawPixel@y,c
  8512  00DAC0  D001               	goto	l2613
  8513                           
  8514                           ;ST7735_TFT.c: 443: return;
  8515  00DAC2  D00F               	goto	l167
  8516  00DAC4                     l2613:
  8517                           
  8518                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
  8519  00DAC4  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
  8520  00DAC8  280B               	incf	drawPixel@x,w,c
  8521  00DACA  6E05               	movwf	setAddrWindow@x1,c
  8522  00DACC  2808               	incf	drawPixel@y,w,c
  8523  00DACE  6E06               	movwf	setAddrWindow@y1,c
  8524  00DAD0  500B               	movf	drawPixel@x,w,c
  8525  00DAD2  ECCE  F06E         	call	_setAddrWindow
  8526                           
  8527                           ;ST7735_TFT.c: 445: write_data(color >> 8);
  8528  00DAD6  500A               	movf	drawPixel@color+1,w,c
  8529  00DAD8  ECA1  F06C         	call	_write_data
  8530                           
  8531                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
  8532  00DADC  5009               	movf	drawPixel@color,w,c
  8533  00DADE  ECA1  F06C         	call	_write_data
  8534  00DAE2                     l167:
  8535  00DAE2  0012               	return		;funcret
  8536  00DAE4                     __end_of_drawPixel:
  8537                           	opt stack 0
  8538                           tblptru	equ	0xFF8
  8539                           tblptrh	equ	0xFF7
  8540                           tblptrl	equ	0xFF6
  8541                           tablat	equ	0xFF5
  8542                           prodh	equ	0xFF4
  8543                           prodl	equ	0xFF3
  8544                           postinc0	equ	0xFEE
  8545                           wreg	equ	0xFE8
  8546                           postdec1	equ	0xFE5
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           fsr2h	equ	0xFDA
  8551                           fsr2l	equ	0xFD9
  8552                           status	equ	0xFD8
  8553                           
  8554 ;; *************** function _setAddrWindow *****************
  8555 ;; Defined at:
  8556 ;;		line 425 in file "ST7735_TFT.c"
  8557 ;; Parameters:    Size  Location     Type
  8558 ;;  x0              1    wreg     unsigned char 
  8559 ;;  y0              1    3[COMRAM] unsigned char 
  8560 ;;  x1              1    4[COMRAM] unsigned char 
  8561 ;;  y1              1    5[COMRAM] unsigned char 
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;  x0              1    6[COMRAM] unsigned char 
  8564 ;; Return value:  Size  Location     Type
  8565 ;;		None               void
  8566 ;; Registers used:
  8567 ;;		wreg, status,2, status,0, cstack
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8573 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;Total ram usage:        4 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:    2
  8580 ;; This function calls:
  8581 ;;		_write_command
  8582 ;;		_write_data
  8583 ;; This function is called by:
  8584 ;;		_drawPixel
  8585 ;;		_drawFastVLine
  8586 ;;		_fillRectangle
  8587 ;;		_drawFastHLine
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           	psect	text42
  8592  00DD9C                     __ptext42:
  8593                           	opt stack 0
  8594  00DD9C                     _setAddrWindow:
  8595                           	opt stack 21
  8596                           
  8597                           ;incstack = 0
  8598                           ;setAddrWindow@x0 stored from wreg
  8599  00DD9C  6E07               	movwf	setAddrWindow@x0,c
  8600                           
  8601                           ;ST7735_TFT.c: 427: write_command(0x2A);
  8602  00DD9E  0E2A               	movlw	42
  8603  00DDA0  EC99  F06C         	call	_write_command
  8604                           
  8605                           ;ST7735_TFT.c: 428: write_data(0);
  8606  00DDA4  0E00               	movlw	0
  8607  00DDA6  ECA1  F06C         	call	_write_data
  8608                           
  8609                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
  8610  00DDAA  5007               	movf	setAddrWindow@x0,w,c
  8611  00DDAC  2478               	addwf	_colstart,w,c
  8612  00DDAE  ECA1  F06C         	call	_write_data
  8613                           
  8614                           ;ST7735_TFT.c: 430: write_data(0);
  8615  00DDB2  0E00               	movlw	0
  8616  00DDB4  ECA1  F06C         	call	_write_data
  8617                           
  8618                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
  8619  00DDB8  5005               	movf	setAddrWindow@x1,w,c
  8620  00DDBA  2478               	addwf	_colstart,w,c
  8621  00DDBC  ECA1  F06C         	call	_write_data
  8622                           
  8623                           ;ST7735_TFT.c: 432: write_command(0x2B);
  8624  00DDC0  0E2B               	movlw	43
  8625  00DDC2  EC99  F06C         	call	_write_command
  8626                           
  8627                           ;ST7735_TFT.c: 433: write_data(0);
  8628  00DDC6  0E00               	movlw	0
  8629  00DDC8  ECA1  F06C         	call	_write_data
  8630                           
  8631                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
  8632  00DDCC  5004               	movf	setAddrWindow@y0,w,c
  8633  00DDCE  247B               	addwf	_rowstart,w,c
  8634  00DDD0  ECA1  F06C         	call	_write_data
  8635                           
  8636                           ;ST7735_TFT.c: 435: write_data(0);
  8637  00DDD4  0E00               	movlw	0
  8638  00DDD6  ECA1  F06C         	call	_write_data
  8639                           
  8640                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
  8641  00DDDA  5006               	movf	setAddrWindow@y1,w,c
  8642  00DDDC  247B               	addwf	_rowstart,w,c
  8643  00DDDE  ECA1  F06C         	call	_write_data
  8644                           
  8645                           ;ST7735_TFT.c: 437: write_command(0x2C);
  8646  00DDE2  0E2C               	movlw	44
  8647  00DDE4  EC99  F06C         	call	_write_command
  8648  00DDE8  0012               	return		;funcret
  8649  00DDEA                     __end_of_setAddrWindow:
  8650                           	opt stack 0
  8651                           tblptru	equ	0xFF8
  8652                           tblptrh	equ	0xFF7
  8653                           tblptrl	equ	0xFF6
  8654                           tablat	equ	0xFF5
  8655                           prodh	equ	0xFF4
  8656                           prodl	equ	0xFF3
  8657                           postinc0	equ	0xFEE
  8658                           wreg	equ	0xFE8
  8659                           postdec1	equ	0xFE5
  8660                           fsr1l	equ	0xFE1
  8661                           indf2	equ	0xFDF
  8662                           postinc2	equ	0xFDE
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function _write_data *****************
  8668 ;; Defined at:
  8669 ;;		line 242 in file "ST7735_TFT.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  data_           1    wreg     unsigned char 
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;  data_           1    2[COMRAM] unsigned char 
  8674 ;; Return value:  Size  Location     Type
  8675 ;;		None               void
  8676 ;; Registers used:
  8677 ;;		wreg, status,2, cstack
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8687 ;;Total ram usage:        1 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    1
  8690 ;; This function calls:
  8691 ;;		_spiwrite
  8692 ;; This function is called by:
  8693 ;;		_Rcmd1
  8694 ;;		_Rcmd2red
  8695 ;;		_Rcmd3
  8696 ;;		_setAddrWindow
  8697 ;;		_drawPixel
  8698 ;;		_TFT_GreenTab_Initialize
  8699 ;;		_Bcmd
  8700 ;;		_setScrollDefinition
  8701 ;;		_Rcmd2green
  8702 ;;		_VerticalScroll
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           	psect	text43
  8707  00D942                     __ptext43:
  8708                           	opt stack 0
  8709  00D942                     _write_data:
  8710                           	opt stack 21
  8711                           
  8712                           ;incstack = 0
  8713                           ;write_data@data_ stored from wreg
  8714  00D942  6E03               	movwf	write_data@data_,c
  8715                           
  8716                           ;ST7735_TFT.c: 244: PORTCbits.RC1 = 0;
  8717  00D944  9282               	bcf	3970,1,c	;volatile
  8718                           
  8719                           ;ST7735_TFT.c: 245: PORTCbits.RC0 = 1;
  8720  00D946  8082               	bsf	3970,0,c	;volatile
  8721                           
  8722                           ;ST7735_TFT.c: 246: spiwrite(data_);
  8723  00D948  5003               	movf	write_data@data_,w,c
  8724  00D94A  ECBB  F06C         	call	_spiwrite
  8725                           
  8726                           ;ST7735_TFT.c: 247: PORTCbits.RC1 = 1;
  8727  00D94E  8282               	bsf	3970,1,c	;volatile
  8728  00D950  0012               	return		;funcret
  8729  00D952                     __end_of_write_data:
  8730                           	opt stack 0
  8731                           tblptru	equ	0xFF8
  8732                           tblptrh	equ	0xFF7
  8733                           tblptrl	equ	0xFF6
  8734                           tablat	equ	0xFF5
  8735                           prodh	equ	0xFF4
  8736                           prodl	equ	0xFF3
  8737                           postinc0	equ	0xFEE
  8738                           wreg	equ	0xFE8
  8739                           postdec1	equ	0xFE5
  8740                           fsr1l	equ	0xFE1
  8741                           indf2	equ	0xFDF
  8742                           postinc2	equ	0xFDE
  8743                           fsr2h	equ	0xFDA
  8744                           fsr2l	equ	0xFD9
  8745                           status	equ	0xFD8
  8746                           
  8747 ;; *************** function _write_command *****************
  8748 ;; Defined at:
  8749 ;;		line 231 in file "ST7735_TFT.c"
  8750 ;; Parameters:    Size  Location     Type
  8751 ;;  cmd_            1    wreg     unsigned char 
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;  cmd_            1    2[COMRAM] unsigned char 
  8754 ;; Return value:  Size  Location     Type
  8755 ;;		None               void
  8756 ;; Registers used:
  8757 ;;		wreg, status,2, cstack
  8758 ;; Tracked objects:
  8759 ;;		On entry : 0/0
  8760 ;;		On exit  : 0/0
  8761 ;;		Unchanged: 0/0
  8762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8767 ;;Total ram usage:        1 bytes
  8768 ;; Hardware stack levels used:    1
  8769 ;; Hardware stack levels required when called:    1
  8770 ;; This function calls:
  8771 ;;		_spiwrite
  8772 ;; This function is called by:
  8773 ;;		_Rcmd1
  8774 ;;		_Rcmd2red
  8775 ;;		_Rcmd3
  8776 ;;		_setAddrWindow
  8777 ;;		_TFT_GreenTab_Initialize
  8778 ;;		_Bcmd
  8779 ;;		_setScrollDefinition
  8780 ;;		_Rcmd2green
  8781 ;;		_VerticalScroll
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text44
  8786  00D932                     __ptext44:
  8787                           	opt stack 0
  8788  00D932                     _write_command:
  8789                           	opt stack 21
  8790                           
  8791                           ;incstack = 0
  8792                           ;write_command@cmd_ stored from wreg
  8793  00D932  6E03               	movwf	write_command@cmd_,c
  8794                           
  8795                           ;ST7735_TFT.c: 233: PORTCbits.RC1 = 0;
  8796  00D934  9282               	bcf	3970,1,c	;volatile
  8797                           
  8798                           ;ST7735_TFT.c: 235: PORTCbits.RC0 = 0;
  8799  00D936  9082               	bcf	3970,0,c	;volatile
  8800                           
  8801                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
  8802  00D938  5003               	movf	write_command@cmd_,w,c
  8803  00D93A  ECBB  F06C         	call	_spiwrite
  8804                           
  8805                           ;ST7735_TFT.c: 238: PORTCbits.RC1 = 1;
  8806  00D93E  8282               	bsf	3970,1,c	;volatile
  8807  00D940  0012               	return		;funcret
  8808  00D942                     __end_of_write_command:
  8809                           	opt stack 0
  8810                           tblptru	equ	0xFF8
  8811                           tblptrh	equ	0xFF7
  8812                           tblptrl	equ	0xFF6
  8813                           tablat	equ	0xFF5
  8814                           prodh	equ	0xFF4
  8815                           prodl	equ	0xFF3
  8816                           postinc0	equ	0xFEE
  8817                           wreg	equ	0xFE8
  8818                           postdec1	equ	0xFE5
  8819                           fsr1l	equ	0xFE1
  8820                           indf2	equ	0xFDF
  8821                           postinc2	equ	0xFDE
  8822                           fsr2h	equ	0xFDA
  8823                           fsr2l	equ	0xFD9
  8824                           status	equ	0xFD8
  8825                           
  8826 ;; *************** function _spiwrite *****************
  8827 ;; Defined at:
  8828 ;;		line 222 in file "ST7735_TFT.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;  spidata         1    wreg     unsigned char 
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;  spidata         1    1[COMRAM] unsigned char 
  8833 ;;  x               1    0[COMRAM] unsigned char 
  8834 ;; Return value:  Size  Location     Type
  8835 ;;		None               void
  8836 ;; Registers used:
  8837 ;;		wreg
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;Total ram usage:        2 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; This function calls:
  8850 ;;		Nothing
  8851 ;; This function is called by:
  8852 ;;		_write_command
  8853 ;;		_write_data
  8854 ;;		_drawFastVLine
  8855 ;;		_fillRectangle
  8856 ;;		_drawFastHLine
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           	psect	text45
  8861  00D976                     __ptext45:
  8862                           	opt stack 0
  8863  00D976                     _spiwrite:
  8864                           	opt stack 23
  8865                           
  8866                           ;incstack = 0
  8867                           ;spiwrite@spidata stored from wreg
  8868  00D976  6E02               	movwf	spiwrite@spidata,c
  8869                           
  8870                           ;ST7735_TFT.c: 224: char x;
  8871                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
  8872  00D978  969E               	bcf	3998,3,c	;volatile
  8873                           
  8874                           ;ST7735_TFT.c: 226: x = SSPBUF;
  8875  00D97A  CFC9 F001          	movff	4041,spiwrite@x	;volatile
  8876                           
  8877                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
  8878  00D97E  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
  8879                           
  8880                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
  8881  00D982  D000               	goto	l123
  8882  00D984                     l123:
  8883  00D984  A0C7               	btfss	4039,0,c	;volatile
  8884  00D986  D7FE               	goto	l123
  8885  00D988  0012               	return		;funcret
  8886  00D98A                     __end_of_spiwrite:
  8887                           	opt stack 0
  8888                           tblptru	equ	0xFF8
  8889                           tblptrh	equ	0xFF7
  8890                           tblptrl	equ	0xFF6
  8891                           tablat	equ	0xFF5
  8892                           prodh	equ	0xFF4
  8893                           prodl	equ	0xFF3
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           postdec1	equ	0xFE5
  8897                           fsr1l	equ	0xFE1
  8898                           indf2	equ	0xFDF
  8899                           postinc2	equ	0xFDE
  8900                           fsr2h	equ	0xFDA
  8901                           fsr2l	equ	0xFD9
  8902                           status	equ	0xFD8
  8903                           
  8904 ;; *************** function ___wmul *****************
  8905 ;; Defined at:
  8906 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;  multiplier      2    0[COMRAM] unsigned int 
  8909 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;  product         2    4[COMRAM] unsigned int 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  2    0[COMRAM] unsigned int 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0, prodl, prodh
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;Total ram usage:        6 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; This function calls:
  8928 ;;		Nothing
  8929 ;; This function is called by:
  8930 ;;		_delay_ms
  8931 ;;		_drawChar
  8932 ;;		_main
  8933 ;;		_update_LCD_misc
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text46
  8938  00DA34                     __ptext46:
  8939                           	opt stack 0
  8940  00DA34                     ___wmul:
  8941                           	opt stack 30
  8942                           
  8943                           ;incstack = 0
  8944  00DA34  5001               	movf	___wmul@multiplier,w,c
  8945  00DA36  0203               	mulwf	___wmul@multiplicand,c
  8946  00DA38  CFF3 F005          	movff	prodl,___wmul@product
  8947  00DA3C  CFF4 F006          	movff	prodh,___wmul@product+1
  8948  00DA40  5001               	movf	___wmul@multiplier,w,c
  8949  00DA42  0204               	mulwf	___wmul@multiplicand+1,c
  8950  00DA44  50F3               	movf	prodl,w,c
  8951  00DA46  2606               	addwf	___wmul@product+1,f,c
  8952  00DA48  5002               	movf	___wmul@multiplier+1,w,c
  8953  00DA4A  0203               	mulwf	___wmul@multiplicand,c
  8954  00DA4C  50F3               	movf	prodl,w,c
  8955  00DA4E  2606               	addwf	___wmul@product+1,f,c
  8956  00DA50  C005  F001         	movff	___wmul@product,?___wmul
  8957  00DA54  C006  F002         	movff	___wmul@product+1,?___wmul+1
  8958  00DA58  D000               	goto	l530
  8959  00DA5A                     l530:
  8960  00DA5A  0012               	return		;funcret
  8961  00DA5C                     __end_of___wmul:
  8962                           	opt stack 0
  8963                           tblptru	equ	0xFF8
  8964                           tblptrh	equ	0xFF7
  8965                           tblptrl	equ	0xFF6
  8966                           tablat	equ	0xFF5
  8967                           prodh	equ	0xFF4
  8968                           prodl	equ	0xFF3
  8969                           postinc0	equ	0xFEE
  8970                           wreg	equ	0xFE8
  8971                           postdec1	equ	0xFE5
  8972                           fsr1l	equ	0xFE1
  8973                           indf2	equ	0xFDF
  8974                           postinc2	equ	0xFDE
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979 ;; *************** function ___ftge *****************
  8980 ;; Defined at:
  8981 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;  ff1             3    0[COMRAM] float 
  8984 ;;  ff2             3    3[COMRAM] float 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;		None
  8987 ;; Return value:  Size  Location     Type
  8988 ;;		None               void
  8989 ;; Registers used:
  8990 ;;		wreg, status,2, status,0
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8996 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;Total ram usage:        9 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; This function calls:
  9003 ;;		Nothing
  9004 ;; This function is called by:
  9005 ;;		_main
  9006 ;;		_update_LCD_misc
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           	psect	text47
  9011  00E202                     __ptext47:
  9012                           	opt stack 0
  9013  00E202                     ___ftge:
  9014                           	opt stack 30
  9015                           
  9016                           ;incstack = 0
  9017  00E202  AE03               	btfss	___ftge@ff1+2,7,c
  9018  00E204  D017               	goto	l2871
  9019  00E206  C001  F007         	movff	___ftge@ff1,??___ftge
  9020  00E20A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9021  00E20E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9022  00E212  1E07               	comf	??___ftge,f,c
  9023  00E214  1E08               	comf	??___ftge+1,f,c
  9024  00E216  1E09               	comf	??___ftge+2,f,c
  9025  00E218  2A07               	incf	??___ftge,f,c
  9026  00E21A  0E00               	movlw	0
  9027  00E21C  2208               	addwfc	??___ftge+1,f,c
  9028  00E21E  2209               	addwfc	??___ftge+2,f,c
  9029  00E220  0E00               	movlw	0
  9030  00E222  2407               	addwf	??___ftge,w,c
  9031  00E224  6E01               	movwf	___ftge@ff1,c
  9032  00E226  0E00               	movlw	0
  9033  00E228  2008               	addwfc	??___ftge+1,w,c
  9034  00E22A  6E02               	movwf	___ftge@ff1+1,c
  9035  00E22C  0E80               	movlw	128
  9036  00E22E  2009               	addwfc	??___ftge+2,w,c
  9037  00E230  6E03               	movwf	___ftge@ff1+2,c
  9038  00E232  D000               	goto	l2871
  9039  00E234                     l2871:
  9040  00E234  AE06               	btfss	___ftge@ff2+2,7,c
  9041  00E236  D017               	goto	l2875
  9042  00E238  C004  F007         	movff	___ftge@ff2,??___ftge
  9043  00E23C  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9044  00E240  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9045  00E244  1E07               	comf	??___ftge,f,c
  9046  00E246  1E08               	comf	??___ftge+1,f,c
  9047  00E248  1E09               	comf	??___ftge+2,f,c
  9048  00E24A  2A07               	incf	??___ftge,f,c
  9049  00E24C  0E00               	movlw	0
  9050  00E24E  2208               	addwfc	??___ftge+1,f,c
  9051  00E250  2209               	addwfc	??___ftge+2,f,c
  9052  00E252  0E00               	movlw	0
  9053  00E254  2407               	addwf	??___ftge,w,c
  9054  00E256  6E04               	movwf	___ftge@ff2,c
  9055  00E258  0E00               	movlw	0
  9056  00E25A  2008               	addwfc	??___ftge+1,w,c
  9057  00E25C  6E05               	movwf	___ftge@ff2+1,c
  9058  00E25E  0E80               	movlw	128
  9059  00E260  2009               	addwfc	??___ftge+2,w,c
  9060  00E262  6E06               	movwf	___ftge@ff2+2,c
  9061  00E264  D000               	goto	l2875
  9062  00E266                     l2875:
  9063  00E266  0E00               	movlw	0
  9064  00E268  1A01               	xorwf	___ftge@ff1,f,c
  9065  00E26A  0E00               	movlw	0
  9066  00E26C  1A02               	xorwf	___ftge@ff1+1,f,c
  9067  00E26E  0E80               	movlw	128
  9068  00E270  1A03               	xorwf	___ftge@ff1+2,f,c
  9069  00E272  0E00               	movlw	0
  9070  00E274  1A04               	xorwf	___ftge@ff2,f,c
  9071  00E276  0E00               	movlw	0
  9072  00E278  1A05               	xorwf	___ftge@ff2+1,f,c
  9073  00E27A  0E80               	movlw	128
  9074  00E27C  1A06               	xorwf	___ftge@ff2+2,f,c
  9075  00E27E  5004               	movf	___ftge@ff2,w,c
  9076  00E280  5C01               	subwf	___ftge@ff1,w,c
  9077  00E282  5005               	movf	___ftge@ff2+1,w,c
  9078  00E284  5802               	subwfb	___ftge@ff1+1,w,c
  9079  00E286  5006               	movf	___ftge@ff2+2,w,c
  9080  00E288  5803               	subwfb	___ftge@ff1+2,w,c
  9081  00E28A  B0D8               	btfsc	status,0,c
  9082  00E28C  D002               	goto	l2881
  9083  00E28E  90D8               	bcf	status,0,c
  9084  00E290  D002               	goto	l919
  9085  00E292                     l2881:
  9086  00E292  80D8               	bsf	status,0,c
  9087  00E294  D000               	goto	l919
  9088  00E296                     l919:
  9089  00E296  0012               	return		;funcret
  9090  00E298                     __end_of___ftge:
  9091                           	opt stack 0
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           postinc0	equ	0xFEE
  9099                           wreg	equ	0xFE8
  9100                           postdec1	equ	0xFE5
  9101                           fsr1l	equ	0xFE1
  9102                           indf2	equ	0xFDF
  9103                           postinc2	equ	0xFDE
  9104                           fsr2h	equ	0xFDA
  9105                           fsr2l	equ	0xFD9
  9106                           status	equ	0xFD8
  9107                           
  9108 ;; *************** function ___ftdiv *****************
  9109 ;; Defined at:
  9110 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  f1              3   12[COMRAM] float 
  9113 ;;  f2              3   15[COMRAM] float 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  f3              3   22[COMRAM] float 
  9116 ;;  sign            1   26[COMRAM] unsigned char 
  9117 ;;  exp             1   25[COMRAM] unsigned char 
  9118 ;;  cntr            1   21[COMRAM] unsigned char 
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  3   12[COMRAM] float 
  9121 ;; Registers used:
  9122 ;;		wreg, status,2, status,0, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9128 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9130 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;Total ram usage:       15 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    1
  9135 ;; This function calls:
  9136 ;;		___ftpack
  9137 ;; This function is called by:
  9138 ;;		_main
  9139 ;;		_update_LCD_misc
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	text48
  9144  00E88A                     __ptext48:
  9145                           	opt stack 0
  9146  00E88A                     ___ftdiv:
  9147                           	opt stack 29
  9148                           
  9149                           ;incstack = 0
  9150  00E88A  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  9151  00E88E  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  9152  00E890  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  9153  00E892  340E               	rlcf	___ftdiv@f1+1,w,c
  9154  00E894  3613               	rlcf	??___ftdiv& (0+255),f,c
  9155  00E896  E301               	bnc	u1711
  9156  00E898  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  9157  00E89A                     u1711:
  9158  00E89A  5013               	movf	??___ftdiv,w,c
  9159  00E89C  6E1A               	movwf	___ftdiv@exp,c
  9160  00E89E  501A               	movf	___ftdiv@exp,w,c
  9161  00E8A0  A4D8               	btfss	status,2,c
  9162  00E8A2  D002               	goto	l2815
  9163  00E8A4  D00E               	goto	l2817
  9164  00E8A6  D061               	goto	l910
  9165  00E8A8                     l2815:
  9166  00E8A8  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  9167  00E8AC  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  9168  00E8AE  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  9169  00E8B0  3411               	rlcf	___ftdiv@f2+1,w,c
  9170  00E8B2  3613               	rlcf	??___ftdiv& (0+255),f,c
  9171  00E8B4  E301               	bnc	u1731
  9172  00E8B6  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  9173  00E8B8                     u1731:
  9174  00E8B8  5013               	movf	??___ftdiv,w,c
  9175  00E8BA  6E1B               	movwf	___ftdiv@sign,c
  9176  00E8BC  501B               	movf	___ftdiv@sign,w,c
  9177  00E8BE  A4D8               	btfss	status,2,c
  9178  00E8C0  D007               	goto	l2821
  9179  00E8C2                     l2817:
  9180  00E8C2  0E00               	movlw	0
  9181  00E8C4  6E0D               	movwf	?___ftdiv,c
  9182  00E8C6  0E00               	movlw	0
  9183  00E8C8  6E0E               	movwf	?___ftdiv+1,c
  9184  00E8CA  0E00               	movlw	0
  9185  00E8CC  6E0F               	movwf	?___ftdiv+2,c
  9186  00E8CE  D04D               	goto	l910
  9187  00E8D0                     l2821:
  9188  00E8D0  0E00               	movlw	0
  9189  00E8D2  6E17               	movwf	___ftdiv@f3,c
  9190  00E8D4  0E00               	movlw	0
  9191  00E8D6  6E18               	movwf	___ftdiv@f3+1,c
  9192  00E8D8  0E00               	movlw	0
  9193  00E8DA  6E19               	movwf	___ftdiv@f3+2,c
  9194  00E8DC  501B               	movf	___ftdiv@sign,w,c
  9195  00E8DE  0F89               	addlw	137
  9196  00E8E0  5E1A               	subwf	___ftdiv@exp,f,c
  9197  00E8E2  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  9198  00E8E6  5012               	movf	___ftdiv@f2+2,w,c
  9199  00E8E8  1A1B               	xorwf	___ftdiv@sign,f,c
  9200  00E8EA  0E80               	movlw	128
  9201  00E8EC  161B               	andwf	___ftdiv@sign,f,c
  9202  00E8EE  8E0E               	bsf	___ftdiv@f1+1,7,c
  9203  00E8F0  0EFF               	movlw	255
  9204  00E8F2  160D               	andwf	___ftdiv@f1,f,c
  9205  00E8F4  0EFF               	movlw	255
  9206  00E8F6  160E               	andwf	___ftdiv@f1+1,f,c
  9207  00E8F8  0E00               	movlw	0
  9208  00E8FA  160F               	andwf	___ftdiv@f1+2,f,c
  9209  00E8FC  8E11               	bsf	___ftdiv@f2+1,7,c
  9210  00E8FE  0EFF               	movlw	255
  9211  00E900  1610               	andwf	___ftdiv@f2,f,c
  9212  00E902  0EFF               	movlw	255
  9213  00E904  1611               	andwf	___ftdiv@f2+1,f,c
  9214  00E906  0E00               	movlw	0
  9215  00E908  1612               	andwf	___ftdiv@f2+2,f,c
  9216  00E90A  0E18               	movlw	24
  9217  00E90C  6E16               	movwf	___ftdiv@cntr,c
  9218  00E90E  D000               	goto	l2841
  9219  00E910                     l2841:
  9220  00E910  90D8               	bcf	status,0,c
  9221  00E912  3617               	rlcf	___ftdiv@f3,f,c
  9222  00E914  3618               	rlcf	___ftdiv@f3+1,f,c
  9223  00E916  3619               	rlcf	___ftdiv@f3+2,f,c
  9224  00E918  5010               	movf	___ftdiv@f2,w,c
  9225  00E91A  5C0D               	subwf	___ftdiv@f1,w,c
  9226  00E91C  5011               	movf	___ftdiv@f2+1,w,c
  9227  00E91E  580E               	subwfb	___ftdiv@f1+1,w,c
  9228  00E920  5012               	movf	___ftdiv@f2+2,w,c
  9229  00E922  580F               	subwfb	___ftdiv@f1+2,w,c
  9230  00E924  A0D8               	btfss	status,0,c
  9231  00E926  D007               	goto	l913
  9232  00E928  5010               	movf	___ftdiv@f2,w,c
  9233  00E92A  5E0D               	subwf	___ftdiv@f1,f,c
  9234  00E92C  5011               	movf	___ftdiv@f2+1,w,c
  9235  00E92E  5A0E               	subwfb	___ftdiv@f1+1,f,c
  9236  00E930  5012               	movf	___ftdiv@f2+2,w,c
  9237  00E932  5A0F               	subwfb	___ftdiv@f1+2,f,c
  9238  00E934  8017               	bsf	___ftdiv@f3,0,c
  9239  00E936                     l913:
  9240  00E936  90D8               	bcf	status,0,c
  9241  00E938  360D               	rlcf	___ftdiv@f1,f,c
  9242  00E93A  360E               	rlcf	___ftdiv@f1+1,f,c
  9243  00E93C  360F               	rlcf	___ftdiv@f1+2,f,c
  9244  00E93E  2E16               	decfsz	___ftdiv@cntr,f,c
  9245  00E940  D7E7               	goto	l2841
  9246  00E942  D000               	goto	l2851
  9247  00E944                     l2851:
  9248  00E944  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  9249  00E948  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9250  00E94C  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9251  00E950  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  9252  00E954  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  9253  00E958  ECA0  F072         	call	___ftpack	;wreg free
  9254  00E95C  C001  F00D         	movff	?___ftpack,?___ftdiv
  9255  00E960  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  9256  00E964  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  9257  00E968  D000               	goto	l910
  9258  00E96A                     l910:
  9259  00E96A  0012               	return		;funcret
  9260  00E96C                     __end_of___ftdiv:
  9261                           	opt stack 0
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           postinc0	equ	0xFEE
  9269                           wreg	equ	0xFE8
  9270                           postdec1	equ	0xFE5
  9271                           fsr1l	equ	0xFE1
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           fsr2h	equ	0xFDA
  9275                           fsr2l	equ	0xFD9
  9276                           status	equ	0xFD8
  9277                           
  9278 ;; *************** function ___awtoft *****************
  9279 ;; Defined at:
  9280 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  c               2    8[COMRAM] int 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  sign            1   11[COMRAM] unsigned char 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  3    8[COMRAM] float 
  9287 ;; Registers used:
  9288 ;;		wreg, status,2, status,0, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9294 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;Total ram usage:        4 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    1
  9301 ;; This function calls:
  9302 ;;		___ftpack
  9303 ;; This function is called by:
  9304 ;;		_main
  9305 ;;		_update_LCD_misc
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           	psect	text49
  9310  00DB48                     __ptext49:
  9311                           	opt stack 0
  9312  00DB48                     ___awtoft:
  9313                           	opt stack 29
  9314                           
  9315                           ;incstack = 0
  9316  00DB48  0E00               	movlw	0
  9317  00DB4A  6E0C               	movwf	___awtoft@sign,c
  9318  00DB4C  AE0A               	btfss	___awtoft@c+1,7,c
  9319  00DB4E  D007               	goto	l2863
  9320  00DB50  6C09               	negf	___awtoft@c,c
  9321  00DB52  1E0A               	comf	___awtoft@c+1,f,c
  9322  00DB54  B0D8               	btfsc	status,0,c
  9323  00DB56  2A0A               	incf	___awtoft@c+1,f,c
  9324  00DB58  0E01               	movlw	1
  9325  00DB5A  6E0C               	movwf	___awtoft@sign,c
  9326  00DB5C  D000               	goto	l2863
  9327  00DB5E                     l2863:
  9328  00DB5E  C009  F001         	movff	___awtoft@c,___ftpack@arg
  9329  00DB62  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  9330  00DB66  6A03               	clrf	___ftpack@arg+2,c
  9331  00DB68  0E8E               	movlw	142
  9332  00DB6A  6E04               	movwf	___ftpack@exp,c
  9333  00DB6C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  9334  00DB70  ECA0  F072         	call	___ftpack	;wreg free
  9335  00DB74  C001  F009         	movff	?___ftpack,?___awtoft
  9336  00DB78  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  9337  00DB7C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  9338  00DB80  D000               	goto	l748
  9339  00DB82                     l748:
  9340  00DB82  0012               	return		;funcret
  9341  00DB84                     __end_of___awtoft:
  9342                           	opt stack 0
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           postinc0	equ	0xFEE
  9350                           wreg	equ	0xFE8
  9351                           postdec1	equ	0xFE5
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           fsr2h	equ	0xFDA
  9356                           fsr2l	equ	0xFD9
  9357                           status	equ	0xFD8
  9358                           
  9359 ;; *************** function ___ftpack *****************
  9360 ;; Defined at:
  9361 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;  arg             3    0[COMRAM] unsigned um
  9364 ;;  exp             1    3[COMRAM] unsigned char 
  9365 ;;  sign            1    4[COMRAM] unsigned char 
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;		None
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  3    0[COMRAM] float 
  9370 ;; Registers used:
  9371 ;;		wreg, status,2, status,0
  9372 ;; Tracked objects:
  9373 ;;		On entry : 0/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9377 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;Total ram usage:        8 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		___awtoft
  9387 ;;		___ftdiv
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           	psect	text50
  9392  00E540                     __ptext50:
  9393                           	opt stack 0
  9394  00E540                     ___ftpack:
  9395                           	opt stack 29
  9396                           
  9397                           ;incstack = 0
  9398  00E540  5004               	movf	___ftpack@exp,w,c
  9399  00E542  B4D8               	btfsc	status,2,c
  9400  00E544  D005               	goto	l2701
  9401  00E546  5001               	movf	___ftpack@arg,w,c
  9402  00E548  1002               	iorwf	___ftpack@arg+1,w,c
  9403  00E54A  1003               	iorwf	___ftpack@arg+2,w,c
  9404  00E54C  A4D8               	btfss	status,2,c
  9405  00E54E  D00E               	goto	l2707
  9406  00E550                     l2701:
  9407  00E550  0E00               	movlw	0
  9408  00E552  6E01               	movwf	?___ftpack,c
  9409  00E554  0E00               	movlw	0
  9410  00E556  6E02               	movwf	?___ftpack+1,c
  9411  00E558  0E00               	movlw	0
  9412  00E55A  6E03               	movwf	?___ftpack+2,c
  9413  00E55C  D053               	goto	l838
  9414  00E55E  D006               	goto	l2707
  9415  00E560                     l2705:
  9416  00E560  2A04               	incf	___ftpack@exp,f,c
  9417  00E562  90D8               	bcf	status,0,c
  9418  00E564  3203               	rrcf	___ftpack@arg+2,f,c
  9419  00E566  3202               	rrcf	___ftpack@arg+1,f,c
  9420  00E568  3201               	rrcf	___ftpack@arg,f,c
  9421  00E56A  D000               	goto	l2707
  9422  00E56C                     l2707:
  9423  00E56C  0E00               	movlw	0
  9424  00E56E  1401               	andwf	___ftpack@arg,w,c
  9425  00E570  6E06               	movwf	??___ftpack& (0+255),c
  9426  00E572  0E00               	movlw	0
  9427  00E574  1402               	andwf	___ftpack@arg+1,w,c
  9428  00E576  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9429  00E578  0EFE               	movlw	254
  9430  00E57A  1403               	andwf	___ftpack@arg+2,w,c
  9431  00E57C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9432  00E57E  5006               	movf	??___ftpack,w,c
  9433  00E580  1007               	iorwf	??___ftpack+1,w,c
  9434  00E582  1008               	iorwf	??___ftpack+2,w,c
  9435  00E584  B4D8               	btfsc	status,2,c
  9436  00E586  D00E               	goto	l2713
  9437  00E588  D7EB               	goto	l2705
  9438  00E58A  D00C               	goto	l2713
  9439  00E58C                     l2709:
  9440  00E58C  2A04               	incf	___ftpack@exp,f,c
  9441  00E58E  0E01               	movlw	1
  9442  00E590  2601               	addwf	___ftpack@arg,f,c
  9443  00E592  0E00               	movlw	0
  9444  00E594  2202               	addwfc	___ftpack@arg+1,f,c
  9445  00E596  0E00               	movlw	0
  9446  00E598  2203               	addwfc	___ftpack@arg+2,f,c
  9447  00E59A  90D8               	bcf	status,0,c
  9448  00E59C  3203               	rrcf	___ftpack@arg+2,f,c
  9449  00E59E  3202               	rrcf	___ftpack@arg+1,f,c
  9450  00E5A0  3201               	rrcf	___ftpack@arg,f,c
  9451  00E5A2  D000               	goto	l2713
  9452  00E5A4                     l2713:
  9453  00E5A4  0E00               	movlw	0
  9454  00E5A6  1401               	andwf	___ftpack@arg,w,c
  9455  00E5A8  6E06               	movwf	??___ftpack& (0+255),c
  9456  00E5AA  0E00               	movlw	0
  9457  00E5AC  1402               	andwf	___ftpack@arg+1,w,c
  9458  00E5AE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9459  00E5B0  0EFF               	movlw	255
  9460  00E5B2  1403               	andwf	___ftpack@arg+2,w,c
  9461  00E5B4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9462  00E5B6  5006               	movf	??___ftpack,w,c
  9463  00E5B8  1007               	iorwf	??___ftpack+1,w,c
  9464  00E5BA  1008               	iorwf	??___ftpack+2,w,c
  9465  00E5BC  B4D8               	btfsc	status,2,c
  9466  00E5BE  D008               	goto	l2717
  9467  00E5C0  D7E5               	goto	l2709
  9468  00E5C2  D006               	goto	l2717
  9469  00E5C4                     l2715:
  9470  00E5C4  0604               	decf	___ftpack@exp,f,c
  9471  00E5C6  90D8               	bcf	status,0,c
  9472  00E5C8  3601               	rlcf	___ftpack@arg,f,c
  9473  00E5CA  3602               	rlcf	___ftpack@arg+1,f,c
  9474  00E5CC  3603               	rlcf	___ftpack@arg+2,f,c
  9475  00E5CE  D000               	goto	l2717
  9476  00E5D0                     l2717:
  9477  00E5D0  BE02               	btfsc	___ftpack@arg+1,7,c
  9478  00E5D2  D004               	goto	l849
  9479  00E5D4  0E02               	movlw	2
  9480  00E5D6  6004               	cpfslt	___ftpack@exp,c
  9481  00E5D8  D7F5               	goto	l2715
  9482  00E5DA  D000               	goto	l849
  9483  00E5DC                     l849:
  9484  00E5DC  B004               	btfsc	___ftpack@exp,0,c
  9485  00E5DE  D002               	goto	l2723
  9486  00E5E0  9E02               	bcf	___ftpack@arg+1,7,c
  9487  00E5E2  D000               	goto	l2723
  9488  00E5E4                     l2723:
  9489  00E5E4  90D8               	bcf	status,0,c
  9490  00E5E6  3204               	rrcf	___ftpack@exp,f,c
  9491  00E5E8  5004               	movf	___ftpack@exp,w,c
  9492  00E5EA  1203               	iorwf	___ftpack@arg+2,f,c
  9493  00E5EC  5005               	movf	___ftpack@sign,w,c
  9494  00E5EE  B4D8               	btfsc	status,2,c
  9495  00E5F0  D002               	goto	l2729
  9496  00E5F2  8E03               	bsf	___ftpack@arg+2,7,c
  9497  00E5F4  D000               	goto	l2729
  9498  00E5F6                     l2729:
  9499  00E5F6  C001  F001         	movff	___ftpack@arg,?___ftpack
  9500  00E5FA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9501  00E5FE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9502  00E602  D000               	goto	l838
  9503  00E604                     l838:
  9504  00E604  0012               	return		;funcret
  9505  00E606                     __end_of___ftpack:
  9506                           	opt stack 0
  9507                           tblptru	equ	0xFF8
  9508                           tblptrh	equ	0xFF7
  9509                           tblptrl	equ	0xFF6
  9510                           tablat	equ	0xFF5
  9511                           prodh	equ	0xFF4
  9512                           prodl	equ	0xFF3
  9513                           postinc0	equ	0xFEE
  9514                           wreg	equ	0xFE8
  9515                           postdec1	equ	0xFE5
  9516                           fsr1l	equ	0xFE1
  9517                           indf2	equ	0xFDF
  9518                           postinc2	equ	0xFDE
  9519                           fsr2h	equ	0xFDA
  9520                           fsr2l	equ	0xFD9
  9521                           status	equ	0xFD8
  9522                           
  9523 ;; *************** function _strcpy *****************
  9524 ;; Defined at:
  9525 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;  to              2    0[COMRAM] PTR unsigned char 
  9528 ;;		 -> NULL(0), buffer(31), 
  9529 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9530 ;;		 -> STR_16(2), STR_15(2), STR_14(2), STR_13(2), 
  9531 ;;		 -> STR_12(21), STR_11(4), STR_10(4), STR_9(7), 
  9532 ;;		 -> STR_8(10), STR_7(7), STR_6(12), STR_5(2), 
  9533 ;;		 -> STR_4(4), STR_3(4), STR_2(6), STR_1(22), 
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;  cp              2    4[COMRAM] PTR unsigned char 
  9536 ;;		 -> NULL(0), buffer(31), 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  2    0[COMRAM] PTR unsigned char 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9547 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;Total ram usage:        6 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_Initialize_Screen
  9556 ;;		_Wait_One_Second
  9557 ;;		_Wait_One_Second_With_Beep
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text51
  9562  00DAE4                     __ptext51:
  9563                           	opt stack 0
  9564  00DAE4                     _strcpy:
  9565                           	opt stack 27
  9566                           
  9567                           ;incstack = 0
  9568  00DAE4  C001  F005         	movff	strcpy@to,strcpy@cp
  9569  00DAE8  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  9570  00DAEC  D005               	goto	l2953
  9571  00DAEE                     l2951:
  9572  00DAEE  4A05               	infsnz	strcpy@cp,f,c
  9573  00DAF0  2A06               	incf	strcpy@cp+1,f,c
  9574  00DAF2  4A03               	infsnz	strcpy@from,f,c
  9575  00DAF4  2A04               	incf	strcpy@from+1,f,c
  9576  00DAF6  D000               	goto	l2953
  9577  00DAF8                     l2953:
  9578  00DAF8  C003  FFF6         	movff	strcpy@from,tblptrl
  9579  00DAFC  C004  FFF7         	movff	strcpy@from+1,tblptrh
  9580  00DB00                     	if	0	;tblptru may be non-zero
  9581  00DB00                     	endif
  9582  00DB00                     	if	0	;tblptru may be non-zero
  9583  00DB00                     	endif
  9584  00DB00  C005  FFD9         	movff	strcpy@cp,fsr2l
  9585  00DB04  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  9586  00DB08  0008               	tblrd		*
  9587  00DB0A  CFF5 FFDF          	movff	tablat,indf2
  9588  00DB0E  50DF               	movf	indf2,w,c
  9589  00DB10  A4D8               	btfss	status,2,c
  9590  00DB12  D7ED               	goto	l2951
  9591                           
  9592                           ;	Return value of _strcpy is never used
  9593  00DB14  0012               	return		;funcret
  9594  00DB16                     __end_of_strcpy:
  9595                           	opt stack 0
  9596                           tblptru	equ	0xFF8
  9597                           tblptrh	equ	0xFF7
  9598                           tblptrl	equ	0xFF6
  9599                           tablat	equ	0xFF5
  9600                           prodh	equ	0xFF4
  9601                           prodl	equ	0xFF3
  9602                           postinc0	equ	0xFEE
  9603                           wreg	equ	0xFE8
  9604                           postdec1	equ	0xFE5
  9605                           fsr1l	equ	0xFE1
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           fsr2h	equ	0xFDA
  9609                           fsr2l	equ	0xFD9
  9610                           status	equ	0xFD8
  9611                           
  9612 ;; *************** function _Wait_Half_Second *****************
  9613 ;; Defined at:
  9614 ;;		line 531 in file "Lab8pE.c"
  9615 ;; Parameters:    Size  Location     Type
  9616 ;;		None
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;		None
  9619 ;; Return value:  Size  Location     Type
  9620 ;;		None               void
  9621 ;; Registers used:
  9622 ;;		wreg, status,2
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;Total ram usage:        0 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; This function calls:
  9635 ;;		Nothing
  9636 ;; This function is called by:
  9637 ;;		_Wait_One_Second
  9638 ;;		_Wait_One_Second_With_Beep
  9639 ;;		_Old_Wait_One_Second
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           	psect	text52
  9644  00D9B4                     __ptext52:
  9645                           	opt stack 0
  9646  00D9B4                     _Wait_Half_Second:
  9647                           	opt stack 27
  9648                           
  9649                           ;Lab8pE.c: 533: T0CON = 0x03;
  9650                           
  9651                           ;incstack = 0
  9652  00D9B4  0E03               	movlw	3
  9653  00D9B6  6ED5               	movwf	4053,c	;volatile
  9654                           
  9655                           ;Lab8pE.c: 534: TMR0L = 0xDB;
  9656  00D9B8  0EDB               	movlw	219
  9657  00D9BA  6ED6               	movwf	4054,c	;volatile
  9658                           
  9659                           ;Lab8pE.c: 535: TMR0H = 0x0B;
  9660  00D9BC  0E0B               	movlw	11
  9661  00D9BE  6ED7               	movwf	4055,c	;volatile
  9662                           
  9663                           ;Lab8pE.c: 536: INTCONbits.TMR0IF = 0;
  9664  00D9C0  94F2               	bcf	intcon,2,c	;volatile
  9665                           
  9666                           ;Lab8pE.c: 537: T0CONbits.TMR0ON = 1;
  9667  00D9C2  8ED5               	bsf	4053,7,c	;volatile
  9668                           
  9669                           ;Lab8pE.c: 538: while (INTCONbits.TMR0IF == 0);
  9670  00D9C4  D000               	goto	l450
  9671  00D9C6                     l450:
  9672  00D9C6  A4F2               	btfss	intcon,2,c	;volatile
  9673  00D9C8  D7FE               	goto	l450
  9674                           
  9675                           ;Lab8pE.c: 539: T0CONbits.TMR0ON = 0;
  9676  00D9CA  9ED5               	bcf	4053,7,c	;volatile
  9677  00D9CC  0012               	return		;funcret
  9678  00D9CE                     __end_of_Wait_Half_Second:
  9679                           	opt stack 0
  9680                           tblptru	equ	0xFF8
  9681                           tblptrh	equ	0xFF7
  9682                           tblptrl	equ	0xFF6
  9683                           tablat	equ	0xFF5
  9684                           prodh	equ	0xFF4
  9685                           prodl	equ	0xFF3
  9686                           intcon	equ	0xFF2
  9687                           postinc0	equ	0xFEE
  9688                           wreg	equ	0xFE8
  9689                           postdec1	equ	0xFE5
  9690                           fsr1l	equ	0xFE1
  9691                           indf2	equ	0xFDF
  9692                           postinc2	equ	0xFDE
  9693                           fsr2h	equ	0xFDA
  9694                           fsr2l	equ	0xFD9
  9695                           status	equ	0xFD8
  9696                           
  9697 ;; *************** function _Deactivate_Buzzer *****************
  9698 ;; Defined at:
  9699 ;;		line 382 in file "Lab8pE.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;		None
  9702 ;; Auto vars:     Size  Location     Type
  9703 ;;		None
  9704 ;; Return value:  Size  Location     Type
  9705 ;;		None               void
  9706 ;; Registers used:
  9707 ;;		wreg, status,2
  9708 ;; Tracked objects:
  9709 ;;		On entry : 0/0
  9710 ;;		On exit  : 0/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;Total ram usage:        0 bytes
  9718 ;; Hardware stack levels used:    1
  9719 ;; This function calls:
  9720 ;;		Nothing
  9721 ;; This function is called by:
  9722 ;;		_Wait_One_Second_With_Beep
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726                           	psect	text53
  9727  00D91C                     __ptext53:
  9728                           	opt stack 0
  9729  00D91C                     _Deactivate_Buzzer:
  9730                           	opt stack 27
  9731                           
  9732                           ;Lab8pE.c: 384: CCP2CON = 0x0;
  9733                           
  9734                           ;incstack = 0
  9735  00D91C  0E00               	movlw	0
  9736  00D91E  6EBA               	movwf	4026,c	;volatile
  9737                           
  9738                           ;Lab8pE.c: 385: PORTBbits.RB3 = 0;
  9739  00D920  9681               	bcf	3969,3,c	;volatile
  9740  00D922  0012               	return		;funcret
  9741  00D924                     __end_of_Deactivate_Buzzer:
  9742                           	opt stack 0
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           intcon	equ	0xFF2
  9750                           postinc0	equ	0xFEE
  9751                           wreg	equ	0xFE8
  9752                           postdec1	equ	0xFE5
  9753                           fsr1l	equ	0xFE1
  9754                           indf2	equ	0xFDF
  9755                           postinc2	equ	0xFDE
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760 ;; *************** function _Activate_Buzzer *****************
  9761 ;; Defined at:
  9762 ;;		line 374 in file "Lab8pE.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;		None
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;		None               void
  9769 ;; Registers used:
  9770 ;;		wreg, status,2
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9780 ;;Total ram usage:        0 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; This function calls:
  9783 ;;		Nothing
  9784 ;; This function is called by:
  9785 ;;		_Wait_One_Second_With_Beep
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           
  9789                           	psect	text54
  9790  00D952                     __ptext54:
  9791                           	opt stack 0
  9792  00D952                     _Activate_Buzzer:
  9793                           	opt stack 27
  9794                           
  9795                           ;Lab8pE.c: 376: PR2 = 0b11111001;
  9796                           
  9797                           ;incstack = 0
  9798  00D952  0EF9               	movlw	249
  9799  00D954  6ECB               	movwf	4043,c	;volatile
  9800                           
  9801                           ;Lab8pE.c: 377: T2CON = 0b00000101;
  9802  00D956  0E05               	movlw	5
  9803  00D958  6ECA               	movwf	4042,c	;volatile
  9804                           
  9805                           ;Lab8pE.c: 378: CCPR2L = 0b01001010;
  9806  00D95A  0E4A               	movlw	74
  9807  00D95C  6EBB               	movwf	4027,c	;volatile
  9808                           
  9809                           ;Lab8pE.c: 379: CCP2CON = 0b00111100;
  9810  00D95E  0E3C               	movlw	60
  9811  00D960  6EBA               	movwf	4026,c	;volatile
  9812  00D962  0012               	return		;funcret
  9813  00D964                     __end_of_Activate_Buzzer:
  9814                           	opt stack 0
  9815                           tblptru	equ	0xFF8
  9816                           tblptrh	equ	0xFF7
  9817                           tblptrl	equ	0xFF6
  9818                           tablat	equ	0xFF5
  9819                           prodh	equ	0xFF4
  9820                           prodl	equ	0xFF3
  9821                           intcon	equ	0xFF2
  9822                           postinc0	equ	0xFEE
  9823                           wreg	equ	0xFE8
  9824                           postdec1	equ	0xFE5
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           fsr2h	equ	0xFDA
  9829                           fsr2l	equ	0xFD9
  9830                           status	equ	0xFD8
  9831                           tblptru	equ	0xFF8
  9832                           tblptrh	equ	0xFF7
  9833                           tblptrl	equ	0xFF6
  9834                           tablat	equ	0xFF5
  9835                           prodh	equ	0xFF4
  9836                           prodl	equ	0xFF3
  9837                           intcon	equ	0xFF2
  9838                           postinc0	equ	0xFEE
  9839                           wreg	equ	0xFE8
  9840                           postdec1	equ	0xFE5
  9841                           fsr1l	equ	0xFE1
  9842                           indf2	equ	0xFDF
  9843                           postinc2	equ	0xFDE
  9844                           fsr2h	equ	0xFDA
  9845                           fsr2l	equ	0xFD9
  9846                           status	equ	0xFD8
  9847                           
  9848                           	psect	rparam
  9849  0000                     tblptru	equ	0xFF8
  9850                           tblptrh	equ	0xFF7
  9851                           tblptrl	equ	0xFF6
  9852                           tablat	equ	0xFF5
  9853                           prodh	equ	0xFF4
  9854                           prodl	equ	0xFF3
  9855                           intcon	equ	0xFF2
  9856                           postinc0	equ	0xFEE
  9857                           wreg	equ	0xFE8
  9858                           postdec1	equ	0xFE5
  9859                           fsr1l	equ	0xFE1
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           fsr2h	equ	0xFDA
  9863                           fsr2l	equ	0xFD9
  9864                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    475
    Data        35
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     65     123
    BANK0           128      0      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(COMRAM[3]), 
		 -> PED_NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(COMRAM[3]), 
		 -> PED_NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), 
		 -> STR_12(CODE[21]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[7]), 
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), STR_5(CODE[2]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), STR_1(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(COMRAM[2]), SW_MODE_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), 
		 -> SW_EWPED_Txt(COMRAM[2]), SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), PED_EW_Count(COMRAM[3]), 
		 -> PED_NS_Count(COMRAM[3]), EWLT_Count(COMRAM[3]), EW_Count(COMRAM[3]), NSLT_Count(COMRAM[3]), 
		 -> NS_Count(COMRAM[3]), FlashingR_Txt(COMRAM[2]), Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___ftdiv->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  428878
                                             63 COMRAM     2     2      0
                           _Day_Mode
                           _Init_ADC
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  149521
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   53110
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3402
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1611
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1521
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1521
                                              6 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  220864
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   71281
                                             60 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   22877
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   48314
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   71343
                                             60 COMRAM     3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   22789
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     932
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     936
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   48314
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      3     3      0   25838
                                             57 COMRAM     3     3      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   20705
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    8408
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     689
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     348
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2201
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1826
                                              8 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1771
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___wmul
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   ___ftge
   ___wmul
   _get_full_ADC
   _init_IO
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      1F       5       24.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     41      7B       1       96.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9A      34        0.0%
DATA                 0      0      9A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Mar 24 09:33:08 2022

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep E178                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                      ___awdiv@sign 0006                 ___wmul@multiplicand 0003  
          update_LCD_color@Circle_Y 0035                                 l113 DE86  
                               l123 D984                                 l230 E7A8  
                               l401 DC54                                 l410 DC98  
                               l226 E7AA                                 l403 DC58  
                               l227 E716                                 l404 DC5E  
                               l412 DC9C                                 l173 E0EE  
                               l237 F03C                                 l405 DC62  
                               l413 DCA2                                 l229 E786  
                               l406 DC84                                 l414 DCA6  
                               l167 DAE2                                 l191 ECD4  
                               l255 EBDC                                 l415 DCC8  
                               l431 E692                                 l271 E176  
                               l433 E6CE                                 l450 D9C6  
                               l530 DA5A                                 l522 DF3A  
                               l523 DF3C                                 l524 DF46  
                               l189 EDFA                                 l525 DF48  
                               l198 ED50                                 l438 E3D2  
                               l518 DF20                                 l383 DCDC  
                               l527 DF62                                 l376 DA12  
                               l392 DD20                                 l481 E53E  
                               l465 F69A                                 l385 DCE0  
                               l386 DCE6                                 l394 DD24  
                               l474 EF78                                 l379 DA32  
                               l723 E32C                                 l387 DCEA  
                               l395 DD2A                                 l388 DD0C  
                               l396 DD2E                                 l397 DD50  
                               l910 E96A                                 l736 DFE4  
                               l913 E936                                 l748 DB82  
                               l838 E604                                 l919 E296  
                               l849 E5DC                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 003B                                 _PR2 000FCB  
                 _Deactivate_Buzzer D91C                                 _dir 0079  
                               _nbr 006A                                 _txt 006C  
                    drawFastHLine@w 0009                      drawFastHLine@x 0012  
                    drawFastHLine@y 0008                        ___awmod@sign 0006  
           __end_of_update_LCD_misc F33A                                 wreg 000FE8  
                ??_Wait_Half_Second 0001                  ?_Deactivate_Buzzer 0001  
                   ??_fillRectangle 000D                        __CFG_LVP$OFF 000000  
           _TFT_GreenTab_Initialize DA5C                        ___ftdiv@cntr 0016  
                      ___ftdiv@sign 001B                        __CFG_WDT$OFF 000000  
                    drawFastVLine@h 0009                                l1087 DBC0  
                              l3031 E2D6                                l3033 E2E0  
                              l3025 E2C0                                l3051 E322  
                              l3043 E306                                l3035 E2E8  
                              l3019 E2AE                      drawFastVLine@x 0012  
                              l3213 E794                                l3205 E77C  
                    drawFastVLine@y 0008                                l3047 E312  
                              l3071 DF96                                l3063 DF7A  
                              l3231 E138                                l3073 DFA0  
                              l3321 EEB0                                l3313 EE00  
                              l3241 E15E                                l3209 E78A  
                              l3075 DFA8                                l3083 DFCA  
                              l3067 DF88                                l3251 F41A  
                              l3331 EF5C                                l3243 E16C  
                              l3227 E100                                l3219 E7A4  
                              l2701 E550                                l2613 DAC4  
                              l2605 E0D6                                l2621 DD5C  
                              l3325 EF06                                l3317 EE58  
                              l2607 E0E4                                l3087 DFDA  
                              l3079 DFBE                                l3255 F4EE  
                              l3431 DC68                                l3415 DCF0  
                              l3423 DD34                                l2713 E5A4  
                              l2705 E560                                l2625 DD78  
                              l2641 ECC2                                l3265 E480  
                              l3193 E74E                                l2723 E5E4  
                              l2715 E5C4                                l2707 E56C  
                              l2651 ECE0                                l3275 E52E  
                              l3443 DB1C                                l3259 F5C4  
                              l3187 E6E0                                l2717 E5D0  
                              l2709 E58C                                l2821 E8D0  
                              l2645 ECD0                                l2637 ECB6  
                              l2741 E7D4                                l3269 E4D8  
                              l3453 DB38                                l3461 DA96  
                              l3605 E63C                                l3373 DF18  
                              l3365 DF06                                l2815 E8A8  
                              l2591 E078                                l2655 ED10  
                              l2647 ECD8                                l3447 DB26  
                              l3439 DCAC                                l3623 E67E  
                              l2729 E5F6                                l2841 E910  
                              l2817 E8C2                                l2657 ED44  
                              l2753 E818                                l3457 DA8C  
                              l3385 DF32                                l3377 DF24  
                              l3369 DF10                                l2851 E944  
                              l2595 E0B0                                l2675 EDC6  
                              l2667 ED72                                l2683 EDF6  
                              l2659 ED48                                l2691 DB94  
                              l3467 DAA8                                l2677 EDEE  
                              l2669 ED9A                                l2765 E876  
                              l2757 E832                                l2917 F022  
                              l2951 DAEE                                l2863 DB5E  
                              l2871 E234                                l2767 E87C  
                              l2953 DAF8                                l2881 E292  
                              l2689 DB8E                                l2945 F112  
                              l3673 E390                                l2875 E266  
                              l2795 EC3E                                l2779 EBC2  
                              l2981 F1E8                                l3941 E472  
                              l2799 EC90                                l2993 F212  
                              l2985 F1F6                                l2977 F1DA  
                              l3937 E466                                l2995 F218  
                              l2989 F204                                STR_1 FF96  
                              STR_2 FFE5                                STR_3 FFEB  
                              STR_4 FFEF                                STR_5 FFFD  
                              STR_6 FFC1                                STR_7 FFD7  
                              STR_8 FFCD                                STR_9 FFDE  
                              u1320 E0A6                                u2130 E12E  
                              u2050 E70E                                u2060 E744  
                              u1610 E7FC                                u1470 EDA8  
                              u1711 E89A                                u2520 E460  
                              u2530 E462                                u1731 E8B8  
                              u1840 F1AC                                u1850 F1AE  
                              _MODE 0068                                _TRMT 007D61  
               ??_Deactivate_Buzzer 0001                                _main E3D4  
                              _font FDBB                        ___ftpack@arg 0001  
                      ___ftpack@exp 0004                      ??_get_full_ADC 0003  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 0042                                _volt 0065  
                   drawFastHLine@hi 0010                     drawFastHLine@lo 0011  
          __end_of_update_LCD_color F69C            __end_of_update_LCD_count EF7A  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                   ??_drawFastHLine 000C                     ??_drawFastVLine 000C  
                      ___param_bank 000010                        _Act_Mode_Txt 0055  
         __end_of_Deactivate_Buzzer D924                     drawFastVLine@hi 0010  
                   drawFastVLine@lo 0011                         _SW_EWLT_Txt 005B  
                       _SW_MODE_Txt 005F                               ?_main 0001  
                   __end_of___awdiv E32E                     drawCircle@ddF_x 0016  
                             STR_10 FFF3                     drawCircle@ddF_y 0018  
                             STR_11 FFF7                               STR_12 FFAC  
                             STR_13 FFFD                               STR_14 FFFB  
                             STR_15 FFFD                               STR_16 FFFB  
                   __end_of___awmod DFE6                     __end_of___ftdiv E96C  
                             _T0CON 000FD5                     ___awdiv@divisor 0003  
                             _T2CON 000FCA                               _T3CON 000FB1  
                   ___awdiv@counter 0005                     drawCircle@color 0012  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 006E  
                      ?_PED_Control 003D                               _Rcmd1 EA5E  
                             _Rcmd3 E96C                         _SW_NSLT_Txt 0061  
                     drawRect@color 001B                       ___awtoft@sign 000C  
                   __end_of_init_IO D9B4                               _font2 FEBA  
             fillCircleHelper@ddF_x 0021               fillCircleHelper@ddF_y 0023  
                 ??_Wait_One_Second 003D                       ___ftpack@sign 0005  
             fillCircleHelper@delta 001B               fillCircleHelper@color 001D  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 003B  
                  __end_of_Day_Mode E6D0                      _Wait_N_Seconds DA86  
                   write_data@data_ 0003                     __initialization DC00  
                      __end_of_main E47C                        __end_of_font FEBA  
                  __end_of_Init_ADC D932                    __end_of_Rcmd2red DC00  
                        _Night_Mode E32E                              ??_main 0040  
                     __activetblptr 000002               Wait_N_Seconds@seconds 003D  
                 __end_of_LCD_Reset D976                        _SW_EWPED_Txt 005D  
         ??_TFT_GreenTab_Initialize 000D                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                              _ADRESH 000FC4  
                            _ADRESL 000FC3                              _CCPR2L 000FBB  
              PED_Control@direction 003E                    ___awdiv@dividend 0001  
                  __end_of___awtoft DB84                    __end_of___ftpack E606  
                            _OSCCON 000FD3                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds DAB4  
                      _SW_NSPED_Txt 0063                    __end_of_delay_ms DE8E  
                            _Set_EW DC42                              _Set_NS DCCA  
                  __end_of_fillRect DD9C                    __end_of_drawChar EDFC  
                  __end_of_drawRect DEF4                  __size_of_Set_EW_LT 0044  
                __size_of_OpenUSART 0070                              ___ftge E202  
                __size_of_Set_NS_LT 0044            __size_of_Activate_Buzzer 0012  
                            ___wmul DA34                           ??___awdiv 0005  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext E88A  
                         ??___awmod 0005                           ??___ftdiv 0013  
                            _buffer 0080                              clear_0 DC06  
                            clear_1 DC12                    ___awdiv@quotient 0007  
                   ___awmod@divisor 0003          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0005                        drawtext@size 0030  
                            _strcpy DAE4                              _strlen DB84  
              __end_of_get_full_ADC DA34                           ??_init_IO 0001  
                      __pdataCOMRAM 0042  __size_of_Wait_One_Second_With_Beep 008A  
                       Set_EW@color 0036                        __mediumconst FDBA  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                    __end_of_spiwrite D98A  
                       Set_NS@color 0036                          __accesstop 0080  
           __end_of__initialization DC38                          ___ftge@ff1 0001  
                        ___ftge@ff2 0004                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 000D  
                        ___ftdiv@f2 0010                          ___ftdiv@f3 0017  
                        ___awtoft@c 0009                       __end_of_Rcmd1 EB6E  
                     __end_of_Rcmd3 EA5E                      __pcstackCOMRAM 0001  
                     __end_of_font2 FF96                         ?_Night_Mode 0001  
                    drawPixel@color 0009              __size_of_write_command 0010  
                         ?_Day_Mode 0001          fillCircleHelper@cornername 0019  
                           ??_Rcmd1 000D                             ??_Rcmd3 000D  
                __size_of_drawPixel 0030                   __end_of_Set_EW_LT DCCA  
                 __end_of_OpenUSART DF64                   __end_of_Set_NS_LT DD52  
              __size_of_PED_Control 0032                          __pbssBANK0 0080  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                __size_of_init_UART 0014           __size_of_Wait_Half_Second 001A  
                   spiwrite@spidata 0002                   ?_update_LCD_color 0033  
                 ?_update_LCD_count 003A                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0034                  ??_update_LCD_count 003B  
                           ?___ftge 0001                             ?___wmul 0001  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
         update_LCD_PED_Count@count 003A                           ?___awtoft 0009  
                         ?___ftpack 0001                     _Wait_One_Second DFE6  
                        _fillCircle DDEA                             ?_strcpy 0001  
                           ?_strlen 0001                   ??_Activate_Buzzer 0001  
                        _fillScreen D9CE                          _drawCircle EF7A  
                        ??_Day_Mode 0040                           ?_delay_ms 0007  
                         ?_fillRect 0013           update_LCD_count@direction 003B  
                         ?_drawChar 001E                             _SSPCON1 000FC6  
                         ?_drawRect 0013                             _SSPSTAT 000FC7  
             __end_of_fillRectangle E7AC                           ?_drawtext 0029  
                           _SW_EWLT 0072                             _SW_MODE 0074  
                        ??_Init_ADC 0001                             _SW_NSLT 0075  
                        ??_Rcmd2red 0004                 __size_of_Night_Mode 00A6  
                     _write_command D932                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0044  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine E178  
                 __end_of_drawPixel DAE4               __end_of_drawFastVLine E0F0  
                  _fillCircleHelper EB6E                     __size_of___ftge 0096  
                           ___awdiv E298                             ___awmod DF64  
                           ___ftdiv E88A                     __size_of___wmul 0028  
             __size_of_get_full_ADC 0026                           ?_spiwrite 0001  
                           __pcinit DC00                          ??___awtoft 000C  
                        ??___ftpack 0006                             __ramtop 1000  
                           __ptext0 E3D4                             __ptext1 D98A  
                           __ptext2 DEF4                             __ptext3 D99E  
                           __ptext4 E32E                             __ptext5 F69C  
                           __ptext6 D9CE                             __ptext7 E6D0  
                           __ptext8 DE8E                             __ptext9 E0F0  
                 __end_of_init_UART D99E                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                           _init_IO D99E                           _T3CONbits 000FB1  
                  ___awmod@dividend 0001                          ??_delay_ms 0009  
                     drawtext@_text 002A                       drawtext@color 002C  
                        ??_fillRect 0018                          ??_drawChar 0025  
                         _LCD_Reset D964                          ??_drawRect 001D  
                     _setAddrWindow DD9C                  drawFastHLine@color 000A  
                        delay_ms@ms 0007                end_of_initialization DC38  
                        ??_drawtext 0031                      ?_write_command 0001  
                     __Lmediumconst FDBA                           _PED_Count 0071  
                      _get_full_ADC DA0E                        PED_Control@i 003F  
     __size_of_update_LCD_PED_Count 00C4             __end_of_Wait_One_Second E068  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 0001                             strlen@s 0001  
                   fillCircle@color 0031                         ?_fillCircle 002B  
                         _PORTAbits 000F80                    drawtext@cursor_x 0039  
                  drawtext@cursor_y 0038                           _PORTBbits 000F81  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0014  
                       ?_drawCircle 000C                          drawChar@bg 0022  
                         _TRISCbits 000F94                      ?_setAddrWindow 0004  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 003D  
                  drawtext@textsize 0033            __size_of_update_LCD_misc 0212  
                        drawPixel@x 000B                          drawPixel@y 0008  
                  _Wait_Half_Second D9B4                         ___ftdiv@exp 001A  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 003D  
                get_full_ADC@result 0005                      __end_of_Set_EW DC86  
                    __end_of_Set_NS DD0E                      __end_of___ftge E298  
                    __end_of___wmul DA5C                       delay_ms@count 000B  
                        _write_data D942                       __pidataCOMRAM D9EB  
                      ??_Night_Mode 003F            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 002E                      __end_of_strcpy DB16  
                    __end_of_strlen DBC2                 start_initialization DC00  
                 __size_of_Day_Mode 00CA                     ??_write_command 0003  
                         _Set_EW_LT DC86                           _OpenUSART DEF4  
                         _Set_NS_LT DD0E                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                __end_of_Night_Mode E3D4                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 003E  
               __size_of_drawCircle 01AE                            ??_Set_EW 0036  
                          ??_Set_NS 0036                     _Activate_Buzzer D952  
                  ?_Wait_One_Second 0001                            ??___ftge 0007  
                          ??___wmul 0005                   update_LCD_misc@ch 003C  
                   setAddrWindow@x0 0007                     setAddrWindow@x1 0005  
                   setAddrWindow@y0 0004                     setAddrWindow@y1 0006  
                          ??_strcpy 0005                            ??_strlen 0003  
                      _PED_EW_Count 004F           __size_of_update_LCD_color 0362  
         __size_of_update_LCD_count 017E                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                         __pbssCOMRAM 0065  
                     ??_PED_Control 003E                     ??_setAddrWindow 0007  
                      _PED_NS_Count 0052                         ??_LCD_Reset 000D  
          __end_of_fillCircleHelper ECA6                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 0001                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 00DE  
                 ??_update_LCD_misc 003A     __end_of_TFT_GreenTab_Initialize DA86  
                     __pmediumconst FDBA                            ?___awdiv 0001  
                          ?___awmod 0001                            ?___ftdiv 000D  
                         __tft_type 0077                           _direction 007A  
                drawFastVLine@color 000A                         ?_write_data 0001  
                         _drawPixel DAB4                   __size_of_spiwrite 0014  
                          ?_init_IO 0001                   _Initialize_Screen F69C  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
                         _init_UART D98A                  ?_Initialize_Screen 0001  
                          _FLASHING 006F   __end_of_Wait_One_Second_With_Beep E202  
               __end_of_PED_Control DB48             __end_of_Activate_Buzzer D964  
                    ___wmul@product 0005                 ??_Initialize_Screen 003A  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 0046  
                         fillRect@h 0015                           fillRect@i 001C  
                         fillRect@w 0014                           fillRect@x 001B  
                         fillRect@y 0013                           drawChar@c 001F  
                         drawChar@i 0028                           drawChar@j 0027  
                      ??_fillCircle 0033                           drawChar@x 0026  
                         drawChar@y 001E                          ?_drawPixel 0008  
            __size_of_fillRectangle 00DC                            _NS_Count 004C  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second D9CE  
                 ___wmul@multiplier 0001           __end_of_Initialize_Screen FDBA  
                      ??_fillScreen 0016                           drawRect@h 0019  
                         drawRect@w 0017                           drawRect@x 0013  
                         drawRect@y 0015                       _FlashingR_Txt 0057  
                     _FlashingS_Txt 0059                        ??_drawCircle 0014  
      __end_of_update_LCD_PED_Count E540                           main@nStep 0040  
                          _SW_EWPED 0073               update_LCD_color@color 0033  
                          _Day_Mode E606                            _SW_NSPED 0076  
         update_LCD_color@direction 0034                          ?_init_UART 0001  
            __size_of_drawFastHLine 0088                           copy_data0 DC2C  
                         drawtext@i 0036              __size_of_drawFastVLine 0088  
                         drawtext@x 0035                           drawtext@y 0029  
                          _Init_ADC D924                   write_command@cmd_ 0003  
                       ??_Set_EW_LT 0036                         ??_OpenUSART 0003  
                       ??_Set_NS_LT 0036                            _Rcmd2red DBC2  
               __size_of_write_data 0010                     OpenUSART@config 0003  
                __end_of_fillCircle DE3C                            __Hrparam 0000  
                __end_of_fillScreen D9EA               update_LCD_count@count 003A  
                          __Lrparam 0000                  __end_of_drawCircle F128  
                  __size_of___awdiv 0096                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                            ___awtoft DB48  
                          ___ftpack E540                    _update_LCD_color F33A  
                  _update_LCD_count EDFC                    __size_of_init_IO 0016  
                       _PED_Control DB16                            _delay_ms DE3C  
                          __ptext10 DA5C                            __ptext11 E96C  
                          __ptext20 DFE6                            __ptext12 DBC2  
                          __ptext21 DD0E                            __ptext13 EA5E  
                          __ptext30 E47C                            __ptext22 DCCA  
                          __ptext14 D964                            __ptext31 DF64  
                          __ptext23 DC86                            __ptext15 DE3C  
                          __ptext40 E068                            __ptext32 E298  
                          __ptext24 DC42                            __ptext16 D924  
                          __ptext41 DAB4                            __ptext33 E178  
                          __ptext25 F33A                            __ptext17 E606  
                          __ptext50 E540                            __ptext42 DD9C  
                          __ptext34 F128                            __ptext26 DDEA  
                          __ptext18 DA86                            __ptext51 DAE4  
                          __ptext43 D942                            __ptext35 DA0E  
                          __ptext27 EB6E                            __ptext19 EDFC  
                          __ptext52 D9B4                            __ptext44 D932  
                          __ptext36 E7AC                            __ptext28 EF7A  
                          __ptext53 D91C                            __ptext45 D976  
                          __ptext37 DB84                            __ptext29 DB16  
                          __ptext54 D952                            __ptext46 DA34  
                          __ptext38 ECA6                            __ptext47 E202  
                          __ptext39 DD52                            __ptext48 E88A  
                          __ptext49 DB48                            _fillRect DD52  
                          _drawChar ECA6                            _drawRect DE8E  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 0070  
                          _colstart 0078                            _drawtext E7AC  
                        strcpy@from 0003                       _fillRectangle E6D0  
                  ?_Activate_Buzzer 0001                       __size_of_main 00A8  
                   fillRectangle@hi 0011                     fillRectangle@lo 0012  
                     _drawFastHLine E0F0                      Set_EW_LT@color 0036  
                     _drawFastVLine E068                            _spiwrite D976  
                       ??_drawPixel 000B                            _rowstart 007B  
                fillCircleHelper@x0 0013                  fillCircleHelper@y0 0015  
        __size_of_Initialize_Screen 071E                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 0001                         ??_init_UART 0004  
                        _EWLT_Count 0043                   ?_fillCircleHelper 0013  
                         spiwrite@x 0001         ??_Wait_One_Second_With_Beep 003D  
                   _update_LCD_misc F128                      ?_fillRectangle 0008  
                ??_fillCircleHelper 001F               __end_of_write_command D942  
                   fillScreen@color 0014                update_LCD_misc@nStep 003A  
              _update_LCD_PED_Count E47C             __size_of_Wait_N_Seconds 002E  
                      fillCircle@x0 002B                        fillCircle@y0 002D  
                    ?_drawFastHLine 0008                      fillRectangle@h 000A  
                    fillRectangle@w 0009                      fillRectangle@x 0013  
                    fillRectangle@y 0008                      ?_drawFastVLine 0008  
                 fillCircleHelper@f 0025                   fillCircleHelper@r 0017  
                 fillCircleHelper@x 0027                   fillCircleHelper@y 0029  
                      ??_write_data 0003                       fillRect@color 0016  
          __size_of_Wait_One_Second 0082                            strcpy@cp 0005  
                          strlen@cp 0005                            strcpy@to 0001  
                        _NSLT_Count 0049                         fillCircle@r 002F  
             __end_of_setAddrWindow DDEA                  fillRectangle@color 000B  
                     drawChar@color 0020                  __end_of_write_data D952  
                      drawChar@line 0025                      Set_NS_LT@color 0036  
                     ?_get_full_ADC 0001                        drawChar@size 0024  
             ?_update_LCD_PED_Count 003A  
