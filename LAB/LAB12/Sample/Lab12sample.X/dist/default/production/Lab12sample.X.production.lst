

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 28 13:09:30 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           	psect	idataCOMRAM
    83  001E52                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _setup_fan_temp
    87  001E52  4B                 	db	75
    88                           
    89                           ;initializer for _tempSecond
    90  001E53  FF                 	db	255
    91                           
    92                           ;initializer for _wrap
    93  001E54  01                 	db	1
    94                           
    95                           	psect	idataBANK0
    96  0017B6                     __pidataBANK0:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _array1
   100  0017B6  A2                 	db	162
   101  0017B7  62                 	db	98
   102  0017B8  E2                 	db	226
   103  0017B9  22                 	db	34
   104  0017BA  02                 	db	2
   105  0017BB  C2                 	db	194
   106  0017BC  E0                 	db	224
   107  0017BD  A8                 	db	168
   108  0017BE  90                 	db	144
   109  0017BF  68                 	db	104
   110  0017C0  98                 	db	152
   111  0017C1  B0                 	db	176
   112  0017C2  30                 	db	48
   113  0017C3  18                 	db	24
   114  0017C4  7A                 	db	122
   115  0017C5  10                 	db	16
   116  0017C6  38                 	db	56
   117  0017C7  5A                 	db	90
   118  0017C8  42                 	db	66
   119  0017C9  4A                 	db	74
   120  0017CA  52                 	db	82
   121                           
   122                           ;initializer for _alarm_time
   123  0017CB  30                 	db	48
   124  0017CC  30                 	db	48
   125  0017CD  3A                 	db	58
   126  0017CE  30                 	db	48
   127  0017CF  30                 	db	48
   128  0017D0  3A                 	db	58
   129  0017D1  30                 	db	48
   130  0017D2  30                 	db	48
   131  0017D3  00                 	db	0
   132                           
   133                           ;initializer for _setup_alarm_time
   134  0017D4  30                 	db	48
   135  0017D5  30                 	db	48
   136  0017D6  3A                 	db	58
   137  0017D7  30                 	db	48
   138  0017D8  30                 	db	48
   139  0017D9  3A                 	db	58
   140  0017DA  30                 	db	48
   141  0017DB  30                 	db	48
   142  0017DC  00                 	db	0
   143                           
   144                           ;initializer for _setup_date
   145  0017DD  30                 	db	48
   146  0017DE  31                 	db	49
   147  0017DF  2F                 	db	47
   148  0017E0  30                 	db	48
   149  0017E1  31                 	db	49
   150  0017E2  2F                 	db	47
   151  0017E3  30                 	db	48
   152  0017E4  30                 	db	48
   153  0017E5  00                 	db	0
   154                           
   155                           ;initializer for _setup_time
   156  0017E6  30                 	db	48
   157  0017E7  30                 	db	48
   158  0017E8  3A                 	db	58
   159  0017E9  30                 	db	48
   160  0017EA  30                 	db	48
   161  0017EB  3A                 	db	58
   162  0017EC  30                 	db	48
   163  0017ED  30                 	db	48
   164  0017EE  00                 	db	0
   165                           
   166                           ;initializer for _setup_fan_text
   167  0017EF  30                 	db	48
   168  0017F0  37                 	db	55
   169  0017F1  35                 	db	53
   170  0017F2  46                 	db	70
   171  0017F3  00                 	db	0
   172                           
   173                           ;initializer for _Alarm_SW_Txt
   174  0017F4  4F                 	db	79
   175  0017F5  46                 	db	70
   176  0017F6  46                 	db	70
   177  0017F7  00                 	db	0
   178                           
   179                           ;initializer for _RTC_ALARM_Txt
   180  0017F8  30                 	db	48
   181  0017F9  00                 	db	0
   182                           
   183                           ;initializer for _date
   184  0017FA  30                 	db	48
   185  0017FB  30                 	db	48
   186  0017FC  2F                 	db	47
   187  0017FD  30                 	db	48
   188  0017FE  30                 	db	48
   189  0017FF  2F                 	db	47
   190  001800  30                 	db	48
   191  001801  30                 	db	48
   192  001802  00                 	db	0
   193                           
   194                           ;initializer for _time
   195  001803  30                 	db	48
   196  001804  30                 	db	48
   197  001805  3A                 	db	58
   198  001806  30                 	db	48
   199  001807  30                 	db	48
   200  001808  3A                 	db	58
   201  001809  30                 	db	48
   202  00180A  30                 	db	48
   203  00180B  00                 	db	0
   204                           
   205                           ;initializer for _RPM_Txt
   206  00180C  30                 	db	48
   207  00180D  30                 	db	48
   208  00180E  30                 	db	48
   209  00180F  30                 	db	48
   210  001810  00                 	db	0
   211                           
   212                           ;initializer for _DC_Txt
   213  001811  30                 	db	48
   214  001812  30                 	db	48
   215  001813  30                 	db	48
   216  001814  00                 	db	0
   217                           
   218                           ;initializer for _Fan_SW_Txt
   219  001815  4F                 	db	79
   220  001816  46                 	db	70
   221  001817  46                 	db	70
   222  001818  00                 	db	0
   223                           
   224                           ;initializer for _tempC
   225  001819  2B                 	db	43
   226  00181A  32                 	db	50
   227  00181B  35                 	db	53
   228  00181C  00                 	db	0
   229                           
   230                           ;initializer for _tempF
   231  00181D  2B                 	db	43
   232  00181E  37                 	db	55
   233  00181F  37                 	db	55
   234  001820  00                 	db	0
   235                           
   236                           	psect	idataBANK1
   237  00147E                     __pidataBANK1:
   238                           	opt stack 0
   239                           
   240                           ;initializer for _txt1
   241  00147E  43                 	db	67
   242  00147F  48                 	db	72
   243  001480  2D                 	db	45
   244  001481  00                 	db	0
   245  001482  43                 	db	67
   246  001483  48                 	db	72
   247  001484  20                 	db	32
   248  001485  00                 	db	0
   249  001486  43                 	db	67
   250  001487  48                 	db	72
   251  001488  2B                 	db	43
   252  001489  00                 	db	0
   253  00148A  50                 	db	80
   254  00148B  52                 	db	82
   255  00148C  56                 	db	86
   256  00148D  00                 	db	0
   257  00148E  4E                 	db	78
   258  00148F  58                 	db	88
   259  001490  54                 	db	84
   260  001491  00                 	db	0
   261  001492  50                 	db	80
   262  001493  2F                 	db	47
   263  001494  50                 	db	80
   264  001495  00                 	db	0
   265  001496  56                 	db	86
   266  001497  4C                 	db	76
   267  001498  2D                 	db	45
   268  001499  00                 	db	0
   269  00149A  56                 	db	86
   270  00149B  4C                 	db	76
   271  00149C  2B                 	db	43
   272  00149D  00                 	db	0
   273  00149E  45                 	db	69
   274  00149F  51                 	db	81
   275  0014A0  20                 	db	32
   276  0014A1  00                 	db	0
   277  0014A2  20                 	db	32
   278  0014A3  30                 	db	48
   279  0014A4  20                 	db	32
   280  0014A5  00                 	db	0
   281  0014A6  31                 	db	49
   282  0014A7  30                 	db	48
   283  0014A8  30                 	db	48
   284  0014A9  00                 	db	0
   285  0014AA  32                 	db	50
   286  0014AB  30                 	db	48
   287  0014AC  30                 	db	48
   288  0014AD  00                 	db	0
   289  0014AE  20                 	db	32
   290  0014AF  31                 	db	49
   291  0014B0  20                 	db	32
   292  0014B1  00                 	db	0
   293  0014B2  20                 	db	32
   294  0014B3  32                 	db	50
   295  0014B4  20                 	db	32
   296  0014B5  00                 	db	0
   297  0014B6  20                 	db	32
   298  0014B7  33                 	db	51
   299  0014B8  20                 	db	32
   300  0014B9  00                 	db	0
   301  0014BA  20                 	db	32
   302  0014BB  34                 	db	52
   303  0014BC  20                 	db	32
   304  0014BD  00                 	db	0
   305  0014BE  20                 	db	32
   306  0014BF  35                 	db	53
   307  0014C0  20                 	db	32
   308  0014C1  00                 	db	0
   309  0014C2  20                 	db	32
   310  0014C3  36                 	db	54
   311  0014C4  20                 	db	32
   312  0014C5  00                 	db	0
   313  0014C6  20                 	db	32
   314  0014C7  37                 	db	55
   315  0014C8  20                 	db	32
   316  0014C9  00                 	db	0
   317  0014CA  20                 	db	32
   318  0014CB  38                 	db	56
   319  0014CC  20                 	db	32
   320  0014CD  00                 	db	0
   321  0014CE  20                 	db	32
   322  0014CF  39                 	db	57
   323  0014D0  20                 	db	32
   324  0014D1  00                 	db	0
   325                           
   326                           ;initializer for _color
   327  0014D2  F800               	dw	63488
   328  0014D4  F800               	dw	63488
   329  0014D6  F800               	dw	63488
   330  0014D8  001F               	dw	31
   331  0014DA  001F               	dw	31
   332  0014DC  07E0               	dw	2016
   333  0014DE  F81F               	dw	63519
   334  0014E0  F81F               	dw	63519
   335  0014E2  F81F               	dw	63519
   336  0014E4  0000               	dw	0
   337  0014E6  0000               	dw	0
   338  0014E8  0000               	dw	0
   339  0014EA  0000               	dw	0
   340  0014EC  0000               	dw	0
   341  0014EE  0000               	dw	0
   342  0014F0  0000               	dw	0
   343  0014F2  0000               	dw	0
   344  0014F4  0000               	dw	0
   345  0014F6  0000               	dw	0
   346  0014F8  0000               	dw	0
   347  0014FA  0000               	dw	0
   348                           
   349                           ;initializer for _D3
   350  0014FC  10                 	db	16
   351  0014FD  00                 	db	0
   352  0014FE  00                 	db	0
   353  0014FF  40                 	db	64
   354  001500  00                 	db	0
   355  001501  00                 	db	0
   356  001502  50                 	db	80
   357  001503  00                 	db	0
   358  001504  00                 	db	0
   359  001505  70                 	db	112
   360  001506  00                 	db	0
   361  001507  00                 	db	0
   362  001508  70                 	db	112
   363  001509  00                 	db	0
   364  00150A  00                 	db	0
   365  00150B  70                 	db	112
   366  00150C  00                 	db	0
   367  00150D  00                 	db	0
   368  00150E  70                 	db	112
   369  00150F  00                 	db	0
   370  001510  00                 	db	0
   371                           
   372                           ;initializer for _buffer
   373  001511  20                 	db	32
   374  001512  45                 	db	69
   375  001513  43                 	db	67
   376  001514  45                 	db	69
   377  001515  33                 	db	51
   378  001516  33                 	db	51
   379  001517  30                 	db	48
   380  001518  31                 	db	49
   381  001519  4C                 	db	76
   382  00151A  20                 	db	32
   383  00151B  53                 	db	83
   384  00151C  70                 	db	112
   385  00151D  27                 	db	39
   386  00151E  32                 	db	50
   387  00151F  32                 	db	50
   388  001520  20                 	db	32
   389  001521  4C                 	db	76
   390  001522  31                 	db	49
   391  001523  32                 	db	50
   392  001524  00                 	db	0
   393  001525  00                 	db	0
   394  001526  00                 	db	0
   395  001527  00                 	db	0
   396  001528  00                 	db	0
   397  001529  00                 	db	0
   398  00152A  00                 	db	0
   399  00152B  00                 	db	0
   400  00152C  00                 	db	0
   401  00152D  00                 	db	0
   402  00152E  00                 	db	0
   403  00152F  00                 	db	0
   404  001530  00                 	db	0
   405  001531  00                 	db	0
   406                           
   407                           	psect	mediumconst
   408  00FD4C                     __pmediumconst:
   409                           	opt stack 0
   410  00FD4C  00                 	db	0
   411  00FD4D                     _font:
   412                           	opt stack 0
   413  00FD4D  00                 	db	0
   414  00FD4E  00                 	db	0
   415  00FD4F  00                 	db	0
   416  00FD50  00                 	db	0
   417  00FD51  00                 	db	0
   418  00FD52  00                 	db	0
   419  00FD53  00                 	db	0
   420  00FD54  5F                 	db	95
   421  00FD55  00                 	db	0
   422  00FD56  00                 	db	0
   423  00FD57  00                 	db	0
   424  00FD58  07                 	db	7
   425  00FD59  00                 	db	0
   426  00FD5A  07                 	db	7
   427  00FD5B  00                 	db	0
   428  00FD5C  14                 	db	20
   429  00FD5D  7F                 	db	127
   430  00FD5E  14                 	db	20
   431  00FD5F  7F                 	db	127
   432  00FD60  14                 	db	20
   433  00FD61  24                 	db	36
   434  00FD62  2A                 	db	42
   435  00FD63  7F                 	db	127
   436  00FD64  2A                 	db	42
   437  00FD65  12                 	db	18
   438  00FD66  23                 	db	35
   439  00FD67  13                 	db	19
   440  00FD68  08                 	db	8
   441  00FD69  64                 	db	100
   442  00FD6A  62                 	db	98
   443  00FD6B  36                 	db	54
   444  00FD6C  49                 	db	73
   445  00FD6D  56                 	db	86
   446  00FD6E  20                 	db	32
   447  00FD6F  50                 	db	80
   448  00FD70  00                 	db	0
   449  00FD71  08                 	db	8
   450  00FD72  07                 	db	7
   451  00FD73  03                 	db	3
   452  00FD74  00                 	db	0
   453  00FD75  00                 	db	0
   454  00FD76  1C                 	db	28
   455  00FD77  22                 	db	34
   456  00FD78  41                 	db	65
   457  00FD79  00                 	db	0
   458  00FD7A  00                 	db	0
   459  00FD7B  41                 	db	65
   460  00FD7C  22                 	db	34
   461  00FD7D  1C                 	db	28
   462  00FD7E  00                 	db	0
   463  00FD7F  2A                 	db	42
   464  00FD80  1C                 	db	28
   465  00FD81  7F                 	db	127
   466  00FD82  1C                 	db	28
   467  00FD83  2A                 	db	42
   468  00FD84  08                 	db	8
   469  00FD85  08                 	db	8
   470  00FD86  3E                 	db	62
   471  00FD87  08                 	db	8
   472  00FD88  08                 	db	8
   473  00FD89  00                 	db	0
   474  00FD8A  80                 	db	128
   475  00FD8B  70                 	db	112
   476  00FD8C  30                 	db	48
   477  00FD8D  00                 	db	0
   478  00FD8E  08                 	db	8
   479  00FD8F  08                 	db	8
   480  00FD90  08                 	db	8
   481  00FD91  08                 	db	8
   482  00FD92  08                 	db	8
   483  00FD93  00                 	db	0
   484  00FD94  00                 	db	0
   485  00FD95  60                 	db	96
   486  00FD96  60                 	db	96
   487  00FD97  00                 	db	0
   488  00FD98  20                 	db	32
   489  00FD99  10                 	db	16
   490  00FD9A  08                 	db	8
   491  00FD9B  04                 	db	4
   492  00FD9C  02                 	db	2
   493  00FD9D  3E                 	db	62
   494  00FD9E  51                 	db	81
   495  00FD9F  49                 	db	73
   496  00FDA0  45                 	db	69
   497  00FDA1  3E                 	db	62
   498  00FDA2  00                 	db	0
   499  00FDA3  42                 	db	66
   500  00FDA4  7F                 	db	127
   501  00FDA5  40                 	db	64
   502  00FDA6  00                 	db	0
   503  00FDA7  72                 	db	114
   504  00FDA8  49                 	db	73
   505  00FDA9  49                 	db	73
   506  00FDAA  49                 	db	73
   507  00FDAB  46                 	db	70
   508  00FDAC  21                 	db	33
   509  00FDAD  41                 	db	65
   510  00FDAE  49                 	db	73
   511  00FDAF  4D                 	db	77
   512  00FDB0  33                 	db	51
   513  00FDB1  18                 	db	24
   514  00FDB2  14                 	db	20
   515  00FDB3  12                 	db	18
   516  00FDB4  7F                 	db	127
   517  00FDB5  10                 	db	16
   518  00FDB6  27                 	db	39
   519  00FDB7  45                 	db	69
   520  00FDB8  45                 	db	69
   521  00FDB9  45                 	db	69
   522  00FDBA  39                 	db	57
   523  00FDBB  3C                 	db	60
   524  00FDBC  4A                 	db	74
   525  00FDBD  49                 	db	73
   526  00FDBE  49                 	db	73
   527  00FDBF  31                 	db	49
   528  00FDC0  41                 	db	65
   529  00FDC1  21                 	db	33
   530  00FDC2  11                 	db	17
   531  00FDC3  09                 	db	9
   532  00FDC4  07                 	db	7
   533  00FDC5  36                 	db	54
   534  00FDC6  49                 	db	73
   535  00FDC7  49                 	db	73
   536  00FDC8  49                 	db	73
   537  00FDC9  36                 	db	54
   538  00FDCA  46                 	db	70
   539  00FDCB  49                 	db	73
   540  00FDCC  49                 	db	73
   541  00FDCD  29                 	db	41
   542  00FDCE  1E                 	db	30
   543  00FDCF  00                 	db	0
   544  00FDD0  00                 	db	0
   545  00FDD1  14                 	db	20
   546  00FDD2  00                 	db	0
   547  00FDD3  00                 	db	0
   548  00FDD4  00                 	db	0
   549  00FDD5  40                 	db	64
   550  00FDD6  34                 	db	52
   551  00FDD7  00                 	db	0
   552  00FDD8  00                 	db	0
   553  00FDD9  00                 	db	0
   554  00FDDA  08                 	db	8
   555  00FDDB  14                 	db	20
   556  00FDDC  22                 	db	34
   557  00FDDD  41                 	db	65
   558  00FDDE  14                 	db	20
   559  00FDDF  14                 	db	20
   560  00FDE0  14                 	db	20
   561  00FDE1  14                 	db	20
   562  00FDE2  14                 	db	20
   563  00FDE3  00                 	db	0
   564  00FDE4  41                 	db	65
   565  00FDE5  22                 	db	34
   566  00FDE6  14                 	db	20
   567  00FDE7  08                 	db	8
   568  00FDE8  02                 	db	2
   569  00FDE9  01                 	db	1
   570  00FDEA  59                 	db	89
   571  00FDEB  09                 	db	9
   572  00FDEC  06                 	db	6
   573  00FDED  3E                 	db	62
   574  00FDEE  41                 	db	65
   575  00FDEF  5D                 	db	93
   576  00FDF0  59                 	db	89
   577  00FDF1  4E                 	db	78
   578  00FDF2  7C                 	db	124
   579  00FDF3  12                 	db	18
   580  00FDF4  11                 	db	17
   581  00FDF5  12                 	db	18
   582  00FDF6  7C                 	db	124
   583  00FDF7  7F                 	db	127
   584  00FDF8  49                 	db	73
   585  00FDF9  49                 	db	73
   586  00FDFA  49                 	db	73
   587  00FDFB  36                 	db	54
   588  00FDFC  3E                 	db	62
   589  00FDFD  41                 	db	65
   590  00FDFE  41                 	db	65
   591  00FDFF  41                 	db	65
   592  00FE00  22                 	db	34
   593  00FE01  7F                 	db	127
   594  00FE02  41                 	db	65
   595  00FE03  41                 	db	65
   596  00FE04  41                 	db	65
   597  00FE05  3E                 	db	62
   598  00FE06  7F                 	db	127
   599  00FE07  49                 	db	73
   600  00FE08  49                 	db	73
   601  00FE09  49                 	db	73
   602  00FE0A  41                 	db	65
   603  00FE0B  7F                 	db	127
   604  00FE0C  09                 	db	9
   605  00FE0D  09                 	db	9
   606  00FE0E  09                 	db	9
   607  00FE0F  01                 	db	1
   608  00FE10  3E                 	db	62
   609  00FE11  41                 	db	65
   610  00FE12  41                 	db	65
   611  00FE13  51                 	db	81
   612  00FE14  73                 	db	115
   613  00FE15  7F                 	db	127
   614  00FE16  08                 	db	8
   615  00FE17  08                 	db	8
   616  00FE18  08                 	db	8
   617  00FE19  7F                 	db	127
   618  00FE1A  00                 	db	0
   619  00FE1B  41                 	db	65
   620  00FE1C  7F                 	db	127
   621  00FE1D  41                 	db	65
   622  00FE1E  00                 	db	0
   623  00FE1F  20                 	db	32
   624  00FE20  40                 	db	64
   625  00FE21  41                 	db	65
   626  00FE22  3F                 	db	63
   627  00FE23  01                 	db	1
   628  00FE24  7F                 	db	127
   629  00FE25  08                 	db	8
   630  00FE26  14                 	db	20
   631  00FE27  22                 	db	34
   632  00FE28  41                 	db	65
   633  00FE29  7F                 	db	127
   634  00FE2A  40                 	db	64
   635  00FE2B  40                 	db	64
   636  00FE2C  40                 	db	64
   637  00FE2D  40                 	db	64
   638  00FE2E  7F                 	db	127
   639  00FE2F  02                 	db	2
   640  00FE30  1C                 	db	28
   641  00FE31  02                 	db	2
   642  00FE32  7F                 	db	127
   643  00FE33  7F                 	db	127
   644  00FE34  04                 	db	4
   645  00FE35  08                 	db	8
   646  00FE36  10                 	db	16
   647  00FE37  7F                 	db	127
   648  00FE38  3E                 	db	62
   649  00FE39  41                 	db	65
   650  00FE3A  41                 	db	65
   651  00FE3B  41                 	db	65
   652  00FE3C  3E                 	db	62
   653  00FE3D  7F                 	db	127
   654  00FE3E  09                 	db	9
   655  00FE3F  09                 	db	9
   656  00FE40  09                 	db	9
   657  00FE41  06                 	db	6
   658  00FE42  3E                 	db	62
   659  00FE43  41                 	db	65
   660  00FE44  51                 	db	81
   661  00FE45  21                 	db	33
   662  00FE46  5E                 	db	94
   663  00FE47  7F                 	db	127
   664  00FE48  09                 	db	9
   665  00FE49  19                 	db	25
   666  00FE4A  29                 	db	41
   667  00FE4B  46                 	db	70
   668  00FE4C                     __end_of_font:
   669                           	opt stack 0
   670  00FE4C                     _font2:
   671                           	opt stack 0
   672  00FE4C  26                 	db	38
   673  00FE4D  49                 	db	73
   674  00FE4E  49                 	db	73
   675  00FE4F  49                 	db	73
   676  00FE50  32                 	db	50
   677  00FE51  03                 	db	3
   678  00FE52  01                 	db	1
   679  00FE53  7F                 	db	127
   680  00FE54  01                 	db	1
   681  00FE55  03                 	db	3
   682  00FE56  3F                 	db	63
   683  00FE57  40                 	db	64
   684  00FE58  40                 	db	64
   685  00FE59  40                 	db	64
   686  00FE5A  3F                 	db	63
   687  00FE5B  1F                 	db	31
   688  00FE5C  20                 	db	32
   689  00FE5D  40                 	db	64
   690  00FE5E  20                 	db	32
   691  00FE5F  1F                 	db	31
   692  00FE60  3F                 	db	63
   693  00FE61  40                 	db	64
   694  00FE62  38                 	db	56
   695  00FE63  40                 	db	64
   696  00FE64  3F                 	db	63
   697  00FE65  63                 	db	99
   698  00FE66  14                 	db	20
   699  00FE67  08                 	db	8
   700  00FE68  14                 	db	20
   701  00FE69  63                 	db	99
   702  00FE6A  03                 	db	3
   703  00FE6B  04                 	db	4
   704  00FE6C  78                 	db	120
   705  00FE6D  04                 	db	4
   706  00FE6E  03                 	db	3
   707  00FE6F  61                 	db	97
   708  00FE70  59                 	db	89
   709  00FE71  49                 	db	73
   710  00FE72  4D                 	db	77
   711  00FE73  43                 	db	67
   712  00FE74  00                 	db	0
   713  00FE75  7F                 	db	127
   714  00FE76  41                 	db	65
   715  00FE77  41                 	db	65
   716  00FE78  41                 	db	65
   717  00FE79  02                 	db	2
   718  00FE7A  04                 	db	4
   719  00FE7B  08                 	db	8
   720  00FE7C  10                 	db	16
   721  00FE7D  20                 	db	32
   722  00FE7E  00                 	db	0
   723  00FE7F  41                 	db	65
   724  00FE80  41                 	db	65
   725  00FE81  41                 	db	65
   726  00FE82  7F                 	db	127
   727  00FE83  04                 	db	4
   728  00FE84  02                 	db	2
   729  00FE85  01                 	db	1
   730  00FE86  02                 	db	2
   731  00FE87  04                 	db	4
   732  00FE88  40                 	db	64
   733  00FE89  40                 	db	64
   734  00FE8A  40                 	db	64
   735  00FE8B  40                 	db	64
   736  00FE8C  40                 	db	64
   737  00FE8D  00                 	db	0
   738  00FE8E  03                 	db	3
   739  00FE8F  07                 	db	7
   740  00FE90  08                 	db	8
   741  00FE91  00                 	db	0
   742  00FE92  20                 	db	32
   743  00FE93  54                 	db	84
   744  00FE94  54                 	db	84
   745  00FE95  78                 	db	120
   746  00FE96  40                 	db	64
   747  00FE97  7F                 	db	127
   748  00FE98  28                 	db	40
   749  00FE99  44                 	db	68
   750  00FE9A  44                 	db	68
   751  00FE9B  38                 	db	56
   752  00FE9C  38                 	db	56
   753  00FE9D  44                 	db	68
   754  00FE9E  44                 	db	68
   755  00FE9F  44                 	db	68
   756  00FEA0  28                 	db	40
   757  00FEA1  38                 	db	56
   758  00FEA2  44                 	db	68
   759  00FEA3  44                 	db	68
   760  00FEA4  28                 	db	40
   761  00FEA5  7F                 	db	127
   762  00FEA6  38                 	db	56
   763  00FEA7  54                 	db	84
   764  00FEA8  54                 	db	84
   765  00FEA9  54                 	db	84
   766  00FEAA  18                 	db	24
   767  00FEAB  00                 	db	0
   768  00FEAC  08                 	db	8
   769  00FEAD  7E                 	db	126
   770  00FEAE  09                 	db	9
   771  00FEAF  02                 	db	2
   772  00FEB0  18                 	db	24
   773  00FEB1  A4                 	db	164
   774  00FEB2  A4                 	db	164
   775  00FEB3  9C                 	db	156
   776  00FEB4  78                 	db	120
   777  00FEB5  7F                 	db	127
   778  00FEB6  08                 	db	8
   779  00FEB7  04                 	db	4
   780  00FEB8  04                 	db	4
   781  00FEB9  78                 	db	120
   782  00FEBA  00                 	db	0
   783  00FEBB  44                 	db	68
   784  00FEBC  7D                 	db	125
   785  00FEBD  40                 	db	64
   786  00FEBE  00                 	db	0
   787  00FEBF  20                 	db	32
   788  00FEC0  40                 	db	64
   789  00FEC1  40                 	db	64
   790  00FEC2  3D                 	db	61
   791  00FEC3  00                 	db	0
   792  00FEC4  7F                 	db	127
   793  00FEC5  10                 	db	16
   794  00FEC6  28                 	db	40
   795  00FEC7  44                 	db	68
   796  00FEC8  00                 	db	0
   797  00FEC9  00                 	db	0
   798  00FECA  41                 	db	65
   799  00FECB  7F                 	db	127
   800  00FECC  40                 	db	64
   801  00FECD  00                 	db	0
   802  00FECE  7C                 	db	124
   803  00FECF  04                 	db	4
   804  00FED0  78                 	db	120
   805  00FED1  04                 	db	4
   806  00FED2  78                 	db	120
   807  00FED3  7C                 	db	124
   808  00FED4  08                 	db	8
   809  00FED5  04                 	db	4
   810  00FED6  04                 	db	4
   811  00FED7  78                 	db	120
   812  00FED8  38                 	db	56
   813  00FED9  44                 	db	68
   814  00FEDA  44                 	db	68
   815  00FEDB  44                 	db	68
   816  00FEDC  38                 	db	56
   817  00FEDD  FC                 	db	252
   818  00FEDE  18                 	db	24
   819  00FEDF  24                 	db	36
   820  00FEE0  24                 	db	36
   821  00FEE1  18                 	db	24
   822  00FEE2  18                 	db	24
   823  00FEE3  24                 	db	36
   824  00FEE4  24                 	db	36
   825  00FEE5  18                 	db	24
   826  00FEE6  FC                 	db	252
   827  00FEE7  7C                 	db	124
   828  00FEE8  08                 	db	8
   829  00FEE9  04                 	db	4
   830  00FEEA  04                 	db	4
   831  00FEEB  08                 	db	8
   832  00FEEC  48                 	db	72
   833  00FEED  54                 	db	84
   834  00FEEE  54                 	db	84
   835  00FEEF  54                 	db	84
   836  00FEF0  24                 	db	36
   837  00FEF1  04                 	db	4
   838  00FEF2  04                 	db	4
   839  00FEF3  3F                 	db	63
   840  00FEF4  44                 	db	68
   841  00FEF5  24                 	db	36
   842  00FEF6  3C                 	db	60
   843  00FEF7  40                 	db	64
   844  00FEF8  40                 	db	64
   845  00FEF9  20                 	db	32
   846  00FEFA  7C                 	db	124
   847  00FEFB  1C                 	db	28
   848  00FEFC  20                 	db	32
   849  00FEFD  40                 	db	64
   850  00FEFE  20                 	db	32
   851  00FEFF  1C                 	db	28
   852  00FF00  3C                 	db	60
   853  00FF01  40                 	db	64
   854  00FF02  30                 	db	48
   855  00FF03  40                 	db	64
   856  00FF04  3C                 	db	60
   857  00FF05  44                 	db	68
   858  00FF06  28                 	db	40
   859  00FF07  10                 	db	16
   860  00FF08  28                 	db	40
   861  00FF09  44                 	db	68
   862  00FF0A  4C                 	db	76
   863  00FF0B  90                 	db	144
   864  00FF0C  90                 	db	144
   865  00FF0D  90                 	db	144
   866  00FF0E  7C                 	db	124
   867  00FF0F  44                 	db	68
   868  00FF10  64                 	db	100
   869  00FF11  54                 	db	84
   870  00FF12  4C                 	db	76
   871  00FF13  44                 	db	68
   872  00FF14  00                 	db	0
   873  00FF15  08                 	db	8
   874  00FF16  36                 	db	54
   875  00FF17  41                 	db	65
   876  00FF18  00                 	db	0
   877  00FF19  00                 	db	0
   878  00FF1A  00                 	db	0
   879  00FF1B  77                 	db	119
   880  00FF1C  00                 	db	0
   881  00FF1D  00                 	db	0
   882  00FF1E  00                 	db	0
   883  00FF1F  41                 	db	65
   884  00FF20  36                 	db	54
   885  00FF21  08                 	db	8
   886  00FF22  00                 	db	0
   887  00FF23  02                 	db	2
   888  00FF24  01                 	db	1
   889  00FF25  02                 	db	2
   890  00FF26  04                 	db	4
   891  00FF27  02                 	db	2
   892  00FF28                     __end_of_font2:
   893                           	opt stack 0
   894  00FF28                     _dpowers:
   895                           	opt stack 0
   896  00FF28  0001               	dw	1
   897  00FF2A  000A               	dw	10
   898  00FF2C  0064               	dw	100
   899  00FF2E  03E8               	dw	1000
   900  00FF30  2710               	dw	10000
   901  00FF32                     __end_of_dpowers:
   902                           	opt stack 0
   903  00FF32                     _hexpowers:
   904                           	opt stack 0
   905  00FF32  0001               	dw	1
   906  00FF34  0010               	dw	16
   907  00FF36  0100               	dw	256
   908  00FF38  1000               	dw	4096
   909  00FF3A                     __end_of_hexpowers:
   910                           	opt stack 0
   911  0000                     _ADCON1	set	4033
   912  0000                     _CCP1CON	set	4029
   913  0000                     _CCP2CON	set	4026
   914  0000                     _CCPR1L	set	4030
   915  0000                     _CCPR2L	set	4027
   916  0000                     _INTCON2bits	set	4081
   917  0000                     _INTCONbits	set	4082
   918  0000                     _OSCCON	set	4051
   919  0000                     _PIE1bits	set	3997
   920  0000                     _PIR1bits	set	3998
   921  0000                     _PORTAbits	set	3968
   922  0000                     _PORTBbits	set	3969
   923  0000                     _PORTCbits	set	3970
   924  0000                     _PORTD	set	3971
   925  0000                     _PORTDbits	set	3971
   926  0000                     _PORTE	set	3972
   927  0000                     _PR2	set	4043
   928  0000                     _RCSTA	set	4011
   929  0000                     _RCSTAbits	set	4011
   930  0000                     _SPBRG	set	4015
   931  0000                     _SPBRGH	set	4016
   932  0000                     _SSPBUF	set	4041
   933  0000                     _SSPCON1	set	4038
   934  0000                     _SSPSTAT	set	4039
   935  0000                     _SSPSTATbits	set	4039
   936  0000                     _T0CON	set	4053
   937  0000                     _T0CONbits	set	4053
   938  0000                     _T1CON	set	4045
   939  0000                     _T1CONbits	set	4045
   940  0000                     _T2CON	set	4042
   941  0000                     _T3CON	set	4017
   942  0000                     _TMR0H	set	4055
   943  0000                     _TMR0L	set	4054
   944  0000                     _TMR1H	set	4047
   945  0000                     _TMR1L	set	4046
   946  0000                     _TMR3L	set	4018
   947  0000                     _TRISA	set	3986
   948  0000                     _TRISB	set	3987
   949  0000                     _TRISBbits	set	3987
   950  0000                     _TRISC	set	3988
   951  0000                     _TRISCbits	set	3988
   952  0000                     _TRISD	set	3989
   953  0000                     _TRISDbits	set	3989
   954  0000                     _TRISE	set	3990
   955  0000                     _TXREG	set	4013
   956  0000                     _TXSTA	set	4012
   957  0000                     _TXSTAbits	set	4012
   958  0000                     _RBPU	set	32655
   959  0000                     _TRMT	set	32097
   960  00FF3A                     STR_3:
   961  00FF3A  25                 	db	37
   962  00FF3B  30                 	db	48	;'0'
   963  00FF3C  32                 	db	50	;'2'
   964  00FF3D  78                 	db	120	;'x'
   965  00FF3E  3A                 	db	58	;':'
   966  00FF3F  25                 	db	37
   967  00FF40  30                 	db	48	;'0'
   968  00FF41  32                 	db	50	;'2'
   969  00FF42  78                 	db	120	;'x'
   970  00FF43  3A                 	db	58	;':'
   971  00FF44  25                 	db	37
   972  00FF45  30                 	db	48	;'0'
   973  00FF46  32                 	db	50	;'2'
   974  00FF47  78                 	db	120	;'x'
   975  00FF48  20                 	db	32
   976  00FF49  25                 	db	37
   977  00FF4A  30                 	db	48	;'0'
   978  00FF4B  32                 	db	50	;'2'
   979  00FF4C  78                 	db	120	;'x'
   980  00FF4D  2F                 	db	47
   981  00FF4E  25                 	db	37
   982  00FF4F  30                 	db	48	;'0'
   983  00FF50  32                 	db	50	;'2'
   984  00FF51  78                 	db	120	;'x'
   985  00FF52  2F                 	db	47
   986  00FF53  25                 	db	37
   987  00FF54  30                 	db	48	;'0'
   988  00FF55  32                 	db	50	;'2'
   989  00FF56  78                 	db	120	;'x'
   990  00FF57  00                 	db	0
   991  00FF58                     STR_9:
   992  00FF58  45                 	db	69	;'E'
   993  00FF59  43                 	db	67	;'C'
   994  00FF5A  45                 	db	69	;'E'
   995  00FF5B  33                 	db	51	;'3'
   996  00FF5C  33                 	db	51	;'3'
   997  00FF5D  30                 	db	48	;'0'
   998  00FF5E  31                 	db	49	;'1'
   999  00FF5F  4C                 	db	76	;'L'
  1000  00FF60  20                 	db	32
  1001  00FF61  53                 	db	83	;'S'
  1002  00FF62  70                 	db	112	;'p'
  1003  00FF63  72                 	db	114	;'r'
  1004  00FF64  69                 	db	105	;'i'
  1005  00FF65  6E                 	db	110	;'n'
  1006  00FF66  67                 	db	103	;'g'
  1007  00FF67  20                 	db	32
  1008  00FF68  32                 	db	50	;'2'
  1009  00FF69  32                 	db	50	;'2'
  1010  00FF6A  2D                 	db	45
  1011  00FF6B  53                 	db	83	;'S'
  1012  00FF6C  31                 	db	49	;'1'
  1013  00FF6D  00                 	db	0
  1014  00FF6E                     STR_4:
  1015  00FF6E  20                 	db	32
  1016  00FF6F  54                 	db	84	;'T'
  1017  00FF70  65                 	db	101	;'e'
  1018  00FF71  6D                 	db	109	;'m'
  1019  00FF72  70                 	db	112	;'p'
  1020  00FF73  20                 	db	32
  1021  00FF74  3D                 	db	61	;'='
  1022  00FF75  20                 	db	32
  1023  00FF76  25                 	db	37
  1024  00FF77  64                 	db	100	;'d'
  1025  00FF78  20                 	db	32
  1026  00FF79  43                 	db	67	;'C'
  1027  00FF7A  20                 	db	32
  1028  00FF7B  3D                 	db	61	;'='
  1029  00FF7C  20                 	db	32
  1030  00FF7D  25                 	db	37
  1031  00FF7E  64                 	db	100	;'d'
  1032  00FF7F  20                 	db	32
  1033  00FF80  46                 	db	70	;'F'
  1034  00FF81  20                 	db	32
  1035  00FF82  00                 	db	0
  1036  00FF83                     STR_5:
  1037  00FF83  52                 	db	82	;'R'
  1038  00FF84  50                 	db	80	;'P'
  1039  00FF85  4D                 	db	77	;'M'
  1040  00FF86  20                 	db	32
  1041  00FF87  3D                 	db	61	;'='
  1042  00FF88  20                 	db	32
  1043  00FF89  25                 	db	37
  1044  00FF8A  64                 	db	100	;'d'
  1045  00FF8B  20                 	db	32
  1046  00FF8C  20                 	db	32
  1047  00FF8D  64                 	db	100	;'d'
  1048  00FF8E  63                 	db	99	;'c'
  1049  00FF8F  20                 	db	32
  1050  00FF90  3D                 	db	61	;'='
  1051  00FF91  20                 	db	32
  1052  00FF92  25                 	db	37
  1053  00FF93  64                 	db	100	;'d'
  1054  00FF94  0D                 	db	13
  1055  00FF95  0A                 	db	10
  1056  00FF96  00                 	db	0
  1057  00FF97  46                 	db	70	;'F'
  1058  00FF98  61                 	db	97	;'a'
  1059  00FF99  6E                 	db	110	;'n'
  1060  00FF9A  20                 	db	32
  1061  00FF9B  69                 	db	105	;'i'
  1062  00FF9C  73                 	db	115	;'s'
  1063  00FF9D  20                 	db	32
  1064  00FF9E  74                 	db	116	;'t'
  1065  00FF9F  75                 	db	117	;'u'
  1066  00FFA0  72                 	db	114	;'r'
  1067  00FFA1  6E                 	db	110	;'n'
  1068  00FFA2  65                 	db	101	;'e'
  1069  00FFA3  64                 	db	100	;'d'
  1070  00FFA4  20                 	db	32
  1071  00FFA5  6F                 	db	111	;'o'
  1072  00FFA6  66                 	db	102	;'f'
  1073  00FFA7  66                 	db	102	;'f'
  1074  00FFA8  0D                 	db	13
  1075  00FFA9  0A                 	db	10
  1076  00FFAA  00                 	db	0
  1077  00FFAB  46                 	db	70	;'F'
  1078  00FFAC  61                 	db	97	;'a'
  1079  00FFAD  6E                 	db	110	;'n'
  1080  00FFAE  20                 	db	32
  1081  00FFAF  69                 	db	105	;'i'
  1082  00FFB0  73                 	db	115	;'s'
  1083  00FFB1  20                 	db	32
  1084  00FFB2  74                 	db	116	;'t'
  1085  00FFB3  75                 	db	117	;'u'
  1086  00FFB4  72                 	db	114	;'r'
  1087  00FFB5  6E                 	db	110	;'n'
  1088  00FFB6  65                 	db	101	;'e'
  1089  00FFB7  64                 	db	100	;'d'
  1090  00FFB8  20                 	db	32
  1091  00FFB9  6F                 	db	111	;'o'
  1092  00FFBA  6E                 	db	110	;'n'
  1093  00FFBB  0D                 	db	13
  1094  00FFBC  0A                 	db	10
  1095  00FFBD  00                 	db	0
  1096  00FFBE                     STR_20:
  1097  00FFBE  30                 	db	48	;'0'
  1098  00FFBF  31                 	db	49	;'1'
  1099  00FFC0  32                 	db	50	;'2'
  1100  00FFC1  33                 	db	51	;'3'
  1101  00FFC2  34                 	db	52	;'4'
  1102  00FFC3  35                 	db	53	;'5'
  1103  00FFC4  36                 	db	54	;'6'
  1104  00FFC5  37                 	db	55	;'7'
  1105  00FFC6  38                 	db	56	;'8'
  1106  00FFC7  39                 	db	57	;'9'
  1107  00FFC8  61                 	db	97	;'a'
  1108  00FFC9  62                 	db	98	;'b'
  1109  00FFCA  63                 	db	99	;'c'
  1110  00FFCB  64                 	db	100	;'d'
  1111  00FFCC  65                 	db	101	;'e'
  1112  00FFCD  66                 	db	102	;'f'
  1113  00FFCE  00                 	db	0
  1114  00FFCF                     STR_10:
  1115  00FFCF  54                 	db	84	;'T'
  1116  00FFD0  65                 	db	101	;'e'
  1117  00FFD1  6D                 	db	109	;'m'
  1118  00FFD2  70                 	db	112	;'p'
  1119  00FFD3  65                 	db	101	;'e'
  1120  00FFD4  72                 	db	114	;'r'
  1121  00FFD5  61                 	db	97	;'a'
  1122  00FFD6  74                 	db	116	;'t'
  1123  00FFD7  75                 	db	117	;'u'
  1124  00FFD8  72                 	db	114	;'r'
  1125  00FFD9  65                 	db	101	;'e'
  1126  00FFDA  3A                 	db	58	;':'
  1127  00FFDB  00                 	db	0
  1128  00FFDC                     STR_15:
  1129  00FFDC  20                 	db	32
  1130  00FFDD  20                 	db	32
  1131  00FFDE  46                 	db	70	;'F'
  1132  00FFDF  41                 	db	65	;'A'
  1133  00FFE0  4E                 	db	78	;'N'
  1134  00FFE1  00                 	db	0
  1135  00FFE2                     STR_13:
  1136  00FFE2  54                 	db	84	;'T'
  1137  00FFE3  69                 	db	105	;'i'
  1138  00FFE4  6D                 	db	109	;'m'
  1139  00FFE5  65                 	db	101	;'e'
  1140  00FFE6  00                 	db	0
  1141  00FFE7                     STR_14:
  1142  00FFE7  44                 	db	68	;'D'
  1143  00FFE8  61                 	db	97	;'a'
  1144  00FFE9  74                 	db	116	;'t'
  1145  00FFEA  65                 	db	101	;'e'
  1146  00FFEB  00                 	db	0
  1147  00FFEC  4F                 	db	79	;'O'
  1148  00FFED  4E                 	db	78	;'N'
  1149  00FFEE  20                 	db	32
  1150  00FFEF  00                 	db	0
  1151  00FFF0                     STR_19:
  1152  00FFF0  4F                 	db	79	;'O'
  1153  00FFF1  46                 	db	70	;'F'
  1154  00FFF2  46                 	db	70	;'F'
  1155  00FFF3  00                 	db	0
  1156  00FFF4                     STR_17:
  1157  00FFF4  52                 	db	82	;'R'
  1158  00FFF5  50                 	db	80	;'P'
  1159  00FFF6  4D                 	db	77	;'M'
  1160  00FFF7  00                 	db	0
  1161  00FFF8                     STR_11:
  1162  00FFF8  43                 	db	67	;'C'
  1163  00FFF9  2F                 	db	47
  1164  00FFFA  00                 	db	0
  1165  00FFFB                     STR_16:
  1166  00FFFB  44                 	db	68	;'D'
  1167  00FFFC  43                 	db	67	;'C'
  1168  00FFFD  00                 	db	0
  1169  0000                     
  1170                           ; #config settings
  1171  00FFFE  00                 	db	0	; dummy byte at the end
  1172  0000                     
  1173                           	psect	cinit
  1174  0016CC                     __pcinit:
  1175                           	opt stack 0
  1176  0016CC                     start_initialization:
  1177                           	opt stack 0
  1178  0016CC                     __initialization:
  1179                           	opt stack 0
  1180                           
  1181                           ; Clear objects allocated to BANK0 (2 bytes)
  1182  0016CC  0100               	movlb	0
  1183  0016CE  6BFB               	clrf	(__pbssBANK0+1)& (0+255),b
  1184  0016D0  6BFA               	clrf	__pbssBANK0& (0+255),b
  1185                           
  1186                           ; Clear objects allocated to COMRAM (50 bytes)
  1187  0016D2  EE00  F03B         	lfsr	0,__pbssCOMRAM
  1188  0016D6  0E32               	movlw	50
  1189  0016D8                     clear_0:
  1190  0016D8  6AEE               	clrf	postinc0,c
  1191  0016DA  06E8               	decf	wreg,f,c
  1192  0016DC  E1FD               	bnz	clear_0
  1193                           
  1194                           ; Initialize objects allocated to BANK1 (180 bytes)
  1195                           ; load TBLPTR registers with __pidataBANK1
  1196  0016DE  0E7E               	movlw	low __pidataBANK1
  1197  0016E0  6EF6               	movwf	tblptrl,c
  1198  0016E2  0E14               	movlw	high __pidataBANK1
  1199  0016E4  6EF7               	movwf	tblptrh,c
  1200  0016E6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1201  0016E8  6EF8               	movwf	tblptru,c
  1202  0016EA  EE01  F000         	lfsr	0,__pdataBANK1
  1203  0016EE  EE10 F0B4          	lfsr	1,180
  1204  0016F2                     copy_data0:
  1205  0016F2  0009               	tblrd		*+
  1206  0016F4  CFF5 FFEE          	movff	tablat,postinc0
  1207  0016F8  50E5               	movf	postdec1,w,c
  1208  0016FA  50E1               	movf	fsr1l,w,c
  1209  0016FC  E1FA               	bnz	copy_data0
  1210                           
  1211                           ; Initialize objects allocated to BANK0 (107 bytes)
  1212                           ; load TBLPTR registers with __pidataBANK0
  1213  0016FE  0EB6               	movlw	low __pidataBANK0
  1214  001700  6EF6               	movwf	tblptrl,c
  1215  001702  0E17               	movlw	high __pidataBANK0
  1216  001704  6EF7               	movwf	tblptrh,c
  1217  001706  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1218  001708  6EF8               	movwf	tblptru,c
  1219  00170A  EE00  F080         	lfsr	0,__pdataBANK0
  1220  00170E  EE10 F06B          	lfsr	1,107
  1221  001712                     copy_data1:
  1222  001712  0009               	tblrd		*+
  1223  001714  CFF5 FFEE          	movff	tablat,postinc0
  1224  001718  50E5               	movf	postdec1,w,c
  1225  00171A  50E1               	movf	fsr1l,w,c
  1226  00171C  E1FA               	bnz	copy_data1
  1227                           
  1228                           ; Initialize objects allocated to COMRAM (3 bytes)
  1229                           ; load TBLPTR registers with __pidataCOMRAM
  1230  00171E  0E52               	movlw	low __pidataCOMRAM
  1231  001720  6EF6               	movwf	tblptrl,c
  1232  001722  0E1E               	movlw	high __pidataCOMRAM
  1233  001724  6EF7               	movwf	tblptrh,c
  1234  001726  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1235  001728  6EF8               	movwf	tblptru,c
  1236  00172A  0009               	tblrd		*+	;fetch initializer
  1237  00172C  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1238  001730  0009               	tblrd		*+	;fetch initializer
  1239  001732  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1240  001736  0009               	tblrd		*+	;fetch initializer
  1241  001738  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1242  00173C                     end_of_initialization:
  1243                           	opt stack 0
  1244  00173C                     __end_of__initialization:
  1245                           	opt stack 0
  1246  00173C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1247  00173E  6EF8               	movwf	tblptru,c
  1248  001740  0100               	movlb	0
  1249  001742  EF14  F003         	goto	_main	;jump to C main() function
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           postdec1	equ	0xFE5
  1257                           fsr1l	equ	0xFE1
  1258                           
  1259                           	psect	bssCOMRAM
  1260  00003B                     __pbssCOMRAM:
  1261                           	opt stack 0
  1262  00003B                     _Nec_code:
  1263                           	opt stack 0
  1264  00003B                     	ds	4
  1265  00003F                     _ALARMEN:
  1266                           	opt stack 0
  1267  00003F                     	ds	2
  1268  000041                     _DS1621_tempC:
  1269                           	opt stack 0
  1270  000041                     	ds	2
  1271  000043                     _DS1621_tempF:
  1272                           	opt stack 0
  1273  000043                     	ds	2
  1274  000045                     _Time_Elapsed:
  1275                           	opt stack 0
  1276  000045                     	ds	2
  1277  000047                     _nec_ok:
  1278                           	opt stack 0
  1279  000047                     	ds	2
  1280  000049                     _rpm:
  1281                           	opt stack 0
  1282  000049                     	ds	2
  1283  00004B                     _rps:
  1284                           	opt stack 0
  1285  00004B                     	ds	2
  1286  00004D                     _txt:
  1287                           	opt stack 0
  1288  00004D                     	ds	2
  1289  00004F                     _FAN:
  1290                           	opt stack 0
  1291  00004F                     	ds	1
  1292  000050                     _Nec_code1:
  1293                           	opt stack 0
  1294  000050                     	ds	1
  1295  000051                     _Nec_state:
  1296                           	opt stack 0
  1297  000051                     	ds	1
  1298  000052                     __tft_type:
  1299                           	opt stack 0
  1300  000052                     	ds	1
  1301  000053                     _alarm_date:
  1302                           	opt stack 0
  1303  000053                     	ds	1
  1304  000054                     _alarm_hour:
  1305                           	opt stack 0
  1306  000054                     	ds	1
  1307  000055                     _alarm_minute:
  1308                           	opt stack 0
  1309  000055                     	ds	1
  1310  000056                     _alarm_second:
  1311                           	opt stack 0
  1312  000056                     	ds	1
  1313  000057                     _bit_count:
  1314                           	opt stack 0
  1315  000057                     	ds	1
  1316  000058                     _colstart:
  1317                           	opt stack 0
  1318  000058                     	ds	1
  1319  000059                     _day:
  1320                           	opt stack 0
  1321  000059                     	ds	1
  1322  00005A                     _dow:
  1323                           	opt stack 0
  1324  00005A                     	ds	1
  1325  00005B                     _duty_cycle:
  1326                           	opt stack 0
  1327  00005B                     	ds	1
  1328  00005C                     _found:
  1329                           	opt stack 0
  1330  00005C                     	ds	1
  1331  00005D                     _hour:
  1332                           	opt stack 0
  1333  00005D                     	ds	1
  1334  00005E                     _i:
  1335                           	opt stack 0
  1336  00005E                     	ds	1
  1337  00005F                     _minute:
  1338                           	opt stack 0
  1339  00005F                     	ds	1
  1340  000060                     _month:
  1341                           	opt stack 0
  1342  000060                     	ds	1
  1343  000061                     _rowstart:
  1344                           	opt stack 0
  1345  000061                     	ds	1
  1346  000062                     _second:
  1347                           	opt stack 0
  1348  000062                     	ds	1
  1349  000063                     _setup_alarm_hour:
  1350                           	opt stack 0
  1351  000063                     	ds	1
  1352  000064                     _setup_alarm_minute:
  1353                           	opt stack 0
  1354  000064                     	ds	1
  1355  000065                     _setup_alarm_second:
  1356                           	opt stack 0
  1357  000065                     	ds	1
  1358  000066                     _setup_day:
  1359                           	opt stack 0
  1360  000066                     	ds	1
  1361  000067                     _setup_hour:
  1362                           	opt stack 0
  1363  000067                     	ds	1
  1364  000068                     _setup_minute:
  1365                           	opt stack 0
  1366  000068                     	ds	1
  1367  000069                     _setup_month:
  1368                           	opt stack 0
  1369  000069                     	ds	1
  1370  00006A                     _setup_second:
  1371                           	opt stack 0
  1372  00006A                     	ds	1
  1373  00006B                     _setup_year:
  1374                           	opt stack 0
  1375  00006B                     	ds	1
  1376  00006C                     _year:
  1377                           	opt stack 0
  1378  00006C                     	ds	1
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1l	equ	0xFE1
  1387                           
  1388                           	psect	dataCOMRAM
  1389  00006D                     __pdataCOMRAM:
  1390                           	opt stack 0
  1391  00006D                     _setup_fan_temp:
  1392                           	opt stack 0
  1393  00006D                     	ds	1
  1394  00006E                     _tempSecond:
  1395                           	opt stack 0
  1396  00006E                     	ds	1
  1397  00006F                     _wrap:
  1398                           	opt stack 0
  1399  00006F                     	ds	1
  1400                           tblptru	equ	0xFF8
  1401                           tblptrh	equ	0xFF7
  1402                           tblptrl	equ	0xFF6
  1403                           tablat	equ	0xFF5
  1404                           postinc0	equ	0xFEE
  1405                           wreg	equ	0xFE8
  1406                           postdec1	equ	0xFE5
  1407                           fsr1l	equ	0xFE1
  1408                           
  1409                           	psect	bssBANK0
  1410  0000FA                     __pbssBANK0:
  1411                           	opt stack 0
  1412  0000FA                     _nbr:
  1413                           	opt stack 0
  1414  0000FA                     	ds	2
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           postinc0	equ	0xFEE
  1420                           wreg	equ	0xFE8
  1421                           postdec1	equ	0xFE5
  1422                           fsr1l	equ	0xFE1
  1423                           
  1424                           	psect	dataBANK0
  1425  000080                     __pdataBANK0:
  1426                           	opt stack 0
  1427  000080                     _array1:
  1428                           	opt stack 0
  1429  000080                     	ds	21
  1430  000095                     _alarm_time:
  1431                           	opt stack 0
  1432  000095                     	ds	9
  1433  00009E                     _setup_alarm_time:
  1434                           	opt stack 0
  1435  00009E                     	ds	9
  1436  0000A7                     _setup_date:
  1437                           	opt stack 0
  1438  0000A7                     	ds	9
  1439  0000B0                     _setup_time:
  1440                           	opt stack 0
  1441  0000B0                     	ds	9
  1442  0000B9                     _setup_fan_text:
  1443                           	opt stack 0
  1444  0000B9                     	ds	5
  1445  0000BE                     _Alarm_SW_Txt:
  1446                           	opt stack 0
  1447  0000BE                     	ds	4
  1448  0000C2                     _RTC_ALARM_Txt:
  1449                           	opt stack 0
  1450  0000C2                     	ds	2
  1451  0000C4                     _date:
  1452                           	opt stack 0
  1453  0000C4                     	ds	9
  1454  0000CD                     _time:
  1455                           	opt stack 0
  1456  0000CD                     	ds	9
  1457  0000D6                     _RPM_Txt:
  1458                           	opt stack 0
  1459  0000D6                     	ds	5
  1460  0000DB                     _DC_Txt:
  1461                           	opt stack 0
  1462  0000DB                     	ds	4
  1463  0000DF                     _Fan_SW_Txt:
  1464                           	opt stack 0
  1465  0000DF                     	ds	4
  1466  0000E3                     _tempC:
  1467                           	opt stack 0
  1468  0000E3                     	ds	4
  1469  0000E7                     _tempF:
  1470                           	opt stack 0
  1471  0000E7                     	ds	4
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           postdec1	equ	0xFE5
  1479                           fsr1l	equ	0xFE1
  1480                           
  1481                           	psect	dataBANK1
  1482  000100                     __pdataBANK1:
  1483                           	opt stack 0
  1484  000100                     _txt1:
  1485                           	opt stack 0
  1486  000100                     	ds	84
  1487  000154                     _color:
  1488                           	opt stack 0
  1489  000154                     	ds	42
  1490  00017E                     _D3:
  1491                           	opt stack 0
  1492  00017E                     	ds	21
  1493  000193                     _buffer:
  1494                           	opt stack 0
  1495  000193                     	ds	33
  1496                           tblptru	equ	0xFF8
  1497                           tblptrh	equ	0xFF7
  1498                           tblptrl	equ	0xFF6
  1499                           tablat	equ	0xFF5
  1500                           postinc0	equ	0xFEE
  1501                           wreg	equ	0xFE8
  1502                           postdec1	equ	0xFE5
  1503                           fsr1l	equ	0xFE1
  1504                           
  1505                           	psect	cstackBANK0
  1506  0000EB                     __pcstackBANK0:
  1507                           	opt stack 0
  1508  0000EB                     ??_do_update_pwm:
  1509  0000EB                     drawtext@y:
  1510                           	opt stack 0
  1511                           
  1512                           ; 1 bytes @ 0x0
  1513  0000EB                     	ds	1
  1514  0000EC                     drawtext@_text:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x1
  1518  0000EC                     	ds	2
  1519  0000EE                     drawtext@color:
  1520                           	opt stack 0
  1521  0000EE                     do_update_pwm@dc_f:
  1522                           	opt stack 0
  1523                           
  1524                           ; 3 bytes @ 0x3
  1525  0000EE                     	ds	2
  1526  0000F0                     drawtext@bg:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x5
  1530  0000F0                     	ds	1
  1531  0000F1                     do_update_pwm@duty_cycle:
  1532                           	opt stack 0
  1533                           
  1534                           ; 1 bytes @ 0x6
  1535  0000F1                     	ds	1
  1536  0000F2                     drawtext@size:
  1537                           	opt stack 0
  1538  0000F2                     do_update_pwm@dc_I:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x7
  1542  0000F2                     	ds	1
  1543  0000F3                     drawtext@x:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x8
  1547  0000F3                     	ds	1
  1548  0000F4                     drawtext@textsize:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x9
  1552  0000F4                     	ds	2
  1553  0000F6                     drawtext@i:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0xB
  1557  0000F6                     	ds	2
  1558  0000F8                     drawtext@cursor_y:
  1559                           	opt stack 0
  1560                           
  1561                           ; 1 bytes @ 0xD
  1562  0000F8                     	ds	1
  1563  0000F9                     drawtext@cursor_x:
  1564                           	opt stack 0
  1565                           
  1566                           ; 1 bytes @ 0xE
  1567  0000F9                     	ds	1
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           fsr1l	equ	0xFE1
  1576                           
  1577                           	psect	cstackCOMRAM
  1578  000001                     __pcstackCOMRAM:
  1579                           	opt stack 0
  1580  000001                     ??_INT0_isr:
  1581  000001                     
  1582                           ; 1 bytes @ 0x0
  1583  000001                     	ds	2
  1584  000003                     ??_chkisr:
  1585                           
  1586                           ; 0 bytes @ 0x2
  1587  000003                     	ds	14
  1588  000011                     ??_isdigit:
  1589  000011                     ?_strlen:
  1590                           	opt stack 0
  1591  000011                     ?___wmul:
  1592                           	opt stack 0
  1593  000011                     ?___lwdiv:
  1594                           	opt stack 0
  1595  000011                     ?___ftpack:
  1596                           	opt stack 0
  1597  000011                     ?___fttol:
  1598                           	opt stack 0
  1599  000011                     I2C_Read@ack:
  1600                           	opt stack 0
  1601  000011                     I2C_Write@outByte:
  1602                           	opt stack 0
  1603  000011                     putch@c:
  1604                           	opt stack 0
  1605  000011                     spiwrite@x:
  1606                           	opt stack 0
  1607  000011                     OpenUSART@spbrg:
  1608                           	opt stack 0
  1609  000011                     ___wmul@multiplier:
  1610                           	opt stack 0
  1611  000011                     ___lwdiv@dividend:
  1612                           	opt stack 0
  1613  000011                     strcpy@to:
  1614                           	opt stack 0
  1615  000011                     strlen@s:
  1616                           	opt stack 0
  1617  000011                     ___ftpack@arg:
  1618                           	opt stack 0
  1619  000011                     ___fttol@f1:
  1620                           	opt stack 0
  1621  000011                     I2C_Init@c:
  1622                           	opt stack 0
  1623                           
  1624                           ; 4 bytes @ 0x10
  1625  000011                     	ds	1
  1626  000012                     I2C_Read@n:
  1627                           	opt stack 0
  1628  000012                     I2C_Write@n:
  1629                           	opt stack 0
  1630  000012                     spiwrite@spidata:
  1631                           	opt stack 0
  1632  000012                     _isdigit$2269:
  1633                           	opt stack 0
  1634                           
  1635                           ; 1 bytes @ 0x11
  1636  000012                     	ds	1
  1637  000013                     ??_strlen:
  1638  000013                     I2C_Read@inByte:
  1639                           	opt stack 0
  1640  000013                     I2C_Write_Cmd_Only@Cmd:
  1641                           	opt stack 0
  1642  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1643                           	opt stack 0
  1644  000013                     write_command@cmd_:
  1645                           	opt stack 0
  1646  000013                     write_data@data_:
  1647                           	opt stack 0
  1648  000013                     OpenUSART@config:
  1649                           	opt stack 0
  1650  000013                     isdigit@c:
  1651                           	opt stack 0
  1652  000013                     ___wmul@multiplicand:
  1653                           	opt stack 0
  1654  000013                     ___lwdiv@divisor:
  1655                           	opt stack 0
  1656  000013                     strcpy@from:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x12
  1660  000013                     	ds	1
  1661  000014                     ?_DS1621_Read_Temp:
  1662                           	opt stack 0
  1663  000014                     I2C_Write_Cmd_Only@Device:
  1664                           	opt stack 0
  1665  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1666                           	opt stack 0
  1667  000014                     setAddrWindow@y0:
  1668                           	opt stack 0
  1669  000014                     ___ftpack@exp:
  1670                           	opt stack 0
  1671                           
  1672                           ; 1 bytes @ 0x13
  1673  000014                     	ds	1
  1674  000015                     ??___fttol:
  1675  000015                     I2C_Write_Cmd_Write_Data@Device:
  1676                           	opt stack 0
  1677  000015                     setAddrWindow@x1:
  1678                           	opt stack 0
  1679  000015                     ___ftpack@sign:
  1680                           	opt stack 0
  1681  000015                     ___wmul@product:
  1682                           	opt stack 0
  1683  000015                     ___lwdiv@quotient:
  1684                           	opt stack 0
  1685  000015                     strcpy@cp:
  1686                           	opt stack 0
  1687  000015                     strlen@cp:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x14
  1691  000015                     	ds	1
  1692  000016                     ??___ftpack:
  1693  000016                     DS1621_Init@Device:
  1694                           	opt stack 0
  1695  000016                     DS1621_Read_Temp@Data_Ret:
  1696                           	opt stack 0
  1697  000016                     setAddrWindow@y1:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0x15
  1701  000016                     	ds	1
  1702  000017                     ?___awdiv:
  1703                           	opt stack 0
  1704  000017                     setAddrWindow@x0:
  1705                           	opt stack 0
  1706  000017                     ___lwdiv@counter:
  1707                           	opt stack 0
  1708  000017                     delay_ms@ms:
  1709                           	opt stack 0
  1710  000017                     ___awdiv@dividend:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x16
  1714  000017                     	ds	1
  1715  000018                     ?___lwmod:
  1716                           	opt stack 0
  1717  000018                     drawPixel@y:
  1718                           	opt stack 0
  1719  000018                     drawFastVLine@y:
  1720                           	opt stack 0
  1721  000018                     fillRectangle@y:
  1722                           	opt stack 0
  1723  000018                     ___lwmod@dividend:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x17
  1727  000018                     	ds	1
  1728  000019                     ??_delay_ms:
  1729  000019                     ?___lbtoft:
  1730                           	opt stack 0
  1731  000019                     drawFastVLine@h:
  1732                           	opt stack 0
  1733  000019                     fillRectangle@w:
  1734                           	opt stack 0
  1735  000019                     drawPixel@color:
  1736                           	opt stack 0
  1737  000019                     ___awdiv@divisor:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x18
  1741  000019                     	ds	1
  1742  00001A                     fillRectangle@h:
  1743                           	opt stack 0
  1744  00001A                     ___fttol@sign1:
  1745                           	opt stack 0
  1746  00001A                     drawFastVLine@color:
  1747                           	opt stack 0
  1748  00001A                     ___lwmod@divisor:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x19
  1752  00001A                     	ds	1
  1753  00001B                     drawPixel@x:
  1754                           	opt stack 0
  1755  00001B                     ___awdiv@counter:
  1756                           	opt stack 0
  1757  00001B                     delay_ms@count:
  1758                           	opt stack 0
  1759  00001B                     fillRectangle@color:
  1760                           	opt stack 0
  1761  00001B                     ___fttol@lval:
  1762                           	opt stack 0
  1763                           
  1764                           ; 4 bytes @ 0x1A
  1765  00001B                     	ds	1
  1766  00001C                     ??_drawFastVLine:
  1767  00001C                     ___awdiv@sign:
  1768                           	opt stack 0
  1769  00001C                     ___lbtoft@c:
  1770                           	opt stack 0
  1771  00001C                     ___lwmod@counter:
  1772                           	opt stack 0
  1773  00001C                     drawCircle@x0:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x1B
  1777  00001C                     	ds	1
  1778  00001D                     ??_fillRectangle:
  1779  00001D                     ?_printf:
  1780                           	opt stack 0
  1781  00001D                     ?___ftmul:
  1782                           	opt stack 0
  1783  00001D                     printf@f:
  1784                           	opt stack 0
  1785  00001D                     ___awdiv@quotient:
  1786                           	opt stack 0
  1787  00001D                     ___ftmul@f1:
  1788                           	opt stack 0
  1789                           
  1790                           ; 3 bytes @ 0x1C
  1791  00001D                     	ds	1
  1792  00001E                     drawCircle@y0:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x1D
  1796  00001E                     	ds	1
  1797  00001F                     ?_get_RPM:
  1798                           	opt stack 0
  1799  00001F                     ___fttol@exp1:
  1800                           	opt stack 0
  1801                           
  1802                           ; 1 bytes @ 0x1E
  1803  00001F                     	ds	1
  1804  000020                     drawFastVLine@hi:
  1805                           	opt stack 0
  1806  000020                     drawCircle@r:
  1807                           	opt stack 0
  1808  000020                     ___ftmul@f2:
  1809                           	opt stack 0
  1810                           
  1811                           ; 3 bytes @ 0x1F
  1812  000020                     	ds	1
  1813  000021                     drawFastVLine@lo:
  1814                           	opt stack 0
  1815  000021                     fillRectangle@hi:
  1816                           	opt stack 0
  1817  000021                     get_RPM@RPS:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x20
  1821  000021                     	ds	1
  1822  000022                     drawFastVLine@x:
  1823                           	opt stack 0
  1824  000022                     fillRectangle@lo:
  1825                           	opt stack 0
  1826  000022                     drawCircle@color:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x21
  1830  000022                     	ds	1
  1831  000023                     ??___ftmul:
  1832  000023                     fillRect@y:
  1833                           	opt stack 0
  1834  000023                     fillRectangle@x:
  1835                           	opt stack 0
  1836                           
  1837                           ; 1 bytes @ 0x22
  1838  000023                     	ds	1
  1839  000024                     ??_drawCircle:
  1840  000024                     fillRect@w:
  1841                           	opt stack 0
  1842  000024                     fillScreen@color:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x23
  1846  000024                     	ds	1
  1847  000025                     fillRect@h:
  1848                           	opt stack 0
  1849                           
  1850                           ; 1 bytes @ 0x24
  1851  000025                     	ds	1
  1852  000026                     ___ftmul@exp:
  1853                           	opt stack 0
  1854  000026                     fillRect@color:
  1855                           	opt stack 0
  1856  000026                     drawCircle@ddF_x:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x25
  1860  000026                     	ds	1
  1861  000027                     ___ftmul@f3_as_product:
  1862                           	opt stack 0
  1863                           
  1864                           ; 3 bytes @ 0x26
  1865  000027                     	ds	1
  1866  000028                     ??_fillRect:
  1867  000028                     drawCircle@ddF_y:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x27
  1871  000028                     	ds	2
  1872  00002A                     ___ftmul@cntr:
  1873                           	opt stack 0
  1874  00002A                     drawCircle@f:
  1875                           	opt stack 0
  1876                           
  1877                           ; 2 bytes @ 0x29
  1878  00002A                     	ds	1
  1879  00002B                     ??_printf:
  1880  00002B                     fillRect@x:
  1881                           	opt stack 0
  1882  00002B                     ___ftmul@sign:
  1883                           	opt stack 0
  1884                           
  1885                           ; 1 bytes @ 0x2A
  1886  00002B                     	ds	1
  1887  00002C                     ?___ftdiv:
  1888                           	opt stack 0
  1889  00002C                     fillRect@i:
  1890                           	opt stack 0
  1891  00002C                     drawCircle@x:
  1892                           	opt stack 0
  1893  00002C                     ___ftdiv@f1:
  1894                           	opt stack 0
  1895                           
  1896                           ; 3 bytes @ 0x2B
  1897  00002C                     	ds	2
  1898  00002E                     drawChar@y:
  1899                           	opt stack 0
  1900  00002E                     drawCircle@y:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x2D
  1904  00002E                     	ds	1
  1905  00002F                     drawChar@c:
  1906                           	opt stack 0
  1907  00002F                     printf@idx:
  1908                           	opt stack 0
  1909  00002F                     ___ftdiv@f2:
  1910                           	opt stack 0
  1911                           
  1912                           ; 3 bytes @ 0x2E
  1913  00002F                     	ds	1
  1914  000030                     drawChar@color:
  1915                           	opt stack 0
  1916  000030                     printf@ap:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x2F
  1920  000030                     	ds	2
  1921  000032                     ??___ftdiv:
  1922  000032                     printf@prec:
  1923                           	opt stack 0
  1924  000032                     drawChar@bg:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x31
  1928  000032                     	ds	1
  1929  000033                     printf@val:
  1930                           	opt stack 0
  1931                           
  1932                           ; 2 bytes @ 0x32
  1933  000033                     	ds	1
  1934  000034                     drawChar@size:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0x33
  1938  000034                     	ds	1
  1939  000035                     drawChar@line:
  1940                           	opt stack 0
  1941  000035                     printf@flag:
  1942                           	opt stack 0
  1943  000035                     ___ftdiv@cntr:
  1944                           	opt stack 0
  1945                           
  1946                           ; 1 bytes @ 0x34
  1947  000035                     	ds	1
  1948  000036                     drawChar@x:
  1949                           	opt stack 0
  1950  000036                     printf@width:
  1951                           	opt stack 0
  1952  000036                     ___ftdiv@f3:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0x35
  1956  000036                     	ds	1
  1957  000037                     drawChar@j:
  1958                           	opt stack 0
  1959                           
  1960                           ; 1 bytes @ 0x36
  1961  000037                     	ds	1
  1962  000038                     drawChar@i:
  1963                           	opt stack 0
  1964  000038                     printf@c:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x37
  1968  000038                     	ds	1
  1969  000039                     ??_drawtext:
  1970  000039                     ___ftdiv@exp:
  1971                           	opt stack 0
  1972                           
  1973                           ; 1 bytes @ 0x38
  1974  000039                     	ds	1
  1975  00003A                     ___ftdiv@sign:
  1976                           	opt stack 0
  1977                           
  1978                           ; 1 bytes @ 0x39
  1979  00003A                     	ds	1
  1980  00003B                     tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           postdec1	equ	0xFE5
  1987                           fsr1l	equ	0xFE1
  1988                           
  1989                           ; 0 bytes @ 0x3A
  1990 ;;
  1991 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1992 ;;
  1993 ;; *************** function _main *****************
  1994 ;; Defined at:
  1995 ;;		line 132 in file "Lab12_ex.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;		None
  2000 ;; Return value:  Size  Location     Type
  2001 ;;		None               void
  2002 ;; Registers used:
  2003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;Total ram usage:        0 bytes
  2014 ;; Hardware stack levels required when called:   11
  2015 ;; This function calls:
  2016 ;;		_DS1621_Read_Temp
  2017 ;;		_DS3231_Read_Time
  2018 ;;		_Do_Init
  2019 ;;		_Initialize_Screen
  2020 ;;		___awdiv
  2021 ;;		___wmul
  2022 ;;		_do_update_pwm
  2023 ;;		_get_RPM
  2024 ;;		_printf
  2025 ;; This function is called by:
  2026 ;;		Startup code after reset
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text0
  2031  000628                     __ptext0:
  2032                           	opt stack 0
  2033  000628                     _main:
  2034                           	opt stack 20
  2035                           
  2036                           ;Lab12_ex.c: 134: Do_Init();
  2037                           
  2038                           ;incstack = 0
  2039  000628  ECE1  F00C         	call	_Do_Init	;wreg free
  2040                           
  2041                           ;Lab12_ex.c: 135: Initialize_Screen();
  2042  00062C  ECBB  F001         	call	_Initialize_Screen	;wreg free
  2043                           
  2044                           ;Lab12_ex.c: 160: PORTAbits.RA4 = 1;
  2045  000630  8880               	bsf	3968,4,c	;volatile
  2046                           
  2047                           ;Lab12_ex.c: 161: duty_cycle = 50;
  2048  000632  0E32               	movlw	50
  2049  000634  6E5B               	movwf	_duty_cycle,c
  2050                           
  2051                           ;Lab12_ex.c: 162: do_update_pwm(duty_cycle);
  2052  000636  505B               	movf	_duty_cycle,w,c
  2053  000638  EC71  F009         	call	_do_update_pwm
  2054                           
  2055                           ;Lab12_ex.c: 163: DS3231_Read_Time();
  2056  00063C  EC3F  F00C         	call	_DS3231_Read_Time	;wreg free
  2057                           
  2058                           ;Lab12_ex.c: 165: if(tempSecond != second)
  2059  000640  5062               	movf	_second,w,c
  2060  000642  186E               	xorwf	_tempSecond,w,c
  2061  000644  B4D8               	btfsc	status,2,c
  2062  000646  D05C               	goto	l5729
  2063                           
  2064                           ;Lab12_ex.c: 166: {
  2065                           ;Lab12_ex.c: 167: tempSecond = second;
  2066  000648  C062  F06E         	movff	_second,_tempSecond
  2067                           
  2068                           ;Lab12_ex.c: 168: DS1621_tempC = DS1621_Read_Temp();
  2069  00064C  ECFD  F00D         	call	_DS1621_Read_Temp	;wreg free
  2070  000650  C014  F041         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2071  000654  C015  F042         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2072                           
  2073                           ;Lab12_ex.c: 169: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2074  000658  C041  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2075  00065C  C042  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2076  000660  0E00               	movlw	0
  2077  000662  6E14               	movwf	___wmul@multiplicand+1,c
  2078  000664  0E09               	movlw	9
  2079  000666  6E13               	movwf	___wmul@multiplicand,c
  2080  000668  EC2A  F00E         	call	___wmul	;wreg free
  2081  00066C  C011  F017         	movff	?___wmul,___awdiv@dividend
  2082  000670  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2083  000674  0E00               	movlw	0
  2084  000676  6E1A               	movwf	___awdiv@divisor+1,c
  2085  000678  0E05               	movlw	5
  2086  00067A  6E19               	movwf	___awdiv@divisor,c
  2087  00067C  EC99  F00A         	call	___awdiv	;wreg free
  2088  000680  0E20               	movlw	32
  2089  000682  2417               	addwf	?___awdiv,w,c
  2090  000684  6E43               	movwf	_DS1621_tempF,c
  2091  000686  0E00               	movlw	0
  2092  000688  2018               	addwfc	?___awdiv+1,w,c
  2093  00068A  6E44               	movwf	_DS1621_tempF+1,c
  2094                           
  2095                           ;Lab12_ex.c: 170: rpm = get_RPM();
  2096  00068C  EC50  F00D         	call	_get_RPM	;wreg free
  2097  000690  C01F  F049         	movff	?_get_RPM,_rpm
  2098  000694  C020  F04A         	movff	?_get_RPM+1,_rpm+1
  2099                           
  2100                           ;Lab12_ex.c: 171: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2101  000698  0E3A               	movlw	low STR_3
  2102  00069A  6E1D               	movwf	printf@f,c
  2103  00069C  0EFF               	movlw	high STR_3
  2104  00069E  6E1E               	movwf	printf@f+1,c
  2105  0006A0  C05D  F01F         	movff	_hour,?_printf+2
  2106  0006A4  6A20               	clrf	?_printf+3,c
  2107  0006A6  C05F  F021         	movff	_minute,?_printf+4
  2108  0006AA  6A22               	clrf	?_printf+5,c
  2109  0006AC  C062  F023         	movff	_second,?_printf+6
  2110  0006B0  6A24               	clrf	?_printf+7,c
  2111  0006B2  C060  F025         	movff	_month,?_printf+8
  2112  0006B6  6A26               	clrf	?_printf+9,c
  2113  0006B8  C059  F027         	movff	_day,?_printf+10
  2114  0006BC  6A28               	clrf	?_printf+11,c
  2115  0006BE  C06C  F029         	movff	_year,?_printf+12
  2116  0006C2  6A2A               	clrf	?_printf+13,c
  2117  0006C4  EC0E  F000         	call	_printf	;wreg free
  2118                           
  2119                           ;Lab12_ex.c: 172: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2120  0006C8  0E6E               	movlw	low STR_4
  2121  0006CA  6E1D               	movwf	printf@f,c
  2122  0006CC  0EFF               	movlw	high STR_4
  2123  0006CE  6E1E               	movwf	printf@f+1,c
  2124  0006D0  C041  F01F         	movff	_DS1621_tempC,?_printf+2
  2125  0006D4  C042  F020         	movff	_DS1621_tempC+1,?_printf+3
  2126  0006D8  C043  F021         	movff	_DS1621_tempF,?_printf+4
  2127  0006DC  C044  F022         	movff	_DS1621_tempF+1,?_printf+5
  2128  0006E0  EC0E  F000         	call	_printf	;wreg free
  2129                           
  2130                           ;Lab12_ex.c: 173: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2131  0006E4  0E83               	movlw	low STR_5
  2132  0006E6  6E1D               	movwf	printf@f,c
  2133  0006E8  0EFF               	movlw	high STR_5
  2134  0006EA  6E1E               	movwf	printf@f+1,c
  2135  0006EC  C049  F01F         	movff	_rpm,?_printf+2
  2136  0006F0  C04A  F020         	movff	_rpm+1,?_printf+3
  2137  0006F4  C05B  F021         	movff	_duty_cycle,?_printf+4
  2138  0006F8  6A22               	clrf	?_printf+5,c
  2139  0006FA  EC0E  F000         	call	_printf	;wreg free
  2140  0006FE  D000               	goto	l5729
  2141  000700                     l5729:
  2142                           
  2143                           ;Lab12_ex.c: 174: }
  2144                           ;Lab12_ex.c: 176: PORTAbits.RA4 = 1;
  2145  000700  8880               	bsf	3968,4,c	;volatile
  2146                           
  2147                           ;Lab12_ex.c: 177: duty_cycle = 50;
  2148  000702  0E32               	movlw	50
  2149  000704  6E5B               	movwf	_duty_cycle,c
  2150                           
  2151                           ;Lab12_ex.c: 178: do_update_pwm(duty_cycle);
  2152  000706  505B               	movf	_duty_cycle,w,c
  2153  000708  EC71  F009         	call	_do_update_pwm
  2154  00070C  D000               	goto	l5735
  2155  00070E                     l5735:
  2156                           
  2157                           ;Lab12_ex.c: 180: {
  2158                           ;Lab12_ex.c: 181: DS3231_Read_Time();
  2159  00070E  EC3F  F00C         	call	_DS3231_Read_Time	;wreg free
  2160                           
  2161                           ;Lab12_ex.c: 183: if(tempSecond != second)
  2162  000712  5062               	movf	_second,w,c
  2163  000714  186E               	xorwf	_tempSecond,w,c
  2164  000716  B4D8               	btfsc	status,2,c
  2165  000718  D7FA               	goto	l5735
  2166                           
  2167                           ;Lab12_ex.c: 184: {
  2168                           ;Lab12_ex.c: 185: tempSecond = second;
  2169  00071A  C062  F06E         	movff	_second,_tempSecond
  2170                           
  2171                           ;Lab12_ex.c: 186: DS1621_tempC = DS1621_Read_Temp();
  2172  00071E  ECFD  F00D         	call	_DS1621_Read_Temp	;wreg free
  2173  000722  C014  F041         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2174  000726  C015  F042         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2175                           
  2176                           ;Lab12_ex.c: 187: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2177  00072A  C041  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2178  00072E  C042  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2179  000732  0E00               	movlw	0
  2180  000734  6E14               	movwf	___wmul@multiplicand+1,c
  2181  000736  0E09               	movlw	9
  2182  000738  6E13               	movwf	___wmul@multiplicand,c
  2183  00073A  EC2A  F00E         	call	___wmul	;wreg free
  2184  00073E  C011  F017         	movff	?___wmul,___awdiv@dividend
  2185  000742  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2186  000746  0E00               	movlw	0
  2187  000748  6E1A               	movwf	___awdiv@divisor+1,c
  2188  00074A  0E05               	movlw	5
  2189  00074C  6E19               	movwf	___awdiv@divisor,c
  2190  00074E  EC99  F00A         	call	___awdiv	;wreg free
  2191  000752  0E20               	movlw	32
  2192  000754  2417               	addwf	?___awdiv,w,c
  2193  000756  6E43               	movwf	_DS1621_tempF,c
  2194  000758  0E00               	movlw	0
  2195  00075A  2018               	addwfc	?___awdiv+1,w,c
  2196  00075C  6E44               	movwf	_DS1621_tempF+1,c
  2197                           
  2198                           ;Lab12_ex.c: 188: rpm = get_RPM();
  2199  00075E  EC50  F00D         	call	_get_RPM	;wreg free
  2200  000762  C01F  F049         	movff	?_get_RPM,_rpm
  2201  000766  C020  F04A         	movff	?_get_RPM+1,_rpm+1
  2202                           
  2203                           ;Lab12_ex.c: 189: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2204  00076A  0E3A               	movlw	low STR_3
  2205  00076C  6E1D               	movwf	printf@f,c
  2206  00076E  0EFF               	movlw	high STR_3
  2207  000770  6E1E               	movwf	printf@f+1,c
  2208  000772  C05D  F01F         	movff	_hour,?_printf+2
  2209  000776  6A20               	clrf	?_printf+3,c
  2210  000778  C05F  F021         	movff	_minute,?_printf+4
  2211  00077C  6A22               	clrf	?_printf+5,c
  2212  00077E  C062  F023         	movff	_second,?_printf+6
  2213  000782  6A24               	clrf	?_printf+7,c
  2214  000784  C060  F025         	movff	_month,?_printf+8
  2215  000788  6A26               	clrf	?_printf+9,c
  2216  00078A  C059  F027         	movff	_day,?_printf+10
  2217  00078E  6A28               	clrf	?_printf+11,c
  2218  000790  C06C  F029         	movff	_year,?_printf+12
  2219  000794  6A2A               	clrf	?_printf+13,c
  2220  000796  EC0E  F000         	call	_printf	;wreg free
  2221                           
  2222                           ;Lab12_ex.c: 190: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2223  00079A  0E6E               	movlw	low STR_4
  2224  00079C  6E1D               	movwf	printf@f,c
  2225  00079E  0EFF               	movlw	high STR_4
  2226  0007A0  6E1E               	movwf	printf@f+1,c
  2227  0007A2  C041  F01F         	movff	_DS1621_tempC,?_printf+2
  2228  0007A6  C042  F020         	movff	_DS1621_tempC+1,?_printf+3
  2229  0007AA  C043  F021         	movff	_DS1621_tempF,?_printf+4
  2230  0007AE  C044  F022         	movff	_DS1621_tempF+1,?_printf+5
  2231  0007B2  EC0E  F000         	call	_printf	;wreg free
  2232                           
  2233                           ;Lab12_ex.c: 191: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2234  0007B6  0E83               	movlw	low STR_5
  2235  0007B8  6E1D               	movwf	printf@f,c
  2236  0007BA  0EFF               	movlw	high STR_5
  2237  0007BC  6E1E               	movwf	printf@f+1,c
  2238  0007BE  C049  F01F         	movff	_rpm,?_printf+2
  2239  0007C2  C04A  F020         	movff	_rpm+1,?_printf+3
  2240  0007C6  C05B  F021         	movff	_duty_cycle,?_printf+4
  2241  0007CA  6A22               	clrf	?_printf+5,c
  2242  0007CC  EC0E  F000         	call	_printf	;wreg free
  2243  0007D0  D79E               	goto	l5735
  2244  0007D2  EF0C  F000         	goto	start
  2245  0007D6                     __end_of_main:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           postdec1	equ	0xFE5
  2254                           fsr1l	equ	0xFE1
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _printf *****************
  2258 ;; Defined at:
  2259 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2262 ;;		 -> STR_8(20), STR_7(21), STR_6(30), STR_5(20), 
  2263 ;;		 -> STR_4(21), STR_3(30), STR_2(19), STR_1(20), 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  idx             1   46[COMRAM] unsigned char 
  2266 ;;  tmpval          4    0        struct .
  2267 ;;  cp              3    0        PTR const unsigned char 
  2268 ;;  width           2   53[COMRAM] int 
  2269 ;;  val             2   50[COMRAM] unsigned int 
  2270 ;;  ap              2   47[COMRAM] PTR void [1]
  2271 ;;		 -> ?_printf(2), 
  2272 ;;  len             2    0        unsigned int 
  2273 ;;  c               1   55[COMRAM] char 
  2274 ;;  flag            1   52[COMRAM] unsigned char 
  2275 ;;  prec            1   49[COMRAM] char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  2   28[COMRAM] int 
  2278 ;; Registers used:
  2279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2285 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;Total ram usage:       28 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    4
  2292 ;; This function calls:
  2293 ;;		___lwdiv
  2294 ;;		___lwmod
  2295 ;;		___wmul
  2296 ;;		_isdigit
  2297 ;;		_putch
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;;		_Turn_Off_Fan
  2301 ;;		_Turn_On_Fan
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text1
  2306  00001C                     __ptext1:
  2307                           	opt stack 0
  2308  00001C                     _printf:
  2309                           	opt stack 26
  2310                           
  2311                           ;doprnt.c: 466: va_list ap;
  2312                           ;doprnt.c: 499: signed char c;
  2313                           ;doprnt.c: 501: int width;
  2314                           ;doprnt.c: 506: signed char prec;
  2315                           ;doprnt.c: 508: unsigned char flag;
  2316                           ;doprnt.c: 523: union {
  2317                           ;doprnt.c: 524: unsigned long vd;
  2318                           ;doprnt.c: 525: double integ;
  2319                           ;doprnt.c: 526: } tmpval;
  2320                           ;doprnt.c: 528: unsigned int val;
  2321                           ;doprnt.c: 529: unsigned len;
  2322                           ;doprnt.c: 530: const char * cp;
  2323                           ;doprnt.c: 533: *ap = __va_start();
  2324                           
  2325                           ;incstack = 0
  2326  00001C  0E1F               	movlw	low (?_printf+2)
  2327  00001E  6E30               	movwf	printf@ap,c
  2328  000020  0E00               	movlw	high (?_printf+2)
  2329  000022  6E31               	movwf	printf@ap+1,c
  2330                           
  2331                           ;doprnt.c: 536: while(c = *f++) {
  2332  000024  D199               	goto	l5535
  2333  000026                     l5409:
  2334                           
  2335                           ;doprnt.c: 538: if(c != '%')
  2336  000026  0E25               	movlw	37
  2337  000028  1838               	xorwf	printf@c,w,c
  2338  00002A  B4D8               	btfsc	status,2,c
  2339  00002C  D004               	goto	l5413
  2340                           
  2341                           ;doprnt.c: 540: {
  2342                           ;doprnt.c: 541: (putch(c) );
  2343  00002E  5038               	movf	printf@c,w,c
  2344  000030  ECFB  F00E         	call	_putch
  2345                           
  2346                           ;doprnt.c: 542: continue;
  2347  000034  D191               	goto	l5535
  2348  000036                     l5413:
  2349                           
  2350                           ;doprnt.c: 543: }
  2351                           ;doprnt.c: 546: width = 0;
  2352  000036  0E00               	movlw	0
  2353  000038  6E37               	movwf	printf@width+1,c
  2354  00003A  0E00               	movlw	0
  2355  00003C  6E36               	movwf	printf@width,c
  2356                           
  2357                           ;doprnt.c: 548: flag = 0;
  2358  00003E  0E00               	movlw	0
  2359  000040  6E35               	movwf	printf@flag,c
  2360                           
  2361                           ;doprnt.c: 551: switch(*f) {
  2362                           
  2363                           ;doprnt.c: 550: for(;;) {
  2364  000042  D005               	goto	l5419
  2365  000044                     l5415:
  2366                           
  2367                           ;doprnt.c: 580: flag |= 0x04;
  2368  000044  8435               	bsf	printf@flag,2,c
  2369                           
  2370                           ;doprnt.c: 581: f++;
  2371  000046  4A1D               	infsnz	printf@f,f,c
  2372  000048  2A1E               	incf	printf@f+1,f,c
  2373                           
  2374                           ;doprnt.c: 582: continue;
  2375  00004A  D001               	goto	l5419
  2376                           
  2377                           ;doprnt.c: 584: }
  2378  00004C  D00B               	goto	l5421
  2379  00004E                     l5419:
  2380  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  2381  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  2382  000056                     	if	0	;tblptru may be non-zero
  2383  000056                     	endif
  2384  000056                     	if	0	;tblptru may be non-zero
  2385  000056                     	endif
  2386  000056  0008               	tblrd		*
  2387  000058  50F5               	movf	tablat,w,c
  2388                           
  2389                           ; Switch size 1, requested type "space"
  2390                           ; Number of cases is 1, Range of values is 48 to 48
  2391                           ; switch strategies available:
  2392                           ; Name         Instructions Cycles
  2393                           ; simple_byte            4     3 (average)
  2394                           ;	Chosen strategy is simple_byte
  2395  00005A  0A30               	xorlw	48	; case 48
  2396  00005C  B4D8               	btfsc	status,2,c
  2397  00005E  D7F2               	goto	l5415
  2398                           
  2399                           ;doprnt.c: 585: break;
  2400  000060  D001               	goto	l5421
  2401                           
  2402                           ;doprnt.c: 586: }
  2403  000062  D7F5               	goto	l5419
  2404  000064                     l5421:
  2405                           
  2406                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2407  000064  C01D  FFF6         	movff	printf@f,tblptrl
  2408  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  2409  00006C                     	if	0	;tblptru may be non-zero
  2410  00006C                     	endif
  2411  00006C                     	if	0	;tblptru may be non-zero
  2412  00006C                     	endif
  2413  00006C  0008               	tblrd		*
  2414  00006E  50F5               	movf	tablat,w,c
  2415  000070  EC51  F00E         	call	_isdigit
  2416  000074  A0D8               	btfss	status,0,c
  2417  000076  D03B               	goto	l5437
  2418                           
  2419                           ;doprnt.c: 598: width = 0;
  2420  000078  0E00               	movlw	0
  2421  00007A  6E37               	movwf	printf@width+1,c
  2422  00007C  0E00               	movlw	0
  2423  00007E  6E36               	movwf	printf@width,c
  2424  000080  D000               	goto	l5425
  2425  000082                     l5425:
  2426                           
  2427                           ;doprnt.c: 600: width *= 10;
  2428  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  2429  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2430  00008A  0E00               	movlw	0
  2431  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2432  00008E  0E0A               	movlw	10
  2433  000090  6E13               	movwf	___wmul@multiplicand,c
  2434  000092  EC2A  F00E         	call	___wmul	;wreg free
  2435  000096  C011  F036         	movff	?___wmul,printf@width
  2436  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  2437                           
  2438                           ;doprnt.c: 601: width += *f++ - '0';
  2439  00009E  0ED0               	movlw	208
  2440  0000A0  6E2B               	movwf	??_printf& (0+255),c
  2441  0000A2  0EFF               	movlw	255
  2442  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  2443  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  2444  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2445  0000AE                     	if	0	;tblptru may be non-zero
  2446  0000AE                     	endif
  2447  0000AE                     	if	0	;tblptru may be non-zero
  2448  0000AE                     	endif
  2449  0000AE  0008               	tblrd		*
  2450  0000B0  50F5               	movf	tablat,w,c
  2451  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  2452  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  2453  0000B6  502B               	movf	??_printf,w,c
  2454  0000B8  262D               	addwf	??_printf+2,f,c
  2455  0000BA  502C               	movf	??_printf+1,w,c
  2456  0000BC  222E               	addwfc	??_printf+3,f,c
  2457  0000BE  502D               	movf	??_printf+2,w,c
  2458  0000C0  2636               	addwf	printf@width,f,c
  2459  0000C2  502E               	movf	??_printf+3,w,c
  2460  0000C4  2237               	addwfc	printf@width+1,f,c
  2461  0000C6  4A1D               	infsnz	printf@f,f,c
  2462  0000C8  2A1E               	incf	printf@f+1,f,c
  2463                           
  2464                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2465  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2466  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2467  0000D2                     	if	0	;tblptru may be non-zero
  2468  0000D2                     	endif
  2469  0000D2                     	if	0	;tblptru may be non-zero
  2470  0000D2                     	endif
  2471  0000D2  0008               	tblrd		*
  2472  0000D4  50F5               	movf	tablat,w,c
  2473  0000D6  EC51  F00E         	call	_isdigit
  2474  0000DA  A0D8               	btfss	status,0,c
  2475  0000DC  D008               	goto	l5437
  2476  0000DE  D7D1               	goto	l5425
  2477                           
  2478                           ;doprnt.c: 608: }
  2479                           ;doprnt.c: 635: switch(c = *f++) {
  2480  0000E0  D006               	goto	l5437
  2481                           
  2482                           ;doprnt.c: 638: goto alldone;
  2483                           
  2484                           ;doprnt.c: 637: case 0:
  2485  0000E2  D148               	goto	l827
  2486                           
  2487                           ;doprnt.c: 698: case 'i':
  2488                           ;doprnt.c: 699: break;
  2489                           
  2490                           ;doprnt.c: 697: case 'd':
  2491  0000E4  D01B               	goto	l790
  2492  0000E6                     l5433:
  2493                           
  2494                           ;doprnt.c: 721: flag |= 0x80;
  2495  0000E6  8E35               	bsf	printf@flag,7,c
  2496                           
  2497                           ;doprnt.c: 723: break;
  2498  0000E8  D019               	goto	l790
  2499                           
  2500                           ;doprnt.c: 813: continue;
  2501                           
  2502                           ;doprnt.c: 802: default:
  2503  0000EA  D136               	goto	l5535
  2504                           
  2505                           ;doprnt.c: 822: }
  2506  0000EC  D017               	goto	l790
  2507  0000EE                     l5437:
  2508  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2509  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2510  0000F6  4A1D               	infsnz	printf@f,f,c
  2511  0000F8  2A1E               	incf	printf@f+1,f,c
  2512  0000FA                     	if	0	;tblptru may be non-zero
  2513  0000FA                     	endif
  2514  0000FA                     	if	0	;tblptru may be non-zero
  2515  0000FA                     	endif
  2516  0000FA  0008               	tblrd		*
  2517  0000FC  CFF5 F038          	movff	tablat,printf@c
  2518  000100  5038               	movf	printf@c,w,c
  2519                           
  2520                           ; Switch size 1, requested type "space"
  2521                           ; Number of cases is 4, Range of values is 0 to 120
  2522                           ; switch strategies available:
  2523                           ; Name         Instructions Cycles
  2524                           ; simple_byte           13     7 (average)
  2525                           ;	Chosen strategy is simple_byte
  2526  000102  0A00               	xorlw	0	; case 0
  2527  000104  B4D8               	btfsc	status,2,c
  2528  000106  D136               	goto	l827
  2529  000108  0A64               	xorlw	100	; case 100
  2530  00010A  B4D8               	btfsc	status,2,c
  2531  00010C  D007               	goto	l790
  2532  00010E  0A0D               	xorlw	13	; case 105
  2533  000110  B4D8               	btfsc	status,2,c
  2534  000112  D004               	goto	l790
  2535  000114  0A11               	xorlw	17	; case 120
  2536  000116  B4D8               	btfsc	status,2,c
  2537  000118  D7E6               	goto	l5433
  2538  00011A  D11E               	goto	l5535
  2539  00011C                     l790:
  2540                           
  2541                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2542  00011C  BE35               	btfsc	printf@flag,7,c
  2543  00011E  D015               	goto	l5449
  2544                           
  2545                           ;doprnt.c: 1253: {
  2546                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2547  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2548  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2549  000128  CFDE F033          	movff	postinc2,printf@val
  2550  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2551  000130  0E02               	movlw	2
  2552  000132  2630               	addwf	printf@ap,f,c
  2553  000134  0E00               	movlw	0
  2554  000136  2231               	addwfc	printf@ap+1,f,c
  2555                           
  2556                           ;doprnt.c: 1261: if((int)val < 0) {
  2557  000138  AE34               	btfss	printf@val+1,7,c
  2558  00013A  D04E               	goto	l5483
  2559                           
  2560                           ;doprnt.c: 1262: flag |= 0x03;
  2561  00013C  0E03               	movlw	3
  2562  00013E  1235               	iorwf	printf@flag,f,c
  2563                           
  2564                           ;doprnt.c: 1263: val = -val;
  2565  000140  6C33               	negf	printf@val,c
  2566  000142  1E34               	comf	printf@val+1,f,c
  2567  000144  B0D8               	btfsc	status,0,c
  2568  000146  2A34               	incf	printf@val+1,f,c
  2569                           
  2570                           ;doprnt.c: 1264: }
  2571                           ;doprnt.c: 1266: }
  2572  000148  D047               	goto	l5483
  2573  00014A                     l5449:
  2574                           
  2575                           ;doprnt.c: 1268: else
  2576                           ;doprnt.c: 1273: {
  2577                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2578  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2579  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2580  000152  CFDE F033          	movff	postinc2,printf@val
  2581  000156  CFDD F034          	movff	postdec2,printf@val+1
  2582  00015A  0E02               	movlw	2
  2583  00015C  2630               	addwf	printf@ap,f,c
  2584  00015E  0E00               	movlw	0
  2585  000160  2231               	addwfc	printf@ap+1,f,c
  2586                           
  2587                           ;doprnt.c: 1287: }
  2588                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2589  000162  D03A               	goto	l5483
  2590  000164                     l5453:
  2591                           
  2592                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2593  000164  0E01               	movlw	1
  2594  000166  6E38               	movwf	printf@c,c
  2595  000168                     l5455:
  2596  000168  0E05               	movlw	5
  2597  00016A  1838               	xorwf	printf@c,w,c
  2598  00016C  B4D8               	btfsc	status,2,c
  2599  00016E  D03D               	goto	l5485
  2600  000170  D001               	goto	l5459
  2601  000172  D03B               	goto	l5485
  2602  000174                     l5459:
  2603                           
  2604                           ;doprnt.c: 1306: if(val < dpowers[c])
  2605  000174  5038               	movf	printf@c,w,c
  2606  000176  0D02               	mullw	2
  2607  000178  0E28               	movlw	low _dpowers
  2608  00017A  24F3               	addwf	prodl,w,c
  2609  00017C  6EF6               	movwf	tblptrl,c
  2610  00017E  0EFF               	movlw	high _dpowers
  2611  000180  20F4               	addwfc	prodh,w,c
  2612  000182  6EF7               	movwf	tblptrh,c
  2613  000184                     	if	0	;There are less than 3 active tblptr bytes
  2614  000184                     	endif
  2615  000184  0009               	tblrd		*+
  2616  000186  50F5               	movf	tablat,w,c
  2617  000188  5C33               	subwf	printf@val,w,c
  2618  00018A  0009               	tblrd		*+
  2619  00018C  50F5               	movf	tablat,w,c
  2620  00018E  5834               	subwfb	printf@val+1,w,c
  2621  000190  A0D8               	btfss	status,0,c
  2622  000192  D02B               	goto	l5485
  2623  000194  D001               	goto	l5463
  2624                           
  2625                           ;doprnt.c: 1307: break;
  2626  000196  D029               	goto	l5485
  2627  000198                     l5463:
  2628  000198  2A38               	incf	printf@c,f,c
  2629  00019A  D7E6               	goto	l5455
  2630                           
  2631                           ;doprnt.c: 1309: break;
  2632  00019C  D026               	goto	l5485
  2633  00019E                     l5467:
  2634                           
  2635                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2636  00019E  0E01               	movlw	1
  2637  0001A0  6E38               	movwf	printf@c,c
  2638  0001A2                     l5469:
  2639  0001A2  0E04               	movlw	4
  2640  0001A4  1838               	xorwf	printf@c,w,c
  2641  0001A6  B4D8               	btfsc	status,2,c
  2642  0001A8  D020               	goto	l5485
  2643  0001AA  D001               	goto	l5473
  2644  0001AC  D01E               	goto	l5485
  2645  0001AE                     l5473:
  2646                           
  2647                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2648  0001AE  5038               	movf	printf@c,w,c
  2649  0001B0  0D02               	mullw	2
  2650  0001B2  0E32               	movlw	low _hexpowers
  2651  0001B4  24F3               	addwf	prodl,w,c
  2652  0001B6  6EF6               	movwf	tblptrl,c
  2653  0001B8  0EFF               	movlw	high _hexpowers
  2654  0001BA  20F4               	addwfc	prodh,w,c
  2655  0001BC  6EF7               	movwf	tblptrh,c
  2656  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2657  0001BE                     	endif
  2658  0001BE  0009               	tblrd		*+
  2659  0001C0  50F5               	movf	tablat,w,c
  2660  0001C2  5C33               	subwf	printf@val,w,c
  2661  0001C4  0009               	tblrd		*+
  2662  0001C6  50F5               	movf	tablat,w,c
  2663  0001C8  5834               	subwfb	printf@val+1,w,c
  2664  0001CA  A0D8               	btfss	status,0,c
  2665  0001CC  D00E               	goto	l5485
  2666  0001CE  D001               	goto	l5477
  2667                           
  2668                           ;doprnt.c: 1318: break;
  2669  0001D0  D00C               	goto	l5485
  2670  0001D2                     l5477:
  2671  0001D2  2A38               	incf	printf@c,f,c
  2672  0001D4  D7E6               	goto	l5469
  2673                           
  2674                           ;doprnt.c: 1336: }
  2675                           
  2676                           ;doprnt.c: 1320: break;
  2677  0001D6  D009               	goto	l5485
  2678  0001D8                     l5483:
  2679  0001D8  5035               	movf	printf@flag,w,c
  2680  0001DA  0B80               	andlw	128
  2681                           
  2682                           ; Switch size 1, requested type "space"
  2683                           ; Number of cases is 2, Range of values is 0 to 128
  2684                           ; switch strategies available:
  2685                           ; Name         Instructions Cycles
  2686                           ; simple_byte            7     4 (average)
  2687                           ;	Chosen strategy is simple_byte
  2688  0001DC  0A00               	xorlw	0	; case 0
  2689  0001DE  B4D8               	btfsc	status,2,c
  2690  0001E0  D7C1               	goto	l5453
  2691  0001E2  0A80               	xorlw	128	; case 128
  2692  0001E4  B4D8               	btfsc	status,2,c
  2693  0001E6  D7DB               	goto	l5467
  2694  0001E8  D000               	goto	l5485
  2695  0001EA                     l5485:
  2696                           
  2697                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2698  0001EA  5036               	movf	printf@width,w,c
  2699  0001EC  1037               	iorwf	printf@width+1,w,c
  2700  0001EE  B4D8               	btfsc	status,2,c
  2701  0001F0  D00A               	goto	l5491
  2702  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2703  0001F6  0E03               	movlw	3
  2704  0001F8  162B               	andwf	??_printf,f,c
  2705  0001FA  B4D8               	btfsc	status,2,c
  2706  0001FC  D004               	goto	l5491
  2707                           
  2708                           ;doprnt.c: 1346: width--;
  2709  0001FE  0636               	decf	printf@width,f,c
  2710  000200  A0D8               	btfss	status,0,c
  2711  000202  0637               	decf	printf@width+1,f,c
  2712  000204  D000               	goto	l5491
  2713  000206                     l5491:
  2714                           
  2715                           ;doprnt.c: 1381: if(width > c)
  2716  000206  0E80               	movlw	128
  2717  000208  BE38               	btfsc	printf@c,7,c
  2718  00020A  0E7F               	movlw	127
  2719  00020C  6E2B               	movwf	??_printf& (0+255),c
  2720  00020E  5036               	movf	printf@width,w,c
  2721  000210  5C38               	subwf	printf@c,w,c
  2722  000212  5037               	movf	printf@width+1,w,c
  2723  000214  0A80               	xorlw	128
  2724  000216  582B               	subwfb	??_printf& (0+255),w,c
  2725  000218  B0D8               	btfsc	status,0,c
  2726  00021A  D007               	goto	l5495
  2727                           
  2728                           ;doprnt.c: 1382: width -= c;
  2729  00021C  5038               	movf	printf@c,w,c
  2730  00021E  5E36               	subwf	printf@width,f,c
  2731  000220  0E00               	movlw	0
  2732  000222  BE38               	btfsc	printf@c,7,c
  2733  000224  0EFF               	movlw	255
  2734  000226  5A37               	subwfb	printf@width+1,f,c
  2735  000228  D005               	goto	l5497
  2736  00022A                     l5495:
  2737                           
  2738                           ;doprnt.c: 1383: else
  2739                           ;doprnt.c: 1384: width = 0;
  2740  00022A  0E00               	movlw	0
  2741  00022C  6E37               	movwf	printf@width+1,c
  2742  00022E  0E00               	movlw	0
  2743  000230  6E36               	movwf	printf@width,c
  2744  000232  D000               	goto	l5497
  2745  000234                     l5497:
  2746                           
  2747                           ;doprnt.c: 1387: if(flag & 0x04) {
  2748  000234  A435               	btfss	printf@flag,2,c
  2749  000236  D01A               	goto	l5509
  2750                           
  2751                           ;doprnt.c: 1392: if(flag & 0x03)
  2752  000238  C035  F02B         	movff	printf@flag,??_printf
  2753  00023C  0E03               	movlw	3
  2754  00023E  162B               	andwf	??_printf,f,c
  2755  000240  B4D8               	btfsc	status,2,c
  2756  000242  D004               	goto	l5503
  2757                           
  2758                           ;doprnt.c: 1393: (putch('-') );
  2759  000244  0E2D               	movlw	45
  2760  000246  ECFB  F00E         	call	_putch
  2761  00024A  D000               	goto	l5503
  2762  00024C                     l5503:
  2763                           
  2764                           ;doprnt.c: 1415: if(width)
  2765  00024C  5036               	movf	printf@width,w,c
  2766  00024E  1037               	iorwf	printf@width+1,w,c
  2767  000250  B4D8               	btfsc	status,2,c
  2768  000252  D026               	goto	l5519
  2769  000254                     l5505:
  2770                           
  2771                           ;doprnt.c: 1417: (putch('0') );
  2772  000254  0E30               	movlw	48
  2773  000256  ECFB  F00E         	call	_putch
  2774                           
  2775                           ;doprnt.c: 1418: while(--width);
  2776  00025A  0636               	decf	printf@width,f,c
  2777  00025C  A0D8               	btfss	status,0,c
  2778  00025E  0637               	decf	printf@width+1,f,c
  2779  000260  5036               	movf	printf@width,w,c
  2780  000262  1037               	iorwf	printf@width+1,w,c
  2781  000264  B4D8               	btfsc	status,2,c
  2782  000266  D01C               	goto	l5519
  2783  000268  D7F5               	goto	l5505
  2784                           
  2785                           ;doprnt.c: 1420: } else
  2786  00026A  D01A               	goto	l5519
  2787  00026C                     l5509:
  2788                           
  2789                           ;doprnt.c: 1422: {
  2790                           ;doprnt.c: 1424: if(width
  2791                           ;doprnt.c: 1428: )
  2792  00026C  5036               	movf	printf@width,w,c
  2793  00026E  1037               	iorwf	printf@width+1,w,c
  2794  000270  B4D8               	btfsc	status,2,c
  2795  000272  D00C               	goto	l5515
  2796  000274                     l5511:
  2797                           
  2798                           ;doprnt.c: 1430: (putch(' ') );
  2799  000274  0E20               	movlw	32
  2800  000276  ECFB  F00E         	call	_putch
  2801                           
  2802                           ;doprnt.c: 1431: while(--width);
  2803  00027A  0636               	decf	printf@width,f,c
  2804  00027C  A0D8               	btfss	status,0,c
  2805  00027E  0637               	decf	printf@width+1,f,c
  2806  000280  5036               	movf	printf@width,w,c
  2807  000282  1037               	iorwf	printf@width+1,w,c
  2808  000284  B4D8               	btfsc	status,2,c
  2809  000286  D002               	goto	l5515
  2810  000288  D7F5               	goto	l5511
  2811  00028A  D000               	goto	l5515
  2812  00028C                     l5515:
  2813                           
  2814                           ;doprnt.c: 1438: if(flag & 0x03)
  2815  00028C  C035  F02B         	movff	printf@flag,??_printf
  2816  000290  0E03               	movlw	3
  2817  000292  162B               	andwf	??_printf,f,c
  2818  000294  B4D8               	btfsc	status,2,c
  2819  000296  D004               	goto	l5519
  2820                           
  2821                           ;doprnt.c: 1439: (putch('-') );
  2822  000298  0E2D               	movlw	45
  2823  00029A  ECFB  F00E         	call	_putch
  2824  00029E  D000               	goto	l5519
  2825  0002A0                     l5519:
  2826                           
  2827                           ;doprnt.c: 1469: }
  2828                           ;doprnt.c: 1472: prec = c;
  2829  0002A0  C038  F032         	movff	printf@c,printf@prec
  2830                           
  2831                           ;doprnt.c: 1474: while(prec--) {
  2832  0002A4  D053               	goto	l5533
  2833                           
  2834                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2835  0002A6  D045               	goto	l5529
  2836  0002A8                     l5521:
  2837                           
  2838                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2839  0002A8  5032               	movf	printf@prec,w,c
  2840  0002AA  0D02               	mullw	2
  2841  0002AC  0E28               	movlw	low _dpowers
  2842  0002AE  24F3               	addwf	prodl,w,c
  2843  0002B0  6EF6               	movwf	tblptrl,c
  2844  0002B2  0EFF               	movlw	high _dpowers
  2845  0002B4  20F4               	addwfc	prodh,w,c
  2846  0002B6  6EF7               	movwf	tblptrh,c
  2847  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2848  0002B8                     	endif
  2849  0002B8  0009               	tblrd		*+
  2850  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2851  0002BE  000A               	tblrd		*-
  2852  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2853  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2854  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2855  0002CC  EC11  F00C         	call	___lwdiv	;wreg free
  2856  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2857  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2858  0002D8  0E00               	movlw	0
  2859  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2860  0002DC  0E0A               	movlw	10
  2861  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2862  0002E0  ECBB  F00C         	call	___lwmod	;wreg free
  2863  0002E4  5018               	movf	?___lwmod,w,c
  2864  0002E6  0F30               	addlw	48
  2865  0002E8  6E38               	movwf	printf@c,c
  2866                           
  2867                           ;doprnt.c: 1491: break;
  2868  0002EA  D02C               	goto	l5531
  2869  0002EC                     l5523:
  2870                           
  2871                           ;doprnt.c: 1499: {
  2872                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2873  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2874  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2875  0002F4  5032               	movf	printf@prec,w,c
  2876  0002F6  0D02               	mullw	2
  2877  0002F8  0E32               	movlw	low _hexpowers
  2878  0002FA  24F3               	addwf	prodl,w,c
  2879  0002FC  6EF6               	movwf	tblptrl,c
  2880  0002FE  0EFF               	movlw	high _hexpowers
  2881  000300  20F4               	addwfc	prodh,w,c
  2882  000302  6EF7               	movwf	tblptrh,c
  2883  000304                     	if	0	;There are less than 3 active tblptr bytes
  2884  000304                     	endif
  2885  000304  0009               	tblrd		*+
  2886  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2887  00030A  000A               	tblrd		*-
  2888  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2889  000310  EC11  F00C         	call	___lwdiv	;wreg free
  2890  000314  5011               	movf	?___lwdiv,w,c
  2891  000316  0B0F               	andlw	15
  2892  000318  6E2F               	movwf	printf@idx,c
  2893                           
  2894                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2895  00031A  502F               	movf	printf@idx,w,c
  2896  00031C  0D01               	mullw	1
  2897  00031E  0EBE               	movlw	low STR_20
  2898  000320  24F3               	addwf	prodl,w,c
  2899  000322  6EF6               	movwf	tblptrl,c
  2900  000324  0EFF               	movlw	high STR_20
  2901  000326  20F4               	addwfc	prodh,w,c
  2902  000328  6EF7               	movwf	tblptrh,c
  2903  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2904  00032A                     	endif
  2905  00032A  0008               	tblrd		*
  2906  00032C  CFF5 F038          	movff	tablat,printf@c
  2907                           
  2908                           ;doprnt.c: 1523: }
  2909                           
  2910                           ;doprnt.c: 1508: }
  2911                           ;doprnt.c: 1510: break;
  2912  000330  D009               	goto	l5531
  2913  000332                     l5529:
  2914  000332  5035               	movf	printf@flag,w,c
  2915  000334  0B80               	andlw	128
  2916                           
  2917                           ; Switch size 1, requested type "space"
  2918                           ; Number of cases is 2, Range of values is 0 to 128
  2919                           ; switch strategies available:
  2920                           ; Name         Instructions Cycles
  2921                           ; simple_byte            7     4 (average)
  2922                           ;	Chosen strategy is simple_byte
  2923  000336  0A00               	xorlw	0	; case 0
  2924  000338  B4D8               	btfsc	status,2,c
  2925  00033A  D7B6               	goto	l5521
  2926  00033C  0A80               	xorlw	128	; case 128
  2927  00033E  B4D8               	btfsc	status,2,c
  2928  000340  D7D5               	goto	l5523
  2929  000342  D000               	goto	l5531
  2930  000344                     l5531:
  2931                           
  2932                           ;doprnt.c: 1524: (putch(c) );
  2933  000344  5038               	movf	printf@c,w,c
  2934  000346  ECFB  F00E         	call	_putch
  2935  00034A  D000               	goto	l5533
  2936  00034C                     l5533:
  2937  00034C  0632               	decf	printf@prec,f,c
  2938  00034E  2832               	incf	printf@prec,w,c
  2939  000350  B4D8               	btfsc	status,2,c
  2940  000352  D002               	goto	l5535
  2941  000354  D7EE               	goto	l5529
  2942  000356  D000               	goto	l5535
  2943  000358                     l5535:
  2944  000358  C01D  FFF6         	movff	printf@f,tblptrl
  2945  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2946  000360  4A1D               	infsnz	printf@f,f,c
  2947  000362  2A1E               	incf	printf@f+1,f,c
  2948  000364                     	if	0	;tblptru may be non-zero
  2949  000364                     	endif
  2950  000364                     	if	0	;tblptru may be non-zero
  2951  000364                     	endif
  2952  000364  0008               	tblrd		*
  2953  000366  CFF5 F038          	movff	tablat,printf@c
  2954  00036A  5038               	movf	printf@c,w,c
  2955  00036C  B4D8               	btfsc	status,2,c
  2956  00036E  D002               	goto	l827
  2957  000370  D65A               	goto	l5409
  2958  000372  D000               	goto	l827
  2959  000374                     l827:
  2960  000374  0012               	return		;funcret
  2961  000376                     __end_of_printf:
  2962                           	opt stack 0
  2963                           tblptru	equ	0xFF8
  2964                           tblptrh	equ	0xFF7
  2965                           tblptrl	equ	0xFF6
  2966                           tablat	equ	0xFF5
  2967                           prodh	equ	0xFF4
  2968                           prodl	equ	0xFF3
  2969                           postinc0	equ	0xFEE
  2970                           wreg	equ	0xFE8
  2971                           postdec1	equ	0xFE5
  2972                           fsr1l	equ	0xFE1
  2973                           postinc2	equ	0xFDE
  2974                           postdec2	equ	0xFDD
  2975                           fsr2h	equ	0xFDA
  2976                           fsr2l	equ	0xFD9
  2977                           status	equ	0xFD8
  2978                           
  2979 ;; *************** function _putch *****************
  2980 ;; Defined at:
  2981 ;;		line 97 in file "Lab12_ex.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  c               1    wreg     unsigned char 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  c               1   16[COMRAM] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;		None               void
  2988 ;; Registers used:
  2989 ;;		wreg
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;Total ram usage:        1 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    3
  3002 ;; This function calls:
  3003 ;;		Nothing
  3004 ;; This function is called by:
  3005 ;;		_printf
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text2
  3010  001DF6                     __ptext2:
  3011                           	opt stack 0
  3012  001DF6                     _putch:
  3013                           	opt stack 26
  3014                           
  3015                           ;incstack = 0
  3016                           ;putch@c stored from wreg
  3017  001DF6  6E11               	movwf	putch@c,c
  3018                           
  3019                           ;Lab12_ex.c: 99: while (!TRMT);
  3020  001DF8  D000               	goto	l416
  3021  001DFA                     l416:
  3022  001DFA  A2AC               	btfss	4012,1,c	;volatile
  3023  001DFC  D7FE               	goto	l416
  3024                           
  3025                           ;Lab12_ex.c: 100: TXREG = c;
  3026  001DFE  C011  FFAD         	movff	putch@c,4013	;volatile
  3027  001E02  0012               	return		;funcret
  3028  001E04                     __end_of_putch:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           postdec1	equ	0xFE5
  3039                           fsr1l	equ	0xFE1
  3040                           postinc2	equ	0xFDE
  3041                           postdec2	equ	0xFDD
  3042                           fsr2h	equ	0xFDA
  3043                           fsr2l	equ	0xFD9
  3044                           status	equ	0xFD8
  3045                           
  3046 ;; *************** function _isdigit *****************
  3047 ;; Defined at:
  3048 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  c               1    wreg     unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  c               1   18[COMRAM] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;		None               void
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;Total ram usage:        3 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    3
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_printf
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text3
  3077  001CA2                     __ptext3:
  3078                           	opt stack 0
  3079  001CA2                     _isdigit:
  3080                           	opt stack 26
  3081                           
  3082                           ;incstack = 0
  3083                           ;isdigit@c stored from wreg
  3084  001CA2  6E13               	movwf	isdigit@c,c
  3085  001CA4  0E00               	movlw	0
  3086  001CA6  6E12               	movwf	_isdigit$2269,c
  3087  001CA8  0E3A               	movlw	58
  3088  001CAA  6013               	cpfslt	isdigit@c,c
  3089  001CAC  D006               	goto	l3803
  3090  001CAE  0E2F               	movlw	47
  3091  001CB0  6413               	cpfsgt	isdigit@c,c
  3092  001CB2  D003               	goto	l3803
  3093  001CB4  0E01               	movlw	1
  3094  001CB6  6E12               	movwf	_isdigit$2269,c
  3095  001CB8  D000               	goto	l3803
  3096  001CBA                     l3803:
  3097  001CBA  C012  F011         	movff	_isdigit$2269,??_isdigit
  3098  001CBE  3011               	rrcf	??_isdigit,w,c
  3099  001CC0  D000               	goto	l1294
  3100  001CC2                     l1294:
  3101  001CC2  0012               	return		;funcret
  3102  001CC4                     __end_of_isdigit:
  3103                           	opt stack 0
  3104                           tblptru	equ	0xFF8
  3105                           tblptrh	equ	0xFF7
  3106                           tblptrl	equ	0xFF6
  3107                           tablat	equ	0xFF5
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           postdec1	equ	0xFE5
  3113                           fsr1l	equ	0xFE1
  3114                           postinc2	equ	0xFDE
  3115                           postdec2	equ	0xFDD
  3116                           fsr2h	equ	0xFDA
  3117                           fsr2l	equ	0xFD9
  3118                           status	equ	0xFD8
  3119                           
  3120 ;; *************** function ___lwmod *****************
  3121 ;; Defined at:
  3122 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  dividend        2   23[COMRAM] unsigned int 
  3125 ;;  divisor         2   25[COMRAM] unsigned int 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  counter         1   27[COMRAM] unsigned char 
  3128 ;; Return value:  Size  Location     Type
  3129 ;;                  2   23[COMRAM] unsigned int 
  3130 ;; Registers used:
  3131 ;;		wreg, status,2, status,0
  3132 ;; Tracked objects:
  3133 ;;		On entry : 0/0
  3134 ;;		On exit  : 0/0
  3135 ;;		Unchanged: 0/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3137 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;Total ram usage:        5 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    3
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_printf
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text4
  3152  001976                     __ptext4:
  3153                           	opt stack 0
  3154  001976                     ___lwmod:
  3155                           	opt stack 26
  3156                           
  3157                           ;incstack = 0
  3158  001976  501A               	movf	___lwmod@divisor,w,c
  3159  001978  101B               	iorwf	___lwmod@divisor+1,w,c
  3160  00197A  B4D8               	btfsc	status,2,c
  3161  00197C  D01D               	goto	l1396
  3162  00197E  0E01               	movlw	1
  3163  001980  6E1C               	movwf	___lwmod@counter,c
  3164  001982  D005               	goto	l4023
  3165  001984                     l4021:
  3166  001984  90D8               	bcf	status,0,c
  3167  001986  361A               	rlcf	___lwmod@divisor,f,c
  3168  001988  361B               	rlcf	___lwmod@divisor+1,f,c
  3169  00198A  2A1C               	incf	___lwmod@counter,f,c
  3170  00198C  D000               	goto	l4023
  3171  00198E                     l4023:
  3172  00198E  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3173  001990  D002               	goto	l4025
  3174  001992  D7F8               	goto	l4021
  3175  001994  D000               	goto	l4025
  3176  001996                     l4025:
  3177  001996  501A               	movf	___lwmod@divisor,w,c
  3178  001998  5C18               	subwf	___lwmod@dividend,w,c
  3179  00199A  501B               	movf	___lwmod@divisor+1,w,c
  3180  00199C  5819               	subwfb	___lwmod@dividend+1,w,c
  3181  00199E  A0D8               	btfss	status,0,c
  3182  0019A0  D005               	goto	l4029
  3183  0019A2  501A               	movf	___lwmod@divisor,w,c
  3184  0019A4  5E18               	subwf	___lwmod@dividend,f,c
  3185  0019A6  501B               	movf	___lwmod@divisor+1,w,c
  3186  0019A8  5A19               	subwfb	___lwmod@dividend+1,f,c
  3187  0019AA  D000               	goto	l4029
  3188  0019AC                     l4029:
  3189  0019AC  90D8               	bcf	status,0,c
  3190  0019AE  321B               	rrcf	___lwmod@divisor+1,f,c
  3191  0019B0  321A               	rrcf	___lwmod@divisor,f,c
  3192  0019B2  2E1C               	decfsz	___lwmod@counter,f,c
  3193  0019B4  D7F0               	goto	l4025
  3194  0019B6  D000               	goto	l1396
  3195  0019B8                     l1396:
  3196  0019B8  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3197  0019BC  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3198  0019C0  0012               	return		;funcret
  3199  0019C2                     __end_of___lwmod:
  3200                           	opt stack 0
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           prodh	equ	0xFF4
  3206                           prodl	equ	0xFF3
  3207                           postinc0	equ	0xFEE
  3208                           wreg	equ	0xFE8
  3209                           postdec1	equ	0xFE5
  3210                           fsr1l	equ	0xFE1
  3211                           postinc2	equ	0xFDE
  3212                           postdec2	equ	0xFDD
  3213                           fsr2h	equ	0xFDA
  3214                           fsr2l	equ	0xFD9
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function ___lwdiv *****************
  3218 ;; Defined at:
  3219 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;  dividend        2   16[COMRAM] unsigned int 
  3222 ;;  divisor         2   18[COMRAM] unsigned int 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  quotient        2   20[COMRAM] unsigned int 
  3225 ;;  counter         1   22[COMRAM] unsigned char 
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  2   16[COMRAM] unsigned int 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2, status,0
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3235 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;Total ram usage:        7 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    3
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_printf
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text5
  3250  001822                     __ptext5:
  3251                           	opt stack 0
  3252  001822                     ___lwdiv:
  3253                           	opt stack 26
  3254                           
  3255                           ;incstack = 0
  3256  001822  0E00               	movlw	0
  3257  001824  6E16               	movwf	___lwdiv@quotient+1,c
  3258  001826  0E00               	movlw	0
  3259  001828  6E15               	movwf	___lwdiv@quotient,c
  3260  00182A  5013               	movf	___lwdiv@divisor,w,c
  3261  00182C  1014               	iorwf	___lwdiv@divisor+1,w,c
  3262  00182E  B4D8               	btfsc	status,2,c
  3263  001830  D021               	goto	l1386
  3264  001832  0E01               	movlw	1
  3265  001834  6E17               	movwf	___lwdiv@counter,c
  3266  001836  D005               	goto	l4003
  3267  001838                     l4001:
  3268  001838  90D8               	bcf	status,0,c
  3269  00183A  3613               	rlcf	___lwdiv@divisor,f,c
  3270  00183C  3614               	rlcf	___lwdiv@divisor+1,f,c
  3271  00183E  2A17               	incf	___lwdiv@counter,f,c
  3272  001840  D000               	goto	l4003
  3273  001842                     l4003:
  3274  001842  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3275  001844  D002               	goto	l4005
  3276  001846  D7F8               	goto	l4001
  3277  001848  D000               	goto	l4005
  3278  00184A                     l4005:
  3279  00184A  90D8               	bcf	status,0,c
  3280  00184C  3615               	rlcf	___lwdiv@quotient,f,c
  3281  00184E  3616               	rlcf	___lwdiv@quotient+1,f,c
  3282  001850  5013               	movf	___lwdiv@divisor,w,c
  3283  001852  5C11               	subwf	___lwdiv@dividend,w,c
  3284  001854  5014               	movf	___lwdiv@divisor+1,w,c
  3285  001856  5812               	subwfb	___lwdiv@dividend+1,w,c
  3286  001858  A0D8               	btfss	status,0,c
  3287  00185A  D006               	goto	l4013
  3288  00185C  5013               	movf	___lwdiv@divisor,w,c
  3289  00185E  5E11               	subwf	___lwdiv@dividend,f,c
  3290  001860  5014               	movf	___lwdiv@divisor+1,w,c
  3291  001862  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3292  001864  8015               	bsf	___lwdiv@quotient,0,c
  3293  001866  D000               	goto	l4013
  3294  001868                     l4013:
  3295  001868  90D8               	bcf	status,0,c
  3296  00186A  3214               	rrcf	___lwdiv@divisor+1,f,c
  3297  00186C  3213               	rrcf	___lwdiv@divisor,f,c
  3298  00186E  2E17               	decfsz	___lwdiv@counter,f,c
  3299  001870  D7EC               	goto	l4005
  3300  001872  D000               	goto	l1386
  3301  001874                     l1386:
  3302  001874  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  3303  001878  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3304  00187C  0012               	return		;funcret
  3305  00187E                     __end_of___lwdiv:
  3306                           	opt stack 0
  3307                           tblptru	equ	0xFF8
  3308                           tblptrh	equ	0xFF7
  3309                           tblptrl	equ	0xFF6
  3310                           tablat	equ	0xFF5
  3311                           prodh	equ	0xFF4
  3312                           prodl	equ	0xFF3
  3313                           postinc0	equ	0xFEE
  3314                           wreg	equ	0xFE8
  3315                           postdec1	equ	0xFE5
  3316                           fsr1l	equ	0xFE1
  3317                           postinc2	equ	0xFDE
  3318                           postdec2	equ	0xFDD
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function _get_RPM *****************
  3324 ;; Defined at:
  3325 ;;		line 10 in file "Fan_Support.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;		None
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;  RPS             2   32[COMRAM] int 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  2   30[COMRAM] int 
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3340 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3342 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3343 ;;Total ram usage:        4 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    4
  3346 ;; This function calls:
  3347 ;;		___awdiv
  3348 ;;		___wmul
  3349 ;; This function is called by:
  3350 ;;		_main
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text6
  3355  001AA0                     __ptext6:
  3356                           	opt stack 0
  3357  001AA0                     _get_RPM:
  3358                           	opt stack 26
  3359                           
  3360                           ;Fan_Support.c: 12: int RPS = TMR3L / 2;
  3361                           
  3362                           ;incstack = 0
  3363  001AA0  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3364  001AA4  6A18               	clrf	___awdiv@dividend+1,c
  3365  001AA6  0E00               	movlw	0
  3366  001AA8  6E1A               	movwf	___awdiv@divisor+1,c
  3367  001AAA  0E02               	movlw	2
  3368  001AAC  6E19               	movwf	___awdiv@divisor,c
  3369  001AAE  EC99  F00A         	call	___awdiv	;wreg free
  3370  001AB2  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3371  001AB6  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3372                           
  3373                           ;Fan_Support.c: 14: TMR3L = 0;
  3374  001ABA  0E00               	movlw	0
  3375  001ABC  6EB2               	movwf	4018,c	;volatile
  3376                           
  3377                           ;Fan_Support.c: 15: return (RPS * 60);
  3378  001ABE  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3379  001AC2  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3380  001AC6  0E00               	movlw	0
  3381  001AC8  6E14               	movwf	___wmul@multiplicand+1,c
  3382  001ACA  0E3C               	movlw	60
  3383  001ACC  6E13               	movwf	___wmul@multiplicand,c
  3384  001ACE  EC2A  F00E         	call	___wmul	;wreg free
  3385  001AD2  C011  F01F         	movff	?___wmul,?_get_RPM
  3386  001AD6  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3387  001ADA  D000               	goto	l33
  3388  001ADC                     l33:
  3389  001ADC  0012               	return		;funcret
  3390  001ADE                     __end_of_get_RPM:
  3391                           	opt stack 0
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           postinc0	equ	0xFEE
  3399                           wreg	equ	0xFE8
  3400                           postdec1	equ	0xFE5
  3401                           fsr1l	equ	0xFE1
  3402                           postinc2	equ	0xFDE
  3403                           postdec2	equ	0xFDD
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function ___awdiv *****************
  3409 ;; Defined at:
  3410 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  dividend        2   22[COMRAM] int 
  3413 ;;  divisor         2   24[COMRAM] int 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  quotient        2   28[COMRAM] int 
  3416 ;;  sign            1   27[COMRAM] unsigned char 
  3417 ;;  counter         1   26[COMRAM] unsigned char 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  2   22[COMRAM] int 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3427 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;Total ram usage:        8 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    3
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_get_RPM
  3438 ;;		_main
  3439 ;;		_Set_DC_RGB
  3440 ;;		_Set_RPM_RGB
  3441 ;;		_Update_Screen
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text7
  3446  001532                     __ptext7:
  3447                           	opt stack 0
  3448  001532                     ___awdiv:
  3449                           	opt stack 26
  3450                           
  3451                           ;incstack = 0
  3452  001532  0E00               	movlw	0
  3453  001534  6E1C               	movwf	___awdiv@sign,c
  3454  001536  AE1A               	btfss	___awdiv@divisor+1,7,c
  3455  001538  D007               	goto	l3909
  3456  00153A  6C19               	negf	___awdiv@divisor,c
  3457  00153C  1E1A               	comf	___awdiv@divisor+1,f,c
  3458  00153E  B0D8               	btfsc	status,0,c
  3459  001540  2A1A               	incf	___awdiv@divisor+1,f,c
  3460  001542  0E01               	movlw	1
  3461  001544  6E1C               	movwf	___awdiv@sign,c
  3462  001546  D000               	goto	l3909
  3463  001548                     l3909:
  3464  001548  AE18               	btfss	___awdiv@dividend+1,7,c
  3465  00154A  D007               	goto	l3915
  3466  00154C  6C17               	negf	___awdiv@dividend,c
  3467  00154E  1E18               	comf	___awdiv@dividend+1,f,c
  3468  001550  B0D8               	btfsc	status,0,c
  3469  001552  2A18               	incf	___awdiv@dividend+1,f,c
  3470  001554  0E01               	movlw	1
  3471  001556  1A1C               	xorwf	___awdiv@sign,f,c
  3472  001558  D000               	goto	l3915
  3473  00155A                     l3915:
  3474  00155A  0E00               	movlw	0
  3475  00155C  6E1E               	movwf	___awdiv@quotient+1,c
  3476  00155E  0E00               	movlw	0
  3477  001560  6E1D               	movwf	___awdiv@quotient,c
  3478  001562  5019               	movf	___awdiv@divisor,w,c
  3479  001564  101A               	iorwf	___awdiv@divisor+1,w,c
  3480  001566  B4D8               	btfsc	status,2,c
  3481  001568  D021               	goto	l3937
  3482  00156A  0E01               	movlw	1
  3483  00156C  6E1B               	movwf	___awdiv@counter,c
  3484  00156E  D005               	goto	l3923
  3485  001570                     l3921:
  3486  001570  90D8               	bcf	status,0,c
  3487  001572  3619               	rlcf	___awdiv@divisor,f,c
  3488  001574  361A               	rlcf	___awdiv@divisor+1,f,c
  3489  001576  2A1B               	incf	___awdiv@counter,f,c
  3490  001578  D000               	goto	l3923
  3491  00157A                     l3923:
  3492  00157A  BE1A               	btfsc	___awdiv@divisor+1,7,c
  3493  00157C  D002               	goto	l3925
  3494  00157E  D7F8               	goto	l3921
  3495  001580  D000               	goto	l3925
  3496  001582                     l3925:
  3497  001582  90D8               	bcf	status,0,c
  3498  001584  361D               	rlcf	___awdiv@quotient,f,c
  3499  001586  361E               	rlcf	___awdiv@quotient+1,f,c
  3500  001588  5019               	movf	___awdiv@divisor,w,c
  3501  00158A  5C17               	subwf	___awdiv@dividend,w,c
  3502  00158C  501A               	movf	___awdiv@divisor+1,w,c
  3503  00158E  5818               	subwfb	___awdiv@dividend+1,w,c
  3504  001590  A0D8               	btfss	status,0,c
  3505  001592  D006               	goto	l3933
  3506  001594  5019               	movf	___awdiv@divisor,w,c
  3507  001596  5E17               	subwf	___awdiv@dividend,f,c
  3508  001598  501A               	movf	___awdiv@divisor+1,w,c
  3509  00159A  5A18               	subwfb	___awdiv@dividend+1,f,c
  3510  00159C  801D               	bsf	___awdiv@quotient,0,c
  3511  00159E  D000               	goto	l3933
  3512  0015A0                     l3933:
  3513  0015A0  90D8               	bcf	status,0,c
  3514  0015A2  321A               	rrcf	___awdiv@divisor+1,f,c
  3515  0015A4  3219               	rrcf	___awdiv@divisor,f,c
  3516  0015A6  2E1B               	decfsz	___awdiv@counter,f,c
  3517  0015A8  D7EC               	goto	l3925
  3518  0015AA  D000               	goto	l3937
  3519  0015AC                     l3937:
  3520  0015AC  501C               	movf	___awdiv@sign,w,c
  3521  0015AE  B4D8               	btfsc	status,2,c
  3522  0015B0  D005               	goto	l3941
  3523  0015B2  6C1D               	negf	___awdiv@quotient,c
  3524  0015B4  1E1E               	comf	___awdiv@quotient+1,f,c
  3525  0015B6  B0D8               	btfsc	status,0,c
  3526  0015B8  2A1E               	incf	___awdiv@quotient+1,f,c
  3527  0015BA  D000               	goto	l3941
  3528  0015BC                     l3941:
  3529  0015BC  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3530  0015C0  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3531  0015C4  D000               	goto	l1056
  3532  0015C6                     l1056:
  3533  0015C6  0012               	return		;funcret
  3534  0015C8                     __end_of___awdiv:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1l	equ	0xFE1
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           fsr2h	equ	0xFDA
  3549                           fsr2l	equ	0xFD9
  3550                           status	equ	0xFD8
  3551                           
  3552 ;; *************** function _do_update_pwm *****************
  3553 ;; Defined at:
  3554 ;;		line 73 in file "Fan_Support.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  duty_cycle      1    wreg     unsigned char 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  duty_cycle      1    6[BANK0 ] unsigned char 
  3559 ;;  dc_f            3    3[BANK0 ] float 
  3560 ;;  dc_I            2    7[BANK0 ] int 
  3561 ;; Return value:  Size  Location     Type
  3562 ;;		None               void
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0, cstack
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;Total ram usage:        9 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    5
  3577 ;; This function calls:
  3578 ;;		___ftdiv
  3579 ;;		___ftmul
  3580 ;;		___fttol
  3581 ;;		___lbtoft
  3582 ;; This function is called by:
  3583 ;;		_main
  3584 ;;		_Turn_On_Fan
  3585 ;;		_Increase_Speed
  3586 ;;		_Decrease_Speed
  3587 ;;		_Do_Beep
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	text8
  3592  0012E2                     __ptext8:
  3593                           	opt stack 0
  3594  0012E2                     _do_update_pwm:
  3595                           	opt stack 25
  3596                           
  3597                           ;incstack = 0
  3598                           ;do_update_pwm@duty_cycle stored from wreg
  3599  0012E2  0100               	movlb	0	; () banked
  3600  0012E4  6FF1               	movwf	do_update_pwm@duty_cycle& (0+255),b
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;Fan_Support.c: 75: float dc_f;
  3604                           ;Fan_Support.c: 76: int dc_I;
  3605                           ;Fan_Support.c: 77: PR2 = 0b00000100 ;
  3606  0012E6  0E04               	movlw	4
  3607  0012E8  6ECB               	movwf	4043,c	;volatile
  3608                           
  3609                           ;Fan_Support.c: 78: T2CON = 0b00000111 ;
  3610  0012EA  0E07               	movlw	7
  3611  0012EC  6ECA               	movwf	4042,c	;volatile
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;Fan_Support.c: 79: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  3615  0012EE  0E00               	movlw	0
  3616  0012F0  6E20               	movwf	___ftmul@f2,c
  3617  0012F2  0E80               	movlw	128
  3618  0012F4  6E21               	movwf	___ftmul@f2+1,c
  3619  0012F6  0E40               	movlw	64
  3620  0012F8  6E22               	movwf	___ftmul@f2+2,c
  3621  0012FA  0100               	movlb	0	; () banked
  3622  0012FC  51F1               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  3623  0012FE  EC3E  F00E         	call	___lbtoft
  3624  001302  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  3625  001306  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  3626  00130A  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  3627  00130E  EC2A  F007         	call	___ftmul	;wreg free
  3628  001312  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  3629  001316  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  3630  00131A  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  3631  00131E  0E00               	movlw	0
  3632  001320  6E2F               	movwf	___ftdiv@f2,c
  3633  001322  0EA0               	movlw	160
  3634  001324  6E30               	movwf	___ftdiv@f2+1,c
  3635  001326  0E41               	movlw	65
  3636  001328  6E31               	movwf	___ftdiv@f2+2,c
  3637  00132A  EC92  F008         	call	___ftdiv	;wreg free
  3638  00132E  C02C  F0EE         	movff	?___ftdiv,do_update_pwm@dc_f
  3639  001332  C02D  F0EF         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  3640  001336  C02E  F0F0         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  3641                           
  3642                           ;Fan_Support.c: 81: dc_I = (int) dc_f;
  3643  00133A  C0EE  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  3644  00133E  C0EF  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  3645  001342  C0F0  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  3646  001346  EC1F  F008         	call	___fttol	;wreg free
  3647  00134A  C011  F0F2         	movff	?___fttol,do_update_pwm@dc_I
  3648  00134E  C012  F0F3         	movff	?___fttol+1,do_update_pwm@dc_I+1
  3649                           
  3650                           ;Fan_Support.c: 82: if (dc_I > duty_cycle) dc_I++;
  3651  001352  0100               	movlb	0	; () banked
  3652  001354  51F1               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  3653  001356  0100               	movlb	0	; () banked
  3654  001358  6FEB               	movwf	??_do_update_pwm& (0+255),b
  3655  00135A  6BEC               	clrf	(??_do_update_pwm+1)& (0+255),b
  3656  00135C  0100               	movlb	0	; () banked
  3657  00135E  51F2               	movf	do_update_pwm@dc_I& (0+255),w,b
  3658  001360  0100               	movlb	0	; () banked
  3659  001362  5DEB               	subwf	??_do_update_pwm& (0+255),w,b
  3660  001364  0100               	movlb	0	; () banked
  3661  001366  51EC               	movf	(??_do_update_pwm+1)& (0+255),w,b
  3662  001368  0A80               	xorlw	128
  3663  00136A  0100               	movlb	0	; () banked
  3664  00136C  6FED               	movwf	(??_do_update_pwm+2)& (0+255),b
  3665  00136E  0100               	movlb	0	; () banked
  3666  001370  51F3               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  3667  001372  0A80               	xorlw	128
  3668  001374  0100               	movlb	0	; () banked
  3669  001376  59ED               	subwfb	(??_do_update_pwm+2)& (0+255),w,b
  3670  001378  B0D8               	btfsc	status,0,c
  3671  00137A  D004               	goto	l5547
  3672                           
  3673                           ; BSR set to: 0
  3674  00137C  0100               	movlb	0	; () banked
  3675  00137E  4BF2               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  3676  001380  2BF3               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  3677  001382  D000               	goto	l5547
  3678  001384                     l5547:
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;Fan_Support.c: 83: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  3682  001384  C0F2  F0EB         	movff	do_update_pwm@dc_I,??_do_update_pwm
  3683  001388  0E03               	movlw	3
  3684  00138A  0100               	movlb	0	; () banked
  3685  00138C  17EB               	andwf	??_do_update_pwm& (0+255),f,b
  3686  00138E  0100               	movlb	0	; () banked
  3687  001390  39EB               	swapf	??_do_update_pwm& (0+255),w,b
  3688  001392  0BF0               	andlw	240
  3689  001394  090C               	iorlw	12
  3690  001396  6EBD               	movwf	4029,c	;volatile
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;Fan_Support.c: 84: CCPR1L = (dc_I) >> 2;
  3694  001398  C0F2  F0EB         	movff	do_update_pwm@dc_I,??_do_update_pwm
  3695  00139C  C0F3  F0EC         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  3696  0013A0  0100               	movlb	0	; () banked
  3697  0013A2  35EC               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  3698  0013A4  33EC               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  3699  0013A6  33EB               	rrcf	??_do_update_pwm& (0+255),f,b
  3700  0013A8  0100               	movlb	0	; () banked
  3701  0013AA  35EC               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  3702  0013AC  33EC               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  3703  0013AE  33EB               	rrcf	??_do_update_pwm& (0+255),f,b
  3704  0013B0  0100               	movlb	0	; () banked
  3705  0013B2  51EB               	movf	??_do_update_pwm& (0+255),w,b
  3706  0013B4  6EBE               	movwf	4030,c	;volatile
  3707                           
  3708                           ; BSR set to: 0
  3709  0013B6  0012               	return		;funcret
  3710  0013B8                     __end_of_do_update_pwm:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           postinc0	equ	0xFEE
  3719                           wreg	equ	0xFE8
  3720                           postdec1	equ	0xFE5
  3721                           fsr1l	equ	0xFE1
  3722                           postinc2	equ	0xFDE
  3723                           postdec2	equ	0xFDD
  3724                           fsr2h	equ	0xFDA
  3725                           fsr2l	equ	0xFD9
  3726                           status	equ	0xFD8
  3727                           
  3728 ;; *************** function ___lbtoft *****************
  3729 ;; Defined at:
  3730 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;  c               1    wreg     unsigned char 
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  c               1   27[COMRAM] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  3   24[COMRAM] float 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3744 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;Total ram usage:        4 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    4
  3751 ;; This function calls:
  3752 ;;		___ftpack
  3753 ;; This function is called by:
  3754 ;;		_do_update_pwm
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text9
  3759  001C7C                     __ptext9:
  3760                           	opt stack 0
  3761  001C7C                     ___lbtoft:
  3762                           	opt stack 25
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;incstack = 0
  3766                           ;___lbtoft@c stored from wreg
  3767  001C7C  6E1C               	movwf	___lbtoft@c,c
  3768  001C7E  501C               	movf	___lbtoft@c,w,c
  3769  001C80  6E11               	movwf	___ftpack@arg,c
  3770  001C82  6A12               	clrf	___ftpack@arg+1,c
  3771  001C84  6A13               	clrf	___ftpack@arg+2,c
  3772  001C86  0E8E               	movlw	142
  3773  001C88  6E14               	movwf	___ftpack@exp,c
  3774  001C8A  0E00               	movlw	0
  3775  001C8C  6E15               	movwf	___ftpack@sign,c
  3776  001C8E  ECDC  F009         	call	___ftpack	;wreg free
  3777  001C92  C011  F019         	movff	?___ftpack,?___lbtoft
  3778  001C96  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  3779  001C9A  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  3780  001C9E  D000               	goto	l1320
  3781  001CA0                     l1320:
  3782  001CA0  0012               	return		;funcret
  3783  001CA2                     __end_of___lbtoft:
  3784                           	opt stack 0
  3785                           tblptru	equ	0xFF8
  3786                           tblptrh	equ	0xFF7
  3787                           tblptrl	equ	0xFF6
  3788                           tablat	equ	0xFF5
  3789                           prodh	equ	0xFF4
  3790                           prodl	equ	0xFF3
  3791                           postinc0	equ	0xFEE
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1l	equ	0xFE1
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function ___fttol *****************
  3802 ;; Defined at:
  3803 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  f1              3   16[COMRAM] float 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  lval            4   26[COMRAM] unsigned long 
  3808 ;;  exp1            1   30[COMRAM] unsigned char 
  3809 ;;  sign1           1   25[COMRAM] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  4   16[COMRAM] long 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;Total ram usage:       15 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    3
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_do_update_pwm
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text10
  3834  00103E                     __ptext10:
  3835                           	opt stack 0
  3836  00103E                     ___fttol:
  3837                           	opt stack 26
  3838                           
  3839                           ;incstack = 0
  3840  00103E  C013  F015         	movff	___fttol@f1+2,??___fttol
  3841  001042  6A16               	clrf	(??___fttol+1)& (0+255),c
  3842  001044  6A17               	clrf	(??___fttol+2)& (0+255),c
  3843  001046  3412               	rlcf	___fttol@f1+1,w,c
  3844  001048  3615               	rlcf	??___fttol& (0+255),f,c
  3845  00104A  E301               	bnc	u3941
  3846  00104C  8016               	bsf	(??___fttol+1)& (0+255),0,c
  3847  00104E                     u3941:
  3848  00104E  5015               	movf	??___fttol,w,c
  3849  001050  6E1F               	movwf	___fttol@exp1,c
  3850  001052  501F               	movf	___fttol@exp1,w,c
  3851  001054  A4D8               	btfss	status,2,c
  3852  001056  D002               	goto	l5355
  3853  001058  D039               	goto	l5379
  3854  00105A  D063               	goto	l1279
  3855  00105C                     l5355:
  3856  00105C  0E17               	movlw	23
  3857  00105E  6E15               	movwf	??___fttol& (0+255),c
  3858  001060  C011  F016         	movff	___fttol@f1,??___fttol+1
  3859  001064  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  3860  001068  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  3861  00106C  2815               	incf	??___fttol,w,c
  3862  00106E  6E19               	movwf	(??___fttol+4)& (0+255),c
  3863  001070  D004               	goto	u3960
  3864  001072                     u3965:
  3865  001072  90D8               	bcf	status,0,c
  3866  001074  3218               	rrcf	??___fttol+3,f,c
  3867  001076  3217               	rrcf	??___fttol+2,f,c
  3868  001078  3216               	rrcf	??___fttol+1,f,c
  3869  00107A                     u3960:
  3870  00107A  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  3871  00107C  D7FA               	goto	u3965
  3872  00107E  5016               	movf	??___fttol+1,w,c
  3873  001080  6E1A               	movwf	___fttol@sign1,c
  3874  001082  8E12               	bsf	___fttol@f1+1,7,c
  3875  001084  0EFF               	movlw	255
  3876  001086  1611               	andwf	___fttol@f1,f,c
  3877  001088  0EFF               	movlw	255
  3878  00108A  1612               	andwf	___fttol@f1+1,f,c
  3879  00108C  0E00               	movlw	0
  3880  00108E  1613               	andwf	___fttol@f1+2,f,c
  3881  001090  5011               	movf	___fttol@f1,w,c
  3882  001092  6E1B               	movwf	___fttol@lval,c
  3883  001094  5012               	movf	___fttol@f1+1,w,c
  3884  001096  6E1C               	movwf	___fttol@lval+1,c
  3885  001098  5013               	movf	___fttol@f1+2,w,c
  3886  00109A  6E1D               	movwf	___fttol@lval+2,c
  3887  00109C  6A1E               	clrf	___fttol@lval+3,c
  3888  00109E  0E8E               	movlw	142
  3889  0010A0  5E1F               	subwf	___fttol@exp1,f,c
  3890  0010A2  AE1F               	btfss	___fttol@exp1,7,c
  3891  0010A4  D010               	goto	l5377
  3892  0010A6  501F               	movf	___fttol@exp1,w,c
  3893  0010A8  0A80               	xorlw	128
  3894  0010AA  0F8F               	addlw	143
  3895  0010AC  B0D8               	btfsc	status,0,c
  3896  0010AE  D003               	goto	l5373
  3897  0010B0  D00D               	goto	l5379
  3898  0010B2  D037               	goto	l1279
  3899  0010B4  D000               	goto	l5373
  3900  0010B6                     l5373:
  3901  0010B6  90D8               	bcf	status,0,c
  3902  0010B8  321E               	rrcf	___fttol@lval+3,f,c
  3903  0010BA  321D               	rrcf	___fttol@lval+2,f,c
  3904  0010BC  321C               	rrcf	___fttol@lval+1,f,c
  3905  0010BE  321B               	rrcf	___fttol@lval,f,c
  3906  0010C0  3E1F               	incfsz	___fttol@exp1,f,c
  3907  0010C2  D7F9               	goto	l5373
  3908  0010C4  D019               	goto	l5387
  3909  0010C6                     l5377:
  3910  0010C6  0E17               	movlw	23
  3911  0010C8  641F               	cpfsgt	___fttol@exp1,c
  3912  0010CA  D011               	goto	l5385
  3913  0010CC                     l5379:
  3914  0010CC  0E00               	movlw	0
  3915  0010CE  6E11               	movwf	?___fttol,c
  3916  0010D0  0E00               	movlw	0
  3917  0010D2  6E12               	movwf	?___fttol+1,c
  3918  0010D4  0E00               	movlw	0
  3919  0010D6  6E13               	movwf	?___fttol+2,c
  3920  0010D8  0E00               	movlw	0
  3921  0010DA  6E14               	movwf	?___fttol+3,c
  3922  0010DC  D022               	goto	l1279
  3923  0010DE  D007               	goto	l5385
  3924  0010E0                     l5383:
  3925  0010E0  90D8               	bcf	status,0,c
  3926  0010E2  361B               	rlcf	___fttol@lval,f,c
  3927  0010E4  361C               	rlcf	___fttol@lval+1,f,c
  3928  0010E6  361D               	rlcf	___fttol@lval+2,f,c
  3929  0010E8  361E               	rlcf	___fttol@lval+3,f,c
  3930  0010EA  061F               	decf	___fttol@exp1,f,c
  3931  0010EC  D000               	goto	l5385
  3932  0010EE                     l5385:
  3933  0010EE  501F               	movf	___fttol@exp1,w,c
  3934  0010F0  B4D8               	btfsc	status,2,c
  3935  0010F2  D002               	goto	l5387
  3936  0010F4  D7F5               	goto	l5383
  3937  0010F6  D000               	goto	l5387
  3938  0010F8                     l5387:
  3939  0010F8  501A               	movf	___fttol@sign1,w,c
  3940  0010FA  B4D8               	btfsc	status,2,c
  3941  0010FC  D009               	goto	l5391
  3942  0010FE  1E1E               	comf	___fttol@lval+3,f,c
  3943  001100  1E1D               	comf	___fttol@lval+2,f,c
  3944  001102  1E1C               	comf	___fttol@lval+1,f,c
  3945  001104  6C1B               	negf	___fttol@lval,c
  3946  001106  0E00               	movlw	0
  3947  001108  221C               	addwfc	___fttol@lval+1,f,c
  3948  00110A  221D               	addwfc	___fttol@lval+2,f,c
  3949  00110C  221E               	addwfc	___fttol@lval+3,f,c
  3950  00110E  D000               	goto	l5391
  3951  001110                     l5391:
  3952  001110  C01B  F011         	movff	___fttol@lval,?___fttol
  3953  001114  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  3954  001118  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  3955  00111C  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  3956  001120  D000               	goto	l1279
  3957  001122                     l1279:
  3958  001122  0012               	return		;funcret
  3959  001124                     __end_of___fttol:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           prodh	equ	0xFF4
  3966                           prodl	equ	0xFF3
  3967                           postinc0	equ	0xFEE
  3968                           wreg	equ	0xFE8
  3969                           postdec1	equ	0xFE5
  3970                           fsr1l	equ	0xFE1
  3971                           postinc2	equ	0xFDE
  3972                           postdec2	equ	0xFDD
  3973                           fsr2h	equ	0xFDA
  3974                           fsr2l	equ	0xFD9
  3975                           status	equ	0xFD8
  3976                           
  3977 ;; *************** function ___ftmul *****************
  3978 ;; Defined at:
  3979 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  f1              3   28[COMRAM] float 
  3982 ;;  f2              3   31[COMRAM] float 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  3985 ;;  sign            1   42[COMRAM] unsigned char 
  3986 ;;  cntr            1   41[COMRAM] unsigned char 
  3987 ;;  exp             1   37[COMRAM] unsigned char 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  3   28[COMRAM] float 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2, status,0, cstack
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3997 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;Total ram usage:       15 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    4
  4004 ;; This function calls:
  4005 ;;		___ftpack
  4006 ;; This function is called by:
  4007 ;;		_do_update_pwm
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text11
  4012  000E54                     __ptext11:
  4013                           	opt stack 0
  4014  000E54                     ___ftmul:
  4015                           	opt stack 25
  4016                           
  4017                           ;incstack = 0
  4018  000E54  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  4019  000E58  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4020  000E5A  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4021  000E5C  341E               	rlcf	___ftmul@f1+1,w,c
  4022  000E5E  3623               	rlcf	??___ftmul& (0+255),f,c
  4023  000E60  E301               	bnc	u3881
  4024  000E62  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4025  000E64                     u3881:
  4026  000E64  5023               	movf	??___ftmul,w,c
  4027  000E66  6E26               	movwf	___ftmul@exp,c
  4028  000E68  5026               	movf	___ftmul@exp,w,c
  4029  000E6A  A4D8               	btfss	status,2,c
  4030  000E6C  D002               	goto	l5307
  4031  000E6E  D00E               	goto	l5309
  4032  000E70  D06C               	goto	l1258
  4033  000E72                     l5307:
  4034  000E72  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  4035  000E76  6A24               	clrf	(??___ftmul+1)& (0+255),c
  4036  000E78  6A25               	clrf	(??___ftmul+2)& (0+255),c
  4037  000E7A  3421               	rlcf	___ftmul@f2+1,w,c
  4038  000E7C  3623               	rlcf	??___ftmul& (0+255),f,c
  4039  000E7E  E301               	bnc	u3901
  4040  000E80  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  4041  000E82                     u3901:
  4042  000E82  5023               	movf	??___ftmul,w,c
  4043  000E84  6E2B               	movwf	___ftmul@sign,c
  4044  000E86  502B               	movf	___ftmul@sign,w,c
  4045  000E88  A4D8               	btfss	status,2,c
  4046  000E8A  D007               	goto	l5313
  4047  000E8C                     l5309:
  4048  000E8C  0E00               	movlw	0
  4049  000E8E  6E1D               	movwf	?___ftmul,c
  4050  000E90  0E00               	movlw	0
  4051  000E92  6E1E               	movwf	?___ftmul+1,c
  4052  000E94  0E00               	movlw	0
  4053  000E96  6E1F               	movwf	?___ftmul+2,c
  4054  000E98  D058               	goto	l1258
  4055  000E9A                     l5313:
  4056  000E9A  502B               	movf	___ftmul@sign,w,c
  4057  000E9C  0F7B               	addlw	123
  4058  000E9E  2626               	addwf	___ftmul@exp,f,c
  4059  000EA0  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  4060  000EA4  5022               	movf	___ftmul@f2+2,w,c
  4061  000EA6  1A2B               	xorwf	___ftmul@sign,f,c
  4062  000EA8  0E80               	movlw	128
  4063  000EAA  162B               	andwf	___ftmul@sign,f,c
  4064  000EAC  8E1E               	bsf	___ftmul@f1+1,7,c
  4065  000EAE  8E21               	bsf	___ftmul@f2+1,7,c
  4066  000EB0  0EFF               	movlw	255
  4067  000EB2  1620               	andwf	___ftmul@f2,f,c
  4068  000EB4  0EFF               	movlw	255
  4069  000EB6  1621               	andwf	___ftmul@f2+1,f,c
  4070  000EB8  0E00               	movlw	0
  4071  000EBA  1622               	andwf	___ftmul@f2+2,f,c
  4072  000EBC  0E00               	movlw	0
  4073  000EBE  6E27               	movwf	___ftmul@f3_as_product,c
  4074  000EC0  0E00               	movlw	0
  4075  000EC2  6E28               	movwf	___ftmul@f3_as_product+1,c
  4076  000EC4  0E00               	movlw	0
  4077  000EC6  6E29               	movwf	___ftmul@f3_as_product+2,c
  4078  000EC8  0E07               	movlw	7
  4079  000ECA  6E2A               	movwf	___ftmul@cntr,c
  4080  000ECC  D000               	goto	l5327
  4081  000ECE                     l5327:
  4082  000ECE  A01D               	btfss	___ftmul@f1,0,c
  4083  000ED0  D007               	goto	l5331
  4084  000ED2  5020               	movf	___ftmul@f2,w,c
  4085  000ED4  2627               	addwf	___ftmul@f3_as_product,f,c
  4086  000ED6  5021               	movf	___ftmul@f2+1,w,c
  4087  000ED8  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4088  000EDA  5022               	movf	___ftmul@f2+2,w,c
  4089  000EDC  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4090  000EDE  D000               	goto	l5331
  4091  000EE0                     l5331:
  4092  000EE0  90D8               	bcf	status,0,c
  4093  000EE2  321F               	rrcf	___ftmul@f1+2,f,c
  4094  000EE4  321E               	rrcf	___ftmul@f1+1,f,c
  4095  000EE6  321D               	rrcf	___ftmul@f1,f,c
  4096  000EE8  90D8               	bcf	status,0,c
  4097  000EEA  3620               	rlcf	___ftmul@f2,f,c
  4098  000EEC  3621               	rlcf	___ftmul@f2+1,f,c
  4099  000EEE  3622               	rlcf	___ftmul@f2+2,f,c
  4100  000EF0  2E2A               	decfsz	___ftmul@cntr,f,c
  4101  000EF2  D7ED               	goto	l5327
  4102  000EF4  D000               	goto	l5335
  4103  000EF6                     l5335:
  4104  000EF6  0E09               	movlw	9
  4105  000EF8  6E2A               	movwf	___ftmul@cntr,c
  4106  000EFA  D000               	goto	l5337
  4107  000EFC                     l5337:
  4108  000EFC  A01D               	btfss	___ftmul@f1,0,c
  4109  000EFE  D007               	goto	l5341
  4110  000F00  5020               	movf	___ftmul@f2,w,c
  4111  000F02  2627               	addwf	___ftmul@f3_as_product,f,c
  4112  000F04  5021               	movf	___ftmul@f2+1,w,c
  4113  000F06  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  4114  000F08  5022               	movf	___ftmul@f2+2,w,c
  4115  000F0A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  4116  000F0C  D000               	goto	l5341
  4117  000F0E                     l5341:
  4118  000F0E  90D8               	bcf	status,0,c
  4119  000F10  321F               	rrcf	___ftmul@f1+2,f,c
  4120  000F12  321E               	rrcf	___ftmul@f1+1,f,c
  4121  000F14  321D               	rrcf	___ftmul@f1,f,c
  4122  000F16  90D8               	bcf	status,0,c
  4123  000F18  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  4124  000F1A  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  4125  000F1C  3227               	rrcf	___ftmul@f3_as_product,f,c
  4126  000F1E  2E2A               	decfsz	___ftmul@cntr,f,c
  4127  000F20  D7ED               	goto	l5337
  4128  000F22  D000               	goto	l5345
  4129  000F24                     l5345:
  4130  000F24  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  4131  000F28  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4132  000F2C  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4133  000F30  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  4134  000F34  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  4135  000F38  ECDC  F009         	call	___ftpack	;wreg free
  4136  000F3C  C011  F01D         	movff	?___ftpack,?___ftmul
  4137  000F40  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  4138  000F44  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  4139  000F48  D000               	goto	l1258
  4140  000F4A                     l1258:
  4141  000F4A  0012               	return		;funcret
  4142  000F4C                     __end_of___ftmul:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           postdec1	equ	0xFE5
  4153                           fsr1l	equ	0xFE1
  4154                           postinc2	equ	0xFDE
  4155                           postdec2	equ	0xFDD
  4156                           fsr2h	equ	0xFDA
  4157                           fsr2l	equ	0xFD9
  4158                           status	equ	0xFD8
  4159                           
  4160 ;; *************** function ___ftdiv *****************
  4161 ;; Defined at:
  4162 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;  f1              3   43[COMRAM] float 
  4165 ;;  f2              3   46[COMRAM] float 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  f3              3   53[COMRAM] float 
  4168 ;;  sign            1   57[COMRAM] unsigned char 
  4169 ;;  exp             1   56[COMRAM] unsigned char 
  4170 ;;  cntr            1   52[COMRAM] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  3   43[COMRAM] float 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4180 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;Total ram usage:       15 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    4
  4187 ;; This function calls:
  4188 ;;		___ftpack
  4189 ;; This function is called by:
  4190 ;;		_do_update_pwm
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text12
  4195  001124                     __ptext12:
  4196                           	opt stack 0
  4197  001124                     ___ftdiv:
  4198                           	opt stack 25
  4199                           
  4200                           ;incstack = 0
  4201  001124  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  4202  001128  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  4203  00112A  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  4204  00112C  342D               	rlcf	___ftdiv@f1+1,w,c
  4205  00112E  3632               	rlcf	??___ftdiv& (0+255),f,c
  4206  001130  E301               	bnc	u3831
  4207  001132  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  4208  001134                     u3831:
  4209  001134  5032               	movf	??___ftdiv,w,c
  4210  001136  6E39               	movwf	___ftdiv@exp,c
  4211  001138  5039               	movf	___ftdiv@exp,w,c
  4212  00113A  A4D8               	btfss	status,2,c
  4213  00113C  D002               	goto	l5261
  4214  00113E  D00E               	goto	l5263
  4215  001140  D061               	goto	l1243
  4216  001142                     l5261:
  4217  001142  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  4218  001146  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  4219  001148  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  4220  00114A  3430               	rlcf	___ftdiv@f2+1,w,c
  4221  00114C  3632               	rlcf	??___ftdiv& (0+255),f,c
  4222  00114E  E301               	bnc	u3851
  4223  001150  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  4224  001152                     u3851:
  4225  001152  5032               	movf	??___ftdiv,w,c
  4226  001154  6E3A               	movwf	___ftdiv@sign,c
  4227  001156  503A               	movf	___ftdiv@sign,w,c
  4228  001158  A4D8               	btfss	status,2,c
  4229  00115A  D007               	goto	l5267
  4230  00115C                     l5263:
  4231  00115C  0E00               	movlw	0
  4232  00115E  6E2C               	movwf	?___ftdiv,c
  4233  001160  0E00               	movlw	0
  4234  001162  6E2D               	movwf	?___ftdiv+1,c
  4235  001164  0E00               	movlw	0
  4236  001166  6E2E               	movwf	?___ftdiv+2,c
  4237  001168  D04D               	goto	l1243
  4238  00116A                     l5267:
  4239  00116A  0E00               	movlw	0
  4240  00116C  6E36               	movwf	___ftdiv@f3,c
  4241  00116E  0E00               	movlw	0
  4242  001170  6E37               	movwf	___ftdiv@f3+1,c
  4243  001172  0E00               	movlw	0
  4244  001174  6E38               	movwf	___ftdiv@f3+2,c
  4245  001176  503A               	movf	___ftdiv@sign,w,c
  4246  001178  0F89               	addlw	137
  4247  00117A  5E39               	subwf	___ftdiv@exp,f,c
  4248  00117C  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  4249  001180  5031               	movf	___ftdiv@f2+2,w,c
  4250  001182  1A3A               	xorwf	___ftdiv@sign,f,c
  4251  001184  0E80               	movlw	128
  4252  001186  163A               	andwf	___ftdiv@sign,f,c
  4253  001188  8E2D               	bsf	___ftdiv@f1+1,7,c
  4254  00118A  0EFF               	movlw	255
  4255  00118C  162C               	andwf	___ftdiv@f1,f,c
  4256  00118E  0EFF               	movlw	255
  4257  001190  162D               	andwf	___ftdiv@f1+1,f,c
  4258  001192  0E00               	movlw	0
  4259  001194  162E               	andwf	___ftdiv@f1+2,f,c
  4260  001196  8E30               	bsf	___ftdiv@f2+1,7,c
  4261  001198  0EFF               	movlw	255
  4262  00119A  162F               	andwf	___ftdiv@f2,f,c
  4263  00119C  0EFF               	movlw	255
  4264  00119E  1630               	andwf	___ftdiv@f2+1,f,c
  4265  0011A0  0E00               	movlw	0
  4266  0011A2  1631               	andwf	___ftdiv@f2+2,f,c
  4267  0011A4  0E18               	movlw	24
  4268  0011A6  6E35               	movwf	___ftdiv@cntr,c
  4269  0011A8  D000               	goto	l5287
  4270  0011AA                     l5287:
  4271  0011AA  90D8               	bcf	status,0,c
  4272  0011AC  3636               	rlcf	___ftdiv@f3,f,c
  4273  0011AE  3637               	rlcf	___ftdiv@f3+1,f,c
  4274  0011B0  3638               	rlcf	___ftdiv@f3+2,f,c
  4275  0011B2  502F               	movf	___ftdiv@f2,w,c
  4276  0011B4  5C2C               	subwf	___ftdiv@f1,w,c
  4277  0011B6  5030               	movf	___ftdiv@f2+1,w,c
  4278  0011B8  582D               	subwfb	___ftdiv@f1+1,w,c
  4279  0011BA  5031               	movf	___ftdiv@f2+2,w,c
  4280  0011BC  582E               	subwfb	___ftdiv@f1+2,w,c
  4281  0011BE  A0D8               	btfss	status,0,c
  4282  0011C0  D007               	goto	l1246
  4283  0011C2  502F               	movf	___ftdiv@f2,w,c
  4284  0011C4  5E2C               	subwf	___ftdiv@f1,f,c
  4285  0011C6  5030               	movf	___ftdiv@f2+1,w,c
  4286  0011C8  5A2D               	subwfb	___ftdiv@f1+1,f,c
  4287  0011CA  5031               	movf	___ftdiv@f2+2,w,c
  4288  0011CC  5A2E               	subwfb	___ftdiv@f1+2,f,c
  4289  0011CE  8036               	bsf	___ftdiv@f3,0,c
  4290  0011D0                     l1246:
  4291  0011D0  90D8               	bcf	status,0,c
  4292  0011D2  362C               	rlcf	___ftdiv@f1,f,c
  4293  0011D4  362D               	rlcf	___ftdiv@f1+1,f,c
  4294  0011D6  362E               	rlcf	___ftdiv@f1+2,f,c
  4295  0011D8  2E35               	decfsz	___ftdiv@cntr,f,c
  4296  0011DA  D7E7               	goto	l5287
  4297  0011DC  D000               	goto	l5297
  4298  0011DE                     l5297:
  4299  0011DE  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  4300  0011E2  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4301  0011E6  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4302  0011EA  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  4303  0011EE  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  4304  0011F2  ECDC  F009         	call	___ftpack	;wreg free
  4305  0011F6  C011  F02C         	movff	?___ftpack,?___ftdiv
  4306  0011FA  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  4307  0011FE  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  4308  001202  D000               	goto	l1243
  4309  001204                     l1243:
  4310  001204  0012               	return		;funcret
  4311  001206                     __end_of___ftdiv:
  4312                           	opt stack 0
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           postinc0	equ	0xFEE
  4320                           wreg	equ	0xFE8
  4321                           postdec1	equ	0xFE5
  4322                           fsr1l	equ	0xFE1
  4323                           postinc2	equ	0xFDE
  4324                           postdec2	equ	0xFDD
  4325                           fsr2h	equ	0xFDA
  4326                           fsr2l	equ	0xFD9
  4327                           status	equ	0xFD8
  4328                           
  4329 ;; *************** function ___ftpack *****************
  4330 ;; Defined at:
  4331 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  arg             3   16[COMRAM] unsigned um
  4334 ;;  exp             1   19[COMRAM] unsigned char 
  4335 ;;  sign            1   20[COMRAM] unsigned char 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;		None
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  3   16[COMRAM] float 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4347 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;Total ram usage:        8 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    3
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		___ftdiv
  4358 ;;		___ftmul
  4359 ;;		___lbtoft
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text13
  4364  0013B8                     __ptext13:
  4365                           	opt stack 0
  4366  0013B8                     ___ftpack:
  4367                           	opt stack 25
  4368                           
  4369                           ;incstack = 0
  4370  0013B8  5014               	movf	___ftpack@exp,w,c
  4371  0013BA  B4D8               	btfsc	status,2,c
  4372  0013BC  D005               	goto	l5115
  4373  0013BE  5011               	movf	___ftpack@arg,w,c
  4374  0013C0  1012               	iorwf	___ftpack@arg+1,w,c
  4375  0013C2  1013               	iorwf	___ftpack@arg+2,w,c
  4376  0013C4  A4D8               	btfss	status,2,c
  4377  0013C6  D00E               	goto	l5121
  4378  0013C8                     l5115:
  4379  0013C8  0E00               	movlw	0
  4380  0013CA  6E11               	movwf	?___ftpack,c
  4381  0013CC  0E00               	movlw	0
  4382  0013CE  6E12               	movwf	?___ftpack+1,c
  4383  0013D0  0E00               	movlw	0
  4384  0013D2  6E13               	movwf	?___ftpack+2,c
  4385  0013D4  D053               	goto	l1171
  4386  0013D6  D006               	goto	l5121
  4387  0013D8                     l5119:
  4388  0013D8  2A14               	incf	___ftpack@exp,f,c
  4389  0013DA  90D8               	bcf	status,0,c
  4390  0013DC  3213               	rrcf	___ftpack@arg+2,f,c
  4391  0013DE  3212               	rrcf	___ftpack@arg+1,f,c
  4392  0013E0  3211               	rrcf	___ftpack@arg,f,c
  4393  0013E2  D000               	goto	l5121
  4394  0013E4                     l5121:
  4395  0013E4  0E00               	movlw	0
  4396  0013E6  1411               	andwf	___ftpack@arg,w,c
  4397  0013E8  6E16               	movwf	??___ftpack& (0+255),c
  4398  0013EA  0E00               	movlw	0
  4399  0013EC  1412               	andwf	___ftpack@arg+1,w,c
  4400  0013EE  6E17               	movwf	(??___ftpack+1)& (0+255),c
  4401  0013F0  0EFE               	movlw	254
  4402  0013F2  1413               	andwf	___ftpack@arg+2,w,c
  4403  0013F4  6E18               	movwf	(??___ftpack+2)& (0+255),c
  4404  0013F6  5016               	movf	??___ftpack,w,c
  4405  0013F8  1017               	iorwf	??___ftpack+1,w,c
  4406  0013FA  1018               	iorwf	??___ftpack+2,w,c
  4407  0013FC  B4D8               	btfsc	status,2,c
  4408  0013FE  D00E               	goto	l5127
  4409  001400  D7EB               	goto	l5119
  4410  001402  D00C               	goto	l5127
  4411  001404                     l5123:
  4412  001404  2A14               	incf	___ftpack@exp,f,c
  4413  001406  0E01               	movlw	1
  4414  001408  2611               	addwf	___ftpack@arg,f,c
  4415  00140A  0E00               	movlw	0
  4416  00140C  2212               	addwfc	___ftpack@arg+1,f,c
  4417  00140E  0E00               	movlw	0
  4418  001410  2213               	addwfc	___ftpack@arg+2,f,c
  4419  001412  90D8               	bcf	status,0,c
  4420  001414  3213               	rrcf	___ftpack@arg+2,f,c
  4421  001416  3212               	rrcf	___ftpack@arg+1,f,c
  4422  001418  3211               	rrcf	___ftpack@arg,f,c
  4423  00141A  D000               	goto	l5127
  4424  00141C                     l5127:
  4425  00141C  0E00               	movlw	0
  4426  00141E  1411               	andwf	___ftpack@arg,w,c
  4427  001420  6E16               	movwf	??___ftpack& (0+255),c
  4428  001422  0E00               	movlw	0
  4429  001424  1412               	andwf	___ftpack@arg+1,w,c
  4430  001426  6E17               	movwf	(??___ftpack+1)& (0+255),c
  4431  001428  0EFF               	movlw	255
  4432  00142A  1413               	andwf	___ftpack@arg+2,w,c
  4433  00142C  6E18               	movwf	(??___ftpack+2)& (0+255),c
  4434  00142E  5016               	movf	??___ftpack,w,c
  4435  001430  1017               	iorwf	??___ftpack+1,w,c
  4436  001432  1018               	iorwf	??___ftpack+2,w,c
  4437  001434  B4D8               	btfsc	status,2,c
  4438  001436  D008               	goto	l5131
  4439  001438  D7E5               	goto	l5123
  4440  00143A  D006               	goto	l5131
  4441  00143C                     l5129:
  4442  00143C  0614               	decf	___ftpack@exp,f,c
  4443  00143E  90D8               	bcf	status,0,c
  4444  001440  3611               	rlcf	___ftpack@arg,f,c
  4445  001442  3612               	rlcf	___ftpack@arg+1,f,c
  4446  001444  3613               	rlcf	___ftpack@arg+2,f,c
  4447  001446  D000               	goto	l5131
  4448  001448                     l5131:
  4449  001448  BE12               	btfsc	___ftpack@arg+1,7,c
  4450  00144A  D004               	goto	l1182
  4451  00144C  0E02               	movlw	2
  4452  00144E  6014               	cpfslt	___ftpack@exp,c
  4453  001450  D7F5               	goto	l5129
  4454  001452  D000               	goto	l1182
  4455  001454                     l1182:
  4456  001454  B014               	btfsc	___ftpack@exp,0,c
  4457  001456  D002               	goto	l5137
  4458  001458  9E12               	bcf	___ftpack@arg+1,7,c
  4459  00145A  D000               	goto	l5137
  4460  00145C                     l5137:
  4461  00145C  90D8               	bcf	status,0,c
  4462  00145E  3214               	rrcf	___ftpack@exp,f,c
  4463  001460  5014               	movf	___ftpack@exp,w,c
  4464  001462  1213               	iorwf	___ftpack@arg+2,f,c
  4465  001464  5015               	movf	___ftpack@sign,w,c
  4466  001466  B4D8               	btfsc	status,2,c
  4467  001468  D002               	goto	l5143
  4468  00146A  8E13               	bsf	___ftpack@arg+2,7,c
  4469  00146C  D000               	goto	l5143
  4470  00146E                     l5143:
  4471  00146E  C011  F011         	movff	___ftpack@arg,?___ftpack
  4472  001472  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  4473  001476  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  4474  00147A  D000               	goto	l1171
  4475  00147C                     l1171:
  4476  00147C  0012               	return		;funcret
  4477  00147E                     __end_of___ftpack:
  4478                           	opt stack 0
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           postinc0	equ	0xFEE
  4486                           wreg	equ	0xFE8
  4487                           postdec1	equ	0xFE5
  4488                           fsr1l	equ	0xFE1
  4489                           postinc2	equ	0xFDE
  4490                           postdec2	equ	0xFDD
  4491                           fsr2h	equ	0xFDA
  4492                           fsr2l	equ	0xFD9
  4493                           status	equ	0xFD8
  4494                           
  4495 ;; *************** function _Initialize_Screen *****************
  4496 ;; Defined at:
  4497 ;;		line 34 in file "Main_Screen.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;		None               void
  4504 ;; Registers used:
  4505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;Total ram usage:        0 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:   10
  4518 ;; This function calls:
  4519 ;;		_LCD_Reset
  4520 ;;		_TFT_GreenTab_Initialize
  4521 ;;		_drawCircle
  4522 ;;		_drawtext
  4523 ;;		_fillScreen
  4524 ;;		_strcpy
  4525 ;; This function is called by:
  4526 ;;		_main
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text14
  4531  000376                     __ptext14:
  4532                           	opt stack 0
  4533  000376                     _Initialize_Screen:
  4534                           	opt stack 20
  4535                           
  4536                           ;Main_Screen.c: 36: LCD_Reset();
  4537                           
  4538                           ;incstack = 0
  4539  000376  ECC7  F00E         	call	_LCD_Reset	;wreg free
  4540                           
  4541                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4542  00037A  EC15  F00E         	call	_TFT_GreenTab_Initialize	;wreg free
  4543                           
  4544                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4545  00037E  0E00               	movlw	0
  4546  000380  6E25               	movwf	fillScreen@color+1,c
  4547  000382  0E00               	movlw	0
  4548  000384  6E24               	movwf	fillScreen@color,c
  4549  000386  EC81  F00E         	call	_fillScreen	;wreg free
  4550                           
  4551                           ;Main_Screen.c: 39: txt = buffer;
  4552  00038A  0E93               	movlw	low _buffer
  4553  00038C  6E4D               	movwf	_txt,c
  4554  00038E  0E01               	movlw	high _buffer
  4555  000390  6E4E               	movwf	_txt+1,c
  4556                           
  4557                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 22-S1");
  4558  000392  C04D  F011         	movff	_txt,strcpy@to
  4559  000396  C04E  F012         	movff	_txt+1,strcpy@to+1
  4560  00039A  0E58               	movlw	low STR_9
  4561  00039C  6E13               	movwf	strcpy@from,c
  4562  00039E  0EFF               	movlw	high STR_9
  4563  0003A0  6E14               	movwf	strcpy@from+1,c
  4564  0003A2  ECCC  F00D         	call	_strcpy	;wreg free
  4565                           
  4566                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4567  0003A6  0E01               	movlw	1
  4568  0003A8  0100               	movlb	0	; () banked
  4569  0003AA  6FEB               	movwf	drawtext@y& (0+255),b
  4570  0003AC  C04D  F0EC         	movff	_txt,drawtext@_text
  4571  0003B0  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4572  0003B4  0EFF               	movlw	255
  4573  0003B6  0100               	movlb	0	; () banked
  4574  0003B8  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4575  0003BA  69EE               	setf	drawtext@color& (0+255),b
  4576  0003BC  0E00               	movlw	0
  4577  0003BE  0100               	movlb	0	; () banked
  4578  0003C0  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4579  0003C2  0E00               	movlw	0
  4580  0003C4  6FF0               	movwf	drawtext@bg& (0+255),b
  4581  0003C6  0E01               	movlw	1
  4582  0003C8  0100               	movlb	0	; () banked
  4583  0003CA  6FF2               	movwf	drawtext@size& (0+255),b
  4584  0003CC  0E01               	movlw	1
  4585  0003CE  EC16  F006         	call	_drawtext
  4586                           
  4587                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4588  0003D2  C04D  F011         	movff	_txt,strcpy@to
  4589  0003D6  C04E  F012         	movff	_txt+1,strcpy@to+1
  4590  0003DA  0ECF               	movlw	low STR_10
  4591  0003DC  6E13               	movwf	strcpy@from,c
  4592  0003DE  0EFF               	movlw	high STR_10
  4593  0003E0  6E14               	movwf	strcpy@from+1,c
  4594  0003E2  ECCC  F00D         	call	_strcpy	;wreg free
  4595                           
  4596                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4597  0003E6  0E0B               	movlw	11
  4598  0003E8  0100               	movlb	0	; () banked
  4599  0003EA  6FEB               	movwf	drawtext@y& (0+255),b
  4600  0003EC  C04D  F0EC         	movff	_txt,drawtext@_text
  4601  0003F0  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4602  0003F4  0EF8               	movlw	248
  4603  0003F6  0100               	movlb	0	; () banked
  4604  0003F8  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4605  0003FA  0E1F               	movlw	31
  4606  0003FC  6FEE               	movwf	drawtext@color& (0+255),b
  4607  0003FE  0E00               	movlw	0
  4608  000400  0100               	movlb	0	; () banked
  4609  000402  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4610  000404  0E00               	movlw	0
  4611  000406  6FF0               	movwf	drawtext@bg& (0+255),b
  4612  000408  0E01               	movlw	1
  4613  00040A  0100               	movlb	0	; () banked
  4614  00040C  6FF2               	movwf	drawtext@size& (0+255),b
  4615  00040E  0E18               	movlw	24
  4616  000410  EC16  F006         	call	_drawtext
  4617                           
  4618                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  4619  000414  0E00               	movlw	0
  4620  000416  6E1D               	movwf	drawCircle@x0+1,c
  4621  000418  0E28               	movlw	40
  4622  00041A  6E1C               	movwf	drawCircle@x0,c
  4623  00041C  0E00               	movlw	0
  4624  00041E  6E1F               	movwf	drawCircle@y0+1,c
  4625  000420  0E17               	movlw	23
  4626  000422  6E1E               	movwf	drawCircle@y0,c
  4627  000424  0E00               	movlw	0
  4628  000426  6E21               	movwf	drawCircle@r+1,c
  4629  000428  0E02               	movlw	2
  4630  00042A  6E20               	movwf	drawCircle@r,c
  4631  00042C  0EFF               	movlw	255
  4632  00042E  6E23               	movwf	drawCircle@color+1,c
  4633  000430  0EE0               	movlw	224
  4634  000432  6E22               	movwf	drawCircle@color,c
  4635  000434  ECEB  F003         	call	_drawCircle	;wreg free
  4636                           
  4637                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  4638  000438  C04D  F011         	movff	_txt,strcpy@to
  4639  00043C  C04E  F012         	movff	_txt+1,strcpy@to+1
  4640  000440  0EF8               	movlw	low STR_11
  4641  000442  6E13               	movwf	strcpy@from,c
  4642  000444  0EFF               	movlw	high STR_11
  4643  000446  6E14               	movwf	strcpy@from+1,c
  4644  000448  ECCC  F00D         	call	_strcpy	;wreg free
  4645                           
  4646                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  4647  00044C  0E17               	movlw	23
  4648  00044E  0100               	movlb	0	; () banked
  4649  000450  6FEB               	movwf	drawtext@y& (0+255),b
  4650  000452  C04D  F0EC         	movff	_txt,drawtext@_text
  4651  000456  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4652  00045A  0EFF               	movlw	255
  4653  00045C  0100               	movlb	0	; () banked
  4654  00045E  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4655  000460  0EE0               	movlw	224
  4656  000462  6FEE               	movwf	drawtext@color& (0+255),b
  4657  000464  0E00               	movlw	0
  4658  000466  0100               	movlb	0	; () banked
  4659  000468  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4660  00046A  0E00               	movlw	0
  4661  00046C  6FF0               	movwf	drawtext@bg& (0+255),b
  4662  00046E  0E02               	movlw	2
  4663  000470  0100               	movlb	0	; () banked
  4664  000472  6FF2               	movwf	drawtext@size& (0+255),b
  4665  000474  0E2D               	movlw	45
  4666  000476  EC16  F006         	call	_drawtext
  4667                           
  4668                           ;Main_Screen.c: 49: strcpy(txt, "F");
  4669  00047A  C04D  F011         	movff	_txt,strcpy@to
  4670  00047E  C04E  F012         	movff	_txt+1,strcpy@to+1
  4671  000482  0EF2               	movlw	low (STR_19+2)
  4672  000484  6E13               	movwf	strcpy@from,c
  4673  000486  0EFF               	movlw	high (STR_19+2)
  4674  000488  6E14               	movwf	strcpy@from+1,c
  4675  00048A  ECCC  F00D         	call	_strcpy	;wreg free
  4676                           
  4677                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  4678  00048E  0E00               	movlw	0
  4679  000490  6E1D               	movwf	drawCircle@x0+1,c
  4680  000492  0E6E               	movlw	110
  4681  000494  6E1C               	movwf	drawCircle@x0,c
  4682  000496  0E00               	movlw	0
  4683  000498  6E1F               	movwf	drawCircle@y0+1,c
  4684  00049A  0E17               	movlw	23
  4685  00049C  6E1E               	movwf	drawCircle@y0,c
  4686  00049E  0E00               	movlw	0
  4687  0004A0  6E21               	movwf	drawCircle@r+1,c
  4688  0004A2  0E02               	movlw	2
  4689  0004A4  6E20               	movwf	drawCircle@r,c
  4690  0004A6  0EFF               	movlw	255
  4691  0004A8  6E23               	movwf	drawCircle@color+1,c
  4692  0004AA  0EE0               	movlw	224
  4693  0004AC  6E22               	movwf	drawCircle@color,c
  4694  0004AE  ECEB  F003         	call	_drawCircle	;wreg free
  4695                           
  4696                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  4697  0004B2  0E17               	movlw	23
  4698  0004B4  0100               	movlb	0	; () banked
  4699  0004B6  6FEB               	movwf	drawtext@y& (0+255),b
  4700  0004B8  C04D  F0EC         	movff	_txt,drawtext@_text
  4701  0004BC  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4702  0004C0  0EFF               	movlw	255
  4703  0004C2  0100               	movlb	0	; () banked
  4704  0004C4  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4705  0004C6  0EE0               	movlw	224
  4706  0004C8  6FEE               	movwf	drawtext@color& (0+255),b
  4707  0004CA  0E00               	movlw	0
  4708  0004CC  0100               	movlb	0	; () banked
  4709  0004CE  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4710  0004D0  0E00               	movlw	0
  4711  0004D2  6FF0               	movwf	drawtext@bg& (0+255),b
  4712  0004D4  0E02               	movlw	2
  4713  0004D6  0100               	movlb	0	; () banked
  4714  0004D8  6FF2               	movwf	drawtext@size& (0+255),b
  4715  0004DA  0E73               	movlw	115
  4716  0004DC  EC16  F006         	call	_drawtext
  4717                           
  4718                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  4719  0004E0  C04D  F011         	movff	_txt,strcpy@to
  4720  0004E4  C04E  F012         	movff	_txt+1,strcpy@to+1
  4721  0004E8  0EE2               	movlw	low STR_13
  4722  0004EA  6E13               	movwf	strcpy@from,c
  4723  0004EC  0EFF               	movlw	high STR_13
  4724  0004EE  6E14               	movwf	strcpy@from+1,c
  4725  0004F0  ECCC  F00D         	call	_strcpy	;wreg free
  4726                           
  4727                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  4728  0004F4  0E28               	movlw	40
  4729  0004F6  0100               	movlb	0	; () banked
  4730  0004F8  6FEB               	movwf	drawtext@y& (0+255),b
  4731  0004FA  C04D  F0EC         	movff	_txt,drawtext@_text
  4732  0004FE  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4733  000502  0E00               	movlw	0
  4734  000504  0100               	movlb	0	; () banked
  4735  000506  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4736  000508  0E1F               	movlw	31
  4737  00050A  6FEE               	movwf	drawtext@color& (0+255),b
  4738  00050C  0E00               	movlw	0
  4739  00050E  0100               	movlb	0	; () banked
  4740  000510  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4741  000512  0E00               	movlw	0
  4742  000514  6FF0               	movwf	drawtext@bg& (0+255),b
  4743  000516  0E01               	movlw	1
  4744  000518  0100               	movlb	0	; () banked
  4745  00051A  6FF2               	movwf	drawtext@size& (0+255),b
  4746  00051C  0E32               	movlw	50
  4747  00051E  EC16  F006         	call	_drawtext
  4748                           
  4749                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  4750  000522  C04D  F011         	movff	_txt,strcpy@to
  4751  000526  C04E  F012         	movff	_txt+1,strcpy@to+1
  4752  00052A  0EE7               	movlw	low STR_14
  4753  00052C  6E13               	movwf	strcpy@from,c
  4754  00052E  0EFF               	movlw	high STR_14
  4755  000530  6E14               	movwf	strcpy@from+1,c
  4756  000532  ECCC  F00D         	call	_strcpy	;wreg free
  4757                           
  4758                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  4759  000536  0E47               	movlw	71
  4760  000538  0100               	movlb	0	; () banked
  4761  00053A  6FEB               	movwf	drawtext@y& (0+255),b
  4762  00053C  C04D  F0EC         	movff	_txt,drawtext@_text
  4763  000540  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4764  000544  0EF8               	movlw	248
  4765  000546  0100               	movlb	0	; () banked
  4766  000548  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4767  00054A  0E00               	movlw	0
  4768  00054C  6FEE               	movwf	drawtext@color& (0+255),b
  4769  00054E  0E00               	movlw	0
  4770  000550  0100               	movlb	0	; () banked
  4771  000552  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4772  000554  0E00               	movlw	0
  4773  000556  6FF0               	movwf	drawtext@bg& (0+255),b
  4774  000558  0E01               	movlw	1
  4775  00055A  0100               	movlb	0	; () banked
  4776  00055C  6FF2               	movwf	drawtext@size& (0+255),b
  4777  00055E  0E32               	movlw	50
  4778  000560  EC16  F006         	call	_drawtext
  4779                           
  4780                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  4781  000564  C04D  F011         	movff	_txt,strcpy@to
  4782  000568  C04E  F012         	movff	_txt+1,strcpy@to+1
  4783  00056C  0EDC               	movlw	low STR_15
  4784  00056E  6E13               	movwf	strcpy@from,c
  4785  000570  0EFF               	movlw	high STR_15
  4786  000572  6E14               	movwf	strcpy@from+1,c
  4787  000574  ECCC  F00D         	call	_strcpy	;wreg free
  4788                           
  4789                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  4790  000578  0E78               	movlw	120
  4791  00057A  0100               	movlb	0	; () banked
  4792  00057C  6FEB               	movwf	drawtext@y& (0+255),b
  4793  00057E  C04D  F0EC         	movff	_txt,drawtext@_text
  4794  000582  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4795  000586  0E00               	movlw	0
  4796  000588  0100               	movlb	0	; () banked
  4797  00058A  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4798  00058C  0E1F               	movlw	31
  4799  00058E  6FEE               	movwf	drawtext@color& (0+255),b
  4800  000590  0E00               	movlw	0
  4801  000592  0100               	movlb	0	; () banked
  4802  000594  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4803  000596  0E00               	movlw	0
  4804  000598  6FF0               	movwf	drawtext@bg& (0+255),b
  4805  00059A  0E01               	movlw	1
  4806  00059C  0100               	movlb	0	; () banked
  4807  00059E  6FF2               	movwf	drawtext@size& (0+255),b
  4808  0005A0  0E55               	movlw	85
  4809  0005A2  EC16  F006         	call	_drawtext
  4810                           
  4811                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  4812  0005A6  C04D  F011         	movff	_txt,strcpy@to
  4813  0005AA  C04E  F012         	movff	_txt+1,strcpy@to+1
  4814  0005AE  0EFB               	movlw	low STR_16
  4815  0005B0  6E13               	movwf	strcpy@from,c
  4816  0005B2  0EFF               	movlw	high STR_16
  4817  0005B4  6E14               	movwf	strcpy@from+1,c
  4818  0005B6  ECCC  F00D         	call	_strcpy	;wreg free
  4819                           
  4820                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  4821  0005BA  0E8C               	movlw	140
  4822  0005BC  0100               	movlb	0	; () banked
  4823  0005BE  6FEB               	movwf	drawtext@y& (0+255),b
  4824  0005C0  C04D  F0EC         	movff	_txt,drawtext@_text
  4825  0005C4  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4826  0005C8  0EFF               	movlw	255
  4827  0005CA  0100               	movlb	0	; () banked
  4828  0005CC  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4829  0005CE  69EE               	setf	drawtext@color& (0+255),b
  4830  0005D0  0E00               	movlw	0
  4831  0005D2  0100               	movlb	0	; () banked
  4832  0005D4  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4833  0005D6  0E00               	movlw	0
  4834  0005D8  6FF0               	movwf	drawtext@bg& (0+255),b
  4835  0005DA  0E01               	movlw	1
  4836  0005DC  0100               	movlb	0	; () banked
  4837  0005DE  6FF2               	movwf	drawtext@size& (0+255),b
  4838  0005E0  0E0C               	movlw	12
  4839  0005E2  EC16  F006         	call	_drawtext
  4840                           
  4841                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  4842  0005E6  C04D  F011         	movff	_txt,strcpy@to
  4843  0005EA  C04E  F012         	movff	_txt+1,strcpy@to+1
  4844  0005EE  0EF4               	movlw	low STR_17
  4845  0005F0  6E13               	movwf	strcpy@from,c
  4846  0005F2  0EFF               	movlw	high STR_17
  4847  0005F4  6E14               	movwf	strcpy@from+1,c
  4848  0005F6  ECCC  F00D         	call	_strcpy	;wreg free
  4849                           
  4850                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  4851  0005FA  0E8C               	movlw	140
  4852  0005FC  0100               	movlb	0	; () banked
  4853  0005FE  6FEB               	movwf	drawtext@y& (0+255),b
  4854  000600  C04D  F0EC         	movff	_txt,drawtext@_text
  4855  000604  C04E  F0ED         	movff	_txt+1,drawtext@_text+1
  4856  000608  0EFF               	movlw	255
  4857  00060A  0100               	movlb	0	; () banked
  4858  00060C  6FEF               	movwf	(drawtext@color+1)& (0+255),b
  4859  00060E  69EE               	setf	drawtext@color& (0+255),b
  4860  000610  0E00               	movlw	0
  4861  000612  0100               	movlb	0	; () banked
  4862  000614  6FF1               	movwf	(drawtext@bg+1)& (0+255),b
  4863  000616  0E00               	movlw	0
  4864  000618  6FF0               	movwf	drawtext@bg& (0+255),b
  4865  00061A  0E01               	movlw	1
  4866  00061C  0100               	movlb	0	; () banked
  4867  00061E  6FF2               	movwf	drawtext@size& (0+255),b
  4868  000620  0E5F               	movlw	95
  4869  000622  EC16  F006         	call	_drawtext
  4870  000626  0012               	return		;funcret
  4871  000628                     __end_of_Initialize_Screen:
  4872                           	opt stack 0
  4873                           tblptru	equ	0xFF8
  4874                           tblptrh	equ	0xFF7
  4875                           tblptrl	equ	0xFF6
  4876                           tablat	equ	0xFF5
  4877                           prodh	equ	0xFF4
  4878                           prodl	equ	0xFF3
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           postdec1	equ	0xFE5
  4882                           fsr1l	equ	0xFE1
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           fsr2h	equ	0xFDA
  4886                           fsr2l	equ	0xFD9
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _strcpy *****************
  4890 ;; Defined at:
  4891 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  to              2   16[COMRAM] PTR unsigned char 
  4894 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4895 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4896 ;;		 -> STR_19(4), STR_18(4), STR_17(4), STR_16(3), 
  4897 ;;		 -> STR_15(6), STR_14(5), STR_13(5), STR_12(2), 
  4898 ;;		 -> STR_11(3), STR_10(13), STR_9(22), 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4901 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  2   16[COMRAM] PTR unsigned char 
  4904 ;; Registers used:
  4905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/0
  4908 ;;		On exit  : 0/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;Total ram usage:        6 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:    3
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_Initialize_Screen
  4922 ;;		_Update_Screen
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text15
  4927  001B98                     __ptext15:
  4928                           	opt stack 0
  4929  001B98                     _strcpy:
  4930                           	opt stack 26
  4931                           
  4932                           ;incstack = 0
  4933  001B98  C011  F015         	movff	strcpy@to,strcpy@cp
  4934  001B9C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4935  001BA0  D005               	goto	l3709
  4936  001BA2                     l3707:
  4937  001BA2  4A15               	infsnz	strcpy@cp,f,c
  4938  001BA4  2A16               	incf	strcpy@cp+1,f,c
  4939  001BA6  4A13               	infsnz	strcpy@from,f,c
  4940  001BA8  2A14               	incf	strcpy@from+1,f,c
  4941  001BAA  D000               	goto	l3709
  4942  001BAC                     l3709:
  4943  001BAC  C013  FFF6         	movff	strcpy@from,tblptrl
  4944  001BB0  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4945  001BB4                     	if	0	;tblptru may be non-zero
  4946  001BB4                     	endif
  4947  001BB4                     	if	0	;tblptru may be non-zero
  4948  001BB4                     	endif
  4949  001BB4  C015  FFD9         	movff	strcpy@cp,fsr2l
  4950  001BB8  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4951  001BBC  0008               	tblrd		*
  4952  001BBE  CFF5 FFDF          	movff	tablat,indf2
  4953  001BC2  50DF               	movf	indf2,w,c
  4954  001BC4  A4D8               	btfss	status,2,c
  4955  001BC6  D7ED               	goto	l3707
  4956                           
  4957                           ;	Return value of _strcpy is never used
  4958  001BC8  0012               	return		;funcret
  4959  001BCA                     __end_of_strcpy:
  4960                           	opt stack 0
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           postinc0	equ	0xFEE
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _fillScreen *****************
  4979 ;; Defined at:
  4980 ;;		line 620 in file "ST7735_TFT.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  color           2   35[COMRAM] unsigned int 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;		None               void
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4994 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;Total ram usage:        2 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    7
  5001 ;; This function calls:
  5002 ;;		_fillRectangle
  5003 ;; This function is called by:
  5004 ;;		_Initialize_Screen
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text16
  5009  001D02                     __ptext16:
  5010                           	opt stack 0
  5011  001D02                     _fillScreen:
  5012                           	opt stack 22
  5013                           
  5014                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5015                           
  5016                           ;incstack = 0
  5017  001D02  0E00               	movlw	0
  5018  001D04  6E18               	movwf	fillRectangle@y,c
  5019  001D06  0E80               	movlw	128
  5020  001D08  6E19               	movwf	fillRectangle@w,c
  5021  001D0A  0EA0               	movlw	160
  5022  001D0C  6E1A               	movwf	fillRectangle@h,c
  5023  001D0E  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5024  001D12  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5025  001D16  0E00               	movlw	0
  5026  001D18  EC03  F009         	call	_fillRectangle
  5027  001D1C  0012               	return		;funcret
  5028  001D1E                     __end_of_fillScreen:
  5029                           	opt stack 0
  5030                           tblptru	equ	0xFF8
  5031                           tblptrh	equ	0xFF7
  5032                           tblptrl	equ	0xFF6
  5033                           tablat	equ	0xFF5
  5034                           prodh	equ	0xFF4
  5035                           prodl	equ	0xFF3
  5036                           postinc0	equ	0xFEE
  5037                           wreg	equ	0xFE8
  5038                           postdec1	equ	0xFE5
  5039                           fsr1l	equ	0xFE1
  5040                           indf2	equ	0xFDF
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _fillRectangle *****************
  5048 ;; Defined at:
  5049 ;;		line 504 in file "ST7735_TFT.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  x               1    wreg     unsigned char 
  5052 ;;  y               1   23[COMRAM] unsigned char 
  5053 ;;  w               1   24[COMRAM] unsigned char 
  5054 ;;  h               1   25[COMRAM] unsigned char 
  5055 ;;  color           2   26[COMRAM] unsigned int 
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;  x               1   34[COMRAM] unsigned char 
  5058 ;;  lo              1   33[COMRAM] unsigned char 
  5059 ;;  hi              1   32[COMRAM] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5069 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;Total ram usage:       12 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    6
  5076 ;; This function calls:
  5077 ;;		_setAddrWindow
  5078 ;;		_spiwrite
  5079 ;; This function is called by:
  5080 ;;		_fillScreen
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text17
  5085  001206                     __ptext17:
  5086                           	opt stack 0
  5087  001206                     _fillRectangle:
  5088                           	opt stack 22
  5089                           
  5090                           ;incstack = 0
  5091                           ;fillRectangle@x stored from wreg
  5092  001206  6E23               	movwf	fillRectangle@x,c
  5093                           
  5094                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5095                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5096  001208  0E80               	movlw	128
  5097  00120A  6023               	cpfslt	fillRectangle@x,c
  5098  00120C  D069               	goto	l647
  5099  00120E  0E9F               	movlw	159
  5100  001210  6418               	cpfsgt	fillRectangle@y,c
  5101  001212  D001               	goto	l5075
  5102                           
  5103                           ;ST7735_TFT.c: 508: return;
  5104  001214  D065               	goto	l647
  5105  001216                     l5075:
  5106                           
  5107                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5108  001216  0EFF               	movlw	255
  5109  001218  6E1D               	movwf	??_fillRectangle& (0+255),c
  5110  00121A  0EFF               	movlw	255
  5111  00121C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5112  00121E  5019               	movf	fillRectangle@w,w,c
  5113  001220  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5114  001224  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5115  001226  261F               	addwf	??_fillRectangle+2,f,c
  5116  001228  0E00               	movlw	0
  5117  00122A  2220               	addwfc	??_fillRectangle+3,f,c
  5118  00122C  501D               	movf	??_fillRectangle,w,c
  5119  00122E  261F               	addwf	??_fillRectangle+2,f,c
  5120  001230  501E               	movf	??_fillRectangle+1,w,c
  5121  001232  2220               	addwfc	??_fillRectangle+3,f,c
  5122  001234  BE20               	btfsc	??_fillRectangle+3,7,c
  5123  001236  D00A               	goto	l648
  5124  001238  5020               	movf	??_fillRectangle+3,w,c
  5125  00123A  E104               	bnz	u3610
  5126  00123C  0E80               	movlw	128
  5127  00123E  5C1F               	subwf	??_fillRectangle+2,w,c
  5128  001240  A0D8               	btfss	status,0,c
  5129  001242  D004               	goto	l648
  5130  001244                     u3610:
  5131                           
  5132                           ;ST7735_TFT.c: 510: w = 128 - x;
  5133  001244  5023               	movf	fillRectangle@x,w,c
  5134  001246  0800               	sublw	0
  5135  001248  0F80               	addlw	128
  5136  00124A  6E19               	movwf	fillRectangle@w,c
  5137  00124C                     l648:
  5138                           
  5139                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5140  00124C  0EFF               	movlw	255
  5141  00124E  6E1D               	movwf	??_fillRectangle& (0+255),c
  5142  001250  0EFF               	movlw	255
  5143  001252  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5144  001254  501A               	movf	fillRectangle@h,w,c
  5145  001256  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5146  00125A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5147  00125C  261F               	addwf	??_fillRectangle+2,f,c
  5148  00125E  0E00               	movlw	0
  5149  001260  2220               	addwfc	??_fillRectangle+3,f,c
  5150  001262  501D               	movf	??_fillRectangle,w,c
  5151  001264  261F               	addwf	??_fillRectangle+2,f,c
  5152  001266  501E               	movf	??_fillRectangle+1,w,c
  5153  001268  2220               	addwfc	??_fillRectangle+3,f,c
  5154  00126A  BE20               	btfsc	??_fillRectangle+3,7,c
  5155  00126C  D00B               	goto	l5081
  5156  00126E  5020               	movf	??_fillRectangle+3,w,c
  5157  001270  E104               	bnz	u3620
  5158  001272  0EA0               	movlw	160
  5159  001274  5C1F               	subwf	??_fillRectangle+2,w,c
  5160  001276  A0D8               	btfss	status,0,c
  5161  001278  D005               	goto	l5081
  5162  00127A                     u3620:
  5163                           
  5164                           ;ST7735_TFT.c: 512: h = 160 - y;
  5165  00127A  5018               	movf	fillRectangle@y,w,c
  5166  00127C  0800               	sublw	0
  5167  00127E  0FA0               	addlw	160
  5168  001280  6E1A               	movwf	fillRectangle@h,c
  5169  001282  D000               	goto	l5081
  5170  001284                     l5081:
  5171                           
  5172                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5173  001284  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5174  001288  5023               	movf	fillRectangle@x,w,c
  5175  00128A  2419               	addwf	fillRectangle@w,w,c
  5176  00128C  6E1D               	movwf	??_fillRectangle& (0+255),c
  5177  00128E  041D               	decf	??_fillRectangle,w,c
  5178  001290  6E15               	movwf	setAddrWindow@x1,c
  5179  001292  5018               	movf	fillRectangle@y,w,c
  5180  001294  241A               	addwf	fillRectangle@h,w,c
  5181  001296  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5182  001298  041E               	decf	??_fillRectangle+1,w,c
  5183  00129A  6E16               	movwf	setAddrWindow@y1,c
  5184  00129C  5023               	movf	fillRectangle@x,w,c
  5185  00129E  EC94  F00C         	call	_setAddrWindow
  5186                           
  5187                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5188  0012A2  501C               	movf	fillRectangle@color+1,w,c
  5189  0012A4  6E21               	movwf	fillRectangle@hi,c
  5190  0012A6  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5191                           
  5192                           ;ST7735_TFT.c: 515: PORTBbits.RB5 = 1;
  5193  0012AA  8A81               	bsf	3969,5,c	;volatile
  5194                           
  5195                           ;ST7735_TFT.c: 516: PORTBbits.RB6 = 0;
  5196  0012AC  9C81               	bcf	3969,6,c	;volatile
  5197                           
  5198                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5199  0012AE  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5200  0012B2                     l5093:
  5201  0012B2  5018               	movf	fillRectangle@y,w,c
  5202  0012B4  B4D8               	btfsc	status,2,c
  5203  0012B6  D013               	goto	l651
  5204  0012B8  D001               	goto	l650
  5205  0012BA  D011               	goto	l651
  5206  0012BC                     l650:
  5207                           
  5208                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5209  0012BC  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5210  0012C0                     l5097:
  5211  0012C0  5023               	movf	fillRectangle@x,w,c
  5212  0012C2  B4D8               	btfsc	status,2,c
  5213  0012C4  D00A               	goto	l5107
  5214  0012C6  D001               	goto	l5101
  5215  0012C8  D008               	goto	l5107
  5216  0012CA                     l5101:
  5217                           
  5218                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5219  0012CA  5021               	movf	fillRectangle@hi,w,c
  5220  0012CC  ECB3  F00E         	call	_spiwrite
  5221                           
  5222                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5223  0012D0  5022               	movf	fillRectangle@lo,w,c
  5224  0012D2  ECB3  F00E         	call	_spiwrite
  5225  0012D6  0623               	decf	fillRectangle@x,f,c
  5226  0012D8  D7F3               	goto	l5097
  5227  0012DA                     l5107:
  5228  0012DA  0618               	decf	fillRectangle@y,f,c
  5229  0012DC  D7EA               	goto	l5093
  5230  0012DE                     l651:
  5231                           
  5232                           ;ST7735_TFT.c: 522: }
  5233                           ;ST7735_TFT.c: 523: }
  5234                           ;ST7735_TFT.c: 524: PORTBbits.RB6 = 1;
  5235  0012DE  8C81               	bsf	3969,6,c	;volatile
  5236  0012E0                     l647:
  5237  0012E0  0012               	return		;funcret
  5238  0012E2                     __end_of_fillRectangle:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           postinc0	equ	0xFEE
  5247                           wreg	equ	0xFE8
  5248                           postdec1	equ	0xFE5
  5249                           fsr1l	equ	0xFE1
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           postdec2	equ	0xFDD
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257 ;; *************** function _drawtext *****************
  5258 ;; Defined at:
  5259 ;;		line 475 in file "ST7735_TFT.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  x               1    wreg     unsigned char 
  5262 ;;  y               1    0[BANK0 ] unsigned char 
  5263 ;;  _text           2    1[BANK0 ] PTR unsigned char 
  5264 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5265 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5266 ;;		 -> buffer(33), 
  5267 ;;  color           2    3[BANK0 ] unsigned int 
  5268 ;;  bg              2    5[BANK0 ] unsigned int 
  5269 ;;  size            1    7[BANK0 ] unsigned char 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  x               1    8[BANK0 ] unsigned char 
  5272 ;;  i               2   11[BANK0 ] unsigned int 
  5273 ;;  textsize        2    9[BANK0 ] unsigned int 
  5274 ;;  cursor_x        1   14[BANK0 ] unsigned char 
  5275 ;;  cursor_y        1   13[BANK0 ] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5285 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;Total ram usage:       17 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    9
  5292 ;; This function calls:
  5293 ;;		_drawChar
  5294 ;;		_strlen
  5295 ;; This function is called by:
  5296 ;;		_Initialize_Screen
  5297 ;;		_Update_Screen
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           	psect	text18
  5302  000C2C                     __ptext18:
  5303                           	opt stack 0
  5304  000C2C                     _drawtext:
  5305                           	opt stack 20
  5306                           
  5307                           ;incstack = 0
  5308                           ;drawtext@x stored from wreg
  5309  000C2C  0100               	movlb	0	; () banked
  5310  000C2E  6FF3               	movwf	drawtext@x& (0+255),b
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5314                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5315                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5316  000C30  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  5317                           
  5318                           ; BSR set to: 0
  5319  000C34  C0EB  F0F8         	movff	drawtext@y,drawtext@cursor_y
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5323  000C38  C0EC  F011         	movff	drawtext@_text,strlen@s
  5324  000C3C  C0ED  F012         	movff	drawtext@_text+1,strlen@s+1
  5325  000C40  EC6F  F00D         	call	_strlen	;wreg free
  5326  000C44  C011  F0F4         	movff	?_strlen,drawtext@textsize
  5327  000C48  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  5328                           
  5329                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5330  000C4C  0E00               	movlw	0
  5331  000C4E  0100               	movlb	0	; () banked
  5332  000C50  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  5333  000C52  0E00               	movlw	0
  5334  000C54  6FF6               	movwf	drawtext@i& (0+255),b
  5335  000C56  D06B               	goto	l5205
  5336  000C58                     l5179:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5340  000C58  506F               	movf	_wrap,w,c
  5341  000C5A  B4D8               	btfsc	status,2,c
  5342  000C5C  D038               	goto	l5195
  5343                           
  5344                           ; BSR set to: 0
  5345  000C5E  0100               	movlb	0	; () banked
  5346  000C60  51F2               	movf	drawtext@size& (0+255),w,b
  5347  000C62  0D05               	mullw	5
  5348  000C64  0100               	movlb	0	; () banked
  5349  000C66  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5350  000C68  6E39               	movwf	??_drawtext& (0+255),c
  5351  000C6A  6A3A               	clrf	(??_drawtext+1)& (0+255),c
  5352  000C6C  50F3               	movf	prodl,w,c
  5353  000C6E  2639               	addwf	??_drawtext,f,c
  5354  000C70  50F4               	movf	prodh,w,c
  5355  000C72  223A               	addwfc	??_drawtext+1,f,c
  5356  000C74  BE3A               	btfsc	??_drawtext+1,7,c
  5357  000C76  D02B               	goto	l5195
  5358  000C78  503A               	movf	??_drawtext+1,w,c
  5359  000C7A  E104               	bnz	u3760
  5360  000C7C  0E81               	movlw	129
  5361  000C7E  5C39               	subwf	??_drawtext,w,c
  5362  000C80  A0D8               	btfss	status,0,c
  5363  000C82  D025               	goto	l5195
  5364  000C84                     u3760:
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5368  000C84  0E00               	movlw	0
  5369  000C86  0100               	movlb	0	; () banked
  5370  000C88  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5374  000C8A  0100               	movlb	0	; () banked
  5375  000C8C  51F2               	movf	drawtext@size& (0+255),w,b
  5376  000C8E  0D07               	mullw	7
  5377  000C90  50F3               	movf	prodl,w,c
  5378  000C92  0100               	movlb	0	; () banked
  5379  000C94  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  5380  000C96  0F03               	addlw	3
  5381  000C98  0100               	movlb	0	; () banked
  5382  000C9A  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5386  000C9C  0EA0               	movlw	160
  5387  000C9E  0100               	movlb	0	; () banked
  5388  000CA0  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  5389  000CA2  D004               	goto	l5191
  5390                           
  5391                           ; BSR set to: 0
  5392  000CA4  0EA0               	movlw	160
  5393  000CA6  0100               	movlb	0	; () banked
  5394  000CA8  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5395  000CAA  D000               	goto	l5191
  5396  000CAC                     l5191:
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5400  000CAC  0100               	movlb	0	; () banked
  5401  000CAE  51F6               	movf	drawtext@i& (0+255),w,b
  5402  000CB0  0100               	movlb	0	; () banked
  5403  000CB2  25EC               	addwf	drawtext@_text& (0+255),w,b
  5404  000CB4  6ED9               	movwf	fsr2l,c
  5405  000CB6  0100               	movlb	0	; () banked
  5406  000CB8  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5407  000CBA  0100               	movlb	0	; () banked
  5408  000CBC  21ED               	addwfc	(drawtext@_text+1)& (0+255),w,b
  5409  000CBE  6EDA               	movwf	fsr2h,c
  5410  000CC0  0E20               	movlw	32
  5411  000CC2  18DE               	xorwf	postinc2,w,c
  5412  000CC4  B4D8               	btfsc	status,2,c
  5413  000CC6  D02F               	goto	l5203
  5414  000CC8  D002               	goto	l5195
  5415                           
  5416                           ; BSR set to: 0
  5417  000CCA  D02D               	goto	l5203
  5418                           
  5419                           ; BSR set to: 0
  5420  000CCC  D000               	goto	l5195
  5421  000CCE                     l5195:
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5425  000CCE  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  5426  000CD2  0100               	movlb	0	; () banked
  5427  000CD4  51F6               	movf	drawtext@i& (0+255),w,b
  5428  000CD6  0100               	movlb	0	; () banked
  5429  000CD8  25EC               	addwf	drawtext@_text& (0+255),w,b
  5430  000CDA  6ED9               	movwf	fsr2l,c
  5431  000CDC  0100               	movlb	0	; () banked
  5432  000CDE  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5433  000CE0  0100               	movlb	0	; () banked
  5434  000CE2  21ED               	addwfc	(drawtext@_text+1)& (0+255),w,b
  5435  000CE4  6EDA               	movwf	fsr2h,c
  5436  000CE6  50DF               	movf	indf2,w,c
  5437  000CE8  6E2F               	movwf	drawChar@c,c
  5438  000CEA  C0EE  F030         	movff	drawtext@color,drawChar@color
  5439  000CEE  C0EF  F031         	movff	drawtext@color+1,drawChar@color+1
  5440  000CF2  C0F0  F032         	movff	drawtext@bg,drawChar@bg
  5441  000CF6  C0F1  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5442  000CFA  C0F2  F034         	movff	drawtext@size,drawChar@size
  5443  000CFE  0100               	movlb	0	; () banked
  5444  000D00  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5445  000D02  ECC2  F004         	call	_drawChar
  5446                           
  5447                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5448  000D06  0100               	movlb	0	; () banked
  5449  000D08  51F2               	movf	drawtext@size& (0+255),w,b
  5450  000D0A  0D06               	mullw	6
  5451  000D0C  50F3               	movf	prodl,w,c
  5452  000D0E  0100               	movlb	0	; () banked
  5453  000D10  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  5454  000D12  0100               	movlb	0	; () banked
  5455  000D14  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  5459  000D16  0E80               	movlw	128
  5460  000D18  0100               	movlb	0	; () banked
  5461  000D1A  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  5462  000D1C  D004               	goto	l5203
  5463                           
  5464                           ; BSR set to: 0
  5465  000D1E  0E80               	movlw	128
  5466  000D20  0100               	movlb	0	; () banked
  5467  000D22  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5468                           
  5469                           ; BSR set to: 0
  5470  000D24  D000               	goto	l5203
  5471  000D26                     l5203:
  5472                           
  5473                           ; BSR set to: 0
  5474  000D26  0100               	movlb	0	; () banked
  5475  000D28  4BF6               	infsnz	drawtext@i& (0+255),f,b
  5476  000D2A  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  5477  000D2C  D000               	goto	l5205
  5478  000D2E                     l5205:
  5479                           
  5480                           ; BSR set to: 0
  5481  000D2E  0100               	movlb	0	; () banked
  5482  000D30  51F4               	movf	drawtext@textsize& (0+255),w,b
  5483  000D32  0100               	movlb	0	; () banked
  5484  000D34  5DF6               	subwf	drawtext@i& (0+255),w,b
  5485  000D36  0100               	movlb	0	; () banked
  5486  000D38  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  5487  000D3A  0100               	movlb	0	; () banked
  5488  000D3C  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  5489  000D3E  A0D8               	btfss	status,0,c
  5490  000D40  D78B               	goto	l5179
  5491                           
  5492                           ; BSR set to: 0
  5493                           
  5494                           ; BSR set to: 0
  5495  000D42  0012               	return		;funcret
  5496  000D44                     __end_of_drawtext:
  5497                           	opt stack 0
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           postinc0	equ	0xFEE
  5505                           wreg	equ	0xFE8
  5506                           postdec1	equ	0xFE5
  5507                           fsr1l	equ	0xFE1
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _strlen *****************
  5516 ;; Defined at:
  5517 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5520 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5521 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5522 ;;		 -> buffer(33), 
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5525 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5526 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5527 ;;		 -> buffer(33), 
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  2   16[COMRAM] unsigned int 
  5530 ;; Registers used:
  5531 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;Total ram usage:        6 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:    3
  5544 ;; This function calls:
  5545 ;;		Nothing
  5546 ;; This function is called by:
  5547 ;;		_drawtext
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           	psect	text19
  5552  001ADE                     __ptext19:
  5553                           	opt stack 0
  5554  001ADE                     _strlen:
  5555                           	opt stack 25
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;incstack = 0
  5559  001ADE  C011  F015         	movff	strlen@s,strlen@cp
  5560  001AE2  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5561  001AE6  D003               	goto	l5065
  5562  001AE8                     l5063:
  5563  001AE8  4A15               	infsnz	strlen@cp,f,c
  5564  001AEA  2A16               	incf	strlen@cp+1,f,c
  5565  001AEC  D000               	goto	l5065
  5566  001AEE                     l5065:
  5567  001AEE  C015  FFD9         	movff	strlen@cp,fsr2l
  5568  001AF2  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5569  001AF6  50DF               	movf	indf2,w,c
  5570  001AF8  A4D8               	btfss	status,2,c
  5571  001AFA  D7F6               	goto	l5063
  5572  001AFC  C011  F013         	movff	strlen@s,??_strlen
  5573  001B00  C012  F014         	movff	strlen@s+1,??_strlen+1
  5574  001B04  1E13               	comf	??_strlen,f,c
  5575  001B06  1E14               	comf	??_strlen+1,f,c
  5576  001B08  4A13               	infsnz	??_strlen,f,c
  5577  001B0A  2A14               	incf	??_strlen+1,f,c
  5578  001B0C  5015               	movf	strlen@cp,w,c
  5579  001B0E  2413               	addwf	??_strlen,w,c
  5580  001B10  6E11               	movwf	?_strlen,c
  5581  001B12  5016               	movf	strlen@cp+1,w,c
  5582  001B14  2014               	addwfc	??_strlen+1,w,c
  5583  001B16  6E12               	movwf	?_strlen+1,c
  5584  001B18  D000               	goto	l1425
  5585  001B1A                     l1425:
  5586  001B1A  0012               	return		;funcret
  5587  001B1C                     __end_of_strlen:
  5588                           	opt stack 0
  5589                           tblptru	equ	0xFF8
  5590                           tblptrh	equ	0xFF7
  5591                           tblptrl	equ	0xFF6
  5592                           tablat	equ	0xFF5
  5593                           prodh	equ	0xFF4
  5594                           prodl	equ	0xFF3
  5595                           postinc0	equ	0xFEE
  5596                           wreg	equ	0xFE8
  5597                           postdec1	equ	0xFE5
  5598                           fsr1l	equ	0xFE1
  5599                           indf2	equ	0xFDF
  5600                           postinc2	equ	0xFDE
  5601                           postdec2	equ	0xFDD
  5602                           fsr2h	equ	0xFDA
  5603                           fsr2l	equ	0xFD9
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function _drawChar *****************
  5607 ;; Defined at:
  5608 ;;		line 448 in file "ST7735_TFT.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  x               1    wreg     unsigned char 
  5611 ;;  y               1   45[COMRAM] unsigned char 
  5612 ;;  c               1   46[COMRAM] unsigned char 
  5613 ;;  color           2   47[COMRAM] unsigned int 
  5614 ;;  bg              2   49[COMRAM] unsigned int 
  5615 ;;  size            1   51[COMRAM] unsigned char 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;  x               1   53[COMRAM] unsigned char 
  5618 ;;  line            1   52[COMRAM] unsigned char 
  5619 ;;  i               1   55[COMRAM] unsigned char 
  5620 ;;  j               1   54[COMRAM] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;		None               void
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5630 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;Total ram usage:       11 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    8
  5637 ;; This function calls:
  5638 ;;		___wmul
  5639 ;;		_drawPixel
  5640 ;;		_fillRect
  5641 ;; This function is called by:
  5642 ;;		_drawtext
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text20
  5647  000984                     __ptext20:
  5648                           	opt stack 0
  5649  000984                     _drawChar:
  5650                           	opt stack 20
  5651                           
  5652                           ;incstack = 0
  5653                           ;drawChar@x stored from wreg
  5654  000984  6E36               	movwf	drawChar@x,c
  5655                           
  5656                           ;ST7735_TFT.c: 450: char i, j;
  5657                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  5658  000986  0E80               	movlw	128
  5659  000988  6036               	cpfslt	drawChar@x,c
  5660  00098A  D0A6               	goto	l610
  5661  00098C  0E9F               	movlw	159
  5662  00098E  642E               	cpfsgt	drawChar@y,c
  5663  000990  D001               	goto	l5011
  5664                           
  5665                           ;ST7735_TFT.c: 452: return;
  5666  000992  D0A2               	goto	l610
  5667  000994                     l5011:
  5668                           
  5669                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  5670  000994  5034               	movf	drawChar@size,w,c
  5671  000996  A4D8               	btfss	status,2,c
  5672  000998  D003               	goto	l5015
  5673  00099A  0E01               	movlw	1
  5674  00099C  6E34               	movwf	drawChar@size,c
  5675  00099E  D000               	goto	l5015
  5676  0009A0                     l5015:
  5677                           
  5678                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  5679  0009A0  0E1F               	movlw	31
  5680  0009A2  642F               	cpfsgt	drawChar@c,c
  5681  0009A4  D004               	goto	l5019
  5682  0009A6  0E7E               	movlw	126
  5683  0009A8  642F               	cpfsgt	drawChar@c,c
  5684  0009AA  D003               	goto	l612
  5685  0009AC  D000               	goto	l5019
  5686  0009AE                     l5019:
  5687                           
  5688                           ;ST7735_TFT.c: 455: c = '?';
  5689  0009AE  0E3F               	movlw	63
  5690  0009B0  6E2F               	movwf	drawChar@c,c
  5691  0009B2                     l612:
  5692                           
  5693                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  5694  0009B2  0E00               	movlw	0
  5695  0009B4  6E38               	movwf	drawChar@i,c
  5696  0009B6                     l5021:
  5697  0009B6  0E04               	movlw	4
  5698  0009B8  6438               	cpfsgt	drawChar@i,c
  5699  0009BA  D001               	goto	l5025
  5700  0009BC  D08D               	goto	l610
  5701  0009BE                     l5025:
  5702                           
  5703                           ;ST7735_TFT.c: 457: unsigned char line;
  5704                           ;ST7735_TFT.c: 458: if(c < 'S')
  5705  0009BE  0E53               	movlw	83
  5706  0009C0  602F               	cpfslt	drawChar@c,c
  5707  0009C2  D015               	goto	l5029
  5708                           
  5709                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  5710  0009C4  0EE0               	movlw	224
  5711  0009C6  242F               	addwf	drawChar@c,w,c
  5712  0009C8  6E11               	movwf	___wmul@multiplier,c
  5713  0009CA  6A12               	clrf	___wmul@multiplier+1,c
  5714  0009CC  0EFF               	movlw	255
  5715  0009CE  2212               	addwfc	___wmul@multiplier+1,f,c
  5716  0009D0  0E00               	movlw	0
  5717  0009D2  6E14               	movwf	___wmul@multiplicand+1,c
  5718  0009D4  0E05               	movlw	5
  5719  0009D6  6E13               	movwf	___wmul@multiplicand,c
  5720  0009D8  EC2A  F00E         	call	___wmul	;wreg free
  5721  0009DC  5038               	movf	drawChar@i,w,c
  5722  0009DE  2611               	addwf	?___wmul,f,c
  5723  0009E0  0E00               	movlw	0
  5724  0009E2  2212               	addwfc	?___wmul+1,f,c
  5725  0009E4  0E4D               	movlw	low _font
  5726  0009E6  2411               	addwf	?___wmul,w,c
  5727  0009E8  6EF6               	movwf	tblptrl,c
  5728  0009EA  0EFD               	movlw	high _font
  5729  0009EC  D014               	goto	L1
  5730  0009EE                     l5029:
  5731                           
  5732                           ;ST7735_TFT.c: 460: else
  5733                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  5734  0009EE  0EAD               	movlw	173
  5735  0009F0  242F               	addwf	drawChar@c,w,c
  5736  0009F2  6E11               	movwf	___wmul@multiplier,c
  5737  0009F4  6A12               	clrf	___wmul@multiplier+1,c
  5738  0009F6  0EFF               	movlw	255
  5739  0009F8  2212               	addwfc	___wmul@multiplier+1,f,c
  5740  0009FA  0E00               	movlw	0
  5741  0009FC  6E14               	movwf	___wmul@multiplicand+1,c
  5742  0009FE  0E05               	movlw	5
  5743  000A00  6E13               	movwf	___wmul@multiplicand,c
  5744  000A02  EC2A  F00E         	call	___wmul	;wreg free
  5745  000A06  5038               	movf	drawChar@i,w,c
  5746  000A08  2611               	addwf	?___wmul,f,c
  5747  000A0A  0E00               	movlw	0
  5748  000A0C  2212               	addwfc	?___wmul+1,f,c
  5749  000A0E  0E4C               	movlw	low _font2
  5750  000A10  2411               	addwf	?___wmul,w,c
  5751  000A12  6EF6               	movwf	tblptrl,c
  5752  000A14  0EFE               	movlw	high _font2
  5753  000A16                     L1:
  5754  000A16  2012               	addwfc	?___wmul+1,w,c
  5755  000A18  6EF7               	movwf	tblptrh,c
  5756  000A1A                     	if	0	;There are less than 3 active tblptr bytes
  5757  000A1A                     	endif
  5758  000A1A  0008               	tblrd		*
  5759  000A1C  CFF5 F035          	movff	tablat,drawChar@line
  5760  000A20  D000               	goto	l5031
  5761  000A22                     l5031:
  5762                           
  5763                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  5764  000A22  0E00               	movlw	0
  5765  000A24  6E37               	movwf	drawChar@j,c
  5766  000A26                     l5033:
  5767  000A26  0E06               	movlw	6
  5768  000A28  6437               	cpfsgt	drawChar@j,c
  5769  000A2A  D001               	goto	l619
  5770  000A2C  D053               	goto	l5057
  5771  000A2E                     l619:
  5772                           
  5773                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  5774  000A2E  A035               	btfss	drawChar@line,0,c
  5775  000A30  D023               	goto	l5043
  5776                           
  5777                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  5778  000A32  0434               	decf	drawChar@size,w,c
  5779  000A34  A4D8               	btfss	status,2,c
  5780  000A36  D00C               	goto	l5041
  5781  000A38  502E               	movf	drawChar@y,w,c
  5782  000A3A  2437               	addwf	drawChar@j,w,c
  5783  000A3C  6E18               	movwf	drawPixel@y,c
  5784  000A3E  C030  F019         	movff	drawChar@color,drawPixel@color
  5785  000A42  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5786  000A46  5036               	movf	drawChar@x,w,c
  5787  000A48  2438               	addwf	drawChar@i,w,c
  5788  000A4A  ECE5  F00D         	call	_drawPixel
  5789  000A4E  D03E               	goto	l5051
  5790  000A50                     l5041:
  5791                           
  5792                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5793  000A50  5037               	movf	drawChar@j,w,c
  5794  000A52  0234               	mulwf	drawChar@size,c
  5795  000A54  50F3               	movf	prodl,w,c
  5796  000A56  242E               	addwf	drawChar@y,w,c
  5797  000A58  6E23               	movwf	fillRect@y,c
  5798  000A5A  C034  F024         	movff	drawChar@size,fillRect@w
  5799  000A5E  C034  F025         	movff	drawChar@size,fillRect@h
  5800  000A62  C030  F026         	movff	drawChar@color,fillRect@color
  5801  000A66  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5802  000A6A  5038               	movf	drawChar@i,w,c
  5803  000A6C  0234               	mulwf	drawChar@size,c
  5804  000A6E  50F3               	movf	prodl,w,c
  5805  000A70  2436               	addwf	drawChar@x,w,c
  5806  000A72  EC07  F00D         	call	_fillRect
  5807                           
  5808                           ;ST7735_TFT.c: 466: }
  5809  000A76  D02A               	goto	l5051
  5810  000A78                     l5043:
  5811                           
  5812                           ;ST7735_TFT.c: 467: else if(bg != color) {
  5813  000A78  5030               	movf	drawChar@color,w,c
  5814  000A7A  1832               	xorwf	drawChar@bg,w,c
  5815  000A7C  E104               	bnz	u3540
  5816  000A7E  5031               	movf	drawChar@color+1,w,c
  5817  000A80  1833               	xorwf	drawChar@bg+1,w,c
  5818  000A82  B4D8               	btfsc	status,2,c
  5819  000A84  D023               	goto	l5051
  5820  000A86                     u3540:
  5821                           
  5822                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  5823  000A86  0434               	decf	drawChar@size,w,c
  5824  000A88  A4D8               	btfss	status,2,c
  5825  000A8A  D00C               	goto	l5049
  5826  000A8C  502E               	movf	drawChar@y,w,c
  5827  000A8E  2437               	addwf	drawChar@j,w,c
  5828  000A90  6E18               	movwf	drawPixel@y,c
  5829  000A92  C032  F019         	movff	drawChar@bg,drawPixel@color
  5830  000A96  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5831  000A9A  5036               	movf	drawChar@x,w,c
  5832  000A9C  2438               	addwf	drawChar@i,w,c
  5833  000A9E  ECE5  F00D         	call	_drawPixel
  5834  000AA2  D014               	goto	l5051
  5835  000AA4                     l5049:
  5836                           
  5837                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  5838  000AA4  5037               	movf	drawChar@j,w,c
  5839  000AA6  0234               	mulwf	drawChar@size,c
  5840  000AA8  50F3               	movf	prodl,w,c
  5841  000AAA  242E               	addwf	drawChar@y,w,c
  5842  000AAC  6E23               	movwf	fillRect@y,c
  5843  000AAE  C034  F024         	movff	drawChar@size,fillRect@w
  5844  000AB2  C034  F025         	movff	drawChar@size,fillRect@h
  5845  000AB6  C032  F026         	movff	drawChar@bg,fillRect@color
  5846  000ABA  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5847  000ABE  5038               	movf	drawChar@i,w,c
  5848  000AC0  0234               	mulwf	drawChar@size,c
  5849  000AC2  50F3               	movf	prodl,w,c
  5850  000AC4  2436               	addwf	drawChar@x,w,c
  5851  000AC6  EC07  F00D         	call	_fillRect
  5852  000ACA  D000               	goto	l5051
  5853  000ACC                     l5051:
  5854  000ACC  2A37               	incf	drawChar@j,f,c
  5855  000ACE  90D8               	bcf	status,0,c
  5856  000AD0  3235               	rrcf	drawChar@line,f,c
  5857  000AD2  D7A9               	goto	l5033
  5858  000AD4                     l5057:
  5859  000AD4  2A38               	incf	drawChar@i,f,c
  5860  000AD6  D76F               	goto	l5021
  5861  000AD8                     l610:
  5862  000AD8  0012               	return		;funcret
  5863  000ADA                     __end_of_drawChar:
  5864                           	opt stack 0
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           postinc0	equ	0xFEE
  5872                           wreg	equ	0xFE8
  5873                           postdec1	equ	0xFE5
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _fillRect *****************
  5883 ;; Defined at:
  5884 ;;		line 438 in file "ST7735_TFT.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  x               1    wreg     unsigned char 
  5887 ;;  y               1   34[COMRAM] unsigned char 
  5888 ;;  w               1   35[COMRAM] unsigned char 
  5889 ;;  h               1   36[COMRAM] unsigned char 
  5890 ;;  color           2   37[COMRAM] unsigned int 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  x               1   42[COMRAM] unsigned char 
  5893 ;;  i               2   43[COMRAM] int 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;		None               void
  5896 ;; Registers used:
  5897 ;;		wreg, status,2, status,0, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5903 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;Total ram usage:       11 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    7
  5910 ;; This function calls:
  5911 ;;		_drawFastVLine
  5912 ;; This function is called by:
  5913 ;;		_drawChar
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text21
  5918  001A0E                     __ptext21:
  5919                           	opt stack 0
  5920  001A0E                     _fillRect:
  5921                           	opt stack 20
  5922                           
  5923                           ;incstack = 0
  5924                           ;fillRect@x stored from wreg
  5925  001A0E  6E2B               	movwf	fillRect@x,c
  5926                           
  5927                           ;ST7735_TFT.c: 440: signed int i;
  5928                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  5929  001A10  C02B  F02C         	movff	fillRect@x,fillRect@i
  5930  001A14  6A2D               	clrf	fillRect@i+1,c
  5931  001A16  D00E               	goto	l4913
  5932  001A18                     l4909:
  5933                           
  5934                           ;ST7735_TFT.c: 443: {
  5935                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  5936  001A18  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5937  001A1C  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5938  001A20  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5939  001A24  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5940  001A28  502C               	movf	fillRect@i,w,c
  5941  001A2A  ECE4  F00A         	call	_drawFastVLine
  5942  001A2E  4A2C               	infsnz	fillRect@i,f,c
  5943  001A30  2A2D               	incf	fillRect@i+1,f,c
  5944  001A32  D000               	goto	l4913
  5945  001A34                     l4913:
  5946  001A34  5024               	movf	fillRect@w,w,c
  5947  001A36  C02B  F028         	movff	fillRect@x,??_fillRect
  5948  001A3A  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5949  001A3C  2628               	addwf	??_fillRect,f,c
  5950  001A3E  0E00               	movlw	0
  5951  001A40  2229               	addwfc	??_fillRect+1,f,c
  5952  001A42  5028               	movf	??_fillRect,w,c
  5953  001A44  5C2C               	subwf	fillRect@i,w,c
  5954  001A46  502D               	movf	fillRect@i+1,w,c
  5955  001A48  0A80               	xorlw	128
  5956  001A4A  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5957  001A4C  5029               	movf	??_fillRect+1,w,c
  5958  001A4E  0A80               	xorlw	128
  5959  001A50  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5960  001A52  A0D8               	btfss	status,0,c
  5961  001A54  D7E1               	goto	l4909
  5962  001A56  0012               	return		;funcret
  5963  001A58                     __end_of_fillRect:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           postinc0	equ	0xFEE
  5972                           wreg	equ	0xFE8
  5973                           postdec1	equ	0xFE5
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           postinc2	equ	0xFDE
  5977                           postdec2	equ	0xFDD
  5978                           fsr2h	equ	0xFDA
  5979                           fsr2l	equ	0xFD9
  5980                           status	equ	0xFD8
  5981                           
  5982 ;; *************** function _drawFastVLine *****************
  5983 ;; Defined at:
  5984 ;;		line 417 in file "ST7735_TFT.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  x               1    wreg     unsigned char 
  5987 ;;  y               1   23[COMRAM] unsigned char 
  5988 ;;  h               1   24[COMRAM] unsigned char 
  5989 ;;  color           2   25[COMRAM] unsigned int 
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  x               1   33[COMRAM] unsigned char 
  5992 ;;  lo              1   32[COMRAM] unsigned char 
  5993 ;;  hi              1   31[COMRAM] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;		None               void
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;Total ram usage:       11 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    6
  6010 ;; This function calls:
  6011 ;;		_setAddrWindow
  6012 ;;		_spiwrite
  6013 ;; This function is called by:
  6014 ;;		_fillRect
  6015 ;;		_fillCircleHelper
  6016 ;;		_fillCircle
  6017 ;;		_drawRect
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text22
  6022  0015C8                     __ptext22:
  6023                           	opt stack 0
  6024  0015C8                     _drawFastVLine:
  6025                           	opt stack 20
  6026                           
  6027                           ;incstack = 0
  6028                           ;drawFastVLine@x stored from wreg
  6029  0015C8  6E22               	movwf	drawFastVLine@x,c
  6030                           
  6031                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6032                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6033  0015CA  0E80               	movlw	128
  6034  0015CC  6022               	cpfslt	drawFastVLine@x,c
  6035  0015CE  D03F               	goto	l594
  6036  0015D0  0E9F               	movlw	159
  6037  0015D2  6418               	cpfsgt	drawFastVLine@y,c
  6038  0015D4  D001               	goto	l4859
  6039                           
  6040                           ;ST7735_TFT.c: 421: return;
  6041  0015D6  D03B               	goto	l594
  6042  0015D8                     l4859:
  6043                           
  6044                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6045  0015D8  0EFF               	movlw	255
  6046  0015DA  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6047  0015DC  0EFF               	movlw	255
  6048  0015DE  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6049  0015E0  5019               	movf	drawFastVLine@h,w,c
  6050  0015E2  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6051  0015E6  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6052  0015E8  261E               	addwf	??_drawFastVLine+2,f,c
  6053  0015EA  0E00               	movlw	0
  6054  0015EC  221F               	addwfc	??_drawFastVLine+3,f,c
  6055  0015EE  501C               	movf	??_drawFastVLine,w,c
  6056  0015F0  261E               	addwf	??_drawFastVLine+2,f,c
  6057  0015F2  501D               	movf	??_drawFastVLine+1,w,c
  6058  0015F4  221F               	addwfc	??_drawFastVLine+3,f,c
  6059  0015F6  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6060  0015F8  D00B               	goto	l4863
  6061  0015FA  501F               	movf	??_drawFastVLine+3,w,c
  6062  0015FC  E104               	bnz	u3380
  6063  0015FE  0EA0               	movlw	160
  6064  001600  5C1E               	subwf	??_drawFastVLine+2,w,c
  6065  001602  A0D8               	btfss	status,0,c
  6066  001604  D005               	goto	l4863
  6067  001606                     u3380:
  6068                           
  6069                           ;ST7735_TFT.c: 423: h = 160 - y;
  6070  001606  5018               	movf	drawFastVLine@y,w,c
  6071  001608  0800               	sublw	0
  6072  00160A  0FA0               	addlw	160
  6073  00160C  6E19               	movwf	drawFastVLine@h,c
  6074  00160E  D000               	goto	l4863
  6075  001610                     l4863:
  6076                           
  6077                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6078  001610  501B               	movf	drawFastVLine@color+1,w,c
  6079  001612  6E20               	movwf	drawFastVLine@hi,c
  6080  001614  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6081                           
  6082                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6083  001618  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6084  00161C  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6085  001620  5018               	movf	drawFastVLine@y,w,c
  6086  001622  2419               	addwf	drawFastVLine@h,w,c
  6087  001624  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6088  001626  041C               	decf	??_drawFastVLine,w,c
  6089  001628  6E16               	movwf	setAddrWindow@y1,c
  6090  00162A  5022               	movf	drawFastVLine@x,w,c
  6091  00162C  EC94  F00C         	call	_setAddrWindow
  6092                           
  6093                           ;ST7735_TFT.c: 426: PORTBbits.RB5 = 1;
  6094  001630  8A81               	bsf	3969,5,c	;volatile
  6095                           
  6096                           ;ST7735_TFT.c: 427: PORTBbits.RB6 = 0;
  6097  001632  9C81               	bcf	3969,6,c	;volatile
  6098                           
  6099                           ;ST7735_TFT.c: 429: while (h--) {
  6100  001634  D007               	goto	l4875
  6101  001636                     l4873:
  6102                           
  6103                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6104  001636  5020               	movf	drawFastVLine@hi,w,c
  6105  001638  ECB3  F00E         	call	_spiwrite
  6106                           
  6107                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6108  00163C  5021               	movf	drawFastVLine@lo,w,c
  6109  00163E  ECB3  F00E         	call	_spiwrite
  6110  001642  D000               	goto	l4875
  6111  001644                     l4875:
  6112  001644  0619               	decf	drawFastVLine@h,f,c
  6113  001646  2819               	incf	drawFastVLine@h,w,c
  6114  001648  A4D8               	btfss	status,2,c
  6115  00164A  D7F5               	goto	l4873
  6116                           
  6117                           ;ST7735_TFT.c: 432: }
  6118                           ;ST7735_TFT.c: 433: PORTBbits.RB6 = 1;
  6119  00164C  8C81               	bsf	3969,6,c	;volatile
  6120  00164E                     l594:
  6121  00164E  0012               	return		;funcret
  6122  001650                     __end_of_drawFastVLine:
  6123                           	opt stack 0
  6124                           tblptru	equ	0xFF8
  6125                           tblptrh	equ	0xFF7
  6126                           tblptrl	equ	0xFF6
  6127                           tablat	equ	0xFF5
  6128                           prodh	equ	0xFF4
  6129                           prodl	equ	0xFF3
  6130                           postinc0	equ	0xFEE
  6131                           wreg	equ	0xFE8
  6132                           postdec1	equ	0xFE5
  6133                           fsr1l	equ	0xFE1
  6134                           indf2	equ	0xFDF
  6135                           postinc2	equ	0xFDE
  6136                           postdec2	equ	0xFDD
  6137                           fsr2h	equ	0xFDA
  6138                           fsr2l	equ	0xFD9
  6139                           status	equ	0xFD8
  6140                           
  6141 ;; *************** function _drawCircle *****************
  6142 ;; Defined at:
  6143 ;;		line 529 in file "ST7735_TFT.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  x0              2   27[COMRAM] int 
  6146 ;;  y0              2   29[COMRAM] int 
  6147 ;;  r               2   31[COMRAM] int 
  6148 ;;  color           2   33[COMRAM] unsigned int 
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;  y               2   45[COMRAM] int 
  6151 ;;  x               2   43[COMRAM] int 
  6152 ;;  f               2   41[COMRAM] int 
  6153 ;;  ddF_y           2   39[COMRAM] int 
  6154 ;;  ddF_x           2   37[COMRAM] int 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;		None               void
  6157 ;; Registers used:
  6158 ;;		wreg, status,2, status,0, cstack
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6164 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;Total ram usage:       20 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    7
  6171 ;; This function calls:
  6172 ;;		_drawPixel
  6173 ;; This function is called by:
  6174 ;;		_Initialize_Screen
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text23
  6179  0007D6                     __ptext23:
  6180                           	opt stack 0
  6181  0007D6                     _drawCircle:
  6182                           	opt stack 22
  6183                           
  6184                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6185                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6186                           
  6187                           ;incstack = 0
  6188  0007D6  C020  F024         	movff	drawCircle@r,??_drawCircle
  6189  0007DA  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6190  0007DE  1E24               	comf	??_drawCircle,f,c
  6191  0007E0  1E25               	comf	??_drawCircle+1,f,c
  6192  0007E2  4A24               	infsnz	??_drawCircle,f,c
  6193  0007E4  2A25               	incf	??_drawCircle+1,f,c
  6194  0007E6  0E01               	movlw	1
  6195  0007E8  2424               	addwf	??_drawCircle,w,c
  6196  0007EA  6E2A               	movwf	drawCircle@f,c
  6197  0007EC  0E00               	movlw	0
  6198  0007EE  2025               	addwfc	??_drawCircle+1,w,c
  6199  0007F0  6E2B               	movwf	drawCircle@f+1,c
  6200  0007F2  0E00               	movlw	0
  6201  0007F4  6E27               	movwf	drawCircle@ddF_x+1,c
  6202  0007F6  0E01               	movlw	1
  6203  0007F8  6E26               	movwf	drawCircle@ddF_x,c
  6204  0007FA  C020  F024         	movff	drawCircle@r,??_drawCircle
  6205  0007FE  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6206  000802  90D8               	bcf	status,0,c
  6207  000804  3624               	rlcf	??_drawCircle,f,c
  6208  000806  3625               	rlcf	??_drawCircle+1,f,c
  6209  000808  1E24               	comf	??_drawCircle,f,c
  6210  00080A  1E25               	comf	??_drawCircle+1,f,c
  6211  00080C  4A24               	infsnz	??_drawCircle,f,c
  6212  00080E  2A25               	incf	??_drawCircle+1,f,c
  6213  000810  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6214  000814  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6215  000818  0E00               	movlw	0
  6216  00081A  6E2D               	movwf	drawCircle@x+1,c
  6217  00081C  0E00               	movlw	0
  6218  00081E  6E2C               	movwf	drawCircle@x,c
  6219  000820  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6220  000824  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6221                           
  6222                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6223  000828  501E               	movf	drawCircle@y0,w,c
  6224  00082A  2420               	addwf	drawCircle@r,w,c
  6225  00082C  6E18               	movwf	drawPixel@y,c
  6226  00082E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6227  000832  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6228  000836  501C               	movf	drawCircle@x0,w,c
  6229  000838  ECE5  F00D         	call	_drawPixel
  6230                           
  6231                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6232  00083C  5020               	movf	drawCircle@r,w,c
  6233  00083E  0800               	sublw	0
  6234  000840  241E               	addwf	drawCircle@y0,w,c
  6235  000842  6E18               	movwf	drawPixel@y,c
  6236  000844  C022  F019         	movff	drawCircle@color,drawPixel@color
  6237  000848  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6238  00084C  501C               	movf	drawCircle@x0,w,c
  6239  00084E  ECE5  F00D         	call	_drawPixel
  6240                           
  6241                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6242  000852  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6243  000856  C022  F019         	movff	drawCircle@color,drawPixel@color
  6244  00085A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6245  00085E  501C               	movf	drawCircle@x0,w,c
  6246  000860  2420               	addwf	drawCircle@r,w,c
  6247  000862  ECE5  F00D         	call	_drawPixel
  6248                           
  6249                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6250  000866  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6251  00086A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6252  00086E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6253  000872  5020               	movf	drawCircle@r,w,c
  6254  000874  0800               	sublw	0
  6255  000876  241C               	addwf	drawCircle@x0,w,c
  6256  000878  ECE5  F00D         	call	_drawPixel
  6257                           
  6258                           ;ST7735_TFT.c: 537: while (x < y) {
  6259  00087C  D078               	goto	l5253
  6260  00087E                     l5225:
  6261                           
  6262                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6263  00087E  BE2B               	btfsc	drawCircle@f+1,7,c
  6264  000880  D00B               	goto	l658
  6265                           
  6266                           ;ST7735_TFT.c: 539: y--;
  6267  000882  062E               	decf	drawCircle@y,f,c
  6268  000884  A0D8               	btfss	status,0,c
  6269  000886  062F               	decf	drawCircle@y+1,f,c
  6270                           
  6271                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6272  000888  0E02               	movlw	2
  6273  00088A  2628               	addwf	drawCircle@ddF_y,f,c
  6274  00088C  0E00               	movlw	0
  6275  00088E  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6276                           
  6277                           ;ST7735_TFT.c: 541: f += ddF_y;
  6278  000890  5028               	movf	drawCircle@ddF_y,w,c
  6279  000892  262A               	addwf	drawCircle@f,f,c
  6280  000894  5029               	movf	drawCircle@ddF_y+1,w,c
  6281  000896  222B               	addwfc	drawCircle@f+1,f,c
  6282  000898                     l658:
  6283                           
  6284                           ;ST7735_TFT.c: 542: }
  6285                           ;ST7735_TFT.c: 543: x++;
  6286  000898  4A2C               	infsnz	drawCircle@x,f,c
  6287  00089A  2A2D               	incf	drawCircle@x+1,f,c
  6288                           
  6289                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6290  00089C  0E02               	movlw	2
  6291  00089E  2626               	addwf	drawCircle@ddF_x,f,c
  6292  0008A0  0E00               	movlw	0
  6293  0008A2  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6294                           
  6295                           ;ST7735_TFT.c: 545: f += ddF_x;
  6296  0008A4  5026               	movf	drawCircle@ddF_x,w,c
  6297  0008A6  262A               	addwf	drawCircle@f,f,c
  6298  0008A8  5027               	movf	drawCircle@ddF_x+1,w,c
  6299  0008AA  222B               	addwfc	drawCircle@f+1,f,c
  6300                           
  6301                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6302  0008AC  501E               	movf	drawCircle@y0,w,c
  6303  0008AE  242E               	addwf	drawCircle@y,w,c
  6304  0008B0  6E18               	movwf	drawPixel@y,c
  6305  0008B2  C022  F019         	movff	drawCircle@color,drawPixel@color
  6306  0008B6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6307  0008BA  501C               	movf	drawCircle@x0,w,c
  6308  0008BC  242C               	addwf	drawCircle@x,w,c
  6309  0008BE  ECE5  F00D         	call	_drawPixel
  6310                           
  6311                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6312  0008C2  501E               	movf	drawCircle@y0,w,c
  6313  0008C4  242E               	addwf	drawCircle@y,w,c
  6314  0008C6  6E18               	movwf	drawPixel@y,c
  6315  0008C8  C022  F019         	movff	drawCircle@color,drawPixel@color
  6316  0008CC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6317  0008D0  502C               	movf	drawCircle@x,w,c
  6318  0008D2  0800               	sublw	0
  6319  0008D4  241C               	addwf	drawCircle@x0,w,c
  6320  0008D6  ECE5  F00D         	call	_drawPixel
  6321                           
  6322                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6323  0008DA  502E               	movf	drawCircle@y,w,c
  6324  0008DC  0800               	sublw	0
  6325  0008DE  241E               	addwf	drawCircle@y0,w,c
  6326  0008E0  6E18               	movwf	drawPixel@y,c
  6327  0008E2  C022  F019         	movff	drawCircle@color,drawPixel@color
  6328  0008E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6329  0008EA  501C               	movf	drawCircle@x0,w,c
  6330  0008EC  242C               	addwf	drawCircle@x,w,c
  6331  0008EE  ECE5  F00D         	call	_drawPixel
  6332                           
  6333                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6334  0008F2  502E               	movf	drawCircle@y,w,c
  6335  0008F4  0800               	sublw	0
  6336  0008F6  241E               	addwf	drawCircle@y0,w,c
  6337  0008F8  6E18               	movwf	drawPixel@y,c
  6338  0008FA  C022  F019         	movff	drawCircle@color,drawPixel@color
  6339  0008FE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6340  000902  502C               	movf	drawCircle@x,w,c
  6341  000904  0800               	sublw	0
  6342  000906  241C               	addwf	drawCircle@x0,w,c
  6343  000908  ECE5  F00D         	call	_drawPixel
  6344                           
  6345                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6346  00090C  501E               	movf	drawCircle@y0,w,c
  6347  00090E  242C               	addwf	drawCircle@x,w,c
  6348  000910  6E18               	movwf	drawPixel@y,c
  6349  000912  C022  F019         	movff	drawCircle@color,drawPixel@color
  6350  000916  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6351  00091A  501C               	movf	drawCircle@x0,w,c
  6352  00091C  242E               	addwf	drawCircle@y,w,c
  6353  00091E  ECE5  F00D         	call	_drawPixel
  6354                           
  6355                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6356  000922  501E               	movf	drawCircle@y0,w,c
  6357  000924  242C               	addwf	drawCircle@x,w,c
  6358  000926  6E18               	movwf	drawPixel@y,c
  6359  000928  C022  F019         	movff	drawCircle@color,drawPixel@color
  6360  00092C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6361  000930  502E               	movf	drawCircle@y,w,c
  6362  000932  0800               	sublw	0
  6363  000934  241C               	addwf	drawCircle@x0,w,c
  6364  000936  ECE5  F00D         	call	_drawPixel
  6365                           
  6366                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6367  00093A  502C               	movf	drawCircle@x,w,c
  6368  00093C  0800               	sublw	0
  6369  00093E  241E               	addwf	drawCircle@y0,w,c
  6370  000940  6E18               	movwf	drawPixel@y,c
  6371  000942  C022  F019         	movff	drawCircle@color,drawPixel@color
  6372  000946  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6373  00094A  501C               	movf	drawCircle@x0,w,c
  6374  00094C  242E               	addwf	drawCircle@y,w,c
  6375  00094E  ECE5  F00D         	call	_drawPixel
  6376                           
  6377                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6378  000952  502C               	movf	drawCircle@x,w,c
  6379  000954  0800               	sublw	0
  6380  000956  241E               	addwf	drawCircle@y0,w,c
  6381  000958  6E18               	movwf	drawPixel@y,c
  6382  00095A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6383  00095E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6384  000962  502E               	movf	drawCircle@y,w,c
  6385  000964  0800               	sublw	0
  6386  000966  241C               	addwf	drawCircle@x0,w,c
  6387  000968  ECE5  F00D         	call	_drawPixel
  6388  00096C  D000               	goto	l5253
  6389  00096E                     l5253:
  6390  00096E  502E               	movf	drawCircle@y,w,c
  6391  000970  5C2C               	subwf	drawCircle@x,w,c
  6392  000972  502D               	movf	drawCircle@x+1,w,c
  6393  000974  0A80               	xorlw	128
  6394  000976  6E24               	movwf	??_drawCircle& (0+255),c
  6395  000978  502F               	movf	drawCircle@y+1,w,c
  6396  00097A  0A80               	xorlw	128
  6397  00097C  5824               	subwfb	??_drawCircle& (0+255),w,c
  6398  00097E  A0D8               	btfss	status,0,c
  6399  000980  D77E               	goto	l5225
  6400  000982  0012               	return		;funcret
  6401  000984                     __end_of_drawCircle:
  6402                           	opt stack 0
  6403                           tblptru	equ	0xFF8
  6404                           tblptrh	equ	0xFF7
  6405                           tblptrl	equ	0xFF6
  6406                           tablat	equ	0xFF5
  6407                           prodh	equ	0xFF4
  6408                           prodl	equ	0xFF3
  6409                           postinc0	equ	0xFEE
  6410                           wreg	equ	0xFE8
  6411                           postdec1	equ	0xFE5
  6412                           fsr1l	equ	0xFE1
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function _drawPixel *****************
  6421 ;; Defined at:
  6422 ;;		line 408 in file "ST7735_TFT.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  x               1    wreg     unsigned char 
  6425 ;;  y               1   23[COMRAM] unsigned char 
  6426 ;;  color           2   24[COMRAM] unsigned int 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  x               1   26[COMRAM] unsigned char 
  6429 ;; Return value:  Size  Location     Type
  6430 ;;		None               void
  6431 ;; Registers used:
  6432 ;;		wreg, status,2, status,0, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6438 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;Total ram usage:        4 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    6
  6445 ;; This function calls:
  6446 ;;		_setAddrWindow
  6447 ;;		_write_data
  6448 ;; This function is called by:
  6449 ;;		_drawChar
  6450 ;;		_drawCircle
  6451 ;;		_drawCircleHelper
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           	psect	text24
  6456  001BCA                     __ptext24:
  6457                           	opt stack 0
  6458  001BCA                     _drawPixel:
  6459                           	opt stack 21
  6460                           
  6461                           ;incstack = 0
  6462                           ;drawPixel@x stored from wreg
  6463  001BCA  6E1B               	movwf	drawPixel@x,c
  6464                           
  6465                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  6466  001BCC  0E80               	movlw	128
  6467  001BCE  601B               	cpfslt	drawPixel@x,c
  6468  001BD0  D013               	goto	l588
  6469  001BD2  0E9F               	movlw	159
  6470  001BD4  6418               	cpfsgt	drawPixel@y,c
  6471  001BD6  D001               	goto	l4901
  6472                           
  6473                           ;ST7735_TFT.c: 411: return;
  6474  001BD8  D00F               	goto	l588
  6475  001BDA                     l4901:
  6476                           
  6477                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  6478  001BDA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6479  001BDE  281B               	incf	drawPixel@x,w,c
  6480  001BE0  6E15               	movwf	setAddrWindow@x1,c
  6481  001BE2  2818               	incf	drawPixel@y,w,c
  6482  001BE4  6E16               	movwf	setAddrWindow@y1,c
  6483  001BE6  501B               	movf	drawPixel@x,w,c
  6484  001BE8  EC94  F00C         	call	_setAddrWindow
  6485                           
  6486                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  6487  001BEC  501A               	movf	drawPixel@color+1,w,c
  6488  001BEE  ECEB  F00E         	call	_write_data
  6489                           
  6490                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  6491  001BF2  5019               	movf	drawPixel@color,w,c
  6492  001BF4  ECEB  F00E         	call	_write_data
  6493  001BF8                     l588:
  6494  001BF8  0012               	return		;funcret
  6495  001BFA                     __end_of_drawPixel:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           postinc0	equ	0xFEE
  6504                           wreg	equ	0xFE8
  6505                           postdec1	equ	0xFE5
  6506                           fsr1l	equ	0xFE1
  6507                           indf2	equ	0xFDF
  6508                           postinc2	equ	0xFDE
  6509                           postdec2	equ	0xFDD
  6510                           fsr2h	equ	0xFDA
  6511                           fsr2l	equ	0xFD9
  6512                           status	equ	0xFD8
  6513                           
  6514 ;; *************** function _setAddrWindow *****************
  6515 ;; Defined at:
  6516 ;;		line 393 in file "ST7735_TFT.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  x0              1    wreg     unsigned char 
  6519 ;;  y0              1   19[COMRAM] unsigned char 
  6520 ;;  x1              1   20[COMRAM] unsigned char 
  6521 ;;  y1              1   21[COMRAM] unsigned char 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  x0              1   22[COMRAM] unsigned char 
  6524 ;; Return value:  Size  Location     Type
  6525 ;;		None               void
  6526 ;; Registers used:
  6527 ;;		wreg, status,2, status,0, cstack
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6533 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;Total ram usage:        4 bytes
  6538 ;; Hardware stack levels used:    1
  6539 ;; Hardware stack levels required when called:    5
  6540 ;; This function calls:
  6541 ;;		_write_command
  6542 ;;		_write_data
  6543 ;; This function is called by:
  6544 ;;		_drawPixel
  6545 ;;		_drawFastVLine
  6546 ;;		_fillRectangle
  6547 ;;		_drawFastHLine
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text25
  6552  001928                     __ptext25:
  6553                           	opt stack 0
  6554  001928                     _setAddrWindow:
  6555                           	opt stack 22
  6556                           
  6557                           ;incstack = 0
  6558                           ;setAddrWindow@x0 stored from wreg
  6559  001928  6E17               	movwf	setAddrWindow@x0,c
  6560                           
  6561                           ;ST7735_TFT.c: 395: write_command(0x2A);
  6562  00192A  0E2A               	movlw	42
  6563  00192C  ECF3  F00E         	call	_write_command
  6564                           
  6565                           ;ST7735_TFT.c: 396: write_data(0);
  6566  001930  0E00               	movlw	0
  6567  001932  ECEB  F00E         	call	_write_data
  6568                           
  6569                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  6570  001936  5017               	movf	setAddrWindow@x0,w,c
  6571  001938  2458               	addwf	_colstart,w,c
  6572  00193A  ECEB  F00E         	call	_write_data
  6573                           
  6574                           ;ST7735_TFT.c: 398: write_data(0);
  6575  00193E  0E00               	movlw	0
  6576  001940  ECEB  F00E         	call	_write_data
  6577                           
  6578                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  6579  001944  5015               	movf	setAddrWindow@x1,w,c
  6580  001946  2458               	addwf	_colstart,w,c
  6581  001948  ECEB  F00E         	call	_write_data
  6582                           
  6583                           ;ST7735_TFT.c: 400: write_command(0x2B);
  6584  00194C  0E2B               	movlw	43
  6585  00194E  ECF3  F00E         	call	_write_command
  6586                           
  6587                           ;ST7735_TFT.c: 401: write_data(0);
  6588  001952  0E00               	movlw	0
  6589  001954  ECEB  F00E         	call	_write_data
  6590                           
  6591                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  6592  001958  5014               	movf	setAddrWindow@y0,w,c
  6593  00195A  2461               	addwf	_rowstart,w,c
  6594  00195C  ECEB  F00E         	call	_write_data
  6595                           
  6596                           ;ST7735_TFT.c: 403: write_data(0);
  6597  001960  0E00               	movlw	0
  6598  001962  ECEB  F00E         	call	_write_data
  6599                           
  6600                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  6601  001966  5016               	movf	setAddrWindow@y1,w,c
  6602  001968  2461               	addwf	_rowstart,w,c
  6603  00196A  ECEB  F00E         	call	_write_data
  6604                           
  6605                           ;ST7735_TFT.c: 405: write_command(0x2C);
  6606  00196E  0E2C               	movlw	44
  6607  001970  ECF3  F00E         	call	_write_command
  6608  001974  0012               	return		;funcret
  6609  001976                     __end_of_setAddrWindow:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           postinc0	equ	0xFEE
  6618                           wreg	equ	0xFE8
  6619                           postdec1	equ	0xFE5
  6620                           fsr1l	equ	0xFE1
  6621                           indf2	equ	0xFDF
  6622                           postinc2	equ	0xFDE
  6623                           postdec2	equ	0xFDD
  6624                           fsr2h	equ	0xFDA
  6625                           fsr2l	equ	0xFD9
  6626                           status	equ	0xFD8
  6627                           
  6628 ;; *************** function _TFT_GreenTab_Initialize *****************
  6629 ;; Defined at:
  6630 ;;		line 645 in file "ST7735_TFT.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;		None               void
  6637 ;; Registers used:
  6638 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6639 ;; Tracked objects:
  6640 ;;		On entry : 0/0
  6641 ;;		On exit  : 0/0
  6642 ;;		Unchanged: 0/0
  6643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;Total ram usage:        0 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    6
  6651 ;; This function calls:
  6652 ;;		_Rcmd1
  6653 ;;		_Rcmd2red
  6654 ;;		_Rcmd3
  6655 ;;		_write_command
  6656 ;;		_write_data
  6657 ;; This function is called by:
  6658 ;;		_Initialize_Screen
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text26
  6663  001C2A                     __ptext26:
  6664                           	opt stack 0
  6665  001C2A                     _TFT_GreenTab_Initialize:
  6666                           	opt stack 23
  6667                           
  6668                           ;ST7735_TFT.c: 647: PORTBbits.RB6 = 1;
  6669                           
  6670                           ;incstack = 0
  6671  001C2A  8C81               	bsf	3969,6,c	;volatile
  6672                           
  6673                           ;ST7735_TFT.c: 648: PORTBbits.RB5 = 0;
  6674  001C2C  9A81               	bcf	3969,5,c	;volatile
  6675                           
  6676                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  6677  001C2E  0E80               	movlw	128
  6678  001C30  6EC7               	movwf	4039,c	;volatile
  6679                           
  6680                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  6681  001C32  0E30               	movlw	48
  6682  001C34  6EC6               	movwf	4038,c	;volatile
  6683                           
  6684                           ;ST7735_TFT.c: 654: Rcmd1();
  6685  001C36  ECA2  F006         	call	_Rcmd1	;wreg free
  6686                           
  6687                           ;ST7735_TFT.c: 655: Rcmd2red();
  6688  001C3A  EC8E  F00D         	call	_Rcmd2red	;wreg free
  6689                           
  6690                           ;ST7735_TFT.c: 656: Rcmd3();
  6691  001C3E  ECA6  F007         	call	_Rcmd3	;wreg free
  6692                           
  6693                           ;ST7735_TFT.c: 657: write_command(0x36);
  6694  001C42  0E36               	movlw	54
  6695  001C44  ECF3  F00E         	call	_write_command
  6696                           
  6697                           ;ST7735_TFT.c: 658: write_data(0xC0);
  6698  001C48  0EC0               	movlw	192
  6699  001C4A  ECEB  F00E         	call	_write_data
  6700                           
  6701                           ;ST7735_TFT.c: 659: _tft_type = 1;
  6702  001C4E  0E01               	movlw	1
  6703  001C50  6E52               	movwf	__tft_type,c
  6704  001C52  0012               	return		;funcret
  6705  001C54                     __end_of_TFT_GreenTab_Initialize:
  6706                           	opt stack 0
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           postinc0	equ	0xFEE
  6714                           wreg	equ	0xFE8
  6715                           postdec1	equ	0xFE5
  6716                           fsr1l	equ	0xFE1
  6717                           indf2	equ	0xFDF
  6718                           postinc2	equ	0xFDE
  6719                           postdec2	equ	0xFDD
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _Rcmd3 *****************
  6725 ;; Defined at:
  6726 ;;		line 339 in file "ST7735_TFT.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;		None               void
  6733 ;; Registers used:
  6734 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;Total ram usage:        0 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    5
  6747 ;; This function calls:
  6748 ;;		_delay_ms
  6749 ;;		_write_command
  6750 ;;		_write_data
  6751 ;; This function is called by:
  6752 ;;		_TFT_GreenTab_Initialize
  6753 ;;		_TFT_BlackTab_Initialize
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text27
  6758  000F4C                     __ptext27:
  6759                           	opt stack 0
  6760  000F4C                     _Rcmd3:
  6761                           	opt stack 23
  6762                           
  6763                           ;ST7735_TFT.c: 341: write_command(0xE0);
  6764                           
  6765                           ;incstack = 0
  6766  000F4C  0EE0               	movlw	224
  6767  000F4E  ECF3  F00E         	call	_write_command
  6768                           
  6769                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6770  000F52  0E02               	movlw	2
  6771  000F54  ECEB  F00E         	call	_write_data
  6772  000F58  0E1C               	movlw	28
  6773  000F5A  ECEB  F00E         	call	_write_data
  6774  000F5E  0E07               	movlw	7
  6775  000F60  ECEB  F00E         	call	_write_data
  6776  000F64  0E12               	movlw	18
  6777  000F66  ECEB  F00E         	call	_write_data
  6778                           
  6779                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6780  000F6A  0E37               	movlw	55
  6781  000F6C  ECEB  F00E         	call	_write_data
  6782  000F70  0E32               	movlw	50
  6783  000F72  ECEB  F00E         	call	_write_data
  6784  000F76  0E29               	movlw	41
  6785  000F78  ECEB  F00E         	call	_write_data
  6786  000F7C  0E2D               	movlw	45
  6787  000F7E  ECEB  F00E         	call	_write_data
  6788                           
  6789                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6790  000F82  0E29               	movlw	41
  6791  000F84  ECEB  F00E         	call	_write_data
  6792  000F88  0E25               	movlw	37
  6793  000F8A  ECEB  F00E         	call	_write_data
  6794  000F8E  0E2B               	movlw	43
  6795  000F90  ECEB  F00E         	call	_write_data
  6796  000F94  0E39               	movlw	57
  6797  000F96  ECEB  F00E         	call	_write_data
  6798                           
  6799                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6800  000F9A  0E00               	movlw	0
  6801  000F9C  ECEB  F00E         	call	_write_data
  6802  000FA0  0E01               	movlw	1
  6803  000FA2  ECEB  F00E         	call	_write_data
  6804  000FA6  0E03               	movlw	3
  6805  000FA8  ECEB  F00E         	call	_write_data
  6806  000FAC  0E10               	movlw	16
  6807  000FAE  ECEB  F00E         	call	_write_data
  6808                           
  6809                           ;ST7735_TFT.c: 346: write_command(0xE1);
  6810  000FB2  0EE1               	movlw	225
  6811  000FB4  ECF3  F00E         	call	_write_command
  6812                           
  6813                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6814  000FB8  0E03               	movlw	3
  6815  000FBA  ECEB  F00E         	call	_write_data
  6816  000FBE  0E1D               	movlw	29
  6817  000FC0  ECEB  F00E         	call	_write_data
  6818  000FC4  0E07               	movlw	7
  6819  000FC6  ECEB  F00E         	call	_write_data
  6820  000FCA  0E06               	movlw	6
  6821  000FCC  ECEB  F00E         	call	_write_data
  6822                           
  6823                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6824  000FD0  0E2E               	movlw	46
  6825  000FD2  ECEB  F00E         	call	_write_data
  6826  000FD6  0E2C               	movlw	44
  6827  000FD8  ECEB  F00E         	call	_write_data
  6828  000FDC  0E29               	movlw	41
  6829  000FDE  ECEB  F00E         	call	_write_data
  6830  000FE2  0E2D               	movlw	45
  6831  000FE4  ECEB  F00E         	call	_write_data
  6832                           
  6833                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6834  000FE8  0E2E               	movlw	46
  6835  000FEA  ECEB  F00E         	call	_write_data
  6836  000FEE  0E2E               	movlw	46
  6837  000FF0  ECEB  F00E         	call	_write_data
  6838  000FF4  0E37               	movlw	55
  6839  000FF6  ECEB  F00E         	call	_write_data
  6840  000FFA  0E3F               	movlw	63
  6841  000FFC  ECEB  F00E         	call	_write_data
  6842                           
  6843                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6844  001000  0E00               	movlw	0
  6845  001002  ECEB  F00E         	call	_write_data
  6846  001006  0E00               	movlw	0
  6847  001008  ECEB  F00E         	call	_write_data
  6848  00100C  0E02               	movlw	2
  6849  00100E  ECEB  F00E         	call	_write_data
  6850  001012  0E10               	movlw	16
  6851  001014  ECEB  F00E         	call	_write_data
  6852                           
  6853                           ;ST7735_TFT.c: 351: write_command(0x13);
  6854  001018  0E13               	movlw	19
  6855  00101A  ECF3  F00E         	call	_write_command
  6856                           
  6857                           ;ST7735_TFT.c: 352: delay_ms(10);
  6858  00101E  0E00               	movlw	0
  6859  001020  6E18               	movwf	delay_ms@ms+1,c
  6860  001022  0E0A               	movlw	10
  6861  001024  6E17               	movwf	delay_ms@ms,c
  6862  001026  EC6B  F00C         	call	_delay_ms	;wreg free
  6863                           
  6864                           ;ST7735_TFT.c: 353: write_command(0x29);
  6865  00102A  0E29               	movlw	41
  6866  00102C  ECF3  F00E         	call	_write_command
  6867                           
  6868                           ;ST7735_TFT.c: 354: delay_ms(100);
  6869  001030  0E00               	movlw	0
  6870  001032  6E18               	movwf	delay_ms@ms+1,c
  6871  001034  0E64               	movlw	100
  6872  001036  6E17               	movwf	delay_ms@ms,c
  6873  001038  EC6B  F00C         	call	_delay_ms	;wreg free
  6874  00103C  0012               	return		;funcret
  6875  00103E                     __end_of_Rcmd3:
  6876                           	opt stack 0
  6877                           tblptru	equ	0xFF8
  6878                           tblptrh	equ	0xFF7
  6879                           tblptrl	equ	0xFF6
  6880                           tablat	equ	0xFF5
  6881                           prodh	equ	0xFF4
  6882                           prodl	equ	0xFF3
  6883                           postinc0	equ	0xFEE
  6884                           wreg	equ	0xFE8
  6885                           postdec1	equ	0xFE5
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           postinc2	equ	0xFDE
  6889                           postdec2	equ	0xFDD
  6890                           fsr2h	equ	0xFDA
  6891                           fsr2l	equ	0xFD9
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _Rcmd2red *****************
  6895 ;; Defined at:
  6896 ;;		line 329 in file "ST7735_TFT.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;		None
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;		None
  6901 ;; Return value:  Size  Location     Type
  6902 ;;		None               void
  6903 ;; Registers used:
  6904 ;;		wreg, status,2, cstack
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;Total ram usage:        0 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:    5
  6917 ;; This function calls:
  6918 ;;		_write_command
  6919 ;;		_write_data
  6920 ;; This function is called by:
  6921 ;;		_TFT_GreenTab_Initialize
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text28
  6926  001B1C                     __ptext28:
  6927                           	opt stack 0
  6928  001B1C                     _Rcmd2red:
  6929                           	opt stack 23
  6930                           
  6931                           ;ST7735_TFT.c: 331: write_command(0x2A);
  6932                           
  6933                           ;incstack = 0
  6934  001B1C  0E2A               	movlw	42
  6935  001B1E  ECF3  F00E         	call	_write_command
  6936                           
  6937                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  6938  001B22  0E00               	movlw	0
  6939  001B24  ECEB  F00E         	call	_write_data
  6940  001B28  0E00               	movlw	0
  6941  001B2A  ECEB  F00E         	call	_write_data
  6942                           
  6943                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  6944  001B2E  0E00               	movlw	0
  6945  001B30  ECEB  F00E         	call	_write_data
  6946  001B34  0E7F               	movlw	127
  6947  001B36  ECEB  F00E         	call	_write_data
  6948                           
  6949                           ;ST7735_TFT.c: 334: write_command(0x2B);
  6950  001B3A  0E2B               	movlw	43
  6951  001B3C  ECF3  F00E         	call	_write_command
  6952                           
  6953                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  6954  001B40  0E00               	movlw	0
  6955  001B42  ECEB  F00E         	call	_write_data
  6956  001B46  0E00               	movlw	0
  6957  001B48  ECEB  F00E         	call	_write_data
  6958                           
  6959                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  6960  001B4C  0E00               	movlw	0
  6961  001B4E  ECEB  F00E         	call	_write_data
  6962  001B52  0E9F               	movlw	159
  6963  001B54  ECEB  F00E         	call	_write_data
  6964  001B58  0012               	return		;funcret
  6965  001B5A                     __end_of_Rcmd2red:
  6966                           	opt stack 0
  6967                           tblptru	equ	0xFF8
  6968                           tblptrh	equ	0xFF7
  6969                           tblptrl	equ	0xFF6
  6970                           tablat	equ	0xFF5
  6971                           prodh	equ	0xFF4
  6972                           prodl	equ	0xFF3
  6973                           postinc0	equ	0xFEE
  6974                           wreg	equ	0xFE8
  6975                           postdec1	equ	0xFE5
  6976                           fsr1l	equ	0xFE1
  6977                           indf2	equ	0xFDF
  6978                           postinc2	equ	0xFDE
  6979                           postdec2	equ	0xFDD
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function _Rcmd1 *****************
  6985 ;; Defined at:
  6986 ;;		line 282 in file "ST7735_TFT.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;		None
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;		None
  6991 ;; Return value:  Size  Location     Type
  6992 ;;		None               void
  6993 ;; Registers used:
  6994 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;Total ram usage:        0 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    5
  7007 ;; This function calls:
  7008 ;;		_delay_ms
  7009 ;;		_write_command
  7010 ;;		_write_data
  7011 ;; This function is called by:
  7012 ;;		_TFT_GreenTab_Initialize
  7013 ;;		_TFT_BlackTab_Initialize
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text29
  7018  000D44                     __ptext29:
  7019                           	opt stack 0
  7020  000D44                     _Rcmd1:
  7021                           	opt stack 23
  7022                           
  7023                           ;ST7735_TFT.c: 284: write_command(0x01);
  7024                           
  7025                           ;incstack = 0
  7026  000D44  0E01               	movlw	1
  7027  000D46  ECF3  F00E         	call	_write_command
  7028                           
  7029                           ;ST7735_TFT.c: 285: delay_ms(150);
  7030  000D4A  0E00               	movlw	0
  7031  000D4C  6E18               	movwf	delay_ms@ms+1,c
  7032  000D4E  0E96               	movlw	150
  7033  000D50  6E17               	movwf	delay_ms@ms,c
  7034  000D52  EC6B  F00C         	call	_delay_ms	;wreg free
  7035                           
  7036                           ;ST7735_TFT.c: 286: write_command(0x11);
  7037  000D56  0E11               	movlw	17
  7038  000D58  ECF3  F00E         	call	_write_command
  7039                           
  7040                           ;ST7735_TFT.c: 287: delay_ms(500);
  7041  000D5C  0E01               	movlw	1
  7042  000D5E  6E18               	movwf	delay_ms@ms+1,c
  7043  000D60  0EF4               	movlw	244
  7044  000D62  6E17               	movwf	delay_ms@ms,c
  7045  000D64  EC6B  F00C         	call	_delay_ms	;wreg free
  7046                           
  7047                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7048  000D68  0EB1               	movlw	177
  7049  000D6A  ECF3  F00E         	call	_write_command
  7050                           
  7051                           ;ST7735_TFT.c: 289: write_data(0x01);
  7052  000D6E  0E01               	movlw	1
  7053  000D70  ECEB  F00E         	call	_write_data
  7054                           
  7055                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7056  000D74  0E2C               	movlw	44
  7057  000D76  ECEB  F00E         	call	_write_data
  7058                           
  7059                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7060  000D7A  0E2D               	movlw	45
  7061  000D7C  ECEB  F00E         	call	_write_data
  7062                           
  7063                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7064  000D80  0EB2               	movlw	178
  7065  000D82  ECF3  F00E         	call	_write_command
  7066                           
  7067                           ;ST7735_TFT.c: 293: write_data(0x01);
  7068  000D86  0E01               	movlw	1
  7069  000D88  ECEB  F00E         	call	_write_data
  7070                           
  7071                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7072  000D8C  0E2C               	movlw	44
  7073  000D8E  ECEB  F00E         	call	_write_data
  7074                           
  7075                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7076  000D92  0E2D               	movlw	45
  7077  000D94  ECEB  F00E         	call	_write_data
  7078                           
  7079                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7080  000D98  0EB3               	movlw	179
  7081  000D9A  ECF3  F00E         	call	_write_command
  7082                           
  7083                           ;ST7735_TFT.c: 297: write_data(0x01);
  7084  000D9E  0E01               	movlw	1
  7085  000DA0  ECEB  F00E         	call	_write_data
  7086                           
  7087                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7088  000DA4  0E2C               	movlw	44
  7089  000DA6  ECEB  F00E         	call	_write_data
  7090                           
  7091                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7092  000DAA  0E2D               	movlw	45
  7093  000DAC  ECEB  F00E         	call	_write_data
  7094                           
  7095                           ;ST7735_TFT.c: 300: write_data(0x01);
  7096  000DB0  0E01               	movlw	1
  7097  000DB2  ECEB  F00E         	call	_write_data
  7098                           
  7099                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7100  000DB6  0E2C               	movlw	44
  7101  000DB8  ECEB  F00E         	call	_write_data
  7102                           
  7103                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7104  000DBC  0E2D               	movlw	45
  7105  000DBE  ECEB  F00E         	call	_write_data
  7106                           
  7107                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7108  000DC2  0EB4               	movlw	180
  7109  000DC4  ECF3  F00E         	call	_write_command
  7110                           
  7111                           ;ST7735_TFT.c: 304: write_data(0x07);
  7112  000DC8  0E07               	movlw	7
  7113  000DCA  ECEB  F00E         	call	_write_data
  7114                           
  7115                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7116  000DCE  0EC0               	movlw	192
  7117  000DD0  ECF3  F00E         	call	_write_command
  7118                           
  7119                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7120  000DD4  0EA2               	movlw	162
  7121  000DD6  ECEB  F00E         	call	_write_data
  7122                           
  7123                           ;ST7735_TFT.c: 307: write_data(0x02);
  7124  000DDA  0E02               	movlw	2
  7125  000DDC  ECEB  F00E         	call	_write_data
  7126                           
  7127                           ;ST7735_TFT.c: 308: write_data(0x84);
  7128  000DE0  0E84               	movlw	132
  7129  000DE2  ECEB  F00E         	call	_write_data
  7130                           
  7131                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7132  000DE6  0EC1               	movlw	193
  7133  000DE8  ECF3  F00E         	call	_write_command
  7134                           
  7135                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7136  000DEC  0EC5               	movlw	197
  7137  000DEE  ECEB  F00E         	call	_write_data
  7138                           
  7139                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7140  000DF2  0EC2               	movlw	194
  7141  000DF4  ECF3  F00E         	call	_write_command
  7142                           
  7143                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7144  000DF8  0E0A               	movlw	10
  7145  000DFA  ECEB  F00E         	call	_write_data
  7146                           
  7147                           ;ST7735_TFT.c: 313: write_data(0x00);
  7148  000DFE  0E00               	movlw	0
  7149  000E00  ECEB  F00E         	call	_write_data
  7150                           
  7151                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7152  000E04  0EC3               	movlw	195
  7153  000E06  ECF3  F00E         	call	_write_command
  7154                           
  7155                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7156  000E0A  0E8A               	movlw	138
  7157  000E0C  ECEB  F00E         	call	_write_data
  7158                           
  7159                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7160  000E10  0E2A               	movlw	42
  7161  000E12  ECEB  F00E         	call	_write_data
  7162                           
  7163                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7164  000E16  0EC4               	movlw	196
  7165  000E18  ECF3  F00E         	call	_write_command
  7166                           
  7167                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7168  000E1C  0E8A               	movlw	138
  7169  000E1E  ECEB  F00E         	call	_write_data
  7170                           
  7171                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7172  000E22  0EEE               	movlw	238
  7173  000E24  ECEB  F00E         	call	_write_data
  7174                           
  7175                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7176  000E28  0EC5               	movlw	197
  7177  000E2A  ECF3  F00E         	call	_write_command
  7178                           
  7179                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7180  000E2E  0E0E               	movlw	14
  7181  000E30  ECEB  F00E         	call	_write_data
  7182                           
  7183                           ;ST7735_TFT.c: 322: write_command(0x20);
  7184  000E34  0E20               	movlw	32
  7185  000E36  ECF3  F00E         	call	_write_command
  7186                           
  7187                           ;ST7735_TFT.c: 323: write_command(0x36);
  7188  000E3A  0E36               	movlw	54
  7189  000E3C  ECF3  F00E         	call	_write_command
  7190                           
  7191                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7192  000E40  0EC8               	movlw	200
  7193  000E42  ECEB  F00E         	call	_write_data
  7194                           
  7195                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7196  000E46  0E3A               	movlw	58
  7197  000E48  ECF3  F00E         	call	_write_command
  7198                           
  7199                           ;ST7735_TFT.c: 326: write_data(0x05);
  7200  000E4C  0E05               	movlw	5
  7201  000E4E  ECEB  F00E         	call	_write_data
  7202  000E52  0012               	return		;funcret
  7203  000E54                     __end_of_Rcmd1:
  7204                           	opt stack 0
  7205                           tblptru	equ	0xFF8
  7206                           tblptrh	equ	0xFF7
  7207                           tblptrl	equ	0xFF6
  7208                           tablat	equ	0xFF5
  7209                           prodh	equ	0xFF4
  7210                           prodl	equ	0xFF3
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           postdec1	equ	0xFE5
  7214                           fsr1l	equ	0xFE1
  7215                           indf2	equ	0xFDF
  7216                           postinc2	equ	0xFDE
  7217                           postdec2	equ	0xFDD
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222 ;; *************** function _write_data *****************
  7223 ;; Defined at:
  7224 ;;		line 210 in file "ST7735_TFT.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  data_           1    wreg     unsigned char 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  data_           1   18[COMRAM] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;		None               void
  7231 ;; Registers used:
  7232 ;;		wreg, status,2, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7242 ;;Total ram usage:        1 bytes
  7243 ;; Hardware stack levels used:    1
  7244 ;; Hardware stack levels required when called:    4
  7245 ;; This function calls:
  7246 ;;		_spiwrite
  7247 ;; This function is called by:
  7248 ;;		_Rcmd1
  7249 ;;		_Rcmd2red
  7250 ;;		_Rcmd3
  7251 ;;		_setAddrWindow
  7252 ;;		_drawPixel
  7253 ;;		_TFT_GreenTab_Initialize
  7254 ;;		_Bcmd
  7255 ;;		_setScrollDefinition
  7256 ;;		_Rcmd2green
  7257 ;;		_VerticalScroll
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text30
  7262  001DD6                     __ptext30:
  7263                           	opt stack 0
  7264  001DD6                     _write_data:
  7265                           	opt stack 22
  7266                           
  7267                           ;incstack = 0
  7268                           ;write_data@data_ stored from wreg
  7269  001DD6  6E13               	movwf	write_data@data_,c
  7270                           
  7271                           ;ST7735_TFT.c: 212: PORTBbits.RB6 = 0;
  7272  001DD8  9C81               	bcf	3969,6,c	;volatile
  7273                           
  7274                           ;ST7735_TFT.c: 213: PORTBbits.RB5 = 1;
  7275  001DDA  8A81               	bsf	3969,5,c	;volatile
  7276                           
  7277                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7278  001DDC  5013               	movf	write_data@data_,w,c
  7279  001DDE  ECB3  F00E         	call	_spiwrite
  7280                           
  7281                           ;ST7735_TFT.c: 215: PORTBbits.RB6 = 1;
  7282  001DE2  8C81               	bsf	3969,6,c	;volatile
  7283  001DE4  0012               	return		;funcret
  7284  001DE6                     __end_of_write_data:
  7285                           	opt stack 0
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           postdec1	equ	0xFE5
  7295                           fsr1l	equ	0xFE1
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function _write_command *****************
  7304 ;; Defined at:
  7305 ;;		line 199 in file "ST7735_TFT.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  cmd_            1    wreg     unsigned char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  cmd_            1   18[COMRAM] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;		None               void
  7312 ;; Registers used:
  7313 ;;		wreg, status,2, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;Total ram usage:        1 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    4
  7326 ;; This function calls:
  7327 ;;		_spiwrite
  7328 ;; This function is called by:
  7329 ;;		_Rcmd1
  7330 ;;		_Rcmd2red
  7331 ;;		_Rcmd3
  7332 ;;		_setAddrWindow
  7333 ;;		_TFT_GreenTab_Initialize
  7334 ;;		_Bcmd
  7335 ;;		_setScrollDefinition
  7336 ;;		_Rcmd2green
  7337 ;;		_VerticalScroll
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           	psect	text31
  7342  001DE6                     __ptext31:
  7343                           	opt stack 0
  7344  001DE6                     _write_command:
  7345                           	opt stack 22
  7346                           
  7347                           ;incstack = 0
  7348                           ;write_command@cmd_ stored from wreg
  7349  001DE6  6E13               	movwf	write_command@cmd_,c
  7350                           
  7351                           ;ST7735_TFT.c: 201: PORTBbits.RB6 = 0;
  7352  001DE8  9C81               	bcf	3969,6,c	;volatile
  7353                           
  7354                           ;ST7735_TFT.c: 203: PORTBbits.RB5 = 0;
  7355  001DEA  9A81               	bcf	3969,5,c	;volatile
  7356                           
  7357                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7358  001DEC  5013               	movf	write_command@cmd_,w,c
  7359  001DEE  ECB3  F00E         	call	_spiwrite
  7360                           
  7361                           ;ST7735_TFT.c: 206: PORTBbits.RB6 = 1;
  7362  001DF2  8C81               	bsf	3969,6,c	;volatile
  7363  001DF4  0012               	return		;funcret
  7364  001DF6                     __end_of_write_command:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           postinc0	equ	0xFEE
  7373                           wreg	equ	0xFE8
  7374                           postdec1	equ	0xFE5
  7375                           fsr1l	equ	0xFE1
  7376                           indf2	equ	0xFDF
  7377                           postinc2	equ	0xFDE
  7378                           postdec2	equ	0xFDD
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function _spiwrite *****************
  7384 ;; Defined at:
  7385 ;;		line 190 in file "ST7735_TFT.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  spidata         1    wreg     unsigned char 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  spidata         1   17[COMRAM] unsigned char 
  7390 ;;  x               1   16[COMRAM] unsigned char 
  7391 ;; Return value:  Size  Location     Type
  7392 ;;		None               void
  7393 ;; Registers used:
  7394 ;;		wreg
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;Total ram usage:        2 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:    3
  7407 ;; This function calls:
  7408 ;;		Nothing
  7409 ;; This function is called by:
  7410 ;;		_write_command
  7411 ;;		_write_data
  7412 ;;		_drawFastVLine
  7413 ;;		_fillRectangle
  7414 ;;		_drawFastHLine
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	text32
  7419  001D66                     __ptext32:
  7420                           	opt stack 0
  7421  001D66                     _spiwrite:
  7422                           	opt stack 24
  7423                           
  7424                           ;incstack = 0
  7425                           ;spiwrite@spidata stored from wreg
  7426  001D66  6E12               	movwf	spiwrite@spidata,c
  7427                           
  7428                           ;ST7735_TFT.c: 192: char x;
  7429                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  7430  001D68  969E               	bcf	3998,3,c	;volatile
  7431                           
  7432                           ;ST7735_TFT.c: 194: x = SSPBUF;
  7433  001D6A  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7434                           
  7435                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  7436  001D6E  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7437                           
  7438                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  7439  001D72  D000               	goto	l544
  7440  001D74                     l544:
  7441  001D74  A0C7               	btfss	4039,0,c	;volatile
  7442  001D76  D7FE               	goto	l544
  7443  001D78  0012               	return		;funcret
  7444  001D7A                     __end_of_spiwrite:
  7445                           	opt stack 0
  7446                           tblptru	equ	0xFF8
  7447                           tblptrh	equ	0xFF7
  7448                           tblptrl	equ	0xFF6
  7449                           tablat	equ	0xFF5
  7450                           prodh	equ	0xFF4
  7451                           prodl	equ	0xFF3
  7452                           postinc0	equ	0xFEE
  7453                           wreg	equ	0xFE8
  7454                           postdec1	equ	0xFE5
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _LCD_Reset *****************
  7464 ;; Defined at:
  7465 ;;		line 218 in file "ST7735_TFT.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;		None               void
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;Total ram usage:        0 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    5
  7486 ;; This function calls:
  7487 ;;		_delay_ms
  7488 ;; This function is called by:
  7489 ;;		_Initialize_Screen
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text33
  7494  001D8E                     __ptext33:
  7495                           	opt stack 0
  7496  001D8E                     _LCD_Reset:
  7497                           	opt stack 24
  7498                           
  7499                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 0;
  7500                           
  7501                           ;incstack = 0
  7502  001D8E  9282               	bcf	3970,1,c	;volatile
  7503                           
  7504                           ;ST7735_TFT.c: 221: delay_ms(100);
  7505  001D90  0E00               	movlw	0
  7506  001D92  6E18               	movwf	delay_ms@ms+1,c
  7507  001D94  0E64               	movlw	100
  7508  001D96  6E17               	movwf	delay_ms@ms,c
  7509  001D98  EC6B  F00C         	call	_delay_ms	;wreg free
  7510                           
  7511                           ;ST7735_TFT.c: 222: PORTCbits.RC1 = 1;
  7512  001D9C  8282               	bsf	3970,1,c	;volatile
  7513  001D9E  0012               	return		;funcret
  7514  001DA0                     __end_of_LCD_Reset:
  7515                           	opt stack 0
  7516                           tblptru	equ	0xFF8
  7517                           tblptrh	equ	0xFF7
  7518                           tblptrl	equ	0xFF6
  7519                           tablat	equ	0xFF5
  7520                           prodh	equ	0xFF4
  7521                           prodl	equ	0xFF3
  7522                           postinc0	equ	0xFEE
  7523                           wreg	equ	0xFE8
  7524                           postdec1	equ	0xFE5
  7525                           fsr1l	equ	0xFE1
  7526                           indf2	equ	0xFDF
  7527                           postinc2	equ	0xFDE
  7528                           postdec2	equ	0xFDD
  7529                           fsr2h	equ	0xFDA
  7530                           fsr2l	equ	0xFD9
  7531                           status	equ	0xFD8
  7532                           
  7533 ;; *************** function _delay_ms *****************
  7534 ;; Defined at:
  7535 ;;		line 65 in file "ST7735_TFT.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;  ms              2   22[COMRAM] int 
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  count           2   26[COMRAM] int 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;		None               void
  7542 ;; Registers used:
  7543 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7549 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;Total ram usage:        6 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    4
  7556 ;; This function calls:
  7557 ;;		___wmul
  7558 ;; This function is called by:
  7559 ;;		_LCD_Reset
  7560 ;;		_Rcmd1
  7561 ;;		_Rcmd3
  7562 ;;		_Bcmd
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text34
  7567  0018D6                     __ptext34:
  7568                           	opt stack 0
  7569  0018D6                     _delay_ms:
  7570                           	opt stack 23
  7571                           
  7572                           ;ST7735_TFT.c: 71: int count;
  7573                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  7574                           
  7575                           ;incstack = 0
  7576  0018D6  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7577  0018DA  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7578  0018DE  0E00               	movlw	0
  7579  0018E0  6E14               	movwf	___wmul@multiplicand+1,c
  7580  0018E2  0E7D               	movlw	125
  7581  0018E4  6E13               	movwf	___wmul@multiplicand,c
  7582  0018E6  EC2A  F00E         	call	___wmul	;wreg free
  7583  0018EA  C011  F01B         	movff	?___wmul,delay_ms@count
  7584  0018EE  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7585                           
  7586                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  7587  0018F2  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7588  0018F6  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7589  0018FA  1E19               	comf	??_delay_ms,f,c
  7590  0018FC  1E1A               	comf	??_delay_ms+1,f,c
  7591  0018FE  4A19               	infsnz	??_delay_ms,f,c
  7592  001900  2A1A               	incf	??_delay_ms+1,f,c
  7593  001902  0EFF               	movlw	255
  7594  001904  2419               	addwf	??_delay_ms,w,c
  7595  001906  6E1B               	movwf	delay_ms@count,c
  7596  001908  0EFF               	movlw	255
  7597  00190A  201A               	addwfc	??_delay_ms+1,w,c
  7598  00190C  6E1C               	movwf	delay_ms@count+1,c
  7599                           
  7600                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  7601  00190E  0E03               	movlw	3
  7602  001910  6ED5               	movwf	4053,c	;volatile
  7603                           
  7604                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  7605  001912  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7606                           
  7607                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  7608  001916  501C               	movf	delay_ms@count+1,w,c
  7609  001918  6ED7               	movwf	4055,c	;volatile
  7610                           
  7611                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  7612  00191A  94F2               	bcf	intcon,2,c	;volatile
  7613                           
  7614                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  7615  00191C  8ED5               	bsf	4053,7,c	;volatile
  7616                           
  7617                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  7618  00191E  D000               	goto	l534
  7619  001920                     l534:
  7620  001920  A4F2               	btfss	intcon,2,c	;volatile
  7621  001922  D7FE               	goto	l534
  7622                           
  7623                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  7624  001924  9ED5               	bcf	4053,7,c	;volatile
  7625  001926  0012               	return		;funcret
  7626  001928                     __end_of_delay_ms:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           postinc0	equ	0xFEE
  7636                           wreg	equ	0xFE8
  7637                           postdec1	equ	0xFE5
  7638                           fsr1l	equ	0xFE1
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           fsr2h	equ	0xFDA
  7643                           fsr2l	equ	0xFD9
  7644                           status	equ	0xFD8
  7645                           
  7646 ;; *************** function ___wmul *****************
  7647 ;; Defined at:
  7648 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;  multiplier      2   16[COMRAM] unsigned int 
  7651 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  product         2   20[COMRAM] unsigned int 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  2   16[COMRAM] unsigned int 
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0, prodl, prodh
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;Total ram usage:        6 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    3
  7670 ;; This function calls:
  7671 ;;		Nothing
  7672 ;; This function is called by:
  7673 ;;		_get_RPM
  7674 ;;		_main
  7675 ;;		_delay_ms
  7676 ;;		_drawChar
  7677 ;;		_printf
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text35
  7682  001C54                     __ptext35:
  7683                           	opt stack 0
  7684  001C54                     ___wmul:
  7685                           	opt stack 26
  7686                           
  7687                           ;incstack = 0
  7688  001C54  5011               	movf	___wmul@multiplier,w,c
  7689  001C56  0213               	mulwf	___wmul@multiplicand,c
  7690  001C58  CFF3 F015          	movff	prodl,___wmul@product
  7691  001C5C  CFF4 F016          	movff	prodh,___wmul@product+1
  7692  001C60  5011               	movf	___wmul@multiplier,w,c
  7693  001C62  0214               	mulwf	___wmul@multiplicand+1,c
  7694  001C64  50F3               	movf	prodl,w,c
  7695  001C66  2616               	addwf	___wmul@product+1,f,c
  7696  001C68  5012               	movf	___wmul@multiplier+1,w,c
  7697  001C6A  0213               	mulwf	___wmul@multiplicand,c
  7698  001C6C  50F3               	movf	prodl,w,c
  7699  001C6E  2616               	addwf	___wmul@product+1,f,c
  7700  001C70  C015  F011         	movff	___wmul@product,?___wmul
  7701  001C74  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7702  001C78  D000               	goto	l863
  7703  001C7A                     l863:
  7704  001C7A  0012               	return		;funcret
  7705  001C7C                     __end_of___wmul:
  7706                           	opt stack 0
  7707                           tblptru	equ	0xFF8
  7708                           tblptrh	equ	0xFF7
  7709                           tblptrl	equ	0xFF6
  7710                           tablat	equ	0xFF5
  7711                           prodh	equ	0xFF4
  7712                           prodl	equ	0xFF3
  7713                           intcon	equ	0xFF2
  7714                           postinc0	equ	0xFEE
  7715                           wreg	equ	0xFE8
  7716                           postdec1	equ	0xFE5
  7717                           fsr1l	equ	0xFE1
  7718                           indf2	equ	0xFDF
  7719                           postinc2	equ	0xFDE
  7720                           postdec2	equ	0xFDD
  7721                           fsr2h	equ	0xFDA
  7722                           fsr2l	equ	0xFD9
  7723                           status	equ	0xFD8
  7724                           
  7725 ;; *************** function _Do_Init *****************
  7726 ;; Defined at:
  7727 ;;		line 109 in file "Lab12_ex.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;		None               void
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    7
  7748 ;; This function calls:
  7749 ;;		_DS1621_Init
  7750 ;;		_I2C_Init
  7751 ;;		_init_INTERRUPT
  7752 ;;		_init_UART
  7753 ;; This function is called by:
  7754 ;;		_main
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text36
  7759  0019C2                     __ptext36:
  7760                           	opt stack 0
  7761  0019C2                     _Do_Init:
  7762                           	opt stack 23
  7763                           
  7764                           ;Lab12_ex.c: 111: init_UART();
  7765                           
  7766                           ;incstack = 0
  7767  0019C2  ECBD  F00E         	call	_init_UART	;wreg free
  7768                           
  7769                           ;Lab12_ex.c: 112: OSCCON=0x70;
  7770  0019C6  0E70               	movlw	112
  7771  0019C8  6ED3               	movwf	4051,c	;volatile
  7772                           
  7773                           ;Lab12_ex.c: 114: ADCON1=0x0F;
  7774  0019CA  0E0F               	movlw	15
  7775  0019CC  6EC1               	movwf	4033,c	;volatile
  7776                           
  7777                           ;Lab12_ex.c: 115: TRISA = 0x00;
  7778  0019CE  0E00               	movlw	0
  7779  0019D0  6E92               	movwf	3986,c	;volatile
  7780                           
  7781                           ;Lab12_ex.c: 116: TRISB = 0x01;
  7782  0019D2  0E01               	movlw	1
  7783  0019D4  6E93               	movwf	3987,c	;volatile
  7784                           
  7785                           ;Lab12_ex.c: 117: TRISC = 0x01;
  7786  0019D6  0E01               	movlw	1
  7787  0019D8  6E94               	movwf	3988,c	;volatile
  7788                           
  7789                           ;Lab12_ex.c: 118: TRISD = 0x00;
  7790  0019DA  0E00               	movlw	0
  7791  0019DC  6E95               	movwf	3989,c	;volatile
  7792                           
  7793                           ;Lab12_ex.c: 119: TRISE = 0x00;
  7794  0019DE  0E00               	movlw	0
  7795  0019E0  6E96               	movwf	3990,c	;volatile
  7796                           
  7797                           ;Lab12_ex.c: 122: RBPU=0;
  7798  0019E2  9EF1               	bcf	intcon2,7,c	;volatile
  7799                           
  7800                           ;Lab12_ex.c: 123: TMR3L = 0x00;
  7801  0019E4  0E00               	movlw	0
  7802  0019E6  6EB2               	movwf	4018,c	;volatile
  7803                           
  7804                           ;Lab12_ex.c: 124: T3CON = 0x03;
  7805  0019E8  0E03               	movlw	3
  7806  0019EA  6EB1               	movwf	4017,c	;volatile
  7807                           
  7808                           ;Lab12_ex.c: 125: I2C_Init(100000);
  7809  0019EC  0EA0               	movlw	160
  7810  0019EE  6E11               	movwf	I2C_Init@c,c
  7811  0019F0  0E86               	movlw	134
  7812  0019F2  6E12               	movwf	I2C_Init@c+1,c
  7813  0019F4  0E01               	movlw	1
  7814  0019F6  6E13               	movwf	I2C_Init@c+2,c
  7815  0019F8  0E00               	movlw	0
  7816  0019FA  6E14               	movwf	I2C_Init@c+3,c
  7817  0019FC  EC0E  F00F         	call	_I2C_Init	;wreg free
  7818                           
  7819                           ;Lab12_ex.c: 127: DS1621_Init();
  7820  001A00  EC72  F00E         	call	_DS1621_Init	;wreg free
  7821                           
  7822                           ;Lab12_ex.c: 128: init_INTERRUPT();
  7823  001A04  EC9C  F00E         	call	_init_INTERRUPT	;wreg free
  7824                           
  7825                           ;Lab12_ex.c: 129: FAN = 0;
  7826  001A08  0E00               	movlw	0
  7827  001A0A  6E4F               	movwf	_FAN,c
  7828  001A0C  0012               	return		;funcret
  7829  001A0E                     __end_of_Do_Init:
  7830                           	opt stack 0
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           intcon	equ	0xFF2
  7838                           intcon2	equ	0xFF1
  7839                           postinc0	equ	0xFEE
  7840                           wreg	equ	0xFE8
  7841                           postdec1	equ	0xFE5
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _init_UART *****************
  7851 ;; Defined at:
  7852 ;;		line 103 in file "Lab12_ex.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;		None
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;		None
  7857 ;; Return value:  Size  Location     Type
  7858 ;;		None               void
  7859 ;; Registers used:
  7860 ;;		wreg, status,2, cstack
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;Total ram usage:        0 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; Hardware stack levels required when called:    4
  7873 ;; This function calls:
  7874 ;;		_OpenUSART
  7875 ;; This function is called by:
  7876 ;;		_Do_Init
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           	psect	text37
  7881  001D7A                     __ptext37:
  7882                           	opt stack 0
  7883  001D7A                     _init_UART:
  7884                           	opt stack 25
  7885                           
  7886                           ;Lab12_ex.c: 105: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111
      +                          111 & 0b11111111, 25);
  7887                           
  7888                           ;incstack = 0
  7889  001D7A  0E00               	movlw	0
  7890  001D7C  6E12               	movwf	OpenUSART@spbrg+1,c
  7891  001D7E  0E19               	movlw	25
  7892  001D80  6E11               	movwf	OpenUSART@spbrg,c
  7893  001D82  0E3C               	movlw	60
  7894  001D84  ECA3  F00B         	call	_OpenUSART
  7895                           
  7896                           ;Lab12_ex.c: 106: OSCCON = 0x70;
  7897  001D88  0E70               	movlw	112
  7898  001D8A  6ED3               	movwf	4051,c	;volatile
  7899  001D8C  0012               	return		;funcret
  7900  001D8E                     __end_of_init_UART:
  7901                           	opt stack 0
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           intcon2	equ	0xFF1
  7910                           postinc0	equ	0xFEE
  7911                           wreg	equ	0xFE8
  7912                           postdec1	equ	0xFE5
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function _OpenUSART *****************
  7922 ;; Defined at:
  7923 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  config          1    wreg     unsigned char 
  7926 ;;  spbrg           2   16[COMRAM] unsigned int 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  config          1   18[COMRAM] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;		None               void
  7931 ;; Registers used:
  7932 ;;		wreg, status,2
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7938 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;Total ram usage:        3 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    3
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		_init_UART
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text38
  7953  001746                     __ptext38:
  7954                           	opt stack 0
  7955  001746                     _OpenUSART:
  7956                           	opt stack 25
  7957                           
  7958                           ;incstack = 0
  7959                           ;OpenUSART@config stored from wreg
  7960  001746  6E13               	movwf	OpenUSART@config,c
  7961  001748  0E00               	movlw	0
  7962  00174A  6EAC               	movwf	4012,c	;volatile
  7963  00174C  0E00               	movlw	0
  7964  00174E  6EAB               	movwf	4011,c	;volatile
  7965  001750  A013               	btfss	OpenUSART@config,0,c
  7966  001752  D002               	goto	l3391
  7967  001754  88AC               	bsf	4012,4,c	;volatile
  7968  001756  D000               	goto	l3391
  7969  001758                     l3391:
  7970  001758  A213               	btfss	OpenUSART@config,1,c
  7971  00175A  D003               	goto	l3395
  7972  00175C  8CAC               	bsf	4012,6,c	;volatile
  7973  00175E  8CAB               	bsf	4011,6,c	;volatile
  7974  001760  D000               	goto	l3395
  7975  001762                     l3395:
  7976  001762  A413               	btfss	OpenUSART@config,2,c
  7977  001764  D002               	goto	l3399
  7978  001766  8EAC               	bsf	4012,7,c	;volatile
  7979  001768  D000               	goto	l3399
  7980  00176A                     l3399:
  7981  00176A  A613               	btfss	OpenUSART@config,3,c
  7982  00176C  D002               	goto	l851
  7983  00176E  88AB               	bsf	4011,4,c	;volatile
  7984  001770  D002               	goto	l3403
  7985  001772                     l851:
  7986  001772  8AAB               	bsf	4011,5,c	;volatile
  7987  001774  D000               	goto	l3403
  7988  001776                     l3403:
  7989  001776  B813               	btfsc	OpenUSART@config,4,c
  7990  001778  84AC               	bsf	4012,2,c	;volatile
  7991  00177A  989E               	bcf	3998,4,c	;volatile
  7992  00177C  AA13               	btfss	OpenUSART@config,5,c
  7993  00177E  D002               	goto	l3411
  7994  001780  86AB               	bsf	4011,3,c	;volatile
  7995  001782  D000               	goto	l3411
  7996  001784                     l3411:
  7997  001784  AC13               	btfss	OpenUSART@config,6,c
  7998  001786  D002               	goto	l855
  7999  001788  8A9D               	bsf	3997,5,c	;volatile
  8000  00178A  D001               	goto	l856
  8001  00178C                     l855:
  8002  00178C  9A9D               	bcf	3997,5,c	;volatile
  8003  00178E                     l856:
  8004  00178E  9A9E               	bcf	3998,5,c	;volatile
  8005  001790  AE13               	btfss	OpenUSART@config,7,c
  8006  001792  D002               	goto	l857
  8007  001794  889D               	bsf	3997,4,c	;volatile
  8008  001796  D001               	goto	l858
  8009  001798                     l857:
  8010  001798  989D               	bcf	3997,4,c	;volatile
  8011  00179A                     l858:
  8012  00179A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8013  00179E  5012               	movf	OpenUSART@spbrg+1,w,c
  8014  0017A0  6EB0               	movwf	4016,c	;volatile
  8015  0017A2  8AAC               	bsf	4012,5,c	;volatile
  8016  0017A4  8EAB               	bsf	4011,7,c	;volatile
  8017  0017A6  9C94               	bcf	3988,6,c	;volatile
  8018  0017A8  8E94               	bsf	3988,7,c	;volatile
  8019  0017AA  B8AC               	btfsc	4012,4,c	;volatile
  8020  0017AC  BEAC               	btfsc	4012,7,c	;volatile
  8021  0017AE  D002               	goto	l860
  8022  0017B0  8C94               	bsf	3988,6,c	;volatile
  8023  0017B2  D000               	goto	l860
  8024  0017B4                     l860:
  8025  0017B4  0012               	return		;funcret
  8026  0017B6                     __end_of_OpenUSART:
  8027                           	opt stack 0
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           intcon2	equ	0xFF1
  8036                           postinc0	equ	0xFEE
  8037                           wreg	equ	0xFE8
  8038                           postdec1	equ	0xFE5
  8039                           fsr1l	equ	0xFE1
  8040                           indf2	equ	0xFDF
  8041                           postinc2	equ	0xFDE
  8042                           postdec2	equ	0xFDD
  8043                           fsr2h	equ	0xFDA
  8044                           fsr2l	equ	0xFD9
  8045                           status	equ	0xFD8
  8046                           
  8047 ;; *************** function _init_INTERRUPT *****************
  8048 ;; Defined at:
  8049 ;;		line 15 in file "Interrupt.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;		None
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;		None
  8054 ;; Return value:  Size  Location     Type
  8055 ;;		None               void
  8056 ;; Registers used:
  8057 ;;		wreg, status,2
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;Total ram usage:        0 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; Hardware stack levels required when called:    3
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_Do_Init
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           	psect	text39
  8078  001D38                     __ptext39:
  8079                           	opt stack 0
  8080  001D38                     _init_INTERRUPT:
  8081                           	opt stack 26
  8082                           
  8083                           ;Interrupt.c: 17: INTCONbits.INT0IF = 0;
  8084                           
  8085                           ;incstack = 0
  8086  001D38  92F2               	bcf	intcon,1,c	;volatile
  8087                           
  8088                           ;Interrupt.c: 18: INTCON2bits.INTEDG0 = 0;
  8089  001D3A  9CF1               	bcf	intcon2,6,c	;volatile
  8090                           
  8091                           ;Interrupt.c: 19: INTCONbits.INT0IE = 1;
  8092  001D3C  88F2               	bsf	intcon,4,c	;volatile
  8093                           
  8094                           ;Interrupt.c: 20: TMR1H = 0;
  8095  001D3E  0E00               	movlw	0
  8096  001D40  6ECF               	movwf	4047,c	;volatile
  8097                           
  8098                           ;Interrupt.c: 21: TMR1L = 0;
  8099  001D42  0E00               	movlw	0
  8100  001D44  6ECE               	movwf	4046,c	;volatile
  8101                           
  8102                           ;Interrupt.c: 22: PIR1bits.TMR1IF = 0;
  8103  001D46  909E               	bcf	3998,0,c	;volatile
  8104                           
  8105                           ;Interrupt.c: 23: PIE1bits.TMR1IE = 1;
  8106  001D48  809D               	bsf	3997,0,c	;volatile
  8107                           
  8108                           ;Interrupt.c: 24: INTCONbits.PEIE = 1;
  8109  001D4A  8CF2               	bsf	intcon,6,c	;volatile
  8110                           
  8111                           ;Interrupt.c: 25: INTCONbits.GIE = 1;
  8112  001D4C  8EF2               	bsf	intcon,7,c	;volatile
  8113  001D4E  0012               	return		;funcret
  8114  001D50                     __end_of_init_INTERRUPT:
  8115                           	opt stack 0
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           intcon2	equ	0xFF1
  8124                           postinc0	equ	0xFEE
  8125                           wreg	equ	0xFE8
  8126                           postdec1	equ	0xFE5
  8127                           fsr1l	equ	0xFE1
  8128                           indf2	equ	0xFDF
  8129                           postinc2	equ	0xFDE
  8130                           postdec2	equ	0xFDD
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           
  8135 ;; *************** function _I2C_Init *****************
  8136 ;; Defined at:
  8137 ;;		line 14 in file "I2C_Soft.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  c               4   16[COMRAM] unsigned long 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;		None
  8142 ;; Return value:  Size  Location     Type
  8143 ;;		None               void
  8144 ;; Registers used:
  8145 ;;		wreg, cstack
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;Total ram usage:        4 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    4
  8158 ;; This function calls:
  8159 ;;		_i2cHighScl
  8160 ;;		_i2cHighSda
  8161 ;; This function is called by:
  8162 ;;		_Do_Init
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	text40
  8167  001E1C                     __ptext40:
  8168                           	opt stack 0
  8169  001E1C                     _I2C_Init:
  8170                           	opt stack 25
  8171                           
  8172                           ;I2C_Soft.c: 16: i2cHighScl();
  8173                           
  8174                           ;incstack = 0
  8175  001E1C  EC02  F00F         	call	_i2cHighScl	;wreg free
  8176                           
  8177                           ;I2C_Soft.c: 17: i2cHighSda();
  8178  001E20  EC21  F00F         	call	_i2cHighSda	;wreg free
  8179  001E24  0012               	return		;funcret
  8180  001E26                     __end_of_I2C_Init:
  8181                           	opt stack 0
  8182                           tblptru	equ	0xFF8
  8183                           tblptrh	equ	0xFF7
  8184                           tblptrl	equ	0xFF6
  8185                           tablat	equ	0xFF5
  8186                           prodh	equ	0xFF4
  8187                           prodl	equ	0xFF3
  8188                           intcon	equ	0xFF2
  8189                           intcon2	equ	0xFF1
  8190                           postinc0	equ	0xFEE
  8191                           wreg	equ	0xFE8
  8192                           postdec1	equ	0xFE5
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _DS1621_Init *****************
  8202 ;; Defined at:
  8203 ;;		line 21 in file "I2C_Support.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;		None
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  Device          1   21[COMRAM] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;		None               void
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;Total ram usage:        1 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    6
  8224 ;; This function calls:
  8225 ;;		_I2C_Write_Cmd_Only
  8226 ;;		_I2C_Write_Cmd_Write_Data
  8227 ;; This function is called by:
  8228 ;;		_Do_Init
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           	psect	text41
  8233  001CE4                     __ptext41:
  8234                           	opt stack 0
  8235  001CE4                     _DS1621_Init:
  8236                           	opt stack 23
  8237                           
  8238                           ;I2C_Support.c: 23: char Device = 0x48;
  8239                           
  8240                           ;incstack = 0
  8241  001CE4  0E48               	movlw	72
  8242  001CE6  6E16               	movwf	DS1621_Init@Device,c
  8243                           
  8244                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  8245  001CE8  0EAC               	movlw	172
  8246  001CEA  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8247  001CEC  0E02               	movlw	2
  8248  001CEE  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8249  001CF0  5016               	movf	DS1621_Init@Device,w,c
  8250  001CF2  EC62  F00E         	call	_I2C_Write_Cmd_Write_Data
  8251                           
  8252                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  8253  001CF6  0EEE               	movlw	238
  8254  001CF8  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8255  001CFA  5016               	movf	DS1621_Init@Device,w,c
  8256  001CFC  EC8F  F00E         	call	_I2C_Write_Cmd_Only
  8257  001D00  0012               	return		;funcret
  8258  001D02                     __end_of_DS1621_Init:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           tblptrh	equ	0xFF7
  8262                           tblptrl	equ	0xFF6
  8263                           tablat	equ	0xFF5
  8264                           prodh	equ	0xFF4
  8265                           prodl	equ	0xFF3
  8266                           intcon	equ	0xFF2
  8267                           intcon2	equ	0xFF1
  8268                           postinc0	equ	0xFEE
  8269                           wreg	equ	0xFE8
  8270                           postdec1	equ	0xFE5
  8271                           fsr1l	equ	0xFE1
  8272                           indf2	equ	0xFDF
  8273                           postinc2	equ	0xFDE
  8274                           postdec2	equ	0xFDD
  8275                           fsr2h	equ	0xFDA
  8276                           fsr2l	equ	0xFD9
  8277                           status	equ	0xFD8
  8278                           
  8279 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8280 ;; Defined at:
  8281 ;;		line 152 in file "I2C_Soft.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  Device          1    wreg     unsigned char 
  8284 ;;  Cmd             1   18[COMRAM] unsigned char 
  8285 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  Device          1   20[COMRAM] unsigned char 
  8288 ;; Return value:  Size  Location     Type
  8289 ;;		None               void
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0, cstack
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8297 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;Total ram usage:        3 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    5
  8304 ;; This function calls:
  8305 ;;		_I2C_Start
  8306 ;;		_I2C_Stop
  8307 ;;		_I2C_Write
  8308 ;; This function is called by:
  8309 ;;		_DS1621_Init
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           	psect	text42
  8314  001CC4                     __ptext42:
  8315                           	opt stack 0
  8316  001CC4                     _I2C_Write_Cmd_Write_Data:
  8317                           	opt stack 23
  8318                           
  8319                           ;incstack = 0
  8320                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8321  001CC4  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8322                           
  8323                           ;I2C_Soft.c: 154: I2C_Start();
  8324  001CC6  ECD9  F00E         	call	_I2C_Start	;wreg free
  8325                           
  8326                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  8327  001CCA  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8328  001CCC  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8329  001CCE  ECAD  F00D         	call	_I2C_Write
  8330                           
  8331                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  8332  001CD2  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8333  001CD4  ECAD  F00D         	call	_I2C_Write
  8334                           
  8335                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  8336  001CD8  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8337  001CDA  ECAD  F00D         	call	_I2C_Write
  8338                           
  8339                           ;I2C_Soft.c: 158: I2C_Stop();
  8340  001CDE  ECD0  F00E         	call	_I2C_Stop	;wreg free
  8341  001CE2  0012               	return		;funcret
  8342  001CE4                     __end_of_I2C_Write_Cmd_Write_Data:
  8343                           	opt stack 0
  8344                           tblptru	equ	0xFF8
  8345                           tblptrh	equ	0xFF7
  8346                           tblptrl	equ	0xFF6
  8347                           tablat	equ	0xFF5
  8348                           prodh	equ	0xFF4
  8349                           prodl	equ	0xFF3
  8350                           intcon	equ	0xFF2
  8351                           intcon2	equ	0xFF1
  8352                           postinc0	equ	0xFEE
  8353                           wreg	equ	0xFE8
  8354                           postdec1	equ	0xFE5
  8355                           fsr1l	equ	0xFE1
  8356                           indf2	equ	0xFDF
  8357                           postinc2	equ	0xFDE
  8358                           postdec2	equ	0xFDD
  8359                           fsr2h	equ	0xFDA
  8360                           fsr2l	equ	0xFD9
  8361                           status	equ	0xFD8
  8362                           
  8363 ;; *************** function _I2C_Write_Cmd_Only *****************
  8364 ;; Defined at:
  8365 ;;		line 144 in file "I2C_Soft.c"
  8366 ;; Parameters:    Size  Location     Type
  8367 ;;  Device          1    wreg     unsigned char 
  8368 ;;  Cmd             1   18[COMRAM] unsigned char 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  Device          1   19[COMRAM] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;		None               void
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8380 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;Total ram usage:        2 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    5
  8387 ;; This function calls:
  8388 ;;		_I2C_Start
  8389 ;;		_I2C_Stop
  8390 ;;		_I2C_Write
  8391 ;; This function is called by:
  8392 ;;		_DS1621_Init
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           	psect	text43
  8397  001D1E                     __ptext43:
  8398                           	opt stack 0
  8399  001D1E                     _I2C_Write_Cmd_Only:
  8400                           	opt stack 23
  8401                           
  8402                           ;incstack = 0
  8403                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8404  001D1E  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8405                           
  8406                           ;I2C_Soft.c: 146: I2C_Start();
  8407  001D20  ECD9  F00E         	call	_I2C_Start	;wreg free
  8408                           
  8409                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  8410  001D24  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8411  001D26  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8412  001D28  ECAD  F00D         	call	_I2C_Write
  8413                           
  8414                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  8415  001D2C  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8416  001D2E  ECAD  F00D         	call	_I2C_Write
  8417                           
  8418                           ;I2C_Soft.c: 149: I2C_Stop();
  8419  001D32  ECD0  F00E         	call	_I2C_Stop	;wreg free
  8420  001D36  0012               	return		;funcret
  8421  001D38                     __end_of_I2C_Write_Cmd_Only:
  8422                           	opt stack 0
  8423                           tblptru	equ	0xFF8
  8424                           tblptrh	equ	0xFF7
  8425                           tblptrl	equ	0xFF6
  8426                           tablat	equ	0xFF5
  8427                           prodh	equ	0xFF4
  8428                           prodl	equ	0xFF3
  8429                           intcon	equ	0xFF2
  8430                           intcon2	equ	0xFF1
  8431                           postinc0	equ	0xFEE
  8432                           wreg	equ	0xFE8
  8433                           postdec1	equ	0xFE5
  8434                           fsr1l	equ	0xFE1
  8435                           indf2	equ	0xFDF
  8436                           postinc2	equ	0xFDE
  8437                           postdec2	equ	0xFDD
  8438                           fsr2h	equ	0xFDA
  8439                           fsr2l	equ	0xFD9
  8440                           status	equ	0xFD8
  8441                           
  8442 ;; *************** function _DS3231_Read_Time *****************
  8443 ;; Defined at:
  8444 ;;		line 44 in file "I2C_Support.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;		None
  8449 ;; Return value:  Size  Location     Type
  8450 ;;		None               void
  8451 ;; Registers used:
  8452 ;;		wreg, status,2, status,0, cstack
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;Total ram usage:        0 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    6
  8465 ;; This function calls:
  8466 ;;		_I2C_ReStart
  8467 ;;		_I2C_Read
  8468 ;;		_I2C_Start
  8469 ;;		_I2C_Stop
  8470 ;;		_I2C_Write
  8471 ;; This function is called by:
  8472 ;;		_main
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           	psect	text44
  8477  00187E                     __ptext44:
  8478                           	opt stack 0
  8479  00187E                     _DS3231_Read_Time:
  8480                           	opt stack 24
  8481                           
  8482                           ;I2C_Support.c: 49: I2C_Start();
  8483                           
  8484                           ;incstack = 0
  8485  00187E  ECD9  F00E         	call	_I2C_Start	;wreg free
  8486                           
  8487                           ;I2C_Support.c: 50: I2C_Write((0x68 << 1) | 0);
  8488  001882  0ED0               	movlw	208
  8489  001884  ECAD  F00D         	call	_I2C_Write
  8490                           
  8491                           ;I2C_Support.c: 51: I2C_Write(0x00);
  8492  001888  0E00               	movlw	0
  8493  00188A  ECAD  F00D         	call	_I2C_Write
  8494                           
  8495                           ;I2C_Support.c: 52: I2C_ReStart();
  8496  00188E  ECA8  F00E         	call	_I2C_ReStart	;wreg free
  8497                           
  8498                           ;I2C_Support.c: 53: I2C_Write((0x68 << 1) | 1);
  8499  001892  0ED1               	movlw	209
  8500  001894  ECAD  F00D         	call	_I2C_Write
  8501                           
  8502                           ;I2C_Support.c: 54: second = I2C_Read(1);
  8503  001898  0E01               	movlw	1
  8504  00189A  EC2C  F00D         	call	_I2C_Read
  8505  00189E  6E62               	movwf	_second,c
  8506                           
  8507                           ;I2C_Support.c: 55: minute = I2C_Read(1);
  8508  0018A0  0E01               	movlw	1
  8509  0018A2  EC2C  F00D         	call	_I2C_Read
  8510  0018A6  6E5F               	movwf	_minute,c
  8511                           
  8512                           ;I2C_Support.c: 56: hour = I2C_Read(1);
  8513  0018A8  0E01               	movlw	1
  8514  0018AA  EC2C  F00D         	call	_I2C_Read
  8515  0018AE  6E5D               	movwf	_hour,c
  8516                           
  8517                           ;I2C_Support.c: 57: dow = I2C_Read(1);
  8518  0018B0  0E01               	movlw	1
  8519  0018B2  EC2C  F00D         	call	_I2C_Read
  8520  0018B6  6E5A               	movwf	_dow,c
  8521                           
  8522                           ;I2C_Support.c: 58: day = I2C_Read(1);
  8523  0018B8  0E01               	movlw	1
  8524  0018BA  EC2C  F00D         	call	_I2C_Read
  8525  0018BE  6E59               	movwf	_day,c
  8526                           
  8527                           ;I2C_Support.c: 59: month = I2C_Read(1);
  8528  0018C0  0E01               	movlw	1
  8529  0018C2  EC2C  F00D         	call	_I2C_Read
  8530  0018C6  6E60               	movwf	_month,c
  8531                           
  8532                           ;I2C_Support.c: 60: year = I2C_Read(0);
  8533  0018C8  0E00               	movlw	0
  8534  0018CA  EC2C  F00D         	call	_I2C_Read
  8535  0018CE  6E6C               	movwf	_year,c
  8536                           
  8537                           ;I2C_Support.c: 61: I2C_Stop();
  8538  0018D0  ECD0  F00E         	call	_I2C_Stop	;wreg free
  8539  0018D4  0012               	return		;funcret
  8540  0018D6                     __end_of_DS3231_Read_Time:
  8541                           	opt stack 0
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           intcon	equ	0xFF2
  8549                           intcon2	equ	0xFF1
  8550                           postinc0	equ	0xFEE
  8551                           wreg	equ	0xFE8
  8552                           postdec1	equ	0xFE5
  8553                           fsr1l	equ	0xFE1
  8554                           indf2	equ	0xFDF
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           fsr2h	equ	0xFDA
  8558                           fsr2l	equ	0xFD9
  8559                           status	equ	0xFD8
  8560                           
  8561 ;; *************** function _DS1621_Read_Temp *****************
  8562 ;; Defined at:
  8563 ;;		line 28 in file "I2C_Support.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;		None
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;  Data_Ret        1   21[COMRAM] unsigned char 
  8568 ;; Return value:  Size  Location     Type
  8569 ;;                  2   19[COMRAM] int 
  8570 ;; Registers used:
  8571 ;;		wreg, status,2, status,0, cstack
  8572 ;; Tracked objects:
  8573 ;;		On entry : 0/0
  8574 ;;		On exit  : 0/0
  8575 ;;		Unchanged: 0/0
  8576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8577 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;Total ram usage:        3 bytes
  8582 ;; Hardware stack levels used:    1
  8583 ;; Hardware stack levels required when called:    6
  8584 ;; This function calls:
  8585 ;;		_I2C_ReStart
  8586 ;;		_I2C_Read
  8587 ;;		_I2C_Start
  8588 ;;		_I2C_Stop
  8589 ;;		_I2C_Write
  8590 ;; This function is called by:
  8591 ;;		_main
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           	psect	text45
  8596  001BFA                     __ptext45:
  8597                           	opt stack 0
  8598  001BFA                     _DS1621_Read_Temp:
  8599                           	opt stack 24
  8600                           
  8601                           ;I2C_Support.c: 33: char Data_Ret;
  8602                           ;I2C_Support.c: 34: I2C_Start();
  8603                           
  8604                           ;incstack = 0
  8605  001BFA  ECD9  F00E         	call	_I2C_Start	;wreg free
  8606                           
  8607                           ;I2C_Support.c: 35: I2C_Write((0x48 << 1) | 0);
  8608  001BFE  0E90               	movlw	144
  8609  001C00  ECAD  F00D         	call	_I2C_Write
  8610                           
  8611                           ;I2C_Support.c: 36: I2C_Write(0xAA);
  8612  001C04  0EAA               	movlw	170
  8613  001C06  ECAD  F00D         	call	_I2C_Write
  8614                           
  8615                           ;I2C_Support.c: 37: I2C_ReStart();
  8616  001C0A  ECA8  F00E         	call	_I2C_ReStart	;wreg free
  8617                           
  8618                           ;I2C_Support.c: 38: I2C_Write((0x48 << 1) | 1);
  8619  001C0E  0E91               	movlw	145
  8620  001C10  ECAD  F00D         	call	_I2C_Write
  8621                           
  8622                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
  8623  001C14  0E00               	movlw	0
  8624  001C16  EC2C  F00D         	call	_I2C_Read
  8625  001C1A  6E16               	movwf	DS1621_Read_Temp@Data_Ret,c
  8626                           
  8627                           ;I2C_Support.c: 40: I2C_Stop();
  8628  001C1C  ECD0  F00E         	call	_I2C_Stop	;wreg free
  8629                           
  8630                           ;I2C_Support.c: 41: return Data_Ret;
  8631  001C20  C016  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8632  001C24  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8633  001C26  D000               	goto	l187
  8634  001C28                     l187:
  8635  001C28  0012               	return		;funcret
  8636  001C2A                     __end_of_DS1621_Read_Temp:
  8637                           	opt stack 0
  8638                           tblptru	equ	0xFF8
  8639                           tblptrh	equ	0xFF7
  8640                           tblptrl	equ	0xFF6
  8641                           tablat	equ	0xFF5
  8642                           prodh	equ	0xFF4
  8643                           prodl	equ	0xFF3
  8644                           intcon	equ	0xFF2
  8645                           intcon2	equ	0xFF1
  8646                           postinc0	equ	0xFEE
  8647                           wreg	equ	0xFE8
  8648                           postdec1	equ	0xFE5
  8649                           fsr1l	equ	0xFE1
  8650                           indf2	equ	0xFDF
  8651                           postinc2	equ	0xFDE
  8652                           postdec2	equ	0xFDD
  8653                           fsr2h	equ	0xFDA
  8654                           fsr2l	equ	0xFD9
  8655                           status	equ	0xFD8
  8656                           
  8657 ;; *************** function _I2C_Write *****************
  8658 ;; Defined at:
  8659 ;;		line 41 in file "I2C_Soft.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;  outByte         1    wreg     unsigned char 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  outByte         1   16[COMRAM] unsigned char 
  8664 ;;  n               1   17[COMRAM] unsigned char 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;		None               void
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8678 ;;Total ram usage:        2 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    4
  8681 ;; This function calls:
  8682 ;;		_i2cHighScl
  8683 ;;		_i2cHighSda
  8684 ;;		_i2cLowScl
  8685 ;;		_i2cLowSda
  8686 ;; This function is called by:
  8687 ;;		_I2C_Write_Cmd_Only
  8688 ;;		_I2C_Write_Cmd_Write_Data
  8689 ;;		_DS1621_Read_Temp
  8690 ;;		_DS3231_Read_Time
  8691 ;;		_I2C_Write_Address_Read_One_Byte
  8692 ;;		_I2C_Write_Address_Write_One_Byte
  8693 ;;		_I2C_Write_Cmd_Read_One_Byte
  8694 ;;		_DS3231_Setup_Time
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           	psect	text46
  8699  001B5A                     __ptext46:
  8700                           	opt stack 0
  8701  001B5A                     _I2C_Write:
  8702                           	opt stack 23
  8703                           
  8704                           ;incstack = 0
  8705                           ;I2C_Write@outByte stored from wreg
  8706  001B5A  6E11               	movwf	I2C_Write@outByte,c
  8707                           
  8708                           ;I2C_Soft.c: 43: unsigned char n;
  8709                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
  8710  001B5C  0E00               	movlw	0
  8711  001B5E  6E12               	movwf	I2C_Write@n,c
  8712  001B60                     l1537:
  8713  001B60  0E07               	movlw	7
  8714  001B62  6412               	cpfsgt	I2C_Write@n,c
  8715  001B64  D001               	goto	l107
  8716  001B66  D011               	goto	l1555
  8717  001B68                     l107:
  8718                           
  8719                           ;I2C_Soft.c: 45: {
  8720                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
  8721  001B68  AE11               	btfss	I2C_Write@outByte,7,c
  8722  001B6A  D003               	goto	l1543
  8723  001B6C  EC21  F00F         	call	_i2cHighSda	;wreg free
  8724  001B70  D003               	goto	l1545
  8725  001B72                     l1543:
  8726                           
  8727                           ;I2C_Soft.c: 47: else i2cLowSda();
  8728  001B72  EC18  F00F         	call	_i2cLowSda	;wreg free
  8729  001B76  D000               	goto	l1545
  8730  001B78                     l1545:
  8731                           
  8732                           ;I2C_Soft.c: 48: i2cHighScl();
  8733  001B78  EC02  F00F         	call	_i2cHighScl	;wreg free
  8734                           
  8735                           ;I2C_Soft.c: 49: i2cLowScl();
  8736  001B7C  EC1D  F00F         	call	_i2cLowScl	;wreg free
  8737                           
  8738                           ;I2C_Soft.c: 50: outByte = outByte << 1;
  8739  001B80  5011               	movf	I2C_Write@outByte,w,c
  8740  001B82  2411               	addwf	I2C_Write@outByte,w,c
  8741  001B84  6E11               	movwf	I2C_Write@outByte,c
  8742  001B86  2A12               	incf	I2C_Write@n,f,c
  8743  001B88  D7EB               	goto	l1537
  8744  001B8A                     l1555:
  8745                           
  8746                           ;I2C_Soft.c: 51: }
  8747                           ;I2C_Soft.c: 52: i2cHighSda();
  8748  001B8A  EC21  F00F         	call	_i2cHighSda	;wreg free
  8749                           
  8750                           ;I2C_Soft.c: 53: i2cHighScl();
  8751  001B8E  EC02  F00F         	call	_i2cHighScl	;wreg free
  8752                           
  8753                           ;I2C_Soft.c: 54: i2cLowScl();
  8754  001B92  EC1D  F00F         	call	_i2cLowScl	;wreg free
  8755  001B96  0012               	return		;funcret
  8756  001B98                     __end_of_I2C_Write:
  8757                           	opt stack 0
  8758                           tblptru	equ	0xFF8
  8759                           tblptrh	equ	0xFF7
  8760                           tblptrl	equ	0xFF6
  8761                           tablat	equ	0xFF5
  8762                           prodh	equ	0xFF4
  8763                           prodl	equ	0xFF3
  8764                           intcon	equ	0xFF2
  8765                           intcon2	equ	0xFF1
  8766                           postinc0	equ	0xFEE
  8767                           wreg	equ	0xFE8
  8768                           postdec1	equ	0xFE5
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _I2C_Stop *****************
  8778 ;; Defined at:
  8779 ;;		line 88 in file "I2C_Soft.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;		None               void
  8786 ;; Registers used:
  8787 ;;		wreg, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;Total ram usage:        0 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    4
  8800 ;; This function calls:
  8801 ;;		_i2cHighScl
  8802 ;;		_i2cHighSda
  8803 ;;		_i2cLowScl
  8804 ;;		_i2cLowSda
  8805 ;; This function is called by:
  8806 ;;		_I2C_Write_Cmd_Only
  8807 ;;		_I2C_Write_Cmd_Write_Data
  8808 ;;		_DS1621_Read_Temp
  8809 ;;		_DS3231_Read_Time
  8810 ;;		_I2C_Write_Address_Read_One_Byte
  8811 ;;		_I2C_Write_Address_Write_One_Byte
  8812 ;;		_I2C_Write_Cmd_Read_One_Byte
  8813 ;;		_DS3231_Setup_Time
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           	psect	text47
  8818  001DA0                     __ptext47:
  8819                           	opt stack 0
  8820  001DA0                     _I2C_Stop:
  8821                           	opt stack 23
  8822                           
  8823                           ;I2C_Soft.c: 90: i2cLowScl();
  8824                           
  8825                           ;incstack = 0
  8826  001DA0  EC1D  F00F         	call	_i2cLowScl	;wreg free
  8827                           
  8828                           ;I2C_Soft.c: 91: i2cLowSda();
  8829  001DA4  EC18  F00F         	call	_i2cLowSda	;wreg free
  8830                           
  8831                           ;I2C_Soft.c: 92: i2cHighScl();
  8832  001DA8  EC02  F00F         	call	_i2cHighScl	;wreg free
  8833                           
  8834                           ;I2C_Soft.c: 93: i2cHighSda();
  8835  001DAC  EC21  F00F         	call	_i2cHighSda	;wreg free
  8836  001DB0  0012               	return		;funcret
  8837  001DB2                     __end_of_I2C_Stop:
  8838                           	opt stack 0
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           intcon2	equ	0xFF1
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           postdec1	equ	0xFE5
  8850                           fsr1l	equ	0xFE1
  8851                           indf2	equ	0xFDF
  8852                           postinc2	equ	0xFDE
  8853                           postdec2	equ	0xFDD
  8854                           fsr2h	equ	0xFDA
  8855                           fsr2l	equ	0xFD9
  8856                           status	equ	0xFD8
  8857                           
  8858 ;; *************** function _I2C_Start *****************
  8859 ;; Defined at:
  8860 ;;		line 71 in file "I2C_Soft.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;		None
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;		None
  8865 ;; Return value:  Size  Location     Type
  8866 ;;		None               void
  8867 ;; Registers used:
  8868 ;;		wreg, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;Total ram usage:        0 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    4
  8881 ;; This function calls:
  8882 ;;		_i2cHighScl
  8883 ;;		_i2cHighSda
  8884 ;;		_i2cLowScl
  8885 ;;		_i2cLowSda
  8886 ;; This function is called by:
  8887 ;;		_I2C_Write_Cmd_Only
  8888 ;;		_I2C_Write_Cmd_Write_Data
  8889 ;;		_DS1621_Read_Temp
  8890 ;;		_DS3231_Read_Time
  8891 ;;		_I2C_Write_Address_Read_One_Byte
  8892 ;;		_I2C_Write_Address_Write_One_Byte
  8893 ;;		_I2C_Write_Cmd_Read_One_Byte
  8894 ;;		_DS3231_Setup_Time
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text48
  8899  001DB2                     __ptext48:
  8900                           	opt stack 0
  8901  001DB2                     _I2C_Start:
  8902                           	opt stack 23
  8903                           
  8904                           ;I2C_Soft.c: 73: i2cHighSda();
  8905                           
  8906                           ;incstack = 0
  8907  001DB2  EC21  F00F         	call	_i2cHighSda	;wreg free
  8908                           
  8909                           ;I2C_Soft.c: 74: i2cHighScl();
  8910  001DB6  EC02  F00F         	call	_i2cHighScl	;wreg free
  8911                           
  8912                           ;I2C_Soft.c: 75: i2cLowSda();
  8913  001DBA  EC18  F00F         	call	_i2cLowSda	;wreg free
  8914                           
  8915                           ;I2C_Soft.c: 76: i2cLowScl();
  8916  001DBE  EC1D  F00F         	call	_i2cLowScl	;wreg free
  8917  001DC2  0012               	return		;funcret
  8918  001DC4                     __end_of_I2C_Start:
  8919                           	opt stack 0
  8920                           tblptru	equ	0xFF8
  8921                           tblptrh	equ	0xFF7
  8922                           tblptrl	equ	0xFF6
  8923                           tablat	equ	0xFF5
  8924                           prodh	equ	0xFF4
  8925                           prodl	equ	0xFF3
  8926                           intcon	equ	0xFF2
  8927                           intcon2	equ	0xFF1
  8928                           postinc0	equ	0xFEE
  8929                           wreg	equ	0xFE8
  8930                           postdec1	equ	0xFE5
  8931                           fsr1l	equ	0xFE1
  8932                           indf2	equ	0xFDF
  8933                           postinc2	equ	0xFDE
  8934                           postdec2	equ	0xFDD
  8935                           fsr2h	equ	0xFDA
  8936                           fsr2l	equ	0xFD9
  8937                           status	equ	0xFD8
  8938                           
  8939 ;; *************** function _I2C_Read *****************
  8940 ;; Defined at:
  8941 ;;		line 20 in file "I2C_Soft.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  ack             1    wreg     unsigned char 
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;  ack             1   16[COMRAM] unsigned char 
  8946 ;;  inByte          1   18[COMRAM] unsigned char 
  8947 ;;  n               1   17[COMRAM] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  1    wreg      unsigned char 
  8950 ;; Registers used:
  8951 ;;		wreg, status,2, status,0, cstack
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;Total ram usage:        3 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    5
  8964 ;; This function calls:
  8965 ;;		_i2cAck
  8966 ;;		_i2cHighScl
  8967 ;;		_i2cHighSda
  8968 ;;		_i2cLowScl
  8969 ;;		_i2cNack
  8970 ;; This function is called by:
  8971 ;;		_DS1621_Read_Temp
  8972 ;;		_DS3231_Read_Time
  8973 ;;		_I2C_Write_Address_Read_One_Byte
  8974 ;;		_I2C_Write_Cmd_Read_One_Byte
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           	psect	text49
  8979  001A58                     __ptext49:
  8980                           	opt stack 0
  8981  001A58                     _I2C_Read:
  8982                           	opt stack 24
  8983                           
  8984                           ;incstack = 0
  8985                           ;I2C_Read@ack stored from wreg
  8986  001A58  6E11               	movwf	I2C_Read@ack,c
  8987                           
  8988                           ;I2C_Soft.c: 22: unsigned char inByte, n;
  8989                           ;I2C_Soft.c: 23: i2cHighSda();
  8990  001A5A  EC21  F00F         	call	_i2cHighSda	;wreg free
  8991                           
  8992                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
  8993  001A5E  0E00               	movlw	0
  8994  001A60  6E12               	movwf	I2C_Read@n,c
  8995  001A62                     l1925:
  8996  001A62  0E07               	movlw	7
  8997  001A64  6412               	cpfsgt	I2C_Read@n,c
  8998  001A66  D001               	goto	l1929
  8999  001A68  D00F               	goto	l1943
  9000  001A6A                     l1929:
  9001                           
  9002                           ;I2C_Soft.c: 25: {
  9003                           ;I2C_Soft.c: 26: i2cHighScl();
  9004  001A6A  EC02  F00F         	call	_i2cHighScl	;wreg free
  9005                           
  9006                           ;I2C_Soft.c: 28: if (PORTDbits.RD7)
  9007  001A6E  AE83               	btfss	3971,7,c	;volatile
  9008  001A70  D003               	goto	l1935
  9009                           
  9010                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
  9011  001A72  80D8               	bsf	status,0,c
  9012  001A74  3613               	rlcf	I2C_Read@inByte,f,c
  9013  001A76  D004               	goto	l1937
  9014  001A78                     l1935:
  9015                           
  9016                           ;I2C_Soft.c: 30: else
  9017                           ;I2C_Soft.c: 31: inByte = inByte << 1;
  9018  001A78  5013               	movf	I2C_Read@inByte,w,c
  9019  001A7A  2413               	addwf	I2C_Read@inByte,w,c
  9020  001A7C  6E13               	movwf	I2C_Read@inByte,c
  9021  001A7E  D000               	goto	l1937
  9022  001A80                     l1937:
  9023                           
  9024                           ;I2C_Soft.c: 32: i2cLowScl();
  9025  001A80  EC1D  F00F         	call	_i2cLowScl	;wreg free
  9026  001A84  2A12               	incf	I2C_Read@n,f,c
  9027  001A86  D7ED               	goto	l1925
  9028  001A88                     l1943:
  9029                           
  9030                           ;I2C_Soft.c: 33: }
  9031                           ;I2C_Soft.c: 34: if (ack) i2cAck();
  9032  001A88  5011               	movf	I2C_Read@ack,w,c
  9033  001A8A  B4D8               	btfsc	status,2,c
  9034  001A8C  D003               	goto	l1947
  9035  001A8E  ECE2  F00E         	call	_i2cAck	;wreg free
  9036  001A92  D003               	goto	l1949
  9037  001A94                     l1947:
  9038                           
  9039                           ;I2C_Soft.c: 35: else i2cNack();
  9040  001A94  EC13  F00F         	call	_i2cNack	;wreg free
  9041  001A98  D000               	goto	l1949
  9042  001A9A                     l1949:
  9043                           
  9044                           ;I2C_Soft.c: 38: return(inByte);
  9045  001A9A  5013               	movf	I2C_Read@inByte,w,c
  9046  001A9C  D000               	goto	l104
  9047  001A9E                     l104:
  9048  001A9E  0012               	return		;funcret
  9049  001AA0                     __end_of_I2C_Read:
  9050                           	opt stack 0
  9051                           tblptru	equ	0xFF8
  9052                           tblptrh	equ	0xFF7
  9053                           tblptrl	equ	0xFF6
  9054                           tablat	equ	0xFF5
  9055                           prodh	equ	0xFF4
  9056                           prodl	equ	0xFF3
  9057                           intcon	equ	0xFF2
  9058                           intcon2	equ	0xFF1
  9059                           postinc0	equ	0xFEE
  9060                           wreg	equ	0xFE8
  9061                           postdec1	equ	0xFE5
  9062                           fsr1l	equ	0xFE1
  9063                           indf2	equ	0xFDF
  9064                           postinc2	equ	0xFDE
  9065                           postdec2	equ	0xFDD
  9066                           fsr2h	equ	0xFDA
  9067                           fsr2l	equ	0xFD9
  9068                           status	equ	0xFD8
  9069                           
  9070 ;; *************** function _i2cNack *****************
  9071 ;; Defined at:
  9072 ;;		line 57 in file "I2C_Soft.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;		None
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;		None
  9077 ;; Return value:  Size  Location     Type
  9078 ;;		None               void
  9079 ;; Registers used:
  9080 ;;		wreg, cstack
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;Total ram usage:        0 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; Hardware stack levels required when called:    4
  9093 ;; This function calls:
  9094 ;;		_i2cHighScl
  9095 ;;		_i2cLowScl
  9096 ;; This function is called by:
  9097 ;;		_I2C_Read
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           	psect	text50
  9102  001E26                     __ptext50:
  9103                           	opt stack 0
  9104  001E26                     _i2cNack:
  9105                           	opt stack 24
  9106                           
  9107                           ;I2C_Soft.c: 59: i2cHighScl();
  9108                           
  9109                           ;incstack = 0
  9110  001E26  EC02  F00F         	call	_i2cHighScl	;wreg free
  9111                           
  9112                           ;I2C_Soft.c: 60: i2cLowScl();
  9113  001E2A  EC1D  F00F         	call	_i2cLowScl	;wreg free
  9114  001E2E  0012               	return		;funcret
  9115  001E30                     __end_of_i2cNack:
  9116                           	opt stack 0
  9117                           tblptru	equ	0xFF8
  9118                           tblptrh	equ	0xFF7
  9119                           tblptrl	equ	0xFF6
  9120                           tablat	equ	0xFF5
  9121                           prodh	equ	0xFF4
  9122                           prodl	equ	0xFF3
  9123                           intcon	equ	0xFF2
  9124                           intcon2	equ	0xFF1
  9125                           postinc0	equ	0xFEE
  9126                           wreg	equ	0xFE8
  9127                           postdec1	equ	0xFE5
  9128                           fsr1l	equ	0xFE1
  9129                           indf2	equ	0xFDF
  9130                           postinc2	equ	0xFDE
  9131                           postdec2	equ	0xFDD
  9132                           fsr2h	equ	0xFDA
  9133                           fsr2l	equ	0xFD9
  9134                           status	equ	0xFD8
  9135                           
  9136 ;; *************** function _i2cAck *****************
  9137 ;; Defined at:
  9138 ;;		line 63 in file "I2C_Soft.c"
  9139 ;; Parameters:    Size  Location     Type
  9140 ;;		None
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;		None
  9143 ;; Return value:  Size  Location     Type
  9144 ;;		None               void
  9145 ;; Registers used:
  9146 ;;		wreg, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;Total ram usage:        0 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    4
  9159 ;; This function calls:
  9160 ;;		_i2cHighScl
  9161 ;;		_i2cHighSda
  9162 ;;		_i2cLowScl
  9163 ;;		_i2cLowSda
  9164 ;; This function is called by:
  9165 ;;		_I2C_Read
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           	psect	text51
  9170  001DC4                     __ptext51:
  9171                           	opt stack 0
  9172  001DC4                     _i2cAck:
  9173                           	opt stack 24
  9174                           
  9175                           ;I2C_Soft.c: 65: i2cLowSda();
  9176                           
  9177                           ;incstack = 0
  9178  001DC4  EC18  F00F         	call	_i2cLowSda	;wreg free
  9179                           
  9180                           ;I2C_Soft.c: 66: i2cHighScl();
  9181  001DC8  EC02  F00F         	call	_i2cHighScl	;wreg free
  9182                           
  9183                           ;I2C_Soft.c: 67: i2cLowScl();
  9184  001DCC  EC1D  F00F         	call	_i2cLowScl	;wreg free
  9185                           
  9186                           ;I2C_Soft.c: 68: i2cHighSda();
  9187  001DD0  EC21  F00F         	call	_i2cHighSda	;wreg free
  9188  001DD4  0012               	return		;funcret
  9189  001DD6                     __end_of_i2cAck:
  9190                           	opt stack 0
  9191                           tblptru	equ	0xFF8
  9192                           tblptrh	equ	0xFF7
  9193                           tblptrl	equ	0xFF6
  9194                           tablat	equ	0xFF5
  9195                           prodh	equ	0xFF4
  9196                           prodl	equ	0xFF3
  9197                           intcon	equ	0xFF2
  9198                           intcon2	equ	0xFF1
  9199                           postinc0	equ	0xFEE
  9200                           wreg	equ	0xFE8
  9201                           postdec1	equ	0xFE5
  9202                           fsr1l	equ	0xFE1
  9203                           indf2	equ	0xFDF
  9204                           postinc2	equ	0xFDE
  9205                           postdec2	equ	0xFDD
  9206                           fsr2h	equ	0xFDA
  9207                           fsr2l	equ	0xFD9
  9208                           status	equ	0xFD8
  9209                           
  9210 ;; *************** function _I2C_ReStart *****************
  9211 ;; Defined at:
  9212 ;;		line 79 in file "I2C_Soft.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;		None               void
  9219 ;; Registers used:
  9220 ;;		wreg, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;Total ram usage:        0 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    4
  9233 ;; This function calls:
  9234 ;;		_i2cHighScl
  9235 ;;		_i2cHighSda
  9236 ;;		_i2cLowScl
  9237 ;;		_i2cLowSda
  9238 ;; This function is called by:
  9239 ;;		_DS1621_Read_Temp
  9240 ;;		_DS3231_Read_Time
  9241 ;;		_I2C_Write_Address_Read_One_Byte
  9242 ;;		_I2C_Write_Cmd_Read_One_Byte
  9243 ;; This function uses a non-reentrant model
  9244 ;;
  9245                           
  9246                           	psect	text52
  9247  001D50                     __ptext52:
  9248                           	opt stack 0
  9249  001D50                     _I2C_ReStart:
  9250                           	opt stack 25
  9251                           
  9252                           ;I2C_Soft.c: 81: i2cLowScl();
  9253                           
  9254                           ;incstack = 0
  9255  001D50  EC1D  F00F         	call	_i2cLowScl	;wreg free
  9256                           
  9257                           ;I2C_Soft.c: 82: i2cHighSda();
  9258  001D54  EC21  F00F         	call	_i2cHighSda	;wreg free
  9259                           
  9260                           ;I2C_Soft.c: 83: i2cHighScl();
  9261  001D58  EC02  F00F         	call	_i2cHighScl	;wreg free
  9262                           
  9263                           ;I2C_Soft.c: 84: i2cLowSda();
  9264  001D5C  EC18  F00F         	call	_i2cLowSda	;wreg free
  9265                           
  9266                           ;I2C_Soft.c: 85: i2cLowScl();
  9267  001D60  EC1D  F00F         	call	_i2cLowScl	;wreg free
  9268  001D64  0012               	return		;funcret
  9269  001D66                     __end_of_I2C_ReStart:
  9270                           	opt stack 0
  9271                           tblptru	equ	0xFF8
  9272                           tblptrh	equ	0xFF7
  9273                           tblptrl	equ	0xFF6
  9274                           tablat	equ	0xFF5
  9275                           prodh	equ	0xFF4
  9276                           prodl	equ	0xFF3
  9277                           intcon	equ	0xFF2
  9278                           intcon2	equ	0xFF1
  9279                           postinc0	equ	0xFEE
  9280                           wreg	equ	0xFE8
  9281                           postdec1	equ	0xFE5
  9282                           fsr1l	equ	0xFE1
  9283                           indf2	equ	0xFDF
  9284                           postinc2	equ	0xFDE
  9285                           postdec2	equ	0xFDD
  9286                           fsr2h	equ	0xFDA
  9287                           fsr2l	equ	0xFD9
  9288                           status	equ	0xFD8
  9289                           
  9290 ;; *************** function _i2cLowSda *****************
  9291 ;; Defined at:
  9292 ;;		line 102 in file "I2C_Soft.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;		None
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;		None
  9297 ;; Return value:  Size  Location     Type
  9298 ;;		None               void
  9299 ;; Registers used:
  9300 ;;		None
  9301 ;; Tracked objects:
  9302 ;;		On entry : 0/0
  9303 ;;		On exit  : 0/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;Total ram usage:        0 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    3
  9313 ;; This function calls:
  9314 ;;		Nothing
  9315 ;; This function is called by:
  9316 ;;		_I2C_Write
  9317 ;;		_i2cAck
  9318 ;;		_I2C_Start
  9319 ;;		_I2C_ReStart
  9320 ;;		_I2C_Stop
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           	psect	text53
  9325  001E30                     __ptext53:
  9326                           	opt stack 0
  9327  001E30                     _i2cLowSda:
  9328                           	opt stack 23
  9329                           
  9330                           ;I2C_Soft.c: 104: PORTDbits.RD7 = 0;
  9331                           
  9332                           ;incstack = 0
  9333  001E30  9E83               	bcf	3971,7,c	;volatile
  9334                           
  9335                           ;I2C_Soft.c: 105: TRISDbits.RD7 = 0;
  9336  001E32  9E95               	bcf	3989,7,c	;volatile
  9337                           
  9338                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9339  001E34  D000               	nop2		;2 cycle nop
  9340  001E36  D000               	nop2		;2 cycle nop
  9341  001E38  0012               	return		;funcret
  9342  001E3A                     __end_of_i2cLowSda:
  9343                           	opt stack 0
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           intcon	equ	0xFF2
  9351                           intcon2	equ	0xFF1
  9352                           postinc0	equ	0xFEE
  9353                           wreg	equ	0xFE8
  9354                           postdec1	equ	0xFE5
  9355                           fsr1l	equ	0xFE1
  9356                           indf2	equ	0xFDF
  9357                           postinc2	equ	0xFDE
  9358                           postdec2	equ	0xFDD
  9359                           fsr2h	equ	0xFDA
  9360                           fsr2l	equ	0xFD9
  9361                           status	equ	0xFD8
  9362                           
  9363 ;; *************** function _i2cLowScl *****************
  9364 ;; Defined at:
  9365 ;;		line 115 in file "I2C_Soft.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;		None
  9370 ;; Return value:  Size  Location     Type
  9371 ;;		None               void
  9372 ;; Registers used:
  9373 ;;		None
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;Total ram usage:        0 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    3
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_I2C_Read
  9390 ;;		_I2C_Write
  9391 ;;		_i2cNack
  9392 ;;		_i2cAck
  9393 ;;		_I2C_Start
  9394 ;;		_I2C_ReStart
  9395 ;;		_I2C_Stop
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           	psect	text54
  9400  001E3A                     __ptext54:
  9401                           	opt stack 0
  9402  001E3A                     _i2cLowScl:
  9403                           	opt stack 23
  9404                           
  9405                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
  9406                           
  9407                           ;incstack = 0
  9408  001E3A  9881               	bcf	3969,4,c	;volatile
  9409                           
  9410                           ;I2C_Soft.c: 118: TRISBbits.RB4 = 0;
  9411  001E3C  9893               	bcf	3987,4,c	;volatile
  9412                           
  9413                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9414  001E3E  D000               	nop2		;2 cycle nop
  9415  001E40  0012               	return		;funcret
  9416  001E42                     __end_of_i2cLowScl:
  9417                           	opt stack 0
  9418                           tblptru	equ	0xFF8
  9419                           tblptrh	equ	0xFF7
  9420                           tblptrl	equ	0xFF6
  9421                           tablat	equ	0xFF5
  9422                           prodh	equ	0xFF4
  9423                           prodl	equ	0xFF3
  9424                           intcon	equ	0xFF2
  9425                           intcon2	equ	0xFF1
  9426                           postinc0	equ	0xFEE
  9427                           wreg	equ	0xFE8
  9428                           postdec1	equ	0xFE5
  9429                           fsr1l	equ	0xFE1
  9430                           indf2	equ	0xFDF
  9431                           postinc2	equ	0xFDE
  9432                           postdec2	equ	0xFDD
  9433                           fsr2h	equ	0xFDA
  9434                           fsr2l	equ	0xFD9
  9435                           status	equ	0xFD8
  9436                           
  9437 ;; *************** function _i2cHighSda *****************
  9438 ;; Defined at:
  9439 ;;		line 96 in file "I2C_Soft.c"
  9440 ;; Parameters:    Size  Location     Type
  9441 ;;		None
  9442 ;; Auto vars:     Size  Location     Type
  9443 ;;		None
  9444 ;; Return value:  Size  Location     Type
  9445 ;;		None               void
  9446 ;; Registers used:
  9447 ;;		None
  9448 ;; Tracked objects:
  9449 ;;		On entry : 0/0
  9450 ;;		On exit  : 0/0
  9451 ;;		Unchanged: 0/0
  9452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9457 ;;Total ram usage:        0 bytes
  9458 ;; Hardware stack levels used:    1
  9459 ;; Hardware stack levels required when called:    3
  9460 ;; This function calls:
  9461 ;;		Nothing
  9462 ;; This function is called by:
  9463 ;;		_I2C_Init
  9464 ;;		_I2C_Read
  9465 ;;		_I2C_Write
  9466 ;;		_i2cAck
  9467 ;;		_I2C_Start
  9468 ;;		_I2C_ReStart
  9469 ;;		_I2C_Stop
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text55
  9474  001E42                     __ptext55:
  9475                           	opt stack 0
  9476  001E42                     _i2cHighSda:
  9477                           	opt stack 25
  9478                           
  9479                           ;I2C_Soft.c: 98: TRISDbits.RD7 = 1;
  9480                           
  9481                           ;incstack = 0
  9482  001E42  8E95               	bsf	3989,7,c	;volatile
  9483                           
  9484                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9485  001E44  D000               	nop2		;2 cycle nop
  9486  001E46  D000               	nop2		;2 cycle nop
  9487  001E48  0012               	return		;funcret
  9488  001E4A                     __end_of_i2cHighSda:
  9489                           	opt stack 0
  9490                           tblptru	equ	0xFF8
  9491                           tblptrh	equ	0xFF7
  9492                           tblptrl	equ	0xFF6
  9493                           tablat	equ	0xFF5
  9494                           prodh	equ	0xFF4
  9495                           prodl	equ	0xFF3
  9496                           intcon	equ	0xFF2
  9497                           intcon2	equ	0xFF1
  9498                           postinc0	equ	0xFEE
  9499                           wreg	equ	0xFE8
  9500                           postdec1	equ	0xFE5
  9501                           fsr1l	equ	0xFE1
  9502                           indf2	equ	0xFDF
  9503                           postinc2	equ	0xFDE
  9504                           postdec2	equ	0xFDD
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function _i2cHighScl *****************
  9510 ;; Defined at:
  9511 ;;		line 109 in file "I2C_Soft.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;		None
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;		None
  9516 ;; Return value:  Size  Location     Type
  9517 ;;		None               void
  9518 ;; Registers used:
  9519 ;;		wreg
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;Total ram usage:        0 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    3
  9532 ;; This function calls:
  9533 ;;		Nothing
  9534 ;; This function is called by:
  9535 ;;		_I2C_Init
  9536 ;;		_I2C_Read
  9537 ;;		_I2C_Write
  9538 ;;		_i2cNack
  9539 ;;		_i2cAck
  9540 ;;		_I2C_Start
  9541 ;;		_I2C_ReStart
  9542 ;;		_I2C_Stop
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text56
  9547  001E04                     __ptext56:
  9548                           	opt stack 0
  9549  001E04                     _i2cHighScl:
  9550                           	opt stack 25
  9551                           
  9552                           ;I2C_Soft.c: 111: TRISBbits.RB4 = 1;
  9553                           
  9554                           ;incstack = 0
  9555  001E04  8893               	bsf	3987,4,c	;volatile
  9556                           
  9557                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9558  001E06  0E06               	movlw	6
  9559  001E08                     u4557:
  9560  001E08  2EE8               	decfsz	wreg,f,c
  9561  001E0A  D7FE               	goto	u4557
  9562  001E0C  D000               	nop2		;nop
  9563  001E0E  0012               	return		;funcret
  9564  001E10                     __end_of_i2cHighScl:
  9565                           	opt stack 0
  9566                           tblptru	equ	0xFF8
  9567                           tblptrh	equ	0xFF7
  9568                           tblptrl	equ	0xFF6
  9569                           tablat	equ	0xFF5
  9570                           prodh	equ	0xFF4
  9571                           prodl	equ	0xFF3
  9572                           intcon	equ	0xFF2
  9573                           intcon2	equ	0xFF1
  9574                           postinc0	equ	0xFEE
  9575                           wreg	equ	0xFE8
  9576                           postdec1	equ	0xFE5
  9577                           fsr1l	equ	0xFE1
  9578                           indf2	equ	0xFDF
  9579                           postinc2	equ	0xFDE
  9580                           postdec2	equ	0xFDD
  9581                           fsr2h	equ	0xFDA
  9582                           fsr2l	equ	0xFD9
  9583                           status	equ	0xFD8
  9584                           
  9585 ;; *************** function _chkisr *****************
  9586 ;; Defined at:
  9587 ;;		line 28 in file "Interrupt.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;		None
  9592 ;; Return value:  Size  Location     Type
  9593 ;;		None               void
  9594 ;; Registers used:
  9595 ;;		wreg, status,2, status,0, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;Total ram usage:       14 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    2
  9608 ;; This function calls:
  9609 ;;		_INT0_isr
  9610 ;;		_TIMER1_isr
  9611 ;; This function is called by:
  9612 ;;		Interrupt level 2
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           	psect	intcode
  9617  000008                     __pintcode:
  9618                           	opt stack 0
  9619  000008                     _chkisr:
  9620                           	opt stack 20
  9621                           
  9622                           ;incstack = 0
  9623  000008  CFFA F003          	movff	pclath,??_chkisr
  9624  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9625  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9626  000014  ED28  F00B         	call	int_func,f	;refresh shadow registers
  9627                           pclatu	equ	0xFFB
  9628                           pclath	equ	0xFFA
  9629                           tblptru	equ	0xFF8
  9630                           tblptrh	equ	0xFF7
  9631                           tblptrl	equ	0xFF6
  9632                           tablat	equ	0xFF5
  9633                           prodh	equ	0xFF4
  9634                           prodl	equ	0xFF3
  9635                           intcon	equ	0xFF2
  9636                           intcon2	equ	0xFF1
  9637                           postinc0	equ	0xFEE
  9638                           fsr0l	equ	0xFE9
  9639                           wreg	equ	0xFE8
  9640                           postdec1	equ	0xFE5
  9641                           fsr1l	equ	0xFE1
  9642                           indf2	equ	0xFDF
  9643                           postinc2	equ	0xFDE
  9644                           postdec2	equ	0xFDD
  9645                           fsr2h	equ	0xFDA
  9646                           fsr2l	equ	0xFD9
  9647                           status	equ	0xFD8
  9648                           
  9649                           	psect	intcode_body
  9650  001650                     __pintcode_body:
  9651                           	opt stack 20
  9652  001650                     int_func:
  9653                           	opt stack 20
  9654  001650  0006               	pop		; remove dummy address from shadow register refresh
  9655  001652  CFEA F006          	movff	fsr0h,??_chkisr+3
  9656  001656  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9657  00165A  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9658  00165E  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9659  001662  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9660  001666  CFF3 F00B          	movff	prodl,??_chkisr+8
  9661  00166A  CFF4 F00C          	movff	prodh,??_chkisr+9
  9662  00166E  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9663  001672  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9664  001676  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9665  00167A  CFF5 F010          	movff	tablat,??_chkisr+13
  9666                           
  9667                           ;Interrupt.c: 30: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9668  00167E  A09E               	btfss	3998,0,c	;volatile
  9669  001680  D003               	goto	i2l2881
  9670  001682  EC08  F00F         	call	_TIMER1_isr	;wreg free
  9671  001686  D000               	goto	i2l2881
  9672  001688                     i2l2881:
  9673                           
  9674                           ;Interrupt.c: 31: if (INTCONbits.INT0IF == 1) INT0_isr();
  9675  001688  A2F2               	btfss	intcon,1,c	;volatile
  9676  00168A  D003               	goto	i2l235
  9677  00168C  EC6D  F005         	call	_INT0_isr	;wreg free
  9678  001690  D000               	goto	i2l235
  9679  001692                     i2l235:
  9680  001692  C010  FFF5         	movff	??_chkisr+13,tablat
  9681  001696  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9682  00169A  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9683  00169E  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9684  0016A2  C00C  FFF4         	movff	??_chkisr+9,prodh
  9685  0016A6  C00B  FFF3         	movff	??_chkisr+8,prodl
  9686  0016AA  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9687  0016AE  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9688  0016B2  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9689  0016B6  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9690  0016BA  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9691  0016BE  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9692  0016C2  C004  FFFB         	movff	??_chkisr+1,pclatu
  9693  0016C6  C003  FFFA         	movff	??_chkisr,pclath
  9694  0016CA  0011               	retfie		f
  9695  0016CC                     __end_of_chkisr:
  9696                           	opt stack 0
  9697                           pclatu	equ	0xFFB
  9698                           pclath	equ	0xFFA
  9699                           tblptru	equ	0xFF8
  9700                           tblptrh	equ	0xFF7
  9701                           tblptrl	equ	0xFF6
  9702                           tablat	equ	0xFF5
  9703                           prodh	equ	0xFF4
  9704                           prodl	equ	0xFF3
  9705                           intcon	equ	0xFF2
  9706                           intcon2	equ	0xFF1
  9707                           postinc0	equ	0xFEE
  9708                           fsr0h	equ	0xFEA
  9709                           fsr0l	equ	0xFE9
  9710                           wreg	equ	0xFE8
  9711                           postdec1	equ	0xFE5
  9712                           fsr1h	equ	0xFE2
  9713                           fsr1l	equ	0xFE1
  9714                           indf2	equ	0xFDF
  9715                           postinc2	equ	0xFDE
  9716                           postdec2	equ	0xFDD
  9717                           fsr2h	equ	0xFDA
  9718                           fsr2l	equ	0xFD9
  9719                           status	equ	0xFD8
  9720                           
  9721 ;; *************** function _TIMER1_isr *****************
  9722 ;; Defined at:
  9723 ;;		line 34 in file "Interrupt.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;		None
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;		None
  9728 ;; Return value:  Size  Location     Type
  9729 ;;		None               void
  9730 ;; Registers used:
  9731 ;;		wreg, status,2
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;Total ram usage:        0 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		_chkisr
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           	psect	text58
  9751  001E10                     __ptext58:
  9752                           	opt stack 0
  9753  001E10                     _TIMER1_isr:
  9754                           	opt stack 21
  9755                           
  9756                           ;Interrupt.c: 36: Nec_state = 0;
  9757                           
  9758                           ;incstack = 0
  9759  001E10  0E00               	movlw	0
  9760  001E12  6E51               	movwf	_Nec_state,c
  9761                           
  9762                           ;Interrupt.c: 37: INTCON2bits.INTEDG0 = 0;
  9763  001E14  9CF1               	bcf	intcon2,6,c	;volatile
  9764                           
  9765                           ;Interrupt.c: 38: T1CONbits.TMR1ON = 0;
  9766  001E16  90CD               	bcf	4045,0,c	;volatile
  9767                           
  9768                           ;Interrupt.c: 39: PIR1bits.TMR1IF = 0;
  9769  001E18  909E               	bcf	3998,0,c	;volatile
  9770  001E1A  0012               	return		;funcret
  9771  001E1C                     __end_of_TIMER1_isr:
  9772                           	opt stack 0
  9773                           pclatu	equ	0xFFB
  9774                           pclath	equ	0xFFA
  9775                           tblptru	equ	0xFF8
  9776                           tblptrh	equ	0xFF7
  9777                           tblptrl	equ	0xFF6
  9778                           tablat	equ	0xFF5
  9779                           prodh	equ	0xFF4
  9780                           prodl	equ	0xFF3
  9781                           intcon	equ	0xFF2
  9782                           intcon2	equ	0xFF1
  9783                           postinc0	equ	0xFEE
  9784                           fsr0h	equ	0xFEA
  9785                           fsr0l	equ	0xFE9
  9786                           wreg	equ	0xFE8
  9787                           postdec1	equ	0xFE5
  9788                           fsr1h	equ	0xFE2
  9789                           fsr1l	equ	0xFE1
  9790                           indf2	equ	0xFDF
  9791                           postinc2	equ	0xFDE
  9792                           postdec2	equ	0xFDD
  9793                           fsr2h	equ	0xFDA
  9794                           fsr2l	equ	0xFD9
  9795                           status	equ	0xFD8
  9796                           
  9797 ;; *************** function _INT0_isr *****************
  9798 ;; Defined at:
  9799 ;;		line 48 in file "Interrupt.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;		None
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;		None
  9804 ;; Return value:  Size  Location     Type
  9805 ;;		None               void
  9806 ;; Registers used:
  9807 ;;		wreg, status,2, status,0, cstack
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;Total ram usage:        2 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:    1
  9820 ;; This function calls:
  9821 ;;		_force_nec_state0
  9822 ;; This function is called by:
  9823 ;;		_chkisr
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text59
  9828  000ADA                     __ptext59:
  9829                           	opt stack 0
  9830  000ADA                     _INT0_isr:
  9831                           	opt stack 20
  9832                           
  9833                           ;Interrupt.c: 50: INTCONbits.INT0IF = 0;
  9834                           
  9835                           ;incstack = 0
  9836  000ADA  92F2               	bcf	intcon,1,c	;volatile
  9837                           
  9838                           ;Interrupt.c: 51: if (Nec_state != 0)
  9839  000ADC  5051               	movf	_Nec_state,w,c
  9840  000ADE  B4D8               	btfsc	status,2,c
  9841  000AE0  D093               	goto	i2l2611
  9842                           
  9843                           ;Interrupt.c: 52: {
  9844                           ;Interrupt.c: 53: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9845  000AE2  50CE               	movf	4046,w,c	;volatile
  9846  000AE4  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9847  000AE8  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9848  000AEA  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9849  000AEE  6A01               	clrf	??_INT0_isr,c
  9850  000AF0  1001               	iorwf	??_INT0_isr,w,c
  9851  000AF2  6E45               	movwf	_Time_Elapsed,c
  9852  000AF4  5002               	movf	??_INT0_isr+1,w,c
  9853  000AF6  6E46               	movwf	_Time_Elapsed+1,c
  9854                           
  9855                           ;Interrupt.c: 54: TMR1H = 0;
  9856  000AF8  0E00               	movlw	0
  9857  000AFA  6ECF               	movwf	4047,c	;volatile
  9858                           
  9859                           ;Interrupt.c: 55: TMR1L = 0;
  9860  000AFC  0E00               	movlw	0
  9861  000AFE  6ECE               	movwf	4046,c	;volatile
  9862                           
  9863                           ;Interrupt.c: 56: }
  9864                           ;Interrupt.c: 58: switch(Nec_state)
  9865  000B00  D083               	goto	i2l2611
  9866  000B02                     i2l2549:
  9867                           
  9868                           ;Interrupt.c: 61: {
  9869                           ;Interrupt.c: 63: TMR1H = 0;
  9870  000B02  0E00               	movlw	0
  9871  000B04  6ECF               	movwf	4047,c	;volatile
  9872                           
  9873                           ;Interrupt.c: 64: TMR1L = 0;
  9874  000B06  0E00               	movlw	0
  9875  000B08  6ECE               	movwf	4046,c	;volatile
  9876                           
  9877                           ;Interrupt.c: 65: PIR1bits.TMR1IF = 0;
  9878  000B0A  909E               	bcf	3998,0,c	;volatile
  9879                           
  9880                           ;Interrupt.c: 66: T1CON= 0x90;
  9881  000B0C  0E90               	movlw	144
  9882  000B0E  6ECD               	movwf	4045,c	;volatile
  9883                           
  9884                           ;Interrupt.c: 67: T1CONbits.TMR1ON = 1;
  9885  000B10  80CD               	bsf	4045,0,c	;volatile
  9886                           
  9887                           ;Interrupt.c: 68: bit_count = 0;
  9888  000B12  0E00               	movlw	0
  9889  000B14  6E57               	movwf	_bit_count,c
  9890                           
  9891                           ;Interrupt.c: 69: Nec_code = 0;
  9892  000B16  0E00               	movlw	0
  9893  000B18  6E3B               	movwf	_Nec_code,c
  9894  000B1A  0E00               	movlw	0
  9895  000B1C  6E3C               	movwf	_Nec_code+1,c
  9896  000B1E  0E00               	movlw	0
  9897  000B20  6E3D               	movwf	_Nec_code+2,c
  9898  000B22  0E00               	movlw	0
  9899  000B24  6E3E               	movwf	_Nec_code+3,c
  9900                           
  9901                           ;Interrupt.c: 70: Nec_state = 1;
  9902  000B26  0E01               	movlw	1
  9903  000B28  D01F               	goto	L2
  9904  000B2A                     i2l2555:
  9905                           
  9906                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 1;
  9907  000B2A  8CF1               	bsf	intcon2,6,c	;volatile
  9908                           
  9909                           ;Interrupt.c: 72: return;
  9910  000B2C  D07E               	goto	i2l247
  9911  000B2E                     i2l2559:
  9912                           
  9913                           ;Interrupt.c: 76: {
  9914                           ;Interrupt.c: 77: if((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
  9915  000B2E  0E35               	movlw	53
  9916  000B30  5C45               	subwf	_Time_Elapsed,w,c
  9917  000B32  0E21               	movlw	33
  9918  000B34  5846               	subwfb	_Time_Elapsed+1,w,c
  9919  000B36  A0D8               	btfss	status,0,c
  9920  000B38  D078               	goto	i2l247
  9921  000B3A  0E1C               	movlw	28
  9922  000B3C  5C45               	subwf	_Time_Elapsed,w,c
  9923  000B3E  0E25               	movlw	37
  9924  000B40  5846               	subwfb	_Time_Elapsed+1,w,c
  9925  000B42  B0D8               	btfsc	status,0,c
  9926  000B44  D072               	goto	i2l247
  9927                           
  9928                           ;Interrupt.c: 78: {
  9929                           ;Interrupt.c: 79: Nec_state = 2;
  9930  000B46  0E02               	movlw	2
  9931  000B48  D01F               	goto	L3
  9932  000B4A                     i2l2565:
  9933                           
  9934                           ;Interrupt.c: 80: INTCON2bits.INTEDG0 = 0;
  9935  000B4A  9CF1               	bcf	intcon2,6,c	;volatile
  9936                           
  9937                           ;Interrupt.c: 81: }
  9938                           ;Interrupt.c: 82: return;
  9939  000B4C  D06E               	goto	i2l247
  9940  000B4E                     i2l2569:
  9941                           
  9942                           ;Interrupt.c: 86: {
  9943                           ;Interrupt.c: 87: if((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
  9944  000B4E  0EA1               	movlw	161
  9945  000B50  5C45               	subwf	_Time_Elapsed,w,c
  9946  000B52  0E0F               	movlw	15
  9947  000B54  5846               	subwfb	_Time_Elapsed+1,w,c
  9948  000B56  A0D8               	btfss	status,0,c
  9949  000B58  D068               	goto	i2l247
  9950  000B5A  0E88               	movlw	136
  9951  000B5C  5C45               	subwf	_Time_Elapsed,w,c
  9952  000B5E  0E13               	movlw	19
  9953  000B60  5846               	subwfb	_Time_Elapsed+1,w,c
  9954  000B62  B0D8               	btfsc	status,0,c
  9955  000B64  D062               	goto	i2l247
  9956                           
  9957                           ;Interrupt.c: 88: {
  9958                           ;Interrupt.c: 89: Nec_state = 3;
  9959  000B66  0E03               	movlw	3
  9960  000B68                     L2:
  9961  000B68  6E51               	movwf	_Nec_state,c
  9962  000B6A  D7DF               	goto	i2l2555
  9963                           
  9964                           ;Interrupt.c: 91: }
  9965                           ;Interrupt.c: 92: return;
  9966                           
  9967                           ;Interrupt.c: 90: INTCON2bits.INTEDG0 = 1;
  9968  000B6C  D05E               	goto	i2l247
  9969  000B6E                     i2l2579:
  9970                           
  9971                           ;Interrupt.c: 96: {
  9972                           ;Interrupt.c: 97: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  9973  000B6E  0E91               	movlw	145
  9974  000B70  5C45               	subwf	_Time_Elapsed,w,c
  9975  000B72  0E01               	movlw	1
  9976  000B74  5846               	subwfb	_Time_Elapsed+1,w,c
  9977  000B76  A0D8               	btfss	status,0,c
  9978  000B78  D058               	goto	i2l247
  9979  000B7A  0E08               	movlw	8
  9980  000B7C  5C45               	subwf	_Time_Elapsed,w,c
  9981  000B7E  0E07               	movlw	7
  9982  000B80  5846               	subwfb	_Time_Elapsed+1,w,c
  9983  000B82  B0D8               	btfsc	status,0,c
  9984  000B84  D052               	goto	i2l247
  9985                           
  9986                           ;Interrupt.c: 98: {
  9987                           ;Interrupt.c: 99: Nec_state = 4;
  9988  000B86  0E04               	movlw	4
  9989  000B88                     L3:
  9990  000B88  6E51               	movwf	_Nec_state,c
  9991  000B8A  D7DF               	goto	i2l2565
  9992                           
  9993                           ;Interrupt.c: 101: }
  9994                           ;Interrupt.c: 102: return;
  9995                           
  9996                           ;Interrupt.c: 100: INTCON2bits.INTEDG0 = 0;
  9997  000B8C  D04E               	goto	i2l247
  9998  000B8E                     i2l2589:
  9999                           
 10000                           ;Interrupt.c: 106: {
 10001                           ;Interrupt.c: 107: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
 10002  000B8E  0E91               	movlw	145
 10003  000B90  5C45               	subwf	_Time_Elapsed,w,c
 10004  000B92  0E01               	movlw	1
 10005  000B94  5846               	subwfb	_Time_Elapsed+1,w,c
 10006  000B96  A0D8               	btfss	status,0,c
 10007  000B98  D032               	goto	i2l2603
 10008  000B9A  0E08               	movlw	8
 10009  000B9C  5C45               	subwf	_Time_Elapsed,w,c
 10010  000B9E  0E07               	movlw	7
 10011  000BA0  5846               	subwfb	_Time_Elapsed+1,w,c
 10012  000BA2  B0D8               	btfsc	status,0,c
 10013  000BA4  D02C               	goto	i2l2603
 10014                           
 10015                           ;Interrupt.c: 108: {
 10016                           ;Interrupt.c: 109: Nec_code = Nec_code << 1;
 10017  000BA6  90D8               	bcf	status,0,c
 10018  000BA8  343B               	rlcf	_Nec_code,w,c
 10019  000BAA  6E3B               	movwf	_Nec_code,c
 10020  000BAC  343C               	rlcf	_Nec_code+1,w,c
 10021  000BAE  6E3C               	movwf	_Nec_code+1,c
 10022  000BB0  343D               	rlcf	_Nec_code+2,w,c
 10023  000BB2  6E3D               	movwf	_Nec_code+2,c
 10024  000BB4  343E               	rlcf	_Nec_code+3,w,c
 10025  000BB6  6E3E               	movwf	_Nec_code+3,c
 10026                           
 10027                           ;Interrupt.c: 110: if(Time_Elapsed > 1000)
 10028  000BB8  0EE9               	movlw	233
 10029  000BBA  5C45               	subwf	_Time_Elapsed,w,c
 10030  000BBC  0E03               	movlw	3
 10031  000BBE  5846               	subwfb	_Time_Elapsed+1,w,c
 10032  000BC0  A0D8               	btfss	status,0,c
 10033  000BC2  D00C               	goto	i2l256
 10034                           
 10035                           ;Interrupt.c: 111: {
 10036                           ;Interrupt.c: 112: Nec_code = Nec_code + 1;
 10037  000BC4  0E01               	movlw	1
 10038  000BC6  243B               	addwf	_Nec_code,w,c
 10039  000BC8  6E3B               	movwf	_Nec_code,c
 10040  000BCA  0E00               	movlw	0
 10041  000BCC  203C               	addwfc	_Nec_code+1,w,c
 10042  000BCE  6E3C               	movwf	_Nec_code+1,c
 10043  000BD0  0E00               	movlw	0
 10044  000BD2  203D               	addwfc	_Nec_code+2,w,c
 10045  000BD4  6E3D               	movwf	_Nec_code+2,c
 10046  000BD6  0E00               	movlw	0
 10047  000BD8  203E               	addwfc	_Nec_code+3,w,c
 10048  000BDA  6E3E               	movwf	_Nec_code+3,c
 10049  000BDC                     i2l256:
 10050                           
 10051                           ;Interrupt.c: 113: }
 10052                           ;Interrupt.c: 114: bit_count = bit_count + 1;
 10053  000BDC  2857               	incf	_bit_count,w,c
 10054  000BDE  6E57               	movwf	_bit_count,c
 10055                           
 10056                           ;Interrupt.c: 115: if(bit_count > 31)
 10057  000BE0  0E1F               	movlw	31
 10058  000BE2  6457               	cpfsgt	_bit_count,c
 10059  000BE4  D009               	goto	i2l257
 10060                           
 10061                           ;Interrupt.c: 116: {
 10062                           ;Interrupt.c: 117: nec_ok = 1;
 10063  000BE6  0E00               	movlw	0
 10064  000BE8  6E48               	movwf	_nec_ok+1,c
 10065  000BEA  0E01               	movlw	1
 10066  000BEC  6E47               	movwf	_nec_ok,c
 10067                           
 10068                           ;Interrupt.c: 118: Nec_code1 = (char) ((Nec_code >> 8));
 10069  000BEE  C03C  F050         	movff	_Nec_code+1,_Nec_code1
 10070                           
 10071                           ;Interrupt.c: 119: INTCONbits.INT0IE = 0;
 10072  000BF2  98F2               	bcf	intcon,4,c	;volatile
 10073                           
 10074                           ;Interrupt.c: 120: Nec_state = 0;
 10075  000BF4  0E00               	movlw	0
 10076  000BF6  6E51               	movwf	_Nec_state,c
 10077  000BF8                     i2l257:
 10078                           
 10079                           ;Interrupt.c: 121: }
 10080                           ;Interrupt.c: 122: Nec_state = 3;
 10081  000BF8  0E03               	movlw	3
 10082  000BFA  6E51               	movwf	_Nec_state,c
 10083                           
 10084                           ;Interrupt.c: 123: }
 10085  000BFC  D796               	goto	i2l2555
 10086  000BFE                     i2l2603:
 10087                           
 10088                           ;Interrupt.c: 124: else
 10089                           ;Interrupt.c: 125: {
 10090                           ;Interrupt.c: 126: force_nec_state0();
 10091  000BFE  EC25  F00F         	call	_force_nec_state0	;wreg free
 10092  000C02  D793               	goto	i2l2555
 10093  000C04  D792               	goto	i2l2555
 10094                           
 10095                           ;Interrupt.c: 130: }
 10096                           ;Interrupt.c: 131: }
 10097                           
 10098                           ;Interrupt.c: 129: return;
 10099                           
 10100                           ;Interrupt.c: 127: }
 10101                           ;Interrupt.c: 128: INTCON2bits.INTEDG0 = 1;
 10102  000C06  D011               	goto	i2l247
 10103  000C08                     i2l2611:
 10104  000C08  5051               	movf	_Nec_state,w,c
 10105                           
 10106                           ; Switch size 1, requested type "space"
 10107                           ; Number of cases is 5, Range of values is 0 to 4
 10108                           ; switch strategies available:
 10109                           ; Name         Instructions Cycles
 10110                           ; simple_byte           16     9 (average)
 10111                           ;	Chosen strategy is simple_byte
 10112  000C0A  0A00               	xorlw	0	; case 0
 10113  000C0C  B4D8               	btfsc	status,2,c
 10114  000C0E  D779               	goto	i2l2549
 10115  000C10  0A01               	xorlw	1	; case 1
 10116  000C12  B4D8               	btfsc	status,2,c
 10117  000C14  D78C               	goto	i2l2559
 10118  000C16  0A03               	xorlw	3	; case 2
 10119  000C18  B4D8               	btfsc	status,2,c
 10120  000C1A  D799               	goto	i2l2569
 10121  000C1C  0A01               	xorlw	1	; case 3
 10122  000C1E  B4D8               	btfsc	status,2,c
 10123  000C20  D7A6               	goto	i2l2579
 10124  000C22  0A07               	xorlw	7	; case 4
 10125  000C24  B4D8               	btfsc	status,2,c
 10126  000C26  D7B3               	goto	i2l2589
 10127  000C28  D000               	goto	i2l247
 10128  000C2A                     i2l247:
 10129  000C2A  0012               	return		;funcret
 10130  000C2C                     __end_of_INT0_isr:
 10131                           	opt stack 0
 10132                           pclatu	equ	0xFFB
 10133                           pclath	equ	0xFFA
 10134                           tblptru	equ	0xFF8
 10135                           tblptrh	equ	0xFF7
 10136                           tblptrl	equ	0xFF6
 10137                           tablat	equ	0xFF5
 10138                           prodh	equ	0xFF4
 10139                           prodl	equ	0xFF3
 10140                           intcon	equ	0xFF2
 10141                           intcon2	equ	0xFF1
 10142                           postinc0	equ	0xFEE
 10143                           fsr0h	equ	0xFEA
 10144                           fsr0l	equ	0xFE9
 10145                           wreg	equ	0xFE8
 10146                           postdec1	equ	0xFE5
 10147                           fsr1h	equ	0xFE2
 10148                           fsr1l	equ	0xFE1
 10149                           indf2	equ	0xFDF
 10150                           postinc2	equ	0xFDE
 10151                           postdec2	equ	0xFDD
 10152                           fsr2h	equ	0xFDA
 10153                           fsr2l	equ	0xFD9
 10154                           status	equ	0xFD8
 10155                           
 10156 ;; *************** function _force_nec_state0 *****************
 10157 ;; Defined at:
 10158 ;;		line 42 in file "Interrupt.c"
 10159 ;; Parameters:    Size  Location     Type
 10160 ;;		None
 10161 ;; Auto vars:     Size  Location     Type
 10162 ;;		None
 10163 ;; Return value:  Size  Location     Type
 10164 ;;		None               void
 10165 ;; Registers used:
 10166 ;;		wreg, status,2
 10167 ;; Tracked objects:
 10168 ;;		On entry : 0/0
 10169 ;;		On exit  : 0/0
 10170 ;;		Unchanged: 0/0
 10171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10176 ;;Total ram usage:        0 bytes
 10177 ;; Hardware stack levels used:    1
 10178 ;; This function calls:
 10179 ;;		Nothing
 10180 ;; This function is called by:
 10181 ;;		_INT0_isr
 10182 ;; This function uses a non-reentrant model
 10183 ;;
 10184                           
 10185                           	psect	text60
 10186  001E4A                     __ptext60:
 10187                           	opt stack 0
 10188  001E4A                     _force_nec_state0:
 10189                           	opt stack 20
 10190                           
 10191                           ;Interrupt.c: 44: Nec_state=0;
 10192                           
 10193                           ;incstack = 0
 10194  001E4A  0E00               	movlw	0
 10195  001E4C  6E51               	movwf	_Nec_state,c
 10196                           
 10197                           ;Interrupt.c: 45: T1CONbits.TMR1ON = 0;
 10198  001E4E  90CD               	bcf	4045,0,c	;volatile
 10199  001E50  0012               	return		;funcret
 10200  001E52                     __end_of_force_nec_state0:
 10201                           	opt stack 0
 10202                           pclatu	equ	0xFFB
 10203                           pclath	equ	0xFFA
 10204                           tblptru	equ	0xFF8
 10205                           tblptrh	equ	0xFF7
 10206                           tblptrl	equ	0xFF6
 10207                           tablat	equ	0xFF5
 10208                           prodh	equ	0xFF4
 10209                           prodl	equ	0xFF3
 10210                           intcon	equ	0xFF2
 10211                           intcon2	equ	0xFF1
 10212                           postinc0	equ	0xFEE
 10213                           fsr0h	equ	0xFEA
 10214                           fsr0l	equ	0xFE9
 10215                           wreg	equ	0xFE8
 10216                           postdec1	equ	0xFE5
 10217                           fsr1h	equ	0xFE2
 10218                           fsr1l	equ	0xFE1
 10219                           indf2	equ	0xFDF
 10220                           postinc2	equ	0xFDE
 10221                           postdec2	equ	0xFDD
 10222                           fsr2h	equ	0xFDA
 10223                           fsr2l	equ	0xFD9
 10224                           status	equ	0xFD8
 10225                           pclatu	equ	0xFFB
 10226                           pclath	equ	0xFFA
 10227                           tblptru	equ	0xFF8
 10228                           tblptrh	equ	0xFF7
 10229                           tblptrl	equ	0xFF6
 10230                           tablat	equ	0xFF5
 10231                           prodh	equ	0xFF4
 10232                           prodl	equ	0xFF3
 10233                           intcon	equ	0xFF2
 10234                           intcon2	equ	0xFF1
 10235                           postinc0	equ	0xFEE
 10236                           fsr0h	equ	0xFEA
 10237                           fsr0l	equ	0xFE9
 10238                           wreg	equ	0xFE8
 10239                           postdec1	equ	0xFE5
 10240                           fsr1h	equ	0xFE2
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           postdec2	equ	0xFDD
 10245                           fsr2h	equ	0xFDA
 10246                           fsr2l	equ	0xFD9
 10247                           status	equ	0xFD8
 10248                           
 10249                           	psect	rparam
 10250  0000                     pclatu	equ	0xFFB
 10251                           pclath	equ	0xFFA
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           intcon2	equ	0xFF1
 10260                           postinc0	equ	0xFEE
 10261                           fsr0h	equ	0xFEA
 10262                           fsr0l	equ	0xFE9
 10263                           wreg	equ	0xFE8
 10264                           postdec1	equ	0xFE5
 10265                           fsr1h	equ	0xFE2
 10266                           fsr1l	equ	0xFE1
 10267                           indf2	equ	0xFDF
 10268                           postinc2	equ	0xFDE
 10269                           postdec2	equ	0xFDD
 10270                           fsr2h	equ	0xFDA
 10271                           fsr2l	equ	0xFD9
 10272                           status	equ	0xFD8


Data Sizes:
    Strings     196
    Constant    493
    Data        290
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     58     111
    BANK0           128     15     124
    BANK1           256      0     180
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[13]), STR_9(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_8(CODE[20]), STR_7(CODE[21]), STR_6(CODE[30]), STR_5(CODE[20]), 
		 -> STR_4(CODE[21]), STR_3(CODE[30]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    ___awdiv->___wmul
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   53222
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                            _Do_Init
                  _Initialize_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3835
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    2960
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1784
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                              0 BANK0      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34384
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1241
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17141
                                             56 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   11034
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4884
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2182
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2182
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1142
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     760
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     434
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     232
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     157
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     0     0      0     150
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     1      2     173
                                             19 COMRAM     3     1      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      60
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      90
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B4       7       70.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      7C       5       96.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3A      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     19F      34        0.0%
DATA                 0      0     19F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 28 13:09:30 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D3 017E                                 l33 1ADC  
                     ___awdiv@sign 001C                ___wmul@multiplicand 0013  
                              l104 1A9E                                l107 1B68  
                              l416 1DFA                                l610 0AD8  
                              l187 1C28                                l612 09B2  
                              l534 1920                                l544 1D74  
                              l650 12BC                                l619 0A2E  
                              l651 12DE                                l647 12E0  
                              l648 124C                                l658 0898  
                              l594 164E                                l851 1772  
                              l827 0374                                l860 17B4  
                              l588 1BF8                                l790 011C  
                              l855 178C                                l863 1C7A  
                              l856 178E                                _FAN 004F  
                              l857 1798                                l858 179A  
                              _PR2 000FCB                                _day 0059  
             __size_of_I2C_ReStart 0016                                _dow 005A  
                              _nbr 00FA                                _rpm 0049  
                              _rps 004B                                _txt 004D  
                              wreg 000FE8                         _Fan_SW_Txt 00DF  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 1C2A                       ___ftdiv@cntr 0035  
                     ___ftdiv@sign 003A                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1320 1CA0  
                             l1056 15C6                               l1171 147C  
                             l1243 1204                               l1182 1454  
                             l1246 11D0                               l1425 1B1A  
                             l4001 1838                               l1258 0F4A  
                             l4003 1842                     drawFastVLine@x 0022  
                             l4013 1868                               l4005 184A  
                             l4021 1984                     drawFastVLine@y 0018  
                             l1294 1CC2                               l1543 1B72  
                             l1279 1122                               l4023 198E  
                             l1545 1B78                               l1537 1B60  
                             l4025 1996                               l1386 1874  
                             l1555 1B8A                               l3411 1784  
                             l3403 1776                               l5011 0994  
                             l1396 19B8                               l5021 09B6  
                             l5101 12CA                               l4029 19AC  
                             l5031 0A22                               l5015 09A0  
                             l5041 0A50                               l5033 0A26  
                             l5025 09BE                               l5121 13E4  
                             l5051 0ACC                               l5043 0A78  
                             l5019 09AE                               l5203 0D26  
                             l5107 12DA                               l5131 1448  
                             l5123 1404                               l5115 13C8  
                             l1925 1A62                               l5029 09EE  
                             l5205 0D2E                               l1935 1A78  
                             l1943 1A88                               l3391 1758  
                             l5063 1AE8                               l5143 146E  
                             l5127 141C                               l5119 13D8  
                             l1937 1A80                               l1929 1A6A  
                             l5225 087E                               l5049 0AA4  
                             l5057 0AD4                               l5065 1AEE  
                             l5081 1284                               l5137 145C  
                             l5129 143C                               l5313 0E9A  
                             l1947 1A94                               l3395 1762  
                             l5075 1216                               l3707 1BA2  
                             l5331 0EE0                               l5307 0E72  
                             l3803 1CBA                               l1949 1A9A  
                             l5253 096E                               l5093 12B2  
                             l3709 1BAC                               l5261 1142  
                             l5341 0F0E                               l5309 0E8C  
                             l5421 0064                               l5413 0036  
                             l3399 176A                               l5191 0CAC  
                             l5263 115C                               l5335 0EF6  
                             l5327 0ECE                               l5511 0274  
                             l5503 024C                               l5415 0044  
                             l5097 12C0                               l5345 0F24  
                             l5337 0EFC                               l3921 1570  
                             l5521 02A8                               l5505 0254  
                             l5433 00E6                               l5425 0082  
                             l5409 0026                               l5195 0CCE  
                             l5179 0C58                               l5267 116A  
                             l5355 105C                               l3923 157A  
                             l3915 155A                               l5523 02EC  
                             l5531 0344                               l5515 028C  
                             l5419 004E                               l4901 1BDA  
                             l5373 10B6                               l3941 15BC  
                             l3933 15A0                               l3925 1582  
                             l3909 1548                               l5533 034C  
                             l5509 026C                               l5453 0164  
                             l5437 00EE     I2C_Write_Cmd_Write_Data@Device 0015  
                             l5287 11AA                               l5391 1110  
                             l5383 10E0                               l5519 02A0  
                             l5463 0198                               l5455 0168  
                             l5535 0358                               l4913 1A34  
                             l5297 11DE                               l5385 10EE  
                             l5377 10C6                               l3937 15AC  
                             l5529 0332                               l5473 01AE  
                             l5449 014A                               l5379 10CC  
                             l5387 10F8                               l5547 1384  
                             l5491 0206                               l5467 019E  
                             l5459 0174                               l5483 01D8  
                             l4909 1A18                               l5477 01D2  
                             l5469 01A2                               l5485 01EA  
                             l4863 1610                               l5495 022A  
                             l5735 070E                               l4873 1636  
                             l5497 0234                               l5729 0700  
                             l4875 1644                               l4859 15D8  
                             STR_1 FF97                               STR_2 FFAB  
                             STR_3 FF3A                               STR_4 FF6E  
                             STR_5 FF83                               STR_6 FF3A  
                             STR_7 FF6E                               STR_8 FF83  
                             STR_9 FF58                               u3610 1244  
                             u3380 1606                               u3540 0A86  
                             u3620 127A                               u3901 0E82  
                             u3831 1134                               u3760 0C84  
                             u3851 1152                               u4557 1E08  
                             u3941 104E                               u3960 107A  
                             u3881 0E64                               u3965 1072  
                             _RBPU 007F8F                               _TRMT 007D61  
                     _DS1621_tempC 0041                       _DS1621_tempF 0043  
                             _date 00C4                               _main 0628  
                             _font FD4D                       ___ftpack@arg 0011  
                             _hour 005D                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 1E26                   __end_of_I2C_Read 1AA0  
                             _time 00CD                               _year 006C  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 1DB2  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1A0E                    ??_drawFastVLine 001C  
                     ___ftmul@cntr 002A                    __end_of_i2cNack 1E30  
                     ___param_bank 000010                       ___ftmul@sign 002B  
                     ___fttol@exp1 001F                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0C2C  
                  ??_do_update_pwm 00EB                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 15C8                    drawCircle@ddF_x 0026  
                            STR_10 FFCF                    drawCircle@ddF_y 0028  
                            STR_11 FFF8                              STR_12 FFF2  
                            STR_20 FFBE                              STR_13 FFE2  
                            STR_14 FFE7                              STR_15 FFDC  
                            STR_16 FFFB                              STR_17 FFF4  
                            STR_18 FFEC                              STR_19 FFF0  
                  __end_of___ftdiv 1206                    __end_of___ftmul 0F4C  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___fttol 1124  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 187E                    __end_of___lwmod 19C2  
                            i2l235 1692                              i2l247 0C2A  
                            i2l256 0BDC                              i2l257 0BF8  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1ADE                              _Rcmd1 0D44  
                            _Rcmd3 0F4C                         _i2cHighSda 1E42  
                       _i2cHighScl 1E04                    __end_of_dpowers FF32  
                            _color 0154                              _font2 FE4C  
                            _found 005C                    __end_of_isdigit 1CC4  
                            _tempC 00E3                              _tempF 00E7  
                            _month 0060                      ___ftpack@sign 0015  
                            _putch 1DF6                  __end_of_I2C_Start 1DC4  
                __end_of_I2C_Write 1B98                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 16CC  
                     __end_of_main 07D6                       __end_of_font FE4C  
                 __end_of_Rcmd2red 1B5A                             ??_main 003B  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 1DA0  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0018                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
                           _CCPR1L 000FBE                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                 __end_of___ftpack 147E                   __end_of___lbtoft 1CA2  
                           _DC_Txt 00DB                             i2l2603 0BFE  
                           i2l2611 0C08                             i2l2555 0B2A  
                           i2l2565 0B4A                             i2l2549 0B02  
                           i2l2559 0B2E                             i2l2569 0B4E  
                        ??_Do_Init 0017                             i2l2579 0B6E  
                           i2l2589 0B8E                             i2l2881 1688  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 0011                       _Alarm_SW_Txt 00BE  
                 _force_nec_state0 1E4A                   __end_of_delay_ms 1928  
                           _i2cAck 1DC4                   __end_of_fillRect 1A58  
                 __end_of_drawChar 0ADA                 __size_of_OpenUSART 0070  
                           ___wmul 1C54                          ??___awdiv 001B  
                 __end_of_drawtext 0D44                          ??___ftdiv 0032  
                        ??___ftmul 0023                          ??___fttol 0015  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 0080                          ??___lwmod 001C  
                           _buffer 0193                             _nec_ok 0047  
                           clear_0 16D8                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
                        ??_get_RPM 0021                             _printf 001C  
                     drawtext@size 00F2                             _strcpy 1B98  
                           _strlen 1ADE              ___ftmul@f3_as_product 0027  
                     __pdataCOMRAM 006D                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD4C  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 1CE4  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 1D7A  
                       __accesstop 0080            __end_of__initialization 173C  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0064  
               _setup_alarm_second 0065                      ___rparam_used 000001  
                       ___ftdiv@f1 002C                         ___ftdiv@f2 002F  
                       ___ftdiv@f3 0036                         ___lbtoft@c 001C  
                       ___ftmul@f1 001D                         ___ftmul@f2 0020  
                       ___fttol@f1 0011                      __end_of_Rcmd1 0E54  
                    __end_of_Rcmd3 103E                     __pcstackCOMRAM 0001  
                     __pidataBANK0 17B6                       __pidataBANK1 147E  
                    __end_of_font2 FF28                  __end_of_i2cLowSda 1E3A  
                __end_of_i2cLowScl 1E42                      __end_of_putch 1E04  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0055                       _alarm_second 0056  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 17B6                            ??_putch 0011  
                       __pbssBANK0 00FA                   _setup_alarm_hour 0063  
                 _setup_alarm_time 009E                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0012                         _alarm_date 0053  
                       ??_INT0_isr 0001                         _alarm_hour 0054  
                       _alarm_time 0095                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 003F                          ?___ftpack 0011  
                        ?___lbtoft 0019                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                         _fillScreen 1D02  
                       _drawCircle 07D6                     _init_INTERRUPT 1D38  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00D6  
            __end_of_fillRectangle 12E2                          ?_drawtext 00EB  
                          _Do_Init 19C2           _I2C_Write_Cmd_Write_Data 1CC4  
       __end_of_I2C_Write_Cmd_Only 1D38                         ??_Rcmd2red 0014  
                          _i2cNack 1E26                 __end_of_TIMER1_isr 1E1C  
                    _write_command 1DE6                          _I2C_Start 1DB2  
                        _I2C_Write 1B5A                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 1D02                  __end_of_drawPixel 1BFA  
            __end_of_drawFastVLine 1650                            ___awdiv 1532  
                          ___ftdiv 1124                    __size_of___wmul 0028  
                          ___ftmul 0E54                            ___fttol 103E  
                          ___lwdiv 1822                            ___lwmod 1976  
                  __size_of_chkisr 16C4                          ?_spiwrite 0001  
                          __pcinit 16CC                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 1AA0                            __ptext0 0628  
                          __ptext1 001C                            __ptext2 1DF6  
                          __ptext3 1CA2                            __ptext4 1976  
                          __ptext5 1822          __size_of_DS1621_Read_Temp 0030  
                          __ptext6 1AA0                            __ptext7 1532  
                          __ptext8 12E2                            __ptext9 1C7C  
                  __size_of_printf 035A                  __end_of_init_UART 1D8E  
           __end_of_init_INTERRUPT 1D50                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF3A           __end_of_force_nec_state0 1E52  
                        _T1CONbits 000FCD                            _dpowers FF28  
            __end_of_do_update_pwm 13B8                            _isdigit 1CA2  
                       _duty_cycle 005B                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 1D66                      drawtext@_text 00EC  
                    drawtext@color 00EE                         ??_fillRect 0028  
                       ??_drawChar 0035                          _LCD_Reset 1D8E  
                    _setAddrWindow 1928                     __pintcode_body 1650  
                       delay_ms@ms 0017               end_of_initialization 173C  
                       ??_drawtext 0039                     ?_write_command 0001  
                    __Lmediumconst FD4C          __size_of_DS3231_Read_Time 0058  
                          int_func 1650                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         get_RPM@RPS 0021  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 00F9                   drawtext@cursor_y 00F8  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 00A7  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 00B0                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00F4                         drawPixel@x 001B  
                       drawPixel@y 0018                        _DS1621_Init 1CE4  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0152  
                   __end_of_i2cAck 1DD6                        ___ftmul@exp 0026  
         DS1621_Read_Temp@Data_Ret 0016                 __end_of_i2cHighSda 1E4A  
               __end_of_i2cHighScl 1E10                     __end_of___wmul 1C7C  
                    delay_ms@count 001B                         _write_data 1DD6  
                    __pidataCOMRAM 1E52                     __end_of_chkisr 16CC  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 1D50  
                       drawtext@bg 00F0                          _Nec_code1 0050  
                        _i2cLowSda 1E30                          _i2cLowScl 1E3A  
                   __end_of_printf 0376                     __end_of_strcpy 1BCA  
                   __end_of_strlen 1B1C                          _Nec_state 0051  
              start_initialization 16CC                    ??_write_command 0013  
                        _OpenUSART 1746                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                         ??___wmul 0015                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 1BFA  
                         ??_strcpy 0015                           ??_strlen 0013  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 003B         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00EB  
                      ??_LCD_Reset 001D                       _isdigit$2269 0012  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 187E  
                         ?_i2cNack 0001                  __size_of_drawtext 0118  
                 ___lwdiv@dividend 0011                        I2C_Read@ack 0011  
                        _bit_count 0057                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 1C54                      __pmediumconst FD4C  
                         ?___awdiv 0017                           ?___ftdiv 002C  
                         ?___ftmul 001D                           ?___fttol 0011  
                        __tft_type 0052                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 1D1E                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 1BCA                           ?_get_RPM 001F  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 1E1C                           _I2C_Read 1A58  
                         _I2C_Stop 1DA0                  _Initialize_Screen 0376  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 1D7A                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF32  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0015  
                   __size_of_putch 000E                     ___wmul@product 0015  
              ??_Initialize_Screen 003B                           _INT0_isr 0ADA  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
                        _setup_day 0066                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 0628  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                       ?_init_UART 0001                        _INTCON2bits 000FF1  
                        copy_data0 16F2                          copy_data1 1712  
                        drawtext@i 00F6             __size_of_drawFastVLine 0088  
                        drawtext@x 00F3                          drawtext@y 00EB  
                         _Nec_code 003B                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                       ?_DS1621_Init 0001  
                         _Rcmd2red 1B1C                   __size_of_Do_Init 004C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0045                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00C2                           __Hrparam 0000  
           __size_of_do_update_pwm 00D6                 __end_of_fillScreen 1D1E  
                         __Lrparam 0000                 __end_of_drawCircle 0984  
                 __size_of___awdiv 0096                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                         ___ftpack 13B8                           ___lbtoft 1C7C  
                     ?_I2C_ReStart 0001                   __size_of_get_RPM 003E  
                   _setup_fan_temp 006D                     _setup_fan_text 00B9  
                 __size_of_isdigit 0022                           _delay_ms 18D6  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0017  
                         __ptext10 103E                           __ptext11 0E54  
                         __ptext20 0984                           __ptext12 1124  
                         __ptext21 1A0E                           __ptext13 13B8  
                         __ptext30 1DD6                           __ptext22 15C8  
                         __ptext14 0376                           __ptext31 1DE6  
                         __ptext23 07D6                           __ptext15 1B98  
                         __ptext40 1E1C                           __ptext32 1D66  
                         __ptext24 1BCA                           __ptext16 1D02  
                         __ptext41 1CE4                           __ptext33 1D8E  
                         __ptext25 1928                           __ptext17 1206  
                         __ptext50 1E26                           __ptext42 1CC4  
                         __ptext34 18D6                           __ptext26 1C2A  
                         __ptext18 0C2C                           __ptext51 1DC4  
                         __ptext43 1D1E                           __ptext35 1C54  
                         __ptext27 0F4C                           __ptext19 1ADE  
                         __ptext60 1E4A                           __ptext52 1D50  
                         __ptext44 187E                           __ptext36 19C2  
                         __ptext28 1B1C                           __ptext53 1E30  
                         __ptext45 1BFA                           __ptext37 1D7A  
                         __ptext29 0D44                           __ptext54 1E3A  
                         __ptext46 1B5A                           __ptext38 1746  
                         __ptext55 1E42                           __ptext47 1DA0  
                         __ptext39 1D38                           __ptext56 1E04  
                         __ptext48 1DB2                           __ptext49 1A58  
                         __ptext58 1E10                           __ptext59 0ADA  
                         _fillRect 1A0E                           _drawChar 0984  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0058  
                         _drawtext 0C2C                         strcpy@from 0013  
                    _fillRectangle 1206           __end_of_DS1621_Read_Temp 1C2A  
                    __size_of_main 01AE                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 15C8  
                        printf@idx 002F                           _spiwrite 1D66  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 18D6  
       __size_of_Initialize_Screen 02B2                         _INTCONbits 000FF2  
                    _do_update_pwm 12E2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   ___lwmod@dividend 0018  
            __end_of_write_command 1DF6                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 00F1                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 1E10                      fillRect@color 0026  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A              __end_of_setAddrWindow 1976  
               fillRectangle@color 001B                  do_update_pwm@dc_I 00F2  
                do_update_pwm@dc_f 00EE                      drawChar@color 0030  
                      _setup_month 0069                 __end_of_write_data 1DE6  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
