

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 28 13:31:18 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           	psect	idataCOMRAM
    69  001A44                     __pidataCOMRAM:
    70                           	opt stack 0
    71                           
    72                           ;initializer for _RTC_ALARM_Txt
    73  001A44  30                 	db	48
    74  001A45  00                 	db	0
    75                           
    76                           ;initializer for _setup_fan_temp
    77  001A46  4B                 	db	75
    78                           
    79                           ;initializer for _tempSecond
    80  001A47  FF                 	db	255
    81                           
    82                           ;initializer for _wrap
    83  001A48  01                 	db	1
    84                           
    85                           ;initializer for _tempC
    86  001A49  2B                 	db	43
    87  001A4A  32                 	db	50
    88  001A4B  35                 	db	53
    89  001A4C  00                 	db	0
    90                           
    91                           	psect	idataBANK0
    92  001652                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _alarm_time
    96  001652  30                 	db	48
    97  001653  30                 	db	48
    98  001654  3A                 	db	58
    99  001655  30                 	db	48
   100  001656  30                 	db	48
   101  001657  3A                 	db	58
   102  001658  30                 	db	48
   103  001659  30                 	db	48
   104  00165A  00                 	db	0
   105                           
   106                           ;initializer for _setup_alarm_time
   107  00165B  30                 	db	48
   108  00165C  30                 	db	48
   109  00165D  3A                 	db	58
   110  00165E  30                 	db	48
   111  00165F  30                 	db	48
   112  001660  3A                 	db	58
   113  001661  30                 	db	48
   114  001662  30                 	db	48
   115  001663  00                 	db	0
   116                           
   117                           ;initializer for _setup_date
   118  001664  30                 	db	48
   119  001665  31                 	db	49
   120  001666  2F                 	db	47
   121  001667  30                 	db	48
   122  001668  31                 	db	49
   123  001669  2F                 	db	47
   124  00166A  30                 	db	48
   125  00166B  30                 	db	48
   126  00166C  00                 	db	0
   127                           
   128                           ;initializer for _setup_time
   129  00166D  30                 	db	48
   130  00166E  30                 	db	48
   131  00166F  3A                 	db	58
   132  001670  30                 	db	48
   133  001671  30                 	db	48
   134  001672  3A                 	db	58
   135  001673  30                 	db	48
   136  001674  30                 	db	48
   137  001675  00                 	db	0
   138                           
   139                           ;initializer for _setup_fan_text
   140  001676  30                 	db	48
   141  001677  37                 	db	55
   142  001678  35                 	db	53
   143  001679  46                 	db	70
   144  00167A  00                 	db	0
   145                           
   146                           ;initializer for _Alarm_SW_Txt
   147  00167B  4F                 	db	79
   148  00167C  46                 	db	70
   149  00167D  46                 	db	70
   150  00167E  00                 	db	0
   151                           
   152                           ;initializer for _date
   153  00167F  30                 	db	48
   154  001680  30                 	db	48
   155  001681  2F                 	db	47
   156  001682  30                 	db	48
   157  001683  30                 	db	48
   158  001684  2F                 	db	47
   159  001685  30                 	db	48
   160  001686  30                 	db	48
   161  001687  00                 	db	0
   162                           
   163                           ;initializer for _time
   164  001688  30                 	db	48
   165  001689  30                 	db	48
   166  00168A  3A                 	db	58
   167  00168B  30                 	db	48
   168  00168C  30                 	db	48
   169  00168D  3A                 	db	58
   170  00168E  30                 	db	48
   171  00168F  30                 	db	48
   172  001690  00                 	db	0
   173                           
   174                           ;initializer for _RPM_Txt
   175  001691  30                 	db	48
   176  001692  30                 	db	48
   177  001693  30                 	db	48
   178  001694  30                 	db	48
   179  001695  00                 	db	0
   180                           
   181                           ;initializer for _DC_Txt
   182  001696  30                 	db	48
   183  001697  30                 	db	48
   184  001698  30                 	db	48
   185  001699  00                 	db	0
   186                           
   187                           ;initializer for _Fan_SW_Txt
   188  00169A  4F                 	db	79
   189  00169B  46                 	db	70
   190  00169C  46                 	db	70
   191  00169D  00                 	db	0
   192                           
   193                           ;initializer for _tempF
   194  00169E  2B                 	db	43
   195  00169F  37                 	db	55
   196  0016A0  37                 	db	55
   197  0016A1  00                 	db	0
   198                           
   199                           	psect	idataBANK1
   200  001988                     __pidataBANK1:
   201                           	opt stack 0
   202                           
   203                           ;initializer for _buffer
   204  001988  20                 	db	32
   205  001989  45                 	db	69
   206  00198A  43                 	db	67
   207  00198B  45                 	db	69
   208  00198C  33                 	db	51
   209  00198D  33                 	db	51
   210  00198E  30                 	db	48
   211  00198F  31                 	db	49
   212  001990  4C                 	db	76
   213  001991  20                 	db	32
   214  001992  53                 	db	83
   215  001993  70                 	db	112
   216  001994  27                 	db	39
   217  001995  32                 	db	50
   218  001996  31                 	db	49
   219  001997  20                 	db	32
   220  001998  4C                 	db	76
   221  001999  31                 	db	49
   222  00199A  32                 	db	50
   223  00199B  00                 	db	0
   224  00199C  00                 	db	0
   225  00199D  00                 	db	0
   226  00199E  00                 	db	0
   227  00199F  00                 	db	0
   228  0019A0  00                 	db	0
   229  0019A1  00                 	db	0
   230  0019A2  00                 	db	0
   231  0019A3  00                 	db	0
   232  0019A4  00                 	db	0
   233  0019A5  00                 	db	0
   234  0019A6  00                 	db	0
   235  0019A7  00                 	db	0
   236  0019A8  00                 	db	0
   237                           
   238                           	psect	mediumconst
   239  00FD74                     __pmediumconst:
   240                           	opt stack 0
   241  00FD74  00                 	db	0
   242  00FD75                     _font:
   243                           	opt stack 0
   244  00FD75  00                 	db	0
   245  00FD76  00                 	db	0
   246  00FD77  00                 	db	0
   247  00FD78  00                 	db	0
   248  00FD79  00                 	db	0
   249  00FD7A  00                 	db	0
   250  00FD7B  00                 	db	0
   251  00FD7C  5F                 	db	95
   252  00FD7D  00                 	db	0
   253  00FD7E  00                 	db	0
   254  00FD7F  00                 	db	0
   255  00FD80  07                 	db	7
   256  00FD81  00                 	db	0
   257  00FD82  07                 	db	7
   258  00FD83  00                 	db	0
   259  00FD84  14                 	db	20
   260  00FD85  7F                 	db	127
   261  00FD86  14                 	db	20
   262  00FD87  7F                 	db	127
   263  00FD88  14                 	db	20
   264  00FD89  24                 	db	36
   265  00FD8A  2A                 	db	42
   266  00FD8B  7F                 	db	127
   267  00FD8C  2A                 	db	42
   268  00FD8D  12                 	db	18
   269  00FD8E  23                 	db	35
   270  00FD8F  13                 	db	19
   271  00FD90  08                 	db	8
   272  00FD91  64                 	db	100
   273  00FD92  62                 	db	98
   274  00FD93  36                 	db	54
   275  00FD94  49                 	db	73
   276  00FD95  56                 	db	86
   277  00FD96  20                 	db	32
   278  00FD97  50                 	db	80
   279  00FD98  00                 	db	0
   280  00FD99  08                 	db	8
   281  00FD9A  07                 	db	7
   282  00FD9B  03                 	db	3
   283  00FD9C  00                 	db	0
   284  00FD9D  00                 	db	0
   285  00FD9E  1C                 	db	28
   286  00FD9F  22                 	db	34
   287  00FDA0  41                 	db	65
   288  00FDA1  00                 	db	0
   289  00FDA2  00                 	db	0
   290  00FDA3  41                 	db	65
   291  00FDA4  22                 	db	34
   292  00FDA5  1C                 	db	28
   293  00FDA6  00                 	db	0
   294  00FDA7  2A                 	db	42
   295  00FDA8  1C                 	db	28
   296  00FDA9  7F                 	db	127
   297  00FDAA  1C                 	db	28
   298  00FDAB  2A                 	db	42
   299  00FDAC  08                 	db	8
   300  00FDAD  08                 	db	8
   301  00FDAE  3E                 	db	62
   302  00FDAF  08                 	db	8
   303  00FDB0  08                 	db	8
   304  00FDB1  00                 	db	0
   305  00FDB2  80                 	db	128
   306  00FDB3  70                 	db	112
   307  00FDB4  30                 	db	48
   308  00FDB5  00                 	db	0
   309  00FDB6  08                 	db	8
   310  00FDB7  08                 	db	8
   311  00FDB8  08                 	db	8
   312  00FDB9  08                 	db	8
   313  00FDBA  08                 	db	8
   314  00FDBB  00                 	db	0
   315  00FDBC  00                 	db	0
   316  00FDBD  60                 	db	96
   317  00FDBE  60                 	db	96
   318  00FDBF  00                 	db	0
   319  00FDC0  20                 	db	32
   320  00FDC1  10                 	db	16
   321  00FDC2  08                 	db	8
   322  00FDC3  04                 	db	4
   323  00FDC4  02                 	db	2
   324  00FDC5  3E                 	db	62
   325  00FDC6  51                 	db	81
   326  00FDC7  49                 	db	73
   327  00FDC8  45                 	db	69
   328  00FDC9  3E                 	db	62
   329  00FDCA  00                 	db	0
   330  00FDCB  42                 	db	66
   331  00FDCC  7F                 	db	127
   332  00FDCD  40                 	db	64
   333  00FDCE  00                 	db	0
   334  00FDCF  72                 	db	114
   335  00FDD0  49                 	db	73
   336  00FDD1  49                 	db	73
   337  00FDD2  49                 	db	73
   338  00FDD3  46                 	db	70
   339  00FDD4  21                 	db	33
   340  00FDD5  41                 	db	65
   341  00FDD6  49                 	db	73
   342  00FDD7  4D                 	db	77
   343  00FDD8  33                 	db	51
   344  00FDD9  18                 	db	24
   345  00FDDA  14                 	db	20
   346  00FDDB  12                 	db	18
   347  00FDDC  7F                 	db	127
   348  00FDDD  10                 	db	16
   349  00FDDE  27                 	db	39
   350  00FDDF  45                 	db	69
   351  00FDE0  45                 	db	69
   352  00FDE1  45                 	db	69
   353  00FDE2  39                 	db	57
   354  00FDE3  3C                 	db	60
   355  00FDE4  4A                 	db	74
   356  00FDE5  49                 	db	73
   357  00FDE6  49                 	db	73
   358  00FDE7  31                 	db	49
   359  00FDE8  41                 	db	65
   360  00FDE9  21                 	db	33
   361  00FDEA  11                 	db	17
   362  00FDEB  09                 	db	9
   363  00FDEC  07                 	db	7
   364  00FDED  36                 	db	54
   365  00FDEE  49                 	db	73
   366  00FDEF  49                 	db	73
   367  00FDF0  49                 	db	73
   368  00FDF1  36                 	db	54
   369  00FDF2  46                 	db	70
   370  00FDF3  49                 	db	73
   371  00FDF4  49                 	db	73
   372  00FDF5  29                 	db	41
   373  00FDF6  1E                 	db	30
   374  00FDF7  00                 	db	0
   375  00FDF8  00                 	db	0
   376  00FDF9  14                 	db	20
   377  00FDFA  00                 	db	0
   378  00FDFB  00                 	db	0
   379  00FDFC  00                 	db	0
   380  00FDFD  40                 	db	64
   381  00FDFE  34                 	db	52
   382  00FDFF  00                 	db	0
   383  00FE00  00                 	db	0
   384  00FE01  00                 	db	0
   385  00FE02  08                 	db	8
   386  00FE03  14                 	db	20
   387  00FE04  22                 	db	34
   388  00FE05  41                 	db	65
   389  00FE06  14                 	db	20
   390  00FE07  14                 	db	20
   391  00FE08  14                 	db	20
   392  00FE09  14                 	db	20
   393  00FE0A  14                 	db	20
   394  00FE0B  00                 	db	0
   395  00FE0C  41                 	db	65
   396  00FE0D  22                 	db	34
   397  00FE0E  14                 	db	20
   398  00FE0F  08                 	db	8
   399  00FE10  02                 	db	2
   400  00FE11  01                 	db	1
   401  00FE12  59                 	db	89
   402  00FE13  09                 	db	9
   403  00FE14  06                 	db	6
   404  00FE15  3E                 	db	62
   405  00FE16  41                 	db	65
   406  00FE17  5D                 	db	93
   407  00FE18  59                 	db	89
   408  00FE19  4E                 	db	78
   409  00FE1A  7C                 	db	124
   410  00FE1B  12                 	db	18
   411  00FE1C  11                 	db	17
   412  00FE1D  12                 	db	18
   413  00FE1E  7C                 	db	124
   414  00FE1F  7F                 	db	127
   415  00FE20  49                 	db	73
   416  00FE21  49                 	db	73
   417  00FE22  49                 	db	73
   418  00FE23  36                 	db	54
   419  00FE24  3E                 	db	62
   420  00FE25  41                 	db	65
   421  00FE26  41                 	db	65
   422  00FE27  41                 	db	65
   423  00FE28  22                 	db	34
   424  00FE29  7F                 	db	127
   425  00FE2A  41                 	db	65
   426  00FE2B  41                 	db	65
   427  00FE2C  41                 	db	65
   428  00FE2D  3E                 	db	62
   429  00FE2E  7F                 	db	127
   430  00FE2F  49                 	db	73
   431  00FE30  49                 	db	73
   432  00FE31  49                 	db	73
   433  00FE32  41                 	db	65
   434  00FE33  7F                 	db	127
   435  00FE34  09                 	db	9
   436  00FE35  09                 	db	9
   437  00FE36  09                 	db	9
   438  00FE37  01                 	db	1
   439  00FE38  3E                 	db	62
   440  00FE39  41                 	db	65
   441  00FE3A  41                 	db	65
   442  00FE3B  51                 	db	81
   443  00FE3C  73                 	db	115
   444  00FE3D  7F                 	db	127
   445  00FE3E  08                 	db	8
   446  00FE3F  08                 	db	8
   447  00FE40  08                 	db	8
   448  00FE41  7F                 	db	127
   449  00FE42  00                 	db	0
   450  00FE43  41                 	db	65
   451  00FE44  7F                 	db	127
   452  00FE45  41                 	db	65
   453  00FE46  00                 	db	0
   454  00FE47  20                 	db	32
   455  00FE48  40                 	db	64
   456  00FE49  41                 	db	65
   457  00FE4A  3F                 	db	63
   458  00FE4B  01                 	db	1
   459  00FE4C  7F                 	db	127
   460  00FE4D  08                 	db	8
   461  00FE4E  14                 	db	20
   462  00FE4F  22                 	db	34
   463  00FE50  41                 	db	65
   464  00FE51  7F                 	db	127
   465  00FE52  40                 	db	64
   466  00FE53  40                 	db	64
   467  00FE54  40                 	db	64
   468  00FE55  40                 	db	64
   469  00FE56  7F                 	db	127
   470  00FE57  02                 	db	2
   471  00FE58  1C                 	db	28
   472  00FE59  02                 	db	2
   473  00FE5A  7F                 	db	127
   474  00FE5B  7F                 	db	127
   475  00FE5C  04                 	db	4
   476  00FE5D  08                 	db	8
   477  00FE5E  10                 	db	16
   478  00FE5F  7F                 	db	127
   479  00FE60  3E                 	db	62
   480  00FE61  41                 	db	65
   481  00FE62  41                 	db	65
   482  00FE63  41                 	db	65
   483  00FE64  3E                 	db	62
   484  00FE65  7F                 	db	127
   485  00FE66  09                 	db	9
   486  00FE67  09                 	db	9
   487  00FE68  09                 	db	9
   488  00FE69  06                 	db	6
   489  00FE6A  3E                 	db	62
   490  00FE6B  41                 	db	65
   491  00FE6C  51                 	db	81
   492  00FE6D  21                 	db	33
   493  00FE6E  5E                 	db	94
   494  00FE6F  7F                 	db	127
   495  00FE70  09                 	db	9
   496  00FE71  19                 	db	25
   497  00FE72  29                 	db	41
   498  00FE73  46                 	db	70
   499  00FE74                     __end_of_font:
   500                           	opt stack 0
   501  00FE74                     _font2:
   502                           	opt stack 0
   503  00FE74  26                 	db	38
   504  00FE75  49                 	db	73
   505  00FE76  49                 	db	73
   506  00FE77  49                 	db	73
   507  00FE78  32                 	db	50
   508  00FE79  03                 	db	3
   509  00FE7A  01                 	db	1
   510  00FE7B  7F                 	db	127
   511  00FE7C  01                 	db	1
   512  00FE7D  03                 	db	3
   513  00FE7E  3F                 	db	63
   514  00FE7F  40                 	db	64
   515  00FE80  40                 	db	64
   516  00FE81  40                 	db	64
   517  00FE82  3F                 	db	63
   518  00FE83  1F                 	db	31
   519  00FE84  20                 	db	32
   520  00FE85  40                 	db	64
   521  00FE86  20                 	db	32
   522  00FE87  1F                 	db	31
   523  00FE88  3F                 	db	63
   524  00FE89  40                 	db	64
   525  00FE8A  38                 	db	56
   526  00FE8B  40                 	db	64
   527  00FE8C  3F                 	db	63
   528  00FE8D  63                 	db	99
   529  00FE8E  14                 	db	20
   530  00FE8F  08                 	db	8
   531  00FE90  14                 	db	20
   532  00FE91  63                 	db	99
   533  00FE92  03                 	db	3
   534  00FE93  04                 	db	4
   535  00FE94  78                 	db	120
   536  00FE95  04                 	db	4
   537  00FE96  03                 	db	3
   538  00FE97  61                 	db	97
   539  00FE98  59                 	db	89
   540  00FE99  49                 	db	73
   541  00FE9A  4D                 	db	77
   542  00FE9B  43                 	db	67
   543  00FE9C  00                 	db	0
   544  00FE9D  7F                 	db	127
   545  00FE9E  41                 	db	65
   546  00FE9F  41                 	db	65
   547  00FEA0  41                 	db	65
   548  00FEA1  02                 	db	2
   549  00FEA2  04                 	db	4
   550  00FEA3  08                 	db	8
   551  00FEA4  10                 	db	16
   552  00FEA5  20                 	db	32
   553  00FEA6  00                 	db	0
   554  00FEA7  41                 	db	65
   555  00FEA8  41                 	db	65
   556  00FEA9  41                 	db	65
   557  00FEAA  7F                 	db	127
   558  00FEAB  04                 	db	4
   559  00FEAC  02                 	db	2
   560  00FEAD  01                 	db	1
   561  00FEAE  02                 	db	2
   562  00FEAF  04                 	db	4
   563  00FEB0  40                 	db	64
   564  00FEB1  40                 	db	64
   565  00FEB2  40                 	db	64
   566  00FEB3  40                 	db	64
   567  00FEB4  40                 	db	64
   568  00FEB5  00                 	db	0
   569  00FEB6  03                 	db	3
   570  00FEB7  07                 	db	7
   571  00FEB8  08                 	db	8
   572  00FEB9  00                 	db	0
   573  00FEBA  20                 	db	32
   574  00FEBB  54                 	db	84
   575  00FEBC  54                 	db	84
   576  00FEBD  78                 	db	120
   577  00FEBE  40                 	db	64
   578  00FEBF  7F                 	db	127
   579  00FEC0  28                 	db	40
   580  00FEC1  44                 	db	68
   581  00FEC2  44                 	db	68
   582  00FEC3  38                 	db	56
   583  00FEC4  38                 	db	56
   584  00FEC5  44                 	db	68
   585  00FEC6  44                 	db	68
   586  00FEC7  44                 	db	68
   587  00FEC8  28                 	db	40
   588  00FEC9  38                 	db	56
   589  00FECA  44                 	db	68
   590  00FECB  44                 	db	68
   591  00FECC  28                 	db	40
   592  00FECD  7F                 	db	127
   593  00FECE  38                 	db	56
   594  00FECF  54                 	db	84
   595  00FED0  54                 	db	84
   596  00FED1  54                 	db	84
   597  00FED2  18                 	db	24
   598  00FED3  00                 	db	0
   599  00FED4  08                 	db	8
   600  00FED5  7E                 	db	126
   601  00FED6  09                 	db	9
   602  00FED7  02                 	db	2
   603  00FED8  18                 	db	24
   604  00FED9  A4                 	db	164
   605  00FEDA  A4                 	db	164
   606  00FEDB  9C                 	db	156
   607  00FEDC  78                 	db	120
   608  00FEDD  7F                 	db	127
   609  00FEDE  08                 	db	8
   610  00FEDF  04                 	db	4
   611  00FEE0  04                 	db	4
   612  00FEE1  78                 	db	120
   613  00FEE2  00                 	db	0
   614  00FEE3  44                 	db	68
   615  00FEE4  7D                 	db	125
   616  00FEE5  40                 	db	64
   617  00FEE6  00                 	db	0
   618  00FEE7  20                 	db	32
   619  00FEE8  40                 	db	64
   620  00FEE9  40                 	db	64
   621  00FEEA  3D                 	db	61
   622  00FEEB  00                 	db	0
   623  00FEEC  7F                 	db	127
   624  00FEED  10                 	db	16
   625  00FEEE  28                 	db	40
   626  00FEEF  44                 	db	68
   627  00FEF0  00                 	db	0
   628  00FEF1  00                 	db	0
   629  00FEF2  41                 	db	65
   630  00FEF3  7F                 	db	127
   631  00FEF4  40                 	db	64
   632  00FEF5  00                 	db	0
   633  00FEF6  7C                 	db	124
   634  00FEF7  04                 	db	4
   635  00FEF8  78                 	db	120
   636  00FEF9  04                 	db	4
   637  00FEFA  78                 	db	120
   638  00FEFB  7C                 	db	124
   639  00FEFC  08                 	db	8
   640  00FEFD  04                 	db	4
   641  00FEFE  04                 	db	4
   642  00FEFF  78                 	db	120
   643  00FF00  38                 	db	56
   644  00FF01  44                 	db	68
   645  00FF02  44                 	db	68
   646  00FF03  44                 	db	68
   647  00FF04  38                 	db	56
   648  00FF05  FC                 	db	252
   649  00FF06  18                 	db	24
   650  00FF07  24                 	db	36
   651  00FF08  24                 	db	36
   652  00FF09  18                 	db	24
   653  00FF0A  18                 	db	24
   654  00FF0B  24                 	db	36
   655  00FF0C  24                 	db	36
   656  00FF0D  18                 	db	24
   657  00FF0E  FC                 	db	252
   658  00FF0F  7C                 	db	124
   659  00FF10  08                 	db	8
   660  00FF11  04                 	db	4
   661  00FF12  04                 	db	4
   662  00FF13  08                 	db	8
   663  00FF14  48                 	db	72
   664  00FF15  54                 	db	84
   665  00FF16  54                 	db	84
   666  00FF17  54                 	db	84
   667  00FF18  24                 	db	36
   668  00FF19  04                 	db	4
   669  00FF1A  04                 	db	4
   670  00FF1B  3F                 	db	63
   671  00FF1C  44                 	db	68
   672  00FF1D  24                 	db	36
   673  00FF1E  3C                 	db	60
   674  00FF1F  40                 	db	64
   675  00FF20  40                 	db	64
   676  00FF21  20                 	db	32
   677  00FF22  7C                 	db	124
   678  00FF23  1C                 	db	28
   679  00FF24  20                 	db	32
   680  00FF25  40                 	db	64
   681  00FF26  20                 	db	32
   682  00FF27  1C                 	db	28
   683  00FF28  3C                 	db	60
   684  00FF29  40                 	db	64
   685  00FF2A  30                 	db	48
   686  00FF2B  40                 	db	64
   687  00FF2C  3C                 	db	60
   688  00FF2D  44                 	db	68
   689  00FF2E  28                 	db	40
   690  00FF2F  10                 	db	16
   691  00FF30  28                 	db	40
   692  00FF31  44                 	db	68
   693  00FF32  4C                 	db	76
   694  00FF33  90                 	db	144
   695  00FF34  90                 	db	144
   696  00FF35  90                 	db	144
   697  00FF36  7C                 	db	124
   698  00FF37  44                 	db	68
   699  00FF38  64                 	db	100
   700  00FF39  54                 	db	84
   701  00FF3A  4C                 	db	76
   702  00FF3B  44                 	db	68
   703  00FF3C  00                 	db	0
   704  00FF3D  08                 	db	8
   705  00FF3E  36                 	db	54
   706  00FF3F  41                 	db	65
   707  00FF40  00                 	db	0
   708  00FF41  00                 	db	0
   709  00FF42  00                 	db	0
   710  00FF43  77                 	db	119
   711  00FF44  00                 	db	0
   712  00FF45  00                 	db	0
   713  00FF46  00                 	db	0
   714  00FF47  41                 	db	65
   715  00FF48  36                 	db	54
   716  00FF49  08                 	db	8
   717  00FF4A  00                 	db	0
   718  00FF4B  02                 	db	2
   719  00FF4C  01                 	db	1
   720  00FF4D  02                 	db	2
   721  00FF4E  04                 	db	4
   722  00FF4F  02                 	db	2
   723  00FF50                     __end_of_font2:
   724                           	opt stack 0
   725  00FF50                     _dpowers:
   726                           	opt stack 0
   727  00FF50  0001               	dw	1
   728  00FF52  000A               	dw	10
   729  00FF54  0064               	dw	100
   730  00FF56  03E8               	dw	1000
   731  00FF58  2710               	dw	10000
   732  00FF5A                     __end_of_dpowers:
   733                           	opt stack 0
   734  00FF5A                     _hexpowers:
   735                           	opt stack 0
   736  00FF5A  0001               	dw	1
   737  00FF5C  0010               	dw	16
   738  00FF5E  0100               	dw	256
   739  00FF60  1000               	dw	4096
   740  00FF62                     __end_of_hexpowers:
   741                           	opt stack 0
   742  0000                     _ADCON1	set	4033
   743  0000                     _CCP1CON	set	4029
   744  0000                     _CCPR1L	set	4030
   745  0000                     _INTCONbits	set	4082
   746  0000                     _OSCCON	set	4051
   747  0000                     _PIE1bits	set	3997
   748  0000                     _PIR1bits	set	3998
   749  0000                     _PORTAbits	set	3968
   750  0000                     _PORTBbits	set	3969
   751  0000                     _PORTCbits	set	3970
   752  0000                     _PORTDbits	set	3971
   753  0000                     _PR2	set	4043
   754  0000                     _RCSTA	set	4011
   755  0000                     _RCSTAbits	set	4011
   756  0000                     _SPBRG	set	4015
   757  0000                     _SPBRGH	set	4016
   758  0000                     _SSPBUF	set	4041
   759  0000                     _SSPCON1	set	4038
   760  0000                     _SSPSTAT	set	4039
   761  0000                     _SSPSTATbits	set	4039
   762  0000                     _T0CON	set	4053
   763  0000                     _T0CONbits	set	4053
   764  0000                     _T2CON	set	4042
   765  0000                     _T3CON	set	4017
   766  0000                     _TMR0H	set	4055
   767  0000                     _TMR0L	set	4054
   768  0000                     _TMR3L	set	4018
   769  0000                     _TRISA	set	3986
   770  0000                     _TRISB	set	3987
   771  0000                     _TRISC	set	3988
   772  0000                     _TRISCbits	set	3988
   773  0000                     _TRISD	set	3989
   774  0000                     _TRISDbits	set	3989
   775  0000                     _TRISE	set	3990
   776  0000                     _TXREG	set	4013
   777  0000                     _TXSTA	set	4012
   778  0000                     _TXSTAbits	set	4012
   779  0000                     _RBPU	set	32655
   780  0000                     _TRMT	set	32097
   781  00FF62                     STR_1:
   782  00FF62  25                 	db	37
   783  00FF63  30                 	db	48	;'0'
   784  00FF64  32                 	db	50	;'2'
   785  00FF65  78                 	db	120	;'x'
   786  00FF66  3A                 	db	58	;':'
   787  00FF67  25                 	db	37
   788  00FF68  30                 	db	48	;'0'
   789  00FF69  32                 	db	50	;'2'
   790  00FF6A  78                 	db	120	;'x'
   791  00FF6B  3A                 	db	58	;':'
   792  00FF6C  25                 	db	37
   793  00FF6D  30                 	db	48	;'0'
   794  00FF6E  32                 	db	50	;'2'
   795  00FF6F  78                 	db	120	;'x'
   796  00FF70  20                 	db	32
   797  00FF71  25                 	db	37
   798  00FF72  30                 	db	48	;'0'
   799  00FF73  32                 	db	50	;'2'
   800  00FF74  78                 	db	120	;'x'
   801  00FF75  2F                 	db	47
   802  00FF76  25                 	db	37
   803  00FF77  30                 	db	48	;'0'
   804  00FF78  32                 	db	50	;'2'
   805  00FF79  78                 	db	120	;'x'
   806  00FF7A  2F                 	db	47
   807  00FF7B  25                 	db	37
   808  00FF7C  30                 	db	48	;'0'
   809  00FF7D  32                 	db	50	;'2'
   810  00FF7E  78                 	db	120	;'x'
   811  00FF7F  00                 	db	0
   812  00FF80                     STR_7:
   813  00FF80  45                 	db	69	;'E'
   814  00FF81  43                 	db	67	;'C'
   815  00FF82  45                 	db	69	;'E'
   816  00FF83  33                 	db	51	;'3'
   817  00FF84  33                 	db	51	;'3'
   818  00FF85  30                 	db	48	;'0'
   819  00FF86  31                 	db	49	;'1'
   820  00FF87  4C                 	db	76	;'L'
   821  00FF88  20                 	db	32
   822  00FF89  53                 	db	83	;'S'
   823  00FF8A  70                 	db	112	;'p'
   824  00FF8B  72                 	db	114	;'r'
   825  00FF8C  69                 	db	105	;'i'
   826  00FF8D  6E                 	db	110	;'n'
   827  00FF8E  67                 	db	103	;'g'
   828  00FF8F  20                 	db	32
   829  00FF90  32                 	db	50	;'2'
   830  00FF91  31                 	db	49	;'1'
   831  00FF92  2D                 	db	45
   832  00FF93  53                 	db	83	;'S'
   833  00FF94  31                 	db	49	;'1'
   834  00FF95  00                 	db	0
   835  00FF96                     STR_2:
   836  00FF96  20                 	db	32
   837  00FF97  54                 	db	84	;'T'
   838  00FF98  65                 	db	101	;'e'
   839  00FF99  6D                 	db	109	;'m'
   840  00FF9A  70                 	db	112	;'p'
   841  00FF9B  20                 	db	32
   842  00FF9C  3D                 	db	61	;'='
   843  00FF9D  20                 	db	32
   844  00FF9E  25                 	db	37
   845  00FF9F  64                 	db	100	;'d'
   846  00FFA0  20                 	db	32
   847  00FFA1  43                 	db	67	;'C'
   848  00FFA2  20                 	db	32
   849  00FFA3  3D                 	db	61	;'='
   850  00FFA4  20                 	db	32
   851  00FFA5  25                 	db	37
   852  00FFA6  64                 	db	100	;'d'
   853  00FFA7  20                 	db	32
   854  00FFA8  46                 	db	70	;'F'
   855  00FFA9  20                 	db	32
   856  00FFAA  00                 	db	0
   857  00FFAB                     STR_3:
   858  00FFAB  52                 	db	82	;'R'
   859  00FFAC  50                 	db	80	;'P'
   860  00FFAD  4D                 	db	77	;'M'
   861  00FFAE  20                 	db	32
   862  00FFAF  3D                 	db	61	;'='
   863  00FFB0  20                 	db	32
   864  00FFB1  25                 	db	37
   865  00FFB2  64                 	db	100	;'d'
   866  00FFB3  20                 	db	32
   867  00FFB4  20                 	db	32
   868  00FFB5  64                 	db	100	;'d'
   869  00FFB6  63                 	db	99	;'c'
   870  00FFB7  20                 	db	32
   871  00FFB8  3D                 	db	61	;'='
   872  00FFB9  20                 	db	32
   873  00FFBA  25                 	db	37
   874  00FFBB  64                 	db	100	;'d'
   875  00FFBC  0D                 	db	13
   876  00FFBD  0A                 	db	10
   877  00FFBE  00                 	db	0
   878  00FFBF                     STR_18:
   879  00FFBF  30                 	db	48	;'0'
   880  00FFC0  31                 	db	49	;'1'
   881  00FFC1  32                 	db	50	;'2'
   882  00FFC2  33                 	db	51	;'3'
   883  00FFC3  34                 	db	52	;'4'
   884  00FFC4  35                 	db	53	;'5'
   885  00FFC5  36                 	db	54	;'6'
   886  00FFC6  37                 	db	55	;'7'
   887  00FFC7  38                 	db	56	;'8'
   888  00FFC8  39                 	db	57	;'9'
   889  00FFC9  61                 	db	97	;'a'
   890  00FFCA  62                 	db	98	;'b'
   891  00FFCB  63                 	db	99	;'c'
   892  00FFCC  64                 	db	100	;'d'
   893  00FFCD  65                 	db	101	;'e'
   894  00FFCE  66                 	db	102	;'f'
   895  00FFCF  00                 	db	0
   896  00FFD0                     STR_8:
   897  00FFD0  54                 	db	84	;'T'
   898  00FFD1  65                 	db	101	;'e'
   899  00FFD2  6D                 	db	109	;'m'
   900  00FFD3  70                 	db	112	;'p'
   901  00FFD4  65                 	db	101	;'e'
   902  00FFD5  72                 	db	114	;'r'
   903  00FFD6  61                 	db	97	;'a'
   904  00FFD7  74                 	db	116	;'t'
   905  00FFD8  75                 	db	117	;'u'
   906  00FFD9  72                 	db	114	;'r'
   907  00FFDA  65                 	db	101	;'e'
   908  00FFDB  3A                 	db	58	;':'
   909  00FFDC  00                 	db	0
   910  00FFDD                     STR_13:
   911  00FFDD  20                 	db	32
   912  00FFDE  20                 	db	32
   913  00FFDF  46                 	db	70	;'F'
   914  00FFE0  41                 	db	65	;'A'
   915  00FFE1  4E                 	db	78	;'N'
   916  00FFE2  00                 	db	0
   917  00FFE3                     STR_11:
   918  00FFE3  54                 	db	84	;'T'
   919  00FFE4  69                 	db	105	;'i'
   920  00FFE5  6D                 	db	109	;'m'
   921  00FFE6  65                 	db	101	;'e'
   922  00FFE7  00                 	db	0
   923  00FFE8                     STR_12:
   924  00FFE8  44                 	db	68	;'D'
   925  00FFE9  61                 	db	97	;'a'
   926  00FFEA  74                 	db	116	;'t'
   927  00FFEB  65                 	db	101	;'e'
   928  00FFEC  00                 	db	0
   929  00FFED  4F                 	db	79	;'O'
   930  00FFEE  4E                 	db	78	;'N'
   931  00FFEF  20                 	db	32
   932  00FFF0  00                 	db	0
   933  00FFF1                     STR_17:
   934  00FFF1  4F                 	db	79	;'O'
   935  00FFF2  46                 	db	70	;'F'
   936  00FFF3  46                 	db	70	;'F'
   937  00FFF4  00                 	db	0
   938  00FFF5                     STR_15:
   939  00FFF5  52                 	db	82	;'R'
   940  00FFF6  50                 	db	80	;'P'
   941  00FFF7  4D                 	db	77	;'M'
   942  00FFF8  00                 	db	0
   943  00FFF9                     STR_9:
   944  00FFF9  43                 	db	67	;'C'
   945  00FFFA  2F                 	db	47
   946  00FFFB  00                 	db	0
   947  00FFFC                     STR_14:
   948  00FFFC  44                 	db	68	;'D'
   949  00FFFD  43                 	db	67	;'C'
   950  00FFFE  00                 	db	0
   951  0000                     
   952                           ; #config settings
   953  00FFFF  00                 	db	0	; dummy byte at the end
   954  0000                     
   955                           	psect	cinit
   956  00144A                     __pcinit:
   957                           	opt stack 0
   958  00144A                     start_initialization:
   959                           	opt stack 0
   960  00144A                     __initialization:
   961                           	opt stack 0
   962                           
   963                           ; Clear objects allocated to BANK0 (25 bytes)
   964  00144A  EE00  F0D0         	lfsr	0,__pbssBANK0
   965  00144E  0E19               	movlw	25
   966  001450                     clear_0:
   967  001450  6AEE               	clrf	postinc0,c
   968  001452  06E8               	decf	wreg,f,c
   969  001454  E1FD               	bnz	clear_0
   970                           
   971                           ; Clear objects allocated to COMRAM (47 bytes)
   972  001456  EE00  F039         	lfsr	0,__pbssCOMRAM
   973  00145A  0E2F               	movlw	47
   974  00145C                     clear_1:
   975  00145C  6AEE               	clrf	postinc0,c
   976  00145E  06E8               	decf	wreg,f,c
   977  001460  E1FD               	bnz	clear_1
   978                           
   979                           ; Initialize objects allocated to BANK1 (33 bytes)
   980                           ; load TBLPTR registers with __pidataBANK1
   981  001462  0E88               	movlw	low __pidataBANK1
   982  001464  6EF6               	movwf	tblptrl,c
   983  001466  0E19               	movlw	high __pidataBANK1
   984  001468  6EF7               	movwf	tblptrh,c
   985  00146A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   986  00146C  6EF8               	movwf	tblptru,c
   987  00146E  EE01  F000         	lfsr	0,__pdataBANK1
   988  001472  EE10 F021          	lfsr	1,33
   989  001476                     copy_data0:
   990  001476  0009               	tblrd		*+
   991  001478  CFF5 FFEE          	movff	tablat,postinc0
   992  00147C  50E5               	movf	postdec1,w,c
   993  00147E  50E1               	movf	fsr1l,w,c
   994  001480  E1FA               	bnz	copy_data0
   995                           
   996                           ; Initialize objects allocated to BANK0 (80 bytes)
   997                           ; load TBLPTR registers with __pidataBANK0
   998  001482  0E52               	movlw	low __pidataBANK0
   999  001484  6EF6               	movwf	tblptrl,c
  1000  001486  0E16               	movlw	high __pidataBANK0
  1001  001488  6EF7               	movwf	tblptrh,c
  1002  00148A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1003  00148C  6EF8               	movwf	tblptru,c
  1004  00148E  EE00  F080         	lfsr	0,__pdataBANK0
  1005  001492  EE10 F050          	lfsr	1,80
  1006  001496                     copy_data1:
  1007  001496  0009               	tblrd		*+
  1008  001498  CFF5 FFEE          	movff	tablat,postinc0
  1009  00149C  50E5               	movf	postdec1,w,c
  1010  00149E  50E1               	movf	fsr1l,w,c
  1011  0014A0  E1FA               	bnz	copy_data1
  1012                           
  1013                           ; Initialize objects allocated to COMRAM (9 bytes)
  1014                           ; load TBLPTR registers with __pidataCOMRAM
  1015  0014A2  0E44               	movlw	low __pidataCOMRAM
  1016  0014A4  6EF6               	movwf	tblptrl,c
  1017  0014A6  0E1A               	movlw	high __pidataCOMRAM
  1018  0014A8  6EF7               	movwf	tblptrh,c
  1019  0014AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1020  0014AC  6EF8               	movwf	tblptru,c
  1021  0014AE  EE00  F068         	lfsr	0,__pdataCOMRAM
  1022  0014B2  EE10 F009          	lfsr	1,9
  1023  0014B6                     copy_data2:
  1024  0014B6  0009               	tblrd		*+
  1025  0014B8  CFF5 FFEE          	movff	tablat,postinc0
  1026  0014BC  50E5               	movf	postdec1,w,c
  1027  0014BE  50E1               	movf	fsr1l,w,c
  1028  0014C0  E1FA               	bnz	copy_data2
  1029  0014C2                     end_of_initialization:
  1030                           	opt stack 0
  1031  0014C2                     __end_of__initialization:
  1032                           	opt stack 0
  1033  0014C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1034  0014C4  6EF8               	movwf	tblptru,c
  1035  0014C6  0100               	movlb	0
  1036  0014C8  EF14  F003         	goto	_main	;jump to C main() function
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           fsr1l	equ	0xFE1
  1045                           
  1046                           	psect	bssCOMRAM
  1047  000039                     __pbssCOMRAM:
  1048                           	opt stack 0
  1049  000039                     _ALARMEN:
  1050                           	opt stack 0
  1051  000039                     	ds	2
  1052  00003B                     _DS1621_tempC:
  1053                           	opt stack 0
  1054  00003B                     	ds	2
  1055  00003D                     _DS1621_tempF:
  1056                           	opt stack 0
  1057  00003D                     	ds	2
  1058  00003F                     _Time_Elapsed:
  1059                           	opt stack 0
  1060  00003F                     	ds	2
  1061  000041                     _nbr:
  1062                           	opt stack 0
  1063  000041                     	ds	2
  1064  000043                     _nec_ok:
  1065                           	opt stack 0
  1066  000043                     	ds	2
  1067  000045                     _rpm:
  1068                           	opt stack 0
  1069  000045                     	ds	2
  1070  000047                     _rps:
  1071                           	opt stack 0
  1072  000047                     	ds	2
  1073  000049                     _txt:
  1074                           	opt stack 0
  1075  000049                     	ds	2
  1076  00004B                     _FAN:
  1077                           	opt stack 0
  1078  00004B                     	ds	1
  1079  00004C                     _Nec_code1:
  1080                           	opt stack 0
  1081  00004C                     	ds	1
  1082  00004D                     _Nec_state:
  1083                           	opt stack 0
  1084  00004D                     	ds	1
  1085  00004E                     __tft_type:
  1086                           	opt stack 0
  1087  00004E                     	ds	1
  1088  00004F                     _alarm_date:
  1089                           	opt stack 0
  1090  00004F                     	ds	1
  1091  000050                     _alarm_hour:
  1092                           	opt stack 0
  1093  000050                     	ds	1
  1094  000051                     _alarm_minute:
  1095                           	opt stack 0
  1096  000051                     	ds	1
  1097  000052                     _alarm_second:
  1098                           	opt stack 0
  1099  000052                     	ds	1
  1100  000053                     _bit_count:
  1101                           	opt stack 0
  1102  000053                     	ds	1
  1103  000054                     _colstart:
  1104                           	opt stack 0
  1105  000054                     	ds	1
  1106  000055                     _day:
  1107                           	opt stack 0
  1108  000055                     	ds	1
  1109  000056                     _dow:
  1110                           	opt stack 0
  1111  000056                     	ds	1
  1112  000057                     _duty_cycle:
  1113                           	opt stack 0
  1114  000057                     	ds	1
  1115  000058                     _found:
  1116                           	opt stack 0
  1117  000058                     	ds	1
  1118  000059                     _hour:
  1119                           	opt stack 0
  1120  000059                     	ds	1
  1121  00005A                     _minute:
  1122                           	opt stack 0
  1123  00005A                     	ds	1
  1124  00005B                     _month:
  1125                           	opt stack 0
  1126  00005B                     	ds	1
  1127  00005C                     _rowstart:
  1128                           	opt stack 0
  1129  00005C                     	ds	1
  1130  00005D                     _second:
  1131                           	opt stack 0
  1132  00005D                     	ds	1
  1133  00005E                     _setup_alarm_hour:
  1134                           	opt stack 0
  1135  00005E                     	ds	1
  1136  00005F                     _setup_alarm_minute:
  1137                           	opt stack 0
  1138  00005F                     	ds	1
  1139  000060                     _setup_alarm_second:
  1140                           	opt stack 0
  1141  000060                     	ds	1
  1142  000061                     _setup_day:
  1143                           	opt stack 0
  1144  000061                     	ds	1
  1145  000062                     _setup_hour:
  1146                           	opt stack 0
  1147  000062                     	ds	1
  1148  000063                     _setup_minute:
  1149                           	opt stack 0
  1150  000063                     	ds	1
  1151  000064                     _setup_month:
  1152                           	opt stack 0
  1153  000064                     	ds	1
  1154  000065                     _setup_second:
  1155                           	opt stack 0
  1156  000065                     	ds	1
  1157  000066                     _setup_year:
  1158                           	opt stack 0
  1159  000066                     	ds	1
  1160  000067                     _year:
  1161                           	opt stack 0
  1162  000067                     	ds	1
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           postinc0	equ	0xFEE
  1168                           wreg	equ	0xFE8
  1169                           postdec1	equ	0xFE5
  1170                           fsr1l	equ	0xFE1
  1171                           
  1172                           	psect	dataCOMRAM
  1173  000068                     __pdataCOMRAM:
  1174                           	opt stack 0
  1175  000068                     _RTC_ALARM_Txt:
  1176                           	opt stack 0
  1177  000068                     	ds	2
  1178  00006A                     _setup_fan_temp:
  1179                           	opt stack 0
  1180  00006A                     	ds	1
  1181  00006B                     _tempSecond:
  1182                           	opt stack 0
  1183  00006B                     	ds	1
  1184  00006C                     _wrap:
  1185                           	opt stack 0
  1186  00006C                     	ds	1
  1187  00006D                     _tempC:
  1188                           	opt stack 0
  1189  00006D                     	ds	4
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           postinc0	equ	0xFEE
  1195                           wreg	equ	0xFE8
  1196                           postdec1	equ	0xFE5
  1197                           fsr1l	equ	0xFE1
  1198                           
  1199                           	psect	bssBANK0
  1200  0000D0                     __pbssBANK0:
  1201                           	opt stack 0
  1202  0000D0                     _array1:
  1203                           	opt stack 0
  1204  0000D0                     	ds	21
  1205  0000E5                     _Nec_code:
  1206                           	opt stack 0
  1207  0000E5                     	ds	4
  1208                           tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           postinc0	equ	0xFEE
  1213                           wreg	equ	0xFE8
  1214                           postdec1	equ	0xFE5
  1215                           fsr1l	equ	0xFE1
  1216                           
  1217                           	psect	dataBANK0
  1218  000080                     __pdataBANK0:
  1219                           	opt stack 0
  1220  000080                     _alarm_time:
  1221                           	opt stack 0
  1222  000080                     	ds	9
  1223  000089                     _setup_alarm_time:
  1224                           	opt stack 0
  1225  000089                     	ds	9
  1226  000092                     _setup_date:
  1227                           	opt stack 0
  1228  000092                     	ds	9
  1229  00009B                     _setup_time:
  1230                           	opt stack 0
  1231  00009B                     	ds	9
  1232  0000A4                     _setup_fan_text:
  1233                           	opt stack 0
  1234  0000A4                     	ds	5
  1235  0000A9                     _Alarm_SW_Txt:
  1236                           	opt stack 0
  1237  0000A9                     	ds	4
  1238  0000AD                     _date:
  1239                           	opt stack 0
  1240  0000AD                     	ds	9
  1241  0000B6                     _time:
  1242                           	opt stack 0
  1243  0000B6                     	ds	9
  1244  0000BF                     _RPM_Txt:
  1245                           	opt stack 0
  1246  0000BF                     	ds	5
  1247  0000C4                     _DC_Txt:
  1248                           	opt stack 0
  1249  0000C4                     	ds	4
  1250  0000C8                     _Fan_SW_Txt:
  1251                           	opt stack 0
  1252  0000C8                     	ds	4
  1253  0000CC                     _tempF:
  1254                           	opt stack 0
  1255  0000CC                     	ds	4
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           	psect	dataBANK1
  1266  000100                     __pdataBANK1:
  1267                           	opt stack 0
  1268  000100                     _buffer:
  1269                           	opt stack 0
  1270  000100                     	ds	33
  1271                           tblptru	equ	0xFF8
  1272                           tblptrh	equ	0xFF7
  1273                           tblptrl	equ	0xFF6
  1274                           tablat	equ	0xFF5
  1275                           postinc0	equ	0xFEE
  1276                           wreg	equ	0xFE8
  1277                           postdec1	equ	0xFE5
  1278                           fsr1l	equ	0xFE1
  1279                           
  1280                           	psect	cstackBANK0
  1281  0000E9                     __pcstackBANK0:
  1282                           	opt stack 0
  1283  0000E9                     ??_do_update_pwm:
  1284  0000E9                     drawtext@y:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x0
  1288  0000E9                     	ds	1
  1289  0000EA                     drawtext@_text:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x1
  1293  0000EA                     	ds	2
  1294  0000EC                     drawtext@color:
  1295                           	opt stack 0
  1296  0000EC                     do_update_pwm@dc_f:
  1297                           	opt stack 0
  1298                           
  1299                           ; 3 bytes @ 0x3
  1300  0000EC                     	ds	2
  1301  0000EE                     drawtext@bg:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x5
  1305  0000EE                     	ds	1
  1306  0000EF                     do_update_pwm@duty_cycle:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0x6
  1310  0000EF                     	ds	1
  1311  0000F0                     drawtext@size:
  1312                           	opt stack 0
  1313  0000F0                     do_update_pwm@dc_I:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x7
  1317  0000F0                     	ds	1
  1318  0000F1                     drawtext@x:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x8
  1322  0000F1                     	ds	1
  1323  0000F2                     drawtext@textsize:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x9
  1327  0000F2                     	ds	2
  1328  0000F4                     drawtext@i:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0xB
  1332  0000F4                     	ds	2
  1333  0000F6                     drawtext@cursor_y:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0xD
  1337  0000F6                     	ds	1
  1338  0000F7                     drawtext@cursor_x:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0xE
  1342  0000F7                     	ds	1
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           
  1352                           	psect	cstackCOMRAM
  1353  000001                     __pcstackCOMRAM:
  1354                           	opt stack 0
  1355  000001                     ??_chkisr:
  1356  000001                     
  1357                           ; 0 bytes @ 0x0
  1358  000001                     	ds	14
  1359  00000F                     ??_isdigit:
  1360  00000F                     ?_strlen:
  1361                           	opt stack 0
  1362  00000F                     ?_DS1621_Read_Temp:
  1363  00000F                     ?___wmul:
  1364                           	opt stack 0
  1365  00000F                     ?___lwdiv:
  1366                           	opt stack 0
  1367  00000F                     ?___ftpack:
  1368                           	opt stack 0
  1369  00000F                     ?___fttol:
  1370                           	opt stack 0
  1371  00000F                     putch@c:
  1372                           	opt stack 0
  1373  00000F                     spiwrite@x:
  1374                           	opt stack 0
  1375  00000F                     OpenUSART@spbrg:
  1376                           	opt stack 0
  1377  00000F                     ___wmul@multiplier:
  1378                           	opt stack 0
  1379  00000F                     ___lwdiv@dividend:
  1380                           	opt stack 0
  1381  00000F                     strcpy@to:
  1382                           	opt stack 0
  1383  00000F                     strlen@s:
  1384                           	opt stack 0
  1385  00000F                     ___ftpack@arg:
  1386                           	opt stack 0
  1387  00000F                     ___fttol@f1:
  1388                           	opt stack 0
  1389  00000F                     I2C_Init@c:
  1390                           	opt stack 0
  1391                           
  1392                           ; 4 bytes @ 0xE
  1393  00000F                     	ds	1
  1394  000010                     spiwrite@spidata:
  1395                           	opt stack 0
  1396  000010                     _isdigit$1749:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0xF
  1400  000010                     	ds	1
  1401  000011                     ??_strlen:
  1402  000011                     write_command@cmd_:
  1403                           	opt stack 0
  1404  000011                     write_data@data_:
  1405                           	opt stack 0
  1406  000011                     OpenUSART@config:
  1407                           	opt stack 0
  1408  000011                     isdigit@c:
  1409                           	opt stack 0
  1410  000011                     ___wmul@multiplicand:
  1411                           	opt stack 0
  1412  000011                     ___lwdiv@divisor:
  1413                           	opt stack 0
  1414  000011                     strcpy@from:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x10
  1418  000011                     	ds	1
  1419  000012                     setAddrWindow@y0:
  1420                           	opt stack 0
  1421  000012                     ___ftpack@exp:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x11
  1425  000012                     	ds	1
  1426  000013                     ??___fttol:
  1427  000013                     setAddrWindow@x1:
  1428                           	opt stack 0
  1429  000013                     ___ftpack@sign:
  1430                           	opt stack 0
  1431  000013                     ___wmul@product:
  1432                           	opt stack 0
  1433  000013                     ___lwdiv@quotient:
  1434                           	opt stack 0
  1435  000013                     strcpy@cp:
  1436                           	opt stack 0
  1437  000013                     strlen@cp:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x12
  1441  000013                     	ds	1
  1442  000014                     ??___ftpack:
  1443  000014                     setAddrWindow@y1:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x13
  1447  000014                     	ds	1
  1448  000015                     ?___awdiv:
  1449                           	opt stack 0
  1450  000015                     setAddrWindow@x0:
  1451                           	opt stack 0
  1452  000015                     ___lwdiv@counter:
  1453                           	opt stack 0
  1454  000015                     delay_ms@ms:
  1455                           	opt stack 0
  1456  000015                     ___awdiv@dividend:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x14
  1460  000015                     	ds	1
  1461  000016                     ?___lwmod:
  1462                           	opt stack 0
  1463  000016                     drawPixel@y:
  1464                           	opt stack 0
  1465  000016                     drawFastVLine@y:
  1466                           	opt stack 0
  1467  000016                     fillRectangle@y:
  1468                           	opt stack 0
  1469  000016                     ___lwmod@dividend:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x15
  1473  000016                     	ds	1
  1474  000017                     ??_delay_ms:
  1475  000017                     ?___lbtoft:
  1476                           	opt stack 0
  1477  000017                     drawFastVLine@h:
  1478                           	opt stack 0
  1479  000017                     fillRectangle@w:
  1480                           	opt stack 0
  1481  000017                     drawPixel@color:
  1482                           	opt stack 0
  1483  000017                     ___awdiv@divisor:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x16
  1487  000017                     	ds	1
  1488  000018                     fillRectangle@h:
  1489                           	opt stack 0
  1490  000018                     ___fttol@sign1:
  1491                           	opt stack 0
  1492  000018                     drawFastVLine@color:
  1493                           	opt stack 0
  1494  000018                     ___lwmod@divisor:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x17
  1498  000018                     	ds	1
  1499  000019                     drawPixel@x:
  1500                           	opt stack 0
  1501  000019                     ___awdiv@counter:
  1502                           	opt stack 0
  1503  000019                     delay_ms@count:
  1504                           	opt stack 0
  1505  000019                     fillRectangle@color:
  1506                           	opt stack 0
  1507  000019                     ___fttol@lval:
  1508                           	opt stack 0
  1509                           
  1510                           ; 4 bytes @ 0x18
  1511  000019                     	ds	1
  1512  00001A                     ??_drawFastVLine:
  1513  00001A                     ___awdiv@sign:
  1514                           	opt stack 0
  1515  00001A                     ___lbtoft@c:
  1516                           	opt stack 0
  1517  00001A                     ___lwmod@counter:
  1518                           	opt stack 0
  1519  00001A                     drawCircle@x0:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x19
  1523  00001A                     	ds	1
  1524  00001B                     ??_fillRectangle:
  1525  00001B                     ?_printf:
  1526                           	opt stack 0
  1527  00001B                     ?___ftmul:
  1528                           	opt stack 0
  1529  00001B                     printf@f:
  1530                           	opt stack 0
  1531  00001B                     ___awdiv@quotient:
  1532                           	opt stack 0
  1533  00001B                     ___ftmul@f1:
  1534                           	opt stack 0
  1535                           
  1536                           ; 3 bytes @ 0x1A
  1537  00001B                     	ds	1
  1538  00001C                     drawCircle@y0:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x1B
  1542  00001C                     	ds	1
  1543  00001D                     ?_get_RPM:
  1544                           	opt stack 0
  1545  00001D                     ___fttol@exp1:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x1C
  1549  00001D                     	ds	1
  1550  00001E                     drawFastVLine@hi:
  1551                           	opt stack 0
  1552  00001E                     drawCircle@r:
  1553                           	opt stack 0
  1554  00001E                     ___ftmul@f2:
  1555                           	opt stack 0
  1556                           
  1557                           ; 3 bytes @ 0x1D
  1558  00001E                     	ds	1
  1559  00001F                     drawFastVLine@lo:
  1560                           	opt stack 0
  1561  00001F                     fillRectangle@hi:
  1562                           	opt stack 0
  1563  00001F                     get_RPM@RPS:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x1E
  1567  00001F                     	ds	1
  1568  000020                     drawFastVLine@x:
  1569                           	opt stack 0
  1570  000020                     fillRectangle@lo:
  1571                           	opt stack 0
  1572  000020                     drawCircle@color:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x1F
  1576  000020                     	ds	1
  1577  000021                     ??___ftmul:
  1578  000021                     fillRect@y:
  1579                           	opt stack 0
  1580  000021                     fillRectangle@x:
  1581                           	opt stack 0
  1582                           
  1583                           ; 1 bytes @ 0x20
  1584  000021                     	ds	1
  1585  000022                     ??_drawCircle:
  1586  000022                     fillRect@w:
  1587                           	opt stack 0
  1588  000022                     fillScreen@color:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x21
  1592  000022                     	ds	1
  1593  000023                     fillRect@h:
  1594                           	opt stack 0
  1595                           
  1596                           ; 1 bytes @ 0x22
  1597  000023                     	ds	1
  1598  000024                     ___ftmul@exp:
  1599                           	opt stack 0
  1600  000024                     fillRect@color:
  1601                           	opt stack 0
  1602  000024                     drawCircle@ddF_x:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x23
  1606  000024                     	ds	1
  1607  000025                     ___ftmul@f3_as_product:
  1608                           	opt stack 0
  1609                           
  1610                           ; 3 bytes @ 0x24
  1611  000025                     	ds	1
  1612  000026                     ??_fillRect:
  1613  000026                     drawCircle@ddF_y:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x25
  1617  000026                     	ds	2
  1618  000028                     ___ftmul@cntr:
  1619                           	opt stack 0
  1620  000028                     drawCircle@f:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x27
  1624  000028                     	ds	1
  1625  000029                     ??_printf:
  1626  000029                     fillRect@x:
  1627                           	opt stack 0
  1628  000029                     ___ftmul@sign:
  1629                           	opt stack 0
  1630                           
  1631                           ; 1 bytes @ 0x28
  1632  000029                     	ds	1
  1633  00002A                     ?___ftdiv:
  1634                           	opt stack 0
  1635  00002A                     fillRect@i:
  1636                           	opt stack 0
  1637  00002A                     drawCircle@x:
  1638                           	opt stack 0
  1639  00002A                     ___ftdiv@f1:
  1640                           	opt stack 0
  1641                           
  1642                           ; 3 bytes @ 0x29
  1643  00002A                     	ds	2
  1644  00002C                     drawChar@y:
  1645                           	opt stack 0
  1646  00002C                     drawCircle@y:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x2B
  1650  00002C                     	ds	1
  1651  00002D                     drawChar@c:
  1652                           	opt stack 0
  1653  00002D                     printf@idx:
  1654                           	opt stack 0
  1655  00002D                     ___ftdiv@f2:
  1656                           	opt stack 0
  1657                           
  1658                           ; 3 bytes @ 0x2C
  1659  00002D                     	ds	1
  1660  00002E                     drawChar@color:
  1661                           	opt stack 0
  1662  00002E                     printf@ap:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x2D
  1666  00002E                     	ds	2
  1667  000030                     ??___ftdiv:
  1668  000030                     printf@prec:
  1669                           	opt stack 0
  1670  000030                     drawChar@bg:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x2F
  1674  000030                     	ds	1
  1675  000031                     printf@val:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x30
  1679  000031                     	ds	1
  1680  000032                     drawChar@size:
  1681                           	opt stack 0
  1682                           
  1683                           ; 1 bytes @ 0x31
  1684  000032                     	ds	1
  1685  000033                     drawChar@line:
  1686                           	opt stack 0
  1687  000033                     printf@flag:
  1688                           	opt stack 0
  1689  000033                     ___ftdiv@cntr:
  1690                           	opt stack 0
  1691                           
  1692                           ; 1 bytes @ 0x32
  1693  000033                     	ds	1
  1694  000034                     drawChar@x:
  1695                           	opt stack 0
  1696  000034                     printf@width:
  1697                           	opt stack 0
  1698  000034                     ___ftdiv@f3:
  1699                           	opt stack 0
  1700                           
  1701                           ; 3 bytes @ 0x33
  1702  000034                     	ds	1
  1703  000035                     drawChar@j:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x34
  1707  000035                     	ds	1
  1708  000036                     drawChar@i:
  1709                           	opt stack 0
  1710  000036                     printf@c:
  1711                           	opt stack 0
  1712                           
  1713                           ; 1 bytes @ 0x35
  1714  000036                     	ds	1
  1715  000037                     ??_drawtext:
  1716  000037                     ___ftdiv@exp:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x36
  1720  000037                     	ds	1
  1721  000038                     ___ftdiv@sign:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x37
  1725  000038                     	ds	1
  1726  000039                     tblptru	equ	0xFF8
  1727                           tblptrh	equ	0xFF7
  1728                           tblptrl	equ	0xFF6
  1729                           tablat	equ	0xFF5
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           postdec1	equ	0xFE5
  1733                           fsr1l	equ	0xFE1
  1734                           
  1735                           ; 0 bytes @ 0x38
  1736 ;;
  1737 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1738 ;;
  1739 ;; *************** function _main *****************
  1740 ;; Defined at:
  1741 ;;		line 106 in file "Lab12_ex.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;		None               void
  1748 ;; Registers used:
  1749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;Total ram usage:        0 bytes
  1760 ;; Hardware stack levels required when called:    9
  1761 ;; This function calls:
  1762 ;;		_DS1621_Read_Temp
  1763 ;;		_DS3231_Read_Time
  1764 ;;		_Do_Init
  1765 ;;		_Initialize_Screen
  1766 ;;		___awdiv
  1767 ;;		___wmul
  1768 ;;		_do_update_pwm
  1769 ;;		_get_RPM
  1770 ;;		_printf
  1771 ;; This function is called by:
  1772 ;;		Startup code after reset
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text0
  1777  000628                     __ptext0:
  1778                           	opt stack 0
  1779  000628                     _main:
  1780                           	opt stack 22
  1781                           
  1782                           ;Lab12_ex.c: 108: Do_Init();
  1783                           
  1784                           ;incstack = 0
  1785  000628  EC9E  F00B         	call	_Do_Init	;wreg free
  1786                           
  1787                           ;Lab12_ex.c: 109: Initialize_Screen();
  1788  00062C  ECBB  F001         	call	_Initialize_Screen	;wreg free
  1789                           
  1790                           ;Lab12_ex.c: 131: PORTAbits.RA4 = 1;
  1791  000630  8880               	bsf	3968,4,c	;volatile
  1792                           
  1793                           ;Lab12_ex.c: 132: duty_cycle = 50;
  1794  000632  0E32               	movlw	50
  1795  000634  6E57               	movwf	_duty_cycle,c
  1796                           
  1797                           ;Lab12_ex.c: 133: do_update_pwm(duty_cycle);
  1798  000636  5057               	movf	_duty_cycle,w,c
  1799  000638  ECC8  F008         	call	_do_update_pwm
  1800                           
  1801                           ;Lab12_ex.c: 134: DS3231_Read_Time();
  1802  00063C  EC2D  F00D         	call	_DS3231_Read_Time	;wreg free
  1803                           
  1804                           ;Lab12_ex.c: 136: if(tempSecond != second)
  1805  000640  505D               	movf	_second,w,c
  1806  000642  186B               	xorwf	_tempSecond,w,c
  1807  000644  B4D8               	btfsc	status,2,c
  1808  000646  D05C               	goto	l5140
  1809                           
  1810                           ;Lab12_ex.c: 137: {
  1811                           ;Lab12_ex.c: 138: tempSecond = second;
  1812  000648  C05D  F06B         	movff	_second,_tempSecond
  1813                           
  1814                           ;Lab12_ex.c: 139: DS1621_tempC = DS1621_Read_Temp();
  1815  00064C  EC2E  F00D         	call	_DS1621_Read_Temp	;wreg free
  1816  000650  C00F  F03B         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  1817  000654  C010  F03C         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  1818                           
  1819                           ;Lab12_ex.c: 140: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  1820  000658  C03B  F00F         	movff	_DS1621_tempC,___wmul@multiplier
  1821  00065C  C03C  F010         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  1822  000660  0E00               	movlw	0
  1823  000662  6E12               	movwf	___wmul@multiplicand+1,c
  1824  000664  0E09               	movlw	9
  1825  000666  6E11               	movwf	___wmul@multiplicand,c
  1826  000668  EC8C  F00C         	call	___wmul	;wreg free
  1827  00066C  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1828  000670  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1829  000674  0E00               	movlw	0
  1830  000676  6E18               	movwf	___awdiv@divisor+1,c
  1831  000678  0E05               	movlw	5
  1832  00067A  6E17               	movwf	___awdiv@divisor,c
  1833  00067C  EC96  F009         	call	___awdiv	;wreg free
  1834  000680  0E20               	movlw	32
  1835  000682  2415               	addwf	?___awdiv,w,c
  1836  000684  6E3D               	movwf	_DS1621_tempF,c
  1837  000686  0E00               	movlw	0
  1838  000688  2016               	addwfc	?___awdiv+1,w,c
  1839  00068A  6E3E               	movwf	_DS1621_tempF+1,c
  1840                           
  1841                           ;Lab12_ex.c: 141: rpm = get_RPM();
  1842  00068C  ECE9  F00B         	call	_get_RPM	;wreg free
  1843  000690  C01D  F045         	movff	?_get_RPM,_rpm
  1844  000694  C01E  F046         	movff	?_get_RPM+1,_rpm+1
  1845                           
  1846                           ;Lab12_ex.c: 142: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  1847  000698  0E62               	movlw	low STR_1
  1848  00069A  6E1B               	movwf	printf@f,c
  1849  00069C  0EFF               	movlw	high STR_1
  1850  00069E  6E1C               	movwf	printf@f+1,c
  1851  0006A0  C059  F01D         	movff	_hour,?_printf+2
  1852  0006A4  6A1E               	clrf	?_printf+3,c
  1853  0006A6  C05A  F01F         	movff	_minute,?_printf+4
  1854  0006AA  6A20               	clrf	?_printf+5,c
  1855  0006AC  C05D  F021         	movff	_second,?_printf+6
  1856  0006B0  6A22               	clrf	?_printf+7,c
  1857  0006B2  C05B  F023         	movff	_month,?_printf+8
  1858  0006B6  6A24               	clrf	?_printf+9,c
  1859  0006B8  C055  F025         	movff	_day,?_printf+10
  1860  0006BC  6A26               	clrf	?_printf+11,c
  1861  0006BE  C067  F027         	movff	_year,?_printf+12
  1862  0006C2  6A28               	clrf	?_printf+13,c
  1863  0006C4  EC0E  F000         	call	_printf	;wreg free
  1864                           
  1865                           ;Lab12_ex.c: 143: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  1866  0006C8  0E96               	movlw	low STR_2
  1867  0006CA  6E1B               	movwf	printf@f,c
  1868  0006CC  0EFF               	movlw	high STR_2
  1869  0006CE  6E1C               	movwf	printf@f+1,c
  1870  0006D0  C03B  F01D         	movff	_DS1621_tempC,?_printf+2
  1871  0006D4  C03C  F01E         	movff	_DS1621_tempC+1,?_printf+3
  1872  0006D8  C03D  F01F         	movff	_DS1621_tempF,?_printf+4
  1873  0006DC  C03E  F020         	movff	_DS1621_tempF+1,?_printf+5
  1874  0006E0  EC0E  F000         	call	_printf	;wreg free
  1875                           
  1876                           ;Lab12_ex.c: 144: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  1877  0006E4  0EAB               	movlw	low STR_3
  1878  0006E6  6E1B               	movwf	printf@f,c
  1879  0006E8  0EFF               	movlw	high STR_3
  1880  0006EA  6E1C               	movwf	printf@f+1,c
  1881  0006EC  C045  F01D         	movff	_rpm,?_printf+2
  1882  0006F0  C046  F01E         	movff	_rpm+1,?_printf+3
  1883  0006F4  C057  F01F         	movff	_duty_cycle,?_printf+4
  1884  0006F8  6A20               	clrf	?_printf+5,c
  1885  0006FA  EC0E  F000         	call	_printf	;wreg free
  1886  0006FE  D000               	goto	l5140
  1887  000700                     l5140:
  1888                           
  1889                           ;Lab12_ex.c: 145: }
  1890                           ;Lab12_ex.c: 147: PORTAbits.RA4 = 1;
  1891  000700  8880               	bsf	3968,4,c	;volatile
  1892                           
  1893                           ;Lab12_ex.c: 148: duty_cycle = 50;
  1894  000702  0E32               	movlw	50
  1895  000704  6E57               	movwf	_duty_cycle,c
  1896                           
  1897                           ;Lab12_ex.c: 149: do_update_pwm(duty_cycle);
  1898  000706  5057               	movf	_duty_cycle,w,c
  1899  000708  ECC8  F008         	call	_do_update_pwm
  1900  00070C  D000               	goto	l5146
  1901  00070E                     l5146:
  1902                           
  1903                           ;Lab12_ex.c: 151: {
  1904                           ;Lab12_ex.c: 152: DS3231_Read_Time();
  1905  00070E  EC2D  F00D         	call	_DS3231_Read_Time	;wreg free
  1906                           
  1907                           ;Lab12_ex.c: 154: if(tempSecond != second)
  1908  000712  505D               	movf	_second,w,c
  1909  000714  186B               	xorwf	_tempSecond,w,c
  1910  000716  B4D8               	btfsc	status,2,c
  1911  000718  D7FA               	goto	l5146
  1912                           
  1913                           ;Lab12_ex.c: 155: {
  1914                           ;Lab12_ex.c: 156: tempSecond = second;
  1915  00071A  C05D  F06B         	movff	_second,_tempSecond
  1916                           
  1917                           ;Lab12_ex.c: 157: DS1621_tempC = DS1621_Read_Temp();
  1918  00071E  EC2E  F00D         	call	_DS1621_Read_Temp	;wreg free
  1919  000722  C00F  F03B         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  1920  000726  C010  F03C         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  1921                           
  1922                           ;Lab12_ex.c: 158: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  1923  00072A  C03B  F00F         	movff	_DS1621_tempC,___wmul@multiplier
  1924  00072E  C03C  F010         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  1925  000732  0E00               	movlw	0
  1926  000734  6E12               	movwf	___wmul@multiplicand+1,c
  1927  000736  0E09               	movlw	9
  1928  000738  6E11               	movwf	___wmul@multiplicand,c
  1929  00073A  EC8C  F00C         	call	___wmul	;wreg free
  1930  00073E  C00F  F015         	movff	?___wmul,___awdiv@dividend
  1931  000742  C010  F016         	movff	?___wmul+1,___awdiv@dividend+1
  1932  000746  0E00               	movlw	0
  1933  000748  6E18               	movwf	___awdiv@divisor+1,c
  1934  00074A  0E05               	movlw	5
  1935  00074C  6E17               	movwf	___awdiv@divisor,c
  1936  00074E  EC96  F009         	call	___awdiv	;wreg free
  1937  000752  0E20               	movlw	32
  1938  000754  2415               	addwf	?___awdiv,w,c
  1939  000756  6E3D               	movwf	_DS1621_tempF,c
  1940  000758  0E00               	movlw	0
  1941  00075A  2016               	addwfc	?___awdiv+1,w,c
  1942  00075C  6E3E               	movwf	_DS1621_tempF+1,c
  1943                           
  1944                           ;Lab12_ex.c: 159: rpm = get_RPM();
  1945  00075E  ECE9  F00B         	call	_get_RPM	;wreg free
  1946  000762  C01D  F045         	movff	?_get_RPM,_rpm
  1947  000766  C01E  F046         	movff	?_get_RPM+1,_rpm+1
  1948                           
  1949                           ;Lab12_ex.c: 160: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  1950  00076A  0E62               	movlw	low STR_1
  1951  00076C  6E1B               	movwf	printf@f,c
  1952  00076E  0EFF               	movlw	high STR_1
  1953  000770  6E1C               	movwf	printf@f+1,c
  1954  000772  C059  F01D         	movff	_hour,?_printf+2
  1955  000776  6A1E               	clrf	?_printf+3,c
  1956  000778  C05A  F01F         	movff	_minute,?_printf+4
  1957  00077C  6A20               	clrf	?_printf+5,c
  1958  00077E  C05D  F021         	movff	_second,?_printf+6
  1959  000782  6A22               	clrf	?_printf+7,c
  1960  000784  C05B  F023         	movff	_month,?_printf+8
  1961  000788  6A24               	clrf	?_printf+9,c
  1962  00078A  C055  F025         	movff	_day,?_printf+10
  1963  00078E  6A26               	clrf	?_printf+11,c
  1964  000790  C067  F027         	movff	_year,?_printf+12
  1965  000794  6A28               	clrf	?_printf+13,c
  1966  000796  EC0E  F000         	call	_printf	;wreg free
  1967                           
  1968                           ;Lab12_ex.c: 161: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  1969  00079A  0E96               	movlw	low STR_2
  1970  00079C  6E1B               	movwf	printf@f,c
  1971  00079E  0EFF               	movlw	high STR_2
  1972  0007A0  6E1C               	movwf	printf@f+1,c
  1973  0007A2  C03B  F01D         	movff	_DS1621_tempC,?_printf+2
  1974  0007A6  C03C  F01E         	movff	_DS1621_tempC+1,?_printf+3
  1975  0007AA  C03D  F01F         	movff	_DS1621_tempF,?_printf+4
  1976  0007AE  C03E  F020         	movff	_DS1621_tempF+1,?_printf+5
  1977  0007B2  EC0E  F000         	call	_printf	;wreg free
  1978                           
  1979                           ;Lab12_ex.c: 162: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  1980  0007B6  0EAB               	movlw	low STR_3
  1981  0007B8  6E1B               	movwf	printf@f,c
  1982  0007BA  0EFF               	movlw	high STR_3
  1983  0007BC  6E1C               	movwf	printf@f+1,c
  1984  0007BE  C045  F01D         	movff	_rpm,?_printf+2
  1985  0007C2  C046  F01E         	movff	_rpm+1,?_printf+3
  1986  0007C6  C057  F01F         	movff	_duty_cycle,?_printf+4
  1987  0007CA  6A20               	clrf	?_printf+5,c
  1988  0007CC  EC0E  F000         	call	_printf	;wreg free
  1989  0007D0  D79E               	goto	l5146
  1990  0007D2  EF0C  F000         	goto	start
  1991  0007D6                     __end_of_main:
  1992                           	opt stack 0
  1993                           tblptru	equ	0xFF8
  1994                           tblptrh	equ	0xFF7
  1995                           tblptrl	equ	0xFF6
  1996                           tablat	equ	0xFF5
  1997                           postinc0	equ	0xFEE
  1998                           wreg	equ	0xFE8
  1999                           postdec1	equ	0xFE5
  2000                           fsr1l	equ	0xFE1
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _printf *****************
  2004 ;; Defined at:
  2005 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  f               2   26[COMRAM] PTR const unsigned char 
  2008 ;;		 -> STR_6(20), STR_5(21), STR_4(30), STR_3(20), 
  2009 ;;		 -> STR_2(21), STR_1(30), 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  idx             1   44[COMRAM] unsigned char 
  2012 ;;  tmpval          4    0        struct .
  2013 ;;  cp              3    0        PTR const unsigned char 
  2014 ;;  width           2   51[COMRAM] int 
  2015 ;;  val             2   48[COMRAM] unsigned int 
  2016 ;;  ap              2   45[COMRAM] PTR void [1]
  2017 ;;		 -> ?_printf(2), 
  2018 ;;  len             2    0        unsigned int 
  2019 ;;  c               1   53[COMRAM] char 
  2020 ;;  flag            1   50[COMRAM] unsigned char 
  2021 ;;  prec            1   47[COMRAM] char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  2   26[COMRAM] int 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2031 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;Total ram usage:       28 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    2
  2038 ;; This function calls:
  2039 ;;		___lwdiv
  2040 ;;		___lwmod
  2041 ;;		___wmul
  2042 ;;		_isdigit
  2043 ;;		_putch
  2044 ;; This function is called by:
  2045 ;;		_main
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text1
  2050  00001C                     __ptext1:
  2051                           	opt stack 0
  2052  00001C                     _printf:
  2053                           	opt stack 28
  2054                           
  2055                           ;doprnt.c: 466: va_list ap;
  2056                           ;doprnt.c: 499: signed char c;
  2057                           ;doprnt.c: 501: int width;
  2058                           ;doprnt.c: 506: signed char prec;
  2059                           ;doprnt.c: 508: unsigned char flag;
  2060                           ;doprnt.c: 523: union {
  2061                           ;doprnt.c: 524: unsigned long vd;
  2062                           ;doprnt.c: 525: double integ;
  2063                           ;doprnt.c: 526: } tmpval;
  2064                           ;doprnt.c: 528: unsigned int val;
  2065                           ;doprnt.c: 529: unsigned len;
  2066                           ;doprnt.c: 530: const char * cp;
  2067                           ;doprnt.c: 533: *ap = __va_start();
  2068                           
  2069                           ;incstack = 0
  2070  00001C  0E1D               	movlw	low (?_printf+2)
  2071  00001E  6E2E               	movwf	printf@ap,c
  2072  000020  0E00               	movlw	high (?_printf+2)
  2073  000022  6E2F               	movwf	printf@ap+1,c
  2074                           
  2075                           ;doprnt.c: 536: while(c = *f++) {
  2076  000024  D199               	goto	l5054
  2077  000026                     l4928:
  2078                           
  2079                           ;doprnt.c: 538: if(c != '%')
  2080  000026  0E25               	movlw	37
  2081  000028  1836               	xorwf	printf@c,w,c
  2082  00002A  B4D8               	btfsc	status,2,c
  2083  00002C  D004               	goto	l4932
  2084                           
  2085                           ;doprnt.c: 540: {
  2086                           ;doprnt.c: 541: (putch(c) );
  2087  00002E  5036               	movf	printf@c,w,c
  2088  000030  EC10  F00D         	call	_putch
  2089                           
  2090                           ;doprnt.c: 542: continue;
  2091  000034  D191               	goto	l5054
  2092  000036                     l4932:
  2093                           
  2094                           ;doprnt.c: 543: }
  2095                           ;doprnt.c: 546: width = 0;
  2096  000036  0E00               	movlw	0
  2097  000038  6E35               	movwf	printf@width+1,c
  2098  00003A  0E00               	movlw	0
  2099  00003C  6E34               	movwf	printf@width,c
  2100                           
  2101                           ;doprnt.c: 548: flag = 0;
  2102  00003E  0E00               	movlw	0
  2103  000040  6E33               	movwf	printf@flag,c
  2104                           
  2105                           ;doprnt.c: 551: switch(*f) {
  2106                           
  2107                           ;doprnt.c: 550: for(;;) {
  2108  000042  D005               	goto	l4938
  2109  000044                     l4934:
  2110                           
  2111                           ;doprnt.c: 580: flag |= 0x04;
  2112  000044  8433               	bsf	printf@flag,2,c
  2113                           
  2114                           ;doprnt.c: 581: f++;
  2115  000046  4A1B               	infsnz	printf@f,f,c
  2116  000048  2A1C               	incf	printf@f+1,f,c
  2117                           
  2118                           ;doprnt.c: 582: continue;
  2119  00004A  D001               	goto	l4938
  2120                           
  2121                           ;doprnt.c: 584: }
  2122  00004C  D00B               	goto	l4940
  2123  00004E                     l4938:
  2124  00004E  C01B  FFF6         	movff	printf@f,tblptrl
  2125  000052  C01C  FFF7         	movff	printf@f+1,tblptrh
  2126  000056                     	if	0	;tblptru may be non-zero
  2127  000056                     	endif
  2128  000056                     	if	0	;tblptru may be non-zero
  2129  000056                     	endif
  2130  000056  0008               	tblrd		*
  2131  000058  50F5               	movf	tablat,w,c
  2132                           
  2133                           ; Switch size 1, requested type "space"
  2134                           ; Number of cases is 1, Range of values is 48 to 48
  2135                           ; switch strategies available:
  2136                           ; Name         Instructions Cycles
  2137                           ; simple_byte            4     3 (average)
  2138                           ;	Chosen strategy is simple_byte
  2139  00005A  0A30               	xorlw	48	; case 48
  2140  00005C  B4D8               	btfsc	status,2,c
  2141  00005E  D7F2               	goto	l4934
  2142                           
  2143                           ;doprnt.c: 585: break;
  2144  000060  D001               	goto	l4940
  2145                           
  2146                           ;doprnt.c: 586: }
  2147  000062  D7F5               	goto	l4938
  2148  000064                     l4940:
  2149                           
  2150                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2151  000064  C01B  FFF6         	movff	printf@f,tblptrl
  2152  000068  C01C  FFF7         	movff	printf@f+1,tblptrh
  2153  00006C                     	if	0	;tblptru may be non-zero
  2154  00006C                     	endif
  2155  00006C                     	if	0	;tblptru may be non-zero
  2156  00006C                     	endif
  2157  00006C  0008               	tblrd		*
  2158  00006E  50F5               	movf	tablat,w,c
  2159  000070  ECB3  F00C         	call	_isdigit
  2160  000074  A0D8               	btfss	status,0,c
  2161  000076  D03B               	goto	l4956
  2162                           
  2163                           ;doprnt.c: 598: width = 0;
  2164  000078  0E00               	movlw	0
  2165  00007A  6E35               	movwf	printf@width+1,c
  2166  00007C  0E00               	movlw	0
  2167  00007E  6E34               	movwf	printf@width,c
  2168  000080  D000               	goto	l4944
  2169  000082                     l4944:
  2170                           
  2171                           ;doprnt.c: 600: width *= 10;
  2172  000082  C034  F00F         	movff	printf@width,___wmul@multiplier
  2173  000086  C035  F010         	movff	printf@width+1,___wmul@multiplier+1
  2174  00008A  0E00               	movlw	0
  2175  00008C  6E12               	movwf	___wmul@multiplicand+1,c
  2176  00008E  0E0A               	movlw	10
  2177  000090  6E11               	movwf	___wmul@multiplicand,c
  2178  000092  EC8C  F00C         	call	___wmul	;wreg free
  2179  000096  C00F  F034         	movff	?___wmul,printf@width
  2180  00009A  C010  F035         	movff	?___wmul+1,printf@width+1
  2181                           
  2182                           ;doprnt.c: 601: width += *f++ - '0';
  2183  00009E  0ED0               	movlw	208
  2184  0000A0  6E29               	movwf	??_printf& (0+255),c
  2185  0000A2  0EFF               	movlw	255
  2186  0000A4  6E2A               	movwf	(??_printf+1)& (0+255),c
  2187  0000A6  C01B  FFF6         	movff	printf@f,tblptrl
  2188  0000AA  C01C  FFF7         	movff	printf@f+1,tblptrh
  2189  0000AE                     	if	0	;tblptru may be non-zero
  2190  0000AE                     	endif
  2191  0000AE                     	if	0	;tblptru may be non-zero
  2192  0000AE                     	endif
  2193  0000AE  0008               	tblrd		*
  2194  0000B0  50F5               	movf	tablat,w,c
  2195  0000B2  6E2B               	movwf	(??_printf+2)& (0+255),c
  2196  0000B4  6A2C               	clrf	(??_printf+3)& (0+255),c
  2197  0000B6  5029               	movf	??_printf,w,c
  2198  0000B8  262B               	addwf	??_printf+2,f,c
  2199  0000BA  502A               	movf	??_printf+1,w,c
  2200  0000BC  222C               	addwfc	??_printf+3,f,c
  2201  0000BE  502B               	movf	??_printf+2,w,c
  2202  0000C0  2634               	addwf	printf@width,f,c
  2203  0000C2  502C               	movf	??_printf+3,w,c
  2204  0000C4  2235               	addwfc	printf@width+1,f,c
  2205  0000C6  4A1B               	infsnz	printf@f,f,c
  2206  0000C8  2A1C               	incf	printf@f+1,f,c
  2207                           
  2208                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2209  0000CA  C01B  FFF6         	movff	printf@f,tblptrl
  2210  0000CE  C01C  FFF7         	movff	printf@f+1,tblptrh
  2211  0000D2                     	if	0	;tblptru may be non-zero
  2212  0000D2                     	endif
  2213  0000D2                     	if	0	;tblptru may be non-zero
  2214  0000D2                     	endif
  2215  0000D2  0008               	tblrd		*
  2216  0000D4  50F5               	movf	tablat,w,c
  2217  0000D6  ECB3  F00C         	call	_isdigit
  2218  0000DA  A0D8               	btfss	status,0,c
  2219  0000DC  D008               	goto	l4956
  2220  0000DE  D7D1               	goto	l4944
  2221                           
  2222                           ;doprnt.c: 608: }
  2223                           ;doprnt.c: 635: switch(c = *f++) {
  2224  0000E0  D006               	goto	l4956
  2225                           
  2226                           ;doprnt.c: 638: goto alldone;
  2227                           
  2228                           ;doprnt.c: 637: case 0:
  2229  0000E2  D148               	goto	l664
  2230                           
  2231                           ;doprnt.c: 698: case 'i':
  2232                           ;doprnt.c: 699: break;
  2233                           
  2234                           ;doprnt.c: 697: case 'd':
  2235  0000E4  D01B               	goto	l627
  2236  0000E6                     l4952:
  2237                           
  2238                           ;doprnt.c: 721: flag |= 0x80;
  2239  0000E6  8E33               	bsf	printf@flag,7,c
  2240                           
  2241                           ;doprnt.c: 723: break;
  2242  0000E8  D019               	goto	l627
  2243                           
  2244                           ;doprnt.c: 813: continue;
  2245                           
  2246                           ;doprnt.c: 802: default:
  2247  0000EA  D136               	goto	l5054
  2248                           
  2249                           ;doprnt.c: 822: }
  2250  0000EC  D017               	goto	l627
  2251  0000EE                     l4956:
  2252  0000EE  C01B  FFF6         	movff	printf@f,tblptrl
  2253  0000F2  C01C  FFF7         	movff	printf@f+1,tblptrh
  2254  0000F6  4A1B               	infsnz	printf@f,f,c
  2255  0000F8  2A1C               	incf	printf@f+1,f,c
  2256  0000FA                     	if	0	;tblptru may be non-zero
  2257  0000FA                     	endif
  2258  0000FA                     	if	0	;tblptru may be non-zero
  2259  0000FA                     	endif
  2260  0000FA  0008               	tblrd		*
  2261  0000FC  CFF5 F036          	movff	tablat,printf@c
  2262  000100  5036               	movf	printf@c,w,c
  2263                           
  2264                           ; Switch size 1, requested type "space"
  2265                           ; Number of cases is 4, Range of values is 0 to 120
  2266                           ; switch strategies available:
  2267                           ; Name         Instructions Cycles
  2268                           ; simple_byte           13     7 (average)
  2269                           ;	Chosen strategy is simple_byte
  2270  000102  0A00               	xorlw	0	; case 0
  2271  000104  B4D8               	btfsc	status,2,c
  2272  000106  D136               	goto	l664
  2273  000108  0A64               	xorlw	100	; case 100
  2274  00010A  B4D8               	btfsc	status,2,c
  2275  00010C  D007               	goto	l627
  2276  00010E  0A0D               	xorlw	13	; case 105
  2277  000110  B4D8               	btfsc	status,2,c
  2278  000112  D004               	goto	l627
  2279  000114  0A11               	xorlw	17	; case 120
  2280  000116  B4D8               	btfsc	status,2,c
  2281  000118  D7E6               	goto	l4952
  2282  00011A  D11E               	goto	l5054
  2283  00011C                     l627:
  2284                           
  2285                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2286  00011C  BE33               	btfsc	printf@flag,7,c
  2287  00011E  D015               	goto	l4968
  2288                           
  2289                           ;doprnt.c: 1253: {
  2290                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2291  000120  C02E  FFD9         	movff	printf@ap,fsr2l
  2292  000124  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2293  000128  CFDE F031          	movff	postinc2,printf@val
  2294  00012C  CFDD F032          	movff	postdec2,printf@val+1
  2295  000130  0E02               	movlw	2
  2296  000132  262E               	addwf	printf@ap,f,c
  2297  000134  0E00               	movlw	0
  2298  000136  222F               	addwfc	printf@ap+1,f,c
  2299                           
  2300                           ;doprnt.c: 1261: if((int)val < 0) {
  2301  000138  AE32               	btfss	printf@val+1,7,c
  2302  00013A  D04E               	goto	l5002
  2303                           
  2304                           ;doprnt.c: 1262: flag |= 0x03;
  2305  00013C  0E03               	movlw	3
  2306  00013E  1233               	iorwf	printf@flag,f,c
  2307                           
  2308                           ;doprnt.c: 1263: val = -val;
  2309  000140  6C31               	negf	printf@val,c
  2310  000142  1E32               	comf	printf@val+1,f,c
  2311  000144  B0D8               	btfsc	status,0,c
  2312  000146  2A32               	incf	printf@val+1,f,c
  2313                           
  2314                           ;doprnt.c: 1264: }
  2315                           ;doprnt.c: 1266: }
  2316  000148  D047               	goto	l5002
  2317  00014A                     l4968:
  2318                           
  2319                           ;doprnt.c: 1268: else
  2320                           ;doprnt.c: 1273: {
  2321                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2322  00014A  C02E  FFD9         	movff	printf@ap,fsr2l
  2323  00014E  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2324  000152  CFDE F031          	movff	postinc2,printf@val
  2325  000156  CFDD F032          	movff	postdec2,printf@val+1
  2326  00015A  0E02               	movlw	2
  2327  00015C  262E               	addwf	printf@ap,f,c
  2328  00015E  0E00               	movlw	0
  2329  000160  222F               	addwfc	printf@ap+1,f,c
  2330                           
  2331                           ;doprnt.c: 1287: }
  2332                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2333  000162  D03A               	goto	l5002
  2334  000164                     l4972:
  2335                           
  2336                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2337  000164  0E01               	movlw	1
  2338  000166  6E36               	movwf	printf@c,c
  2339  000168                     l4974:
  2340  000168  0E05               	movlw	5
  2341  00016A  1836               	xorwf	printf@c,w,c
  2342  00016C  B4D8               	btfsc	status,2,c
  2343  00016E  D03D               	goto	l5004
  2344  000170  D001               	goto	l4978
  2345  000172  D03B               	goto	l5004
  2346  000174                     l4978:
  2347                           
  2348                           ;doprnt.c: 1306: if(val < dpowers[c])
  2349  000174  5036               	movf	printf@c,w,c
  2350  000176  0D02               	mullw	2
  2351  000178  0E50               	movlw	low _dpowers
  2352  00017A  24F3               	addwf	prodl,w,c
  2353  00017C  6EF6               	movwf	tblptrl,c
  2354  00017E  0EFF               	movlw	high _dpowers
  2355  000180  20F4               	addwfc	prodh,w,c
  2356  000182  6EF7               	movwf	tblptrh,c
  2357  000184                     	if	0	;There are less than 3 active tblptr bytes
  2358  000184                     	endif
  2359  000184  0009               	tblrd		*+
  2360  000186  50F5               	movf	tablat,w,c
  2361  000188  5C31               	subwf	printf@val,w,c
  2362  00018A  0009               	tblrd		*+
  2363  00018C  50F5               	movf	tablat,w,c
  2364  00018E  5832               	subwfb	printf@val+1,w,c
  2365  000190  A0D8               	btfss	status,0,c
  2366  000192  D02B               	goto	l5004
  2367  000194  D001               	goto	l4982
  2368                           
  2369                           ;doprnt.c: 1307: break;
  2370  000196  D029               	goto	l5004
  2371  000198                     l4982:
  2372  000198  2A36               	incf	printf@c,f,c
  2373  00019A  D7E6               	goto	l4974
  2374                           
  2375                           ;doprnt.c: 1309: break;
  2376  00019C  D026               	goto	l5004
  2377  00019E                     l4986:
  2378                           
  2379                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2380  00019E  0E01               	movlw	1
  2381  0001A0  6E36               	movwf	printf@c,c
  2382  0001A2                     l4988:
  2383  0001A2  0E04               	movlw	4
  2384  0001A4  1836               	xorwf	printf@c,w,c
  2385  0001A6  B4D8               	btfsc	status,2,c
  2386  0001A8  D020               	goto	l5004
  2387  0001AA  D001               	goto	l4992
  2388  0001AC  D01E               	goto	l5004
  2389  0001AE                     l4992:
  2390                           
  2391                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2392  0001AE  5036               	movf	printf@c,w,c
  2393  0001B0  0D02               	mullw	2
  2394  0001B2  0E5A               	movlw	low _hexpowers
  2395  0001B4  24F3               	addwf	prodl,w,c
  2396  0001B6  6EF6               	movwf	tblptrl,c
  2397  0001B8  0EFF               	movlw	high _hexpowers
  2398  0001BA  20F4               	addwfc	prodh,w,c
  2399  0001BC  6EF7               	movwf	tblptrh,c
  2400  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2401  0001BE                     	endif
  2402  0001BE  0009               	tblrd		*+
  2403  0001C0  50F5               	movf	tablat,w,c
  2404  0001C2  5C31               	subwf	printf@val,w,c
  2405  0001C4  0009               	tblrd		*+
  2406  0001C6  50F5               	movf	tablat,w,c
  2407  0001C8  5832               	subwfb	printf@val+1,w,c
  2408  0001CA  A0D8               	btfss	status,0,c
  2409  0001CC  D00E               	goto	l5004
  2410  0001CE  D001               	goto	l4996
  2411                           
  2412                           ;doprnt.c: 1318: break;
  2413  0001D0  D00C               	goto	l5004
  2414  0001D2                     l4996:
  2415  0001D2  2A36               	incf	printf@c,f,c
  2416  0001D4  D7E6               	goto	l4988
  2417                           
  2418                           ;doprnt.c: 1336: }
  2419                           
  2420                           ;doprnt.c: 1320: break;
  2421  0001D6  D009               	goto	l5004
  2422  0001D8                     l5002:
  2423  0001D8  5033               	movf	printf@flag,w,c
  2424  0001DA  0B80               	andlw	128
  2425                           
  2426                           ; Switch size 1, requested type "space"
  2427                           ; Number of cases is 2, Range of values is 0 to 128
  2428                           ; switch strategies available:
  2429                           ; Name         Instructions Cycles
  2430                           ; simple_byte            7     4 (average)
  2431                           ;	Chosen strategy is simple_byte
  2432  0001DC  0A00               	xorlw	0	; case 0
  2433  0001DE  B4D8               	btfsc	status,2,c
  2434  0001E0  D7C1               	goto	l4972
  2435  0001E2  0A80               	xorlw	128	; case 128
  2436  0001E4  B4D8               	btfsc	status,2,c
  2437  0001E6  D7DB               	goto	l4986
  2438  0001E8  D000               	goto	l5004
  2439  0001EA                     l5004:
  2440                           
  2441                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2442  0001EA  5034               	movf	printf@width,w,c
  2443  0001EC  1035               	iorwf	printf@width+1,w,c
  2444  0001EE  B4D8               	btfsc	status,2,c
  2445  0001F0  D00A               	goto	l5010
  2446  0001F2  C033  F029         	movff	printf@flag,??_printf
  2447  0001F6  0E03               	movlw	3
  2448  0001F8  1629               	andwf	??_printf,f,c
  2449  0001FA  B4D8               	btfsc	status,2,c
  2450  0001FC  D004               	goto	l5010
  2451                           
  2452                           ;doprnt.c: 1346: width--;
  2453  0001FE  0634               	decf	printf@width,f,c
  2454  000200  A0D8               	btfss	status,0,c
  2455  000202  0635               	decf	printf@width+1,f,c
  2456  000204  D000               	goto	l5010
  2457  000206                     l5010:
  2458                           
  2459                           ;doprnt.c: 1381: if(width > c)
  2460  000206  0E80               	movlw	128
  2461  000208  BE36               	btfsc	printf@c,7,c
  2462  00020A  0E7F               	movlw	127
  2463  00020C  6E29               	movwf	??_printf& (0+255),c
  2464  00020E  5034               	movf	printf@width,w,c
  2465  000210  5C36               	subwf	printf@c,w,c
  2466  000212  5035               	movf	printf@width+1,w,c
  2467  000214  0A80               	xorlw	128
  2468  000216  5829               	subwfb	??_printf& (0+255),w,c
  2469  000218  B0D8               	btfsc	status,0,c
  2470  00021A  D007               	goto	l5014
  2471                           
  2472                           ;doprnt.c: 1382: width -= c;
  2473  00021C  5036               	movf	printf@c,w,c
  2474  00021E  5E34               	subwf	printf@width,f,c
  2475  000220  0E00               	movlw	0
  2476  000222  BE36               	btfsc	printf@c,7,c
  2477  000224  0EFF               	movlw	255
  2478  000226  5A35               	subwfb	printf@width+1,f,c
  2479  000228  D005               	goto	l5016
  2480  00022A                     l5014:
  2481                           
  2482                           ;doprnt.c: 1383: else
  2483                           ;doprnt.c: 1384: width = 0;
  2484  00022A  0E00               	movlw	0
  2485  00022C  6E35               	movwf	printf@width+1,c
  2486  00022E  0E00               	movlw	0
  2487  000230  6E34               	movwf	printf@width,c
  2488  000232  D000               	goto	l5016
  2489  000234                     l5016:
  2490                           
  2491                           ;doprnt.c: 1387: if(flag & 0x04) {
  2492  000234  A433               	btfss	printf@flag,2,c
  2493  000236  D01A               	goto	l5028
  2494                           
  2495                           ;doprnt.c: 1392: if(flag & 0x03)
  2496  000238  C033  F029         	movff	printf@flag,??_printf
  2497  00023C  0E03               	movlw	3
  2498  00023E  1629               	andwf	??_printf,f,c
  2499  000240  B4D8               	btfsc	status,2,c
  2500  000242  D004               	goto	l5022
  2501                           
  2502                           ;doprnt.c: 1393: (putch('-') );
  2503  000244  0E2D               	movlw	45
  2504  000246  EC10  F00D         	call	_putch
  2505  00024A  D000               	goto	l5022
  2506  00024C                     l5022:
  2507                           
  2508                           ;doprnt.c: 1415: if(width)
  2509  00024C  5034               	movf	printf@width,w,c
  2510  00024E  1035               	iorwf	printf@width+1,w,c
  2511  000250  B4D8               	btfsc	status,2,c
  2512  000252  D026               	goto	l5038
  2513  000254                     l5024:
  2514                           
  2515                           ;doprnt.c: 1417: (putch('0') );
  2516  000254  0E30               	movlw	48
  2517  000256  EC10  F00D         	call	_putch
  2518                           
  2519                           ;doprnt.c: 1418: while(--width);
  2520  00025A  0634               	decf	printf@width,f,c
  2521  00025C  A0D8               	btfss	status,0,c
  2522  00025E  0635               	decf	printf@width+1,f,c
  2523  000260  5034               	movf	printf@width,w,c
  2524  000262  1035               	iorwf	printf@width+1,w,c
  2525  000264  B4D8               	btfsc	status,2,c
  2526  000266  D01C               	goto	l5038
  2527  000268  D7F5               	goto	l5024
  2528                           
  2529                           ;doprnt.c: 1420: } else
  2530  00026A  D01A               	goto	l5038
  2531  00026C                     l5028:
  2532                           
  2533                           ;doprnt.c: 1422: {
  2534                           ;doprnt.c: 1424: if(width
  2535                           ;doprnt.c: 1428: )
  2536  00026C  5034               	movf	printf@width,w,c
  2537  00026E  1035               	iorwf	printf@width+1,w,c
  2538  000270  B4D8               	btfsc	status,2,c
  2539  000272  D00C               	goto	l5034
  2540  000274                     l5030:
  2541                           
  2542                           ;doprnt.c: 1430: (putch(' ') );
  2543  000274  0E20               	movlw	32
  2544  000276  EC10  F00D         	call	_putch
  2545                           
  2546                           ;doprnt.c: 1431: while(--width);
  2547  00027A  0634               	decf	printf@width,f,c
  2548  00027C  A0D8               	btfss	status,0,c
  2549  00027E  0635               	decf	printf@width+1,f,c
  2550  000280  5034               	movf	printf@width,w,c
  2551  000282  1035               	iorwf	printf@width+1,w,c
  2552  000284  B4D8               	btfsc	status,2,c
  2553  000286  D002               	goto	l5034
  2554  000288  D7F5               	goto	l5030
  2555  00028A  D000               	goto	l5034
  2556  00028C                     l5034:
  2557                           
  2558                           ;doprnt.c: 1438: if(flag & 0x03)
  2559  00028C  C033  F029         	movff	printf@flag,??_printf
  2560  000290  0E03               	movlw	3
  2561  000292  1629               	andwf	??_printf,f,c
  2562  000294  B4D8               	btfsc	status,2,c
  2563  000296  D004               	goto	l5038
  2564                           
  2565                           ;doprnt.c: 1439: (putch('-') );
  2566  000298  0E2D               	movlw	45
  2567  00029A  EC10  F00D         	call	_putch
  2568  00029E  D000               	goto	l5038
  2569  0002A0                     l5038:
  2570                           
  2571                           ;doprnt.c: 1469: }
  2572                           ;doprnt.c: 1472: prec = c;
  2573  0002A0  C036  F030         	movff	printf@c,printf@prec
  2574                           
  2575                           ;doprnt.c: 1474: while(prec--) {
  2576  0002A4  D053               	goto	l5052
  2577                           
  2578                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2579  0002A6  D045               	goto	l5048
  2580  0002A8                     l5040:
  2581                           
  2582                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2583  0002A8  5030               	movf	printf@prec,w,c
  2584  0002AA  0D02               	mullw	2
  2585  0002AC  0E50               	movlw	low _dpowers
  2586  0002AE  24F3               	addwf	prodl,w,c
  2587  0002B0  6EF6               	movwf	tblptrl,c
  2588  0002B2  0EFF               	movlw	high _dpowers
  2589  0002B4  20F4               	addwfc	prodh,w,c
  2590  0002B6  6EF7               	movwf	tblptrh,c
  2591  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2592  0002B8                     	endif
  2593  0002B8  0009               	tblrd		*+
  2594  0002BA  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2595  0002BE  000A               	tblrd		*-
  2596  0002C0  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2597  0002C4  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2598  0002C8  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2599  0002CC  ECD2  F00A         	call	___lwdiv	;wreg free
  2600  0002D0  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  2601  0002D4  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  2602  0002D8  0E00               	movlw	0
  2603  0002DA  6E19               	movwf	___lwmod@divisor+1,c
  2604  0002DC  0E0A               	movlw	10
  2605  0002DE  6E18               	movwf	___lwmod@divisor,c
  2606  0002E0  EC78  F00B         	call	___lwmod	;wreg free
  2607  0002E4  5016               	movf	?___lwmod,w,c
  2608  0002E6  0F30               	addlw	48
  2609  0002E8  6E36               	movwf	printf@c,c
  2610                           
  2611                           ;doprnt.c: 1491: break;
  2612  0002EA  D02C               	goto	l5050
  2613  0002EC                     l5042:
  2614                           
  2615                           ;doprnt.c: 1499: {
  2616                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2617  0002EC  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2618  0002F0  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2619  0002F4  5030               	movf	printf@prec,w,c
  2620  0002F6  0D02               	mullw	2
  2621  0002F8  0E5A               	movlw	low _hexpowers
  2622  0002FA  24F3               	addwf	prodl,w,c
  2623  0002FC  6EF6               	movwf	tblptrl,c
  2624  0002FE  0EFF               	movlw	high _hexpowers
  2625  000300  20F4               	addwfc	prodh,w,c
  2626  000302  6EF7               	movwf	tblptrh,c
  2627  000304                     	if	0	;There are less than 3 active tblptr bytes
  2628  000304                     	endif
  2629  000304  0009               	tblrd		*+
  2630  000306  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2631  00030A  000A               	tblrd		*-
  2632  00030C  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2633  000310  ECD2  F00A         	call	___lwdiv	;wreg free
  2634  000314  500F               	movf	?___lwdiv,w,c
  2635  000316  0B0F               	andlw	15
  2636  000318  6E2D               	movwf	printf@idx,c
  2637                           
  2638                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2639  00031A  502D               	movf	printf@idx,w,c
  2640  00031C  0D01               	mullw	1
  2641  00031E  0EBF               	movlw	low STR_18
  2642  000320  24F3               	addwf	prodl,w,c
  2643  000322  6EF6               	movwf	tblptrl,c
  2644  000324  0EFF               	movlw	high STR_18
  2645  000326  20F4               	addwfc	prodh,w,c
  2646  000328  6EF7               	movwf	tblptrh,c
  2647  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2648  00032A                     	endif
  2649  00032A  0008               	tblrd		*
  2650  00032C  CFF5 F036          	movff	tablat,printf@c
  2651                           
  2652                           ;doprnt.c: 1523: }
  2653                           
  2654                           ;doprnt.c: 1508: }
  2655                           ;doprnt.c: 1510: break;
  2656  000330  D009               	goto	l5050
  2657  000332                     l5048:
  2658  000332  5033               	movf	printf@flag,w,c
  2659  000334  0B80               	andlw	128
  2660                           
  2661                           ; Switch size 1, requested type "space"
  2662                           ; Number of cases is 2, Range of values is 0 to 128
  2663                           ; switch strategies available:
  2664                           ; Name         Instructions Cycles
  2665                           ; simple_byte            7     4 (average)
  2666                           ;	Chosen strategy is simple_byte
  2667  000336  0A00               	xorlw	0	; case 0
  2668  000338  B4D8               	btfsc	status,2,c
  2669  00033A  D7B6               	goto	l5040
  2670  00033C  0A80               	xorlw	128	; case 128
  2671  00033E  B4D8               	btfsc	status,2,c
  2672  000340  D7D5               	goto	l5042
  2673  000342  D000               	goto	l5050
  2674  000344                     l5050:
  2675                           
  2676                           ;doprnt.c: 1524: (putch(c) );
  2677  000344  5036               	movf	printf@c,w,c
  2678  000346  EC10  F00D         	call	_putch
  2679  00034A  D000               	goto	l5052
  2680  00034C                     l5052:
  2681  00034C  0630               	decf	printf@prec,f,c
  2682  00034E  2830               	incf	printf@prec,w,c
  2683  000350  B4D8               	btfsc	status,2,c
  2684  000352  D002               	goto	l5054
  2685  000354  D7EE               	goto	l5048
  2686  000356  D000               	goto	l5054
  2687  000358                     l5054:
  2688  000358  C01B  FFF6         	movff	printf@f,tblptrl
  2689  00035C  C01C  FFF7         	movff	printf@f+1,tblptrh
  2690  000360  4A1B               	infsnz	printf@f,f,c
  2691  000362  2A1C               	incf	printf@f+1,f,c
  2692  000364                     	if	0	;tblptru may be non-zero
  2693  000364                     	endif
  2694  000364                     	if	0	;tblptru may be non-zero
  2695  000364                     	endif
  2696  000364  0008               	tblrd		*
  2697  000366  CFF5 F036          	movff	tablat,printf@c
  2698  00036A  5036               	movf	printf@c,w,c
  2699  00036C  B4D8               	btfsc	status,2,c
  2700  00036E  D002               	goto	l664
  2701  000370  D65A               	goto	l4928
  2702  000372  D000               	goto	l664
  2703  000374                     l664:
  2704  000374  0012               	return		;funcret
  2705  000376                     __end_of_printf:
  2706                           	opt stack 0
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           postinc0	equ	0xFEE
  2714                           wreg	equ	0xFE8
  2715                           postdec1	equ	0xFE5
  2716                           fsr1l	equ	0xFE1
  2717                           postinc2	equ	0xFDE
  2718                           postdec2	equ	0xFDD
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _putch *****************
  2724 ;; Defined at:
  2725 ;;		line 72 in file "Lab12_ex.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  c               1    wreg     unsigned char 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  c               1   14[COMRAM] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;		None               void
  2732 ;; Registers used:
  2733 ;;		wreg
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;Total ram usage:        1 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    1
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_printf
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text2
  2754  001A20                     __ptext2:
  2755                           	opt stack 0
  2756  001A20                     _putch:
  2757                           	opt stack 28
  2758                           
  2759                           ;incstack = 0
  2760                           ;putch@c stored from wreg
  2761  001A20  6E0F               	movwf	putch@c,c
  2762                           
  2763                           ;Lab12_ex.c: 74: while (!TRMT);
  2764  001A22  D000               	goto	l301
  2765  001A24                     l301:
  2766  001A24  A2AC               	btfss	4012,1,c	;volatile
  2767  001A26  D7FE               	goto	l301
  2768                           
  2769                           ;Lab12_ex.c: 75: TXREG = c;
  2770  001A28  C00F  FFAD         	movff	putch@c,4013	;volatile
  2771  001A2C  0012               	return		;funcret
  2772  001A2E                     __end_of_putch:
  2773                           	opt stack 0
  2774                           tblptru	equ	0xFF8
  2775                           tblptrh	equ	0xFF7
  2776                           tblptrl	equ	0xFF6
  2777                           tablat	equ	0xFF5
  2778                           prodh	equ	0xFF4
  2779                           prodl	equ	0xFF3
  2780                           postinc0	equ	0xFEE
  2781                           wreg	equ	0xFE8
  2782                           postdec1	equ	0xFE5
  2783                           fsr1l	equ	0xFE1
  2784                           postinc2	equ	0xFDE
  2785                           postdec2	equ	0xFDD
  2786                           fsr2h	equ	0xFDA
  2787                           fsr2l	equ	0xFD9
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function _isdigit *****************
  2791 ;; Defined at:
  2792 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  c               1    wreg     unsigned char 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  c               1   16[COMRAM] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;		None               void
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;Total ram usage:        3 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    1
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_printf
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text3
  2821  001966                     __ptext3:
  2822                           	opt stack 0
  2823  001966                     _isdigit:
  2824                           	opt stack 28
  2825                           
  2826                           ;incstack = 0
  2827                           ;isdigit@c stored from wreg
  2828  001966  6E11               	movwf	isdigit@c,c
  2829  001968  0E00               	movlw	0
  2830  00196A  6E10               	movwf	_isdigit$1749,c
  2831  00196C  0E3A               	movlw	58
  2832  00196E  6011               	cpfslt	isdigit@c,c
  2833  001970  D006               	goto	l3356
  2834  001972  0E2F               	movlw	47
  2835  001974  6411               	cpfsgt	isdigit@c,c
  2836  001976  D003               	goto	l3356
  2837  001978  0E01               	movlw	1
  2838  00197A  6E10               	movwf	_isdigit$1749,c
  2839  00197C  D000               	goto	l3356
  2840  00197E                     l3356:
  2841  00197E  C010  F00F         	movff	_isdigit$1749,??_isdigit
  2842  001982  300F               	rrcf	??_isdigit,w,c
  2843  001984  D000               	goto	l1131
  2844  001986                     l1131:
  2845  001986  0012               	return		;funcret
  2846  001988                     __end_of_isdigit:
  2847                           	opt stack 0
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           prodh	equ	0xFF4
  2853                           prodl	equ	0xFF3
  2854                           postinc0	equ	0xFEE
  2855                           wreg	equ	0xFE8
  2856                           postdec1	equ	0xFE5
  2857                           fsr1l	equ	0xFE1
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function ___lwmod *****************
  2865 ;; Defined at:
  2866 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  dividend        2   21[COMRAM] unsigned int 
  2869 ;;  divisor         2   23[COMRAM] unsigned int 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  counter         1   25[COMRAM] unsigned char 
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  2   21[COMRAM] unsigned int 
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2881 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2885 ;;Total ram usage:        5 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    1
  2888 ;; This function calls:
  2889 ;;		Nothing
  2890 ;; This function is called by:
  2891 ;;		_printf
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text4
  2896  0016F0                     __ptext4:
  2897                           	opt stack 0
  2898  0016F0                     ___lwmod:
  2899                           	opt stack 28
  2900                           
  2901                           ;incstack = 0
  2902  0016F0  5018               	movf	___lwmod@divisor,w,c
  2903  0016F2  1019               	iorwf	___lwmod@divisor+1,w,c
  2904  0016F4  B4D8               	btfsc	status,2,c
  2905  0016F6  D01D               	goto	l1233
  2906  0016F8  0E01               	movlw	1
  2907  0016FA  6E1A               	movwf	___lwmod@counter,c
  2908  0016FC  D005               	goto	l3576
  2909  0016FE                     l3574:
  2910  0016FE  90D8               	bcf	status,0,c
  2911  001700  3618               	rlcf	___lwmod@divisor,f,c
  2912  001702  3619               	rlcf	___lwmod@divisor+1,f,c
  2913  001704  2A1A               	incf	___lwmod@counter,f,c
  2914  001706  D000               	goto	l3576
  2915  001708                     l3576:
  2916  001708  BE19               	btfsc	___lwmod@divisor+1,7,c
  2917  00170A  D002               	goto	l3578
  2918  00170C  D7F8               	goto	l3574
  2919  00170E  D000               	goto	l3578
  2920  001710                     l3578:
  2921  001710  5018               	movf	___lwmod@divisor,w,c
  2922  001712  5C16               	subwf	___lwmod@dividend,w,c
  2923  001714  5019               	movf	___lwmod@divisor+1,w,c
  2924  001716  5817               	subwfb	___lwmod@dividend+1,w,c
  2925  001718  A0D8               	btfss	status,0,c
  2926  00171A  D005               	goto	l3582
  2927  00171C  5018               	movf	___lwmod@divisor,w,c
  2928  00171E  5E16               	subwf	___lwmod@dividend,f,c
  2929  001720  5019               	movf	___lwmod@divisor+1,w,c
  2930  001722  5A17               	subwfb	___lwmod@dividend+1,f,c
  2931  001724  D000               	goto	l3582
  2932  001726                     l3582:
  2933  001726  90D8               	bcf	status,0,c
  2934  001728  3219               	rrcf	___lwmod@divisor+1,f,c
  2935  00172A  3218               	rrcf	___lwmod@divisor,f,c
  2936  00172C  2E1A               	decfsz	___lwmod@counter,f,c
  2937  00172E  D7F0               	goto	l3578
  2938  001730  D000               	goto	l1233
  2939  001732                     l1233:
  2940  001732  C016  F016         	movff	___lwmod@dividend,?___lwmod
  2941  001736  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  2942  00173A  0012               	return		;funcret
  2943  00173C                     __end_of___lwmod:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           postdec1	equ	0xFE5
  2954                           fsr1l	equ	0xFE1
  2955                           postinc2	equ	0xFDE
  2956                           postdec2	equ	0xFDD
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function ___lwdiv *****************
  2962 ;; Defined at:
  2963 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;  dividend        2   14[COMRAM] unsigned int 
  2966 ;;  divisor         2   16[COMRAM] unsigned int 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  quotient        2   18[COMRAM] unsigned int 
  2969 ;;  counter         1   20[COMRAM] unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  2   14[COMRAM] unsigned int 
  2972 ;; Registers used:
  2973 ;;		wreg, status,2, status,0
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;Total ram usage:        7 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    1
  2986 ;; This function calls:
  2987 ;;		Nothing
  2988 ;; This function is called by:
  2989 ;;		_printf
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text5
  2994  0015A4                     __ptext5:
  2995                           	opt stack 0
  2996  0015A4                     ___lwdiv:
  2997                           	opt stack 28
  2998                           
  2999                           ;incstack = 0
  3000  0015A4  0E00               	movlw	0
  3001  0015A6  6E14               	movwf	___lwdiv@quotient+1,c
  3002  0015A8  0E00               	movlw	0
  3003  0015AA  6E13               	movwf	___lwdiv@quotient,c
  3004  0015AC  5011               	movf	___lwdiv@divisor,w,c
  3005  0015AE  1012               	iorwf	___lwdiv@divisor+1,w,c
  3006  0015B0  B4D8               	btfsc	status,2,c
  3007  0015B2  D021               	goto	l1223
  3008  0015B4  0E01               	movlw	1
  3009  0015B6  6E15               	movwf	___lwdiv@counter,c
  3010  0015B8  D005               	goto	l3556
  3011  0015BA                     l3554:
  3012  0015BA  90D8               	bcf	status,0,c
  3013  0015BC  3611               	rlcf	___lwdiv@divisor,f,c
  3014  0015BE  3612               	rlcf	___lwdiv@divisor+1,f,c
  3015  0015C0  2A15               	incf	___lwdiv@counter,f,c
  3016  0015C2  D000               	goto	l3556
  3017  0015C4                     l3556:
  3018  0015C4  BE12               	btfsc	___lwdiv@divisor+1,7,c
  3019  0015C6  D002               	goto	l3558
  3020  0015C8  D7F8               	goto	l3554
  3021  0015CA  D000               	goto	l3558
  3022  0015CC                     l3558:
  3023  0015CC  90D8               	bcf	status,0,c
  3024  0015CE  3613               	rlcf	___lwdiv@quotient,f,c
  3025  0015D0  3614               	rlcf	___lwdiv@quotient+1,f,c
  3026  0015D2  5011               	movf	___lwdiv@divisor,w,c
  3027  0015D4  5C0F               	subwf	___lwdiv@dividend,w,c
  3028  0015D6  5012               	movf	___lwdiv@divisor+1,w,c
  3029  0015D8  5810               	subwfb	___lwdiv@dividend+1,w,c
  3030  0015DA  A0D8               	btfss	status,0,c
  3031  0015DC  D006               	goto	l3566
  3032  0015DE  5011               	movf	___lwdiv@divisor,w,c
  3033  0015E0  5E0F               	subwf	___lwdiv@dividend,f,c
  3034  0015E2  5012               	movf	___lwdiv@divisor+1,w,c
  3035  0015E4  5A10               	subwfb	___lwdiv@dividend+1,f,c
  3036  0015E6  8013               	bsf	___lwdiv@quotient,0,c
  3037  0015E8  D000               	goto	l3566
  3038  0015EA                     l3566:
  3039  0015EA  90D8               	bcf	status,0,c
  3040  0015EC  3212               	rrcf	___lwdiv@divisor+1,f,c
  3041  0015EE  3211               	rrcf	___lwdiv@divisor,f,c
  3042  0015F0  2E15               	decfsz	___lwdiv@counter,f,c
  3043  0015F2  D7EC               	goto	l3558
  3044  0015F4  D000               	goto	l1223
  3045  0015F6                     l1223:
  3046  0015F6  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  3047  0015FA  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3048  0015FE  0012               	return		;funcret
  3049  001600                     __end_of___lwdiv:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           prodh	equ	0xFF4
  3056                           prodl	equ	0xFF3
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           postdec1	equ	0xFE5
  3060                           fsr1l	equ	0xFE1
  3061                           postinc2	equ	0xFDE
  3062                           postdec2	equ	0xFDD
  3063                           fsr2h	equ	0xFDA
  3064                           fsr2l	equ	0xFD9
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function _get_RPM *****************
  3068 ;; Defined at:
  3069 ;;		line 10 in file "Fan_Support.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;		None
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  RPS             2   30[COMRAM] int 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  2   28[COMRAM] int 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3083 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;Total ram usage:        4 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    2
  3090 ;; This function calls:
  3091 ;;		___awdiv
  3092 ;;		___wmul
  3093 ;; This function is called by:
  3094 ;;		_main
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text6
  3099  0017D2                     __ptext6:
  3100                           	opt stack 0
  3101  0017D2                     _get_RPM:
  3102                           	opt stack 28
  3103                           
  3104                           ;Fan_Support.c: 12: int RPS = TMR3L / 2;
  3105                           
  3106                           ;incstack = 0
  3107  0017D2  CFB2 F015          	movff	4018,___awdiv@dividend	;volatile
  3108  0017D6  6A16               	clrf	___awdiv@dividend+1,c
  3109  0017D8  0E00               	movlw	0
  3110  0017DA  6E18               	movwf	___awdiv@divisor+1,c
  3111  0017DC  0E02               	movlw	2
  3112  0017DE  6E17               	movwf	___awdiv@divisor,c
  3113  0017E0  EC96  F009         	call	___awdiv	;wreg free
  3114  0017E4  C015  F01F         	movff	?___awdiv,get_RPM@RPS
  3115  0017E8  C016  F020         	movff	?___awdiv+1,get_RPM@RPS+1
  3116                           
  3117                           ;Fan_Support.c: 14: TMR3L = 0;
  3118  0017EC  0E00               	movlw	0
  3119  0017EE  6EB2               	movwf	4018,c	;volatile
  3120                           
  3121                           ;Fan_Support.c: 15: return (RPS * 60);
  3122  0017F0  C01F  F00F         	movff	get_RPM@RPS,___wmul@multiplier
  3123  0017F4  C020  F010         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3124  0017F8  0E00               	movlw	0
  3125  0017FA  6E12               	movwf	___wmul@multiplicand+1,c
  3126  0017FC  0E3C               	movlw	60
  3127  0017FE  6E11               	movwf	___wmul@multiplicand,c
  3128  001800  EC8C  F00C         	call	___wmul	;wreg free
  3129  001804  C00F  F01D         	movff	?___wmul,?_get_RPM
  3130  001808  C010  F01E         	movff	?___wmul+1,?_get_RPM+1
  3131  00180C  D000               	goto	l13
  3132  00180E                     l13:
  3133  00180E  0012               	return		;funcret
  3134  001810                     __end_of_get_RPM:
  3135                           	opt stack 0
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           prodh	equ	0xFF4
  3141                           prodl	equ	0xFF3
  3142                           postinc0	equ	0xFEE
  3143                           wreg	equ	0xFE8
  3144                           postdec1	equ	0xFE5
  3145                           fsr1l	equ	0xFE1
  3146                           postinc2	equ	0xFDE
  3147                           postdec2	equ	0xFDD
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function ___awdiv *****************
  3153 ;; Defined at:
  3154 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  dividend        2   20[COMRAM] int 
  3157 ;;  divisor         2   22[COMRAM] int 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  quotient        2   26[COMRAM] int 
  3160 ;;  sign            1   25[COMRAM] unsigned char 
  3161 ;;  counter         1   24[COMRAM] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  2   20[COMRAM] int 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;Total ram usage:        8 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    1
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_get_RPM
  3182 ;;		_main
  3183 ;;		_Update_Screen
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text7
  3188  00132C                     __ptext7:
  3189                           	opt stack 0
  3190  00132C                     ___awdiv:
  3191                           	opt stack 28
  3192                           
  3193                           ;incstack = 0
  3194  00132C  0E00               	movlw	0
  3195  00132E  6E1A               	movwf	___awdiv@sign,c
  3196  001330  AE18               	btfss	___awdiv@divisor+1,7,c
  3197  001332  D007               	goto	l3462
  3198  001334  6C17               	negf	___awdiv@divisor,c
  3199  001336  1E18               	comf	___awdiv@divisor+1,f,c
  3200  001338  B0D8               	btfsc	status,0,c
  3201  00133A  2A18               	incf	___awdiv@divisor+1,f,c
  3202  00133C  0E01               	movlw	1
  3203  00133E  6E1A               	movwf	___awdiv@sign,c
  3204  001340  D000               	goto	l3462
  3205  001342                     l3462:
  3206  001342  AE16               	btfss	___awdiv@dividend+1,7,c
  3207  001344  D007               	goto	l3468
  3208  001346  6C15               	negf	___awdiv@dividend,c
  3209  001348  1E16               	comf	___awdiv@dividend+1,f,c
  3210  00134A  B0D8               	btfsc	status,0,c
  3211  00134C  2A16               	incf	___awdiv@dividend+1,f,c
  3212  00134E  0E01               	movlw	1
  3213  001350  1A1A               	xorwf	___awdiv@sign,f,c
  3214  001352  D000               	goto	l3468
  3215  001354                     l3468:
  3216  001354  0E00               	movlw	0
  3217  001356  6E1C               	movwf	___awdiv@quotient+1,c
  3218  001358  0E00               	movlw	0
  3219  00135A  6E1B               	movwf	___awdiv@quotient,c
  3220  00135C  5017               	movf	___awdiv@divisor,w,c
  3221  00135E  1018               	iorwf	___awdiv@divisor+1,w,c
  3222  001360  B4D8               	btfsc	status,2,c
  3223  001362  D021               	goto	l3490
  3224  001364  0E01               	movlw	1
  3225  001366  6E19               	movwf	___awdiv@counter,c
  3226  001368  D005               	goto	l3476
  3227  00136A                     l3474:
  3228  00136A  90D8               	bcf	status,0,c
  3229  00136C  3617               	rlcf	___awdiv@divisor,f,c
  3230  00136E  3618               	rlcf	___awdiv@divisor+1,f,c
  3231  001370  2A19               	incf	___awdiv@counter,f,c
  3232  001372  D000               	goto	l3476
  3233  001374                     l3476:
  3234  001374  BE18               	btfsc	___awdiv@divisor+1,7,c
  3235  001376  D002               	goto	l3478
  3236  001378  D7F8               	goto	l3474
  3237  00137A  D000               	goto	l3478
  3238  00137C                     l3478:
  3239  00137C  90D8               	bcf	status,0,c
  3240  00137E  361B               	rlcf	___awdiv@quotient,f,c
  3241  001380  361C               	rlcf	___awdiv@quotient+1,f,c
  3242  001382  5017               	movf	___awdiv@divisor,w,c
  3243  001384  5C15               	subwf	___awdiv@dividend,w,c
  3244  001386  5018               	movf	___awdiv@divisor+1,w,c
  3245  001388  5816               	subwfb	___awdiv@dividend+1,w,c
  3246  00138A  A0D8               	btfss	status,0,c
  3247  00138C  D006               	goto	l3486
  3248  00138E  5017               	movf	___awdiv@divisor,w,c
  3249  001390  5E15               	subwf	___awdiv@dividend,f,c
  3250  001392  5018               	movf	___awdiv@divisor+1,w,c
  3251  001394  5A16               	subwfb	___awdiv@dividend+1,f,c
  3252  001396  801B               	bsf	___awdiv@quotient,0,c
  3253  001398  D000               	goto	l3486
  3254  00139A                     l3486:
  3255  00139A  90D8               	bcf	status,0,c
  3256  00139C  3218               	rrcf	___awdiv@divisor+1,f,c
  3257  00139E  3217               	rrcf	___awdiv@divisor,f,c
  3258  0013A0  2E19               	decfsz	___awdiv@counter,f,c
  3259  0013A2  D7EC               	goto	l3478
  3260  0013A4  D000               	goto	l3490
  3261  0013A6                     l3490:
  3262  0013A6  501A               	movf	___awdiv@sign,w,c
  3263  0013A8  B4D8               	btfsc	status,2,c
  3264  0013AA  D005               	goto	l3494
  3265  0013AC  6C1B               	negf	___awdiv@quotient,c
  3266  0013AE  1E1C               	comf	___awdiv@quotient+1,f,c
  3267  0013B0  B0D8               	btfsc	status,0,c
  3268  0013B2  2A1C               	incf	___awdiv@quotient+1,f,c
  3269  0013B4  D000               	goto	l3494
  3270  0013B6                     l3494:
  3271  0013B6  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  3272  0013BA  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  3273  0013BE  D000               	goto	l893
  3274  0013C0                     l893:
  3275  0013C0  0012               	return		;funcret
  3276  0013C2                     __end_of___awdiv:
  3277                           	opt stack 0
  3278                           tblptru	equ	0xFF8
  3279                           tblptrh	equ	0xFF7
  3280                           tblptrl	equ	0xFF6
  3281                           tablat	equ	0xFF5
  3282                           prodh	equ	0xFF4
  3283                           prodl	equ	0xFF3
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1l	equ	0xFE1
  3288                           postinc2	equ	0xFDE
  3289                           postdec2	equ	0xFDD
  3290                           fsr2h	equ	0xFDA
  3291                           fsr2l	equ	0xFD9
  3292                           status	equ	0xFD8
  3293                           
  3294 ;; *************** function _do_update_pwm *****************
  3295 ;; Defined at:
  3296 ;;		line 45 in file "Fan_Support.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  duty_cycle      1    wreg     unsigned char 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;  duty_cycle      1    6[BANK0 ] unsigned char 
  3301 ;;  dc_f            3    3[BANK0 ] float 
  3302 ;;  dc_I            2    7[BANK0 ] int 
  3303 ;; Return value:  Size  Location     Type
  3304 ;;		None               void
  3305 ;; Registers used:
  3306 ;;		wreg, status,2, status,0, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;Total ram usage:        9 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    3
  3319 ;; This function calls:
  3320 ;;		___ftdiv
  3321 ;;		___ftmul
  3322 ;;		___fttol
  3323 ;;		___lbtoft
  3324 ;; This function is called by:
  3325 ;;		_main
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           	psect	text8
  3330  001190                     __ptext8:
  3331                           	opt stack 0
  3332  001190                     _do_update_pwm:
  3333                           	opt stack 27
  3334                           
  3335                           ;incstack = 0
  3336                           ;do_update_pwm@duty_cycle stored from wreg
  3337  001190  0100               	movlb	0	; () banked
  3338  001192  6FEF               	movwf	do_update_pwm@duty_cycle& (0+255),b
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;Fan_Support.c: 47: float dc_f;
  3342                           ;Fan_Support.c: 48: int dc_I;
  3343                           ;Fan_Support.c: 49: PR2 = 0b00000100 ;
  3344  001194  0E04               	movlw	4
  3345  001196  6ECB               	movwf	4043,c	;volatile
  3346                           
  3347                           ;Fan_Support.c: 50: T2CON = 0b00000111 ;
  3348  001198  0E07               	movlw	7
  3349  00119A  6ECA               	movwf	4042,c	;volatile
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;Fan_Support.c: 51: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  3353  00119C  0E00               	movlw	0
  3354  00119E  6E1E               	movwf	___ftmul@f2,c
  3355  0011A0  0E80               	movlw	128
  3356  0011A2  6E1F               	movwf	___ftmul@f2+1,c
  3357  0011A4  0E40               	movlw	64
  3358  0011A6  6E20               	movwf	___ftmul@f2+2,c
  3359  0011A8  0100               	movlb	0	; () banked
  3360  0011AA  51EF               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  3361  0011AC  ECA0  F00C         	call	___lbtoft
  3362  0011B0  C017  F01B         	movff	?___lbtoft,___ftmul@f1
  3363  0011B4  C018  F01C         	movff	?___lbtoft+1,___ftmul@f1+1
  3364  0011B8  C019  F01D         	movff	?___lbtoft+2,___ftmul@f1+2
  3365  0011BC  EC81  F006         	call	___ftmul	;wreg free
  3366  0011C0  C01B  F02A         	movff	?___ftmul,___ftdiv@f1
  3367  0011C4  C01C  F02B         	movff	?___ftmul+1,___ftdiv@f1+1
  3368  0011C8  C01D  F02C         	movff	?___ftmul+2,___ftdiv@f1+2
  3369  0011CC  0E00               	movlw	0
  3370  0011CE  6E2D               	movwf	___ftdiv@f2,c
  3371  0011D0  0EA0               	movlw	160
  3372  0011D2  6E2E               	movwf	___ftdiv@f2+1,c
  3373  0011D4  0E41               	movlw	65
  3374  0011D6  6E2F               	movwf	___ftdiv@f2+2,c
  3375  0011D8  ECE9  F007         	call	___ftdiv	;wreg free
  3376  0011DC  C02A  F0EC         	movff	?___ftdiv,do_update_pwm@dc_f
  3377  0011E0  C02B  F0ED         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  3378  0011E4  C02C  F0EE         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  3379                           
  3380                           ;Fan_Support.c: 53: dc_I = (int) dc_f;
  3381  0011E8  C0EC  F00F         	movff	do_update_pwm@dc_f,___fttol@f1
  3382  0011EC  C0ED  F010         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  3383  0011F0  C0EE  F011         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  3384  0011F4  EC76  F007         	call	___fttol	;wreg free
  3385  0011F8  C00F  F0F0         	movff	?___fttol,do_update_pwm@dc_I
  3386  0011FC  C010  F0F1         	movff	?___fttol+1,do_update_pwm@dc_I+1
  3387                           
  3388                           ;Fan_Support.c: 54: if (dc_I > duty_cycle) dc_I++;
  3389  001200  0100               	movlb	0	; () banked
  3390  001202  51EF               	movf	do_update_pwm@duty_cycle& (0+255),w,b
  3391  001204  0100               	movlb	0	; () banked
  3392  001206  6FE9               	movwf	??_do_update_pwm& (0+255),b
  3393  001208  6BEA               	clrf	(??_do_update_pwm+1)& (0+255),b
  3394  00120A  0100               	movlb	0	; () banked
  3395  00120C  51F0               	movf	do_update_pwm@dc_I& (0+255),w,b
  3396  00120E  0100               	movlb	0	; () banked
  3397  001210  5DE9               	subwf	??_do_update_pwm& (0+255),w,b
  3398  001212  0100               	movlb	0	; () banked
  3399  001214  51EA               	movf	(??_do_update_pwm+1)& (0+255),w,b
  3400  001216  0A80               	xorlw	128
  3401  001218  0100               	movlb	0	; () banked
  3402  00121A  6FEB               	movwf	(??_do_update_pwm+2)& (0+255),b
  3403  00121C  0100               	movlb	0	; () banked
  3404  00121E  51F1               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
  3405  001220  0A80               	xorlw	128
  3406  001222  0100               	movlb	0	; () banked
  3407  001224  59EB               	subwfb	(??_do_update_pwm+2)& (0+255),w,b
  3408  001226  B0D8               	btfsc	status,0,c
  3409  001228  D004               	goto	l4876
  3410                           
  3411                           ; BSR set to: 0
  3412  00122A  0100               	movlb	0	; () banked
  3413  00122C  4BF0               	infsnz	do_update_pwm@dc_I& (0+255),f,b
  3414  00122E  2BF1               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
  3415  001230  D000               	goto	l4876
  3416  001232                     l4876:
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;Fan_Support.c: 55: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  3420  001232  C0F0  F0E9         	movff	do_update_pwm@dc_I,??_do_update_pwm
  3421  001236  0E03               	movlw	3
  3422  001238  0100               	movlb	0	; () banked
  3423  00123A  17E9               	andwf	??_do_update_pwm& (0+255),f,b
  3424  00123C  0100               	movlb	0	; () banked
  3425  00123E  39E9               	swapf	??_do_update_pwm& (0+255),w,b
  3426  001240  0BF0               	andlw	240
  3427  001242  090C               	iorlw	12
  3428  001244  6EBD               	movwf	4029,c	;volatile
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;Fan_Support.c: 56: CCPR1L = (dc_I) >> 2;
  3432  001246  C0F0  F0E9         	movff	do_update_pwm@dc_I,??_do_update_pwm
  3433  00124A  C0F1  F0EA         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  3434  00124E  0100               	movlb	0	; () banked
  3435  001250  35EA               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  3436  001252  33EA               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  3437  001254  33E9               	rrcf	??_do_update_pwm& (0+255),f,b
  3438  001256  0100               	movlb	0	; () banked
  3439  001258  35EA               	rlcf	(??_do_update_pwm+1)& (0+255),w,b
  3440  00125A  33EA               	rrcf	(??_do_update_pwm+1)& (0+255),f,b
  3441  00125C  33E9               	rrcf	??_do_update_pwm& (0+255),f,b
  3442  00125E  0100               	movlb	0	; () banked
  3443  001260  51E9               	movf	??_do_update_pwm& (0+255),w,b
  3444  001262  6EBE               	movwf	4030,c	;volatile
  3445                           
  3446                           ; BSR set to: 0
  3447  001264  0012               	return		;funcret
  3448  001266                     __end_of_do_update_pwm:
  3449                           	opt stack 0
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           postinc0	equ	0xFEE
  3457                           wreg	equ	0xFE8
  3458                           postdec1	equ	0xFE5
  3459                           fsr1l	equ	0xFE1
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function ___lbtoft *****************
  3467 ;; Defined at:
  3468 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  c               1    wreg     unsigned char 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  c               1   25[COMRAM] unsigned char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  3   22[COMRAM] float 
  3475 ;; Registers used:
  3476 ;;		wreg, status,2, status,0, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3482 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;Total ram usage:        4 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    2
  3489 ;; This function calls:
  3490 ;;		___ftpack
  3491 ;; This function is called by:
  3492 ;;		_do_update_pwm
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text9
  3497  001940                     __ptext9:
  3498                           	opt stack 0
  3499  001940                     ___lbtoft:
  3500                           	opt stack 27
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;incstack = 0
  3504                           ;___lbtoft@c stored from wreg
  3505  001940  6E1A               	movwf	___lbtoft@c,c
  3506  001942  501A               	movf	___lbtoft@c,w,c
  3507  001944  6E0F               	movwf	___ftpack@arg,c
  3508  001946  6A10               	clrf	___ftpack@arg+1,c
  3509  001948  6A11               	clrf	___ftpack@arg+2,c
  3510  00194A  0E8E               	movlw	142
  3511  00194C  6E12               	movwf	___ftpack@exp,c
  3512  00194E  0E00               	movlw	0
  3513  001950  6E13               	movwf	___ftpack@sign,c
  3514  001952  EC33  F009         	call	___ftpack	;wreg free
  3515  001956  C00F  F017         	movff	?___ftpack,?___lbtoft
  3516  00195A  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  3517  00195E  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  3518  001962  D000               	goto	l1157
  3519  001964                     l1157:
  3520  001964  0012               	return		;funcret
  3521  001966                     __end_of___lbtoft:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           prodh	equ	0xFF4
  3528                           prodl	equ	0xFF3
  3529                           postinc0	equ	0xFEE
  3530                           wreg	equ	0xFE8
  3531                           postdec1	equ	0xFE5
  3532                           fsr1l	equ	0xFE1
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function ___fttol *****************
  3540 ;; Defined at:
  3541 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  f1              3   14[COMRAM] float 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  lval            4   24[COMRAM] unsigned long 
  3546 ;;  exp1            1   28[COMRAM] unsigned char 
  3547 ;;  sign1           1   23[COMRAM] unsigned char 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  4   14[COMRAM] long 
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;Total ram usage:       15 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    1
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_do_update_pwm
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text10
  3572  000EEC                     __ptext10:
  3573                           	opt stack 0
  3574  000EEC                     ___fttol:
  3575                           	opt stack 28
  3576                           
  3577                           ;incstack = 0
  3578  000EEC  C011  F013         	movff	___fttol@f1+2,??___fttol
  3579  000EF0  6A14               	clrf	(??___fttol+1)& (0+255),c
  3580  000EF2  6A15               	clrf	(??___fttol+2)& (0+255),c
  3581  000EF4  3410               	rlcf	___fttol@f1+1,w,c
  3582  000EF6  3613               	rlcf	??___fttol& (0+255),f,c
  3583  000EF8  E301               	bnc	u3581
  3584  000EFA  8014               	bsf	(??___fttol+1)& (0+255),0,c
  3585  000EFC                     u3581:
  3586  000EFC  5013               	movf	??___fttol,w,c
  3587  000EFE  6E1D               	movwf	___fttol@exp1,c
  3588  000F00  501D               	movf	___fttol@exp1,w,c
  3589  000F02  A4D8               	btfss	status,2,c
  3590  000F04  D002               	goto	l4814
  3591  000F06  D039               	goto	l4838
  3592  000F08  D063               	goto	l1116
  3593  000F0A                     l4814:
  3594  000F0A  0E17               	movlw	23
  3595  000F0C  6E13               	movwf	??___fttol& (0+255),c
  3596  000F0E  C00F  F014         	movff	___fttol@f1,??___fttol+1
  3597  000F12  C010  F015         	movff	___fttol@f1+1,??___fttol+2
  3598  000F16  C011  F016         	movff	___fttol@f1+2,??___fttol+3
  3599  000F1A  2813               	incf	??___fttol,w,c
  3600  000F1C  6E17               	movwf	(??___fttol+4)& (0+255),c
  3601  000F1E  D004               	goto	u3600
  3602  000F20                     u3605:
  3603  000F20  90D8               	bcf	status,0,c
  3604  000F22  3216               	rrcf	??___fttol+3,f,c
  3605  000F24  3215               	rrcf	??___fttol+2,f,c
  3606  000F26  3214               	rrcf	??___fttol+1,f,c
  3607  000F28                     u3600:
  3608  000F28  2E17               	decfsz	(??___fttol+4)& (0+255),f,c
  3609  000F2A  D7FA               	goto	u3605
  3610  000F2C  5014               	movf	??___fttol+1,w,c
  3611  000F2E  6E18               	movwf	___fttol@sign1,c
  3612  000F30  8E10               	bsf	___fttol@f1+1,7,c
  3613  000F32  0EFF               	movlw	255
  3614  000F34  160F               	andwf	___fttol@f1,f,c
  3615  000F36  0EFF               	movlw	255
  3616  000F38  1610               	andwf	___fttol@f1+1,f,c
  3617  000F3A  0E00               	movlw	0
  3618  000F3C  1611               	andwf	___fttol@f1+2,f,c
  3619  000F3E  500F               	movf	___fttol@f1,w,c
  3620  000F40  6E19               	movwf	___fttol@lval,c
  3621  000F42  5010               	movf	___fttol@f1+1,w,c
  3622  000F44  6E1A               	movwf	___fttol@lval+1,c
  3623  000F46  5011               	movf	___fttol@f1+2,w,c
  3624  000F48  6E1B               	movwf	___fttol@lval+2,c
  3625  000F4A  6A1C               	clrf	___fttol@lval+3,c
  3626  000F4C  0E8E               	movlw	142
  3627  000F4E  5E1D               	subwf	___fttol@exp1,f,c
  3628  000F50  AE1D               	btfss	___fttol@exp1,7,c
  3629  000F52  D010               	goto	l4836
  3630  000F54  501D               	movf	___fttol@exp1,w,c
  3631  000F56  0A80               	xorlw	128
  3632  000F58  0F8F               	addlw	143
  3633  000F5A  B0D8               	btfsc	status,0,c
  3634  000F5C  D003               	goto	l4832
  3635  000F5E  D00D               	goto	l4838
  3636  000F60  D037               	goto	l1116
  3637  000F62  D000               	goto	l4832
  3638  000F64                     l4832:
  3639  000F64  90D8               	bcf	status,0,c
  3640  000F66  321C               	rrcf	___fttol@lval+3,f,c
  3641  000F68  321B               	rrcf	___fttol@lval+2,f,c
  3642  000F6A  321A               	rrcf	___fttol@lval+1,f,c
  3643  000F6C  3219               	rrcf	___fttol@lval,f,c
  3644  000F6E  3E1D               	incfsz	___fttol@exp1,f,c
  3645  000F70  D7F9               	goto	l4832
  3646  000F72  D019               	goto	l4846
  3647  000F74                     l4836:
  3648  000F74  0E17               	movlw	23
  3649  000F76  641D               	cpfsgt	___fttol@exp1,c
  3650  000F78  D011               	goto	l4844
  3651  000F7A                     l4838:
  3652  000F7A  0E00               	movlw	0
  3653  000F7C  6E0F               	movwf	?___fttol,c
  3654  000F7E  0E00               	movlw	0
  3655  000F80  6E10               	movwf	?___fttol+1,c
  3656  000F82  0E00               	movlw	0
  3657  000F84  6E11               	movwf	?___fttol+2,c
  3658  000F86  0E00               	movlw	0
  3659  000F88  6E12               	movwf	?___fttol+3,c
  3660  000F8A  D022               	goto	l1116
  3661  000F8C  D007               	goto	l4844
  3662  000F8E                     l4842:
  3663  000F8E  90D8               	bcf	status,0,c
  3664  000F90  3619               	rlcf	___fttol@lval,f,c
  3665  000F92  361A               	rlcf	___fttol@lval+1,f,c
  3666  000F94  361B               	rlcf	___fttol@lval+2,f,c
  3667  000F96  361C               	rlcf	___fttol@lval+3,f,c
  3668  000F98  061D               	decf	___fttol@exp1,f,c
  3669  000F9A  D000               	goto	l4844
  3670  000F9C                     l4844:
  3671  000F9C  501D               	movf	___fttol@exp1,w,c
  3672  000F9E  B4D8               	btfsc	status,2,c
  3673  000FA0  D002               	goto	l4846
  3674  000FA2  D7F5               	goto	l4842
  3675  000FA4  D000               	goto	l4846
  3676  000FA6                     l4846:
  3677  000FA6  5018               	movf	___fttol@sign1,w,c
  3678  000FA8  B4D8               	btfsc	status,2,c
  3679  000FAA  D009               	goto	l4850
  3680  000FAC  1E1C               	comf	___fttol@lval+3,f,c
  3681  000FAE  1E1B               	comf	___fttol@lval+2,f,c
  3682  000FB0  1E1A               	comf	___fttol@lval+1,f,c
  3683  000FB2  6C19               	negf	___fttol@lval,c
  3684  000FB4  0E00               	movlw	0
  3685  000FB6  221A               	addwfc	___fttol@lval+1,f,c
  3686  000FB8  221B               	addwfc	___fttol@lval+2,f,c
  3687  000FBA  221C               	addwfc	___fttol@lval+3,f,c
  3688  000FBC  D000               	goto	l4850
  3689  000FBE                     l4850:
  3690  000FBE  C019  F00F         	movff	___fttol@lval,?___fttol
  3691  000FC2  C01A  F010         	movff	___fttol@lval+1,?___fttol+1
  3692  000FC6  C01B  F011         	movff	___fttol@lval+2,?___fttol+2
  3693  000FCA  C01C  F012         	movff	___fttol@lval+3,?___fttol+3
  3694  000FCE  D000               	goto	l1116
  3695  000FD0                     l1116:
  3696  000FD0  0012               	return		;funcret
  3697  000FD2                     __end_of___fttol:
  3698                           	opt stack 0
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           prodh	equ	0xFF4
  3704                           prodl	equ	0xFF3
  3705                           postinc0	equ	0xFEE
  3706                           wreg	equ	0xFE8
  3707                           postdec1	equ	0xFE5
  3708                           fsr1l	equ	0xFE1
  3709                           postinc2	equ	0xFDE
  3710                           postdec2	equ	0xFDD
  3711                           fsr2h	equ	0xFDA
  3712                           fsr2l	equ	0xFD9
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function ___ftmul *****************
  3716 ;; Defined at:
  3717 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  f1              3   26[COMRAM] float 
  3720 ;;  f2              3   29[COMRAM] float 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  3723 ;;  sign            1   40[COMRAM] unsigned char 
  3724 ;;  cntr            1   39[COMRAM] unsigned char 
  3725 ;;  exp             1   35[COMRAM] unsigned char 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  3   26[COMRAM] float 
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, status,0, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3735 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;Total ram usage:       15 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    2
  3742 ;; This function calls:
  3743 ;;		___ftpack
  3744 ;; This function is called by:
  3745 ;;		_do_update_pwm
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text11
  3750  000D02                     __ptext11:
  3751                           	opt stack 0
  3752  000D02                     ___ftmul:
  3753                           	opt stack 27
  3754                           
  3755                           ;incstack = 0
  3756  000D02  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  3757  000D06  6A22               	clrf	(??___ftmul+1)& (0+255),c
  3758  000D08  6A23               	clrf	(??___ftmul+2)& (0+255),c
  3759  000D0A  341C               	rlcf	___ftmul@f1+1,w,c
  3760  000D0C  3621               	rlcf	??___ftmul& (0+255),f,c
  3761  000D0E  E301               	bnc	u3521
  3762  000D10  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  3763  000D12                     u3521:
  3764  000D12  5021               	movf	??___ftmul,w,c
  3765  000D14  6E24               	movwf	___ftmul@exp,c
  3766  000D16  5024               	movf	___ftmul@exp,w,c
  3767  000D18  A4D8               	btfss	status,2,c
  3768  000D1A  D002               	goto	l4766
  3769  000D1C  D00E               	goto	l4768
  3770  000D1E  D06C               	goto	l1095
  3771  000D20                     l4766:
  3772  000D20  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  3773  000D24  6A22               	clrf	(??___ftmul+1)& (0+255),c
  3774  000D26  6A23               	clrf	(??___ftmul+2)& (0+255),c
  3775  000D28  341F               	rlcf	___ftmul@f2+1,w,c
  3776  000D2A  3621               	rlcf	??___ftmul& (0+255),f,c
  3777  000D2C  E301               	bnc	u3541
  3778  000D2E  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  3779  000D30                     u3541:
  3780  000D30  5021               	movf	??___ftmul,w,c
  3781  000D32  6E29               	movwf	___ftmul@sign,c
  3782  000D34  5029               	movf	___ftmul@sign,w,c
  3783  000D36  A4D8               	btfss	status,2,c
  3784  000D38  D007               	goto	l4772
  3785  000D3A                     l4768:
  3786  000D3A  0E00               	movlw	0
  3787  000D3C  6E1B               	movwf	?___ftmul,c
  3788  000D3E  0E00               	movlw	0
  3789  000D40  6E1C               	movwf	?___ftmul+1,c
  3790  000D42  0E00               	movlw	0
  3791  000D44  6E1D               	movwf	?___ftmul+2,c
  3792  000D46  D058               	goto	l1095
  3793  000D48                     l4772:
  3794  000D48  5029               	movf	___ftmul@sign,w,c
  3795  000D4A  0F7B               	addlw	123
  3796  000D4C  2624               	addwf	___ftmul@exp,f,c
  3797  000D4E  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  3798  000D52  5020               	movf	___ftmul@f2+2,w,c
  3799  000D54  1A29               	xorwf	___ftmul@sign,f,c
  3800  000D56  0E80               	movlw	128
  3801  000D58  1629               	andwf	___ftmul@sign,f,c
  3802  000D5A  8E1C               	bsf	___ftmul@f1+1,7,c
  3803  000D5C  8E1F               	bsf	___ftmul@f2+1,7,c
  3804  000D5E  0EFF               	movlw	255
  3805  000D60  161E               	andwf	___ftmul@f2,f,c
  3806  000D62  0EFF               	movlw	255
  3807  000D64  161F               	andwf	___ftmul@f2+1,f,c
  3808  000D66  0E00               	movlw	0
  3809  000D68  1620               	andwf	___ftmul@f2+2,f,c
  3810  000D6A  0E00               	movlw	0
  3811  000D6C  6E25               	movwf	___ftmul@f3_as_product,c
  3812  000D6E  0E00               	movlw	0
  3813  000D70  6E26               	movwf	___ftmul@f3_as_product+1,c
  3814  000D72  0E00               	movlw	0
  3815  000D74  6E27               	movwf	___ftmul@f3_as_product+2,c
  3816  000D76  0E07               	movlw	7
  3817  000D78  6E28               	movwf	___ftmul@cntr,c
  3818  000D7A  D000               	goto	l4786
  3819  000D7C                     l4786:
  3820  000D7C  A01B               	btfss	___ftmul@f1,0,c
  3821  000D7E  D007               	goto	l4790
  3822  000D80  501E               	movf	___ftmul@f2,w,c
  3823  000D82  2625               	addwf	___ftmul@f3_as_product,f,c
  3824  000D84  501F               	movf	___ftmul@f2+1,w,c
  3825  000D86  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  3826  000D88  5020               	movf	___ftmul@f2+2,w,c
  3827  000D8A  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  3828  000D8C  D000               	goto	l4790
  3829  000D8E                     l4790:
  3830  000D8E  90D8               	bcf	status,0,c
  3831  000D90  321D               	rrcf	___ftmul@f1+2,f,c
  3832  000D92  321C               	rrcf	___ftmul@f1+1,f,c
  3833  000D94  321B               	rrcf	___ftmul@f1,f,c
  3834  000D96  90D8               	bcf	status,0,c
  3835  000D98  361E               	rlcf	___ftmul@f2,f,c
  3836  000D9A  361F               	rlcf	___ftmul@f2+1,f,c
  3837  000D9C  3620               	rlcf	___ftmul@f2+2,f,c
  3838  000D9E  2E28               	decfsz	___ftmul@cntr,f,c
  3839  000DA0  D7ED               	goto	l4786
  3840  000DA2  D000               	goto	l4794
  3841  000DA4                     l4794:
  3842  000DA4  0E09               	movlw	9
  3843  000DA6  6E28               	movwf	___ftmul@cntr,c
  3844  000DA8  D000               	goto	l4796
  3845  000DAA                     l4796:
  3846  000DAA  A01B               	btfss	___ftmul@f1,0,c
  3847  000DAC  D007               	goto	l4800
  3848  000DAE  501E               	movf	___ftmul@f2,w,c
  3849  000DB0  2625               	addwf	___ftmul@f3_as_product,f,c
  3850  000DB2  501F               	movf	___ftmul@f2+1,w,c
  3851  000DB4  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  3852  000DB6  5020               	movf	___ftmul@f2+2,w,c
  3853  000DB8  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  3854  000DBA  D000               	goto	l4800
  3855  000DBC                     l4800:
  3856  000DBC  90D8               	bcf	status,0,c
  3857  000DBE  321D               	rrcf	___ftmul@f1+2,f,c
  3858  000DC0  321C               	rrcf	___ftmul@f1+1,f,c
  3859  000DC2  321B               	rrcf	___ftmul@f1,f,c
  3860  000DC4  90D8               	bcf	status,0,c
  3861  000DC6  3227               	rrcf	___ftmul@f3_as_product+2,f,c
  3862  000DC8  3226               	rrcf	___ftmul@f3_as_product+1,f,c
  3863  000DCA  3225               	rrcf	___ftmul@f3_as_product,f,c
  3864  000DCC  2E28               	decfsz	___ftmul@cntr,f,c
  3865  000DCE  D7ED               	goto	l4796
  3866  000DD0  D000               	goto	l4804
  3867  000DD2                     l4804:
  3868  000DD2  C025  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  3869  000DD6  C026  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3870  000DDA  C027  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3871  000DDE  C024  F012         	movff	___ftmul@exp,___ftpack@exp
  3872  000DE2  C029  F013         	movff	___ftmul@sign,___ftpack@sign
  3873  000DE6  EC33  F009         	call	___ftpack	;wreg free
  3874  000DEA  C00F  F01B         	movff	?___ftpack,?___ftmul
  3875  000DEE  C010  F01C         	movff	?___ftpack+1,?___ftmul+1
  3876  000DF2  C011  F01D         	movff	?___ftpack+2,?___ftmul+2
  3877  000DF6  D000               	goto	l1095
  3878  000DF8                     l1095:
  3879  000DF8  0012               	return		;funcret
  3880  000DFA                     __end_of___ftmul:
  3881                           	opt stack 0
  3882                           tblptru	equ	0xFF8
  3883                           tblptrh	equ	0xFF7
  3884                           tblptrl	equ	0xFF6
  3885                           tablat	equ	0xFF5
  3886                           prodh	equ	0xFF4
  3887                           prodl	equ	0xFF3
  3888                           postinc0	equ	0xFEE
  3889                           wreg	equ	0xFE8
  3890                           postdec1	equ	0xFE5
  3891                           fsr1l	equ	0xFE1
  3892                           postinc2	equ	0xFDE
  3893                           postdec2	equ	0xFDD
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function ___ftdiv *****************
  3899 ;; Defined at:
  3900 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  f1              3   41[COMRAM] float 
  3903 ;;  f2              3   44[COMRAM] float 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  f3              3   51[COMRAM] float 
  3906 ;;  sign            1   55[COMRAM] unsigned char 
  3907 ;;  exp             1   54[COMRAM] unsigned char 
  3908 ;;  cntr            1   50[COMRAM] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  3   41[COMRAM] float 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3918 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3921 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;Total ram usage:       15 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    2
  3925 ;; This function calls:
  3926 ;;		___ftpack
  3927 ;; This function is called by:
  3928 ;;		_do_update_pwm
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text12
  3933  000FD2                     __ptext12:
  3934                           	opt stack 0
  3935  000FD2                     ___ftdiv:
  3936                           	opt stack 27
  3937                           
  3938                           ;incstack = 0
  3939  000FD2  C02C  F030         	movff	___ftdiv@f1+2,??___ftdiv
  3940  000FD6  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  3941  000FD8  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  3942  000FDA  342B               	rlcf	___ftdiv@f1+1,w,c
  3943  000FDC  3630               	rlcf	??___ftdiv& (0+255),f,c
  3944  000FDE  E301               	bnc	u3471
  3945  000FE0  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  3946  000FE2                     u3471:
  3947  000FE2  5030               	movf	??___ftdiv,w,c
  3948  000FE4  6E37               	movwf	___ftdiv@exp,c
  3949  000FE6  5037               	movf	___ftdiv@exp,w,c
  3950  000FE8  A4D8               	btfss	status,2,c
  3951  000FEA  D002               	goto	l4720
  3952  000FEC  D00E               	goto	l4722
  3953  000FEE  D061               	goto	l1080
  3954  000FF0                     l4720:
  3955  000FF0  C02F  F030         	movff	___ftdiv@f2+2,??___ftdiv
  3956  000FF4  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  3957  000FF6  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  3958  000FF8  342E               	rlcf	___ftdiv@f2+1,w,c
  3959  000FFA  3630               	rlcf	??___ftdiv& (0+255),f,c
  3960  000FFC  E301               	bnc	u3491
  3961  000FFE  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  3962  001000                     u3491:
  3963  001000  5030               	movf	??___ftdiv,w,c
  3964  001002  6E38               	movwf	___ftdiv@sign,c
  3965  001004  5038               	movf	___ftdiv@sign,w,c
  3966  001006  A4D8               	btfss	status,2,c
  3967  001008  D007               	goto	l4726
  3968  00100A                     l4722:
  3969  00100A  0E00               	movlw	0
  3970  00100C  6E2A               	movwf	?___ftdiv,c
  3971  00100E  0E00               	movlw	0
  3972  001010  6E2B               	movwf	?___ftdiv+1,c
  3973  001012  0E00               	movlw	0
  3974  001014  6E2C               	movwf	?___ftdiv+2,c
  3975  001016  D04D               	goto	l1080
  3976  001018                     l4726:
  3977  001018  0E00               	movlw	0
  3978  00101A  6E34               	movwf	___ftdiv@f3,c
  3979  00101C  0E00               	movlw	0
  3980  00101E  6E35               	movwf	___ftdiv@f3+1,c
  3981  001020  0E00               	movlw	0
  3982  001022  6E36               	movwf	___ftdiv@f3+2,c
  3983  001024  5038               	movf	___ftdiv@sign,w,c
  3984  001026  0F89               	addlw	137
  3985  001028  5E37               	subwf	___ftdiv@exp,f,c
  3986  00102A  C02C  F038         	movff	___ftdiv@f1+2,___ftdiv@sign
  3987  00102E  502F               	movf	___ftdiv@f2+2,w,c
  3988  001030  1A38               	xorwf	___ftdiv@sign,f,c
  3989  001032  0E80               	movlw	128
  3990  001034  1638               	andwf	___ftdiv@sign,f,c
  3991  001036  8E2B               	bsf	___ftdiv@f1+1,7,c
  3992  001038  0EFF               	movlw	255
  3993  00103A  162A               	andwf	___ftdiv@f1,f,c
  3994  00103C  0EFF               	movlw	255
  3995  00103E  162B               	andwf	___ftdiv@f1+1,f,c
  3996  001040  0E00               	movlw	0
  3997  001042  162C               	andwf	___ftdiv@f1+2,f,c
  3998  001044  8E2E               	bsf	___ftdiv@f2+1,7,c
  3999  001046  0EFF               	movlw	255
  4000  001048  162D               	andwf	___ftdiv@f2,f,c
  4001  00104A  0EFF               	movlw	255
  4002  00104C  162E               	andwf	___ftdiv@f2+1,f,c
  4003  00104E  0E00               	movlw	0
  4004  001050  162F               	andwf	___ftdiv@f2+2,f,c
  4005  001052  0E18               	movlw	24
  4006  001054  6E33               	movwf	___ftdiv@cntr,c
  4007  001056  D000               	goto	l4746
  4008  001058                     l4746:
  4009  001058  90D8               	bcf	status,0,c
  4010  00105A  3634               	rlcf	___ftdiv@f3,f,c
  4011  00105C  3635               	rlcf	___ftdiv@f3+1,f,c
  4012  00105E  3636               	rlcf	___ftdiv@f3+2,f,c
  4013  001060  502D               	movf	___ftdiv@f2,w,c
  4014  001062  5C2A               	subwf	___ftdiv@f1,w,c
  4015  001064  502E               	movf	___ftdiv@f2+1,w,c
  4016  001066  582B               	subwfb	___ftdiv@f1+1,w,c
  4017  001068  502F               	movf	___ftdiv@f2+2,w,c
  4018  00106A  582C               	subwfb	___ftdiv@f1+2,w,c
  4019  00106C  A0D8               	btfss	status,0,c
  4020  00106E  D007               	goto	l1083
  4021  001070  502D               	movf	___ftdiv@f2,w,c
  4022  001072  5E2A               	subwf	___ftdiv@f1,f,c
  4023  001074  502E               	movf	___ftdiv@f2+1,w,c
  4024  001076  5A2B               	subwfb	___ftdiv@f1+1,f,c
  4025  001078  502F               	movf	___ftdiv@f2+2,w,c
  4026  00107A  5A2C               	subwfb	___ftdiv@f1+2,f,c
  4027  00107C  8034               	bsf	___ftdiv@f3,0,c
  4028  00107E                     l1083:
  4029  00107E  90D8               	bcf	status,0,c
  4030  001080  362A               	rlcf	___ftdiv@f1,f,c
  4031  001082  362B               	rlcf	___ftdiv@f1+1,f,c
  4032  001084  362C               	rlcf	___ftdiv@f1+2,f,c
  4033  001086  2E33               	decfsz	___ftdiv@cntr,f,c
  4034  001088  D7E7               	goto	l4746
  4035  00108A  D000               	goto	l4756
  4036  00108C                     l4756:
  4037  00108C  C034  F00F         	movff	___ftdiv@f3,___ftpack@arg
  4038  001090  C035  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4039  001094  C036  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4040  001098  C037  F012         	movff	___ftdiv@exp,___ftpack@exp
  4041  00109C  C038  F013         	movff	___ftdiv@sign,___ftpack@sign
  4042  0010A0  EC33  F009         	call	___ftpack	;wreg free
  4043  0010A4  C00F  F02A         	movff	?___ftpack,?___ftdiv
  4044  0010A8  C010  F02B         	movff	?___ftpack+1,?___ftdiv+1
  4045  0010AC  C011  F02C         	movff	?___ftpack+2,?___ftdiv+2
  4046  0010B0  D000               	goto	l1080
  4047  0010B2                     l1080:
  4048  0010B2  0012               	return		;funcret
  4049  0010B4                     __end_of___ftdiv:
  4050                           	opt stack 0
  4051                           tblptru	equ	0xFF8
  4052                           tblptrh	equ	0xFF7
  4053                           tblptrl	equ	0xFF6
  4054                           tablat	equ	0xFF5
  4055                           prodh	equ	0xFF4
  4056                           prodl	equ	0xFF3
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           postdec1	equ	0xFE5
  4060                           fsr1l	equ	0xFE1
  4061                           postinc2	equ	0xFDE
  4062                           postdec2	equ	0xFDD
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function ___ftpack *****************
  4068 ;; Defined at:
  4069 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  arg             3   14[COMRAM] unsigned um
  4072 ;;  exp             1   17[COMRAM] unsigned char 
  4073 ;;  sign            1   18[COMRAM] unsigned char 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  3   14[COMRAM] float 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4085 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;Total ram usage:        8 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    1
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		___ftdiv
  4096 ;;		___ftmul
  4097 ;;		___lbtoft
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text13
  4102  001266                     __ptext13:
  4103                           	opt stack 0
  4104  001266                     ___ftpack:
  4105                           	opt stack 27
  4106                           
  4107                           ;incstack = 0
  4108  001266  5012               	movf	___ftpack@exp,w,c
  4109  001268  B4D8               	btfsc	status,2,c
  4110  00126A  D005               	goto	l4574
  4111  00126C  500F               	movf	___ftpack@arg,w,c
  4112  00126E  1010               	iorwf	___ftpack@arg+1,w,c
  4113  001270  1011               	iorwf	___ftpack@arg+2,w,c
  4114  001272  A4D8               	btfss	status,2,c
  4115  001274  D00E               	goto	l4580
  4116  001276                     l4574:
  4117  001276  0E00               	movlw	0
  4118  001278  6E0F               	movwf	?___ftpack,c
  4119  00127A  0E00               	movlw	0
  4120  00127C  6E10               	movwf	?___ftpack+1,c
  4121  00127E  0E00               	movlw	0
  4122  001280  6E11               	movwf	?___ftpack+2,c
  4123  001282  D053               	goto	l1008
  4124  001284  D006               	goto	l4580
  4125  001286                     l4578:
  4126  001286  2A12               	incf	___ftpack@exp,f,c
  4127  001288  90D8               	bcf	status,0,c
  4128  00128A  3211               	rrcf	___ftpack@arg+2,f,c
  4129  00128C  3210               	rrcf	___ftpack@arg+1,f,c
  4130  00128E  320F               	rrcf	___ftpack@arg,f,c
  4131  001290  D000               	goto	l4580
  4132  001292                     l4580:
  4133  001292  0E00               	movlw	0
  4134  001294  140F               	andwf	___ftpack@arg,w,c
  4135  001296  6E14               	movwf	??___ftpack& (0+255),c
  4136  001298  0E00               	movlw	0
  4137  00129A  1410               	andwf	___ftpack@arg+1,w,c
  4138  00129C  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4139  00129E  0EFE               	movlw	254
  4140  0012A0  1411               	andwf	___ftpack@arg+2,w,c
  4141  0012A2  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4142  0012A4  5014               	movf	??___ftpack,w,c
  4143  0012A6  1015               	iorwf	??___ftpack+1,w,c
  4144  0012A8  1016               	iorwf	??___ftpack+2,w,c
  4145  0012AA  B4D8               	btfsc	status,2,c
  4146  0012AC  D00E               	goto	l4586
  4147  0012AE  D7EB               	goto	l4578
  4148  0012B0  D00C               	goto	l4586
  4149  0012B2                     l4582:
  4150  0012B2  2A12               	incf	___ftpack@exp,f,c
  4151  0012B4  0E01               	movlw	1
  4152  0012B6  260F               	addwf	___ftpack@arg,f,c
  4153  0012B8  0E00               	movlw	0
  4154  0012BA  2210               	addwfc	___ftpack@arg+1,f,c
  4155  0012BC  0E00               	movlw	0
  4156  0012BE  2211               	addwfc	___ftpack@arg+2,f,c
  4157  0012C0  90D8               	bcf	status,0,c
  4158  0012C2  3211               	rrcf	___ftpack@arg+2,f,c
  4159  0012C4  3210               	rrcf	___ftpack@arg+1,f,c
  4160  0012C6  320F               	rrcf	___ftpack@arg,f,c
  4161  0012C8  D000               	goto	l4586
  4162  0012CA                     l4586:
  4163  0012CA  0E00               	movlw	0
  4164  0012CC  140F               	andwf	___ftpack@arg,w,c
  4165  0012CE  6E14               	movwf	??___ftpack& (0+255),c
  4166  0012D0  0E00               	movlw	0
  4167  0012D2  1410               	andwf	___ftpack@arg+1,w,c
  4168  0012D4  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4169  0012D6  0EFF               	movlw	255
  4170  0012D8  1411               	andwf	___ftpack@arg+2,w,c
  4171  0012DA  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4172  0012DC  5014               	movf	??___ftpack,w,c
  4173  0012DE  1015               	iorwf	??___ftpack+1,w,c
  4174  0012E0  1016               	iorwf	??___ftpack+2,w,c
  4175  0012E2  B4D8               	btfsc	status,2,c
  4176  0012E4  D008               	goto	l4590
  4177  0012E6  D7E5               	goto	l4582
  4178  0012E8  D006               	goto	l4590
  4179  0012EA                     l4588:
  4180  0012EA  0612               	decf	___ftpack@exp,f,c
  4181  0012EC  90D8               	bcf	status,0,c
  4182  0012EE  360F               	rlcf	___ftpack@arg,f,c
  4183  0012F0  3610               	rlcf	___ftpack@arg+1,f,c
  4184  0012F2  3611               	rlcf	___ftpack@arg+2,f,c
  4185  0012F4  D000               	goto	l4590
  4186  0012F6                     l4590:
  4187  0012F6  BE10               	btfsc	___ftpack@arg+1,7,c
  4188  0012F8  D004               	goto	l1019
  4189  0012FA  0E02               	movlw	2
  4190  0012FC  6012               	cpfslt	___ftpack@exp,c
  4191  0012FE  D7F5               	goto	l4588
  4192  001300  D000               	goto	l1019
  4193  001302                     l1019:
  4194  001302  B012               	btfsc	___ftpack@exp,0,c
  4195  001304  D002               	goto	l4596
  4196  001306  9E10               	bcf	___ftpack@arg+1,7,c
  4197  001308  D000               	goto	l4596
  4198  00130A                     l4596:
  4199  00130A  90D8               	bcf	status,0,c
  4200  00130C  3212               	rrcf	___ftpack@exp,f,c
  4201  00130E  5012               	movf	___ftpack@exp,w,c
  4202  001310  1211               	iorwf	___ftpack@arg+2,f,c
  4203  001312  5013               	movf	___ftpack@sign,w,c
  4204  001314  B4D8               	btfsc	status,2,c
  4205  001316  D002               	goto	l4602
  4206  001318  8E11               	bsf	___ftpack@arg+2,7,c
  4207  00131A  D000               	goto	l4602
  4208  00131C                     l4602:
  4209  00131C  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  4210  001320  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  4211  001324  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  4212  001328  D000               	goto	l1008
  4213  00132A                     l1008:
  4214  00132A  0012               	return		;funcret
  4215  00132C                     __end_of___ftpack:
  4216                           	opt stack 0
  4217                           tblptru	equ	0xFF8
  4218                           tblptrh	equ	0xFF7
  4219                           tblptrl	equ	0xFF6
  4220                           tablat	equ	0xFF5
  4221                           prodh	equ	0xFF4
  4222                           prodl	equ	0xFF3
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           postdec1	equ	0xFE5
  4226                           fsr1l	equ	0xFE1
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function _Initialize_Screen *****************
  4234 ;; Defined at:
  4235 ;;		line 34 in file "Main_Screen.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;		None
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;		None
  4240 ;; Return value:  Size  Location     Type
  4241 ;;		None               void
  4242 ;; Registers used:
  4243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;Total ram usage:        0 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    8
  4256 ;; This function calls:
  4257 ;;		_LCD_Reset
  4258 ;;		_TFT_GreenTab_Initialize
  4259 ;;		_drawCircle
  4260 ;;		_drawtext
  4261 ;;		_fillScreen
  4262 ;;		_strcpy
  4263 ;; This function is called by:
  4264 ;;		_main
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text14
  4269  000376                     __ptext14:
  4270                           	opt stack 0
  4271  000376                     _Initialize_Screen:
  4272                           	opt stack 22
  4273                           
  4274                           ;Main_Screen.c: 36: LCD_Reset();
  4275                           
  4276                           ;incstack = 0
  4277  000376  ECF7  F00C         	call	_LCD_Reset	;wreg free
  4278                           
  4279                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4280  00037A  EC77  F00C         	call	_TFT_GreenTab_Initialize	;wreg free
  4281                           
  4282                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4283  00037E  0E00               	movlw	0
  4284  000380  6E23               	movwf	fillScreen@color+1,c
  4285  000382  0E00               	movlw	0
  4286  000384  6E22               	movwf	fillScreen@color,c
  4287  000386  ECD5  F00C         	call	_fillScreen	;wreg free
  4288                           
  4289                           ;Main_Screen.c: 39: txt = buffer;
  4290  00038A  0E00               	movlw	low _buffer
  4291  00038C  6E49               	movwf	_txt,c
  4292  00038E  0E01               	movlw	high _buffer
  4293  000390  6E4A               	movwf	_txt+1,c
  4294                           
  4295                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  4296  000392  C049  F00F         	movff	_txt,strcpy@to
  4297  000396  C04A  F010         	movff	_txt+1,strcpy@to+1
  4298  00039A  0E80               	movlw	low STR_7
  4299  00039C  6E11               	movwf	strcpy@from,c
  4300  00039E  0EFF               	movlw	high STR_7
  4301  0003A0  6E12               	movwf	strcpy@from+1,c
  4302  0003A2  EC46  F00C         	call	_strcpy	;wreg free
  4303                           
  4304                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4305  0003A6  0E01               	movlw	1
  4306  0003A8  0100               	movlb	0	; () banked
  4307  0003AA  6FE9               	movwf	drawtext@y& (0+255),b
  4308  0003AC  C049  F0EA         	movff	_txt,drawtext@_text
  4309  0003B0  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4310  0003B4  0EFF               	movlw	255
  4311  0003B6  0100               	movlb	0	; () banked
  4312  0003B8  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4313  0003BA  69EC               	setf	drawtext@color& (0+255),b
  4314  0003BC  0E00               	movlw	0
  4315  0003BE  0100               	movlb	0	; () banked
  4316  0003C0  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4317  0003C2  0E00               	movlw	0
  4318  0003C4  6FEE               	movwf	drawtext@bg& (0+255),b
  4319  0003C6  0E01               	movlw	1
  4320  0003C8  0100               	movlb	0	; () banked
  4321  0003CA  6FF0               	movwf	drawtext@size& (0+255),b
  4322  0003CC  0E01               	movlw	1
  4323  0003CE  EC6D  F005         	call	_drawtext
  4324                           
  4325                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4326  0003D2  C049  F00F         	movff	_txt,strcpy@to
  4327  0003D6  C04A  F010         	movff	_txt+1,strcpy@to+1
  4328  0003DA  0ED0               	movlw	low STR_8
  4329  0003DC  6E11               	movwf	strcpy@from,c
  4330  0003DE  0EFF               	movlw	high STR_8
  4331  0003E0  6E12               	movwf	strcpy@from+1,c
  4332  0003E2  EC46  F00C         	call	_strcpy	;wreg free
  4333                           
  4334                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4335  0003E6  0E0B               	movlw	11
  4336  0003E8  0100               	movlb	0	; () banked
  4337  0003EA  6FE9               	movwf	drawtext@y& (0+255),b
  4338  0003EC  C049  F0EA         	movff	_txt,drawtext@_text
  4339  0003F0  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4340  0003F4  0EF8               	movlw	248
  4341  0003F6  0100               	movlb	0	; () banked
  4342  0003F8  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4343  0003FA  0E1F               	movlw	31
  4344  0003FC  6FEC               	movwf	drawtext@color& (0+255),b
  4345  0003FE  0E00               	movlw	0
  4346  000400  0100               	movlb	0	; () banked
  4347  000402  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4348  000404  0E00               	movlw	0
  4349  000406  6FEE               	movwf	drawtext@bg& (0+255),b
  4350  000408  0E01               	movlw	1
  4351  00040A  0100               	movlb	0	; () banked
  4352  00040C  6FF0               	movwf	drawtext@size& (0+255),b
  4353  00040E  0E18               	movlw	24
  4354  000410  EC6D  F005         	call	_drawtext
  4355                           
  4356                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  4357  000414  0E00               	movlw	0
  4358  000416  6E1B               	movwf	drawCircle@x0+1,c
  4359  000418  0E28               	movlw	40
  4360  00041A  6E1A               	movwf	drawCircle@x0,c
  4361  00041C  0E00               	movlw	0
  4362  00041E  6E1D               	movwf	drawCircle@y0+1,c
  4363  000420  0E17               	movlw	23
  4364  000422  6E1C               	movwf	drawCircle@y0,c
  4365  000424  0E00               	movlw	0
  4366  000426  6E1F               	movwf	drawCircle@r+1,c
  4367  000428  0E02               	movlw	2
  4368  00042A  6E1E               	movwf	drawCircle@r,c
  4369  00042C  0EFF               	movlw	255
  4370  00042E  6E21               	movwf	drawCircle@color+1,c
  4371  000430  0EE0               	movlw	224
  4372  000432  6E20               	movwf	drawCircle@color,c
  4373  000434  ECEB  F003         	call	_drawCircle	;wreg free
  4374                           
  4375                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  4376  000438  C049  F00F         	movff	_txt,strcpy@to
  4377  00043C  C04A  F010         	movff	_txt+1,strcpy@to+1
  4378  000440  0EF9               	movlw	low STR_9
  4379  000442  6E11               	movwf	strcpy@from,c
  4380  000444  0EFF               	movlw	high STR_9
  4381  000446  6E12               	movwf	strcpy@from+1,c
  4382  000448  EC46  F00C         	call	_strcpy	;wreg free
  4383                           
  4384                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  4385  00044C  0E17               	movlw	23
  4386  00044E  0100               	movlb	0	; () banked
  4387  000450  6FE9               	movwf	drawtext@y& (0+255),b
  4388  000452  C049  F0EA         	movff	_txt,drawtext@_text
  4389  000456  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4390  00045A  0EFF               	movlw	255
  4391  00045C  0100               	movlb	0	; () banked
  4392  00045E  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4393  000460  0EE0               	movlw	224
  4394  000462  6FEC               	movwf	drawtext@color& (0+255),b
  4395  000464  0E00               	movlw	0
  4396  000466  0100               	movlb	0	; () banked
  4397  000468  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4398  00046A  0E00               	movlw	0
  4399  00046C  6FEE               	movwf	drawtext@bg& (0+255),b
  4400  00046E  0E02               	movlw	2
  4401  000470  0100               	movlb	0	; () banked
  4402  000472  6FF0               	movwf	drawtext@size& (0+255),b
  4403  000474  0E2D               	movlw	45
  4404  000476  EC6D  F005         	call	_drawtext
  4405                           
  4406                           ;Main_Screen.c: 49: strcpy(txt, "F");
  4407  00047A  C049  F00F         	movff	_txt,strcpy@to
  4408  00047E  C04A  F010         	movff	_txt+1,strcpy@to+1
  4409  000482  0EF3               	movlw	low (STR_17+2)
  4410  000484  6E11               	movwf	strcpy@from,c
  4411  000486  0EFF               	movlw	high (STR_17+2)
  4412  000488  6E12               	movwf	strcpy@from+1,c
  4413  00048A  EC46  F00C         	call	_strcpy	;wreg free
  4414                           
  4415                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  4416  00048E  0E00               	movlw	0
  4417  000490  6E1B               	movwf	drawCircle@x0+1,c
  4418  000492  0E6E               	movlw	110
  4419  000494  6E1A               	movwf	drawCircle@x0,c
  4420  000496  0E00               	movlw	0
  4421  000498  6E1D               	movwf	drawCircle@y0+1,c
  4422  00049A  0E17               	movlw	23
  4423  00049C  6E1C               	movwf	drawCircle@y0,c
  4424  00049E  0E00               	movlw	0
  4425  0004A0  6E1F               	movwf	drawCircle@r+1,c
  4426  0004A2  0E02               	movlw	2
  4427  0004A4  6E1E               	movwf	drawCircle@r,c
  4428  0004A6  0EFF               	movlw	255
  4429  0004A8  6E21               	movwf	drawCircle@color+1,c
  4430  0004AA  0EE0               	movlw	224
  4431  0004AC  6E20               	movwf	drawCircle@color,c
  4432  0004AE  ECEB  F003         	call	_drawCircle	;wreg free
  4433                           
  4434                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  4435  0004B2  0E17               	movlw	23
  4436  0004B4  0100               	movlb	0	; () banked
  4437  0004B6  6FE9               	movwf	drawtext@y& (0+255),b
  4438  0004B8  C049  F0EA         	movff	_txt,drawtext@_text
  4439  0004BC  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4440  0004C0  0EFF               	movlw	255
  4441  0004C2  0100               	movlb	0	; () banked
  4442  0004C4  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4443  0004C6  0EE0               	movlw	224
  4444  0004C8  6FEC               	movwf	drawtext@color& (0+255),b
  4445  0004CA  0E00               	movlw	0
  4446  0004CC  0100               	movlb	0	; () banked
  4447  0004CE  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4448  0004D0  0E00               	movlw	0
  4449  0004D2  6FEE               	movwf	drawtext@bg& (0+255),b
  4450  0004D4  0E02               	movlw	2
  4451  0004D6  0100               	movlb	0	; () banked
  4452  0004D8  6FF0               	movwf	drawtext@size& (0+255),b
  4453  0004DA  0E73               	movlw	115
  4454  0004DC  EC6D  F005         	call	_drawtext
  4455                           
  4456                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  4457  0004E0  C049  F00F         	movff	_txt,strcpy@to
  4458  0004E4  C04A  F010         	movff	_txt+1,strcpy@to+1
  4459  0004E8  0EE3               	movlw	low STR_11
  4460  0004EA  6E11               	movwf	strcpy@from,c
  4461  0004EC  0EFF               	movlw	high STR_11
  4462  0004EE  6E12               	movwf	strcpy@from+1,c
  4463  0004F0  EC46  F00C         	call	_strcpy	;wreg free
  4464                           
  4465                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  4466  0004F4  0E28               	movlw	40
  4467  0004F6  0100               	movlb	0	; () banked
  4468  0004F8  6FE9               	movwf	drawtext@y& (0+255),b
  4469  0004FA  C049  F0EA         	movff	_txt,drawtext@_text
  4470  0004FE  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4471  000502  0E00               	movlw	0
  4472  000504  0100               	movlb	0	; () banked
  4473  000506  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4474  000508  0E1F               	movlw	31
  4475  00050A  6FEC               	movwf	drawtext@color& (0+255),b
  4476  00050C  0E00               	movlw	0
  4477  00050E  0100               	movlb	0	; () banked
  4478  000510  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4479  000512  0E00               	movlw	0
  4480  000514  6FEE               	movwf	drawtext@bg& (0+255),b
  4481  000516  0E01               	movlw	1
  4482  000518  0100               	movlb	0	; () banked
  4483  00051A  6FF0               	movwf	drawtext@size& (0+255),b
  4484  00051C  0E32               	movlw	50
  4485  00051E  EC6D  F005         	call	_drawtext
  4486                           
  4487                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  4488  000522  C049  F00F         	movff	_txt,strcpy@to
  4489  000526  C04A  F010         	movff	_txt+1,strcpy@to+1
  4490  00052A  0EE8               	movlw	low STR_12
  4491  00052C  6E11               	movwf	strcpy@from,c
  4492  00052E  0EFF               	movlw	high STR_12
  4493  000530  6E12               	movwf	strcpy@from+1,c
  4494  000532  EC46  F00C         	call	_strcpy	;wreg free
  4495                           
  4496                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  4497  000536  0E47               	movlw	71
  4498  000538  0100               	movlb	0	; () banked
  4499  00053A  6FE9               	movwf	drawtext@y& (0+255),b
  4500  00053C  C049  F0EA         	movff	_txt,drawtext@_text
  4501  000540  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4502  000544  0EF8               	movlw	248
  4503  000546  0100               	movlb	0	; () banked
  4504  000548  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4505  00054A  0E00               	movlw	0
  4506  00054C  6FEC               	movwf	drawtext@color& (0+255),b
  4507  00054E  0E00               	movlw	0
  4508  000550  0100               	movlb	0	; () banked
  4509  000552  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4510  000554  0E00               	movlw	0
  4511  000556  6FEE               	movwf	drawtext@bg& (0+255),b
  4512  000558  0E01               	movlw	1
  4513  00055A  0100               	movlb	0	; () banked
  4514  00055C  6FF0               	movwf	drawtext@size& (0+255),b
  4515  00055E  0E32               	movlw	50
  4516  000560  EC6D  F005         	call	_drawtext
  4517                           
  4518                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  4519  000564  C049  F00F         	movff	_txt,strcpy@to
  4520  000568  C04A  F010         	movff	_txt+1,strcpy@to+1
  4521  00056C  0EDD               	movlw	low STR_13
  4522  00056E  6E11               	movwf	strcpy@from,c
  4523  000570  0EFF               	movlw	high STR_13
  4524  000572  6E12               	movwf	strcpy@from+1,c
  4525  000574  EC46  F00C         	call	_strcpy	;wreg free
  4526                           
  4527                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  4528  000578  0E78               	movlw	120
  4529  00057A  0100               	movlb	0	; () banked
  4530  00057C  6FE9               	movwf	drawtext@y& (0+255),b
  4531  00057E  C049  F0EA         	movff	_txt,drawtext@_text
  4532  000582  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4533  000586  0E00               	movlw	0
  4534  000588  0100               	movlb	0	; () banked
  4535  00058A  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4536  00058C  0E1F               	movlw	31
  4537  00058E  6FEC               	movwf	drawtext@color& (0+255),b
  4538  000590  0E00               	movlw	0
  4539  000592  0100               	movlb	0	; () banked
  4540  000594  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4541  000596  0E00               	movlw	0
  4542  000598  6FEE               	movwf	drawtext@bg& (0+255),b
  4543  00059A  0E01               	movlw	1
  4544  00059C  0100               	movlb	0	; () banked
  4545  00059E  6FF0               	movwf	drawtext@size& (0+255),b
  4546  0005A0  0E55               	movlw	85
  4547  0005A2  EC6D  F005         	call	_drawtext
  4548                           
  4549                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  4550  0005A6  C049  F00F         	movff	_txt,strcpy@to
  4551  0005AA  C04A  F010         	movff	_txt+1,strcpy@to+1
  4552  0005AE  0EFC               	movlw	low STR_14
  4553  0005B0  6E11               	movwf	strcpy@from,c
  4554  0005B2  0EFF               	movlw	high STR_14
  4555  0005B4  6E12               	movwf	strcpy@from+1,c
  4556  0005B6  EC46  F00C         	call	_strcpy	;wreg free
  4557                           
  4558                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  4559  0005BA  0E8C               	movlw	140
  4560  0005BC  0100               	movlb	0	; () banked
  4561  0005BE  6FE9               	movwf	drawtext@y& (0+255),b
  4562  0005C0  C049  F0EA         	movff	_txt,drawtext@_text
  4563  0005C4  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4564  0005C8  0EFF               	movlw	255
  4565  0005CA  0100               	movlb	0	; () banked
  4566  0005CC  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4567  0005CE  69EC               	setf	drawtext@color& (0+255),b
  4568  0005D0  0E00               	movlw	0
  4569  0005D2  0100               	movlb	0	; () banked
  4570  0005D4  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4571  0005D6  0E00               	movlw	0
  4572  0005D8  6FEE               	movwf	drawtext@bg& (0+255),b
  4573  0005DA  0E01               	movlw	1
  4574  0005DC  0100               	movlb	0	; () banked
  4575  0005DE  6FF0               	movwf	drawtext@size& (0+255),b
  4576  0005E0  0E0C               	movlw	12
  4577  0005E2  EC6D  F005         	call	_drawtext
  4578                           
  4579                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  4580  0005E6  C049  F00F         	movff	_txt,strcpy@to
  4581  0005EA  C04A  F010         	movff	_txt+1,strcpy@to+1
  4582  0005EE  0EF5               	movlw	low STR_15
  4583  0005F0  6E11               	movwf	strcpy@from,c
  4584  0005F2  0EFF               	movlw	high STR_15
  4585  0005F4  6E12               	movwf	strcpy@from+1,c
  4586  0005F6  EC46  F00C         	call	_strcpy	;wreg free
  4587                           
  4588                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  4589  0005FA  0E8C               	movlw	140
  4590  0005FC  0100               	movlb	0	; () banked
  4591  0005FE  6FE9               	movwf	drawtext@y& (0+255),b
  4592  000600  C049  F0EA         	movff	_txt,drawtext@_text
  4593  000604  C04A  F0EB         	movff	_txt+1,drawtext@_text+1
  4594  000608  0EFF               	movlw	255
  4595  00060A  0100               	movlb	0	; () banked
  4596  00060C  6FED               	movwf	(drawtext@color+1)& (0+255),b
  4597  00060E  69EC               	setf	drawtext@color& (0+255),b
  4598  000610  0E00               	movlw	0
  4599  000612  0100               	movlb	0	; () banked
  4600  000614  6FEF               	movwf	(drawtext@bg+1)& (0+255),b
  4601  000616  0E00               	movlw	0
  4602  000618  6FEE               	movwf	drawtext@bg& (0+255),b
  4603  00061A  0E01               	movlw	1
  4604  00061C  0100               	movlb	0	; () banked
  4605  00061E  6FF0               	movwf	drawtext@size& (0+255),b
  4606  000620  0E5F               	movlw	95
  4607  000622  EC6D  F005         	call	_drawtext
  4608  000626  0012               	return		;funcret
  4609  000628                     __end_of_Initialize_Screen:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           postdec1	equ	0xFE5
  4620                           fsr1l	equ	0xFE1
  4621                           postinc2	equ	0xFDE
  4622                           postdec2	equ	0xFDD
  4623                           fsr2h	equ	0xFDA
  4624                           fsr2l	equ	0xFD9
  4625                           status	equ	0xFD8
  4626                           
  4627 ;; *************** function _strcpy *****************
  4628 ;; Defined at:
  4629 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  to              2   14[COMRAM] PTR unsigned char 
  4632 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4633 ;;  from            2   16[COMRAM] PTR const unsigned char 
  4634 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(3), 
  4635 ;;		 -> STR_13(6), STR_12(5), STR_11(5), STR_10(2), 
  4636 ;;		 -> STR_9(3), STR_8(13), STR_7(22), 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  cp              2   18[COMRAM] PTR unsigned char 
  4639 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  2   14[COMRAM] PTR unsigned char 
  4642 ;; Registers used:
  4643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4649 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;Total ram usage:        6 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    1
  4656 ;; This function calls:
  4657 ;;		Nothing
  4658 ;; This function is called by:
  4659 ;;		_Initialize_Screen
  4660 ;;		_Update_Screen
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text15
  4665  00188C                     __ptext15:
  4666                           	opt stack 0
  4667  00188C                     _strcpy:
  4668                           	opt stack 28
  4669                           
  4670                           ;incstack = 0
  4671  00188C  C00F  F013         	movff	strcpy@to,strcpy@cp
  4672  001890  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  4673  001894  D005               	goto	l3262
  4674  001896                     l3260:
  4675  001896  4A13               	infsnz	strcpy@cp,f,c
  4676  001898  2A14               	incf	strcpy@cp+1,f,c
  4677  00189A  4A11               	infsnz	strcpy@from,f,c
  4678  00189C  2A12               	incf	strcpy@from+1,f,c
  4679  00189E  D000               	goto	l3262
  4680  0018A0                     l3262:
  4681  0018A0  C011  FFF6         	movff	strcpy@from,tblptrl
  4682  0018A4  C012  FFF7         	movff	strcpy@from+1,tblptrh
  4683  0018A8                     	if	0	;tblptru may be non-zero
  4684  0018A8                     	endif
  4685  0018A8                     	if	0	;tblptru may be non-zero
  4686  0018A8                     	endif
  4687  0018A8  C013  FFD9         	movff	strcpy@cp,fsr2l
  4688  0018AC  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  4689  0018B0  0008               	tblrd		*
  4690  0018B2  CFF5 FFDF          	movff	tablat,indf2
  4691  0018B6  50DF               	movf	indf2,w,c
  4692  0018B8  A4D8               	btfss	status,2,c
  4693  0018BA  D7ED               	goto	l3260
  4694                           
  4695                           ;	Return value of _strcpy is never used
  4696  0018BC  0012               	return		;funcret
  4697  0018BE                     __end_of_strcpy:
  4698                           	opt stack 0
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           postinc0	equ	0xFEE
  4706                           wreg	equ	0xFE8
  4707                           postdec1	equ	0xFE5
  4708                           fsr1l	equ	0xFE1
  4709                           indf2	equ	0xFDF
  4710                           postinc2	equ	0xFDE
  4711                           postdec2	equ	0xFDD
  4712                           fsr2h	equ	0xFDA
  4713                           fsr2l	equ	0xFD9
  4714                           status	equ	0xFD8
  4715                           
  4716 ;; *************** function _fillScreen *****************
  4717 ;; Defined at:
  4718 ;;		line 620 in file "ST7735_TFT.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;  color           2   33[COMRAM] unsigned int 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;		None
  4723 ;; Return value:  Size  Location     Type
  4724 ;;		None               void
  4725 ;; Registers used:
  4726 ;;		wreg, status,2, status,0, cstack
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;Total ram usage:        2 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    5
  4739 ;; This function calls:
  4740 ;;		_fillRectangle
  4741 ;; This function is called by:
  4742 ;;		_Initialize_Screen
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text16
  4747  0019AA                     __ptext16:
  4748                           	opt stack 0
  4749  0019AA                     _fillScreen:
  4750                           	opt stack 24
  4751                           
  4752                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  4753                           
  4754                           ;incstack = 0
  4755  0019AA  0E00               	movlw	0
  4756  0019AC  6E16               	movwf	fillRectangle@y,c
  4757  0019AE  0E80               	movlw	128
  4758  0019B0  6E17               	movwf	fillRectangle@w,c
  4759  0019B2  0EA0               	movlw	160
  4760  0019B4  6E18               	movwf	fillRectangle@h,c
  4761  0019B6  C022  F019         	movff	fillScreen@color,fillRectangle@color
  4762  0019BA  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  4763  0019BE  0E00               	movlw	0
  4764  0019C0  EC5A  F008         	call	_fillRectangle
  4765  0019C4  0012               	return		;funcret
  4766  0019C6                     __end_of_fillScreen:
  4767                           	opt stack 0
  4768                           tblptru	equ	0xFF8
  4769                           tblptrh	equ	0xFF7
  4770                           tblptrl	equ	0xFF6
  4771                           tablat	equ	0xFF5
  4772                           prodh	equ	0xFF4
  4773                           prodl	equ	0xFF3
  4774                           postinc0	equ	0xFEE
  4775                           wreg	equ	0xFE8
  4776                           postdec1	equ	0xFE5
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           fsr2h	equ	0xFDA
  4782                           fsr2l	equ	0xFD9
  4783                           status	equ	0xFD8
  4784                           
  4785 ;; *************** function _fillRectangle *****************
  4786 ;; Defined at:
  4787 ;;		line 504 in file "ST7735_TFT.c"
  4788 ;; Parameters:    Size  Location     Type
  4789 ;;  x               1    wreg     unsigned char 
  4790 ;;  y               1   21[COMRAM] unsigned char 
  4791 ;;  w               1   22[COMRAM] unsigned char 
  4792 ;;  h               1   23[COMRAM] unsigned char 
  4793 ;;  color           2   24[COMRAM] unsigned int 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  x               1   32[COMRAM] unsigned char 
  4796 ;;  lo              1   31[COMRAM] unsigned char 
  4797 ;;  hi              1   30[COMRAM] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4807 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;Total ram usage:       12 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    4
  4814 ;; This function calls:
  4815 ;;		_setAddrWindow
  4816 ;;		_spiwrite
  4817 ;; This function is called by:
  4818 ;;		_fillScreen
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text17
  4823  0010B4                     __ptext17:
  4824                           	opt stack 0
  4825  0010B4                     _fillRectangle:
  4826                           	opt stack 24
  4827                           
  4828                           ;incstack = 0
  4829                           ;fillRectangle@x stored from wreg
  4830  0010B4  6E21               	movwf	fillRectangle@x,c
  4831                           
  4832                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  4833                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  4834  0010B6  0E80               	movlw	128
  4835  0010B8  6021               	cpfslt	fillRectangle@x,c
  4836  0010BA  D069               	goto	l522
  4837  0010BC  0E9F               	movlw	159
  4838  0010BE  6416               	cpfsgt	fillRectangle@y,c
  4839  0010C0  D001               	goto	l4534
  4840                           
  4841                           ;ST7735_TFT.c: 508: return;
  4842  0010C2  D065               	goto	l522
  4843  0010C4                     l4534:
  4844                           
  4845                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  4846  0010C4  0EFF               	movlw	255
  4847  0010C6  6E1B               	movwf	??_fillRectangle& (0+255),c
  4848  0010C8  0EFF               	movlw	255
  4849  0010CA  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  4850  0010CC  5017               	movf	fillRectangle@w,w,c
  4851  0010CE  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  4852  0010D2  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  4853  0010D4  261D               	addwf	??_fillRectangle+2,f,c
  4854  0010D6  0E00               	movlw	0
  4855  0010D8  221E               	addwfc	??_fillRectangle+3,f,c
  4856  0010DA  501B               	movf	??_fillRectangle,w,c
  4857  0010DC  261D               	addwf	??_fillRectangle+2,f,c
  4858  0010DE  501C               	movf	??_fillRectangle+1,w,c
  4859  0010E0  221E               	addwfc	??_fillRectangle+3,f,c
  4860  0010E2  BE1E               	btfsc	??_fillRectangle+3,7,c
  4861  0010E4  D00A               	goto	l523
  4862  0010E6  501E               	movf	??_fillRectangle+3,w,c
  4863  0010E8  E104               	bnz	u3250
  4864  0010EA  0E80               	movlw	128
  4865  0010EC  5C1D               	subwf	??_fillRectangle+2,w,c
  4866  0010EE  A0D8               	btfss	status,0,c
  4867  0010F0  D004               	goto	l523
  4868  0010F2                     u3250:
  4869                           
  4870                           ;ST7735_TFT.c: 510: w = 128 - x;
  4871  0010F2  5021               	movf	fillRectangle@x,w,c
  4872  0010F4  0800               	sublw	0
  4873  0010F6  0F80               	addlw	128
  4874  0010F8  6E17               	movwf	fillRectangle@w,c
  4875  0010FA                     l523:
  4876                           
  4877                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  4878  0010FA  0EFF               	movlw	255
  4879  0010FC  6E1B               	movwf	??_fillRectangle& (0+255),c
  4880  0010FE  0EFF               	movlw	255
  4881  001100  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  4882  001102  5018               	movf	fillRectangle@h,w,c
  4883  001104  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  4884  001108  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  4885  00110A  261D               	addwf	??_fillRectangle+2,f,c
  4886  00110C  0E00               	movlw	0
  4887  00110E  221E               	addwfc	??_fillRectangle+3,f,c
  4888  001110  501B               	movf	??_fillRectangle,w,c
  4889  001112  261D               	addwf	??_fillRectangle+2,f,c
  4890  001114  501C               	movf	??_fillRectangle+1,w,c
  4891  001116  221E               	addwfc	??_fillRectangle+3,f,c
  4892  001118  BE1E               	btfsc	??_fillRectangle+3,7,c
  4893  00111A  D00B               	goto	l4540
  4894  00111C  501E               	movf	??_fillRectangle+3,w,c
  4895  00111E  E104               	bnz	u3260
  4896  001120  0EA0               	movlw	160
  4897  001122  5C1D               	subwf	??_fillRectangle+2,w,c
  4898  001124  A0D8               	btfss	status,0,c
  4899  001126  D005               	goto	l4540
  4900  001128                     u3260:
  4901                           
  4902                           ;ST7735_TFT.c: 512: h = 160 - y;
  4903  001128  5016               	movf	fillRectangle@y,w,c
  4904  00112A  0800               	sublw	0
  4905  00112C  0FA0               	addlw	160
  4906  00112E  6E18               	movwf	fillRectangle@h,c
  4907  001130  D000               	goto	l4540
  4908  001132                     l4540:
  4909                           
  4910                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  4911  001132  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  4912  001136  5021               	movf	fillRectangle@x,w,c
  4913  001138  2417               	addwf	fillRectangle@w,w,c
  4914  00113A  6E1B               	movwf	??_fillRectangle& (0+255),c
  4915  00113C  041B               	decf	??_fillRectangle,w,c
  4916  00113E  6E13               	movwf	setAddrWindow@x1,c
  4917  001140  5016               	movf	fillRectangle@y,w,c
  4918  001142  2418               	addwf	fillRectangle@h,w,c
  4919  001144  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  4920  001146  041C               	decf	??_fillRectangle+1,w,c
  4921  001148  6E14               	movwf	setAddrWindow@y1,c
  4922  00114A  5021               	movf	fillRectangle@x,w,c
  4923  00114C  EC51  F00B         	call	_setAddrWindow
  4924                           
  4925                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  4926  001150  501A               	movf	fillRectangle@color+1,w,c
  4927  001152  6E1F               	movwf	fillRectangle@hi,c
  4928  001154  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  4929                           
  4930                           ;ST7735_TFT.c: 515: PORTBbits.RB5 = 1;
  4931  001158  8A81               	bsf	3969,5,c	;volatile
  4932                           
  4933                           ;ST7735_TFT.c: 516: PORTBbits.RB6 = 0;
  4934  00115A  9C81               	bcf	3969,6,c	;volatile
  4935                           
  4936                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  4937  00115C  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  4938  001160                     l4552:
  4939  001160  5016               	movf	fillRectangle@y,w,c
  4940  001162  B4D8               	btfsc	status,2,c
  4941  001164  D013               	goto	l526
  4942  001166  D001               	goto	l525
  4943  001168  D011               	goto	l526
  4944  00116A                     l525:
  4945                           
  4946                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  4947  00116A  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  4948  00116E                     l4556:
  4949  00116E  5021               	movf	fillRectangle@x,w,c
  4950  001170  B4D8               	btfsc	status,2,c
  4951  001172  D00A               	goto	l4566
  4952  001174  D001               	goto	l4560
  4953  001176  D008               	goto	l4566
  4954  001178                     l4560:
  4955                           
  4956                           ;ST7735_TFT.c: 520: spiwrite(hi);
  4957  001178  501F               	movf	fillRectangle@hi,w,c
  4958  00117A  ECE3  F00C         	call	_spiwrite
  4959                           
  4960                           ;ST7735_TFT.c: 521: spiwrite(lo);
  4961  00117E  5020               	movf	fillRectangle@lo,w,c
  4962  001180  ECE3  F00C         	call	_spiwrite
  4963  001184  0621               	decf	fillRectangle@x,f,c
  4964  001186  D7F3               	goto	l4556
  4965  001188                     l4566:
  4966  001188  0616               	decf	fillRectangle@y,f,c
  4967  00118A  D7EA               	goto	l4552
  4968  00118C                     l526:
  4969                           
  4970                           ;ST7735_TFT.c: 522: }
  4971                           ;ST7735_TFT.c: 523: }
  4972                           ;ST7735_TFT.c: 524: PORTBbits.RB6 = 1;
  4973  00118C  8C81               	bsf	3969,6,c	;volatile
  4974  00118E                     l522:
  4975  00118E  0012               	return		;funcret
  4976  001190                     __end_of_fillRectangle:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           postinc0	equ	0xFEE
  4985                           wreg	equ	0xFE8
  4986                           postdec1	equ	0xFE5
  4987                           fsr1l	equ	0xFE1
  4988                           indf2	equ	0xFDF
  4989                           postinc2	equ	0xFDE
  4990                           postdec2	equ	0xFDD
  4991                           fsr2h	equ	0xFDA
  4992                           fsr2l	equ	0xFD9
  4993                           status	equ	0xFD8
  4994                           
  4995 ;; *************** function _drawtext *****************
  4996 ;; Defined at:
  4997 ;;		line 475 in file "ST7735_TFT.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;  x               1    wreg     unsigned char 
  5000 ;;  y               1    0[BANK0 ] unsigned char 
  5001 ;;  _text           2    1[BANK0 ] PTR unsigned char 
  5002 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5003 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5004 ;;		 -> buffer(33), 
  5005 ;;  color           2    3[BANK0 ] unsigned int 
  5006 ;;  bg              2    5[BANK0 ] unsigned int 
  5007 ;;  size            1    7[BANK0 ] unsigned char 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  x               1    8[BANK0 ] unsigned char 
  5010 ;;  i               2   11[BANK0 ] unsigned int 
  5011 ;;  textsize        2    9[BANK0 ] unsigned int 
  5012 ;;  cursor_x        1   14[BANK0 ] unsigned char 
  5013 ;;  cursor_y        1   13[BANK0 ] unsigned char 
  5014 ;; Return value:  Size  Location     Type
  5015 ;;		None               void
  5016 ;; Registers used:
  5017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5023 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Totals:         2      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;Total ram usage:       17 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    7
  5030 ;; This function calls:
  5031 ;;		_drawChar
  5032 ;;		_strlen
  5033 ;; This function is called by:
  5034 ;;		_Initialize_Screen
  5035 ;;		_Update_Screen
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039                           	psect	text18
  5040  000ADA                     __ptext18:
  5041                           	opt stack 0
  5042  000ADA                     _drawtext:
  5043                           	opt stack 22
  5044                           
  5045                           ;incstack = 0
  5046                           ;drawtext@x stored from wreg
  5047  000ADA  0100               	movlb	0	; () banked
  5048  000ADC  6FF1               	movwf	drawtext@x& (0+255),b
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5052                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5053                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5054  000ADE  C0F1  F0F7         	movff	drawtext@x,drawtext@cursor_x
  5055                           
  5056                           ; BSR set to: 0
  5057  000AE2  C0E9  F0F6         	movff	drawtext@y,drawtext@cursor_y
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5061  000AE6  C0EA  F00F         	movff	drawtext@_text,strlen@s
  5062  000AEA  C0EB  F010         	movff	drawtext@_text+1,strlen@s+1
  5063  000AEE  EC08  F00C         	call	_strlen	;wreg free
  5064  000AF2  C00F  F0F2         	movff	?_strlen,drawtext@textsize
  5065  000AF6  C010  F0F3         	movff	?_strlen+1,drawtext@textsize+1
  5066                           
  5067                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5068  000AFA  0E00               	movlw	0
  5069  000AFC  0100               	movlb	0	; () banked
  5070  000AFE  6FF5               	movwf	(drawtext@i+1)& (0+255),b
  5071  000B00  0E00               	movlw	0
  5072  000B02  6FF4               	movwf	drawtext@i& (0+255),b
  5073  000B04  D06B               	goto	l4664
  5074  000B06                     l4638:
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5078  000B06  506C               	movf	_wrap,w,c
  5079  000B08  B4D8               	btfsc	status,2,c
  5080  000B0A  D038               	goto	l4654
  5081                           
  5082                           ; BSR set to: 0
  5083  000B0C  0100               	movlb	0	; () banked
  5084  000B0E  51F0               	movf	drawtext@size& (0+255),w,b
  5085  000B10  0D05               	mullw	5
  5086  000B12  0100               	movlb	0	; () banked
  5087  000B14  51F7               	movf	drawtext@cursor_x& (0+255),w,b
  5088  000B16  6E37               	movwf	??_drawtext& (0+255),c
  5089  000B18  6A38               	clrf	(??_drawtext+1)& (0+255),c
  5090  000B1A  50F3               	movf	prodl,w,c
  5091  000B1C  2637               	addwf	??_drawtext,f,c
  5092  000B1E  50F4               	movf	prodh,w,c
  5093  000B20  2238               	addwfc	??_drawtext+1,f,c
  5094  000B22  BE38               	btfsc	??_drawtext+1,7,c
  5095  000B24  D02B               	goto	l4654
  5096  000B26  5038               	movf	??_drawtext+1,w,c
  5097  000B28  E104               	bnz	u3400
  5098  000B2A  0E81               	movlw	129
  5099  000B2C  5C37               	subwf	??_drawtext,w,c
  5100  000B2E  A0D8               	btfss	status,0,c
  5101  000B30  D025               	goto	l4654
  5102  000B32                     u3400:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5106  000B32  0E00               	movlw	0
  5107  000B34  0100               	movlb	0	; () banked
  5108  000B36  6FF7               	movwf	drawtext@cursor_x& (0+255),b
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5112  000B38  0100               	movlb	0	; () banked
  5113  000B3A  51F0               	movf	drawtext@size& (0+255),w,b
  5114  000B3C  0D07               	mullw	7
  5115  000B3E  50F3               	movf	prodl,w,c
  5116  000B40  0100               	movlb	0	; () banked
  5117  000B42  25F6               	addwf	drawtext@cursor_y& (0+255),w,b
  5118  000B44  0F03               	addlw	3
  5119  000B46  0100               	movlb	0	; () banked
  5120  000B48  6FF6               	movwf	drawtext@cursor_y& (0+255),b
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5124  000B4A  0EA0               	movlw	160
  5125  000B4C  0100               	movlb	0	; () banked
  5126  000B4E  65F6               	cpfsgt	drawtext@cursor_y& (0+255),b
  5127  000B50  D004               	goto	l4650
  5128                           
  5129                           ; BSR set to: 0
  5130  000B52  0EA0               	movlw	160
  5131  000B54  0100               	movlb	0	; () banked
  5132  000B56  6FF6               	movwf	drawtext@cursor_y& (0+255),b
  5133  000B58  D000               	goto	l4650
  5134  000B5A                     l4650:
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5138  000B5A  0100               	movlb	0	; () banked
  5139  000B5C  51F4               	movf	drawtext@i& (0+255),w,b
  5140  000B5E  0100               	movlb	0	; () banked
  5141  000B60  25EA               	addwf	drawtext@_text& (0+255),w,b
  5142  000B62  6ED9               	movwf	fsr2l,c
  5143  000B64  0100               	movlb	0	; () banked
  5144  000B66  51F5               	movf	(drawtext@i+1)& (0+255),w,b
  5145  000B68  0100               	movlb	0	; () banked
  5146  000B6A  21EB               	addwfc	(drawtext@_text+1)& (0+255),w,b
  5147  000B6C  6EDA               	movwf	fsr2h,c
  5148  000B6E  0E20               	movlw	32
  5149  000B70  18DE               	xorwf	postinc2,w,c
  5150  000B72  B4D8               	btfsc	status,2,c
  5151  000B74  D02F               	goto	l4662
  5152  000B76  D002               	goto	l4654
  5153                           
  5154                           ; BSR set to: 0
  5155  000B78  D02D               	goto	l4662
  5156                           
  5157                           ; BSR set to: 0
  5158  000B7A  D000               	goto	l4654
  5159  000B7C                     l4654:
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5163  000B7C  C0F6  F02C         	movff	drawtext@cursor_y,drawChar@y
  5164  000B80  0100               	movlb	0	; () banked
  5165  000B82  51F4               	movf	drawtext@i& (0+255),w,b
  5166  000B84  0100               	movlb	0	; () banked
  5167  000B86  25EA               	addwf	drawtext@_text& (0+255),w,b
  5168  000B88  6ED9               	movwf	fsr2l,c
  5169  000B8A  0100               	movlb	0	; () banked
  5170  000B8C  51F5               	movf	(drawtext@i+1)& (0+255),w,b
  5171  000B8E  0100               	movlb	0	; () banked
  5172  000B90  21EB               	addwfc	(drawtext@_text+1)& (0+255),w,b
  5173  000B92  6EDA               	movwf	fsr2h,c
  5174  000B94  50DF               	movf	indf2,w,c
  5175  000B96  6E2D               	movwf	drawChar@c,c
  5176  000B98  C0EC  F02E         	movff	drawtext@color,drawChar@color
  5177  000B9C  C0ED  F02F         	movff	drawtext@color+1,drawChar@color+1
  5178  000BA0  C0EE  F030         	movff	drawtext@bg,drawChar@bg
  5179  000BA4  C0EF  F031         	movff	drawtext@bg+1,drawChar@bg+1
  5180  000BA8  C0F0  F032         	movff	drawtext@size,drawChar@size
  5181  000BAC  0100               	movlb	0	; () banked
  5182  000BAE  51F7               	movf	drawtext@cursor_x& (0+255),w,b
  5183  000BB0  ECC2  F004         	call	_drawChar
  5184                           
  5185                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5186  000BB4  0100               	movlb	0	; () banked
  5187  000BB6  51F0               	movf	drawtext@size& (0+255),w,b
  5188  000BB8  0D06               	mullw	6
  5189  000BBA  50F3               	movf	prodl,w,c
  5190  000BBC  0100               	movlb	0	; () banked
  5191  000BBE  25F7               	addwf	drawtext@cursor_x& (0+255),w,b
  5192  000BC0  0100               	movlb	0	; () banked
  5193  000BC2  6FF7               	movwf	drawtext@cursor_x& (0+255),b
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  5197  000BC4  0E80               	movlw	128
  5198  000BC6  0100               	movlb	0	; () banked
  5199  000BC8  65F7               	cpfsgt	drawtext@cursor_x& (0+255),b
  5200  000BCA  D004               	goto	l4662
  5201                           
  5202                           ; BSR set to: 0
  5203  000BCC  0E80               	movlw	128
  5204  000BCE  0100               	movlb	0	; () banked
  5205  000BD0  6FF7               	movwf	drawtext@cursor_x& (0+255),b
  5206                           
  5207                           ; BSR set to: 0
  5208  000BD2  D000               	goto	l4662
  5209  000BD4                     l4662:
  5210                           
  5211                           ; BSR set to: 0
  5212  000BD4  0100               	movlb	0	; () banked
  5213  000BD6  4BF4               	infsnz	drawtext@i& (0+255),f,b
  5214  000BD8  2BF5               	incf	(drawtext@i+1)& (0+255),f,b
  5215  000BDA  D000               	goto	l4664
  5216  000BDC                     l4664:
  5217                           
  5218                           ; BSR set to: 0
  5219  000BDC  0100               	movlb	0	; () banked
  5220  000BDE  51F2               	movf	drawtext@textsize& (0+255),w,b
  5221  000BE0  0100               	movlb	0	; () banked
  5222  000BE2  5DF4               	subwf	drawtext@i& (0+255),w,b
  5223  000BE4  0100               	movlb	0	; () banked
  5224  000BE6  51F3               	movf	(drawtext@textsize+1)& (0+255),w,b
  5225  000BE8  0100               	movlb	0	; () banked
  5226  000BEA  59F5               	subwfb	(drawtext@i+1)& (0+255),w,b
  5227  000BEC  A0D8               	btfss	status,0,c
  5228  000BEE  D78B               	goto	l4638
  5229                           
  5230                           ; BSR set to: 0
  5231                           
  5232                           ; BSR set to: 0
  5233  000BF0  0012               	return		;funcret
  5234  000BF2                     __end_of_drawtext:
  5235                           	opt stack 0
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           postinc0	equ	0xFEE
  5243                           wreg	equ	0xFE8
  5244                           postdec1	equ	0xFE5
  5245                           fsr1l	equ	0xFE1
  5246                           indf2	equ	0xFDF
  5247                           postinc2	equ	0xFDE
  5248                           postdec2	equ	0xFDD
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function _strlen *****************
  5254 ;; Defined at:
  5255 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  s               2   14[COMRAM] PTR const unsigned char 
  5258 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5259 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5260 ;;		 -> buffer(33), 
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  5263 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5264 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5265 ;;		 -> buffer(33), 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  2   14[COMRAM] unsigned int 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;Total ram usage:        6 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    1
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_drawtext
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text19
  5290  001810                     __ptext19:
  5291                           	opt stack 0
  5292  001810                     _strlen:
  5293                           	opt stack 27
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;incstack = 0
  5297  001810  C00F  F013         	movff	strlen@s,strlen@cp
  5298  001814  C010  F014         	movff	strlen@s+1,strlen@cp+1
  5299  001818  D003               	goto	l4524
  5300  00181A                     l4522:
  5301  00181A  4A13               	infsnz	strlen@cp,f,c
  5302  00181C  2A14               	incf	strlen@cp+1,f,c
  5303  00181E  D000               	goto	l4524
  5304  001820                     l4524:
  5305  001820  C013  FFD9         	movff	strlen@cp,fsr2l
  5306  001824  C014  FFDA         	movff	strlen@cp+1,fsr2h
  5307  001828  50DF               	movf	indf2,w,c
  5308  00182A  A4D8               	btfss	status,2,c
  5309  00182C  D7F6               	goto	l4522
  5310  00182E  C00F  F011         	movff	strlen@s,??_strlen
  5311  001832  C010  F012         	movff	strlen@s+1,??_strlen+1
  5312  001836  1E11               	comf	??_strlen,f,c
  5313  001838  1E12               	comf	??_strlen+1,f,c
  5314  00183A  4A11               	infsnz	??_strlen,f,c
  5315  00183C  2A12               	incf	??_strlen+1,f,c
  5316  00183E  5013               	movf	strlen@cp,w,c
  5317  001840  2411               	addwf	??_strlen,w,c
  5318  001842  6E0F               	movwf	?_strlen,c
  5319  001844  5014               	movf	strlen@cp+1,w,c
  5320  001846  2012               	addwfc	??_strlen+1,w,c
  5321  001848  6E10               	movwf	?_strlen+1,c
  5322  00184A  D000               	goto	l1262
  5323  00184C                     l1262:
  5324  00184C  0012               	return		;funcret
  5325  00184E                     __end_of_strlen:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           postdec1	equ	0xFE5
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _drawChar *****************
  5345 ;; Defined at:
  5346 ;;		line 448 in file "ST7735_TFT.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  x               1    wreg     unsigned char 
  5349 ;;  y               1   43[COMRAM] unsigned char 
  5350 ;;  c               1   44[COMRAM] unsigned char 
  5351 ;;  color           2   45[COMRAM] unsigned int 
  5352 ;;  bg              2   47[COMRAM] unsigned int 
  5353 ;;  size            1   49[COMRAM] unsigned char 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  x               1   51[COMRAM] unsigned char 
  5356 ;;  line            1   50[COMRAM] unsigned char 
  5357 ;;  i               1   53[COMRAM] unsigned char 
  5358 ;;  j               1   52[COMRAM] unsigned char 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;		None               void
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5368 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;Total ram usage:       11 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    6
  5375 ;; This function calls:
  5376 ;;		___wmul
  5377 ;;		_drawPixel
  5378 ;;		_fillRect
  5379 ;; This function is called by:
  5380 ;;		_drawtext
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text20
  5385  000984                     __ptext20:
  5386                           	opt stack 0
  5387  000984                     _drawChar:
  5388                           	opt stack 22
  5389                           
  5390                           ;incstack = 0
  5391                           ;drawChar@x stored from wreg
  5392  000984  6E34               	movwf	drawChar@x,c
  5393                           
  5394                           ;ST7735_TFT.c: 450: char i, j;
  5395                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  5396  000986  0E80               	movlw	128
  5397  000988  6034               	cpfslt	drawChar@x,c
  5398  00098A  D0A6               	goto	l485
  5399  00098C  0E9F               	movlw	159
  5400  00098E  642C               	cpfsgt	drawChar@y,c
  5401  000990  D001               	goto	l4470
  5402                           
  5403                           ;ST7735_TFT.c: 452: return;
  5404  000992  D0A2               	goto	l485
  5405  000994                     l4470:
  5406                           
  5407                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  5408  000994  5032               	movf	drawChar@size,w,c
  5409  000996  A4D8               	btfss	status,2,c
  5410  000998  D003               	goto	l4474
  5411  00099A  0E01               	movlw	1
  5412  00099C  6E32               	movwf	drawChar@size,c
  5413  00099E  D000               	goto	l4474
  5414  0009A0                     l4474:
  5415                           
  5416                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  5417  0009A0  0E1F               	movlw	31
  5418  0009A2  642D               	cpfsgt	drawChar@c,c
  5419  0009A4  D004               	goto	l4478
  5420  0009A6  0E7E               	movlw	126
  5421  0009A8  642D               	cpfsgt	drawChar@c,c
  5422  0009AA  D003               	goto	l487
  5423  0009AC  D000               	goto	l4478
  5424  0009AE                     l4478:
  5425                           
  5426                           ;ST7735_TFT.c: 455: c = '?';
  5427  0009AE  0E3F               	movlw	63
  5428  0009B0  6E2D               	movwf	drawChar@c,c
  5429  0009B2                     l487:
  5430                           
  5431                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  5432  0009B2  0E00               	movlw	0
  5433  0009B4  6E36               	movwf	drawChar@i,c
  5434  0009B6                     l4480:
  5435  0009B6  0E04               	movlw	4
  5436  0009B8  6436               	cpfsgt	drawChar@i,c
  5437  0009BA  D001               	goto	l4484
  5438  0009BC  D08D               	goto	l485
  5439  0009BE                     l4484:
  5440                           
  5441                           ;ST7735_TFT.c: 457: unsigned char line;
  5442                           ;ST7735_TFT.c: 458: if(c < 'S')
  5443  0009BE  0E53               	movlw	83
  5444  0009C0  602D               	cpfslt	drawChar@c,c
  5445  0009C2  D015               	goto	l4488
  5446                           
  5447                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  5448  0009C4  0EE0               	movlw	224
  5449  0009C6  242D               	addwf	drawChar@c,w,c
  5450  0009C8  6E0F               	movwf	___wmul@multiplier,c
  5451  0009CA  6A10               	clrf	___wmul@multiplier+1,c
  5452  0009CC  0EFF               	movlw	255
  5453  0009CE  2210               	addwfc	___wmul@multiplier+1,f,c
  5454  0009D0  0E00               	movlw	0
  5455  0009D2  6E12               	movwf	___wmul@multiplicand+1,c
  5456  0009D4  0E05               	movlw	5
  5457  0009D6  6E11               	movwf	___wmul@multiplicand,c
  5458  0009D8  EC8C  F00C         	call	___wmul	;wreg free
  5459  0009DC  5036               	movf	drawChar@i,w,c
  5460  0009DE  260F               	addwf	?___wmul,f,c
  5461  0009E0  0E00               	movlw	0
  5462  0009E2  2210               	addwfc	?___wmul+1,f,c
  5463  0009E4  0E75               	movlw	low _font
  5464  0009E6  240F               	addwf	?___wmul,w,c
  5465  0009E8  6EF6               	movwf	tblptrl,c
  5466  0009EA  0EFD               	movlw	high _font
  5467  0009EC  D014               	goto	L1
  5468  0009EE                     l4488:
  5469                           
  5470                           ;ST7735_TFT.c: 460: else
  5471                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  5472  0009EE  0EAD               	movlw	173
  5473  0009F0  242D               	addwf	drawChar@c,w,c
  5474  0009F2  6E0F               	movwf	___wmul@multiplier,c
  5475  0009F4  6A10               	clrf	___wmul@multiplier+1,c
  5476  0009F6  0EFF               	movlw	255
  5477  0009F8  2210               	addwfc	___wmul@multiplier+1,f,c
  5478  0009FA  0E00               	movlw	0
  5479  0009FC  6E12               	movwf	___wmul@multiplicand+1,c
  5480  0009FE  0E05               	movlw	5
  5481  000A00  6E11               	movwf	___wmul@multiplicand,c
  5482  000A02  EC8C  F00C         	call	___wmul	;wreg free
  5483  000A06  5036               	movf	drawChar@i,w,c
  5484  000A08  260F               	addwf	?___wmul,f,c
  5485  000A0A  0E00               	movlw	0
  5486  000A0C  2210               	addwfc	?___wmul+1,f,c
  5487  000A0E  0E74               	movlw	low _font2
  5488  000A10  240F               	addwf	?___wmul,w,c
  5489  000A12  6EF6               	movwf	tblptrl,c
  5490  000A14  0EFE               	movlw	high _font2
  5491  000A16                     L1:
  5492  000A16  2010               	addwfc	?___wmul+1,w,c
  5493  000A18  6EF7               	movwf	tblptrh,c
  5494  000A1A                     	if	0	;There are less than 3 active tblptr bytes
  5495  000A1A                     	endif
  5496  000A1A  0008               	tblrd		*
  5497  000A1C  CFF5 F033          	movff	tablat,drawChar@line
  5498  000A20  D000               	goto	l4490
  5499  000A22                     l4490:
  5500                           
  5501                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  5502  000A22  0E00               	movlw	0
  5503  000A24  6E35               	movwf	drawChar@j,c
  5504  000A26                     l4492:
  5505  000A26  0E06               	movlw	6
  5506  000A28  6435               	cpfsgt	drawChar@j,c
  5507  000A2A  D001               	goto	l494
  5508  000A2C  D053               	goto	l4516
  5509  000A2E                     l494:
  5510                           
  5511                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  5512  000A2E  A033               	btfss	drawChar@line,0,c
  5513  000A30  D023               	goto	l4502
  5514                           
  5515                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  5516  000A32  0432               	decf	drawChar@size,w,c
  5517  000A34  A4D8               	btfss	status,2,c
  5518  000A36  D00C               	goto	l4500
  5519  000A38  502C               	movf	drawChar@y,w,c
  5520  000A3A  2435               	addwf	drawChar@j,w,c
  5521  000A3C  6E16               	movwf	drawPixel@y,c
  5522  000A3E  C02E  F017         	movff	drawChar@color,drawPixel@color
  5523  000A42  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  5524  000A46  5034               	movf	drawChar@x,w,c
  5525  000A48  2436               	addwf	drawChar@i,w,c
  5526  000A4A  EC5F  F00C         	call	_drawPixel
  5527  000A4E  D03E               	goto	l4510
  5528  000A50                     l4500:
  5529                           
  5530                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5531  000A50  5035               	movf	drawChar@j,w,c
  5532  000A52  0232               	mulwf	drawChar@size,c
  5533  000A54  50F3               	movf	prodl,w,c
  5534  000A56  242C               	addwf	drawChar@y,w,c
  5535  000A58  6E21               	movwf	fillRect@y,c
  5536  000A5A  C032  F022         	movff	drawChar@size,fillRect@w
  5537  000A5E  C032  F023         	movff	drawChar@size,fillRect@h
  5538  000A62  C02E  F024         	movff	drawChar@color,fillRect@color
  5539  000A66  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  5540  000A6A  5036               	movf	drawChar@i,w,c
  5541  000A6C  0232               	mulwf	drawChar@size,c
  5542  000A6E  50F3               	movf	prodl,w,c
  5543  000A70  2434               	addwf	drawChar@x,w,c
  5544  000A72  ECC4  F00B         	call	_fillRect
  5545                           
  5546                           ;ST7735_TFT.c: 466: }
  5547  000A76  D02A               	goto	l4510
  5548  000A78                     l4502:
  5549                           
  5550                           ;ST7735_TFT.c: 467: else if(bg != color) {
  5551  000A78  502E               	movf	drawChar@color,w,c
  5552  000A7A  1830               	xorwf	drawChar@bg,w,c
  5553  000A7C  E104               	bnz	u3180
  5554  000A7E  502F               	movf	drawChar@color+1,w,c
  5555  000A80  1831               	xorwf	drawChar@bg+1,w,c
  5556  000A82  B4D8               	btfsc	status,2,c
  5557  000A84  D023               	goto	l4510
  5558  000A86                     u3180:
  5559                           
  5560                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  5561  000A86  0432               	decf	drawChar@size,w,c
  5562  000A88  A4D8               	btfss	status,2,c
  5563  000A8A  D00C               	goto	l4508
  5564  000A8C  502C               	movf	drawChar@y,w,c
  5565  000A8E  2435               	addwf	drawChar@j,w,c
  5566  000A90  6E16               	movwf	drawPixel@y,c
  5567  000A92  C030  F017         	movff	drawChar@bg,drawPixel@color
  5568  000A96  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  5569  000A9A  5034               	movf	drawChar@x,w,c
  5570  000A9C  2436               	addwf	drawChar@i,w,c
  5571  000A9E  EC5F  F00C         	call	_drawPixel
  5572  000AA2  D014               	goto	l4510
  5573  000AA4                     l4508:
  5574                           
  5575                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  5576  000AA4  5035               	movf	drawChar@j,w,c
  5577  000AA6  0232               	mulwf	drawChar@size,c
  5578  000AA8  50F3               	movf	prodl,w,c
  5579  000AAA  242C               	addwf	drawChar@y,w,c
  5580  000AAC  6E21               	movwf	fillRect@y,c
  5581  000AAE  C032  F022         	movff	drawChar@size,fillRect@w
  5582  000AB2  C032  F023         	movff	drawChar@size,fillRect@h
  5583  000AB6  C030  F024         	movff	drawChar@bg,fillRect@color
  5584  000ABA  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  5585  000ABE  5036               	movf	drawChar@i,w,c
  5586  000AC0  0232               	mulwf	drawChar@size,c
  5587  000AC2  50F3               	movf	prodl,w,c
  5588  000AC4  2434               	addwf	drawChar@x,w,c
  5589  000AC6  ECC4  F00B         	call	_fillRect
  5590  000ACA  D000               	goto	l4510
  5591  000ACC                     l4510:
  5592  000ACC  2A35               	incf	drawChar@j,f,c
  5593  000ACE  90D8               	bcf	status,0,c
  5594  000AD0  3233               	rrcf	drawChar@line,f,c
  5595  000AD2  D7A9               	goto	l4492
  5596  000AD4                     l4516:
  5597  000AD4  2A36               	incf	drawChar@i,f,c
  5598  000AD6  D76F               	goto	l4480
  5599  000AD8                     l485:
  5600  000AD8  0012               	return		;funcret
  5601  000ADA                     __end_of_drawChar:
  5602                           	opt stack 0
  5603                           tblptru	equ	0xFF8
  5604                           tblptrh	equ	0xFF7
  5605                           tblptrl	equ	0xFF6
  5606                           tablat	equ	0xFF5
  5607                           prodh	equ	0xFF4
  5608                           prodl	equ	0xFF3
  5609                           postinc0	equ	0xFEE
  5610                           wreg	equ	0xFE8
  5611                           postdec1	equ	0xFE5
  5612                           fsr1l	equ	0xFE1
  5613                           indf2	equ	0xFDF
  5614                           postinc2	equ	0xFDE
  5615                           postdec2	equ	0xFDD
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _fillRect *****************
  5621 ;; Defined at:
  5622 ;;		line 438 in file "ST7735_TFT.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  x               1    wreg     unsigned char 
  5625 ;;  y               1   32[COMRAM] unsigned char 
  5626 ;;  w               1   33[COMRAM] unsigned char 
  5627 ;;  h               1   34[COMRAM] unsigned char 
  5628 ;;  color           2   35[COMRAM] unsigned int 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  x               1   40[COMRAM] unsigned char 
  5631 ;;  i               2   41[COMRAM] int 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;		None               void
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0, cstack
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5641 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;Total ram usage:       11 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    5
  5648 ;; This function calls:
  5649 ;;		_drawFastVLine
  5650 ;; This function is called by:
  5651 ;;		_drawChar
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text21
  5656  001788                     __ptext21:
  5657                           	opt stack 0
  5658  001788                     _fillRect:
  5659                           	opt stack 22
  5660                           
  5661                           ;incstack = 0
  5662                           ;fillRect@x stored from wreg
  5663  001788  6E29               	movwf	fillRect@x,c
  5664                           
  5665                           ;ST7735_TFT.c: 440: signed int i;
  5666                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  5667  00178A  C029  F02A         	movff	fillRect@x,fillRect@i
  5668  00178E  6A2B               	clrf	fillRect@i+1,c
  5669  001790  D00E               	goto	l4372
  5670  001792                     l4368:
  5671                           
  5672                           ;ST7735_TFT.c: 443: {
  5673                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  5674  001792  C021  F016         	movff	fillRect@y,drawFastVLine@y
  5675  001796  C023  F017         	movff	fillRect@h,drawFastVLine@h
  5676  00179A  C024  F018         	movff	fillRect@color,drawFastVLine@color
  5677  00179E  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  5678  0017A2  502A               	movf	fillRect@i,w,c
  5679  0017A4  ECE1  F009         	call	_drawFastVLine
  5680  0017A8  4A2A               	infsnz	fillRect@i,f,c
  5681  0017AA  2A2B               	incf	fillRect@i+1,f,c
  5682  0017AC  D000               	goto	l4372
  5683  0017AE                     l4372:
  5684  0017AE  5022               	movf	fillRect@w,w,c
  5685  0017B0  C029  F026         	movff	fillRect@x,??_fillRect
  5686  0017B4  6A27               	clrf	(??_fillRect+1)& (0+255),c
  5687  0017B6  2626               	addwf	??_fillRect,f,c
  5688  0017B8  0E00               	movlw	0
  5689  0017BA  2227               	addwfc	??_fillRect+1,f,c
  5690  0017BC  5026               	movf	??_fillRect,w,c
  5691  0017BE  5C2A               	subwf	fillRect@i,w,c
  5692  0017C0  502B               	movf	fillRect@i+1,w,c
  5693  0017C2  0A80               	xorlw	128
  5694  0017C4  6E28               	movwf	(??_fillRect+2)& (0+255),c
  5695  0017C6  5027               	movf	??_fillRect+1,w,c
  5696  0017C8  0A80               	xorlw	128
  5697  0017CA  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  5698  0017CC  A0D8               	btfss	status,0,c
  5699  0017CE  D7E1               	goto	l4368
  5700  0017D0  0012               	return		;funcret
  5701  0017D2                     __end_of_fillRect:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           postdec1	equ	0xFE5
  5712                           fsr1l	equ	0xFE1
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           postdec2	equ	0xFDD
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function _drawFastVLine *****************
  5721 ;; Defined at:
  5722 ;;		line 417 in file "ST7735_TFT.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  x               1    wreg     unsigned char 
  5725 ;;  y               1   21[COMRAM] unsigned char 
  5726 ;;  h               1   22[COMRAM] unsigned char 
  5727 ;;  color           2   23[COMRAM] unsigned int 
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;  x               1   31[COMRAM] unsigned char 
  5730 ;;  lo              1   30[COMRAM] unsigned char 
  5731 ;;  hi              1   29[COMRAM] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;		None               void
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:       11 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    4
  5748 ;; This function calls:
  5749 ;;		_setAddrWindow
  5750 ;;		_spiwrite
  5751 ;; This function is called by:
  5752 ;;		_fillRect
  5753 ;;		_fillCircleHelper
  5754 ;;		_fillCircle
  5755 ;;		_drawRect
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text22
  5760  0013C2                     __ptext22:
  5761                           	opt stack 0
  5762  0013C2                     _drawFastVLine:
  5763                           	opt stack 22
  5764                           
  5765                           ;incstack = 0
  5766                           ;drawFastVLine@x stored from wreg
  5767  0013C2  6E20               	movwf	drawFastVLine@x,c
  5768                           
  5769                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  5770                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  5771  0013C4  0E80               	movlw	128
  5772  0013C6  6020               	cpfslt	drawFastVLine@x,c
  5773  0013C8  D03F               	goto	l469
  5774  0013CA  0E9F               	movlw	159
  5775  0013CC  6416               	cpfsgt	drawFastVLine@y,c
  5776  0013CE  D001               	goto	l4318
  5777                           
  5778                           ;ST7735_TFT.c: 421: return;
  5779  0013D0  D03B               	goto	l469
  5780  0013D2                     l4318:
  5781                           
  5782                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  5783  0013D2  0EFF               	movlw	255
  5784  0013D4  6E1A               	movwf	??_drawFastVLine& (0+255),c
  5785  0013D6  0EFF               	movlw	255
  5786  0013D8  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  5787  0013DA  5017               	movf	drawFastVLine@h,w,c
  5788  0013DC  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  5789  0013E0  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  5790  0013E2  261C               	addwf	??_drawFastVLine+2,f,c
  5791  0013E4  0E00               	movlw	0
  5792  0013E6  221D               	addwfc	??_drawFastVLine+3,f,c
  5793  0013E8  501A               	movf	??_drawFastVLine,w,c
  5794  0013EA  261C               	addwf	??_drawFastVLine+2,f,c
  5795  0013EC  501B               	movf	??_drawFastVLine+1,w,c
  5796  0013EE  221D               	addwfc	??_drawFastVLine+3,f,c
  5797  0013F0  BE1D               	btfsc	??_drawFastVLine+3,7,c
  5798  0013F2  D00B               	goto	l4322
  5799  0013F4  501D               	movf	??_drawFastVLine+3,w,c
  5800  0013F6  E104               	bnz	u3020
  5801  0013F8  0EA0               	movlw	160
  5802  0013FA  5C1C               	subwf	??_drawFastVLine+2,w,c
  5803  0013FC  A0D8               	btfss	status,0,c
  5804  0013FE  D005               	goto	l4322
  5805  001400                     u3020:
  5806                           
  5807                           ;ST7735_TFT.c: 423: h = 160 - y;
  5808  001400  5016               	movf	drawFastVLine@y,w,c
  5809  001402  0800               	sublw	0
  5810  001404  0FA0               	addlw	160
  5811  001406  6E17               	movwf	drawFastVLine@h,c
  5812  001408  D000               	goto	l4322
  5813  00140A                     l4322:
  5814                           
  5815                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  5816  00140A  5019               	movf	drawFastVLine@color+1,w,c
  5817  00140C  6E1E               	movwf	drawFastVLine@hi,c
  5818  00140E  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  5819                           
  5820                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  5821  001412  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  5822  001416  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  5823  00141A  5016               	movf	drawFastVLine@y,w,c
  5824  00141C  2417               	addwf	drawFastVLine@h,w,c
  5825  00141E  6E1A               	movwf	??_drawFastVLine& (0+255),c
  5826  001420  041A               	decf	??_drawFastVLine,w,c
  5827  001422  6E14               	movwf	setAddrWindow@y1,c
  5828  001424  5020               	movf	drawFastVLine@x,w,c
  5829  001426  EC51  F00B         	call	_setAddrWindow
  5830                           
  5831                           ;ST7735_TFT.c: 426: PORTBbits.RB5 = 1;
  5832  00142A  8A81               	bsf	3969,5,c	;volatile
  5833                           
  5834                           ;ST7735_TFT.c: 427: PORTBbits.RB6 = 0;
  5835  00142C  9C81               	bcf	3969,6,c	;volatile
  5836                           
  5837                           ;ST7735_TFT.c: 429: while (h--) {
  5838  00142E  D007               	goto	l4334
  5839  001430                     l4332:
  5840                           
  5841                           ;ST7735_TFT.c: 430: spiwrite(hi);
  5842  001430  501E               	movf	drawFastVLine@hi,w,c
  5843  001432  ECE3  F00C         	call	_spiwrite
  5844                           
  5845                           ;ST7735_TFT.c: 431: spiwrite(lo);
  5846  001436  501F               	movf	drawFastVLine@lo,w,c
  5847  001438  ECE3  F00C         	call	_spiwrite
  5848  00143C  D000               	goto	l4334
  5849  00143E                     l4334:
  5850  00143E  0617               	decf	drawFastVLine@h,f,c
  5851  001440  2817               	incf	drawFastVLine@h,w,c
  5852  001442  A4D8               	btfss	status,2,c
  5853  001444  D7F5               	goto	l4332
  5854                           
  5855                           ;ST7735_TFT.c: 432: }
  5856                           ;ST7735_TFT.c: 433: PORTBbits.RB6 = 1;
  5857  001446  8C81               	bsf	3969,6,c	;volatile
  5858  001448                     l469:
  5859  001448  0012               	return		;funcret
  5860  00144A                     __end_of_drawFastVLine:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodh	equ	0xFF4
  5867                           prodl	equ	0xFF3
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           postdec1	equ	0xFE5
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           postdec2	equ	0xFDD
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function _drawCircle *****************
  5880 ;; Defined at:
  5881 ;;		line 529 in file "ST7735_TFT.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  x0              2   25[COMRAM] int 
  5884 ;;  y0              2   27[COMRAM] int 
  5885 ;;  r               2   29[COMRAM] int 
  5886 ;;  color           2   31[COMRAM] unsigned int 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  y               2   43[COMRAM] int 
  5889 ;;  x               2   41[COMRAM] int 
  5890 ;;  f               2   39[COMRAM] int 
  5891 ;;  ddF_y           2   37[COMRAM] int 
  5892 ;;  ddF_x           2   35[COMRAM] int 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;		None               void
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5902 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;Total ram usage:       20 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    5
  5909 ;; This function calls:
  5910 ;;		_drawPixel
  5911 ;; This function is called by:
  5912 ;;		_Initialize_Screen
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text23
  5917  0007D6                     __ptext23:
  5918                           	opt stack 0
  5919  0007D6                     _drawCircle:
  5920                           	opt stack 24
  5921                           
  5922                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  5923                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  5924                           
  5925                           ;incstack = 0
  5926  0007D6  C01E  F022         	movff	drawCircle@r,??_drawCircle
  5927  0007DA  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  5928  0007DE  1E22               	comf	??_drawCircle,f,c
  5929  0007E0  1E23               	comf	??_drawCircle+1,f,c
  5930  0007E2  4A22               	infsnz	??_drawCircle,f,c
  5931  0007E4  2A23               	incf	??_drawCircle+1,f,c
  5932  0007E6  0E01               	movlw	1
  5933  0007E8  2422               	addwf	??_drawCircle,w,c
  5934  0007EA  6E28               	movwf	drawCircle@f,c
  5935  0007EC  0E00               	movlw	0
  5936  0007EE  2023               	addwfc	??_drawCircle+1,w,c
  5937  0007F0  6E29               	movwf	drawCircle@f+1,c
  5938  0007F2  0E00               	movlw	0
  5939  0007F4  6E25               	movwf	drawCircle@ddF_x+1,c
  5940  0007F6  0E01               	movlw	1
  5941  0007F8  6E24               	movwf	drawCircle@ddF_x,c
  5942  0007FA  C01E  F022         	movff	drawCircle@r,??_drawCircle
  5943  0007FE  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  5944  000802  90D8               	bcf	status,0,c
  5945  000804  3622               	rlcf	??_drawCircle,f,c
  5946  000806  3623               	rlcf	??_drawCircle+1,f,c
  5947  000808  1E22               	comf	??_drawCircle,f,c
  5948  00080A  1E23               	comf	??_drawCircle+1,f,c
  5949  00080C  4A22               	infsnz	??_drawCircle,f,c
  5950  00080E  2A23               	incf	??_drawCircle+1,f,c
  5951  000810  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  5952  000814  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  5953  000818  0E00               	movlw	0
  5954  00081A  6E2B               	movwf	drawCircle@x+1,c
  5955  00081C  0E00               	movlw	0
  5956  00081E  6E2A               	movwf	drawCircle@x,c
  5957  000820  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  5958  000824  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  5959                           
  5960                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  5961  000828  501C               	movf	drawCircle@y0,w,c
  5962  00082A  241E               	addwf	drawCircle@r,w,c
  5963  00082C  6E16               	movwf	drawPixel@y,c
  5964  00082E  C020  F017         	movff	drawCircle@color,drawPixel@color
  5965  000832  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  5966  000836  501A               	movf	drawCircle@x0,w,c
  5967  000838  EC5F  F00C         	call	_drawPixel
  5968                           
  5969                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  5970  00083C  501E               	movf	drawCircle@r,w,c
  5971  00083E  0800               	sublw	0
  5972  000840  241C               	addwf	drawCircle@y0,w,c
  5973  000842  6E16               	movwf	drawPixel@y,c
  5974  000844  C020  F017         	movff	drawCircle@color,drawPixel@color
  5975  000848  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  5976  00084C  501A               	movf	drawCircle@x0,w,c
  5977  00084E  EC5F  F00C         	call	_drawPixel
  5978                           
  5979                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  5980  000852  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  5981  000856  C020  F017         	movff	drawCircle@color,drawPixel@color
  5982  00085A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  5983  00085E  501A               	movf	drawCircle@x0,w,c
  5984  000860  241E               	addwf	drawCircle@r,w,c
  5985  000862  EC5F  F00C         	call	_drawPixel
  5986                           
  5987                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  5988  000866  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  5989  00086A  C020  F017         	movff	drawCircle@color,drawPixel@color
  5990  00086E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  5991  000872  501E               	movf	drawCircle@r,w,c
  5992  000874  0800               	sublw	0
  5993  000876  241A               	addwf	drawCircle@x0,w,c
  5994  000878  EC5F  F00C         	call	_drawPixel
  5995                           
  5996                           ;ST7735_TFT.c: 537: while (x < y) {
  5997  00087C  D078               	goto	l4712
  5998  00087E                     l4684:
  5999                           
  6000                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6001  00087E  BE29               	btfsc	drawCircle@f+1,7,c
  6002  000880  D00B               	goto	l533
  6003                           
  6004                           ;ST7735_TFT.c: 539: y--;
  6005  000882  062C               	decf	drawCircle@y,f,c
  6006  000884  A0D8               	btfss	status,0,c
  6007  000886  062D               	decf	drawCircle@y+1,f,c
  6008                           
  6009                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6010  000888  0E02               	movlw	2
  6011  00088A  2626               	addwf	drawCircle@ddF_y,f,c
  6012  00088C  0E00               	movlw	0
  6013  00088E  2227               	addwfc	drawCircle@ddF_y+1,f,c
  6014                           
  6015                           ;ST7735_TFT.c: 541: f += ddF_y;
  6016  000890  5026               	movf	drawCircle@ddF_y,w,c
  6017  000892  2628               	addwf	drawCircle@f,f,c
  6018  000894  5027               	movf	drawCircle@ddF_y+1,w,c
  6019  000896  2229               	addwfc	drawCircle@f+1,f,c
  6020  000898                     l533:
  6021                           
  6022                           ;ST7735_TFT.c: 542: }
  6023                           ;ST7735_TFT.c: 543: x++;
  6024  000898  4A2A               	infsnz	drawCircle@x,f,c
  6025  00089A  2A2B               	incf	drawCircle@x+1,f,c
  6026                           
  6027                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6028  00089C  0E02               	movlw	2
  6029  00089E  2624               	addwf	drawCircle@ddF_x,f,c
  6030  0008A0  0E00               	movlw	0
  6031  0008A2  2225               	addwfc	drawCircle@ddF_x+1,f,c
  6032                           
  6033                           ;ST7735_TFT.c: 545: f += ddF_x;
  6034  0008A4  5024               	movf	drawCircle@ddF_x,w,c
  6035  0008A6  2628               	addwf	drawCircle@f,f,c
  6036  0008A8  5025               	movf	drawCircle@ddF_x+1,w,c
  6037  0008AA  2229               	addwfc	drawCircle@f+1,f,c
  6038                           
  6039                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6040  0008AC  501C               	movf	drawCircle@y0,w,c
  6041  0008AE  242C               	addwf	drawCircle@y,w,c
  6042  0008B0  6E16               	movwf	drawPixel@y,c
  6043  0008B2  C020  F017         	movff	drawCircle@color,drawPixel@color
  6044  0008B6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6045  0008BA  501A               	movf	drawCircle@x0,w,c
  6046  0008BC  242A               	addwf	drawCircle@x,w,c
  6047  0008BE  EC5F  F00C         	call	_drawPixel
  6048                           
  6049                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6050  0008C2  501C               	movf	drawCircle@y0,w,c
  6051  0008C4  242C               	addwf	drawCircle@y,w,c
  6052  0008C6  6E16               	movwf	drawPixel@y,c
  6053  0008C8  C020  F017         	movff	drawCircle@color,drawPixel@color
  6054  0008CC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6055  0008D0  502A               	movf	drawCircle@x,w,c
  6056  0008D2  0800               	sublw	0
  6057  0008D4  241A               	addwf	drawCircle@x0,w,c
  6058  0008D6  EC5F  F00C         	call	_drawPixel
  6059                           
  6060                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6061  0008DA  502C               	movf	drawCircle@y,w,c
  6062  0008DC  0800               	sublw	0
  6063  0008DE  241C               	addwf	drawCircle@y0,w,c
  6064  0008E0  6E16               	movwf	drawPixel@y,c
  6065  0008E2  C020  F017         	movff	drawCircle@color,drawPixel@color
  6066  0008E6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6067  0008EA  501A               	movf	drawCircle@x0,w,c
  6068  0008EC  242A               	addwf	drawCircle@x,w,c
  6069  0008EE  EC5F  F00C         	call	_drawPixel
  6070                           
  6071                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6072  0008F2  502C               	movf	drawCircle@y,w,c
  6073  0008F4  0800               	sublw	0
  6074  0008F6  241C               	addwf	drawCircle@y0,w,c
  6075  0008F8  6E16               	movwf	drawPixel@y,c
  6076  0008FA  C020  F017         	movff	drawCircle@color,drawPixel@color
  6077  0008FE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6078  000902  502A               	movf	drawCircle@x,w,c
  6079  000904  0800               	sublw	0
  6080  000906  241A               	addwf	drawCircle@x0,w,c
  6081  000908  EC5F  F00C         	call	_drawPixel
  6082                           
  6083                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6084  00090C  501C               	movf	drawCircle@y0,w,c
  6085  00090E  242A               	addwf	drawCircle@x,w,c
  6086  000910  6E16               	movwf	drawPixel@y,c
  6087  000912  C020  F017         	movff	drawCircle@color,drawPixel@color
  6088  000916  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6089  00091A  501A               	movf	drawCircle@x0,w,c
  6090  00091C  242C               	addwf	drawCircle@y,w,c
  6091  00091E  EC5F  F00C         	call	_drawPixel
  6092                           
  6093                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6094  000922  501C               	movf	drawCircle@y0,w,c
  6095  000924  242A               	addwf	drawCircle@x,w,c
  6096  000926  6E16               	movwf	drawPixel@y,c
  6097  000928  C020  F017         	movff	drawCircle@color,drawPixel@color
  6098  00092C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6099  000930  502C               	movf	drawCircle@y,w,c
  6100  000932  0800               	sublw	0
  6101  000934  241A               	addwf	drawCircle@x0,w,c
  6102  000936  EC5F  F00C         	call	_drawPixel
  6103                           
  6104                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6105  00093A  502A               	movf	drawCircle@x,w,c
  6106  00093C  0800               	sublw	0
  6107  00093E  241C               	addwf	drawCircle@y0,w,c
  6108  000940  6E16               	movwf	drawPixel@y,c
  6109  000942  C020  F017         	movff	drawCircle@color,drawPixel@color
  6110  000946  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6111  00094A  501A               	movf	drawCircle@x0,w,c
  6112  00094C  242C               	addwf	drawCircle@y,w,c
  6113  00094E  EC5F  F00C         	call	_drawPixel
  6114                           
  6115                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6116  000952  502A               	movf	drawCircle@x,w,c
  6117  000954  0800               	sublw	0
  6118  000956  241C               	addwf	drawCircle@y0,w,c
  6119  000958  6E16               	movwf	drawPixel@y,c
  6120  00095A  C020  F017         	movff	drawCircle@color,drawPixel@color
  6121  00095E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6122  000962  502C               	movf	drawCircle@y,w,c
  6123  000964  0800               	sublw	0
  6124  000966  241A               	addwf	drawCircle@x0,w,c
  6125  000968  EC5F  F00C         	call	_drawPixel
  6126  00096C  D000               	goto	l4712
  6127  00096E                     l4712:
  6128  00096E  502C               	movf	drawCircle@y,w,c
  6129  000970  5C2A               	subwf	drawCircle@x,w,c
  6130  000972  502B               	movf	drawCircle@x+1,w,c
  6131  000974  0A80               	xorlw	128
  6132  000976  6E22               	movwf	??_drawCircle& (0+255),c
  6133  000978  502D               	movf	drawCircle@y+1,w,c
  6134  00097A  0A80               	xorlw	128
  6135  00097C  5822               	subwfb	??_drawCircle& (0+255),w,c
  6136  00097E  A0D8               	btfss	status,0,c
  6137  000980  D77E               	goto	l4684
  6138  000982  0012               	return		;funcret
  6139  000984                     __end_of_drawCircle:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           postinc0	equ	0xFEE
  6148                           wreg	equ	0xFE8
  6149                           postdec1	equ	0xFE5
  6150                           fsr1l	equ	0xFE1
  6151                           indf2	equ	0xFDF
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _drawPixel *****************
  6159 ;; Defined at:
  6160 ;;		line 408 in file "ST7735_TFT.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  x               1    wreg     unsigned char 
  6163 ;;  y               1   21[COMRAM] unsigned char 
  6164 ;;  color           2   22[COMRAM] unsigned int 
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;  x               1   24[COMRAM] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;		None               void
  6169 ;; Registers used:
  6170 ;;		wreg, status,2, status,0, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6176 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;Total ram usage:        4 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    4
  6183 ;; This function calls:
  6184 ;;		_setAddrWindow
  6185 ;;		_write_data
  6186 ;; This function is called by:
  6187 ;;		_drawChar
  6188 ;;		_drawCircle
  6189 ;;		_drawCircleHelper
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text24
  6194  0018BE                     __ptext24:
  6195                           	opt stack 0
  6196  0018BE                     _drawPixel:
  6197                           	opt stack 23
  6198                           
  6199                           ;incstack = 0
  6200                           ;drawPixel@x stored from wreg
  6201  0018BE  6E19               	movwf	drawPixel@x,c
  6202                           
  6203                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  6204  0018C0  0E80               	movlw	128
  6205  0018C2  6019               	cpfslt	drawPixel@x,c
  6206  0018C4  D013               	goto	l463
  6207  0018C6  0E9F               	movlw	159
  6208  0018C8  6416               	cpfsgt	drawPixel@y,c
  6209  0018CA  D001               	goto	l4360
  6210                           
  6211                           ;ST7735_TFT.c: 411: return;
  6212  0018CC  D00F               	goto	l463
  6213  0018CE                     l4360:
  6214                           
  6215                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  6216  0018CE  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  6217  0018D2  2819               	incf	drawPixel@x,w,c
  6218  0018D4  6E13               	movwf	setAddrWindow@x1,c
  6219  0018D6  2816               	incf	drawPixel@y,w,c
  6220  0018D8  6E14               	movwf	setAddrWindow@y1,c
  6221  0018DA  5019               	movf	drawPixel@x,w,c
  6222  0018DC  EC51  F00B         	call	_setAddrWindow
  6223                           
  6224                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  6225  0018E0  5018               	movf	drawPixel@color+1,w,c
  6226  0018E2  EC00  F00D         	call	_write_data
  6227                           
  6228                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  6229  0018E6  5017               	movf	drawPixel@color,w,c
  6230  0018E8  EC00  F00D         	call	_write_data
  6231  0018EC                     l463:
  6232  0018EC  0012               	return		;funcret
  6233  0018EE                     __end_of_drawPixel:
  6234                           	opt stack 0
  6235                           tblptru	equ	0xFF8
  6236                           tblptrh	equ	0xFF7
  6237                           tblptrl	equ	0xFF6
  6238                           tablat	equ	0xFF5
  6239                           prodh	equ	0xFF4
  6240                           prodl	equ	0xFF3
  6241                           postinc0	equ	0xFEE
  6242                           wreg	equ	0xFE8
  6243                           postdec1	equ	0xFE5
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function _setAddrWindow *****************
  6253 ;; Defined at:
  6254 ;;		line 393 in file "ST7735_TFT.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  x0              1    wreg     unsigned char 
  6257 ;;  y0              1   17[COMRAM] unsigned char 
  6258 ;;  x1              1   18[COMRAM] unsigned char 
  6259 ;;  y1              1   19[COMRAM] unsigned char 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  x0              1   20[COMRAM] unsigned char 
  6262 ;; Return value:  Size  Location     Type
  6263 ;;		None               void
  6264 ;; Registers used:
  6265 ;;		wreg, status,2, status,0, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6271 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;Total ram usage:        4 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    3
  6278 ;; This function calls:
  6279 ;;		_write_command
  6280 ;;		_write_data
  6281 ;; This function is called by:
  6282 ;;		_drawPixel
  6283 ;;		_drawFastVLine
  6284 ;;		_fillRectangle
  6285 ;;		_drawFastHLine
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text25
  6290  0016A2                     __ptext25:
  6291                           	opt stack 0
  6292  0016A2                     _setAddrWindow:
  6293                           	opt stack 24
  6294                           
  6295                           ;incstack = 0
  6296                           ;setAddrWindow@x0 stored from wreg
  6297  0016A2  6E15               	movwf	setAddrWindow@x0,c
  6298                           
  6299                           ;ST7735_TFT.c: 395: write_command(0x2A);
  6300  0016A4  0E2A               	movlw	42
  6301  0016A6  EC08  F00D         	call	_write_command
  6302                           
  6303                           ;ST7735_TFT.c: 396: write_data(0);
  6304  0016AA  0E00               	movlw	0
  6305  0016AC  EC00  F00D         	call	_write_data
  6306                           
  6307                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  6308  0016B0  5015               	movf	setAddrWindow@x0,w,c
  6309  0016B2  2454               	addwf	_colstart,w,c
  6310  0016B4  EC00  F00D         	call	_write_data
  6311                           
  6312                           ;ST7735_TFT.c: 398: write_data(0);
  6313  0016B8  0E00               	movlw	0
  6314  0016BA  EC00  F00D         	call	_write_data
  6315                           
  6316                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  6317  0016BE  5013               	movf	setAddrWindow@x1,w,c
  6318  0016C0  2454               	addwf	_colstart,w,c
  6319  0016C2  EC00  F00D         	call	_write_data
  6320                           
  6321                           ;ST7735_TFT.c: 400: write_command(0x2B);
  6322  0016C6  0E2B               	movlw	43
  6323  0016C8  EC08  F00D         	call	_write_command
  6324                           
  6325                           ;ST7735_TFT.c: 401: write_data(0);
  6326  0016CC  0E00               	movlw	0
  6327  0016CE  EC00  F00D         	call	_write_data
  6328                           
  6329                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  6330  0016D2  5012               	movf	setAddrWindow@y0,w,c
  6331  0016D4  245C               	addwf	_rowstart,w,c
  6332  0016D6  EC00  F00D         	call	_write_data
  6333                           
  6334                           ;ST7735_TFT.c: 403: write_data(0);
  6335  0016DA  0E00               	movlw	0
  6336  0016DC  EC00  F00D         	call	_write_data
  6337                           
  6338                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  6339  0016E0  5014               	movf	setAddrWindow@y1,w,c
  6340  0016E2  245C               	addwf	_rowstart,w,c
  6341  0016E4  EC00  F00D         	call	_write_data
  6342                           
  6343                           ;ST7735_TFT.c: 405: write_command(0x2C);
  6344  0016E8  0E2C               	movlw	44
  6345  0016EA  EC08  F00D         	call	_write_command
  6346  0016EE  0012               	return		;funcret
  6347  0016F0                     __end_of_setAddrWindow:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           postinc0	equ	0xFEE
  6356                           wreg	equ	0xFE8
  6357                           postdec1	equ	0xFE5
  6358                           fsr1l	equ	0xFE1
  6359                           indf2	equ	0xFDF
  6360                           postinc2	equ	0xFDE
  6361                           postdec2	equ	0xFDD
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function _TFT_GreenTab_Initialize *****************
  6367 ;; Defined at:
  6368 ;;		line 645 in file "ST7735_TFT.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;		None               void
  6375 ;; Registers used:
  6376 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;Total ram usage:        0 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    4
  6389 ;; This function calls:
  6390 ;;		_Rcmd1
  6391 ;;		_Rcmd2red
  6392 ;;		_Rcmd3
  6393 ;;		_write_command
  6394 ;;		_write_data
  6395 ;; This function is called by:
  6396 ;;		_Initialize_Screen
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	text26
  6401  0018EE                     __ptext26:
  6402                           	opt stack 0
  6403  0018EE                     _TFT_GreenTab_Initialize:
  6404                           	opt stack 25
  6405                           
  6406                           ;ST7735_TFT.c: 647: PORTBbits.RB6 = 1;
  6407                           
  6408                           ;incstack = 0
  6409  0018EE  8C81               	bsf	3969,6,c	;volatile
  6410                           
  6411                           ;ST7735_TFT.c: 648: PORTBbits.RB5 = 0;
  6412  0018F0  9A81               	bcf	3969,5,c	;volatile
  6413                           
  6414                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  6415  0018F2  0E80               	movlw	128
  6416  0018F4  6EC7               	movwf	4039,c	;volatile
  6417                           
  6418                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  6419  0018F6  0E30               	movlw	48
  6420  0018F8  6EC6               	movwf	4038,c	;volatile
  6421                           
  6422                           ;ST7735_TFT.c: 654: Rcmd1();
  6423  0018FA  ECF9  F005         	call	_Rcmd1	;wreg free
  6424                           
  6425                           ;ST7735_TFT.c: 655: Rcmd2red();
  6426  0018FE  EC27  F00C         	call	_Rcmd2red	;wreg free
  6427                           
  6428                           ;ST7735_TFT.c: 656: Rcmd3();
  6429  001902  ECFD  F006         	call	_Rcmd3	;wreg free
  6430                           
  6431                           ;ST7735_TFT.c: 657: write_command(0x36);
  6432  001906  0E36               	movlw	54
  6433  001908  EC08  F00D         	call	_write_command
  6434                           
  6435                           ;ST7735_TFT.c: 658: write_data(0xC0);
  6436  00190C  0EC0               	movlw	192
  6437  00190E  EC00  F00D         	call	_write_data
  6438                           
  6439                           ;ST7735_TFT.c: 659: _tft_type = 1;
  6440  001912  0E01               	movlw	1
  6441  001914  6E4E               	movwf	__tft_type,c
  6442  001916  0012               	return		;funcret
  6443  001918                     __end_of_TFT_GreenTab_Initialize:
  6444                           	opt stack 0
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodh	equ	0xFF4
  6450                           prodl	equ	0xFF3
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           postdec1	equ	0xFE5
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function _Rcmd3 *****************
  6463 ;; Defined at:
  6464 ;;		line 339 in file "ST7735_TFT.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;		None               void
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    3
  6485 ;; This function calls:
  6486 ;;		_delay_ms
  6487 ;;		_write_command
  6488 ;;		_write_data
  6489 ;; This function is called by:
  6490 ;;		_TFT_GreenTab_Initialize
  6491 ;;		_TFT_BlackTab_Initialize
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text27
  6496  000DFA                     __ptext27:
  6497                           	opt stack 0
  6498  000DFA                     _Rcmd3:
  6499                           	opt stack 25
  6500                           
  6501                           ;ST7735_TFT.c: 341: write_command(0xE0);
  6502                           
  6503                           ;incstack = 0
  6504  000DFA  0EE0               	movlw	224
  6505  000DFC  EC08  F00D         	call	_write_command
  6506                           
  6507                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6508  000E00  0E02               	movlw	2
  6509  000E02  EC00  F00D         	call	_write_data
  6510  000E06  0E1C               	movlw	28
  6511  000E08  EC00  F00D         	call	_write_data
  6512  000E0C  0E07               	movlw	7
  6513  000E0E  EC00  F00D         	call	_write_data
  6514  000E12  0E12               	movlw	18
  6515  000E14  EC00  F00D         	call	_write_data
  6516                           
  6517                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6518  000E18  0E37               	movlw	55
  6519  000E1A  EC00  F00D         	call	_write_data
  6520  000E1E  0E32               	movlw	50
  6521  000E20  EC00  F00D         	call	_write_data
  6522  000E24  0E29               	movlw	41
  6523  000E26  EC00  F00D         	call	_write_data
  6524  000E2A  0E2D               	movlw	45
  6525  000E2C  EC00  F00D         	call	_write_data
  6526                           
  6527                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6528  000E30  0E29               	movlw	41
  6529  000E32  EC00  F00D         	call	_write_data
  6530  000E36  0E25               	movlw	37
  6531  000E38  EC00  F00D         	call	_write_data
  6532  000E3C  0E2B               	movlw	43
  6533  000E3E  EC00  F00D         	call	_write_data
  6534  000E42  0E39               	movlw	57
  6535  000E44  EC00  F00D         	call	_write_data
  6536                           
  6537                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6538  000E48  0E00               	movlw	0
  6539  000E4A  EC00  F00D         	call	_write_data
  6540  000E4E  0E01               	movlw	1
  6541  000E50  EC00  F00D         	call	_write_data
  6542  000E54  0E03               	movlw	3
  6543  000E56  EC00  F00D         	call	_write_data
  6544  000E5A  0E10               	movlw	16
  6545  000E5C  EC00  F00D         	call	_write_data
  6546                           
  6547                           ;ST7735_TFT.c: 346: write_command(0xE1);
  6548  000E60  0EE1               	movlw	225
  6549  000E62  EC08  F00D         	call	_write_command
  6550                           
  6551                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6552  000E66  0E03               	movlw	3
  6553  000E68  EC00  F00D         	call	_write_data
  6554  000E6C  0E1D               	movlw	29
  6555  000E6E  EC00  F00D         	call	_write_data
  6556  000E72  0E07               	movlw	7
  6557  000E74  EC00  F00D         	call	_write_data
  6558  000E78  0E06               	movlw	6
  6559  000E7A  EC00  F00D         	call	_write_data
  6560                           
  6561                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6562  000E7E  0E2E               	movlw	46
  6563  000E80  EC00  F00D         	call	_write_data
  6564  000E84  0E2C               	movlw	44
  6565  000E86  EC00  F00D         	call	_write_data
  6566  000E8A  0E29               	movlw	41
  6567  000E8C  EC00  F00D         	call	_write_data
  6568  000E90  0E2D               	movlw	45
  6569  000E92  EC00  F00D         	call	_write_data
  6570                           
  6571                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6572  000E96  0E2E               	movlw	46
  6573  000E98  EC00  F00D         	call	_write_data
  6574  000E9C  0E2E               	movlw	46
  6575  000E9E  EC00  F00D         	call	_write_data
  6576  000EA2  0E37               	movlw	55
  6577  000EA4  EC00  F00D         	call	_write_data
  6578  000EA8  0E3F               	movlw	63
  6579  000EAA  EC00  F00D         	call	_write_data
  6580                           
  6581                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6582  000EAE  0E00               	movlw	0
  6583  000EB0  EC00  F00D         	call	_write_data
  6584  000EB4  0E00               	movlw	0
  6585  000EB6  EC00  F00D         	call	_write_data
  6586  000EBA  0E02               	movlw	2
  6587  000EBC  EC00  F00D         	call	_write_data
  6588  000EC0  0E10               	movlw	16
  6589  000EC2  EC00  F00D         	call	_write_data
  6590                           
  6591                           ;ST7735_TFT.c: 351: write_command(0x13);
  6592  000EC6  0E13               	movlw	19
  6593  000EC8  EC08  F00D         	call	_write_command
  6594                           
  6595                           ;ST7735_TFT.c: 352: delay_ms(10);
  6596  000ECC  0E00               	movlw	0
  6597  000ECE  6E16               	movwf	delay_ms@ms+1,c
  6598  000ED0  0E0A               	movlw	10
  6599  000ED2  6E15               	movwf	delay_ms@ms,c
  6600  000ED4  EC00  F00B         	call	_delay_ms	;wreg free
  6601                           
  6602                           ;ST7735_TFT.c: 353: write_command(0x29);
  6603  000ED8  0E29               	movlw	41
  6604  000EDA  EC08  F00D         	call	_write_command
  6605                           
  6606                           ;ST7735_TFT.c: 354: delay_ms(100);
  6607  000EDE  0E00               	movlw	0
  6608  000EE0  6E16               	movwf	delay_ms@ms+1,c
  6609  000EE2  0E64               	movlw	100
  6610  000EE4  6E15               	movwf	delay_ms@ms,c
  6611  000EE6  EC00  F00B         	call	_delay_ms	;wreg free
  6612  000EEA  0012               	return		;funcret
  6613  000EEC                     __end_of_Rcmd3:
  6614                           	opt stack 0
  6615                           tblptru	equ	0xFF8
  6616                           tblptrh	equ	0xFF7
  6617                           tblptrl	equ	0xFF6
  6618                           tablat	equ	0xFF5
  6619                           prodh	equ	0xFF4
  6620                           prodl	equ	0xFF3
  6621                           postinc0	equ	0xFEE
  6622                           wreg	equ	0xFE8
  6623                           postdec1	equ	0xFE5
  6624                           fsr1l	equ	0xFE1
  6625                           indf2	equ	0xFDF
  6626                           postinc2	equ	0xFDE
  6627                           postdec2	equ	0xFDD
  6628                           fsr2h	equ	0xFDA
  6629                           fsr2l	equ	0xFD9
  6630                           status	equ	0xFD8
  6631                           
  6632 ;; *************** function _Rcmd2red *****************
  6633 ;; Defined at:
  6634 ;;		line 329 in file "ST7735_TFT.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;		None
  6639 ;; Return value:  Size  Location     Type
  6640 ;;		None               void
  6641 ;; Registers used:
  6642 ;;		wreg, status,2, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;Total ram usage:        0 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    3
  6655 ;; This function calls:
  6656 ;;		_write_command
  6657 ;;		_write_data
  6658 ;; This function is called by:
  6659 ;;		_TFT_GreenTab_Initialize
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           	psect	text28
  6664  00184E                     __ptext28:
  6665                           	opt stack 0
  6666  00184E                     _Rcmd2red:
  6667                           	opt stack 25
  6668                           
  6669                           ;ST7735_TFT.c: 331: write_command(0x2A);
  6670                           
  6671                           ;incstack = 0
  6672  00184E  0E2A               	movlw	42
  6673  001850  EC08  F00D         	call	_write_command
  6674                           
  6675                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  6676  001854  0E00               	movlw	0
  6677  001856  EC00  F00D         	call	_write_data
  6678  00185A  0E00               	movlw	0
  6679  00185C  EC00  F00D         	call	_write_data
  6680                           
  6681                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  6682  001860  0E00               	movlw	0
  6683  001862  EC00  F00D         	call	_write_data
  6684  001866  0E7F               	movlw	127
  6685  001868  EC00  F00D         	call	_write_data
  6686                           
  6687                           ;ST7735_TFT.c: 334: write_command(0x2B);
  6688  00186C  0E2B               	movlw	43
  6689  00186E  EC08  F00D         	call	_write_command
  6690                           
  6691                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  6692  001872  0E00               	movlw	0
  6693  001874  EC00  F00D         	call	_write_data
  6694  001878  0E00               	movlw	0
  6695  00187A  EC00  F00D         	call	_write_data
  6696                           
  6697                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  6698  00187E  0E00               	movlw	0
  6699  001880  EC00  F00D         	call	_write_data
  6700  001884  0E9F               	movlw	159
  6701  001886  EC00  F00D         	call	_write_data
  6702  00188A  0012               	return		;funcret
  6703  00188C                     __end_of_Rcmd2red:
  6704                           	opt stack 0
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           postinc0	equ	0xFEE
  6712                           wreg	equ	0xFE8
  6713                           postdec1	equ	0xFE5
  6714                           fsr1l	equ	0xFE1
  6715                           indf2	equ	0xFDF
  6716                           postinc2	equ	0xFDE
  6717                           postdec2	equ	0xFDD
  6718                           fsr2h	equ	0xFDA
  6719                           fsr2l	equ	0xFD9
  6720                           status	equ	0xFD8
  6721                           
  6722 ;; *************** function _Rcmd1 *****************
  6723 ;; Defined at:
  6724 ;;		line 282 in file "ST7735_TFT.c"
  6725 ;; Parameters:    Size  Location     Type
  6726 ;;		None
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;		None
  6729 ;; Return value:  Size  Location     Type
  6730 ;;		None               void
  6731 ;; Registers used:
  6732 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;Total ram usage:        0 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    3
  6745 ;; This function calls:
  6746 ;;		_delay_ms
  6747 ;;		_write_command
  6748 ;;		_write_data
  6749 ;; This function is called by:
  6750 ;;		_TFT_GreenTab_Initialize
  6751 ;;		_TFT_BlackTab_Initialize
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text29
  6756  000BF2                     __ptext29:
  6757                           	opt stack 0
  6758  000BF2                     _Rcmd1:
  6759                           	opt stack 25
  6760                           
  6761                           ;ST7735_TFT.c: 284: write_command(0x01);
  6762                           
  6763                           ;incstack = 0
  6764  000BF2  0E01               	movlw	1
  6765  000BF4  EC08  F00D         	call	_write_command
  6766                           
  6767                           ;ST7735_TFT.c: 285: delay_ms(150);
  6768  000BF8  0E00               	movlw	0
  6769  000BFA  6E16               	movwf	delay_ms@ms+1,c
  6770  000BFC  0E96               	movlw	150
  6771  000BFE  6E15               	movwf	delay_ms@ms,c
  6772  000C00  EC00  F00B         	call	_delay_ms	;wreg free
  6773                           
  6774                           ;ST7735_TFT.c: 286: write_command(0x11);
  6775  000C04  0E11               	movlw	17
  6776  000C06  EC08  F00D         	call	_write_command
  6777                           
  6778                           ;ST7735_TFT.c: 287: delay_ms(500);
  6779  000C0A  0E01               	movlw	1
  6780  000C0C  6E16               	movwf	delay_ms@ms+1,c
  6781  000C0E  0EF4               	movlw	244
  6782  000C10  6E15               	movwf	delay_ms@ms,c
  6783  000C12  EC00  F00B         	call	_delay_ms	;wreg free
  6784                           
  6785                           ;ST7735_TFT.c: 288: write_command(0xB1);
  6786  000C16  0EB1               	movlw	177
  6787  000C18  EC08  F00D         	call	_write_command
  6788                           
  6789                           ;ST7735_TFT.c: 289: write_data(0x01);
  6790  000C1C  0E01               	movlw	1
  6791  000C1E  EC00  F00D         	call	_write_data
  6792                           
  6793                           ;ST7735_TFT.c: 290: write_data(0x2C);
  6794  000C22  0E2C               	movlw	44
  6795  000C24  EC00  F00D         	call	_write_data
  6796                           
  6797                           ;ST7735_TFT.c: 291: write_data(0x2D);
  6798  000C28  0E2D               	movlw	45
  6799  000C2A  EC00  F00D         	call	_write_data
  6800                           
  6801                           ;ST7735_TFT.c: 292: write_command(0xB2);
  6802  000C2E  0EB2               	movlw	178
  6803  000C30  EC08  F00D         	call	_write_command
  6804                           
  6805                           ;ST7735_TFT.c: 293: write_data(0x01);
  6806  000C34  0E01               	movlw	1
  6807  000C36  EC00  F00D         	call	_write_data
  6808                           
  6809                           ;ST7735_TFT.c: 294: write_data(0x2C);
  6810  000C3A  0E2C               	movlw	44
  6811  000C3C  EC00  F00D         	call	_write_data
  6812                           
  6813                           ;ST7735_TFT.c: 295: write_data(0x2D);
  6814  000C40  0E2D               	movlw	45
  6815  000C42  EC00  F00D         	call	_write_data
  6816                           
  6817                           ;ST7735_TFT.c: 296: write_command(0xB3);
  6818  000C46  0EB3               	movlw	179
  6819  000C48  EC08  F00D         	call	_write_command
  6820                           
  6821                           ;ST7735_TFT.c: 297: write_data(0x01);
  6822  000C4C  0E01               	movlw	1
  6823  000C4E  EC00  F00D         	call	_write_data
  6824                           
  6825                           ;ST7735_TFT.c: 298: write_data(0x2C);
  6826  000C52  0E2C               	movlw	44
  6827  000C54  EC00  F00D         	call	_write_data
  6828                           
  6829                           ;ST7735_TFT.c: 299: write_data(0x2D);
  6830  000C58  0E2D               	movlw	45
  6831  000C5A  EC00  F00D         	call	_write_data
  6832                           
  6833                           ;ST7735_TFT.c: 300: write_data(0x01);
  6834  000C5E  0E01               	movlw	1
  6835  000C60  EC00  F00D         	call	_write_data
  6836                           
  6837                           ;ST7735_TFT.c: 301: write_data(0x2C);
  6838  000C64  0E2C               	movlw	44
  6839  000C66  EC00  F00D         	call	_write_data
  6840                           
  6841                           ;ST7735_TFT.c: 302: write_data(0x2D);
  6842  000C6A  0E2D               	movlw	45
  6843  000C6C  EC00  F00D         	call	_write_data
  6844                           
  6845                           ;ST7735_TFT.c: 303: write_command(0xB4);
  6846  000C70  0EB4               	movlw	180
  6847  000C72  EC08  F00D         	call	_write_command
  6848                           
  6849                           ;ST7735_TFT.c: 304: write_data(0x07);
  6850  000C76  0E07               	movlw	7
  6851  000C78  EC00  F00D         	call	_write_data
  6852                           
  6853                           ;ST7735_TFT.c: 305: write_command(0xC0);
  6854  000C7C  0EC0               	movlw	192
  6855  000C7E  EC08  F00D         	call	_write_command
  6856                           
  6857                           ;ST7735_TFT.c: 306: write_data(0xA2);
  6858  000C82  0EA2               	movlw	162
  6859  000C84  EC00  F00D         	call	_write_data
  6860                           
  6861                           ;ST7735_TFT.c: 307: write_data(0x02);
  6862  000C88  0E02               	movlw	2
  6863  000C8A  EC00  F00D         	call	_write_data
  6864                           
  6865                           ;ST7735_TFT.c: 308: write_data(0x84);
  6866  000C8E  0E84               	movlw	132
  6867  000C90  EC00  F00D         	call	_write_data
  6868                           
  6869                           ;ST7735_TFT.c: 309: write_command(0xC1);
  6870  000C94  0EC1               	movlw	193
  6871  000C96  EC08  F00D         	call	_write_command
  6872                           
  6873                           ;ST7735_TFT.c: 310: write_data(0xC5);
  6874  000C9A  0EC5               	movlw	197
  6875  000C9C  EC00  F00D         	call	_write_data
  6876                           
  6877                           ;ST7735_TFT.c: 311: write_command(0xC2);
  6878  000CA0  0EC2               	movlw	194
  6879  000CA2  EC08  F00D         	call	_write_command
  6880                           
  6881                           ;ST7735_TFT.c: 312: write_data(0x0A);
  6882  000CA6  0E0A               	movlw	10
  6883  000CA8  EC00  F00D         	call	_write_data
  6884                           
  6885                           ;ST7735_TFT.c: 313: write_data(0x00);
  6886  000CAC  0E00               	movlw	0
  6887  000CAE  EC00  F00D         	call	_write_data
  6888                           
  6889                           ;ST7735_TFT.c: 314: write_command(0xC3);
  6890  000CB2  0EC3               	movlw	195
  6891  000CB4  EC08  F00D         	call	_write_command
  6892                           
  6893                           ;ST7735_TFT.c: 315: write_data(0x8A);
  6894  000CB8  0E8A               	movlw	138
  6895  000CBA  EC00  F00D         	call	_write_data
  6896                           
  6897                           ;ST7735_TFT.c: 316: write_data(0x2A);
  6898  000CBE  0E2A               	movlw	42
  6899  000CC0  EC00  F00D         	call	_write_data
  6900                           
  6901                           ;ST7735_TFT.c: 317: write_command(0xC4);
  6902  000CC4  0EC4               	movlw	196
  6903  000CC6  EC08  F00D         	call	_write_command
  6904                           
  6905                           ;ST7735_TFT.c: 318: write_data(0x8A);
  6906  000CCA  0E8A               	movlw	138
  6907  000CCC  EC00  F00D         	call	_write_data
  6908                           
  6909                           ;ST7735_TFT.c: 319: write_data(0xEE);
  6910  000CD0  0EEE               	movlw	238
  6911  000CD2  EC00  F00D         	call	_write_data
  6912                           
  6913                           ;ST7735_TFT.c: 320: write_command(0xC5);
  6914  000CD6  0EC5               	movlw	197
  6915  000CD8  EC08  F00D         	call	_write_command
  6916                           
  6917                           ;ST7735_TFT.c: 321: write_data(0x0E);
  6918  000CDC  0E0E               	movlw	14
  6919  000CDE  EC00  F00D         	call	_write_data
  6920                           
  6921                           ;ST7735_TFT.c: 322: write_command(0x20);
  6922  000CE2  0E20               	movlw	32
  6923  000CE4  EC08  F00D         	call	_write_command
  6924                           
  6925                           ;ST7735_TFT.c: 323: write_command(0x36);
  6926  000CE8  0E36               	movlw	54
  6927  000CEA  EC08  F00D         	call	_write_command
  6928                           
  6929                           ;ST7735_TFT.c: 324: write_data(0xC8);
  6930  000CEE  0EC8               	movlw	200
  6931  000CF0  EC00  F00D         	call	_write_data
  6932                           
  6933                           ;ST7735_TFT.c: 325: write_command(0x3A);
  6934  000CF4  0E3A               	movlw	58
  6935  000CF6  EC08  F00D         	call	_write_command
  6936                           
  6937                           ;ST7735_TFT.c: 326: write_data(0x05);
  6938  000CFA  0E05               	movlw	5
  6939  000CFC  EC00  F00D         	call	_write_data
  6940  000D00  0012               	return		;funcret
  6941  000D02                     __end_of_Rcmd1:
  6942                           	opt stack 0
  6943                           tblptru	equ	0xFF8
  6944                           tblptrh	equ	0xFF7
  6945                           tblptrl	equ	0xFF6
  6946                           tablat	equ	0xFF5
  6947                           prodh	equ	0xFF4
  6948                           prodl	equ	0xFF3
  6949                           postinc0	equ	0xFEE
  6950                           wreg	equ	0xFE8
  6951                           postdec1	equ	0xFE5
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           postinc2	equ	0xFDE
  6955                           postdec2	equ	0xFDD
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _write_data *****************
  6961 ;; Defined at:
  6962 ;;		line 210 in file "ST7735_TFT.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;  data_           1    wreg     unsigned char 
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;  data_           1   16[COMRAM] unsigned char 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;		None               void
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;Total ram usage:        1 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    2
  6983 ;; This function calls:
  6984 ;;		_spiwrite
  6985 ;; This function is called by:
  6986 ;;		_Rcmd1
  6987 ;;		_Rcmd2red
  6988 ;;		_Rcmd3
  6989 ;;		_setAddrWindow
  6990 ;;		_drawPixel
  6991 ;;		_TFT_GreenTab_Initialize
  6992 ;;		_Bcmd
  6993 ;;		_setScrollDefinition
  6994 ;;		_Rcmd2green
  6995 ;;		_VerticalScroll
  6996 ;; This function uses a non-reentrant model
  6997 ;;
  6998                           
  6999                           	psect	text30
  7000  001A00                     __ptext30:
  7001                           	opt stack 0
  7002  001A00                     _write_data:
  7003                           	opt stack 24
  7004                           
  7005                           ;incstack = 0
  7006                           ;write_data@data_ stored from wreg
  7007  001A00  6E11               	movwf	write_data@data_,c
  7008                           
  7009                           ;ST7735_TFT.c: 212: PORTBbits.RB6 = 0;
  7010  001A02  9C81               	bcf	3969,6,c	;volatile
  7011                           
  7012                           ;ST7735_TFT.c: 213: PORTBbits.RB5 = 1;
  7013  001A04  8A81               	bsf	3969,5,c	;volatile
  7014                           
  7015                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7016  001A06  5011               	movf	write_data@data_,w,c
  7017  001A08  ECE3  F00C         	call	_spiwrite
  7018                           
  7019                           ;ST7735_TFT.c: 215: PORTBbits.RB6 = 1;
  7020  001A0C  8C81               	bsf	3969,6,c	;volatile
  7021  001A0E  0012               	return		;funcret
  7022  001A10                     __end_of_write_data:
  7023                           	opt stack 0
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           prodh	equ	0xFF4
  7029                           prodl	equ	0xFF3
  7030                           postinc0	equ	0xFEE
  7031                           wreg	equ	0xFE8
  7032                           postdec1	equ	0xFE5
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _write_command *****************
  7042 ;; Defined at:
  7043 ;;		line 199 in file "ST7735_TFT.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;  cmd_            1    wreg     unsigned char 
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;  cmd_            1   16[COMRAM] unsigned char 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;		None               void
  7050 ;; Registers used:
  7051 ;;		wreg, status,2, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;Total ram usage:        1 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    2
  7064 ;; This function calls:
  7065 ;;		_spiwrite
  7066 ;; This function is called by:
  7067 ;;		_Rcmd1
  7068 ;;		_Rcmd2red
  7069 ;;		_Rcmd3
  7070 ;;		_setAddrWindow
  7071 ;;		_TFT_GreenTab_Initialize
  7072 ;;		_Bcmd
  7073 ;;		_setScrollDefinition
  7074 ;;		_Rcmd2green
  7075 ;;		_VerticalScroll
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text31
  7080  001A10                     __ptext31:
  7081                           	opt stack 0
  7082  001A10                     _write_command:
  7083                           	opt stack 24
  7084                           
  7085                           ;incstack = 0
  7086                           ;write_command@cmd_ stored from wreg
  7087  001A10  6E11               	movwf	write_command@cmd_,c
  7088                           
  7089                           ;ST7735_TFT.c: 201: PORTBbits.RB6 = 0;
  7090  001A12  9C81               	bcf	3969,6,c	;volatile
  7091                           
  7092                           ;ST7735_TFT.c: 203: PORTBbits.RB5 = 0;
  7093  001A14  9A81               	bcf	3969,5,c	;volatile
  7094                           
  7095                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7096  001A16  5011               	movf	write_command@cmd_,w,c
  7097  001A18  ECE3  F00C         	call	_spiwrite
  7098                           
  7099                           ;ST7735_TFT.c: 206: PORTBbits.RB6 = 1;
  7100  001A1C  8C81               	bsf	3969,6,c	;volatile
  7101  001A1E  0012               	return		;funcret
  7102  001A20                     __end_of_write_command:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           postinc0	equ	0xFEE
  7111                           wreg	equ	0xFE8
  7112                           postdec1	equ	0xFE5
  7113                           fsr1l	equ	0xFE1
  7114                           indf2	equ	0xFDF
  7115                           postinc2	equ	0xFDE
  7116                           postdec2	equ	0xFDD
  7117                           fsr2h	equ	0xFDA
  7118                           fsr2l	equ	0xFD9
  7119                           status	equ	0xFD8
  7120                           
  7121 ;; *************** function _spiwrite *****************
  7122 ;; Defined at:
  7123 ;;		line 190 in file "ST7735_TFT.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;  spidata         1    wreg     unsigned char 
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;  spidata         1   15[COMRAM] unsigned char 
  7128 ;;  x               1   14[COMRAM] unsigned char 
  7129 ;; Return value:  Size  Location     Type
  7130 ;;		None               void
  7131 ;; Registers used:
  7132 ;;		wreg
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;Total ram usage:        2 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    1
  7145 ;; This function calls:
  7146 ;;		Nothing
  7147 ;; This function is called by:
  7148 ;;		_write_command
  7149 ;;		_write_data
  7150 ;;		_drawFastVLine
  7151 ;;		_fillRectangle
  7152 ;;		_drawFastHLine
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           	psect	text32
  7157  0019C6                     __ptext32:
  7158                           	opt stack 0
  7159  0019C6                     _spiwrite:
  7160                           	opt stack 26
  7161                           
  7162                           ;incstack = 0
  7163                           ;spiwrite@spidata stored from wreg
  7164  0019C6  6E10               	movwf	spiwrite@spidata,c
  7165                           
  7166                           ;ST7735_TFT.c: 192: char x;
  7167                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  7168  0019C8  969E               	bcf	3998,3,c	;volatile
  7169                           
  7170                           ;ST7735_TFT.c: 194: x = SSPBUF;
  7171  0019CA  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  7172                           
  7173                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  7174  0019CE  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7175                           
  7176                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  7177  0019D2  D000               	goto	l419
  7178  0019D4                     l419:
  7179  0019D4  A0C7               	btfss	4039,0,c	;volatile
  7180  0019D6  D7FE               	goto	l419
  7181  0019D8  0012               	return		;funcret
  7182  0019DA                     __end_of_spiwrite:
  7183                           	opt stack 0
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           postinc0	equ	0xFEE
  7191                           wreg	equ	0xFE8
  7192                           postdec1	equ	0xFE5
  7193                           fsr1l	equ	0xFE1
  7194                           indf2	equ	0xFDF
  7195                           postinc2	equ	0xFDE
  7196                           postdec2	equ	0xFDD
  7197                           fsr2h	equ	0xFDA
  7198                           fsr2l	equ	0xFD9
  7199                           status	equ	0xFD8
  7200                           
  7201 ;; *************** function _LCD_Reset *****************
  7202 ;; Defined at:
  7203 ;;		line 218 in file "ST7735_TFT.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;		None
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;		None
  7208 ;; Return value:  Size  Location     Type
  7209 ;;		None               void
  7210 ;; Registers used:
  7211 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;Total ram usage:        0 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:    3
  7224 ;; This function calls:
  7225 ;;		_delay_ms
  7226 ;; This function is called by:
  7227 ;;		_Initialize_Screen
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           	psect	text33
  7232  0019EE                     __ptext33:
  7233                           	opt stack 0
  7234  0019EE                     _LCD_Reset:
  7235                           	opt stack 26
  7236                           
  7237                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 0;
  7238                           
  7239                           ;incstack = 0
  7240  0019EE  9282               	bcf	3970,1,c	;volatile
  7241                           
  7242                           ;ST7735_TFT.c: 221: delay_ms(100);
  7243  0019F0  0E00               	movlw	0
  7244  0019F2  6E16               	movwf	delay_ms@ms+1,c
  7245  0019F4  0E64               	movlw	100
  7246  0019F6  6E15               	movwf	delay_ms@ms,c
  7247  0019F8  EC00  F00B         	call	_delay_ms	;wreg free
  7248                           
  7249                           ;ST7735_TFT.c: 222: PORTCbits.RC1 = 1;
  7250  0019FC  8282               	bsf	3970,1,c	;volatile
  7251  0019FE  0012               	return		;funcret
  7252  001A00                     __end_of_LCD_Reset:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           prodh	equ	0xFF4
  7259                           prodl	equ	0xFF3
  7260                           postinc0	equ	0xFEE
  7261                           wreg	equ	0xFE8
  7262                           postdec1	equ	0xFE5
  7263                           fsr1l	equ	0xFE1
  7264                           indf2	equ	0xFDF
  7265                           postinc2	equ	0xFDE
  7266                           postdec2	equ	0xFDD
  7267                           fsr2h	equ	0xFDA
  7268                           fsr2l	equ	0xFD9
  7269                           status	equ	0xFD8
  7270                           
  7271 ;; *************** function _delay_ms *****************
  7272 ;; Defined at:
  7273 ;;		line 65 in file "ST7735_TFT.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  ms              2   20[COMRAM] int 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;  count           2   24[COMRAM] int 
  7278 ;; Return value:  Size  Location     Type
  7279 ;;		None               void
  7280 ;; Registers used:
  7281 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;Total ram usage:        6 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; Hardware stack levels required when called:    2
  7294 ;; This function calls:
  7295 ;;		___wmul
  7296 ;; This function is called by:
  7297 ;;		_LCD_Reset
  7298 ;;		_Rcmd1
  7299 ;;		_Rcmd3
  7300 ;;		_Bcmd
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           	psect	text34
  7305  001600                     __ptext34:
  7306                           	opt stack 0
  7307  001600                     _delay_ms:
  7308                           	opt stack 25
  7309                           
  7310                           ;ST7735_TFT.c: 71: int count;
  7311                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  7312                           
  7313                           ;incstack = 0
  7314  001600  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  7315  001604  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7316  001608  0E00               	movlw	0
  7317  00160A  6E12               	movwf	___wmul@multiplicand+1,c
  7318  00160C  0E7D               	movlw	125
  7319  00160E  6E11               	movwf	___wmul@multiplicand,c
  7320  001610  EC8C  F00C         	call	___wmul	;wreg free
  7321  001614  C00F  F019         	movff	?___wmul,delay_ms@count
  7322  001618  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  7323                           
  7324                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  7325  00161C  C019  F017         	movff	delay_ms@count,??_delay_ms
  7326  001620  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  7327  001624  1E17               	comf	??_delay_ms,f,c
  7328  001626  1E18               	comf	??_delay_ms+1,f,c
  7329  001628  4A17               	infsnz	??_delay_ms,f,c
  7330  00162A  2A18               	incf	??_delay_ms+1,f,c
  7331  00162C  0EFF               	movlw	255
  7332  00162E  2417               	addwf	??_delay_ms,w,c
  7333  001630  6E19               	movwf	delay_ms@count,c
  7334  001632  0EFF               	movlw	255
  7335  001634  2018               	addwfc	??_delay_ms+1,w,c
  7336  001636  6E1A               	movwf	delay_ms@count+1,c
  7337                           
  7338                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  7339  001638  0E03               	movlw	3
  7340  00163A  6ED5               	movwf	4053,c	;volatile
  7341                           
  7342                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  7343  00163C  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  7344                           
  7345                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  7346  001640  501A               	movf	delay_ms@count+1,w,c
  7347  001642  6ED7               	movwf	4055,c	;volatile
  7348                           
  7349                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  7350  001644  94F2               	bcf	intcon,2,c	;volatile
  7351                           
  7352                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  7353  001646  8ED5               	bsf	4053,7,c	;volatile
  7354                           
  7355                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  7356  001648  D000               	goto	l409
  7357  00164A                     l409:
  7358  00164A  A4F2               	btfss	intcon,2,c	;volatile
  7359  00164C  D7FE               	goto	l409
  7360                           
  7361                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  7362  00164E  9ED5               	bcf	4053,7,c	;volatile
  7363  001650  0012               	return		;funcret
  7364  001652                     __end_of_delay_ms:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon	equ	0xFF2
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           postdec1	equ	0xFE5
  7376                           fsr1l	equ	0xFE1
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           postdec2	equ	0xFDD
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function ___wmul *****************
  7385 ;; Defined at:
  7386 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  multiplier      2   14[COMRAM] unsigned int 
  7389 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  product         2   18[COMRAM] unsigned int 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  2   14[COMRAM] unsigned int 
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0, prodl, prodh
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7401 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;Total ram usage:        6 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    1
  7408 ;; This function calls:
  7409 ;;		Nothing
  7410 ;; This function is called by:
  7411 ;;		_get_RPM
  7412 ;;		_main
  7413 ;;		_delay_ms
  7414 ;;		_drawChar
  7415 ;;		_printf
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text35
  7420  001918                     __ptext35:
  7421                           	opt stack 0
  7422  001918                     ___wmul:
  7423                           	opt stack 28
  7424                           
  7425                           ;incstack = 0
  7426  001918  500F               	movf	___wmul@multiplier,w,c
  7427  00191A  0211               	mulwf	___wmul@multiplicand,c
  7428  00191C  CFF3 F013          	movff	prodl,___wmul@product
  7429  001920  CFF4 F014          	movff	prodh,___wmul@product+1
  7430  001924  500F               	movf	___wmul@multiplier,w,c
  7431  001926  0212               	mulwf	___wmul@multiplicand+1,c
  7432  001928  50F3               	movf	prodl,w,c
  7433  00192A  2614               	addwf	___wmul@product+1,f,c
  7434  00192C  5010               	movf	___wmul@multiplier+1,w,c
  7435  00192E  0211               	mulwf	___wmul@multiplicand,c
  7436  001930  50F3               	movf	prodl,w,c
  7437  001932  2614               	addwf	___wmul@product+1,f,c
  7438  001934  C013  F00F         	movff	___wmul@product,?___wmul
  7439  001938  C014  F010         	movff	___wmul@product+1,?___wmul+1
  7440  00193C  D000               	goto	l700
  7441  00193E                     l700:
  7442  00193E  0012               	return		;funcret
  7443  001940                     __end_of___wmul:
  7444                           	opt stack 0
  7445                           tblptru	equ	0xFF8
  7446                           tblptrh	equ	0xFF7
  7447                           tblptrl	equ	0xFF6
  7448                           tablat	equ	0xFF5
  7449                           prodh	equ	0xFF4
  7450                           prodl	equ	0xFF3
  7451                           intcon	equ	0xFF2
  7452                           postinc0	equ	0xFEE
  7453                           wreg	equ	0xFE8
  7454                           postdec1	equ	0xFE5
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _Do_Init *****************
  7464 ;; Defined at:
  7465 ;;		line 84 in file "Lab12_ex.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;		None
  7470 ;; Return value:  Size  Location     Type
  7471 ;;		None               void
  7472 ;; Registers used:
  7473 ;;		wreg, status,2, cstack
  7474 ;; Tracked objects:
  7475 ;;		On entry : 0/0
  7476 ;;		On exit  : 0/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;Total ram usage:        0 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    3
  7486 ;; This function calls:
  7487 ;;		_DS1621_Init
  7488 ;;		_I2C_Init
  7489 ;;		_init_INTERRUPT
  7490 ;;		_init_UART
  7491 ;; This function is called by:
  7492 ;;		_main
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text36
  7497  00173C                     __ptext36:
  7498                           	opt stack 0
  7499  00173C                     _Do_Init:
  7500                           	opt stack 27
  7501                           
  7502                           ;Lab12_ex.c: 86: init_UART();
  7503                           
  7504                           ;incstack = 0
  7505  00173C  ECED  F00C         	call	_init_UART	;wreg free
  7506                           
  7507                           ;Lab12_ex.c: 87: OSCCON=0x70;
  7508  001740  0E70               	movlw	112
  7509  001742  6ED3               	movwf	4051,c	;volatile
  7510                           
  7511                           ;Lab12_ex.c: 89: ADCON1=0x0F;
  7512  001744  0E0F               	movlw	15
  7513  001746  6EC1               	movwf	4033,c	;volatile
  7514                           
  7515                           ;Lab12_ex.c: 90: TRISA = 0x00;
  7516  001748  0E00               	movlw	0
  7517  00174A  6E92               	movwf	3986,c	;volatile
  7518                           
  7519                           ;Lab12_ex.c: 91: TRISB = 0x01;
  7520  00174C  0E01               	movlw	1
  7521  00174E  6E93               	movwf	3987,c	;volatile
  7522                           
  7523                           ;Lab12_ex.c: 92: TRISC = 0x01;
  7524  001750  0E01               	movlw	1
  7525  001752  6E94               	movwf	3988,c	;volatile
  7526                           
  7527                           ;Lab12_ex.c: 93: TRISD = 0x00;
  7528  001754  0E00               	movlw	0
  7529  001756  6E95               	movwf	3989,c	;volatile
  7530                           
  7531                           ;Lab12_ex.c: 94: TRISE = 0x00;
  7532  001758  0E00               	movlw	0
  7533  00175A  6E96               	movwf	3990,c	;volatile
  7534                           
  7535                           ;Lab12_ex.c: 96: RBPU=0;
  7536  00175C  9EF1               	bcf	intcon2,7,c	;volatile
  7537                           
  7538                           ;Lab12_ex.c: 97: TMR3L = 0x00;
  7539  00175E  0E00               	movlw	0
  7540  001760  6EB2               	movwf	4018,c	;volatile
  7541                           
  7542                           ;Lab12_ex.c: 98: T3CON = 0x03;
  7543  001762  0E03               	movlw	3
  7544  001764  6EB1               	movwf	4017,c	;volatile
  7545                           
  7546                           ;Lab12_ex.c: 99: I2C_Init(100000);
  7547  001766  0EA0               	movlw	160
  7548  001768  6E0F               	movwf	I2C_Init@c,c
  7549  00176A  0E86               	movlw	134
  7550  00176C  6E10               	movwf	I2C_Init@c+1,c
  7551  00176E  0E01               	movlw	1
  7552  001770  6E11               	movwf	I2C_Init@c+2,c
  7553  001772  0E00               	movlw	0
  7554  001774  6E12               	movwf	I2C_Init@c+3,c
  7555  001776  EC1D  F00D         	call	_I2C_Init	;wreg free
  7556                           
  7557                           ;Lab12_ex.c: 101: DS1621_Init();
  7558  00177A  EC2C  F00D         	call	_DS1621_Init	;wreg free
  7559                           
  7560                           ;Lab12_ex.c: 102: init_INTERRUPT();
  7561  00177E  EC2B  F00D         	call	_init_INTERRUPT	;wreg free
  7562                           
  7563                           ;Lab12_ex.c: 103: FAN = 0;
  7564  001782  0E00               	movlw	0
  7565  001784  6E4B               	movwf	_FAN,c
  7566  001786  0012               	return		;funcret
  7567  001788                     __end_of_Do_Init:
  7568                           	opt stack 0
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           intcon	equ	0xFF2
  7576                           intcon2	equ	0xFF1
  7577                           postinc0	equ	0xFEE
  7578                           wreg	equ	0xFE8
  7579                           postdec1	equ	0xFE5
  7580                           fsr1l	equ	0xFE1
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           postdec2	equ	0xFDD
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           
  7588 ;; *************** function _init_UART *****************
  7589 ;; Defined at:
  7590 ;;		line 78 in file "Lab12_ex.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;		None
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;		None
  7595 ;; Return value:  Size  Location     Type
  7596 ;;		None               void
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;Total ram usage:        0 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    2
  7611 ;; This function calls:
  7612 ;;		_OpenUSART
  7613 ;; This function is called by:
  7614 ;;		_Do_Init
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text37
  7619  0019DA                     __ptext37:
  7620                           	opt stack 0
  7621  0019DA                     _init_UART:
  7622                           	opt stack 27
  7623                           
  7624                           ;Lab12_ex.c: 80: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
  7625                           
  7626                           ;incstack = 0
  7627  0019DA  0E00               	movlw	0
  7628  0019DC  6E10               	movwf	OpenUSART@spbrg+1,c
  7629  0019DE  0E19               	movlw	25
  7630  0019E0  6E0F               	movwf	OpenUSART@spbrg,c
  7631  0019E2  0E3C               	movlw	60
  7632  0019E4  EC66  F00A         	call	_OpenUSART
  7633                           
  7634                           ;Lab12_ex.c: 81: OSCCON = 0x70;
  7635  0019E8  0E70               	movlw	112
  7636  0019EA  6ED3               	movwf	4051,c	;volatile
  7637  0019EC  0012               	return		;funcret
  7638  0019EE                     __end_of_init_UART:
  7639                           	opt stack 0
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           intcon2	equ	0xFF1
  7648                           postinc0	equ	0xFEE
  7649                           wreg	equ	0xFE8
  7650                           postdec1	equ	0xFE5
  7651                           fsr1l	equ	0xFE1
  7652                           indf2	equ	0xFDF
  7653                           postinc2	equ	0xFDE
  7654                           postdec2	equ	0xFDD
  7655                           fsr2h	equ	0xFDA
  7656                           fsr2l	equ	0xFD9
  7657                           status	equ	0xFD8
  7658                           
  7659 ;; *************** function _OpenUSART *****************
  7660 ;; Defined at:
  7661 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  config          1    wreg     unsigned char 
  7664 ;;  spbrg           2   14[COMRAM] unsigned int 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  config          1   16[COMRAM] unsigned char 
  7667 ;; Return value:  Size  Location     Type
  7668 ;;		None               void
  7669 ;; Registers used:
  7670 ;;		wreg, status,2
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;Total ram usage:        3 bytes
  7681 ;; Hardware stack levels used:    1
  7682 ;; Hardware stack levels required when called:    1
  7683 ;; This function calls:
  7684 ;;		Nothing
  7685 ;; This function is called by:
  7686 ;;		_init_UART
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text38
  7691  0014CC                     __ptext38:
  7692                           	opt stack 0
  7693  0014CC                     _OpenUSART:
  7694                           	opt stack 27
  7695                           
  7696                           ;incstack = 0
  7697                           ;OpenUSART@config stored from wreg
  7698  0014CC  6E11               	movwf	OpenUSART@config,c
  7699  0014CE  0E00               	movlw	0
  7700  0014D0  6EAC               	movwf	4012,c	;volatile
  7701  0014D2  0E00               	movlw	0
  7702  0014D4  6EAB               	movwf	4011,c	;volatile
  7703  0014D6  A011               	btfss	OpenUSART@config,0,c
  7704  0014D8  D002               	goto	l2950
  7705  0014DA  88AC               	bsf	4012,4,c	;volatile
  7706  0014DC  D000               	goto	l2950
  7707  0014DE                     l2950:
  7708  0014DE  A211               	btfss	OpenUSART@config,1,c
  7709  0014E0  D003               	goto	l2954
  7710  0014E2  8CAC               	bsf	4012,6,c	;volatile
  7711  0014E4  8CAB               	bsf	4011,6,c	;volatile
  7712  0014E6  D000               	goto	l2954
  7713  0014E8                     l2954:
  7714  0014E8  A411               	btfss	OpenUSART@config,2,c
  7715  0014EA  D002               	goto	l2958
  7716  0014EC  8EAC               	bsf	4012,7,c	;volatile
  7717  0014EE  D000               	goto	l2958
  7718  0014F0                     l2958:
  7719  0014F0  A611               	btfss	OpenUSART@config,3,c
  7720  0014F2  D002               	goto	l688
  7721  0014F4  88AB               	bsf	4011,4,c	;volatile
  7722  0014F6  D002               	goto	l2962
  7723  0014F8                     l688:
  7724  0014F8  8AAB               	bsf	4011,5,c	;volatile
  7725  0014FA  D000               	goto	l2962
  7726  0014FC                     l2962:
  7727  0014FC  B811               	btfsc	OpenUSART@config,4,c
  7728  0014FE  84AC               	bsf	4012,2,c	;volatile
  7729  001500  989E               	bcf	3998,4,c	;volatile
  7730  001502  AA11               	btfss	OpenUSART@config,5,c
  7731  001504  D002               	goto	l2970
  7732  001506  86AB               	bsf	4011,3,c	;volatile
  7733  001508  D000               	goto	l2970
  7734  00150A                     l2970:
  7735  00150A  AC11               	btfss	OpenUSART@config,6,c
  7736  00150C  D002               	goto	l692
  7737  00150E  8A9D               	bsf	3997,5,c	;volatile
  7738  001510  D001               	goto	l693
  7739  001512                     l692:
  7740  001512  9A9D               	bcf	3997,5,c	;volatile
  7741  001514                     l693:
  7742  001514  9A9E               	bcf	3998,5,c	;volatile
  7743  001516  AE11               	btfss	OpenUSART@config,7,c
  7744  001518  D002               	goto	l694
  7745  00151A  889D               	bsf	3997,4,c	;volatile
  7746  00151C  D001               	goto	l695
  7747  00151E                     l694:
  7748  00151E  989D               	bcf	3997,4,c	;volatile
  7749  001520                     l695:
  7750  001520  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7751  001524  5010               	movf	OpenUSART@spbrg+1,w,c
  7752  001526  6EB0               	movwf	4016,c	;volatile
  7753  001528  8AAC               	bsf	4012,5,c	;volatile
  7754  00152A  8EAB               	bsf	4011,7,c	;volatile
  7755  00152C  9C94               	bcf	3988,6,c	;volatile
  7756  00152E  8E94               	bsf	3988,7,c	;volatile
  7757  001530  B8AC               	btfsc	4012,4,c	;volatile
  7758  001532  BEAC               	btfsc	4012,7,c	;volatile
  7759  001534  D002               	goto	l697
  7760  001536  8C94               	bsf	3988,6,c	;volatile
  7761  001538  D000               	goto	l697
  7762  00153A                     l697:
  7763  00153A  0012               	return		;funcret
  7764  00153C                     __end_of_OpenUSART:
  7765                           	opt stack 0
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           intcon2	equ	0xFF1
  7774                           postinc0	equ	0xFEE
  7775                           wreg	equ	0xFE8
  7776                           postdec1	equ	0xFE5
  7777                           fsr1l	equ	0xFE1
  7778                           indf2	equ	0xFDF
  7779                           postinc2	equ	0xFDE
  7780                           postdec2	equ	0xFDD
  7781                           fsr2h	equ	0xFDA
  7782                           fsr2l	equ	0xFD9
  7783                           status	equ	0xFD8
  7784                           
  7785 ;; *************** function _init_INTERRUPT *****************
  7786 ;; Defined at:
  7787 ;;		line 15 in file "Interrupt.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;		None
  7792 ;; Return value:  Size  Location     Type
  7793 ;;		None               void
  7794 ;; Registers used:
  7795 ;;		None
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;Total ram usage:        0 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    1
  7808 ;; This function calls:
  7809 ;;		Nothing
  7810 ;; This function is called by:
  7811 ;;		_Do_Init
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text39
  7816  001A56                     __ptext39:
  7817                           	opt stack 0
  7818  001A56                     _init_INTERRUPT:
  7819                           	opt stack 28
  7820                           
  7821                           ;incstack = 0
  7822  001A56  0012               	return		;funcret
  7823  001A58                     __end_of_init_INTERRUPT:
  7824                           	opt stack 0
  7825                           tblptru	equ	0xFF8
  7826                           tblptrh	equ	0xFF7
  7827                           tblptrl	equ	0xFF6
  7828                           tablat	equ	0xFF5
  7829                           prodh	equ	0xFF4
  7830                           prodl	equ	0xFF3
  7831                           intcon	equ	0xFF2
  7832                           intcon2	equ	0xFF1
  7833                           postinc0	equ	0xFEE
  7834                           wreg	equ	0xFE8
  7835                           postdec1	equ	0xFE5
  7836                           fsr1l	equ	0xFE1
  7837                           indf2	equ	0xFDF
  7838                           postinc2	equ	0xFDE
  7839                           postdec2	equ	0xFDD
  7840                           fsr2h	equ	0xFDA
  7841                           fsr2l	equ	0xFD9
  7842                           status	equ	0xFD8
  7843                           
  7844 ;; *************** function _I2C_Init *****************
  7845 ;; Defined at:
  7846 ;;		line 14 in file "I2C_Soft.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;  c               4   14[COMRAM] unsigned long 
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;		None               void
  7853 ;; Registers used:
  7854 ;;		wreg, cstack
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7864 ;;Total ram usage:        4 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    2
  7867 ;; This function calls:
  7868 ;;		_i2cHighScl
  7869 ;;		_i2cHighSda
  7870 ;; This function is called by:
  7871 ;;		_Do_Init
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text40
  7876  001A3A                     __ptext40:
  7877                           	opt stack 0
  7878  001A3A                     _I2C_Init:
  7879                           	opt stack 27
  7880                           
  7881                           ;I2C_Soft.c: 16: i2cHighScl();
  7882                           
  7883                           ;incstack = 0
  7884  001A3A  EC17  F00D         	call	_i2cHighScl	;wreg free
  7885                           
  7886                           ;I2C_Soft.c: 17: i2cHighSda();
  7887  001A3E  EC27  F00D         	call	_i2cHighSda	;wreg free
  7888  001A42  0012               	return		;funcret
  7889  001A44                     __end_of_I2C_Init:
  7890                           	opt stack 0
  7891                           tblptru	equ	0xFF8
  7892                           tblptrh	equ	0xFF7
  7893                           tblptrl	equ	0xFF6
  7894                           tablat	equ	0xFF5
  7895                           prodh	equ	0xFF4
  7896                           prodl	equ	0xFF3
  7897                           intcon	equ	0xFF2
  7898                           intcon2	equ	0xFF1
  7899                           postinc0	equ	0xFEE
  7900                           wreg	equ	0xFE8
  7901                           postdec1	equ	0xFE5
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           fsr2h	equ	0xFDA
  7907                           fsr2l	equ	0xFD9
  7908                           status	equ	0xFD8
  7909                           
  7910 ;; *************** function _i2cHighSda *****************
  7911 ;; Defined at:
  7912 ;;		line 96 in file "I2C_Soft.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;		None
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;		None
  7917 ;; Return value:  Size  Location     Type
  7918 ;;		None               void
  7919 ;; Registers used:
  7920 ;;		None
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;Total ram usage:        0 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    1
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_I2C_Init
  7937 ;;		_I2C_Read
  7938 ;;		_I2C_Write
  7939 ;;		_i2cAck
  7940 ;;		_I2C_Start
  7941 ;;		_I2C_ReStart
  7942 ;;		_I2C_Stop
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text41
  7947  001A4E                     __ptext41:
  7948                           	opt stack 0
  7949  001A4E                     _i2cHighSda:
  7950                           	opt stack 27
  7951                           
  7952                           ;I2C_Soft.c: 98: TRISDbits.RD7 = 1;
  7953                           
  7954                           ;incstack = 0
  7955  001A4E  8E95               	bsf	3989,7,c	;volatile
  7956                           
  7957                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7958  001A50  D000               	nop2		;2 cycle nop
  7959  001A52  D000               	nop2		;2 cycle nop
  7960  001A54  0012               	return		;funcret
  7961  001A56                     __end_of_i2cHighSda:
  7962                           	opt stack 0
  7963                           tblptru	equ	0xFF8
  7964                           tblptrh	equ	0xFF7
  7965                           tblptrl	equ	0xFF6
  7966                           tablat	equ	0xFF5
  7967                           prodh	equ	0xFF4
  7968                           prodl	equ	0xFF3
  7969                           intcon	equ	0xFF2
  7970                           intcon2	equ	0xFF1
  7971                           postinc0	equ	0xFEE
  7972                           wreg	equ	0xFE8
  7973                           postdec1	equ	0xFE5
  7974                           fsr1l	equ	0xFE1
  7975                           indf2	equ	0xFDF
  7976                           postinc2	equ	0xFDE
  7977                           postdec2	equ	0xFDD
  7978                           fsr2h	equ	0xFDA
  7979                           fsr2l	equ	0xFD9
  7980                           status	equ	0xFD8
  7981                           
  7982 ;; *************** function _i2cHighScl *****************
  7983 ;; Defined at:
  7984 ;;		line 109 in file "I2C_Soft.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;		None               void
  7991 ;; Registers used:
  7992 ;;		wreg
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;Total ram usage:        0 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    1
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_I2C_Init
  8009 ;;		_I2C_Read
  8010 ;;		_I2C_Write
  8011 ;;		_i2cNack
  8012 ;;		_i2cAck
  8013 ;;		_I2C_Start
  8014 ;;		_I2C_ReStart
  8015 ;;		_I2C_Stop
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text42
  8020  001A2E                     __ptext42:
  8021                           	opt stack 0
  8022  001A2E                     _i2cHighScl:
  8023                           	opt stack 27
  8024                           
  8025                           ;I2C_Soft.c: 111: TRISDbits.RD6 = 1;
  8026                           
  8027                           ;incstack = 0
  8028  001A2E  8C95               	bsf	3989,6,c	;volatile
  8029                           
  8030                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8031  001A30  0E06               	movlw	6
  8032  001A32                     u4167:
  8033  001A32  2EE8               	decfsz	wreg,f,c
  8034  001A34  D7FE               	goto	u4167
  8035  001A36  D000               	nop2		;nop
  8036  001A38  0012               	return		;funcret
  8037  001A3A                     __end_of_i2cHighScl:
  8038                           	opt stack 0
  8039                           tblptru	equ	0xFF8
  8040                           tblptrh	equ	0xFF7
  8041                           tblptrl	equ	0xFF6
  8042                           tablat	equ	0xFF5
  8043                           prodh	equ	0xFF4
  8044                           prodl	equ	0xFF3
  8045                           intcon	equ	0xFF2
  8046                           intcon2	equ	0xFF1
  8047                           postinc0	equ	0xFEE
  8048                           wreg	equ	0xFE8
  8049                           postdec1	equ	0xFE5
  8050                           fsr1l	equ	0xFE1
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function _DS1621_Init *****************
  8059 ;; Defined at:
  8060 ;;		line 21 in file "I2C_Support.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;		None               void
  8067 ;; Registers used:
  8068 ;;		None
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;Total ram usage:        0 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    1
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		_Do_Init
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           	psect	text43
  8089  001A58                     __ptext43:
  8090                           	opt stack 0
  8091  001A58                     _DS1621_Init:
  8092                           	opt stack 28
  8093                           
  8094                           ;incstack = 0
  8095  001A58  0012               	return		;funcret
  8096  001A5A                     __end_of_DS1621_Init:
  8097                           	opt stack 0
  8098                           tblptru	equ	0xFF8
  8099                           tblptrh	equ	0xFF7
  8100                           tblptrl	equ	0xFF6
  8101                           tablat	equ	0xFF5
  8102                           prodh	equ	0xFF4
  8103                           prodl	equ	0xFF3
  8104                           intcon	equ	0xFF2
  8105                           intcon2	equ	0xFF1
  8106                           postinc0	equ	0xFEE
  8107                           wreg	equ	0xFE8
  8108                           postdec1	equ	0xFE5
  8109                           fsr1l	equ	0xFE1
  8110                           indf2	equ	0xFDF
  8111                           postinc2	equ	0xFDE
  8112                           postdec2	equ	0xFDD
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _DS3231_Read_Time *****************
  8118 ;; Defined at:
  8119 ;;		line 31 in file "I2C_Support.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;		None
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;		None
  8124 ;; Return value:  Size  Location     Type
  8125 ;;		None               void
  8126 ;; Registers used:
  8127 ;;		None
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;Total ram usage:        0 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    1
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_main
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           	psect	text44
  8148  001A5A                     __ptext44:
  8149                           	opt stack 0
  8150  001A5A                     _DS3231_Read_Time:
  8151                           	opt stack 29
  8152                           
  8153                           ;incstack = 0
  8154  001A5A  0012               	return		;funcret
  8155  001A5C                     __end_of_DS3231_Read_Time:
  8156                           	opt stack 0
  8157                           tblptru	equ	0xFF8
  8158                           tblptrh	equ	0xFF7
  8159                           tblptrl	equ	0xFF6
  8160                           tablat	equ	0xFF5
  8161                           prodh	equ	0xFF4
  8162                           prodl	equ	0xFF3
  8163                           intcon	equ	0xFF2
  8164                           intcon2	equ	0xFF1
  8165                           postinc0	equ	0xFEE
  8166                           wreg	equ	0xFE8
  8167                           postdec1	equ	0xFE5
  8168                           fsr1l	equ	0xFE1
  8169                           indf2	equ	0xFDF
  8170                           postinc2	equ	0xFDE
  8171                           postdec2	equ	0xFDD
  8172                           fsr2h	equ	0xFDA
  8173                           fsr2l	equ	0xFD9
  8174                           status	equ	0xFD8
  8175                           
  8176 ;; *************** function _DS1621_Read_Temp *****************
  8177 ;; Defined at:
  8178 ;;		line 26 in file "I2C_Support.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;		None
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;		None
  8183 ;; Return value:  Size  Location     Type
  8184 ;;                  2   14[COMRAM] int 
  8185 ;; Registers used:
  8186 ;;		None
  8187 ;; Tracked objects:
  8188 ;;		On entry : 0/0
  8189 ;;		On exit  : 0/0
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8192 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;Total ram usage:        2 bytes
  8197 ;; Hardware stack levels used:    1
  8198 ;; Hardware stack levels required when called:    1
  8199 ;; This function calls:
  8200 ;;		Nothing
  8201 ;; This function is called by:
  8202 ;;		_main
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           	psect	text45
  8207  001A5C                     __ptext45:
  8208                           	opt stack 0
  8209  001A5C                     _DS1621_Read_Temp:
  8210                           	opt stack 29
  8211                           
  8212                           ;incstack = 0
  8213  001A5C  0012               	return		;funcret
  8214  001A5E                     __end_of_DS1621_Read_Temp:
  8215                           	opt stack 0
  8216                           tblptru	equ	0xFF8
  8217                           tblptrh	equ	0xFF7
  8218                           tblptrl	equ	0xFF6
  8219                           tablat	equ	0xFF5
  8220                           prodh	equ	0xFF4
  8221                           prodl	equ	0xFF3
  8222                           intcon	equ	0xFF2
  8223                           intcon2	equ	0xFF1
  8224                           postinc0	equ	0xFEE
  8225                           wreg	equ	0xFE8
  8226                           postdec1	equ	0xFE5
  8227                           fsr1l	equ	0xFE1
  8228                           indf2	equ	0xFDF
  8229                           postinc2	equ	0xFDE
  8230                           postdec2	equ	0xFDD
  8231                           fsr2h	equ	0xFDA
  8232                           fsr2l	equ	0xFD9
  8233                           status	equ	0xFD8
  8234                           
  8235 ;; *************** function _chkisr *****************
  8236 ;; Defined at:
  8237 ;;		line 20 in file "Interrupt.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;		None
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;		None
  8242 ;; Return value:  Size  Location     Type
  8243 ;;		None               void
  8244 ;; Registers used:
  8245 ;;		None
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8253 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;Total ram usage:       14 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; This function calls:
  8258 ;;		Nothing
  8259 ;; This function is called by:
  8260 ;;		Interrupt level 2
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           	psect	intcode
  8265  000008                     __pintcode:
  8266                           	opt stack 0
  8267  000008                     _chkisr:
  8268                           	opt stack 22
  8269                           
  8270                           ;incstack = 0
  8271  000008  CFFA F001          	movff	pclath,??_chkisr
  8272  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
  8273  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
  8274  000014  ED9E  F00A         	call	int_func,f	;refresh shadow registers
  8275                           pclatu	equ	0xFFB
  8276                           pclath	equ	0xFFA
  8277                           tblptru	equ	0xFF8
  8278                           tblptrh	equ	0xFF7
  8279                           tblptrl	equ	0xFF6
  8280                           tablat	equ	0xFF5
  8281                           prodh	equ	0xFF4
  8282                           prodl	equ	0xFF3
  8283                           intcon	equ	0xFF2
  8284                           intcon2	equ	0xFF1
  8285                           postinc0	equ	0xFEE
  8286                           fsr0l	equ	0xFE9
  8287                           wreg	equ	0xFE8
  8288                           postdec1	equ	0xFE5
  8289                           fsr1l	equ	0xFE1
  8290                           indf2	equ	0xFDF
  8291                           postinc2	equ	0xFDE
  8292                           postdec2	equ	0xFDD
  8293                           fsr2h	equ	0xFDA
  8294                           fsr2l	equ	0xFD9
  8295                           status	equ	0xFD8
  8296                           
  8297                           	psect	intcode_body
  8298  00153C                     __pintcode_body:
  8299                           	opt stack 22
  8300  00153C                     int_func:
  8301                           	opt stack 22
  8302  00153C  0006               	pop		; remove dummy address from shadow register refresh
  8303  00153E  CFEA F004          	movff	fsr0h,??_chkisr+3
  8304  001542  CFE1 F005          	movff	fsr1l,??_chkisr+4
  8305  001546  CFE2 F006          	movff	fsr1h,??_chkisr+5
  8306  00154A  CFD9 F007          	movff	fsr2l,??_chkisr+6
  8307  00154E  CFDA F008          	movff	fsr2h,??_chkisr+7
  8308  001552  CFF3 F009          	movff	prodl,??_chkisr+8
  8309  001556  CFF4 F00A          	movff	prodh,??_chkisr+9
  8310  00155A  CFF6 F00B          	movff	tblptrl,??_chkisr+10
  8311  00155E  CFF7 F00C          	movff	tblptrh,??_chkisr+11
  8312  001562  CFF8 F00D          	movff	tblptru,??_chkisr+12
  8313  001566  CFF5 F00E          	movff	tablat,??_chkisr+13
  8314  00156A  C00E  FFF5         	movff	??_chkisr+13,tablat
  8315  00156E  C00D  FFF8         	movff	??_chkisr+12,tblptru
  8316  001572  C00C  FFF7         	movff	??_chkisr+11,tblptrh
  8317  001576  C00B  FFF6         	movff	??_chkisr+10,tblptrl
  8318  00157A  C00A  FFF4         	movff	??_chkisr+9,prodh
  8319  00157E  C009  FFF3         	movff	??_chkisr+8,prodl
  8320  001582  C008  FFDA         	movff	??_chkisr+7,fsr2h
  8321  001586  C007  FFD9         	movff	??_chkisr+6,fsr2l
  8322  00158A  C006  FFE2         	movff	??_chkisr+5,fsr1h
  8323  00158E  C005  FFE1         	movff	??_chkisr+4,fsr1l
  8324  001592  C004  FFEA         	movff	??_chkisr+3,fsr0h
  8325  001596  C003  FFE9         	movff	??_chkisr+2,fsr0l
  8326  00159A  C002  FFFB         	movff	??_chkisr+1,pclatu
  8327  00159E  C001  FFFA         	movff	??_chkisr,pclath
  8328  0015A2  0011               	retfie		f
  8329  0015A4                     __end_of_chkisr:
  8330                           	opt stack 0
  8331                           pclatu	equ	0xFFB
  8332                           pclath	equ	0xFFA
  8333                           tblptru	equ	0xFF8
  8334                           tblptrh	equ	0xFF7
  8335                           tblptrl	equ	0xFF6
  8336                           tablat	equ	0xFF5
  8337                           prodh	equ	0xFF4
  8338                           prodl	equ	0xFF3
  8339                           intcon	equ	0xFF2
  8340                           intcon2	equ	0xFF1
  8341                           postinc0	equ	0xFEE
  8342                           fsr0h	equ	0xFEA
  8343                           fsr0l	equ	0xFE9
  8344                           wreg	equ	0xFE8
  8345                           postdec1	equ	0xFE5
  8346                           fsr1h	equ	0xFE2
  8347                           fsr1l	equ	0xFE1
  8348                           indf2	equ	0xFDF
  8349                           postinc2	equ	0xFDE
  8350                           postdec2	equ	0xFDD
  8351                           fsr2h	equ	0xFDA
  8352                           fsr2l	equ	0xFD9
  8353                           status	equ	0xFD8
  8354                           pclatu	equ	0xFFB
  8355                           pclath	equ	0xFFA
  8356                           tblptru	equ	0xFF8
  8357                           tblptrh	equ	0xFF7
  8358                           tblptrl	equ	0xFF6
  8359                           tablat	equ	0xFF5
  8360                           prodh	equ	0xFF4
  8361                           prodl	equ	0xFF3
  8362                           intcon	equ	0xFF2
  8363                           intcon2	equ	0xFF1
  8364                           postinc0	equ	0xFEE
  8365                           fsr0h	equ	0xFEA
  8366                           fsr0l	equ	0xFE9
  8367                           wreg	equ	0xFE8
  8368                           postdec1	equ	0xFE5
  8369                           fsr1h	equ	0xFE2
  8370                           fsr1l	equ	0xFE1
  8371                           indf2	equ	0xFDF
  8372                           postinc2	equ	0xFDE
  8373                           postdec2	equ	0xFDD
  8374                           fsr2h	equ	0xFDA
  8375                           fsr2l	equ	0xFD9
  8376                           status	equ	0xFD8
  8377                           
  8378                           	psect	rparam
  8379  0000                     pclatu	equ	0xFFB
  8380                           pclath	equ	0xFFA
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           intcon	equ	0xFF2
  8388                           intcon2	equ	0xFF1
  8389                           postinc0	equ	0xFEE
  8390                           fsr0h	equ	0xFEA
  8391                           fsr0l	equ	0xFE9
  8392                           wreg	equ	0xFE8
  8393                           postdec1	equ	0xFE5
  8394                           fsr1h	equ	0xFE2
  8395                           fsr1l	equ	0xFE1
  8396                           indf2	equ	0xFDF
  8397                           postinc2	equ	0xFDE
  8398                           postdec2	equ	0xFDD
  8399                           fsr2h	equ	0xFDA
  8400                           fsr2l	equ	0xFD9
  8401                           status	equ	0xFD8


Data Sizes:
    Strings     157
    Constant    493
    Data        122
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     56     112
    BANK0           128     15     120
    BANK1           256      0      33
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(COMRAM[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(COMRAM[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[3]), 
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[2]), 
		 -> STR_9(CODE[3]), STR_8(CODE[13]), STR_7(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_6(CODE[20]), STR_5(CODE[21]), STR_4(CODE[30]), STR_3(CODE[20]), 
		 -> STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(COMRAM[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    ___awdiv->___wmul
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_I2C_Init
    _init_UART->_OpenUSART

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   51275
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                            _Do_Init
                  _Initialize_Screen
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3705
                                             26 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    2430
                                             28 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1254
                                             20 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                              0 BANK0      9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             14 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             26 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             41 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34384
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1241
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17141
                                             54 COMRAM     2     2      0
                                              0 BANK0     15     7      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   11034
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4884
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2312
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2182
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2182
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1142
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     326
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             14 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     2     0      2       0
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
   _DS3231_Read_Time
   _Do_Init
     _DS1621_Init
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      21       7       12.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      78       5       93.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     38      70       1       88.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     109      34        0.0%
DATA                 0      0     109       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 28 13:31:18 2022

                     drawCircle@f 0028                       drawCircle@r 001E  
                     drawCircle@x 002A                       drawCircle@y 002C  
                     _SSPSTATbits 000FC7                      drawCircle@x0 001A  
                    drawCircle@y0 001C                                l13 180E  
                    ___awdiv@sign 001A               ___wmul@multiplicand 0011  
                             l301 1A24                               l409 164A  
                             l522 118E                               l419 19D4  
                             l523 10FA                               l700 193E  
                             l533 0898                               l525 116A  
                             l526 118C                               l463 18EC  
                             l627 011C                               l469 1448  
                             l485 0AD8                               l494 0A2E  
                             l487 09B2                               l664 0374  
                             l692 1512                               l693 1514  
                             l694 151E                               l695 1520  
                             l688 14F8                               _FAN 004B  
                             l697 153A                               l893 13C0  
                             _PR2 000FCB                               _day 0055  
                             _dow 0056                               _nbr 0041  
                             _rpm 0045                               _rps 0047  
                             _txt 0049                               wreg 000FE8  
                      _Fan_SW_Txt 00C8                   ??_fillRectangle 001B  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 18EE  
                    ___ftdiv@cntr 0033                      ___ftdiv@sign 0038  
                    __CFG_WDT$OFF 000000                              l1008 132A  
                            l1019 1302                              l1131 1986  
                            l1116 0FD0                    drawFastVLine@h 0017  
                            l1223 15F6                              l1080 10B2  
                            l1233 1732                              l1083 107E  
                            l1157 1964                              l1262 184C  
                            l1095 0DF8                    drawFastVLine@x 0020  
                  drawFastVLine@y 0016                              l5010 0206  
                            l5002 01D8                              l3260 1896  
                            l5004 01EA                              l3262 18A0  
                            l5030 0274                              l5022 024C  
                            l5014 022A                              l5040 02A8  
                            l5024 0254                              l5016 0234  
                            l4322 140A                              l5042 02EC  
                            l5050 0344                              l5034 028C  
                            l4332 1430                              l4500 0A50  
                            l3356 197E                              l5052 034C  
                            l5028 026C                              l5140 0700  
                            l4334 143E                              l4318 13D2  
                            l4510 0ACC                              l4502 0A78  
                            l3462 1342                              l5038 02A0  
                            l5054 0358                              l4360 18CE  
                            l5048 0332                              l4522 181A  
                            l4602 131C                              l3474 136A  
                            l3490 13A6                              l3554 15BA  
                            l5146 070E                              l4372 17AE  
                            l4508 0AA4                              l4516 0AD4  
                            l4524 1820                              l4540 1132  
                            l3476 1374                              l3468 1354  
                            l3556 15C4                              l2950 14DE  
                            l4470 0994                              l4534 10C4  
                            l3494 13B6                              l3486 139A  
                            l3478 137C                              l3566 15EA  
                            l3558 15CC                              l3582 1726  
                            l3574 16FE                              l4712 096E  
                            l4368 1792                              l4480 09B6  
                            l4560 1178                              l4552 1160  
                            l4720 0FF0                              l4800 0DBC  
                            l3576 1708                              l2970 150A  
                            l2962 14FC                              l2954 14E8  
                            l4490 0A22                              l4474 09A0  
                            l4650 0B5A                              l4722 100A  
                            l3578 1710                              l4492 0A26  
                            l4484 09BE                              l4556 116E  
                            l4580 1292                              l4804 0DD2  
                            l2958 14F0                              l4478 09AE  
                            l4662 0BD4                              l4654 0B7C  
                            l4638 0B06                              l4566 1188  
                            l4590 12F6                              l4582 12B2  
                            l4574 1276                              l4726 1018  
                            l4814 0F0A                              l4488 09EE  
                            l4664 0BDC                              l4832 0F64  
                            l4586 12CA                              l4578 1286  
                            l4746 1058                              l4850 0FBE  
                            l4842 0F8E                              l4684 087E  
                            l4596 130A                              l4588 12EA  
                            l4756 108C                              l4772 0D48  
                            l4844 0F9C                              l4836 0F74  
                            l4940 0064                              l4932 0036  
                            l4790 0D8E                              l4766 0D20  
                            l4838 0F7A                              l4846 0FA6  
                            l4934 0044                              l4768 0D3A  
                            l4952 00E6                              l4944 0082  
                            l4928 0026                              l4794 0DA4  
                            l4786 0D7C                              l4938 004E  
                            l4796 0DAA                              l4876 1232  
                            l4972 0164                              l4956 00EE  
                            l4982 0198                              l4974 0168  
                            l4992 01AE                              l4968 014A  
                            l4986 019E                              l4978 0174  
                            l4996 01D2                              l4988 01A2  
                            STR_1 FF62                              STR_2 FF96  
                            STR_3 FFAB                              STR_4 FF62  
                            STR_5 FF96                              STR_6 FFAB  
                            STR_7 FF80                              STR_8 FFD0  
                            STR_9 FFF9                              u3020 1400  
                            u3400 0B32                              u3250 10F2  
                            u3180 0A86                              u3260 1128  
                            u3600 0F28                              u3521 0D12  
                            u3541 0D30                              u3605 0F20  
                            u4167 1A32                              u3471 0FE2  
                            u3491 1000                              u3581 0EFC  
                            _RBPU 007F8F                              _TRMT 007D61  
                    _DS1621_tempC 003B                      _DS1621_tempF 003D  
                            _date 00AD                              _main 0628  
                            _font FD75                      ___ftpack@arg 000F  
                            _hour 0059                      ___ftpack@exp 0012  
                __end_of_I2C_Init 1A44                              _time 00B6  
                            _year 0067                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 006C                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                 __end_of_Do_Init 1788                   ??_drawFastVLine 001A  
                    ___ftmul@cntr 0028                      ___param_bank 000010  
                    ___ftmul@sign 0029                      ___fttol@exp1 001D  
                    ___fttol@lval 0019                   ??_do_update_pwm 00E9  
                 drawFastVLine@hi 001E                   drawFastVLine@lo 001F  
                           ?_main 0001                   __end_of___awdiv 13C2  
                 drawCircle@ddF_x 0024                             STR_10 FFF3  
                 drawCircle@ddF_y 0026                             STR_11 FFE3  
                           STR_12 FFE8                             STR_13 FFDD  
                           STR_14 FFFC                             STR_15 FFF5  
                           STR_16 FFED                             STR_17 FFF1  
                           STR_18 FFBF                   __end_of___ftdiv 10B4  
                 __end_of___ftmul 0DFA                             _T0CON 000FD5  
                 ___awdiv@divisor 0017                   __end_of___fttol 0FD2  
                           _T2CON 000FCA                             _T3CON 000FB1  
                 __end_of___lwdiv 1600                   __end_of___lwmod 173C  
                 ___awdiv@counter 0019                   drawCircle@color 0020  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _TMR3L 000FB2  
                           _SPBRG 000FAF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                 __end_of_get_RPM 1810                             _Rcmd1 0BF2  
                           _Rcmd3 0DFA                        _i2cHighSda 1A4E  
                      _i2cHighScl 1A2E                   __end_of_dpowers FF5A  
                           _font2 FE74                             _found 0058  
                 __end_of_isdigit 1988                             _tempC 006D  
                           _tempF 00CC                             _month 005B  
                   ___ftpack@sign 0013                             _putch 1A20  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8                 ?_DS1621_Read_Temp 000F  
                 write_data@data_ 0011                ??_DS1621_Read_Temp 0011  
                 __initialization 144A                      __end_of_main 07D6  
                    __end_of_font FE74                  __end_of_Rcmd2red 188C  
                          ??_main 0039                     ___fttol@sign1 0018  
                   __activetblptr 000002                 ?_DS3231_Read_Time 0001  
               __end_of_LCD_Reset 1A00         ??_TFT_GreenTab_Initialize 001B  
              ??_DS3231_Read_Time 000F                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001           __size_of_init_INTERRUPT 0002  
                       I2C_Init@c 000F                            _ADCON1 000FC1  
                          _CCPR1L 000FBE                  ___awdiv@dividend 0015  
                          ?_putch 0001                  __end_of___ftpack 132C  
                __end_of___lbtoft 1966                            _DC_Txt 00C4  
                       ??_Do_Init 0013                            _OSCCON 000FD3  
                          _SPBRGH 000FB0                            _SSPBUF 000FC9  
                    _Alarm_SW_Txt 00A9                  __end_of_delay_ms 1652  
                __end_of_fillRect 17D2                  __end_of_drawChar 0ADA  
              __size_of_OpenUSART 0070                            ___wmul 1918  
                       ??___awdiv 0019                  __end_of_drawtext 0BF2  
                       ??___ftdiv 0030                         ??___ftmul 0021  
                       ??___fttol 0013                            _chkisr 0008  
                       ??___lwdiv 0013                            _array1 00D0  
                       ??___lwmod 001A                            _buffer 0100  
                          _nec_ok 0043                            clear_0 1450  
                          clear_1 145C                  ___awdiv@quotient 001B  
                          _minute 005A                            _second 005D  
                       ??_get_RPM 001F                            _printf 001C  
                    drawtext@size 00F0                            _strcpy 188C  
                          _strlen 1810             ___ftmul@f3_as_product 0025  
                    __pdataCOMRAM 0068                         ??_isdigit 000F  
                       ?_I2C_Init 000F                      __mediumconst FD74  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                       ?_i2cHighSda 0001  
                     ?_i2cHighScl 0001                            putch@c 000F  
                __end_of_spiwrite 19DA                        __accesstop 0080  
         __end_of__initialization 14C2                _setup_alarm_minute 005F  
              _setup_alarm_second 0060                     ___rparam_used 000001  
                      ___ftdiv@f1 002A                        ___ftdiv@f2 002D  
                      ___ftdiv@f3 0034                        ___lbtoft@c 001A  
                      ___ftmul@f1 001B                        ___ftmul@f2 001E  
                      ___fttol@f1 000F                     __end_of_Rcmd1 0D02  
                   __end_of_Rcmd3 0EEC                    __pcstackCOMRAM 0001  
                    __pidataBANK0 1652                      __pidataBANK1 1988  
                   __end_of_font2 FF50                     __end_of_putch 1A2E  
                  drawPixel@color 0017            __size_of_write_command 0010  
                      ??_I2C_Init 0013                      _alarm_minute 0051  
                    _alarm_second 0052                           ??_Rcmd1 001B  
                         ??_Rcmd3 001B                __size_of_drawPixel 0030  
               __end_of_OpenUSART 153C                           ??_putch 000F  
                      __pbssBANK0 00D0                  _setup_alarm_hour 005E  
                _setup_alarm_time 0089                     ??_DS1621_Init 000F  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
                 spiwrite@spidata 0010                        _alarm_date 004F  
                      _alarm_hour 0050                        _alarm_time 0080  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 000F  
             __size_of_i2cHighSda 0008               __size_of_i2cHighScl 000C  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP1CON 000FBD                           _ALARMEN 0039  
                       ?___ftpack 000F                         ?___lbtoft 0017  
                         ?_printf 001B                           ?_strcpy 000F  
                         ?_strlen 000F                        _fillScreen 19AA  
                      _drawCircle 07D6                    _init_INTERRUPT 1A56  
                       ?_delay_ms 0015                         ?_fillRect 0021  
                       ?_drawChar 002C                           _SSPCON1 000FC6  
                         _SSPSTAT 000FC7                           _RPM_Txt 00BF  
           __end_of_fillRectangle 1190                         ?_drawtext 00E9  
                         _Do_Init 173C                        ??_Rcmd2red 0012  
                   _write_command 1A10                           __Hparam 0000  
                         __Lparam 0000               __end_of_DS1621_Init 1A5A  
               __end_of_drawPixel 18EE             __end_of_drawFastVLine 144A  
                         ___awdiv 132C                           ___ftdiv 0FD2  
                 __size_of___wmul 0028                           ___ftmul 0D02  
                         ___fttol 0EEC                           ___lwdiv 15A4  
                         ___lwmod 16F0                   __size_of_chkisr 159C  
                       ?_spiwrite 0001                           __pcinit 144A  
                      ??___ftpack 0014                        ??___lbtoft 001A  
                         __ramtop 1000                           _get_RPM 17D2  
                         __ptext0 0628                           __ptext1 001C  
                         __ptext2 1A20                           __ptext3 1966  
                         __ptext4 16F0                           __ptext5 15A4  
       __size_of_DS1621_Read_Temp 0002                           __ptext6 17D2  
                         __ptext7 132C                           __ptext8 1190  
                         __ptext9 1940                   __size_of_printf 035A  
               __end_of_init_UART 19EE            __end_of_init_INTERRUPT 1A58  
                       _T0CONbits 000FD5                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                 __end_of_hexpowers FF62  
                         _dpowers FF50             __end_of_do_update_pwm 1266  
                         _isdigit 1966                        _duty_cycle 0057  
                      ??_delay_ms 0017                     drawtext@_text 00EA  
                   drawtext@color 00EC                        ??_fillRect 0026  
                      ??_drawChar 0033                         _LCD_Reset 19EE  
                   _setAddrWindow 16A2                    __pintcode_body 153C  
                      delay_ms@ms 0015              end_of_initialization 14C2  
                      ??_drawtext 0037                    ?_write_command 0001  
                   __Lmediumconst FD74         __size_of_DS3231_Read_Time 0002  
                         int_func 153C                        get_RPM@RPS 001F  
                      _tempSecond 006B                         _RCSTAbits 000FAB  
                         printf@c 0036                           printf@f 001B  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 000F                           strlen@s 000F  
                       _PORTAbits 000F80                  drawtext@cursor_x 00F7  
                drawtext@cursor_y 00F6                         _PORTBbits 000F81  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                 ?_init_INTERRUPT 0001                        _setup_date 0092  
                     ?_fillScreen 0022                        _setup_hour 0062  
                      _setup_time 009B                        _setup_year 0066  
                     ?_drawCircle 001A                        drawChar@bg 0030  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                    ??_i2cHighSda 000F                      ??_i2cHighScl 000F  
               __size_of_I2C_Init 000A                    ?_setAddrWindow 0012  
                      ?_LCD_Reset 0001                  drawtext@textsize 00F2  
                      drawPixel@x 0019                        drawPixel@y 0016  
                     _DS1621_Init 1A58                       ___ftdiv@exp 0037  
                     printf@width 0034                         _TXSTAbits 000FAC  
                     ___ftmul@exp 0024                __end_of_i2cHighSda 1A56  
              __end_of_i2cHighScl 1A3A                    __end_of___wmul 1940  
                   delay_ms@count 0019                        _write_data 1A00  
                   __pidataCOMRAM 1A44                    __end_of_chkisr 15A4  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 00EE  
                       _Nec_code1 004C                    __end_of_printf 0376  
                  __end_of_strcpy 18BE                    __end_of_strlen 184E  
                       _Nec_state 004D               start_initialization 144A  
                 ??_write_command 0011                         _OpenUSART 14CC  
                __CFG_OSC$INTIO67 000000                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
                        ??___wmul 0013                          ??_chkisr 0001  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0015                   setAddrWindow@x1 0013  
                 setAddrWindow@y0 0012                   setAddrWindow@y1 0014  
                        ??_printf 0029                  _DS1621_Read_Temp 1A5C  
                        ??_strcpy 0013                          ??_strlen 0011  
               __size_of___ftpack 00C6                 __size_of___lbtoft 0026  
                     __pbssCOMRAM 0039                   ??_setAddrWindow 0015  
                   __pcstackBANK0 00E9                       ??_LCD_Reset 001B  
                    _isdigit$1749 0010                 __size_of_delay_ms 0052  
                        ?_Do_Init 0001                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 000F  
                _DS3231_Read_Time 1A5A                 __size_of_drawtext 0118  
                ___lwdiv@dividend 000F                         _bit_count 0053  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 1918  
                   __pmediumconst FD74                          ?___awdiv 0015  
                        ?___ftdiv 002A                          ?___ftmul 001B  
                        ?___fttol 000F                         __tft_type 004E  
                        ?___lwdiv 000F                          ?___lwmod 0016  
              drawFastVLine@color 0018                       ?_write_data 0001  
                       _drawPixel 18BE                          ?_get_RPM 001D  
               __size_of_spiwrite 0014                          ?_isdigit 0001  
                        _I2C_Init 1A3A                 _Initialize_Screen 0376  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART 19DA                         _hexpowers FF5A  
              ?_Initialize_Screen 0001                  ___lwdiv@quotient 0013  
                  __size_of_putch 000E                    ___wmul@product 0013  
             ??_Initialize_Screen 0039                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                  ??_init_INTERRUPT 000F  
                       _setup_day 0061                         fillRect@h 0023  
                       fillRect@i 002A                         fillRect@w 0022  
                       fillRect@x 0029                         fillRect@y 0021  
                       drawChar@c 002D                         drawChar@i 0036  
                       drawChar@j 0035                         drawChar@x 0034  
                       drawChar@y 002C                        ?_drawPixel 0016  
          __size_of_fillRectangle 00DC                 ___wmul@multiplier 000F  
       __end_of_Initialize_Screen 0628                      ??_fillScreen 0024  
                    ??_drawCircle 0022                        printf@flag 0033  
                      printf@prec 0030                        ?_init_UART 0001  
                       copy_data0 1476                         copy_data1 1496  
                       copy_data2 14B6                         drawtext@i 00F4  
          __size_of_drawFastVLine 0088                         drawtext@x 00F1  
                       drawtext@y 00E9                          _Nec_code 00E5  
               write_command@cmd_ 0011                       ??_OpenUSART 0011  
                    ?_DS1621_Init 0001                          _Rcmd2red 184E  
                __size_of_Do_Init 004C               __size_of_write_data 0010  
                 OpenUSART@config 0011                      _Time_Elapsed 003F  
                   _RTC_ALARM_Txt 0068                          __Hrparam 0000  
          __size_of_do_update_pwm 00D6                __end_of_fillScreen 19C6  
                        __Lrparam 0000                __end_of_drawCircle 0984  
                __size_of___awdiv 0096                  __size_of___ftdiv 00E2  
                __size_of___ftmul 00F8                  __size_of___fttol 00E6  
                __size_of___lwdiv 005C                  __size_of___lwmod 004C  
                        ___ftpack 1266                          ___lbtoft 1940  
                __size_of_get_RPM 003E                    _setup_fan_temp 006A  
                  _setup_fan_text 00A4                  __size_of_isdigit 0022  
                        _delay_ms 1600                   ___lwdiv@divisor 0011  
                 ___lwdiv@counter 0015                          __ptext10 0EEC  
                        __ptext11 0D02                          __ptext20 0984  
                        __ptext12 0FD2                          __ptext21 1788  
                        __ptext13 1266                          __ptext30 1A00  
                        __ptext22 13C2                          __ptext14 0376  
                        __ptext31 1A10                          __ptext23 07D6  
                        __ptext15 188C                          __ptext40 1A3A  
                        __ptext32 19C6                          __ptext24 18BE  
                        __ptext16 19AA                          __ptext41 1A4E  
                        __ptext33 19EE                          __ptext25 16A2  
                        __ptext17 10B4                          __ptext42 1A2E  
                        __ptext34 1600                          __ptext26 18EE  
                        __ptext18 0ADA                          __ptext43 1A58  
                        __ptext35 1918                          __ptext27 0DFA  
                        __ptext19 1810                          __ptext44 1A5A  
                        __ptext36 173C                          __ptext28 184E  
                        __ptext45 1A5C                          __ptext37 19DA  
                        __ptext29 0BF2                          __ptext38 14CC  
                        __ptext39 1A56                          _fillRect 1788  
                        _drawChar 0984  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 0054                          _drawtext 0ADA  
                      strcpy@from 0011                     _fillRectangle 10B4  
        __end_of_DS1621_Read_Temp 1A5E                     __size_of_main 01AE  
                 fillRectangle@hi 001F                   fillRectangle@lo 0020  
                   _drawFastVLine 13C2                         printf@idx 002D  
                        _spiwrite 19C6                         printf@val 0031  
                     ??_drawPixel 0019                          _rowstart 005C  
        __end_of_DS3231_Read_Time 1A5C        __size_of_Initialize_Screen 02B2  
                      _INTCONbits 000FF2                     _do_update_pwm 1190  
                  OpenUSART@spbrg 000F                       ??_init_UART 0012  
                        isdigit@c 0011                         spiwrite@x 000F  
                        intlevel2 0000                    ?_fillRectangle 0016  
                ___lwmod@dividend 0016             __end_of_write_command 1A20  
                 fillScreen@color 0022           do_update_pwm@duty_cycle 00EF  
                  fillRectangle@h 0018                    fillRectangle@w 0017  
                  fillRectangle@x 0021                    fillRectangle@y 0016  
                  ?_drawFastVLine 0016                          printf@ap 002E  
                    ??_write_data 0011                     fillRect@color 0024  
                  ?_do_update_pwm 0001                   ___lwmod@divisor 0018  
                        strcpy@cp 0013                          strlen@cp 0013  
                        strcpy@to 000F                   ___lwmod@counter 001A  
                    _setup_minute 0063                      _setup_second 0065  
           __end_of_setAddrWindow 16F0                fillRectangle@color 0019  
               do_update_pwm@dc_I 00F0                 do_update_pwm@dc_f 00EC  
                   drawChar@color 002E                       _setup_month 0064  
              __end_of_write_data 1A10                      drawChar@line 0033  
                    drawChar@size 0032              __size_of_DS1621_Init 0002  
