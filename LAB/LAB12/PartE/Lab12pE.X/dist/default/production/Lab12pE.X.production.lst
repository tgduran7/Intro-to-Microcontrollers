

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed May 11 16:12:18 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           	psect	idataCOMRAM
    97  0023F6                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _setup_fan_temp
   101  0023F6  4B                 	db	75
   102                           
   103                           ;initializer for _tempSecond
   104  0023F7  FF                 	db	255
   105                           
   106                           ;initializer for _wrap
   107  0023F8  01                 	db	1
   108                           
   109                           	psect	idataBANK0
   110  001B62                     __pidataBANK0:
   111                           	opt stack 0
   112                           
   113                           ;initializer for Set_RPM_RGB@F4110
   114  001B62  0001               	dw	1
   115  001B64  0003               	dw	3
   116  001B66  0002               	dw	2
   117  001B68  0004               	dw	4
   118  001B6A  0005               	dw	5
   119  001B6C  0006               	dw	6
   120  001B6E  0007               	dw	7
   121                           
   122                           ;initializer for _alarm_time
   123  001B70  30                 	db	48
   124  001B71  30                 	db	48
   125  001B72  3A                 	db	58
   126  001B73  30                 	db	48
   127  001B74  30                 	db	48
   128  001B75  3A                 	db	58
   129  001B76  30                 	db	48
   130  001B77  30                 	db	48
   131  001B78  00                 	db	0
   132                           
   133                           ;initializer for _setup_alarm_time
   134  001B79  30                 	db	48
   135  001B7A  30                 	db	48
   136  001B7B  3A                 	db	58
   137  001B7C  30                 	db	48
   138  001B7D  30                 	db	48
   139  001B7E  3A                 	db	58
   140  001B7F  30                 	db	48
   141  001B80  30                 	db	48
   142  001B81  00                 	db	0
   143                           
   144                           ;initializer for _setup_date
   145  001B82  30                 	db	48
   146  001B83  31                 	db	49
   147  001B84  2F                 	db	47
   148  001B85  30                 	db	48
   149  001B86  31                 	db	49
   150  001B87  2F                 	db	47
   151  001B88  30                 	db	48
   152  001B89  30                 	db	48
   153  001B8A  00                 	db	0
   154                           
   155                           ;initializer for _setup_time
   156  001B8B  30                 	db	48
   157  001B8C  30                 	db	48
   158  001B8D  3A                 	db	58
   159  001B8E  30                 	db	48
   160  001B8F  30                 	db	48
   161  001B90  3A                 	db	58
   162  001B91  30                 	db	48
   163  001B92  30                 	db	48
   164  001B93  00                 	db	0
   165                           
   166                           ;initializer for _setup_fan_text
   167  001B94  30                 	db	48
   168  001B95  37                 	db	55
   169  001B96  35                 	db	53
   170  001B97  46                 	db	70
   171  001B98  00                 	db	0
   172                           
   173                           ;initializer for _Alarm_SW_Txt
   174  001B99  4F                 	db	79
   175  001B9A  46                 	db	70
   176  001B9B  46                 	db	70
   177  001B9C  00                 	db	0
   178                           
   179                           ;initializer for _RTC_ALARM_Txt
   180  001B9D  30                 	db	48
   181  001B9E  00                 	db	0
   182                           
   183                           ;initializer for _date
   184  001B9F  30                 	db	48
   185  001BA0  30                 	db	48
   186  001BA1  2F                 	db	47
   187  001BA2  30                 	db	48
   188  001BA3  30                 	db	48
   189  001BA4  2F                 	db	47
   190  001BA5  30                 	db	48
   191  001BA6  30                 	db	48
   192  001BA7  00                 	db	0
   193                           
   194                           ;initializer for _time
   195  001BA8  30                 	db	48
   196  001BA9  30                 	db	48
   197  001BAA  3A                 	db	58
   198  001BAB  30                 	db	48
   199  001BAC  30                 	db	48
   200  001BAD  3A                 	db	58
   201  001BAE  30                 	db	48
   202  001BAF  30                 	db	48
   203  001BB0  00                 	db	0
   204                           
   205                           ;initializer for _RPM_Txt
   206  001BB1  30                 	db	48
   207  001BB2  30                 	db	48
   208  001BB3  30                 	db	48
   209  001BB4  30                 	db	48
   210  001BB5  00                 	db	0
   211                           
   212                           ;initializer for _DC_Txt
   213  001BB6  30                 	db	48
   214  001BB7  30                 	db	48
   215  001BB8  30                 	db	48
   216  001BB9  00                 	db	0
   217                           
   218                           ;initializer for _Fan_SW_Txt
   219  001BBA  4F                 	db	79
   220  001BBB  46                 	db	70
   221  001BBC  46                 	db	70
   222  001BBD  00                 	db	0
   223                           
   224                           ;initializer for _tempC
   225  001BBE  2B                 	db	43
   226  001BBF  32                 	db	50
   227  001BC0  35                 	db	53
   228  001BC1  00                 	db	0
   229                           
   230                           ;initializer for _tempF
   231  001BC2  2B                 	db	43
   232  001BC3  37                 	db	55
   233  001BC4  37                 	db	55
   234  001BC5  00                 	db	0
   235                           
   236                           	psect	idataBANK1
   237  001E60                     __pidataBANK1:
   238                           	opt stack 0
   239                           
   240                           ;initializer for _array1
   241  001E60  A2                 	db	162
   242  001E61  62                 	db	98
   243  001E62  E2                 	db	226
   244  001E63  22                 	db	34
   245  001E64  02                 	db	2
   246  001E65  C2                 	db	194
   247  001E66  E0                 	db	224
   248  001E67  A8                 	db	168
   249  001E68  90                 	db	144
   250  001E69  68                 	db	104
   251  001E6A  98                 	db	152
   252  001E6B  B0                 	db	176
   253  001E6C  30                 	db	48
   254  001E6D  18                 	db	24
   255  001E6E  7A                 	db	122
   256  001E6F  10                 	db	16
   257  001E70  38                 	db	56
   258  001E71  5A                 	db	90
   259  001E72  42                 	db	66
   260  001E73  4A                 	db	74
   261  001E74  52                 	db	82
   262                           
   263                           ;initializer for _color
   264  001E75  01                 	db	1
   265  001E76  01                 	db	1
   266  001E77  01                 	db	1
   267  001E78  04                 	db	4
   268  001E79  04                 	db	4
   269  001E7A  02                 	db	2
   270  001E7B  05                 	db	5
   271  001E7C  05                 	db	5
   272  001E7D  05                 	db	5
   273  001E7E  07                 	db	7
   274  001E7F  07                 	db	7
   275  001E80  07                 	db	7
   276  001E81  07                 	db	7
   277  001E82  07                 	db	7
   278  001E83  07                 	db	7
   279  001E84  07                 	db	7
   280  001E85  07                 	db	7
   281  001E86  07                 	db	7
   282  001E87  07                 	db	7
   283  001E88  07                 	db	7
   284  001E89  07                 	db	7
   285                           
   286                           ;initializer for _buffer
   287  001E8A  20                 	db	32
   288  001E8B  45                 	db	69
   289  001E8C  43                 	db	67
   290  001E8D  45                 	db	69
   291  001E8E  33                 	db	51
   292  001E8F  33                 	db	51
   293  001E90  30                 	db	48
   294  001E91  31                 	db	49
   295  001E92  4C                 	db	76
   296  001E93  20                 	db	32
   297  001E94  53                 	db	83
   298  001E95  70                 	db	112
   299  001E96  27                 	db	39
   300  001E97  32                 	db	50
   301  001E98  32                 	db	50
   302  001E99  20                 	db	32
   303  001E9A  4C                 	db	76
   304  001E9B  31                 	db	49
   305  001E9C  32                 	db	50
   306  001E9D  00                 	db	0
   307  001E9E  00                 	db	0
   308  001E9F  00                 	db	0
   309  001EA0  00                 	db	0
   310  001EA1  00                 	db	0
   311  001EA2  00                 	db	0
   312  001EA3  00                 	db	0
   313  001EA4  00                 	db	0
   314  001EA5  00                 	db	0
   315  001EA6  00                 	db	0
   316  001EA7  00                 	db	0
   317  001EA8  00                 	db	0
   318  001EA9  00                 	db	0
   319  001EAA  00                 	db	0
   320                           
   321                           	psect	mediumconst
   322  00FD18                     __pmediumconst:
   323                           	opt stack 0
   324  00FD18  00                 	db	0
   325  00FD19                     _font:
   326                           	opt stack 0
   327  00FD19  00                 	db	0
   328  00FD1A  00                 	db	0
   329  00FD1B  00                 	db	0
   330  00FD1C  00                 	db	0
   331  00FD1D  00                 	db	0
   332  00FD1E  00                 	db	0
   333  00FD1F  00                 	db	0
   334  00FD20  5F                 	db	95
   335  00FD21  00                 	db	0
   336  00FD22  00                 	db	0
   337  00FD23  00                 	db	0
   338  00FD24  07                 	db	7
   339  00FD25  00                 	db	0
   340  00FD26  07                 	db	7
   341  00FD27  00                 	db	0
   342  00FD28  14                 	db	20
   343  00FD29  7F                 	db	127
   344  00FD2A  14                 	db	20
   345  00FD2B  7F                 	db	127
   346  00FD2C  14                 	db	20
   347  00FD2D  24                 	db	36
   348  00FD2E  2A                 	db	42
   349  00FD2F  7F                 	db	127
   350  00FD30  2A                 	db	42
   351  00FD31  12                 	db	18
   352  00FD32  23                 	db	35
   353  00FD33  13                 	db	19
   354  00FD34  08                 	db	8
   355  00FD35  64                 	db	100
   356  00FD36  62                 	db	98
   357  00FD37  36                 	db	54
   358  00FD38  49                 	db	73
   359  00FD39  56                 	db	86
   360  00FD3A  20                 	db	32
   361  00FD3B  50                 	db	80
   362  00FD3C  00                 	db	0
   363  00FD3D  08                 	db	8
   364  00FD3E  07                 	db	7
   365  00FD3F  03                 	db	3
   366  00FD40  00                 	db	0
   367  00FD41  00                 	db	0
   368  00FD42  1C                 	db	28
   369  00FD43  22                 	db	34
   370  00FD44  41                 	db	65
   371  00FD45  00                 	db	0
   372  00FD46  00                 	db	0
   373  00FD47  41                 	db	65
   374  00FD48  22                 	db	34
   375  00FD49  1C                 	db	28
   376  00FD4A  00                 	db	0
   377  00FD4B  2A                 	db	42
   378  00FD4C  1C                 	db	28
   379  00FD4D  7F                 	db	127
   380  00FD4E  1C                 	db	28
   381  00FD4F  2A                 	db	42
   382  00FD50  08                 	db	8
   383  00FD51  08                 	db	8
   384  00FD52  3E                 	db	62
   385  00FD53  08                 	db	8
   386  00FD54  08                 	db	8
   387  00FD55  00                 	db	0
   388  00FD56  80                 	db	128
   389  00FD57  70                 	db	112
   390  00FD58  30                 	db	48
   391  00FD59  00                 	db	0
   392  00FD5A  08                 	db	8
   393  00FD5B  08                 	db	8
   394  00FD5C  08                 	db	8
   395  00FD5D  08                 	db	8
   396  00FD5E  08                 	db	8
   397  00FD5F  00                 	db	0
   398  00FD60  00                 	db	0
   399  00FD61  60                 	db	96
   400  00FD62  60                 	db	96
   401  00FD63  00                 	db	0
   402  00FD64  20                 	db	32
   403  00FD65  10                 	db	16
   404  00FD66  08                 	db	8
   405  00FD67  04                 	db	4
   406  00FD68  02                 	db	2
   407  00FD69  3E                 	db	62
   408  00FD6A  51                 	db	81
   409  00FD6B  49                 	db	73
   410  00FD6C  45                 	db	69
   411  00FD6D  3E                 	db	62
   412  00FD6E  00                 	db	0
   413  00FD6F  42                 	db	66
   414  00FD70  7F                 	db	127
   415  00FD71  40                 	db	64
   416  00FD72  00                 	db	0
   417  00FD73  72                 	db	114
   418  00FD74  49                 	db	73
   419  00FD75  49                 	db	73
   420  00FD76  49                 	db	73
   421  00FD77  46                 	db	70
   422  00FD78  21                 	db	33
   423  00FD79  41                 	db	65
   424  00FD7A  49                 	db	73
   425  00FD7B  4D                 	db	77
   426  00FD7C  33                 	db	51
   427  00FD7D  18                 	db	24
   428  00FD7E  14                 	db	20
   429  00FD7F  12                 	db	18
   430  00FD80  7F                 	db	127
   431  00FD81  10                 	db	16
   432  00FD82  27                 	db	39
   433  00FD83  45                 	db	69
   434  00FD84  45                 	db	69
   435  00FD85  45                 	db	69
   436  00FD86  39                 	db	57
   437  00FD87  3C                 	db	60
   438  00FD88  4A                 	db	74
   439  00FD89  49                 	db	73
   440  00FD8A  49                 	db	73
   441  00FD8B  31                 	db	49
   442  00FD8C  41                 	db	65
   443  00FD8D  21                 	db	33
   444  00FD8E  11                 	db	17
   445  00FD8F  09                 	db	9
   446  00FD90  07                 	db	7
   447  00FD91  36                 	db	54
   448  00FD92  49                 	db	73
   449  00FD93  49                 	db	73
   450  00FD94  49                 	db	73
   451  00FD95  36                 	db	54
   452  00FD96  46                 	db	70
   453  00FD97  49                 	db	73
   454  00FD98  49                 	db	73
   455  00FD99  29                 	db	41
   456  00FD9A  1E                 	db	30
   457  00FD9B  00                 	db	0
   458  00FD9C  00                 	db	0
   459  00FD9D  14                 	db	20
   460  00FD9E  00                 	db	0
   461  00FD9F  00                 	db	0
   462  00FDA0  00                 	db	0
   463  00FDA1  40                 	db	64
   464  00FDA2  34                 	db	52
   465  00FDA3  00                 	db	0
   466  00FDA4  00                 	db	0
   467  00FDA5  00                 	db	0
   468  00FDA6  08                 	db	8
   469  00FDA7  14                 	db	20
   470  00FDA8  22                 	db	34
   471  00FDA9  41                 	db	65
   472  00FDAA  14                 	db	20
   473  00FDAB  14                 	db	20
   474  00FDAC  14                 	db	20
   475  00FDAD  14                 	db	20
   476  00FDAE  14                 	db	20
   477  00FDAF  00                 	db	0
   478  00FDB0  41                 	db	65
   479  00FDB1  22                 	db	34
   480  00FDB2  14                 	db	20
   481  00FDB3  08                 	db	8
   482  00FDB4  02                 	db	2
   483  00FDB5  01                 	db	1
   484  00FDB6  59                 	db	89
   485  00FDB7  09                 	db	9
   486  00FDB8  06                 	db	6
   487  00FDB9  3E                 	db	62
   488  00FDBA  41                 	db	65
   489  00FDBB  5D                 	db	93
   490  00FDBC  59                 	db	89
   491  00FDBD  4E                 	db	78
   492  00FDBE  7C                 	db	124
   493  00FDBF  12                 	db	18
   494  00FDC0  11                 	db	17
   495  00FDC1  12                 	db	18
   496  00FDC2  7C                 	db	124
   497  00FDC3  7F                 	db	127
   498  00FDC4  49                 	db	73
   499  00FDC5  49                 	db	73
   500  00FDC6  49                 	db	73
   501  00FDC7  36                 	db	54
   502  00FDC8  3E                 	db	62
   503  00FDC9  41                 	db	65
   504  00FDCA  41                 	db	65
   505  00FDCB  41                 	db	65
   506  00FDCC  22                 	db	34
   507  00FDCD  7F                 	db	127
   508  00FDCE  41                 	db	65
   509  00FDCF  41                 	db	65
   510  00FDD0  41                 	db	65
   511  00FDD1  3E                 	db	62
   512  00FDD2  7F                 	db	127
   513  00FDD3  49                 	db	73
   514  00FDD4  49                 	db	73
   515  00FDD5  49                 	db	73
   516  00FDD6  41                 	db	65
   517  00FDD7  7F                 	db	127
   518  00FDD8  09                 	db	9
   519  00FDD9  09                 	db	9
   520  00FDDA  09                 	db	9
   521  00FDDB  01                 	db	1
   522  00FDDC  3E                 	db	62
   523  00FDDD  41                 	db	65
   524  00FDDE  41                 	db	65
   525  00FDDF  51                 	db	81
   526  00FDE0  73                 	db	115
   527  00FDE1  7F                 	db	127
   528  00FDE2  08                 	db	8
   529  00FDE3  08                 	db	8
   530  00FDE4  08                 	db	8
   531  00FDE5  7F                 	db	127
   532  00FDE6  00                 	db	0
   533  00FDE7  41                 	db	65
   534  00FDE8  7F                 	db	127
   535  00FDE9  41                 	db	65
   536  00FDEA  00                 	db	0
   537  00FDEB  20                 	db	32
   538  00FDEC  40                 	db	64
   539  00FDED  41                 	db	65
   540  00FDEE  3F                 	db	63
   541  00FDEF  01                 	db	1
   542  00FDF0  7F                 	db	127
   543  00FDF1  08                 	db	8
   544  00FDF2  14                 	db	20
   545  00FDF3  22                 	db	34
   546  00FDF4  41                 	db	65
   547  00FDF5  7F                 	db	127
   548  00FDF6  40                 	db	64
   549  00FDF7  40                 	db	64
   550  00FDF8  40                 	db	64
   551  00FDF9  40                 	db	64
   552  00FDFA  7F                 	db	127
   553  00FDFB  02                 	db	2
   554  00FDFC  1C                 	db	28
   555  00FDFD  02                 	db	2
   556  00FDFE  7F                 	db	127
   557  00FDFF  7F                 	db	127
   558  00FE00  04                 	db	4
   559  00FE01  08                 	db	8
   560  00FE02  10                 	db	16
   561  00FE03  7F                 	db	127
   562  00FE04  3E                 	db	62
   563  00FE05  41                 	db	65
   564  00FE06  41                 	db	65
   565  00FE07  41                 	db	65
   566  00FE08  3E                 	db	62
   567  00FE09  7F                 	db	127
   568  00FE0A  09                 	db	9
   569  00FE0B  09                 	db	9
   570  00FE0C  09                 	db	9
   571  00FE0D  06                 	db	6
   572  00FE0E  3E                 	db	62
   573  00FE0F  41                 	db	65
   574  00FE10  51                 	db	81
   575  00FE11  21                 	db	33
   576  00FE12  5E                 	db	94
   577  00FE13  7F                 	db	127
   578  00FE14  09                 	db	9
   579  00FE15  19                 	db	25
   580  00FE16  29                 	db	41
   581  00FE17  46                 	db	70
   582  00FE18                     __end_of_font:
   583                           	opt stack 0
   584  00FE18                     _font2:
   585                           	opt stack 0
   586  00FE18  26                 	db	38
   587  00FE19  49                 	db	73
   588  00FE1A  49                 	db	73
   589  00FE1B  49                 	db	73
   590  00FE1C  32                 	db	50
   591  00FE1D  03                 	db	3
   592  00FE1E  01                 	db	1
   593  00FE1F  7F                 	db	127
   594  00FE20  01                 	db	1
   595  00FE21  03                 	db	3
   596  00FE22  3F                 	db	63
   597  00FE23  40                 	db	64
   598  00FE24  40                 	db	64
   599  00FE25  40                 	db	64
   600  00FE26  3F                 	db	63
   601  00FE27  1F                 	db	31
   602  00FE28  20                 	db	32
   603  00FE29  40                 	db	64
   604  00FE2A  20                 	db	32
   605  00FE2B  1F                 	db	31
   606  00FE2C  3F                 	db	63
   607  00FE2D  40                 	db	64
   608  00FE2E  38                 	db	56
   609  00FE2F  40                 	db	64
   610  00FE30  3F                 	db	63
   611  00FE31  63                 	db	99
   612  00FE32  14                 	db	20
   613  00FE33  08                 	db	8
   614  00FE34  14                 	db	20
   615  00FE35  63                 	db	99
   616  00FE36  03                 	db	3
   617  00FE37  04                 	db	4
   618  00FE38  78                 	db	120
   619  00FE39  04                 	db	4
   620  00FE3A  03                 	db	3
   621  00FE3B  61                 	db	97
   622  00FE3C  59                 	db	89
   623  00FE3D  49                 	db	73
   624  00FE3E  4D                 	db	77
   625  00FE3F  43                 	db	67
   626  00FE40  00                 	db	0
   627  00FE41  7F                 	db	127
   628  00FE42  41                 	db	65
   629  00FE43  41                 	db	65
   630  00FE44  41                 	db	65
   631  00FE45  02                 	db	2
   632  00FE46  04                 	db	4
   633  00FE47  08                 	db	8
   634  00FE48  10                 	db	16
   635  00FE49  20                 	db	32
   636  00FE4A  00                 	db	0
   637  00FE4B  41                 	db	65
   638  00FE4C  41                 	db	65
   639  00FE4D  41                 	db	65
   640  00FE4E  7F                 	db	127
   641  00FE4F  04                 	db	4
   642  00FE50  02                 	db	2
   643  00FE51  01                 	db	1
   644  00FE52  02                 	db	2
   645  00FE53  04                 	db	4
   646  00FE54  40                 	db	64
   647  00FE55  40                 	db	64
   648  00FE56  40                 	db	64
   649  00FE57  40                 	db	64
   650  00FE58  40                 	db	64
   651  00FE59  00                 	db	0
   652  00FE5A  03                 	db	3
   653  00FE5B  07                 	db	7
   654  00FE5C  08                 	db	8
   655  00FE5D  00                 	db	0
   656  00FE5E  20                 	db	32
   657  00FE5F  54                 	db	84
   658  00FE60  54                 	db	84
   659  00FE61  78                 	db	120
   660  00FE62  40                 	db	64
   661  00FE63  7F                 	db	127
   662  00FE64  28                 	db	40
   663  00FE65  44                 	db	68
   664  00FE66  44                 	db	68
   665  00FE67  38                 	db	56
   666  00FE68  38                 	db	56
   667  00FE69  44                 	db	68
   668  00FE6A  44                 	db	68
   669  00FE6B  44                 	db	68
   670  00FE6C  28                 	db	40
   671  00FE6D  38                 	db	56
   672  00FE6E  44                 	db	68
   673  00FE6F  44                 	db	68
   674  00FE70  28                 	db	40
   675  00FE71  7F                 	db	127
   676  00FE72  38                 	db	56
   677  00FE73  54                 	db	84
   678  00FE74  54                 	db	84
   679  00FE75  54                 	db	84
   680  00FE76  18                 	db	24
   681  00FE77  00                 	db	0
   682  00FE78  08                 	db	8
   683  00FE79  7E                 	db	126
   684  00FE7A  09                 	db	9
   685  00FE7B  02                 	db	2
   686  00FE7C  18                 	db	24
   687  00FE7D  A4                 	db	164
   688  00FE7E  A4                 	db	164
   689  00FE7F  9C                 	db	156
   690  00FE80  78                 	db	120
   691  00FE81  7F                 	db	127
   692  00FE82  08                 	db	8
   693  00FE83  04                 	db	4
   694  00FE84  04                 	db	4
   695  00FE85  78                 	db	120
   696  00FE86  00                 	db	0
   697  00FE87  44                 	db	68
   698  00FE88  7D                 	db	125
   699  00FE89  40                 	db	64
   700  00FE8A  00                 	db	0
   701  00FE8B  20                 	db	32
   702  00FE8C  40                 	db	64
   703  00FE8D  40                 	db	64
   704  00FE8E  3D                 	db	61
   705  00FE8F  00                 	db	0
   706  00FE90  7F                 	db	127
   707  00FE91  10                 	db	16
   708  00FE92  28                 	db	40
   709  00FE93  44                 	db	68
   710  00FE94  00                 	db	0
   711  00FE95  00                 	db	0
   712  00FE96  41                 	db	65
   713  00FE97  7F                 	db	127
   714  00FE98  40                 	db	64
   715  00FE99  00                 	db	0
   716  00FE9A  7C                 	db	124
   717  00FE9B  04                 	db	4
   718  00FE9C  78                 	db	120
   719  00FE9D  04                 	db	4
   720  00FE9E  78                 	db	120
   721  00FE9F  7C                 	db	124
   722  00FEA0  08                 	db	8
   723  00FEA1  04                 	db	4
   724  00FEA2  04                 	db	4
   725  00FEA3  78                 	db	120
   726  00FEA4  38                 	db	56
   727  00FEA5  44                 	db	68
   728  00FEA6  44                 	db	68
   729  00FEA7  44                 	db	68
   730  00FEA8  38                 	db	56
   731  00FEA9  FC                 	db	252
   732  00FEAA  18                 	db	24
   733  00FEAB  24                 	db	36
   734  00FEAC  24                 	db	36
   735  00FEAD  18                 	db	24
   736  00FEAE  18                 	db	24
   737  00FEAF  24                 	db	36
   738  00FEB0  24                 	db	36
   739  00FEB1  18                 	db	24
   740  00FEB2  FC                 	db	252
   741  00FEB3  7C                 	db	124
   742  00FEB4  08                 	db	8
   743  00FEB5  04                 	db	4
   744  00FEB6  04                 	db	4
   745  00FEB7  08                 	db	8
   746  00FEB8  48                 	db	72
   747  00FEB9  54                 	db	84
   748  00FEBA  54                 	db	84
   749  00FEBB  54                 	db	84
   750  00FEBC  24                 	db	36
   751  00FEBD  04                 	db	4
   752  00FEBE  04                 	db	4
   753  00FEBF  3F                 	db	63
   754  00FEC0  44                 	db	68
   755  00FEC1  24                 	db	36
   756  00FEC2  3C                 	db	60
   757  00FEC3  40                 	db	64
   758  00FEC4  40                 	db	64
   759  00FEC5  20                 	db	32
   760  00FEC6  7C                 	db	124
   761  00FEC7  1C                 	db	28
   762  00FEC8  20                 	db	32
   763  00FEC9  40                 	db	64
   764  00FECA  20                 	db	32
   765  00FECB  1C                 	db	28
   766  00FECC  3C                 	db	60
   767  00FECD  40                 	db	64
   768  00FECE  30                 	db	48
   769  00FECF  40                 	db	64
   770  00FED0  3C                 	db	60
   771  00FED1  44                 	db	68
   772  00FED2  28                 	db	40
   773  00FED3  10                 	db	16
   774  00FED4  28                 	db	40
   775  00FED5  44                 	db	68
   776  00FED6  4C                 	db	76
   777  00FED7  90                 	db	144
   778  00FED8  90                 	db	144
   779  00FED9  90                 	db	144
   780  00FEDA  7C                 	db	124
   781  00FEDB  44                 	db	68
   782  00FEDC  64                 	db	100
   783  00FEDD  54                 	db	84
   784  00FEDE  4C                 	db	76
   785  00FEDF  44                 	db	68
   786  00FEE0  00                 	db	0
   787  00FEE1  08                 	db	8
   788  00FEE2  36                 	db	54
   789  00FEE3  41                 	db	65
   790  00FEE4  00                 	db	0
   791  00FEE5  00                 	db	0
   792  00FEE6  00                 	db	0
   793  00FEE7  77                 	db	119
   794  00FEE8  00                 	db	0
   795  00FEE9  00                 	db	0
   796  00FEEA  00                 	db	0
   797  00FEEB  41                 	db	65
   798  00FEEC  36                 	db	54
   799  00FEED  08                 	db	8
   800  00FEEE  00                 	db	0
   801  00FEEF  02                 	db	2
   802  00FEF0  01                 	db	1
   803  00FEF1  02                 	db	2
   804  00FEF2  04                 	db	4
   805  00FEF3  02                 	db	2
   806  00FEF4                     __end_of_font2:
   807                           	opt stack 0
   808  00FEF4                     _dpowers:
   809                           	opt stack 0
   810  00FEF4  0001               	dw	1
   811  00FEF6  000A               	dw	10
   812  00FEF8  0064               	dw	100
   813  00FEFA  03E8               	dw	1000
   814  00FEFC  2710               	dw	10000
   815  00FEFE                     __end_of_dpowers:
   816                           	opt stack 0
   817  00FEFE                     _hexpowers:
   818                           	opt stack 0
   819  00FEFE  0001               	dw	1
   820  00FF00  0010               	dw	16
   821  00FF02  0100               	dw	256
   822  00FF04  1000               	dw	4096
   823  00FF06                     __end_of_hexpowers:
   824                           	opt stack 0
   825  0000                     _ADCON1	set	4033
   826  0000                     _CCP1CON	set	4029
   827  0000                     _CCP2CON	set	4026
   828  0000                     _CCPR1L	set	4030
   829  0000                     _CCPR2L	set	4027
   830  0000                     _INTCON2bits	set	4081
   831  0000                     _INTCONbits	set	4082
   832  0000                     _OSCCON	set	4051
   833  0000                     _PIE1bits	set	3997
   834  0000                     _PIR1bits	set	3998
   835  0000                     _PORTAbits	set	3968
   836  0000                     _PORTBbits	set	3969
   837  0000                     _PORTCbits	set	3970
   838  0000                     _PORTD	set	3971
   839  0000                     _PORTDbits	set	3971
   840  0000                     _PORTE	set	3972
   841  0000                     _PR2	set	4043
   842  0000                     _RCSTA	set	4011
   843  0000                     _RCSTAbits	set	4011
   844  0000                     _SPBRG	set	4015
   845  0000                     _SPBRGH	set	4016
   846  0000                     _SSPBUF	set	4041
   847  0000                     _SSPCON1	set	4038
   848  0000                     _SSPSTAT	set	4039
   849  0000                     _SSPSTATbits	set	4039
   850  0000                     _T0CON	set	4053
   851  0000                     _T0CONbits	set	4053
   852  0000                     _T1CON	set	4045
   853  0000                     _T1CONbits	set	4045
   854  0000                     _T2CON	set	4042
   855  0000                     _T3CON	set	4017
   856  0000                     _TMR0H	set	4055
   857  0000                     _TMR0L	set	4054
   858  0000                     _TMR1H	set	4047
   859  0000                     _TMR1L	set	4046
   860  0000                     _TMR3L	set	4018
   861  0000                     _TRISA	set	3986
   862  0000                     _TRISB	set	3987
   863  0000                     _TRISBbits	set	3987
   864  0000                     _TRISC	set	3988
   865  0000                     _TRISCbits	set	3988
   866  0000                     _TRISD	set	3989
   867  0000                     _TRISDbits	set	3989
   868  0000                     _TRISE	set	3990
   869  0000                     _TXREG	set	4013
   870  0000                     _TXSTA	set	4012
   871  0000                     _TXSTAbits	set	4012
   872  0000                     _RBPU	set	32655
   873  0000                     _TRMT	set	32097
   874  00FF06                     STR_14:
   875  00FF06  25                 	db	37
   876  00FF07  30                 	db	48	;'0'
   877  00FF08  32                 	db	50	;'2'
   878  00FF09  78                 	db	120	;'x'
   879  00FF0A  3A                 	db	58	;':'
   880  00FF0B  25                 	db	37
   881  00FF0C  30                 	db	48	;'0'
   882  00FF0D  32                 	db	50	;'2'
   883  00FF0E  78                 	db	120	;'x'
   884  00FF0F  3A                 	db	58	;':'
   885  00FF10  25                 	db	37
   886  00FF11  30                 	db	48	;'0'
   887  00FF12  32                 	db	50	;'2'
   888  00FF13  78                 	db	120	;'x'
   889  00FF14  20                 	db	32
   890  00FF15  25                 	db	37
   891  00FF16  30                 	db	48	;'0'
   892  00FF17  32                 	db	50	;'2'
   893  00FF18  78                 	db	120	;'x'
   894  00FF19  2F                 	db	47
   895  00FF1A  25                 	db	37
   896  00FF1B  30                 	db	48	;'0'
   897  00FF1C  32                 	db	50	;'2'
   898  00FF1D  78                 	db	120	;'x'
   899  00FF1E  2F                 	db	47
   900  00FF1F  25                 	db	37
   901  00FF20  30                 	db	48	;'0'
   902  00FF21  32                 	db	50	;'2'
   903  00FF22  78                 	db	120	;'x'
   904  00FF23  00                 	db	0
   905  00FF24                     STR_18:
   906  00FF24  43                 	db	67	;'C'
   907  00FF25  61                 	db	97	;'a'
   908  00FF26  6E                 	db	110	;'n'
   909  00FF27  6E                 	db	110	;'n'
   910  00FF28  6F                 	db	111	;'o'
   911  00FF29  74                 	db	116	;'t'
   912  00FF2A  20                 	db	32
   913  00FF2B  66                 	db	102	;'f'
   914  00FF2C  69                 	db	105	;'i'
   915  00FF2D  6E                 	db	110	;'n'
   916  00FF2E  64                 	db	100	;'d'
   917  00FF2F  20                 	db	32
   918  00FF30  62                 	db	98	;'b'
   919  00FF31  75                 	db	117	;'u'
   920  00FF32  74                 	db	116	;'t'
   921  00FF33  74                 	db	116	;'t'
   922  00FF34  6F                 	db	111	;'o'
   923  00FF35  6E                 	db	110	;'n'
   924  00FF36  20                 	db	32
   925  00FF37  0D                 	db	13
   926  00FF38  0A                 	db	10
   927  00FF39  00                 	db	0
   928  00FF3A                     STR_3:
   929  00FF3A  45                 	db	69	;'E'
   930  00FF3B  43                 	db	67	;'C'
   931  00FF3C  45                 	db	69	;'E'
   932  00FF3D  33                 	db	51	;'3'
   933  00FF3E  33                 	db	51	;'3'
   934  00FF3F  30                 	db	48	;'0'
   935  00FF40  31                 	db	49	;'1'
   936  00FF41  4C                 	db	76	;'L'
   937  00FF42  20                 	db	32
   938  00FF43  53                 	db	83	;'S'
   939  00FF44  70                 	db	112	;'p'
   940  00FF45  72                 	db	114	;'r'
   941  00FF46  69                 	db	105	;'i'
   942  00FF47  6E                 	db	110	;'n'
   943  00FF48  67                 	db	103	;'g'
   944  00FF49  20                 	db	32
   945  00FF4A  32                 	db	50	;'2'
   946  00FF4B  32                 	db	50	;'2'
   947  00FF4C  2D                 	db	45
   948  00FF4D  53                 	db	83	;'S'
   949  00FF4E  31                 	db	49	;'1'
   950  00FF4F  00                 	db	0
   951  00FF50                     STR_15:
   952  00FF50  20                 	db	32
   953  00FF51  54                 	db	84	;'T'
   954  00FF52  65                 	db	101	;'e'
   955  00FF53  6D                 	db	109	;'m'
   956  00FF54  70                 	db	112	;'p'
   957  00FF55  20                 	db	32
   958  00FF56  3D                 	db	61	;'='
   959  00FF57  20                 	db	32
   960  00FF58  25                 	db	37
   961  00FF59  64                 	db	100	;'d'
   962  00FF5A  20                 	db	32
   963  00FF5B  43                 	db	67	;'C'
   964  00FF5C  20                 	db	32
   965  00FF5D  3D                 	db	61	;'='
   966  00FF5E  20                 	db	32
   967  00FF5F  25                 	db	37
   968  00FF60  64                 	db	100	;'d'
   969  00FF61  20                 	db	32
   970  00FF62  46                 	db	70	;'F'
   971  00FF63  20                 	db	32
   972  00FF64  00                 	db	0
   973  00FF65                     STR_16:
   974  00FF65  52                 	db	82	;'R'
   975  00FF66  50                 	db	80	;'P'
   976  00FF67  4D                 	db	77	;'M'
   977  00FF68  20                 	db	32
   978  00FF69  3D                 	db	61	;'='
   979  00FF6A  20                 	db	32
   980  00FF6B  25                 	db	37
   981  00FF6C  64                 	db	100	;'d'
   982  00FF6D  20                 	db	32
   983  00FF6E  20                 	db	32
   984  00FF6F  64                 	db	100	;'d'
   985  00FF70  63                 	db	99	;'c'
   986  00FF71  20                 	db	32
   987  00FF72  3D                 	db	61	;'='
   988  00FF73  20                 	db	32
   989  00FF74  25                 	db	37
   990  00FF75  64                 	db	100	;'d'
   991  00FF76  0D                 	db	13
   992  00FF77  0A                 	db	10
   993  00FF78  00                 	db	0
   994  00FF79                     STR_1:
   995  00FF79  46                 	db	70	;'F'
   996  00FF7A  61                 	db	97	;'a'
   997  00FF7B  6E                 	db	110	;'n'
   998  00FF7C  20                 	db	32
   999  00FF7D  69                 	db	105	;'i'
  1000  00FF7E  73                 	db	115	;'s'
  1001  00FF7F  20                 	db	32
  1002  00FF80  74                 	db	116	;'t'
  1003  00FF81  75                 	db	117	;'u'
  1004  00FF82  72                 	db	114	;'r'
  1005  00FF83  6E                 	db	110	;'n'
  1006  00FF84  65                 	db	101	;'e'
  1007  00FF85  64                 	db	100	;'d'
  1008  00FF86  20                 	db	32
  1009  00FF87  6F                 	db	111	;'o'
  1010  00FF88  66                 	db	102	;'f'
  1011  00FF89  66                 	db	102	;'f'
  1012  00FF8A  0D                 	db	13
  1013  00FF8B  0A                 	db	10
  1014  00FF8C  00                 	db	0
  1015  00FF8D                     STR_2:
  1016  00FF8D  46                 	db	70	;'F'
  1017  00FF8E  61                 	db	97	;'a'
  1018  00FF8F  6E                 	db	110	;'n'
  1019  00FF90  20                 	db	32
  1020  00FF91  69                 	db	105	;'i'
  1021  00FF92  73                 	db	115	;'s'
  1022  00FF93  20                 	db	32
  1023  00FF94  74                 	db	116	;'t'
  1024  00FF95  75                 	db	117	;'u'
  1025  00FF96  72                 	db	114	;'r'
  1026  00FF97  6E                 	db	110	;'n'
  1027  00FF98  65                 	db	101	;'e'
  1028  00FF99  64                 	db	100	;'d'
  1029  00FF9A  20                 	db	32
  1030  00FF9B  6F                 	db	111	;'o'
  1031  00FF9C  6E                 	db	110	;'n'
  1032  00FF9D  0D                 	db	13
  1033  00FF9E  0A                 	db	10
  1034  00FF9F  00                 	db	0
  1035  00FFA0                     STR_20:
  1036  00FFA0  30                 	db	48	;'0'
  1037  00FFA1  31                 	db	49	;'1'
  1038  00FFA2  32                 	db	50	;'2'
  1039  00FFA3  33                 	db	51	;'3'
  1040  00FFA4  34                 	db	52	;'4'
  1041  00FFA5  35                 	db	53	;'5'
  1042  00FFA6  36                 	db	54	;'6'
  1043  00FFA7  37                 	db	55	;'7'
  1044  00FFA8  38                 	db	56	;'8'
  1045  00FFA9  39                 	db	57	;'9'
  1046  00FFAA  61                 	db	97	;'a'
  1047  00FFAB  62                 	db	98	;'b'
  1048  00FFAC  63                 	db	99	;'c'
  1049  00FFAD  64                 	db	100	;'d'
  1050  00FFAE  65                 	db	101	;'e'
  1051  00FFAF  66                 	db	102	;'f'
  1052  00FFB0  00                 	db	0
  1053  00FFB1                     STR_17:
  1054  00FFB1  4E                 	db	78	;'N'
  1055  00FFB2  45                 	db	69	;'E'
  1056  00FFB3  43                 	db	67	;'C'
  1057  00FFB4  5F                 	db	95	;'_'
  1058  00FFB5  43                 	db	67	;'C'
  1059  00FFB6  6F                 	db	111	;'o'
  1060  00FFB7  64                 	db	100	;'d'
  1061  00FFB8  65                 	db	101	;'e'
  1062  00FFB9  20                 	db	32
  1063  00FFBA  3D                 	db	61	;'='
  1064  00FFBB  20                 	db	32
  1065  00FFBC  25                 	db	37
  1066  00FFBD  78                 	db	120	;'x'
  1067  00FFBE  0D                 	db	13
  1068  00FFBF  0A                 	db	10
  1069  00FFC0  00                 	db	0
  1070  00FFC1                     STR_19:
  1071  00FFC1  62                 	db	98	;'b'
  1072  00FFC2  75                 	db	117	;'u'
  1073  00FFC3  74                 	db	116	;'t'
  1074  00FFC4  74                 	db	116	;'t'
  1075  00FFC5  6F                 	db	111	;'o'
  1076  00FFC6  6E                 	db	110	;'n'
  1077  00FFC7  20                 	db	32
  1078  00FFC8  3D                 	db	61	;'='
  1079  00FFC9  20                 	db	32
  1080  00FFCA  25                 	db	37
  1081  00FFCB  64                 	db	100	;'d'
  1082  00FFCC  20                 	db	32
  1083  00FFCD  0D                 	db	13
  1084  00FFCE  0A                 	db	10
  1085  00FFCF  00                 	db	0
  1086  00FFD0                     STR_4:
  1087  00FFD0  54                 	db	84	;'T'
  1088  00FFD1  65                 	db	101	;'e'
  1089  00FFD2  6D                 	db	109	;'m'
  1090  00FFD3  70                 	db	112	;'p'
  1091  00FFD4  65                 	db	101	;'e'
  1092  00FFD5  72                 	db	114	;'r'
  1093  00FFD6  61                 	db	97	;'a'
  1094  00FFD7  74                 	db	116	;'t'
  1095  00FFD8  75                 	db	117	;'u'
  1096  00FFD9  72                 	db	114	;'r'
  1097  00FFDA  65                 	db	101	;'e'
  1098  00FFDB  3A                 	db	58	;':'
  1099  00FFDC  00                 	db	0
  1100  00FFDD                     STR_9:
  1101  00FFDD  20                 	db	32
  1102  00FFDE  20                 	db	32
  1103  00FFDF  46                 	db	70	;'F'
  1104  00FFE0  41                 	db	65	;'A'
  1105  00FFE1  4E                 	db	78	;'N'
  1106  00FFE2  00                 	db	0
  1107  00FFE3                     STR_7:
  1108  00FFE3  54                 	db	84	;'T'
  1109  00FFE4  69                 	db	105	;'i'
  1110  00FFE5  6D                 	db	109	;'m'
  1111  00FFE6  65                 	db	101	;'e'
  1112  00FFE7  00                 	db	0
  1113  00FFE8                     STR_8:
  1114  00FFE8  44                 	db	68	;'D'
  1115  00FFE9  61                 	db	97	;'a'
  1116  00FFEA  74                 	db	116	;'t'
  1117  00FFEB  65                 	db	101	;'e'
  1118  00FFEC  00                 	db	0
  1119  00FFED                     STR_12:
  1120  00FFED  4F                 	db	79	;'O'
  1121  00FFEE  4E                 	db	78	;'N'
  1122  00FFEF  20                 	db	32
  1123  00FFF0  00                 	db	0
  1124  00FFF1                     STR_13:
  1125  00FFF1  4F                 	db	79	;'O'
  1126  00FFF2  46                 	db	70	;'F'
  1127  00FFF3  46                 	db	70	;'F'
  1128  00FFF4  00                 	db	0
  1129  00FFF5                     STR_11:
  1130  00FFF5  52                 	db	82	;'R'
  1131  00FFF6  50                 	db	80	;'P'
  1132  00FFF7  4D                 	db	77	;'M'
  1133  00FFF8  00                 	db	0
  1134  00FFF9                     STR_5:
  1135  00FFF9  43                 	db	67	;'C'
  1136  00FFFA  2F                 	db	47
  1137  00FFFB  00                 	db	0
  1138  00FFFC                     STR_10:
  1139  00FFFC  44                 	db	68	;'D'
  1140  00FFFD  43                 	db	67	;'C'
  1141  00FFFE  00                 	db	0
  1142  0000                     
  1143                           ; #config settings
  1144  00FFFF  00                 	db	0	; dummy byte at the end
  1145  0000                     
  1146                           	psect	cinit
  1147  0019F6                     __pcinit:
  1148                           	opt stack 0
  1149  0019F6                     start_initialization:
  1150                           	opt stack 0
  1151  0019F6                     __initialization:
  1152                           	opt stack 0
  1153                           
  1154                           ; Clear objects allocated to BANK0 (10 bytes)
  1155  0019F6  EE00  F0F4         	lfsr	0,__pbssBANK0
  1156  0019FA  0E0A               	movlw	10
  1157  0019FC                     clear_0:
  1158  0019FC  6AEE               	clrf	postinc0,c
  1159  0019FE  06E8               	decf	wreg,f,c
  1160  001A00  E1FD               	bnz	clear_0
  1161                           
  1162                           ; Clear objects allocated to COMRAM (41 bytes)
  1163  001A02  EE00  F044         	lfsr	0,__pbssCOMRAM
  1164  001A06  0E29               	movlw	41
  1165  001A08                     clear_1:
  1166  001A08  6AEE               	clrf	postinc0,c
  1167  001A0A  06E8               	decf	wreg,f,c
  1168  001A0C  E1FD               	bnz	clear_1
  1169                           
  1170                           ; Initialize objects allocated to BANK1 (75 bytes)
  1171                           ; load TBLPTR registers with __pidataBANK1
  1172  001A0E  0E60               	movlw	low __pidataBANK1
  1173  001A10  6EF6               	movwf	tblptrl,c
  1174  001A12  0E1E               	movlw	high __pidataBANK1
  1175  001A14  6EF7               	movwf	tblptrh,c
  1176  001A16  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1177  001A18  6EF8               	movwf	tblptru,c
  1178  001A1A  EE01  F000         	lfsr	0,__pdataBANK1
  1179  001A1E  EE10 F04B          	lfsr	1,75
  1180  001A22                     copy_data0:
  1181  001A22  0009               	tblrd		*+
  1182  001A24  CFF5 FFEE          	movff	tablat,postinc0
  1183  001A28  50E5               	movf	postdec1,w,c
  1184  001A2A  50E1               	movf	fsr1l,w,c
  1185  001A2C  E1FA               	bnz	copy_data0
  1186                           
  1187                           ; Initialize objects allocated to BANK0 (100 bytes)
  1188                           ; load TBLPTR registers with __pidataBANK0
  1189  001A2E  0E62               	movlw	low __pidataBANK0
  1190  001A30  6EF6               	movwf	tblptrl,c
  1191  001A32  0E1B               	movlw	high __pidataBANK0
  1192  001A34  6EF7               	movwf	tblptrh,c
  1193  001A36  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1194  001A38  6EF8               	movwf	tblptru,c
  1195  001A3A  EE00  F080         	lfsr	0,__pdataBANK0
  1196  001A3E  EE10 F064          	lfsr	1,100
  1197  001A42                     copy_data1:
  1198  001A42  0009               	tblrd		*+
  1199  001A44  CFF5 FFEE          	movff	tablat,postinc0
  1200  001A48  50E5               	movf	postdec1,w,c
  1201  001A4A  50E1               	movf	fsr1l,w,c
  1202  001A4C  E1FA               	bnz	copy_data1
  1203                           
  1204                           ; Initialize objects allocated to COMRAM (3 bytes)
  1205                           ; load TBLPTR registers with __pidataCOMRAM
  1206  001A4E  0EF6               	movlw	low __pidataCOMRAM
  1207  001A50  6EF6               	movwf	tblptrl,c
  1208  001A52  0E23               	movlw	high __pidataCOMRAM
  1209  001A54  6EF7               	movwf	tblptrh,c
  1210  001A56  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1211  001A58  6EF8               	movwf	tblptru,c
  1212  001A5A  0009               	tblrd		*+	;fetch initializer
  1213  001A5C  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1214  001A60  0009               	tblrd		*+	;fetch initializer
  1215  001A62  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1216  001A66  0009               	tblrd		*+	;fetch initializer
  1217  001A68  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1218  001A6C                     end_of_initialization:
  1219                           	opt stack 0
  1220  001A6C                     __end_of__initialization:
  1221                           	opt stack 0
  1222  001A6C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1223  001A6E  6EF8               	movwf	tblptru,c
  1224  001A70  0100               	movlb	0
  1225  001A72  EFDE  F004         	goto	_main	;jump to C main() function
  1226                           tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           postinc0	equ	0xFEE
  1231                           wreg	equ	0xFE8
  1232                           postdec1	equ	0xFE5
  1233                           fsr1l	equ	0xFE1
  1234                           
  1235                           	psect	bssCOMRAM
  1236  000044                     __pbssCOMRAM:
  1237                           	opt stack 0
  1238  000044                     _DS1621_tempC:
  1239                           	opt stack 0
  1240  000044                     	ds	2
  1241  000046                     _DS1621_tempF:
  1242                           	opt stack 0
  1243  000046                     	ds	2
  1244  000048                     _Time_Elapsed:
  1245                           	opt stack 0
  1246  000048                     	ds	2
  1247  00004A                     _nec_ok:
  1248                           	opt stack 0
  1249  00004A                     	ds	2
  1250  00004C                     _rpm:
  1251                           	opt stack 0
  1252  00004C                     	ds	2
  1253  00004E                     _txt:
  1254                           	opt stack 0
  1255  00004E                     	ds	2
  1256  000050                     _FAN:
  1257                           	opt stack 0
  1258  000050                     	ds	1
  1259  000051                     _Nec_code1:
  1260                           	opt stack 0
  1261  000051                     	ds	1
  1262  000052                     _Nec_state:
  1263                           	opt stack 0
  1264  000052                     	ds	1
  1265  000053                     __tft_type:
  1266                           	opt stack 0
  1267  000053                     	ds	1
  1268  000054                     _alarm_date:
  1269                           	opt stack 0
  1270  000054                     	ds	1
  1271  000055                     _alarm_hour:
  1272                           	opt stack 0
  1273  000055                     	ds	1
  1274  000056                     _alarm_minute:
  1275                           	opt stack 0
  1276  000056                     	ds	1
  1277  000057                     _alarm_second:
  1278                           	opt stack 0
  1279  000057                     	ds	1
  1280  000058                     _bit_count:
  1281                           	opt stack 0
  1282  000058                     	ds	1
  1283  000059                     _colstart:
  1284                           	opt stack 0
  1285  000059                     	ds	1
  1286  00005A                     _day:
  1287                           	opt stack 0
  1288  00005A                     	ds	1
  1289  00005B                     _dow:
  1290                           	opt stack 0
  1291  00005B                     	ds	1
  1292  00005C                     _duty_cycle:
  1293                           	opt stack 0
  1294  00005C                     	ds	1
  1295  00005D                     _found:
  1296                           	opt stack 0
  1297  00005D                     	ds	1
  1298  00005E                     _hour:
  1299                           	opt stack 0
  1300  00005E                     	ds	1
  1301  00005F                     _minute:
  1302                           	opt stack 0
  1303  00005F                     	ds	1
  1304  000060                     _month:
  1305                           	opt stack 0
  1306  000060                     	ds	1
  1307  000061                     _rowstart:
  1308                           	opt stack 0
  1309  000061                     	ds	1
  1310  000062                     _second:
  1311                           	opt stack 0
  1312  000062                     	ds	1
  1313  000063                     _setup_alarm_hour:
  1314                           	opt stack 0
  1315  000063                     	ds	1
  1316  000064                     _setup_alarm_minute:
  1317                           	opt stack 0
  1318  000064                     	ds	1
  1319  000065                     _setup_alarm_second:
  1320                           	opt stack 0
  1321  000065                     	ds	1
  1322  000066                     _setup_day:
  1323                           	opt stack 0
  1324  000066                     	ds	1
  1325  000067                     _setup_hour:
  1326                           	opt stack 0
  1327  000067                     	ds	1
  1328  000068                     _setup_minute:
  1329                           	opt stack 0
  1330  000068                     	ds	1
  1331  000069                     _setup_month:
  1332                           	opt stack 0
  1333  000069                     	ds	1
  1334  00006A                     _setup_second:
  1335                           	opt stack 0
  1336  00006A                     	ds	1
  1337  00006B                     _setup_year:
  1338                           	opt stack 0
  1339  00006B                     	ds	1
  1340  00006C                     _year:
  1341                           	opt stack 0
  1342  00006C                     	ds	1
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           
  1352                           	psect	dataCOMRAM
  1353  00006D                     __pdataCOMRAM:
  1354                           	opt stack 0
  1355  00006D                     _setup_fan_temp:
  1356                           	opt stack 0
  1357  00006D                     	ds	1
  1358  00006E                     _tempSecond:
  1359                           	opt stack 0
  1360  00006E                     	ds	1
  1361  00006F                     _wrap:
  1362                           	opt stack 0
  1363  00006F                     	ds	1
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1l	equ	0xFE1
  1372                           
  1373                           	psect	bssBANK0
  1374  0000F4                     __pbssBANK0:
  1375                           	opt stack 0
  1376  0000F4                     _Nec_code:
  1377                           	opt stack 0
  1378  0000F4                     	ds	4
  1379  0000F8                     _ALARMEN:
  1380                           	opt stack 0
  1381  0000F8                     	ds	2
  1382  0000FA                     _nbr:
  1383                           	opt stack 0
  1384  0000FA                     	ds	2
  1385  0000FC                     _rps:
  1386                           	opt stack 0
  1387  0000FC                     	ds	2
  1388                           tblptru	equ	0xFF8
  1389                           tblptrh	equ	0xFF7
  1390                           tblptrl	equ	0xFF6
  1391                           tablat	equ	0xFF5
  1392                           postinc0	equ	0xFEE
  1393                           wreg	equ	0xFE8
  1394                           postdec1	equ	0xFE5
  1395                           fsr1l	equ	0xFE1
  1396                           
  1397                           	psect	dataBANK0
  1398  000080                     __pdataBANK0:
  1399                           	opt stack 0
  1400  000080                     Set_RPM_RGB@F4110:
  1401                           	opt stack 0
  1402  000080                     	ds	14
  1403  00008E                     _alarm_time:
  1404                           	opt stack 0
  1405  00008E                     	ds	9
  1406  000097                     _setup_alarm_time:
  1407                           	opt stack 0
  1408  000097                     	ds	9
  1409  0000A0                     _setup_date:
  1410                           	opt stack 0
  1411  0000A0                     	ds	9
  1412  0000A9                     _setup_time:
  1413                           	opt stack 0
  1414  0000A9                     	ds	9
  1415  0000B2                     _setup_fan_text:
  1416                           	opt stack 0
  1417  0000B2                     	ds	5
  1418  0000B7                     _Alarm_SW_Txt:
  1419                           	opt stack 0
  1420  0000B7                     	ds	4
  1421  0000BB                     _RTC_ALARM_Txt:
  1422                           	opt stack 0
  1423  0000BB                     	ds	2
  1424  0000BD                     _date:
  1425                           	opt stack 0
  1426  0000BD                     	ds	9
  1427  0000C6                     _time:
  1428                           	opt stack 0
  1429  0000C6                     	ds	9
  1430  0000CF                     _RPM_Txt:
  1431                           	opt stack 0
  1432  0000CF                     	ds	5
  1433  0000D4                     _DC_Txt:
  1434                           	opt stack 0
  1435  0000D4                     	ds	4
  1436  0000D8                     _Fan_SW_Txt:
  1437                           	opt stack 0
  1438  0000D8                     	ds	4
  1439  0000DC                     _tempC:
  1440                           	opt stack 0
  1441  0000DC                     	ds	4
  1442  0000E0                     _tempF:
  1443                           	opt stack 0
  1444  0000E0                     	ds	4
  1445                           tblptru	equ	0xFF8
  1446                           tblptrh	equ	0xFF7
  1447                           tblptrl	equ	0xFF6
  1448                           tablat	equ	0xFF5
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postdec1	equ	0xFE5
  1452                           fsr1l	equ	0xFE1
  1453                           
  1454                           	psect	dataBANK1
  1455  000100                     __pdataBANK1:
  1456                           	opt stack 0
  1457  000100                     _array1:
  1458                           	opt stack 0
  1459  000100                     	ds	21
  1460  000115                     _color:
  1461                           	opt stack 0
  1462  000115                     	ds	21
  1463  00012A                     _buffer:
  1464                           	opt stack 0
  1465  00012A                     	ds	33
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           postdec1	equ	0xFE5
  1473                           fsr1l	equ	0xFE1
  1474                           
  1475                           	psect	cstackBANK0
  1476  0000E4                     __pcstackBANK0:
  1477                           	opt stack 0
  1478  0000E4                     drawtext@x:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x0
  1482  0000E4                     	ds	1
  1483  0000E5                     drawtext@textsize:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x1
  1487  0000E5                     	ds	2
  1488  0000E7                     drawtext@i:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x3
  1492  0000E7                     	ds	2
  1493  0000E9                     drawtext@cursor_y:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x5
  1497  0000E9                     	ds	1
  1498  0000EA                     drawtext@cursor_x:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x6
  1502  0000EA                     	ds	1
  1503  0000EB                     ??_Update_Screen:
  1504                           
  1505                           ; 0 bytes @ 0x7
  1506  0000EB                     	ds	2
  1507  0000ED                     _Update_Screen$2723:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x9
  1511  0000ED                     	ds	2
  1512  0000EF                     Update_Screen@neg_tempF:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0xB
  1516  0000EF                     	ds	2
  1517  0000F1                     ??_main:
  1518                           
  1519                           ; 0 bytes @ 0xD
  1520  0000F1                     	ds	1
  1521  0000F2                     main@j:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0xE
  1525  0000F2                     	ds	2
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           postinc0	equ	0xFEE
  1531                           wreg	equ	0xFE8
  1532                           postdec1	equ	0xFE5
  1533                           fsr1l	equ	0xFE1
  1534                           
  1535                           	psect	cstackCOMRAM
  1536  000001                     __pcstackCOMRAM:
  1537                           	opt stack 0
  1538  000001                     ??_INT0_isr:
  1539  000001                     
  1540                           ; 2 bytes @ 0x0
  1541  000001                     	ds	2
  1542  000003                     ??_chkisr:
  1543                           
  1544                           ; 0 bytes @ 0x2
  1545  000003                     	ds	14
  1546  000011                     ??_isdigit:
  1547  000011                     ?_strlen:
  1548                           	opt stack 0
  1549  000011                     ?___wmul:
  1550                           	opt stack 0
  1551  000011                     ?___lwdiv:
  1552                           	opt stack 0
  1553  000011                     ?___ftpack:
  1554                           	opt stack 0
  1555  000011                     ?___fttol:
  1556                           	opt stack 0
  1557  000011                     I2C_Read@ack:
  1558                           	opt stack 0
  1559  000011                     I2C_Write@outByte:
  1560                           	opt stack 0
  1561  000011                     spiwrite@x:
  1562                           	opt stack 0
  1563  000011                     putch@c:
  1564                           	opt stack 0
  1565  000011                     OpenUSART@spbrg:
  1566                           	opt stack 0
  1567  000011                     ___wmul@multiplier:
  1568                           	opt stack 0
  1569  000011                     ___lwdiv@dividend:
  1570                           	opt stack 0
  1571  000011                     strcpy@to:
  1572                           	opt stack 0
  1573  000011                     strlen@s:
  1574                           	opt stack 0
  1575  000011                     ___ftpack@arg:
  1576                           	opt stack 0
  1577  000011                     ___fttol@f1:
  1578                           	opt stack 0
  1579  000011                     I2C_Init@c:
  1580                           	opt stack 0
  1581                           
  1582                           ; 4 bytes @ 0x10
  1583  000011                     	ds	1
  1584  000012                     I2C_Read@n:
  1585                           	opt stack 0
  1586  000012                     I2C_Write@n:
  1587                           	opt stack 0
  1588  000012                     spiwrite@spidata:
  1589                           	opt stack 0
  1590  000012                     _isdigit$2379:
  1591                           	opt stack 0
  1592                           
  1593                           ; 1 bytes @ 0x11
  1594  000012                     	ds	1
  1595  000013                     ??_strlen:
  1596  000013                     I2C_Read@inByte:
  1597                           	opt stack 0
  1598  000013                     I2C_Write_Cmd_Only@Cmd:
  1599                           	opt stack 0
  1600  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1601                           	opt stack 0
  1602  000013                     write_command@cmd_:
  1603                           	opt stack 0
  1604  000013                     write_data@data_:
  1605                           	opt stack 0
  1606  000013                     OpenUSART@config:
  1607                           	opt stack 0
  1608  000013                     isdigit@c:
  1609                           	opt stack 0
  1610  000013                     ___wmul@multiplicand:
  1611                           	opt stack 0
  1612  000013                     ___lwdiv@divisor:
  1613                           	opt stack 0
  1614  000013                     strcpy@from:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0x12
  1618  000013                     	ds	1
  1619  000014                     ?_DS1621_Read_Temp:
  1620                           	opt stack 0
  1621  000014                     I2C_Write_Cmd_Only@Device:
  1622                           	opt stack 0
  1623  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1624                           	opt stack 0
  1625  000014                     setAddrWindow@y0:
  1626                           	opt stack 0
  1627  000014                     ___ftpack@exp:
  1628                           	opt stack 0
  1629                           
  1630                           ; 1 bytes @ 0x13
  1631  000014                     	ds	1
  1632  000015                     ??___fttol:
  1633  000015                     I2C_Write_Cmd_Write_Data@Device:
  1634                           	opt stack 0
  1635  000015                     setAddrWindow@x1:
  1636                           	opt stack 0
  1637  000015                     ___ftpack@sign:
  1638                           	opt stack 0
  1639  000015                     ___lwdiv@counter:
  1640                           	opt stack 0
  1641  000015                     ___wmul@product:
  1642                           	opt stack 0
  1643  000015                     strcpy@cp:
  1644                           	opt stack 0
  1645  000015                     strlen@cp:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x14
  1649  000015                     	ds	1
  1650  000016                     ??___ftpack:
  1651  000016                     DS1621_Read_Temp@Data_Ret:
  1652                           	opt stack 0
  1653  000016                     setAddrWindow@y1:
  1654                           	opt stack 0
  1655  000016                     ___lwdiv@quotient:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x15
  1659  000016                     	ds	1
  1660  000017                     ?___awdiv:
  1661                           	opt stack 0
  1662  000017                     setAddrWindow@x0:
  1663                           	opt stack 0
  1664  000017                     delay_ms@ms:
  1665                           	opt stack 0
  1666  000017                     ___awdiv@dividend:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x16
  1670  000017                     	ds	1
  1671  000018                     ?___lwmod:
  1672                           	opt stack 0
  1673  000018                     drawPixel@y:
  1674                           	opt stack 0
  1675  000018                     drawFastVLine@y:
  1676                           	opt stack 0
  1677  000018                     fillRectangle@y:
  1678                           	opt stack 0
  1679  000018                     ___lwmod@dividend:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x17
  1683  000018                     	ds	1
  1684  000019                     ??_delay_ms:
  1685  000019                     ?___lbtoft:
  1686                           	opt stack 0
  1687  000019                     drawFastVLine@h:
  1688                           	opt stack 0
  1689  000019                     fillRectangle@w:
  1690                           	opt stack 0
  1691  000019                     drawPixel@color:
  1692                           	opt stack 0
  1693  000019                     ___awdiv@divisor:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x18
  1697  000019                     	ds	1
  1698  00001A                     fillRectangle@h:
  1699                           	opt stack 0
  1700  00001A                     ___fttol@sign1:
  1701                           	opt stack 0
  1702  00001A                     drawFastVLine@color:
  1703                           	opt stack 0
  1704  00001A                     ___lwmod@divisor:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x19
  1708  00001A                     	ds	1
  1709  00001B                     drawPixel@x:
  1710                           	opt stack 0
  1711  00001B                     ___awdiv@counter:
  1712                           	opt stack 0
  1713  00001B                     delay_ms@count:
  1714                           	opt stack 0
  1715  00001B                     fillRectangle@color:
  1716                           	opt stack 0
  1717  00001B                     ___fttol@lval:
  1718                           	opt stack 0
  1719                           
  1720                           ; 4 bytes @ 0x1A
  1721  00001B                     	ds	1
  1722  00001C                     ??_drawFastVLine:
  1723  00001C                     ___awdiv@sign:
  1724                           	opt stack 0
  1725  00001C                     ___lbtoft@c:
  1726                           	opt stack 0
  1727  00001C                     ___lwmod@counter:
  1728                           	opt stack 0
  1729  00001C                     drawCircle@x0:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x1B
  1733  00001C                     	ds	1
  1734  00001D                     ??_fillRectangle:
  1735  00001D                     ?_printf:
  1736                           	opt stack 0
  1737  00001D                     ?___ftmul:
  1738                           	opt stack 0
  1739  00001D                     printf@f:
  1740                           	opt stack 0
  1741  00001D                     ___awdiv@quotient:
  1742                           	opt stack 0
  1743  00001D                     ___ftmul@f1:
  1744                           	opt stack 0
  1745                           
  1746                           ; 3 bytes @ 0x1C
  1747  00001D                     	ds	1
  1748  00001E                     drawCircle@y0:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x1D
  1752  00001E                     	ds	1
  1753  00001F                     ?_get_RPM:
  1754                           	opt stack 0
  1755  00001F                     ?___awmod:
  1756                           	opt stack 0
  1757  00001F                     ___fttol@exp1:
  1758                           	opt stack 0
  1759  00001F                     Set_DC_RGB@duty_cycle:
  1760                           	opt stack 0
  1761  00001F                     Set_RPM_RGB@rpm:
  1762                           	opt stack 0
  1763  00001F                     ___awmod@dividend:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x1E
  1767  00001F                     	ds	1
  1768  000020                     drawFastVLine@hi:
  1769                           	opt stack 0
  1770  000020                     drawCircle@r:
  1771                           	opt stack 0
  1772  000020                     ___ftmul@f2:
  1773                           	opt stack 0
  1774                           
  1775                           ; 3 bytes @ 0x1F
  1776  000020                     	ds	1
  1777  000021                     drawFastVLine@lo:
  1778                           	opt stack 0
  1779  000021                     fillRectangle@hi:
  1780                           	opt stack 0
  1781  000021                     get_RPM@RPS:
  1782                           	opt stack 0
  1783  000021                     ___awmod@divisor:
  1784                           	opt stack 0
  1785  000021                     Set_RPM_RGB@temp:
  1786                           	opt stack 0
  1787                           
  1788                           ; 14 bytes @ 0x20
  1789  000021                     	ds	1
  1790  000022                     drawFastVLine@x:
  1791                           	opt stack 0
  1792  000022                     fillRectangle@lo:
  1793                           	opt stack 0
  1794  000022                     drawCircle@color:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x21
  1798  000022                     	ds	1
  1799  000023                     ??___ftmul:
  1800  000023                     fillRect@y:
  1801                           	opt stack 0
  1802  000023                     fillRectangle@x:
  1803                           	opt stack 0
  1804  000023                     ___awmod@counter:
  1805                           	opt stack 0
  1806                           
  1807                           ; 1 bytes @ 0x22
  1808  000023                     	ds	1
  1809  000024                     ??_drawCircle:
  1810  000024                     fillRect@w:
  1811                           	opt stack 0
  1812  000024                     ___awmod@sign:
  1813                           	opt stack 0
  1814  000024                     fillScreen@color:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x23
  1818  000024                     	ds	1
  1819  000025                     fillRect@h:
  1820                           	opt stack 0
  1821                           
  1822                           ; 1 bytes @ 0x24
  1823  000025                     	ds	1
  1824  000026                     ___ftmul@exp:
  1825                           	opt stack 0
  1826  000026                     fillRect@color:
  1827                           	opt stack 0
  1828  000026                     drawCircle@ddF_x:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x25
  1832  000026                     	ds	1
  1833  000027                     ___ftmul@f3_as_product:
  1834                           	opt stack 0
  1835                           
  1836                           ; 3 bytes @ 0x26
  1837  000027                     	ds	1
  1838  000028                     ??_fillRect:
  1839  000028                     drawCircle@ddF_y:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x27
  1843  000028                     	ds	2
  1844  00002A                     ___ftmul@cntr:
  1845                           	opt stack 0
  1846  00002A                     drawCircle@f:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x29
  1850  00002A                     	ds	1
  1851  00002B                     ??_printf:
  1852  00002B                     fillRect@x:
  1853                           	opt stack 0
  1854  00002B                     ___ftmul@sign:
  1855                           	opt stack 0
  1856                           
  1857                           ; 1 bytes @ 0x2A
  1858  00002B                     	ds	1
  1859  00002C                     ?___ftdiv:
  1860                           	opt stack 0
  1861  00002C                     fillRect@i:
  1862                           	opt stack 0
  1863  00002C                     drawCircle@x:
  1864                           	opt stack 0
  1865  00002C                     ___ftdiv@f1:
  1866                           	opt stack 0
  1867                           
  1868                           ; 3 bytes @ 0x2B
  1869  00002C                     	ds	2
  1870  00002E                     drawChar@y:
  1871                           	opt stack 0
  1872  00002E                     drawCircle@y:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x2D
  1876  00002E                     	ds	1
  1877  00002F                     drawChar@c:
  1878                           	opt stack 0
  1879  00002F                     printf@idx:
  1880                           	opt stack 0
  1881  00002F                     ___ftdiv@f2:
  1882                           	opt stack 0
  1883                           
  1884                           ; 3 bytes @ 0x2E
  1885  00002F                     	ds	1
  1886  000030                     drawChar@color:
  1887                           	opt stack 0
  1888  000030                     printf@ap:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x2F
  1892  000030                     	ds	2
  1893  000032                     ??___ftdiv:
  1894  000032                     printf@prec:
  1895                           	opt stack 0
  1896  000032                     drawChar@bg:
  1897                           	opt stack 0
  1898                           
  1899                           ; 2 bytes @ 0x31
  1900  000032                     	ds	1
  1901  000033                     printf@val:
  1902                           	opt stack 0
  1903                           
  1904                           ; 2 bytes @ 0x32
  1905  000033                     	ds	1
  1906  000034                     drawChar@size:
  1907                           	opt stack 0
  1908                           
  1909                           ; 1 bytes @ 0x33
  1910  000034                     	ds	1
  1911  000035                     drawChar@line:
  1912                           	opt stack 0
  1913  000035                     printf@flag:
  1914                           	opt stack 0
  1915  000035                     ___ftdiv@cntr:
  1916                           	opt stack 0
  1917                           
  1918                           ; 1 bytes @ 0x34
  1919  000035                     	ds	1
  1920  000036                     drawChar@x:
  1921                           	opt stack 0
  1922  000036                     printf@width:
  1923                           	opt stack 0
  1924  000036                     ___ftdiv@f3:
  1925                           	opt stack 0
  1926                           
  1927                           ; 3 bytes @ 0x35
  1928  000036                     	ds	1
  1929  000037                     drawChar@j:
  1930                           	opt stack 0
  1931                           
  1932                           ; 1 bytes @ 0x36
  1933  000037                     	ds	1
  1934  000038                     drawChar@i:
  1935                           	opt stack 0
  1936  000038                     printf@c:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x37
  1940  000038                     	ds	1
  1941  000039                     drawtext@y:
  1942                           	opt stack 0
  1943  000039                     ___ftdiv@exp:
  1944                           	opt stack 0
  1945                           
  1946                           ; 1 bytes @ 0x38
  1947  000039                     	ds	1
  1948  00003A                     ___ftdiv@sign:
  1949                           	opt stack 0
  1950  00003A                     drawtext@_text:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x39
  1954  00003A                     	ds	1
  1955  00003B                     ??_do_update_pwm:
  1956                           
  1957                           ; 0 bytes @ 0x3A
  1958  00003B                     	ds	1
  1959  00003C                     drawtext@color:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0x3B
  1963  00003C                     	ds	2
  1964  00003E                     drawtext@bg:
  1965                           	opt stack 0
  1966  00003E                     do_update_pwm@dc_f:
  1967                           	opt stack 0
  1968                           
  1969                           ; 3 bytes @ 0x3D
  1970  00003E                     	ds	2
  1971  000040                     drawtext@size:
  1972                           	opt stack 0
  1973                           
  1974                           ; 1 bytes @ 0x3F
  1975  000040                     	ds	1
  1976  000041                     ??_drawtext:
  1977  000041                     do_update_pwm@duty_cycle:
  1978                           	opt stack 0
  1979                           
  1980                           ; 1 bytes @ 0x40
  1981  000041                     	ds	1
  1982  000042                     do_update_pwm@dc_I:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x41
  1986  000042                     	ds	1
  1987  000043                     
  1988                           ; 0 bytes @ 0x42
  1989  000043                     	ds	1
  1990  000044                     tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           postdec1	equ	0xFE5
  1997                           fsr1l	equ	0xFE1
  1998                           
  1999                           ; 0 bytes @ 0x43
  2000 ;;
  2001 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2002 ;;
  2003 ;; *************** function _main *****************
  2004 ;; Defined at:
  2005 ;;		line 151 in file "Lab12pE.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;		None
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  j               2   14[BANK0 ] int 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;		None               void
  2012 ;; Registers used:
  2013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;Total ram usage:        3 bytes
  2024 ;; Hardware stack levels required when called:   11
  2025 ;; This function calls:
  2026 ;;		_DS1621_Read_Temp
  2027 ;;		_DS3231_Read_Time
  2028 ;;		_DS3231_Setup_Time
  2029 ;;		_Decrease_Speed
  2030 ;;		_Do_Beep
  2031 ;;		_Do_Init
  2032 ;;		_Increase_Speed
  2033 ;;		_Initialize_Screen
  2034 ;;		_Set_DC_RGB
  2035 ;;		_Set_RPM_RGB
  2036 ;;		_Toggle_Fan
  2037 ;;		_Update_Screen
  2038 ;;		_Wait_Half_Second
  2039 ;;		___awdiv
  2040 ;;		___wmul
  2041 ;;		_get_RPM
  2042 ;;		_printf
  2043 ;; This function is called by:
  2044 ;;		Startup code after reset
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text0
  2049  0009BC                     __ptext0:
  2050                           	opt stack 0
  2051  0009BC                     _main:
  2052                           	opt stack 20
  2053                           
  2054                           ;Lab12pE.c: 153: Do_Init();
  2055                           
  2056                           ;incstack = 0
  2057  0009BC  EC0A  F00F         	call	_Do_Init	;wreg free
  2058                           
  2059                           ;Lab12pE.c: 154: Initialize_Screen();
  2060  0009C0  ECA9  F003         	call	_Initialize_Screen	;wreg free
  2061                           
  2062                           ;Lab12pE.c: 212: PORTAbits.RA4 = 0;
  2063  0009C4  9880               	bcf	3968,4,c	;volatile
  2064                           
  2065                           ;Lab12pE.c: 213: duty_cycle = 50;
  2066  0009C6  0E32               	movlw	50
  2067  0009C8  6E5C               	movwf	_duty_cycle,c
  2068  0009CA  D000               	goto	l6913
  2069  0009CC                     l6913:
  2070                           
  2071                           ;Lab12pE.c: 215: {
  2072                           ;Lab12pE.c: 217: DS3231_Read_Time();
  2073  0009CC  EC3F  F00E         	call	_DS3231_Read_Time	;wreg free
  2074                           
  2075                           ;Lab12pE.c: 219: if(tempSecond != second)
  2076  0009D0  5062               	movf	_second,w,c
  2077  0009D2  186E               	xorwf	_tempSecond,w,c
  2078  0009D4  B4D8               	btfsc	status,2,c
  2079  0009D6  D05E               	goto	l6933
  2080                           
  2081                           ;Lab12pE.c: 220: {
  2082                           ;Lab12pE.c: 221: tempSecond = second;
  2083  0009D8  C062  F06E         	movff	_second,_tempSecond
  2084                           
  2085                           ;Lab12pE.c: 222: DS1621_tempC = DS1621_Read_Temp();
  2086  0009DC  EC66  F010         	call	_DS1621_Read_Temp	;wreg free
  2087  0009E0  C014  F044         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2088  0009E4  C015  F045         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2089                           
  2090                           ;Lab12pE.c: 223: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2091  0009E8  C044  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2092  0009EC  C045  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2093  0009F0  0E00               	movlw	0
  2094  0009F2  6E14               	movwf	___wmul@multiplicand+1,c
  2095  0009F4  0E09               	movlw	9
  2096  0009F6  6E13               	movwf	___wmul@multiplicand,c
  2097  0009F8  EC93  F010         	call	___wmul	;wreg free
  2098  0009FC  C011  F017         	movff	?___wmul,___awdiv@dividend
  2099  000A00  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2100  000A04  0E00               	movlw	0
  2101  000A06  6E1A               	movwf	___awdiv@divisor+1,c
  2102  000A08  0E05               	movlw	5
  2103  000A0A  6E19               	movwf	___awdiv@divisor,c
  2104  000A0C  EC2B  F00C         	call	___awdiv	;wreg free
  2105  000A10  0E20               	movlw	32
  2106  000A12  2417               	addwf	?___awdiv,w,c
  2107  000A14  6E46               	movwf	_DS1621_tempF,c
  2108  000A16  0E00               	movlw	0
  2109  000A18  2018               	addwfc	?___awdiv+1,w,c
  2110  000A1A  6E47               	movwf	_DS1621_tempF+1,c
  2111                           
  2112                           ;Lab12pE.c: 224: rpm = get_RPM();
  2113  000A1C  EC9F  F00F         	call	_get_RPM	;wreg free
  2114  000A20  C01F  F04C         	movff	?_get_RPM,_rpm
  2115  000A24  C020  F04D         	movff	?_get_RPM+1,_rpm+1
  2116                           
  2117                           ;Lab12pE.c: 225: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  2118  000A28  0E06               	movlw	low STR_14
  2119  000A2A  6E1D               	movwf	printf@f,c
  2120  000A2C  0EFF               	movlw	high STR_14
  2121  000A2E  6E1E               	movwf	printf@f+1,c
  2122  000A30  C05E  F01F         	movff	_hour,?_printf+2
  2123  000A34  6A20               	clrf	?_printf+3,c
  2124  000A36  C05F  F021         	movff	_minute,?_printf+4
  2125  000A3A  6A22               	clrf	?_printf+5,c
  2126  000A3C  C062  F023         	movff	_second,?_printf+6
  2127  000A40  6A24               	clrf	?_printf+7,c
  2128  000A42  C060  F025         	movff	_month,?_printf+8
  2129  000A46  6A26               	clrf	?_printf+9,c
  2130  000A48  C05A  F027         	movff	_day,?_printf+10
  2131  000A4C  6A28               	clrf	?_printf+11,c
  2132  000A4E  C06C  F029         	movff	_year,?_printf+12
  2133  000A52  6A2A               	clrf	?_printf+13,c
  2134  000A54  ECFC  F001         	call	_printf	;wreg free
  2135                           
  2136                           ;Lab12pE.c: 226: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2137  000A58  0E50               	movlw	low STR_15
  2138  000A5A  6E1D               	movwf	printf@f,c
  2139  000A5C  0EFF               	movlw	high STR_15
  2140  000A5E  6E1E               	movwf	printf@f+1,c
  2141  000A60  C044  F01F         	movff	_DS1621_tempC,?_printf+2
  2142  000A64  C045  F020         	movff	_DS1621_tempC+1,?_printf+3
  2143  000A68  C046  F021         	movff	_DS1621_tempF,?_printf+4
  2144  000A6C  C047  F022         	movff	_DS1621_tempF+1,?_printf+5
  2145  000A70  ECFC  F001         	call	_printf	;wreg free
  2146                           
  2147                           ;Lab12pE.c: 227: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2148  000A74  0E65               	movlw	low STR_16
  2149  000A76  6E1D               	movwf	printf@f,c
  2150  000A78  0EFF               	movlw	high STR_16
  2151  000A7A  6E1E               	movwf	printf@f+1,c
  2152  000A7C  C04C  F01F         	movff	_rpm,?_printf+2
  2153  000A80  C04D  F020         	movff	_rpm+1,?_printf+3
  2154  000A84  C05C  F021         	movff	_duty_cycle,?_printf+4
  2155  000A88  6A22               	clrf	?_printf+5,c
  2156  000A8A  ECFC  F001         	call	_printf	;wreg free
  2157                           
  2158                           ;Lab12pE.c: 228: Update_Screen();
  2159  000A8E  EC0E  F000         	call	_Update_Screen	;wreg free
  2160  000A92  D000               	goto	l6933
  2161  000A94                     l6933:
  2162                           
  2163                           ;Lab12pE.c: 229: }
  2164                           ;Lab12pE.c: 231: if (nec_ok == 1)
  2165  000A94  044A               	decf	_nec_ok,w,c
  2166  000A96  104B               	iorwf	_nec_ok+1,w,c
  2167  000A98  A4D8               	btfss	status,2,c
  2168  000A9A  D086               	goto	l6995
  2169                           
  2170                           ;Lab12pE.c: 232: {
  2171                           ;Lab12pE.c: 233: nec_ok = 0;
  2172  000A9C  0E00               	movlw	0
  2173  000A9E  6E4B               	movwf	_nec_ok+1,c
  2174  000AA0  0E00               	movlw	0
  2175  000AA2  6E4A               	movwf	_nec_ok,c
  2176                           
  2177                           ;Lab12pE.c: 235: printf ("NEC_Code = %x\r\n", Nec_code1);
  2178  000AA4  0EB1               	movlw	low STR_17
  2179  000AA6  6E1D               	movwf	printf@f,c
  2180  000AA8  0EFF               	movlw	high STR_17
  2181  000AAA  6E1E               	movwf	printf@f+1,c
  2182  000AAC  C051  F01F         	movff	_Nec_code1,?_printf+2
  2183  000AB0  6A20               	clrf	?_printf+3,c
  2184  000AB2  ECFC  F001         	call	_printf	;wreg free
  2185                           
  2186                           ;Lab12pE.c: 237: INTCONbits.INT0IE = 1;
  2187  000AB6  88F2               	bsf	intcon,4,c	;volatile
  2188                           
  2189                           ;Lab12pE.c: 238: INTCON2bits.INTEDG0 = 0;
  2190  000AB8  9CF1               	bcf	intcon2,6,c	;volatile
  2191                           
  2192                           ;Lab12pE.c: 240: found = 0xff;
  2193  000ABA  685D               	setf	_found,c
  2194                           
  2195                           ;Lab12pE.c: 241: for (int j=0; j< 21; j++)
  2196  000ABC  0E00               	movlw	0
  2197  000ABE  0100               	movlb	0	; () banked
  2198  000AC0  6FF3               	movwf	(main@j+1)& (0+255),b
  2199  000AC2  0E00               	movlw	0
  2200  000AC4  6FF2               	movwf	main@j& (0+255),b
  2201  000AC6                     l6947:
  2202                           
  2203                           ; BSR set to: 0
  2204  000AC6  0100               	movlb	0	; () banked
  2205  000AC8  BFF3               	btfsc	(main@j+1)& (0+255),7,b
  2206  000ACA  D00A               	goto	l6951
  2207  000ACC  0100               	movlb	0	; () banked
  2208  000ACE  51F3               	movf	(main@j+1)& (0+255),w,b
  2209  000AD0  E120               	bnz	l6961
  2210  000AD2  0E15               	movlw	21
  2211  000AD4  0100               	movlb	0	; () banked
  2212  000AD6  5DF2               	subwf	main@j& (0+255),w,b
  2213  000AD8  B0D8               	btfsc	status,0,c
  2214  000ADA  D01B               	goto	l6961
  2215  000ADC  D001               	goto	l6951
  2216                           
  2217                           ; BSR set to: 0
  2218  000ADE  D019               	goto	l6961
  2219  000AE0                     l6951:
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;Lab12pE.c: 242: {
  2223                           ;Lab12pE.c: 243: if (Nec_code1 == array1[j])
  2224  000AE0  0E00               	movlw	low _array1
  2225  000AE2  0100               	movlb	0	; () banked
  2226  000AE4  25F2               	addwf	main@j& (0+255),w,b
  2227  000AE6  6ED9               	movwf	fsr2l,c
  2228  000AE8  0E01               	movlw	high _array1
  2229  000AEA  0100               	movlb	0	; () banked
  2230  000AEC  21F3               	addwfc	(main@j+1)& (0+255),w,b
  2231  000AEE  6EDA               	movwf	fsr2h,c
  2232  000AF0  5051               	movf	_Nec_code1,w,c
  2233  000AF2  18DE               	xorwf	postinc2,w,c
  2234  000AF4  A4D8               	btfss	status,2,c
  2235  000AF6  D008               	goto	l6957
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;Lab12pE.c: 244: {
  2239                           ;Lab12pE.c: 245: found = j;
  2240  000AF8  C0F2  F05D         	movff	main@j,_found
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;Lab12pE.c: 246: j = 21;
  2244  000AFC  0E00               	movlw	0
  2245  000AFE  0100               	movlb	0	; () banked
  2246  000B00  6FF3               	movwf	(main@j+1)& (0+255),b
  2247  000B02  0E15               	movlw	21
  2248  000B04  6FF2               	movwf	main@j& (0+255),b
  2249  000B06  D000               	goto	l6957
  2250  000B08                     l6957:
  2251                           
  2252                           ; BSR set to: 0
  2253  000B08  0100               	movlb	0	; () banked
  2254  000B0A  4BF2               	infsnz	main@j& (0+255),f,b
  2255  000B0C  2BF3               	incf	(main@j+1)& (0+255),f,b
  2256  000B0E  D7DB               	goto	l6947
  2257                           
  2258                           ; BSR set to: 0
  2259  000B10  D000               	goto	l6961
  2260  000B12                     l6961:
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;Lab12pE.c: 247: }
  2264                           ;Lab12pE.c: 248: }
  2265                           ;Lab12pE.c: 250: if (found == 0xff)
  2266  000B12  285D               	incf	_found,w,c
  2267  000B14  A4D8               	btfss	status,2,c
  2268  000B16  D007               	goto	l6965
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;Lab12pE.c: 251: {
  2272                           ;Lab12pE.c: 252: printf ("Cannot find button \r\n");
  2273  000B18  0E24               	movlw	low STR_18
  2274  000B1A  6E1D               	movwf	printf@f,c
  2275  000B1C  0EFF               	movlw	high STR_18
  2276  000B1E  6E1E               	movwf	printf@f+1,c
  2277  000B20  ECFC  F001         	call	_printf	;wreg free
  2278                           
  2279                           ;Lab12pE.c: 253: }
  2280  000B24  D03C               	goto	l6989
  2281  000B26                     l6965:
  2282                           
  2283                           ;Lab12pE.c: 254: else
  2284                           ;Lab12pE.c: 255: {
  2285                           ;Lab12pE.c: 256: Do_Beep();
  2286  000B26  EC82  F011         	call	_Do_Beep	;wreg free
  2287                           
  2288                           ;Lab12pE.c: 257: printf ("button = %d \r\n", found);
  2289  000B2A  0EC1               	movlw	low STR_19
  2290  000B2C  6E1D               	movwf	printf@f,c
  2291  000B2E  0EFF               	movlw	high STR_19
  2292  000B30  6E1E               	movwf	printf@f+1,c
  2293  000B32  C05D  F01F         	movff	_found,?_printf+2
  2294  000B36  6A20               	clrf	?_printf+3,c
  2295  000B38  ECFC  F001         	call	_printf	;wreg free
  2296                           
  2297                           ;Lab12pE.c: 259: if(found == 5)
  2298  000B3C  0E05               	movlw	5
  2299  000B3E  185D               	xorwf	_found,w,c
  2300  000B40  A4D8               	btfss	status,2,c
  2301  000B42  D003               	goto	l6973
  2302                           
  2303                           ;Lab12pE.c: 260: {
  2304                           ;Lab12pE.c: 261: Toggle_Fan();
  2305  000B44  EC64  F011         	call	_Toggle_Fan	;wreg free
  2306                           
  2307                           ;Lab12pE.c: 263: }
  2308  000B48  D015               	goto	l6985
  2309  000B4A                     l6973:
  2310                           
  2311                           ;Lab12pE.c: 264: else if(found == 6)
  2312  000B4A  0E06               	movlw	6
  2313  000B4C  185D               	xorwf	_found,w,c
  2314  000B4E  A4D8               	btfss	status,2,c
  2315  000B50  D003               	goto	l6977
  2316                           
  2317                           ;Lab12pE.c: 265: {
  2318                           ;Lab12pE.c: 266: Decrease_Speed();
  2319  000B52  ECDD  F010         	call	_Decrease_Speed	;wreg free
  2320                           
  2321                           ;Lab12pE.c: 268: }
  2322  000B56  D00E               	goto	l6985
  2323  000B58                     l6977:
  2324                           
  2325                           ;Lab12pE.c: 269: else if(found == 7)
  2326  000B58  0E07               	movlw	7
  2327  000B5A  185D               	xorwf	_found,w,c
  2328  000B5C  A4D8               	btfss	status,2,c
  2329  000B5E  D003               	goto	l6981
  2330                           
  2331                           ;Lab12pE.c: 270: {
  2332                           ;Lab12pE.c: 271: Increase_Speed();
  2333  000B60  ECBA  F010         	call	_Increase_Speed	;wreg free
  2334                           
  2335                           ;Lab12pE.c: 273: }
  2336  000B64  D007               	goto	l6985
  2337  000B66                     l6981:
  2338                           
  2339                           ;Lab12pE.c: 274: else if(found == 8)
  2340  000B66  0E08               	movlw	8
  2341  000B68  185D               	xorwf	_found,w,c
  2342  000B6A  A4D8               	btfss	status,2,c
  2343  000B6C  D003               	goto	l6985
  2344                           
  2345                           ;Lab12pE.c: 275: {
  2346                           ;Lab12pE.c: 276: DS3231_Setup_Time();
  2347  000B6E  EC11  F00E         	call	_DS3231_Setup_Time	;wreg free
  2348  000B72  D000               	goto	l6985
  2349  000B74                     l6985:
  2350                           
  2351                           ;Lab12pE.c: 278: }
  2352                           ;Lab12pE.c: 279: PORTD = color[found] << 4;
  2353  000B74  505D               	movf	_found,w,c
  2354  000B76  0D01               	mullw	1
  2355  000B78  0E15               	movlw	low _color
  2356  000B7A  24F3               	addwf	prodl,w,c
  2357  000B7C  6ED9               	movwf	fsr2l,c
  2358  000B7E  0E01               	movlw	high _color
  2359  000B80  20F4               	addwfc	prodh,w,c
  2360  000B82  6EDA               	movwf	fsr2h,c
  2361  000B84  50DF               	movf	indf2,w,c
  2362  000B86  0100               	movlb	0	; () banked
  2363  000B88  6FF1               	movwf	??_main& (0+255),b
  2364  000B8A  0100               	movlb	0	; () banked
  2365  000B8C  39F1               	swapf	??_main& (0+255),w,b
  2366  000B8E  0BF0               	andlw	240
  2367  000B90  6E83               	movwf	3971,c	;volatile
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;Lab12pE.c: 280: Set_DC_RGB(duty_cycle);
  2371  000B92  C05C  F01F         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2372  000B96  6A20               	clrf	Set_DC_RGB@duty_cycle+1,c
  2373  000B98  EC1B  F010         	call	_Set_DC_RGB	;wreg free
  2374  000B9C  D000               	goto	l6989
  2375  000B9E                     l6989:
  2376                           
  2377                           ;Lab12pE.c: 281: }
  2378                           ;Lab12pE.c: 282: PORTBbits.RB7 = 1;
  2379  000B9E  8E81               	bsf	3969,7,c	;volatile
  2380                           
  2381                           ;Lab12pE.c: 283: Wait_Half_Second();
  2382  000BA0  EC40  F011         	call	_Wait_Half_Second	;wreg free
  2383                           
  2384                           ;Lab12pE.c: 284: PORTBbits.RB7 = 0;
  2385  000BA4  9E81               	bcf	3969,7,c	;volatile
  2386  000BA6  D000               	goto	l6995
  2387  000BA8                     l6995:
  2388                           
  2389                           ;Lab12pE.c: 285: }
  2390                           ;Lab12pE.c: 286: Set_RPM_RGB(rpm);
  2391  000BA8  C04C  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2392  000BAC  C04D  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2393  000BB0  EC6B  F00E         	call	_Set_RPM_RGB	;wreg free
  2394  000BB4  D70B               	goto	l6913
  2395  000BB6  EF0C  F000         	goto	start
  2396  000BBA                     __end_of_main:
  2397                           	opt stack 0
  2398                           tblptru	equ	0xFF8
  2399                           tblptrh	equ	0xFF7
  2400                           tblptrl	equ	0xFF6
  2401                           tablat	equ	0xFF5
  2402                           prodh	equ	0xFF4
  2403                           prodl	equ	0xFF3
  2404                           intcon	equ	0xFF2
  2405                           intcon2	equ	0xFF1
  2406                           postinc0	equ	0xFEE
  2407                           wreg	equ	0xFE8
  2408                           postdec1	equ	0xFE5
  2409                           fsr1l	equ	0xFE1
  2410                           indf2	equ	0xFDF
  2411                           postinc2	equ	0xFDE
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function _get_RPM *****************
  2417 ;; Defined at:
  2418 ;;		line 9 in file "Fan_Support.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  RPS             2   32[COMRAM] int 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  2   30[COMRAM] int 
  2425 ;; Registers used:
  2426 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;Total ram usage:        4 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    4
  2439 ;; This function calls:
  2440 ;;		___awdiv
  2441 ;;		___wmul
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text1
  2448  001F3E                     __ptext1:
  2449                           	opt stack 0
  2450  001F3E                     _get_RPM:
  2451                           	opt stack 26
  2452                           
  2453                           ;Fan_Support.c: 11: int RPS = TMR3L / 2;
  2454                           
  2455                           ;incstack = 0
  2456  001F3E  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  2457  001F42  6A18               	clrf	___awdiv@dividend+1,c
  2458  001F44  0E00               	movlw	0
  2459  001F46  6E1A               	movwf	___awdiv@divisor+1,c
  2460  001F48  0E02               	movlw	2
  2461  001F4A  6E19               	movwf	___awdiv@divisor,c
  2462  001F4C  EC2B  F00C         	call	___awdiv	;wreg free
  2463  001F50  C017  F021         	movff	?___awdiv,get_RPM@RPS
  2464  001F54  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  2465                           
  2466                           ;Fan_Support.c: 13: TMR3L = 0;
  2467  001F58  0E00               	movlw	0
  2468  001F5A  6EB2               	movwf	4018,c	;volatile
  2469                           
  2470                           ;Fan_Support.c: 14: return (RPS * 60);
  2471  001F5C  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  2472  001F60  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  2473  001F64  0E00               	movlw	0
  2474  001F66  6E14               	movwf	___wmul@multiplicand+1,c
  2475  001F68  0E3C               	movlw	60
  2476  001F6A  6E13               	movwf	___wmul@multiplicand,c
  2477  001F6C  EC93  F010         	call	___wmul	;wreg free
  2478  001F70  C011  F01F         	movff	?___wmul,?_get_RPM
  2479  001F74  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  2480  001F78  D000               	goto	l33
  2481  001F7A                     l33:
  2482  001F7A  0012               	return		;funcret
  2483  001F7C                     __end_of_get_RPM:
  2484                           	opt stack 0
  2485                           tblptru	equ	0xFF8
  2486                           tblptrh	equ	0xFF7
  2487                           tblptrl	equ	0xFF6
  2488                           tablat	equ	0xFF5
  2489                           prodh	equ	0xFF4
  2490                           prodl	equ	0xFF3
  2491                           intcon	equ	0xFF2
  2492                           intcon2	equ	0xFF1
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           postdec1	equ	0xFE5
  2496                           fsr1l	equ	0xFE1
  2497                           indf2	equ	0xFDF
  2498                           postinc2	equ	0xFDE
  2499                           fsr2h	equ	0xFDA
  2500                           fsr2l	equ	0xFD9
  2501                           status	equ	0xFD8
  2502                           
  2503 ;; *************** function _Update_Screen *****************
  2504 ;; Defined at:
  2505 ;;		line 69 in file "Main_Screen.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  neg_tempF       2   11[BANK0 ] int 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;		None               void
  2512 ;; Registers used:
  2513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;Total ram usage:        6 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:   10
  2526 ;; This function calls:
  2527 ;;		___awdiv
  2528 ;;		___awmod
  2529 ;;		_drawtext
  2530 ;;		_strcpy
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text2
  2537  00001C                     __ptext2:
  2538                           	opt stack 0
  2539  00001C                     _Update_Screen:
  2540                           	opt stack 20
  2541                           
  2542                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  2543                           
  2544                           ;incstack = 0
  2545  00001C  AE44               	btfss	_DS1621_tempC,7,c
  2546  00001E  D01C               	goto	l6461
  2547                           
  2548                           ;Main_Screen.c: 72: {
  2549                           ;Main_Screen.c: 73: tempC[0] = '-';
  2550  000020  0E2D               	movlw	45
  2551  000022  0100               	movlb	0	; () banked
  2552  000024  6FDC               	movwf	_tempC& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  2556  000026  0E7F               	movlw	127
  2557  000028  1444               	andwf	_DS1621_tempC,w,c
  2558  00002A  6E17               	movwf	___awdiv@dividend,c
  2559  00002C  6A18               	clrf	___awdiv@dividend+1,c
  2560  00002E  0E00               	movlw	0
  2561  000030  6E1A               	movwf	___awdiv@divisor+1,c
  2562  000032  0E0A               	movlw	10
  2563  000034  6E19               	movwf	___awdiv@divisor,c
  2564  000036  EC2B  F00C         	call	___awdiv	;wreg free
  2565  00003A  5017               	movf	?___awdiv,w,c
  2566  00003C  0F30               	addlw	48
  2567  00003E  0100               	movlb	0	; () banked
  2568  000040  6FDD               	movwf	(_tempC+1)& (0+255),b
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  2572  000042  0E7F               	movlw	127
  2573  000044  1444               	andwf	_DS1621_tempC,w,c
  2574  000046  6E1F               	movwf	___awmod@dividend,c
  2575  000048  6A20               	clrf	___awmod@dividend+1,c
  2576  00004A  0E00               	movlw	0
  2577  00004C  6E22               	movwf	___awmod@divisor+1,c
  2578  00004E  0E0A               	movlw	10
  2579  000050  6E21               	movwf	___awmod@divisor,c
  2580  000052  ECBA  F00C         	call	___awmod	;wreg free
  2581  000056  D01B               	goto	L1
  2582  000058                     l6461:
  2583                           
  2584                           ;Main_Screen.c: 77: else
  2585                           ;Main_Screen.c: 78: {
  2586                           ;Main_Screen.c: 79: tempC[0] = '+';
  2587  000058  0E2B               	movlw	43
  2588  00005A  0100               	movlb	0	; () banked
  2589  00005C  6FDC               	movwf	_tempC& (0+255),b
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  2593  00005E  C044  F017         	movff	_DS1621_tempC,___awdiv@dividend
  2594  000062  C045  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  2595  000066  0E00               	movlw	0
  2596  000068  6E1A               	movwf	___awdiv@divisor+1,c
  2597  00006A  0E0A               	movlw	10
  2598  00006C  6E19               	movwf	___awdiv@divisor,c
  2599  00006E  EC2B  F00C         	call	___awdiv	;wreg free
  2600  000072  5017               	movf	?___awdiv,w,c
  2601  000074  0F30               	addlw	48
  2602  000076  0100               	movlb	0	; () banked
  2603  000078  6FDD               	movwf	(_tempC+1)& (0+255),b
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  2607  00007A  C044  F01F         	movff	_DS1621_tempC,___awmod@dividend
  2608  00007E  C045  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  2609  000082  0E00               	movlw	0
  2610  000084  6E22               	movwf	___awmod@divisor+1,c
  2611  000086  0E0A               	movlw	10
  2612  000088  6E21               	movwf	___awmod@divisor,c
  2613  00008A  ECBA  F00C         	call	___awmod	;wreg free
  2614  00008E                     L1:
  2615  00008E  501F               	movf	?___awmod,w,c
  2616  000090  0F30               	addlw	48
  2617  000092  0100               	movlb	0	; () banked
  2618  000094  6FDE               	movwf	(_tempC+2)& (0+255),b
  2619  000096  D000               	goto	l6467
  2620  000098                     l6467:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;Main_Screen.c: 82: }
  2624                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  2625  000098  AE47               	btfss	_DS1621_tempF+1,7,c
  2626  00009A  D029               	goto	l6477
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;Main_Screen.c: 85: {
  2630                           ;Main_Screen.c: 86: tempF[0] = '-';
  2631  00009C  0E2D               	movlw	45
  2632  00009E  0100               	movlb	0	; () banked
  2633  0000A0  6FE0               	movwf	_tempF& (0+255),b
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  2637  0000A2  C046  F0EB         	movff	_DS1621_tempF,??_Update_Screen
  2638  0000A6  C047  F0EC         	movff	_DS1621_tempF+1,??_Update_Screen+1
  2639  0000AA  0100               	movlb	0	; () banked
  2640  0000AC  1FEB               	comf	??_Update_Screen& (0+255),f,b
  2641  0000AE  1FEC               	comf	(??_Update_Screen+1)& (0+255),f,b
  2642  0000B0  4BEB               	infsnz	??_Update_Screen& (0+255),f,b
  2643  0000B2  2BEC               	incf	(??_Update_Screen+1)& (0+255),f,b
  2644  0000B4  C0EB  F0EF         	movff	??_Update_Screen,Update_Screen@neg_tempF
  2645  0000B8  C0EC  F0F0         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  2649  0000BC  C0EF  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  2650  0000C0  C0F0  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  2651  0000C4  0E00               	movlw	0
  2652  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  2653  0000C8  0E0A               	movlw	10
  2654  0000CA  6E19               	movwf	___awdiv@divisor,c
  2655  0000CC  EC2B  F00C         	call	___awdiv	;wreg free
  2656  0000D0  5017               	movf	?___awdiv,w,c
  2657  0000D2  0F30               	addlw	48
  2658  0000D4  0100               	movlb	0	; () banked
  2659  0000D6  6FE1               	movwf	(_tempF+1)& (0+255),b
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  2663  0000D8  C0EF  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  2664  0000DC  C0F0  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  2665  0000E0  0E00               	movlw	0
  2666  0000E2  6E22               	movwf	___awmod@divisor+1,c
  2667  0000E4  0E0A               	movlw	10
  2668  0000E6  6E21               	movwf	___awmod@divisor,c
  2669  0000E8  ECBA  F00C         	call	___awmod	;wreg free
  2670  0000EC  D01B               	goto	L2
  2671  0000EE                     l6477:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;Main_Screen.c: 91: else
  2675                           ;Main_Screen.c: 92: {
  2676                           ;Main_Screen.c: 93: tempF[0] = '+';
  2677  0000EE  0E2B               	movlw	43
  2678  0000F0  0100               	movlb	0	; () banked
  2679  0000F2  6FE0               	movwf	_tempF& (0+255),b
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  2683  0000F4  C046  F017         	movff	_DS1621_tempF,___awdiv@dividend
  2684  0000F8  C047  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  2685  0000FC  0E00               	movlw	0
  2686  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  2687  000100  0E0A               	movlw	10
  2688  000102  6E19               	movwf	___awdiv@divisor,c
  2689  000104  EC2B  F00C         	call	___awdiv	;wreg free
  2690  000108  5017               	movf	?___awdiv,w,c
  2691  00010A  0F30               	addlw	48
  2692  00010C  0100               	movlb	0	; () banked
  2693  00010E  6FE1               	movwf	(_tempF+1)& (0+255),b
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  2697  000110  C046  F01F         	movff	_DS1621_tempF,___awmod@dividend
  2698  000114  C047  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  2699  000118  0E00               	movlw	0
  2700  00011A  6E22               	movwf	___awmod@divisor+1,c
  2701  00011C  0E0A               	movlw	10
  2702  00011E  6E21               	movwf	___awmod@divisor,c
  2703  000120  ECBA  F00C         	call	___awmod	;wreg free
  2704  000124                     L2:
  2705  000124  501F               	movf	?___awmod,w,c
  2706  000126  0F30               	addlw	48
  2707  000128  0100               	movlb	0	; () banked
  2708  00012A  6FE2               	movwf	(_tempF+2)& (0+255),b
  2709  00012C  D000               	goto	l6483
  2710  00012E                     l6483:
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;Main_Screen.c: 96: }
  2714                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  2715  00012E  385E               	swapf	_hour,w,c
  2716  000130  0B0F               	andlw	15
  2717  000132  0F30               	addlw	48
  2718  000134  0100               	movlb	0	; () banked
  2719  000136  6FC6               	movwf	_time& (0+255),b
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  2723  000138  505E               	movf	_hour,w,c
  2724  00013A  0B0F               	andlw	15
  2725  00013C  0F30               	addlw	48
  2726  00013E  0100               	movlb	0	; () banked
  2727  000140  6FC7               	movwf	(_time+1)& (0+255),b
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  2731  000142  385F               	swapf	_minute,w,c
  2732  000144  0B0F               	andlw	15
  2733  000146  0F30               	addlw	48
  2734  000148  0100               	movlb	0	; () banked
  2735  00014A  6FC9               	movwf	(_time+3)& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f)+ '0';
  2739  00014C  505F               	movf	_minute,w,c
  2740  00014E  0B0F               	andlw	15
  2741  000150  0F30               	addlw	48
  2742  000152  0100               	movlb	0	; () banked
  2743  000154  6FCA               	movwf	(_time+4)& (0+255),b
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  2747  000156  3862               	swapf	_second,w,c
  2748  000158  0B0F               	andlw	15
  2749  00015A  0F30               	addlw	48
  2750  00015C  0100               	movlb	0	; () banked
  2751  00015E  6FCC               	movwf	(_time+6)& (0+255),b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  2755  000160  5062               	movf	_second,w,c
  2756  000162  0B0F               	andlw	15
  2757  000164  0F30               	addlw	48
  2758  000166  0100               	movlb	0	; () banked
  2759  000168  6FCD               	movwf	(_time+7)& (0+255),b
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  2763  00016A  3860               	swapf	_month,w,c
  2764  00016C  0B0F               	andlw	15
  2765  00016E  0F30               	addlw	48
  2766  000170  0100               	movlb	0	; () banked
  2767  000172  6FBD               	movwf	_date& (0+255),b
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;Main_Screen.c: 108: date[1] = (month & 0x0f)+ '0';
  2771  000174  5060               	movf	_month,w,c
  2772  000176  0B0F               	andlw	15
  2773  000178  0F30               	addlw	48
  2774  00017A  0100               	movlb	0	; () banked
  2775  00017C  6FBE               	movwf	(_date+1)& (0+255),b
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;Main_Screen.c: 109: date[3] = (day>>4) + '0';
  2779  00017E  385A               	swapf	_day,w,c
  2780  000180  0B0F               	andlw	15
  2781  000182  0F30               	addlw	48
  2782  000184  0100               	movlb	0	; () banked
  2783  000186  6FC0               	movwf	(_date+3)& (0+255),b
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;Main_Screen.c: 110: date[4] = (day & 0x0f)+ '0';
  2787  000188  505A               	movf	_day,w,c
  2788  00018A  0B0F               	andlw	15
  2789  00018C  0F30               	addlw	48
  2790  00018E  0100               	movlb	0	; () banked
  2791  000190  6FC1               	movwf	(_date+4)& (0+255),b
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;Main_Screen.c: 111: date[6] = (year>>4) + '0';
  2795  000192  386C               	swapf	_year,w,c
  2796  000194  0B0F               	andlw	15
  2797  000196  0F30               	addlw	48
  2798  000198  0100               	movlb	0	; () banked
  2799  00019A  6FC3               	movwf	(_date+6)& (0+255),b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;Main_Screen.c: 112: date[7] = (year & 0x0f)+ '0';
  2803  00019C  506C               	movf	_year,w,c
  2804  00019E  0B0F               	andlw	15
  2805  0001A0  0F30               	addlw	48
  2806  0001A2  0100               	movlb	0	; () banked
  2807  0001A4  6FC4               	movwf	(_date+7)& (0+255),b
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  2811  0001A6  0450               	decf	_FAN,w,c
  2812  0001A8  A4D8               	btfss	status,2,c
  2813  0001AA  D00B               	goto	l6511
  2814                           
  2815                           ; BSR set to: 0
  2816  0001AC  0ED8               	movlw	low _Fan_SW_Txt
  2817  0001AE  6E11               	movwf	strcpy@to,c
  2818  0001B0  0E00               	movlw	high _Fan_SW_Txt
  2819  0001B2  6E12               	movwf	strcpy@to+1,c
  2820  0001B4  0EED               	movlw	low STR_12
  2821  0001B6  6E13               	movwf	strcpy@from,c
  2822  0001B8  0EFF               	movlw	high STR_12
  2823  0001BA  6E14               	movwf	strcpy@from+1,c
  2824  0001BC  EC35  F010         	call	_strcpy	;wreg free
  2825  0001C0  D00B               	goto	l6513
  2826  0001C2                     l6511:
  2827                           
  2828                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  2829  0001C2  0ED8               	movlw	low _Fan_SW_Txt
  2830  0001C4  6E11               	movwf	strcpy@to,c
  2831  0001C6  0E00               	movlw	high _Fan_SW_Txt
  2832  0001C8  6E12               	movwf	strcpy@to+1,c
  2833  0001CA  0EF1               	movlw	low STR_13
  2834  0001CC  6E13               	movwf	strcpy@from,c
  2835  0001CE  0EFF               	movlw	high STR_13
  2836  0001D0  6E14               	movwf	strcpy@from+1,c
  2837  0001D2  EC35  F010         	call	_strcpy	;wreg free
  2838  0001D6  D000               	goto	l6513
  2839  0001D8                     l6513:
  2840                           
  2841                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  2842  0001D8  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  2843  0001DC  6A18               	clrf	___awdiv@dividend+1,c
  2844  0001DE  0E00               	movlw	0
  2845  0001E0  6E1A               	movwf	___awdiv@divisor+1,c
  2846  0001E2  0E64               	movlw	100
  2847  0001E4  6E19               	movwf	___awdiv@divisor,c
  2848  0001E6  EC2B  F00C         	call	___awdiv	;wreg free
  2849  0001EA  5017               	movf	?___awdiv,w,c
  2850  0001EC  0F30               	addlw	48
  2851  0001EE  0100               	movlb	0	; () banked
  2852  0001F0  6FD4               	movwf	_DC_Txt& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;Main_Screen.c: 121: DC_Txt[1] = duty_cycle/10 %10 + '0';
  2856  0001F2  0E00               	movlw	0
  2857  0001F4  6E1A               	movwf	___awdiv@divisor+1,c
  2858  0001F6  0E0A               	movlw	10
  2859  0001F8  6E19               	movwf	___awdiv@divisor,c
  2860  0001FA  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  2861  0001FE  6A18               	clrf	___awdiv@dividend+1,c
  2862  000200  EC2B  F00C         	call	___awdiv	;wreg free
  2863  000204  C017  F01F         	movff	?___awdiv,___awmod@dividend
  2864  000208  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  2865  00020C  0E00               	movlw	0
  2866  00020E  6E22               	movwf	___awmod@divisor+1,c
  2867  000210  0E0A               	movlw	10
  2868  000212  6E21               	movwf	___awmod@divisor,c
  2869  000214  ECBA  F00C         	call	___awmod	;wreg free
  2870  000218  501F               	movf	?___awmod,w,c
  2871  00021A  0F30               	addlw	48
  2872  00021C  0100               	movlb	0	; () banked
  2873  00021E  6FD5               	movwf	(_DC_Txt+1)& (0+255),b
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;Main_Screen.c: 122: DC_Txt[2] = duty_cycle%10 + '0';
  2877  000220  C05C  F01F         	movff	_duty_cycle,___awmod@dividend
  2878  000224  6A20               	clrf	___awmod@dividend+1,c
  2879  000226  0E00               	movlw	0
  2880  000228  6E22               	movwf	___awmod@divisor+1,c
  2881  00022A  0E0A               	movlw	10
  2882  00022C  6E21               	movwf	___awmod@divisor,c
  2883  00022E  ECBA  F00C         	call	___awmod	;wreg free
  2884  000232  501F               	movf	?___awmod,w,c
  2885  000234  0F30               	addlw	48
  2886  000236  0100               	movlb	0	; () banked
  2887  000238  6FD6               	movwf	(_DC_Txt+2)& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;Main_Screen.c: 125: RPM_Txt[0] = rpm/1000 + '0';
  2891  00023A  C04C  F017         	movff	_rpm,___awdiv@dividend
  2892  00023E  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  2893  000242  0E03               	movlw	3
  2894  000244  6E1A               	movwf	___awdiv@divisor+1,c
  2895  000246  0EE8               	movlw	232
  2896  000248  6E19               	movwf	___awdiv@divisor,c
  2897  00024A  EC2B  F00C         	call	___awdiv	;wreg free
  2898  00024E  5017               	movf	?___awdiv,w,c
  2899  000250  0F30               	addlw	48
  2900  000252  0100               	movlb	0	; () banked
  2901  000254  6FCF               	movwf	_RPM_Txt& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;Main_Screen.c: 127: RPM_Txt[1] = rpm/100 %10 + '0';
  2905  000256  0E00               	movlw	0
  2906  000258  6E1A               	movwf	___awdiv@divisor+1,c
  2907  00025A  0E64               	movlw	100
  2908  00025C  6E19               	movwf	___awdiv@divisor,c
  2909  00025E  C04C  F017         	movff	_rpm,___awdiv@dividend
  2910  000262  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  2911  000266  EC2B  F00C         	call	___awdiv	;wreg free
  2912  00026A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  2913  00026E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  2914  000272  0E00               	movlw	0
  2915  000274  6E22               	movwf	___awmod@divisor+1,c
  2916  000276  0E0A               	movlw	10
  2917  000278  6E21               	movwf	___awmod@divisor,c
  2918  00027A  ECBA  F00C         	call	___awmod	;wreg free
  2919  00027E  501F               	movf	?___awmod,w,c
  2920  000280  0F30               	addlw	48
  2921  000282  0100               	movlb	0	; () banked
  2922  000284  6FD0               	movwf	(_RPM_Txt+1)& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;Main_Screen.c: 128: RPM_Txt[2] = rpm%100 / 10 + '0';
  2926  000286  0E00               	movlw	0
  2927  000288  6E22               	movwf	___awmod@divisor+1,c
  2928  00028A  0E64               	movlw	100
  2929  00028C  6E21               	movwf	___awmod@divisor,c
  2930  00028E  C04C  F01F         	movff	_rpm,___awmod@dividend
  2931  000292  C04D  F020         	movff	_rpm+1,___awmod@dividend+1
  2932  000296  ECBA  F00C         	call	___awmod	;wreg free
  2933  00029A  C01F  F017         	movff	?___awmod,___awdiv@dividend
  2934  00029E  C020  F018         	movff	?___awmod+1,___awdiv@dividend+1
  2935  0002A2  0E00               	movlw	0
  2936  0002A4  6E1A               	movwf	___awdiv@divisor+1,c
  2937  0002A6  0E0A               	movlw	10
  2938  0002A8  6E19               	movwf	___awdiv@divisor,c
  2939  0002AA  EC2B  F00C         	call	___awdiv	;wreg free
  2940  0002AE  5017               	movf	?___awdiv,w,c
  2941  0002B0  0F30               	addlw	48
  2942  0002B2  0100               	movlb	0	; () banked
  2943  0002B4  6FD1               	movwf	(_RPM_Txt+2)& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm%10 %10 + '0';
  2947  0002B6  0E00               	movlw	0
  2948  0002B8  6E22               	movwf	___awmod@divisor+1,c
  2949  0002BA  0E0A               	movlw	10
  2950  0002BC  6E21               	movwf	___awmod@divisor,c
  2951  0002BE  C04C  F01F         	movff	_rpm,___awmod@dividend
  2952  0002C2  C04D  F020         	movff	_rpm+1,___awmod@dividend+1
  2953  0002C6  ECBA  F00C         	call	___awmod	;wreg free
  2954  0002CA  C01F  F0ED         	movff	?___awmod,_Update_Screen$2723
  2955  0002CE  C020  F0EE         	movff	?___awmod+1,_Update_Screen$2723+1
  2956                           
  2957                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm%10 %10 + '0';
  2958  0002D2  C0ED  F01F         	movff	_Update_Screen$2723,___awmod@dividend
  2959  0002D6  C0EE  F020         	movff	_Update_Screen$2723+1,___awmod@dividend+1
  2960  0002DA  0E00               	movlw	0
  2961  0002DC  6E22               	movwf	___awmod@divisor+1,c
  2962  0002DE  0E0A               	movlw	10
  2963  0002E0  6E21               	movwf	___awmod@divisor,c
  2964  0002E2  ECBA  F00C         	call	___awmod	;wreg free
  2965  0002E6  501F               	movf	?___awmod,w,c
  2966  0002E8  0F30               	addlw	48
  2967  0002EA  0100               	movlb	0	; () banked
  2968  0002EC  6FD2               	movwf	(_RPM_Txt+3)& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;Main_Screen.c: 131: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  2972  0002EE  0E17               	movlw	23
  2973  0002F0  6E39               	movwf	drawtext@y,c
  2974  0002F2  0EDC               	movlw	low _tempC
  2975  0002F4  6E3A               	movwf	drawtext@_text,c
  2976  0002F6  0E00               	movlw	high _tempC
  2977  0002F8  6E3B               	movwf	drawtext@_text+1,c
  2978  0002FA  0EFF               	movlw	255
  2979  0002FC  6E3D               	movwf	drawtext@color+1,c
  2980  0002FE  0EE0               	movlw	224
  2981  000300  6E3C               	movwf	drawtext@color,c
  2982  000302  0E00               	movlw	0
  2983  000304  6E3F               	movwf	drawtext@bg+1,c
  2984  000306  0E00               	movlw	0
  2985  000308  6E3E               	movwf	drawtext@bg,c
  2986  00030A  0E02               	movlw	2
  2987  00030C  6E40               	movwf	drawtext@size,c
  2988  00030E  0E01               	movlw	1
  2989  000310  ECA1  F008         	call	_drawtext
  2990                           
  2991                           ;Main_Screen.c: 132: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  2992  000314  0E17               	movlw	23
  2993  000316  6E39               	movwf	drawtext@y,c
  2994  000318  0EE0               	movlw	low _tempF
  2995  00031A  6E3A               	movwf	drawtext@_text,c
  2996  00031C  0E00               	movlw	high _tempF
  2997  00031E  6E3B               	movwf	drawtext@_text+1,c
  2998  000320  0EFF               	movlw	255
  2999  000322  6E3D               	movwf	drawtext@color+1,c
  3000  000324  0EE0               	movlw	224
  3001  000326  6E3C               	movwf	drawtext@color,c
  3002  000328  0E00               	movlw	0
  3003  00032A  6E3F               	movwf	drawtext@bg+1,c
  3004  00032C  0E00               	movlw	0
  3005  00032E  6E3E               	movwf	drawtext@bg,c
  3006  000330  0E02               	movlw	2
  3007  000332  6E40               	movwf	drawtext@size,c
  3008  000334  0E46               	movlw	70
  3009  000336  ECA1  F008         	call	_drawtext
  3010                           
  3011                           ;Main_Screen.c: 133: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3012  00033A  0E34               	movlw	52
  3013  00033C  6E39               	movwf	drawtext@y,c
  3014  00033E  0EC6               	movlw	low _time
  3015  000340  6E3A               	movwf	drawtext@_text,c
  3016  000342  0E00               	movlw	high _time
  3017  000344  6E3B               	movwf	drawtext@_text+1,c
  3018  000346  0E07               	movlw	7
  3019  000348  6E3D               	movwf	drawtext@color+1,c
  3020  00034A  683C               	setf	drawtext@color,c
  3021  00034C  0E00               	movlw	0
  3022  00034E  6E3F               	movwf	drawtext@bg+1,c
  3023  000350  0E00               	movlw	0
  3024  000352  6E3E               	movwf	drawtext@bg,c
  3025  000354  0E02               	movlw	2
  3026  000356  6E40               	movwf	drawtext@size,c
  3027  000358  0E0F               	movlw	15
  3028  00035A  ECA1  F008         	call	_drawtext
  3029                           
  3030                           ;Main_Screen.c: 134: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3031  00035E  0E52               	movlw	82
  3032  000360  6E39               	movwf	drawtext@y,c
  3033  000362  0EBD               	movlw	low _date
  3034  000364  6E3A               	movwf	drawtext@_text,c
  3035  000366  0E00               	movlw	high _date
  3036  000368  6E3B               	movwf	drawtext@_text+1,c
  3037  00036A  0E07               	movlw	7
  3038  00036C  6E3D               	movwf	drawtext@color+1,c
  3039  00036E  0EE0               	movlw	224
  3040  000370  6E3C               	movwf	drawtext@color,c
  3041  000372  0E00               	movlw	0
  3042  000374  6E3F               	movwf	drawtext@bg+1,c
  3043  000376  0E00               	movlw	0
  3044  000378  6E3E               	movwf	drawtext@bg,c
  3045  00037A  0E02               	movlw	2
  3046  00037C  6E40               	movwf	drawtext@size,c
  3047  00037E  0E0F               	movlw	15
  3048  000380  ECA1  F008         	call	_drawtext
  3049                           
  3050                           ;Main_Screen.c: 136: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  3051  000384  0E82               	movlw	130
  3052  000386  6E39               	movwf	drawtext@y,c
  3053  000388  0ED8               	movlw	low _Fan_SW_Txt
  3054  00038A  6E3A               	movwf	drawtext@_text,c
  3055  00038C  0E00               	movlw	high _Fan_SW_Txt
  3056  00038E  6E3B               	movwf	drawtext@_text+1,c
  3057  000390  0EF8               	movlw	248
  3058  000392  6E3D               	movwf	drawtext@color+1,c
  3059  000394  0E00               	movlw	0
  3060  000396  6E3C               	movwf	drawtext@color,c
  3061  000398  0E00               	movlw	0
  3062  00039A  6E3F               	movwf	drawtext@bg+1,c
  3063  00039C  0E00               	movlw	0
  3064  00039E  6E3E               	movwf	drawtext@bg,c
  3065  0003A0  0E01               	movlw	1
  3066  0003A2  6E40               	movwf	drawtext@size,c
  3067  0003A4  0E5F               	movlw	95
  3068  0003A6  ECA1  F008         	call	_drawtext
  3069                           
  3070                           ;Main_Screen.c: 137: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3071  0003AA  0E96               	movlw	150
  3072  0003AC  6E39               	movwf	drawtext@y,c
  3073  0003AE  0ED4               	movlw	low _DC_Txt
  3074  0003B0  6E3A               	movwf	drawtext@_text,c
  3075  0003B2  0E00               	movlw	high _DC_Txt
  3076  0003B4  6E3B               	movwf	drawtext@_text+1,c
  3077  0003B6  0E07               	movlw	7
  3078  0003B8  6E3D               	movwf	drawtext@color+1,c
  3079  0003BA  0EE0               	movlw	224
  3080  0003BC  6E3C               	movwf	drawtext@color,c
  3081  0003BE  0E00               	movlw	0
  3082  0003C0  6E3F               	movwf	drawtext@bg+1,c
  3083  0003C2  0E00               	movlw	0
  3084  0003C4  6E3E               	movwf	drawtext@bg,c
  3085  0003C6  0E01               	movlw	1
  3086  0003C8  6E40               	movwf	drawtext@size,c
  3087  0003CA  0E0A               	movlw	10
  3088  0003CC  ECA1  F008         	call	_drawtext
  3089                           
  3090                           ;Main_Screen.c: 138: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3091  0003D0  0E96               	movlw	150
  3092  0003D2  6E39               	movwf	drawtext@y,c
  3093  0003D4  0ECF               	movlw	low _RPM_Txt
  3094  0003D6  6E3A               	movwf	drawtext@_text,c
  3095  0003D8  0E00               	movlw	high _RPM_Txt
  3096  0003DA  6E3B               	movwf	drawtext@_text+1,c
  3097  0003DC  0E07               	movlw	7
  3098  0003DE  6E3D               	movwf	drawtext@color+1,c
  3099  0003E0  0EE0               	movlw	224
  3100  0003E2  6E3C               	movwf	drawtext@color,c
  3101  0003E4  0E00               	movlw	0
  3102  0003E6  6E3F               	movwf	drawtext@bg+1,c
  3103  0003E8  0E00               	movlw	0
  3104  0003EA  6E3E               	movwf	drawtext@bg,c
  3105  0003EC  0E01               	movlw	1
  3106  0003EE  6E40               	movwf	drawtext@size,c
  3107  0003F0  0E5D               	movlw	93
  3108  0003F2  ECA1  F008         	call	_drawtext
  3109  0003F6  0012               	return		;funcret
  3110  0003F8                     __end_of_Update_Screen:
  3111                           	opt stack 0
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           prodh	equ	0xFF4
  3117                           prodl	equ	0xFF3
  3118                           intcon	equ	0xFF2
  3119                           intcon2	equ	0xFF1
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           postdec1	equ	0xFE5
  3123                           fsr1l	equ	0xFE1
  3124                           indf2	equ	0xFDF
  3125                           postinc2	equ	0xFDE
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           
  3130 ;; *************** function ___awmod *****************
  3131 ;; Defined at:
  3132 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  dividend        2   30[COMRAM] int 
  3135 ;;  divisor         2   32[COMRAM] int 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  sign            1   35[COMRAM] unsigned char 
  3138 ;;  counter         1   34[COMRAM] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  2   30[COMRAM] int 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:        6 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    3
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_Update_Screen
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text3
  3163  001974                     __ptext3:
  3164                           	opt stack 0
  3165  001974                     ___awmod:
  3166                           	opt stack 26
  3167                           
  3168                           ;incstack = 0
  3169  001974  0E00               	movlw	0
  3170  001976  6E24               	movwf	___awmod@sign,c
  3171  001978  AE20               	btfss	___awmod@dividend+1,7,c
  3172  00197A  D007               	goto	l6275
  3173  00197C  6C1F               	negf	___awmod@dividend,c
  3174  00197E  1E20               	comf	___awmod@dividend+1,f,c
  3175  001980  B0D8               	btfsc	status,0,c
  3176  001982  2A20               	incf	___awmod@dividend+1,f,c
  3177  001984  0E01               	movlw	1
  3178  001986  6E24               	movwf	___awmod@sign,c
  3179  001988  D000               	goto	l6275
  3180  00198A                     l6275:
  3181  00198A  AE22               	btfss	___awmod@divisor+1,7,c
  3182  00198C  D005               	goto	l6279
  3183  00198E  6C21               	negf	___awmod@divisor,c
  3184  001990  1E22               	comf	___awmod@divisor+1,f,c
  3185  001992  B0D8               	btfsc	status,0,c
  3186  001994  2A22               	incf	___awmod@divisor+1,f,c
  3187  001996  D000               	goto	l6279
  3188  001998                     l6279:
  3189  001998  5021               	movf	___awmod@divisor,w,c
  3190  00199A  1022               	iorwf	___awmod@divisor+1,w,c
  3191  00199C  B4D8               	btfsc	status,2,c
  3192  00199E  D01D               	goto	l6295
  3193  0019A0  0E01               	movlw	1
  3194  0019A2  6E23               	movwf	___awmod@counter,c
  3195  0019A4  D005               	goto	l6285
  3196  0019A6                     l6283:
  3197  0019A6  90D8               	bcf	status,0,c
  3198  0019A8  3621               	rlcf	___awmod@divisor,f,c
  3199  0019AA  3622               	rlcf	___awmod@divisor+1,f,c
  3200  0019AC  2A23               	incf	___awmod@counter,f,c
  3201  0019AE  D000               	goto	l6285
  3202  0019B0                     l6285:
  3203  0019B0  BE22               	btfsc	___awmod@divisor+1,7,c
  3204  0019B2  D002               	goto	l6287
  3205  0019B4  D7F8               	goto	l6283
  3206  0019B6  D000               	goto	l6287
  3207  0019B8                     l6287:
  3208  0019B8  5021               	movf	___awmod@divisor,w,c
  3209  0019BA  5C1F               	subwf	___awmod@dividend,w,c
  3210  0019BC  5022               	movf	___awmod@divisor+1,w,c
  3211  0019BE  5820               	subwfb	___awmod@dividend+1,w,c
  3212  0019C0  A0D8               	btfss	status,0,c
  3213  0019C2  D005               	goto	l6291
  3214  0019C4  5021               	movf	___awmod@divisor,w,c
  3215  0019C6  5E1F               	subwf	___awmod@dividend,f,c
  3216  0019C8  5022               	movf	___awmod@divisor+1,w,c
  3217  0019CA  5A20               	subwfb	___awmod@dividend+1,f,c
  3218  0019CC  D000               	goto	l6291
  3219  0019CE                     l6291:
  3220  0019CE  90D8               	bcf	status,0,c
  3221  0019D0  3222               	rrcf	___awmod@divisor+1,f,c
  3222  0019D2  3221               	rrcf	___awmod@divisor,f,c
  3223  0019D4  2E23               	decfsz	___awmod@counter,f,c
  3224  0019D6  D7F0               	goto	l6287
  3225  0019D8  D000               	goto	l6295
  3226  0019DA                     l6295:
  3227  0019DA  5024               	movf	___awmod@sign,w,c
  3228  0019DC  B4D8               	btfsc	status,2,c
  3229  0019DE  D005               	goto	l6299
  3230  0019E0  6C1F               	negf	___awmod@dividend,c
  3231  0019E2  1E20               	comf	___awmod@dividend+1,f,c
  3232  0019E4  B0D8               	btfsc	status,0,c
  3233  0019E6  2A20               	incf	___awmod@dividend+1,f,c
  3234  0019E8  D000               	goto	l6299
  3235  0019EA                     l6299:
  3236  0019EA  C01F  F01F         	movff	___awmod@dividend,?___awmod
  3237  0019EE  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  3238  0019F2  D000               	goto	l1097
  3239  0019F4                     l1097:
  3240  0019F4  0012               	return		;funcret
  3241  0019F6                     __end_of___awmod:
  3242                           	opt stack 0
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           prodh	equ	0xFF4
  3248                           prodl	equ	0xFF3
  3249                           intcon	equ	0xFF2
  3250                           intcon2	equ	0xFF1
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           postdec1	equ	0xFE5
  3254                           fsr1l	equ	0xFE1
  3255                           indf2	equ	0xFDF
  3256                           postinc2	equ	0xFDE
  3257                           fsr2h	equ	0xFDA
  3258                           fsr2l	equ	0xFD9
  3259                           status	equ	0xFD8
  3260                           
  3261 ;; *************** function _Toggle_Fan *****************
  3262 ;; Defined at:
  3263 ;;		line 17 in file "Fan_Support.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;		None
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;		None
  3268 ;; Return value:  Size  Location     Type
  3269 ;;		None               void
  3270 ;; Registers used:
  3271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;Total ram usage:        0 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    7
  3284 ;; This function calls:
  3285 ;;		_Turn_Off_Fan
  3286 ;;		_Turn_On_Fan
  3287 ;; This function is called by:
  3288 ;;		_main
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text4
  3293  0022C8                     __ptext4:
  3294                           	opt stack 0
  3295  0022C8                     _Toggle_Fan:
  3296                           	opt stack 23
  3297                           
  3298                           ;Fan_Support.c: 19: if (FAN==0) Turn_On_Fan();
  3299                           
  3300                           ;incstack = 0
  3301  0022C8  5050               	movf	_FAN,w,c
  3302  0022CA  A4D8               	btfss	status,2,c
  3303  0022CC  D003               	goto	l6315
  3304  0022CE  EC0C  F011         	call	_Turn_On_Fan	;wreg free
  3305  0022D2  D003               	goto	l38
  3306  0022D4                     l6315:
  3307                           
  3308                           ;Fan_Support.c: 20: else Turn_Off_Fan();
  3309  0022D4  EC19  F011         	call	_Turn_Off_Fan	;wreg free
  3310  0022D8  D000               	goto	l38
  3311  0022DA                     l38:
  3312  0022DA  0012               	return		;funcret
  3313  0022DC                     __end_of_Toggle_Fan:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           intcon2	equ	0xFF1
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           postdec1	equ	0xFE5
  3326                           fsr1l	equ	0xFE1
  3327                           indf2	equ	0xFDF
  3328                           postinc2	equ	0xFDE
  3329                           fsr2h	equ	0xFDA
  3330                           fsr2l	equ	0xFD9
  3331                           status	equ	0xFD8
  3332                           
  3333 ;; *************** function _Turn_On_Fan *****************
  3334 ;; Defined at:
  3335 ;;		line 31 in file "Fan_Support.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;		None               void
  3342 ;; Registers used:
  3343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    6
  3356 ;; This function calls:
  3357 ;;		_do_update_pwm
  3358 ;;		_printf
  3359 ;; This function is called by:
  3360 ;;		_Toggle_Fan
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text5
  3365  002218                     __ptext5:
  3366                           	opt stack 0
  3367  002218                     _Turn_On_Fan:
  3368                           	opt stack 23
  3369                           
  3370                           ;Fan_Support.c: 33: printf ("Fan is turned on\r\n");
  3371                           
  3372                           ;incstack = 0
  3373  002218  0E8D               	movlw	low STR_2
  3374  00221A  6E1D               	movwf	printf@f,c
  3375  00221C  0EFF               	movlw	high STR_2
  3376  00221E  6E1E               	movwf	printf@f+1,c
  3377  002220  ECFC  F001         	call	_printf	;wreg free
  3378                           
  3379                           ;Fan_Support.c: 34: FAN = 1;
  3380  002224  0E01               	movlw	1
  3381  002226  6E50               	movwf	_FAN,c
  3382                           
  3383                           ;Fan_Support.c: 35: do_update_pwm(duty_cycle);
  3384  002228  505C               	movf	_duty_cycle,w,c
  3385  00222A  ECD0  F00B         	call	_do_update_pwm
  3386                           
  3387                           ;Fan_Support.c: 36: PORTAbits.RA4 = 1;
  3388  00222E  8880               	bsf	3968,4,c	;volatile
  3389  002230  0012               	return		;funcret
  3390  002232                     __end_of_Turn_On_Fan:
  3391                           	opt stack 0
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           intcon	equ	0xFF2
  3399                           intcon2	equ	0xFF1
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function _Turn_Off_Fan *****************
  3411 ;; Defined at:
  3412 ;;		line 23 in file "Fan_Support.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;		None
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;		None
  3417 ;; Return value:  Size  Location     Type
  3418 ;;		None               void
  3419 ;; Registers used:
  3420 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;Total ram usage:        0 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    6
  3433 ;; This function calls:
  3434 ;;		_do_update_pwm
  3435 ;;		_printf
  3436 ;; This function is called by:
  3437 ;;		_Toggle_Fan
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text6
  3442  002232                     __ptext6:
  3443                           	opt stack 0
  3444  002232                     _Turn_Off_Fan:
  3445                           	opt stack 23
  3446                           
  3447                           ;Fan_Support.c: 25: printf ("Fan is turned off\r\n");
  3448                           
  3449                           ;incstack = 0
  3450  002232  0E79               	movlw	low STR_1
  3451  002234  6E1D               	movwf	printf@f,c
  3452  002236  0EFF               	movlw	high STR_1
  3453  002238  6E1E               	movwf	printf@f+1,c
  3454  00223A  ECFC  F001         	call	_printf	;wreg free
  3455                           
  3456                           ;Fan_Support.c: 26: FAN = 0;
  3457  00223E  0E00               	movlw	0
  3458  002240  6E50               	movwf	_FAN,c
  3459                           
  3460                           ;Fan_Support.c: 27: do_update_pwm(0);
  3461  002242  0E00               	movlw	0
  3462  002244  ECD0  F00B         	call	_do_update_pwm
  3463                           
  3464                           ;Fan_Support.c: 28: PORTAbits.RA4 = 0;
  3465  002248  9880               	bcf	3968,4,c	;volatile
  3466  00224A  0012               	return		;funcret
  3467  00224C                     __end_of_Turn_Off_Fan:
  3468                           	opt stack 0
  3469                           tblptru	equ	0xFF8
  3470                           tblptrh	equ	0xFF7
  3471                           tblptrl	equ	0xFF6
  3472                           tablat	equ	0xFF5
  3473                           prodh	equ	0xFF4
  3474                           prodl	equ	0xFF3
  3475                           intcon	equ	0xFF2
  3476                           intcon2	equ	0xFF1
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           postdec1	equ	0xFE5
  3480                           fsr1l	equ	0xFE1
  3481                           indf2	equ	0xFDF
  3482                           postinc2	equ	0xFDE
  3483                           fsr2h	equ	0xFDA
  3484                           fsr2l	equ	0xFD9
  3485                           status	equ	0xFD8
  3486                           
  3487 ;; *************** function _printf *****************
  3488 ;; Defined at:
  3489 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;  f               2   28[COMRAM] PTR const unsigned char 
  3492 ;;		 -> STR_19(15), STR_18(22), STR_17(16), STR_16(20), 
  3493 ;;		 -> STR_15(21), STR_14(30), STR_2(19), STR_1(20), 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  idx             1   46[COMRAM] unsigned char 
  3496 ;;  tmpval          4    0        struct .
  3497 ;;  cp              3    0        PTR const unsigned char 
  3498 ;;  width           2   53[COMRAM] int 
  3499 ;;  val             2   50[COMRAM] unsigned int 
  3500 ;;  ap              2   47[COMRAM] PTR void [1]
  3501 ;;		 -> ?_printf(2), 
  3502 ;;  len             2    0        unsigned int 
  3503 ;;  c               1   55[COMRAM] char 
  3504 ;;  flag            1   52[COMRAM] unsigned char 
  3505 ;;  prec            1   49[COMRAM] char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  2   28[COMRAM] int 
  3508 ;; Registers used:
  3509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3515 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3519 ;;Total ram usage:       28 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    4
  3522 ;; This function calls:
  3523 ;;		___lwdiv
  3524 ;;		___lwmod
  3525 ;;		___wmul
  3526 ;;		_isdigit
  3527 ;;		_putch
  3528 ;; This function is called by:
  3529 ;;		_Turn_Off_Fan
  3530 ;;		_Turn_On_Fan
  3531 ;;		_main
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text7
  3536  0003F8                     __ptext7:
  3537                           	opt stack 0
  3538  0003F8                     _printf:
  3539                           	opt stack 26
  3540                           
  3541                           ;doprnt.c: 466: va_list ap;
  3542                           ;doprnt.c: 499: signed char c;
  3543                           ;doprnt.c: 501: int width;
  3544                           ;doprnt.c: 506: signed char prec;
  3545                           ;doprnt.c: 508: unsigned char flag;
  3546                           ;doprnt.c: 523: union {
  3547                           ;doprnt.c: 524: unsigned long vd;
  3548                           ;doprnt.c: 525: double integ;
  3549                           ;doprnt.c: 526: } tmpval;
  3550                           ;doprnt.c: 528: unsigned int val;
  3551                           ;doprnt.c: 529: unsigned len;
  3552                           ;doprnt.c: 530: const char * cp;
  3553                           ;doprnt.c: 533: *ap = __va_start();
  3554                           
  3555                           ;incstack = 0
  3556  0003F8  0E1F               	movlw	low (?_printf+2)
  3557  0003FA  6E30               	movwf	printf@ap,c
  3558  0003FC  0E00               	movlw	high (?_printf+2)
  3559  0003FE  6E31               	movwf	printf@ap+1,c
  3560                           
  3561                           ;doprnt.c: 536: while(c = *f++) {
  3562  000400  D199               	goto	l5725
  3563  000402                     l5599:
  3564                           
  3565                           ;doprnt.c: 538: if(c != '%')
  3566  000402  0E25               	movlw	37
  3567  000404  1838               	xorwf	printf@c,w,c
  3568  000406  B4D8               	btfsc	status,2,c
  3569  000408  D004               	goto	l5603
  3570                           
  3571                           ;doprnt.c: 540: {
  3572                           ;doprnt.c: 541: (putch(c) );
  3573  00040A  5038               	movf	printf@c,w,c
  3574  00040C  ECC9  F011         	call	_putch
  3575                           
  3576                           ;doprnt.c: 542: continue;
  3577  000410  D191               	goto	l5725
  3578  000412                     l5603:
  3579                           
  3580                           ;doprnt.c: 543: }
  3581                           ;doprnt.c: 546: width = 0;
  3582  000412  0E00               	movlw	0
  3583  000414  6E37               	movwf	printf@width+1,c
  3584  000416  0E00               	movlw	0
  3585  000418  6E36               	movwf	printf@width,c
  3586                           
  3587                           ;doprnt.c: 548: flag = 0;
  3588  00041A  0E00               	movlw	0
  3589  00041C  6E35               	movwf	printf@flag,c
  3590                           
  3591                           ;doprnt.c: 551: switch(*f) {
  3592                           
  3593                           ;doprnt.c: 550: for(;;) {
  3594  00041E  D005               	goto	l5609
  3595  000420                     l5605:
  3596                           
  3597                           ;doprnt.c: 580: flag |= 0x04;
  3598  000420  8435               	bsf	printf@flag,2,c
  3599                           
  3600                           ;doprnt.c: 581: f++;
  3601  000422  4A1D               	infsnz	printf@f,f,c
  3602  000424  2A1E               	incf	printf@f+1,f,c
  3603                           
  3604                           ;doprnt.c: 582: continue;
  3605  000426  D001               	goto	l5609
  3606                           
  3607                           ;doprnt.c: 584: }
  3608  000428  D00B               	goto	l5611
  3609  00042A                     l5609:
  3610  00042A  C01D  FFF6         	movff	printf@f,tblptrl
  3611  00042E  C01E  FFF7         	movff	printf@f+1,tblptrh
  3612  000432                     	if	0	;tblptru may be non-zero
  3613  000432                     	endif
  3614  000432                     	if	0	;tblptru may be non-zero
  3615  000432                     	endif
  3616  000432  0008               	tblrd		*
  3617  000434  50F5               	movf	tablat,w,c
  3618                           
  3619                           ; Switch size 1, requested type "space"
  3620                           ; Number of cases is 1, Range of values is 48 to 48
  3621                           ; switch strategies available:
  3622                           ; Name         Instructions Cycles
  3623                           ; simple_byte            4     3 (average)
  3624                           ;	Chosen strategy is simple_byte
  3625  000436  0A30               	xorlw	48	; case 48
  3626  000438  B4D8               	btfsc	status,2,c
  3627  00043A  D7F2               	goto	l5605
  3628                           
  3629                           ;doprnt.c: 585: break;
  3630  00043C  D001               	goto	l5611
  3631                           
  3632                           ;doprnt.c: 586: }
  3633  00043E  D7F5               	goto	l5609
  3634  000440                     l5611:
  3635                           
  3636                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3637  000440  C01D  FFF6         	movff	printf@f,tblptrl
  3638  000444  C01E  FFF7         	movff	printf@f+1,tblptrh
  3639  000448                     	if	0	;tblptru may be non-zero
  3640  000448                     	endif
  3641  000448                     	if	0	;tblptru may be non-zero
  3642  000448                     	endif
  3643  000448  0008               	tblrd		*
  3644  00044A  50F5               	movf	tablat,w,c
  3645  00044C  ECCC  F010         	call	_isdigit
  3646  000450  A0D8               	btfss	status,0,c
  3647  000452  D03B               	goto	l5627
  3648                           
  3649                           ;doprnt.c: 598: width = 0;
  3650  000454  0E00               	movlw	0
  3651  000456  6E37               	movwf	printf@width+1,c
  3652  000458  0E00               	movlw	0
  3653  00045A  6E36               	movwf	printf@width,c
  3654  00045C  D000               	goto	l5615
  3655  00045E                     l5615:
  3656                           
  3657                           ;doprnt.c: 600: width *= 10;
  3658  00045E  C036  F011         	movff	printf@width,___wmul@multiplier
  3659  000462  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  3660  000466  0E00               	movlw	0
  3661  000468  6E14               	movwf	___wmul@multiplicand+1,c
  3662  00046A  0E0A               	movlw	10
  3663  00046C  6E13               	movwf	___wmul@multiplicand,c
  3664  00046E  EC93  F010         	call	___wmul	;wreg free
  3665  000472  C011  F036         	movff	?___wmul,printf@width
  3666  000476  C012  F037         	movff	?___wmul+1,printf@width+1
  3667                           
  3668                           ;doprnt.c: 601: width += *f++ - '0';
  3669  00047A  0ED0               	movlw	208
  3670  00047C  6E2B               	movwf	??_printf& (0+255),c
  3671  00047E  0EFF               	movlw	255
  3672  000480  6E2C               	movwf	(??_printf+1)& (0+255),c
  3673  000482  C01D  FFF6         	movff	printf@f,tblptrl
  3674  000486  C01E  FFF7         	movff	printf@f+1,tblptrh
  3675  00048A                     	if	0	;tblptru may be non-zero
  3676  00048A                     	endif
  3677  00048A                     	if	0	;tblptru may be non-zero
  3678  00048A                     	endif
  3679  00048A  0008               	tblrd		*
  3680  00048C  50F5               	movf	tablat,w,c
  3681  00048E  6E2D               	movwf	(??_printf+2)& (0+255),c
  3682  000490  6A2E               	clrf	(??_printf+3)& (0+255),c
  3683  000492  502B               	movf	??_printf,w,c
  3684  000494  262D               	addwf	??_printf+2,f,c
  3685  000496  502C               	movf	??_printf+1,w,c
  3686  000498  222E               	addwfc	??_printf+3,f,c
  3687  00049A  502D               	movf	??_printf+2,w,c
  3688  00049C  2636               	addwf	printf@width,f,c
  3689  00049E  502E               	movf	??_printf+3,w,c
  3690  0004A0  2237               	addwfc	printf@width+1,f,c
  3691  0004A2  4A1D               	infsnz	printf@f,f,c
  3692  0004A4  2A1E               	incf	printf@f+1,f,c
  3693                           
  3694                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3695  0004A6  C01D  FFF6         	movff	printf@f,tblptrl
  3696  0004AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  3697  0004AE                     	if	0	;tblptru may be non-zero
  3698  0004AE                     	endif
  3699  0004AE                     	if	0	;tblptru may be non-zero
  3700  0004AE                     	endif
  3701  0004AE  0008               	tblrd		*
  3702  0004B0  50F5               	movf	tablat,w,c
  3703  0004B2  ECCC  F010         	call	_isdigit
  3704  0004B6  A0D8               	btfss	status,0,c
  3705  0004B8  D008               	goto	l5627
  3706  0004BA  D7D1               	goto	l5615
  3707                           
  3708                           ;doprnt.c: 608: }
  3709                           ;doprnt.c: 635: switch(c = *f++) {
  3710  0004BC  D006               	goto	l5627
  3711                           
  3712                           ;doprnt.c: 638: goto alldone;
  3713                           
  3714                           ;doprnt.c: 637: case 0:
  3715  0004BE  D148               	goto	l855
  3716                           
  3717                           ;doprnt.c: 698: case 'i':
  3718                           ;doprnt.c: 699: break;
  3719                           
  3720                           ;doprnt.c: 697: case 'd':
  3721  0004C0  D01B               	goto	l818
  3722  0004C2                     l5623:
  3723                           
  3724                           ;doprnt.c: 721: flag |= 0x80;
  3725  0004C2  8E35               	bsf	printf@flag,7,c
  3726                           
  3727                           ;doprnt.c: 723: break;
  3728  0004C4  D019               	goto	l818
  3729                           
  3730                           ;doprnt.c: 813: continue;
  3731                           
  3732                           ;doprnt.c: 802: default:
  3733  0004C6  D136               	goto	l5725
  3734                           
  3735                           ;doprnt.c: 822: }
  3736  0004C8  D017               	goto	l818
  3737  0004CA                     l5627:
  3738  0004CA  C01D  FFF6         	movff	printf@f,tblptrl
  3739  0004CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  3740  0004D2  4A1D               	infsnz	printf@f,f,c
  3741  0004D4  2A1E               	incf	printf@f+1,f,c
  3742  0004D6                     	if	0	;tblptru may be non-zero
  3743  0004D6                     	endif
  3744  0004D6                     	if	0	;tblptru may be non-zero
  3745  0004D6                     	endif
  3746  0004D6  0008               	tblrd		*
  3747  0004D8  CFF5 F038          	movff	tablat,printf@c
  3748  0004DC  5038               	movf	printf@c,w,c
  3749                           
  3750                           ; Switch size 1, requested type "space"
  3751                           ; Number of cases is 4, Range of values is 0 to 120
  3752                           ; switch strategies available:
  3753                           ; Name         Instructions Cycles
  3754                           ; simple_byte           13     7 (average)
  3755                           ;	Chosen strategy is simple_byte
  3756  0004DE  0A00               	xorlw	0	; case 0
  3757  0004E0  B4D8               	btfsc	status,2,c
  3758  0004E2  D136               	goto	l855
  3759  0004E4  0A64               	xorlw	100	; case 100
  3760  0004E6  B4D8               	btfsc	status,2,c
  3761  0004E8  D007               	goto	l818
  3762  0004EA  0A0D               	xorlw	13	; case 105
  3763  0004EC  B4D8               	btfsc	status,2,c
  3764  0004EE  D004               	goto	l818
  3765  0004F0  0A11               	xorlw	17	; case 120
  3766  0004F2  B4D8               	btfsc	status,2,c
  3767  0004F4  D7E6               	goto	l5623
  3768  0004F6  D11E               	goto	l5725
  3769  0004F8                     l818:
  3770                           
  3771                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3772  0004F8  BE35               	btfsc	printf@flag,7,c
  3773  0004FA  D015               	goto	l5639
  3774                           
  3775                           ;doprnt.c: 1253: {
  3776                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3777  0004FC  C030  FFD9         	movff	printf@ap,fsr2l
  3778  000500  C031  FFDA         	movff	printf@ap+1,fsr2h
  3779  000504  CFDE F033          	movff	postinc2,printf@val
  3780  000508  CFDD F034          	movff	postdec2,printf@val+1
  3781  00050C  0E02               	movlw	2
  3782  00050E  2630               	addwf	printf@ap,f,c
  3783  000510  0E00               	movlw	0
  3784  000512  2231               	addwfc	printf@ap+1,f,c
  3785                           
  3786                           ;doprnt.c: 1261: if((int)val < 0) {
  3787  000514  AE34               	btfss	printf@val+1,7,c
  3788  000516  D04E               	goto	l5673
  3789                           
  3790                           ;doprnt.c: 1262: flag |= 0x03;
  3791  000518  0E03               	movlw	3
  3792  00051A  1235               	iorwf	printf@flag,f,c
  3793                           
  3794                           ;doprnt.c: 1263: val = -val;
  3795  00051C  6C33               	negf	printf@val,c
  3796  00051E  1E34               	comf	printf@val+1,f,c
  3797  000520  B0D8               	btfsc	status,0,c
  3798  000522  2A34               	incf	printf@val+1,f,c
  3799                           
  3800                           ;doprnt.c: 1264: }
  3801                           ;doprnt.c: 1266: }
  3802  000524  D047               	goto	l5673
  3803  000526                     l5639:
  3804                           
  3805                           ;doprnt.c: 1268: else
  3806                           ;doprnt.c: 1273: {
  3807                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3808  000526  C030  FFD9         	movff	printf@ap,fsr2l
  3809  00052A  C031  FFDA         	movff	printf@ap+1,fsr2h
  3810  00052E  CFDE F033          	movff	postinc2,printf@val
  3811  000532  CFDD F034          	movff	postdec2,printf@val+1
  3812  000536  0E02               	movlw	2
  3813  000538  2630               	addwf	printf@ap,f,c
  3814  00053A  0E00               	movlw	0
  3815  00053C  2231               	addwfc	printf@ap+1,f,c
  3816                           
  3817                           ;doprnt.c: 1287: }
  3818                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3819  00053E  D03A               	goto	l5673
  3820  000540                     l5643:
  3821                           
  3822                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3823  000540  0E01               	movlw	1
  3824  000542  6E38               	movwf	printf@c,c
  3825  000544                     l5645:
  3826  000544  0E05               	movlw	5
  3827  000546  1838               	xorwf	printf@c,w,c
  3828  000548  B4D8               	btfsc	status,2,c
  3829  00054A  D03D               	goto	l5675
  3830  00054C  D001               	goto	l5649
  3831  00054E  D03B               	goto	l5675
  3832  000550                     l5649:
  3833                           
  3834                           ;doprnt.c: 1306: if(val < dpowers[c])
  3835  000550  5038               	movf	printf@c,w,c
  3836  000552  0D02               	mullw	2
  3837  000554  0EF4               	movlw	low _dpowers
  3838  000556  24F3               	addwf	prodl,w,c
  3839  000558  6EF6               	movwf	tblptrl,c
  3840  00055A  0EFE               	movlw	high _dpowers
  3841  00055C  20F4               	addwfc	prodh,w,c
  3842  00055E  6EF7               	movwf	tblptrh,c
  3843  000560                     	if	0	;There are less than 3 active tblptr bytes
  3844  000560                     	endif
  3845  000560  0009               	tblrd		*+
  3846  000562  50F5               	movf	tablat,w,c
  3847  000564  5C33               	subwf	printf@val,w,c
  3848  000566  0009               	tblrd		*+
  3849  000568  50F5               	movf	tablat,w,c
  3850  00056A  5834               	subwfb	printf@val+1,w,c
  3851  00056C  A0D8               	btfss	status,0,c
  3852  00056E  D02B               	goto	l5675
  3853  000570  D001               	goto	l5653
  3854                           
  3855                           ;doprnt.c: 1307: break;
  3856  000572  D029               	goto	l5675
  3857  000574                     l5653:
  3858  000574  2A38               	incf	printf@c,f,c
  3859  000576  D7E6               	goto	l5645
  3860                           
  3861                           ;doprnt.c: 1309: break;
  3862  000578  D026               	goto	l5675
  3863  00057A                     l5657:
  3864                           
  3865                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3866  00057A  0E01               	movlw	1
  3867  00057C  6E38               	movwf	printf@c,c
  3868  00057E                     l5659:
  3869  00057E  0E04               	movlw	4
  3870  000580  1838               	xorwf	printf@c,w,c
  3871  000582  B4D8               	btfsc	status,2,c
  3872  000584  D020               	goto	l5675
  3873  000586  D001               	goto	l5663
  3874  000588  D01E               	goto	l5675
  3875  00058A                     l5663:
  3876                           
  3877                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3878  00058A  5038               	movf	printf@c,w,c
  3879  00058C  0D02               	mullw	2
  3880  00058E  0EFE               	movlw	low _hexpowers
  3881  000590  24F3               	addwf	prodl,w,c
  3882  000592  6EF6               	movwf	tblptrl,c
  3883  000594  0EFE               	movlw	high _hexpowers
  3884  000596  20F4               	addwfc	prodh,w,c
  3885  000598  6EF7               	movwf	tblptrh,c
  3886  00059A                     	if	0	;There are less than 3 active tblptr bytes
  3887  00059A                     	endif
  3888  00059A  0009               	tblrd		*+
  3889  00059C  50F5               	movf	tablat,w,c
  3890  00059E  5C33               	subwf	printf@val,w,c
  3891  0005A0  0009               	tblrd		*+
  3892  0005A2  50F5               	movf	tablat,w,c
  3893  0005A4  5834               	subwfb	printf@val+1,w,c
  3894  0005A6  A0D8               	btfss	status,0,c
  3895  0005A8  D00E               	goto	l5675
  3896  0005AA  D001               	goto	l5667
  3897                           
  3898                           ;doprnt.c: 1318: break;
  3899  0005AC  D00C               	goto	l5675
  3900  0005AE                     l5667:
  3901  0005AE  2A38               	incf	printf@c,f,c
  3902  0005B0  D7E6               	goto	l5659
  3903                           
  3904                           ;doprnt.c: 1336: }
  3905                           
  3906                           ;doprnt.c: 1320: break;
  3907  0005B2  D009               	goto	l5675
  3908  0005B4                     l5673:
  3909  0005B4  5035               	movf	printf@flag,w,c
  3910  0005B6  0B80               	andlw	128
  3911                           
  3912                           ; Switch size 1, requested type "space"
  3913                           ; Number of cases is 2, Range of values is 0 to 128
  3914                           ; switch strategies available:
  3915                           ; Name         Instructions Cycles
  3916                           ; simple_byte            7     4 (average)
  3917                           ;	Chosen strategy is simple_byte
  3918  0005B8  0A00               	xorlw	0	; case 0
  3919  0005BA  B4D8               	btfsc	status,2,c
  3920  0005BC  D7C1               	goto	l5643
  3921  0005BE  0A80               	xorlw	128	; case 128
  3922  0005C0  B4D8               	btfsc	status,2,c
  3923  0005C2  D7DB               	goto	l5657
  3924  0005C4  D000               	goto	l5675
  3925  0005C6                     l5675:
  3926                           
  3927                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3928  0005C6  5036               	movf	printf@width,w,c
  3929  0005C8  1037               	iorwf	printf@width+1,w,c
  3930  0005CA  B4D8               	btfsc	status,2,c
  3931  0005CC  D00A               	goto	l5681
  3932  0005CE  C035  F02B         	movff	printf@flag,??_printf
  3933  0005D2  0E03               	movlw	3
  3934  0005D4  162B               	andwf	??_printf,f,c
  3935  0005D6  B4D8               	btfsc	status,2,c
  3936  0005D8  D004               	goto	l5681
  3937                           
  3938                           ;doprnt.c: 1346: width--;
  3939  0005DA  0636               	decf	printf@width,f,c
  3940  0005DC  A0D8               	btfss	status,0,c
  3941  0005DE  0637               	decf	printf@width+1,f,c
  3942  0005E0  D000               	goto	l5681
  3943  0005E2                     l5681:
  3944                           
  3945                           ;doprnt.c: 1381: if(width > c)
  3946  0005E2  0E80               	movlw	128
  3947  0005E4  BE38               	btfsc	printf@c,7,c
  3948  0005E6  0E7F               	movlw	127
  3949  0005E8  6E2B               	movwf	??_printf& (0+255),c
  3950  0005EA  5036               	movf	printf@width,w,c
  3951  0005EC  5C38               	subwf	printf@c,w,c
  3952  0005EE  5037               	movf	printf@width+1,w,c
  3953  0005F0  0A80               	xorlw	128
  3954  0005F2  582B               	subwfb	??_printf& (0+255),w,c
  3955  0005F4  B0D8               	btfsc	status,0,c
  3956  0005F6  D007               	goto	l5685
  3957                           
  3958                           ;doprnt.c: 1382: width -= c;
  3959  0005F8  5038               	movf	printf@c,w,c
  3960  0005FA  5E36               	subwf	printf@width,f,c
  3961  0005FC  0E00               	movlw	0
  3962  0005FE  BE38               	btfsc	printf@c,7,c
  3963  000600  0EFF               	movlw	255
  3964  000602  5A37               	subwfb	printf@width+1,f,c
  3965  000604  D005               	goto	l5687
  3966  000606                     l5685:
  3967                           
  3968                           ;doprnt.c: 1383: else
  3969                           ;doprnt.c: 1384: width = 0;
  3970  000606  0E00               	movlw	0
  3971  000608  6E37               	movwf	printf@width+1,c
  3972  00060A  0E00               	movlw	0
  3973  00060C  6E36               	movwf	printf@width,c
  3974  00060E  D000               	goto	l5687
  3975  000610                     l5687:
  3976                           
  3977                           ;doprnt.c: 1387: if(flag & 0x04) {
  3978  000610  A435               	btfss	printf@flag,2,c
  3979  000612  D01A               	goto	l5699
  3980                           
  3981                           ;doprnt.c: 1392: if(flag & 0x03)
  3982  000614  C035  F02B         	movff	printf@flag,??_printf
  3983  000618  0E03               	movlw	3
  3984  00061A  162B               	andwf	??_printf,f,c
  3985  00061C  B4D8               	btfsc	status,2,c
  3986  00061E  D004               	goto	l5693
  3987                           
  3988                           ;doprnt.c: 1393: (putch('-') );
  3989  000620  0E2D               	movlw	45
  3990  000622  ECC9  F011         	call	_putch
  3991  000626  D000               	goto	l5693
  3992  000628                     l5693:
  3993                           
  3994                           ;doprnt.c: 1415: if(width)
  3995  000628  5036               	movf	printf@width,w,c
  3996  00062A  1037               	iorwf	printf@width+1,w,c
  3997  00062C  B4D8               	btfsc	status,2,c
  3998  00062E  D026               	goto	l5709
  3999  000630                     l5695:
  4000                           
  4001                           ;doprnt.c: 1417: (putch('0') );
  4002  000630  0E30               	movlw	48
  4003  000632  ECC9  F011         	call	_putch
  4004                           
  4005                           ;doprnt.c: 1418: while(--width);
  4006  000636  0636               	decf	printf@width,f,c
  4007  000638  A0D8               	btfss	status,0,c
  4008  00063A  0637               	decf	printf@width+1,f,c
  4009  00063C  5036               	movf	printf@width,w,c
  4010  00063E  1037               	iorwf	printf@width+1,w,c
  4011  000640  B4D8               	btfsc	status,2,c
  4012  000642  D01C               	goto	l5709
  4013  000644  D7F5               	goto	l5695
  4014                           
  4015                           ;doprnt.c: 1420: } else
  4016  000646  D01A               	goto	l5709
  4017  000648                     l5699:
  4018                           
  4019                           ;doprnt.c: 1422: {
  4020                           ;doprnt.c: 1424: if(width
  4021                           ;doprnt.c: 1428: )
  4022  000648  5036               	movf	printf@width,w,c
  4023  00064A  1037               	iorwf	printf@width+1,w,c
  4024  00064C  B4D8               	btfsc	status,2,c
  4025  00064E  D00C               	goto	l5705
  4026  000650                     l5701:
  4027                           
  4028                           ;doprnt.c: 1430: (putch(' ') );
  4029  000650  0E20               	movlw	32
  4030  000652  ECC9  F011         	call	_putch
  4031                           
  4032                           ;doprnt.c: 1431: while(--width);
  4033  000656  0636               	decf	printf@width,f,c
  4034  000658  A0D8               	btfss	status,0,c
  4035  00065A  0637               	decf	printf@width+1,f,c
  4036  00065C  5036               	movf	printf@width,w,c
  4037  00065E  1037               	iorwf	printf@width+1,w,c
  4038  000660  B4D8               	btfsc	status,2,c
  4039  000662  D002               	goto	l5705
  4040  000664  D7F5               	goto	l5701
  4041  000666  D000               	goto	l5705
  4042  000668                     l5705:
  4043                           
  4044                           ;doprnt.c: 1438: if(flag & 0x03)
  4045  000668  C035  F02B         	movff	printf@flag,??_printf
  4046  00066C  0E03               	movlw	3
  4047  00066E  162B               	andwf	??_printf,f,c
  4048  000670  B4D8               	btfsc	status,2,c
  4049  000672  D004               	goto	l5709
  4050                           
  4051                           ;doprnt.c: 1439: (putch('-') );
  4052  000674  0E2D               	movlw	45
  4053  000676  ECC9  F011         	call	_putch
  4054  00067A  D000               	goto	l5709
  4055  00067C                     l5709:
  4056                           
  4057                           ;doprnt.c: 1469: }
  4058                           ;doprnt.c: 1472: prec = c;
  4059  00067C  C038  F032         	movff	printf@c,printf@prec
  4060                           
  4061                           ;doprnt.c: 1474: while(prec--) {
  4062  000680  D053               	goto	l5723
  4063                           
  4064                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  4065  000682  D045               	goto	l5719
  4066  000684                     l5711:
  4067                           
  4068                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4069  000684  5032               	movf	printf@prec,w,c
  4070  000686  0D02               	mullw	2
  4071  000688  0EF4               	movlw	low _dpowers
  4072  00068A  24F3               	addwf	prodl,w,c
  4073  00068C  6EF6               	movwf	tblptrl,c
  4074  00068E  0EFE               	movlw	high _dpowers
  4075  000690  20F4               	addwfc	prodh,w,c
  4076  000692  6EF7               	movwf	tblptrh,c
  4077  000694                     	if	0	;There are less than 3 active tblptr bytes
  4078  000694                     	endif
  4079  000694  0009               	tblrd		*+
  4080  000696  CFF5 F013          	movff	tablat,___lwdiv@divisor
  4081  00069A  000A               	tblrd		*-
  4082  00069C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  4083  0006A0  C033  F011         	movff	printf@val,___lwdiv@dividend
  4084  0006A4  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  4085  0006A8  ECE3  F00D         	call	___lwdiv	;wreg free
  4086  0006AC  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  4087  0006B0  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  4088  0006B4  0E00               	movlw	0
  4089  0006B6  6E1B               	movwf	___lwmod@divisor+1,c
  4090  0006B8  0E0A               	movlw	10
  4091  0006BA  6E1A               	movwf	___lwmod@divisor,c
  4092  0006BC  ECE4  F00E         	call	___lwmod	;wreg free
  4093  0006C0  5018               	movf	?___lwmod,w,c
  4094  0006C2  0F30               	addlw	48
  4095  0006C4  6E38               	movwf	printf@c,c
  4096                           
  4097                           ;doprnt.c: 1491: break;
  4098  0006C6  D02C               	goto	l5721
  4099  0006C8                     l5713:
  4100                           
  4101                           ;doprnt.c: 1499: {
  4102                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4103  0006C8  C033  F011         	movff	printf@val,___lwdiv@dividend
  4104  0006CC  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  4105  0006D0  5032               	movf	printf@prec,w,c
  4106  0006D2  0D02               	mullw	2
  4107  0006D4  0EFE               	movlw	low _hexpowers
  4108  0006D6  24F3               	addwf	prodl,w,c
  4109  0006D8  6EF6               	movwf	tblptrl,c
  4110  0006DA  0EFE               	movlw	high _hexpowers
  4111  0006DC  20F4               	addwfc	prodh,w,c
  4112  0006DE  6EF7               	movwf	tblptrh,c
  4113  0006E0                     	if	0	;There are less than 3 active tblptr bytes
  4114  0006E0                     	endif
  4115  0006E0  0009               	tblrd		*+
  4116  0006E2  CFF5 F013          	movff	tablat,___lwdiv@divisor
  4117  0006E6  000A               	tblrd		*-
  4118  0006E8  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  4119  0006EC  ECE3  F00D         	call	___lwdiv	;wreg free
  4120  0006F0  5011               	movf	?___lwdiv,w,c
  4121  0006F2  0B0F               	andlw	15
  4122  0006F4  6E2F               	movwf	printf@idx,c
  4123                           
  4124                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4125  0006F6  502F               	movf	printf@idx,w,c
  4126  0006F8  0D01               	mullw	1
  4127  0006FA  0EA0               	movlw	low STR_20
  4128  0006FC  24F3               	addwf	prodl,w,c
  4129  0006FE  6EF6               	movwf	tblptrl,c
  4130  000700  0EFF               	movlw	high STR_20
  4131  000702  20F4               	addwfc	prodh,w,c
  4132  000704  6EF7               	movwf	tblptrh,c
  4133  000706                     	if	0	;There are less than 3 active tblptr bytes
  4134  000706                     	endif
  4135  000706  0008               	tblrd		*
  4136  000708  CFF5 F038          	movff	tablat,printf@c
  4137                           
  4138                           ;doprnt.c: 1523: }
  4139                           
  4140                           ;doprnt.c: 1508: }
  4141                           ;doprnt.c: 1510: break;
  4142  00070C  D009               	goto	l5721
  4143  00070E                     l5719:
  4144  00070E  5035               	movf	printf@flag,w,c
  4145  000710  0B80               	andlw	128
  4146                           
  4147                           ; Switch size 1, requested type "space"
  4148                           ; Number of cases is 2, Range of values is 0 to 128
  4149                           ; switch strategies available:
  4150                           ; Name         Instructions Cycles
  4151                           ; simple_byte            7     4 (average)
  4152                           ;	Chosen strategy is simple_byte
  4153  000712  0A00               	xorlw	0	; case 0
  4154  000714  B4D8               	btfsc	status,2,c
  4155  000716  D7B6               	goto	l5711
  4156  000718  0A80               	xorlw	128	; case 128
  4157  00071A  B4D8               	btfsc	status,2,c
  4158  00071C  D7D5               	goto	l5713
  4159  00071E  D000               	goto	l5721
  4160  000720                     l5721:
  4161                           
  4162                           ;doprnt.c: 1524: (putch(c) );
  4163  000720  5038               	movf	printf@c,w,c
  4164  000722  ECC9  F011         	call	_putch
  4165  000726  D000               	goto	l5723
  4166  000728                     l5723:
  4167  000728  0632               	decf	printf@prec,f,c
  4168  00072A  2832               	incf	printf@prec,w,c
  4169  00072C  B4D8               	btfsc	status,2,c
  4170  00072E  D002               	goto	l5725
  4171  000730  D7EE               	goto	l5719
  4172  000732  D000               	goto	l5725
  4173  000734                     l5725:
  4174  000734  C01D  FFF6         	movff	printf@f,tblptrl
  4175  000738  C01E  FFF7         	movff	printf@f+1,tblptrh
  4176  00073C  4A1D               	infsnz	printf@f,f,c
  4177  00073E  2A1E               	incf	printf@f+1,f,c
  4178  000740                     	if	0	;tblptru may be non-zero
  4179  000740                     	endif
  4180  000740                     	if	0	;tblptru may be non-zero
  4181  000740                     	endif
  4182  000740  0008               	tblrd		*
  4183  000742  CFF5 F038          	movff	tablat,printf@c
  4184  000746  5038               	movf	printf@c,w,c
  4185  000748  B4D8               	btfsc	status,2,c
  4186  00074A  D002               	goto	l855
  4187  00074C  D65A               	goto	l5599
  4188  00074E  D000               	goto	l855
  4189  000750                     l855:
  4190  000750  0012               	return		;funcret
  4191  000752                     __end_of_printf:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           intcon2	equ	0xFF1
  4201                           postinc0	equ	0xFEE
  4202                           wreg	equ	0xFE8
  4203                           postdec1	equ	0xFE5
  4204                           fsr1l	equ	0xFE1
  4205                           indf2	equ	0xFDF
  4206                           postinc2	equ	0xFDE
  4207                           postdec2	equ	0xFDD
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function _putch *****************
  4213 ;; Defined at:
  4214 ;;		line 117 in file "Lab12pE.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  c               1    wreg     unsigned char 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  c               1   16[COMRAM] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;		None               void
  4221 ;; Registers used:
  4222 ;;		wreg
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;Total ram usage:        1 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    3
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_printf
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text8
  4243  002392                     __ptext8:
  4244                           	opt stack 0
  4245  002392                     _putch:
  4246                           	opt stack 26
  4247                           
  4248                           ;incstack = 0
  4249                           ;putch@c stored from wreg
  4250  002392  6E11               	movwf	putch@c,c
  4251                           
  4252                           ;Lab12pE.c: 119: while (!TRMT);
  4253  002394  D000               	goto	l757
  4254  002396                     l757:
  4255  002396  A2AC               	btfss	4012,1,c	;volatile
  4256  002398  D7FE               	goto	l757
  4257                           
  4258                           ;Lab12pE.c: 120: TXREG = c;
  4259  00239A  C011  FFAD         	movff	putch@c,4013	;volatile
  4260  00239E  0012               	return		;funcret
  4261  0023A0                     __end_of_putch:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           prodh	equ	0xFF4
  4268                           prodl	equ	0xFF3
  4269                           intcon	equ	0xFF2
  4270                           intcon2	equ	0xFF1
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           postdec1	equ	0xFE5
  4274                           fsr1l	equ	0xFE1
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function _isdigit *****************
  4283 ;; Defined at:
  4284 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  c               1    wreg     unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  c               1   18[COMRAM] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;		None               void
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;Total ram usage:        3 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    3
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_printf
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text9
  4313  002198                     __ptext9:
  4314                           	opt stack 0
  4315  002198                     _isdigit:
  4316                           	opt stack 26
  4317                           
  4318                           ;incstack = 0
  4319                           ;isdigit@c stored from wreg
  4320  002198  6E13               	movwf	isdigit@c,c
  4321  00219A  0E00               	movlw	0
  4322  00219C  6E12               	movwf	_isdigit$2379,c
  4323  00219E  0E3A               	movlw	58
  4324  0021A0  6013               	cpfslt	isdigit@c,c
  4325  0021A2  D006               	goto	l5411
  4326  0021A4  0E2F               	movlw	47
  4327  0021A6  6413               	cpfsgt	isdigit@c,c
  4328  0021A8  D003               	goto	l5411
  4329  0021AA  0E01               	movlw	1
  4330  0021AC  6E12               	movwf	_isdigit$2379,c
  4331  0021AE  D000               	goto	l5411
  4332  0021B0                     l5411:
  4333  0021B0  C012  F011         	movff	_isdigit$2379,??_isdigit
  4334  0021B4  3011               	rrcf	??_isdigit,w,c
  4335  0021B6  D000               	goto	l1322
  4336  0021B8                     l1322:
  4337  0021B8  0012               	return		;funcret
  4338  0021BA                     __end_of_isdigit:
  4339                           	opt stack 0
  4340                           tblptru	equ	0xFF8
  4341                           tblptrh	equ	0xFF7
  4342                           tblptrl	equ	0xFF6
  4343                           tablat	equ	0xFF5
  4344                           prodh	equ	0xFF4
  4345                           prodl	equ	0xFF3
  4346                           intcon	equ	0xFF2
  4347                           intcon2	equ	0xFF1
  4348                           postinc0	equ	0xFEE
  4349                           wreg	equ	0xFE8
  4350                           postdec1	equ	0xFE5
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           fsr2h	equ	0xFDA
  4356                           fsr2l	equ	0xFD9
  4357                           status	equ	0xFD8
  4358                           
  4359 ;; *************** function ___lwmod *****************
  4360 ;; Defined at:
  4361 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  dividend        2   23[COMRAM] unsigned int 
  4364 ;;  divisor         2   25[COMRAM] unsigned int 
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  counter         1   27[COMRAM] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  2   23[COMRAM] unsigned int 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4376 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;Total ram usage:        5 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    3
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_printf
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text10
  4391  001DC8                     __ptext10:
  4392                           	opt stack 0
  4393  001DC8                     ___lwmod:
  4394                           	opt stack 26
  4395                           
  4396                           ;incstack = 0
  4397  001DC8  501A               	movf	___lwmod@divisor,w,c
  4398  001DCA  101B               	iorwf	___lwmod@divisor+1,w,c
  4399  001DCC  B4D8               	btfsc	status,2,c
  4400  001DCE  D01D               	goto	l1424
  4401  001DD0  0E01               	movlw	1
  4402  001DD2  6E1C               	movwf	___lwmod@counter,c
  4403  001DD4  D005               	goto	l5587
  4404  001DD6                     l5585:
  4405  001DD6  90D8               	bcf	status,0,c
  4406  001DD8  361A               	rlcf	___lwmod@divisor,f,c
  4407  001DDA  361B               	rlcf	___lwmod@divisor+1,f,c
  4408  001DDC  2A1C               	incf	___lwmod@counter,f,c
  4409  001DDE  D000               	goto	l5587
  4410  001DE0                     l5587:
  4411  001DE0  BE1B               	btfsc	___lwmod@divisor+1,7,c
  4412  001DE2  D002               	goto	l5589
  4413  001DE4  D7F8               	goto	l5585
  4414  001DE6  D000               	goto	l5589
  4415  001DE8                     l5589:
  4416  001DE8  501A               	movf	___lwmod@divisor,w,c
  4417  001DEA  5C18               	subwf	___lwmod@dividend,w,c
  4418  001DEC  501B               	movf	___lwmod@divisor+1,w,c
  4419  001DEE  5819               	subwfb	___lwmod@dividend+1,w,c
  4420  001DF0  A0D8               	btfss	status,0,c
  4421  001DF2  D005               	goto	l5593
  4422  001DF4  501A               	movf	___lwmod@divisor,w,c
  4423  001DF6  5E18               	subwf	___lwmod@dividend,f,c
  4424  001DF8  501B               	movf	___lwmod@divisor+1,w,c
  4425  001DFA  5A19               	subwfb	___lwmod@dividend+1,f,c
  4426  001DFC  D000               	goto	l5593
  4427  001DFE                     l5593:
  4428  001DFE  90D8               	bcf	status,0,c
  4429  001E00  321B               	rrcf	___lwmod@divisor+1,f,c
  4430  001E02  321A               	rrcf	___lwmod@divisor,f,c
  4431  001E04  2E1C               	decfsz	___lwmod@counter,f,c
  4432  001E06  D7F0               	goto	l5589
  4433  001E08  D000               	goto	l1424
  4434  001E0A                     l1424:
  4435  001E0A  C018  F018         	movff	___lwmod@dividend,?___lwmod
  4436  001E0E  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  4437  001E12  0012               	return		;funcret
  4438  001E14                     __end_of___lwmod:
  4439                           	opt stack 0
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           intcon	equ	0xFF2
  4447                           intcon2	equ	0xFF1
  4448                           postinc0	equ	0xFEE
  4449                           wreg	equ	0xFE8
  4450                           postdec1	equ	0xFE5
  4451                           fsr1l	equ	0xFE1
  4452                           indf2	equ	0xFDF
  4453                           postinc2	equ	0xFDE
  4454                           postdec2	equ	0xFDD
  4455                           fsr2h	equ	0xFDA
  4456                           fsr2l	equ	0xFD9
  4457                           status	equ	0xFD8
  4458                           
  4459 ;; *************** function ___lwdiv *****************
  4460 ;; Defined at:
  4461 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;  dividend        2   16[COMRAM] unsigned int 
  4464 ;;  divisor         2   18[COMRAM] unsigned int 
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;  quotient        2   21[COMRAM] unsigned int 
  4467 ;;  counter         1   20[COMRAM] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  2   16[COMRAM] unsigned int 
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4477 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;Total ram usage:        7 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    3
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_printf
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text11
  4492  001BC6                     __ptext11:
  4493                           	opt stack 0
  4494  001BC6                     ___lwdiv:
  4495                           	opt stack 26
  4496                           
  4497                           ;incstack = 0
  4498  001BC6  0E00               	movlw	0
  4499  001BC8  6E17               	movwf	___lwdiv@quotient+1,c
  4500  001BCA  0E00               	movlw	0
  4501  001BCC  6E16               	movwf	___lwdiv@quotient,c
  4502  001BCE  5013               	movf	___lwdiv@divisor,w,c
  4503  001BD0  1014               	iorwf	___lwdiv@divisor+1,w,c
  4504  001BD2  B4D8               	btfsc	status,2,c
  4505  001BD4  D021               	goto	l1414
  4506  001BD6  0E01               	movlw	1
  4507  001BD8  6E15               	movwf	___lwdiv@counter,c
  4508  001BDA  D005               	goto	l5567
  4509  001BDC                     l5565:
  4510  001BDC  90D8               	bcf	status,0,c
  4511  001BDE  3613               	rlcf	___lwdiv@divisor,f,c
  4512  001BE0  3614               	rlcf	___lwdiv@divisor+1,f,c
  4513  001BE2  2A15               	incf	___lwdiv@counter,f,c
  4514  001BE4  D000               	goto	l5567
  4515  001BE6                     l5567:
  4516  001BE6  BE14               	btfsc	___lwdiv@divisor+1,7,c
  4517  001BE8  D002               	goto	l5569
  4518  001BEA  D7F8               	goto	l5565
  4519  001BEC  D000               	goto	l5569
  4520  001BEE                     l5569:
  4521  001BEE  90D8               	bcf	status,0,c
  4522  001BF0  3616               	rlcf	___lwdiv@quotient,f,c
  4523  001BF2  3617               	rlcf	___lwdiv@quotient+1,f,c
  4524  001BF4  5013               	movf	___lwdiv@divisor,w,c
  4525  001BF6  5C11               	subwf	___lwdiv@dividend,w,c
  4526  001BF8  5014               	movf	___lwdiv@divisor+1,w,c
  4527  001BFA  5812               	subwfb	___lwdiv@dividend+1,w,c
  4528  001BFC  A0D8               	btfss	status,0,c
  4529  001BFE  D006               	goto	l5577
  4530  001C00  5013               	movf	___lwdiv@divisor,w,c
  4531  001C02  5E11               	subwf	___lwdiv@dividend,f,c
  4532  001C04  5014               	movf	___lwdiv@divisor+1,w,c
  4533  001C06  5A12               	subwfb	___lwdiv@dividend+1,f,c
  4534  001C08  8016               	bsf	___lwdiv@quotient,0,c
  4535  001C0A  D000               	goto	l5577
  4536  001C0C                     l5577:
  4537  001C0C  90D8               	bcf	status,0,c
  4538  001C0E  3214               	rrcf	___lwdiv@divisor+1,f,c
  4539  001C10  3213               	rrcf	___lwdiv@divisor,f,c
  4540  001C12  2E15               	decfsz	___lwdiv@counter,f,c
  4541  001C14  D7EC               	goto	l5569
  4542  001C16  D000               	goto	l1414
  4543  001C18                     l1414:
  4544  001C18  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  4545  001C1C  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4546  001C20  0012               	return		;funcret
  4547  001C22                     __end_of___lwdiv:
  4548                           	opt stack 0
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           prodh	equ	0xFF4
  4554                           prodl	equ	0xFF3
  4555                           intcon	equ	0xFF2
  4556                           intcon2	equ	0xFF1
  4557                           postinc0	equ	0xFEE
  4558                           wreg	equ	0xFE8
  4559                           postdec1	equ	0xFE5
  4560                           fsr1l	equ	0xFE1
  4561                           indf2	equ	0xFDF
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function _Set_RPM_RGB *****************
  4569 ;; Defined at:
  4570 ;;		line 89 in file "Fan_Support.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  rpm             2   30[COMRAM] int 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;  temp           14   32[COMRAM] int [7]
  4575 ;; Return value:  Size  Location     Type
  4576 ;;		None               void
  4577 ;; Registers used:
  4578 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;Total ram usage:       16 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    4
  4591 ;; This function calls:
  4592 ;;		___awdiv
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text12
  4599  001CD6                     __ptext12:
  4600                           	opt stack 0
  4601  001CD6                     _Set_RPM_RGB:
  4602                           	opt stack 26
  4603                           
  4604                           ;Fan_Support.c: 91: int temp[7] = { 1, 3, 2, 4, 5, 6, 7};
  4605                           
  4606                           ;incstack = 0
  4607  001CD6  EE20  F080         	lfsr	2,Set_RPM_RGB@F4110
  4608  001CDA  EE10  F021         	lfsr	1,Set_RPM_RGB@temp
  4609  001CDE  0E0D               	movlw	13
  4610  001CE0                     u5041:
  4611  001CE0  CFDB FFE3          	movff	plusw2,plusw1
  4612  001CE4  06E8               	decf	wreg,f,c
  4613  001CE6  E2FC               	bc	u5041
  4614                           
  4615                           ;Fan_Support.c: 92: if (rpm < 1) PORTE = 0x00;
  4616  001CE8  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4617  001CEA  D005               	goto	l6343
  4618  001CEC  5020               	movf	Set_RPM_RGB@rpm+1,w,c
  4619  001CEE  E105               	bnz	l6345
  4620  001CF0  041F               	decf	Set_RPM_RGB@rpm,w,c
  4621  001CF2  B0D8               	btfsc	status,0,c
  4622  001CF4  D002               	goto	l6345
  4623  001CF6                     l6343:
  4624  001CF6  0E00               	movlw	0
  4625  001CF8  D014               	goto	L3
  4626  001CFA                     l6345:
  4627                           
  4628                           ;Fan_Support.c: 93: else PORTE = temp[(rpm/500)];
  4629  001CFA  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  4630  001CFE  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  4631  001D02  0E01               	movlw	1
  4632  001D04  6E1A               	movwf	___awdiv@divisor+1,c
  4633  001D06  0EF4               	movlw	244
  4634  001D08  6E19               	movwf	___awdiv@divisor,c
  4635  001D0A  EC2B  F00C         	call	___awdiv	;wreg free
  4636  001D0E  90D8               	bcf	status,0,c
  4637  001D10  3617               	rlcf	?___awdiv,f,c
  4638  001D12  3618               	rlcf	?___awdiv+1,f,c
  4639  001D14  0E21               	movlw	low Set_RPM_RGB@temp
  4640  001D16  2417               	addwf	?___awdiv,w,c
  4641  001D18  6ED9               	movwf	fsr2l,c
  4642  001D1A  0E00               	movlw	high Set_RPM_RGB@temp
  4643  001D1C  2018               	addwfc	?___awdiv+1,w,c
  4644  001D1E  6EDA               	movwf	fsr2h,c
  4645  001D20  50DF               	movf	indf2,w,c
  4646  001D22                     L3:
  4647  001D22  6E84               	movwf	3972,c	;volatile
  4648  001D24  D000               	goto	l70
  4649  001D26                     l70:
  4650  001D26  0012               	return		;funcret
  4651  001D28                     __end_of_Set_RPM_RGB:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           intcon2	equ	0xFF1
  4661                           postinc0	equ	0xFEE
  4662                           wreg	equ	0xFE8
  4663                           postdec1	equ	0xFE5
  4664                           plusw1	equ	0xFE3
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           plusw2	equ	0xFDB
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function _Set_DC_RGB *****************
  4675 ;; Defined at:
  4676 ;;		line 83 in file "Fan_Support.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  duty_cycle      2   30[COMRAM] int 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;		None
  4681 ;; Return value:  Size  Location     Type
  4682 ;;		None               void
  4683 ;; Registers used:
  4684 ;;		wreg, status,2, status,0, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;Total ram usage:        2 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    4
  4697 ;; This function calls:
  4698 ;;		___awdiv
  4699 ;; This function is called by:
  4700 ;;		_main
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           	psect	text13
  4705  002036                     __ptext13:
  4706                           	opt stack 0
  4707  002036                     _Set_DC_RGB:
  4708                           	opt stack 26
  4709                           
  4710                           ;Fan_Support.c: 85: if (duty_cycle >= 70) PORTD = PORTD | 7;
  4711                           
  4712                           ;incstack = 0
  4713  002036  BE20               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4714  002038  D009               	goto	l6337
  4715  00203A  5020               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4716  00203C  E104               	bnz	u5030
  4717  00203E  0E46               	movlw	70
  4718  002040  5C1F               	subwf	Set_DC_RGB@duty_cycle,w,c
  4719  002042  A0D8               	btfss	status,0,c
  4720  002044  D003               	goto	l6337
  4721  002046                     u5030:
  4722  002046  5083               	movf	3971,w,c	;volatile
  4723  002048  0907               	iorlw	7
  4724  00204A  D00C               	goto	L4
  4725  00204C                     l6337:
  4726                           
  4727                           ;Fan_Support.c: 86: else PORTD = PORTD | (duty_cycle/10);
  4728  00204C  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4729  002050  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4730  002054  0E00               	movlw	0
  4731  002056  6E1A               	movwf	___awdiv@divisor+1,c
  4732  002058  0E0A               	movlw	10
  4733  00205A  6E19               	movwf	___awdiv@divisor,c
  4734  00205C  EC2B  F00C         	call	___awdiv	;wreg free
  4735  002060  5017               	movf	?___awdiv,w,c
  4736  002062  1083               	iorwf	3971,w,c	;volatile
  4737  002064                     L4:
  4738  002064  6E83               	movwf	3971,c	;volatile
  4739  002066  D000               	goto	l63
  4740  002068                     l63:
  4741  002068  0012               	return		;funcret
  4742  00206A                     __end_of_Set_DC_RGB:
  4743                           	opt stack 0
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           intcon	equ	0xFF2
  4751                           intcon2	equ	0xFF1
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           plusw1	equ	0xFE3
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           plusw2	equ	0xFDB
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765 ;; *************** function ___awdiv *****************
  4766 ;; Defined at:
  4767 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  dividend        2   22[COMRAM] int 
  4770 ;;  divisor         2   24[COMRAM] int 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  quotient        2   28[COMRAM] int 
  4773 ;;  sign            1   27[COMRAM] unsigned char 
  4774 ;;  counter         1   26[COMRAM] unsigned char 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  2   22[COMRAM] int 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4788 ;;Total ram usage:        8 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    3
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_get_RPM
  4795 ;;		_Set_DC_RGB
  4796 ;;		_Set_RPM_RGB
  4797 ;;		_Update_Screen
  4798 ;;		_main
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text14
  4803  001856                     __ptext14:
  4804                           	opt stack 0
  4805  001856                     ___awdiv:
  4806                           	opt stack 26
  4807                           
  4808                           ;incstack = 0
  4809  001856  0E00               	movlw	0
  4810  001858  6E1C               	movwf	___awdiv@sign,c
  4811  00185A  AE1A               	btfss	___awdiv@divisor+1,7,c
  4812  00185C  D007               	goto	l6231
  4813  00185E  6C19               	negf	___awdiv@divisor,c
  4814  001860  1E1A               	comf	___awdiv@divisor+1,f,c
  4815  001862  B0D8               	btfsc	status,0,c
  4816  001864  2A1A               	incf	___awdiv@divisor+1,f,c
  4817  001866  0E01               	movlw	1
  4818  001868  6E1C               	movwf	___awdiv@sign,c
  4819  00186A  D000               	goto	l6231
  4820  00186C                     l6231:
  4821  00186C  AE18               	btfss	___awdiv@dividend+1,7,c
  4822  00186E  D007               	goto	l6237
  4823  001870  6C17               	negf	___awdiv@dividend,c
  4824  001872  1E18               	comf	___awdiv@dividend+1,f,c
  4825  001874  B0D8               	btfsc	status,0,c
  4826  001876  2A18               	incf	___awdiv@dividend+1,f,c
  4827  001878  0E01               	movlw	1
  4828  00187A  1A1C               	xorwf	___awdiv@sign,f,c
  4829  00187C  D000               	goto	l6237
  4830  00187E                     l6237:
  4831  00187E  0E00               	movlw	0
  4832  001880  6E1E               	movwf	___awdiv@quotient+1,c
  4833  001882  0E00               	movlw	0
  4834  001884  6E1D               	movwf	___awdiv@quotient,c
  4835  001886  5019               	movf	___awdiv@divisor,w,c
  4836  001888  101A               	iorwf	___awdiv@divisor+1,w,c
  4837  00188A  B4D8               	btfsc	status,2,c
  4838  00188C  D021               	goto	l6259
  4839  00188E  0E01               	movlw	1
  4840  001890  6E1B               	movwf	___awdiv@counter,c
  4841  001892  D005               	goto	l6245
  4842  001894                     l6243:
  4843  001894  90D8               	bcf	status,0,c
  4844  001896  3619               	rlcf	___awdiv@divisor,f,c
  4845  001898  361A               	rlcf	___awdiv@divisor+1,f,c
  4846  00189A  2A1B               	incf	___awdiv@counter,f,c
  4847  00189C  D000               	goto	l6245
  4848  00189E                     l6245:
  4849  00189E  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4850  0018A0  D002               	goto	l6247
  4851  0018A2  D7F8               	goto	l6243
  4852  0018A4  D000               	goto	l6247
  4853  0018A6                     l6247:
  4854  0018A6  90D8               	bcf	status,0,c
  4855  0018A8  361D               	rlcf	___awdiv@quotient,f,c
  4856  0018AA  361E               	rlcf	___awdiv@quotient+1,f,c
  4857  0018AC  5019               	movf	___awdiv@divisor,w,c
  4858  0018AE  5C17               	subwf	___awdiv@dividend,w,c
  4859  0018B0  501A               	movf	___awdiv@divisor+1,w,c
  4860  0018B2  5818               	subwfb	___awdiv@dividend+1,w,c
  4861  0018B4  A0D8               	btfss	status,0,c
  4862  0018B6  D006               	goto	l6255
  4863  0018B8  5019               	movf	___awdiv@divisor,w,c
  4864  0018BA  5E17               	subwf	___awdiv@dividend,f,c
  4865  0018BC  501A               	movf	___awdiv@divisor+1,w,c
  4866  0018BE  5A18               	subwfb	___awdiv@dividend+1,f,c
  4867  0018C0  801D               	bsf	___awdiv@quotient,0,c
  4868  0018C2  D000               	goto	l6255
  4869  0018C4                     l6255:
  4870  0018C4  90D8               	bcf	status,0,c
  4871  0018C6  321A               	rrcf	___awdiv@divisor+1,f,c
  4872  0018C8  3219               	rrcf	___awdiv@divisor,f,c
  4873  0018CA  2E1B               	decfsz	___awdiv@counter,f,c
  4874  0018CC  D7EC               	goto	l6247
  4875  0018CE  D000               	goto	l6259
  4876  0018D0                     l6259:
  4877  0018D0  501C               	movf	___awdiv@sign,w,c
  4878  0018D2  B4D8               	btfsc	status,2,c
  4879  0018D4  D005               	goto	l6263
  4880  0018D6  6C1D               	negf	___awdiv@quotient,c
  4881  0018D8  1E1E               	comf	___awdiv@quotient+1,f,c
  4882  0018DA  B0D8               	btfsc	status,0,c
  4883  0018DC  2A1E               	incf	___awdiv@quotient+1,f,c
  4884  0018DE  D000               	goto	l6263
  4885  0018E0                     l6263:
  4886  0018E0  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4887  0018E4  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4888  0018E8  D000               	goto	l1084
  4889  0018EA                     l1084:
  4890  0018EA  0012               	return		;funcret
  4891  0018EC                     __end_of___awdiv:
  4892                           	opt stack 0
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           intcon	equ	0xFF2
  4900                           intcon2	equ	0xFF1
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           postdec1	equ	0xFE5
  4904                           plusw1	equ	0xFE3
  4905                           fsr1l	equ	0xFE1
  4906                           indf2	equ	0xFDF
  4907                           postinc2	equ	0xFDE
  4908                           postdec2	equ	0xFDD
  4909                           plusw2	equ	0xFDB
  4910                           fsr2h	equ	0xFDA
  4911                           fsr2l	equ	0xFD9
  4912                           status	equ	0xFD8
  4913                           
  4914 ;; *************** function _Initialize_Screen *****************
  4915 ;; Defined at:
  4916 ;;		line 34 in file "Main_Screen.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;		None
  4921 ;; Return value:  Size  Location     Type
  4922 ;;		None               void
  4923 ;; Registers used:
  4924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;Total ram usage:        0 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:   10
  4937 ;; This function calls:
  4938 ;;		_LCD_Reset
  4939 ;;		_TFT_GreenTab_Initialize
  4940 ;;		_drawCircle
  4941 ;;		_drawtext
  4942 ;;		_fillScreen
  4943 ;;		_strcpy
  4944 ;; This function is called by:
  4945 ;;		_main
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           	psect	text15
  4950  000752                     __ptext15:
  4951                           	opt stack 0
  4952  000752                     _Initialize_Screen:
  4953                           	opt stack 20
  4954                           
  4955                           ;Main_Screen.c: 36: LCD_Reset();
  4956                           
  4957                           ;incstack = 0
  4958  000752  EC8C  F011         	call	_LCD_Reset	;wreg free
  4959                           
  4960                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4961  000756  EC7E  F010         	call	_TFT_GreenTab_Initialize	;wreg free
  4962                           
  4963                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4964  00075A  0E00               	movlw	0
  4965  00075C  6E25               	movwf	fillScreen@color+1,c
  4966  00075E  0E00               	movlw	0
  4967  000760  6E24               	movwf	fillScreen@color,c
  4968  000762  ECFE  F010         	call	_fillScreen	;wreg free
  4969                           
  4970                           ;Main_Screen.c: 39: txt = buffer;
  4971  000766  0E2A               	movlw	low _buffer
  4972  000768  6E4E               	movwf	_txt,c
  4973  00076A  0E01               	movlw	high _buffer
  4974  00076C  6E4F               	movwf	_txt+1,c
  4975                           
  4976                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 22-S1");
  4977  00076E  C04E  F011         	movff	_txt,strcpy@to
  4978  000772  C04F  F012         	movff	_txt+1,strcpy@to+1
  4979  000776  0E3A               	movlw	low STR_3
  4980  000778  6E13               	movwf	strcpy@from,c
  4981  00077A  0EFF               	movlw	high STR_3
  4982  00077C  6E14               	movwf	strcpy@from+1,c
  4983  00077E  EC35  F010         	call	_strcpy	;wreg free
  4984                           
  4985                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4986  000782  0E01               	movlw	1
  4987  000784  6E39               	movwf	drawtext@y,c
  4988  000786  C04E  F03A         	movff	_txt,drawtext@_text
  4989  00078A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4990  00078E  0EFF               	movlw	255
  4991  000790  6E3D               	movwf	drawtext@color+1,c
  4992  000792  683C               	setf	drawtext@color,c
  4993  000794  0E00               	movlw	0
  4994  000796  6E3F               	movwf	drawtext@bg+1,c
  4995  000798  0E00               	movlw	0
  4996  00079A  6E3E               	movwf	drawtext@bg,c
  4997  00079C  0E01               	movlw	1
  4998  00079E  6E40               	movwf	drawtext@size,c
  4999  0007A0  0E01               	movlw	1
  5000  0007A2  ECA1  F008         	call	_drawtext
  5001                           
  5002                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  5003  0007A6  C04E  F011         	movff	_txt,strcpy@to
  5004  0007AA  C04F  F012         	movff	_txt+1,strcpy@to+1
  5005  0007AE  0ED0               	movlw	low STR_4
  5006  0007B0  6E13               	movwf	strcpy@from,c
  5007  0007B2  0EFF               	movlw	high STR_4
  5008  0007B4  6E14               	movwf	strcpy@from+1,c
  5009  0007B6  EC35  F010         	call	_strcpy	;wreg free
  5010                           
  5011                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  5012  0007BA  0E0B               	movlw	11
  5013  0007BC  6E39               	movwf	drawtext@y,c
  5014  0007BE  C04E  F03A         	movff	_txt,drawtext@_text
  5015  0007C2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5016  0007C6  0EF8               	movlw	248
  5017  0007C8  6E3D               	movwf	drawtext@color+1,c
  5018  0007CA  0E1F               	movlw	31
  5019  0007CC  6E3C               	movwf	drawtext@color,c
  5020  0007CE  0E00               	movlw	0
  5021  0007D0  6E3F               	movwf	drawtext@bg+1,c
  5022  0007D2  0E00               	movlw	0
  5023  0007D4  6E3E               	movwf	drawtext@bg,c
  5024  0007D6  0E01               	movlw	1
  5025  0007D8  6E40               	movwf	drawtext@size,c
  5026  0007DA  0E18               	movlw	24
  5027  0007DC  ECA1  F008         	call	_drawtext
  5028                           
  5029                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5030  0007E0  0E00               	movlw	0
  5031  0007E2  6E1D               	movwf	drawCircle@x0+1,c
  5032  0007E4  0E28               	movlw	40
  5033  0007E6  6E1C               	movwf	drawCircle@x0,c
  5034  0007E8  0E00               	movlw	0
  5035  0007EA  6E1F               	movwf	drawCircle@y0+1,c
  5036  0007EC  0E17               	movlw	23
  5037  0007EE  6E1E               	movwf	drawCircle@y0,c
  5038  0007F0  0E00               	movlw	0
  5039  0007F2  6E21               	movwf	drawCircle@r+1,c
  5040  0007F4  0E02               	movlw	2
  5041  0007F6  6E20               	movwf	drawCircle@r,c
  5042  0007F8  0EFF               	movlw	255
  5043  0007FA  6E23               	movwf	drawCircle@color+1,c
  5044  0007FC  0EE0               	movlw	224
  5045  0007FE  6E22               	movwf	drawCircle@color,c
  5046  000800  ECDD  F005         	call	_drawCircle	;wreg free
  5047                           
  5048                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5049  000804  C04E  F011         	movff	_txt,strcpy@to
  5050  000808  C04F  F012         	movff	_txt+1,strcpy@to+1
  5051  00080C  0EF9               	movlw	low STR_5
  5052  00080E  6E13               	movwf	strcpy@from,c
  5053  000810  0EFF               	movlw	high STR_5
  5054  000812  6E14               	movwf	strcpy@from+1,c
  5055  000814  EC35  F010         	call	_strcpy	;wreg free
  5056                           
  5057                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5058  000818  0E17               	movlw	23
  5059  00081A  6E39               	movwf	drawtext@y,c
  5060  00081C  C04E  F03A         	movff	_txt,drawtext@_text
  5061  000820  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5062  000824  0EFF               	movlw	255
  5063  000826  6E3D               	movwf	drawtext@color+1,c
  5064  000828  0EE0               	movlw	224
  5065  00082A  6E3C               	movwf	drawtext@color,c
  5066  00082C  0E00               	movlw	0
  5067  00082E  6E3F               	movwf	drawtext@bg+1,c
  5068  000830  0E00               	movlw	0
  5069  000832  6E3E               	movwf	drawtext@bg,c
  5070  000834  0E02               	movlw	2
  5071  000836  6E40               	movwf	drawtext@size,c
  5072  000838  0E2D               	movlw	45
  5073  00083A  ECA1  F008         	call	_drawtext
  5074                           
  5075                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5076  00083E  C04E  F011         	movff	_txt,strcpy@to
  5077  000842  C04F  F012         	movff	_txt+1,strcpy@to+1
  5078  000846  0EF3               	movlw	low (STR_13+2)
  5079  000848  6E13               	movwf	strcpy@from,c
  5080  00084A  0EFF               	movlw	high (STR_13+2)
  5081  00084C  6E14               	movwf	strcpy@from+1,c
  5082  00084E  EC35  F010         	call	_strcpy	;wreg free
  5083                           
  5084                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5085  000852  0E00               	movlw	0
  5086  000854  6E1D               	movwf	drawCircle@x0+1,c
  5087  000856  0E6E               	movlw	110
  5088  000858  6E1C               	movwf	drawCircle@x0,c
  5089  00085A  0E00               	movlw	0
  5090  00085C  6E1F               	movwf	drawCircle@y0+1,c
  5091  00085E  0E17               	movlw	23
  5092  000860  6E1E               	movwf	drawCircle@y0,c
  5093  000862  0E00               	movlw	0
  5094  000864  6E21               	movwf	drawCircle@r+1,c
  5095  000866  0E02               	movlw	2
  5096  000868  6E20               	movwf	drawCircle@r,c
  5097  00086A  0EFF               	movlw	255
  5098  00086C  6E23               	movwf	drawCircle@color+1,c
  5099  00086E  0EE0               	movlw	224
  5100  000870  6E22               	movwf	drawCircle@color,c
  5101  000872  ECDD  F005         	call	_drawCircle	;wreg free
  5102                           
  5103                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5104  000876  0E17               	movlw	23
  5105  000878  6E39               	movwf	drawtext@y,c
  5106  00087A  C04E  F03A         	movff	_txt,drawtext@_text
  5107  00087E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5108  000882  0EFF               	movlw	255
  5109  000884  6E3D               	movwf	drawtext@color+1,c
  5110  000886  0EE0               	movlw	224
  5111  000888  6E3C               	movwf	drawtext@color,c
  5112  00088A  0E00               	movlw	0
  5113  00088C  6E3F               	movwf	drawtext@bg+1,c
  5114  00088E  0E00               	movlw	0
  5115  000890  6E3E               	movwf	drawtext@bg,c
  5116  000892  0E02               	movlw	2
  5117  000894  6E40               	movwf	drawtext@size,c
  5118  000896  0E73               	movlw	115
  5119  000898  ECA1  F008         	call	_drawtext
  5120                           
  5121                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5122  00089C  C04E  F011         	movff	_txt,strcpy@to
  5123  0008A0  C04F  F012         	movff	_txt+1,strcpy@to+1
  5124  0008A4  0EE3               	movlw	low STR_7
  5125  0008A6  6E13               	movwf	strcpy@from,c
  5126  0008A8  0EFF               	movlw	high STR_7
  5127  0008AA  6E14               	movwf	strcpy@from+1,c
  5128  0008AC  EC35  F010         	call	_strcpy	;wreg free
  5129                           
  5130                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5131  0008B0  0E28               	movlw	40
  5132  0008B2  6E39               	movwf	drawtext@y,c
  5133  0008B4  C04E  F03A         	movff	_txt,drawtext@_text
  5134  0008B8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5135  0008BC  0E00               	movlw	0
  5136  0008BE  6E3D               	movwf	drawtext@color+1,c
  5137  0008C0  0E1F               	movlw	31
  5138  0008C2  6E3C               	movwf	drawtext@color,c
  5139  0008C4  0E00               	movlw	0
  5140  0008C6  6E3F               	movwf	drawtext@bg+1,c
  5141  0008C8  0E00               	movlw	0
  5142  0008CA  6E3E               	movwf	drawtext@bg,c
  5143  0008CC  0E01               	movlw	1
  5144  0008CE  6E40               	movwf	drawtext@size,c
  5145  0008D0  0E32               	movlw	50
  5146  0008D2  ECA1  F008         	call	_drawtext
  5147                           
  5148                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5149  0008D6  C04E  F011         	movff	_txt,strcpy@to
  5150  0008DA  C04F  F012         	movff	_txt+1,strcpy@to+1
  5151  0008DE  0EE8               	movlw	low STR_8
  5152  0008E0  6E13               	movwf	strcpy@from,c
  5153  0008E2  0EFF               	movlw	high STR_8
  5154  0008E4  6E14               	movwf	strcpy@from+1,c
  5155  0008E6  EC35  F010         	call	_strcpy	;wreg free
  5156                           
  5157                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5158  0008EA  0E47               	movlw	71
  5159  0008EC  6E39               	movwf	drawtext@y,c
  5160  0008EE  C04E  F03A         	movff	_txt,drawtext@_text
  5161  0008F2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5162  0008F6  0EF8               	movlw	248
  5163  0008F8  6E3D               	movwf	drawtext@color+1,c
  5164  0008FA  0E00               	movlw	0
  5165  0008FC  6E3C               	movwf	drawtext@color,c
  5166  0008FE  0E00               	movlw	0
  5167  000900  6E3F               	movwf	drawtext@bg+1,c
  5168  000902  0E00               	movlw	0
  5169  000904  6E3E               	movwf	drawtext@bg,c
  5170  000906  0E01               	movlw	1
  5171  000908  6E40               	movwf	drawtext@size,c
  5172  00090A  0E32               	movlw	50
  5173  00090C  ECA1  F008         	call	_drawtext
  5174                           
  5175                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5176  000910  C04E  F011         	movff	_txt,strcpy@to
  5177  000914  C04F  F012         	movff	_txt+1,strcpy@to+1
  5178  000918  0EDD               	movlw	low STR_9
  5179  00091A  6E13               	movwf	strcpy@from,c
  5180  00091C  0EFF               	movlw	high STR_9
  5181  00091E  6E14               	movwf	strcpy@from+1,c
  5182  000920  EC35  F010         	call	_strcpy	;wreg free
  5183                           
  5184                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5185  000924  0E78               	movlw	120
  5186  000926  6E39               	movwf	drawtext@y,c
  5187  000928  C04E  F03A         	movff	_txt,drawtext@_text
  5188  00092C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5189  000930  0E00               	movlw	0
  5190  000932  6E3D               	movwf	drawtext@color+1,c
  5191  000934  0E1F               	movlw	31
  5192  000936  6E3C               	movwf	drawtext@color,c
  5193  000938  0E00               	movlw	0
  5194  00093A  6E3F               	movwf	drawtext@bg+1,c
  5195  00093C  0E00               	movlw	0
  5196  00093E  6E3E               	movwf	drawtext@bg,c
  5197  000940  0E01               	movlw	1
  5198  000942  6E40               	movwf	drawtext@size,c
  5199  000944  0E55               	movlw	85
  5200  000946  ECA1  F008         	call	_drawtext
  5201                           
  5202                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5203  00094A  C04E  F011         	movff	_txt,strcpy@to
  5204  00094E  C04F  F012         	movff	_txt+1,strcpy@to+1
  5205  000952  0EFC               	movlw	low STR_10
  5206  000954  6E13               	movwf	strcpy@from,c
  5207  000956  0EFF               	movlw	high STR_10
  5208  000958  6E14               	movwf	strcpy@from+1,c
  5209  00095A  EC35  F010         	call	_strcpy	;wreg free
  5210                           
  5211                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5212  00095E  0E8C               	movlw	140
  5213  000960  6E39               	movwf	drawtext@y,c
  5214  000962  C04E  F03A         	movff	_txt,drawtext@_text
  5215  000966  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5216  00096A  0EFF               	movlw	255
  5217  00096C  6E3D               	movwf	drawtext@color+1,c
  5218  00096E  683C               	setf	drawtext@color,c
  5219  000970  0E00               	movlw	0
  5220  000972  6E3F               	movwf	drawtext@bg+1,c
  5221  000974  0E00               	movlw	0
  5222  000976  6E3E               	movwf	drawtext@bg,c
  5223  000978  0E01               	movlw	1
  5224  00097A  6E40               	movwf	drawtext@size,c
  5225  00097C  0E0C               	movlw	12
  5226  00097E  ECA1  F008         	call	_drawtext
  5227                           
  5228                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5229  000982  C04E  F011         	movff	_txt,strcpy@to
  5230  000986  C04F  F012         	movff	_txt+1,strcpy@to+1
  5231  00098A  0EF5               	movlw	low STR_11
  5232  00098C  6E13               	movwf	strcpy@from,c
  5233  00098E  0EFF               	movlw	high STR_11
  5234  000990  6E14               	movwf	strcpy@from+1,c
  5235  000992  EC35  F010         	call	_strcpy	;wreg free
  5236                           
  5237                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5238  000996  0E8C               	movlw	140
  5239  000998  6E39               	movwf	drawtext@y,c
  5240  00099A  C04E  F03A         	movff	_txt,drawtext@_text
  5241  00099E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5242  0009A2  0EFF               	movlw	255
  5243  0009A4  6E3D               	movwf	drawtext@color+1,c
  5244  0009A6  683C               	setf	drawtext@color,c
  5245  0009A8  0E00               	movlw	0
  5246  0009AA  6E3F               	movwf	drawtext@bg+1,c
  5247  0009AC  0E00               	movlw	0
  5248  0009AE  6E3E               	movwf	drawtext@bg,c
  5249  0009B0  0E01               	movlw	1
  5250  0009B2  6E40               	movwf	drawtext@size,c
  5251  0009B4  0E5F               	movlw	95
  5252  0009B6  ECA1  F008         	call	_drawtext
  5253  0009BA  0012               	return		;funcret
  5254  0009BC                     __end_of_Initialize_Screen:
  5255                           	opt stack 0
  5256                           tblptru	equ	0xFF8
  5257                           tblptrh	equ	0xFF7
  5258                           tblptrl	equ	0xFF6
  5259                           tablat	equ	0xFF5
  5260                           prodh	equ	0xFF4
  5261                           prodl	equ	0xFF3
  5262                           intcon	equ	0xFF2
  5263                           intcon2	equ	0xFF1
  5264                           postinc0	equ	0xFEE
  5265                           wreg	equ	0xFE8
  5266                           postdec1	equ	0xFE5
  5267                           plusw1	equ	0xFE3
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           plusw2	equ	0xFDB
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _strcpy *****************
  5278 ;; Defined at:
  5279 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  to              2   16[COMRAM] PTR unsigned char 
  5282 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5283 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5284 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(3), 
  5285 ;;		 -> STR_9(6), STR_8(5), STR_7(5), STR_6(2), 
  5286 ;;		 -> STR_5(3), STR_4(13), STR_3(22), 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5289 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  2   16[COMRAM] PTR unsigned char 
  5292 ;; Registers used:
  5293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;Total ram usage:        6 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    3
  5306 ;; This function calls:
  5307 ;;		Nothing
  5308 ;; This function is called by:
  5309 ;;		_Initialize_Screen
  5310 ;;		_Update_Screen
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text16
  5315  00206A                     __ptext16:
  5316                           	opt stack 0
  5317  00206A                     _strcpy:
  5318                           	opt stack 26
  5319                           
  5320                           ;incstack = 0
  5321  00206A  C011  F015         	movff	strcpy@to,strcpy@cp
  5322  00206E  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5323  002072  D005               	goto	l6133
  5324  002074                     l6131:
  5325  002074  4A15               	infsnz	strcpy@cp,f,c
  5326  002076  2A16               	incf	strcpy@cp+1,f,c
  5327  002078  4A13               	infsnz	strcpy@from,f,c
  5328  00207A  2A14               	incf	strcpy@from+1,f,c
  5329  00207C  D000               	goto	l6133
  5330  00207E                     l6133:
  5331  00207E  C013  FFF6         	movff	strcpy@from,tblptrl
  5332  002082  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5333  002086                     	if	0	;tblptru may be non-zero
  5334  002086                     	endif
  5335  002086                     	if	0	;tblptru may be non-zero
  5336  002086                     	endif
  5337  002086  C015  FFD9         	movff	strcpy@cp,fsr2l
  5338  00208A  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5339  00208E  0008               	tblrd		*
  5340  002090  CFF5 FFDF          	movff	tablat,indf2
  5341  002094  50DF               	movf	indf2,w,c
  5342  002096  A4D8               	btfss	status,2,c
  5343  002098  D7ED               	goto	l6131
  5344                           
  5345                           ;	Return value of _strcpy is never used
  5346  00209A  0012               	return		;funcret
  5347  00209C                     __end_of_strcpy:
  5348                           	opt stack 0
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           intcon	equ	0xFF2
  5356                           intcon2	equ	0xFF1
  5357                           postinc0	equ	0xFEE
  5358                           wreg	equ	0xFE8
  5359                           postdec1	equ	0xFE5
  5360                           plusw1	equ	0xFE3
  5361                           fsr1l	equ	0xFE1
  5362                           indf2	equ	0xFDF
  5363                           postinc2	equ	0xFDE
  5364                           postdec2	equ	0xFDD
  5365                           plusw2	equ	0xFDB
  5366                           fsr2h	equ	0xFDA
  5367                           fsr2l	equ	0xFD9
  5368                           status	equ	0xFD8
  5369                           
  5370 ;; *************** function _fillScreen *****************
  5371 ;; Defined at:
  5372 ;;		line 620 in file "ST7735_TFT.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  color           2   35[COMRAM] unsigned int 
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;		None               void
  5379 ;; Registers used:
  5380 ;;		wreg, status,2, status,0, cstack
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;Total ram usage:        2 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    7
  5393 ;; This function calls:
  5394 ;;		_fillRectangle
  5395 ;; This function is called by:
  5396 ;;		_Initialize_Screen
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           	psect	text17
  5401  0021FC                     __ptext17:
  5402                           	opt stack 0
  5403  0021FC                     _fillScreen:
  5404                           	opt stack 22
  5405                           
  5406                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5407                           
  5408                           ;incstack = 0
  5409  0021FC  0E00               	movlw	0
  5410  0021FE  6E18               	movwf	fillRectangle@y,c
  5411  002200  0E80               	movlw	128
  5412  002202  6E19               	movwf	fillRectangle@w,c
  5413  002204  0EA0               	movlw	160
  5414  002206  6E1A               	movwf	fillRectangle@h,c
  5415  002208  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5416  00220C  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5417  002210  0E00               	movlw	0
  5418  002212  ECFF  F00A         	call	_fillRectangle
  5419  002216  0012               	return		;funcret
  5420  002218                     __end_of_fillScreen:
  5421                           	opt stack 0
  5422                           tblptru	equ	0xFF8
  5423                           tblptrh	equ	0xFF7
  5424                           tblptrl	equ	0xFF6
  5425                           tablat	equ	0xFF5
  5426                           prodh	equ	0xFF4
  5427                           prodl	equ	0xFF3
  5428                           intcon	equ	0xFF2
  5429                           intcon2	equ	0xFF1
  5430                           postinc0	equ	0xFEE
  5431                           wreg	equ	0xFE8
  5432                           postdec1	equ	0xFE5
  5433                           plusw1	equ	0xFE3
  5434                           fsr1l	equ	0xFE1
  5435                           indf2	equ	0xFDF
  5436                           postinc2	equ	0xFDE
  5437                           postdec2	equ	0xFDD
  5438                           plusw2	equ	0xFDB
  5439                           fsr2h	equ	0xFDA
  5440                           fsr2l	equ	0xFD9
  5441                           status	equ	0xFD8
  5442                           
  5443 ;; *************** function _fillRectangle *****************
  5444 ;; Defined at:
  5445 ;;		line 504 in file "ST7735_TFT.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;  x               1    wreg     unsigned char 
  5448 ;;  y               1   23[COMRAM] unsigned char 
  5449 ;;  w               1   24[COMRAM] unsigned char 
  5450 ;;  h               1   25[COMRAM] unsigned char 
  5451 ;;  color           2   26[COMRAM] unsigned int 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  x               1   34[COMRAM] unsigned char 
  5454 ;;  lo              1   33[COMRAM] unsigned char 
  5455 ;;  hi              1   32[COMRAM] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5465 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;Total ram usage:       12 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    6
  5472 ;; This function calls:
  5473 ;;		_setAddrWindow
  5474 ;;		_spiwrite
  5475 ;; This function is called by:
  5476 ;;		_fillScreen
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text18
  5481  0015FE                     __ptext18:
  5482                           	opt stack 0
  5483  0015FE                     _fillRectangle:
  5484                           	opt stack 22
  5485                           
  5486                           ;incstack = 0
  5487                           ;fillRectangle@x stored from wreg
  5488  0015FE  6E23               	movwf	fillRectangle@x,c
  5489                           
  5490                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5491                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5492  001600  0E80               	movlw	128
  5493  001602  6023               	cpfslt	fillRectangle@x,c
  5494  001604  D069               	goto	l471
  5495  001606  0E9F               	movlw	159
  5496  001608  6418               	cpfsgt	fillRectangle@y,c
  5497  00160A  D001               	goto	l5929
  5498                           
  5499                           ;ST7735_TFT.c: 508: return;
  5500  00160C  D065               	goto	l471
  5501  00160E                     l5929:
  5502                           
  5503                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5504  00160E  0EFF               	movlw	255
  5505  001610  6E1D               	movwf	??_fillRectangle& (0+255),c
  5506  001612  0EFF               	movlw	255
  5507  001614  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5508  001616  5019               	movf	fillRectangle@w,w,c
  5509  001618  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5510  00161C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5511  00161E  261F               	addwf	??_fillRectangle+2,f,c
  5512  001620  0E00               	movlw	0
  5513  001622  2220               	addwfc	??_fillRectangle+3,f,c
  5514  001624  501D               	movf	??_fillRectangle,w,c
  5515  001626  261F               	addwf	??_fillRectangle+2,f,c
  5516  001628  501E               	movf	??_fillRectangle+1,w,c
  5517  00162A  2220               	addwfc	??_fillRectangle+3,f,c
  5518  00162C  BE20               	btfsc	??_fillRectangle+3,7,c
  5519  00162E  D00A               	goto	l472
  5520  001630  5020               	movf	??_fillRectangle+3,w,c
  5521  001632  E104               	bnz	u4580
  5522  001634  0E80               	movlw	128
  5523  001636  5C1F               	subwf	??_fillRectangle+2,w,c
  5524  001638  A0D8               	btfss	status,0,c
  5525  00163A  D004               	goto	l472
  5526  00163C                     u4580:
  5527                           
  5528                           ;ST7735_TFT.c: 510: w = 128 - x;
  5529  00163C  5023               	movf	fillRectangle@x,w,c
  5530  00163E  0800               	sublw	0
  5531  001640  0F80               	addlw	128
  5532  001642  6E19               	movwf	fillRectangle@w,c
  5533  001644                     l472:
  5534                           
  5535                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5536  001644  0EFF               	movlw	255
  5537  001646  6E1D               	movwf	??_fillRectangle& (0+255),c
  5538  001648  0EFF               	movlw	255
  5539  00164A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5540  00164C  501A               	movf	fillRectangle@h,w,c
  5541  00164E  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5542  001652  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5543  001654  261F               	addwf	??_fillRectangle+2,f,c
  5544  001656  0E00               	movlw	0
  5545  001658  2220               	addwfc	??_fillRectangle+3,f,c
  5546  00165A  501D               	movf	??_fillRectangle,w,c
  5547  00165C  261F               	addwf	??_fillRectangle+2,f,c
  5548  00165E  501E               	movf	??_fillRectangle+1,w,c
  5549  001660  2220               	addwfc	??_fillRectangle+3,f,c
  5550  001662  BE20               	btfsc	??_fillRectangle+3,7,c
  5551  001664  D00B               	goto	l5935
  5552  001666  5020               	movf	??_fillRectangle+3,w,c
  5553  001668  E104               	bnz	u4590
  5554  00166A  0EA0               	movlw	160
  5555  00166C  5C1F               	subwf	??_fillRectangle+2,w,c
  5556  00166E  A0D8               	btfss	status,0,c
  5557  001670  D005               	goto	l5935
  5558  001672                     u4590:
  5559                           
  5560                           ;ST7735_TFT.c: 512: h = 160 - y;
  5561  001672  5018               	movf	fillRectangle@y,w,c
  5562  001674  0800               	sublw	0
  5563  001676  0FA0               	addlw	160
  5564  001678  6E1A               	movwf	fillRectangle@h,c
  5565  00167A  D000               	goto	l5935
  5566  00167C                     l5935:
  5567                           
  5568                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5569  00167C  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5570  001680  5023               	movf	fillRectangle@x,w,c
  5571  001682  2419               	addwf	fillRectangle@w,w,c
  5572  001684  6E1D               	movwf	??_fillRectangle& (0+255),c
  5573  001686  041D               	decf	??_fillRectangle,w,c
  5574  001688  6E15               	movwf	setAddrWindow@x1,c
  5575  00168A  5018               	movf	fillRectangle@y,w,c
  5576  00168C  241A               	addwf	fillRectangle@h,w,c
  5577  00168E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5578  001690  041E               	decf	??_fillRectangle+1,w,c
  5579  001692  6E16               	movwf	setAddrWindow@y1,c
  5580  001694  5023               	movf	fillRectangle@x,w,c
  5581  001696  ECBD  F00E         	call	_setAddrWindow
  5582                           
  5583                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5584  00169A  501C               	movf	fillRectangle@color+1,w,c
  5585  00169C  6E21               	movwf	fillRectangle@hi,c
  5586  00169E  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5587                           
  5588                           ;ST7735_TFT.c: 515: PORTBbits.RB5 = 1;
  5589  0016A2  8A81               	bsf	3969,5,c	;volatile
  5590                           
  5591                           ;ST7735_TFT.c: 516: PORTBbits.RB6 = 0;
  5592  0016A4  9C81               	bcf	3969,6,c	;volatile
  5593                           
  5594                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5595  0016A6  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5596  0016AA                     l5947:
  5597  0016AA  5018               	movf	fillRectangle@y,w,c
  5598  0016AC  B4D8               	btfsc	status,2,c
  5599  0016AE  D013               	goto	l475
  5600  0016B0  D001               	goto	l474
  5601  0016B2  D011               	goto	l475
  5602  0016B4                     l474:
  5603                           
  5604                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5605  0016B4  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5606  0016B8                     l5951:
  5607  0016B8  5023               	movf	fillRectangle@x,w,c
  5608  0016BA  B4D8               	btfsc	status,2,c
  5609  0016BC  D00A               	goto	l5961
  5610  0016BE  D001               	goto	l5955
  5611  0016C0  D008               	goto	l5961
  5612  0016C2                     l5955:
  5613                           
  5614                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5615  0016C2  5021               	movf	fillRectangle@hi,w,c
  5616  0016C4  EC6E  F011         	call	_spiwrite
  5617                           
  5618                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5619  0016C8  5022               	movf	fillRectangle@lo,w,c
  5620  0016CA  EC6E  F011         	call	_spiwrite
  5621  0016CE  0623               	decf	fillRectangle@x,f,c
  5622  0016D0  D7F3               	goto	l5951
  5623  0016D2                     l5961:
  5624  0016D2  0618               	decf	fillRectangle@y,f,c
  5625  0016D4  D7EA               	goto	l5947
  5626  0016D6                     l475:
  5627                           
  5628                           ;ST7735_TFT.c: 522: }
  5629                           ;ST7735_TFT.c: 523: }
  5630                           ;ST7735_TFT.c: 524: PORTBbits.RB6 = 1;
  5631  0016D6  8C81               	bsf	3969,6,c	;volatile
  5632  0016D8                     l471:
  5633  0016D8  0012               	return		;funcret
  5634  0016DA                     __end_of_fillRectangle:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           prodh	equ	0xFF4
  5641                           prodl	equ	0xFF3
  5642                           intcon	equ	0xFF2
  5643                           intcon2	equ	0xFF1
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           postdec1	equ	0xFE5
  5647                           plusw1	equ	0xFE3
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           postinc2	equ	0xFDE
  5651                           postdec2	equ	0xFDD
  5652                           plusw2	equ	0xFDB
  5653                           fsr2h	equ	0xFDA
  5654                           fsr2l	equ	0xFD9
  5655                           status	equ	0xFD8
  5656                           
  5657 ;; *************** function _drawtext *****************
  5658 ;; Defined at:
  5659 ;;		line 475 in file "ST7735_TFT.c"
  5660 ;; Parameters:    Size  Location     Type
  5661 ;;  x               1    wreg     unsigned char 
  5662 ;;  y               1   56[COMRAM] unsigned char 
  5663 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5664 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5665 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5666 ;;		 -> buffer(33), 
  5667 ;;  color           2   59[COMRAM] unsigned int 
  5668 ;;  bg              2   61[COMRAM] unsigned int 
  5669 ;;  size            1   63[COMRAM] unsigned char 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  x               1    0[BANK0 ] unsigned char 
  5672 ;;  i               2    3[BANK0 ] unsigned int 
  5673 ;;  textsize        2    1[BANK0 ] unsigned int 
  5674 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5675 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5676 ;; Return value:  Size  Location     Type
  5677 ;;		None               void
  5678 ;; Registers used:
  5679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5685 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;Total ram usage:       17 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    9
  5692 ;; This function calls:
  5693 ;;		_drawChar
  5694 ;;		_strlen
  5695 ;; This function is called by:
  5696 ;;		_Initialize_Screen
  5697 ;;		_Update_Screen
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           	psect	text19
  5702  001142                     __ptext19:
  5703                           	opt stack 0
  5704  001142                     _drawtext:
  5705                           	opt stack 20
  5706                           
  5707                           ;incstack = 0
  5708                           ;drawtext@x stored from wreg
  5709  001142  0100               	movlb	0	; () banked
  5710  001144  6FE4               	movwf	drawtext@x& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5714                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5715                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5716  001146  C0E4  F0EA         	movff	drawtext@x,drawtext@cursor_x
  5717                           
  5718                           ; BSR set to: 0
  5719  00114A  C039  F0E9         	movff	drawtext@y,drawtext@cursor_y
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5723  00114E  C03A  F011         	movff	drawtext@_text,strlen@s
  5724  001152  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5725  001156  ECBE  F00F         	call	_strlen	;wreg free
  5726  00115A  C011  F0E5         	movff	?_strlen,drawtext@textsize
  5727  00115E  C012  F0E6         	movff	?_strlen+1,drawtext@textsize+1
  5728                           
  5729                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5730  001162  0E00               	movlw	0
  5731  001164  0100               	movlb	0	; () banked
  5732  001166  6FE8               	movwf	(drawtext@i+1)& (0+255),b
  5733  001168  0E00               	movlw	0
  5734  00116A  6FE7               	movwf	drawtext@i& (0+255),b
  5735  00116C  D064               	goto	l6169
  5736  00116E                     l6143:
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5740  00116E  506F               	movf	_wrap,w,c
  5741  001170  B4D8               	btfsc	status,2,c
  5742  001172  D034               	goto	l6159
  5743                           
  5744                           ; BSR set to: 0
  5745  001174  5040               	movf	drawtext@size,w,c
  5746  001176  0D05               	mullw	5
  5747  001178  0100               	movlb	0	; () banked
  5748  00117A  51EA               	movf	drawtext@cursor_x& (0+255),w,b
  5749  00117C  6E41               	movwf	??_drawtext& (0+255),c
  5750  00117E  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5751  001180  50F3               	movf	prodl,w,c
  5752  001182  2641               	addwf	??_drawtext,f,c
  5753  001184  50F4               	movf	prodh,w,c
  5754  001186  2242               	addwfc	??_drawtext+1,f,c
  5755  001188  BE42               	btfsc	??_drawtext+1,7,c
  5756  00118A  D028               	goto	l6159
  5757  00118C  5042               	movf	??_drawtext+1,w,c
  5758  00118E  E104               	bnz	u4810
  5759  001190  0E81               	movlw	129
  5760  001192  5C41               	subwf	??_drawtext,w,c
  5761  001194  A0D8               	btfss	status,0,c
  5762  001196  D022               	goto	l6159
  5763  001198                     u4810:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5767  001198  0E00               	movlw	0
  5768  00119A  0100               	movlb	0	; () banked
  5769  00119C  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5773  00119E  5040               	movf	drawtext@size,w,c
  5774  0011A0  0D07               	mullw	7
  5775  0011A2  50F3               	movf	prodl,w,c
  5776  0011A4  0100               	movlb	0	; () banked
  5777  0011A6  25E9               	addwf	drawtext@cursor_y& (0+255),w,b
  5778  0011A8  0F03               	addlw	3
  5779  0011AA  0100               	movlb	0	; () banked
  5780  0011AC  6FE9               	movwf	drawtext@cursor_y& (0+255),b
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5784  0011AE  0EA0               	movlw	160
  5785  0011B0  0100               	movlb	0	; () banked
  5786  0011B2  65E9               	cpfsgt	drawtext@cursor_y& (0+255),b
  5787  0011B4  D004               	goto	l6155
  5788                           
  5789                           ; BSR set to: 0
  5790  0011B6  0EA0               	movlw	160
  5791  0011B8  0100               	movlb	0	; () banked
  5792  0011BA  6FE9               	movwf	drawtext@cursor_y& (0+255),b
  5793  0011BC  D000               	goto	l6155
  5794  0011BE                     l6155:
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5798  0011BE  0100               	movlb	0	; () banked
  5799  0011C0  51E7               	movf	drawtext@i& (0+255),w,b
  5800  0011C2  243A               	addwf	drawtext@_text,w,c
  5801  0011C4  6ED9               	movwf	fsr2l,c
  5802  0011C6  0100               	movlb	0	; () banked
  5803  0011C8  51E8               	movf	(drawtext@i+1)& (0+255),w,b
  5804  0011CA  203B               	addwfc	drawtext@_text+1,w,c
  5805  0011CC  6EDA               	movwf	fsr2h,c
  5806  0011CE  0E20               	movlw	32
  5807  0011D0  18DE               	xorwf	postinc2,w,c
  5808  0011D2  B4D8               	btfsc	status,2,c
  5809  0011D4  D02C               	goto	l6167
  5810  0011D6  D002               	goto	l6159
  5811                           
  5812                           ; BSR set to: 0
  5813  0011D8  D02A               	goto	l6167
  5814                           
  5815                           ; BSR set to: 0
  5816  0011DA  D000               	goto	l6159
  5817  0011DC                     l6159:
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5821  0011DC  C0E9  F02E         	movff	drawtext@cursor_y,drawChar@y
  5822  0011E0  0100               	movlb	0	; () banked
  5823  0011E2  51E7               	movf	drawtext@i& (0+255),w,b
  5824  0011E4  243A               	addwf	drawtext@_text,w,c
  5825  0011E6  6ED9               	movwf	fsr2l,c
  5826  0011E8  0100               	movlb	0	; () banked
  5827  0011EA  51E8               	movf	(drawtext@i+1)& (0+255),w,b
  5828  0011EC  203B               	addwfc	drawtext@_text+1,w,c
  5829  0011EE  6EDA               	movwf	fsr2h,c
  5830  0011F0  50DF               	movf	indf2,w,c
  5831  0011F2  6E2F               	movwf	drawChar@c,c
  5832  0011F4  C03C  F030         	movff	drawtext@color,drawChar@color
  5833  0011F8  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5834  0011FC  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5835  001200  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5836  001204  C040  F034         	movff	drawtext@size,drawChar@size
  5837  001208  0100               	movlb	0	; () banked
  5838  00120A  51EA               	movf	drawtext@cursor_x& (0+255),w,b
  5839  00120C  EC6E  F007         	call	_drawChar
  5840                           
  5841                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5842  001210  5040               	movf	drawtext@size,w,c
  5843  001212  0D06               	mullw	6
  5844  001214  50F3               	movf	prodl,w,c
  5845  001216  0100               	movlb	0	; () banked
  5846  001218  25EA               	addwf	drawtext@cursor_x& (0+255),w,b
  5847  00121A  0100               	movlb	0	; () banked
  5848  00121C  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  5852  00121E  0E80               	movlw	128
  5853  001220  0100               	movlb	0	; () banked
  5854  001222  65EA               	cpfsgt	drawtext@cursor_x& (0+255),b
  5855  001224  D004               	goto	l6167
  5856                           
  5857                           ; BSR set to: 0
  5858  001226  0E80               	movlw	128
  5859  001228  0100               	movlb	0	; () banked
  5860  00122A  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5861                           
  5862                           ; BSR set to: 0
  5863  00122C  D000               	goto	l6167
  5864  00122E                     l6167:
  5865                           
  5866                           ; BSR set to: 0
  5867  00122E  0100               	movlb	0	; () banked
  5868  001230  4BE7               	infsnz	drawtext@i& (0+255),f,b
  5869  001232  2BE8               	incf	(drawtext@i+1)& (0+255),f,b
  5870  001234  D000               	goto	l6169
  5871  001236                     l6169:
  5872                           
  5873                           ; BSR set to: 0
  5874  001236  0100               	movlb	0	; () banked
  5875  001238  51E5               	movf	drawtext@textsize& (0+255),w,b
  5876  00123A  0100               	movlb	0	; () banked
  5877  00123C  5DE7               	subwf	drawtext@i& (0+255),w,b
  5878  00123E  0100               	movlb	0	; () banked
  5879  001240  51E6               	movf	(drawtext@textsize+1)& (0+255),w,b
  5880  001242  0100               	movlb	0	; () banked
  5881  001244  59E8               	subwfb	(drawtext@i+1)& (0+255),w,b
  5882  001246  A0D8               	btfss	status,0,c
  5883  001248  D792               	goto	l6143
  5884                           
  5885                           ; BSR set to: 0
  5886                           
  5887                           ; BSR set to: 0
  5888  00124A  0012               	return		;funcret
  5889  00124C                     __end_of_drawtext:
  5890                           	opt stack 0
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           intcon2	equ	0xFF1
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           postdec1	equ	0xFE5
  5902                           plusw1	equ	0xFE3
  5903                           fsr1l	equ	0xFE1
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           plusw2	equ	0xFDB
  5908                           fsr2h	equ	0xFDA
  5909                           fsr2l	equ	0xFD9
  5910                           status	equ	0xFD8
  5911                           
  5912 ;; *************** function _strlen *****************
  5913 ;; Defined at:
  5914 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5917 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5918 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5919 ;;		 -> buffer(33), 
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5922 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5923 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5924 ;;		 -> buffer(33), 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  2   16[COMRAM] unsigned int 
  5927 ;; Registers used:
  5928 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5934 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;Total ram usage:        6 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    3
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_drawtext
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text20
  5949  001F7C                     __ptext20:
  5950                           	opt stack 0
  5951  001F7C                     _strlen:
  5952                           	opt stack 25
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;incstack = 0
  5956  001F7C  C011  F015         	movff	strlen@s,strlen@cp
  5957  001F80  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5958  001F84  D003               	goto	l5919
  5959  001F86                     l5917:
  5960  001F86  4A15               	infsnz	strlen@cp,f,c
  5961  001F88  2A16               	incf	strlen@cp+1,f,c
  5962  001F8A  D000               	goto	l5919
  5963  001F8C                     l5919:
  5964  001F8C  C015  FFD9         	movff	strlen@cp,fsr2l
  5965  001F90  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5966  001F94  50DF               	movf	indf2,w,c
  5967  001F96  A4D8               	btfss	status,2,c
  5968  001F98  D7F6               	goto	l5917
  5969  001F9A  C011  F013         	movff	strlen@s,??_strlen
  5970  001F9E  C012  F014         	movff	strlen@s+1,??_strlen+1
  5971  001FA2  1E13               	comf	??_strlen,f,c
  5972  001FA4  1E14               	comf	??_strlen+1,f,c
  5973  001FA6  4A13               	infsnz	??_strlen,f,c
  5974  001FA8  2A14               	incf	??_strlen+1,f,c
  5975  001FAA  5015               	movf	strlen@cp,w,c
  5976  001FAC  2413               	addwf	??_strlen,w,c
  5977  001FAE  6E11               	movwf	?_strlen,c
  5978  001FB0  5016               	movf	strlen@cp+1,w,c
  5979  001FB2  2014               	addwfc	??_strlen+1,w,c
  5980  001FB4  6E12               	movwf	?_strlen+1,c
  5981  001FB6  D000               	goto	l1453
  5982  001FB8                     l1453:
  5983  001FB8  0012               	return		;funcret
  5984  001FBA                     __end_of_strlen:
  5985                           	opt stack 0
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           intcon	equ	0xFF2
  5993                           intcon2	equ	0xFF1
  5994                           postinc0	equ	0xFEE
  5995                           wreg	equ	0xFE8
  5996                           postdec1	equ	0xFE5
  5997                           plusw1	equ	0xFE3
  5998                           fsr1l	equ	0xFE1
  5999                           indf2	equ	0xFDF
  6000                           postinc2	equ	0xFDE
  6001                           postdec2	equ	0xFDD
  6002                           plusw2	equ	0xFDB
  6003                           fsr2h	equ	0xFDA
  6004                           fsr2l	equ	0xFD9
  6005                           status	equ	0xFD8
  6006                           
  6007 ;; *************** function _drawChar *****************
  6008 ;; Defined at:
  6009 ;;		line 448 in file "ST7735_TFT.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  x               1    wreg     unsigned char 
  6012 ;;  y               1   45[COMRAM] unsigned char 
  6013 ;;  c               1   46[COMRAM] unsigned char 
  6014 ;;  color           2   47[COMRAM] unsigned int 
  6015 ;;  bg              2   49[COMRAM] unsigned int 
  6016 ;;  size            1   51[COMRAM] unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  x               1   53[COMRAM] unsigned char 
  6019 ;;  line            1   52[COMRAM] unsigned char 
  6020 ;;  i               1   55[COMRAM] unsigned char 
  6021 ;;  j               1   54[COMRAM] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;		None               void
  6024 ;; Registers used:
  6025 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6031 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;Total ram usage:       11 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    8
  6038 ;; This function calls:
  6039 ;;		___wmul
  6040 ;;		_drawPixel
  6041 ;;		_fillRect
  6042 ;; This function is called by:
  6043 ;;		_drawtext
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text21
  6048  000EDC                     __ptext21:
  6049                           	opt stack 0
  6050  000EDC                     _drawChar:
  6051                           	opt stack 20
  6052                           
  6053                           ;incstack = 0
  6054                           ;drawChar@x stored from wreg
  6055  000EDC  6E36               	movwf	drawChar@x,c
  6056                           
  6057                           ;ST7735_TFT.c: 450: char i, j;
  6058                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  6059  000EDE  0E80               	movlw	128
  6060  000EE0  6036               	cpfslt	drawChar@x,c
  6061  000EE2  D0A6               	goto	l434
  6062  000EE4  0E9F               	movlw	159
  6063  000EE6  642E               	cpfsgt	drawChar@y,c
  6064  000EE8  D001               	goto	l5865
  6065                           
  6066                           ;ST7735_TFT.c: 452: return;
  6067  000EEA  D0A2               	goto	l434
  6068  000EEC                     l5865:
  6069                           
  6070                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6071  000EEC  5034               	movf	drawChar@size,w,c
  6072  000EEE  A4D8               	btfss	status,2,c
  6073  000EF0  D003               	goto	l5869
  6074  000EF2  0E01               	movlw	1
  6075  000EF4  6E34               	movwf	drawChar@size,c
  6076  000EF6  D000               	goto	l5869
  6077  000EF8                     l5869:
  6078                           
  6079                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6080  000EF8  0E1F               	movlw	31
  6081  000EFA  642F               	cpfsgt	drawChar@c,c
  6082  000EFC  D004               	goto	l5873
  6083  000EFE  0E7E               	movlw	126
  6084  000F00  642F               	cpfsgt	drawChar@c,c
  6085  000F02  D003               	goto	l436
  6086  000F04  D000               	goto	l5873
  6087  000F06                     l5873:
  6088                           
  6089                           ;ST7735_TFT.c: 455: c = '?';
  6090  000F06  0E3F               	movlw	63
  6091  000F08  6E2F               	movwf	drawChar@c,c
  6092  000F0A                     l436:
  6093                           
  6094                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6095  000F0A  0E00               	movlw	0
  6096  000F0C  6E38               	movwf	drawChar@i,c
  6097  000F0E                     l5875:
  6098  000F0E  0E04               	movlw	4
  6099  000F10  6438               	cpfsgt	drawChar@i,c
  6100  000F12  D001               	goto	l5879
  6101  000F14  D08D               	goto	l434
  6102  000F16                     l5879:
  6103                           
  6104                           ;ST7735_TFT.c: 457: unsigned char line;
  6105                           ;ST7735_TFT.c: 458: if(c < 'S')
  6106  000F16  0E53               	movlw	83
  6107  000F18  602F               	cpfslt	drawChar@c,c
  6108  000F1A  D015               	goto	l5883
  6109                           
  6110                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6111  000F1C  0EE0               	movlw	224
  6112  000F1E  242F               	addwf	drawChar@c,w,c
  6113  000F20  6E11               	movwf	___wmul@multiplier,c
  6114  000F22  6A12               	clrf	___wmul@multiplier+1,c
  6115  000F24  0EFF               	movlw	255
  6116  000F26  2212               	addwfc	___wmul@multiplier+1,f,c
  6117  000F28  0E00               	movlw	0
  6118  000F2A  6E14               	movwf	___wmul@multiplicand+1,c
  6119  000F2C  0E05               	movlw	5
  6120  000F2E  6E13               	movwf	___wmul@multiplicand,c
  6121  000F30  EC93  F010         	call	___wmul	;wreg free
  6122  000F34  5038               	movf	drawChar@i,w,c
  6123  000F36  2611               	addwf	?___wmul,f,c
  6124  000F38  0E00               	movlw	0
  6125  000F3A  2212               	addwfc	?___wmul+1,f,c
  6126  000F3C  0E19               	movlw	low _font
  6127  000F3E  2411               	addwf	?___wmul,w,c
  6128  000F40  6EF6               	movwf	tblptrl,c
  6129  000F42  0EFD               	movlw	high _font
  6130  000F44  D014               	goto	L5
  6131  000F46                     l5883:
  6132                           
  6133                           ;ST7735_TFT.c: 460: else
  6134                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6135  000F46  0EAD               	movlw	173
  6136  000F48  242F               	addwf	drawChar@c,w,c
  6137  000F4A  6E11               	movwf	___wmul@multiplier,c
  6138  000F4C  6A12               	clrf	___wmul@multiplier+1,c
  6139  000F4E  0EFF               	movlw	255
  6140  000F50  2212               	addwfc	___wmul@multiplier+1,f,c
  6141  000F52  0E00               	movlw	0
  6142  000F54  6E14               	movwf	___wmul@multiplicand+1,c
  6143  000F56  0E05               	movlw	5
  6144  000F58  6E13               	movwf	___wmul@multiplicand,c
  6145  000F5A  EC93  F010         	call	___wmul	;wreg free
  6146  000F5E  5038               	movf	drawChar@i,w,c
  6147  000F60  2611               	addwf	?___wmul,f,c
  6148  000F62  0E00               	movlw	0
  6149  000F64  2212               	addwfc	?___wmul+1,f,c
  6150  000F66  0E18               	movlw	low _font2
  6151  000F68  2411               	addwf	?___wmul,w,c
  6152  000F6A  6EF6               	movwf	tblptrl,c
  6153  000F6C  0EFE               	movlw	high _font2
  6154  000F6E                     L5:
  6155  000F6E  2012               	addwfc	?___wmul+1,w,c
  6156  000F70  6EF7               	movwf	tblptrh,c
  6157  000F72                     	if	0	;There are less than 3 active tblptr bytes
  6158  000F72                     	endif
  6159  000F72  0008               	tblrd		*
  6160  000F74  CFF5 F035          	movff	tablat,drawChar@line
  6161  000F78  D000               	goto	l5885
  6162  000F7A                     l5885:
  6163                           
  6164                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6165  000F7A  0E00               	movlw	0
  6166  000F7C  6E37               	movwf	drawChar@j,c
  6167  000F7E                     l5887:
  6168  000F7E  0E06               	movlw	6
  6169  000F80  6437               	cpfsgt	drawChar@j,c
  6170  000F82  D001               	goto	l443
  6171  000F84  D053               	goto	l5911
  6172  000F86                     l443:
  6173                           
  6174                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6175  000F86  A035               	btfss	drawChar@line,0,c
  6176  000F88  D023               	goto	l5897
  6177                           
  6178                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6179  000F8A  0434               	decf	drawChar@size,w,c
  6180  000F8C  A4D8               	btfss	status,2,c
  6181  000F8E  D00C               	goto	l5895
  6182  000F90  502E               	movf	drawChar@y,w,c
  6183  000F92  2437               	addwf	drawChar@j,w,c
  6184  000F94  6E18               	movwf	drawPixel@y,c
  6185  000F96  C030  F019         	movff	drawChar@color,drawPixel@color
  6186  000F9A  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6187  000F9E  5036               	movf	drawChar@x,w,c
  6188  000FA0  2438               	addwf	drawChar@i,w,c
  6189  000FA2  EC4E  F010         	call	_drawPixel
  6190  000FA6  D03E               	goto	l5905
  6191  000FA8                     l5895:
  6192                           
  6193                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6194  000FA8  5037               	movf	drawChar@j,w,c
  6195  000FAA  0234               	mulwf	drawChar@size,c
  6196  000FAC  50F3               	movf	prodl,w,c
  6197  000FAE  242E               	addwf	drawChar@y,w,c
  6198  000FB0  6E23               	movwf	fillRect@y,c
  6199  000FB2  C034  F024         	movff	drawChar@size,fillRect@w
  6200  000FB6  C034  F025         	movff	drawChar@size,fillRect@h
  6201  000FBA  C030  F026         	movff	drawChar@color,fillRect@color
  6202  000FBE  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6203  000FC2  5038               	movf	drawChar@i,w,c
  6204  000FC4  0234               	mulwf	drawChar@size,c
  6205  000FC6  50F3               	movf	prodl,w,c
  6206  000FC8  2436               	addwf	drawChar@x,w,c
  6207  000FCA  EC56  F00F         	call	_fillRect
  6208                           
  6209                           ;ST7735_TFT.c: 466: }
  6210  000FCE  D02A               	goto	l5905
  6211  000FD0                     l5897:
  6212                           
  6213                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6214  000FD0  5030               	movf	drawChar@color,w,c
  6215  000FD2  1832               	xorwf	drawChar@bg,w,c
  6216  000FD4  E104               	bnz	u4510
  6217  000FD6  5031               	movf	drawChar@color+1,w,c
  6218  000FD8  1833               	xorwf	drawChar@bg+1,w,c
  6219  000FDA  B4D8               	btfsc	status,2,c
  6220  000FDC  D023               	goto	l5905
  6221  000FDE                     u4510:
  6222                           
  6223                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6224  000FDE  0434               	decf	drawChar@size,w,c
  6225  000FE0  A4D8               	btfss	status,2,c
  6226  000FE2  D00C               	goto	l5903
  6227  000FE4  502E               	movf	drawChar@y,w,c
  6228  000FE6  2437               	addwf	drawChar@j,w,c
  6229  000FE8  6E18               	movwf	drawPixel@y,c
  6230  000FEA  C032  F019         	movff	drawChar@bg,drawPixel@color
  6231  000FEE  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6232  000FF2  5036               	movf	drawChar@x,w,c
  6233  000FF4  2438               	addwf	drawChar@i,w,c
  6234  000FF6  EC4E  F010         	call	_drawPixel
  6235  000FFA  D014               	goto	l5905
  6236  000FFC                     l5903:
  6237                           
  6238                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6239  000FFC  5037               	movf	drawChar@j,w,c
  6240  000FFE  0234               	mulwf	drawChar@size,c
  6241  001000  50F3               	movf	prodl,w,c
  6242  001002  242E               	addwf	drawChar@y,w,c
  6243  001004  6E23               	movwf	fillRect@y,c
  6244  001006  C034  F024         	movff	drawChar@size,fillRect@w
  6245  00100A  C034  F025         	movff	drawChar@size,fillRect@h
  6246  00100E  C032  F026         	movff	drawChar@bg,fillRect@color
  6247  001012  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6248  001016  5038               	movf	drawChar@i,w,c
  6249  001018  0234               	mulwf	drawChar@size,c
  6250  00101A  50F3               	movf	prodl,w,c
  6251  00101C  2436               	addwf	drawChar@x,w,c
  6252  00101E  EC56  F00F         	call	_fillRect
  6253  001022  D000               	goto	l5905
  6254  001024                     l5905:
  6255  001024  2A37               	incf	drawChar@j,f,c
  6256  001026  90D8               	bcf	status,0,c
  6257  001028  3235               	rrcf	drawChar@line,f,c
  6258  00102A  D7A9               	goto	l5887
  6259  00102C                     l5911:
  6260  00102C  2A38               	incf	drawChar@i,f,c
  6261  00102E  D76F               	goto	l5875
  6262  001030                     l434:
  6263  001030  0012               	return		;funcret
  6264  001032                     __end_of_drawChar:
  6265                           	opt stack 0
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           intcon	equ	0xFF2
  6273                           intcon2	equ	0xFF1
  6274                           postinc0	equ	0xFEE
  6275                           wreg	equ	0xFE8
  6276                           postdec1	equ	0xFE5
  6277                           plusw1	equ	0xFE3
  6278                           fsr1l	equ	0xFE1
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           postdec2	equ	0xFDD
  6282                           plusw2	equ	0xFDB
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _fillRect *****************
  6288 ;; Defined at:
  6289 ;;		line 438 in file "ST7735_TFT.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  x               1    wreg     unsigned char 
  6292 ;;  y               1   34[COMRAM] unsigned char 
  6293 ;;  w               1   35[COMRAM] unsigned char 
  6294 ;;  h               1   36[COMRAM] unsigned char 
  6295 ;;  color           2   37[COMRAM] unsigned int 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  x               1   42[COMRAM] unsigned char 
  6298 ;;  i               2   43[COMRAM] int 
  6299 ;; Return value:  Size  Location     Type
  6300 ;;		None               void
  6301 ;; Registers used:
  6302 ;;		wreg, status,2, status,0, cstack
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6308 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;Total ram usage:       11 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    7
  6315 ;; This function calls:
  6316 ;;		_drawFastVLine
  6317 ;; This function is called by:
  6318 ;;		_drawChar
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text22
  6323  001EAC                     __ptext22:
  6324                           	opt stack 0
  6325  001EAC                     _fillRect:
  6326                           	opt stack 20
  6327                           
  6328                           ;incstack = 0
  6329                           ;fillRect@x stored from wreg
  6330  001EAC  6E2B               	movwf	fillRect@x,c
  6331                           
  6332                           ;ST7735_TFT.c: 440: signed int i;
  6333                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6334  001EAE  C02B  F02C         	movff	fillRect@x,fillRect@i
  6335  001EB2  6A2D               	clrf	fillRect@i+1,c
  6336  001EB4  D00E               	goto	l5397
  6337  001EB6                     l5393:
  6338                           
  6339                           ;ST7735_TFT.c: 443: {
  6340                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6341  001EB6  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6342  001EBA  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6343  001EBE  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6344  001EC2  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6345  001EC6  502C               	movf	fillRect@i,w,c
  6346  001EC8  EC76  F00C         	call	_drawFastVLine
  6347  001ECC  4A2C               	infsnz	fillRect@i,f,c
  6348  001ECE  2A2D               	incf	fillRect@i+1,f,c
  6349  001ED0  D000               	goto	l5397
  6350  001ED2                     l5397:
  6351  001ED2  5024               	movf	fillRect@w,w,c
  6352  001ED4  C02B  F028         	movff	fillRect@x,??_fillRect
  6353  001ED8  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6354  001EDA  2628               	addwf	??_fillRect,f,c
  6355  001EDC  0E00               	movlw	0
  6356  001EDE  2229               	addwfc	??_fillRect+1,f,c
  6357  001EE0  5028               	movf	??_fillRect,w,c
  6358  001EE2  5C2C               	subwf	fillRect@i,w,c
  6359  001EE4  502D               	movf	fillRect@i+1,w,c
  6360  001EE6  0A80               	xorlw	128
  6361  001EE8  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6362  001EEA  5029               	movf	??_fillRect+1,w,c
  6363  001EEC  0A80               	xorlw	128
  6364  001EEE  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6365  001EF0  A0D8               	btfss	status,0,c
  6366  001EF2  D7E1               	goto	l5393
  6367  001EF4  0012               	return		;funcret
  6368  001EF6                     __end_of_fillRect:
  6369                           	opt stack 0
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           intcon2	equ	0xFF1
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           postdec1	equ	0xFE5
  6381                           plusw1	equ	0xFE3
  6382                           fsr1l	equ	0xFE1
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           plusw2	equ	0xFDB
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _drawFastVLine *****************
  6392 ;; Defined at:
  6393 ;;		line 417 in file "ST7735_TFT.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  x               1    wreg     unsigned char 
  6396 ;;  y               1   23[COMRAM] unsigned char 
  6397 ;;  h               1   24[COMRAM] unsigned char 
  6398 ;;  color           2   25[COMRAM] unsigned int 
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;  x               1   33[COMRAM] unsigned char 
  6401 ;;  lo              1   32[COMRAM] unsigned char 
  6402 ;;  hi              1   31[COMRAM] unsigned char 
  6403 ;; Return value:  Size  Location     Type
  6404 ;;		None               void
  6405 ;; Registers used:
  6406 ;;		wreg, status,2, status,0, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;Total ram usage:       11 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    6
  6419 ;; This function calls:
  6420 ;;		_setAddrWindow
  6421 ;;		_spiwrite
  6422 ;; This function is called by:
  6423 ;;		_fillRect
  6424 ;;		_fillCircleHelper
  6425 ;;		_fillCircle
  6426 ;;		_drawRect
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text23
  6431  0018EC                     __ptext23:
  6432                           	opt stack 0
  6433  0018EC                     _drawFastVLine:
  6434                           	opt stack 20
  6435                           
  6436                           ;incstack = 0
  6437                           ;drawFastVLine@x stored from wreg
  6438  0018EC  6E22               	movwf	drawFastVLine@x,c
  6439                           
  6440                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6441                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6442  0018EE  0E80               	movlw	128
  6443  0018F0  6022               	cpfslt	drawFastVLine@x,c
  6444  0018F2  D03F               	goto	l418
  6445  0018F4  0E9F               	movlw	159
  6446  0018F6  6418               	cpfsgt	drawFastVLine@y,c
  6447  0018F8  D001               	goto	l5267
  6448                           
  6449                           ;ST7735_TFT.c: 421: return;
  6450  0018FA  D03B               	goto	l418
  6451  0018FC                     l5267:
  6452                           
  6453                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6454  0018FC  0EFF               	movlw	255
  6455  0018FE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6456  001900  0EFF               	movlw	255
  6457  001902  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6458  001904  5019               	movf	drawFastVLine@h,w,c
  6459  001906  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6460  00190A  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6461  00190C  261E               	addwf	??_drawFastVLine+2,f,c
  6462  00190E  0E00               	movlw	0
  6463  001910  221F               	addwfc	??_drawFastVLine+3,f,c
  6464  001912  501C               	movf	??_drawFastVLine,w,c
  6465  001914  261E               	addwf	??_drawFastVLine+2,f,c
  6466  001916  501D               	movf	??_drawFastVLine+1,w,c
  6467  001918  221F               	addwfc	??_drawFastVLine+3,f,c
  6468  00191A  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6469  00191C  D00B               	goto	l5271
  6470  00191E  501F               	movf	??_drawFastVLine+3,w,c
  6471  001920  E104               	bnz	u3720
  6472  001922  0EA0               	movlw	160
  6473  001924  5C1E               	subwf	??_drawFastVLine+2,w,c
  6474  001926  A0D8               	btfss	status,0,c
  6475  001928  D005               	goto	l5271
  6476  00192A                     u3720:
  6477                           
  6478                           ;ST7735_TFT.c: 423: h = 160 - y;
  6479  00192A  5018               	movf	drawFastVLine@y,w,c
  6480  00192C  0800               	sublw	0
  6481  00192E  0FA0               	addlw	160
  6482  001930  6E19               	movwf	drawFastVLine@h,c
  6483  001932  D000               	goto	l5271
  6484  001934                     l5271:
  6485                           
  6486                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6487  001934  501B               	movf	drawFastVLine@color+1,w,c
  6488  001936  6E20               	movwf	drawFastVLine@hi,c
  6489  001938  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6490                           
  6491                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6492  00193C  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6493  001940  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6494  001944  5018               	movf	drawFastVLine@y,w,c
  6495  001946  2419               	addwf	drawFastVLine@h,w,c
  6496  001948  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6497  00194A  041C               	decf	??_drawFastVLine,w,c
  6498  00194C  6E16               	movwf	setAddrWindow@y1,c
  6499  00194E  5022               	movf	drawFastVLine@x,w,c
  6500  001950  ECBD  F00E         	call	_setAddrWindow
  6501                           
  6502                           ;ST7735_TFT.c: 426: PORTBbits.RB5 = 1;
  6503  001954  8A81               	bsf	3969,5,c	;volatile
  6504                           
  6505                           ;ST7735_TFT.c: 427: PORTBbits.RB6 = 0;
  6506  001956  9C81               	bcf	3969,6,c	;volatile
  6507                           
  6508                           ;ST7735_TFT.c: 429: while (h--) {
  6509  001958  D007               	goto	l5283
  6510  00195A                     l5281:
  6511                           
  6512                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6513  00195A  5020               	movf	drawFastVLine@hi,w,c
  6514  00195C  EC6E  F011         	call	_spiwrite
  6515                           
  6516                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6517  001960  5021               	movf	drawFastVLine@lo,w,c
  6518  001962  EC6E  F011         	call	_spiwrite
  6519  001966  D000               	goto	l5283
  6520  001968                     l5283:
  6521  001968  0619               	decf	drawFastVLine@h,f,c
  6522  00196A  2819               	incf	drawFastVLine@h,w,c
  6523  00196C  A4D8               	btfss	status,2,c
  6524  00196E  D7F5               	goto	l5281
  6525                           
  6526                           ;ST7735_TFT.c: 432: }
  6527                           ;ST7735_TFT.c: 433: PORTBbits.RB6 = 1;
  6528  001970  8C81               	bsf	3969,6,c	;volatile
  6529  001972                     l418:
  6530  001972  0012               	return		;funcret
  6531  001974                     __end_of_drawFastVLine:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           intcon	equ	0xFF2
  6540                           intcon2	equ	0xFF1
  6541                           postinc0	equ	0xFEE
  6542                           wreg	equ	0xFE8
  6543                           postdec1	equ	0xFE5
  6544                           plusw1	equ	0xFE3
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           postdec2	equ	0xFDD
  6549                           plusw2	equ	0xFDB
  6550                           fsr2h	equ	0xFDA
  6551                           fsr2l	equ	0xFD9
  6552                           status	equ	0xFD8
  6553                           
  6554 ;; *************** function _drawCircle *****************
  6555 ;; Defined at:
  6556 ;;		line 529 in file "ST7735_TFT.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  x0              2   27[COMRAM] int 
  6559 ;;  y0              2   29[COMRAM] int 
  6560 ;;  r               2   31[COMRAM] int 
  6561 ;;  color           2   33[COMRAM] unsigned int 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  y               2   45[COMRAM] int 
  6564 ;;  x               2   43[COMRAM] int 
  6565 ;;  f               2   41[COMRAM] int 
  6566 ;;  ddF_y           2   39[COMRAM] int 
  6567 ;;  ddF_x           2   37[COMRAM] int 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;		None               void
  6570 ;; Registers used:
  6571 ;;		wreg, status,2, status,0, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6577 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;Total ram usage:       20 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    7
  6584 ;; This function calls:
  6585 ;;		_drawPixel
  6586 ;; This function is called by:
  6587 ;;		_Initialize_Screen
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text24
  6592  000BBA                     __ptext24:
  6593                           	opt stack 0
  6594  000BBA                     _drawCircle:
  6595                           	opt stack 22
  6596                           
  6597                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6598                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6599                           
  6600                           ;incstack = 0
  6601  000BBA  C020  F024         	movff	drawCircle@r,??_drawCircle
  6602  000BBE  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6603  000BC2  1E24               	comf	??_drawCircle,f,c
  6604  000BC4  1E25               	comf	??_drawCircle+1,f,c
  6605  000BC6  4A24               	infsnz	??_drawCircle,f,c
  6606  000BC8  2A25               	incf	??_drawCircle+1,f,c
  6607  000BCA  0E01               	movlw	1
  6608  000BCC  2424               	addwf	??_drawCircle,w,c
  6609  000BCE  6E2A               	movwf	drawCircle@f,c
  6610  000BD0  0E00               	movlw	0
  6611  000BD2  2025               	addwfc	??_drawCircle+1,w,c
  6612  000BD4  6E2B               	movwf	drawCircle@f+1,c
  6613  000BD6  0E00               	movlw	0
  6614  000BD8  6E27               	movwf	drawCircle@ddF_x+1,c
  6615  000BDA  0E01               	movlw	1
  6616  000BDC  6E26               	movwf	drawCircle@ddF_x,c
  6617  000BDE  C020  F024         	movff	drawCircle@r,??_drawCircle
  6618  000BE2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6619  000BE6  90D8               	bcf	status,0,c
  6620  000BE8  3624               	rlcf	??_drawCircle,f,c
  6621  000BEA  3625               	rlcf	??_drawCircle+1,f,c
  6622  000BEC  1E24               	comf	??_drawCircle,f,c
  6623  000BEE  1E25               	comf	??_drawCircle+1,f,c
  6624  000BF0  4A24               	infsnz	??_drawCircle,f,c
  6625  000BF2  2A25               	incf	??_drawCircle+1,f,c
  6626  000BF4  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6627  000BF8  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6628  000BFC  0E00               	movlw	0
  6629  000BFE  6E2D               	movwf	drawCircle@x+1,c
  6630  000C00  0E00               	movlw	0
  6631  000C02  6E2C               	movwf	drawCircle@x,c
  6632  000C04  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6633  000C08  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6634                           
  6635                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6636  000C0C  501E               	movf	drawCircle@y0,w,c
  6637  000C0E  2420               	addwf	drawCircle@r,w,c
  6638  000C10  6E18               	movwf	drawPixel@y,c
  6639  000C12  C022  F019         	movff	drawCircle@color,drawPixel@color
  6640  000C16  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6641  000C1A  501C               	movf	drawCircle@x0,w,c
  6642  000C1C  EC4E  F010         	call	_drawPixel
  6643                           
  6644                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6645  000C20  5020               	movf	drawCircle@r,w,c
  6646  000C22  0800               	sublw	0
  6647  000C24  241E               	addwf	drawCircle@y0,w,c
  6648  000C26  6E18               	movwf	drawPixel@y,c
  6649  000C28  C022  F019         	movff	drawCircle@color,drawPixel@color
  6650  000C2C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6651  000C30  501C               	movf	drawCircle@x0,w,c
  6652  000C32  EC4E  F010         	call	_drawPixel
  6653                           
  6654                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6655  000C36  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6656  000C3A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6657  000C3E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6658  000C42  501C               	movf	drawCircle@x0,w,c
  6659  000C44  2420               	addwf	drawCircle@r,w,c
  6660  000C46  EC4E  F010         	call	_drawPixel
  6661                           
  6662                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6663  000C4A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6664  000C4E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6665  000C52  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6666  000C56  5020               	movf	drawCircle@r,w,c
  6667  000C58  0800               	sublw	0
  6668  000C5A  241C               	addwf	drawCircle@x0,w,c
  6669  000C5C  EC4E  F010         	call	_drawPixel
  6670                           
  6671                           ;ST7735_TFT.c: 537: while (x < y) {
  6672  000C60  D078               	goto	l6217
  6673  000C62                     l6189:
  6674                           
  6675                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6676  000C62  BE2B               	btfsc	drawCircle@f+1,7,c
  6677  000C64  D00B               	goto	l482
  6678                           
  6679                           ;ST7735_TFT.c: 539: y--;
  6680  000C66  062E               	decf	drawCircle@y,f,c
  6681  000C68  A0D8               	btfss	status,0,c
  6682  000C6A  062F               	decf	drawCircle@y+1,f,c
  6683                           
  6684                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6685  000C6C  0E02               	movlw	2
  6686  000C6E  2628               	addwf	drawCircle@ddF_y,f,c
  6687  000C70  0E00               	movlw	0
  6688  000C72  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6689                           
  6690                           ;ST7735_TFT.c: 541: f += ddF_y;
  6691  000C74  5028               	movf	drawCircle@ddF_y,w,c
  6692  000C76  262A               	addwf	drawCircle@f,f,c
  6693  000C78  5029               	movf	drawCircle@ddF_y+1,w,c
  6694  000C7A  222B               	addwfc	drawCircle@f+1,f,c
  6695  000C7C                     l482:
  6696                           
  6697                           ;ST7735_TFT.c: 542: }
  6698                           ;ST7735_TFT.c: 543: x++;
  6699  000C7C  4A2C               	infsnz	drawCircle@x,f,c
  6700  000C7E  2A2D               	incf	drawCircle@x+1,f,c
  6701                           
  6702                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6703  000C80  0E02               	movlw	2
  6704  000C82  2626               	addwf	drawCircle@ddF_x,f,c
  6705  000C84  0E00               	movlw	0
  6706  000C86  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6707                           
  6708                           ;ST7735_TFT.c: 545: f += ddF_x;
  6709  000C88  5026               	movf	drawCircle@ddF_x,w,c
  6710  000C8A  262A               	addwf	drawCircle@f,f,c
  6711  000C8C  5027               	movf	drawCircle@ddF_x+1,w,c
  6712  000C8E  222B               	addwfc	drawCircle@f+1,f,c
  6713                           
  6714                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6715  000C90  501E               	movf	drawCircle@y0,w,c
  6716  000C92  242E               	addwf	drawCircle@y,w,c
  6717  000C94  6E18               	movwf	drawPixel@y,c
  6718  000C96  C022  F019         	movff	drawCircle@color,drawPixel@color
  6719  000C9A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6720  000C9E  501C               	movf	drawCircle@x0,w,c
  6721  000CA0  242C               	addwf	drawCircle@x,w,c
  6722  000CA2  EC4E  F010         	call	_drawPixel
  6723                           
  6724                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6725  000CA6  501E               	movf	drawCircle@y0,w,c
  6726  000CA8  242E               	addwf	drawCircle@y,w,c
  6727  000CAA  6E18               	movwf	drawPixel@y,c
  6728  000CAC  C022  F019         	movff	drawCircle@color,drawPixel@color
  6729  000CB0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6730  000CB4  502C               	movf	drawCircle@x,w,c
  6731  000CB6  0800               	sublw	0
  6732  000CB8  241C               	addwf	drawCircle@x0,w,c
  6733  000CBA  EC4E  F010         	call	_drawPixel
  6734                           
  6735                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6736  000CBE  502E               	movf	drawCircle@y,w,c
  6737  000CC0  0800               	sublw	0
  6738  000CC2  241E               	addwf	drawCircle@y0,w,c
  6739  000CC4  6E18               	movwf	drawPixel@y,c
  6740  000CC6  C022  F019         	movff	drawCircle@color,drawPixel@color
  6741  000CCA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6742  000CCE  501C               	movf	drawCircle@x0,w,c
  6743  000CD0  242C               	addwf	drawCircle@x,w,c
  6744  000CD2  EC4E  F010         	call	_drawPixel
  6745                           
  6746                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6747  000CD6  502E               	movf	drawCircle@y,w,c
  6748  000CD8  0800               	sublw	0
  6749  000CDA  241E               	addwf	drawCircle@y0,w,c
  6750  000CDC  6E18               	movwf	drawPixel@y,c
  6751  000CDE  C022  F019         	movff	drawCircle@color,drawPixel@color
  6752  000CE2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6753  000CE6  502C               	movf	drawCircle@x,w,c
  6754  000CE8  0800               	sublw	0
  6755  000CEA  241C               	addwf	drawCircle@x0,w,c
  6756  000CEC  EC4E  F010         	call	_drawPixel
  6757                           
  6758                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6759  000CF0  501E               	movf	drawCircle@y0,w,c
  6760  000CF2  242C               	addwf	drawCircle@x,w,c
  6761  000CF4  6E18               	movwf	drawPixel@y,c
  6762  000CF6  C022  F019         	movff	drawCircle@color,drawPixel@color
  6763  000CFA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6764  000CFE  501C               	movf	drawCircle@x0,w,c
  6765  000D00  242E               	addwf	drawCircle@y,w,c
  6766  000D02  EC4E  F010         	call	_drawPixel
  6767                           
  6768                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6769  000D06  501E               	movf	drawCircle@y0,w,c
  6770  000D08  242C               	addwf	drawCircle@x,w,c
  6771  000D0A  6E18               	movwf	drawPixel@y,c
  6772  000D0C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6773  000D10  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6774  000D14  502E               	movf	drawCircle@y,w,c
  6775  000D16  0800               	sublw	0
  6776  000D18  241C               	addwf	drawCircle@x0,w,c
  6777  000D1A  EC4E  F010         	call	_drawPixel
  6778                           
  6779                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6780  000D1E  502C               	movf	drawCircle@x,w,c
  6781  000D20  0800               	sublw	0
  6782  000D22  241E               	addwf	drawCircle@y0,w,c
  6783  000D24  6E18               	movwf	drawPixel@y,c
  6784  000D26  C022  F019         	movff	drawCircle@color,drawPixel@color
  6785  000D2A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6786  000D2E  501C               	movf	drawCircle@x0,w,c
  6787  000D30  242E               	addwf	drawCircle@y,w,c
  6788  000D32  EC4E  F010         	call	_drawPixel
  6789                           
  6790                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6791  000D36  502C               	movf	drawCircle@x,w,c
  6792  000D38  0800               	sublw	0
  6793  000D3A  241E               	addwf	drawCircle@y0,w,c
  6794  000D3C  6E18               	movwf	drawPixel@y,c
  6795  000D3E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6796  000D42  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6797  000D46  502E               	movf	drawCircle@y,w,c
  6798  000D48  0800               	sublw	0
  6799  000D4A  241C               	addwf	drawCircle@x0,w,c
  6800  000D4C  EC4E  F010         	call	_drawPixel
  6801  000D50  D000               	goto	l6217
  6802  000D52                     l6217:
  6803  000D52  502E               	movf	drawCircle@y,w,c
  6804  000D54  5C2C               	subwf	drawCircle@x,w,c
  6805  000D56  502D               	movf	drawCircle@x+1,w,c
  6806  000D58  0A80               	xorlw	128
  6807  000D5A  6E24               	movwf	??_drawCircle& (0+255),c
  6808  000D5C  502F               	movf	drawCircle@y+1,w,c
  6809  000D5E  0A80               	xorlw	128
  6810  000D60  5824               	subwfb	??_drawCircle& (0+255),w,c
  6811  000D62  A0D8               	btfss	status,0,c
  6812  000D64  D77E               	goto	l6189
  6813  000D66  0012               	return		;funcret
  6814  000D68                     __end_of_drawCircle:
  6815                           	opt stack 0
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           intcon	equ	0xFF2
  6823                           intcon2	equ	0xFF1
  6824                           postinc0	equ	0xFEE
  6825                           wreg	equ	0xFE8
  6826                           postdec1	equ	0xFE5
  6827                           plusw1	equ	0xFE3
  6828                           fsr1l	equ	0xFE1
  6829                           indf2	equ	0xFDF
  6830                           postinc2	equ	0xFDE
  6831                           postdec2	equ	0xFDD
  6832                           plusw2	equ	0xFDB
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8
  6836                           
  6837 ;; *************** function _drawPixel *****************
  6838 ;; Defined at:
  6839 ;;		line 408 in file "ST7735_TFT.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;  x               1    wreg     unsigned char 
  6842 ;;  y               1   23[COMRAM] unsigned char 
  6843 ;;  color           2   24[COMRAM] unsigned int 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  x               1   26[COMRAM] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;		None               void
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6855 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;Total ram usage:        4 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    6
  6862 ;; This function calls:
  6863 ;;		_setAddrWindow
  6864 ;;		_write_data
  6865 ;; This function is called by:
  6866 ;;		_drawChar
  6867 ;;		_drawCircle
  6868 ;;		_drawCircleHelper
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text25
  6873  00209C                     __ptext25:
  6874                           	opt stack 0
  6875  00209C                     _drawPixel:
  6876                           	opt stack 21
  6877                           
  6878                           ;incstack = 0
  6879                           ;drawPixel@x stored from wreg
  6880  00209C  6E1B               	movwf	drawPixel@x,c
  6881                           
  6882                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  6883  00209E  0E80               	movlw	128
  6884  0020A0  601B               	cpfslt	drawPixel@x,c
  6885  0020A2  D013               	goto	l412
  6886  0020A4  0E9F               	movlw	159
  6887  0020A6  6418               	cpfsgt	drawPixel@y,c
  6888  0020A8  D001               	goto	l5385
  6889                           
  6890                           ;ST7735_TFT.c: 411: return;
  6891  0020AA  D00F               	goto	l412
  6892  0020AC                     l5385:
  6893                           
  6894                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  6895  0020AC  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6896  0020B0  281B               	incf	drawPixel@x,w,c
  6897  0020B2  6E15               	movwf	setAddrWindow@x1,c
  6898  0020B4  2818               	incf	drawPixel@y,w,c
  6899  0020B6  6E16               	movwf	setAddrWindow@y1,c
  6900  0020B8  501B               	movf	drawPixel@x,w,c
  6901  0020BA  ECBD  F00E         	call	_setAddrWindow
  6902                           
  6903                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  6904  0020BE  501A               	movf	drawPixel@color+1,w,c
  6905  0020C0  ECB9  F011         	call	_write_data
  6906                           
  6907                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  6908  0020C4  5019               	movf	drawPixel@color,w,c
  6909  0020C6  ECB9  F011         	call	_write_data
  6910  0020CA                     l412:
  6911  0020CA  0012               	return		;funcret
  6912  0020CC                     __end_of_drawPixel:
  6913                           	opt stack 0
  6914                           tblptru	equ	0xFF8
  6915                           tblptrh	equ	0xFF7
  6916                           tblptrl	equ	0xFF6
  6917                           tablat	equ	0xFF5
  6918                           prodh	equ	0xFF4
  6919                           prodl	equ	0xFF3
  6920                           intcon	equ	0xFF2
  6921                           intcon2	equ	0xFF1
  6922                           postinc0	equ	0xFEE
  6923                           wreg	equ	0xFE8
  6924                           postdec1	equ	0xFE5
  6925                           plusw1	equ	0xFE3
  6926                           fsr1l	equ	0xFE1
  6927                           indf2	equ	0xFDF
  6928                           postinc2	equ	0xFDE
  6929                           postdec2	equ	0xFDD
  6930                           plusw2	equ	0xFDB
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function _setAddrWindow *****************
  6936 ;; Defined at:
  6937 ;;		line 393 in file "ST7735_TFT.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  x0              1    wreg     unsigned char 
  6940 ;;  y0              1   19[COMRAM] unsigned char 
  6941 ;;  x1              1   20[COMRAM] unsigned char 
  6942 ;;  y1              1   21[COMRAM] unsigned char 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  x0              1   22[COMRAM] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;		None               void
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6954 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;Total ram usage:        4 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    5
  6961 ;; This function calls:
  6962 ;;		_write_command
  6963 ;;		_write_data
  6964 ;; This function is called by:
  6965 ;;		_drawPixel
  6966 ;;		_drawFastVLine
  6967 ;;		_fillRectangle
  6968 ;;		_drawFastHLine
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text26
  6973  001D7A                     __ptext26:
  6974                           	opt stack 0
  6975  001D7A                     _setAddrWindow:
  6976                           	opt stack 20
  6977                           
  6978                           ;incstack = 0
  6979                           ;setAddrWindow@x0 stored from wreg
  6980  001D7A  6E17               	movwf	setAddrWindow@x0,c
  6981                           
  6982                           ;ST7735_TFT.c: 395: write_command(0x2A);
  6983  001D7C  0E2A               	movlw	42
  6984  001D7E  ECC1  F011         	call	_write_command
  6985                           
  6986                           ;ST7735_TFT.c: 396: write_data(0);
  6987  001D82  0E00               	movlw	0
  6988  001D84  ECB9  F011         	call	_write_data
  6989                           
  6990                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  6991  001D88  5017               	movf	setAddrWindow@x0,w,c
  6992  001D8A  2459               	addwf	_colstart,w,c
  6993  001D8C  ECB9  F011         	call	_write_data
  6994                           
  6995                           ;ST7735_TFT.c: 398: write_data(0);
  6996  001D90  0E00               	movlw	0
  6997  001D92  ECB9  F011         	call	_write_data
  6998                           
  6999                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  7000  001D96  5015               	movf	setAddrWindow@x1,w,c
  7001  001D98  2459               	addwf	_colstart,w,c
  7002  001D9A  ECB9  F011         	call	_write_data
  7003                           
  7004                           ;ST7735_TFT.c: 400: write_command(0x2B);
  7005  001D9E  0E2B               	movlw	43
  7006  001DA0  ECC1  F011         	call	_write_command
  7007                           
  7008                           ;ST7735_TFT.c: 401: write_data(0);
  7009  001DA4  0E00               	movlw	0
  7010  001DA6  ECB9  F011         	call	_write_data
  7011                           
  7012                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  7013  001DAA  5014               	movf	setAddrWindow@y0,w,c
  7014  001DAC  2461               	addwf	_rowstart,w,c
  7015  001DAE  ECB9  F011         	call	_write_data
  7016                           
  7017                           ;ST7735_TFT.c: 403: write_data(0);
  7018  001DB2  0E00               	movlw	0
  7019  001DB4  ECB9  F011         	call	_write_data
  7020                           
  7021                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  7022  001DB8  5016               	movf	setAddrWindow@y1,w,c
  7023  001DBA  2461               	addwf	_rowstart,w,c
  7024  001DBC  ECB9  F011         	call	_write_data
  7025                           
  7026                           ;ST7735_TFT.c: 405: write_command(0x2C);
  7027  001DC0  0E2C               	movlw	44
  7028  001DC2  ECC1  F011         	call	_write_command
  7029  001DC6  0012               	return		;funcret
  7030  001DC8                     __end_of_setAddrWindow:
  7031                           	opt stack 0
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           intcon2	equ	0xFF1
  7040                           postinc0	equ	0xFEE
  7041                           wreg	equ	0xFE8
  7042                           postdec1	equ	0xFE5
  7043                           plusw1	equ	0xFE3
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           plusw2	equ	0xFDB
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function _TFT_GreenTab_Initialize *****************
  7054 ;; Defined at:
  7055 ;;		line 645 in file "ST7735_TFT.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;		None
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;		None
  7060 ;; Return value:  Size  Location     Type
  7061 ;;		None               void
  7062 ;; Registers used:
  7063 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7073 ;;Total ram usage:        0 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    6
  7076 ;; This function calls:
  7077 ;;		_Rcmd1
  7078 ;;		_Rcmd2red
  7079 ;;		_Rcmd3
  7080 ;;		_write_command
  7081 ;;		_write_data
  7082 ;; This function is called by:
  7083 ;;		_Initialize_Screen
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           	psect	text27
  7088  0020FC                     __ptext27:
  7089                           	opt stack 0
  7090  0020FC                     _TFT_GreenTab_Initialize:
  7091                           	opt stack 23
  7092                           
  7093                           ;ST7735_TFT.c: 647: PORTBbits.RB6 = 1;
  7094                           
  7095                           ;incstack = 0
  7096  0020FC  8C81               	bsf	3969,6,c	;volatile
  7097                           
  7098                           ;ST7735_TFT.c: 648: PORTBbits.RB5 = 0;
  7099  0020FE  9A81               	bcf	3969,5,c	;volatile
  7100                           
  7101                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7102  002100  0E80               	movlw	128
  7103  002102  6EC7               	movwf	4039,c	;volatile
  7104                           
  7105                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7106  002104  0E30               	movlw	48
  7107  002106  6EC6               	movwf	4038,c	;volatile
  7108                           
  7109                           ;ST7735_TFT.c: 654: Rcmd1();
  7110  002108  EC19  F008         	call	_Rcmd1	;wreg free
  7111                           
  7112                           ;ST7735_TFT.c: 655: Rcmd2red();
  7113  00210C  ECDD  F00F         	call	_Rcmd2red	;wreg free
  7114                           
  7115                           ;ST7735_TFT.c: 656: Rcmd3();
  7116  002110  ECA2  F009         	call	_Rcmd3	;wreg free
  7117                           
  7118                           ;ST7735_TFT.c: 657: write_command(0x36);
  7119  002114  0E36               	movlw	54
  7120  002116  ECC1  F011         	call	_write_command
  7121                           
  7122                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7123  00211A  0EC0               	movlw	192
  7124  00211C  ECB9  F011         	call	_write_data
  7125                           
  7126                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7127  002120  0E01               	movlw	1
  7128  002122  6E53               	movwf	__tft_type,c
  7129  002124  0012               	return		;funcret
  7130  002126                     __end_of_TFT_GreenTab_Initialize:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           intcon2	equ	0xFF1
  7140                           postinc0	equ	0xFEE
  7141                           wreg	equ	0xFE8
  7142                           postdec1	equ	0xFE5
  7143                           plusw1	equ	0xFE3
  7144                           fsr1l	equ	0xFE1
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           postdec2	equ	0xFDD
  7148                           plusw2	equ	0xFDB
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153 ;; *************** function _Rcmd3 *****************
  7154 ;; Defined at:
  7155 ;;		line 339 in file "ST7735_TFT.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;		None
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;		None
  7160 ;; Return value:  Size  Location     Type
  7161 ;;		None               void
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;Total ram usage:        0 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    5
  7176 ;; This function calls:
  7177 ;;		_delay_ms
  7178 ;;		_write_command
  7179 ;;		_write_data
  7180 ;; This function is called by:
  7181 ;;		_TFT_GreenTab_Initialize
  7182 ;;		_TFT_BlackTab_Initialize
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text28
  7187  001344                     __ptext28:
  7188                           	opt stack 0
  7189  001344                     _Rcmd3:
  7190                           	opt stack 23
  7191                           
  7192                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7193                           
  7194                           ;incstack = 0
  7195  001344  0EE0               	movlw	224
  7196  001346  ECC1  F011         	call	_write_command
  7197                           
  7198                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7199  00134A  0E02               	movlw	2
  7200  00134C  ECB9  F011         	call	_write_data
  7201  001350  0E1C               	movlw	28
  7202  001352  ECB9  F011         	call	_write_data
  7203  001356  0E07               	movlw	7
  7204  001358  ECB9  F011         	call	_write_data
  7205  00135C  0E12               	movlw	18
  7206  00135E  ECB9  F011         	call	_write_data
  7207                           
  7208                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7209  001362  0E37               	movlw	55
  7210  001364  ECB9  F011         	call	_write_data
  7211  001368  0E32               	movlw	50
  7212  00136A  ECB9  F011         	call	_write_data
  7213  00136E  0E29               	movlw	41
  7214  001370  ECB9  F011         	call	_write_data
  7215  001374  0E2D               	movlw	45
  7216  001376  ECB9  F011         	call	_write_data
  7217                           
  7218                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7219  00137A  0E29               	movlw	41
  7220  00137C  ECB9  F011         	call	_write_data
  7221  001380  0E25               	movlw	37
  7222  001382  ECB9  F011         	call	_write_data
  7223  001386  0E2B               	movlw	43
  7224  001388  ECB9  F011         	call	_write_data
  7225  00138C  0E39               	movlw	57
  7226  00138E  ECB9  F011         	call	_write_data
  7227                           
  7228                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7229  001392  0E00               	movlw	0
  7230  001394  ECB9  F011         	call	_write_data
  7231  001398  0E01               	movlw	1
  7232  00139A  ECB9  F011         	call	_write_data
  7233  00139E  0E03               	movlw	3
  7234  0013A0  ECB9  F011         	call	_write_data
  7235  0013A4  0E10               	movlw	16
  7236  0013A6  ECB9  F011         	call	_write_data
  7237                           
  7238                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7239  0013AA  0EE1               	movlw	225
  7240  0013AC  ECC1  F011         	call	_write_command
  7241                           
  7242                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7243  0013B0  0E03               	movlw	3
  7244  0013B2  ECB9  F011         	call	_write_data
  7245  0013B6  0E1D               	movlw	29
  7246  0013B8  ECB9  F011         	call	_write_data
  7247  0013BC  0E07               	movlw	7
  7248  0013BE  ECB9  F011         	call	_write_data
  7249  0013C2  0E06               	movlw	6
  7250  0013C4  ECB9  F011         	call	_write_data
  7251                           
  7252                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7253  0013C8  0E2E               	movlw	46
  7254  0013CA  ECB9  F011         	call	_write_data
  7255  0013CE  0E2C               	movlw	44
  7256  0013D0  ECB9  F011         	call	_write_data
  7257  0013D4  0E29               	movlw	41
  7258  0013D6  ECB9  F011         	call	_write_data
  7259  0013DA  0E2D               	movlw	45
  7260  0013DC  ECB9  F011         	call	_write_data
  7261                           
  7262                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7263  0013E0  0E2E               	movlw	46
  7264  0013E2  ECB9  F011         	call	_write_data
  7265  0013E6  0E2E               	movlw	46
  7266  0013E8  ECB9  F011         	call	_write_data
  7267  0013EC  0E37               	movlw	55
  7268  0013EE  ECB9  F011         	call	_write_data
  7269  0013F2  0E3F               	movlw	63
  7270  0013F4  ECB9  F011         	call	_write_data
  7271                           
  7272                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7273  0013F8  0E00               	movlw	0
  7274  0013FA  ECB9  F011         	call	_write_data
  7275  0013FE  0E00               	movlw	0
  7276  001400  ECB9  F011         	call	_write_data
  7277  001404  0E02               	movlw	2
  7278  001406  ECB9  F011         	call	_write_data
  7279  00140A  0E10               	movlw	16
  7280  00140C  ECB9  F011         	call	_write_data
  7281                           
  7282                           ;ST7735_TFT.c: 351: write_command(0x13);
  7283  001410  0E13               	movlw	19
  7284  001412  ECC1  F011         	call	_write_command
  7285                           
  7286                           ;ST7735_TFT.c: 352: delay_ms(10);
  7287  001416  0E00               	movlw	0
  7288  001418  6E18               	movwf	delay_ms@ms+1,c
  7289  00141A  0E0A               	movlw	10
  7290  00141C  6E17               	movwf	delay_ms@ms,c
  7291  00141E  EC94  F00E         	call	_delay_ms	;wreg free
  7292                           
  7293                           ;ST7735_TFT.c: 353: write_command(0x29);
  7294  001422  0E29               	movlw	41
  7295  001424  ECC1  F011         	call	_write_command
  7296                           
  7297                           ;ST7735_TFT.c: 354: delay_ms(100);
  7298  001428  0E00               	movlw	0
  7299  00142A  6E18               	movwf	delay_ms@ms+1,c
  7300  00142C  0E64               	movlw	100
  7301  00142E  6E17               	movwf	delay_ms@ms,c
  7302  001430  EC94  F00E         	call	_delay_ms	;wreg free
  7303  001434  0012               	return		;funcret
  7304  001436                     __end_of_Rcmd3:
  7305                           	opt stack 0
  7306                           tblptru	equ	0xFF8
  7307                           tblptrh	equ	0xFF7
  7308                           tblptrl	equ	0xFF6
  7309                           tablat	equ	0xFF5
  7310                           prodh	equ	0xFF4
  7311                           prodl	equ	0xFF3
  7312                           intcon	equ	0xFF2
  7313                           intcon2	equ	0xFF1
  7314                           postinc0	equ	0xFEE
  7315                           wreg	equ	0xFE8
  7316                           postdec1	equ	0xFE5
  7317                           plusw1	equ	0xFE3
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           plusw2	equ	0xFDB
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function _Rcmd2red *****************
  7328 ;; Defined at:
  7329 ;;		line 329 in file "ST7735_TFT.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;		None
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;		None
  7334 ;; Return value:  Size  Location     Type
  7335 ;;		None               void
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;Total ram usage:        0 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    5
  7350 ;; This function calls:
  7351 ;;		_write_command
  7352 ;;		_write_data
  7353 ;; This function is called by:
  7354 ;;		_TFT_GreenTab_Initialize
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           	psect	text29
  7359  001FBA                     __ptext29:
  7360                           	opt stack 0
  7361  001FBA                     _Rcmd2red:
  7362                           	opt stack 23
  7363                           
  7364                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7365                           
  7366                           ;incstack = 0
  7367  001FBA  0E2A               	movlw	42
  7368  001FBC  ECC1  F011         	call	_write_command
  7369                           
  7370                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7371  001FC0  0E00               	movlw	0
  7372  001FC2  ECB9  F011         	call	_write_data
  7373  001FC6  0E00               	movlw	0
  7374  001FC8  ECB9  F011         	call	_write_data
  7375                           
  7376                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7377  001FCC  0E00               	movlw	0
  7378  001FCE  ECB9  F011         	call	_write_data
  7379  001FD2  0E7F               	movlw	127
  7380  001FD4  ECB9  F011         	call	_write_data
  7381                           
  7382                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7383  001FD8  0E2B               	movlw	43
  7384  001FDA  ECC1  F011         	call	_write_command
  7385                           
  7386                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7387  001FDE  0E00               	movlw	0
  7388  001FE0  ECB9  F011         	call	_write_data
  7389  001FE4  0E00               	movlw	0
  7390  001FE6  ECB9  F011         	call	_write_data
  7391                           
  7392                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7393  001FEA  0E00               	movlw	0
  7394  001FEC  ECB9  F011         	call	_write_data
  7395  001FF0  0E9F               	movlw	159
  7396  001FF2  ECB9  F011         	call	_write_data
  7397  001FF6  0012               	return		;funcret
  7398  001FF8                     __end_of_Rcmd2red:
  7399                           	opt stack 0
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           intcon2	equ	0xFF1
  7408                           postinc0	equ	0xFEE
  7409                           wreg	equ	0xFE8
  7410                           postdec1	equ	0xFE5
  7411                           plusw1	equ	0xFE3
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           plusw2	equ	0xFDB
  7417                           fsr2h	equ	0xFDA
  7418                           fsr2l	equ	0xFD9
  7419                           status	equ	0xFD8
  7420                           
  7421 ;; *************** function _Rcmd1 *****************
  7422 ;; Defined at:
  7423 ;;		line 282 in file "ST7735_TFT.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;		None
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;		None
  7428 ;; Return value:  Size  Location     Type
  7429 ;;		None               void
  7430 ;; Registers used:
  7431 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;Total ram usage:        0 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    5
  7444 ;; This function calls:
  7445 ;;		_delay_ms
  7446 ;;		_write_command
  7447 ;;		_write_data
  7448 ;; This function is called by:
  7449 ;;		_TFT_GreenTab_Initialize
  7450 ;;		_TFT_BlackTab_Initialize
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           	psect	text30
  7455  001032                     __ptext30:
  7456                           	opt stack 0
  7457  001032                     _Rcmd1:
  7458                           	opt stack 23
  7459                           
  7460                           ;ST7735_TFT.c: 284: write_command(0x01);
  7461                           
  7462                           ;incstack = 0
  7463  001032  0E01               	movlw	1
  7464  001034  ECC1  F011         	call	_write_command
  7465                           
  7466                           ;ST7735_TFT.c: 285: delay_ms(150);
  7467  001038  0E00               	movlw	0
  7468  00103A  6E18               	movwf	delay_ms@ms+1,c
  7469  00103C  0E96               	movlw	150
  7470  00103E  6E17               	movwf	delay_ms@ms,c
  7471  001040  EC94  F00E         	call	_delay_ms	;wreg free
  7472                           
  7473                           ;ST7735_TFT.c: 286: write_command(0x11);
  7474  001044  0E11               	movlw	17
  7475  001046  ECC1  F011         	call	_write_command
  7476                           
  7477                           ;ST7735_TFT.c: 287: delay_ms(500);
  7478  00104A  0E01               	movlw	1
  7479  00104C  6E18               	movwf	delay_ms@ms+1,c
  7480  00104E  0EF4               	movlw	244
  7481  001050  6E17               	movwf	delay_ms@ms,c
  7482  001052  EC94  F00E         	call	_delay_ms	;wreg free
  7483                           
  7484                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7485  001056  0EB1               	movlw	177
  7486  001058  ECC1  F011         	call	_write_command
  7487                           
  7488                           ;ST7735_TFT.c: 289: write_data(0x01);
  7489  00105C  0E01               	movlw	1
  7490  00105E  ECB9  F011         	call	_write_data
  7491                           
  7492                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7493  001062  0E2C               	movlw	44
  7494  001064  ECB9  F011         	call	_write_data
  7495                           
  7496                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7497  001068  0E2D               	movlw	45
  7498  00106A  ECB9  F011         	call	_write_data
  7499                           
  7500                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7501  00106E  0EB2               	movlw	178
  7502  001070  ECC1  F011         	call	_write_command
  7503                           
  7504                           ;ST7735_TFT.c: 293: write_data(0x01);
  7505  001074  0E01               	movlw	1
  7506  001076  ECB9  F011         	call	_write_data
  7507                           
  7508                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7509  00107A  0E2C               	movlw	44
  7510  00107C  ECB9  F011         	call	_write_data
  7511                           
  7512                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7513  001080  0E2D               	movlw	45
  7514  001082  ECB9  F011         	call	_write_data
  7515                           
  7516                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7517  001086  0EB3               	movlw	179
  7518  001088  ECC1  F011         	call	_write_command
  7519                           
  7520                           ;ST7735_TFT.c: 297: write_data(0x01);
  7521  00108C  0E01               	movlw	1
  7522  00108E  ECB9  F011         	call	_write_data
  7523                           
  7524                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7525  001092  0E2C               	movlw	44
  7526  001094  ECB9  F011         	call	_write_data
  7527                           
  7528                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7529  001098  0E2D               	movlw	45
  7530  00109A  ECB9  F011         	call	_write_data
  7531                           
  7532                           ;ST7735_TFT.c: 300: write_data(0x01);
  7533  00109E  0E01               	movlw	1
  7534  0010A0  ECB9  F011         	call	_write_data
  7535                           
  7536                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7537  0010A4  0E2C               	movlw	44
  7538  0010A6  ECB9  F011         	call	_write_data
  7539                           
  7540                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7541  0010AA  0E2D               	movlw	45
  7542  0010AC  ECB9  F011         	call	_write_data
  7543                           
  7544                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7545  0010B0  0EB4               	movlw	180
  7546  0010B2  ECC1  F011         	call	_write_command
  7547                           
  7548                           ;ST7735_TFT.c: 304: write_data(0x07);
  7549  0010B6  0E07               	movlw	7
  7550  0010B8  ECB9  F011         	call	_write_data
  7551                           
  7552                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7553  0010BC  0EC0               	movlw	192
  7554  0010BE  ECC1  F011         	call	_write_command
  7555                           
  7556                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7557  0010C2  0EA2               	movlw	162
  7558  0010C4  ECB9  F011         	call	_write_data
  7559                           
  7560                           ;ST7735_TFT.c: 307: write_data(0x02);
  7561  0010C8  0E02               	movlw	2
  7562  0010CA  ECB9  F011         	call	_write_data
  7563                           
  7564                           ;ST7735_TFT.c: 308: write_data(0x84);
  7565  0010CE  0E84               	movlw	132
  7566  0010D0  ECB9  F011         	call	_write_data
  7567                           
  7568                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7569  0010D4  0EC1               	movlw	193
  7570  0010D6  ECC1  F011         	call	_write_command
  7571                           
  7572                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7573  0010DA  0EC5               	movlw	197
  7574  0010DC  ECB9  F011         	call	_write_data
  7575                           
  7576                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7577  0010E0  0EC2               	movlw	194
  7578  0010E2  ECC1  F011         	call	_write_command
  7579                           
  7580                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7581  0010E6  0E0A               	movlw	10
  7582  0010E8  ECB9  F011         	call	_write_data
  7583                           
  7584                           ;ST7735_TFT.c: 313: write_data(0x00);
  7585  0010EC  0E00               	movlw	0
  7586  0010EE  ECB9  F011         	call	_write_data
  7587                           
  7588                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7589  0010F2  0EC3               	movlw	195
  7590  0010F4  ECC1  F011         	call	_write_command
  7591                           
  7592                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7593  0010F8  0E8A               	movlw	138
  7594  0010FA  ECB9  F011         	call	_write_data
  7595                           
  7596                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7597  0010FE  0E2A               	movlw	42
  7598  001100  ECB9  F011         	call	_write_data
  7599                           
  7600                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7601  001104  0EC4               	movlw	196
  7602  001106  ECC1  F011         	call	_write_command
  7603                           
  7604                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7605  00110A  0E8A               	movlw	138
  7606  00110C  ECB9  F011         	call	_write_data
  7607                           
  7608                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7609  001110  0EEE               	movlw	238
  7610  001112  ECB9  F011         	call	_write_data
  7611                           
  7612                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7613  001116  0EC5               	movlw	197
  7614  001118  ECC1  F011         	call	_write_command
  7615                           
  7616                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7617  00111C  0E0E               	movlw	14
  7618  00111E  ECB9  F011         	call	_write_data
  7619                           
  7620                           ;ST7735_TFT.c: 322: write_command(0x20);
  7621  001122  0E20               	movlw	32
  7622  001124  ECC1  F011         	call	_write_command
  7623                           
  7624                           ;ST7735_TFT.c: 323: write_command(0x36);
  7625  001128  0E36               	movlw	54
  7626  00112A  ECC1  F011         	call	_write_command
  7627                           
  7628                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7629  00112E  0EC8               	movlw	200
  7630  001130  ECB9  F011         	call	_write_data
  7631                           
  7632                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7633  001134  0E3A               	movlw	58
  7634  001136  ECC1  F011         	call	_write_command
  7635                           
  7636                           ;ST7735_TFT.c: 326: write_data(0x05);
  7637  00113A  0E05               	movlw	5
  7638  00113C  ECB9  F011         	call	_write_data
  7639  001140  0012               	return		;funcret
  7640  001142                     __end_of_Rcmd1:
  7641                           	opt stack 0
  7642                           tblptru	equ	0xFF8
  7643                           tblptrh	equ	0xFF7
  7644                           tblptrl	equ	0xFF6
  7645                           tablat	equ	0xFF5
  7646                           prodh	equ	0xFF4
  7647                           prodl	equ	0xFF3
  7648                           intcon	equ	0xFF2
  7649                           intcon2	equ	0xFF1
  7650                           postinc0	equ	0xFEE
  7651                           wreg	equ	0xFE8
  7652                           postdec1	equ	0xFE5
  7653                           plusw1	equ	0xFE3
  7654                           fsr1l	equ	0xFE1
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           plusw2	equ	0xFDB
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663 ;; *************** function _write_data *****************
  7664 ;; Defined at:
  7665 ;;		line 210 in file "ST7735_TFT.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;  data_           1    wreg     unsigned char 
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  data_           1   18[COMRAM] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;		None               void
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;Total ram usage:        1 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    4
  7686 ;; This function calls:
  7687 ;;		_spiwrite
  7688 ;; This function is called by:
  7689 ;;		_Rcmd1
  7690 ;;		_Rcmd2red
  7691 ;;		_Rcmd3
  7692 ;;		_setAddrWindow
  7693 ;;		_drawPixel
  7694 ;;		_TFT_GreenTab_Initialize
  7695 ;;		_Bcmd
  7696 ;;		_setScrollDefinition
  7697 ;;		_Rcmd2green
  7698 ;;		_VerticalScroll
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           	psect	text31
  7703  002372                     __ptext31:
  7704                           	opt stack 0
  7705  002372                     _write_data:
  7706                           	opt stack 20
  7707                           
  7708                           ;incstack = 0
  7709                           ;write_data@data_ stored from wreg
  7710  002372  6E13               	movwf	write_data@data_,c
  7711                           
  7712                           ;ST7735_TFT.c: 212: PORTBbits.RB6 = 0;
  7713  002374  9C81               	bcf	3969,6,c	;volatile
  7714                           
  7715                           ;ST7735_TFT.c: 213: PORTBbits.RB5 = 1;
  7716  002376  8A81               	bsf	3969,5,c	;volatile
  7717                           
  7718                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7719  002378  5013               	movf	write_data@data_,w,c
  7720  00237A  EC6E  F011         	call	_spiwrite
  7721                           
  7722                           ;ST7735_TFT.c: 215: PORTBbits.RB6 = 1;
  7723  00237E  8C81               	bsf	3969,6,c	;volatile
  7724  002380  0012               	return		;funcret
  7725  002382                     __end_of_write_data:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           intcon2	equ	0xFF1
  7735                           postinc0	equ	0xFEE
  7736                           wreg	equ	0xFE8
  7737                           postdec1	equ	0xFE5
  7738                           plusw1	equ	0xFE3
  7739                           fsr1l	equ	0xFE1
  7740                           indf2	equ	0xFDF
  7741                           postinc2	equ	0xFDE
  7742                           postdec2	equ	0xFDD
  7743                           plusw2	equ	0xFDB
  7744                           fsr2h	equ	0xFDA
  7745                           fsr2l	equ	0xFD9
  7746                           status	equ	0xFD8
  7747                           
  7748 ;; *************** function _write_command *****************
  7749 ;; Defined at:
  7750 ;;		line 199 in file "ST7735_TFT.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  cmd_            1    wreg     unsigned char 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  cmd_            1   18[COMRAM] unsigned char 
  7755 ;; Return value:  Size  Location     Type
  7756 ;;		None               void
  7757 ;; Registers used:
  7758 ;;		wreg, status,2, cstack
  7759 ;; Tracked objects:
  7760 ;;		On entry : 0/0
  7761 ;;		On exit  : 0/0
  7762 ;;		Unchanged: 0/0
  7763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;Total ram usage:        1 bytes
  7769 ;; Hardware stack levels used:    1
  7770 ;; Hardware stack levels required when called:    4
  7771 ;; This function calls:
  7772 ;;		_spiwrite
  7773 ;; This function is called by:
  7774 ;;		_Rcmd1
  7775 ;;		_Rcmd2red
  7776 ;;		_Rcmd3
  7777 ;;		_setAddrWindow
  7778 ;;		_TFT_GreenTab_Initialize
  7779 ;;		_Bcmd
  7780 ;;		_setScrollDefinition
  7781 ;;		_Rcmd2green
  7782 ;;		_VerticalScroll
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text32
  7787  002382                     __ptext32:
  7788                           	opt stack 0
  7789  002382                     _write_command:
  7790                           	opt stack 20
  7791                           
  7792                           ;incstack = 0
  7793                           ;write_command@cmd_ stored from wreg
  7794  002382  6E13               	movwf	write_command@cmd_,c
  7795                           
  7796                           ;ST7735_TFT.c: 201: PORTBbits.RB6 = 0;
  7797  002384  9C81               	bcf	3969,6,c	;volatile
  7798                           
  7799                           ;ST7735_TFT.c: 203: PORTBbits.RB5 = 0;
  7800  002386  9A81               	bcf	3969,5,c	;volatile
  7801                           
  7802                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7803  002388  5013               	movf	write_command@cmd_,w,c
  7804  00238A  EC6E  F011         	call	_spiwrite
  7805                           
  7806                           ;ST7735_TFT.c: 206: PORTBbits.RB6 = 1;
  7807  00238E  8C81               	bsf	3969,6,c	;volatile
  7808  002390  0012               	return		;funcret
  7809  002392                     __end_of_write_command:
  7810                           	opt stack 0
  7811                           tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           intcon	equ	0xFF2
  7818                           intcon2	equ	0xFF1
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           postdec1	equ	0xFE5
  7822                           plusw1	equ	0xFE3
  7823                           fsr1l	equ	0xFE1
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           plusw2	equ	0xFDB
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _spiwrite *****************
  7833 ;; Defined at:
  7834 ;;		line 190 in file "ST7735_TFT.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  spidata         1    wreg     unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  spidata         1   17[COMRAM] unsigned char 
  7839 ;;  x               1   16[COMRAM] unsigned char 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;		None               void
  7842 ;; Registers used:
  7843 ;;		wreg
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;Total ram usage:        2 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    3
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_write_command
  7860 ;;		_write_data
  7861 ;;		_drawFastVLine
  7862 ;;		_fillRectangle
  7863 ;;		_drawFastHLine
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           	psect	text33
  7868  0022DC                     __ptext33:
  7869                           	opt stack 0
  7870  0022DC                     _spiwrite:
  7871                           	opt stack 22
  7872                           
  7873                           ;incstack = 0
  7874                           ;spiwrite@spidata stored from wreg
  7875  0022DC  6E12               	movwf	spiwrite@spidata,c
  7876                           
  7877                           ;ST7735_TFT.c: 192: char x;
  7878                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  7879  0022DE  969E               	bcf	3998,3,c	;volatile
  7880                           
  7881                           ;ST7735_TFT.c: 194: x = SSPBUF;
  7882  0022E0  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7883                           
  7884                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  7885  0022E4  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7886                           
  7887                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  7888  0022E8  D000               	goto	l368
  7889  0022EA                     l368:
  7890  0022EA  A0C7               	btfss	4039,0,c	;volatile
  7891  0022EC  D7FE               	goto	l368
  7892  0022EE  0012               	return		;funcret
  7893  0022F0                     __end_of_spiwrite:
  7894                           	opt stack 0
  7895                           tblptru	equ	0xFF8
  7896                           tblptrh	equ	0xFF7
  7897                           tblptrl	equ	0xFF6
  7898                           tablat	equ	0xFF5
  7899                           prodh	equ	0xFF4
  7900                           prodl	equ	0xFF3
  7901                           intcon	equ	0xFF2
  7902                           intcon2	equ	0xFF1
  7903                           postinc0	equ	0xFEE
  7904                           wreg	equ	0xFE8
  7905                           postdec1	equ	0xFE5
  7906                           plusw1	equ	0xFE3
  7907                           fsr1l	equ	0xFE1
  7908                           indf2	equ	0xFDF
  7909                           postinc2	equ	0xFDE
  7910                           postdec2	equ	0xFDD
  7911                           plusw2	equ	0xFDB
  7912                           fsr2h	equ	0xFDA
  7913                           fsr2l	equ	0xFD9
  7914                           status	equ	0xFD8
  7915                           
  7916 ;; *************** function _LCD_Reset *****************
  7917 ;; Defined at:
  7918 ;;		line 218 in file "ST7735_TFT.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;		None
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;		None
  7923 ;; Return value:  Size  Location     Type
  7924 ;;		None               void
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;Total ram usage:        0 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    5
  7939 ;; This function calls:
  7940 ;;		_delay_ms
  7941 ;; This function is called by:
  7942 ;;		_Initialize_Screen
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           	psect	text34
  7947  002318                     __ptext34:
  7948                           	opt stack 0
  7949  002318                     _LCD_Reset:
  7950                           	opt stack 24
  7951                           
  7952                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 0;
  7953                           
  7954                           ;incstack = 0
  7955  002318  9282               	bcf	3970,1,c	;volatile
  7956                           
  7957                           ;ST7735_TFT.c: 221: delay_ms(100);
  7958  00231A  0E00               	movlw	0
  7959  00231C  6E18               	movwf	delay_ms@ms+1,c
  7960  00231E  0E64               	movlw	100
  7961  002320  6E17               	movwf	delay_ms@ms,c
  7962  002322  EC94  F00E         	call	_delay_ms	;wreg free
  7963                           
  7964                           ;ST7735_TFT.c: 222: PORTCbits.RC1 = 1;
  7965  002326  8282               	bsf	3970,1,c	;volatile
  7966  002328  0012               	return		;funcret
  7967  00232A                     __end_of_LCD_Reset:
  7968                           	opt stack 0
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           prodh	equ	0xFF4
  7974                           prodl	equ	0xFF3
  7975                           intcon	equ	0xFF2
  7976                           intcon2	equ	0xFF1
  7977                           postinc0	equ	0xFEE
  7978                           wreg	equ	0xFE8
  7979                           postdec1	equ	0xFE5
  7980                           plusw1	equ	0xFE3
  7981                           fsr1l	equ	0xFE1
  7982                           indf2	equ	0xFDF
  7983                           postinc2	equ	0xFDE
  7984                           postdec2	equ	0xFDD
  7985                           plusw2	equ	0xFDB
  7986                           fsr2h	equ	0xFDA
  7987                           fsr2l	equ	0xFD9
  7988                           status	equ	0xFD8
  7989                           
  7990 ;; *************** function _delay_ms *****************
  7991 ;; Defined at:
  7992 ;;		line 65 in file "ST7735_TFT.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  ms              2   22[COMRAM] int 
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  count           2   26[COMRAM] int 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;		None               void
  7999 ;; Registers used:
  8000 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;Total ram usage:        6 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    4
  8013 ;; This function calls:
  8014 ;;		___wmul
  8015 ;; This function is called by:
  8016 ;;		_LCD_Reset
  8017 ;;		_Rcmd1
  8018 ;;		_Rcmd3
  8019 ;;		_Bcmd
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text35
  8024  001D28                     __ptext35:
  8025                           	opt stack 0
  8026  001D28                     _delay_ms:
  8027                           	opt stack 23
  8028                           
  8029                           ;ST7735_TFT.c: 71: int count;
  8030                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  8031                           
  8032                           ;incstack = 0
  8033  001D28  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  8034  001D2C  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8035  001D30  0E00               	movlw	0
  8036  001D32  6E14               	movwf	___wmul@multiplicand+1,c
  8037  001D34  0E7D               	movlw	125
  8038  001D36  6E13               	movwf	___wmul@multiplicand,c
  8039  001D38  EC93  F010         	call	___wmul	;wreg free
  8040  001D3C  C011  F01B         	movff	?___wmul,delay_ms@count
  8041  001D40  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  8042                           
  8043                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  8044  001D44  C01B  F019         	movff	delay_ms@count,??_delay_ms
  8045  001D48  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  8046  001D4C  1E19               	comf	??_delay_ms,f,c
  8047  001D4E  1E1A               	comf	??_delay_ms+1,f,c
  8048  001D50  4A19               	infsnz	??_delay_ms,f,c
  8049  001D52  2A1A               	incf	??_delay_ms+1,f,c
  8050  001D54  0EFF               	movlw	255
  8051  001D56  2419               	addwf	??_delay_ms,w,c
  8052  001D58  6E1B               	movwf	delay_ms@count,c
  8053  001D5A  0EFF               	movlw	255
  8054  001D5C  201A               	addwfc	??_delay_ms+1,w,c
  8055  001D5E  6E1C               	movwf	delay_ms@count+1,c
  8056                           
  8057                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  8058  001D60  0E03               	movlw	3
  8059  001D62  6ED5               	movwf	4053,c	;volatile
  8060                           
  8061                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  8062  001D64  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  8063                           
  8064                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  8065  001D68  501C               	movf	delay_ms@count+1,w,c
  8066  001D6A  6ED7               	movwf	4055,c	;volatile
  8067                           
  8068                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  8069  001D6C  94F2               	bcf	intcon,2,c	;volatile
  8070                           
  8071                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8072  001D6E  8ED5               	bsf	4053,7,c	;volatile
  8073                           
  8074                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8075  001D70  D000               	goto	l358
  8076  001D72                     l358:
  8077  001D72  A4F2               	btfss	intcon,2,c	;volatile
  8078  001D74  D7FE               	goto	l358
  8079                           
  8080                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8081  001D76  9ED5               	bcf	4053,7,c	;volatile
  8082  001D78  0012               	return		;funcret
  8083  001D7A                     __end_of_delay_ms:
  8084                           	opt stack 0
  8085                           tblptru	equ	0xFF8
  8086                           tblptrh	equ	0xFF7
  8087                           tblptrl	equ	0xFF6
  8088                           tablat	equ	0xFF5
  8089                           prodh	equ	0xFF4
  8090                           prodl	equ	0xFF3
  8091                           intcon	equ	0xFF2
  8092                           intcon2	equ	0xFF1
  8093                           postinc0	equ	0xFEE
  8094                           wreg	equ	0xFE8
  8095                           postdec1	equ	0xFE5
  8096                           plusw1	equ	0xFE3
  8097                           fsr1l	equ	0xFE1
  8098                           indf2	equ	0xFDF
  8099                           postinc2	equ	0xFDE
  8100                           postdec2	equ	0xFDD
  8101                           plusw2	equ	0xFDB
  8102                           fsr2h	equ	0xFDA
  8103                           fsr2l	equ	0xFD9
  8104                           status	equ	0xFD8
  8105                           
  8106 ;; *************** function ___wmul *****************
  8107 ;; Defined at:
  8108 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;  multiplier      2   16[COMRAM] unsigned int 
  8111 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  product         2   20[COMRAM] unsigned int 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  2   16[COMRAM] unsigned int 
  8116 ;; Registers used:
  8117 ;;		wreg, status,2, status,0, prodl, prodh
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8123 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;Total ram usage:        6 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    3
  8130 ;; This function calls:
  8131 ;;		Nothing
  8132 ;; This function is called by:
  8133 ;;		_get_RPM
  8134 ;;		_delay_ms
  8135 ;;		_drawChar
  8136 ;;		_main
  8137 ;;		_printf
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	text36
  8142  002126                     __ptext36:
  8143                           	opt stack 0
  8144  002126                     ___wmul:
  8145                           	opt stack 26
  8146                           
  8147                           ;incstack = 0
  8148  002126  5011               	movf	___wmul@multiplier,w,c
  8149  002128  0213               	mulwf	___wmul@multiplicand,c
  8150  00212A  CFF3 F015          	movff	prodl,___wmul@product
  8151  00212E  CFF4 F016          	movff	prodh,___wmul@product+1
  8152  002132  5011               	movf	___wmul@multiplier,w,c
  8153  002134  0214               	mulwf	___wmul@multiplicand+1,c
  8154  002136  50F3               	movf	prodl,w,c
  8155  002138  2616               	addwf	___wmul@product+1,f,c
  8156  00213A  5012               	movf	___wmul@multiplier+1,w,c
  8157  00213C  0213               	mulwf	___wmul@multiplicand,c
  8158  00213E  50F3               	movf	prodl,w,c
  8159  002140  2616               	addwf	___wmul@product+1,f,c
  8160  002142  C015  F011         	movff	___wmul@product,?___wmul
  8161  002146  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8162  00214A  D000               	goto	l891
  8163  00214C                     l891:
  8164  00214C  0012               	return		;funcret
  8165  00214E                     __end_of___wmul:
  8166                           	opt stack 0
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon2	equ	0xFF1
  8175                           postinc0	equ	0xFEE
  8176                           wreg	equ	0xFE8
  8177                           postdec1	equ	0xFE5
  8178                           plusw1	equ	0xFE3
  8179                           fsr1l	equ	0xFE1
  8180                           indf2	equ	0xFDF
  8181                           postinc2	equ	0xFDE
  8182                           postdec2	equ	0xFDD
  8183                           plusw2	equ	0xFDB
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function _Increase_Speed *****************
  8189 ;; Defined at:
  8190 ;;		line 39 in file "Fan_Support.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;		None               void
  8197 ;; Registers used:
  8198 ;;		wreg, status,2, status,0, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;Total ram usage:        0 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    7
  8211 ;; This function calls:
  8212 ;;		_Do_Beep
  8213 ;;		_do_update_pwm
  8214 ;; This function is called by:
  8215 ;;		_main
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text37
  8220  002174                     __ptext37:
  8221                           	opt stack 0
  8222  002174                     _Increase_Speed:
  8223                           	opt stack 23
  8224                           
  8225                           ;Fan_Support.c: 41: if(duty_cycle == 100)
  8226                           
  8227                           ;incstack = 0
  8228  002174  0E64               	movlw	100
  8229  002176  185C               	xorwf	_duty_cycle,w,c
  8230  002178  A4D8               	btfss	status,2,c
  8231  00217A  D006               	goto	l6321
  8232                           
  8233                           ;Fan_Support.c: 42: {
  8234                           ;Fan_Support.c: 43: Do_Beep();
  8235  00217C  EC82  F011         	call	_Do_Beep	;wreg free
  8236                           
  8237                           ;Fan_Support.c: 44: do_update_pwm(duty_cycle);
  8238  002180  505C               	movf	_duty_cycle,w,c
  8239  002182  ECD0  F00B         	call	_do_update_pwm
  8240                           
  8241                           ;Fan_Support.c: 45: }
  8242  002186  D007               	goto	l49
  8243  002188                     l6321:
  8244                           
  8245                           ;Fan_Support.c: 46: else
  8246                           ;Fan_Support.c: 47: {
  8247                           ;Fan_Support.c: 48: duty_cycle = duty_cycle + 5;
  8248  002188  505C               	movf	_duty_cycle,w,c
  8249  00218A  0F05               	addlw	5
  8250  00218C  6E5C               	movwf	_duty_cycle,c
  8251                           
  8252                           ;Fan_Support.c: 50: do_update_pwm(duty_cycle);
  8253  00218E  505C               	movf	_duty_cycle,w,c
  8254  002190  ECD0  F00B         	call	_do_update_pwm
  8255  002194  D000               	goto	l49
  8256  002196                     l49:
  8257  002196  0012               	return		;funcret
  8258  002198                     __end_of_Increase_Speed:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           tblptrh	equ	0xFF7
  8262                           tblptrl	equ	0xFF6
  8263                           tablat	equ	0xFF5
  8264                           prodh	equ	0xFF4
  8265                           prodl	equ	0xFF3
  8266                           intcon	equ	0xFF2
  8267                           intcon2	equ	0xFF1
  8268                           postinc0	equ	0xFEE
  8269                           wreg	equ	0xFE8
  8270                           postdec1	equ	0xFE5
  8271                           plusw1	equ	0xFE3
  8272                           fsr1l	equ	0xFE1
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           plusw2	equ	0xFDB
  8277                           fsr2h	equ	0xFDA
  8278                           fsr2l	equ	0xFD9
  8279                           status	equ	0xFD8
  8280                           
  8281 ;; *************** function _Do_Init *****************
  8282 ;; Defined at:
  8283 ;;		line 129 in file "Lab12pE.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;		None
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;		None
  8288 ;; Return value:  Size  Location     Type
  8289 ;;		None               void
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0, cstack
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;Total ram usage:        0 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    7
  8304 ;; This function calls:
  8305 ;;		_DS1621_Init
  8306 ;;		_I2C_Init
  8307 ;;		_init_INTERRUPT
  8308 ;;		_init_UART
  8309 ;; This function is called by:
  8310 ;;		_main
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           	psect	text38
  8315  001E14                     __ptext38:
  8316                           	opt stack 0
  8317  001E14                     _Do_Init:
  8318                           	opt stack 23
  8319                           
  8320                           ;Lab12pE.c: 131: init_UART();
  8321                           
  8322                           ;incstack = 0
  8323  001E14  EC78  F011         	call	_init_UART	;wreg free
  8324                           
  8325                           ;Lab12pE.c: 132: OSCCON=0x70;
  8326  001E18  0E70               	movlw	112
  8327  001E1A  6ED3               	movwf	4051,c	;volatile
  8328                           
  8329                           ;Lab12pE.c: 134: ADCON1=0x0F;
  8330  001E1C  0E0F               	movlw	15
  8331  001E1E  6EC1               	movwf	4033,c	;volatile
  8332                           
  8333                           ;Lab12pE.c: 135: TRISA = 0x00;
  8334  001E20  0E00               	movlw	0
  8335  001E22  6E92               	movwf	3986,c	;volatile
  8336                           
  8337                           ;Lab12pE.c: 136: TRISB = 0x01;
  8338  001E24  0E01               	movlw	1
  8339  001E26  6E93               	movwf	3987,c	;volatile
  8340                           
  8341                           ;Lab12pE.c: 137: TRISC = 0x01;
  8342  001E28  0E01               	movlw	1
  8343  001E2A  6E94               	movwf	3988,c	;volatile
  8344                           
  8345                           ;Lab12pE.c: 138: TRISD = 0x00;
  8346  001E2C  0E00               	movlw	0
  8347  001E2E  6E95               	movwf	3989,c	;volatile
  8348                           
  8349                           ;Lab12pE.c: 139: TRISE = 0x00;
  8350  001E30  0E00               	movlw	0
  8351  001E32  6E96               	movwf	3990,c	;volatile
  8352                           
  8353                           ;Lab12pE.c: 141: RBPU=0;
  8354  001E34  9EF1               	bcf	intcon2,7,c	;volatile
  8355                           
  8356                           ;Lab12pE.c: 142: TMR3L = 0x00;
  8357  001E36  0E00               	movlw	0
  8358  001E38  6EB2               	movwf	4018,c	;volatile
  8359                           
  8360                           ;Lab12pE.c: 143: T3CON = 0x03;
  8361  001E3A  0E03               	movlw	3
  8362  001E3C  6EB1               	movwf	4017,c	;volatile
  8363                           
  8364                           ;Lab12pE.c: 144: I2C_Init(100000);
  8365  001E3E  0EA0               	movlw	160
  8366  001E40  6E11               	movwf	I2C_Init@c,c
  8367  001E42  0E86               	movlw	134
  8368  001E44  6E12               	movwf	I2C_Init@c+1,c
  8369  001E46  0E01               	movlw	1
  8370  001E48  6E13               	movwf	I2C_Init@c+2,c
  8371  001E4A  0E00               	movlw	0
  8372  001E4C  6E14               	movwf	I2C_Init@c+3,c
  8373  001E4E  ECDC  F011         	call	_I2C_Init	;wreg free
  8374                           
  8375                           ;Lab12pE.c: 146: DS1621_Init();
  8376  001E52  EC26  F011         	call	_DS1621_Init	;wreg free
  8377                           
  8378                           ;Lab12pE.c: 147: init_INTERRUPT();
  8379  001E56  EC4D  F011         	call	_init_INTERRUPT	;wreg free
  8380                           
  8381                           ;Lab12pE.c: 148: FAN = 0;
  8382  001E5A  0E00               	movlw	0
  8383  001E5C  6E50               	movwf	_FAN,c
  8384  001E5E  0012               	return		;funcret
  8385  001E60                     __end_of_Do_Init:
  8386                           	opt stack 0
  8387                           tblptru	equ	0xFF8
  8388                           tblptrh	equ	0xFF7
  8389                           tblptrl	equ	0xFF6
  8390                           tablat	equ	0xFF5
  8391                           prodh	equ	0xFF4
  8392                           prodl	equ	0xFF3
  8393                           intcon	equ	0xFF2
  8394                           intcon2	equ	0xFF1
  8395                           postinc0	equ	0xFEE
  8396                           wreg	equ	0xFE8
  8397                           postdec1	equ	0xFE5
  8398                           plusw1	equ	0xFE3
  8399                           fsr1l	equ	0xFE1
  8400                           indf2	equ	0xFDF
  8401                           postinc2	equ	0xFDE
  8402                           postdec2	equ	0xFDD
  8403                           plusw2	equ	0xFDB
  8404                           fsr2h	equ	0xFDA
  8405                           fsr2l	equ	0xFD9
  8406                           status	equ	0xFD8
  8407                           
  8408 ;; *************** function _init_UART *****************
  8409 ;; Defined at:
  8410 ;;		line 123 in file "Lab12pE.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;		None
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;		None
  8415 ;; Return value:  Size  Location     Type
  8416 ;;		None               void
  8417 ;; Registers used:
  8418 ;;		wreg, status,2, cstack
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;Total ram usage:        0 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:    4
  8431 ;; This function calls:
  8432 ;;		_OpenUSART
  8433 ;; This function is called by:
  8434 ;;		_Do_Init
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           	psect	text39
  8439  0022F0                     __ptext39:
  8440                           	opt stack 0
  8441  0022F0                     _init_UART:
  8442                           	opt stack 25
  8443                           
  8444                           ;Lab12pE.c: 125: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
  8445                           
  8446                           ;incstack = 0
  8447  0022F0  0E00               	movlw	0
  8448  0022F2  6E12               	movwf	OpenUSART@spbrg+1,c
  8449  0022F4  0E19               	movlw	25
  8450  0022F6  6E11               	movwf	OpenUSART@spbrg,c
  8451  0022F8  0E3C               	movlw	60
  8452  0022FA  EC79  F00D         	call	_OpenUSART
  8453                           
  8454                           ;Lab12pE.c: 126: OSCCON = 0x70;
  8455  0022FE  0E70               	movlw	112
  8456  002300  6ED3               	movwf	4051,c	;volatile
  8457  002302  0012               	return		;funcret
  8458  002304                     __end_of_init_UART:
  8459                           	opt stack 0
  8460                           tblptru	equ	0xFF8
  8461                           tblptrh	equ	0xFF7
  8462                           tblptrl	equ	0xFF6
  8463                           tablat	equ	0xFF5
  8464                           prodh	equ	0xFF4
  8465                           prodl	equ	0xFF3
  8466                           intcon	equ	0xFF2
  8467                           intcon2	equ	0xFF1
  8468                           postinc0	equ	0xFEE
  8469                           wreg	equ	0xFE8
  8470                           postdec1	equ	0xFE5
  8471                           plusw1	equ	0xFE3
  8472                           fsr1l	equ	0xFE1
  8473                           indf2	equ	0xFDF
  8474                           postinc2	equ	0xFDE
  8475                           postdec2	equ	0xFDD
  8476                           plusw2	equ	0xFDB
  8477                           fsr2h	equ	0xFDA
  8478                           fsr2l	equ	0xFD9
  8479                           status	equ	0xFD8
  8480                           
  8481 ;; *************** function _OpenUSART *****************
  8482 ;; Defined at:
  8483 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;  config          1    wreg     unsigned char 
  8486 ;;  spbrg           2   16[COMRAM] unsigned int 
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;  config          1   18[COMRAM] unsigned char 
  8489 ;; Return value:  Size  Location     Type
  8490 ;;		None               void
  8491 ;; Registers used:
  8492 ;;		wreg, status,2
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8498 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;Total ram usage:        3 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; Hardware stack levels required when called:    3
  8505 ;; This function calls:
  8506 ;;		Nothing
  8507 ;; This function is called by:
  8508 ;;		_init_UART
  8509 ;; This function uses a non-reentrant model
  8510 ;;
  8511                           
  8512                           	psect	text40
  8513  001AF2                     __ptext40:
  8514                           	opt stack 0
  8515  001AF2                     _OpenUSART:
  8516                           	opt stack 25
  8517                           
  8518                           ;incstack = 0
  8519                           ;OpenUSART@config stored from wreg
  8520  001AF2  6E13               	movwf	OpenUSART@config,c
  8521  001AF4  0E00               	movlw	0
  8522  001AF6  6EAC               	movwf	4012,c	;volatile
  8523  001AF8  0E00               	movlw	0
  8524  001AFA  6EAB               	movwf	4011,c	;volatile
  8525  001AFC  A013               	btfss	OpenUSART@config,0,c
  8526  001AFE  D002               	goto	l5983
  8527  001B00  88AC               	bsf	4012,4,c	;volatile
  8528  001B02  D000               	goto	l5983
  8529  001B04                     l5983:
  8530  001B04  A213               	btfss	OpenUSART@config,1,c
  8531  001B06  D003               	goto	l5987
  8532  001B08  8CAC               	bsf	4012,6,c	;volatile
  8533  001B0A  8CAB               	bsf	4011,6,c	;volatile
  8534  001B0C  D000               	goto	l5987
  8535  001B0E                     l5987:
  8536  001B0E  A413               	btfss	OpenUSART@config,2,c
  8537  001B10  D002               	goto	l5991
  8538  001B12  8EAC               	bsf	4012,7,c	;volatile
  8539  001B14  D000               	goto	l5991
  8540  001B16                     l5991:
  8541  001B16  A613               	btfss	OpenUSART@config,3,c
  8542  001B18  D002               	goto	l879
  8543  001B1A  88AB               	bsf	4011,4,c	;volatile
  8544  001B1C  D002               	goto	l5995
  8545  001B1E                     l879:
  8546  001B1E  8AAB               	bsf	4011,5,c	;volatile
  8547  001B20  D000               	goto	l5995
  8548  001B22                     l5995:
  8549  001B22  B813               	btfsc	OpenUSART@config,4,c
  8550  001B24  84AC               	bsf	4012,2,c	;volatile
  8551  001B26  989E               	bcf	3998,4,c	;volatile
  8552  001B28  AA13               	btfss	OpenUSART@config,5,c
  8553  001B2A  D002               	goto	l6003
  8554  001B2C  86AB               	bsf	4011,3,c	;volatile
  8555  001B2E  D000               	goto	l6003
  8556  001B30                     l6003:
  8557  001B30  AC13               	btfss	OpenUSART@config,6,c
  8558  001B32  D002               	goto	l883
  8559  001B34  8A9D               	bsf	3997,5,c	;volatile
  8560  001B36  D001               	goto	l884
  8561  001B38                     l883:
  8562  001B38  9A9D               	bcf	3997,5,c	;volatile
  8563  001B3A                     l884:
  8564  001B3A  9A9E               	bcf	3998,5,c	;volatile
  8565  001B3C  AE13               	btfss	OpenUSART@config,7,c
  8566  001B3E  D002               	goto	l885
  8567  001B40  889D               	bsf	3997,4,c	;volatile
  8568  001B42  D001               	goto	l886
  8569  001B44                     l885:
  8570  001B44  989D               	bcf	3997,4,c	;volatile
  8571  001B46                     l886:
  8572  001B46  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8573  001B4A  5012               	movf	OpenUSART@spbrg+1,w,c
  8574  001B4C  6EB0               	movwf	4016,c	;volatile
  8575  001B4E  8AAC               	bsf	4012,5,c	;volatile
  8576  001B50  8EAB               	bsf	4011,7,c	;volatile
  8577  001B52  9C94               	bcf	3988,6,c	;volatile
  8578  001B54  8E94               	bsf	3988,7,c	;volatile
  8579  001B56  B8AC               	btfsc	4012,4,c	;volatile
  8580  001B58  BEAC               	btfsc	4012,7,c	;volatile
  8581  001B5A  D002               	goto	l888
  8582  001B5C  8C94               	bsf	3988,6,c	;volatile
  8583  001B5E  D000               	goto	l888
  8584  001B60                     l888:
  8585  001B60  0012               	return		;funcret
  8586  001B62                     __end_of_OpenUSART:
  8587                           	opt stack 0
  8588                           tblptru	equ	0xFF8
  8589                           tblptrh	equ	0xFF7
  8590                           tblptrl	equ	0xFF6
  8591                           tablat	equ	0xFF5
  8592                           prodh	equ	0xFF4
  8593                           prodl	equ	0xFF3
  8594                           intcon	equ	0xFF2
  8595                           intcon2	equ	0xFF1
  8596                           postinc0	equ	0xFEE
  8597                           wreg	equ	0xFE8
  8598                           postdec1	equ	0xFE5
  8599                           plusw1	equ	0xFE3
  8600                           fsr1l	equ	0xFE1
  8601                           indf2	equ	0xFDF
  8602                           postinc2	equ	0xFDE
  8603                           postdec2	equ	0xFDD
  8604                           plusw2	equ	0xFDB
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _init_INTERRUPT *****************
  8610 ;; Defined at:
  8611 ;;		line 18 in file "Interrupt.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;		None               void
  8618 ;; Registers used:
  8619 ;;		wreg, status,2
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    3
  8632 ;; This function calls:
  8633 ;;		Nothing
  8634 ;; This function is called by:
  8635 ;;		_Do_Init
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text41
  8640  00229A                     __ptext41:
  8641                           	opt stack 0
  8642  00229A                     _init_INTERRUPT:
  8643                           	opt stack 26
  8644                           
  8645                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0;
  8646                           
  8647                           ;incstack = 0
  8648  00229A  92F2               	bcf	intcon,1,c	;volatile
  8649                           
  8650                           ;Interrupt.c: 21: INTCON2bits.INTEDG0 = 0;
  8651  00229C  9CF1               	bcf	intcon2,6,c	;volatile
  8652                           
  8653                           ;Interrupt.c: 22: INTCONbits.INT0IE = 1;
  8654  00229E  88F2               	bsf	intcon,4,c	;volatile
  8655                           
  8656                           ;Interrupt.c: 23: TMR1H = 0;
  8657  0022A0  0E00               	movlw	0
  8658  0022A2  6ECF               	movwf	4047,c	;volatile
  8659                           
  8660                           ;Interrupt.c: 24: TMR1L = 0;
  8661  0022A4  0E00               	movlw	0
  8662  0022A6  6ECE               	movwf	4046,c	;volatile
  8663                           
  8664                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  8665  0022A8  909E               	bcf	3998,0,c	;volatile
  8666                           
  8667                           ;Interrupt.c: 26: PIE1bits.TMR1IE = 1;
  8668  0022AA  809D               	bsf	3997,0,c	;volatile
  8669                           
  8670                           ;Interrupt.c: 27: INTCONbits.PEIE = 1;
  8671  0022AC  8CF2               	bsf	intcon,6,c	;volatile
  8672                           
  8673                           ;Interrupt.c: 28: INTCONbits.GIE = 1;
  8674  0022AE  8EF2               	bsf	intcon,7,c	;volatile
  8675  0022B0  0012               	return		;funcret
  8676  0022B2                     __end_of_init_INTERRUPT:
  8677                           	opt stack 0
  8678                           tblptru	equ	0xFF8
  8679                           tblptrh	equ	0xFF7
  8680                           tblptrl	equ	0xFF6
  8681                           tablat	equ	0xFF5
  8682                           prodh	equ	0xFF4
  8683                           prodl	equ	0xFF3
  8684                           intcon	equ	0xFF2
  8685                           intcon2	equ	0xFF1
  8686                           postinc0	equ	0xFEE
  8687                           wreg	equ	0xFE8
  8688                           postdec1	equ	0xFE5
  8689                           plusw1	equ	0xFE3
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function _I2C_Init *****************
  8700 ;; Defined at:
  8701 ;;		line 15 in file "I2C_Soft.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  c               4   16[COMRAM] unsigned long 
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;		None
  8706 ;; Return value:  Size  Location     Type
  8707 ;;		None               void
  8708 ;; Registers used:
  8709 ;;		wreg, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;Total ram usage:        4 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    4
  8722 ;; This function calls:
  8723 ;;		_i2cHighScl
  8724 ;;		_i2cHighSda
  8725 ;; This function is called by:
  8726 ;;		_Do_Init
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           	psect	text42
  8731  0023B8                     __ptext42:
  8732                           	opt stack 0
  8733  0023B8                     _I2C_Init:
  8734                           	opt stack 25
  8735                           
  8736                           ;I2C_Soft.c: 17: i2cHighScl();
  8737                           
  8738                           ;incstack = 0
  8739  0023B8  ECD0  F011         	call	_i2cHighScl	;wreg free
  8740                           
  8741                           ;I2C_Soft.c: 18: i2cHighSda();
  8742  0023BC  ECF3  F011         	call	_i2cHighSda	;wreg free
  8743  0023C0  0012               	return		;funcret
  8744  0023C2                     __end_of_I2C_Init:
  8745                           	opt stack 0
  8746                           tblptru	equ	0xFF8
  8747                           tblptrh	equ	0xFF7
  8748                           tblptrl	equ	0xFF6
  8749                           tablat	equ	0xFF5
  8750                           prodh	equ	0xFF4
  8751                           prodl	equ	0xFF3
  8752                           intcon	equ	0xFF2
  8753                           intcon2	equ	0xFF1
  8754                           postinc0	equ	0xFEE
  8755                           wreg	equ	0xFE8
  8756                           postdec1	equ	0xFE5
  8757                           plusw1	equ	0xFE3
  8758                           fsr1l	equ	0xFE1
  8759                           indf2	equ	0xFDF
  8760                           postinc2	equ	0xFDE
  8761                           postdec2	equ	0xFDD
  8762                           plusw2	equ	0xFDB
  8763                           fsr2h	equ	0xFDA
  8764                           fsr2l	equ	0xFD9
  8765                           status	equ	0xFD8
  8766                           
  8767 ;; *************** function _DS1621_Init *****************
  8768 ;; Defined at:
  8769 ;;		line 21 in file "I2C_Support.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;		None
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;		None
  8774 ;; Return value:  Size  Location     Type
  8775 ;;		None               void
  8776 ;; Registers used:
  8777 ;;		wreg, status,2, status,0, cstack
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8787 ;;Total ram usage:        0 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    6
  8790 ;; This function calls:
  8791 ;;		_I2C_Write_Cmd_Only
  8792 ;;		_I2C_Write_Cmd_Write_Data
  8793 ;; This function is called by:
  8794 ;;		_Do_Init
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           	psect	text43
  8799  00224C                     __ptext43:
  8800                           	opt stack 0
  8801  00224C                     _DS1621_Init:
  8802                           	opt stack 23
  8803                           
  8804                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (0x48, 0xAC, 0x02);
  8805                           
  8806                           ;incstack = 0
  8807  00224C  0EAC               	movlw	172
  8808  00224E  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8809  002250  0E02               	movlw	2
  8810  002252  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8811  002254  0E48               	movlw	72
  8812  002256  ECEE  F010         	call	_I2C_Write_Cmd_Write_Data
  8813                           
  8814                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(0x48, 0xEE);
  8815  00225A  0EEE               	movlw	238
  8816  00225C  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8817  00225E  0E48               	movlw	72
  8818  002260  EC33  F011         	call	_I2C_Write_Cmd_Only
  8819  002264  0012               	return		;funcret
  8820  002266                     __end_of_DS1621_Init:
  8821                           	opt stack 0
  8822                           tblptru	equ	0xFF8
  8823                           tblptrh	equ	0xFF7
  8824                           tblptrl	equ	0xFF6
  8825                           tablat	equ	0xFF5
  8826                           prodh	equ	0xFF4
  8827                           prodl	equ	0xFF3
  8828                           intcon	equ	0xFF2
  8829                           intcon2	equ	0xFF1
  8830                           postinc0	equ	0xFEE
  8831                           wreg	equ	0xFE8
  8832                           postdec1	equ	0xFE5
  8833                           plusw1	equ	0xFE3
  8834                           fsr1l	equ	0xFE1
  8835                           indf2	equ	0xFDF
  8836                           postinc2	equ	0xFDE
  8837                           postdec2	equ	0xFDD
  8838                           plusw2	equ	0xFDB
  8839                           fsr2h	equ	0xFDA
  8840                           fsr2l	equ	0xFD9
  8841                           status	equ	0xFD8
  8842                           
  8843 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8844 ;; Defined at:
  8845 ;;		line 153 in file "I2C_Soft.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;  Device          1    wreg     unsigned char 
  8848 ;;  Cmd             1   18[COMRAM] unsigned char 
  8849 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  Device          1   20[COMRAM] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;		None               void
  8854 ;; Registers used:
  8855 ;;		wreg, status,2, status,0, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;Total ram usage:        3 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    5
  8868 ;; This function calls:
  8869 ;;		_I2C_Start
  8870 ;;		_I2C_Stop
  8871 ;;		_I2C_Write
  8872 ;; This function is called by:
  8873 ;;		_DS1621_Init
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           	psect	text44
  8878  0021DC                     __ptext44:
  8879                           	opt stack 0
  8880  0021DC                     _I2C_Write_Cmd_Write_Data:
  8881                           	opt stack 23
  8882                           
  8883                           ;incstack = 0
  8884                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8885  0021DC  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8886                           
  8887                           ;I2C_Soft.c: 155: I2C_Start();
  8888  0021DE  ECA7  F011         	call	_I2C_Start	;wreg free
  8889                           
  8890                           ;I2C_Soft.c: 156: I2C_Write((Device << 1) | 0);
  8891  0021E2  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8892  0021E4  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8893  0021E6  ECFC  F00F         	call	_I2C_Write
  8894                           
  8895                           ;I2C_Soft.c: 157: I2C_Write(Cmd);
  8896  0021EA  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8897  0021EC  ECFC  F00F         	call	_I2C_Write
  8898                           
  8899                           ;I2C_Soft.c: 158: I2C_Write(Data_Out);
  8900  0021F0  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8901  0021F2  ECFC  F00F         	call	_I2C_Write
  8902                           
  8903                           ;I2C_Soft.c: 159: I2C_Stop();
  8904  0021F6  EC9E  F011         	call	_I2C_Stop	;wreg free
  8905  0021FA  0012               	return		;funcret
  8906  0021FC                     __end_of_I2C_Write_Cmd_Write_Data:
  8907                           	opt stack 0
  8908                           tblptru	equ	0xFF8
  8909                           tblptrh	equ	0xFF7
  8910                           tblptrl	equ	0xFF6
  8911                           tablat	equ	0xFF5
  8912                           prodh	equ	0xFF4
  8913                           prodl	equ	0xFF3
  8914                           intcon	equ	0xFF2
  8915                           intcon2	equ	0xFF1
  8916                           postinc0	equ	0xFEE
  8917                           wreg	equ	0xFE8
  8918                           postdec1	equ	0xFE5
  8919                           plusw1	equ	0xFE3
  8920                           fsr1l	equ	0xFE1
  8921                           indf2	equ	0xFDF
  8922                           postinc2	equ	0xFDE
  8923                           postdec2	equ	0xFDD
  8924                           plusw2	equ	0xFDB
  8925                           fsr2h	equ	0xFDA
  8926                           fsr2l	equ	0xFD9
  8927                           status	equ	0xFD8
  8928                           
  8929 ;; *************** function _I2C_Write_Cmd_Only *****************
  8930 ;; Defined at:
  8931 ;;		line 145 in file "I2C_Soft.c"
  8932 ;; Parameters:    Size  Location     Type
  8933 ;;  Device          1    wreg     unsigned char 
  8934 ;;  Cmd             1   18[COMRAM] unsigned char 
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;  Device          1   19[COMRAM] unsigned char 
  8937 ;; Return value:  Size  Location     Type
  8938 ;;		None               void
  8939 ;; Registers used:
  8940 ;;		wreg, status,2, status,0, cstack
  8941 ;; Tracked objects:
  8942 ;;		On entry : 0/0
  8943 ;;		On exit  : 0/0
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8946 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;Total ram usage:        2 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:    5
  8953 ;; This function calls:
  8954 ;;		_I2C_Start
  8955 ;;		_I2C_Stop
  8956 ;;		_I2C_Write
  8957 ;; This function is called by:
  8958 ;;		_DS1621_Init
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text45
  8963  002266                     __ptext45:
  8964                           	opt stack 0
  8965  002266                     _I2C_Write_Cmd_Only:
  8966                           	opt stack 23
  8967                           
  8968                           ;incstack = 0
  8969                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8970  002266  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8971                           
  8972                           ;I2C_Soft.c: 147: I2C_Start();
  8973  002268  ECA7  F011         	call	_I2C_Start	;wreg free
  8974                           
  8975                           ;I2C_Soft.c: 148: I2C_Write((Device << 1) | 0);
  8976  00226C  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8977  00226E  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8978  002270  ECFC  F00F         	call	_I2C_Write
  8979                           
  8980                           ;I2C_Soft.c: 149: I2C_Write(Cmd);
  8981  002274  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8982  002276  ECFC  F00F         	call	_I2C_Write
  8983                           
  8984                           ;I2C_Soft.c: 150: I2C_Stop();
  8985  00227A  EC9E  F011         	call	_I2C_Stop	;wreg free
  8986  00227E  0012               	return		;funcret
  8987  002280                     __end_of_I2C_Write_Cmd_Only:
  8988                           	opt stack 0
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           intcon2	equ	0xFF1
  8997                           postinc0	equ	0xFEE
  8998                           wreg	equ	0xFE8
  8999                           postdec1	equ	0xFE5
  9000                           plusw1	equ	0xFE3
  9001                           fsr1l	equ	0xFE1
  9002                           indf2	equ	0xFDF
  9003                           postinc2	equ	0xFDE
  9004                           postdec2	equ	0xFDD
  9005                           plusw2	equ	0xFDB
  9006                           fsr2h	equ	0xFDA
  9007                           fsr2l	equ	0xFD9
  9008                           status	equ	0xFD8
  9009                           
  9010 ;; *************** function _Decrease_Speed *****************
  9011 ;; Defined at:
  9012 ;;		line 54 in file "Fan_Support.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;		None
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;		None
  9017 ;; Return value:  Size  Location     Type
  9018 ;;		None               void
  9019 ;; Registers used:
  9020 ;;		wreg, status,2, status,0, cstack
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;Total ram usage:        0 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:    7
  9033 ;; This function calls:
  9034 ;;		_Do_Beep
  9035 ;;		_do_update_pwm
  9036 ;; This function is called by:
  9037 ;;		_main
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text46
  9042  0021BA                     __ptext46:
  9043                           	opt stack 0
  9044  0021BA                     _Decrease_Speed:
  9045                           	opt stack 23
  9046                           
  9047                           ;Fan_Support.c: 56: if(duty_cycle == 0)
  9048                           
  9049                           ;incstack = 0
  9050  0021BA  505C               	movf	_duty_cycle,w,c
  9051  0021BC  A4D8               	btfss	status,2,c
  9052  0021BE  D006               	goto	l6329
  9053                           
  9054                           ;Fan_Support.c: 57: {
  9055                           ;Fan_Support.c: 58: Do_Beep();
  9056  0021C0  EC82  F011         	call	_Do_Beep	;wreg free
  9057                           
  9058                           ;Fan_Support.c: 59: do_update_pwm(duty_cycle);
  9059  0021C4  505C               	movf	_duty_cycle,w,c
  9060  0021C6  ECD0  F00B         	call	_do_update_pwm
  9061                           
  9062                           ;Fan_Support.c: 60: }
  9063  0021CA  D007               	goto	l54
  9064  0021CC                     l6329:
  9065                           
  9066                           ;Fan_Support.c: 61: else
  9067                           ;Fan_Support.c: 62: {
  9068                           ;Fan_Support.c: 63: duty_cycle = duty_cycle - 5;
  9069  0021CC  505C               	movf	_duty_cycle,w,c
  9070  0021CE  0FFB               	addlw	251
  9071  0021D0  6E5C               	movwf	_duty_cycle,c
  9072                           
  9073                           ;Fan_Support.c: 65: do_update_pwm(duty_cycle);
  9074  0021D2  505C               	movf	_duty_cycle,w,c
  9075  0021D4  ECD0  F00B         	call	_do_update_pwm
  9076  0021D8  D000               	goto	l54
  9077  0021DA                     l54:
  9078  0021DA  0012               	return		;funcret
  9079  0021DC                     __end_of_Decrease_Speed:
  9080                           	opt stack 0
  9081                           tblptru	equ	0xFF8
  9082                           tblptrh	equ	0xFF7
  9083                           tblptrl	equ	0xFF6
  9084                           tablat	equ	0xFF5
  9085                           prodh	equ	0xFF4
  9086                           prodl	equ	0xFF3
  9087                           intcon	equ	0xFF2
  9088                           intcon2	equ	0xFF1
  9089                           postinc0	equ	0xFEE
  9090                           wreg	equ	0xFE8
  9091                           postdec1	equ	0xFE5
  9092                           plusw1	equ	0xFE3
  9093                           fsr1l	equ	0xFE1
  9094                           indf2	equ	0xFDF
  9095                           postinc2	equ	0xFDE
  9096                           postdec2	equ	0xFDD
  9097                           plusw2	equ	0xFDB
  9098                           fsr2h	equ	0xFDA
  9099                           fsr2l	equ	0xFD9
  9100                           status	equ	0xFD8
  9101                           
  9102 ;; *************** function _Do_Beep *****************
  9103 ;; Defined at:
  9104 ;;		line 9 in file "Utils.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;		None
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;		None
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  2   18[None  ] int 
  9111 ;; Registers used:
  9112 ;;		wreg, status,2, status,0, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;Total ram usage:        0 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    6
  9125 ;; This function calls:
  9126 ;;		_Activate_Buzzer
  9127 ;;		_Deactivate_Buzzer
  9128 ;;		_Wait_Half_Second
  9129 ;;		_do_update_pwm
  9130 ;; This function is called by:
  9131 ;;		_Increase_Speed
  9132 ;;		_Decrease_Speed
  9133 ;;		_main
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text47
  9138  002304                     __ptext47:
  9139                           	opt stack 0
  9140  002304                     _Do_Beep:
  9141                           	opt stack 23
  9142                           
  9143                           ;Utils.c: 11: Activate_Buzzer();
  9144                           
  9145                           ;incstack = 0
  9146  002304  EC95  F011         	call	_Activate_Buzzer	;wreg free
  9147                           
  9148                           ;Utils.c: 12: Wait_Half_Second();
  9149  002308  EC40  F011         	call	_Wait_Half_Second	;wreg free
  9150                           
  9151                           ;Utils.c: 13: Deactivate_Buzzer();
  9152  00230C  ECEB  F011         	call	_Deactivate_Buzzer	;wreg free
  9153                           
  9154                           ;Utils.c: 14: do_update_pwm(duty_cycle);
  9155  002310  505C               	movf	_duty_cycle,w,c
  9156  002312  ECD0  F00B         	call	_do_update_pwm
  9157  002316  0012               	return		;funcret
  9158  002318                     __end_of_Do_Beep:
  9159                           	opt stack 0
  9160                           tblptru	equ	0xFF8
  9161                           tblptrh	equ	0xFF7
  9162                           tblptrl	equ	0xFF6
  9163                           tablat	equ	0xFF5
  9164                           prodh	equ	0xFF4
  9165                           prodl	equ	0xFF3
  9166                           intcon	equ	0xFF2
  9167                           intcon2	equ	0xFF1
  9168                           postinc0	equ	0xFEE
  9169                           wreg	equ	0xFE8
  9170                           postdec1	equ	0xFE5
  9171                           plusw1	equ	0xFE3
  9172                           fsr1l	equ	0xFE1
  9173                           indf2	equ	0xFDF
  9174                           postinc2	equ	0xFDE
  9175                           postdec2	equ	0xFDD
  9176                           plusw2	equ	0xFDB
  9177                           fsr2h	equ	0xFDA
  9178                           fsr2l	equ	0xFD9
  9179                           status	equ	0xFD8
  9180                           
  9181 ;; *************** function _do_update_pwm *****************
  9182 ;; Defined at:
  9183 ;;		line 69 in file "Fan_Support.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;  duty_cycle      1    wreg     unsigned char 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  9188 ;;  dc_f            3   61[COMRAM] float 
  9189 ;;  dc_I            2   65[COMRAM] int 
  9190 ;; Return value:  Size  Location     Type
  9191 ;;		None               void
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;Total ram usage:        9 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    5
  9206 ;; This function calls:
  9207 ;;		___ftdiv
  9208 ;;		___ftmul
  9209 ;;		___fttol
  9210 ;;		___lbtoft
  9211 ;; This function is called by:
  9212 ;;		_Turn_Off_Fan
  9213 ;;		_Turn_On_Fan
  9214 ;;		_Increase_Speed
  9215 ;;		_Decrease_Speed
  9216 ;;		_Do_Beep
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220                           	psect	text48
  9221  0017A0                     __ptext48:
  9222                           	opt stack 0
  9223  0017A0                     _do_update_pwm:
  9224                           	opt stack 23
  9225                           
  9226                           ;incstack = 0
  9227                           ;do_update_pwm@duty_cycle stored from wreg
  9228  0017A0  6E41               	movwf	do_update_pwm@duty_cycle,c
  9229                           
  9230                           ;Fan_Support.c: 71: float dc_f;
  9231                           ;Fan_Support.c: 72: int dc_I;
  9232                           ;Fan_Support.c: 73: PR2 = 0b00000100 ;
  9233  0017A2  0E04               	movlw	4
  9234  0017A4  6ECB               	movwf	4043,c	;volatile
  9235                           
  9236                           ;Fan_Support.c: 74: T2CON = 0b00000111 ;
  9237  0017A6  0E07               	movlw	7
  9238  0017A8  6ECA               	movwf	4042,c	;volatile
  9239                           
  9240                           ;Fan_Support.c: 75: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9241  0017AA  0E00               	movlw	0
  9242  0017AC  6E20               	movwf	___ftmul@f2,c
  9243  0017AE  0E80               	movlw	128
  9244  0017B0  6E21               	movwf	___ftmul@f2+1,c
  9245  0017B2  0E40               	movlw	64
  9246  0017B4  6E22               	movwf	___ftmul@f2+2,c
  9247  0017B6  5041               	movf	do_update_pwm@duty_cycle,w,c
  9248  0017B8  ECA7  F010         	call	___lbtoft
  9249  0017BC  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9250  0017C0  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9251  0017C4  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9252  0017C8  EC26  F009         	call	___ftmul	;wreg free
  9253  0017CC  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9254  0017D0  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9255  0017D4  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9256  0017D8  0E00               	movlw	0
  9257  0017DA  6E2F               	movwf	___ftdiv@f2,c
  9258  0017DC  0EA0               	movlw	160
  9259  0017DE  6E30               	movwf	___ftdiv@f2+1,c
  9260  0017E0  0E41               	movlw	65
  9261  0017E2  6E31               	movwf	___ftdiv@f2+2,c
  9262  0017E4  EC8E  F00A         	call	___ftdiv	;wreg free
  9263  0017E8  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  9264  0017EC  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9265  0017F0  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9266                           
  9267                           ;Fan_Support.c: 77: dc_I = (int) dc_f;
  9268  0017F4  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9269  0017F8  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9270  0017FC  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9271  001800  EC1B  F00A         	call	___fttol	;wreg free
  9272  001804  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  9273  001808  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9274                           
  9275                           ;Fan_Support.c: 78: if (dc_I > duty_cycle) dc_I++;
  9276  00180C  5041               	movf	do_update_pwm@duty_cycle,w,c
  9277  00180E  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9278  001810  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9279  001812  5042               	movf	do_update_pwm@dc_I,w,c
  9280  001814  5C3B               	subwf	??_do_update_pwm,w,c
  9281  001816  503C               	movf	??_do_update_pwm+1,w,c
  9282  001818  0A80               	xorlw	128
  9283  00181A  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9284  00181C  5043               	movf	do_update_pwm@dc_I+1,w,c
  9285  00181E  0A80               	xorlw	128
  9286  001820  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9287  001822  B0D8               	btfsc	status,0,c
  9288  001824  D003               	goto	l5737
  9289  001826  4A42               	infsnz	do_update_pwm@dc_I,f,c
  9290  001828  2A43               	incf	do_update_pwm@dc_I+1,f,c
  9291  00182A  D000               	goto	l5737
  9292  00182C                     l5737:
  9293                           
  9294                           ;Fan_Support.c: 79: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9295  00182C  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9296  001830  0E03               	movlw	3
  9297  001832  163B               	andwf	??_do_update_pwm,f,c
  9298  001834  383B               	swapf	??_do_update_pwm,w,c
  9299  001836  0BF0               	andlw	240
  9300  001838  090C               	iorlw	12
  9301  00183A  6EBD               	movwf	4029,c	;volatile
  9302                           
  9303                           ;Fan_Support.c: 80: CCPR1L = (dc_I) >> 2;
  9304  00183C  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9305  001840  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9306  001844  343C               	rlcf	??_do_update_pwm+1,w,c
  9307  001846  323C               	rrcf	??_do_update_pwm+1,f,c
  9308  001848  323B               	rrcf	??_do_update_pwm,f,c
  9309  00184A  343C               	rlcf	??_do_update_pwm+1,w,c
  9310  00184C  323C               	rrcf	??_do_update_pwm+1,f,c
  9311  00184E  323B               	rrcf	??_do_update_pwm,f,c
  9312  001850  503B               	movf	??_do_update_pwm,w,c
  9313  001852  6EBE               	movwf	4030,c	;volatile
  9314  001854  0012               	return		;funcret
  9315  001856                     __end_of_do_update_pwm:
  9316                           	opt stack 0
  9317                           tblptru	equ	0xFF8
  9318                           tblptrh	equ	0xFF7
  9319                           tblptrl	equ	0xFF6
  9320                           tablat	equ	0xFF5
  9321                           prodh	equ	0xFF4
  9322                           prodl	equ	0xFF3
  9323                           intcon	equ	0xFF2
  9324                           intcon2	equ	0xFF1
  9325                           postinc0	equ	0xFEE
  9326                           wreg	equ	0xFE8
  9327                           postdec1	equ	0xFE5
  9328                           plusw1	equ	0xFE3
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           plusw2	equ	0xFDB
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function ___lbtoft *****************
  9339 ;; Defined at:
  9340 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  c               1    wreg     unsigned char 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  c               1   27[COMRAM] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  3   24[COMRAM] float 
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, status,0, cstack
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9354 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9358 ;;Total ram usage:        4 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    4
  9361 ;; This function calls:
  9362 ;;		___ftpack
  9363 ;; This function is called by:
  9364 ;;		_do_update_pwm
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           	psect	text49
  9369  00214E                     __ptext49:
  9370                           	opt stack 0
  9371  00214E                     ___lbtoft:
  9372                           	opt stack 23
  9373                           
  9374                           ;incstack = 0
  9375                           ;___lbtoft@c stored from wreg
  9376  00214E  6E1C               	movwf	___lbtoft@c,c
  9377  002150  501C               	movf	___lbtoft@c,w,c
  9378  002152  6E11               	movwf	___ftpack@arg,c
  9379  002154  6A12               	clrf	___ftpack@arg+1,c
  9380  002156  6A13               	clrf	___ftpack@arg+2,c
  9381  002158  0E8E               	movlw	142
  9382  00215A  6E14               	movwf	___ftpack@exp,c
  9383  00215C  0E00               	movlw	0
  9384  00215E  6E15               	movwf	___ftpack@sign,c
  9385  002160  EC6D  F00B         	call	___ftpack	;wreg free
  9386  002164  C011  F019         	movff	?___ftpack,?___lbtoft
  9387  002168  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9388  00216C  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9389  002170  D000               	goto	l1348
  9390  002172                     l1348:
  9391  002172  0012               	return		;funcret
  9392  002174                     __end_of___lbtoft:
  9393                           	opt stack 0
  9394                           tblptru	equ	0xFF8
  9395                           tblptrh	equ	0xFF7
  9396                           tblptrl	equ	0xFF6
  9397                           tablat	equ	0xFF5
  9398                           prodh	equ	0xFF4
  9399                           prodl	equ	0xFF3
  9400                           intcon	equ	0xFF2
  9401                           intcon2	equ	0xFF1
  9402                           postinc0	equ	0xFEE
  9403                           wreg	equ	0xFE8
  9404                           postdec1	equ	0xFE5
  9405                           plusw1	equ	0xFE3
  9406                           fsr1l	equ	0xFE1
  9407                           indf2	equ	0xFDF
  9408                           postinc2	equ	0xFDE
  9409                           postdec2	equ	0xFDD
  9410                           plusw2	equ	0xFDB
  9411                           fsr2h	equ	0xFDA
  9412                           fsr2l	equ	0xFD9
  9413                           status	equ	0xFD8
  9414                           
  9415 ;; *************** function ___fttol *****************
  9416 ;; Defined at:
  9417 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;  f1              3   16[COMRAM] float 
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;  lval            4   26[COMRAM] unsigned long 
  9422 ;;  exp1            1   30[COMRAM] unsigned char 
  9423 ;;  sign1           1   25[COMRAM] unsigned char 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  4   16[COMRAM] long 
  9426 ;; Registers used:
  9427 ;;		wreg, status,2, status,0
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9433 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9434 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9435 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9436 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9437 ;;Total ram usage:       15 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    3
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		_do_update_pwm
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           	psect	text50
  9448  001436                     __ptext50:
  9449                           	opt stack 0
  9450  001436                     ___fttol:
  9451                           	opt stack 24
  9452                           
  9453                           ;incstack = 0
  9454  001436  C013  F015         	movff	___fttol@f1+2,??___fttol
  9455  00143A  6A16               	clrf	(??___fttol+1)& (0+255),c
  9456  00143C  6A17               	clrf	(??___fttol+2)& (0+255),c
  9457  00143E  3412               	rlcf	___fttol@f1+1,w,c
  9458  001440  3615               	rlcf	??___fttol& (0+255),f,c
  9459  001442  E301               	bnc	u4031
  9460  001444  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9461  001446                     u4031:
  9462  001446  5015               	movf	??___fttol,w,c
  9463  001448  6E1F               	movwf	___fttol@exp1,c
  9464  00144A  501F               	movf	___fttol@exp1,w,c
  9465  00144C  A4D8               	btfss	status,2,c
  9466  00144E  D002               	goto	l5515
  9467  001450  D039               	goto	l5539
  9468  001452  D063               	goto	l1307
  9469  001454                     l5515:
  9470  001454  0E17               	movlw	23
  9471  001456  6E15               	movwf	??___fttol& (0+255),c
  9472  001458  C011  F016         	movff	___fttol@f1,??___fttol+1
  9473  00145C  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9474  001460  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9475  001464  2815               	incf	??___fttol,w,c
  9476  001466  6E19               	movwf	(??___fttol+4)& (0+255),c
  9477  001468  D004               	goto	u4050
  9478  00146A                     u4055:
  9479  00146A  90D8               	bcf	status,0,c
  9480  00146C  3218               	rrcf	??___fttol+3,f,c
  9481  00146E  3217               	rrcf	??___fttol+2,f,c
  9482  001470  3216               	rrcf	??___fttol+1,f,c
  9483  001472                     u4050:
  9484  001472  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9485  001474  D7FA               	goto	u4055
  9486  001476  5016               	movf	??___fttol+1,w,c
  9487  001478  6E1A               	movwf	___fttol@sign1,c
  9488  00147A  8E12               	bsf	___fttol@f1+1,7,c
  9489  00147C  0EFF               	movlw	255
  9490  00147E  1611               	andwf	___fttol@f1,f,c
  9491  001480  0EFF               	movlw	255
  9492  001482  1612               	andwf	___fttol@f1+1,f,c
  9493  001484  0E00               	movlw	0
  9494  001486  1613               	andwf	___fttol@f1+2,f,c
  9495  001488  5011               	movf	___fttol@f1,w,c
  9496  00148A  6E1B               	movwf	___fttol@lval,c
  9497  00148C  5012               	movf	___fttol@f1+1,w,c
  9498  00148E  6E1C               	movwf	___fttol@lval+1,c
  9499  001490  5013               	movf	___fttol@f1+2,w,c
  9500  001492  6E1D               	movwf	___fttol@lval+2,c
  9501  001494  6A1E               	clrf	___fttol@lval+3,c
  9502  001496  0E8E               	movlw	142
  9503  001498  5E1F               	subwf	___fttol@exp1,f,c
  9504  00149A  AE1F               	btfss	___fttol@exp1,7,c
  9505  00149C  D010               	goto	l5537
  9506  00149E  501F               	movf	___fttol@exp1,w,c
  9507  0014A0  0A80               	xorlw	128
  9508  0014A2  0F8F               	addlw	143
  9509  0014A4  B0D8               	btfsc	status,0,c
  9510  0014A6  D003               	goto	l5533
  9511  0014A8  D00D               	goto	l5539
  9512  0014AA  D037               	goto	l1307
  9513  0014AC  D000               	goto	l5533
  9514  0014AE                     l5533:
  9515  0014AE  90D8               	bcf	status,0,c
  9516  0014B0  321E               	rrcf	___fttol@lval+3,f,c
  9517  0014B2  321D               	rrcf	___fttol@lval+2,f,c
  9518  0014B4  321C               	rrcf	___fttol@lval+1,f,c
  9519  0014B6  321B               	rrcf	___fttol@lval,f,c
  9520  0014B8  3E1F               	incfsz	___fttol@exp1,f,c
  9521  0014BA  D7F9               	goto	l5533
  9522  0014BC  D019               	goto	l5547
  9523  0014BE                     l5537:
  9524  0014BE  0E17               	movlw	23
  9525  0014C0  641F               	cpfsgt	___fttol@exp1,c
  9526  0014C2  D011               	goto	l5545
  9527  0014C4                     l5539:
  9528  0014C4  0E00               	movlw	0
  9529  0014C6  6E11               	movwf	?___fttol,c
  9530  0014C8  0E00               	movlw	0
  9531  0014CA  6E12               	movwf	?___fttol+1,c
  9532  0014CC  0E00               	movlw	0
  9533  0014CE  6E13               	movwf	?___fttol+2,c
  9534  0014D0  0E00               	movlw	0
  9535  0014D2  6E14               	movwf	?___fttol+3,c
  9536  0014D4  D022               	goto	l1307
  9537  0014D6  D007               	goto	l5545
  9538  0014D8                     l5543:
  9539  0014D8  90D8               	bcf	status,0,c
  9540  0014DA  361B               	rlcf	___fttol@lval,f,c
  9541  0014DC  361C               	rlcf	___fttol@lval+1,f,c
  9542  0014DE  361D               	rlcf	___fttol@lval+2,f,c
  9543  0014E0  361E               	rlcf	___fttol@lval+3,f,c
  9544  0014E2  061F               	decf	___fttol@exp1,f,c
  9545  0014E4  D000               	goto	l5545
  9546  0014E6                     l5545:
  9547  0014E6  501F               	movf	___fttol@exp1,w,c
  9548  0014E8  B4D8               	btfsc	status,2,c
  9549  0014EA  D002               	goto	l5547
  9550  0014EC  D7F5               	goto	l5543
  9551  0014EE  D000               	goto	l5547
  9552  0014F0                     l5547:
  9553  0014F0  501A               	movf	___fttol@sign1,w,c
  9554  0014F2  B4D8               	btfsc	status,2,c
  9555  0014F4  D009               	goto	l5551
  9556  0014F6  1E1E               	comf	___fttol@lval+3,f,c
  9557  0014F8  1E1D               	comf	___fttol@lval+2,f,c
  9558  0014FA  1E1C               	comf	___fttol@lval+1,f,c
  9559  0014FC  6C1B               	negf	___fttol@lval,c
  9560  0014FE  0E00               	movlw	0
  9561  001500  221C               	addwfc	___fttol@lval+1,f,c
  9562  001502  221D               	addwfc	___fttol@lval+2,f,c
  9563  001504  221E               	addwfc	___fttol@lval+3,f,c
  9564  001506  D000               	goto	l5551
  9565  001508                     l5551:
  9566  001508  C01B  F011         	movff	___fttol@lval,?___fttol
  9567  00150C  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9568  001510  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9569  001514  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9570  001518  D000               	goto	l1307
  9571  00151A                     l1307:
  9572  00151A  0012               	return		;funcret
  9573  00151C                     __end_of___fttol:
  9574                           	opt stack 0
  9575                           tblptru	equ	0xFF8
  9576                           tblptrh	equ	0xFF7
  9577                           tblptrl	equ	0xFF6
  9578                           tablat	equ	0xFF5
  9579                           prodh	equ	0xFF4
  9580                           prodl	equ	0xFF3
  9581                           intcon	equ	0xFF2
  9582                           intcon2	equ	0xFF1
  9583                           postinc0	equ	0xFEE
  9584                           wreg	equ	0xFE8
  9585                           postdec1	equ	0xFE5
  9586                           plusw1	equ	0xFE3
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           plusw2	equ	0xFDB
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596 ;; *************** function ___ftmul *****************
  9597 ;; Defined at:
  9598 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;  f1              3   28[COMRAM] float 
  9601 ;;  f2              3   31[COMRAM] float 
  9602 ;; Auto vars:     Size  Location     Type
  9603 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9604 ;;  sign            1   42[COMRAM] unsigned char 
  9605 ;;  cntr            1   41[COMRAM] unsigned char 
  9606 ;;  exp             1   37[COMRAM] unsigned char 
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  3   28[COMRAM] float 
  9609 ;; Registers used:
  9610 ;;		wreg, status,2, status,0, cstack
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9616 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;Total ram usage:       15 bytes
  9621 ;; Hardware stack levels used:    1
  9622 ;; Hardware stack levels required when called:    4
  9623 ;; This function calls:
  9624 ;;		___ftpack
  9625 ;; This function is called by:
  9626 ;;		_do_update_pwm
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text51
  9631  00124C                     __ptext51:
  9632                           	opt stack 0
  9633  00124C                     ___ftmul:
  9634                           	opt stack 23
  9635                           
  9636                           ;incstack = 0
  9637  00124C  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9638  001250  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9639  001252  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9640  001254  341E               	rlcf	___ftmul@f1+1,w,c
  9641  001256  3623               	rlcf	??___ftmul& (0+255),f,c
  9642  001258  E301               	bnc	u3971
  9643  00125A  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9644  00125C                     u3971:
  9645  00125C  5023               	movf	??___ftmul,w,c
  9646  00125E  6E26               	movwf	___ftmul@exp,c
  9647  001260  5026               	movf	___ftmul@exp,w,c
  9648  001262  A4D8               	btfss	status,2,c
  9649  001264  D002               	goto	l5467
  9650  001266  D00E               	goto	l5469
  9651  001268  D06C               	goto	l1286
  9652  00126A                     l5467:
  9653  00126A  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9654  00126E  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9655  001270  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9656  001272  3421               	rlcf	___ftmul@f2+1,w,c
  9657  001274  3623               	rlcf	??___ftmul& (0+255),f,c
  9658  001276  E301               	bnc	u3991
  9659  001278  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9660  00127A                     u3991:
  9661  00127A  5023               	movf	??___ftmul,w,c
  9662  00127C  6E2B               	movwf	___ftmul@sign,c
  9663  00127E  502B               	movf	___ftmul@sign,w,c
  9664  001280  A4D8               	btfss	status,2,c
  9665  001282  D007               	goto	l5473
  9666  001284                     l5469:
  9667  001284  0E00               	movlw	0
  9668  001286  6E1D               	movwf	?___ftmul,c
  9669  001288  0E00               	movlw	0
  9670  00128A  6E1E               	movwf	?___ftmul+1,c
  9671  00128C  0E00               	movlw	0
  9672  00128E  6E1F               	movwf	?___ftmul+2,c
  9673  001290  D058               	goto	l1286
  9674  001292                     l5473:
  9675  001292  502B               	movf	___ftmul@sign,w,c
  9676  001294  0F7B               	addlw	123
  9677  001296  2626               	addwf	___ftmul@exp,f,c
  9678  001298  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9679  00129C  5022               	movf	___ftmul@f2+2,w,c
  9680  00129E  1A2B               	xorwf	___ftmul@sign,f,c
  9681  0012A0  0E80               	movlw	128
  9682  0012A2  162B               	andwf	___ftmul@sign,f,c
  9683  0012A4  8E1E               	bsf	___ftmul@f1+1,7,c
  9684  0012A6  8E21               	bsf	___ftmul@f2+1,7,c
  9685  0012A8  0EFF               	movlw	255
  9686  0012AA  1620               	andwf	___ftmul@f2,f,c
  9687  0012AC  0EFF               	movlw	255
  9688  0012AE  1621               	andwf	___ftmul@f2+1,f,c
  9689  0012B0  0E00               	movlw	0
  9690  0012B2  1622               	andwf	___ftmul@f2+2,f,c
  9691  0012B4  0E00               	movlw	0
  9692  0012B6  6E27               	movwf	___ftmul@f3_as_product,c
  9693  0012B8  0E00               	movlw	0
  9694  0012BA  6E28               	movwf	___ftmul@f3_as_product+1,c
  9695  0012BC  0E00               	movlw	0
  9696  0012BE  6E29               	movwf	___ftmul@f3_as_product+2,c
  9697  0012C0  0E07               	movlw	7
  9698  0012C2  6E2A               	movwf	___ftmul@cntr,c
  9699  0012C4  D000               	goto	l5487
  9700  0012C6                     l5487:
  9701  0012C6  A01D               	btfss	___ftmul@f1,0,c
  9702  0012C8  D007               	goto	l5491
  9703  0012CA  5020               	movf	___ftmul@f2,w,c
  9704  0012CC  2627               	addwf	___ftmul@f3_as_product,f,c
  9705  0012CE  5021               	movf	___ftmul@f2+1,w,c
  9706  0012D0  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9707  0012D2  5022               	movf	___ftmul@f2+2,w,c
  9708  0012D4  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9709  0012D6  D000               	goto	l5491
  9710  0012D8                     l5491:
  9711  0012D8  90D8               	bcf	status,0,c
  9712  0012DA  321F               	rrcf	___ftmul@f1+2,f,c
  9713  0012DC  321E               	rrcf	___ftmul@f1+1,f,c
  9714  0012DE  321D               	rrcf	___ftmul@f1,f,c
  9715  0012E0  90D8               	bcf	status,0,c
  9716  0012E2  3620               	rlcf	___ftmul@f2,f,c
  9717  0012E4  3621               	rlcf	___ftmul@f2+1,f,c
  9718  0012E6  3622               	rlcf	___ftmul@f2+2,f,c
  9719  0012E8  2E2A               	decfsz	___ftmul@cntr,f,c
  9720  0012EA  D7ED               	goto	l5487
  9721  0012EC  D000               	goto	l5495
  9722  0012EE                     l5495:
  9723  0012EE  0E09               	movlw	9
  9724  0012F0  6E2A               	movwf	___ftmul@cntr,c
  9725  0012F2  D000               	goto	l5497
  9726  0012F4                     l5497:
  9727  0012F4  A01D               	btfss	___ftmul@f1,0,c
  9728  0012F6  D007               	goto	l5501
  9729  0012F8  5020               	movf	___ftmul@f2,w,c
  9730  0012FA  2627               	addwf	___ftmul@f3_as_product,f,c
  9731  0012FC  5021               	movf	___ftmul@f2+1,w,c
  9732  0012FE  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9733  001300  5022               	movf	___ftmul@f2+2,w,c
  9734  001302  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9735  001304  D000               	goto	l5501
  9736  001306                     l5501:
  9737  001306  90D8               	bcf	status,0,c
  9738  001308  321F               	rrcf	___ftmul@f1+2,f,c
  9739  00130A  321E               	rrcf	___ftmul@f1+1,f,c
  9740  00130C  321D               	rrcf	___ftmul@f1,f,c
  9741  00130E  90D8               	bcf	status,0,c
  9742  001310  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9743  001312  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9744  001314  3227               	rrcf	___ftmul@f3_as_product,f,c
  9745  001316  2E2A               	decfsz	___ftmul@cntr,f,c
  9746  001318  D7ED               	goto	l5497
  9747  00131A  D000               	goto	l5505
  9748  00131C                     l5505:
  9749  00131C  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9750  001320  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9751  001324  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9752  001328  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9753  00132C  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9754  001330  EC6D  F00B         	call	___ftpack	;wreg free
  9755  001334  C011  F01D         	movff	?___ftpack,?___ftmul
  9756  001338  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9757  00133C  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9758  001340  D000               	goto	l1286
  9759  001342                     l1286:
  9760  001342  0012               	return		;funcret
  9761  001344                     __end_of___ftmul:
  9762                           	opt stack 0
  9763                           tblptru	equ	0xFF8
  9764                           tblptrh	equ	0xFF7
  9765                           tblptrl	equ	0xFF6
  9766                           tablat	equ	0xFF5
  9767                           prodh	equ	0xFF4
  9768                           prodl	equ	0xFF3
  9769                           intcon	equ	0xFF2
  9770                           intcon2	equ	0xFF1
  9771                           postinc0	equ	0xFEE
  9772                           wreg	equ	0xFE8
  9773                           postdec1	equ	0xFE5
  9774                           plusw1	equ	0xFE3
  9775                           fsr1l	equ	0xFE1
  9776                           indf2	equ	0xFDF
  9777                           postinc2	equ	0xFDE
  9778                           postdec2	equ	0xFDD
  9779                           plusw2	equ	0xFDB
  9780                           fsr2h	equ	0xFDA
  9781                           fsr2l	equ	0xFD9
  9782                           status	equ	0xFD8
  9783                           
  9784 ;; *************** function ___ftdiv *****************
  9785 ;; Defined at:
  9786 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;  f1              3   43[COMRAM] float 
  9789 ;;  f2              3   46[COMRAM] float 
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;  f3              3   53[COMRAM] float 
  9792 ;;  sign            1   57[COMRAM] unsigned char 
  9793 ;;  exp             1   56[COMRAM] unsigned char 
  9794 ;;  cntr            1   52[COMRAM] unsigned char 
  9795 ;; Return value:  Size  Location     Type
  9796 ;;                  3   43[COMRAM] float 
  9797 ;; Registers used:
  9798 ;;		wreg, status,2, status,0, cstack
  9799 ;; Tracked objects:
  9800 ;;		On entry : 0/0
  9801 ;;		On exit  : 0/0
  9802 ;;		Unchanged: 0/0
  9803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9804 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9805 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9806 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9808 ;;Total ram usage:       15 bytes
  9809 ;; Hardware stack levels used:    1
  9810 ;; Hardware stack levels required when called:    4
  9811 ;; This function calls:
  9812 ;;		___ftpack
  9813 ;; This function is called by:
  9814 ;;		_do_update_pwm
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           	psect	text52
  9819  00151C                     __ptext52:
  9820                           	opt stack 0
  9821  00151C                     ___ftdiv:
  9822                           	opt stack 23
  9823                           
  9824                           ;incstack = 0
  9825  00151C  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9826  001520  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9827  001522  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9828  001524  342D               	rlcf	___ftdiv@f1+1,w,c
  9829  001526  3632               	rlcf	??___ftdiv& (0+255),f,c
  9830  001528  E301               	bnc	u3921
  9831  00152A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9832  00152C                     u3921:
  9833  00152C  5032               	movf	??___ftdiv,w,c
  9834  00152E  6E39               	movwf	___ftdiv@exp,c
  9835  001530  5039               	movf	___ftdiv@exp,w,c
  9836  001532  A4D8               	btfss	status,2,c
  9837  001534  D002               	goto	l5421
  9838  001536  D00E               	goto	l5423
  9839  001538  D061               	goto	l1271
  9840  00153A                     l5421:
  9841  00153A  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9842  00153E  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9843  001540  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9844  001542  3430               	rlcf	___ftdiv@f2+1,w,c
  9845  001544  3632               	rlcf	??___ftdiv& (0+255),f,c
  9846  001546  E301               	bnc	u3941
  9847  001548  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9848  00154A                     u3941:
  9849  00154A  5032               	movf	??___ftdiv,w,c
  9850  00154C  6E3A               	movwf	___ftdiv@sign,c
  9851  00154E  503A               	movf	___ftdiv@sign,w,c
  9852  001550  A4D8               	btfss	status,2,c
  9853  001552  D007               	goto	l5427
  9854  001554                     l5423:
  9855  001554  0E00               	movlw	0
  9856  001556  6E2C               	movwf	?___ftdiv,c
  9857  001558  0E00               	movlw	0
  9858  00155A  6E2D               	movwf	?___ftdiv+1,c
  9859  00155C  0E00               	movlw	0
  9860  00155E  6E2E               	movwf	?___ftdiv+2,c
  9861  001560  D04D               	goto	l1271
  9862  001562                     l5427:
  9863  001562  0E00               	movlw	0
  9864  001564  6E36               	movwf	___ftdiv@f3,c
  9865  001566  0E00               	movlw	0
  9866  001568  6E37               	movwf	___ftdiv@f3+1,c
  9867  00156A  0E00               	movlw	0
  9868  00156C  6E38               	movwf	___ftdiv@f3+2,c
  9869  00156E  503A               	movf	___ftdiv@sign,w,c
  9870  001570  0F89               	addlw	137
  9871  001572  5E39               	subwf	___ftdiv@exp,f,c
  9872  001574  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9873  001578  5031               	movf	___ftdiv@f2+2,w,c
  9874  00157A  1A3A               	xorwf	___ftdiv@sign,f,c
  9875  00157C  0E80               	movlw	128
  9876  00157E  163A               	andwf	___ftdiv@sign,f,c
  9877  001580  8E2D               	bsf	___ftdiv@f1+1,7,c
  9878  001582  0EFF               	movlw	255
  9879  001584  162C               	andwf	___ftdiv@f1,f,c
  9880  001586  0EFF               	movlw	255
  9881  001588  162D               	andwf	___ftdiv@f1+1,f,c
  9882  00158A  0E00               	movlw	0
  9883  00158C  162E               	andwf	___ftdiv@f1+2,f,c
  9884  00158E  8E30               	bsf	___ftdiv@f2+1,7,c
  9885  001590  0EFF               	movlw	255
  9886  001592  162F               	andwf	___ftdiv@f2,f,c
  9887  001594  0EFF               	movlw	255
  9888  001596  1630               	andwf	___ftdiv@f2+1,f,c
  9889  001598  0E00               	movlw	0
  9890  00159A  1631               	andwf	___ftdiv@f2+2,f,c
  9891  00159C  0E18               	movlw	24
  9892  00159E  6E35               	movwf	___ftdiv@cntr,c
  9893  0015A0  D000               	goto	l5447
  9894  0015A2                     l5447:
  9895  0015A2  90D8               	bcf	status,0,c
  9896  0015A4  3636               	rlcf	___ftdiv@f3,f,c
  9897  0015A6  3637               	rlcf	___ftdiv@f3+1,f,c
  9898  0015A8  3638               	rlcf	___ftdiv@f3+2,f,c
  9899  0015AA  502F               	movf	___ftdiv@f2,w,c
  9900  0015AC  5C2C               	subwf	___ftdiv@f1,w,c
  9901  0015AE  5030               	movf	___ftdiv@f2+1,w,c
  9902  0015B0  582D               	subwfb	___ftdiv@f1+1,w,c
  9903  0015B2  5031               	movf	___ftdiv@f2+2,w,c
  9904  0015B4  582E               	subwfb	___ftdiv@f1+2,w,c
  9905  0015B6  A0D8               	btfss	status,0,c
  9906  0015B8  D007               	goto	l1274
  9907  0015BA  502F               	movf	___ftdiv@f2,w,c
  9908  0015BC  5E2C               	subwf	___ftdiv@f1,f,c
  9909  0015BE  5030               	movf	___ftdiv@f2+1,w,c
  9910  0015C0  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9911  0015C2  5031               	movf	___ftdiv@f2+2,w,c
  9912  0015C4  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9913  0015C6  8036               	bsf	___ftdiv@f3,0,c
  9914  0015C8                     l1274:
  9915  0015C8  90D8               	bcf	status,0,c
  9916  0015CA  362C               	rlcf	___ftdiv@f1,f,c
  9917  0015CC  362D               	rlcf	___ftdiv@f1+1,f,c
  9918  0015CE  362E               	rlcf	___ftdiv@f1+2,f,c
  9919  0015D0  2E35               	decfsz	___ftdiv@cntr,f,c
  9920  0015D2  D7E7               	goto	l5447
  9921  0015D4  D000               	goto	l5457
  9922  0015D6                     l5457:
  9923  0015D6  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  9924  0015DA  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9925  0015DE  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9926  0015E2  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  9927  0015E6  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  9928  0015EA  EC6D  F00B         	call	___ftpack	;wreg free
  9929  0015EE  C011  F02C         	movff	?___ftpack,?___ftdiv
  9930  0015F2  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9931  0015F6  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9932  0015FA  D000               	goto	l1271
  9933  0015FC                     l1271:
  9934  0015FC  0012               	return		;funcret
  9935  0015FE                     __end_of___ftdiv:
  9936                           	opt stack 0
  9937                           tblptru	equ	0xFF8
  9938                           tblptrh	equ	0xFF7
  9939                           tblptrl	equ	0xFF6
  9940                           tablat	equ	0xFF5
  9941                           prodh	equ	0xFF4
  9942                           prodl	equ	0xFF3
  9943                           intcon	equ	0xFF2
  9944                           intcon2	equ	0xFF1
  9945                           postinc0	equ	0xFEE
  9946                           wreg	equ	0xFE8
  9947                           postdec1	equ	0xFE5
  9948                           plusw1	equ	0xFE3
  9949                           fsr1l	equ	0xFE1
  9950                           indf2	equ	0xFDF
  9951                           postinc2	equ	0xFDE
  9952                           postdec2	equ	0xFDD
  9953                           plusw2	equ	0xFDB
  9954                           fsr2h	equ	0xFDA
  9955                           fsr2l	equ	0xFD9
  9956                           status	equ	0xFD8
  9957                           
  9958 ;; *************** function ___ftpack *****************
  9959 ;; Defined at:
  9960 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;  arg             3   16[COMRAM] unsigned um
  9963 ;;  exp             1   19[COMRAM] unsigned char 
  9964 ;;  sign            1   20[COMRAM] unsigned char 
  9965 ;; Auto vars:     Size  Location     Type
  9966 ;;		None
  9967 ;; Return value:  Size  Location     Type
  9968 ;;                  3   16[COMRAM] float 
  9969 ;; Registers used:
  9970 ;;		wreg, status,2, status,0
  9971 ;; Tracked objects:
  9972 ;;		On entry : 0/0
  9973 ;;		On exit  : 0/0
  9974 ;;		Unchanged: 0/0
  9975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9976 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9978 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;Total ram usage:        8 bytes
  9981 ;; Hardware stack levels used:    1
  9982 ;; Hardware stack levels required when called:    3
  9983 ;; This function calls:
  9984 ;;		Nothing
  9985 ;; This function is called by:
  9986 ;;		___ftdiv
  9987 ;;		___ftmul
  9988 ;;		___lbtoft
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text53
  9993  0016DA                     __ptext53:
  9994                           	opt stack 0
  9995  0016DA                     ___ftpack:
  9996                           	opt stack 23
  9997                           
  9998                           ;incstack = 0
  9999  0016DA  5014               	movf	___ftpack@exp,w,c
 10000  0016DC  B4D8               	btfsc	status,2,c
 10001  0016DE  D005               	goto	l5295
 10002  0016E0  5011               	movf	___ftpack@arg,w,c
 10003  0016E2  1012               	iorwf	___ftpack@arg+1,w,c
 10004  0016E4  1013               	iorwf	___ftpack@arg+2,w,c
 10005  0016E6  A4D8               	btfss	status,2,c
 10006  0016E8  D00E               	goto	l5301
 10007  0016EA                     l5295:
 10008  0016EA  0E00               	movlw	0
 10009  0016EC  6E11               	movwf	?___ftpack,c
 10010  0016EE  0E00               	movlw	0
 10011  0016F0  6E12               	movwf	?___ftpack+1,c
 10012  0016F2  0E00               	movlw	0
 10013  0016F4  6E13               	movwf	?___ftpack+2,c
 10014  0016F6  D053               	goto	l1199
 10015  0016F8  D006               	goto	l5301
 10016  0016FA                     l5299:
 10017  0016FA  2A14               	incf	___ftpack@exp,f,c
 10018  0016FC  90D8               	bcf	status,0,c
 10019  0016FE  3213               	rrcf	___ftpack@arg+2,f,c
 10020  001700  3212               	rrcf	___ftpack@arg+1,f,c
 10021  001702  3211               	rrcf	___ftpack@arg,f,c
 10022  001704  D000               	goto	l5301
 10023  001706                     l5301:
 10024  001706  0E00               	movlw	0
 10025  001708  1411               	andwf	___ftpack@arg,w,c
 10026  00170A  6E16               	movwf	??___ftpack& (0+255),c
 10027  00170C  0E00               	movlw	0
 10028  00170E  1412               	andwf	___ftpack@arg+1,w,c
 10029  001710  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10030  001712  0EFE               	movlw	254
 10031  001714  1413               	andwf	___ftpack@arg+2,w,c
 10032  001716  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10033  001718  5016               	movf	??___ftpack,w,c
 10034  00171A  1017               	iorwf	??___ftpack+1,w,c
 10035  00171C  1018               	iorwf	??___ftpack+2,w,c
 10036  00171E  B4D8               	btfsc	status,2,c
 10037  001720  D00E               	goto	l5307
 10038  001722  D7EB               	goto	l5299
 10039  001724  D00C               	goto	l5307
 10040  001726                     l5303:
 10041  001726  2A14               	incf	___ftpack@exp,f,c
 10042  001728  0E01               	movlw	1
 10043  00172A  2611               	addwf	___ftpack@arg,f,c
 10044  00172C  0E00               	movlw	0
 10045  00172E  2212               	addwfc	___ftpack@arg+1,f,c
 10046  001730  0E00               	movlw	0
 10047  001732  2213               	addwfc	___ftpack@arg+2,f,c
 10048  001734  90D8               	bcf	status,0,c
 10049  001736  3213               	rrcf	___ftpack@arg+2,f,c
 10050  001738  3212               	rrcf	___ftpack@arg+1,f,c
 10051  00173A  3211               	rrcf	___ftpack@arg,f,c
 10052  00173C  D000               	goto	l5307
 10053  00173E                     l5307:
 10054  00173E  0E00               	movlw	0
 10055  001740  1411               	andwf	___ftpack@arg,w,c
 10056  001742  6E16               	movwf	??___ftpack& (0+255),c
 10057  001744  0E00               	movlw	0
 10058  001746  1412               	andwf	___ftpack@arg+1,w,c
 10059  001748  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10060  00174A  0EFF               	movlw	255
 10061  00174C  1413               	andwf	___ftpack@arg+2,w,c
 10062  00174E  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10063  001750  5016               	movf	??___ftpack,w,c
 10064  001752  1017               	iorwf	??___ftpack+1,w,c
 10065  001754  1018               	iorwf	??___ftpack+2,w,c
 10066  001756  B4D8               	btfsc	status,2,c
 10067  001758  D008               	goto	l5311
 10068  00175A  D7E5               	goto	l5303
 10069  00175C  D006               	goto	l5311
 10070  00175E                     l5309:
 10071  00175E  0614               	decf	___ftpack@exp,f,c
 10072  001760  90D8               	bcf	status,0,c
 10073  001762  3611               	rlcf	___ftpack@arg,f,c
 10074  001764  3612               	rlcf	___ftpack@arg+1,f,c
 10075  001766  3613               	rlcf	___ftpack@arg+2,f,c
 10076  001768  D000               	goto	l5311
 10077  00176A                     l5311:
 10078  00176A  BE12               	btfsc	___ftpack@arg+1,7,c
 10079  00176C  D004               	goto	l1210
 10080  00176E  0E02               	movlw	2
 10081  001770  6014               	cpfslt	___ftpack@exp,c
 10082  001772  D7F5               	goto	l5309
 10083  001774  D000               	goto	l1210
 10084  001776                     l1210:
 10085  001776  B014               	btfsc	___ftpack@exp,0,c
 10086  001778  D002               	goto	l5317
 10087  00177A  9E12               	bcf	___ftpack@arg+1,7,c
 10088  00177C  D000               	goto	l5317
 10089  00177E                     l5317:
 10090  00177E  90D8               	bcf	status,0,c
 10091  001780  3214               	rrcf	___ftpack@exp,f,c
 10092  001782  5014               	movf	___ftpack@exp,w,c
 10093  001784  1213               	iorwf	___ftpack@arg+2,f,c
 10094  001786  5015               	movf	___ftpack@sign,w,c
 10095  001788  B4D8               	btfsc	status,2,c
 10096  00178A  D002               	goto	l5323
 10097  00178C  8E13               	bsf	___ftpack@arg+2,7,c
 10098  00178E  D000               	goto	l5323
 10099  001790                     l5323:
 10100  001790  C011  F011         	movff	___ftpack@arg,?___ftpack
 10101  001794  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10102  001798  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10103  00179C  D000               	goto	l1199
 10104  00179E                     l1199:
 10105  00179E  0012               	return		;funcret
 10106  0017A0                     __end_of___ftpack:
 10107                           	opt stack 0
 10108                           tblptru	equ	0xFF8
 10109                           tblptrh	equ	0xFF7
 10110                           tblptrl	equ	0xFF6
 10111                           tablat	equ	0xFF5
 10112                           prodh	equ	0xFF4
 10113                           prodl	equ	0xFF3
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           postdec1	equ	0xFE5
 10119                           plusw1	equ	0xFE3
 10120                           fsr1l	equ	0xFE1
 10121                           indf2	equ	0xFDF
 10122                           postinc2	equ	0xFDE
 10123                           postdec2	equ	0xFDD
 10124                           plusw2	equ	0xFDB
 10125                           fsr2h	equ	0xFDA
 10126                           fsr2l	equ	0xFD9
 10127                           status	equ	0xFD8
 10128                           
 10129 ;; *************** function _Wait_Half_Second *****************
 10130 ;; Defined at:
 10131 ;;		line 37 in file "Utils.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;		None
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;		None               void
 10138 ;; Registers used:
 10139 ;;		wreg, status,2
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;Total ram usage:        0 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    3
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_Do_Beep
 10156 ;;		_main
 10157 ;;		_Wait_One_Sec
 10158 ;; This function uses a non-reentrant model
 10159 ;;
 10160                           
 10161                           	psect	text54
 10162  002280                     __ptext54:
 10163                           	opt stack 0
 10164  002280                     _Wait_Half_Second:
 10165                           	opt stack 27
 10166                           
 10167                           ;Utils.c: 39: T0CON = 0x03;
 10168                           
 10169                           ;incstack = 0
 10170  002280  0E03               	movlw	3
 10171  002282  6ED5               	movwf	4053,c	;volatile
 10172                           
 10173                           ;Utils.c: 40: TMR0L = 0xDB;
 10174  002284  0EDB               	movlw	219
 10175  002286  6ED6               	movwf	4054,c	;volatile
 10176                           
 10177                           ;Utils.c: 41: TMR0H = 0x0B;
 10178  002288  0E0B               	movlw	11
 10179  00228A  6ED7               	movwf	4055,c	;volatile
 10180                           
 10181                           ;Utils.c: 42: INTCONbits.TMR0IF = 0;
 10182  00228C  94F2               	bcf	intcon,2,c	;volatile
 10183                           
 10184                           ;Utils.c: 43: T0CONbits.TMR0ON = 1;
 10185  00228E  8ED5               	bsf	4053,7,c	;volatile
 10186                           
 10187                           ;Utils.c: 44: while (INTCONbits.TMR0IF == 0);
 10188  002290  D000               	goto	l577
 10189  002292                     l577:
 10190  002292  A4F2               	btfss	intcon,2,c	;volatile
 10191  002294  D7FE               	goto	l577
 10192                           
 10193                           ;Utils.c: 45: T0CONbits.TMR0ON = 0;
 10194  002296  9ED5               	bcf	4053,7,c	;volatile
 10195  002298  0012               	return		;funcret
 10196  00229A                     __end_of_Wait_Half_Second:
 10197                           	opt stack 0
 10198                           tblptru	equ	0xFF8
 10199                           tblptrh	equ	0xFF7
 10200                           tblptrl	equ	0xFF6
 10201                           tablat	equ	0xFF5
 10202                           prodh	equ	0xFF4
 10203                           prodl	equ	0xFF3
 10204                           intcon	equ	0xFF2
 10205                           intcon2	equ	0xFF1
 10206                           postinc0	equ	0xFEE
 10207                           wreg	equ	0xFE8
 10208                           postdec1	equ	0xFE5
 10209                           plusw1	equ	0xFE3
 10210                           fsr1l	equ	0xFE1
 10211                           indf2	equ	0xFDF
 10212                           postinc2	equ	0xFDE
 10213                           postdec2	equ	0xFDD
 10214                           plusw2	equ	0xFDB
 10215                           fsr2h	equ	0xFDA
 10216                           fsr2l	equ	0xFD9
 10217                           status	equ	0xFD8
 10218                           
 10219 ;; *************** function _Deactivate_Buzzer *****************
 10220 ;; Defined at:
 10221 ;;		line 31 in file "Utils.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;		None
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;		None
 10226 ;; Return value:  Size  Location     Type
 10227 ;;		None               void
 10228 ;; Registers used:
 10229 ;;		wreg, status,2
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;Total ram usage:        0 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    3
 10242 ;; This function calls:
 10243 ;;		Nothing
 10244 ;; This function is called by:
 10245 ;;		_Do_Beep
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           	psect	text55
 10250  0023D6                     __ptext55:
 10251                           	opt stack 0
 10252  0023D6                     _Deactivate_Buzzer:
 10253                           	opt stack 25
 10254                           
 10255                           ;Utils.c: 33: CCP2CON = 0x00;
 10256                           
 10257                           ;incstack = 0
 10258  0023D6  0E00               	movlw	0
 10259  0023D8  6EBA               	movwf	4026,c	;volatile
 10260                           
 10261                           ;Utils.c: 34: PORTBbits.RB3 = 0;
 10262  0023DA  9681               	bcf	3969,3,c	;volatile
 10263  0023DC  0012               	return		;funcret
 10264  0023DE                     __end_of_Deactivate_Buzzer:
 10265                           	opt stack 0
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           intcon	equ	0xFF2
 10273                           intcon2	equ	0xFF1
 10274                           postinc0	equ	0xFEE
 10275                           wreg	equ	0xFE8
 10276                           postdec1	equ	0xFE5
 10277                           plusw1	equ	0xFE3
 10278                           fsr1l	equ	0xFE1
 10279                           indf2	equ	0xFDF
 10280                           postinc2	equ	0xFDE
 10281                           postdec2	equ	0xFDD
 10282                           plusw2	equ	0xFDB
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function _Activate_Buzzer *****************
 10288 ;; Defined at:
 10289 ;;		line 23 in file "Utils.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;		None
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;		None
 10294 ;; Return value:  Size  Location     Type
 10295 ;;		None               void
 10296 ;; Registers used:
 10297 ;;		wreg, status,2
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;Total ram usage:        0 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    3
 10310 ;; This function calls:
 10311 ;;		Nothing
 10312 ;; This function is called by:
 10313 ;;		_Do_Beep
 10314 ;; This function uses a non-reentrant model
 10315 ;;
 10316                           
 10317                           	psect	text56
 10318  00232A                     __ptext56:
 10319                           	opt stack 0
 10320  00232A                     _Activate_Buzzer:
 10321                           	opt stack 25
 10322                           
 10323                           ;Utils.c: 25: PR2 = 0b11111001;
 10324                           
 10325                           ;incstack = 0
 10326  00232A  0EF9               	movlw	249
 10327  00232C  6ECB               	movwf	4043,c	;volatile
 10328                           
 10329                           ;Utils.c: 26: T2CON = 0b00000101;
 10330  00232E  0E05               	movlw	5
 10331  002330  6ECA               	movwf	4042,c	;volatile
 10332                           
 10333                           ;Utils.c: 27: CCPR2L = 0b01001010;
 10334  002332  0E4A               	movlw	74
 10335  002334  6EBB               	movwf	4027,c	;volatile
 10336                           
 10337                           ;Utils.c: 28: CCP2CON = 0b00111100;
 10338  002336  0E3C               	movlw	60
 10339  002338  6EBA               	movwf	4026,c	;volatile
 10340  00233A  0012               	return		;funcret
 10341  00233C                     __end_of_Activate_Buzzer:
 10342                           	opt stack 0
 10343                           tblptru	equ	0xFF8
 10344                           tblptrh	equ	0xFF7
 10345                           tblptrl	equ	0xFF6
 10346                           tablat	equ	0xFF5
 10347                           prodh	equ	0xFF4
 10348                           prodl	equ	0xFF3
 10349                           intcon	equ	0xFF2
 10350                           intcon2	equ	0xFF1
 10351                           postinc0	equ	0xFEE
 10352                           wreg	equ	0xFE8
 10353                           postdec1	equ	0xFE5
 10354                           plusw1	equ	0xFE3
 10355                           fsr1l	equ	0xFE1
 10356                           indf2	equ	0xFDF
 10357                           postinc2	equ	0xFDE
 10358                           postdec2	equ	0xFDD
 10359                           plusw2	equ	0xFDB
 10360                           fsr2h	equ	0xFDA
 10361                           fsr2l	equ	0xFD9
 10362                           status	equ	0xFD8
 10363                           
 10364 ;; *************** function _DS3231_Setup_Time *****************
 10365 ;; Defined at:
 10366 ;;		line 66 in file "I2C_Support.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;		None
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;		None               void
 10373 ;; Registers used:
 10374 ;;		wreg, status,2, status,0, cstack
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;Total ram usage:        0 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; Hardware stack levels required when called:    5
 10387 ;; This function calls:
 10388 ;;		_I2C_Start
 10389 ;;		_I2C_Stop
 10390 ;;		_I2C_Write
 10391 ;; This function is called by:
 10392 ;;		_main
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text57
 10397  001C22                     __ptext57:
 10398                           	opt stack 0
 10399  001C22                     _DS3231_Setup_Time:
 10400                           	opt stack 25
 10401                           
 10402                           ;I2C_Support.c: 71: second = 0x00;
 10403                           
 10404                           ;incstack = 0
 10405  001C22  0E00               	movlw	0
 10406  001C24  6E62               	movwf	_second,c
 10407                           
 10408                           ;I2C_Support.c: 72: minute = 0x00;
 10409  001C26  0E00               	movlw	0
 10410  001C28  6E5F               	movwf	_minute,c
 10411                           
 10412                           ;I2C_Support.c: 73: hour = 0x00;
 10413  001C2A  0E00               	movlw	0
 10414  001C2C  6E5E               	movwf	_hour,c
 10415                           
 10416                           ;I2C_Support.c: 74: dow = 0x04;
 10417  001C2E  0E04               	movlw	4
 10418  001C30  6E5B               	movwf	_dow,c
 10419                           
 10420                           ;I2C_Support.c: 75: day = 0x05;
 10421  001C32  0E05               	movlw	5
 10422  001C34  6E5A               	movwf	_day,c
 10423                           
 10424                           ;I2C_Support.c: 76: month = 0x05;
 10425  001C36  0E05               	movlw	5
 10426  001C38  6E60               	movwf	_month,c
 10427                           
 10428                           ;I2C_Support.c: 77: year = 0x22;
 10429  001C3A  0E22               	movlw	34
 10430  001C3C  6E6C               	movwf	_year,c
 10431                           
 10432                           ;I2C_Support.c: 79: I2C_Start();
 10433  001C3E  ECA7  F011         	call	_I2C_Start	;wreg free
 10434                           
 10435                           ;I2C_Support.c: 80: I2C_Write((0x68 << 1) | 0);
 10436  001C42  0ED0               	movlw	208
 10437  001C44  ECFC  F00F         	call	_I2C_Write
 10438                           
 10439                           ;I2C_Support.c: 81: I2C_Write(0x00);
 10440  001C48  0E00               	movlw	0
 10441  001C4A  ECFC  F00F         	call	_I2C_Write
 10442                           
 10443                           ;I2C_Support.c: 82: I2C_Write(second);
 10444  001C4E  5062               	movf	_second,w,c
 10445  001C50  ECFC  F00F         	call	_I2C_Write
 10446                           
 10447                           ;I2C_Support.c: 83: I2C_Write(minute);
 10448  001C54  505F               	movf	_minute,w,c
 10449  001C56  ECFC  F00F         	call	_I2C_Write
 10450                           
 10451                           ;I2C_Support.c: 84: I2C_Write(hour);
 10452  001C5A  505E               	movf	_hour,w,c
 10453  001C5C  ECFC  F00F         	call	_I2C_Write
 10454                           
 10455                           ;I2C_Support.c: 85: I2C_Write(dow);
 10456  001C60  505B               	movf	_dow,w,c
 10457  001C62  ECFC  F00F         	call	_I2C_Write
 10458                           
 10459                           ;I2C_Support.c: 86: I2C_Write(day);
 10460  001C66  505A               	movf	_day,w,c
 10461  001C68  ECFC  F00F         	call	_I2C_Write
 10462                           
 10463                           ;I2C_Support.c: 87: I2C_Write(month);
 10464  001C6C  5060               	movf	_month,w,c
 10465  001C6E  ECFC  F00F         	call	_I2C_Write
 10466                           
 10467                           ;I2C_Support.c: 88: I2C_Write(year);
 10468  001C72  506C               	movf	_year,w,c
 10469  001C74  ECFC  F00F         	call	_I2C_Write
 10470                           
 10471                           ;I2C_Support.c: 89: I2C_Stop();
 10472  001C78  EC9E  F011         	call	_I2C_Stop	;wreg free
 10473  001C7C  0012               	return		;funcret
 10474  001C7E                     __end_of_DS3231_Setup_Time:
 10475                           	opt stack 0
 10476                           tblptru	equ	0xFF8
 10477                           tblptrh	equ	0xFF7
 10478                           tblptrl	equ	0xFF6
 10479                           tablat	equ	0xFF5
 10480                           prodh	equ	0xFF4
 10481                           prodl	equ	0xFF3
 10482                           intcon	equ	0xFF2
 10483                           intcon2	equ	0xFF1
 10484                           postinc0	equ	0xFEE
 10485                           wreg	equ	0xFE8
 10486                           postdec1	equ	0xFE5
 10487                           plusw1	equ	0xFE3
 10488                           fsr1l	equ	0xFE1
 10489                           indf2	equ	0xFDF
 10490                           postinc2	equ	0xFDE
 10491                           postdec2	equ	0xFDD
 10492                           plusw2	equ	0xFDB
 10493                           fsr2h	equ	0xFDA
 10494                           fsr2l	equ	0xFD9
 10495                           status	equ	0xFD8
 10496                           
 10497 ;; *************** function _DS3231_Read_Time *****************
 10498 ;; Defined at:
 10499 ;;		line 45 in file "I2C_Support.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;  Data_Ret        1    0        unsigned char 
 10504 ;; Return value:  Size  Location     Type
 10505 ;;		None               void
 10506 ;; Registers used:
 10507 ;;		wreg, status,2, status,0, cstack
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10517 ;;Total ram usage:        0 bytes
 10518 ;; Hardware stack levels used:    1
 10519 ;; Hardware stack levels required when called:    6
 10520 ;; This function calls:
 10521 ;;		_I2C_ReStart
 10522 ;;		_I2C_Read
 10523 ;;		_I2C_Start
 10524 ;;		_I2C_Stop
 10525 ;;		_I2C_Write
 10526 ;; This function is called by:
 10527 ;;		_main
 10528 ;; This function uses a non-reentrant model
 10529 ;;
 10530                           
 10531                           	psect	text58
 10532  001C7E                     __ptext58:
 10533                           	opt stack 0
 10534  001C7E                     _DS3231_Read_Time:
 10535                           	opt stack 24
 10536                           
 10537                           ;I2C_Support.c: 50: char Data_Ret;
 10538                           ;I2C_Support.c: 51: I2C_Start();
 10539                           
 10540                           ;incstack = 0
 10541  001C7E  ECA7  F011         	call	_I2C_Start	;wreg free
 10542                           
 10543                           ;I2C_Support.c: 52: I2C_Write((0x68 << 1) | 0);
 10544  001C82  0ED0               	movlw	208
 10545  001C84  ECFC  F00F         	call	_I2C_Write
 10546                           
 10547                           ;I2C_Support.c: 53: I2C_Write(0x00);
 10548  001C88  0E00               	movlw	0
 10549  001C8A  ECFC  F00F         	call	_I2C_Write
 10550                           
 10551                           ;I2C_Support.c: 54: I2C_ReStart();
 10552  001C8E  EC59  F011         	call	_I2C_ReStart	;wreg free
 10553                           
 10554                           ;I2C_Support.c: 55: I2C_Write((0x68 << 1) | 1);
 10555  001C92  0ED1               	movlw	209
 10556  001C94  ECFC  F00F         	call	_I2C_Write
 10557                           
 10558                           ;I2C_Support.c: 56: second = I2C_Read(1);
 10559  001C98  0E01               	movlw	1
 10560  001C9A  EC7B  F00F         	call	_I2C_Read
 10561  001C9E  6E62               	movwf	_second,c
 10562                           
 10563                           ;I2C_Support.c: 57: minute = I2C_Read(1);
 10564  001CA0  0E01               	movlw	1
 10565  001CA2  EC7B  F00F         	call	_I2C_Read
 10566  001CA6  6E5F               	movwf	_minute,c
 10567                           
 10568                           ;I2C_Support.c: 58: hour = I2C_Read(1);
 10569  001CA8  0E01               	movlw	1
 10570  001CAA  EC7B  F00F         	call	_I2C_Read
 10571  001CAE  6E5E               	movwf	_hour,c
 10572                           
 10573                           ;I2C_Support.c: 59: dow = I2C_Read(1);
 10574  001CB0  0E01               	movlw	1
 10575  001CB2  EC7B  F00F         	call	_I2C_Read
 10576  001CB6  6E5B               	movwf	_dow,c
 10577                           
 10578                           ;I2C_Support.c: 60: day = I2C_Read(1);
 10579  001CB8  0E01               	movlw	1
 10580  001CBA  EC7B  F00F         	call	_I2C_Read
 10581  001CBE  6E5A               	movwf	_day,c
 10582                           
 10583                           ;I2C_Support.c: 61: month = I2C_Read(1);
 10584  001CC0  0E01               	movlw	1
 10585  001CC2  EC7B  F00F         	call	_I2C_Read
 10586  001CC6  6E60               	movwf	_month,c
 10587                           
 10588                           ;I2C_Support.c: 62: year = I2C_Read(0);
 10589  001CC8  0E00               	movlw	0
 10590  001CCA  EC7B  F00F         	call	_I2C_Read
 10591  001CCE  6E6C               	movwf	_year,c
 10592                           
 10593                           ;I2C_Support.c: 63: I2C_Stop();
 10594  001CD0  EC9E  F011         	call	_I2C_Stop	;wreg free
 10595  001CD4  0012               	return		;funcret
 10596  001CD6                     __end_of_DS3231_Read_Time:
 10597                           	opt stack 0
 10598                           tblptru	equ	0xFF8
 10599                           tblptrh	equ	0xFF7
 10600                           tblptrl	equ	0xFF6
 10601                           tablat	equ	0xFF5
 10602                           prodh	equ	0xFF4
 10603                           prodl	equ	0xFF3
 10604                           intcon	equ	0xFF2
 10605                           intcon2	equ	0xFF1
 10606                           postinc0	equ	0xFEE
 10607                           wreg	equ	0xFE8
 10608                           postdec1	equ	0xFE5
 10609                           plusw1	equ	0xFE3
 10610                           fsr1l	equ	0xFE1
 10611                           indf2	equ	0xFDF
 10612                           postinc2	equ	0xFDE
 10613                           postdec2	equ	0xFDD
 10614                           plusw2	equ	0xFDB
 10615                           fsr2h	equ	0xFDA
 10616                           fsr2l	equ	0xFD9
 10617                           status	equ	0xFD8
 10618                           
 10619 ;; *************** function _DS1621_Read_Temp *****************
 10620 ;; Defined at:
 10621 ;;		line 29 in file "I2C_Support.c"
 10622 ;; Parameters:    Size  Location     Type
 10623 ;;		None
 10624 ;; Auto vars:     Size  Location     Type
 10625 ;;  Data_Ret        1   21[COMRAM] unsigned char 
 10626 ;; Return value:  Size  Location     Type
 10627 ;;                  2   19[COMRAM] int 
 10628 ;; Registers used:
 10629 ;;		wreg, status,2, status,0, cstack
 10630 ;; Tracked objects:
 10631 ;;		On entry : 0/0
 10632 ;;		On exit  : 0/0
 10633 ;;		Unchanged: 0/0
 10634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10635 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;Total ram usage:        3 bytes
 10640 ;; Hardware stack levels used:    1
 10641 ;; Hardware stack levels required when called:    6
 10642 ;; This function calls:
 10643 ;;		_I2C_ReStart
 10644 ;;		_I2C_Read
 10645 ;;		_I2C_Start
 10646 ;;		_I2C_Stop
 10647 ;;		_I2C_Write
 10648 ;; This function is called by:
 10649 ;;		_main
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653                           	psect	text59
 10654  0020CC                     __ptext59:
 10655                           	opt stack 0
 10656  0020CC                     _DS1621_Read_Temp:
 10657                           	opt stack 24
 10658                           
 10659                           ;I2C_Support.c: 34: char Data_Ret;
 10660                           ;I2C_Support.c: 35: I2C_Start();
 10661                           
 10662                           ;incstack = 0
 10663  0020CC  ECA7  F011         	call	_I2C_Start	;wreg free
 10664                           
 10665                           ;I2C_Support.c: 36: I2C_Write((0x48 << 1) | 0);
 10666  0020D0  0E90               	movlw	144
 10667  0020D2  ECFC  F00F         	call	_I2C_Write
 10668                           
 10669                           ;I2C_Support.c: 37: I2C_Write(0xAA);
 10670  0020D6  0EAA               	movlw	170
 10671  0020D8  ECFC  F00F         	call	_I2C_Write
 10672                           
 10673                           ;I2C_Support.c: 38: I2C_ReStart();
 10674  0020DC  EC59  F011         	call	_I2C_ReStart	;wreg free
 10675                           
 10676                           ;I2C_Support.c: 39: I2C_Write((0x48 << 1) | 1);
 10677  0020E0  0E91               	movlw	145
 10678  0020E2  ECFC  F00F         	call	_I2C_Write
 10679                           
 10680                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 10681  0020E6  0E00               	movlw	0
 10682  0020E8  EC7B  F00F         	call	_I2C_Read
 10683  0020EC  6E16               	movwf	DS1621_Read_Temp@Data_Ret,c
 10684                           
 10685                           ;I2C_Support.c: 41: I2C_Stop();
 10686  0020EE  EC9E  F011         	call	_I2C_Stop	;wreg free
 10687                           
 10688                           ;I2C_Support.c: 42: return Data_Ret;
 10689  0020F2  C016  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10690  0020F6  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10691  0020F8  D000               	goto	l187
 10692  0020FA                     l187:
 10693  0020FA  0012               	return		;funcret
 10694  0020FC                     __end_of_DS1621_Read_Temp:
 10695                           	opt stack 0
 10696                           tblptru	equ	0xFF8
 10697                           tblptrh	equ	0xFF7
 10698                           tblptrl	equ	0xFF6
 10699                           tablat	equ	0xFF5
 10700                           prodh	equ	0xFF4
 10701                           prodl	equ	0xFF3
 10702                           intcon	equ	0xFF2
 10703                           intcon2	equ	0xFF1
 10704                           postinc0	equ	0xFEE
 10705                           wreg	equ	0xFE8
 10706                           postdec1	equ	0xFE5
 10707                           plusw1	equ	0xFE3
 10708                           fsr1l	equ	0xFE1
 10709                           indf2	equ	0xFDF
 10710                           postinc2	equ	0xFDE
 10711                           postdec2	equ	0xFDD
 10712                           plusw2	equ	0xFDB
 10713                           fsr2h	equ	0xFDA
 10714                           fsr2l	equ	0xFD9
 10715                           status	equ	0xFD8
 10716                           
 10717 ;; *************** function _I2C_Write *****************
 10718 ;; Defined at:
 10719 ;;		line 42 in file "I2C_Soft.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  outByte         1    wreg     unsigned char 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;  outByte         1   16[COMRAM] unsigned char 
 10724 ;;  n               1   17[COMRAM] unsigned char 
 10725 ;; Return value:  Size  Location     Type
 10726 ;;		None               void
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10737 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10738 ;;Total ram usage:        2 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    4
 10741 ;; This function calls:
 10742 ;;		_i2cHighScl
 10743 ;;		_i2cHighSda
 10744 ;;		_i2cLowScl
 10745 ;;		_i2cLowSda
 10746 ;; This function is called by:
 10747 ;;		_I2C_Write_Cmd_Only
 10748 ;;		_I2C_Write_Cmd_Write_Data
 10749 ;;		_DS1621_Read_Temp
 10750 ;;		_DS3231_Read_Time
 10751 ;;		_DS3231_Setup_Time
 10752 ;;		_I2C_Write_Address_Read_One_Byte
 10753 ;;		_I2C_Write_Address_Write_One_Byte
 10754 ;;		_I2C_Write_Cmd_Read_One_Byte
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           	psect	text60
 10759  001FF8                     __ptext60:
 10760                           	opt stack 0
 10761  001FF8                     _I2C_Write:
 10762                           	opt stack 23
 10763                           
 10764                           ;incstack = 0
 10765                           ;I2C_Write@outByte stored from wreg
 10766  001FF8  6E11               	movwf	I2C_Write@outByte,c
 10767                           
 10768                           ;I2C_Soft.c: 44: unsigned char n;
 10769                           ;I2C_Soft.c: 45: for(n=0; n<8; n++)
 10770  001FFA  0E00               	movlw	0
 10771  001FFC  6E12               	movwf	I2C_Write@n,c
 10772  001FFE                     l5329:
 10773  001FFE  0E07               	movlw	7
 10774  002000  6412               	cpfsgt	I2C_Write@n,c
 10775  002002  D001               	goto	l107
 10776  002004  D011               	goto	l5347
 10777  002006                     l107:
 10778                           
 10779                           ;I2C_Soft.c: 46: {
 10780                           ;I2C_Soft.c: 47: if(outByte&0x80) i2cHighSda();
 10781  002006  AE11               	btfss	I2C_Write@outByte,7,c
 10782  002008  D003               	goto	l5335
 10783  00200A  ECF3  F011         	call	_i2cHighSda	;wreg free
 10784  00200E  D003               	goto	l5337
 10785  002010                     l5335:
 10786                           
 10787                           ;I2C_Soft.c: 48: else i2cLowSda();
 10788  002010  ECE6  F011         	call	_i2cLowSda	;wreg free
 10789  002014  D000               	goto	l5337
 10790  002016                     l5337:
 10791                           
 10792                           ;I2C_Soft.c: 49: i2cHighScl();
 10793  002016  ECD0  F011         	call	_i2cHighScl	;wreg free
 10794                           
 10795                           ;I2C_Soft.c: 50: i2cLowScl();
 10796  00201A  ECEF  F011         	call	_i2cLowScl	;wreg free
 10797                           
 10798                           ;I2C_Soft.c: 51: outByte = outByte << 1;
 10799  00201E  5011               	movf	I2C_Write@outByte,w,c
 10800  002020  2411               	addwf	I2C_Write@outByte,w,c
 10801  002022  6E11               	movwf	I2C_Write@outByte,c
 10802  002024  2A12               	incf	I2C_Write@n,f,c
 10803  002026  D7EB               	goto	l5329
 10804  002028                     l5347:
 10805                           
 10806                           ;I2C_Soft.c: 52: }
 10807                           ;I2C_Soft.c: 53: i2cHighSda();
 10808  002028  ECF3  F011         	call	_i2cHighSda	;wreg free
 10809                           
 10810                           ;I2C_Soft.c: 54: i2cHighScl();
 10811  00202C  ECD0  F011         	call	_i2cHighScl	;wreg free
 10812                           
 10813                           ;I2C_Soft.c: 55: i2cLowScl();
 10814  002030  ECEF  F011         	call	_i2cLowScl	;wreg free
 10815  002034  0012               	return		;funcret
 10816  002036                     __end_of_I2C_Write:
 10817                           	opt stack 0
 10818                           tblptru	equ	0xFF8
 10819                           tblptrh	equ	0xFF7
 10820                           tblptrl	equ	0xFF6
 10821                           tablat	equ	0xFF5
 10822                           prodh	equ	0xFF4
 10823                           prodl	equ	0xFF3
 10824                           intcon	equ	0xFF2
 10825                           intcon2	equ	0xFF1
 10826                           postinc0	equ	0xFEE
 10827                           wreg	equ	0xFE8
 10828                           postdec1	equ	0xFE5
 10829                           plusw1	equ	0xFE3
 10830                           fsr1l	equ	0xFE1
 10831                           indf2	equ	0xFDF
 10832                           postinc2	equ	0xFDE
 10833                           postdec2	equ	0xFDD
 10834                           plusw2	equ	0xFDB
 10835                           fsr2h	equ	0xFDA
 10836                           fsr2l	equ	0xFD9
 10837                           status	equ	0xFD8
 10838                           
 10839 ;; *************** function _I2C_Stop *****************
 10840 ;; Defined at:
 10841 ;;		line 89 in file "I2C_Soft.c"
 10842 ;; Parameters:    Size  Location     Type
 10843 ;;		None
 10844 ;; Auto vars:     Size  Location     Type
 10845 ;;		None
 10846 ;; Return value:  Size  Location     Type
 10847 ;;		None               void
 10848 ;; Registers used:
 10849 ;;		wreg, cstack
 10850 ;; Tracked objects:
 10851 ;;		On entry : 0/0
 10852 ;;		On exit  : 0/0
 10853 ;;		Unchanged: 0/0
 10854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10859 ;;Total ram usage:        0 bytes
 10860 ;; Hardware stack levels used:    1
 10861 ;; Hardware stack levels required when called:    4
 10862 ;; This function calls:
 10863 ;;		_i2cHighScl
 10864 ;;		_i2cHighSda
 10865 ;;		_i2cLowScl
 10866 ;;		_i2cLowSda
 10867 ;; This function is called by:
 10868 ;;		_I2C_Write_Cmd_Only
 10869 ;;		_I2C_Write_Cmd_Write_Data
 10870 ;;		_DS1621_Read_Temp
 10871 ;;		_DS3231_Read_Time
 10872 ;;		_DS3231_Setup_Time
 10873 ;;		_I2C_Write_Address_Read_One_Byte
 10874 ;;		_I2C_Write_Address_Write_One_Byte
 10875 ;;		_I2C_Write_Cmd_Read_One_Byte
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           	psect	text61
 10880  00233C                     __ptext61:
 10881                           	opt stack 0
 10882  00233C                     _I2C_Stop:
 10883                           	opt stack 23
 10884                           
 10885                           ;I2C_Soft.c: 91: i2cLowScl();
 10886                           
 10887                           ;incstack = 0
 10888  00233C  ECEF  F011         	call	_i2cLowScl	;wreg free
 10889                           
 10890                           ;I2C_Soft.c: 92: i2cLowSda();
 10891  002340  ECE6  F011         	call	_i2cLowSda	;wreg free
 10892                           
 10893                           ;I2C_Soft.c: 93: i2cHighScl();
 10894  002344  ECD0  F011         	call	_i2cHighScl	;wreg free
 10895                           
 10896                           ;I2C_Soft.c: 94: i2cHighSda();
 10897  002348  ECF3  F011         	call	_i2cHighSda	;wreg free
 10898  00234C  0012               	return		;funcret
 10899  00234E                     __end_of_I2C_Stop:
 10900                           	opt stack 0
 10901                           tblptru	equ	0xFF8
 10902                           tblptrh	equ	0xFF7
 10903                           tblptrl	equ	0xFF6
 10904                           tablat	equ	0xFF5
 10905                           prodh	equ	0xFF4
 10906                           prodl	equ	0xFF3
 10907                           intcon	equ	0xFF2
 10908                           intcon2	equ	0xFF1
 10909                           postinc0	equ	0xFEE
 10910                           wreg	equ	0xFE8
 10911                           postdec1	equ	0xFE5
 10912                           plusw1	equ	0xFE3
 10913                           fsr1l	equ	0xFE1
 10914                           indf2	equ	0xFDF
 10915                           postinc2	equ	0xFDE
 10916                           postdec2	equ	0xFDD
 10917                           plusw2	equ	0xFDB
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function _I2C_Start *****************
 10923 ;; Defined at:
 10924 ;;		line 72 in file "I2C_Soft.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;		None
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;		None
 10929 ;; Return value:  Size  Location     Type
 10930 ;;		None               void
 10931 ;; Registers used:
 10932 ;;		wreg, cstack
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10942 ;;Total ram usage:        0 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    4
 10945 ;; This function calls:
 10946 ;;		_i2cHighScl
 10947 ;;		_i2cHighSda
 10948 ;;		_i2cLowScl
 10949 ;;		_i2cLowSda
 10950 ;; This function is called by:
 10951 ;;		_I2C_Write_Cmd_Only
 10952 ;;		_I2C_Write_Cmd_Write_Data
 10953 ;;		_DS1621_Read_Temp
 10954 ;;		_DS3231_Read_Time
 10955 ;;		_DS3231_Setup_Time
 10956 ;;		_I2C_Write_Address_Read_One_Byte
 10957 ;;		_I2C_Write_Address_Write_One_Byte
 10958 ;;		_I2C_Write_Cmd_Read_One_Byte
 10959 ;; This function uses a non-reentrant model
 10960 ;;
 10961                           
 10962                           	psect	text62
 10963  00234E                     __ptext62:
 10964                           	opt stack 0
 10965  00234E                     _I2C_Start:
 10966                           	opt stack 23
 10967                           
 10968                           ;I2C_Soft.c: 74: i2cHighSda();
 10969                           
 10970                           ;incstack = 0
 10971  00234E  ECF3  F011         	call	_i2cHighSda	;wreg free
 10972                           
 10973                           ;I2C_Soft.c: 75: i2cHighScl();
 10974  002352  ECD0  F011         	call	_i2cHighScl	;wreg free
 10975                           
 10976                           ;I2C_Soft.c: 76: i2cLowSda();
 10977  002356  ECE6  F011         	call	_i2cLowSda	;wreg free
 10978                           
 10979                           ;I2C_Soft.c: 77: i2cLowScl();
 10980  00235A  ECEF  F011         	call	_i2cLowScl	;wreg free
 10981  00235E  0012               	return		;funcret
 10982  002360                     __end_of_I2C_Start:
 10983                           	opt stack 0
 10984                           tblptru	equ	0xFF8
 10985                           tblptrh	equ	0xFF7
 10986                           tblptrl	equ	0xFF6
 10987                           tablat	equ	0xFF5
 10988                           prodh	equ	0xFF4
 10989                           prodl	equ	0xFF3
 10990                           intcon	equ	0xFF2
 10991                           intcon2	equ	0xFF1
 10992                           postinc0	equ	0xFEE
 10993                           wreg	equ	0xFE8
 10994                           postdec1	equ	0xFE5
 10995                           plusw1	equ	0xFE3
 10996                           fsr1l	equ	0xFE1
 10997                           indf2	equ	0xFDF
 10998                           postinc2	equ	0xFDE
 10999                           postdec2	equ	0xFDD
 11000                           plusw2	equ	0xFDB
 11001                           fsr2h	equ	0xFDA
 11002                           fsr2l	equ	0xFD9
 11003                           status	equ	0xFD8
 11004                           
 11005 ;; *************** function _I2C_Read *****************
 11006 ;; Defined at:
 11007 ;;		line 21 in file "I2C_Soft.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  ack             1    wreg     unsigned char 
 11010 ;; Auto vars:     Size  Location     Type
 11011 ;;  ack             1   16[COMRAM] unsigned char 
 11012 ;;  inByte          1   18[COMRAM] unsigned char 
 11013 ;;  n               1   17[COMRAM] unsigned char 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  1    wreg      unsigned char 
 11016 ;; Registers used:
 11017 ;;		wreg, status,2, status,0, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;Total ram usage:        3 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    5
 11030 ;; This function calls:
 11031 ;;		_i2cAck
 11032 ;;		_i2cHighScl
 11033 ;;		_i2cHighSda
 11034 ;;		_i2cLowScl
 11035 ;;		_i2cNack
 11036 ;; This function is called by:
 11037 ;;		_DS1621_Read_Temp
 11038 ;;		_DS3231_Read_Time
 11039 ;;		_I2C_Write_Address_Read_One_Byte
 11040 ;;		_I2C_Write_Cmd_Read_One_Byte
 11041 ;; This function uses a non-reentrant model
 11042 ;;
 11043                           
 11044                           	psect	text63
 11045  001EF6                     __ptext63:
 11046                           	opt stack 0
 11047  001EF6                     _I2C_Read:
 11048                           	opt stack 24
 11049                           
 11050                           ;incstack = 0
 11051                           ;I2C_Read@ack stored from wreg
 11052  001EF6  6E11               	movwf	I2C_Read@ack,c
 11053                           
 11054                           ;I2C_Soft.c: 23: unsigned char inByte, n;
 11055                           ;I2C_Soft.c: 24: i2cHighSda();
 11056  001EF8  ECF3  F011         	call	_i2cHighSda	;wreg free
 11057                           
 11058                           ;I2C_Soft.c: 25: for (n=0; n<8; n++)
 11059  001EFC  0E00               	movlw	0
 11060  001EFE  6E12               	movwf	I2C_Read@n,c
 11061  001F00                     l6055:
 11062  001F00  0E07               	movlw	7
 11063  001F02  6412               	cpfsgt	I2C_Read@n,c
 11064  001F04  D001               	goto	l6059
 11065  001F06  D00F               	goto	l6073
 11066  001F08                     l6059:
 11067                           
 11068                           ;I2C_Soft.c: 26: {
 11069                           ;I2C_Soft.c: 27: i2cHighScl();
 11070  001F08  ECD0  F011         	call	_i2cHighScl	;wreg free
 11071                           
 11072                           ;I2C_Soft.c: 29: if (PORTDbits.RD7)
 11073  001F0C  AE83               	btfss	3971,7,c	;volatile
 11074  001F0E  D003               	goto	l6065
 11075                           
 11076                           ;I2C_Soft.c: 30: inByte = (inByte << 1) | 0x01;
 11077  001F10  80D8               	bsf	status,0,c
 11078  001F12  3613               	rlcf	I2C_Read@inByte,f,c
 11079  001F14  D004               	goto	l6067
 11080  001F16                     l6065:
 11081                           
 11082                           ;I2C_Soft.c: 31: else
 11083                           ;I2C_Soft.c: 32: inByte = inByte << 1;
 11084  001F16  5013               	movf	I2C_Read@inByte,w,c
 11085  001F18  2413               	addwf	I2C_Read@inByte,w,c
 11086  001F1A  6E13               	movwf	I2C_Read@inByte,c
 11087  001F1C  D000               	goto	l6067
 11088  001F1E                     l6067:
 11089                           
 11090                           ;I2C_Soft.c: 33: i2cLowScl();
 11091  001F1E  ECEF  F011         	call	_i2cLowScl	;wreg free
 11092  001F22  2A12               	incf	I2C_Read@n,f,c
 11093  001F24  D7ED               	goto	l6055
 11094  001F26                     l6073:
 11095                           
 11096                           ;I2C_Soft.c: 34: }
 11097                           ;I2C_Soft.c: 35: if (ack) i2cAck();
 11098  001F26  5011               	movf	I2C_Read@ack,w,c
 11099  001F28  B4D8               	btfsc	status,2,c
 11100  001F2A  D003               	goto	l6077
 11101  001F2C  ECB0  F011         	call	_i2cAck	;wreg free
 11102  001F30  D003               	goto	l6079
 11103  001F32                     l6077:
 11104                           
 11105                           ;I2C_Soft.c: 36: else i2cNack();
 11106  001F32  ECE1  F011         	call	_i2cNack	;wreg free
 11107  001F36  D000               	goto	l6079
 11108  001F38                     l6079:
 11109                           
 11110                           ;I2C_Soft.c: 39: return(inByte);
 11111  001F38  5013               	movf	I2C_Read@inByte,w,c
 11112  001F3A  D000               	goto	l104
 11113  001F3C                     l104:
 11114  001F3C  0012               	return		;funcret
 11115  001F3E                     __end_of_I2C_Read:
 11116                           	opt stack 0
 11117                           tblptru	equ	0xFF8
 11118                           tblptrh	equ	0xFF7
 11119                           tblptrl	equ	0xFF6
 11120                           tablat	equ	0xFF5
 11121                           prodh	equ	0xFF4
 11122                           prodl	equ	0xFF3
 11123                           intcon	equ	0xFF2
 11124                           intcon2	equ	0xFF1
 11125                           postinc0	equ	0xFEE
 11126                           wreg	equ	0xFE8
 11127                           postdec1	equ	0xFE5
 11128                           plusw1	equ	0xFE3
 11129                           fsr1l	equ	0xFE1
 11130                           indf2	equ	0xFDF
 11131                           postinc2	equ	0xFDE
 11132                           postdec2	equ	0xFDD
 11133                           plusw2	equ	0xFDB
 11134                           fsr2h	equ	0xFDA
 11135                           fsr2l	equ	0xFD9
 11136                           status	equ	0xFD8
 11137                           
 11138 ;; *************** function _i2cNack *****************
 11139 ;; Defined at:
 11140 ;;		line 58 in file "I2C_Soft.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;		None
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;		None
 11145 ;; Return value:  Size  Location     Type
 11146 ;;		None               void
 11147 ;; Registers used:
 11148 ;;		wreg, cstack
 11149 ;; Tracked objects:
 11150 ;;		On entry : 0/0
 11151 ;;		On exit  : 0/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11158 ;;Total ram usage:        0 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; Hardware stack levels required when called:    4
 11161 ;; This function calls:
 11162 ;;		_i2cHighScl
 11163 ;;		_i2cLowScl
 11164 ;; This function is called by:
 11165 ;;		_I2C_Read
 11166 ;; This function uses a non-reentrant model
 11167 ;;
 11168                           
 11169                           	psect	text64
 11170  0023C2                     __ptext64:
 11171                           	opt stack 0
 11172  0023C2                     _i2cNack:
 11173                           	opt stack 24
 11174                           
 11175                           ;I2C_Soft.c: 60: i2cHighScl();
 11176                           
 11177                           ;incstack = 0
 11178  0023C2  ECD0  F011         	call	_i2cHighScl	;wreg free
 11179                           
 11180                           ;I2C_Soft.c: 61: i2cLowScl();
 11181  0023C6  ECEF  F011         	call	_i2cLowScl	;wreg free
 11182  0023CA  0012               	return		;funcret
 11183  0023CC                     __end_of_i2cNack:
 11184                           	opt stack 0
 11185                           tblptru	equ	0xFF8
 11186                           tblptrh	equ	0xFF7
 11187                           tblptrl	equ	0xFF6
 11188                           tablat	equ	0xFF5
 11189                           prodh	equ	0xFF4
 11190                           prodl	equ	0xFF3
 11191                           intcon	equ	0xFF2
 11192                           intcon2	equ	0xFF1
 11193                           postinc0	equ	0xFEE
 11194                           wreg	equ	0xFE8
 11195                           postdec1	equ	0xFE5
 11196                           plusw1	equ	0xFE3
 11197                           fsr1l	equ	0xFE1
 11198                           indf2	equ	0xFDF
 11199                           postinc2	equ	0xFDE
 11200                           postdec2	equ	0xFDD
 11201                           plusw2	equ	0xFDB
 11202                           fsr2h	equ	0xFDA
 11203                           fsr2l	equ	0xFD9
 11204                           status	equ	0xFD8
 11205                           
 11206 ;; *************** function _i2cAck *****************
 11207 ;; Defined at:
 11208 ;;		line 64 in file "I2C_Soft.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;		None
 11211 ;; Auto vars:     Size  Location     Type
 11212 ;;		None
 11213 ;; Return value:  Size  Location     Type
 11214 ;;		None               void
 11215 ;; Registers used:
 11216 ;;		wreg, cstack
 11217 ;; Tracked objects:
 11218 ;;		On entry : 0/0
 11219 ;;		On exit  : 0/0
 11220 ;;		Unchanged: 0/0
 11221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11226 ;;Total ram usage:        0 bytes
 11227 ;; Hardware stack levels used:    1
 11228 ;; Hardware stack levels required when called:    4
 11229 ;; This function calls:
 11230 ;;		_i2cHighScl
 11231 ;;		_i2cHighSda
 11232 ;;		_i2cLowScl
 11233 ;;		_i2cLowSda
 11234 ;; This function is called by:
 11235 ;;		_I2C_Read
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           	psect	text65
 11240  002360                     __ptext65:
 11241                           	opt stack 0
 11242  002360                     _i2cAck:
 11243                           	opt stack 24
 11244                           
 11245                           ;I2C_Soft.c: 66: i2cLowSda();
 11246                           
 11247                           ;incstack = 0
 11248  002360  ECE6  F011         	call	_i2cLowSda	;wreg free
 11249                           
 11250                           ;I2C_Soft.c: 67: i2cHighScl();
 11251  002364  ECD0  F011         	call	_i2cHighScl	;wreg free
 11252                           
 11253                           ;I2C_Soft.c: 68: i2cLowScl();
 11254  002368  ECEF  F011         	call	_i2cLowScl	;wreg free
 11255                           
 11256                           ;I2C_Soft.c: 69: i2cHighSda();
 11257  00236C  ECF3  F011         	call	_i2cHighSda	;wreg free
 11258  002370  0012               	return		;funcret
 11259  002372                     __end_of_i2cAck:
 11260                           	opt stack 0
 11261                           tblptru	equ	0xFF8
 11262                           tblptrh	equ	0xFF7
 11263                           tblptrl	equ	0xFF6
 11264                           tablat	equ	0xFF5
 11265                           prodh	equ	0xFF4
 11266                           prodl	equ	0xFF3
 11267                           intcon	equ	0xFF2
 11268                           intcon2	equ	0xFF1
 11269                           postinc0	equ	0xFEE
 11270                           wreg	equ	0xFE8
 11271                           postdec1	equ	0xFE5
 11272                           plusw1	equ	0xFE3
 11273                           fsr1l	equ	0xFE1
 11274                           indf2	equ	0xFDF
 11275                           postinc2	equ	0xFDE
 11276                           postdec2	equ	0xFDD
 11277                           plusw2	equ	0xFDB
 11278                           fsr2h	equ	0xFDA
 11279                           fsr2l	equ	0xFD9
 11280                           status	equ	0xFD8
 11281                           
 11282 ;; *************** function _I2C_ReStart *****************
 11283 ;; Defined at:
 11284 ;;		line 80 in file "I2C_Soft.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;		None
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;		None
 11289 ;; Return value:  Size  Location     Type
 11290 ;;		None               void
 11291 ;; Registers used:
 11292 ;;		wreg, cstack
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;Total ram usage:        0 bytes
 11303 ;; Hardware stack levels used:    1
 11304 ;; Hardware stack levels required when called:    4
 11305 ;; This function calls:
 11306 ;;		_i2cHighScl
 11307 ;;		_i2cHighSda
 11308 ;;		_i2cLowScl
 11309 ;;		_i2cLowSda
 11310 ;; This function is called by:
 11311 ;;		_DS1621_Read_Temp
 11312 ;;		_DS3231_Read_Time
 11313 ;;		_I2C_Write_Address_Read_One_Byte
 11314 ;;		_I2C_Write_Cmd_Read_One_Byte
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text66
 11319  0022B2                     __ptext66:
 11320                           	opt stack 0
 11321  0022B2                     _I2C_ReStart:
 11322                           	opt stack 25
 11323                           
 11324                           ;I2C_Soft.c: 82: i2cLowScl();
 11325                           
 11326                           ;incstack = 0
 11327  0022B2  ECEF  F011         	call	_i2cLowScl	;wreg free
 11328                           
 11329                           ;I2C_Soft.c: 83: i2cHighSda();
 11330  0022B6  ECF3  F011         	call	_i2cHighSda	;wreg free
 11331                           
 11332                           ;I2C_Soft.c: 84: i2cHighScl();
 11333  0022BA  ECD0  F011         	call	_i2cHighScl	;wreg free
 11334                           
 11335                           ;I2C_Soft.c: 85: i2cLowSda();
 11336  0022BE  ECE6  F011         	call	_i2cLowSda	;wreg free
 11337                           
 11338                           ;I2C_Soft.c: 86: i2cLowScl();
 11339  0022C2  ECEF  F011         	call	_i2cLowScl	;wreg free
 11340  0022C6  0012               	return		;funcret
 11341  0022C8                     __end_of_I2C_ReStart:
 11342                           	opt stack 0
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon2	equ	0xFF1
 11351                           postinc0	equ	0xFEE
 11352                           wreg	equ	0xFE8
 11353                           postdec1	equ	0xFE5
 11354                           plusw1	equ	0xFE3
 11355                           fsr1l	equ	0xFE1
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           postdec2	equ	0xFDD
 11359                           plusw2	equ	0xFDB
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8
 11363                           
 11364 ;; *************** function _i2cLowSda *****************
 11365 ;; Defined at:
 11366 ;;		line 103 in file "I2C_Soft.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;		None
 11371 ;; Return value:  Size  Location     Type
 11372 ;;		None               void
 11373 ;; Registers used:
 11374 ;;		None
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;Total ram usage:        0 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    3
 11387 ;; This function calls:
 11388 ;;		Nothing
 11389 ;; This function is called by:
 11390 ;;		_I2C_Write
 11391 ;;		_i2cAck
 11392 ;;		_I2C_Start
 11393 ;;		_I2C_ReStart
 11394 ;;		_I2C_Stop
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text67
 11399  0023CC                     __ptext67:
 11400                           	opt stack 0
 11401  0023CC                     _i2cLowSda:
 11402                           	opt stack 23
 11403                           
 11404                           ;I2C_Soft.c: 105: PORTDbits.RD7 = 0;
 11405                           
 11406                           ;incstack = 0
 11407  0023CC  9E83               	bcf	3971,7,c	;volatile
 11408                           
 11409                           ;I2C_Soft.c: 106: TRISDbits.RD7 = 0;
 11410  0023CE  9E95               	bcf	3989,7,c	;volatile
 11411                           
 11412                           ;I2C_Soft.c: 107: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11413  0023D0  D000               	nop2		;2 cycle nop
 11414  0023D2  D000               	nop2		;2 cycle nop
 11415  0023D4  0012               	return		;funcret
 11416  0023D6                     __end_of_i2cLowSda:
 11417                           	opt stack 0
 11418                           tblptru	equ	0xFF8
 11419                           tblptrh	equ	0xFF7
 11420                           tblptrl	equ	0xFF6
 11421                           tablat	equ	0xFF5
 11422                           prodh	equ	0xFF4
 11423                           prodl	equ	0xFF3
 11424                           intcon	equ	0xFF2
 11425                           intcon2	equ	0xFF1
 11426                           postinc0	equ	0xFEE
 11427                           wreg	equ	0xFE8
 11428                           postdec1	equ	0xFE5
 11429                           plusw1	equ	0xFE3
 11430                           fsr1l	equ	0xFE1
 11431                           indf2	equ	0xFDF
 11432                           postinc2	equ	0xFDE
 11433                           postdec2	equ	0xFDD
 11434                           plusw2	equ	0xFDB
 11435                           fsr2h	equ	0xFDA
 11436                           fsr2l	equ	0xFD9
 11437                           status	equ	0xFD8
 11438                           
 11439 ;; *************** function _i2cLowScl *****************
 11440 ;; Defined at:
 11441 ;;		line 116 in file "I2C_Soft.c"
 11442 ;; Parameters:    Size  Location     Type
 11443 ;;		None
 11444 ;; Auto vars:     Size  Location     Type
 11445 ;;		None
 11446 ;; Return value:  Size  Location     Type
 11447 ;;		None               void
 11448 ;; Registers used:
 11449 ;;		None
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11459 ;;Total ram usage:        0 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    3
 11462 ;; This function calls:
 11463 ;;		Nothing
 11464 ;; This function is called by:
 11465 ;;		_I2C_Read
 11466 ;;		_I2C_Write
 11467 ;;		_i2cNack
 11468 ;;		_i2cAck
 11469 ;;		_I2C_Start
 11470 ;;		_I2C_ReStart
 11471 ;;		_I2C_Stop
 11472 ;; This function uses a non-reentrant model
 11473 ;;
 11474                           
 11475                           	psect	text68
 11476  0023DE                     __ptext68:
 11477                           	opt stack 0
 11478  0023DE                     _i2cLowScl:
 11479                           	opt stack 23
 11480                           
 11481                           ;I2C_Soft.c: 118: PORTBbits.RB4 = 0;
 11482                           
 11483                           ;incstack = 0
 11484  0023DE  9881               	bcf	3969,4,c	;volatile
 11485                           
 11486                           ;I2C_Soft.c: 119: TRISBbits.RB4 = 0;
 11487  0023E0  9893               	bcf	3987,4,c	;volatile
 11488                           
 11489                           ;I2C_Soft.c: 120: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11490  0023E2  D000               	nop2		;2 cycle nop
 11491  0023E4  0012               	return		;funcret
 11492  0023E6                     __end_of_i2cLowScl:
 11493                           	opt stack 0
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           intcon2	equ	0xFF1
 11502                           postinc0	equ	0xFEE
 11503                           wreg	equ	0xFE8
 11504                           postdec1	equ	0xFE5
 11505                           plusw1	equ	0xFE3
 11506                           fsr1l	equ	0xFE1
 11507                           indf2	equ	0xFDF
 11508                           postinc2	equ	0xFDE
 11509                           postdec2	equ	0xFDD
 11510                           plusw2	equ	0xFDB
 11511                           fsr2h	equ	0xFDA
 11512                           fsr2l	equ	0xFD9
 11513                           status	equ	0xFD8
 11514                           
 11515 ;; *************** function _i2cHighSda *****************
 11516 ;; Defined at:
 11517 ;;		line 97 in file "I2C_Soft.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;		None
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;		None
 11522 ;; Return value:  Size  Location     Type
 11523 ;;		None               void
 11524 ;; Registers used:
 11525 ;;		None
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;Total ram usage:        0 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    3
 11538 ;; This function calls:
 11539 ;;		Nothing
 11540 ;; This function is called by:
 11541 ;;		_I2C_Init
 11542 ;;		_I2C_Read
 11543 ;;		_I2C_Write
 11544 ;;		_i2cAck
 11545 ;;		_I2C_Start
 11546 ;;		_I2C_ReStart
 11547 ;;		_I2C_Stop
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           	psect	text69
 11552  0023E6                     __ptext69:
 11553                           	opt stack 0
 11554  0023E6                     _i2cHighSda:
 11555                           	opt stack 25
 11556                           
 11557                           ;I2C_Soft.c: 99: TRISDbits.RD7 = 1;
 11558                           
 11559                           ;incstack = 0
 11560  0023E6  8E95               	bsf	3989,7,c	;volatile
 11561                           
 11562                           ;I2C_Soft.c: 100: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11563  0023E8  D000               	nop2		;2 cycle nop
 11564  0023EA  D000               	nop2		;2 cycle nop
 11565  0023EC  0012               	return		;funcret
 11566  0023EE                     __end_of_i2cHighSda:
 11567                           	opt stack 0
 11568                           tblptru	equ	0xFF8
 11569                           tblptrh	equ	0xFF7
 11570                           tblptrl	equ	0xFF6
 11571                           tablat	equ	0xFF5
 11572                           prodh	equ	0xFF4
 11573                           prodl	equ	0xFF3
 11574                           intcon	equ	0xFF2
 11575                           intcon2	equ	0xFF1
 11576                           postinc0	equ	0xFEE
 11577                           wreg	equ	0xFE8
 11578                           postdec1	equ	0xFE5
 11579                           plusw1	equ	0xFE3
 11580                           fsr1l	equ	0xFE1
 11581                           indf2	equ	0xFDF
 11582                           postinc2	equ	0xFDE
 11583                           postdec2	equ	0xFDD
 11584                           plusw2	equ	0xFDB
 11585                           fsr2h	equ	0xFDA
 11586                           fsr2l	equ	0xFD9
 11587                           status	equ	0xFD8
 11588                           
 11589 ;; *************** function _i2cHighScl *****************
 11590 ;; Defined at:
 11591 ;;		line 110 in file "I2C_Soft.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;		None
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;		None
 11596 ;; Return value:  Size  Location     Type
 11597 ;;		None               void
 11598 ;; Registers used:
 11599 ;;		wreg
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;Total ram usage:        0 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    3
 11612 ;; This function calls:
 11613 ;;		Nothing
 11614 ;; This function is called by:
 11615 ;;		_I2C_Init
 11616 ;;		_I2C_Read
 11617 ;;		_I2C_Write
 11618 ;;		_i2cNack
 11619 ;;		_i2cAck
 11620 ;;		_I2C_Start
 11621 ;;		_I2C_ReStart
 11622 ;;		_I2C_Stop
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           	psect	text70
 11627  0023A0                     __ptext70:
 11628                           	opt stack 0
 11629  0023A0                     _i2cHighScl:
 11630                           	opt stack 25
 11631                           
 11632                           ;I2C_Soft.c: 112: TRISBbits.RB4 = 1;
 11633                           
 11634                           ;incstack = 0
 11635  0023A0  8893               	bsf	3987,4,c	;volatile
 11636                           
 11637                           ;I2C_Soft.c: 113: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11638  0023A2  0E06               	movlw	6
 11639  0023A4                     u5407:
 11640  0023A4  2EE8               	decfsz	wreg,f,c
 11641  0023A6  D7FE               	goto	u5407
 11642  0023A8  D000               	nop2		;nop
 11643  0023AA  0012               	return		;funcret
 11644  0023AC                     __end_of_i2cHighScl:
 11645                           	opt stack 0
 11646                           tblptru	equ	0xFF8
 11647                           tblptrh	equ	0xFF7
 11648                           tblptrl	equ	0xFF6
 11649                           tablat	equ	0xFF5
 11650                           prodh	equ	0xFF4
 11651                           prodl	equ	0xFF3
 11652                           intcon	equ	0xFF2
 11653                           intcon2	equ	0xFF1
 11654                           postinc0	equ	0xFEE
 11655                           wreg	equ	0xFE8
 11656                           postdec1	equ	0xFE5
 11657                           plusw1	equ	0xFE3
 11658                           fsr1l	equ	0xFE1
 11659                           indf2	equ	0xFDF
 11660                           postinc2	equ	0xFDE
 11661                           postdec2	equ	0xFDD
 11662                           plusw2	equ	0xFDB
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           
 11667 ;; *************** function _chkisr *****************
 11668 ;; Defined at:
 11669 ;;		line 31 in file "Interrupt.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;		None
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;		None
 11674 ;; Return value:  Size  Location     Type
 11675 ;;		None               void
 11676 ;; Registers used:
 11677 ;;		wreg, status,2, status,0, cstack
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11685 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11686 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;Total ram usage:       14 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; Hardware stack levels required when called:    2
 11690 ;; This function calls:
 11691 ;;		_INT0_isr
 11692 ;;		_TIMER1_isr
 11693 ;; This function is called by:
 11694 ;;		Interrupt level 2
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	intcode
 11699  000008                     __pintcode:
 11700                           	opt stack 0
 11701  000008                     _chkisr:
 11702                           	opt stack 20
 11703                           
 11704                           ;incstack = 0
 11705  000008  CFFA F003          	movff	pclath,??_chkisr
 11706  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11707  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11708  000014  ED3B  F00D         	call	int_func,f	;refresh shadow registers
 11709                           pclatu	equ	0xFFB
 11710                           pclath	equ	0xFFA
 11711                           tblptru	equ	0xFF8
 11712                           tblptrh	equ	0xFF7
 11713                           tblptrl	equ	0xFF6
 11714                           tablat	equ	0xFF5
 11715                           prodh	equ	0xFF4
 11716                           prodl	equ	0xFF3
 11717                           intcon	equ	0xFF2
 11718                           intcon2	equ	0xFF1
 11719                           postinc0	equ	0xFEE
 11720                           fsr0l	equ	0xFE9
 11721                           wreg	equ	0xFE8
 11722                           postdec1	equ	0xFE5
 11723                           plusw1	equ	0xFE3
 11724                           fsr1l	equ	0xFE1
 11725                           indf2	equ	0xFDF
 11726                           postinc2	equ	0xFDE
 11727                           postdec2	equ	0xFDD
 11728                           plusw2	equ	0xFDB
 11729                           fsr2h	equ	0xFDA
 11730                           fsr2l	equ	0xFD9
 11731                           status	equ	0xFD8
 11732                           
 11733                           	psect	intcode_body
 11734  001A76                     __pintcode_body:
 11735                           	opt stack 20
 11736  001A76                     int_func:
 11737                           	opt stack 20
 11738  001A76  0006               	pop		; remove dummy address from shadow register refresh
 11739  001A78  CFEA F006          	movff	fsr0h,??_chkisr+3
 11740  001A7C  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11741  001A80  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11742  001A84  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11743  001A88  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11744  001A8C  CFF3 F00B          	movff	prodl,??_chkisr+8
 11745  001A90  CFF4 F00C          	movff	prodh,??_chkisr+9
 11746  001A94  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11747  001A98  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11748  001A9C  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11749  001AA0  CFF5 F010          	movff	tablat,??_chkisr+13
 11750                           
 11751                           ;Interrupt.c: 33: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11752  001AA4  A09E               	btfss	3998,0,c	;volatile
 11753  001AA6  D003               	goto	i2l4885
 11754  001AA8  ECD6  F011         	call	_TIMER1_isr	;wreg free
 11755  001AAC  D000               	goto	i2l4885
 11756  001AAE                     i2l4885:
 11757                           
 11758                           ;Interrupt.c: 34: if (INTCONbits.INT0IF == 1) INT0_isr();
 11759  001AAE  A2F2               	btfss	intcon,1,c	;volatile
 11760  001AB0  D003               	goto	i2l233
 11761  001AB2  ECB4  F006         	call	_INT0_isr	;wreg free
 11762  001AB6  D000               	goto	i2l233
 11763  001AB8                     i2l233:
 11764  001AB8  C010  FFF5         	movff	??_chkisr+13,tablat
 11765  001ABC  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11766  001AC0  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11767  001AC4  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11768  001AC8  C00C  FFF4         	movff	??_chkisr+9,prodh
 11769  001ACC  C00B  FFF3         	movff	??_chkisr+8,prodl
 11770  001AD0  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11771  001AD4  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11772  001AD8  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11773  001ADC  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11774  001AE0  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11775  001AE4  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11776  001AE8  C004  FFFB         	movff	??_chkisr+1,pclatu
 11777  001AEC  C003  FFFA         	movff	??_chkisr,pclath
 11778  001AF0  0011               	retfie		f
 11779  001AF2                     __end_of_chkisr:
 11780                           	opt stack 0
 11781                           pclatu	equ	0xFFB
 11782                           pclath	equ	0xFFA
 11783                           tblptru	equ	0xFF8
 11784                           tblptrh	equ	0xFF7
 11785                           tblptrl	equ	0xFF6
 11786                           tablat	equ	0xFF5
 11787                           prodh	equ	0xFF4
 11788                           prodl	equ	0xFF3
 11789                           intcon	equ	0xFF2
 11790                           intcon2	equ	0xFF1
 11791                           postinc0	equ	0xFEE
 11792                           fsr0h	equ	0xFEA
 11793                           fsr0l	equ	0xFE9
 11794                           wreg	equ	0xFE8
 11795                           postdec1	equ	0xFE5
 11796                           plusw1	equ	0xFE3
 11797                           fsr1h	equ	0xFE2
 11798                           fsr1l	equ	0xFE1
 11799                           indf2	equ	0xFDF
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           plusw2	equ	0xFDB
 11803                           fsr2h	equ	0xFDA
 11804                           fsr2l	equ	0xFD9
 11805                           status	equ	0xFD8
 11806                           
 11807 ;; *************** function _TIMER1_isr *****************
 11808 ;; Defined at:
 11809 ;;		line 37 in file "Interrupt.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;		None
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;		None
 11814 ;; Return value:  Size  Location     Type
 11815 ;;		None               void
 11816 ;; Registers used:
 11817 ;;		wreg, status,2
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11827 ;;Total ram usage:        0 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; This function calls:
 11830 ;;		Nothing
 11831 ;; This function is called by:
 11832 ;;		_chkisr
 11833 ;; This function uses a non-reentrant model
 11834 ;;
 11835                           
 11836                           	psect	text72
 11837  0023AC                     __ptext72:
 11838                           	opt stack 0
 11839  0023AC                     _TIMER1_isr:
 11840                           	opt stack 21
 11841                           
 11842                           ;Interrupt.c: 39: Nec_state = 0;
 11843                           
 11844                           ;incstack = 0
 11845  0023AC  0E00               	movlw	0
 11846  0023AE  6E52               	movwf	_Nec_state,c
 11847                           
 11848                           ;Interrupt.c: 40: INTCON2bits.INTEDG0 = 0;
 11849  0023B0  9CF1               	bcf	intcon2,6,c	;volatile
 11850                           
 11851                           ;Interrupt.c: 41: T1CONbits.TMR1ON = 0;
 11852  0023B2  90CD               	bcf	4045,0,c	;volatile
 11853                           
 11854                           ;Interrupt.c: 42: PIR1bits.TMR1IF = 0;
 11855  0023B4  909E               	bcf	3998,0,c	;volatile
 11856  0023B6  0012               	return		;funcret
 11857  0023B8                     __end_of_TIMER1_isr:
 11858                           	opt stack 0
 11859                           pclatu	equ	0xFFB
 11860                           pclath	equ	0xFFA
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon	equ	0xFF2
 11868                           intcon2	equ	0xFF1
 11869                           postinc0	equ	0xFEE
 11870                           fsr0h	equ	0xFEA
 11871                           fsr0l	equ	0xFE9
 11872                           wreg	equ	0xFE8
 11873                           postdec1	equ	0xFE5
 11874                           plusw1	equ	0xFE3
 11875                           fsr1h	equ	0xFE2
 11876                           fsr1l	equ	0xFE1
 11877                           indf2	equ	0xFDF
 11878                           postinc2	equ	0xFDE
 11879                           postdec2	equ	0xFDD
 11880                           plusw2	equ	0xFDB
 11881                           fsr2h	equ	0xFDA
 11882                           fsr2l	equ	0xFD9
 11883                           status	equ	0xFD8
 11884                           
 11885 ;; *************** function _INT0_isr *****************
 11886 ;; Defined at:
 11887 ;;		line 51 in file "Interrupt.c"
 11888 ;; Parameters:    Size  Location     Type
 11889 ;;		None
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;		None
 11892 ;; Return value:  Size  Location     Type
 11893 ;;		None               void
 11894 ;; Registers used:
 11895 ;;		wreg, status,2, status,0, cstack
 11896 ;; Tracked objects:
 11897 ;;		On entry : 0/0
 11898 ;;		On exit  : 0/0
 11899 ;;		Unchanged: 0/0
 11900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11903 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11905 ;;Total ram usage:        2 bytes
 11906 ;; Hardware stack levels used:    1
 11907 ;; Hardware stack levels required when called:    1
 11908 ;; This function calls:
 11909 ;;		_force_nec_state0
 11910 ;; This function is called by:
 11911 ;;		_chkisr
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           	psect	text73
 11916  000D68                     __ptext73:
 11917                           	opt stack 0
 11918  000D68                     _INT0_isr:
 11919                           	opt stack 20
 11920                           
 11921                           ;Interrupt.c: 53: INTCONbits.INT0IF = 0;
 11922                           
 11923                           ;incstack = 0
 11924  000D68  92F2               	bcf	intcon,1,c	;volatile
 11925                           
 11926                           ;Interrupt.c: 54: if (Nec_state != 0)
 11927  000D6A  5052               	movf	_Nec_state,w,c
 11928  000D6C  B4D8               	btfsc	status,2,c
 11929  000D6E  D0A4               	goto	i2l4623
 11930                           
 11931                           ;Interrupt.c: 55: {
 11932                           ;Interrupt.c: 56: Time_Elapsed = (TMR1H << 8) | TMR1L;
 11933  000D70  50CE               	movf	4046,w,c	;volatile
 11934  000D72  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 11935  000D76  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 11936  000D78  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 11937  000D7C  6A01               	clrf	??_INT0_isr,c
 11938  000D7E  1001               	iorwf	??_INT0_isr,w,c
 11939  000D80  6E48               	movwf	_Time_Elapsed,c
 11940  000D82  5002               	movf	??_INT0_isr+1,w,c
 11941  000D84  6E49               	movwf	_Time_Elapsed+1,c
 11942                           
 11943                           ;Interrupt.c: 57: TMR1H = 0;
 11944  000D86  0E00               	movlw	0
 11945  000D88  6ECF               	movwf	4047,c	;volatile
 11946                           
 11947                           ;Interrupt.c: 58: TMR1L = 0;
 11948  000D8A  0E00               	movlw	0
 11949  000D8C  6ECE               	movwf	4046,c	;volatile
 11950                           
 11951                           ;Interrupt.c: 59: }
 11952                           ;Interrupt.c: 61: switch(Nec_state)
 11953  000D8E  D094               	goto	i2l4623
 11954  000D90                     i2l4561:
 11955                           
 11956                           ;Interrupt.c: 64: {
 11957                           ;Interrupt.c: 66: TMR1H = 0;
 11958  000D90  0E00               	movlw	0
 11959  000D92  6ECF               	movwf	4047,c	;volatile
 11960                           
 11961                           ;Interrupt.c: 67: TMR1L = 0;
 11962  000D94  0E00               	movlw	0
 11963  000D96  6ECE               	movwf	4046,c	;volatile
 11964                           
 11965                           ;Interrupt.c: 68: PIR1bits.TMR1IF = 0;
 11966  000D98  909E               	bcf	3998,0,c	;volatile
 11967                           
 11968                           ;Interrupt.c: 69: T1CON= 0x90;
 11969  000D9A  0E90               	movlw	144
 11970  000D9C  6ECD               	movwf	4045,c	;volatile
 11971                           
 11972                           ;Interrupt.c: 70: T1CONbits.TMR1ON = 1;
 11973  000D9E  80CD               	bsf	4045,0,c	;volatile
 11974                           
 11975                           ;Interrupt.c: 71: bit_count = 0;
 11976  000DA0  0E00               	movlw	0
 11977  000DA2  6E58               	movwf	_bit_count,c
 11978                           
 11979                           ;Interrupt.c: 72: Nec_code = 0;
 11980  000DA4  0E00               	movlw	0
 11981  000DA6  0100               	movlb	0	; () banked
 11982  000DA8  6FF4               	movwf	_Nec_code& (0+255),b
 11983  000DAA  0E00               	movlw	0
 11984  000DAC  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 11985  000DAE  0E00               	movlw	0
 11986  000DB0  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 11987  000DB2  0E00               	movlw	0
 11988  000DB4  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 11989                           
 11990                           ;Interrupt.c: 73: Nec_state = 1;
 11991  000DB6  0E01               	movlw	1
 11992  000DB8  D01F               	goto	L6
 11993  000DBA                     i2l4567:
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;Interrupt.c: 74: INTCON2bits.INTEDG0 = 1;
 11997  000DBA  8CF1               	bsf	intcon2,6,c	;volatile
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;Interrupt.c: 75: return;
 12001  000DBC  D08E               	goto	i2l245
 12002  000DBE                     i2l4571:
 12003                           
 12004                           ;Interrupt.c: 79: {
 12005                           ;Interrupt.c: 80: if((Time_Elapsed > 8500)&&(Time_Elapsed < 9500))
 12006  000DBE  0E35               	movlw	53
 12007  000DC0  5C48               	subwf	_Time_Elapsed,w,c
 12008  000DC2  0E21               	movlw	33
 12009  000DC4  5849               	subwfb	_Time_Elapsed+1,w,c
 12010  000DC6  A0D8               	btfss	status,0,c
 12011  000DC8  D088               	goto	i2l245
 12012  000DCA  0E1C               	movlw	28
 12013  000DCC  5C48               	subwf	_Time_Elapsed,w,c
 12014  000DCE  0E25               	movlw	37
 12015  000DD0  5849               	subwfb	_Time_Elapsed+1,w,c
 12016  000DD2  B0D8               	btfsc	status,0,c
 12017  000DD4  D082               	goto	i2l245
 12018                           
 12019                           ;Interrupt.c: 81: {
 12020                           ;Interrupt.c: 82: Nec_state = 2;
 12021  000DD6  0E02               	movlw	2
 12022  000DD8  D01F               	goto	L7
 12023  000DDA                     i2l4577:
 12024                           
 12025                           ;Interrupt.c: 83: INTCON2bits.INTEDG0 = 0;
 12026  000DDA  9CF1               	bcf	intcon2,6,c	;volatile
 12027                           
 12028                           ;Interrupt.c: 84: }
 12029                           ;Interrupt.c: 85: return;
 12030  000DDC  D07E               	goto	i2l245
 12031  000DDE                     i2l4581:
 12032                           
 12033                           ;Interrupt.c: 89: {
 12034                           ;Interrupt.c: 90: if((Time_Elapsed > 4000)&&(Time_Elapsed < 5000))
 12035  000DDE  0EA1               	movlw	161
 12036  000DE0  5C48               	subwf	_Time_Elapsed,w,c
 12037  000DE2  0E0F               	movlw	15
 12038  000DE4  5849               	subwfb	_Time_Elapsed+1,w,c
 12039  000DE6  A0D8               	btfss	status,0,c
 12040  000DE8  D078               	goto	i2l245
 12041  000DEA  0E88               	movlw	136
 12042  000DEC  5C48               	subwf	_Time_Elapsed,w,c
 12043  000DEE  0E13               	movlw	19
 12044  000DF0  5849               	subwfb	_Time_Elapsed+1,w,c
 12045  000DF2  B0D8               	btfsc	status,0,c
 12046  000DF4  D072               	goto	i2l245
 12047                           
 12048                           ;Interrupt.c: 91: {
 12049                           ;Interrupt.c: 92: Nec_state = 3;
 12050  000DF6  0E03               	movlw	3
 12051  000DF8                     L6:
 12052  000DF8  6E52               	movwf	_Nec_state,c
 12053  000DFA  D7DF               	goto	i2l4567
 12054                           
 12055                           ;Interrupt.c: 94: }
 12056                           ;Interrupt.c: 95: return;
 12057                           
 12058                           ;Interrupt.c: 93: INTCON2bits.INTEDG0 = 1;
 12059  000DFC  D06E               	goto	i2l245
 12060  000DFE                     i2l4591:
 12061                           
 12062                           ;Interrupt.c: 99: {
 12063                           ;Interrupt.c: 100: if((Time_Elapsed > 400)&&(Time_Elapsed < 700))
 12064  000DFE  0E91               	movlw	145
 12065  000E00  5C48               	subwf	_Time_Elapsed,w,c
 12066  000E02  0E01               	movlw	1
 12067  000E04  5849               	subwfb	_Time_Elapsed+1,w,c
 12068  000E06  A0D8               	btfss	status,0,c
 12069  000E08  D068               	goto	i2l245
 12070  000E0A  0EBC               	movlw	188
 12071  000E0C  5C48               	subwf	_Time_Elapsed,w,c
 12072  000E0E  0E02               	movlw	2
 12073  000E10  5849               	subwfb	_Time_Elapsed+1,w,c
 12074  000E12  B0D8               	btfsc	status,0,c
 12075  000E14  D062               	goto	i2l245
 12076                           
 12077                           ;Interrupt.c: 101: {
 12078                           ;Interrupt.c: 102: Nec_state = 4;
 12079  000E16  0E04               	movlw	4
 12080  000E18                     L7:
 12081  000E18  6E52               	movwf	_Nec_state,c
 12082  000E1A  D7DF               	goto	i2l4577
 12083                           
 12084                           ;Interrupt.c: 104: }
 12085                           ;Interrupt.c: 105: return;
 12086                           
 12087                           ;Interrupt.c: 103: INTCON2bits.INTEDG0 = 0;
 12088  000E1C  D05E               	goto	i2l245
 12089  000E1E                     i2l4601:
 12090                           
 12091                           ;Interrupt.c: 109: {
 12092                           ;Interrupt.c: 110: if((Time_Elapsed > 400)&&(Time_Elapsed < 1800))
 12093  000E1E  0E91               	movlw	145
 12094  000E20  5C48               	subwf	_Time_Elapsed,w,c
 12095  000E22  0E01               	movlw	1
 12096  000E24  5849               	subwfb	_Time_Elapsed+1,w,c
 12097  000E26  A0D8               	btfss	status,0,c
 12098  000E28  D042               	goto	i2l4615
 12099  000E2A  0E08               	movlw	8
 12100  000E2C  5C48               	subwf	_Time_Elapsed,w,c
 12101  000E2E  0E07               	movlw	7
 12102  000E30  5849               	subwfb	_Time_Elapsed+1,w,c
 12103  000E32  B0D8               	btfsc	status,0,c
 12104  000E34  D03C               	goto	i2l4615
 12105                           
 12106                           ;Interrupt.c: 111: {
 12107                           ;Interrupt.c: 112: Nec_code = Nec_code << 1;
 12108  000E36  90D8               	bcf	status,0,c
 12109  000E38  0100               	movlb	0	; () banked
 12110  000E3A  35F4               	rlcf	_Nec_code& (0+255),w,b
 12111  000E3C  0100               	movlb	0	; () banked
 12112  000E3E  6FF4               	movwf	_Nec_code& (0+255),b
 12113  000E40  0100               	movlb	0	; () banked
 12114  000E42  35F5               	rlcf	(_Nec_code+1)& (0+255),w,b
 12115  000E44  0100               	movlb	0	; () banked
 12116  000E46  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 12117  000E48  0100               	movlb	0	; () banked
 12118  000E4A  35F6               	rlcf	(_Nec_code+2)& (0+255),w,b
 12119  000E4C  0100               	movlb	0	; () banked
 12120  000E4E  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 12121  000E50  0100               	movlb	0	; () banked
 12122  000E52  35F7               	rlcf	(_Nec_code+3)& (0+255),w,b
 12123  000E54  0100               	movlb	0	; () banked
 12124  000E56  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 12125                           
 12126                           ;Interrupt.c: 113: if(Time_Elapsed > 1000)
 12127  000E58  0EE9               	movlw	233
 12128  000E5A  5C48               	subwf	_Time_Elapsed,w,c
 12129  000E5C  0E03               	movlw	3
 12130  000E5E  5849               	subwfb	_Time_Elapsed+1,w,c
 12131  000E60  A0D8               	btfss	status,0,c
 12132  000E62  D014               	goto	i2l254
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;Interrupt.c: 114: {
 12136                           ;Interrupt.c: 115: Nec_code = Nec_code + 1;
 12137  000E64  0E01               	movlw	1
 12138  000E66  0100               	movlb	0	; () banked
 12139  000E68  25F4               	addwf	_Nec_code& (0+255),w,b
 12140  000E6A  0100               	movlb	0	; () banked
 12141  000E6C  6FF4               	movwf	_Nec_code& (0+255),b
 12142  000E6E  0E00               	movlw	0
 12143  000E70  0100               	movlb	0	; () banked
 12144  000E72  21F5               	addwfc	(_Nec_code+1)& (0+255),w,b
 12145  000E74  0100               	movlb	0	; () banked
 12146  000E76  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 12147  000E78  0E00               	movlw	0
 12148  000E7A  0100               	movlb	0	; () banked
 12149  000E7C  21F6               	addwfc	(_Nec_code+2)& (0+255),w,b
 12150  000E7E  0100               	movlb	0	; () banked
 12151  000E80  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 12152  000E82  0E00               	movlw	0
 12153  000E84  0100               	movlb	0	; () banked
 12154  000E86  21F7               	addwfc	(_Nec_code+3)& (0+255),w,b
 12155  000E88  0100               	movlb	0	; () banked
 12156  000E8A  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 12157  000E8C                     i2l254:
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;Interrupt.c: 116: }
 12161                           ;Interrupt.c: 118: bit_count = bit_count + 1;
 12162  000E8C  2858               	incf	_bit_count,w,c
 12163  000E8E  6E58               	movwf	_bit_count,c
 12164                           
 12165                           ;Interrupt.c: 119: if(bit_count > 31)
 12166  000E90  0E1F               	movlw	31
 12167  000E92  6458               	cpfsgt	_bit_count,c
 12168  000E94  D009               	goto	i2l255
 12169                           
 12170                           ; BSR set to: 0
 12171                           ;Interrupt.c: 120: {
 12172                           ;Interrupt.c: 121: nec_ok = 1;
 12173  000E96  0E00               	movlw	0
 12174  000E98  6E4B               	movwf	_nec_ok+1,c
 12175  000E9A  0E01               	movlw	1
 12176  000E9C  6E4A               	movwf	_nec_ok,c
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;Interrupt.c: 122: Nec_code1 = (char) ((Nec_code >> 8));
 12180  000E9E  C0F5  F051         	movff	_Nec_code+1,_Nec_code1
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;Interrupt.c: 123: INTCONbits.INT0IE = 0;
 12184  000EA2  98F2               	bcf	intcon,4,c	;volatile
 12185                           
 12186                           ;Interrupt.c: 124: Nec_state = 0;
 12187  000EA4  0E00               	movlw	0
 12188  000EA6  6E52               	movwf	_Nec_state,c
 12189  000EA8                     i2l255:
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;Interrupt.c: 125: }
 12193                           ;Interrupt.c: 127: Nec_state = 3;
 12194  000EA8  0E03               	movlw	3
 12195  000EAA  6E52               	movwf	_Nec_state,c
 12196                           
 12197                           ;Interrupt.c: 128: }
 12198  000EAC  D786               	goto	i2l4567
 12199  000EAE                     i2l4615:
 12200                           
 12201                           ;Interrupt.c: 129: else
 12202                           ;Interrupt.c: 130: force_nec_state0();
 12203  000EAE  ECF7  F011         	call	_force_nec_state0	;wreg free
 12204  000EB2  D783               	goto	i2l4567
 12205  000EB4  D782               	goto	i2l4567
 12206                           
 12207                           ;Interrupt.c: 134: }
 12208                           ;Interrupt.c: 135: }
 12209                           
 12210                           ;Interrupt.c: 133: return;
 12211                           
 12212                           ;Interrupt.c: 132: INTCON2bits.INTEDG0 = 1;
 12213  000EB6  D011               	goto	i2l245
 12214  000EB8                     i2l4623:
 12215  000EB8  5052               	movf	_Nec_state,w,c
 12216                           
 12217                           ; Switch size 1, requested type "space"
 12218                           ; Number of cases is 5, Range of values is 0 to 4
 12219                           ; switch strategies available:
 12220                           ; Name         Instructions Cycles
 12221                           ; simple_byte           16     9 (average)
 12222                           ;	Chosen strategy is simple_byte
 12223  000EBA  0A00               	xorlw	0	; case 0
 12224  000EBC  B4D8               	btfsc	status,2,c
 12225  000EBE  D768               	goto	i2l4561
 12226  000EC0  0A01               	xorlw	1	; case 1
 12227  000EC2  B4D8               	btfsc	status,2,c
 12228  000EC4  D77C               	goto	i2l4571
 12229  000EC6  0A03               	xorlw	3	; case 2
 12230  000EC8  B4D8               	btfsc	status,2,c
 12231  000ECA  D789               	goto	i2l4581
 12232  000ECC  0A01               	xorlw	1	; case 3
 12233  000ECE  B4D8               	btfsc	status,2,c
 12234  000ED0  D796               	goto	i2l4591
 12235  000ED2  0A07               	xorlw	7	; case 4
 12236  000ED4  B4D8               	btfsc	status,2,c
 12237  000ED6  D7A3               	goto	i2l4601
 12238  000ED8  D000               	goto	i2l245
 12239  000EDA                     i2l245:
 12240  000EDA  0012               	return		;funcret
 12241  000EDC                     __end_of_INT0_isr:
 12242                           	opt stack 0
 12243                           pclatu	equ	0xFFB
 12244                           pclath	equ	0xFFA
 12245                           tblptru	equ	0xFF8
 12246                           tblptrh	equ	0xFF7
 12247                           tblptrl	equ	0xFF6
 12248                           tablat	equ	0xFF5
 12249                           prodh	equ	0xFF4
 12250                           prodl	equ	0xFF3
 12251                           intcon	equ	0xFF2
 12252                           intcon2	equ	0xFF1
 12253                           postinc0	equ	0xFEE
 12254                           fsr0h	equ	0xFEA
 12255                           fsr0l	equ	0xFE9
 12256                           wreg	equ	0xFE8
 12257                           postdec1	equ	0xFE5
 12258                           plusw1	equ	0xFE3
 12259                           fsr1h	equ	0xFE2
 12260                           fsr1l	equ	0xFE1
 12261                           indf2	equ	0xFDF
 12262                           postinc2	equ	0xFDE
 12263                           postdec2	equ	0xFDD
 12264                           plusw2	equ	0xFDB
 12265                           fsr2h	equ	0xFDA
 12266                           fsr2l	equ	0xFD9
 12267                           status	equ	0xFD8
 12268                           
 12269 ;; *************** function _force_nec_state0 *****************
 12270 ;; Defined at:
 12271 ;;		line 45 in file "Interrupt.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;		None
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;		None
 12276 ;; Return value:  Size  Location     Type
 12277 ;;		None               void
 12278 ;; Registers used:
 12279 ;;		wreg, status,2
 12280 ;; Tracked objects:
 12281 ;;		On entry : 0/0
 12282 ;;		On exit  : 0/0
 12283 ;;		Unchanged: 0/0
 12284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12289 ;;Total ram usage:        0 bytes
 12290 ;; Hardware stack levels used:    1
 12291 ;; This function calls:
 12292 ;;		Nothing
 12293 ;; This function is called by:
 12294 ;;		_INT0_isr
 12295 ;; This function uses a non-reentrant model
 12296 ;;
 12297                           
 12298                           	psect	text74
 12299  0023EE                     __ptext74:
 12300                           	opt stack 0
 12301  0023EE                     _force_nec_state0:
 12302                           	opt stack 20
 12303                           
 12304                           ;Interrupt.c: 47: Nec_state=0;
 12305                           
 12306                           ;incstack = 0
 12307  0023EE  0E00               	movlw	0
 12308  0023F0  6E52               	movwf	_Nec_state,c
 12309                           
 12310                           ;Interrupt.c: 48: T1CONbits.TMR1ON = 0;
 12311  0023F2  90CD               	bcf	4045,0,c	;volatile
 12312  0023F4  0012               	return		;funcret
 12313  0023F6                     __end_of_force_nec_state0:
 12314                           	opt stack 0
 12315                           pclatu	equ	0xFFB
 12316                           pclath	equ	0xFFA
 12317                           tblptru	equ	0xFF8
 12318                           tblptrh	equ	0xFF7
 12319                           tblptrl	equ	0xFF6
 12320                           tablat	equ	0xFF5
 12321                           prodh	equ	0xFF4
 12322                           prodl	equ	0xFF3
 12323                           intcon	equ	0xFF2
 12324                           intcon2	equ	0xFF1
 12325                           postinc0	equ	0xFEE
 12326                           fsr0h	equ	0xFEA
 12327                           fsr0l	equ	0xFE9
 12328                           wreg	equ	0xFE8
 12329                           postdec1	equ	0xFE5
 12330                           plusw1	equ	0xFE3
 12331                           fsr1h	equ	0xFE2
 12332                           fsr1l	equ	0xFE1
 12333                           indf2	equ	0xFDF
 12334                           postinc2	equ	0xFDE
 12335                           postdec2	equ	0xFDD
 12336                           plusw2	equ	0xFDB
 12337                           fsr2h	equ	0xFDA
 12338                           fsr2l	equ	0xFD9
 12339                           status	equ	0xFD8
 12340                           pclatu	equ	0xFFB
 12341                           pclath	equ	0xFFA
 12342                           tblptru	equ	0xFF8
 12343                           tblptrh	equ	0xFF7
 12344                           tblptrl	equ	0xFF6
 12345                           tablat	equ	0xFF5
 12346                           prodh	equ	0xFF4
 12347                           prodl	equ	0xFF3
 12348                           intcon	equ	0xFF2
 12349                           intcon2	equ	0xFF1
 12350                           postinc0	equ	0xFEE
 12351                           fsr0h	equ	0xFEA
 12352                           fsr0l	equ	0xFE9
 12353                           wreg	equ	0xFE8
 12354                           postdec1	equ	0xFE5
 12355                           plusw1	equ	0xFE3
 12356                           fsr1h	equ	0xFE2
 12357                           fsr1l	equ	0xFE1
 12358                           indf2	equ	0xFDF
 12359                           postinc2	equ	0xFDE
 12360                           postdec2	equ	0xFDD
 12361                           plusw2	equ	0xFDB
 12362                           fsr2h	equ	0xFDA
 12363                           fsr2l	equ	0xFD9
 12364                           status	equ	0xFD8
 12365                           
 12366                           	psect	rparam
 12367  0000                     pclatu	equ	0xFFB
 12368                           pclath	equ	0xFFA
 12369                           tblptru	equ	0xFF8
 12370                           tblptrh	equ	0xFF7
 12371                           tblptrl	equ	0xFF6
 12372                           tablat	equ	0xFF5
 12373                           prodh	equ	0xFF4
 12374                           prodl	equ	0xFF3
 12375                           intcon	equ	0xFF2
 12376                           intcon2	equ	0xFF1
 12377                           postinc0	equ	0xFEE
 12378                           fsr0h	equ	0xFEA
 12379                           fsr0l	equ	0xFE9
 12380                           wreg	equ	0xFE8
 12381                           postdec1	equ	0xFE5
 12382                           plusw1	equ	0xFE3
 12383                           fsr1h	equ	0xFE2
 12384                           fsr1l	equ	0xFE1
 12385                           indf2	equ	0xFDF
 12386                           postinc2	equ	0xFDE
 12387                           postdec2	equ	0xFDD
 12388                           plusw2	equ	0xFDB
 12389                           fsr2h	equ	0xFDA
 12390                           fsr2l	equ	0xFD9
 12391                           status	equ	0xFD8


Data Sizes:
    Strings     249
    Constant    493
    Data        178
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     16     126
    BANK1           256      0      75
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[3]), 
		 -> STR_9(CODE[6]), STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[2]), 
		 -> STR_5(CODE[3]), STR_4(CODE[13]), STR_3(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_19(CODE[15]), STR_18(CODE[22]), STR_17(CODE[16]), STR_16(CODE[20]), 
		 -> STR_15(CODE[21]), STR_14(CODE[30]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Turn_On_Fan->_do_update_pwm
    _Turn_Off_Fan->_do_update_pwm
    _printf->___lwmod
    ___lwmod->___lwdiv
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  137752
                                             13 BANK0      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                   _Wait_Half_Second
                            ___awdiv
                             ___wmul
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        6     6      0   22517
                                              7 BANK0      6     6      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1733
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0   24020
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   12010
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0   12010
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3976
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                         16    14      2    2299
                                             30 COMRAM    16    14      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           2     0      2    2262
                                             30 COMRAM     2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   16068
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1056
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          0     0      0     616
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   16068
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0    8034
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    0     0      0     133
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     1     1      0     331
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     1      2     365
                                             19 COMRAM     3     1      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   _Wait_Half_Second
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4B       7       29.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed May 11 16:12:18 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                                 l33 1F7A  
                               l54 21DA                                 l70 1D26  
                               l38 22DA                                 l63 2068  
                               l49 2196                       ___awdiv@sign 001C  
             __size_of_Turn_On_Fan 001A                ___wmul@multiplicand 0013  
                  ??_Update_Screen 00EB                                l104 1F3C  
                              l107 2006                                l412 20CA  
                              l418 1972                                l434 1030  
                              l187 20FA                                l443 0F86  
                              l436 0F0A                                l358 1D72  
                              l471 16D8                                l368 22EA  
                              l472 1644                                l482 0C7C  
                              l474 16B4                                l475 16D6  
                              l577 2292                                l818 04F8  
                              l757 2396                                l855 0750  
                              _FAN 0050                                l883 1B38  
                              l891 214C                                l884 1B3A  
                              l885 1B44                                l886 1B46  
                              l879 1B1E                                l888 1B60  
                ?_Wait_Half_Second 0001                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 23D6  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 00FA                                _rpm 004C  
            __size_of_Turn_Off_Fan 001A                                _rps 00FC  
                              _txt 004E                       ___awmod@sign 0024  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00D8                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 20FC  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                               l1210 1776  
                   drawFastVLine@h 0019                               l1322 21B8  
                             l1307 151A                               l1084 18EA  
                             l1414 1C18                               l1271 15FC  
                             l1424 1E0A                               l1097 19F4  
                             l1274 15C8                               l1348 2172  
                   drawFastVLine@x 0022                               l1453 1FB8  
                   drawFastVLine@y 0018                               l1286 1342  
                             l1199 179E                               l6003 1B30  
                             l5301 1706                               l5311 176A  
                             l5303 1726                               l5323 1790  
                             l5307 173E                               l6131 2074  
                             l5411 21B0                               l5317 177E  
                             l5309 175E                               l5421 153A  
                             l5501 1306                               l6133 207E  
                             l6055 1F00                               l5335 2010  
                             l5423 1554                               l5271 1934  
                             l6143 116E                               l6231 186C  
                             l6065 1F16                               l6073 1F26  
                             l5337 2016                               l5329 1FFE  
                             l5505 131C                               l6321 2188  
                             l6217 0D52                               l5281 195A  
                             l6067 1F1E                               l6059 1F08  
                             l5347 2028                               l5427 1562  
                             l5515 1454                               l5283 1968  
                             l5267 18FC                               l6155 11BE  
                             l6243 1894                               l5611 0440  
                             l5603 0412                               l6315 22D4  
                             l6077 1F32                               l5533 14AE  
                             l6245 189E                               l6237 187E  
                             l5701 0650                               l5605 0420  
   I2C_Write_Cmd_Write_Data@Device 0015                               l6079 1F38  
                             l5295 16EA                               l5447 15A2  
                             l5551 1508                               l5543 14D8  
                             l6167 122E                               l6159 11DC  
                             l6263 18E0                               l6255 18C4  
                             l6247 18A6                               l6343 1CF6  
                             l5711 0684                               l5623 04C2  
                             l5615 045E                               l6511 01C2  
                             l5457 15D6                               l5473 1292  
                             l5545 14E6                               l5537 14BE  
                             l6329 21CC                               l5385 20AC  
                             l5393 1EB6                               l6169 1236  
                             l6337 204C                               l6345 1CFA  
                             l5713 06C8                               l5721 0720  
                             l5705 0668                               l5609 042A  
                             l6513 01D8                               l5299 16FA  
                             l5491 12D8                               l5467 126A  
                             l5539 14C4                               l5547 14F0  
                             l6259 18D0                               l5723 0728  
                             l5643 0540                               l5627 04CA  
                             l6291 19CE                               l6283 19A6  
                             l6275 198A                               l5469 1284  
                             l6189 0C62                               l5397 1ED2  
                             l5565 1BDC                               l5709 067C  
                             l5653 0574                               l5645 0544  
                             l5725 0734                               l6285 19B0  
                             l6461 0058                               l5495 12EE  
                             l5487 12C6                               l5903 0FFC  
                             l5911 102C                               l5567 1BE6  
                             l5719 070E                               l5663 058A  
                             l5639 0526                               l6287 19B8  
                             l6295 19DA                               l6279 1998  
                             l5497 12F4                               l5737 182C  
                             l5905 1024                               l5577 1C0C  
                             l5569 1BEE                               l5593 1DFE  
                             l5585 1DD6                               l5681 05E2  
                             l5657 057A                               l5649 0550  
                             l5673 05B4                               l5587 1DE0  
                             l5667 05AE                               l5659 057E  
                             l5675 05C6                               l6299 19EA  
                             l6483 012E                               l6467 0098  
                             l5917 1F86                               l5589 1DE8  
                             l5693 0628                               l5685 0606  
                             l6477 00EE                               l5919 1F8C  
                             l5951 16B8                               l5935 167C  
                             l5695 0630                               l5687 0610  
                             l5599 0402                               l5873 0F06  
                             l5865 0EEC                               l5961 16D2  
                             l5929 160E                               l6913 09CC  
                             l5883 0F46                               l5875 0F0E  
                             l5955 16C2                               l5947 16AA  
                             l5699 0648                               l5885 0F7A  
                             l5869 0EF8                               l6933 0A94  
                             l5991 1B16                               l5983 1B04  
                             l5895 0FA8                               l5887 0F7E  
                             l5879 0F16                               l6951 0AE0  
                             l5897 0FD0                               l6961 0B12  
                             l5995 1B22                               l5987 1B0E  
                             l6947 0AC6                               l6981 0B66  
                             l6973 0B4A                               l6965 0B26  
                             l6957 0B08                               l6977 0B58  
                             l6985 0B74                               l6995 0BA8  
                             l6989 0B9E                               STR_1 FF79  
                             STR_2 FF8D                               STR_3 FF3A  
                             STR_4 FFD0                               STR_5 FFF9  
                             STR_6 FFF3                               STR_7 FFE3  
                             STR_8 FFE8                               STR_9 FFDD  
                             u4031 1446                               u4050 1472  
                             u5030 2046                               u4055 146A  
                             u5041 1CE0                               u4510 0FDE  
                             u3720 192A                               u5407 23A4  
                             u3921 152C                               u4810 1198  
                             u4580 163C                               u3941 154A  
                             u4590 1672                               u3971 125C  
                             u3991 127A                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0044  
                     _DS1621_tempF 0046                ??_Deactivate_Buzzer 0011  
                             _date 00BD                               _main 09BC  
                             _font FD19                       ___ftpack@arg 0011  
                             _hour 005E                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 23C2                   __end_of_I2C_Read 1F3E  
                             _time 00C6                               _year 006C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 234E                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 2318  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1E60                     _Increase_Speed 2174  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 23CC                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 2232                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0EDC  
        __end_of_Deactivate_Buzzer 23DE                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 18EC  
                  drawCircle@ddF_x 0026                              STR_10 FFFC  
                  drawCircle@ddF_y 0028                              STR_11 FFF5  
                            STR_12 FFED                              STR_20 FFA0  
                            STR_13 FFF1                              STR_14 FF06  
                            STR_15 FF50                              STR_16 FF65  
                            STR_17 FFB1                              STR_18 FF24  
                            STR_19 FFC1                    __end_of___awmod 19F6  
                  __end_of___ftdiv 15FE                    __end_of___ftmul 1344  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___fttol 151C  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 1C22                    __end_of___lwmod 1E14  
                            i2l233 1AB8                              i2l245 0EDA  
                            i2l254 0E8C                              i2l255 0EA8  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1F7C                              _Rcmd1 1032  
                            _Rcmd3 1344                         _i2cHighSda 23E6  
                       _i2cHighScl 23A0                    __end_of_dpowers FEFE  
                            _color 0115                              _font2 FE18  
                            _found 005D                    __end_of_isdigit 21BA  
                            _tempC 00DC                              _tempF 00E0  
                            _month 0060                      ___ftpack@sign 0015  
                            _putch 2392                              main@j 00F2  
                __end_of_I2C_Start 2360                  __end_of_I2C_Write 2036  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8             __end_of_Increase_Speed 2198  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 19F6  
                    ??_Set_RPM_RGB 0021                       __end_of_main 0BBA  
                     __end_of_font FE18                   __end_of_Rcmd2red 1FF8  
                 ??_Decrease_Speed 0044                             ??_main 00F1  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 232A  
                       _Set_DC_RGB 2036          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0018  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 17A0  
                 __end_of___lbtoft 2174                          ??_Do_Beep 0044  
                           _DC_Txt 00D4                             i2l4601 0E1E  
                        ??_Do_Init 0016                             i2l4615 0EAE  
                           i2l4623 0EB8                             i2l4561 0D90  
                           i2l4571 0DBE                             i2l4581 0DDE  
                           i2l4591 0DFE                             i2l4567 0DBA  
                           i2l4577 0DDA                             i2l4885 1AAE  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00B7                   _force_nec_state0 23EE  
                 __end_of_delay_ms 1D7A                             _i2cAck 2360  
                 __end_of_fillRect 1EF6                   __end_of_drawChar 1032  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 2126                          ??___awdiv 001B  
                 __end_of_drawtext 124C                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 0100  
                        ??___lwmod 001C                             _buffer 012A  
                           _nec_ok 004A                             clear_0 19FC  
                           clear_1 1A08                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
                  ___awmod@divisor 0021                          ??_get_RPM 0021  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0023  
                           _printf 03F8                       drawtext@size 0040  
                           _strcpy 206A                             _strlen 1F7C  
            ___ftmul@f3_as_product 0027                __end_of_Set_RPM_RGB 1D28  
                       _Toggle_Fan 22C8                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD18                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 21FC                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 22F0                         __accesstop 0080  
          __end_of__initialization 1A6C                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 1142                      __end_of_Rcmd3 1436  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1B62  
                     __pidataBANK1 1E60                      __end_of_font2 FEF4  
                __end_of_i2cLowSda 23D6                  __end_of_i2cLowScl 23E6  
                    __end_of_putch 23A0                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                      ?_Set_DC_RGB 001F                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1B62                            ??_putch 0011  
                       __pbssBANK0 00F4                   _setup_alarm_hour 0063  
                 _setup_alarm_time 0097                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                         _alarm_time 008E  
                          ?_i2cAck 0001               Set_DC_RGB@duty_cycle 001F  
               __CFG_CCP2MX$PORTBE 000000                      ??_Turn_On_Fan 0044  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                      _Set_RPM_RGB 1CD6                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 00F8                          ?___ftpack 0011  
                        ?___lbtoft 0019                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                        ?_Toggle_Fan 0001  
                ??_Activate_Buzzer 0011                         _fillScreen 21FC  
            __end_of_Update_Screen 03F8                         _drawCircle 0BBA  
                   _init_INTERRUPT 229A                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 00CF              __end_of_fillRectangle 16DA  
                          _Do_Beep 2304                          ?_drawtext 0039  
                _DS3231_Setup_Time 1C22                            _Do_Init 1E14  
         _I2C_Write_Cmd_Write_Data 21DC         __end_of_I2C_Write_Cmd_Only 2280  
                       ??_Rcmd2red 0014                            _i2cNack 23C2  
               __end_of_TIMER1_isr 23B8                 ?_DS3231_Setup_Time 0001  
                    _write_command 2382                          _I2C_Start 234E  
                        _I2C_Write 1FF8                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __size_of_Set_DC_RGB 0034                __end_of_DS1621_Init 2266  
                __end_of_drawPixel 20CC                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 1974                            ___awdiv 1856  
                          ___awmod 1974                            ___ftdiv 151C  
                  __size_of___wmul 0028                            ___ftmul 124C  
                          ___fttol 1436                            ___lwdiv 1BC6  
                          ___lwmod 1DC8                    __size_of_chkisr 1AEA  
                        ?_spiwrite 0001                            __pcinit 19F6  
                       ??___ftpack 0016                         ??___lbtoft 001C  
                          __ramtop 1000                            _get_RPM 1F3E  
                          __ptext0 09BC                            __ptext1 1F3E  
                          __ptext2 001C                            __ptext3 1974  
                          __ptext4 22C8                            __ptext5 2218  
        __size_of_DS1621_Read_Temp 0030                            __ptext6 2232  
                          __ptext7 03F8                            __ptext8 2392  
                          __ptext9 2198                    __size_of_printf 035A  
                __end_of_init_UART 2304                __end_of_Turn_On_Fan 2232  
           __end_of_init_INTERRUPT 22B2                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF06           __end_of_force_nec_state0 23F6  
                        _T1CONbits 000FCD                            _dpowers FEF4  
            __end_of_do_update_pwm 1856                            _isdigit 2198  
                 ___awmod@dividend 001F                         _duty_cycle 005C  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 22C8  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 1C7E  
                 ??_Increase_Speed 0044                         ??_drawChar 0035  
                        _LCD_Reset 2318                      _setAddrWindow 1D7A  
                   __pintcode_body 1A76                         delay_ms@ms 0017  
             end_of_initialization 1A6C                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD18  
        __size_of_DS3231_Read_Time 0058                            int_func 1A76  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 0021                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 00EA                   drawtext@cursor_y 00E9  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 00A0  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 00A9                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00E5                         drawPixel@x 001B  
                       drawPixel@y 0018                   _Wait_Half_Second 2280  
               _Update_Screen$2723 00ED                        _DS1621_Init 224C  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0174  
                   __end_of_i2cAck 2372                        ___ftmul@exp 0026  
         DS1621_Read_Temp@Data_Ret 0016                        _Turn_On_Fan 2218  
               __end_of_i2cHighSda 23EE                 __end_of_i2cHighScl 23AC  
                   __end_of___wmul 214E                      delay_ms@count 001B  
                       _write_data 2372                      __pidataCOMRAM 23F6  
                   __end_of_chkisr 1AF2           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 22B2                         drawtext@bg 003E  
                        _Nec_code1 0051                          _i2cLowSda 23CC  
                        _i2cLowScl 23DE                     __end_of_printf 0752  
                     ??_Set_DC_RGB 0021                     __end_of_strcpy 209C  
                   __end_of_strlen 1FBA                          _Nec_state 0052  
              start_initialization 19F6             Update_Screen@neg_tempF 00EF  
       __size_of_DS3231_Setup_Time 005C            __size_of_Decrease_Speed 0022  
                  ??_write_command 0013                          _OpenUSART 1AF2  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 232A  
               __end_of_Set_DC_RGB 206A                           ??___wmul 0015  
                     ?_Set_RPM_RGB 001F                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 20CC                           ??_strcpy 0015  
                         ??_strlen 0013                       ??_Toggle_Fan 0044  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 0044         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00E4  
                      ??_LCD_Reset 001D                       _isdigit$2379 0012  
                __size_of_delay_ms 0052                           ?_Do_Beep 0001  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 1C7E                           ?_i2cNack 0001  
                __size_of_drawtext 010A                   ___lwdiv@dividend 0011  
               __end_of_Toggle_Fan 22DC                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 2126                     ??_Turn_Off_Fan 0044  
                    __pmediumconst FD18                           ?___awdiv 0017  
                         ?___awmod 001F                           ?___ftdiv 002C  
                         ?___ftmul 001D                           ?___fttol 0011  
                        __tft_type 0053                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 2266                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 209C                           ?_get_RPM 001F  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 23B8                           _I2C_Read 1EF6  
                         _I2C_Stop 233C                  _Initialize_Screen 0752  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 22F0                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FEFE  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 233C  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 0D68               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             __size_of_Update_Screen 03DC  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
                        _setup_day 0066                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC           __end_of_Wait_Half_Second 229A  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 09BC  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                       ?_init_UART 0001                     _Decrease_Speed 21BA  
                      _INTCON2bits 000FF1                          copy_data0 1A22  
                        copy_data1 1A42                          drawtext@i 00E7  
           __size_of_drawFastVLine 0088                          drawtext@x 00E4  
                        drawtext@y 0039                           _Nec_code 00F4  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 0014                       ?_DS1621_Init 0001  
                         _Rcmd2red 1FBA                   __size_of_Do_Init 004C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0048                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00BB                           __Hrparam 0000  
           __size_of_do_update_pwm 00B6                 __end_of_fillScreen 2218  
                         __Lrparam 0000                 __end_of_drawCircle 0D68  
                     ?_Turn_On_Fan 0001                   __size_of___awdiv 0096  
                 __size_of___awmod 0082                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 0052                           ___ftpack 16DA  
                         ___lbtoft 214E                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                      _Update_Screen 001C  
                   _setup_fan_temp 006D                     _setup_fan_text 00B2  
                 __size_of_isdigit 0022                           _delay_ms 1D28  
           __end_of_Decrease_Speed 21DC                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 1DC8  
                         __ptext11 1BC6                           __ptext20 1F7C  
                         __ptext12 1CD6                           __ptext21 0EDC  
                         __ptext13 2036                           __ptext30 1032  
                         __ptext22 1EAC                           __ptext14 1856  
                         __ptext31 2372                           __ptext23 18EC  
                         __ptext15 0752                           __ptext40 1AF2  
                         __ptext32 2382                           __ptext24 0BBA  
                         __ptext16 206A                           __ptext41 229A  
                         __ptext33 22DC                           __ptext25 209C  
                         __ptext17 21FC                           __ptext50 1436  
                         __ptext42 23B8                           __ptext34 2318  
                         __ptext26 1D7A                           __ptext18 15FE  
                         __ptext51 124C                           __ptext43 224C  
                         __ptext35 1D28                           __ptext27 20FC  
                         __ptext19 1142                           __ptext60 1FF8  
                         __ptext52 151C                           __ptext44 21DC  
                         __ptext36 2126                           __ptext28 1344  
                         __ptext61 233C                           __ptext53 16DA  
                         __ptext45 2266                           __ptext37 2174  
                         __ptext29 1FBA                           __ptext70 23A0  
                         __ptext62 234E                           __ptext54 2280  
                         __ptext46 21BA                           __ptext38 1E14  
                         __ptext63 1EF6                           __ptext55 23D6  
                         __ptext47 2304                           __ptext39 22F0  
                         __ptext72 23AC                           __ptext64 23C2  
                         __ptext56 232A                           __ptext48 17A0  
                         __ptext73 0D68                           __ptext65 2360  
                         __ptext57 1C22                           __ptext49 214E  
                         __ptext74 23EE                           __ptext66 22B2  
                         __ptext58 1C7E                           __ptext67 23CC  
                         __ptext59 20CC                           __ptext68 23DE  
                         __ptext69 23E6                           _fillRect 1EAC  
                         _drawChar 0EDC               __end_of_Turn_Off_Fan 224C  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 1142                         strcpy@from 0013  
                    _fillRectangle 15FE           __end_of_DS1621_Read_Temp 20FC  
                 ?_Activate_Buzzer 0001                      __size_of_main 01FE  
          __size_of_Increase_Speed 0024                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 18EC  
                        printf@idx 002F                           _spiwrite 22DC  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 1CD6  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 17A0  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   Set_RPM_RGB@F4110 0080  
                 ___lwmod@dividend 0018              __end_of_write_command 2392  
                  fillScreen@color 0024            do_update_pwm@duty_cycle 0041  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                     ??_write_data 0013                         _TIMER1_isr 23AC  
                    fillRect@color 0026                     ?_do_update_pwm 0001  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0068                       _setup_second 006A  
                  Set_RPM_RGB@temp 0021              __end_of_setAddrWindow 1DC8  
               fillRectangle@color 001B                  do_update_pwm@dc_I 0042  
                do_update_pwm@dc_f 003E                      drawChar@color 0030  
                      _setup_month 0069                     Set_RPM_RGB@rpm 001F  
               __end_of_write_data 2382          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001A  
        ?_I2C_Write_Cmd_Write_Data 0013  
