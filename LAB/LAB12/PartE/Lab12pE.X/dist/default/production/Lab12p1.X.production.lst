

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 28 16:24:03 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  0023FC                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _setup_fan_temp
   102  0023FC  4B                 	db	75
   103                           
   104                           ;initializer for _tempSecond
   105  0023FD  FF                 	db	255
   106                           
   107                           ;initializer for _wrap
   108  0023FE  01                 	db	1
   109                           
   110                           	psect	idataBANK0
   111  001B56                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for Set_RPM_RGB@F4110
   115  001B56  0001               	dw	1
   116  001B58  0003               	dw	3
   117  001B5A  0002               	dw	2
   118  001B5C  0004               	dw	4
   119  001B5E  0005               	dw	5
   120  001B60  0006               	dw	6
   121  001B62  0007               	dw	7
   122                           
   123                           ;initializer for _alarm_time
   124  001B64  30                 	db	48
   125  001B65  30                 	db	48
   126  001B66  3A                 	db	58
   127  001B67  30                 	db	48
   128  001B68  30                 	db	48
   129  001B69  3A                 	db	58
   130  001B6A  30                 	db	48
   131  001B6B  30                 	db	48
   132  001B6C  00                 	db	0
   133                           
   134                           ;initializer for _setup_alarm_time
   135  001B6D  30                 	db	48
   136  001B6E  30                 	db	48
   137  001B6F  3A                 	db	58
   138  001B70  30                 	db	48
   139  001B71  30                 	db	48
   140  001B72  3A                 	db	58
   141  001B73  30                 	db	48
   142  001B74  30                 	db	48
   143  001B75  00                 	db	0
   144                           
   145                           ;initializer for _setup_date
   146  001B76  30                 	db	48
   147  001B77  31                 	db	49
   148  001B78  2F                 	db	47
   149  001B79  30                 	db	48
   150  001B7A  31                 	db	49
   151  001B7B  2F                 	db	47
   152  001B7C  30                 	db	48
   153  001B7D  30                 	db	48
   154  001B7E  00                 	db	0
   155                           
   156                           ;initializer for _setup_time
   157  001B7F  30                 	db	48
   158  001B80  30                 	db	48
   159  001B81  3A                 	db	58
   160  001B82  30                 	db	48
   161  001B83  30                 	db	48
   162  001B84  3A                 	db	58
   163  001B85  30                 	db	48
   164  001B86  30                 	db	48
   165  001B87  00                 	db	0
   166                           
   167                           ;initializer for _setup_fan_text
   168  001B88  30                 	db	48
   169  001B89  37                 	db	55
   170  001B8A  35                 	db	53
   171  001B8B  46                 	db	70
   172  001B8C  00                 	db	0
   173                           
   174                           ;initializer for _Alarm_SW_Txt
   175  001B8D  4F                 	db	79
   176  001B8E  46                 	db	70
   177  001B8F  46                 	db	70
   178  001B90  00                 	db	0
   179                           
   180                           ;initializer for _RTC_ALARM_Txt
   181  001B91  30                 	db	48
   182  001B92  00                 	db	0
   183                           
   184                           ;initializer for _date
   185  001B93  30                 	db	48
   186  001B94  30                 	db	48
   187  001B95  2F                 	db	47
   188  001B96  30                 	db	48
   189  001B97  30                 	db	48
   190  001B98  2F                 	db	47
   191  001B99  30                 	db	48
   192  001B9A  30                 	db	48
   193  001B9B  00                 	db	0
   194                           
   195                           ;initializer for _time
   196  001B9C  30                 	db	48
   197  001B9D  30                 	db	48
   198  001B9E  3A                 	db	58
   199  001B9F  30                 	db	48
   200  001BA0  30                 	db	48
   201  001BA1  3A                 	db	58
   202  001BA2  30                 	db	48
   203  001BA3  30                 	db	48
   204  001BA4  00                 	db	0
   205                           
   206                           ;initializer for _RPM_Txt
   207  001BA5  30                 	db	48
   208  001BA6  30                 	db	48
   209  001BA7  30                 	db	48
   210  001BA8  30                 	db	48
   211  001BA9  00                 	db	0
   212                           
   213                           ;initializer for _DC_Txt
   214  001BAA  30                 	db	48
   215  001BAB  30                 	db	48
   216  001BAC  30                 	db	48
   217  001BAD  00                 	db	0
   218                           
   219                           ;initializer for _Fan_SW_Txt
   220  001BAE  4F                 	db	79
   221  001BAF  46                 	db	70
   222  001BB0  46                 	db	70
   223  001BB1  00                 	db	0
   224                           
   225                           ;initializer for _tempC
   226  001BB2  2B                 	db	43
   227  001BB3  32                 	db	50
   228  001BB4  35                 	db	53
   229  001BB5  00                 	db	0
   230                           
   231                           ;initializer for _tempF
   232  001BB6  2B                 	db	43
   233  001BB7  37                 	db	55
   234  001BB8  37                 	db	55
   235  001BB9  00                 	db	0
   236                           
   237                           	psect	idataBANK1
   238  001E54                     __pidataBANK1:
   239                           	opt stack 0
   240                           
   241                           ;initializer for _array1
   242  001E54  A2                 	db	162
   243  001E55  62                 	db	98
   244  001E56  E2                 	db	226
   245  001E57  22                 	db	34
   246  001E58  02                 	db	2
   247  001E59  C2                 	db	194
   248  001E5A  E0                 	db	224
   249  001E5B  A8                 	db	168
   250  001E5C  90                 	db	144
   251  001E5D  68                 	db	104
   252  001E5E  98                 	db	152
   253  001E5F  B0                 	db	176
   254  001E60  30                 	db	48
   255  001E61  18                 	db	24
   256  001E62  7A                 	db	122
   257  001E63  10                 	db	16
   258  001E64  38                 	db	56
   259  001E65  5A                 	db	90
   260  001E66  42                 	db	66
   261  001E67  4A                 	db	74
   262  001E68  52                 	db	82
   263                           
   264                           ;initializer for _color
   265  001E69  01                 	db	1
   266  001E6A  01                 	db	1
   267  001E6B  01                 	db	1
   268  001E6C  04                 	db	4
   269  001E6D  04                 	db	4
   270  001E6E  02                 	db	2
   271  001E6F  05                 	db	5
   272  001E70  05                 	db	5
   273  001E71  05                 	db	5
   274  001E72  07                 	db	7
   275  001E73  07                 	db	7
   276  001E74  07                 	db	7
   277  001E75  07                 	db	7
   278  001E76  07                 	db	7
   279  001E77  07                 	db	7
   280  001E78  07                 	db	7
   281  001E79  07                 	db	7
   282  001E7A  07                 	db	7
   283  001E7B  07                 	db	7
   284  001E7C  07                 	db	7
   285  001E7D  07                 	db	7
   286                           
   287                           ;initializer for _buffer
   288  001E7E  20                 	db	32
   289  001E7F  45                 	db	69
   290  001E80  43                 	db	67
   291  001E81  45                 	db	69
   292  001E82  33                 	db	51
   293  001E83  33                 	db	51
   294  001E84  30                 	db	48
   295  001E85  31                 	db	49
   296  001E86  4C                 	db	76
   297  001E87  20                 	db	32
   298  001E88  53                 	db	83
   299  001E89  70                 	db	112
   300  001E8A  27                 	db	39
   301  001E8B  32                 	db	50
   302  001E8C  32                 	db	50
   303  001E8D  20                 	db	32
   304  001E8E  4C                 	db	76
   305  001E8F  31                 	db	49
   306  001E90  32                 	db	50
   307  001E91  00                 	db	0
   308  001E92  00                 	db	0
   309  001E93  00                 	db	0
   310  001E94  00                 	db	0
   311  001E95  00                 	db	0
   312  001E96  00                 	db	0
   313  001E97  00                 	db	0
   314  001E98  00                 	db	0
   315  001E99  00                 	db	0
   316  001E9A  00                 	db	0
   317  001E9B  00                 	db	0
   318  001E9C  00                 	db	0
   319  001E9D  00                 	db	0
   320  001E9E  00                 	db	0
   321                           
   322                           	psect	mediumconst
   323  00FD18                     __pmediumconst:
   324                           	opt stack 0
   325  00FD18  00                 	db	0
   326  00FD19                     _font:
   327                           	opt stack 0
   328  00FD19  00                 	db	0
   329  00FD1A  00                 	db	0
   330  00FD1B  00                 	db	0
   331  00FD1C  00                 	db	0
   332  00FD1D  00                 	db	0
   333  00FD1E  00                 	db	0
   334  00FD1F  00                 	db	0
   335  00FD20  5F                 	db	95
   336  00FD21  00                 	db	0
   337  00FD22  00                 	db	0
   338  00FD23  00                 	db	0
   339  00FD24  07                 	db	7
   340  00FD25  00                 	db	0
   341  00FD26  07                 	db	7
   342  00FD27  00                 	db	0
   343  00FD28  14                 	db	20
   344  00FD29  7F                 	db	127
   345  00FD2A  14                 	db	20
   346  00FD2B  7F                 	db	127
   347  00FD2C  14                 	db	20
   348  00FD2D  24                 	db	36
   349  00FD2E  2A                 	db	42
   350  00FD2F  7F                 	db	127
   351  00FD30  2A                 	db	42
   352  00FD31  12                 	db	18
   353  00FD32  23                 	db	35
   354  00FD33  13                 	db	19
   355  00FD34  08                 	db	8
   356  00FD35  64                 	db	100
   357  00FD36  62                 	db	98
   358  00FD37  36                 	db	54
   359  00FD38  49                 	db	73
   360  00FD39  56                 	db	86
   361  00FD3A  20                 	db	32
   362  00FD3B  50                 	db	80
   363  00FD3C  00                 	db	0
   364  00FD3D  08                 	db	8
   365  00FD3E  07                 	db	7
   366  00FD3F  03                 	db	3
   367  00FD40  00                 	db	0
   368  00FD41  00                 	db	0
   369  00FD42  1C                 	db	28
   370  00FD43  22                 	db	34
   371  00FD44  41                 	db	65
   372  00FD45  00                 	db	0
   373  00FD46  00                 	db	0
   374  00FD47  41                 	db	65
   375  00FD48  22                 	db	34
   376  00FD49  1C                 	db	28
   377  00FD4A  00                 	db	0
   378  00FD4B  2A                 	db	42
   379  00FD4C  1C                 	db	28
   380  00FD4D  7F                 	db	127
   381  00FD4E  1C                 	db	28
   382  00FD4F  2A                 	db	42
   383  00FD50  08                 	db	8
   384  00FD51  08                 	db	8
   385  00FD52  3E                 	db	62
   386  00FD53  08                 	db	8
   387  00FD54  08                 	db	8
   388  00FD55  00                 	db	0
   389  00FD56  80                 	db	128
   390  00FD57  70                 	db	112
   391  00FD58  30                 	db	48
   392  00FD59  00                 	db	0
   393  00FD5A  08                 	db	8
   394  00FD5B  08                 	db	8
   395  00FD5C  08                 	db	8
   396  00FD5D  08                 	db	8
   397  00FD5E  08                 	db	8
   398  00FD5F  00                 	db	0
   399  00FD60  00                 	db	0
   400  00FD61  60                 	db	96
   401  00FD62  60                 	db	96
   402  00FD63  00                 	db	0
   403  00FD64  20                 	db	32
   404  00FD65  10                 	db	16
   405  00FD66  08                 	db	8
   406  00FD67  04                 	db	4
   407  00FD68  02                 	db	2
   408  00FD69  3E                 	db	62
   409  00FD6A  51                 	db	81
   410  00FD6B  49                 	db	73
   411  00FD6C  45                 	db	69
   412  00FD6D  3E                 	db	62
   413  00FD6E  00                 	db	0
   414  00FD6F  42                 	db	66
   415  00FD70  7F                 	db	127
   416  00FD71  40                 	db	64
   417  00FD72  00                 	db	0
   418  00FD73  72                 	db	114
   419  00FD74  49                 	db	73
   420  00FD75  49                 	db	73
   421  00FD76  49                 	db	73
   422  00FD77  46                 	db	70
   423  00FD78  21                 	db	33
   424  00FD79  41                 	db	65
   425  00FD7A  49                 	db	73
   426  00FD7B  4D                 	db	77
   427  00FD7C  33                 	db	51
   428  00FD7D  18                 	db	24
   429  00FD7E  14                 	db	20
   430  00FD7F  12                 	db	18
   431  00FD80  7F                 	db	127
   432  00FD81  10                 	db	16
   433  00FD82  27                 	db	39
   434  00FD83  45                 	db	69
   435  00FD84  45                 	db	69
   436  00FD85  45                 	db	69
   437  00FD86  39                 	db	57
   438  00FD87  3C                 	db	60
   439  00FD88  4A                 	db	74
   440  00FD89  49                 	db	73
   441  00FD8A  49                 	db	73
   442  00FD8B  31                 	db	49
   443  00FD8C  41                 	db	65
   444  00FD8D  21                 	db	33
   445  00FD8E  11                 	db	17
   446  00FD8F  09                 	db	9
   447  00FD90  07                 	db	7
   448  00FD91  36                 	db	54
   449  00FD92  49                 	db	73
   450  00FD93  49                 	db	73
   451  00FD94  49                 	db	73
   452  00FD95  36                 	db	54
   453  00FD96  46                 	db	70
   454  00FD97  49                 	db	73
   455  00FD98  49                 	db	73
   456  00FD99  29                 	db	41
   457  00FD9A  1E                 	db	30
   458  00FD9B  00                 	db	0
   459  00FD9C  00                 	db	0
   460  00FD9D  14                 	db	20
   461  00FD9E  00                 	db	0
   462  00FD9F  00                 	db	0
   463  00FDA0  00                 	db	0
   464  00FDA1  40                 	db	64
   465  00FDA2  34                 	db	52
   466  00FDA3  00                 	db	0
   467  00FDA4  00                 	db	0
   468  00FDA5  00                 	db	0
   469  00FDA6  08                 	db	8
   470  00FDA7  14                 	db	20
   471  00FDA8  22                 	db	34
   472  00FDA9  41                 	db	65
   473  00FDAA  14                 	db	20
   474  00FDAB  14                 	db	20
   475  00FDAC  14                 	db	20
   476  00FDAD  14                 	db	20
   477  00FDAE  14                 	db	20
   478  00FDAF  00                 	db	0
   479  00FDB0  41                 	db	65
   480  00FDB1  22                 	db	34
   481  00FDB2  14                 	db	20
   482  00FDB3  08                 	db	8
   483  00FDB4  02                 	db	2
   484  00FDB5  01                 	db	1
   485  00FDB6  59                 	db	89
   486  00FDB7  09                 	db	9
   487  00FDB8  06                 	db	6
   488  00FDB9  3E                 	db	62
   489  00FDBA  41                 	db	65
   490  00FDBB  5D                 	db	93
   491  00FDBC  59                 	db	89
   492  00FDBD  4E                 	db	78
   493  00FDBE  7C                 	db	124
   494  00FDBF  12                 	db	18
   495  00FDC0  11                 	db	17
   496  00FDC1  12                 	db	18
   497  00FDC2  7C                 	db	124
   498  00FDC3  7F                 	db	127
   499  00FDC4  49                 	db	73
   500  00FDC5  49                 	db	73
   501  00FDC6  49                 	db	73
   502  00FDC7  36                 	db	54
   503  00FDC8  3E                 	db	62
   504  00FDC9  41                 	db	65
   505  00FDCA  41                 	db	65
   506  00FDCB  41                 	db	65
   507  00FDCC  22                 	db	34
   508  00FDCD  7F                 	db	127
   509  00FDCE  41                 	db	65
   510  00FDCF  41                 	db	65
   511  00FDD0  41                 	db	65
   512  00FDD1  3E                 	db	62
   513  00FDD2  7F                 	db	127
   514  00FDD3  49                 	db	73
   515  00FDD4  49                 	db	73
   516  00FDD5  49                 	db	73
   517  00FDD6  41                 	db	65
   518  00FDD7  7F                 	db	127
   519  00FDD8  09                 	db	9
   520  00FDD9  09                 	db	9
   521  00FDDA  09                 	db	9
   522  00FDDB  01                 	db	1
   523  00FDDC  3E                 	db	62
   524  00FDDD  41                 	db	65
   525  00FDDE  41                 	db	65
   526  00FDDF  51                 	db	81
   527  00FDE0  73                 	db	115
   528  00FDE1  7F                 	db	127
   529  00FDE2  08                 	db	8
   530  00FDE3  08                 	db	8
   531  00FDE4  08                 	db	8
   532  00FDE5  7F                 	db	127
   533  00FDE6  00                 	db	0
   534  00FDE7  41                 	db	65
   535  00FDE8  7F                 	db	127
   536  00FDE9  41                 	db	65
   537  00FDEA  00                 	db	0
   538  00FDEB  20                 	db	32
   539  00FDEC  40                 	db	64
   540  00FDED  41                 	db	65
   541  00FDEE  3F                 	db	63
   542  00FDEF  01                 	db	1
   543  00FDF0  7F                 	db	127
   544  00FDF1  08                 	db	8
   545  00FDF2  14                 	db	20
   546  00FDF3  22                 	db	34
   547  00FDF4  41                 	db	65
   548  00FDF5  7F                 	db	127
   549  00FDF6  40                 	db	64
   550  00FDF7  40                 	db	64
   551  00FDF8  40                 	db	64
   552  00FDF9  40                 	db	64
   553  00FDFA  7F                 	db	127
   554  00FDFB  02                 	db	2
   555  00FDFC  1C                 	db	28
   556  00FDFD  02                 	db	2
   557  00FDFE  7F                 	db	127
   558  00FDFF  7F                 	db	127
   559  00FE00  04                 	db	4
   560  00FE01  08                 	db	8
   561  00FE02  10                 	db	16
   562  00FE03  7F                 	db	127
   563  00FE04  3E                 	db	62
   564  00FE05  41                 	db	65
   565  00FE06  41                 	db	65
   566  00FE07  41                 	db	65
   567  00FE08  3E                 	db	62
   568  00FE09  7F                 	db	127
   569  00FE0A  09                 	db	9
   570  00FE0B  09                 	db	9
   571  00FE0C  09                 	db	9
   572  00FE0D  06                 	db	6
   573  00FE0E  3E                 	db	62
   574  00FE0F  41                 	db	65
   575  00FE10  51                 	db	81
   576  00FE11  21                 	db	33
   577  00FE12  5E                 	db	94
   578  00FE13  7F                 	db	127
   579  00FE14  09                 	db	9
   580  00FE15  19                 	db	25
   581  00FE16  29                 	db	41
   582  00FE17  46                 	db	70
   583  00FE18                     __end_of_font:
   584                           	opt stack 0
   585  00FE18                     _font2:
   586                           	opt stack 0
   587  00FE18  26                 	db	38
   588  00FE19  49                 	db	73
   589  00FE1A  49                 	db	73
   590  00FE1B  49                 	db	73
   591  00FE1C  32                 	db	50
   592  00FE1D  03                 	db	3
   593  00FE1E  01                 	db	1
   594  00FE1F  7F                 	db	127
   595  00FE20  01                 	db	1
   596  00FE21  03                 	db	3
   597  00FE22  3F                 	db	63
   598  00FE23  40                 	db	64
   599  00FE24  40                 	db	64
   600  00FE25  40                 	db	64
   601  00FE26  3F                 	db	63
   602  00FE27  1F                 	db	31
   603  00FE28  20                 	db	32
   604  00FE29  40                 	db	64
   605  00FE2A  20                 	db	32
   606  00FE2B  1F                 	db	31
   607  00FE2C  3F                 	db	63
   608  00FE2D  40                 	db	64
   609  00FE2E  38                 	db	56
   610  00FE2F  40                 	db	64
   611  00FE30  3F                 	db	63
   612  00FE31  63                 	db	99
   613  00FE32  14                 	db	20
   614  00FE33  08                 	db	8
   615  00FE34  14                 	db	20
   616  00FE35  63                 	db	99
   617  00FE36  03                 	db	3
   618  00FE37  04                 	db	4
   619  00FE38  78                 	db	120
   620  00FE39  04                 	db	4
   621  00FE3A  03                 	db	3
   622  00FE3B  61                 	db	97
   623  00FE3C  59                 	db	89
   624  00FE3D  49                 	db	73
   625  00FE3E  4D                 	db	77
   626  00FE3F  43                 	db	67
   627  00FE40  00                 	db	0
   628  00FE41  7F                 	db	127
   629  00FE42  41                 	db	65
   630  00FE43  41                 	db	65
   631  00FE44  41                 	db	65
   632  00FE45  02                 	db	2
   633  00FE46  04                 	db	4
   634  00FE47  08                 	db	8
   635  00FE48  10                 	db	16
   636  00FE49  20                 	db	32
   637  00FE4A  00                 	db	0
   638  00FE4B  41                 	db	65
   639  00FE4C  41                 	db	65
   640  00FE4D  41                 	db	65
   641  00FE4E  7F                 	db	127
   642  00FE4F  04                 	db	4
   643  00FE50  02                 	db	2
   644  00FE51  01                 	db	1
   645  00FE52  02                 	db	2
   646  00FE53  04                 	db	4
   647  00FE54  40                 	db	64
   648  00FE55  40                 	db	64
   649  00FE56  40                 	db	64
   650  00FE57  40                 	db	64
   651  00FE58  40                 	db	64
   652  00FE59  00                 	db	0
   653  00FE5A  03                 	db	3
   654  00FE5B  07                 	db	7
   655  00FE5C  08                 	db	8
   656  00FE5D  00                 	db	0
   657  00FE5E  20                 	db	32
   658  00FE5F  54                 	db	84
   659  00FE60  54                 	db	84
   660  00FE61  78                 	db	120
   661  00FE62  40                 	db	64
   662  00FE63  7F                 	db	127
   663  00FE64  28                 	db	40
   664  00FE65  44                 	db	68
   665  00FE66  44                 	db	68
   666  00FE67  38                 	db	56
   667  00FE68  38                 	db	56
   668  00FE69  44                 	db	68
   669  00FE6A  44                 	db	68
   670  00FE6B  44                 	db	68
   671  00FE6C  28                 	db	40
   672  00FE6D  38                 	db	56
   673  00FE6E  44                 	db	68
   674  00FE6F  44                 	db	68
   675  00FE70  28                 	db	40
   676  00FE71  7F                 	db	127
   677  00FE72  38                 	db	56
   678  00FE73  54                 	db	84
   679  00FE74  54                 	db	84
   680  00FE75  54                 	db	84
   681  00FE76  18                 	db	24
   682  00FE77  00                 	db	0
   683  00FE78  08                 	db	8
   684  00FE79  7E                 	db	126
   685  00FE7A  09                 	db	9
   686  00FE7B  02                 	db	2
   687  00FE7C  18                 	db	24
   688  00FE7D  A4                 	db	164
   689  00FE7E  A4                 	db	164
   690  00FE7F  9C                 	db	156
   691  00FE80  78                 	db	120
   692  00FE81  7F                 	db	127
   693  00FE82  08                 	db	8
   694  00FE83  04                 	db	4
   695  00FE84  04                 	db	4
   696  00FE85  78                 	db	120
   697  00FE86  00                 	db	0
   698  00FE87  44                 	db	68
   699  00FE88  7D                 	db	125
   700  00FE89  40                 	db	64
   701  00FE8A  00                 	db	0
   702  00FE8B  20                 	db	32
   703  00FE8C  40                 	db	64
   704  00FE8D  40                 	db	64
   705  00FE8E  3D                 	db	61
   706  00FE8F  00                 	db	0
   707  00FE90  7F                 	db	127
   708  00FE91  10                 	db	16
   709  00FE92  28                 	db	40
   710  00FE93  44                 	db	68
   711  00FE94  00                 	db	0
   712  00FE95  00                 	db	0
   713  00FE96  41                 	db	65
   714  00FE97  7F                 	db	127
   715  00FE98  40                 	db	64
   716  00FE99  00                 	db	0
   717  00FE9A  7C                 	db	124
   718  00FE9B  04                 	db	4
   719  00FE9C  78                 	db	120
   720  00FE9D  04                 	db	4
   721  00FE9E  78                 	db	120
   722  00FE9F  7C                 	db	124
   723  00FEA0  08                 	db	8
   724  00FEA1  04                 	db	4
   725  00FEA2  04                 	db	4
   726  00FEA3  78                 	db	120
   727  00FEA4  38                 	db	56
   728  00FEA5  44                 	db	68
   729  00FEA6  44                 	db	68
   730  00FEA7  44                 	db	68
   731  00FEA8  38                 	db	56
   732  00FEA9  FC                 	db	252
   733  00FEAA  18                 	db	24
   734  00FEAB  24                 	db	36
   735  00FEAC  24                 	db	36
   736  00FEAD  18                 	db	24
   737  00FEAE  18                 	db	24
   738  00FEAF  24                 	db	36
   739  00FEB0  24                 	db	36
   740  00FEB1  18                 	db	24
   741  00FEB2  FC                 	db	252
   742  00FEB3  7C                 	db	124
   743  00FEB4  08                 	db	8
   744  00FEB5  04                 	db	4
   745  00FEB6  04                 	db	4
   746  00FEB7  08                 	db	8
   747  00FEB8  48                 	db	72
   748  00FEB9  54                 	db	84
   749  00FEBA  54                 	db	84
   750  00FEBB  54                 	db	84
   751  00FEBC  24                 	db	36
   752  00FEBD  04                 	db	4
   753  00FEBE  04                 	db	4
   754  00FEBF  3F                 	db	63
   755  00FEC0  44                 	db	68
   756  00FEC1  24                 	db	36
   757  00FEC2  3C                 	db	60
   758  00FEC3  40                 	db	64
   759  00FEC4  40                 	db	64
   760  00FEC5  20                 	db	32
   761  00FEC6  7C                 	db	124
   762  00FEC7  1C                 	db	28
   763  00FEC8  20                 	db	32
   764  00FEC9  40                 	db	64
   765  00FECA  20                 	db	32
   766  00FECB  1C                 	db	28
   767  00FECC  3C                 	db	60
   768  00FECD  40                 	db	64
   769  00FECE  30                 	db	48
   770  00FECF  40                 	db	64
   771  00FED0  3C                 	db	60
   772  00FED1  44                 	db	68
   773  00FED2  28                 	db	40
   774  00FED3  10                 	db	16
   775  00FED4  28                 	db	40
   776  00FED5  44                 	db	68
   777  00FED6  4C                 	db	76
   778  00FED7  90                 	db	144
   779  00FED8  90                 	db	144
   780  00FED9  90                 	db	144
   781  00FEDA  7C                 	db	124
   782  00FEDB  44                 	db	68
   783  00FEDC  64                 	db	100
   784  00FEDD  54                 	db	84
   785  00FEDE  4C                 	db	76
   786  00FEDF  44                 	db	68
   787  00FEE0  00                 	db	0
   788  00FEE1  08                 	db	8
   789  00FEE2  36                 	db	54
   790  00FEE3  41                 	db	65
   791  00FEE4  00                 	db	0
   792  00FEE5  00                 	db	0
   793  00FEE6  00                 	db	0
   794  00FEE7  77                 	db	119
   795  00FEE8  00                 	db	0
   796  00FEE9  00                 	db	0
   797  00FEEA  00                 	db	0
   798  00FEEB  41                 	db	65
   799  00FEEC  36                 	db	54
   800  00FEED  08                 	db	8
   801  00FEEE  00                 	db	0
   802  00FEEF  02                 	db	2
   803  00FEF0  01                 	db	1
   804  00FEF1  02                 	db	2
   805  00FEF2  04                 	db	4
   806  00FEF3  02                 	db	2
   807  00FEF4                     __end_of_font2:
   808                           	opt stack 0
   809  00FEF4                     _dpowers:
   810                           	opt stack 0
   811  00FEF4  0001               	dw	1
   812  00FEF6  000A               	dw	10
   813  00FEF8  0064               	dw	100
   814  00FEFA  03E8               	dw	1000
   815  00FEFC  2710               	dw	10000
   816  00FEFE                     __end_of_dpowers:
   817                           	opt stack 0
   818  00FEFE                     _hexpowers:
   819                           	opt stack 0
   820  00FEFE  0001               	dw	1
   821  00FF00  0010               	dw	16
   822  00FF02  0100               	dw	256
   823  00FF04  1000               	dw	4096
   824  00FF06                     __end_of_hexpowers:
   825                           	opt stack 0
   826  0000                     _ADCON1	set	4033
   827  0000                     _CCP1CON	set	4029
   828  0000                     _CCP2CON	set	4026
   829  0000                     _CCPR1L	set	4030
   830  0000                     _CCPR2L	set	4027
   831  0000                     _INTCON2bits	set	4081
   832  0000                     _INTCONbits	set	4082
   833  0000                     _OSCCON	set	4051
   834  0000                     _PIE1bits	set	3997
   835  0000                     _PIR1bits	set	3998
   836  0000                     _PORTAbits	set	3968
   837  0000                     _PORTBbits	set	3969
   838  0000                     _PORTCbits	set	3970
   839  0000                     _PORTD	set	3971
   840  0000                     _PORTDbits	set	3971
   841  0000                     _PORTE	set	3972
   842  0000                     _PR2	set	4043
   843  0000                     _RCSTA	set	4011
   844  0000                     _RCSTAbits	set	4011
   845  0000                     _SPBRG	set	4015
   846  0000                     _SPBRGH	set	4016
   847  0000                     _SSPBUF	set	4041
   848  0000                     _SSPCON1	set	4038
   849  0000                     _SSPSTAT	set	4039
   850  0000                     _SSPSTATbits	set	4039
   851  0000                     _T0CON	set	4053
   852  0000                     _T0CONbits	set	4053
   853  0000                     _T1CON	set	4045
   854  0000                     _T1CONbits	set	4045
   855  0000                     _T2CON	set	4042
   856  0000                     _T3CON	set	4017
   857  0000                     _TMR0H	set	4055
   858  0000                     _TMR0L	set	4054
   859  0000                     _TMR1H	set	4047
   860  0000                     _TMR1L	set	4046
   861  0000                     _TMR3L	set	4018
   862  0000                     _TRISA	set	3986
   863  0000                     _TRISB	set	3987
   864  0000                     _TRISBbits	set	3987
   865  0000                     _TRISC	set	3988
   866  0000                     _TRISCbits	set	3988
   867  0000                     _TRISD	set	3989
   868  0000                     _TRISDbits	set	3989
   869  0000                     _TRISE	set	3990
   870  0000                     _TXREG	set	4013
   871  0000                     _TXSTA	set	4012
   872  0000                     _TXSTAbits	set	4012
   873  0000                     _RBPU	set	32655
   874  0000                     _TRMT	set	32097
   875  00FF06                     STR_3:
   876  00FF06  25                 	db	37
   877  00FF07  30                 	db	48	;'0'
   878  00FF08  32                 	db	50	;'2'
   879  00FF09  78                 	db	120	;'x'
   880  00FF0A  3A                 	db	58	;':'
   881  00FF0B  25                 	db	37
   882  00FF0C  30                 	db	48	;'0'
   883  00FF0D  32                 	db	50	;'2'
   884  00FF0E  78                 	db	120	;'x'
   885  00FF0F  3A                 	db	58	;':'
   886  00FF10  25                 	db	37
   887  00FF11  30                 	db	48	;'0'
   888  00FF12  32                 	db	50	;'2'
   889  00FF13  78                 	db	120	;'x'
   890  00FF14  20                 	db	32
   891  00FF15  25                 	db	37
   892  00FF16  30                 	db	48	;'0'
   893  00FF17  32                 	db	50	;'2'
   894  00FF18  78                 	db	120	;'x'
   895  00FF19  2F                 	db	47
   896  00FF1A  25                 	db	37
   897  00FF1B  30                 	db	48	;'0'
   898  00FF1C  32                 	db	50	;'2'
   899  00FF1D  78                 	db	120	;'x'
   900  00FF1E  2F                 	db	47
   901  00FF1F  25                 	db	37
   902  00FF20  30                 	db	48	;'0'
   903  00FF21  32                 	db	50	;'2'
   904  00FF22  78                 	db	120	;'x'
   905  00FF23  00                 	db	0
   906  00FF24                     STR_9:
   907  00FF24  45                 	db	69	;'E'
   908  00FF25  43                 	db	67	;'C'
   909  00FF26  45                 	db	69	;'E'
   910  00FF27  33                 	db	51	;'3'
   911  00FF28  33                 	db	51	;'3'
   912  00FF29  30                 	db	48	;'0'
   913  00FF2A  31                 	db	49	;'1'
   914  00FF2B  4C                 	db	76	;'L'
   915  00FF2C  20                 	db	32
   916  00FF2D  53                 	db	83	;'S'
   917  00FF2E  70                 	db	112	;'p'
   918  00FF2F  72                 	db	114	;'r'
   919  00FF30  69                 	db	105	;'i'
   920  00FF31  6E                 	db	110	;'n'
   921  00FF32  67                 	db	103	;'g'
   922  00FF33  20                 	db	32
   923  00FF34  32                 	db	50	;'2'
   924  00FF35  32                 	db	50	;'2'
   925  00FF36  2D                 	db	45
   926  00FF37  53                 	db	83	;'S'
   927  00FF38  31                 	db	49	;'1'
   928  00FF39  00                 	db	0
   929  00FF3A                     STR_7:
   930  00FF3A  43                 	db	67	;'C'
   931  00FF3B  61                 	db	97	;'a'
   932  00FF3C  6E                 	db	110	;'n'
   933  00FF3D  6E                 	db	110	;'n'
   934  00FF3E  6F                 	db	111	;'o'
   935  00FF3F  74                 	db	116	;'t'
   936  00FF40  20                 	db	32
   937  00FF41  66                 	db	102	;'f'
   938  00FF42  69                 	db	105	;'i'
   939  00FF43  6E                 	db	110	;'n'
   940  00FF44  64                 	db	100	;'d'
   941  00FF45  20                 	db	32
   942  00FF46  62                 	db	98	;'b'
   943  00FF47  75                 	db	117	;'u'
   944  00FF48  74                 	db	116	;'t'
   945  00FF49  74                 	db	116	;'t'
   946  00FF4A  6F                 	db	111	;'o'
   947  00FF4B  6E                 	db	110	;'n'
   948  00FF4C  20                 	db	32
   949  00FF4D  0D                 	db	13
   950  00FF4E  0A                 	db	10
   951  00FF4F  00                 	db	0
   952  00FF50                     STR_4:
   953  00FF50  20                 	db	32
   954  00FF51  54                 	db	84	;'T'
   955  00FF52  65                 	db	101	;'e'
   956  00FF53  6D                 	db	109	;'m'
   957  00FF54  70                 	db	112	;'p'
   958  00FF55  20                 	db	32
   959  00FF56  3D                 	db	61	;'='
   960  00FF57  20                 	db	32
   961  00FF58  25                 	db	37
   962  00FF59  64                 	db	100	;'d'
   963  00FF5A  20                 	db	32
   964  00FF5B  43                 	db	67	;'C'
   965  00FF5C  20                 	db	32
   966  00FF5D  3D                 	db	61	;'='
   967  00FF5E  20                 	db	32
   968  00FF5F  25                 	db	37
   969  00FF60  64                 	db	100	;'d'
   970  00FF61  20                 	db	32
   971  00FF62  46                 	db	70	;'F'
   972  00FF63  20                 	db	32
   973  00FF64  00                 	db	0
   974  00FF65                     STR_5:
   975  00FF65  52                 	db	82	;'R'
   976  00FF66  50                 	db	80	;'P'
   977  00FF67  4D                 	db	77	;'M'
   978  00FF68  20                 	db	32
   979  00FF69  3D                 	db	61	;'='
   980  00FF6A  20                 	db	32
   981  00FF6B  25                 	db	37
   982  00FF6C  64                 	db	100	;'d'
   983  00FF6D  20                 	db	32
   984  00FF6E  20                 	db	32
   985  00FF6F  64                 	db	100	;'d'
   986  00FF70  63                 	db	99	;'c'
   987  00FF71  20                 	db	32
   988  00FF72  3D                 	db	61	;'='
   989  00FF73  20                 	db	32
   990  00FF74  25                 	db	37
   991  00FF75  64                 	db	100	;'d'
   992  00FF76  0D                 	db	13
   993  00FF77  0A                 	db	10
   994  00FF78  00                 	db	0
   995  00FF79                     STR_1:
   996  00FF79  46                 	db	70	;'F'
   997  00FF7A  61                 	db	97	;'a'
   998  00FF7B  6E                 	db	110	;'n'
   999  00FF7C  20                 	db	32
  1000  00FF7D  69                 	db	105	;'i'
  1001  00FF7E  73                 	db	115	;'s'
  1002  00FF7F  20                 	db	32
  1003  00FF80  74                 	db	116	;'t'
  1004  00FF81  75                 	db	117	;'u'
  1005  00FF82  72                 	db	114	;'r'
  1006  00FF83  6E                 	db	110	;'n'
  1007  00FF84  65                 	db	101	;'e'
  1008  00FF85  64                 	db	100	;'d'
  1009  00FF86  20                 	db	32
  1010  00FF87  6F                 	db	111	;'o'
  1011  00FF88  66                 	db	102	;'f'
  1012  00FF89  66                 	db	102	;'f'
  1013  00FF8A  0D                 	db	13
  1014  00FF8B  0A                 	db	10
  1015  00FF8C  00                 	db	0
  1016  00FF8D                     STR_2:
  1017  00FF8D  46                 	db	70	;'F'
  1018  00FF8E  61                 	db	97	;'a'
  1019  00FF8F  6E                 	db	110	;'n'
  1020  00FF90  20                 	db	32
  1021  00FF91  69                 	db	105	;'i'
  1022  00FF92  73                 	db	115	;'s'
  1023  00FF93  20                 	db	32
  1024  00FF94  74                 	db	116	;'t'
  1025  00FF95  75                 	db	117	;'u'
  1026  00FF96  72                 	db	114	;'r'
  1027  00FF97  6E                 	db	110	;'n'
  1028  00FF98  65                 	db	101	;'e'
  1029  00FF99  64                 	db	100	;'d'
  1030  00FF9A  20                 	db	32
  1031  00FF9B  6F                 	db	111	;'o'
  1032  00FF9C  6E                 	db	110	;'n'
  1033  00FF9D  0D                 	db	13
  1034  00FF9E  0A                 	db	10
  1035  00FF9F  00                 	db	0
  1036  00FFA0                     STR_20:
  1037  00FFA0  30                 	db	48	;'0'
  1038  00FFA1  31                 	db	49	;'1'
  1039  00FFA2  32                 	db	50	;'2'
  1040  00FFA3  33                 	db	51	;'3'
  1041  00FFA4  34                 	db	52	;'4'
  1042  00FFA5  35                 	db	53	;'5'
  1043  00FFA6  36                 	db	54	;'6'
  1044  00FFA7  37                 	db	55	;'7'
  1045  00FFA8  38                 	db	56	;'8'
  1046  00FFA9  39                 	db	57	;'9'
  1047  00FFAA  61                 	db	97	;'a'
  1048  00FFAB  62                 	db	98	;'b'
  1049  00FFAC  63                 	db	99	;'c'
  1050  00FFAD  64                 	db	100	;'d'
  1051  00FFAE  65                 	db	101	;'e'
  1052  00FFAF  66                 	db	102	;'f'
  1053  00FFB0  00                 	db	0
  1054  00FFB1                     STR_6:
  1055  00FFB1  4E                 	db	78	;'N'
  1056  00FFB2  45                 	db	69	;'E'
  1057  00FFB3  43                 	db	67	;'C'
  1058  00FFB4  5F                 	db	95	;'_'
  1059  00FFB5  43                 	db	67	;'C'
  1060  00FFB6  6F                 	db	111	;'o'
  1061  00FFB7  64                 	db	100	;'d'
  1062  00FFB8  65                 	db	101	;'e'
  1063  00FFB9  20                 	db	32
  1064  00FFBA  3D                 	db	61	;'='
  1065  00FFBB  20                 	db	32
  1066  00FFBC  25                 	db	37
  1067  00FFBD  78                 	db	120	;'x'
  1068  00FFBE  0D                 	db	13
  1069  00FFBF  0A                 	db	10
  1070  00FFC0  00                 	db	0
  1071  00FFC1                     STR_8:
  1072  00FFC1  62                 	db	98	;'b'
  1073  00FFC2  75                 	db	117	;'u'
  1074  00FFC3  74                 	db	116	;'t'
  1075  00FFC4  74                 	db	116	;'t'
  1076  00FFC5  6F                 	db	111	;'o'
  1077  00FFC6  6E                 	db	110	;'n'
  1078  00FFC7  20                 	db	32
  1079  00FFC8  3D                 	db	61	;'='
  1080  00FFC9  20                 	db	32
  1081  00FFCA  25                 	db	37
  1082  00FFCB  64                 	db	100	;'d'
  1083  00FFCC  20                 	db	32
  1084  00FFCD  0D                 	db	13
  1085  00FFCE  0A                 	db	10
  1086  00FFCF  00                 	db	0
  1087  00FFD0                     STR_10:
  1088  00FFD0  54                 	db	84	;'T'
  1089  00FFD1  65                 	db	101	;'e'
  1090  00FFD2  6D                 	db	109	;'m'
  1091  00FFD3  70                 	db	112	;'p'
  1092  00FFD4  65                 	db	101	;'e'
  1093  00FFD5  72                 	db	114	;'r'
  1094  00FFD6  61                 	db	97	;'a'
  1095  00FFD7  74                 	db	116	;'t'
  1096  00FFD8  75                 	db	117	;'u'
  1097  00FFD9  72                 	db	114	;'r'
  1098  00FFDA  65                 	db	101	;'e'
  1099  00FFDB  3A                 	db	58	;':'
  1100  00FFDC  00                 	db	0
  1101  00FFDD                     STR_15:
  1102  00FFDD  20                 	db	32
  1103  00FFDE  20                 	db	32
  1104  00FFDF  46                 	db	70	;'F'
  1105  00FFE0  41                 	db	65	;'A'
  1106  00FFE1  4E                 	db	78	;'N'
  1107  00FFE2  00                 	db	0
  1108  00FFE3                     STR_13:
  1109  00FFE3  54                 	db	84	;'T'
  1110  00FFE4  69                 	db	105	;'i'
  1111  00FFE5  6D                 	db	109	;'m'
  1112  00FFE6  65                 	db	101	;'e'
  1113  00FFE7  00                 	db	0
  1114  00FFE8                     STR_14:
  1115  00FFE8  44                 	db	68	;'D'
  1116  00FFE9  61                 	db	97	;'a'
  1117  00FFEA  74                 	db	116	;'t'
  1118  00FFEB  65                 	db	101	;'e'
  1119  00FFEC  00                 	db	0
  1120  00FFED                     STR_18:
  1121  00FFED  4F                 	db	79	;'O'
  1122  00FFEE  4E                 	db	78	;'N'
  1123  00FFEF  20                 	db	32
  1124  00FFF0  00                 	db	0
  1125  00FFF1                     STR_19:
  1126  00FFF1  4F                 	db	79	;'O'
  1127  00FFF2  46                 	db	70	;'F'
  1128  00FFF3  46                 	db	70	;'F'
  1129  00FFF4  00                 	db	0
  1130  00FFF5                     STR_17:
  1131  00FFF5  52                 	db	82	;'R'
  1132  00FFF6  50                 	db	80	;'P'
  1133  00FFF7  4D                 	db	77	;'M'
  1134  00FFF8  00                 	db	0
  1135  00FFF9                     STR_11:
  1136  00FFF9  43                 	db	67	;'C'
  1137  00FFFA  2F                 	db	47
  1138  00FFFB  00                 	db	0
  1139  00FFFC                     STR_16:
  1140  00FFFC  44                 	db	68	;'D'
  1141  00FFFD  43                 	db	67	;'C'
  1142  00FFFE  00                 	db	0
  1143  0000                     
  1144                           ; #config settings
  1145  00FFFF  00                 	db	0	; dummy byte at the end
  1146  0000                     
  1147                           	psect	cinit
  1148  0019EA                     __pcinit:
  1149                           	opt stack 0
  1150  0019EA                     start_initialization:
  1151                           	opt stack 0
  1152  0019EA                     __initialization:
  1153                           	opt stack 0
  1154                           
  1155                           ; Clear objects allocated to BANK0 (10 bytes)
  1156  0019EA  EE00  F0F4         	lfsr	0,__pbssBANK0
  1157  0019EE  0E0A               	movlw	10
  1158  0019F0                     clear_0:
  1159  0019F0  6AEE               	clrf	postinc0,c
  1160  0019F2  06E8               	decf	wreg,f,c
  1161  0019F4  E1FD               	bnz	clear_0
  1162                           
  1163                           ; Clear objects allocated to COMRAM (41 bytes)
  1164  0019F6  EE00  F044         	lfsr	0,__pbssCOMRAM
  1165  0019FA  0E29               	movlw	41
  1166  0019FC                     clear_1:
  1167  0019FC  6AEE               	clrf	postinc0,c
  1168  0019FE  06E8               	decf	wreg,f,c
  1169  001A00  E1FD               	bnz	clear_1
  1170                           
  1171                           ; Initialize objects allocated to BANK1 (75 bytes)
  1172                           ; load TBLPTR registers with __pidataBANK1
  1173  001A02  0E54               	movlw	low __pidataBANK1
  1174  001A04  6EF6               	movwf	tblptrl,c
  1175  001A06  0E1E               	movlw	high __pidataBANK1
  1176  001A08  6EF7               	movwf	tblptrh,c
  1177  001A0A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1178  001A0C  6EF8               	movwf	tblptru,c
  1179  001A0E  EE01  F000         	lfsr	0,__pdataBANK1
  1180  001A12  EE10 F04B          	lfsr	1,75
  1181  001A16                     copy_data0:
  1182  001A16  0009               	tblrd		*+
  1183  001A18  CFF5 FFEE          	movff	tablat,postinc0
  1184  001A1C  50E5               	movf	postdec1,w,c
  1185  001A1E  50E1               	movf	fsr1l,w,c
  1186  001A20  E1FA               	bnz	copy_data0
  1187                           
  1188                           ; Initialize objects allocated to BANK0 (100 bytes)
  1189                           ; load TBLPTR registers with __pidataBANK0
  1190  001A22  0E56               	movlw	low __pidataBANK0
  1191  001A24  6EF6               	movwf	tblptrl,c
  1192  001A26  0E1B               	movlw	high __pidataBANK0
  1193  001A28  6EF7               	movwf	tblptrh,c
  1194  001A2A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1195  001A2C  6EF8               	movwf	tblptru,c
  1196  001A2E  EE00  F080         	lfsr	0,__pdataBANK0
  1197  001A32  EE10 F064          	lfsr	1,100
  1198  001A36                     copy_data1:
  1199  001A36  0009               	tblrd		*+
  1200  001A38  CFF5 FFEE          	movff	tablat,postinc0
  1201  001A3C  50E5               	movf	postdec1,w,c
  1202  001A3E  50E1               	movf	fsr1l,w,c
  1203  001A40  E1FA               	bnz	copy_data1
  1204                           
  1205                           ; Initialize objects allocated to COMRAM (3 bytes)
  1206                           ; load TBLPTR registers with __pidataCOMRAM
  1207  001A42  0EFC               	movlw	low __pidataCOMRAM
  1208  001A44  6EF6               	movwf	tblptrl,c
  1209  001A46  0E23               	movlw	high __pidataCOMRAM
  1210  001A48  6EF7               	movwf	tblptrh,c
  1211  001A4A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1212  001A4C  6EF8               	movwf	tblptru,c
  1213  001A4E  0009               	tblrd		*+	;fetch initializer
  1214  001A50  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1215  001A54  0009               	tblrd		*+	;fetch initializer
  1216  001A56  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1217  001A5A  0009               	tblrd		*+	;fetch initializer
  1218  001A5C  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1219  001A60                     end_of_initialization:
  1220                           	opt stack 0
  1221  001A60                     __end_of__initialization:
  1222                           	opt stack 0
  1223  001A60  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1224  001A62  6EF8               	movwf	tblptru,c
  1225  001A64  0100               	movlb	0
  1226  001A66  EFDE  F004         	goto	_main	;jump to C main() function
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           postdec1	equ	0xFE5
  1234                           fsr1l	equ	0xFE1
  1235                           
  1236                           	psect	bssCOMRAM
  1237  000044                     __pbssCOMRAM:
  1238                           	opt stack 0
  1239  000044                     _DS1621_tempC:
  1240                           	opt stack 0
  1241  000044                     	ds	2
  1242  000046                     _DS1621_tempF:
  1243                           	opt stack 0
  1244  000046                     	ds	2
  1245  000048                     _Time_Elapsed:
  1246                           	opt stack 0
  1247  000048                     	ds	2
  1248  00004A                     _nec_ok:
  1249                           	opt stack 0
  1250  00004A                     	ds	2
  1251  00004C                     _rpm:
  1252                           	opt stack 0
  1253  00004C                     	ds	2
  1254  00004E                     _txt:
  1255                           	opt stack 0
  1256  00004E                     	ds	2
  1257  000050                     _FAN:
  1258                           	opt stack 0
  1259  000050                     	ds	1
  1260  000051                     _Nec_code1:
  1261                           	opt stack 0
  1262  000051                     	ds	1
  1263  000052                     _Nec_state:
  1264                           	opt stack 0
  1265  000052                     	ds	1
  1266  000053                     __tft_type:
  1267                           	opt stack 0
  1268  000053                     	ds	1
  1269  000054                     _alarm_date:
  1270                           	opt stack 0
  1271  000054                     	ds	1
  1272  000055                     _alarm_hour:
  1273                           	opt stack 0
  1274  000055                     	ds	1
  1275  000056                     _alarm_minute:
  1276                           	opt stack 0
  1277  000056                     	ds	1
  1278  000057                     _alarm_second:
  1279                           	opt stack 0
  1280  000057                     	ds	1
  1281  000058                     _bit_count:
  1282                           	opt stack 0
  1283  000058                     	ds	1
  1284  000059                     _colstart:
  1285                           	opt stack 0
  1286  000059                     	ds	1
  1287  00005A                     _day:
  1288                           	opt stack 0
  1289  00005A                     	ds	1
  1290  00005B                     _dow:
  1291                           	opt stack 0
  1292  00005B                     	ds	1
  1293  00005C                     _duty_cycle:
  1294                           	opt stack 0
  1295  00005C                     	ds	1
  1296  00005D                     _found:
  1297                           	opt stack 0
  1298  00005D                     	ds	1
  1299  00005E                     _hour:
  1300                           	opt stack 0
  1301  00005E                     	ds	1
  1302  00005F                     _minute:
  1303                           	opt stack 0
  1304  00005F                     	ds	1
  1305  000060                     _month:
  1306                           	opt stack 0
  1307  000060                     	ds	1
  1308  000061                     _rowstart:
  1309                           	opt stack 0
  1310  000061                     	ds	1
  1311  000062                     _second:
  1312                           	opt stack 0
  1313  000062                     	ds	1
  1314  000063                     _setup_alarm_hour:
  1315                           	opt stack 0
  1316  000063                     	ds	1
  1317  000064                     _setup_alarm_minute:
  1318                           	opt stack 0
  1319  000064                     	ds	1
  1320  000065                     _setup_alarm_second:
  1321                           	opt stack 0
  1322  000065                     	ds	1
  1323  000066                     _setup_day:
  1324                           	opt stack 0
  1325  000066                     	ds	1
  1326  000067                     _setup_hour:
  1327                           	opt stack 0
  1328  000067                     	ds	1
  1329  000068                     _setup_minute:
  1330                           	opt stack 0
  1331  000068                     	ds	1
  1332  000069                     _setup_month:
  1333                           	opt stack 0
  1334  000069                     	ds	1
  1335  00006A                     _setup_second:
  1336                           	opt stack 0
  1337  00006A                     	ds	1
  1338  00006B                     _setup_year:
  1339                           	opt stack 0
  1340  00006B                     	ds	1
  1341  00006C                     _year:
  1342                           	opt stack 0
  1343  00006C                     	ds	1
  1344                           tblptru	equ	0xFF8
  1345                           tblptrh	equ	0xFF7
  1346                           tblptrl	equ	0xFF6
  1347                           tablat	equ	0xFF5
  1348                           postinc0	equ	0xFEE
  1349                           wreg	equ	0xFE8
  1350                           postdec1	equ	0xFE5
  1351                           fsr1l	equ	0xFE1
  1352                           
  1353                           	psect	dataCOMRAM
  1354  00006D                     __pdataCOMRAM:
  1355                           	opt stack 0
  1356  00006D                     _setup_fan_temp:
  1357                           	opt stack 0
  1358  00006D                     	ds	1
  1359  00006E                     _tempSecond:
  1360                           	opt stack 0
  1361  00006E                     	ds	1
  1362  00006F                     _wrap:
  1363                           	opt stack 0
  1364  00006F                     	ds	1
  1365                           tblptru	equ	0xFF8
  1366                           tblptrh	equ	0xFF7
  1367                           tblptrl	equ	0xFF6
  1368                           tablat	equ	0xFF5
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           postdec1	equ	0xFE5
  1372                           fsr1l	equ	0xFE1
  1373                           
  1374                           	psect	bssBANK0
  1375  0000F4                     __pbssBANK0:
  1376                           	opt stack 0
  1377  0000F4                     _Nec_code:
  1378                           	opt stack 0
  1379  0000F4                     	ds	4
  1380  0000F8                     _ALARMEN:
  1381                           	opt stack 0
  1382  0000F8                     	ds	2
  1383  0000FA                     _nbr:
  1384                           	opt stack 0
  1385  0000FA                     	ds	2
  1386  0000FC                     _rps:
  1387                           	opt stack 0
  1388  0000FC                     	ds	2
  1389                           tblptru	equ	0xFF8
  1390                           tblptrh	equ	0xFF7
  1391                           tblptrl	equ	0xFF6
  1392                           tablat	equ	0xFF5
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           
  1398                           	psect	dataBANK0
  1399  000080                     __pdataBANK0:
  1400                           	opt stack 0
  1401  000080                     Set_RPM_RGB@F4110:
  1402                           	opt stack 0
  1403  000080                     	ds	14
  1404  00008E                     _alarm_time:
  1405                           	opt stack 0
  1406  00008E                     	ds	9
  1407  000097                     _setup_alarm_time:
  1408                           	opt stack 0
  1409  000097                     	ds	9
  1410  0000A0                     _setup_date:
  1411                           	opt stack 0
  1412  0000A0                     	ds	9
  1413  0000A9                     _setup_time:
  1414                           	opt stack 0
  1415  0000A9                     	ds	9
  1416  0000B2                     _setup_fan_text:
  1417                           	opt stack 0
  1418  0000B2                     	ds	5
  1419  0000B7                     _Alarm_SW_Txt:
  1420                           	opt stack 0
  1421  0000B7                     	ds	4
  1422  0000BB                     _RTC_ALARM_Txt:
  1423                           	opt stack 0
  1424  0000BB                     	ds	2
  1425  0000BD                     _date:
  1426                           	opt stack 0
  1427  0000BD                     	ds	9
  1428  0000C6                     _time:
  1429                           	opt stack 0
  1430  0000C6                     	ds	9
  1431  0000CF                     _RPM_Txt:
  1432                           	opt stack 0
  1433  0000CF                     	ds	5
  1434  0000D4                     _DC_Txt:
  1435                           	opt stack 0
  1436  0000D4                     	ds	4
  1437  0000D8                     _Fan_SW_Txt:
  1438                           	opt stack 0
  1439  0000D8                     	ds	4
  1440  0000DC                     _tempC:
  1441                           	opt stack 0
  1442  0000DC                     	ds	4
  1443  0000E0                     _tempF:
  1444                           	opt stack 0
  1445  0000E0                     	ds	4
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           postinc0	equ	0xFEE
  1451                           wreg	equ	0xFE8
  1452                           postdec1	equ	0xFE5
  1453                           fsr1l	equ	0xFE1
  1454                           
  1455                           	psect	dataBANK1
  1456  000100                     __pdataBANK1:
  1457                           	opt stack 0
  1458  000100                     _array1:
  1459                           	opt stack 0
  1460  000100                     	ds	21
  1461  000115                     _color:
  1462                           	opt stack 0
  1463  000115                     	ds	21
  1464  00012A                     _buffer:
  1465                           	opt stack 0
  1466  00012A                     	ds	33
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           
  1476                           	psect	cstackBANK0
  1477  0000E4                     __pcstackBANK0:
  1478                           	opt stack 0
  1479  0000E4                     drawtext@x:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x0
  1483  0000E4                     	ds	1
  1484  0000E5                     drawtext@textsize:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x1
  1488  0000E5                     	ds	2
  1489  0000E7                     drawtext@i:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x3
  1493  0000E7                     	ds	2
  1494  0000E9                     drawtext@cursor_y:
  1495                           	opt stack 0
  1496                           
  1497                           ; 1 bytes @ 0x5
  1498  0000E9                     	ds	1
  1499  0000EA                     drawtext@cursor_x:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x6
  1503  0000EA                     	ds	1
  1504  0000EB                     ??_Update_Screen:
  1505                           
  1506                           ; 0 bytes @ 0x7
  1507  0000EB                     	ds	2
  1508  0000ED                     _Update_Screen$2643:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x9
  1512  0000ED                     	ds	2
  1513  0000EF                     Update_Screen@neg_tempF:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0xB
  1517  0000EF                     	ds	2
  1518  0000F1                     ??_main:
  1519                           
  1520                           ; 0 bytes @ 0xD
  1521  0000F1                     	ds	1
  1522  0000F2                     main@j:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0xE
  1526  0000F2                     	ds	2
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           postdec1	equ	0xFE5
  1534                           fsr1l	equ	0xFE1
  1535                           
  1536                           	psect	cstackCOMRAM
  1537  000001                     __pcstackCOMRAM:
  1538                           	opt stack 0
  1539  000001                     ??_INT0_isr:
  1540  000001                     
  1541                           ; 2 bytes @ 0x0
  1542  000001                     	ds	2
  1543  000003                     ??_chkisr:
  1544                           
  1545                           ; 0 bytes @ 0x2
  1546  000003                     	ds	14
  1547  000011                     ??_isdigit:
  1548  000011                     ?_strlen:
  1549                           	opt stack 0
  1550  000011                     ?___wmul:
  1551                           	opt stack 0
  1552  000011                     ?___lwdiv:
  1553                           	opt stack 0
  1554  000011                     ?___ftpack:
  1555                           	opt stack 0
  1556  000011                     ?___fttol:
  1557                           	opt stack 0
  1558  000011                     I2C_Read@ack:
  1559                           	opt stack 0
  1560  000011                     I2C_Write@outByte:
  1561                           	opt stack 0
  1562  000011                     putch@c:
  1563                           	opt stack 0
  1564  000011                     spiwrite@x:
  1565                           	opt stack 0
  1566  000011                     OpenUSART@spbrg:
  1567                           	opt stack 0
  1568  000011                     ___wmul@multiplier:
  1569                           	opt stack 0
  1570  000011                     ___lwdiv@dividend:
  1571                           	opt stack 0
  1572  000011                     strcpy@to:
  1573                           	opt stack 0
  1574  000011                     strlen@s:
  1575                           	opt stack 0
  1576  000011                     ___ftpack@arg:
  1577                           	opt stack 0
  1578  000011                     ___fttol@f1:
  1579                           	opt stack 0
  1580  000011                     I2C_Init@c:
  1581                           	opt stack 0
  1582                           
  1583                           ; 4 bytes @ 0x10
  1584  000011                     	ds	1
  1585  000012                     I2C_Read@n:
  1586                           	opt stack 0
  1587  000012                     I2C_Write@n:
  1588                           	opt stack 0
  1589  000012                     spiwrite@spidata:
  1590                           	opt stack 0
  1591  000012                     _isdigit$2306:
  1592                           	opt stack 0
  1593                           
  1594                           ; 1 bytes @ 0x11
  1595  000012                     	ds	1
  1596  000013                     ??_strlen:
  1597  000013                     I2C_Read@inByte:
  1598                           	opt stack 0
  1599  000013                     I2C_Write_Cmd_Only@Cmd:
  1600                           	opt stack 0
  1601  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1602                           	opt stack 0
  1603  000013                     write_command@cmd_:
  1604                           	opt stack 0
  1605  000013                     write_data@data_:
  1606                           	opt stack 0
  1607  000013                     OpenUSART@config:
  1608                           	opt stack 0
  1609  000013                     isdigit@c:
  1610                           	opt stack 0
  1611  000013                     ___wmul@multiplicand:
  1612                           	opt stack 0
  1613  000013                     ___lwdiv@divisor:
  1614                           	opt stack 0
  1615  000013                     strcpy@from:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x12
  1619  000013                     	ds	1
  1620  000014                     ?_DS1621_Read_Temp:
  1621                           	opt stack 0
  1622  000014                     I2C_Write_Cmd_Only@Device:
  1623                           	opt stack 0
  1624  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1625                           	opt stack 0
  1626  000014                     setAddrWindow@y0:
  1627                           	opt stack 0
  1628  000014                     ___ftpack@exp:
  1629                           	opt stack 0
  1630                           
  1631                           ; 1 bytes @ 0x13
  1632  000014                     	ds	1
  1633  000015                     ??___fttol:
  1634  000015                     I2C_Write_Cmd_Write_Data@Device:
  1635                           	opt stack 0
  1636  000015                     setAddrWindow@x1:
  1637                           	opt stack 0
  1638  000015                     ___ftpack@sign:
  1639                           	opt stack 0
  1640  000015                     ___lwdiv@counter:
  1641                           	opt stack 0
  1642  000015                     ___wmul@product:
  1643                           	opt stack 0
  1644  000015                     strcpy@cp:
  1645                           	opt stack 0
  1646  000015                     strlen@cp:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x14
  1650  000015                     	ds	1
  1651  000016                     ??___ftpack:
  1652  000016                     DS1621_Read_Temp@Data_Ret:
  1653                           	opt stack 0
  1654  000016                     setAddrWindow@y1:
  1655                           	opt stack 0
  1656  000016                     ___lwdiv@quotient:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x15
  1660  000016                     	ds	1
  1661  000017                     ?___awdiv:
  1662                           	opt stack 0
  1663  000017                     setAddrWindow@x0:
  1664                           	opt stack 0
  1665  000017                     delay_ms@ms:
  1666                           	opt stack 0
  1667  000017                     ___awdiv@dividend:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x16
  1671  000017                     	ds	1
  1672  000018                     ?___lwmod:
  1673                           	opt stack 0
  1674  000018                     drawPixel@y:
  1675                           	opt stack 0
  1676  000018                     drawFastVLine@y:
  1677                           	opt stack 0
  1678  000018                     fillRectangle@y:
  1679                           	opt stack 0
  1680  000018                     ___lwmod@dividend:
  1681                           	opt stack 0
  1682                           
  1683                           ; 2 bytes @ 0x17
  1684  000018                     	ds	1
  1685  000019                     ??_delay_ms:
  1686  000019                     ?___lbtoft:
  1687                           	opt stack 0
  1688  000019                     drawFastVLine@h:
  1689                           	opt stack 0
  1690  000019                     fillRectangle@w:
  1691                           	opt stack 0
  1692  000019                     drawPixel@color:
  1693                           	opt stack 0
  1694  000019                     ___awdiv@divisor:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x18
  1698  000019                     	ds	1
  1699  00001A                     fillRectangle@h:
  1700                           	opt stack 0
  1701  00001A                     ___fttol@sign1:
  1702                           	opt stack 0
  1703  00001A                     drawFastVLine@color:
  1704                           	opt stack 0
  1705  00001A                     ___lwmod@divisor:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x19
  1709  00001A                     	ds	1
  1710  00001B                     drawPixel@x:
  1711                           	opt stack 0
  1712  00001B                     ___awdiv@counter:
  1713                           	opt stack 0
  1714  00001B                     delay_ms@count:
  1715                           	opt stack 0
  1716  00001B                     fillRectangle@color:
  1717                           	opt stack 0
  1718  00001B                     ___fttol@lval:
  1719                           	opt stack 0
  1720                           
  1721                           ; 4 bytes @ 0x1A
  1722  00001B                     	ds	1
  1723  00001C                     ??_drawFastVLine:
  1724  00001C                     ___awdiv@sign:
  1725                           	opt stack 0
  1726  00001C                     ___lbtoft@c:
  1727                           	opt stack 0
  1728  00001C                     ___lwmod@counter:
  1729                           	opt stack 0
  1730  00001C                     drawCircle@x0:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x1B
  1734  00001C                     	ds	1
  1735  00001D                     ??_fillRectangle:
  1736  00001D                     ?_printf:
  1737                           	opt stack 0
  1738  00001D                     ?___ftmul:
  1739                           	opt stack 0
  1740  00001D                     printf@f:
  1741                           	opt stack 0
  1742  00001D                     ___awdiv@quotient:
  1743                           	opt stack 0
  1744  00001D                     ___ftmul@f1:
  1745                           	opt stack 0
  1746                           
  1747                           ; 3 bytes @ 0x1C
  1748  00001D                     	ds	1
  1749  00001E                     drawCircle@y0:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x1D
  1753  00001E                     	ds	1
  1754  00001F                     ?_get_RPM:
  1755                           	opt stack 0
  1756  00001F                     ?___awmod:
  1757                           	opt stack 0
  1758  00001F                     ___fttol@exp1:
  1759                           	opt stack 0
  1760  00001F                     Set_DC_RGB@duty_cycle:
  1761                           	opt stack 0
  1762  00001F                     Set_RPM_RGB@rpm:
  1763                           	opt stack 0
  1764  00001F                     ___awmod@dividend:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x1E
  1768  00001F                     	ds	1
  1769  000020                     drawFastVLine@hi:
  1770                           	opt stack 0
  1771  000020                     drawCircle@r:
  1772                           	opt stack 0
  1773  000020                     ___ftmul@f2:
  1774                           	opt stack 0
  1775                           
  1776                           ; 3 bytes @ 0x1F
  1777  000020                     	ds	1
  1778  000021                     drawFastVLine@lo:
  1779                           	opt stack 0
  1780  000021                     fillRectangle@hi:
  1781                           	opt stack 0
  1782  000021                     get_RPM@RPS:
  1783                           	opt stack 0
  1784  000021                     ___awmod@divisor:
  1785                           	opt stack 0
  1786  000021                     Set_RPM_RGB@temp:
  1787                           	opt stack 0
  1788                           
  1789                           ; 14 bytes @ 0x20
  1790  000021                     	ds	1
  1791  000022                     drawFastVLine@x:
  1792                           	opt stack 0
  1793  000022                     fillRectangle@lo:
  1794                           	opt stack 0
  1795  000022                     drawCircle@color:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x21
  1799  000022                     	ds	1
  1800  000023                     ??___ftmul:
  1801  000023                     fillRect@y:
  1802                           	opt stack 0
  1803  000023                     fillRectangle@x:
  1804                           	opt stack 0
  1805  000023                     ___awmod@counter:
  1806                           	opt stack 0
  1807                           
  1808                           ; 1 bytes @ 0x22
  1809  000023                     	ds	1
  1810  000024                     ??_drawCircle:
  1811  000024                     fillRect@w:
  1812                           	opt stack 0
  1813  000024                     ___awmod@sign:
  1814                           	opt stack 0
  1815  000024                     fillScreen@color:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x23
  1819  000024                     	ds	1
  1820  000025                     fillRect@h:
  1821                           	opt stack 0
  1822                           
  1823                           ; 1 bytes @ 0x24
  1824  000025                     	ds	1
  1825  000026                     ___ftmul@exp:
  1826                           	opt stack 0
  1827  000026                     fillRect@color:
  1828                           	opt stack 0
  1829  000026                     drawCircle@ddF_x:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x25
  1833  000026                     	ds	1
  1834  000027                     ___ftmul@f3_as_product:
  1835                           	opt stack 0
  1836                           
  1837                           ; 3 bytes @ 0x26
  1838  000027                     	ds	1
  1839  000028                     ??_fillRect:
  1840  000028                     drawCircle@ddF_y:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x27
  1844  000028                     	ds	2
  1845  00002A                     ___ftmul@cntr:
  1846                           	opt stack 0
  1847  00002A                     drawCircle@f:
  1848                           	opt stack 0
  1849                           
  1850                           ; 2 bytes @ 0x29
  1851  00002A                     	ds	1
  1852  00002B                     ??_printf:
  1853  00002B                     fillRect@x:
  1854                           	opt stack 0
  1855  00002B                     ___ftmul@sign:
  1856                           	opt stack 0
  1857                           
  1858                           ; 1 bytes @ 0x2A
  1859  00002B                     	ds	1
  1860  00002C                     ?___ftdiv:
  1861                           	opt stack 0
  1862  00002C                     fillRect@i:
  1863                           	opt stack 0
  1864  00002C                     drawCircle@x:
  1865                           	opt stack 0
  1866  00002C                     ___ftdiv@f1:
  1867                           	opt stack 0
  1868                           
  1869                           ; 3 bytes @ 0x2B
  1870  00002C                     	ds	2
  1871  00002E                     drawChar@y:
  1872                           	opt stack 0
  1873  00002E                     drawCircle@y:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x2D
  1877  00002E                     	ds	1
  1878  00002F                     drawChar@c:
  1879                           	opt stack 0
  1880  00002F                     printf@idx:
  1881                           	opt stack 0
  1882  00002F                     ___ftdiv@f2:
  1883                           	opt stack 0
  1884                           
  1885                           ; 3 bytes @ 0x2E
  1886  00002F                     	ds	1
  1887  000030                     drawChar@color:
  1888                           	opt stack 0
  1889  000030                     printf@ap:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0x2F
  1893  000030                     	ds	2
  1894  000032                     ??___ftdiv:
  1895  000032                     printf@prec:
  1896                           	opt stack 0
  1897  000032                     drawChar@bg:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x31
  1901  000032                     	ds	1
  1902  000033                     printf@val:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x32
  1906  000033                     	ds	1
  1907  000034                     drawChar@size:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x33
  1911  000034                     	ds	1
  1912  000035                     drawChar@line:
  1913                           	opt stack 0
  1914  000035                     printf@flag:
  1915                           	opt stack 0
  1916  000035                     ___ftdiv@cntr:
  1917                           	opt stack 0
  1918                           
  1919                           ; 1 bytes @ 0x34
  1920  000035                     	ds	1
  1921  000036                     drawChar@x:
  1922                           	opt stack 0
  1923  000036                     printf@width:
  1924                           	opt stack 0
  1925  000036                     ___ftdiv@f3:
  1926                           	opt stack 0
  1927                           
  1928                           ; 3 bytes @ 0x35
  1929  000036                     	ds	1
  1930  000037                     drawChar@j:
  1931                           	opt stack 0
  1932                           
  1933                           ; 1 bytes @ 0x36
  1934  000037                     	ds	1
  1935  000038                     drawChar@i:
  1936                           	opt stack 0
  1937  000038                     printf@c:
  1938                           	opt stack 0
  1939                           
  1940                           ; 1 bytes @ 0x37
  1941  000038                     	ds	1
  1942  000039                     drawtext@y:
  1943                           	opt stack 0
  1944  000039                     ___ftdiv@exp:
  1945                           	opt stack 0
  1946                           
  1947                           ; 1 bytes @ 0x38
  1948  000039                     	ds	1
  1949  00003A                     ___ftdiv@sign:
  1950                           	opt stack 0
  1951  00003A                     drawtext@_text:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x39
  1955  00003A                     	ds	1
  1956  00003B                     ??_do_update_pwm:
  1957                           
  1958                           ; 0 bytes @ 0x3A
  1959  00003B                     	ds	1
  1960  00003C                     drawtext@color:
  1961                           	opt stack 0
  1962                           
  1963                           ; 2 bytes @ 0x3B
  1964  00003C                     	ds	2
  1965  00003E                     drawtext@bg:
  1966                           	opt stack 0
  1967  00003E                     do_update_pwm@dc_f:
  1968                           	opt stack 0
  1969                           
  1970                           ; 3 bytes @ 0x3D
  1971  00003E                     	ds	2
  1972  000040                     drawtext@size:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0x3F
  1976  000040                     	ds	1
  1977  000041                     ??_drawtext:
  1978  000041                     do_update_pwm@duty_cycle:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x40
  1982  000041                     	ds	1
  1983  000042                     do_update_pwm@dc_I:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x41
  1987  000042                     	ds	1
  1988  000043                     
  1989                           ; 0 bytes @ 0x42
  1990  000043                     	ds	1
  1991  000044                     tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           postdec1	equ	0xFE5
  1998                           fsr1l	equ	0xFE1
  1999                           
  2000                           ; 0 bytes @ 0x43
  2001 ;;
  2002 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2003 ;;
  2004 ;; *************** function _main *****************
  2005 ;; Defined at:
  2006 ;;		line 148 in file "Lab12_ex.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;		None
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  j               2   14[BANK0 ] int 
  2011 ;; Return value:  Size  Location     Type
  2012 ;;		None               void
  2013 ;; Registers used:
  2014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;Total ram usage:        3 bytes
  2025 ;; Hardware stack levels required when called:   11
  2026 ;; This function calls:
  2027 ;;		_DS1621_Read_Temp
  2028 ;;		_DS3231_Read_Time
  2029 ;;		_DS3231_Setup_Time
  2030 ;;		_Decrease_Speed
  2031 ;;		_Do_Beep
  2032 ;;		_Do_Init
  2033 ;;		_Increase_Speed
  2034 ;;		_Initialize_Screen
  2035 ;;		_Set_DC_RGB
  2036 ;;		_Set_RPM_RGB
  2037 ;;		_Toggle_Fan
  2038 ;;		_Update_Screen
  2039 ;;		___awdiv
  2040 ;;		___wmul
  2041 ;;		_get_RPM
  2042 ;;		_printf
  2043 ;; This function is called by:
  2044 ;;		Startup code after reset
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text0
  2049  0009BC                     __ptext0:
  2050                           	opt stack 0
  2051  0009BC                     _main:
  2052                           	opt stack 20
  2053                           
  2054                           ;Lab12_ex.c: 150: Do_Init();
  2055                           
  2056                           ;incstack = 0
  2057  0009BC  EC04  F00F         	call	_Do_Init	;wreg free
  2058                           
  2059                           ;Lab12_ex.c: 151: Initialize_Screen();
  2060  0009C0  ECA9  F003         	call	_Initialize_Screen	;wreg free
  2061                           
  2062                           ;Lab12_ex.c: 209: duty_cycle = 50;
  2063  0009C4  0E32               	movlw	50
  2064  0009C6  6E5C               	movwf	_duty_cycle,c
  2065  0009C8  D000               	goto	l6663
  2066  0009CA                     l6663:
  2067                           
  2068                           ;Lab12_ex.c: 211: {
  2069                           ;Lab12_ex.c: 213: DS3231_Read_Time();
  2070  0009CA  EC39  F00E         	call	_DS3231_Read_Time	;wreg free
  2071                           
  2072                           ;Lab12_ex.c: 215: if(tempSecond != second)
  2073  0009CE  5062               	movf	_second,w,c
  2074  0009D0  186E               	xorwf	_tempSecond,w,c
  2075  0009D2  B4D8               	btfsc	status,2,c
  2076  0009D4  D05E               	goto	l6683
  2077                           
  2078                           ;Lab12_ex.c: 216: {
  2079                           ;Lab12_ex.c: 217: tempSecond = second;
  2080  0009D6  C062  F06E         	movff	_second,_tempSecond
  2081                           
  2082                           ;Lab12_ex.c: 218: DS1621_tempC = DS1621_Read_Temp();
  2083  0009DA  EC60  F010         	call	_DS1621_Read_Temp	;wreg free
  2084  0009DE  C014  F044         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2085  0009E2  C015  F045         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2086                           
  2087                           ;Lab12_ex.c: 219: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2088  0009E6  C044  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2089  0009EA  C045  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2090  0009EE  0E00               	movlw	0
  2091  0009F0  6E14               	movwf	___wmul@multiplicand+1,c
  2092  0009F2  0E09               	movlw	9
  2093  0009F4  6E13               	movwf	___wmul@multiplicand,c
  2094  0009F6  EC8D  F010         	call	___wmul	;wreg free
  2095  0009FA  C011  F017         	movff	?___wmul,___awdiv@dividend
  2096  0009FE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2097  000A02  0E00               	movlw	0
  2098  000A04  6E1A               	movwf	___awdiv@divisor+1,c
  2099  000A06  0E05               	movlw	5
  2100  000A08  6E19               	movwf	___awdiv@divisor,c
  2101  000A0A  EC25  F00C         	call	___awdiv	;wreg free
  2102  000A0E  0E20               	movlw	32
  2103  000A10  2417               	addwf	?___awdiv,w,c
  2104  000A12  6E46               	movwf	_DS1621_tempF,c
  2105  000A14  0E00               	movlw	0
  2106  000A16  2018               	addwfc	?___awdiv+1,w,c
  2107  000A18  6E47               	movwf	_DS1621_tempF+1,c
  2108                           
  2109                           ;Lab12_ex.c: 220: rpm = get_RPM();
  2110  000A1A  EC99  F00F         	call	_get_RPM	;wreg free
  2111  000A1E  C01F  F04C         	movff	?_get_RPM,_rpm
  2112  000A22  C020  F04D         	movff	?_get_RPM+1,_rpm+1
  2113                           
  2114                           ;Lab12_ex.c: 221: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2115  000A26  0E06               	movlw	low STR_3
  2116  000A28  6E1D               	movwf	printf@f,c
  2117  000A2A  0EFF               	movlw	high STR_3
  2118  000A2C  6E1E               	movwf	printf@f+1,c
  2119  000A2E  C05E  F01F         	movff	_hour,?_printf+2
  2120  000A32  6A20               	clrf	?_printf+3,c
  2121  000A34  C05F  F021         	movff	_minute,?_printf+4
  2122  000A38  6A22               	clrf	?_printf+5,c
  2123  000A3A  C062  F023         	movff	_second,?_printf+6
  2124  000A3E  6A24               	clrf	?_printf+7,c
  2125  000A40  C060  F025         	movff	_month,?_printf+8
  2126  000A44  6A26               	clrf	?_printf+9,c
  2127  000A46  C05A  F027         	movff	_day,?_printf+10
  2128  000A4A  6A28               	clrf	?_printf+11,c
  2129  000A4C  C06C  F029         	movff	_year,?_printf+12
  2130  000A50  6A2A               	clrf	?_printf+13,c
  2131  000A52  ECFC  F001         	call	_printf	;wreg free
  2132                           
  2133                           ;Lab12_ex.c: 222: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2134  000A56  0E50               	movlw	low STR_4
  2135  000A58  6E1D               	movwf	printf@f,c
  2136  000A5A  0EFF               	movlw	high STR_4
  2137  000A5C  6E1E               	movwf	printf@f+1,c
  2138  000A5E  C044  F01F         	movff	_DS1621_tempC,?_printf+2
  2139  000A62  C045  F020         	movff	_DS1621_tempC+1,?_printf+3
  2140  000A66  C046  F021         	movff	_DS1621_tempF,?_printf+4
  2141  000A6A  C047  F022         	movff	_DS1621_tempF+1,?_printf+5
  2142  000A6E  ECFC  F001         	call	_printf	;wreg free
  2143                           
  2144                           ;Lab12_ex.c: 223: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2145  000A72  0E65               	movlw	low STR_5
  2146  000A74  6E1D               	movwf	printf@f,c
  2147  000A76  0EFF               	movlw	high STR_5
  2148  000A78  6E1E               	movwf	printf@f+1,c
  2149  000A7A  C04C  F01F         	movff	_rpm,?_printf+2
  2150  000A7E  C04D  F020         	movff	_rpm+1,?_printf+3
  2151  000A82  C05C  F021         	movff	_duty_cycle,?_printf+4
  2152  000A86  6A22               	clrf	?_printf+5,c
  2153  000A88  ECFC  F001         	call	_printf	;wreg free
  2154                           
  2155                           ;Lab12_ex.c: 224: Update_Screen();
  2156  000A8C  EC0E  F000         	call	_Update_Screen	;wreg free
  2157  000A90  D000               	goto	l6683
  2158  000A92                     l6683:
  2159                           
  2160                           ;Lab12_ex.c: 225: }
  2161                           ;Lab12_ex.c: 227: if (nec_ok == 1)
  2162  000A92  044A               	decf	_nec_ok,w,c
  2163  000A94  104B               	iorwf	_nec_ok+1,w,c
  2164  000A96  A4D8               	btfss	status,2,c
  2165  000A98  D081               	goto	l6745
  2166                           
  2167                           ;Lab12_ex.c: 228: {
  2168                           ;Lab12_ex.c: 229: nec_ok = 0;
  2169  000A9A  0E00               	movlw	0
  2170  000A9C  6E4B               	movwf	_nec_ok+1,c
  2171  000A9E  0E00               	movlw	0
  2172  000AA0  6E4A               	movwf	_nec_ok,c
  2173                           
  2174                           ;Lab12_ex.c: 231: printf ("NEC_Code = %x\r\n", Nec_code1);
  2175  000AA2  0EB1               	movlw	low STR_6
  2176  000AA4  6E1D               	movwf	printf@f,c
  2177  000AA6  0EFF               	movlw	high STR_6
  2178  000AA8  6E1E               	movwf	printf@f+1,c
  2179  000AAA  C051  F01F         	movff	_Nec_code1,?_printf+2
  2180  000AAE  6A20               	clrf	?_printf+3,c
  2181  000AB0  ECFC  F001         	call	_printf	;wreg free
  2182                           
  2183                           ;Lab12_ex.c: 233: INTCONbits.INT0IE = 1;
  2184  000AB4  88F2               	bsf	intcon,4,c	;volatile
  2185                           
  2186                           ;Lab12_ex.c: 234: INTCON2bits.INTEDG0 = 0;
  2187  000AB6  9CF1               	bcf	intcon2,6,c	;volatile
  2188                           
  2189                           ;Lab12_ex.c: 236: found = 0xff;
  2190  000AB8  685D               	setf	_found,c
  2191                           
  2192                           ;Lab12_ex.c: 237: for (int j=0; j< 21; j++)
  2193  000ABA  0E00               	movlw	0
  2194  000ABC  0100               	movlb	0	; () banked
  2195  000ABE  6FF3               	movwf	(main@j+1)& (0+255),b
  2196  000AC0  0E00               	movlw	0
  2197  000AC2  6FF2               	movwf	main@j& (0+255),b
  2198  000AC4                     l6697:
  2199                           
  2200                           ; BSR set to: 0
  2201  000AC4  0100               	movlb	0	; () banked
  2202  000AC6  BFF3               	btfsc	(main@j+1)& (0+255),7,b
  2203  000AC8  D00A               	goto	l6701
  2204  000ACA  0100               	movlb	0	; () banked
  2205  000ACC  51F3               	movf	(main@j+1)& (0+255),w,b
  2206  000ACE  E120               	bnz	l6711
  2207  000AD0  0E15               	movlw	21
  2208  000AD2  0100               	movlb	0	; () banked
  2209  000AD4  5DF2               	subwf	main@j& (0+255),w,b
  2210  000AD6  B0D8               	btfsc	status,0,c
  2211  000AD8  D01B               	goto	l6711
  2212  000ADA  D001               	goto	l6701
  2213                           
  2214                           ; BSR set to: 0
  2215  000ADC  D019               	goto	l6711
  2216  000ADE                     l6701:
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;Lab12_ex.c: 238: {
  2220                           ;Lab12_ex.c: 239: if (Nec_code1 == array1[j])
  2221  000ADE  0E00               	movlw	low _array1
  2222  000AE0  0100               	movlb	0	; () banked
  2223  000AE2  25F2               	addwf	main@j& (0+255),w,b
  2224  000AE4  6ED9               	movwf	fsr2l,c
  2225  000AE6  0E01               	movlw	high _array1
  2226  000AE8  0100               	movlb	0	; () banked
  2227  000AEA  21F3               	addwfc	(main@j+1)& (0+255),w,b
  2228  000AEC  6EDA               	movwf	fsr2h,c
  2229  000AEE  5051               	movf	_Nec_code1,w,c
  2230  000AF0  18DE               	xorwf	postinc2,w,c
  2231  000AF2  A4D8               	btfss	status,2,c
  2232  000AF4  D008               	goto	l6707
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;Lab12_ex.c: 240: {
  2236                           ;Lab12_ex.c: 241: found = j;
  2237  000AF6  C0F2  F05D         	movff	main@j,_found
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;Lab12_ex.c: 242: j = 21;
  2241  000AFA  0E00               	movlw	0
  2242  000AFC  0100               	movlb	0	; () banked
  2243  000AFE  6FF3               	movwf	(main@j+1)& (0+255),b
  2244  000B00  0E15               	movlw	21
  2245  000B02  6FF2               	movwf	main@j& (0+255),b
  2246  000B04  D000               	goto	l6707
  2247  000B06                     l6707:
  2248                           
  2249                           ; BSR set to: 0
  2250  000B06  0100               	movlb	0	; () banked
  2251  000B08  4BF2               	infsnz	main@j& (0+255),f,b
  2252  000B0A  2BF3               	incf	(main@j+1)& (0+255),f,b
  2253  000B0C  D7DB               	goto	l6697
  2254                           
  2255                           ; BSR set to: 0
  2256  000B0E  D000               	goto	l6711
  2257  000B10                     l6711:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;Lab12_ex.c: 243: }
  2261                           ;Lab12_ex.c: 244: }
  2262                           ;Lab12_ex.c: 246: if (found == 0xff)
  2263  000B10  285D               	incf	_found,w,c
  2264  000B12  A4D8               	btfss	status,2,c
  2265  000B14  D007               	goto	l6715
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;Lab12_ex.c: 247: {
  2269                           ;Lab12_ex.c: 248: printf ("Cannot find button \r\n");
  2270  000B16  0E3A               	movlw	low STR_7
  2271  000B18  6E1D               	movwf	printf@f,c
  2272  000B1A  0EFF               	movlw	high STR_7
  2273  000B1C  6E1E               	movwf	printf@f+1,c
  2274  000B1E  ECFC  F001         	call	_printf	;wreg free
  2275                           
  2276                           ;Lab12_ex.c: 249: }
  2277  000B22  D03C               	goto	l6745
  2278  000B24                     l6715:
  2279                           
  2280                           ;Lab12_ex.c: 250: else
  2281                           ;Lab12_ex.c: 251: {
  2282                           ;Lab12_ex.c: 252: Do_Beep();
  2283  000B24  EC80  F011         	call	_Do_Beep	;wreg free
  2284                           
  2285                           ;Lab12_ex.c: 253: printf ("button = %d \r\n", found);
  2286  000B28  0EC1               	movlw	low STR_8
  2287  000B2A  6E1D               	movwf	printf@f,c
  2288  000B2C  0EFF               	movlw	high STR_8
  2289  000B2E  6E1E               	movwf	printf@f+1,c
  2290  000B30  C05D  F01F         	movff	_found,?_printf+2
  2291  000B34  6A20               	clrf	?_printf+3,c
  2292  000B36  ECFC  F001         	call	_printf	;wreg free
  2293                           
  2294                           ;Lab12_ex.c: 255: if(found == 5)
  2295  000B3A  0E05               	movlw	5
  2296  000B3C  185D               	xorwf	_found,w,c
  2297  000B3E  A4D8               	btfss	status,2,c
  2298  000B40  D003               	goto	l6725
  2299                           
  2300                           ;Lab12_ex.c: 256: {
  2301                           ;Lab12_ex.c: 257: Toggle_Fan();
  2302  000B42  EC62  F011         	call	_Toggle_Fan	;wreg free
  2303  000B46  D014               	goto	l6741
  2304  000B48                     l6725:
  2305                           
  2306                           ;Lab12_ex.c: 260: else if(found == 6)
  2307  000B48  0E06               	movlw	6
  2308  000B4A  185D               	xorwf	_found,w,c
  2309  000B4C  A4D8               	btfss	status,2,c
  2310  000B4E  D003               	goto	l6731
  2311                           
  2312                           ;Lab12_ex.c: 261: {
  2313                           ;Lab12_ex.c: 262: Decrease_Speed();
  2314  000B50  ECB5  F010         	call	_Decrease_Speed	;wreg free
  2315  000B54  D00D               	goto	l6741
  2316  000B56                     l6731:
  2317                           
  2318                           ;Lab12_ex.c: 265: else if(found == 7)
  2319  000B56  0E07               	movlw	7
  2320  000B58  185D               	xorwf	_found,w,c
  2321  000B5A  A4D8               	btfss	status,2,c
  2322  000B5C  D003               	goto	l6737
  2323                           
  2324                           ;Lab12_ex.c: 266: {
  2325                           ;Lab12_ex.c: 267: Increase_Speed();
  2326  000B5E  ECA1  F010         	call	_Increase_Speed	;wreg free
  2327  000B62  D006               	goto	l6741
  2328  000B64                     l6737:
  2329                           
  2330                           ;Lab12_ex.c: 270: else if(found == 8)
  2331  000B64  0E08               	movlw	8
  2332  000B66  185D               	xorwf	_found,w,c
  2333  000B68  A4D8               	btfss	status,2,c
  2334  000B6A  D012               	goto	l6743
  2335                           
  2336                           ;Lab12_ex.c: 271: {
  2337                           ;Lab12_ex.c: 272: DS3231_Setup_Time();
  2338  000B6C  EC0B  F00E         	call	_DS3231_Setup_Time	;wreg free
  2339  000B70                     l6741:
  2340                           
  2341                           ;Lab12_ex.c: 273: PORTD = color[found] << 4;
  2342  000B70  505D               	movf	_found,w,c
  2343  000B72  0D01               	mullw	1
  2344  000B74  0E15               	movlw	low _color
  2345  000B76  24F3               	addwf	prodl,w,c
  2346  000B78  6ED9               	movwf	fsr2l,c
  2347  000B7A  0E01               	movlw	high _color
  2348  000B7C  20F4               	addwfc	prodh,w,c
  2349  000B7E  6EDA               	movwf	fsr2h,c
  2350  000B80  50DF               	movf	indf2,w,c
  2351  000B82  0100               	movlb	0	; () banked
  2352  000B84  6FF1               	movwf	??_main& (0+255),b
  2353  000B86  0100               	movlb	0	; () banked
  2354  000B88  39F1               	swapf	??_main& (0+255),w,b
  2355  000B8A  0BF0               	andlw	240
  2356  000B8C  6E83               	movwf	3971,c	;volatile
  2357                           
  2358                           ; BSR set to: 0
  2359                           
  2360                           ; BSR set to: 0
  2361                           
  2362                           ; BSR set to: 0
  2363  000B8E  D000               	goto	l6743
  2364  000B90                     l6743:
  2365                           
  2366                           ;Lab12_ex.c: 274: }
  2367                           ;Lab12_ex.c: 275: Set_DC_RGB(duty_cycle);
  2368  000B90  C05C  F01F         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2369  000B94  6A20               	clrf	Set_DC_RGB@duty_cycle+1,c
  2370  000B96  EC15  F010         	call	_Set_DC_RGB	;wreg free
  2371  000B9A  D000               	goto	l6745
  2372  000B9C                     l6745:
  2373                           
  2374                           ;Lab12_ex.c: 276: }
  2375                           ;Lab12_ex.c: 277: }
  2376                           ;Lab12_ex.c: 278: Set_RPM_RGB(rpm);
  2377  000B9C  C04C  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2378  000BA0  C04D  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2379  000BA4  EC65  F00E         	call	_Set_RPM_RGB	;wreg free
  2380  000BA8  D710               	goto	l6663
  2381  000BAA  EF0C  F000         	goto	start
  2382  000BAE                     __end_of_main:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           intcon2	equ	0xFF1
  2392                           postinc0	equ	0xFEE
  2393                           wreg	equ	0xFE8
  2394                           postdec1	equ	0xFE5
  2395                           fsr1l	equ	0xFE1
  2396                           indf2	equ	0xFDF
  2397                           postinc2	equ	0xFDE
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _get_RPM *****************
  2403 ;; Defined at:
  2404 ;;		line 9 in file "Fan_Support.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  RPS             2   32[COMRAM] int 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  2   30[COMRAM] int 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;Total ram usage:        4 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    4
  2425 ;; This function calls:
  2426 ;;		___awdiv
  2427 ;;		___wmul
  2428 ;; This function is called by:
  2429 ;;		_main
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text1
  2434  001F32                     __ptext1:
  2435                           	opt stack 0
  2436  001F32                     _get_RPM:
  2437                           	opt stack 26
  2438                           
  2439                           ;Fan_Support.c: 11: int RPS = TMR3L / 2;
  2440                           
  2441                           ;incstack = 0
  2442  001F32  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  2443  001F36  6A18               	clrf	___awdiv@dividend+1,c
  2444  001F38  0E00               	movlw	0
  2445  001F3A  6E1A               	movwf	___awdiv@divisor+1,c
  2446  001F3C  0E02               	movlw	2
  2447  001F3E  6E19               	movwf	___awdiv@divisor,c
  2448  001F40  EC25  F00C         	call	___awdiv	;wreg free
  2449  001F44  C017  F021         	movff	?___awdiv,get_RPM@RPS
  2450  001F48  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  2451                           
  2452                           ;Fan_Support.c: 13: TMR3L = 0;
  2453  001F4C  0E00               	movlw	0
  2454  001F4E  6EB2               	movwf	4018,c	;volatile
  2455                           
  2456                           ;Fan_Support.c: 14: return (RPS * 60);
  2457  001F50  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  2458  001F54  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  2459  001F58  0E00               	movlw	0
  2460  001F5A  6E14               	movwf	___wmul@multiplicand+1,c
  2461  001F5C  0E3C               	movlw	60
  2462  001F5E  6E13               	movwf	___wmul@multiplicand,c
  2463  001F60  EC8D  F010         	call	___wmul	;wreg free
  2464  001F64  C011  F01F         	movff	?___wmul,?_get_RPM
  2465  001F68  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  2466  001F6C  D000               	goto	l33
  2467  001F6E                     l33:
  2468  001F6E  0012               	return		;funcret
  2469  001F70                     __end_of_get_RPM:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           prodh	equ	0xFF4
  2476                           prodl	equ	0xFF3
  2477                           intcon	equ	0xFF2
  2478                           intcon2	equ	0xFF1
  2479                           postinc0	equ	0xFEE
  2480                           wreg	equ	0xFE8
  2481                           postdec1	equ	0xFE5
  2482                           fsr1l	equ	0xFE1
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _Update_Screen *****************
  2490 ;; Defined at:
  2491 ;;		line 69 in file "Main_Screen.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  neg_tempF       2   11[BANK0 ] int 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;		None               void
  2498 ;; Registers used:
  2499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;Total ram usage:        6 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:   10
  2512 ;; This function calls:
  2513 ;;		___awdiv
  2514 ;;		___awmod
  2515 ;;		_drawtext
  2516 ;;		_strcpy
  2517 ;; This function is called by:
  2518 ;;		_main
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           	psect	text2
  2523  00001C                     __ptext2:
  2524                           	opt stack 0
  2525  00001C                     _Update_Screen:
  2526                           	opt stack 20
  2527                           
  2528                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  2529                           
  2530                           ;incstack = 0
  2531  00001C  AE44               	btfss	_DS1621_tempC,7,c
  2532  00001E  D01C               	goto	l6485
  2533                           
  2534                           ;Main_Screen.c: 72: {
  2535                           ;Main_Screen.c: 73: tempC[0] = '-';
  2536  000020  0E2D               	movlw	45
  2537  000022  0100               	movlb	0	; () banked
  2538  000024  6FDC               	movwf	_tempC& (0+255),b
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  2542  000026  0E7F               	movlw	127
  2543  000028  1444               	andwf	_DS1621_tempC,w,c
  2544  00002A  6E17               	movwf	___awdiv@dividend,c
  2545  00002C  6A18               	clrf	___awdiv@dividend+1,c
  2546  00002E  0E00               	movlw	0
  2547  000030  6E1A               	movwf	___awdiv@divisor+1,c
  2548  000032  0E0A               	movlw	10
  2549  000034  6E19               	movwf	___awdiv@divisor,c
  2550  000036  EC25  F00C         	call	___awdiv	;wreg free
  2551  00003A  5017               	movf	?___awdiv,w,c
  2552  00003C  0F30               	addlw	48
  2553  00003E  0100               	movlb	0	; () banked
  2554  000040  6FDD               	movwf	(_tempC+1)& (0+255),b
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  2558  000042  0E7F               	movlw	127
  2559  000044  1444               	andwf	_DS1621_tempC,w,c
  2560  000046  6E1F               	movwf	___awmod@dividend,c
  2561  000048  6A20               	clrf	___awmod@dividend+1,c
  2562  00004A  0E00               	movlw	0
  2563  00004C  6E22               	movwf	___awmod@divisor+1,c
  2564  00004E  0E0A               	movlw	10
  2565  000050  6E21               	movwf	___awmod@divisor,c
  2566  000052  ECB4  F00C         	call	___awmod	;wreg free
  2567  000056  D01B               	goto	L1
  2568  000058                     l6485:
  2569                           
  2570                           ;Main_Screen.c: 77: else
  2571                           ;Main_Screen.c: 78: {
  2572                           ;Main_Screen.c: 79: tempC[0] = '+';
  2573  000058  0E2B               	movlw	43
  2574  00005A  0100               	movlb	0	; () banked
  2575  00005C  6FDC               	movwf	_tempC& (0+255),b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  2579  00005E  C044  F017         	movff	_DS1621_tempC,___awdiv@dividend
  2580  000062  C045  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  2581  000066  0E00               	movlw	0
  2582  000068  6E1A               	movwf	___awdiv@divisor+1,c
  2583  00006A  0E0A               	movlw	10
  2584  00006C  6E19               	movwf	___awdiv@divisor,c
  2585  00006E  EC25  F00C         	call	___awdiv	;wreg free
  2586  000072  5017               	movf	?___awdiv,w,c
  2587  000074  0F30               	addlw	48
  2588  000076  0100               	movlb	0	; () banked
  2589  000078  6FDD               	movwf	(_tempC+1)& (0+255),b
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  2593  00007A  C044  F01F         	movff	_DS1621_tempC,___awmod@dividend
  2594  00007E  C045  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  2595  000082  0E00               	movlw	0
  2596  000084  6E22               	movwf	___awmod@divisor+1,c
  2597  000086  0E0A               	movlw	10
  2598  000088  6E21               	movwf	___awmod@divisor,c
  2599  00008A  ECB4  F00C         	call	___awmod	;wreg free
  2600  00008E                     L1:
  2601  00008E  501F               	movf	?___awmod,w,c
  2602  000090  0F30               	addlw	48
  2603  000092  0100               	movlb	0	; () banked
  2604  000094  6FDE               	movwf	(_tempC+2)& (0+255),b
  2605  000096  D000               	goto	l6491
  2606  000098                     l6491:
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;Main_Screen.c: 82: }
  2610                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  2611  000098  AE47               	btfss	_DS1621_tempF+1,7,c
  2612  00009A  D029               	goto	l6501
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;Main_Screen.c: 85: {
  2616                           ;Main_Screen.c: 86: tempF[0] = '-';
  2617  00009C  0E2D               	movlw	45
  2618  00009E  0100               	movlb	0	; () banked
  2619  0000A0  6FE0               	movwf	_tempF& (0+255),b
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  2623  0000A2  C046  F0EB         	movff	_DS1621_tempF,??_Update_Screen
  2624  0000A6  C047  F0EC         	movff	_DS1621_tempF+1,??_Update_Screen+1
  2625  0000AA  0100               	movlb	0	; () banked
  2626  0000AC  1FEB               	comf	??_Update_Screen& (0+255),f,b
  2627  0000AE  1FEC               	comf	(??_Update_Screen+1)& (0+255),f,b
  2628  0000B0  4BEB               	infsnz	??_Update_Screen& (0+255),f,b
  2629  0000B2  2BEC               	incf	(??_Update_Screen+1)& (0+255),f,b
  2630  0000B4  C0EB  F0EF         	movff	??_Update_Screen,Update_Screen@neg_tempF
  2631  0000B8  C0EC  F0F0         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  2635  0000BC  C0EF  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  2636  0000C0  C0F0  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  2637  0000C4  0E00               	movlw	0
  2638  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  2639  0000C8  0E0A               	movlw	10
  2640  0000CA  6E19               	movwf	___awdiv@divisor,c
  2641  0000CC  EC25  F00C         	call	___awdiv	;wreg free
  2642  0000D0  5017               	movf	?___awdiv,w,c
  2643  0000D2  0F30               	addlw	48
  2644  0000D4  0100               	movlb	0	; () banked
  2645  0000D6  6FE1               	movwf	(_tempF+1)& (0+255),b
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  2649  0000D8  C0EF  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  2650  0000DC  C0F0  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  2651  0000E0  0E00               	movlw	0
  2652  0000E2  6E22               	movwf	___awmod@divisor+1,c
  2653  0000E4  0E0A               	movlw	10
  2654  0000E6  6E21               	movwf	___awmod@divisor,c
  2655  0000E8  ECB4  F00C         	call	___awmod	;wreg free
  2656  0000EC  D01B               	goto	L2
  2657  0000EE                     l6501:
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;Main_Screen.c: 91: else
  2661                           ;Main_Screen.c: 92: {
  2662                           ;Main_Screen.c: 93: tempF[0] = '+';
  2663  0000EE  0E2B               	movlw	43
  2664  0000F0  0100               	movlb	0	; () banked
  2665  0000F2  6FE0               	movwf	_tempF& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  2669  0000F4  C046  F017         	movff	_DS1621_tempF,___awdiv@dividend
  2670  0000F8  C047  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  2671  0000FC  0E00               	movlw	0
  2672  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  2673  000100  0E0A               	movlw	10
  2674  000102  6E19               	movwf	___awdiv@divisor,c
  2675  000104  EC25  F00C         	call	___awdiv	;wreg free
  2676  000108  5017               	movf	?___awdiv,w,c
  2677  00010A  0F30               	addlw	48
  2678  00010C  0100               	movlb	0	; () banked
  2679  00010E  6FE1               	movwf	(_tempF+1)& (0+255),b
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  2683  000110  C046  F01F         	movff	_DS1621_tempF,___awmod@dividend
  2684  000114  C047  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  2685  000118  0E00               	movlw	0
  2686  00011A  6E22               	movwf	___awmod@divisor+1,c
  2687  00011C  0E0A               	movlw	10
  2688  00011E  6E21               	movwf	___awmod@divisor,c
  2689  000120  ECB4  F00C         	call	___awmod	;wreg free
  2690  000124                     L2:
  2691  000124  501F               	movf	?___awmod,w,c
  2692  000126  0F30               	addlw	48
  2693  000128  0100               	movlb	0	; () banked
  2694  00012A  6FE2               	movwf	(_tempF+2)& (0+255),b
  2695  00012C  D000               	goto	l6507
  2696  00012E                     l6507:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;Main_Screen.c: 96: }
  2700                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  2701  00012E  385E               	swapf	_hour,w,c
  2702  000130  0B0F               	andlw	15
  2703  000132  0F30               	addlw	48
  2704  000134  0100               	movlb	0	; () banked
  2705  000136  6FC6               	movwf	_time& (0+255),b
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  2709  000138  505E               	movf	_hour,w,c
  2710  00013A  0B0F               	andlw	15
  2711  00013C  0F30               	addlw	48
  2712  00013E  0100               	movlb	0	; () banked
  2713  000140  6FC7               	movwf	(_time+1)& (0+255),b
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  2717  000142  385F               	swapf	_minute,w,c
  2718  000144  0B0F               	andlw	15
  2719  000146  0F30               	addlw	48
  2720  000148  0100               	movlb	0	; () banked
  2721  00014A  6FC9               	movwf	(_time+3)& (0+255),b
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f)+ '0';
  2725  00014C  505F               	movf	_minute,w,c
  2726  00014E  0B0F               	andlw	15
  2727  000150  0F30               	addlw	48
  2728  000152  0100               	movlb	0	; () banked
  2729  000154  6FCA               	movwf	(_time+4)& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  2733  000156  3862               	swapf	_second,w,c
  2734  000158  0B0F               	andlw	15
  2735  00015A  0F30               	addlw	48
  2736  00015C  0100               	movlb	0	; () banked
  2737  00015E  6FCC               	movwf	(_time+6)& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  2741  000160  5062               	movf	_second,w,c
  2742  000162  0B0F               	andlw	15
  2743  000164  0F30               	addlw	48
  2744  000166  0100               	movlb	0	; () banked
  2745  000168  6FCD               	movwf	(_time+7)& (0+255),b
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  2749  00016A  3860               	swapf	_month,w,c
  2750  00016C  0B0F               	andlw	15
  2751  00016E  0F30               	addlw	48
  2752  000170  0100               	movlb	0	; () banked
  2753  000172  6FBD               	movwf	_date& (0+255),b
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;Main_Screen.c: 108: date[1] = (month & 0x0f)+ '0';
  2757  000174  5060               	movf	_month,w,c
  2758  000176  0B0F               	andlw	15
  2759  000178  0F30               	addlw	48
  2760  00017A  0100               	movlb	0	; () banked
  2761  00017C  6FBE               	movwf	(_date+1)& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;Main_Screen.c: 109: date[3] = (day>>4) + '0';
  2765  00017E  385A               	swapf	_day,w,c
  2766  000180  0B0F               	andlw	15
  2767  000182  0F30               	addlw	48
  2768  000184  0100               	movlb	0	; () banked
  2769  000186  6FC0               	movwf	(_date+3)& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;Main_Screen.c: 110: date[4] = (day & 0x0f)+ '0';
  2773  000188  505A               	movf	_day,w,c
  2774  00018A  0B0F               	andlw	15
  2775  00018C  0F30               	addlw	48
  2776  00018E  0100               	movlb	0	; () banked
  2777  000190  6FC1               	movwf	(_date+4)& (0+255),b
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;Main_Screen.c: 111: date[6] = (year>>4) + '0';
  2781  000192  386C               	swapf	_year,w,c
  2782  000194  0B0F               	andlw	15
  2783  000196  0F30               	addlw	48
  2784  000198  0100               	movlb	0	; () banked
  2785  00019A  6FC3               	movwf	(_date+6)& (0+255),b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;Main_Screen.c: 112: date[7] = (year & 0x0f)+ '0';
  2789  00019C  506C               	movf	_year,w,c
  2790  00019E  0B0F               	andlw	15
  2791  0001A0  0F30               	addlw	48
  2792  0001A2  0100               	movlb	0	; () banked
  2793  0001A4  6FC4               	movwf	(_date+7)& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  2797  0001A6  0450               	decf	_FAN,w,c
  2798  0001A8  A4D8               	btfss	status,2,c
  2799  0001AA  D00B               	goto	l6535
  2800                           
  2801                           ; BSR set to: 0
  2802  0001AC  0ED8               	movlw	low _Fan_SW_Txt
  2803  0001AE  6E11               	movwf	strcpy@to,c
  2804  0001B0  0E00               	movlw	high _Fan_SW_Txt
  2805  0001B2  6E12               	movwf	strcpy@to+1,c
  2806  0001B4  0EED               	movlw	low STR_18
  2807  0001B6  6E13               	movwf	strcpy@from,c
  2808  0001B8  0EFF               	movlw	high STR_18
  2809  0001BA  6E14               	movwf	strcpy@from+1,c
  2810  0001BC  EC2F  F010         	call	_strcpy	;wreg free
  2811  0001C0  D00B               	goto	l6537
  2812  0001C2                     l6535:
  2813                           
  2814                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  2815  0001C2  0ED8               	movlw	low _Fan_SW_Txt
  2816  0001C4  6E11               	movwf	strcpy@to,c
  2817  0001C6  0E00               	movlw	high _Fan_SW_Txt
  2818  0001C8  6E12               	movwf	strcpy@to+1,c
  2819  0001CA  0EF1               	movlw	low STR_19
  2820  0001CC  6E13               	movwf	strcpy@from,c
  2821  0001CE  0EFF               	movlw	high STR_19
  2822  0001D0  6E14               	movwf	strcpy@from+1,c
  2823  0001D2  EC2F  F010         	call	_strcpy	;wreg free
  2824  0001D6  D000               	goto	l6537
  2825  0001D8                     l6537:
  2826                           
  2827                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  2828  0001D8  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  2829  0001DC  6A18               	clrf	___awdiv@dividend+1,c
  2830  0001DE  0E00               	movlw	0
  2831  0001E0  6E1A               	movwf	___awdiv@divisor+1,c
  2832  0001E2  0E64               	movlw	100
  2833  0001E4  6E19               	movwf	___awdiv@divisor,c
  2834  0001E6  EC25  F00C         	call	___awdiv	;wreg free
  2835  0001EA  5017               	movf	?___awdiv,w,c
  2836  0001EC  0F30               	addlw	48
  2837  0001EE  0100               	movlb	0	; () banked
  2838  0001F0  6FD4               	movwf	_DC_Txt& (0+255),b
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;Main_Screen.c: 121: DC_Txt[1] = duty_cycle/10 %10 + '0';
  2842  0001F2  0E00               	movlw	0
  2843  0001F4  6E1A               	movwf	___awdiv@divisor+1,c
  2844  0001F6  0E0A               	movlw	10
  2845  0001F8  6E19               	movwf	___awdiv@divisor,c
  2846  0001FA  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  2847  0001FE  6A18               	clrf	___awdiv@dividend+1,c
  2848  000200  EC25  F00C         	call	___awdiv	;wreg free
  2849  000204  C017  F01F         	movff	?___awdiv,___awmod@dividend
  2850  000208  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  2851  00020C  0E00               	movlw	0
  2852  00020E  6E22               	movwf	___awmod@divisor+1,c
  2853  000210  0E0A               	movlw	10
  2854  000212  6E21               	movwf	___awmod@divisor,c
  2855  000214  ECB4  F00C         	call	___awmod	;wreg free
  2856  000218  501F               	movf	?___awmod,w,c
  2857  00021A  0F30               	addlw	48
  2858  00021C  0100               	movlb	0	; () banked
  2859  00021E  6FD5               	movwf	(_DC_Txt+1)& (0+255),b
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;Main_Screen.c: 122: DC_Txt[2] = duty_cycle%10 + '0';
  2863  000220  C05C  F01F         	movff	_duty_cycle,___awmod@dividend
  2864  000224  6A20               	clrf	___awmod@dividend+1,c
  2865  000226  0E00               	movlw	0
  2866  000228  6E22               	movwf	___awmod@divisor+1,c
  2867  00022A  0E0A               	movlw	10
  2868  00022C  6E21               	movwf	___awmod@divisor,c
  2869  00022E  ECB4  F00C         	call	___awmod	;wreg free
  2870  000232  501F               	movf	?___awmod,w,c
  2871  000234  0F30               	addlw	48
  2872  000236  0100               	movlb	0	; () banked
  2873  000238  6FD6               	movwf	(_DC_Txt+2)& (0+255),b
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;Main_Screen.c: 125: RPM_Txt[0] = rpm/1000 + '0';
  2877  00023A  C04C  F017         	movff	_rpm,___awdiv@dividend
  2878  00023E  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  2879  000242  0E03               	movlw	3
  2880  000244  6E1A               	movwf	___awdiv@divisor+1,c
  2881  000246  0EE8               	movlw	232
  2882  000248  6E19               	movwf	___awdiv@divisor,c
  2883  00024A  EC25  F00C         	call	___awdiv	;wreg free
  2884  00024E  5017               	movf	?___awdiv,w,c
  2885  000250  0F30               	addlw	48
  2886  000252  0100               	movlb	0	; () banked
  2887  000254  6FCF               	movwf	_RPM_Txt& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;Main_Screen.c: 127: RPM_Txt[1] = rpm/100 %10 + '0';
  2891  000256  0E00               	movlw	0
  2892  000258  6E1A               	movwf	___awdiv@divisor+1,c
  2893  00025A  0E64               	movlw	100
  2894  00025C  6E19               	movwf	___awdiv@divisor,c
  2895  00025E  C04C  F017         	movff	_rpm,___awdiv@dividend
  2896  000262  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  2897  000266  EC25  F00C         	call	___awdiv	;wreg free
  2898  00026A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  2899  00026E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  2900  000272  0E00               	movlw	0
  2901  000274  6E22               	movwf	___awmod@divisor+1,c
  2902  000276  0E0A               	movlw	10
  2903  000278  6E21               	movwf	___awmod@divisor,c
  2904  00027A  ECB4  F00C         	call	___awmod	;wreg free
  2905  00027E  501F               	movf	?___awmod,w,c
  2906  000280  0F30               	addlw	48
  2907  000282  0100               	movlb	0	; () banked
  2908  000284  6FD0               	movwf	(_RPM_Txt+1)& (0+255),b
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;Main_Screen.c: 128: RPM_Txt[2] = rpm%100 / 10 + '0';
  2912  000286  0E00               	movlw	0
  2913  000288  6E22               	movwf	___awmod@divisor+1,c
  2914  00028A  0E64               	movlw	100
  2915  00028C  6E21               	movwf	___awmod@divisor,c
  2916  00028E  C04C  F01F         	movff	_rpm,___awmod@dividend
  2917  000292  C04D  F020         	movff	_rpm+1,___awmod@dividend+1
  2918  000296  ECB4  F00C         	call	___awmod	;wreg free
  2919  00029A  C01F  F017         	movff	?___awmod,___awdiv@dividend
  2920  00029E  C020  F018         	movff	?___awmod+1,___awdiv@dividend+1
  2921  0002A2  0E00               	movlw	0
  2922  0002A4  6E1A               	movwf	___awdiv@divisor+1,c
  2923  0002A6  0E0A               	movlw	10
  2924  0002A8  6E19               	movwf	___awdiv@divisor,c
  2925  0002AA  EC25  F00C         	call	___awdiv	;wreg free
  2926  0002AE  5017               	movf	?___awdiv,w,c
  2927  0002B0  0F30               	addlw	48
  2928  0002B2  0100               	movlb	0	; () banked
  2929  0002B4  6FD1               	movwf	(_RPM_Txt+2)& (0+255),b
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm%10 %10 + '0';
  2933  0002B6  0E00               	movlw	0
  2934  0002B8  6E22               	movwf	___awmod@divisor+1,c
  2935  0002BA  0E0A               	movlw	10
  2936  0002BC  6E21               	movwf	___awmod@divisor,c
  2937  0002BE  C04C  F01F         	movff	_rpm,___awmod@dividend
  2938  0002C2  C04D  F020         	movff	_rpm+1,___awmod@dividend+1
  2939  0002C6  ECB4  F00C         	call	___awmod	;wreg free
  2940  0002CA  C01F  F0ED         	movff	?___awmod,_Update_Screen$2643
  2941  0002CE  C020  F0EE         	movff	?___awmod+1,_Update_Screen$2643+1
  2942                           
  2943                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm%10 %10 + '0';
  2944  0002D2  C0ED  F01F         	movff	_Update_Screen$2643,___awmod@dividend
  2945  0002D6  C0EE  F020         	movff	_Update_Screen$2643+1,___awmod@dividend+1
  2946  0002DA  0E00               	movlw	0
  2947  0002DC  6E22               	movwf	___awmod@divisor+1,c
  2948  0002DE  0E0A               	movlw	10
  2949  0002E0  6E21               	movwf	___awmod@divisor,c
  2950  0002E2  ECB4  F00C         	call	___awmod	;wreg free
  2951  0002E6  501F               	movf	?___awmod,w,c
  2952  0002E8  0F30               	addlw	48
  2953  0002EA  0100               	movlb	0	; () banked
  2954  0002EC  6FD2               	movwf	(_RPM_Txt+3)& (0+255),b
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;Main_Screen.c: 131: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  2958  0002EE  0E17               	movlw	23
  2959  0002F0  6E39               	movwf	drawtext@y,c
  2960  0002F2  0EDC               	movlw	low _tempC
  2961  0002F4  6E3A               	movwf	drawtext@_text,c
  2962  0002F6  0E00               	movlw	high _tempC
  2963  0002F8  6E3B               	movwf	drawtext@_text+1,c
  2964  0002FA  0EFF               	movlw	255
  2965  0002FC  6E3D               	movwf	drawtext@color+1,c
  2966  0002FE  0EE0               	movlw	224
  2967  000300  6E3C               	movwf	drawtext@color,c
  2968  000302  0E00               	movlw	0
  2969  000304  6E3F               	movwf	drawtext@bg+1,c
  2970  000306  0E00               	movlw	0
  2971  000308  6E3E               	movwf	drawtext@bg,c
  2972  00030A  0E02               	movlw	2
  2973  00030C  6E40               	movwf	drawtext@size,c
  2974  00030E  0E01               	movlw	1
  2975  000310  EC9B  F008         	call	_drawtext
  2976                           
  2977                           ;Main_Screen.c: 132: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  2978  000314  0E17               	movlw	23
  2979  000316  6E39               	movwf	drawtext@y,c
  2980  000318  0EE0               	movlw	low _tempF
  2981  00031A  6E3A               	movwf	drawtext@_text,c
  2982  00031C  0E00               	movlw	high _tempF
  2983  00031E  6E3B               	movwf	drawtext@_text+1,c
  2984  000320  0EFF               	movlw	255
  2985  000322  6E3D               	movwf	drawtext@color+1,c
  2986  000324  0EE0               	movlw	224
  2987  000326  6E3C               	movwf	drawtext@color,c
  2988  000328  0E00               	movlw	0
  2989  00032A  6E3F               	movwf	drawtext@bg+1,c
  2990  00032C  0E00               	movlw	0
  2991  00032E  6E3E               	movwf	drawtext@bg,c
  2992  000330  0E02               	movlw	2
  2993  000332  6E40               	movwf	drawtext@size,c
  2994  000334  0E46               	movlw	70
  2995  000336  EC9B  F008         	call	_drawtext
  2996                           
  2997                           ;Main_Screen.c: 133: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  2998  00033A  0E34               	movlw	52
  2999  00033C  6E39               	movwf	drawtext@y,c
  3000  00033E  0EC6               	movlw	low _time
  3001  000340  6E3A               	movwf	drawtext@_text,c
  3002  000342  0E00               	movlw	high _time
  3003  000344  6E3B               	movwf	drawtext@_text+1,c
  3004  000346  0E07               	movlw	7
  3005  000348  6E3D               	movwf	drawtext@color+1,c
  3006  00034A  683C               	setf	drawtext@color,c
  3007  00034C  0E00               	movlw	0
  3008  00034E  6E3F               	movwf	drawtext@bg+1,c
  3009  000350  0E00               	movlw	0
  3010  000352  6E3E               	movwf	drawtext@bg,c
  3011  000354  0E02               	movlw	2
  3012  000356  6E40               	movwf	drawtext@size,c
  3013  000358  0E0F               	movlw	15
  3014  00035A  EC9B  F008         	call	_drawtext
  3015                           
  3016                           ;Main_Screen.c: 134: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3017  00035E  0E52               	movlw	82
  3018  000360  6E39               	movwf	drawtext@y,c
  3019  000362  0EBD               	movlw	low _date
  3020  000364  6E3A               	movwf	drawtext@_text,c
  3021  000366  0E00               	movlw	high _date
  3022  000368  6E3B               	movwf	drawtext@_text+1,c
  3023  00036A  0E07               	movlw	7
  3024  00036C  6E3D               	movwf	drawtext@color+1,c
  3025  00036E  0EE0               	movlw	224
  3026  000370  6E3C               	movwf	drawtext@color,c
  3027  000372  0E00               	movlw	0
  3028  000374  6E3F               	movwf	drawtext@bg+1,c
  3029  000376  0E00               	movlw	0
  3030  000378  6E3E               	movwf	drawtext@bg,c
  3031  00037A  0E02               	movlw	2
  3032  00037C  6E40               	movwf	drawtext@size,c
  3033  00037E  0E0F               	movlw	15
  3034  000380  EC9B  F008         	call	_drawtext
  3035                           
  3036                           ;Main_Screen.c: 136: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  3037  000384  0E82               	movlw	130
  3038  000386  6E39               	movwf	drawtext@y,c
  3039  000388  0ED8               	movlw	low _Fan_SW_Txt
  3040  00038A  6E3A               	movwf	drawtext@_text,c
  3041  00038C  0E00               	movlw	high _Fan_SW_Txt
  3042  00038E  6E3B               	movwf	drawtext@_text+1,c
  3043  000390  0EF8               	movlw	248
  3044  000392  6E3D               	movwf	drawtext@color+1,c
  3045  000394  0E00               	movlw	0
  3046  000396  6E3C               	movwf	drawtext@color,c
  3047  000398  0E00               	movlw	0
  3048  00039A  6E3F               	movwf	drawtext@bg+1,c
  3049  00039C  0E00               	movlw	0
  3050  00039E  6E3E               	movwf	drawtext@bg,c
  3051  0003A0  0E01               	movlw	1
  3052  0003A2  6E40               	movwf	drawtext@size,c
  3053  0003A4  0E5F               	movlw	95
  3054  0003A6  EC9B  F008         	call	_drawtext
  3055                           
  3056                           ;Main_Screen.c: 137: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3057  0003AA  0E96               	movlw	150
  3058  0003AC  6E39               	movwf	drawtext@y,c
  3059  0003AE  0ED4               	movlw	low _DC_Txt
  3060  0003B0  6E3A               	movwf	drawtext@_text,c
  3061  0003B2  0E00               	movlw	high _DC_Txt
  3062  0003B4  6E3B               	movwf	drawtext@_text+1,c
  3063  0003B6  0E07               	movlw	7
  3064  0003B8  6E3D               	movwf	drawtext@color+1,c
  3065  0003BA  0EE0               	movlw	224
  3066  0003BC  6E3C               	movwf	drawtext@color,c
  3067  0003BE  0E00               	movlw	0
  3068  0003C0  6E3F               	movwf	drawtext@bg+1,c
  3069  0003C2  0E00               	movlw	0
  3070  0003C4  6E3E               	movwf	drawtext@bg,c
  3071  0003C6  0E01               	movlw	1
  3072  0003C8  6E40               	movwf	drawtext@size,c
  3073  0003CA  0E0A               	movlw	10
  3074  0003CC  EC9B  F008         	call	_drawtext
  3075                           
  3076                           ;Main_Screen.c: 138: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3077  0003D0  0E96               	movlw	150
  3078  0003D2  6E39               	movwf	drawtext@y,c
  3079  0003D4  0ECF               	movlw	low _RPM_Txt
  3080  0003D6  6E3A               	movwf	drawtext@_text,c
  3081  0003D8  0E00               	movlw	high _RPM_Txt
  3082  0003DA  6E3B               	movwf	drawtext@_text+1,c
  3083  0003DC  0E07               	movlw	7
  3084  0003DE  6E3D               	movwf	drawtext@color+1,c
  3085  0003E0  0EE0               	movlw	224
  3086  0003E2  6E3C               	movwf	drawtext@color,c
  3087  0003E4  0E00               	movlw	0
  3088  0003E6  6E3F               	movwf	drawtext@bg+1,c
  3089  0003E8  0E00               	movlw	0
  3090  0003EA  6E3E               	movwf	drawtext@bg,c
  3091  0003EC  0E01               	movlw	1
  3092  0003EE  6E40               	movwf	drawtext@size,c
  3093  0003F0  0E5D               	movlw	93
  3094  0003F2  EC9B  F008         	call	_drawtext
  3095  0003F6  0012               	return		;funcret
  3096  0003F8                     __end_of_Update_Screen:
  3097                           	opt stack 0
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           prodh	equ	0xFF4
  3103                           prodl	equ	0xFF3
  3104                           intcon	equ	0xFF2
  3105                           intcon2	equ	0xFF1
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postdec1	equ	0xFE5
  3109                           fsr1l	equ	0xFE1
  3110                           indf2	equ	0xFDF
  3111                           postinc2	equ	0xFDE
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function ___awmod *****************
  3117 ;; Defined at:
  3118 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  dividend        2   30[COMRAM] int 
  3121 ;;  divisor         2   32[COMRAM] int 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;  sign            1   35[COMRAM] unsigned char 
  3124 ;;  counter         1   34[COMRAM] unsigned char 
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  2   30[COMRAM] int 
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, status,0
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;Total ram usage:        6 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    3
  3141 ;; This function calls:
  3142 ;;		Nothing
  3143 ;; This function is called by:
  3144 ;;		_Update_Screen
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text3
  3149  001968                     __ptext3:
  3150                           	opt stack 0
  3151  001968                     ___awmod:
  3152                           	opt stack 26
  3153                           
  3154                           ;incstack = 0
  3155  001968  0E00               	movlw	0
  3156  00196A  6E24               	movwf	___awmod@sign,c
  3157  00196C  AE20               	btfss	___awmod@dividend+1,7,c
  3158  00196E  D007               	goto	l6269
  3159  001970  6C1F               	negf	___awmod@dividend,c
  3160  001972  1E20               	comf	___awmod@dividend+1,f,c
  3161  001974  B0D8               	btfsc	status,0,c
  3162  001976  2A20               	incf	___awmod@dividend+1,f,c
  3163  001978  0E01               	movlw	1
  3164  00197A  6E24               	movwf	___awmod@sign,c
  3165  00197C  D000               	goto	l6269
  3166  00197E                     l6269:
  3167  00197E  AE22               	btfss	___awmod@divisor+1,7,c
  3168  001980  D005               	goto	l6273
  3169  001982  6C21               	negf	___awmod@divisor,c
  3170  001984  1E22               	comf	___awmod@divisor+1,f,c
  3171  001986  B0D8               	btfsc	status,0,c
  3172  001988  2A22               	incf	___awmod@divisor+1,f,c
  3173  00198A  D000               	goto	l6273
  3174  00198C                     l6273:
  3175  00198C  5021               	movf	___awmod@divisor,w,c
  3176  00198E  1022               	iorwf	___awmod@divisor+1,w,c
  3177  001990  B4D8               	btfsc	status,2,c
  3178  001992  D01D               	goto	l6289
  3179  001994  0E01               	movlw	1
  3180  001996  6E23               	movwf	___awmod@counter,c
  3181  001998  D005               	goto	l6279
  3182  00199A                     l6277:
  3183  00199A  90D8               	bcf	status,0,c
  3184  00199C  3621               	rlcf	___awmod@divisor,f,c
  3185  00199E  3622               	rlcf	___awmod@divisor+1,f,c
  3186  0019A0  2A23               	incf	___awmod@counter,f,c
  3187  0019A2  D000               	goto	l6279
  3188  0019A4                     l6279:
  3189  0019A4  BE22               	btfsc	___awmod@divisor+1,7,c
  3190  0019A6  D002               	goto	l6281
  3191  0019A8  D7F8               	goto	l6277
  3192  0019AA  D000               	goto	l6281
  3193  0019AC                     l6281:
  3194  0019AC  5021               	movf	___awmod@divisor,w,c
  3195  0019AE  5C1F               	subwf	___awmod@dividend,w,c
  3196  0019B0  5022               	movf	___awmod@divisor+1,w,c
  3197  0019B2  5820               	subwfb	___awmod@dividend+1,w,c
  3198  0019B4  A0D8               	btfss	status,0,c
  3199  0019B6  D005               	goto	l6285
  3200  0019B8  5021               	movf	___awmod@divisor,w,c
  3201  0019BA  5E1F               	subwf	___awmod@dividend,f,c
  3202  0019BC  5022               	movf	___awmod@divisor+1,w,c
  3203  0019BE  5A20               	subwfb	___awmod@dividend+1,f,c
  3204  0019C0  D000               	goto	l6285
  3205  0019C2                     l6285:
  3206  0019C2  90D8               	bcf	status,0,c
  3207  0019C4  3222               	rrcf	___awmod@divisor+1,f,c
  3208  0019C6  3221               	rrcf	___awmod@divisor,f,c
  3209  0019C8  2E23               	decfsz	___awmod@counter,f,c
  3210  0019CA  D7F0               	goto	l6281
  3211  0019CC  D000               	goto	l6289
  3212  0019CE                     l6289:
  3213  0019CE  5024               	movf	___awmod@sign,w,c
  3214  0019D0  B4D8               	btfsc	status,2,c
  3215  0019D2  D005               	goto	l6293
  3216  0019D4  6C1F               	negf	___awmod@dividend,c
  3217  0019D6  1E20               	comf	___awmod@dividend+1,f,c
  3218  0019D8  B0D8               	btfsc	status,0,c
  3219  0019DA  2A20               	incf	___awmod@dividend+1,f,c
  3220  0019DC  D000               	goto	l6293
  3221  0019DE                     l6293:
  3222  0019DE  C01F  F01F         	movff	___awmod@dividend,?___awmod
  3223  0019E2  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  3224  0019E6  D000               	goto	l1093
  3225  0019E8                     l1093:
  3226  0019E8  0012               	return		;funcret
  3227  0019EA                     __end_of___awmod:
  3228                           	opt stack 0
  3229                           tblptru	equ	0xFF8
  3230                           tblptrh	equ	0xFF7
  3231                           tblptrl	equ	0xFF6
  3232                           tablat	equ	0xFF5
  3233                           prodh	equ	0xFF4
  3234                           prodl	equ	0xFF3
  3235                           intcon	equ	0xFF2
  3236                           intcon2	equ	0xFF1
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           fsr1l	equ	0xFE1
  3241                           indf2	equ	0xFDF
  3242                           postinc2	equ	0xFDE
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _Toggle_Fan *****************
  3248 ;; Defined at:
  3249 ;;		line 17 in file "Fan_Support.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;		None               void
  3256 ;; Registers used:
  3257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        0 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    7
  3270 ;; This function calls:
  3271 ;;		_Turn_Off_Fan
  3272 ;;		_Turn_On_Fan
  3273 ;; This function is called by:
  3274 ;;		_main
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text4
  3279  0022C4                     __ptext4:
  3280                           	opt stack 0
  3281  0022C4                     _Toggle_Fan:
  3282                           	opt stack 23
  3283                           
  3284                           ;Fan_Support.c: 19: if (FAN==0) Turn_On_Fan();
  3285                           
  3286                           ;incstack = 0
  3287  0022C4  5050               	movf	_FAN,w,c
  3288  0022C6  A4D8               	btfss	status,2,c
  3289  0022C8  D003               	goto	l6309
  3290  0022CA  EC0A  F011         	call	_Turn_On_Fan	;wreg free
  3291  0022CE  D003               	goto	l38
  3292  0022D0                     l6309:
  3293                           
  3294                           ;Fan_Support.c: 20: else Turn_Off_Fan();
  3295  0022D0  EC17  F011         	call	_Turn_Off_Fan	;wreg free
  3296  0022D4  D000               	goto	l38
  3297  0022D6                     l38:
  3298  0022D6  0012               	return		;funcret
  3299  0022D8                     __end_of_Toggle_Fan:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           intcon	equ	0xFF2
  3308                           intcon2	equ	0xFF1
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postdec1	equ	0xFE5
  3312                           fsr1l	equ	0xFE1
  3313                           indf2	equ	0xFDF
  3314                           postinc2	equ	0xFDE
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _Turn_On_Fan *****************
  3320 ;; Defined at:
  3321 ;;		line 31 in file "Fan_Support.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;		None
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;Total ram usage:        0 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    6
  3342 ;; This function calls:
  3343 ;;		_do_update_pwm
  3344 ;;		_printf
  3345 ;; This function is called by:
  3346 ;;		_Toggle_Fan
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text5
  3351  002214                     __ptext5:
  3352                           	opt stack 0
  3353  002214                     _Turn_On_Fan:
  3354                           	opt stack 23
  3355                           
  3356                           ;Fan_Support.c: 33: printf ("Fan is turned on\r\n");
  3357                           
  3358                           ;incstack = 0
  3359  002214  0E8D               	movlw	low STR_2
  3360  002216  6E1D               	movwf	printf@f,c
  3361  002218  0EFF               	movlw	high STR_2
  3362  00221A  6E1E               	movwf	printf@f+1,c
  3363  00221C  ECFC  F001         	call	_printf	;wreg free
  3364                           
  3365                           ;Fan_Support.c: 34: FAN = 1;
  3366  002220  0E01               	movlw	1
  3367  002222  6E50               	movwf	_FAN,c
  3368                           
  3369                           ;Fan_Support.c: 35: do_update_pwm(duty_cycle);
  3370  002224  505C               	movf	_duty_cycle,w,c
  3371  002226  ECCA  F00B         	call	_do_update_pwm
  3372                           
  3373                           ;Fan_Support.c: 36: PORTAbits.RA4 = 1;
  3374  00222A  8880               	bsf	3968,4,c	;volatile
  3375  00222C  0012               	return		;funcret
  3376  00222E                     __end_of_Turn_On_Fan:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           intcon	equ	0xFF2
  3385                           intcon2	equ	0xFF1
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           postdec1	equ	0xFE5
  3389                           fsr1l	equ	0xFE1
  3390                           indf2	equ	0xFDF
  3391                           postinc2	equ	0xFDE
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _Turn_Off_Fan *****************
  3397 ;; Defined at:
  3398 ;;		line 23 in file "Fan_Support.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;		None               void
  3405 ;; Registers used:
  3406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;Total ram usage:        0 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    6
  3419 ;; This function calls:
  3420 ;;		_do_update_pwm
  3421 ;;		_printf
  3422 ;; This function is called by:
  3423 ;;		_Toggle_Fan
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text6
  3428  00222E                     __ptext6:
  3429                           	opt stack 0
  3430  00222E                     _Turn_Off_Fan:
  3431                           	opt stack 23
  3432                           
  3433                           ;Fan_Support.c: 25: printf ("Fan is turned off\r\n");
  3434                           
  3435                           ;incstack = 0
  3436  00222E  0E79               	movlw	low STR_1
  3437  002230  6E1D               	movwf	printf@f,c
  3438  002232  0EFF               	movlw	high STR_1
  3439  002234  6E1E               	movwf	printf@f+1,c
  3440  002236  ECFC  F001         	call	_printf	;wreg free
  3441                           
  3442                           ;Fan_Support.c: 26: FAN = 0;
  3443  00223A  0E00               	movlw	0
  3444  00223C  6E50               	movwf	_FAN,c
  3445                           
  3446                           ;Fan_Support.c: 27: do_update_pwm(0);
  3447  00223E  0E00               	movlw	0
  3448  002240  ECCA  F00B         	call	_do_update_pwm
  3449                           
  3450                           ;Fan_Support.c: 28: PORTAbits.RA4 = 0;
  3451  002244  9880               	bcf	3968,4,c	;volatile
  3452  002246  0012               	return		;funcret
  3453  002248                     __end_of_Turn_Off_Fan:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           prodh	equ	0xFF4
  3460                           prodl	equ	0xFF3
  3461                           intcon	equ	0xFF2
  3462                           intcon2	equ	0xFF1
  3463                           postinc0	equ	0xFEE
  3464                           wreg	equ	0xFE8
  3465                           postdec1	equ	0xFE5
  3466                           fsr1l	equ	0xFE1
  3467                           indf2	equ	0xFDF
  3468                           postinc2	equ	0xFDE
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _printf *****************
  3474 ;; Defined at:
  3475 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  f               2   28[COMRAM] PTR const unsigned char 
  3478 ;;		 -> STR_8(15), STR_7(22), STR_6(16), STR_5(20), 
  3479 ;;		 -> STR_4(21), STR_3(30), STR_2(19), STR_1(20), 
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;  idx             1   46[COMRAM] unsigned char 
  3482 ;;  tmpval          4    0        struct .
  3483 ;;  cp              3    0        PTR const unsigned char 
  3484 ;;  width           2   53[COMRAM] int 
  3485 ;;  val             2   50[COMRAM] unsigned int 
  3486 ;;  ap              2   47[COMRAM] PTR void [1]
  3487 ;;		 -> ?_printf(2), 
  3488 ;;  len             2    0        unsigned int 
  3489 ;;  c               1   55[COMRAM] char 
  3490 ;;  flag            1   52[COMRAM] unsigned char 
  3491 ;;  prec            1   49[COMRAM] char 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  2   28[COMRAM] int 
  3494 ;; Registers used:
  3495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:       28 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    4
  3508 ;; This function calls:
  3509 ;;		___lwdiv
  3510 ;;		___lwmod
  3511 ;;		___wmul
  3512 ;;		_isdigit
  3513 ;;		_putch
  3514 ;; This function is called by:
  3515 ;;		_Turn_Off_Fan
  3516 ;;		_Turn_On_Fan
  3517 ;;		_main
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text7
  3522  0003F8                     __ptext7:
  3523                           	opt stack 0
  3524  0003F8                     _printf:
  3525                           	opt stack 26
  3526                           
  3527                           ;doprnt.c: 466: va_list ap;
  3528                           ;doprnt.c: 499: signed char c;
  3529                           ;doprnt.c: 501: int width;
  3530                           ;doprnt.c: 506: signed char prec;
  3531                           ;doprnt.c: 508: unsigned char flag;
  3532                           ;doprnt.c: 523: union {
  3533                           ;doprnt.c: 524: unsigned long vd;
  3534                           ;doprnt.c: 525: double integ;
  3535                           ;doprnt.c: 526: } tmpval;
  3536                           ;doprnt.c: 528: unsigned int val;
  3537                           ;doprnt.c: 529: unsigned len;
  3538                           ;doprnt.c: 530: const char * cp;
  3539                           ;doprnt.c: 533: *ap = __va_start();
  3540                           
  3541                           ;incstack = 0
  3542  0003F8  0E1F               	movlw	low (?_printf+2)
  3543  0003FA  6E30               	movwf	printf@ap,c
  3544  0003FC  0E00               	movlw	high (?_printf+2)
  3545  0003FE  6E31               	movwf	printf@ap+1,c
  3546                           
  3547                           ;doprnt.c: 536: while(c = *f++) {
  3548  000400  D199               	goto	l5723
  3549  000402                     l5597:
  3550                           
  3551                           ;doprnt.c: 538: if(c != '%')
  3552  000402  0E25               	movlw	37
  3553  000404  1838               	xorwf	printf@c,w,c
  3554  000406  B4D8               	btfsc	status,2,c
  3555  000408  D004               	goto	l5601
  3556                           
  3557                           ;doprnt.c: 540: {
  3558                           ;doprnt.c: 541: (putch(c) );
  3559  00040A  5038               	movf	printf@c,w,c
  3560  00040C  ECC7  F011         	call	_putch
  3561                           
  3562                           ;doprnt.c: 542: continue;
  3563  000410  D191               	goto	l5723
  3564  000412                     l5601:
  3565                           
  3566                           ;doprnt.c: 543: }
  3567                           ;doprnt.c: 546: width = 0;
  3568  000412  0E00               	movlw	0
  3569  000414  6E37               	movwf	printf@width+1,c
  3570  000416  0E00               	movlw	0
  3571  000418  6E36               	movwf	printf@width,c
  3572                           
  3573                           ;doprnt.c: 548: flag = 0;
  3574  00041A  0E00               	movlw	0
  3575  00041C  6E35               	movwf	printf@flag,c
  3576                           
  3577                           ;doprnt.c: 551: switch(*f) {
  3578                           
  3579                           ;doprnt.c: 550: for(;;) {
  3580  00041E  D005               	goto	l5607
  3581  000420                     l5603:
  3582                           
  3583                           ;doprnt.c: 580: flag |= 0x04;
  3584  000420  8435               	bsf	printf@flag,2,c
  3585                           
  3586                           ;doprnt.c: 581: f++;
  3587  000422  4A1D               	infsnz	printf@f,f,c
  3588  000424  2A1E               	incf	printf@f+1,f,c
  3589                           
  3590                           ;doprnt.c: 582: continue;
  3591  000426  D001               	goto	l5607
  3592                           
  3593                           ;doprnt.c: 584: }
  3594  000428  D00B               	goto	l5609
  3595  00042A                     l5607:
  3596  00042A  C01D  FFF6         	movff	printf@f,tblptrl
  3597  00042E  C01E  FFF7         	movff	printf@f+1,tblptrh
  3598  000432                     	if	0	;tblptru may be non-zero
  3599  000432                     	endif
  3600  000432                     	if	0	;tblptru may be non-zero
  3601  000432                     	endif
  3602  000432  0008               	tblrd		*
  3603  000434  50F5               	movf	tablat,w,c
  3604                           
  3605                           ; Switch size 1, requested type "space"
  3606                           ; Number of cases is 1, Range of values is 48 to 48
  3607                           ; switch strategies available:
  3608                           ; Name         Instructions Cycles
  3609                           ; simple_byte            4     3 (average)
  3610                           ;	Chosen strategy is simple_byte
  3611  000436  0A30               	xorlw	48	; case 48
  3612  000438  B4D8               	btfsc	status,2,c
  3613  00043A  D7F2               	goto	l5603
  3614                           
  3615                           ;doprnt.c: 585: break;
  3616  00043C  D001               	goto	l5609
  3617                           
  3618                           ;doprnt.c: 586: }
  3619  00043E  D7F5               	goto	l5607
  3620  000440                     l5609:
  3621                           
  3622                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3623  000440  C01D  FFF6         	movff	printf@f,tblptrl
  3624  000444  C01E  FFF7         	movff	printf@f+1,tblptrh
  3625  000448                     	if	0	;tblptru may be non-zero
  3626  000448                     	endif
  3627  000448                     	if	0	;tblptru may be non-zero
  3628  000448                     	endif
  3629  000448  0008               	tblrd		*
  3630  00044A  50F5               	movf	tablat,w,c
  3631  00044C  ECDB  F010         	call	_isdigit
  3632  000450  A0D8               	btfss	status,0,c
  3633  000452  D03B               	goto	l5625
  3634                           
  3635                           ;doprnt.c: 598: width = 0;
  3636  000454  0E00               	movlw	0
  3637  000456  6E37               	movwf	printf@width+1,c
  3638  000458  0E00               	movlw	0
  3639  00045A  6E36               	movwf	printf@width,c
  3640  00045C  D000               	goto	l5613
  3641  00045E                     l5613:
  3642                           
  3643                           ;doprnt.c: 600: width *= 10;
  3644  00045E  C036  F011         	movff	printf@width,___wmul@multiplier
  3645  000462  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  3646  000466  0E00               	movlw	0
  3647  000468  6E14               	movwf	___wmul@multiplicand+1,c
  3648  00046A  0E0A               	movlw	10
  3649  00046C  6E13               	movwf	___wmul@multiplicand,c
  3650  00046E  EC8D  F010         	call	___wmul	;wreg free
  3651  000472  C011  F036         	movff	?___wmul,printf@width
  3652  000476  C012  F037         	movff	?___wmul+1,printf@width+1
  3653                           
  3654                           ;doprnt.c: 601: width += *f++ - '0';
  3655  00047A  0ED0               	movlw	208
  3656  00047C  6E2B               	movwf	??_printf& (0+255),c
  3657  00047E  0EFF               	movlw	255
  3658  000480  6E2C               	movwf	(??_printf+1)& (0+255),c
  3659  000482  C01D  FFF6         	movff	printf@f,tblptrl
  3660  000486  C01E  FFF7         	movff	printf@f+1,tblptrh
  3661  00048A                     	if	0	;tblptru may be non-zero
  3662  00048A                     	endif
  3663  00048A                     	if	0	;tblptru may be non-zero
  3664  00048A                     	endif
  3665  00048A  0008               	tblrd		*
  3666  00048C  50F5               	movf	tablat,w,c
  3667  00048E  6E2D               	movwf	(??_printf+2)& (0+255),c
  3668  000490  6A2E               	clrf	(??_printf+3)& (0+255),c
  3669  000492  502B               	movf	??_printf,w,c
  3670  000494  262D               	addwf	??_printf+2,f,c
  3671  000496  502C               	movf	??_printf+1,w,c
  3672  000498  222E               	addwfc	??_printf+3,f,c
  3673  00049A  502D               	movf	??_printf+2,w,c
  3674  00049C  2636               	addwf	printf@width,f,c
  3675  00049E  502E               	movf	??_printf+3,w,c
  3676  0004A0  2237               	addwfc	printf@width+1,f,c
  3677  0004A2  4A1D               	infsnz	printf@f,f,c
  3678  0004A4  2A1E               	incf	printf@f+1,f,c
  3679                           
  3680                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3681  0004A6  C01D  FFF6         	movff	printf@f,tblptrl
  3682  0004AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  3683  0004AE                     	if	0	;tblptru may be non-zero
  3684  0004AE                     	endif
  3685  0004AE                     	if	0	;tblptru may be non-zero
  3686  0004AE                     	endif
  3687  0004AE  0008               	tblrd		*
  3688  0004B0  50F5               	movf	tablat,w,c
  3689  0004B2  ECDB  F010         	call	_isdigit
  3690  0004B6  A0D8               	btfss	status,0,c
  3691  0004B8  D008               	goto	l5625
  3692  0004BA  D7D1               	goto	l5613
  3693                           
  3694                           ;doprnt.c: 608: }
  3695                           ;doprnt.c: 635: switch(c = *f++) {
  3696  0004BC  D006               	goto	l5625
  3697                           
  3698                           ;doprnt.c: 638: goto alldone;
  3699                           
  3700                           ;doprnt.c: 637: case 0:
  3701  0004BE  D148               	goto	l851
  3702                           
  3703                           ;doprnt.c: 698: case 'i':
  3704                           ;doprnt.c: 699: break;
  3705                           
  3706                           ;doprnt.c: 697: case 'd':
  3707  0004C0  D01B               	goto	l814
  3708  0004C2                     l5621:
  3709                           
  3710                           ;doprnt.c: 721: flag |= 0x80;
  3711  0004C2  8E35               	bsf	printf@flag,7,c
  3712                           
  3713                           ;doprnt.c: 723: break;
  3714  0004C4  D019               	goto	l814
  3715                           
  3716                           ;doprnt.c: 813: continue;
  3717                           
  3718                           ;doprnt.c: 802: default:
  3719  0004C6  D136               	goto	l5723
  3720                           
  3721                           ;doprnt.c: 822: }
  3722  0004C8  D017               	goto	l814
  3723  0004CA                     l5625:
  3724  0004CA  C01D  FFF6         	movff	printf@f,tblptrl
  3725  0004CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  3726  0004D2  4A1D               	infsnz	printf@f,f,c
  3727  0004D4  2A1E               	incf	printf@f+1,f,c
  3728  0004D6                     	if	0	;tblptru may be non-zero
  3729  0004D6                     	endif
  3730  0004D6                     	if	0	;tblptru may be non-zero
  3731  0004D6                     	endif
  3732  0004D6  0008               	tblrd		*
  3733  0004D8  CFF5 F038          	movff	tablat,printf@c
  3734  0004DC  5038               	movf	printf@c,w,c
  3735                           
  3736                           ; Switch size 1, requested type "space"
  3737                           ; Number of cases is 4, Range of values is 0 to 120
  3738                           ; switch strategies available:
  3739                           ; Name         Instructions Cycles
  3740                           ; simple_byte           13     7 (average)
  3741                           ;	Chosen strategy is simple_byte
  3742  0004DE  0A00               	xorlw	0	; case 0
  3743  0004E0  B4D8               	btfsc	status,2,c
  3744  0004E2  D136               	goto	l851
  3745  0004E4  0A64               	xorlw	100	; case 100
  3746  0004E6  B4D8               	btfsc	status,2,c
  3747  0004E8  D007               	goto	l814
  3748  0004EA  0A0D               	xorlw	13	; case 105
  3749  0004EC  B4D8               	btfsc	status,2,c
  3750  0004EE  D004               	goto	l814
  3751  0004F0  0A11               	xorlw	17	; case 120
  3752  0004F2  B4D8               	btfsc	status,2,c
  3753  0004F4  D7E6               	goto	l5621
  3754  0004F6  D11E               	goto	l5723
  3755  0004F8                     l814:
  3756                           
  3757                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3758  0004F8  BE35               	btfsc	printf@flag,7,c
  3759  0004FA  D015               	goto	l5637
  3760                           
  3761                           ;doprnt.c: 1253: {
  3762                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3763  0004FC  C030  FFD9         	movff	printf@ap,fsr2l
  3764  000500  C031  FFDA         	movff	printf@ap+1,fsr2h
  3765  000504  CFDE F033          	movff	postinc2,printf@val
  3766  000508  CFDD F034          	movff	postdec2,printf@val+1
  3767  00050C  0E02               	movlw	2
  3768  00050E  2630               	addwf	printf@ap,f,c
  3769  000510  0E00               	movlw	0
  3770  000512  2231               	addwfc	printf@ap+1,f,c
  3771                           
  3772                           ;doprnt.c: 1261: if((int)val < 0) {
  3773  000514  AE34               	btfss	printf@val+1,7,c
  3774  000516  D04E               	goto	l5671
  3775                           
  3776                           ;doprnt.c: 1262: flag |= 0x03;
  3777  000518  0E03               	movlw	3
  3778  00051A  1235               	iorwf	printf@flag,f,c
  3779                           
  3780                           ;doprnt.c: 1263: val = -val;
  3781  00051C  6C33               	negf	printf@val,c
  3782  00051E  1E34               	comf	printf@val+1,f,c
  3783  000520  B0D8               	btfsc	status,0,c
  3784  000522  2A34               	incf	printf@val+1,f,c
  3785                           
  3786                           ;doprnt.c: 1264: }
  3787                           ;doprnt.c: 1266: }
  3788  000524  D047               	goto	l5671
  3789  000526                     l5637:
  3790                           
  3791                           ;doprnt.c: 1268: else
  3792                           ;doprnt.c: 1273: {
  3793                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3794  000526  C030  FFD9         	movff	printf@ap,fsr2l
  3795  00052A  C031  FFDA         	movff	printf@ap+1,fsr2h
  3796  00052E  CFDE F033          	movff	postinc2,printf@val
  3797  000532  CFDD F034          	movff	postdec2,printf@val+1
  3798  000536  0E02               	movlw	2
  3799  000538  2630               	addwf	printf@ap,f,c
  3800  00053A  0E00               	movlw	0
  3801  00053C  2231               	addwfc	printf@ap+1,f,c
  3802                           
  3803                           ;doprnt.c: 1287: }
  3804                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3805  00053E  D03A               	goto	l5671
  3806  000540                     l5641:
  3807                           
  3808                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3809  000540  0E01               	movlw	1
  3810  000542  6E38               	movwf	printf@c,c
  3811  000544                     l5643:
  3812  000544  0E05               	movlw	5
  3813  000546  1838               	xorwf	printf@c,w,c
  3814  000548  B4D8               	btfsc	status,2,c
  3815  00054A  D03D               	goto	l5673
  3816  00054C  D001               	goto	l5647
  3817  00054E  D03B               	goto	l5673
  3818  000550                     l5647:
  3819                           
  3820                           ;doprnt.c: 1306: if(val < dpowers[c])
  3821  000550  5038               	movf	printf@c,w,c
  3822  000552  0D02               	mullw	2
  3823  000554  0EF4               	movlw	low _dpowers
  3824  000556  24F3               	addwf	prodl,w,c
  3825  000558  6EF6               	movwf	tblptrl,c
  3826  00055A  0EFE               	movlw	high _dpowers
  3827  00055C  20F4               	addwfc	prodh,w,c
  3828  00055E  6EF7               	movwf	tblptrh,c
  3829  000560                     	if	0	;There are less than 3 active tblptr bytes
  3830  000560                     	endif
  3831  000560  0009               	tblrd		*+
  3832  000562  50F5               	movf	tablat,w,c
  3833  000564  5C33               	subwf	printf@val,w,c
  3834  000566  0009               	tblrd		*+
  3835  000568  50F5               	movf	tablat,w,c
  3836  00056A  5834               	subwfb	printf@val+1,w,c
  3837  00056C  A0D8               	btfss	status,0,c
  3838  00056E  D02B               	goto	l5673
  3839  000570  D001               	goto	l5651
  3840                           
  3841                           ;doprnt.c: 1307: break;
  3842  000572  D029               	goto	l5673
  3843  000574                     l5651:
  3844  000574  2A38               	incf	printf@c,f,c
  3845  000576  D7E6               	goto	l5643
  3846                           
  3847                           ;doprnt.c: 1309: break;
  3848  000578  D026               	goto	l5673
  3849  00057A                     l5655:
  3850                           
  3851                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3852  00057A  0E01               	movlw	1
  3853  00057C  6E38               	movwf	printf@c,c
  3854  00057E                     l5657:
  3855  00057E  0E04               	movlw	4
  3856  000580  1838               	xorwf	printf@c,w,c
  3857  000582  B4D8               	btfsc	status,2,c
  3858  000584  D020               	goto	l5673
  3859  000586  D001               	goto	l5661
  3860  000588  D01E               	goto	l5673
  3861  00058A                     l5661:
  3862                           
  3863                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3864  00058A  5038               	movf	printf@c,w,c
  3865  00058C  0D02               	mullw	2
  3866  00058E  0EFE               	movlw	low _hexpowers
  3867  000590  24F3               	addwf	prodl,w,c
  3868  000592  6EF6               	movwf	tblptrl,c
  3869  000594  0EFE               	movlw	high _hexpowers
  3870  000596  20F4               	addwfc	prodh,w,c
  3871  000598  6EF7               	movwf	tblptrh,c
  3872  00059A                     	if	0	;There are less than 3 active tblptr bytes
  3873  00059A                     	endif
  3874  00059A  0009               	tblrd		*+
  3875  00059C  50F5               	movf	tablat,w,c
  3876  00059E  5C33               	subwf	printf@val,w,c
  3877  0005A0  0009               	tblrd		*+
  3878  0005A2  50F5               	movf	tablat,w,c
  3879  0005A4  5834               	subwfb	printf@val+1,w,c
  3880  0005A6  A0D8               	btfss	status,0,c
  3881  0005A8  D00E               	goto	l5673
  3882  0005AA  D001               	goto	l5665
  3883                           
  3884                           ;doprnt.c: 1318: break;
  3885  0005AC  D00C               	goto	l5673
  3886  0005AE                     l5665:
  3887  0005AE  2A38               	incf	printf@c,f,c
  3888  0005B0  D7E6               	goto	l5657
  3889                           
  3890                           ;doprnt.c: 1336: }
  3891                           
  3892                           ;doprnt.c: 1320: break;
  3893  0005B2  D009               	goto	l5673
  3894  0005B4                     l5671:
  3895  0005B4  5035               	movf	printf@flag,w,c
  3896  0005B6  0B80               	andlw	128
  3897                           
  3898                           ; Switch size 1, requested type "space"
  3899                           ; Number of cases is 2, Range of values is 0 to 128
  3900                           ; switch strategies available:
  3901                           ; Name         Instructions Cycles
  3902                           ; simple_byte            7     4 (average)
  3903                           ;	Chosen strategy is simple_byte
  3904  0005B8  0A00               	xorlw	0	; case 0
  3905  0005BA  B4D8               	btfsc	status,2,c
  3906  0005BC  D7C1               	goto	l5641
  3907  0005BE  0A80               	xorlw	128	; case 128
  3908  0005C0  B4D8               	btfsc	status,2,c
  3909  0005C2  D7DB               	goto	l5655
  3910  0005C4  D000               	goto	l5673
  3911  0005C6                     l5673:
  3912                           
  3913                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3914  0005C6  5036               	movf	printf@width,w,c
  3915  0005C8  1037               	iorwf	printf@width+1,w,c
  3916  0005CA  B4D8               	btfsc	status,2,c
  3917  0005CC  D00A               	goto	l5679
  3918  0005CE  C035  F02B         	movff	printf@flag,??_printf
  3919  0005D2  0E03               	movlw	3
  3920  0005D4  162B               	andwf	??_printf,f,c
  3921  0005D6  B4D8               	btfsc	status,2,c
  3922  0005D8  D004               	goto	l5679
  3923                           
  3924                           ;doprnt.c: 1346: width--;
  3925  0005DA  0636               	decf	printf@width,f,c
  3926  0005DC  A0D8               	btfss	status,0,c
  3927  0005DE  0637               	decf	printf@width+1,f,c
  3928  0005E0  D000               	goto	l5679
  3929  0005E2                     l5679:
  3930                           
  3931                           ;doprnt.c: 1381: if(width > c)
  3932  0005E2  0E80               	movlw	128
  3933  0005E4  BE38               	btfsc	printf@c,7,c
  3934  0005E6  0E7F               	movlw	127
  3935  0005E8  6E2B               	movwf	??_printf& (0+255),c
  3936  0005EA  5036               	movf	printf@width,w,c
  3937  0005EC  5C38               	subwf	printf@c,w,c
  3938  0005EE  5037               	movf	printf@width+1,w,c
  3939  0005F0  0A80               	xorlw	128
  3940  0005F2  582B               	subwfb	??_printf& (0+255),w,c
  3941  0005F4  B0D8               	btfsc	status,0,c
  3942  0005F6  D007               	goto	l5683
  3943                           
  3944                           ;doprnt.c: 1382: width -= c;
  3945  0005F8  5038               	movf	printf@c,w,c
  3946  0005FA  5E36               	subwf	printf@width,f,c
  3947  0005FC  0E00               	movlw	0
  3948  0005FE  BE38               	btfsc	printf@c,7,c
  3949  000600  0EFF               	movlw	255
  3950  000602  5A37               	subwfb	printf@width+1,f,c
  3951  000604  D005               	goto	l5685
  3952  000606                     l5683:
  3953                           
  3954                           ;doprnt.c: 1383: else
  3955                           ;doprnt.c: 1384: width = 0;
  3956  000606  0E00               	movlw	0
  3957  000608  6E37               	movwf	printf@width+1,c
  3958  00060A  0E00               	movlw	0
  3959  00060C  6E36               	movwf	printf@width,c
  3960  00060E  D000               	goto	l5685
  3961  000610                     l5685:
  3962                           
  3963                           ;doprnt.c: 1387: if(flag & 0x04) {
  3964  000610  A435               	btfss	printf@flag,2,c
  3965  000612  D01A               	goto	l5697
  3966                           
  3967                           ;doprnt.c: 1392: if(flag & 0x03)
  3968  000614  C035  F02B         	movff	printf@flag,??_printf
  3969  000618  0E03               	movlw	3
  3970  00061A  162B               	andwf	??_printf,f,c
  3971  00061C  B4D8               	btfsc	status,2,c
  3972  00061E  D004               	goto	l5691
  3973                           
  3974                           ;doprnt.c: 1393: (putch('-') );
  3975  000620  0E2D               	movlw	45
  3976  000622  ECC7  F011         	call	_putch
  3977  000626  D000               	goto	l5691
  3978  000628                     l5691:
  3979                           
  3980                           ;doprnt.c: 1415: if(width)
  3981  000628  5036               	movf	printf@width,w,c
  3982  00062A  1037               	iorwf	printf@width+1,w,c
  3983  00062C  B4D8               	btfsc	status,2,c
  3984  00062E  D026               	goto	l5707
  3985  000630                     l5693:
  3986                           
  3987                           ;doprnt.c: 1417: (putch('0') );
  3988  000630  0E30               	movlw	48
  3989  000632  ECC7  F011         	call	_putch
  3990                           
  3991                           ;doprnt.c: 1418: while(--width);
  3992  000636  0636               	decf	printf@width,f,c
  3993  000638  A0D8               	btfss	status,0,c
  3994  00063A  0637               	decf	printf@width+1,f,c
  3995  00063C  5036               	movf	printf@width,w,c
  3996  00063E  1037               	iorwf	printf@width+1,w,c
  3997  000640  B4D8               	btfsc	status,2,c
  3998  000642  D01C               	goto	l5707
  3999  000644  D7F5               	goto	l5693
  4000                           
  4001                           ;doprnt.c: 1420: } else
  4002  000646  D01A               	goto	l5707
  4003  000648                     l5697:
  4004                           
  4005                           ;doprnt.c: 1422: {
  4006                           ;doprnt.c: 1424: if(width
  4007                           ;doprnt.c: 1428: )
  4008  000648  5036               	movf	printf@width,w,c
  4009  00064A  1037               	iorwf	printf@width+1,w,c
  4010  00064C  B4D8               	btfsc	status,2,c
  4011  00064E  D00C               	goto	l5703
  4012  000650                     l5699:
  4013                           
  4014                           ;doprnt.c: 1430: (putch(' ') );
  4015  000650  0E20               	movlw	32
  4016  000652  ECC7  F011         	call	_putch
  4017                           
  4018                           ;doprnt.c: 1431: while(--width);
  4019  000656  0636               	decf	printf@width,f,c
  4020  000658  A0D8               	btfss	status,0,c
  4021  00065A  0637               	decf	printf@width+1,f,c
  4022  00065C  5036               	movf	printf@width,w,c
  4023  00065E  1037               	iorwf	printf@width+1,w,c
  4024  000660  B4D8               	btfsc	status,2,c
  4025  000662  D002               	goto	l5703
  4026  000664  D7F5               	goto	l5699
  4027  000666  D000               	goto	l5703
  4028  000668                     l5703:
  4029                           
  4030                           ;doprnt.c: 1438: if(flag & 0x03)
  4031  000668  C035  F02B         	movff	printf@flag,??_printf
  4032  00066C  0E03               	movlw	3
  4033  00066E  162B               	andwf	??_printf,f,c
  4034  000670  B4D8               	btfsc	status,2,c
  4035  000672  D004               	goto	l5707
  4036                           
  4037                           ;doprnt.c: 1439: (putch('-') );
  4038  000674  0E2D               	movlw	45
  4039  000676  ECC7  F011         	call	_putch
  4040  00067A  D000               	goto	l5707
  4041  00067C                     l5707:
  4042                           
  4043                           ;doprnt.c: 1469: }
  4044                           ;doprnt.c: 1472: prec = c;
  4045  00067C  C038  F032         	movff	printf@c,printf@prec
  4046                           
  4047                           ;doprnt.c: 1474: while(prec--) {
  4048  000680  D053               	goto	l5721
  4049                           
  4050                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  4051  000682  D045               	goto	l5717
  4052  000684                     l5709:
  4053                           
  4054                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4055  000684  5032               	movf	printf@prec,w,c
  4056  000686  0D02               	mullw	2
  4057  000688  0EF4               	movlw	low _dpowers
  4058  00068A  24F3               	addwf	prodl,w,c
  4059  00068C  6EF6               	movwf	tblptrl,c
  4060  00068E  0EFE               	movlw	high _dpowers
  4061  000690  20F4               	addwfc	prodh,w,c
  4062  000692  6EF7               	movwf	tblptrh,c
  4063  000694                     	if	0	;There are less than 3 active tblptr bytes
  4064  000694                     	endif
  4065  000694  0009               	tblrd		*+
  4066  000696  CFF5 F013          	movff	tablat,___lwdiv@divisor
  4067  00069A  000A               	tblrd		*-
  4068  00069C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  4069  0006A0  C033  F011         	movff	printf@val,___lwdiv@dividend
  4070  0006A4  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  4071  0006A8  ECDD  F00D         	call	___lwdiv	;wreg free
  4072  0006AC  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  4073  0006B0  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  4074  0006B4  0E00               	movlw	0
  4075  0006B6  6E1B               	movwf	___lwmod@divisor+1,c
  4076  0006B8  0E0A               	movlw	10
  4077  0006BA  6E1A               	movwf	___lwmod@divisor,c
  4078  0006BC  ECDE  F00E         	call	___lwmod	;wreg free
  4079  0006C0  5018               	movf	?___lwmod,w,c
  4080  0006C2  0F30               	addlw	48
  4081  0006C4  6E38               	movwf	printf@c,c
  4082                           
  4083                           ;doprnt.c: 1491: break;
  4084  0006C6  D02C               	goto	l5719
  4085  0006C8                     l5711:
  4086                           
  4087                           ;doprnt.c: 1499: {
  4088                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4089  0006C8  C033  F011         	movff	printf@val,___lwdiv@dividend
  4090  0006CC  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  4091  0006D0  5032               	movf	printf@prec,w,c
  4092  0006D2  0D02               	mullw	2
  4093  0006D4  0EFE               	movlw	low _hexpowers
  4094  0006D6  24F3               	addwf	prodl,w,c
  4095  0006D8  6EF6               	movwf	tblptrl,c
  4096  0006DA  0EFE               	movlw	high _hexpowers
  4097  0006DC  20F4               	addwfc	prodh,w,c
  4098  0006DE  6EF7               	movwf	tblptrh,c
  4099  0006E0                     	if	0	;There are less than 3 active tblptr bytes
  4100  0006E0                     	endif
  4101  0006E0  0009               	tblrd		*+
  4102  0006E2  CFF5 F013          	movff	tablat,___lwdiv@divisor
  4103  0006E6  000A               	tblrd		*-
  4104  0006E8  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  4105  0006EC  ECDD  F00D         	call	___lwdiv	;wreg free
  4106  0006F0  5011               	movf	?___lwdiv,w,c
  4107  0006F2  0B0F               	andlw	15
  4108  0006F4  6E2F               	movwf	printf@idx,c
  4109                           
  4110                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4111  0006F6  502F               	movf	printf@idx,w,c
  4112  0006F8  0D01               	mullw	1
  4113  0006FA  0EA0               	movlw	low STR_20
  4114  0006FC  24F3               	addwf	prodl,w,c
  4115  0006FE  6EF6               	movwf	tblptrl,c
  4116  000700  0EFF               	movlw	high STR_20
  4117  000702  20F4               	addwfc	prodh,w,c
  4118  000704  6EF7               	movwf	tblptrh,c
  4119  000706                     	if	0	;There are less than 3 active tblptr bytes
  4120  000706                     	endif
  4121  000706  0008               	tblrd		*
  4122  000708  CFF5 F038          	movff	tablat,printf@c
  4123                           
  4124                           ;doprnt.c: 1523: }
  4125                           
  4126                           ;doprnt.c: 1508: }
  4127                           ;doprnt.c: 1510: break;
  4128  00070C  D009               	goto	l5719
  4129  00070E                     l5717:
  4130  00070E  5035               	movf	printf@flag,w,c
  4131  000710  0B80               	andlw	128
  4132                           
  4133                           ; Switch size 1, requested type "space"
  4134                           ; Number of cases is 2, Range of values is 0 to 128
  4135                           ; switch strategies available:
  4136                           ; Name         Instructions Cycles
  4137                           ; simple_byte            7     4 (average)
  4138                           ;	Chosen strategy is simple_byte
  4139  000712  0A00               	xorlw	0	; case 0
  4140  000714  B4D8               	btfsc	status,2,c
  4141  000716  D7B6               	goto	l5709
  4142  000718  0A80               	xorlw	128	; case 128
  4143  00071A  B4D8               	btfsc	status,2,c
  4144  00071C  D7D5               	goto	l5711
  4145  00071E  D000               	goto	l5719
  4146  000720                     l5719:
  4147                           
  4148                           ;doprnt.c: 1524: (putch(c) );
  4149  000720  5038               	movf	printf@c,w,c
  4150  000722  ECC7  F011         	call	_putch
  4151  000726  D000               	goto	l5721
  4152  000728                     l5721:
  4153  000728  0632               	decf	printf@prec,f,c
  4154  00072A  2832               	incf	printf@prec,w,c
  4155  00072C  B4D8               	btfsc	status,2,c
  4156  00072E  D002               	goto	l5723
  4157  000730  D7EE               	goto	l5717
  4158  000732  D000               	goto	l5723
  4159  000734                     l5723:
  4160  000734  C01D  FFF6         	movff	printf@f,tblptrl
  4161  000738  C01E  FFF7         	movff	printf@f+1,tblptrh
  4162  00073C  4A1D               	infsnz	printf@f,f,c
  4163  00073E  2A1E               	incf	printf@f+1,f,c
  4164  000740                     	if	0	;tblptru may be non-zero
  4165  000740                     	endif
  4166  000740                     	if	0	;tblptru may be non-zero
  4167  000740                     	endif
  4168  000740  0008               	tblrd		*
  4169  000742  CFF5 F038          	movff	tablat,printf@c
  4170  000746  5038               	movf	printf@c,w,c
  4171  000748  B4D8               	btfsc	status,2,c
  4172  00074A  D002               	goto	l851
  4173  00074C  D65A               	goto	l5597
  4174  00074E  D000               	goto	l851
  4175  000750                     l851:
  4176  000750  0012               	return		;funcret
  4177  000752                     __end_of_printf:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           intcon	equ	0xFF2
  4186                           intcon2	equ	0xFF1
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postdec1	equ	0xFE5
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function _putch *****************
  4199 ;; Defined at:
  4200 ;;		line 114 in file "Lab12_ex.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  c               1    wreg     unsigned char 
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  c               1   16[COMRAM] unsigned char 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		wreg
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;Total ram usage:        1 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_printf
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text8
  4229  00238E                     __ptext8:
  4230                           	opt stack 0
  4231  00238E                     _putch:
  4232                           	opt stack 26
  4233                           
  4234                           ;incstack = 0
  4235                           ;putch@c stored from wreg
  4236  00238E  6E11               	movwf	putch@c,c
  4237                           
  4238                           ;Lab12_ex.c: 116: while (!TRMT);
  4239  002390  D000               	goto	l428
  4240  002392                     l428:
  4241  002392  A2AC               	btfss	4012,1,c	;volatile
  4242  002394  D7FE               	goto	l428
  4243                           
  4244                           ;Lab12_ex.c: 117: TXREG = c;
  4245  002396  C011  FFAD         	movff	putch@c,4013	;volatile
  4246  00239A  0012               	return		;funcret
  4247  00239C                     __end_of_putch:
  4248                           	opt stack 0
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           intcon	equ	0xFF2
  4256                           intcon2	equ	0xFF1
  4257                           postinc0	equ	0xFEE
  4258                           wreg	equ	0xFE8
  4259                           postdec1	equ	0xFE5
  4260                           fsr1l	equ	0xFE1
  4261                           indf2	equ	0xFDF
  4262                           postinc2	equ	0xFDE
  4263                           postdec2	equ	0xFDD
  4264                           fsr2h	equ	0xFDA
  4265                           fsr2l	equ	0xFD9
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _isdigit *****************
  4269 ;; Defined at:
  4270 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  c               1    wreg     unsigned char 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  c               1   18[COMRAM] unsigned char 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;		None               void
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;Total ram usage:        3 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; Hardware stack levels required when called:    3
  4291 ;; This function calls:
  4292 ;;		Nothing
  4293 ;; This function is called by:
  4294 ;;		_printf
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text9
  4299  0021B6                     __ptext9:
  4300                           	opt stack 0
  4301  0021B6                     _isdigit:
  4302                           	opt stack 26
  4303                           
  4304                           ;incstack = 0
  4305                           ;isdigit@c stored from wreg
  4306  0021B6  6E13               	movwf	isdigit@c,c
  4307  0021B8  0E00               	movlw	0
  4308  0021BA  6E12               	movwf	_isdigit$2306,c
  4309  0021BC  0E3A               	movlw	58
  4310  0021BE  6013               	cpfslt	isdigit@c,c
  4311  0021C0  D006               	goto	l5409
  4312  0021C2  0E2F               	movlw	47
  4313  0021C4  6413               	cpfsgt	isdigit@c,c
  4314  0021C6  D003               	goto	l5409
  4315  0021C8  0E01               	movlw	1
  4316  0021CA  6E12               	movwf	_isdigit$2306,c
  4317  0021CC  D000               	goto	l5409
  4318  0021CE                     l5409:
  4319  0021CE  C012  F011         	movff	_isdigit$2306,??_isdigit
  4320  0021D2  3011               	rrcf	??_isdigit,w,c
  4321  0021D4  D000               	goto	l1318
  4322  0021D6                     l1318:
  4323  0021D6  0012               	return		;funcret
  4324  0021D8                     __end_of_isdigit:
  4325                           	opt stack 0
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           intcon	equ	0xFF2
  4333                           intcon2	equ	0xFF1
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           postdec1	equ	0xFE5
  4337                           fsr1l	equ	0xFE1
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function ___lwmod *****************
  4346 ;; Defined at:
  4347 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  dividend        2   23[COMRAM] unsigned int 
  4350 ;;  divisor         2   25[COMRAM] unsigned int 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  counter         1   27[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  2   23[COMRAM] unsigned int 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4362 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;Total ram usage:        5 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    3
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		_printf
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text10
  4377  001DBC                     __ptext10:
  4378                           	opt stack 0
  4379  001DBC                     ___lwmod:
  4380                           	opt stack 26
  4381                           
  4382                           ;incstack = 0
  4383  001DBC  501A               	movf	___lwmod@divisor,w,c
  4384  001DBE  101B               	iorwf	___lwmod@divisor+1,w,c
  4385  001DC0  B4D8               	btfsc	status,2,c
  4386  001DC2  D01D               	goto	l1420
  4387  001DC4  0E01               	movlw	1
  4388  001DC6  6E1C               	movwf	___lwmod@counter,c
  4389  001DC8  D005               	goto	l5585
  4390  001DCA                     l5583:
  4391  001DCA  90D8               	bcf	status,0,c
  4392  001DCC  361A               	rlcf	___lwmod@divisor,f,c
  4393  001DCE  361B               	rlcf	___lwmod@divisor+1,f,c
  4394  001DD0  2A1C               	incf	___lwmod@counter,f,c
  4395  001DD2  D000               	goto	l5585
  4396  001DD4                     l5585:
  4397  001DD4  BE1B               	btfsc	___lwmod@divisor+1,7,c
  4398  001DD6  D002               	goto	l5587
  4399  001DD8  D7F8               	goto	l5583
  4400  001DDA  D000               	goto	l5587
  4401  001DDC                     l5587:
  4402  001DDC  501A               	movf	___lwmod@divisor,w,c
  4403  001DDE  5C18               	subwf	___lwmod@dividend,w,c
  4404  001DE0  501B               	movf	___lwmod@divisor+1,w,c
  4405  001DE2  5819               	subwfb	___lwmod@dividend+1,w,c
  4406  001DE4  A0D8               	btfss	status,0,c
  4407  001DE6  D005               	goto	l5591
  4408  001DE8  501A               	movf	___lwmod@divisor,w,c
  4409  001DEA  5E18               	subwf	___lwmod@dividend,f,c
  4410  001DEC  501B               	movf	___lwmod@divisor+1,w,c
  4411  001DEE  5A19               	subwfb	___lwmod@dividend+1,f,c
  4412  001DF0  D000               	goto	l5591
  4413  001DF2                     l5591:
  4414  001DF2  90D8               	bcf	status,0,c
  4415  001DF4  321B               	rrcf	___lwmod@divisor+1,f,c
  4416  001DF6  321A               	rrcf	___lwmod@divisor,f,c
  4417  001DF8  2E1C               	decfsz	___lwmod@counter,f,c
  4418  001DFA  D7F0               	goto	l5587
  4419  001DFC  D000               	goto	l1420
  4420  001DFE                     l1420:
  4421  001DFE  C018  F018         	movff	___lwmod@dividend,?___lwmod
  4422  001E02  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  4423  001E06  0012               	return		;funcret
  4424  001E08                     __end_of___lwmod:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           intcon	equ	0xFF2
  4433                           intcon2	equ	0xFF1
  4434                           postinc0	equ	0xFEE
  4435                           wreg	equ	0xFE8
  4436                           postdec1	equ	0xFE5
  4437                           fsr1l	equ	0xFE1
  4438                           indf2	equ	0xFDF
  4439                           postinc2	equ	0xFDE
  4440                           postdec2	equ	0xFDD
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function ___lwdiv *****************
  4446 ;; Defined at:
  4447 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  dividend        2   16[COMRAM] unsigned int 
  4450 ;;  divisor         2   18[COMRAM] unsigned int 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  quotient        2   21[COMRAM] unsigned int 
  4453 ;;  counter         1   20[COMRAM] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  2   16[COMRAM] unsigned int 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:        7 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    3
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		_printf
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text11
  4478  001BBA                     __ptext11:
  4479                           	opt stack 0
  4480  001BBA                     ___lwdiv:
  4481                           	opt stack 26
  4482                           
  4483                           ;incstack = 0
  4484  001BBA  0E00               	movlw	0
  4485  001BBC  6E17               	movwf	___lwdiv@quotient+1,c
  4486  001BBE  0E00               	movlw	0
  4487  001BC0  6E16               	movwf	___lwdiv@quotient,c
  4488  001BC2  5013               	movf	___lwdiv@divisor,w,c
  4489  001BC4  1014               	iorwf	___lwdiv@divisor+1,w,c
  4490  001BC6  B4D8               	btfsc	status,2,c
  4491  001BC8  D021               	goto	l1410
  4492  001BCA  0E01               	movlw	1
  4493  001BCC  6E15               	movwf	___lwdiv@counter,c
  4494  001BCE  D005               	goto	l5565
  4495  001BD0                     l5563:
  4496  001BD0  90D8               	bcf	status,0,c
  4497  001BD2  3613               	rlcf	___lwdiv@divisor,f,c
  4498  001BD4  3614               	rlcf	___lwdiv@divisor+1,f,c
  4499  001BD6  2A15               	incf	___lwdiv@counter,f,c
  4500  001BD8  D000               	goto	l5565
  4501  001BDA                     l5565:
  4502  001BDA  BE14               	btfsc	___lwdiv@divisor+1,7,c
  4503  001BDC  D002               	goto	l5567
  4504  001BDE  D7F8               	goto	l5563
  4505  001BE0  D000               	goto	l5567
  4506  001BE2                     l5567:
  4507  001BE2  90D8               	bcf	status,0,c
  4508  001BE4  3616               	rlcf	___lwdiv@quotient,f,c
  4509  001BE6  3617               	rlcf	___lwdiv@quotient+1,f,c
  4510  001BE8  5013               	movf	___lwdiv@divisor,w,c
  4511  001BEA  5C11               	subwf	___lwdiv@dividend,w,c
  4512  001BEC  5014               	movf	___lwdiv@divisor+1,w,c
  4513  001BEE  5812               	subwfb	___lwdiv@dividend+1,w,c
  4514  001BF0  A0D8               	btfss	status,0,c
  4515  001BF2  D006               	goto	l5575
  4516  001BF4  5013               	movf	___lwdiv@divisor,w,c
  4517  001BF6  5E11               	subwf	___lwdiv@dividend,f,c
  4518  001BF8  5014               	movf	___lwdiv@divisor+1,w,c
  4519  001BFA  5A12               	subwfb	___lwdiv@dividend+1,f,c
  4520  001BFC  8016               	bsf	___lwdiv@quotient,0,c
  4521  001BFE  D000               	goto	l5575
  4522  001C00                     l5575:
  4523  001C00  90D8               	bcf	status,0,c
  4524  001C02  3214               	rrcf	___lwdiv@divisor+1,f,c
  4525  001C04  3213               	rrcf	___lwdiv@divisor,f,c
  4526  001C06  2E15               	decfsz	___lwdiv@counter,f,c
  4527  001C08  D7EC               	goto	l5567
  4528  001C0A  D000               	goto	l1410
  4529  001C0C                     l1410:
  4530  001C0C  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  4531  001C10  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4532  001C14  0012               	return		;funcret
  4533  001C16                     __end_of___lwdiv:
  4534                           	opt stack 0
  4535                           tblptru	equ	0xFF8
  4536                           tblptrh	equ	0xFF7
  4537                           tblptrl	equ	0xFF6
  4538                           tablat	equ	0xFF5
  4539                           prodh	equ	0xFF4
  4540                           prodl	equ	0xFF3
  4541                           intcon	equ	0xFF2
  4542                           intcon2	equ	0xFF1
  4543                           postinc0	equ	0xFEE
  4544                           wreg	equ	0xFE8
  4545                           postdec1	equ	0xFE5
  4546                           fsr1l	equ	0xFE1
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function _Set_RPM_RGB *****************
  4555 ;; Defined at:
  4556 ;;		line 91 in file "Fan_Support.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  rpm             2   30[COMRAM] int 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  temp           14   32[COMRAM] int [7]
  4561 ;; Return value:  Size  Location     Type
  4562 ;;		None               void
  4563 ;; Registers used:
  4564 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4570 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;Total ram usage:       16 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    4
  4577 ;; This function calls:
  4578 ;;		___awdiv
  4579 ;; This function is called by:
  4580 ;;		_main
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text12
  4585  001CCA                     __ptext12:
  4586                           	opt stack 0
  4587  001CCA                     _Set_RPM_RGB:
  4588                           	opt stack 26
  4589                           
  4590                           ;Fan_Support.c: 93: int temp[7] = { 1, 3, 2, 4, 5, 6, 7};
  4591                           
  4592                           ;incstack = 0
  4593  001CCA  EE20  F080         	lfsr	2,Set_RPM_RGB@F4110
  4594  001CCE  EE10  F021         	lfsr	1,Set_RPM_RGB@temp
  4595  001CD2  0E0D               	movlw	13
  4596  001CD4                     u5041:
  4597  001CD4  CFDB FFE3          	movff	plusw2,plusw1
  4598  001CD8  06E8               	decf	wreg,f,c
  4599  001CDA  E2FC               	bc	u5041
  4600                           
  4601                           ;Fan_Support.c: 94: if (rpm < 1) PORTE = 0x00;
  4602  001CDC  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4603  001CDE  D005               	goto	l6337
  4604  001CE0  5020               	movf	Set_RPM_RGB@rpm+1,w,c
  4605  001CE2  E105               	bnz	l6339
  4606  001CE4  041F               	decf	Set_RPM_RGB@rpm,w,c
  4607  001CE6  B0D8               	btfsc	status,0,c
  4608  001CE8  D002               	goto	l6339
  4609  001CEA                     l6337:
  4610  001CEA  0E00               	movlw	0
  4611  001CEC  D014               	goto	L3
  4612  001CEE                     l6339:
  4613                           
  4614                           ;Fan_Support.c: 95: else PORTE = temp[(rpm/500)];
  4615  001CEE  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  4616  001CF2  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  4617  001CF6  0E01               	movlw	1
  4618  001CF8  6E1A               	movwf	___awdiv@divisor+1,c
  4619  001CFA  0EF4               	movlw	244
  4620  001CFC  6E19               	movwf	___awdiv@divisor,c
  4621  001CFE  EC25  F00C         	call	___awdiv	;wreg free
  4622  001D02  90D8               	bcf	status,0,c
  4623  001D04  3617               	rlcf	?___awdiv,f,c
  4624  001D06  3618               	rlcf	?___awdiv+1,f,c
  4625  001D08  0E21               	movlw	low Set_RPM_RGB@temp
  4626  001D0A  2417               	addwf	?___awdiv,w,c
  4627  001D0C  6ED9               	movwf	fsr2l,c
  4628  001D0E  0E00               	movlw	high Set_RPM_RGB@temp
  4629  001D10  2018               	addwfc	?___awdiv+1,w,c
  4630  001D12  6EDA               	movwf	fsr2h,c
  4631  001D14  50DF               	movf	indf2,w,c
  4632  001D16                     L3:
  4633  001D16  6E84               	movwf	3972,c	;volatile
  4634  001D18  D000               	goto	l70
  4635  001D1A                     l70:
  4636  001D1A  0012               	return		;funcret
  4637  001D1C                     __end_of_Set_RPM_RGB:
  4638                           	opt stack 0
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           intcon2	equ	0xFF1
  4647                           postinc0	equ	0xFEE
  4648                           wreg	equ	0xFE8
  4649                           postdec1	equ	0xFE5
  4650                           plusw1	equ	0xFE3
  4651                           fsr1l	equ	0xFE1
  4652                           indf2	equ	0xFDF
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           plusw2	equ	0xFDB
  4656                           fsr2h	equ	0xFDA
  4657                           fsr2l	equ	0xFD9
  4658                           status	equ	0xFD8
  4659                           
  4660 ;; *************** function _Set_DC_RGB *****************
  4661 ;; Defined at:
  4662 ;;		line 85 in file "Fan_Support.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;  duty_cycle      2   30[COMRAM] int 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;		None               void
  4669 ;; Registers used:
  4670 ;;		wreg, status,2, status,0, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;Total ram usage:        2 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    4
  4683 ;; This function calls:
  4684 ;;		___awdiv
  4685 ;; This function is called by:
  4686 ;;		_main
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           	psect	text13
  4691  00202A                     __ptext13:
  4692                           	opt stack 0
  4693  00202A                     _Set_DC_RGB:
  4694                           	opt stack 26
  4695                           
  4696                           ;Fan_Support.c: 87: if (duty_cycle >= 70) PORTD = PORTD | 7;
  4697                           
  4698                           ;incstack = 0
  4699  00202A  BE20               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4700  00202C  D009               	goto	l6331
  4701  00202E  5020               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4702  002030  E104               	bnz	u5030
  4703  002032  0E46               	movlw	70
  4704  002034  5C1F               	subwf	Set_DC_RGB@duty_cycle,w,c
  4705  002036  A0D8               	btfss	status,0,c
  4706  002038  D003               	goto	l6331
  4707  00203A                     u5030:
  4708  00203A  5083               	movf	3971,w,c	;volatile
  4709  00203C  0907               	iorlw	7
  4710  00203E  D00C               	goto	L4
  4711  002040                     l6331:
  4712                           
  4713                           ;Fan_Support.c: 88: else PORTD = PORTD | (duty_cycle/10);
  4714  002040  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4715  002044  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4716  002048  0E00               	movlw	0
  4717  00204A  6E1A               	movwf	___awdiv@divisor+1,c
  4718  00204C  0E0A               	movlw	10
  4719  00204E  6E19               	movwf	___awdiv@divisor,c
  4720  002050  EC25  F00C         	call	___awdiv	;wreg free
  4721  002054  5017               	movf	?___awdiv,w,c
  4722  002056  1083               	iorwf	3971,w,c	;volatile
  4723  002058                     L4:
  4724  002058  6E83               	movwf	3971,c	;volatile
  4725  00205A  D000               	goto	l63
  4726  00205C                     l63:
  4727  00205C  0012               	return		;funcret
  4728  00205E                     __end_of_Set_DC_RGB:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           intcon	equ	0xFF2
  4737                           intcon2	equ	0xFF1
  4738                           postinc0	equ	0xFEE
  4739                           wreg	equ	0xFE8
  4740                           postdec1	equ	0xFE5
  4741                           plusw1	equ	0xFE3
  4742                           fsr1l	equ	0xFE1
  4743                           indf2	equ	0xFDF
  4744                           postinc2	equ	0xFDE
  4745                           postdec2	equ	0xFDD
  4746                           plusw2	equ	0xFDB
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function ___awdiv *****************
  4752 ;; Defined at:
  4753 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  dividend        2   22[COMRAM] int 
  4756 ;;  divisor         2   24[COMRAM] int 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  quotient        2   28[COMRAM] int 
  4759 ;;  sign            1   27[COMRAM] unsigned char 
  4760 ;;  counter         1   26[COMRAM] unsigned char 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  2   22[COMRAM] int 
  4763 ;; Registers used:
  4764 ;;		wreg, status,2, status,0
  4765 ;; Tracked objects:
  4766 ;;		On entry : 0/0
  4767 ;;		On exit  : 0/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4770 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;Total ram usage:        8 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; Hardware stack levels required when called:    3
  4777 ;; This function calls:
  4778 ;;		Nothing
  4779 ;; This function is called by:
  4780 ;;		_get_RPM
  4781 ;;		_Set_DC_RGB
  4782 ;;		_Set_RPM_RGB
  4783 ;;		_main
  4784 ;;		_Update_Screen
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           	psect	text14
  4789  00184A                     __ptext14:
  4790                           	opt stack 0
  4791  00184A                     ___awdiv:
  4792                           	opt stack 26
  4793                           
  4794                           ;incstack = 0
  4795  00184A  0E00               	movlw	0
  4796  00184C  6E1C               	movwf	___awdiv@sign,c
  4797  00184E  AE1A               	btfss	___awdiv@divisor+1,7,c
  4798  001850  D007               	goto	l6225
  4799  001852  6C19               	negf	___awdiv@divisor,c
  4800  001854  1E1A               	comf	___awdiv@divisor+1,f,c
  4801  001856  B0D8               	btfsc	status,0,c
  4802  001858  2A1A               	incf	___awdiv@divisor+1,f,c
  4803  00185A  0E01               	movlw	1
  4804  00185C  6E1C               	movwf	___awdiv@sign,c
  4805  00185E  D000               	goto	l6225
  4806  001860                     l6225:
  4807  001860  AE18               	btfss	___awdiv@dividend+1,7,c
  4808  001862  D007               	goto	l6231
  4809  001864  6C17               	negf	___awdiv@dividend,c
  4810  001866  1E18               	comf	___awdiv@dividend+1,f,c
  4811  001868  B0D8               	btfsc	status,0,c
  4812  00186A  2A18               	incf	___awdiv@dividend+1,f,c
  4813  00186C  0E01               	movlw	1
  4814  00186E  1A1C               	xorwf	___awdiv@sign,f,c
  4815  001870  D000               	goto	l6231
  4816  001872                     l6231:
  4817  001872  0E00               	movlw	0
  4818  001874  6E1E               	movwf	___awdiv@quotient+1,c
  4819  001876  0E00               	movlw	0
  4820  001878  6E1D               	movwf	___awdiv@quotient,c
  4821  00187A  5019               	movf	___awdiv@divisor,w,c
  4822  00187C  101A               	iorwf	___awdiv@divisor+1,w,c
  4823  00187E  B4D8               	btfsc	status,2,c
  4824  001880  D021               	goto	l6253
  4825  001882  0E01               	movlw	1
  4826  001884  6E1B               	movwf	___awdiv@counter,c
  4827  001886  D005               	goto	l6239
  4828  001888                     l6237:
  4829  001888  90D8               	bcf	status,0,c
  4830  00188A  3619               	rlcf	___awdiv@divisor,f,c
  4831  00188C  361A               	rlcf	___awdiv@divisor+1,f,c
  4832  00188E  2A1B               	incf	___awdiv@counter,f,c
  4833  001890  D000               	goto	l6239
  4834  001892                     l6239:
  4835  001892  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4836  001894  D002               	goto	l6241
  4837  001896  D7F8               	goto	l6237
  4838  001898  D000               	goto	l6241
  4839  00189A                     l6241:
  4840  00189A  90D8               	bcf	status,0,c
  4841  00189C  361D               	rlcf	___awdiv@quotient,f,c
  4842  00189E  361E               	rlcf	___awdiv@quotient+1,f,c
  4843  0018A0  5019               	movf	___awdiv@divisor,w,c
  4844  0018A2  5C17               	subwf	___awdiv@dividend,w,c
  4845  0018A4  501A               	movf	___awdiv@divisor+1,w,c
  4846  0018A6  5818               	subwfb	___awdiv@dividend+1,w,c
  4847  0018A8  A0D8               	btfss	status,0,c
  4848  0018AA  D006               	goto	l6249
  4849  0018AC  5019               	movf	___awdiv@divisor,w,c
  4850  0018AE  5E17               	subwf	___awdiv@dividend,f,c
  4851  0018B0  501A               	movf	___awdiv@divisor+1,w,c
  4852  0018B2  5A18               	subwfb	___awdiv@dividend+1,f,c
  4853  0018B4  801D               	bsf	___awdiv@quotient,0,c
  4854  0018B6  D000               	goto	l6249
  4855  0018B8                     l6249:
  4856  0018B8  90D8               	bcf	status,0,c
  4857  0018BA  321A               	rrcf	___awdiv@divisor+1,f,c
  4858  0018BC  3219               	rrcf	___awdiv@divisor,f,c
  4859  0018BE  2E1B               	decfsz	___awdiv@counter,f,c
  4860  0018C0  D7EC               	goto	l6241
  4861  0018C2  D000               	goto	l6253
  4862  0018C4                     l6253:
  4863  0018C4  501C               	movf	___awdiv@sign,w,c
  4864  0018C6  B4D8               	btfsc	status,2,c
  4865  0018C8  D005               	goto	l6257
  4866  0018CA  6C1D               	negf	___awdiv@quotient,c
  4867  0018CC  1E1E               	comf	___awdiv@quotient+1,f,c
  4868  0018CE  B0D8               	btfsc	status,0,c
  4869  0018D0  2A1E               	incf	___awdiv@quotient+1,f,c
  4870  0018D2  D000               	goto	l6257
  4871  0018D4                     l6257:
  4872  0018D4  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4873  0018D8  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4874  0018DC  D000               	goto	l1080
  4875  0018DE                     l1080:
  4876  0018DE  0012               	return		;funcret
  4877  0018E0                     __end_of___awdiv:
  4878                           	opt stack 0
  4879                           tblptru	equ	0xFF8
  4880                           tblptrh	equ	0xFF7
  4881                           tblptrl	equ	0xFF6
  4882                           tablat	equ	0xFF5
  4883                           prodh	equ	0xFF4
  4884                           prodl	equ	0xFF3
  4885                           intcon	equ	0xFF2
  4886                           intcon2	equ	0xFF1
  4887                           postinc0	equ	0xFEE
  4888                           wreg	equ	0xFE8
  4889                           postdec1	equ	0xFE5
  4890                           plusw1	equ	0xFE3
  4891                           fsr1l	equ	0xFE1
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           postdec2	equ	0xFDD
  4895                           plusw2	equ	0xFDB
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _Initialize_Screen *****************
  4901 ;; Defined at:
  4902 ;;		line 34 in file "Main_Screen.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        0 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:   10
  4923 ;; This function calls:
  4924 ;;		_LCD_Reset
  4925 ;;		_TFT_GreenTab_Initialize
  4926 ;;		_drawCircle
  4927 ;;		_drawtext
  4928 ;;		_fillScreen
  4929 ;;		_strcpy
  4930 ;; This function is called by:
  4931 ;;		_main
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text15
  4936  000752                     __ptext15:
  4937                           	opt stack 0
  4938  000752                     _Initialize_Screen:
  4939                           	opt stack 20
  4940                           
  4941                           ;Main_Screen.c: 36: LCD_Reset();
  4942                           
  4943                           ;incstack = 0
  4944  000752  EC8A  F011         	call	_LCD_Reset	;wreg free
  4945                           
  4946                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4947  000756  EC78  F010         	call	_TFT_GreenTab_Initialize	;wreg free
  4948                           
  4949                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4950  00075A  0E00               	movlw	0
  4951  00075C  6E25               	movwf	fillScreen@color+1,c
  4952  00075E  0E00               	movlw	0
  4953  000760  6E24               	movwf	fillScreen@color,c
  4954  000762  ECFC  F010         	call	_fillScreen	;wreg free
  4955                           
  4956                           ;Main_Screen.c: 39: txt = buffer;
  4957  000766  0E2A               	movlw	low _buffer
  4958  000768  6E4E               	movwf	_txt,c
  4959  00076A  0E01               	movlw	high _buffer
  4960  00076C  6E4F               	movwf	_txt+1,c
  4961                           
  4962                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 22-S1");
  4963  00076E  C04E  F011         	movff	_txt,strcpy@to
  4964  000772  C04F  F012         	movff	_txt+1,strcpy@to+1
  4965  000776  0E24               	movlw	low STR_9
  4966  000778  6E13               	movwf	strcpy@from,c
  4967  00077A  0EFF               	movlw	high STR_9
  4968  00077C  6E14               	movwf	strcpy@from+1,c
  4969  00077E  EC2F  F010         	call	_strcpy	;wreg free
  4970                           
  4971                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4972  000782  0E01               	movlw	1
  4973  000784  6E39               	movwf	drawtext@y,c
  4974  000786  C04E  F03A         	movff	_txt,drawtext@_text
  4975  00078A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4976  00078E  0EFF               	movlw	255
  4977  000790  6E3D               	movwf	drawtext@color+1,c
  4978  000792  683C               	setf	drawtext@color,c
  4979  000794  0E00               	movlw	0
  4980  000796  6E3F               	movwf	drawtext@bg+1,c
  4981  000798  0E00               	movlw	0
  4982  00079A  6E3E               	movwf	drawtext@bg,c
  4983  00079C  0E01               	movlw	1
  4984  00079E  6E40               	movwf	drawtext@size,c
  4985  0007A0  0E01               	movlw	1
  4986  0007A2  EC9B  F008         	call	_drawtext
  4987                           
  4988                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4989  0007A6  C04E  F011         	movff	_txt,strcpy@to
  4990  0007AA  C04F  F012         	movff	_txt+1,strcpy@to+1
  4991  0007AE  0ED0               	movlw	low STR_10
  4992  0007B0  6E13               	movwf	strcpy@from,c
  4993  0007B2  0EFF               	movlw	high STR_10
  4994  0007B4  6E14               	movwf	strcpy@from+1,c
  4995  0007B6  EC2F  F010         	call	_strcpy	;wreg free
  4996                           
  4997                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4998  0007BA  0E0B               	movlw	11
  4999  0007BC  6E39               	movwf	drawtext@y,c
  5000  0007BE  C04E  F03A         	movff	_txt,drawtext@_text
  5001  0007C2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5002  0007C6  0EF8               	movlw	248
  5003  0007C8  6E3D               	movwf	drawtext@color+1,c
  5004  0007CA  0E1F               	movlw	31
  5005  0007CC  6E3C               	movwf	drawtext@color,c
  5006  0007CE  0E00               	movlw	0
  5007  0007D0  6E3F               	movwf	drawtext@bg+1,c
  5008  0007D2  0E00               	movlw	0
  5009  0007D4  6E3E               	movwf	drawtext@bg,c
  5010  0007D6  0E01               	movlw	1
  5011  0007D8  6E40               	movwf	drawtext@size,c
  5012  0007DA  0E18               	movlw	24
  5013  0007DC  EC9B  F008         	call	_drawtext
  5014                           
  5015                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  5016  0007E0  0E00               	movlw	0
  5017  0007E2  6E1D               	movwf	drawCircle@x0+1,c
  5018  0007E4  0E28               	movlw	40
  5019  0007E6  6E1C               	movwf	drawCircle@x0,c
  5020  0007E8  0E00               	movlw	0
  5021  0007EA  6E1F               	movwf	drawCircle@y0+1,c
  5022  0007EC  0E17               	movlw	23
  5023  0007EE  6E1E               	movwf	drawCircle@y0,c
  5024  0007F0  0E00               	movlw	0
  5025  0007F2  6E21               	movwf	drawCircle@r+1,c
  5026  0007F4  0E02               	movlw	2
  5027  0007F6  6E20               	movwf	drawCircle@r,c
  5028  0007F8  0EFF               	movlw	255
  5029  0007FA  6E23               	movwf	drawCircle@color+1,c
  5030  0007FC  0EE0               	movlw	224
  5031  0007FE  6E22               	movwf	drawCircle@color,c
  5032  000800  ECD7  F005         	call	_drawCircle	;wreg free
  5033                           
  5034                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  5035  000804  C04E  F011         	movff	_txt,strcpy@to
  5036  000808  C04F  F012         	movff	_txt+1,strcpy@to+1
  5037  00080C  0EF9               	movlw	low STR_11
  5038  00080E  6E13               	movwf	strcpy@from,c
  5039  000810  0EFF               	movlw	high STR_11
  5040  000812  6E14               	movwf	strcpy@from+1,c
  5041  000814  EC2F  F010         	call	_strcpy	;wreg free
  5042                           
  5043                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  5044  000818  0E17               	movlw	23
  5045  00081A  6E39               	movwf	drawtext@y,c
  5046  00081C  C04E  F03A         	movff	_txt,drawtext@_text
  5047  000820  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5048  000824  0EFF               	movlw	255
  5049  000826  6E3D               	movwf	drawtext@color+1,c
  5050  000828  0EE0               	movlw	224
  5051  00082A  6E3C               	movwf	drawtext@color,c
  5052  00082C  0E00               	movlw	0
  5053  00082E  6E3F               	movwf	drawtext@bg+1,c
  5054  000830  0E00               	movlw	0
  5055  000832  6E3E               	movwf	drawtext@bg,c
  5056  000834  0E02               	movlw	2
  5057  000836  6E40               	movwf	drawtext@size,c
  5058  000838  0E2D               	movlw	45
  5059  00083A  EC9B  F008         	call	_drawtext
  5060                           
  5061                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5062  00083E  C04E  F011         	movff	_txt,strcpy@to
  5063  000842  C04F  F012         	movff	_txt+1,strcpy@to+1
  5064  000846  0EF3               	movlw	low (STR_19+2)
  5065  000848  6E13               	movwf	strcpy@from,c
  5066  00084A  0EFF               	movlw	high (STR_19+2)
  5067  00084C  6E14               	movwf	strcpy@from+1,c
  5068  00084E  EC2F  F010         	call	_strcpy	;wreg free
  5069                           
  5070                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5071  000852  0E00               	movlw	0
  5072  000854  6E1D               	movwf	drawCircle@x0+1,c
  5073  000856  0E6E               	movlw	110
  5074  000858  6E1C               	movwf	drawCircle@x0,c
  5075  00085A  0E00               	movlw	0
  5076  00085C  6E1F               	movwf	drawCircle@y0+1,c
  5077  00085E  0E17               	movlw	23
  5078  000860  6E1E               	movwf	drawCircle@y0,c
  5079  000862  0E00               	movlw	0
  5080  000864  6E21               	movwf	drawCircle@r+1,c
  5081  000866  0E02               	movlw	2
  5082  000868  6E20               	movwf	drawCircle@r,c
  5083  00086A  0EFF               	movlw	255
  5084  00086C  6E23               	movwf	drawCircle@color+1,c
  5085  00086E  0EE0               	movlw	224
  5086  000870  6E22               	movwf	drawCircle@color,c
  5087  000872  ECD7  F005         	call	_drawCircle	;wreg free
  5088                           
  5089                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5090  000876  0E17               	movlw	23
  5091  000878  6E39               	movwf	drawtext@y,c
  5092  00087A  C04E  F03A         	movff	_txt,drawtext@_text
  5093  00087E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5094  000882  0EFF               	movlw	255
  5095  000884  6E3D               	movwf	drawtext@color+1,c
  5096  000886  0EE0               	movlw	224
  5097  000888  6E3C               	movwf	drawtext@color,c
  5098  00088A  0E00               	movlw	0
  5099  00088C  6E3F               	movwf	drawtext@bg+1,c
  5100  00088E  0E00               	movlw	0
  5101  000890  6E3E               	movwf	drawtext@bg,c
  5102  000892  0E02               	movlw	2
  5103  000894  6E40               	movwf	drawtext@size,c
  5104  000896  0E73               	movlw	115
  5105  000898  EC9B  F008         	call	_drawtext
  5106                           
  5107                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5108  00089C  C04E  F011         	movff	_txt,strcpy@to
  5109  0008A0  C04F  F012         	movff	_txt+1,strcpy@to+1
  5110  0008A4  0EE3               	movlw	low STR_13
  5111  0008A6  6E13               	movwf	strcpy@from,c
  5112  0008A8  0EFF               	movlw	high STR_13
  5113  0008AA  6E14               	movwf	strcpy@from+1,c
  5114  0008AC  EC2F  F010         	call	_strcpy	;wreg free
  5115                           
  5116                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5117  0008B0  0E28               	movlw	40
  5118  0008B2  6E39               	movwf	drawtext@y,c
  5119  0008B4  C04E  F03A         	movff	_txt,drawtext@_text
  5120  0008B8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5121  0008BC  0E00               	movlw	0
  5122  0008BE  6E3D               	movwf	drawtext@color+1,c
  5123  0008C0  0E1F               	movlw	31
  5124  0008C2  6E3C               	movwf	drawtext@color,c
  5125  0008C4  0E00               	movlw	0
  5126  0008C6  6E3F               	movwf	drawtext@bg+1,c
  5127  0008C8  0E00               	movlw	0
  5128  0008CA  6E3E               	movwf	drawtext@bg,c
  5129  0008CC  0E01               	movlw	1
  5130  0008CE  6E40               	movwf	drawtext@size,c
  5131  0008D0  0E32               	movlw	50
  5132  0008D2  EC9B  F008         	call	_drawtext
  5133                           
  5134                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5135  0008D6  C04E  F011         	movff	_txt,strcpy@to
  5136  0008DA  C04F  F012         	movff	_txt+1,strcpy@to+1
  5137  0008DE  0EE8               	movlw	low STR_14
  5138  0008E0  6E13               	movwf	strcpy@from,c
  5139  0008E2  0EFF               	movlw	high STR_14
  5140  0008E4  6E14               	movwf	strcpy@from+1,c
  5141  0008E6  EC2F  F010         	call	_strcpy	;wreg free
  5142                           
  5143                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5144  0008EA  0E47               	movlw	71
  5145  0008EC  6E39               	movwf	drawtext@y,c
  5146  0008EE  C04E  F03A         	movff	_txt,drawtext@_text
  5147  0008F2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5148  0008F6  0EF8               	movlw	248
  5149  0008F8  6E3D               	movwf	drawtext@color+1,c
  5150  0008FA  0E00               	movlw	0
  5151  0008FC  6E3C               	movwf	drawtext@color,c
  5152  0008FE  0E00               	movlw	0
  5153  000900  6E3F               	movwf	drawtext@bg+1,c
  5154  000902  0E00               	movlw	0
  5155  000904  6E3E               	movwf	drawtext@bg,c
  5156  000906  0E01               	movlw	1
  5157  000908  6E40               	movwf	drawtext@size,c
  5158  00090A  0E32               	movlw	50
  5159  00090C  EC9B  F008         	call	_drawtext
  5160                           
  5161                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5162  000910  C04E  F011         	movff	_txt,strcpy@to
  5163  000914  C04F  F012         	movff	_txt+1,strcpy@to+1
  5164  000918  0EDD               	movlw	low STR_15
  5165  00091A  6E13               	movwf	strcpy@from,c
  5166  00091C  0EFF               	movlw	high STR_15
  5167  00091E  6E14               	movwf	strcpy@from+1,c
  5168  000920  EC2F  F010         	call	_strcpy	;wreg free
  5169                           
  5170                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5171  000924  0E78               	movlw	120
  5172  000926  6E39               	movwf	drawtext@y,c
  5173  000928  C04E  F03A         	movff	_txt,drawtext@_text
  5174  00092C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5175  000930  0E00               	movlw	0
  5176  000932  6E3D               	movwf	drawtext@color+1,c
  5177  000934  0E1F               	movlw	31
  5178  000936  6E3C               	movwf	drawtext@color,c
  5179  000938  0E00               	movlw	0
  5180  00093A  6E3F               	movwf	drawtext@bg+1,c
  5181  00093C  0E00               	movlw	0
  5182  00093E  6E3E               	movwf	drawtext@bg,c
  5183  000940  0E01               	movlw	1
  5184  000942  6E40               	movwf	drawtext@size,c
  5185  000944  0E55               	movlw	85
  5186  000946  EC9B  F008         	call	_drawtext
  5187                           
  5188                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5189  00094A  C04E  F011         	movff	_txt,strcpy@to
  5190  00094E  C04F  F012         	movff	_txt+1,strcpy@to+1
  5191  000952  0EFC               	movlw	low STR_16
  5192  000954  6E13               	movwf	strcpy@from,c
  5193  000956  0EFF               	movlw	high STR_16
  5194  000958  6E14               	movwf	strcpy@from+1,c
  5195  00095A  EC2F  F010         	call	_strcpy	;wreg free
  5196                           
  5197                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5198  00095E  0E8C               	movlw	140
  5199  000960  6E39               	movwf	drawtext@y,c
  5200  000962  C04E  F03A         	movff	_txt,drawtext@_text
  5201  000966  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5202  00096A  0EFF               	movlw	255
  5203  00096C  6E3D               	movwf	drawtext@color+1,c
  5204  00096E  683C               	setf	drawtext@color,c
  5205  000970  0E00               	movlw	0
  5206  000972  6E3F               	movwf	drawtext@bg+1,c
  5207  000974  0E00               	movlw	0
  5208  000976  6E3E               	movwf	drawtext@bg,c
  5209  000978  0E01               	movlw	1
  5210  00097A  6E40               	movwf	drawtext@size,c
  5211  00097C  0E0C               	movlw	12
  5212  00097E  EC9B  F008         	call	_drawtext
  5213                           
  5214                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5215  000982  C04E  F011         	movff	_txt,strcpy@to
  5216  000986  C04F  F012         	movff	_txt+1,strcpy@to+1
  5217  00098A  0EF5               	movlw	low STR_17
  5218  00098C  6E13               	movwf	strcpy@from,c
  5219  00098E  0EFF               	movlw	high STR_17
  5220  000990  6E14               	movwf	strcpy@from+1,c
  5221  000992  EC2F  F010         	call	_strcpy	;wreg free
  5222                           
  5223                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5224  000996  0E8C               	movlw	140
  5225  000998  6E39               	movwf	drawtext@y,c
  5226  00099A  C04E  F03A         	movff	_txt,drawtext@_text
  5227  00099E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5228  0009A2  0EFF               	movlw	255
  5229  0009A4  6E3D               	movwf	drawtext@color+1,c
  5230  0009A6  683C               	setf	drawtext@color,c
  5231  0009A8  0E00               	movlw	0
  5232  0009AA  6E3F               	movwf	drawtext@bg+1,c
  5233  0009AC  0E00               	movlw	0
  5234  0009AE  6E3E               	movwf	drawtext@bg,c
  5235  0009B0  0E01               	movlw	1
  5236  0009B2  6E40               	movwf	drawtext@size,c
  5237  0009B4  0E5F               	movlw	95
  5238  0009B6  EC9B  F008         	call	_drawtext
  5239  0009BA  0012               	return		;funcret
  5240  0009BC                     __end_of_Initialize_Screen:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon2	equ	0xFF1
  5250                           postinc0	equ	0xFEE
  5251                           wreg	equ	0xFE8
  5252                           postdec1	equ	0xFE5
  5253                           plusw1	equ	0xFE3
  5254                           fsr1l	equ	0xFE1
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           postdec2	equ	0xFDD
  5258                           plusw2	equ	0xFDB
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function _strcpy *****************
  5264 ;; Defined at:
  5265 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  to              2   16[COMRAM] PTR unsigned char 
  5268 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5269 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5270 ;;		 -> STR_19(4), STR_18(4), STR_17(4), STR_16(3), 
  5271 ;;		 -> STR_15(6), STR_14(5), STR_13(5), STR_12(2), 
  5272 ;;		 -> STR_11(3), STR_10(13), STR_9(22), 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5275 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;                  2   16[COMRAM] PTR unsigned char 
  5278 ;; Registers used:
  5279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5285 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;Total ram usage:        6 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    3
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_Initialize_Screen
  5296 ;;		_Update_Screen
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           	psect	text16
  5301  00205E                     __ptext16:
  5302                           	opt stack 0
  5303  00205E                     _strcpy:
  5304                           	opt stack 26
  5305                           
  5306                           ;incstack = 0
  5307  00205E  C011  F015         	movff	strcpy@to,strcpy@cp
  5308  002062  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5309  002066  D005               	goto	l6131
  5310  002068                     l6129:
  5311  002068  4A15               	infsnz	strcpy@cp,f,c
  5312  00206A  2A16               	incf	strcpy@cp+1,f,c
  5313  00206C  4A13               	infsnz	strcpy@from,f,c
  5314  00206E  2A14               	incf	strcpy@from+1,f,c
  5315  002070  D000               	goto	l6131
  5316  002072                     l6131:
  5317  002072  C013  FFF6         	movff	strcpy@from,tblptrl
  5318  002076  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5319  00207A                     	if	0	;tblptru may be non-zero
  5320  00207A                     	endif
  5321  00207A                     	if	0	;tblptru may be non-zero
  5322  00207A                     	endif
  5323  00207A  C015  FFD9         	movff	strcpy@cp,fsr2l
  5324  00207E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5325  002082  0008               	tblrd		*
  5326  002084  CFF5 FFDF          	movff	tablat,indf2
  5327  002088  50DF               	movf	indf2,w,c
  5328  00208A  A4D8               	btfss	status,2,c
  5329  00208C  D7ED               	goto	l6129
  5330                           
  5331                           ;	Return value of _strcpy is never used
  5332  00208E  0012               	return		;funcret
  5333  002090                     __end_of_strcpy:
  5334                           	opt stack 0
  5335                           tblptru	equ	0xFF8
  5336                           tblptrh	equ	0xFF7
  5337                           tblptrl	equ	0xFF6
  5338                           tablat	equ	0xFF5
  5339                           prodh	equ	0xFF4
  5340                           prodl	equ	0xFF3
  5341                           intcon	equ	0xFF2
  5342                           intcon2	equ	0xFF1
  5343                           postinc0	equ	0xFEE
  5344                           wreg	equ	0xFE8
  5345                           postdec1	equ	0xFE5
  5346                           plusw1	equ	0xFE3
  5347                           fsr1l	equ	0xFE1
  5348                           indf2	equ	0xFDF
  5349                           postinc2	equ	0xFDE
  5350                           postdec2	equ	0xFDD
  5351                           plusw2	equ	0xFDB
  5352                           fsr2h	equ	0xFDA
  5353                           fsr2l	equ	0xFD9
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _fillScreen *****************
  5357 ;; Defined at:
  5358 ;;		line 620 in file "ST7735_TFT.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;  color           2   35[COMRAM] unsigned int 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;		None               void
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;Total ram usage:        2 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    7
  5379 ;; This function calls:
  5380 ;;		_fillRectangle
  5381 ;; This function is called by:
  5382 ;;		_Initialize_Screen
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text17
  5387  0021F8                     __ptext17:
  5388                           	opt stack 0
  5389  0021F8                     _fillScreen:
  5390                           	opt stack 22
  5391                           
  5392                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5393                           
  5394                           ;incstack = 0
  5395  0021F8  0E00               	movlw	0
  5396  0021FA  6E18               	movwf	fillRectangle@y,c
  5397  0021FC  0E80               	movlw	128
  5398  0021FE  6E19               	movwf	fillRectangle@w,c
  5399  002200  0EA0               	movlw	160
  5400  002202  6E1A               	movwf	fillRectangle@h,c
  5401  002204  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5402  002208  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5403  00220C  0E00               	movlw	0
  5404  00220E  ECF9  F00A         	call	_fillRectangle
  5405  002212  0012               	return		;funcret
  5406  002214                     __end_of_fillScreen:
  5407                           	opt stack 0
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           intcon	equ	0xFF2
  5415                           intcon2	equ	0xFF1
  5416                           postinc0	equ	0xFEE
  5417                           wreg	equ	0xFE8
  5418                           postdec1	equ	0xFE5
  5419                           plusw1	equ	0xFE3
  5420                           fsr1l	equ	0xFE1
  5421                           indf2	equ	0xFDF
  5422                           postinc2	equ	0xFDE
  5423                           postdec2	equ	0xFDD
  5424                           plusw2	equ	0xFDB
  5425                           fsr2h	equ	0xFDA
  5426                           fsr2l	equ	0xFD9
  5427                           status	equ	0xFD8
  5428                           
  5429 ;; *************** function _fillRectangle *****************
  5430 ;; Defined at:
  5431 ;;		line 504 in file "ST7735_TFT.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;  x               1    wreg     unsigned char 
  5434 ;;  y               1   23[COMRAM] unsigned char 
  5435 ;;  w               1   24[COMRAM] unsigned char 
  5436 ;;  h               1   25[COMRAM] unsigned char 
  5437 ;;  color           2   26[COMRAM] unsigned int 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  x               1   34[COMRAM] unsigned char 
  5440 ;;  lo              1   33[COMRAM] unsigned char 
  5441 ;;  hi              1   32[COMRAM] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;		None               void
  5444 ;; Registers used:
  5445 ;;		wreg, status,2, status,0, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5451 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;Total ram usage:       12 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    6
  5458 ;; This function calls:
  5459 ;;		_setAddrWindow
  5460 ;;		_spiwrite
  5461 ;; This function is called by:
  5462 ;;		_fillScreen
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text18
  5467  0015F2                     __ptext18:
  5468                           	opt stack 0
  5469  0015F2                     _fillRectangle:
  5470                           	opt stack 22
  5471                           
  5472                           ;incstack = 0
  5473                           ;fillRectangle@x stored from wreg
  5474  0015F2  6E23               	movwf	fillRectangle@x,c
  5475                           
  5476                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5477                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5478  0015F4  0E80               	movlw	128
  5479  0015F6  6023               	cpfslt	fillRectangle@x,c
  5480  0015F8  D069               	goto	l671
  5481  0015FA  0E9F               	movlw	159
  5482  0015FC  6418               	cpfsgt	fillRectangle@y,c
  5483  0015FE  D001               	goto	l5977
  5484                           
  5485                           ;ST7735_TFT.c: 508: return;
  5486  001600  D065               	goto	l671
  5487  001602                     l5977:
  5488                           
  5489                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5490  001602  0EFF               	movlw	255
  5491  001604  6E1D               	movwf	??_fillRectangle& (0+255),c
  5492  001606  0EFF               	movlw	255
  5493  001608  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5494  00160A  5019               	movf	fillRectangle@w,w,c
  5495  00160C  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5496  001610  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5497  001612  261F               	addwf	??_fillRectangle+2,f,c
  5498  001614  0E00               	movlw	0
  5499  001616  2220               	addwfc	??_fillRectangle+3,f,c
  5500  001618  501D               	movf	??_fillRectangle,w,c
  5501  00161A  261F               	addwf	??_fillRectangle+2,f,c
  5502  00161C  501E               	movf	??_fillRectangle+1,w,c
  5503  00161E  2220               	addwfc	??_fillRectangle+3,f,c
  5504  001620  BE20               	btfsc	??_fillRectangle+3,7,c
  5505  001622  D00A               	goto	l672
  5506  001624  5020               	movf	??_fillRectangle+3,w,c
  5507  001626  E104               	bnz	u4690
  5508  001628  0E80               	movlw	128
  5509  00162A  5C1F               	subwf	??_fillRectangle+2,w,c
  5510  00162C  A0D8               	btfss	status,0,c
  5511  00162E  D004               	goto	l672
  5512  001630                     u4690:
  5513                           
  5514                           ;ST7735_TFT.c: 510: w = 128 - x;
  5515  001630  5023               	movf	fillRectangle@x,w,c
  5516  001632  0800               	sublw	0
  5517  001634  0F80               	addlw	128
  5518  001636  6E19               	movwf	fillRectangle@w,c
  5519  001638                     l672:
  5520                           
  5521                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5522  001638  0EFF               	movlw	255
  5523  00163A  6E1D               	movwf	??_fillRectangle& (0+255),c
  5524  00163C  0EFF               	movlw	255
  5525  00163E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5526  001640  501A               	movf	fillRectangle@h,w,c
  5527  001642  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5528  001646  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5529  001648  261F               	addwf	??_fillRectangle+2,f,c
  5530  00164A  0E00               	movlw	0
  5531  00164C  2220               	addwfc	??_fillRectangle+3,f,c
  5532  00164E  501D               	movf	??_fillRectangle,w,c
  5533  001650  261F               	addwf	??_fillRectangle+2,f,c
  5534  001652  501E               	movf	??_fillRectangle+1,w,c
  5535  001654  2220               	addwfc	??_fillRectangle+3,f,c
  5536  001656  BE20               	btfsc	??_fillRectangle+3,7,c
  5537  001658  D00B               	goto	l5983
  5538  00165A  5020               	movf	??_fillRectangle+3,w,c
  5539  00165C  E104               	bnz	u4700
  5540  00165E  0EA0               	movlw	160
  5541  001660  5C1F               	subwf	??_fillRectangle+2,w,c
  5542  001662  A0D8               	btfss	status,0,c
  5543  001664  D005               	goto	l5983
  5544  001666                     u4700:
  5545                           
  5546                           ;ST7735_TFT.c: 512: h = 160 - y;
  5547  001666  5018               	movf	fillRectangle@y,w,c
  5548  001668  0800               	sublw	0
  5549  00166A  0FA0               	addlw	160
  5550  00166C  6E1A               	movwf	fillRectangle@h,c
  5551  00166E  D000               	goto	l5983
  5552  001670                     l5983:
  5553                           
  5554                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5555  001670  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5556  001674  5023               	movf	fillRectangle@x,w,c
  5557  001676  2419               	addwf	fillRectangle@w,w,c
  5558  001678  6E1D               	movwf	??_fillRectangle& (0+255),c
  5559  00167A  041D               	decf	??_fillRectangle,w,c
  5560  00167C  6E15               	movwf	setAddrWindow@x1,c
  5561  00167E  5018               	movf	fillRectangle@y,w,c
  5562  001680  241A               	addwf	fillRectangle@h,w,c
  5563  001682  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5564  001684  041E               	decf	??_fillRectangle+1,w,c
  5565  001686  6E16               	movwf	setAddrWindow@y1,c
  5566  001688  5023               	movf	fillRectangle@x,w,c
  5567  00168A  ECB7  F00E         	call	_setAddrWindow
  5568                           
  5569                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5570  00168E  501C               	movf	fillRectangle@color+1,w,c
  5571  001690  6E21               	movwf	fillRectangle@hi,c
  5572  001692  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5573                           
  5574                           ;ST7735_TFT.c: 515: PORTBbits.RB5 = 1;
  5575  001696  8A81               	bsf	3969,5,c	;volatile
  5576                           
  5577                           ;ST7735_TFT.c: 516: PORTBbits.RB6 = 0;
  5578  001698  9C81               	bcf	3969,6,c	;volatile
  5579                           
  5580                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5581  00169A  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5582  00169E                     l5995:
  5583  00169E  5018               	movf	fillRectangle@y,w,c
  5584  0016A0  B4D8               	btfsc	status,2,c
  5585  0016A2  D013               	goto	l675
  5586  0016A4  D001               	goto	l674
  5587  0016A6  D011               	goto	l675
  5588  0016A8                     l674:
  5589                           
  5590                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5591  0016A8  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5592  0016AC                     l5999:
  5593  0016AC  5023               	movf	fillRectangle@x,w,c
  5594  0016AE  B4D8               	btfsc	status,2,c
  5595  0016B0  D00A               	goto	l6009
  5596  0016B2  D001               	goto	l6003
  5597  0016B4  D008               	goto	l6009
  5598  0016B6                     l6003:
  5599                           
  5600                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5601  0016B6  5021               	movf	fillRectangle@hi,w,c
  5602  0016B8  EC6C  F011         	call	_spiwrite
  5603                           
  5604                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5605  0016BC  5022               	movf	fillRectangle@lo,w,c
  5606  0016BE  EC6C  F011         	call	_spiwrite
  5607  0016C2  0623               	decf	fillRectangle@x,f,c
  5608  0016C4  D7F3               	goto	l5999
  5609  0016C6                     l6009:
  5610  0016C6  0618               	decf	fillRectangle@y,f,c
  5611  0016C8  D7EA               	goto	l5995
  5612  0016CA                     l675:
  5613                           
  5614                           ;ST7735_TFT.c: 522: }
  5615                           ;ST7735_TFT.c: 523: }
  5616                           ;ST7735_TFT.c: 524: PORTBbits.RB6 = 1;
  5617  0016CA  8C81               	bsf	3969,6,c	;volatile
  5618  0016CC                     l671:
  5619  0016CC  0012               	return		;funcret
  5620  0016CE                     __end_of_fillRectangle:
  5621                           	opt stack 0
  5622                           tblptru	equ	0xFF8
  5623                           tblptrh	equ	0xFF7
  5624                           tblptrl	equ	0xFF6
  5625                           tablat	equ	0xFF5
  5626                           prodh	equ	0xFF4
  5627                           prodl	equ	0xFF3
  5628                           intcon	equ	0xFF2
  5629                           intcon2	equ	0xFF1
  5630                           postinc0	equ	0xFEE
  5631                           wreg	equ	0xFE8
  5632                           postdec1	equ	0xFE5
  5633                           plusw1	equ	0xFE3
  5634                           fsr1l	equ	0xFE1
  5635                           indf2	equ	0xFDF
  5636                           postinc2	equ	0xFDE
  5637                           postdec2	equ	0xFDD
  5638                           plusw2	equ	0xFDB
  5639                           fsr2h	equ	0xFDA
  5640                           fsr2l	equ	0xFD9
  5641                           status	equ	0xFD8
  5642                           
  5643 ;; *************** function _drawtext *****************
  5644 ;; Defined at:
  5645 ;;		line 475 in file "ST7735_TFT.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;  x               1    wreg     unsigned char 
  5648 ;;  y               1   56[COMRAM] unsigned char 
  5649 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5650 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5651 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5652 ;;		 -> buffer(33), 
  5653 ;;  color           2   59[COMRAM] unsigned int 
  5654 ;;  bg              2   61[COMRAM] unsigned int 
  5655 ;;  size            1   63[COMRAM] unsigned char 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  x               1    0[BANK0 ] unsigned char 
  5658 ;;  i               2    3[BANK0 ] unsigned int 
  5659 ;;  textsize        2    1[BANK0 ] unsigned int 
  5660 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5661 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;		None               void
  5664 ;; Registers used:
  5665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5671 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;Total ram usage:       17 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    9
  5678 ;; This function calls:
  5679 ;;		_drawChar
  5680 ;;		_strlen
  5681 ;; This function is called by:
  5682 ;;		_Initialize_Screen
  5683 ;;		_Update_Screen
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           	psect	text19
  5688  001136                     __ptext19:
  5689                           	opt stack 0
  5690  001136                     _drawtext:
  5691                           	opt stack 20
  5692                           
  5693                           ;incstack = 0
  5694                           ;drawtext@x stored from wreg
  5695  001136  0100               	movlb	0	; () banked
  5696  001138  6FE4               	movwf	drawtext@x& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5700                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5701                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5702  00113A  C0E4  F0EA         	movff	drawtext@x,drawtext@cursor_x
  5703                           
  5704                           ; BSR set to: 0
  5705  00113E  C039  F0E9         	movff	drawtext@y,drawtext@cursor_y
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5709  001142  C03A  F011         	movff	drawtext@_text,strlen@s
  5710  001146  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5711  00114A  ECB8  F00F         	call	_strlen	;wreg free
  5712  00114E  C011  F0E5         	movff	?_strlen,drawtext@textsize
  5713  001152  C012  F0E6         	movff	?_strlen+1,drawtext@textsize+1
  5714                           
  5715                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5716  001156  0E00               	movlw	0
  5717  001158  0100               	movlb	0	; () banked
  5718  00115A  6FE8               	movwf	(drawtext@i+1)& (0+255),b
  5719  00115C  0E00               	movlw	0
  5720  00115E  6FE7               	movwf	drawtext@i& (0+255),b
  5721  001160  D064               	goto	l6167
  5722  001162                     l6141:
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5726  001162  506F               	movf	_wrap,w,c
  5727  001164  B4D8               	btfsc	status,2,c
  5728  001166  D034               	goto	l6157
  5729                           
  5730                           ; BSR set to: 0
  5731  001168  5040               	movf	drawtext@size,w,c
  5732  00116A  0D05               	mullw	5
  5733  00116C  0100               	movlb	0	; () banked
  5734  00116E  51EA               	movf	drawtext@cursor_x& (0+255),w,b
  5735  001170  6E41               	movwf	??_drawtext& (0+255),c
  5736  001172  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5737  001174  50F3               	movf	prodl,w,c
  5738  001176  2641               	addwf	??_drawtext,f,c
  5739  001178  50F4               	movf	prodh,w,c
  5740  00117A  2242               	addwfc	??_drawtext+1,f,c
  5741  00117C  BE42               	btfsc	??_drawtext+1,7,c
  5742  00117E  D028               	goto	l6157
  5743  001180  5042               	movf	??_drawtext+1,w,c
  5744  001182  E104               	bnz	u4810
  5745  001184  0E81               	movlw	129
  5746  001186  5C41               	subwf	??_drawtext,w,c
  5747  001188  A0D8               	btfss	status,0,c
  5748  00118A  D022               	goto	l6157
  5749  00118C                     u4810:
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5753  00118C  0E00               	movlw	0
  5754  00118E  0100               	movlb	0	; () banked
  5755  001190  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5759  001192  5040               	movf	drawtext@size,w,c
  5760  001194  0D07               	mullw	7
  5761  001196  50F3               	movf	prodl,w,c
  5762  001198  0100               	movlb	0	; () banked
  5763  00119A  25E9               	addwf	drawtext@cursor_y& (0+255),w,b
  5764  00119C  0F03               	addlw	3
  5765  00119E  0100               	movlb	0	; () banked
  5766  0011A0  6FE9               	movwf	drawtext@cursor_y& (0+255),b
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5770  0011A2  0EA0               	movlw	160
  5771  0011A4  0100               	movlb	0	; () banked
  5772  0011A6  65E9               	cpfsgt	drawtext@cursor_y& (0+255),b
  5773  0011A8  D004               	goto	l6153
  5774                           
  5775                           ; BSR set to: 0
  5776  0011AA  0EA0               	movlw	160
  5777  0011AC  0100               	movlb	0	; () banked
  5778  0011AE  6FE9               	movwf	drawtext@cursor_y& (0+255),b
  5779  0011B0  D000               	goto	l6153
  5780  0011B2                     l6153:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5784  0011B2  0100               	movlb	0	; () banked
  5785  0011B4  51E7               	movf	drawtext@i& (0+255),w,b
  5786  0011B6  243A               	addwf	drawtext@_text,w,c
  5787  0011B8  6ED9               	movwf	fsr2l,c
  5788  0011BA  0100               	movlb	0	; () banked
  5789  0011BC  51E8               	movf	(drawtext@i+1)& (0+255),w,b
  5790  0011BE  203B               	addwfc	drawtext@_text+1,w,c
  5791  0011C0  6EDA               	movwf	fsr2h,c
  5792  0011C2  0E20               	movlw	32
  5793  0011C4  18DE               	xorwf	postinc2,w,c
  5794  0011C6  B4D8               	btfsc	status,2,c
  5795  0011C8  D02C               	goto	l6165
  5796  0011CA  D002               	goto	l6157
  5797                           
  5798                           ; BSR set to: 0
  5799  0011CC  D02A               	goto	l6165
  5800                           
  5801                           ; BSR set to: 0
  5802  0011CE  D000               	goto	l6157
  5803  0011D0                     l6157:
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5807  0011D0  C0E9  F02E         	movff	drawtext@cursor_y,drawChar@y
  5808  0011D4  0100               	movlb	0	; () banked
  5809  0011D6  51E7               	movf	drawtext@i& (0+255),w,b
  5810  0011D8  243A               	addwf	drawtext@_text,w,c
  5811  0011DA  6ED9               	movwf	fsr2l,c
  5812  0011DC  0100               	movlb	0	; () banked
  5813  0011DE  51E8               	movf	(drawtext@i+1)& (0+255),w,b
  5814  0011E0  203B               	addwfc	drawtext@_text+1,w,c
  5815  0011E2  6EDA               	movwf	fsr2h,c
  5816  0011E4  50DF               	movf	indf2,w,c
  5817  0011E6  6E2F               	movwf	drawChar@c,c
  5818  0011E8  C03C  F030         	movff	drawtext@color,drawChar@color
  5819  0011EC  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5820  0011F0  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5821  0011F4  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5822  0011F8  C040  F034         	movff	drawtext@size,drawChar@size
  5823  0011FC  0100               	movlb	0	; () banked
  5824  0011FE  51EA               	movf	drawtext@cursor_x& (0+255),w,b
  5825  001200  EC68  F007         	call	_drawChar
  5826                           
  5827                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5828  001204  5040               	movf	drawtext@size,w,c
  5829  001206  0D06               	mullw	6
  5830  001208  50F3               	movf	prodl,w,c
  5831  00120A  0100               	movlb	0	; () banked
  5832  00120C  25EA               	addwf	drawtext@cursor_x& (0+255),w,b
  5833  00120E  0100               	movlb	0	; () banked
  5834  001210  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  5838  001212  0E80               	movlw	128
  5839  001214  0100               	movlb	0	; () banked
  5840  001216  65EA               	cpfsgt	drawtext@cursor_x& (0+255),b
  5841  001218  D004               	goto	l6165
  5842                           
  5843                           ; BSR set to: 0
  5844  00121A  0E80               	movlw	128
  5845  00121C  0100               	movlb	0	; () banked
  5846  00121E  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5847                           
  5848                           ; BSR set to: 0
  5849  001220  D000               	goto	l6165
  5850  001222                     l6165:
  5851                           
  5852                           ; BSR set to: 0
  5853  001222  0100               	movlb	0	; () banked
  5854  001224  4BE7               	infsnz	drawtext@i& (0+255),f,b
  5855  001226  2BE8               	incf	(drawtext@i+1)& (0+255),f,b
  5856  001228  D000               	goto	l6167
  5857  00122A                     l6167:
  5858                           
  5859                           ; BSR set to: 0
  5860  00122A  0100               	movlb	0	; () banked
  5861  00122C  51E5               	movf	drawtext@textsize& (0+255),w,b
  5862  00122E  0100               	movlb	0	; () banked
  5863  001230  5DE7               	subwf	drawtext@i& (0+255),w,b
  5864  001232  0100               	movlb	0	; () banked
  5865  001234  51E6               	movf	(drawtext@textsize+1)& (0+255),w,b
  5866  001236  0100               	movlb	0	; () banked
  5867  001238  59E8               	subwfb	(drawtext@i+1)& (0+255),w,b
  5868  00123A  A0D8               	btfss	status,0,c
  5869  00123C  D792               	goto	l6141
  5870                           
  5871                           ; BSR set to: 0
  5872                           
  5873                           ; BSR set to: 0
  5874  00123E  0012               	return		;funcret
  5875  001240                     __end_of_drawtext:
  5876                           	opt stack 0
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodh	equ	0xFF4
  5882                           prodl	equ	0xFF3
  5883                           intcon	equ	0xFF2
  5884                           intcon2	equ	0xFF1
  5885                           postinc0	equ	0xFEE
  5886                           wreg	equ	0xFE8
  5887                           postdec1	equ	0xFE5
  5888                           plusw1	equ	0xFE3
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           plusw2	equ	0xFDB
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _strlen *****************
  5899 ;; Defined at:
  5900 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5903 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5904 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5905 ;;		 -> buffer(33), 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5908 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5909 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5910 ;;		 -> buffer(33), 
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  2   16[COMRAM] unsigned int 
  5913 ;; Registers used:
  5914 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5915 ;; Tracked objects:
  5916 ;;		On entry : 0/0
  5917 ;;		On exit  : 0/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5920 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5924 ;;Total ram usage:        6 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; Hardware stack levels required when called:    3
  5927 ;; This function calls:
  5928 ;;		Nothing
  5929 ;; This function is called by:
  5930 ;;		_drawtext
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text20
  5935  001F70                     __ptext20:
  5936                           	opt stack 0
  5937  001F70                     _strlen:
  5938                           	opt stack 25
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;incstack = 0
  5942  001F70  C011  F015         	movff	strlen@s,strlen@cp
  5943  001F74  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5944  001F78  D003               	goto	l5967
  5945  001F7A                     l5965:
  5946  001F7A  4A15               	infsnz	strlen@cp,f,c
  5947  001F7C  2A16               	incf	strlen@cp+1,f,c
  5948  001F7E  D000               	goto	l5967
  5949  001F80                     l5967:
  5950  001F80  C015  FFD9         	movff	strlen@cp,fsr2l
  5951  001F84  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5952  001F88  50DF               	movf	indf2,w,c
  5953  001F8A  A4D8               	btfss	status,2,c
  5954  001F8C  D7F6               	goto	l5965
  5955  001F8E  C011  F013         	movff	strlen@s,??_strlen
  5956  001F92  C012  F014         	movff	strlen@s+1,??_strlen+1
  5957  001F96  1E13               	comf	??_strlen,f,c
  5958  001F98  1E14               	comf	??_strlen+1,f,c
  5959  001F9A  4A13               	infsnz	??_strlen,f,c
  5960  001F9C  2A14               	incf	??_strlen+1,f,c
  5961  001F9E  5015               	movf	strlen@cp,w,c
  5962  001FA0  2413               	addwf	??_strlen,w,c
  5963  001FA2  6E11               	movwf	?_strlen,c
  5964  001FA4  5016               	movf	strlen@cp+1,w,c
  5965  001FA6  2014               	addwfc	??_strlen+1,w,c
  5966  001FA8  6E12               	movwf	?_strlen+1,c
  5967  001FAA  D000               	goto	l1449
  5968  001FAC                     l1449:
  5969  001FAC  0012               	return		;funcret
  5970  001FAE                     __end_of_strlen:
  5971                           	opt stack 0
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           intcon2	equ	0xFF1
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           plusw1	equ	0xFE3
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           plusw2	equ	0xFDB
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function _drawChar *****************
  5994 ;; Defined at:
  5995 ;;		line 448 in file "ST7735_TFT.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  x               1    wreg     unsigned char 
  5998 ;;  y               1   45[COMRAM] unsigned char 
  5999 ;;  c               1   46[COMRAM] unsigned char 
  6000 ;;  color           2   47[COMRAM] unsigned int 
  6001 ;;  bg              2   49[COMRAM] unsigned int 
  6002 ;;  size            1   51[COMRAM] unsigned char 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  x               1   53[COMRAM] unsigned char 
  6005 ;;  line            1   52[COMRAM] unsigned char 
  6006 ;;  i               1   55[COMRAM] unsigned char 
  6007 ;;  j               1   54[COMRAM] unsigned char 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;		None               void
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6017 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;Total ram usage:       11 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    8
  6024 ;; This function calls:
  6025 ;;		___wmul
  6026 ;;		_drawPixel
  6027 ;;		_fillRect
  6028 ;; This function is called by:
  6029 ;;		_drawtext
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text21
  6034  000ED0                     __ptext21:
  6035                           	opt stack 0
  6036  000ED0                     _drawChar:
  6037                           	opt stack 20
  6038                           
  6039                           ;incstack = 0
  6040                           ;drawChar@x stored from wreg
  6041  000ED0  6E36               	movwf	drawChar@x,c
  6042                           
  6043                           ;ST7735_TFT.c: 450: char i, j;
  6044                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  6045  000ED2  0E80               	movlw	128
  6046  000ED4  6036               	cpfslt	drawChar@x,c
  6047  000ED6  D0A6               	goto	l634
  6048  000ED8  0E9F               	movlw	159
  6049  000EDA  642E               	cpfsgt	drawChar@y,c
  6050  000EDC  D001               	goto	l5913
  6051                           
  6052                           ;ST7735_TFT.c: 452: return;
  6053  000EDE  D0A2               	goto	l634
  6054  000EE0                     l5913:
  6055                           
  6056                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6057  000EE0  5034               	movf	drawChar@size,w,c
  6058  000EE2  A4D8               	btfss	status,2,c
  6059  000EE4  D003               	goto	l5917
  6060  000EE6  0E01               	movlw	1
  6061  000EE8  6E34               	movwf	drawChar@size,c
  6062  000EEA  D000               	goto	l5917
  6063  000EEC                     l5917:
  6064                           
  6065                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6066  000EEC  0E1F               	movlw	31
  6067  000EEE  642F               	cpfsgt	drawChar@c,c
  6068  000EF0  D004               	goto	l5921
  6069  000EF2  0E7E               	movlw	126
  6070  000EF4  642F               	cpfsgt	drawChar@c,c
  6071  000EF6  D003               	goto	l636
  6072  000EF8  D000               	goto	l5921
  6073  000EFA                     l5921:
  6074                           
  6075                           ;ST7735_TFT.c: 455: c = '?';
  6076  000EFA  0E3F               	movlw	63
  6077  000EFC  6E2F               	movwf	drawChar@c,c
  6078  000EFE                     l636:
  6079                           
  6080                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6081  000EFE  0E00               	movlw	0
  6082  000F00  6E38               	movwf	drawChar@i,c
  6083  000F02                     l5923:
  6084  000F02  0E04               	movlw	4
  6085  000F04  6438               	cpfsgt	drawChar@i,c
  6086  000F06  D001               	goto	l5927
  6087  000F08  D08D               	goto	l634
  6088  000F0A                     l5927:
  6089                           
  6090                           ;ST7735_TFT.c: 457: unsigned char line;
  6091                           ;ST7735_TFT.c: 458: if(c < 'S')
  6092  000F0A  0E53               	movlw	83
  6093  000F0C  602F               	cpfslt	drawChar@c,c
  6094  000F0E  D015               	goto	l5931
  6095                           
  6096                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6097  000F10  0EE0               	movlw	224
  6098  000F12  242F               	addwf	drawChar@c,w,c
  6099  000F14  6E11               	movwf	___wmul@multiplier,c
  6100  000F16  6A12               	clrf	___wmul@multiplier+1,c
  6101  000F18  0EFF               	movlw	255
  6102  000F1A  2212               	addwfc	___wmul@multiplier+1,f,c
  6103  000F1C  0E00               	movlw	0
  6104  000F1E  6E14               	movwf	___wmul@multiplicand+1,c
  6105  000F20  0E05               	movlw	5
  6106  000F22  6E13               	movwf	___wmul@multiplicand,c
  6107  000F24  EC8D  F010         	call	___wmul	;wreg free
  6108  000F28  5038               	movf	drawChar@i,w,c
  6109  000F2A  2611               	addwf	?___wmul,f,c
  6110  000F2C  0E00               	movlw	0
  6111  000F2E  2212               	addwfc	?___wmul+1,f,c
  6112  000F30  0E19               	movlw	low _font
  6113  000F32  2411               	addwf	?___wmul,w,c
  6114  000F34  6EF6               	movwf	tblptrl,c
  6115  000F36  0EFD               	movlw	high _font
  6116  000F38  D014               	goto	L5
  6117  000F3A                     l5931:
  6118                           
  6119                           ;ST7735_TFT.c: 460: else
  6120                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6121  000F3A  0EAD               	movlw	173
  6122  000F3C  242F               	addwf	drawChar@c,w,c
  6123  000F3E  6E11               	movwf	___wmul@multiplier,c
  6124  000F40  6A12               	clrf	___wmul@multiplier+1,c
  6125  000F42  0EFF               	movlw	255
  6126  000F44  2212               	addwfc	___wmul@multiplier+1,f,c
  6127  000F46  0E00               	movlw	0
  6128  000F48  6E14               	movwf	___wmul@multiplicand+1,c
  6129  000F4A  0E05               	movlw	5
  6130  000F4C  6E13               	movwf	___wmul@multiplicand,c
  6131  000F4E  EC8D  F010         	call	___wmul	;wreg free
  6132  000F52  5038               	movf	drawChar@i,w,c
  6133  000F54  2611               	addwf	?___wmul,f,c
  6134  000F56  0E00               	movlw	0
  6135  000F58  2212               	addwfc	?___wmul+1,f,c
  6136  000F5A  0E18               	movlw	low _font2
  6137  000F5C  2411               	addwf	?___wmul,w,c
  6138  000F5E  6EF6               	movwf	tblptrl,c
  6139  000F60  0EFE               	movlw	high _font2
  6140  000F62                     L5:
  6141  000F62  2012               	addwfc	?___wmul+1,w,c
  6142  000F64  6EF7               	movwf	tblptrh,c
  6143  000F66                     	if	0	;There are less than 3 active tblptr bytes
  6144  000F66                     	endif
  6145  000F66  0008               	tblrd		*
  6146  000F68  CFF5 F035          	movff	tablat,drawChar@line
  6147  000F6C  D000               	goto	l5933
  6148  000F6E                     l5933:
  6149                           
  6150                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6151  000F6E  0E00               	movlw	0
  6152  000F70  6E37               	movwf	drawChar@j,c
  6153  000F72                     l5935:
  6154  000F72  0E06               	movlw	6
  6155  000F74  6437               	cpfsgt	drawChar@j,c
  6156  000F76  D001               	goto	l643
  6157  000F78  D053               	goto	l5959
  6158  000F7A                     l643:
  6159                           
  6160                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6161  000F7A  A035               	btfss	drawChar@line,0,c
  6162  000F7C  D023               	goto	l5945
  6163                           
  6164                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6165  000F7E  0434               	decf	drawChar@size,w,c
  6166  000F80  A4D8               	btfss	status,2,c
  6167  000F82  D00C               	goto	l5943
  6168  000F84  502E               	movf	drawChar@y,w,c
  6169  000F86  2437               	addwf	drawChar@j,w,c
  6170  000F88  6E18               	movwf	drawPixel@y,c
  6171  000F8A  C030  F019         	movff	drawChar@color,drawPixel@color
  6172  000F8E  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6173  000F92  5036               	movf	drawChar@x,w,c
  6174  000F94  2438               	addwf	drawChar@i,w,c
  6175  000F96  EC48  F010         	call	_drawPixel
  6176  000F9A  D03E               	goto	l5953
  6177  000F9C                     l5943:
  6178                           
  6179                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6180  000F9C  5037               	movf	drawChar@j,w,c
  6181  000F9E  0234               	mulwf	drawChar@size,c
  6182  000FA0  50F3               	movf	prodl,w,c
  6183  000FA2  242E               	addwf	drawChar@y,w,c
  6184  000FA4  6E23               	movwf	fillRect@y,c
  6185  000FA6  C034  F024         	movff	drawChar@size,fillRect@w
  6186  000FAA  C034  F025         	movff	drawChar@size,fillRect@h
  6187  000FAE  C030  F026         	movff	drawChar@color,fillRect@color
  6188  000FB2  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6189  000FB6  5038               	movf	drawChar@i,w,c
  6190  000FB8  0234               	mulwf	drawChar@size,c
  6191  000FBA  50F3               	movf	prodl,w,c
  6192  000FBC  2436               	addwf	drawChar@x,w,c
  6193  000FBE  EC50  F00F         	call	_fillRect
  6194                           
  6195                           ;ST7735_TFT.c: 466: }
  6196  000FC2  D02A               	goto	l5953
  6197  000FC4                     l5945:
  6198                           
  6199                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6200  000FC4  5030               	movf	drawChar@color,w,c
  6201  000FC6  1832               	xorwf	drawChar@bg,w,c
  6202  000FC8  E104               	bnz	u4620
  6203  000FCA  5031               	movf	drawChar@color+1,w,c
  6204  000FCC  1833               	xorwf	drawChar@bg+1,w,c
  6205  000FCE  B4D8               	btfsc	status,2,c
  6206  000FD0  D023               	goto	l5953
  6207  000FD2                     u4620:
  6208                           
  6209                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6210  000FD2  0434               	decf	drawChar@size,w,c
  6211  000FD4  A4D8               	btfss	status,2,c
  6212  000FD6  D00C               	goto	l5951
  6213  000FD8  502E               	movf	drawChar@y,w,c
  6214  000FDA  2437               	addwf	drawChar@j,w,c
  6215  000FDC  6E18               	movwf	drawPixel@y,c
  6216  000FDE  C032  F019         	movff	drawChar@bg,drawPixel@color
  6217  000FE2  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6218  000FE6  5036               	movf	drawChar@x,w,c
  6219  000FE8  2438               	addwf	drawChar@i,w,c
  6220  000FEA  EC48  F010         	call	_drawPixel
  6221  000FEE  D014               	goto	l5953
  6222  000FF0                     l5951:
  6223                           
  6224                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6225  000FF0  5037               	movf	drawChar@j,w,c
  6226  000FF2  0234               	mulwf	drawChar@size,c
  6227  000FF4  50F3               	movf	prodl,w,c
  6228  000FF6  242E               	addwf	drawChar@y,w,c
  6229  000FF8  6E23               	movwf	fillRect@y,c
  6230  000FFA  C034  F024         	movff	drawChar@size,fillRect@w
  6231  000FFE  C034  F025         	movff	drawChar@size,fillRect@h
  6232  001002  C032  F026         	movff	drawChar@bg,fillRect@color
  6233  001006  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6234  00100A  5038               	movf	drawChar@i,w,c
  6235  00100C  0234               	mulwf	drawChar@size,c
  6236  00100E  50F3               	movf	prodl,w,c
  6237  001010  2436               	addwf	drawChar@x,w,c
  6238  001012  EC50  F00F         	call	_fillRect
  6239  001016  D000               	goto	l5953
  6240  001018                     l5953:
  6241  001018  2A37               	incf	drawChar@j,f,c
  6242  00101A  90D8               	bcf	status,0,c
  6243  00101C  3235               	rrcf	drawChar@line,f,c
  6244  00101E  D7A9               	goto	l5935
  6245  001020                     l5959:
  6246  001020  2A38               	incf	drawChar@i,f,c
  6247  001022  D76F               	goto	l5923
  6248  001024                     l634:
  6249  001024  0012               	return		;funcret
  6250  001026                     __end_of_drawChar:
  6251                           	opt stack 0
  6252                           tblptru	equ	0xFF8
  6253                           tblptrh	equ	0xFF7
  6254                           tblptrl	equ	0xFF6
  6255                           tablat	equ	0xFF5
  6256                           prodh	equ	0xFF4
  6257                           prodl	equ	0xFF3
  6258                           intcon	equ	0xFF2
  6259                           intcon2	equ	0xFF1
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           plusw1	equ	0xFE3
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           plusw2	equ	0xFDB
  6269                           fsr2h	equ	0xFDA
  6270                           fsr2l	equ	0xFD9
  6271                           status	equ	0xFD8
  6272                           
  6273 ;; *************** function _fillRect *****************
  6274 ;; Defined at:
  6275 ;;		line 438 in file "ST7735_TFT.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  x               1    wreg     unsigned char 
  6278 ;;  y               1   34[COMRAM] unsigned char 
  6279 ;;  w               1   35[COMRAM] unsigned char 
  6280 ;;  h               1   36[COMRAM] unsigned char 
  6281 ;;  color           2   37[COMRAM] unsigned int 
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;  x               1   42[COMRAM] unsigned char 
  6284 ;;  i               2   43[COMRAM] int 
  6285 ;; Return value:  Size  Location     Type
  6286 ;;		None               void
  6287 ;; Registers used:
  6288 ;;		wreg, status,2, status,0, cstack
  6289 ;; Tracked objects:
  6290 ;;		On entry : 0/0
  6291 ;;		On exit  : 0/0
  6292 ;;		Unchanged: 0/0
  6293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6294 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6297 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6298 ;;Total ram usage:       11 bytes
  6299 ;; Hardware stack levels used:    1
  6300 ;; Hardware stack levels required when called:    7
  6301 ;; This function calls:
  6302 ;;		_drawFastVLine
  6303 ;; This function is called by:
  6304 ;;		_drawChar
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text22
  6309  001EA0                     __ptext22:
  6310                           	opt stack 0
  6311  001EA0                     _fillRect:
  6312                           	opt stack 20
  6313                           
  6314                           ;incstack = 0
  6315                           ;fillRect@x stored from wreg
  6316  001EA0  6E2B               	movwf	fillRect@x,c
  6317                           
  6318                           ;ST7735_TFT.c: 440: signed int i;
  6319                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6320  001EA2  C02B  F02C         	movff	fillRect@x,fillRect@i
  6321  001EA6  6A2D               	clrf	fillRect@i+1,c
  6322  001EA8  D00E               	goto	l5393
  6323  001EAA                     l5389:
  6324                           
  6325                           ;ST7735_TFT.c: 443: {
  6326                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6327  001EAA  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6328  001EAE  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6329  001EB2  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6330  001EB6  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6331  001EBA  502C               	movf	fillRect@i,w,c
  6332  001EBC  EC70  F00C         	call	_drawFastVLine
  6333  001EC0  4A2C               	infsnz	fillRect@i,f,c
  6334  001EC2  2A2D               	incf	fillRect@i+1,f,c
  6335  001EC4  D000               	goto	l5393
  6336  001EC6                     l5393:
  6337  001EC6  5024               	movf	fillRect@w,w,c
  6338  001EC8  C02B  F028         	movff	fillRect@x,??_fillRect
  6339  001ECC  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6340  001ECE  2628               	addwf	??_fillRect,f,c
  6341  001ED0  0E00               	movlw	0
  6342  001ED2  2229               	addwfc	??_fillRect+1,f,c
  6343  001ED4  5028               	movf	??_fillRect,w,c
  6344  001ED6  5C2C               	subwf	fillRect@i,w,c
  6345  001ED8  502D               	movf	fillRect@i+1,w,c
  6346  001EDA  0A80               	xorlw	128
  6347  001EDC  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6348  001EDE  5029               	movf	??_fillRect+1,w,c
  6349  001EE0  0A80               	xorlw	128
  6350  001EE2  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6351  001EE4  A0D8               	btfss	status,0,c
  6352  001EE6  D7E1               	goto	l5389
  6353  001EE8  0012               	return		;funcret
  6354  001EEA                     __end_of_fillRect:
  6355                           	opt stack 0
  6356                           tblptru	equ	0xFF8
  6357                           tblptrh	equ	0xFF7
  6358                           tblptrl	equ	0xFF6
  6359                           tablat	equ	0xFF5
  6360                           prodh	equ	0xFF4
  6361                           prodl	equ	0xFF3
  6362                           intcon	equ	0xFF2
  6363                           intcon2	equ	0xFF1
  6364                           postinc0	equ	0xFEE
  6365                           wreg	equ	0xFE8
  6366                           postdec1	equ	0xFE5
  6367                           plusw1	equ	0xFE3
  6368                           fsr1l	equ	0xFE1
  6369                           indf2	equ	0xFDF
  6370                           postinc2	equ	0xFDE
  6371                           postdec2	equ	0xFDD
  6372                           plusw2	equ	0xFDB
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377 ;; *************** function _drawFastVLine *****************
  6378 ;; Defined at:
  6379 ;;		line 417 in file "ST7735_TFT.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  x               1    wreg     unsigned char 
  6382 ;;  y               1   23[COMRAM] unsigned char 
  6383 ;;  h               1   24[COMRAM] unsigned char 
  6384 ;;  color           2   25[COMRAM] unsigned int 
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;  x               1   33[COMRAM] unsigned char 
  6387 ;;  lo              1   32[COMRAM] unsigned char 
  6388 ;;  hi              1   31[COMRAM] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;		None               void
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6398 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;Total ram usage:       11 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    6
  6405 ;; This function calls:
  6406 ;;		_setAddrWindow
  6407 ;;		_spiwrite
  6408 ;; This function is called by:
  6409 ;;		_fillRect
  6410 ;;		_fillCircleHelper
  6411 ;;		_fillCircle
  6412 ;;		_drawRect
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text23
  6417  0018E0                     __ptext23:
  6418                           	opt stack 0
  6419  0018E0                     _drawFastVLine:
  6420                           	opt stack 20
  6421                           
  6422                           ;incstack = 0
  6423                           ;drawFastVLine@x stored from wreg
  6424  0018E0  6E22               	movwf	drawFastVLine@x,c
  6425                           
  6426                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6427                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6428  0018E2  0E80               	movlw	128
  6429  0018E4  6022               	cpfslt	drawFastVLine@x,c
  6430  0018E6  D03F               	goto	l618
  6431  0018E8  0E9F               	movlw	159
  6432  0018EA  6418               	cpfsgt	drawFastVLine@y,c
  6433  0018EC  D001               	goto	l5259
  6434                           
  6435                           ;ST7735_TFT.c: 421: return;
  6436  0018EE  D03B               	goto	l618
  6437  0018F0                     l5259:
  6438                           
  6439                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6440  0018F0  0EFF               	movlw	255
  6441  0018F2  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6442  0018F4  0EFF               	movlw	255
  6443  0018F6  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6444  0018F8  5019               	movf	drawFastVLine@h,w,c
  6445  0018FA  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6446  0018FE  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6447  001900  261E               	addwf	??_drawFastVLine+2,f,c
  6448  001902  0E00               	movlw	0
  6449  001904  221F               	addwfc	??_drawFastVLine+3,f,c
  6450  001906  501C               	movf	??_drawFastVLine,w,c
  6451  001908  261E               	addwf	??_drawFastVLine+2,f,c
  6452  00190A  501D               	movf	??_drawFastVLine+1,w,c
  6453  00190C  221F               	addwfc	??_drawFastVLine+3,f,c
  6454  00190E  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6455  001910  D00B               	goto	l5263
  6456  001912  501F               	movf	??_drawFastVLine+3,w,c
  6457  001914  E104               	bnz	u3720
  6458  001916  0EA0               	movlw	160
  6459  001918  5C1E               	subwf	??_drawFastVLine+2,w,c
  6460  00191A  A0D8               	btfss	status,0,c
  6461  00191C  D005               	goto	l5263
  6462  00191E                     u3720:
  6463                           
  6464                           ;ST7735_TFT.c: 423: h = 160 - y;
  6465  00191E  5018               	movf	drawFastVLine@y,w,c
  6466  001920  0800               	sublw	0
  6467  001922  0FA0               	addlw	160
  6468  001924  6E19               	movwf	drawFastVLine@h,c
  6469  001926  D000               	goto	l5263
  6470  001928                     l5263:
  6471                           
  6472                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6473  001928  501B               	movf	drawFastVLine@color+1,w,c
  6474  00192A  6E20               	movwf	drawFastVLine@hi,c
  6475  00192C  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6476                           
  6477                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6478  001930  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6479  001934  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6480  001938  5018               	movf	drawFastVLine@y,w,c
  6481  00193A  2419               	addwf	drawFastVLine@h,w,c
  6482  00193C  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6483  00193E  041C               	decf	??_drawFastVLine,w,c
  6484  001940  6E16               	movwf	setAddrWindow@y1,c
  6485  001942  5022               	movf	drawFastVLine@x,w,c
  6486  001944  ECB7  F00E         	call	_setAddrWindow
  6487                           
  6488                           ;ST7735_TFT.c: 426: PORTBbits.RB5 = 1;
  6489  001948  8A81               	bsf	3969,5,c	;volatile
  6490                           
  6491                           ;ST7735_TFT.c: 427: PORTBbits.RB6 = 0;
  6492  00194A  9C81               	bcf	3969,6,c	;volatile
  6493                           
  6494                           ;ST7735_TFT.c: 429: while (h--) {
  6495  00194C  D007               	goto	l5275
  6496  00194E                     l5273:
  6497                           
  6498                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6499  00194E  5020               	movf	drawFastVLine@hi,w,c
  6500  001950  EC6C  F011         	call	_spiwrite
  6501                           
  6502                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6503  001954  5021               	movf	drawFastVLine@lo,w,c
  6504  001956  EC6C  F011         	call	_spiwrite
  6505  00195A  D000               	goto	l5275
  6506  00195C                     l5275:
  6507  00195C  0619               	decf	drawFastVLine@h,f,c
  6508  00195E  2819               	incf	drawFastVLine@h,w,c
  6509  001960  A4D8               	btfss	status,2,c
  6510  001962  D7F5               	goto	l5273
  6511                           
  6512                           ;ST7735_TFT.c: 432: }
  6513                           ;ST7735_TFT.c: 433: PORTBbits.RB6 = 1;
  6514  001964  8C81               	bsf	3969,6,c	;volatile
  6515  001966                     l618:
  6516  001966  0012               	return		;funcret
  6517  001968                     __end_of_drawFastVLine:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           intcon2	equ	0xFF1
  6527                           postinc0	equ	0xFEE
  6528                           wreg	equ	0xFE8
  6529                           postdec1	equ	0xFE5
  6530                           plusw1	equ	0xFE3
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           plusw2	equ	0xFDB
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function _drawCircle *****************
  6541 ;; Defined at:
  6542 ;;		line 529 in file "ST7735_TFT.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  x0              2   27[COMRAM] int 
  6545 ;;  y0              2   29[COMRAM] int 
  6546 ;;  r               2   31[COMRAM] int 
  6547 ;;  color           2   33[COMRAM] unsigned int 
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  y               2   45[COMRAM] int 
  6550 ;;  x               2   43[COMRAM] int 
  6551 ;;  f               2   41[COMRAM] int 
  6552 ;;  ddF_y           2   39[COMRAM] int 
  6553 ;;  ddF_x           2   37[COMRAM] int 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, status,2, status,0, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6563 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;Total ram usage:       20 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    7
  6570 ;; This function calls:
  6571 ;;		_drawPixel
  6572 ;; This function is called by:
  6573 ;;		_Initialize_Screen
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text24
  6578  000BAE                     __ptext24:
  6579                           	opt stack 0
  6580  000BAE                     _drawCircle:
  6581                           	opt stack 22
  6582                           
  6583                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6584                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6585                           
  6586                           ;incstack = 0
  6587  000BAE  C020  F024         	movff	drawCircle@r,??_drawCircle
  6588  000BB2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6589  000BB6  1E24               	comf	??_drawCircle,f,c
  6590  000BB8  1E25               	comf	??_drawCircle+1,f,c
  6591  000BBA  4A24               	infsnz	??_drawCircle,f,c
  6592  000BBC  2A25               	incf	??_drawCircle+1,f,c
  6593  000BBE  0E01               	movlw	1
  6594  000BC0  2424               	addwf	??_drawCircle,w,c
  6595  000BC2  6E2A               	movwf	drawCircle@f,c
  6596  000BC4  0E00               	movlw	0
  6597  000BC6  2025               	addwfc	??_drawCircle+1,w,c
  6598  000BC8  6E2B               	movwf	drawCircle@f+1,c
  6599  000BCA  0E00               	movlw	0
  6600  000BCC  6E27               	movwf	drawCircle@ddF_x+1,c
  6601  000BCE  0E01               	movlw	1
  6602  000BD0  6E26               	movwf	drawCircle@ddF_x,c
  6603  000BD2  C020  F024         	movff	drawCircle@r,??_drawCircle
  6604  000BD6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6605  000BDA  90D8               	bcf	status,0,c
  6606  000BDC  3624               	rlcf	??_drawCircle,f,c
  6607  000BDE  3625               	rlcf	??_drawCircle+1,f,c
  6608  000BE0  1E24               	comf	??_drawCircle,f,c
  6609  000BE2  1E25               	comf	??_drawCircle+1,f,c
  6610  000BE4  4A24               	infsnz	??_drawCircle,f,c
  6611  000BE6  2A25               	incf	??_drawCircle+1,f,c
  6612  000BE8  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6613  000BEC  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6614  000BF0  0E00               	movlw	0
  6615  000BF2  6E2D               	movwf	drawCircle@x+1,c
  6616  000BF4  0E00               	movlw	0
  6617  000BF6  6E2C               	movwf	drawCircle@x,c
  6618  000BF8  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6619  000BFC  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6620                           
  6621                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6622  000C00  501E               	movf	drawCircle@y0,w,c
  6623  000C02  2420               	addwf	drawCircle@r,w,c
  6624  000C04  6E18               	movwf	drawPixel@y,c
  6625  000C06  C022  F019         	movff	drawCircle@color,drawPixel@color
  6626  000C0A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6627  000C0E  501C               	movf	drawCircle@x0,w,c
  6628  000C10  EC48  F010         	call	_drawPixel
  6629                           
  6630                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6631  000C14  5020               	movf	drawCircle@r,w,c
  6632  000C16  0800               	sublw	0
  6633  000C18  241E               	addwf	drawCircle@y0,w,c
  6634  000C1A  6E18               	movwf	drawPixel@y,c
  6635  000C1C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6636  000C20  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6637  000C24  501C               	movf	drawCircle@x0,w,c
  6638  000C26  EC48  F010         	call	_drawPixel
  6639                           
  6640                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6641  000C2A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6642  000C2E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6643  000C32  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6644  000C36  501C               	movf	drawCircle@x0,w,c
  6645  000C38  2420               	addwf	drawCircle@r,w,c
  6646  000C3A  EC48  F010         	call	_drawPixel
  6647                           
  6648                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6649  000C3E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6650  000C42  C022  F019         	movff	drawCircle@color,drawPixel@color
  6651  000C46  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6652  000C4A  5020               	movf	drawCircle@r,w,c
  6653  000C4C  0800               	sublw	0
  6654  000C4E  241C               	addwf	drawCircle@x0,w,c
  6655  000C50  EC48  F010         	call	_drawPixel
  6656                           
  6657                           ;ST7735_TFT.c: 537: while (x < y) {
  6658  000C54  D078               	goto	l6215
  6659  000C56                     l6187:
  6660                           
  6661                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6662  000C56  BE2B               	btfsc	drawCircle@f+1,7,c
  6663  000C58  D00B               	goto	l682
  6664                           
  6665                           ;ST7735_TFT.c: 539: y--;
  6666  000C5A  062E               	decf	drawCircle@y,f,c
  6667  000C5C  A0D8               	btfss	status,0,c
  6668  000C5E  062F               	decf	drawCircle@y+1,f,c
  6669                           
  6670                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6671  000C60  0E02               	movlw	2
  6672  000C62  2628               	addwf	drawCircle@ddF_y,f,c
  6673  000C64  0E00               	movlw	0
  6674  000C66  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6675                           
  6676                           ;ST7735_TFT.c: 541: f += ddF_y;
  6677  000C68  5028               	movf	drawCircle@ddF_y,w,c
  6678  000C6A  262A               	addwf	drawCircle@f,f,c
  6679  000C6C  5029               	movf	drawCircle@ddF_y+1,w,c
  6680  000C6E  222B               	addwfc	drawCircle@f+1,f,c
  6681  000C70                     l682:
  6682                           
  6683                           ;ST7735_TFT.c: 542: }
  6684                           ;ST7735_TFT.c: 543: x++;
  6685  000C70  4A2C               	infsnz	drawCircle@x,f,c
  6686  000C72  2A2D               	incf	drawCircle@x+1,f,c
  6687                           
  6688                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6689  000C74  0E02               	movlw	2
  6690  000C76  2626               	addwf	drawCircle@ddF_x,f,c
  6691  000C78  0E00               	movlw	0
  6692  000C7A  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6693                           
  6694                           ;ST7735_TFT.c: 545: f += ddF_x;
  6695  000C7C  5026               	movf	drawCircle@ddF_x,w,c
  6696  000C7E  262A               	addwf	drawCircle@f,f,c
  6697  000C80  5027               	movf	drawCircle@ddF_x+1,w,c
  6698  000C82  222B               	addwfc	drawCircle@f+1,f,c
  6699                           
  6700                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6701  000C84  501E               	movf	drawCircle@y0,w,c
  6702  000C86  242E               	addwf	drawCircle@y,w,c
  6703  000C88  6E18               	movwf	drawPixel@y,c
  6704  000C8A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6705  000C8E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6706  000C92  501C               	movf	drawCircle@x0,w,c
  6707  000C94  242C               	addwf	drawCircle@x,w,c
  6708  000C96  EC48  F010         	call	_drawPixel
  6709                           
  6710                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6711  000C9A  501E               	movf	drawCircle@y0,w,c
  6712  000C9C  242E               	addwf	drawCircle@y,w,c
  6713  000C9E  6E18               	movwf	drawPixel@y,c
  6714  000CA0  C022  F019         	movff	drawCircle@color,drawPixel@color
  6715  000CA4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6716  000CA8  502C               	movf	drawCircle@x,w,c
  6717  000CAA  0800               	sublw	0
  6718  000CAC  241C               	addwf	drawCircle@x0,w,c
  6719  000CAE  EC48  F010         	call	_drawPixel
  6720                           
  6721                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6722  000CB2  502E               	movf	drawCircle@y,w,c
  6723  000CB4  0800               	sublw	0
  6724  000CB6  241E               	addwf	drawCircle@y0,w,c
  6725  000CB8  6E18               	movwf	drawPixel@y,c
  6726  000CBA  C022  F019         	movff	drawCircle@color,drawPixel@color
  6727  000CBE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6728  000CC2  501C               	movf	drawCircle@x0,w,c
  6729  000CC4  242C               	addwf	drawCircle@x,w,c
  6730  000CC6  EC48  F010         	call	_drawPixel
  6731                           
  6732                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6733  000CCA  502E               	movf	drawCircle@y,w,c
  6734  000CCC  0800               	sublw	0
  6735  000CCE  241E               	addwf	drawCircle@y0,w,c
  6736  000CD0  6E18               	movwf	drawPixel@y,c
  6737  000CD2  C022  F019         	movff	drawCircle@color,drawPixel@color
  6738  000CD6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6739  000CDA  502C               	movf	drawCircle@x,w,c
  6740  000CDC  0800               	sublw	0
  6741  000CDE  241C               	addwf	drawCircle@x0,w,c
  6742  000CE0  EC48  F010         	call	_drawPixel
  6743                           
  6744                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6745  000CE4  501E               	movf	drawCircle@y0,w,c
  6746  000CE6  242C               	addwf	drawCircle@x,w,c
  6747  000CE8  6E18               	movwf	drawPixel@y,c
  6748  000CEA  C022  F019         	movff	drawCircle@color,drawPixel@color
  6749  000CEE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6750  000CF2  501C               	movf	drawCircle@x0,w,c
  6751  000CF4  242E               	addwf	drawCircle@y,w,c
  6752  000CF6  EC48  F010         	call	_drawPixel
  6753                           
  6754                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6755  000CFA  501E               	movf	drawCircle@y0,w,c
  6756  000CFC  242C               	addwf	drawCircle@x,w,c
  6757  000CFE  6E18               	movwf	drawPixel@y,c
  6758  000D00  C022  F019         	movff	drawCircle@color,drawPixel@color
  6759  000D04  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6760  000D08  502E               	movf	drawCircle@y,w,c
  6761  000D0A  0800               	sublw	0
  6762  000D0C  241C               	addwf	drawCircle@x0,w,c
  6763  000D0E  EC48  F010         	call	_drawPixel
  6764                           
  6765                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6766  000D12  502C               	movf	drawCircle@x,w,c
  6767  000D14  0800               	sublw	0
  6768  000D16  241E               	addwf	drawCircle@y0,w,c
  6769  000D18  6E18               	movwf	drawPixel@y,c
  6770  000D1A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6771  000D1E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6772  000D22  501C               	movf	drawCircle@x0,w,c
  6773  000D24  242E               	addwf	drawCircle@y,w,c
  6774  000D26  EC48  F010         	call	_drawPixel
  6775                           
  6776                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6777  000D2A  502C               	movf	drawCircle@x,w,c
  6778  000D2C  0800               	sublw	0
  6779  000D2E  241E               	addwf	drawCircle@y0,w,c
  6780  000D30  6E18               	movwf	drawPixel@y,c
  6781  000D32  C022  F019         	movff	drawCircle@color,drawPixel@color
  6782  000D36  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6783  000D3A  502E               	movf	drawCircle@y,w,c
  6784  000D3C  0800               	sublw	0
  6785  000D3E  241C               	addwf	drawCircle@x0,w,c
  6786  000D40  EC48  F010         	call	_drawPixel
  6787  000D44  D000               	goto	l6215
  6788  000D46                     l6215:
  6789  000D46  502E               	movf	drawCircle@y,w,c
  6790  000D48  5C2C               	subwf	drawCircle@x,w,c
  6791  000D4A  502D               	movf	drawCircle@x+1,w,c
  6792  000D4C  0A80               	xorlw	128
  6793  000D4E  6E24               	movwf	??_drawCircle& (0+255),c
  6794  000D50  502F               	movf	drawCircle@y+1,w,c
  6795  000D52  0A80               	xorlw	128
  6796  000D54  5824               	subwfb	??_drawCircle& (0+255),w,c
  6797  000D56  A0D8               	btfss	status,0,c
  6798  000D58  D77E               	goto	l6187
  6799  000D5A  0012               	return		;funcret
  6800  000D5C                     __end_of_drawCircle:
  6801                           	opt stack 0
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon	equ	0xFF2
  6809                           intcon2	equ	0xFF1
  6810                           postinc0	equ	0xFEE
  6811                           wreg	equ	0xFE8
  6812                           postdec1	equ	0xFE5
  6813                           plusw1	equ	0xFE3
  6814                           fsr1l	equ	0xFE1
  6815                           indf2	equ	0xFDF
  6816                           postinc2	equ	0xFDE
  6817                           postdec2	equ	0xFDD
  6818                           plusw2	equ	0xFDB
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function _drawPixel *****************
  6824 ;; Defined at:
  6825 ;;		line 408 in file "ST7735_TFT.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  x               1    wreg     unsigned char 
  6828 ;;  y               1   23[COMRAM] unsigned char 
  6829 ;;  color           2   24[COMRAM] unsigned int 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  x               1   26[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;		None               void
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6841 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;Total ram usage:        4 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    6
  6848 ;; This function calls:
  6849 ;;		_setAddrWindow
  6850 ;;		_write_data
  6851 ;; This function is called by:
  6852 ;;		_drawChar
  6853 ;;		_drawCircle
  6854 ;;		_drawCircleHelper
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	text25
  6859  002090                     __ptext25:
  6860                           	opt stack 0
  6861  002090                     _drawPixel:
  6862                           	opt stack 21
  6863                           
  6864                           ;incstack = 0
  6865                           ;drawPixel@x stored from wreg
  6866  002090  6E1B               	movwf	drawPixel@x,c
  6867                           
  6868                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  6869  002092  0E80               	movlw	128
  6870  002094  601B               	cpfslt	drawPixel@x,c
  6871  002096  D013               	goto	l612
  6872  002098  0E9F               	movlw	159
  6873  00209A  6418               	cpfsgt	drawPixel@y,c
  6874  00209C  D001               	goto	l5381
  6875                           
  6876                           ;ST7735_TFT.c: 411: return;
  6877  00209E  D00F               	goto	l612
  6878  0020A0                     l5381:
  6879                           
  6880                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  6881  0020A0  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6882  0020A4  281B               	incf	drawPixel@x,w,c
  6883  0020A6  6E15               	movwf	setAddrWindow@x1,c
  6884  0020A8  2818               	incf	drawPixel@y,w,c
  6885  0020AA  6E16               	movwf	setAddrWindow@y1,c
  6886  0020AC  501B               	movf	drawPixel@x,w,c
  6887  0020AE  ECB7  F00E         	call	_setAddrWindow
  6888                           
  6889                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  6890  0020B2  501A               	movf	drawPixel@color+1,w,c
  6891  0020B4  ECB7  F011         	call	_write_data
  6892                           
  6893                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  6894  0020B8  5019               	movf	drawPixel@color,w,c
  6895  0020BA  ECB7  F011         	call	_write_data
  6896  0020BE                     l612:
  6897  0020BE  0012               	return		;funcret
  6898  0020C0                     __end_of_drawPixel:
  6899                           	opt stack 0
  6900                           tblptru	equ	0xFF8
  6901                           tblptrh	equ	0xFF7
  6902                           tblptrl	equ	0xFF6
  6903                           tablat	equ	0xFF5
  6904                           prodh	equ	0xFF4
  6905                           prodl	equ	0xFF3
  6906                           intcon	equ	0xFF2
  6907                           intcon2	equ	0xFF1
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           postdec1	equ	0xFE5
  6911                           plusw1	equ	0xFE3
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           plusw2	equ	0xFDB
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _setAddrWindow *****************
  6922 ;; Defined at:
  6923 ;;		line 393 in file "ST7735_TFT.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  x0              1    wreg     unsigned char 
  6926 ;;  y0              1   19[COMRAM] unsigned char 
  6927 ;;  x1              1   20[COMRAM] unsigned char 
  6928 ;;  y1              1   21[COMRAM] unsigned char 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  x0              1   22[COMRAM] unsigned char 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;		None               void
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6940 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;Total ram usage:        4 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    5
  6947 ;; This function calls:
  6948 ;;		_write_command
  6949 ;;		_write_data
  6950 ;; This function is called by:
  6951 ;;		_drawPixel
  6952 ;;		_drawFastVLine
  6953 ;;		_fillRectangle
  6954 ;;		_drawFastHLine
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text26
  6959  001D6E                     __ptext26:
  6960                           	opt stack 0
  6961  001D6E                     _setAddrWindow:
  6962                           	opt stack 20
  6963                           
  6964                           ;incstack = 0
  6965                           ;setAddrWindow@x0 stored from wreg
  6966  001D6E  6E17               	movwf	setAddrWindow@x0,c
  6967                           
  6968                           ;ST7735_TFT.c: 395: write_command(0x2A);
  6969  001D70  0E2A               	movlw	42
  6970  001D72  ECBF  F011         	call	_write_command
  6971                           
  6972                           ;ST7735_TFT.c: 396: write_data(0);
  6973  001D76  0E00               	movlw	0
  6974  001D78  ECB7  F011         	call	_write_data
  6975                           
  6976                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  6977  001D7C  5017               	movf	setAddrWindow@x0,w,c
  6978  001D7E  2459               	addwf	_colstart,w,c
  6979  001D80  ECB7  F011         	call	_write_data
  6980                           
  6981                           ;ST7735_TFT.c: 398: write_data(0);
  6982  001D84  0E00               	movlw	0
  6983  001D86  ECB7  F011         	call	_write_data
  6984                           
  6985                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  6986  001D8A  5015               	movf	setAddrWindow@x1,w,c
  6987  001D8C  2459               	addwf	_colstart,w,c
  6988  001D8E  ECB7  F011         	call	_write_data
  6989                           
  6990                           ;ST7735_TFT.c: 400: write_command(0x2B);
  6991  001D92  0E2B               	movlw	43
  6992  001D94  ECBF  F011         	call	_write_command
  6993                           
  6994                           ;ST7735_TFT.c: 401: write_data(0);
  6995  001D98  0E00               	movlw	0
  6996  001D9A  ECB7  F011         	call	_write_data
  6997                           
  6998                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  6999  001D9E  5014               	movf	setAddrWindow@y0,w,c
  7000  001DA0  2461               	addwf	_rowstart,w,c
  7001  001DA2  ECB7  F011         	call	_write_data
  7002                           
  7003                           ;ST7735_TFT.c: 403: write_data(0);
  7004  001DA6  0E00               	movlw	0
  7005  001DA8  ECB7  F011         	call	_write_data
  7006                           
  7007                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  7008  001DAC  5016               	movf	setAddrWindow@y1,w,c
  7009  001DAE  2461               	addwf	_rowstart,w,c
  7010  001DB0  ECB7  F011         	call	_write_data
  7011                           
  7012                           ;ST7735_TFT.c: 405: write_command(0x2C);
  7013  001DB4  0E2C               	movlw	44
  7014  001DB6  ECBF  F011         	call	_write_command
  7015  001DBA  0012               	return		;funcret
  7016  001DBC                     __end_of_setAddrWindow:
  7017                           	opt stack 0
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           intcon	equ	0xFF2
  7025                           intcon2	equ	0xFF1
  7026                           postinc0	equ	0xFEE
  7027                           wreg	equ	0xFE8
  7028                           postdec1	equ	0xFE5
  7029                           plusw1	equ	0xFE3
  7030                           fsr1l	equ	0xFE1
  7031                           indf2	equ	0xFDF
  7032                           postinc2	equ	0xFDE
  7033                           postdec2	equ	0xFDD
  7034                           plusw2	equ	0xFDB
  7035                           fsr2h	equ	0xFDA
  7036                           fsr2l	equ	0xFD9
  7037                           status	equ	0xFD8
  7038                           
  7039 ;; *************** function _TFT_GreenTab_Initialize *****************
  7040 ;; Defined at:
  7041 ;;		line 645 in file "ST7735_TFT.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;		None
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;		None
  7046 ;; Return value:  Size  Location     Type
  7047 ;;		None               void
  7048 ;; Registers used:
  7049 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7050 ;; Tracked objects:
  7051 ;;		On entry : 0/0
  7052 ;;		On exit  : 0/0
  7053 ;;		Unchanged: 0/0
  7054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;Total ram usage:        0 bytes
  7060 ;; Hardware stack levels used:    1
  7061 ;; Hardware stack levels required when called:    6
  7062 ;; This function calls:
  7063 ;;		_Rcmd1
  7064 ;;		_Rcmd2red
  7065 ;;		_Rcmd3
  7066 ;;		_write_command
  7067 ;;		_write_data
  7068 ;; This function is called by:
  7069 ;;		_Initialize_Screen
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text27
  7074  0020F0                     __ptext27:
  7075                           	opt stack 0
  7076  0020F0                     _TFT_GreenTab_Initialize:
  7077                           	opt stack 23
  7078                           
  7079                           ;ST7735_TFT.c: 647: PORTBbits.RB6 = 1;
  7080                           
  7081                           ;incstack = 0
  7082  0020F0  8C81               	bsf	3969,6,c	;volatile
  7083                           
  7084                           ;ST7735_TFT.c: 648: PORTBbits.RB5 = 0;
  7085  0020F2  9A81               	bcf	3969,5,c	;volatile
  7086                           
  7087                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7088  0020F4  0E80               	movlw	128
  7089  0020F6  6EC7               	movwf	4039,c	;volatile
  7090                           
  7091                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7092  0020F8  0E30               	movlw	48
  7093  0020FA  6EC6               	movwf	4038,c	;volatile
  7094                           
  7095                           ;ST7735_TFT.c: 654: Rcmd1();
  7096  0020FC  EC13  F008         	call	_Rcmd1	;wreg free
  7097                           
  7098                           ;ST7735_TFT.c: 655: Rcmd2red();
  7099  002100  ECD7  F00F         	call	_Rcmd2red	;wreg free
  7100                           
  7101                           ;ST7735_TFT.c: 656: Rcmd3();
  7102  002104  EC9C  F009         	call	_Rcmd3	;wreg free
  7103                           
  7104                           ;ST7735_TFT.c: 657: write_command(0x36);
  7105  002108  0E36               	movlw	54
  7106  00210A  ECBF  F011         	call	_write_command
  7107                           
  7108                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7109  00210E  0EC0               	movlw	192
  7110  002110  ECB7  F011         	call	_write_data
  7111                           
  7112                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7113  002114  0E01               	movlw	1
  7114  002116  6E53               	movwf	__tft_type,c
  7115  002118  0012               	return		;funcret
  7116  00211A                     __end_of_TFT_GreenTab_Initialize:
  7117                           	opt stack 0
  7118                           tblptru	equ	0xFF8
  7119                           tblptrh	equ	0xFF7
  7120                           tblptrl	equ	0xFF6
  7121                           tablat	equ	0xFF5
  7122                           prodh	equ	0xFF4
  7123                           prodl	equ	0xFF3
  7124                           intcon	equ	0xFF2
  7125                           intcon2	equ	0xFF1
  7126                           postinc0	equ	0xFEE
  7127                           wreg	equ	0xFE8
  7128                           postdec1	equ	0xFE5
  7129                           plusw1	equ	0xFE3
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           plusw2	equ	0xFDB
  7135                           fsr2h	equ	0xFDA
  7136                           fsr2l	equ	0xFD9
  7137                           status	equ	0xFD8
  7138                           
  7139 ;; *************** function _Rcmd3 *****************
  7140 ;; Defined at:
  7141 ;;		line 339 in file "ST7735_TFT.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;		None
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;		None               void
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;Total ram usage:        0 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    5
  7162 ;; This function calls:
  7163 ;;		_delay_ms
  7164 ;;		_write_command
  7165 ;;		_write_data
  7166 ;; This function is called by:
  7167 ;;		_TFT_GreenTab_Initialize
  7168 ;;		_TFT_BlackTab_Initialize
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text28
  7173  001338                     __ptext28:
  7174                           	opt stack 0
  7175  001338                     _Rcmd3:
  7176                           	opt stack 23
  7177                           
  7178                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7179                           
  7180                           ;incstack = 0
  7181  001338  0EE0               	movlw	224
  7182  00133A  ECBF  F011         	call	_write_command
  7183                           
  7184                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7185  00133E  0E02               	movlw	2
  7186  001340  ECB7  F011         	call	_write_data
  7187  001344  0E1C               	movlw	28
  7188  001346  ECB7  F011         	call	_write_data
  7189  00134A  0E07               	movlw	7
  7190  00134C  ECB7  F011         	call	_write_data
  7191  001350  0E12               	movlw	18
  7192  001352  ECB7  F011         	call	_write_data
  7193                           
  7194                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7195  001356  0E37               	movlw	55
  7196  001358  ECB7  F011         	call	_write_data
  7197  00135C  0E32               	movlw	50
  7198  00135E  ECB7  F011         	call	_write_data
  7199  001362  0E29               	movlw	41
  7200  001364  ECB7  F011         	call	_write_data
  7201  001368  0E2D               	movlw	45
  7202  00136A  ECB7  F011         	call	_write_data
  7203                           
  7204                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7205  00136E  0E29               	movlw	41
  7206  001370  ECB7  F011         	call	_write_data
  7207  001374  0E25               	movlw	37
  7208  001376  ECB7  F011         	call	_write_data
  7209  00137A  0E2B               	movlw	43
  7210  00137C  ECB7  F011         	call	_write_data
  7211  001380  0E39               	movlw	57
  7212  001382  ECB7  F011         	call	_write_data
  7213                           
  7214                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7215  001386  0E00               	movlw	0
  7216  001388  ECB7  F011         	call	_write_data
  7217  00138C  0E01               	movlw	1
  7218  00138E  ECB7  F011         	call	_write_data
  7219  001392  0E03               	movlw	3
  7220  001394  ECB7  F011         	call	_write_data
  7221  001398  0E10               	movlw	16
  7222  00139A  ECB7  F011         	call	_write_data
  7223                           
  7224                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7225  00139E  0EE1               	movlw	225
  7226  0013A0  ECBF  F011         	call	_write_command
  7227                           
  7228                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7229  0013A4  0E03               	movlw	3
  7230  0013A6  ECB7  F011         	call	_write_data
  7231  0013AA  0E1D               	movlw	29
  7232  0013AC  ECB7  F011         	call	_write_data
  7233  0013B0  0E07               	movlw	7
  7234  0013B2  ECB7  F011         	call	_write_data
  7235  0013B6  0E06               	movlw	6
  7236  0013B8  ECB7  F011         	call	_write_data
  7237                           
  7238                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7239  0013BC  0E2E               	movlw	46
  7240  0013BE  ECB7  F011         	call	_write_data
  7241  0013C2  0E2C               	movlw	44
  7242  0013C4  ECB7  F011         	call	_write_data
  7243  0013C8  0E29               	movlw	41
  7244  0013CA  ECB7  F011         	call	_write_data
  7245  0013CE  0E2D               	movlw	45
  7246  0013D0  ECB7  F011         	call	_write_data
  7247                           
  7248                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7249  0013D4  0E2E               	movlw	46
  7250  0013D6  ECB7  F011         	call	_write_data
  7251  0013DA  0E2E               	movlw	46
  7252  0013DC  ECB7  F011         	call	_write_data
  7253  0013E0  0E37               	movlw	55
  7254  0013E2  ECB7  F011         	call	_write_data
  7255  0013E6  0E3F               	movlw	63
  7256  0013E8  ECB7  F011         	call	_write_data
  7257                           
  7258                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7259  0013EC  0E00               	movlw	0
  7260  0013EE  ECB7  F011         	call	_write_data
  7261  0013F2  0E00               	movlw	0
  7262  0013F4  ECB7  F011         	call	_write_data
  7263  0013F8  0E02               	movlw	2
  7264  0013FA  ECB7  F011         	call	_write_data
  7265  0013FE  0E10               	movlw	16
  7266  001400  ECB7  F011         	call	_write_data
  7267                           
  7268                           ;ST7735_TFT.c: 351: write_command(0x13);
  7269  001404  0E13               	movlw	19
  7270  001406  ECBF  F011         	call	_write_command
  7271                           
  7272                           ;ST7735_TFT.c: 352: delay_ms(10);
  7273  00140A  0E00               	movlw	0
  7274  00140C  6E18               	movwf	delay_ms@ms+1,c
  7275  00140E  0E0A               	movlw	10
  7276  001410  6E17               	movwf	delay_ms@ms,c
  7277  001412  EC8E  F00E         	call	_delay_ms	;wreg free
  7278                           
  7279                           ;ST7735_TFT.c: 353: write_command(0x29);
  7280  001416  0E29               	movlw	41
  7281  001418  ECBF  F011         	call	_write_command
  7282                           
  7283                           ;ST7735_TFT.c: 354: delay_ms(100);
  7284  00141C  0E00               	movlw	0
  7285  00141E  6E18               	movwf	delay_ms@ms+1,c
  7286  001420  0E64               	movlw	100
  7287  001422  6E17               	movwf	delay_ms@ms,c
  7288  001424  EC8E  F00E         	call	_delay_ms	;wreg free
  7289  001428  0012               	return		;funcret
  7290  00142A                     __end_of_Rcmd3:
  7291                           	opt stack 0
  7292                           tblptru	equ	0xFF8
  7293                           tblptrh	equ	0xFF7
  7294                           tblptrl	equ	0xFF6
  7295                           tablat	equ	0xFF5
  7296                           prodh	equ	0xFF4
  7297                           prodl	equ	0xFF3
  7298                           intcon	equ	0xFF2
  7299                           intcon2	equ	0xFF1
  7300                           postinc0	equ	0xFEE
  7301                           wreg	equ	0xFE8
  7302                           postdec1	equ	0xFE5
  7303                           plusw1	equ	0xFE3
  7304                           fsr1l	equ	0xFE1
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           plusw2	equ	0xFDB
  7309                           fsr2h	equ	0xFDA
  7310                           fsr2l	equ	0xFD9
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function _Rcmd2red *****************
  7314 ;; Defined at:
  7315 ;;		line 329 in file "ST7735_TFT.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;		None
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;		None               void
  7322 ;; Registers used:
  7323 ;;		wreg, status,2, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;Total ram usage:        0 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    5
  7336 ;; This function calls:
  7337 ;;		_write_command
  7338 ;;		_write_data
  7339 ;; This function is called by:
  7340 ;;		_TFT_GreenTab_Initialize
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text29
  7345  001FAE                     __ptext29:
  7346                           	opt stack 0
  7347  001FAE                     _Rcmd2red:
  7348                           	opt stack 23
  7349                           
  7350                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7351                           
  7352                           ;incstack = 0
  7353  001FAE  0E2A               	movlw	42
  7354  001FB0  ECBF  F011         	call	_write_command
  7355                           
  7356                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7357  001FB4  0E00               	movlw	0
  7358  001FB6  ECB7  F011         	call	_write_data
  7359  001FBA  0E00               	movlw	0
  7360  001FBC  ECB7  F011         	call	_write_data
  7361                           
  7362                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7363  001FC0  0E00               	movlw	0
  7364  001FC2  ECB7  F011         	call	_write_data
  7365  001FC6  0E7F               	movlw	127
  7366  001FC8  ECB7  F011         	call	_write_data
  7367                           
  7368                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7369  001FCC  0E2B               	movlw	43
  7370  001FCE  ECBF  F011         	call	_write_command
  7371                           
  7372                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7373  001FD2  0E00               	movlw	0
  7374  001FD4  ECB7  F011         	call	_write_data
  7375  001FD8  0E00               	movlw	0
  7376  001FDA  ECB7  F011         	call	_write_data
  7377                           
  7378                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7379  001FDE  0E00               	movlw	0
  7380  001FE0  ECB7  F011         	call	_write_data
  7381  001FE4  0E9F               	movlw	159
  7382  001FE6  ECB7  F011         	call	_write_data
  7383  001FEA  0012               	return		;funcret
  7384  001FEC                     __end_of_Rcmd2red:
  7385                           	opt stack 0
  7386                           tblptru	equ	0xFF8
  7387                           tblptrh	equ	0xFF7
  7388                           tblptrl	equ	0xFF6
  7389                           tablat	equ	0xFF5
  7390                           prodh	equ	0xFF4
  7391                           prodl	equ	0xFF3
  7392                           intcon	equ	0xFF2
  7393                           intcon2	equ	0xFF1
  7394                           postinc0	equ	0xFEE
  7395                           wreg	equ	0xFE8
  7396                           postdec1	equ	0xFE5
  7397                           plusw1	equ	0xFE3
  7398                           fsr1l	equ	0xFE1
  7399                           indf2	equ	0xFDF
  7400                           postinc2	equ	0xFDE
  7401                           postdec2	equ	0xFDD
  7402                           plusw2	equ	0xFDB
  7403                           fsr2h	equ	0xFDA
  7404                           fsr2l	equ	0xFD9
  7405                           status	equ	0xFD8
  7406                           
  7407 ;; *************** function _Rcmd1 *****************
  7408 ;; Defined at:
  7409 ;;		line 282 in file "ST7735_TFT.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;		None
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;		None
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7427 ;;Total ram usage:        0 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    5
  7430 ;; This function calls:
  7431 ;;		_delay_ms
  7432 ;;		_write_command
  7433 ;;		_write_data
  7434 ;; This function is called by:
  7435 ;;		_TFT_GreenTab_Initialize
  7436 ;;		_TFT_BlackTab_Initialize
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text30
  7441  001026                     __ptext30:
  7442                           	opt stack 0
  7443  001026                     _Rcmd1:
  7444                           	opt stack 23
  7445                           
  7446                           ;ST7735_TFT.c: 284: write_command(0x01);
  7447                           
  7448                           ;incstack = 0
  7449  001026  0E01               	movlw	1
  7450  001028  ECBF  F011         	call	_write_command
  7451                           
  7452                           ;ST7735_TFT.c: 285: delay_ms(150);
  7453  00102C  0E00               	movlw	0
  7454  00102E  6E18               	movwf	delay_ms@ms+1,c
  7455  001030  0E96               	movlw	150
  7456  001032  6E17               	movwf	delay_ms@ms,c
  7457  001034  EC8E  F00E         	call	_delay_ms	;wreg free
  7458                           
  7459                           ;ST7735_TFT.c: 286: write_command(0x11);
  7460  001038  0E11               	movlw	17
  7461  00103A  ECBF  F011         	call	_write_command
  7462                           
  7463                           ;ST7735_TFT.c: 287: delay_ms(500);
  7464  00103E  0E01               	movlw	1
  7465  001040  6E18               	movwf	delay_ms@ms+1,c
  7466  001042  0EF4               	movlw	244
  7467  001044  6E17               	movwf	delay_ms@ms,c
  7468  001046  EC8E  F00E         	call	_delay_ms	;wreg free
  7469                           
  7470                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7471  00104A  0EB1               	movlw	177
  7472  00104C  ECBF  F011         	call	_write_command
  7473                           
  7474                           ;ST7735_TFT.c: 289: write_data(0x01);
  7475  001050  0E01               	movlw	1
  7476  001052  ECB7  F011         	call	_write_data
  7477                           
  7478                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7479  001056  0E2C               	movlw	44
  7480  001058  ECB7  F011         	call	_write_data
  7481                           
  7482                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7483  00105C  0E2D               	movlw	45
  7484  00105E  ECB7  F011         	call	_write_data
  7485                           
  7486                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7487  001062  0EB2               	movlw	178
  7488  001064  ECBF  F011         	call	_write_command
  7489                           
  7490                           ;ST7735_TFT.c: 293: write_data(0x01);
  7491  001068  0E01               	movlw	1
  7492  00106A  ECB7  F011         	call	_write_data
  7493                           
  7494                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7495  00106E  0E2C               	movlw	44
  7496  001070  ECB7  F011         	call	_write_data
  7497                           
  7498                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7499  001074  0E2D               	movlw	45
  7500  001076  ECB7  F011         	call	_write_data
  7501                           
  7502                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7503  00107A  0EB3               	movlw	179
  7504  00107C  ECBF  F011         	call	_write_command
  7505                           
  7506                           ;ST7735_TFT.c: 297: write_data(0x01);
  7507  001080  0E01               	movlw	1
  7508  001082  ECB7  F011         	call	_write_data
  7509                           
  7510                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7511  001086  0E2C               	movlw	44
  7512  001088  ECB7  F011         	call	_write_data
  7513                           
  7514                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7515  00108C  0E2D               	movlw	45
  7516  00108E  ECB7  F011         	call	_write_data
  7517                           
  7518                           ;ST7735_TFT.c: 300: write_data(0x01);
  7519  001092  0E01               	movlw	1
  7520  001094  ECB7  F011         	call	_write_data
  7521                           
  7522                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7523  001098  0E2C               	movlw	44
  7524  00109A  ECB7  F011         	call	_write_data
  7525                           
  7526                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7527  00109E  0E2D               	movlw	45
  7528  0010A0  ECB7  F011         	call	_write_data
  7529                           
  7530                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7531  0010A4  0EB4               	movlw	180
  7532  0010A6  ECBF  F011         	call	_write_command
  7533                           
  7534                           ;ST7735_TFT.c: 304: write_data(0x07);
  7535  0010AA  0E07               	movlw	7
  7536  0010AC  ECB7  F011         	call	_write_data
  7537                           
  7538                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7539  0010B0  0EC0               	movlw	192
  7540  0010B2  ECBF  F011         	call	_write_command
  7541                           
  7542                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7543  0010B6  0EA2               	movlw	162
  7544  0010B8  ECB7  F011         	call	_write_data
  7545                           
  7546                           ;ST7735_TFT.c: 307: write_data(0x02);
  7547  0010BC  0E02               	movlw	2
  7548  0010BE  ECB7  F011         	call	_write_data
  7549                           
  7550                           ;ST7735_TFT.c: 308: write_data(0x84);
  7551  0010C2  0E84               	movlw	132
  7552  0010C4  ECB7  F011         	call	_write_data
  7553                           
  7554                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7555  0010C8  0EC1               	movlw	193
  7556  0010CA  ECBF  F011         	call	_write_command
  7557                           
  7558                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7559  0010CE  0EC5               	movlw	197
  7560  0010D0  ECB7  F011         	call	_write_data
  7561                           
  7562                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7563  0010D4  0EC2               	movlw	194
  7564  0010D6  ECBF  F011         	call	_write_command
  7565                           
  7566                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7567  0010DA  0E0A               	movlw	10
  7568  0010DC  ECB7  F011         	call	_write_data
  7569                           
  7570                           ;ST7735_TFT.c: 313: write_data(0x00);
  7571  0010E0  0E00               	movlw	0
  7572  0010E2  ECB7  F011         	call	_write_data
  7573                           
  7574                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7575  0010E6  0EC3               	movlw	195
  7576  0010E8  ECBF  F011         	call	_write_command
  7577                           
  7578                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7579  0010EC  0E8A               	movlw	138
  7580  0010EE  ECB7  F011         	call	_write_data
  7581                           
  7582                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7583  0010F2  0E2A               	movlw	42
  7584  0010F4  ECB7  F011         	call	_write_data
  7585                           
  7586                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7587  0010F8  0EC4               	movlw	196
  7588  0010FA  ECBF  F011         	call	_write_command
  7589                           
  7590                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7591  0010FE  0E8A               	movlw	138
  7592  001100  ECB7  F011         	call	_write_data
  7593                           
  7594                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7595  001104  0EEE               	movlw	238
  7596  001106  ECB7  F011         	call	_write_data
  7597                           
  7598                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7599  00110A  0EC5               	movlw	197
  7600  00110C  ECBF  F011         	call	_write_command
  7601                           
  7602                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7603  001110  0E0E               	movlw	14
  7604  001112  ECB7  F011         	call	_write_data
  7605                           
  7606                           ;ST7735_TFT.c: 322: write_command(0x20);
  7607  001116  0E20               	movlw	32
  7608  001118  ECBF  F011         	call	_write_command
  7609                           
  7610                           ;ST7735_TFT.c: 323: write_command(0x36);
  7611  00111C  0E36               	movlw	54
  7612  00111E  ECBF  F011         	call	_write_command
  7613                           
  7614                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7615  001122  0EC8               	movlw	200
  7616  001124  ECB7  F011         	call	_write_data
  7617                           
  7618                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7619  001128  0E3A               	movlw	58
  7620  00112A  ECBF  F011         	call	_write_command
  7621                           
  7622                           ;ST7735_TFT.c: 326: write_data(0x05);
  7623  00112E  0E05               	movlw	5
  7624  001130  ECB7  F011         	call	_write_data
  7625  001134  0012               	return		;funcret
  7626  001136                     __end_of_Rcmd1:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           tblptrh	equ	0xFF7
  7630                           tblptrl	equ	0xFF6
  7631                           tablat	equ	0xFF5
  7632                           prodh	equ	0xFF4
  7633                           prodl	equ	0xFF3
  7634                           intcon	equ	0xFF2
  7635                           intcon2	equ	0xFF1
  7636                           postinc0	equ	0xFEE
  7637                           wreg	equ	0xFE8
  7638                           postdec1	equ	0xFE5
  7639                           plusw1	equ	0xFE3
  7640                           fsr1l	equ	0xFE1
  7641                           indf2	equ	0xFDF
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           plusw2	equ	0xFDB
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function _write_data *****************
  7650 ;; Defined at:
  7651 ;;		line 210 in file "ST7735_TFT.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  data_           1    wreg     unsigned char 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  data_           1   18[COMRAM] unsigned char 
  7656 ;; Return value:  Size  Location     Type
  7657 ;;		None               void
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;Total ram usage:        1 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    4
  7672 ;; This function calls:
  7673 ;;		_spiwrite
  7674 ;; This function is called by:
  7675 ;;		_Rcmd1
  7676 ;;		_Rcmd2red
  7677 ;;		_Rcmd3
  7678 ;;		_setAddrWindow
  7679 ;;		_drawPixel
  7680 ;;		_TFT_GreenTab_Initialize
  7681 ;;		_Bcmd
  7682 ;;		_setScrollDefinition
  7683 ;;		_Rcmd2green
  7684 ;;		_VerticalScroll
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text31
  7689  00236E                     __ptext31:
  7690                           	opt stack 0
  7691  00236E                     _write_data:
  7692                           	opt stack 20
  7693                           
  7694                           ;incstack = 0
  7695                           ;write_data@data_ stored from wreg
  7696  00236E  6E13               	movwf	write_data@data_,c
  7697                           
  7698                           ;ST7735_TFT.c: 212: PORTBbits.RB6 = 0;
  7699  002370  9C81               	bcf	3969,6,c	;volatile
  7700                           
  7701                           ;ST7735_TFT.c: 213: PORTBbits.RB5 = 1;
  7702  002372  8A81               	bsf	3969,5,c	;volatile
  7703                           
  7704                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7705  002374  5013               	movf	write_data@data_,w,c
  7706  002376  EC6C  F011         	call	_spiwrite
  7707                           
  7708                           ;ST7735_TFT.c: 215: PORTBbits.RB6 = 1;
  7709  00237A  8C81               	bsf	3969,6,c	;volatile
  7710  00237C  0012               	return		;funcret
  7711  00237E                     __end_of_write_data:
  7712                           	opt stack 0
  7713                           tblptru	equ	0xFF8
  7714                           tblptrh	equ	0xFF7
  7715                           tblptrl	equ	0xFF6
  7716                           tablat	equ	0xFF5
  7717                           prodh	equ	0xFF4
  7718                           prodl	equ	0xFF3
  7719                           intcon	equ	0xFF2
  7720                           intcon2	equ	0xFF1
  7721                           postinc0	equ	0xFEE
  7722                           wreg	equ	0xFE8
  7723                           postdec1	equ	0xFE5
  7724                           plusw1	equ	0xFE3
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           plusw2	equ	0xFDB
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function _write_command *****************
  7735 ;; Defined at:
  7736 ;;		line 199 in file "ST7735_TFT.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  cmd_            1    wreg     unsigned char 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  cmd_            1   18[COMRAM] unsigned char 
  7741 ;; Return value:  Size  Location     Type
  7742 ;;		None               void
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;Total ram usage:        1 bytes
  7755 ;; Hardware stack levels used:    1
  7756 ;; Hardware stack levels required when called:    4
  7757 ;; This function calls:
  7758 ;;		_spiwrite
  7759 ;; This function is called by:
  7760 ;;		_Rcmd1
  7761 ;;		_Rcmd2red
  7762 ;;		_Rcmd3
  7763 ;;		_setAddrWindow
  7764 ;;		_TFT_GreenTab_Initialize
  7765 ;;		_Bcmd
  7766 ;;		_setScrollDefinition
  7767 ;;		_Rcmd2green
  7768 ;;		_VerticalScroll
  7769 ;; This function uses a non-reentrant model
  7770 ;;
  7771                           
  7772                           	psect	text32
  7773  00237E                     __ptext32:
  7774                           	opt stack 0
  7775  00237E                     _write_command:
  7776                           	opt stack 20
  7777                           
  7778                           ;incstack = 0
  7779                           ;write_command@cmd_ stored from wreg
  7780  00237E  6E13               	movwf	write_command@cmd_,c
  7781                           
  7782                           ;ST7735_TFT.c: 201: PORTBbits.RB6 = 0;
  7783  002380  9C81               	bcf	3969,6,c	;volatile
  7784                           
  7785                           ;ST7735_TFT.c: 203: PORTBbits.RB5 = 0;
  7786  002382  9A81               	bcf	3969,5,c	;volatile
  7787                           
  7788                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7789  002384  5013               	movf	write_command@cmd_,w,c
  7790  002386  EC6C  F011         	call	_spiwrite
  7791                           
  7792                           ;ST7735_TFT.c: 206: PORTBbits.RB6 = 1;
  7793  00238A  8C81               	bsf	3969,6,c	;volatile
  7794  00238C  0012               	return		;funcret
  7795  00238E                     __end_of_write_command:
  7796                           	opt stack 0
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           intcon	equ	0xFF2
  7804                           intcon2	equ	0xFF1
  7805                           postinc0	equ	0xFEE
  7806                           wreg	equ	0xFE8
  7807                           postdec1	equ	0xFE5
  7808                           plusw1	equ	0xFE3
  7809                           fsr1l	equ	0xFE1
  7810                           indf2	equ	0xFDF
  7811                           postinc2	equ	0xFDE
  7812                           postdec2	equ	0xFDD
  7813                           plusw2	equ	0xFDB
  7814                           fsr2h	equ	0xFDA
  7815                           fsr2l	equ	0xFD9
  7816                           status	equ	0xFD8
  7817                           
  7818 ;; *************** function _spiwrite *****************
  7819 ;; Defined at:
  7820 ;;		line 190 in file "ST7735_TFT.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  spidata         1    wreg     unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  spidata         1   17[COMRAM] unsigned char 
  7825 ;;  x               1   16[COMRAM] unsigned char 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;		None               void
  7828 ;; Registers used:
  7829 ;;		wreg
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;Total ram usage:        2 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:    3
  7842 ;; This function calls:
  7843 ;;		Nothing
  7844 ;; This function is called by:
  7845 ;;		_write_command
  7846 ;;		_write_data
  7847 ;;		_drawFastVLine
  7848 ;;		_fillRectangle
  7849 ;;		_drawFastHLine
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text33
  7854  0022D8                     __ptext33:
  7855                           	opt stack 0
  7856  0022D8                     _spiwrite:
  7857                           	opt stack 22
  7858                           
  7859                           ;incstack = 0
  7860                           ;spiwrite@spidata stored from wreg
  7861  0022D8  6E12               	movwf	spiwrite@spidata,c
  7862                           
  7863                           ;ST7735_TFT.c: 192: char x;
  7864                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  7865  0022DA  969E               	bcf	3998,3,c	;volatile
  7866                           
  7867                           ;ST7735_TFT.c: 194: x = SSPBUF;
  7868  0022DC  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7869                           
  7870                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  7871  0022E0  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7872                           
  7873                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  7874  0022E4  D000               	goto	l568
  7875  0022E6                     l568:
  7876  0022E6  A0C7               	btfss	4039,0,c	;volatile
  7877  0022E8  D7FE               	goto	l568
  7878  0022EA  0012               	return		;funcret
  7879  0022EC                     __end_of_spiwrite:
  7880                           	opt stack 0
  7881                           tblptru	equ	0xFF8
  7882                           tblptrh	equ	0xFF7
  7883                           tblptrl	equ	0xFF6
  7884                           tablat	equ	0xFF5
  7885                           prodh	equ	0xFF4
  7886                           prodl	equ	0xFF3
  7887                           intcon	equ	0xFF2
  7888                           intcon2	equ	0xFF1
  7889                           postinc0	equ	0xFEE
  7890                           wreg	equ	0xFE8
  7891                           postdec1	equ	0xFE5
  7892                           plusw1	equ	0xFE3
  7893                           fsr1l	equ	0xFE1
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           plusw2	equ	0xFDB
  7898                           fsr2h	equ	0xFDA
  7899                           fsr2l	equ	0xFD9
  7900                           status	equ	0xFD8
  7901                           
  7902 ;; *************** function _LCD_Reset *****************
  7903 ;; Defined at:
  7904 ;;		line 218 in file "ST7735_TFT.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;		None
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;		None
  7909 ;; Return value:  Size  Location     Type
  7910 ;;		None               void
  7911 ;; Registers used:
  7912 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;Total ram usage:        0 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    5
  7925 ;; This function calls:
  7926 ;;		_delay_ms
  7927 ;; This function is called by:
  7928 ;;		_Initialize_Screen
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           	psect	text34
  7933  002314                     __ptext34:
  7934                           	opt stack 0
  7935  002314                     _LCD_Reset:
  7936                           	opt stack 24
  7937                           
  7938                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 0;
  7939                           
  7940                           ;incstack = 0
  7941  002314  9282               	bcf	3970,1,c	;volatile
  7942                           
  7943                           ;ST7735_TFT.c: 221: delay_ms(100);
  7944  002316  0E00               	movlw	0
  7945  002318  6E18               	movwf	delay_ms@ms+1,c
  7946  00231A  0E64               	movlw	100
  7947  00231C  6E17               	movwf	delay_ms@ms,c
  7948  00231E  EC8E  F00E         	call	_delay_ms	;wreg free
  7949                           
  7950                           ;ST7735_TFT.c: 222: PORTCbits.RC1 = 1;
  7951  002322  8282               	bsf	3970,1,c	;volatile
  7952  002324  0012               	return		;funcret
  7953  002326                     __end_of_LCD_Reset:
  7954                           	opt stack 0
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           intcon	equ	0xFF2
  7962                           intcon2	equ	0xFF1
  7963                           postinc0	equ	0xFEE
  7964                           wreg	equ	0xFE8
  7965                           postdec1	equ	0xFE5
  7966                           plusw1	equ	0xFE3
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           plusw2	equ	0xFDB
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _delay_ms *****************
  7977 ;; Defined at:
  7978 ;;		line 65 in file "ST7735_TFT.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;  ms              2   22[COMRAM] int 
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;  count           2   26[COMRAM] int 
  7983 ;; Return value:  Size  Location     Type
  7984 ;;		None               void
  7985 ;; Registers used:
  7986 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;Total ram usage:        6 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    4
  7999 ;; This function calls:
  8000 ;;		___wmul
  8001 ;; This function is called by:
  8002 ;;		_LCD_Reset
  8003 ;;		_Rcmd1
  8004 ;;		_Rcmd3
  8005 ;;		_Bcmd
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text35
  8010  001D1C                     __ptext35:
  8011                           	opt stack 0
  8012  001D1C                     _delay_ms:
  8013                           	opt stack 23
  8014                           
  8015                           ;ST7735_TFT.c: 71: int count;
  8016                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  8017                           
  8018                           ;incstack = 0
  8019  001D1C  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  8020  001D20  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8021  001D24  0E00               	movlw	0
  8022  001D26  6E14               	movwf	___wmul@multiplicand+1,c
  8023  001D28  0E7D               	movlw	125
  8024  001D2A  6E13               	movwf	___wmul@multiplicand,c
  8025  001D2C  EC8D  F010         	call	___wmul	;wreg free
  8026  001D30  C011  F01B         	movff	?___wmul,delay_ms@count
  8027  001D34  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  8028                           
  8029                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  8030  001D38  C01B  F019         	movff	delay_ms@count,??_delay_ms
  8031  001D3C  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  8032  001D40  1E19               	comf	??_delay_ms,f,c
  8033  001D42  1E1A               	comf	??_delay_ms+1,f,c
  8034  001D44  4A19               	infsnz	??_delay_ms,f,c
  8035  001D46  2A1A               	incf	??_delay_ms+1,f,c
  8036  001D48  0EFF               	movlw	255
  8037  001D4A  2419               	addwf	??_delay_ms,w,c
  8038  001D4C  6E1B               	movwf	delay_ms@count,c
  8039  001D4E  0EFF               	movlw	255
  8040  001D50  201A               	addwfc	??_delay_ms+1,w,c
  8041  001D52  6E1C               	movwf	delay_ms@count+1,c
  8042                           
  8043                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  8044  001D54  0E03               	movlw	3
  8045  001D56  6ED5               	movwf	4053,c	;volatile
  8046                           
  8047                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  8048  001D58  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  8049                           
  8050                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  8051  001D5C  501C               	movf	delay_ms@count+1,w,c
  8052  001D5E  6ED7               	movwf	4055,c	;volatile
  8053                           
  8054                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  8055  001D60  94F2               	bcf	intcon,2,c	;volatile
  8056                           
  8057                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8058  001D62  8ED5               	bsf	4053,7,c	;volatile
  8059                           
  8060                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8061  001D64  D000               	goto	l558
  8062  001D66                     l558:
  8063  001D66  A4F2               	btfss	intcon,2,c	;volatile
  8064  001D68  D7FE               	goto	l558
  8065                           
  8066                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8067  001D6A  9ED5               	bcf	4053,7,c	;volatile
  8068  001D6C  0012               	return		;funcret
  8069  001D6E                     __end_of_delay_ms:
  8070                           	opt stack 0
  8071                           tblptru	equ	0xFF8
  8072                           tblptrh	equ	0xFF7
  8073                           tblptrl	equ	0xFF6
  8074                           tablat	equ	0xFF5
  8075                           prodh	equ	0xFF4
  8076                           prodl	equ	0xFF3
  8077                           intcon	equ	0xFF2
  8078                           intcon2	equ	0xFF1
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           postdec1	equ	0xFE5
  8082                           plusw1	equ	0xFE3
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           plusw2	equ	0xFDB
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function ___wmul *****************
  8093 ;; Defined at:
  8094 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  multiplier      2   16[COMRAM] unsigned int 
  8097 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  product         2   20[COMRAM] unsigned int 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  2   16[COMRAM] unsigned int 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0, prodl, prodh
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;Total ram usage:        6 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    3
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_get_RPM
  8120 ;;		_main
  8121 ;;		_delay_ms
  8122 ;;		_drawChar
  8123 ;;		_printf
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           	psect	text36
  8128  00211A                     __ptext36:
  8129                           	opt stack 0
  8130  00211A                     ___wmul:
  8131                           	opt stack 26
  8132                           
  8133                           ;incstack = 0
  8134  00211A  5011               	movf	___wmul@multiplier,w,c
  8135  00211C  0213               	mulwf	___wmul@multiplicand,c
  8136  00211E  CFF3 F015          	movff	prodl,___wmul@product
  8137  002122  CFF4 F016          	movff	prodh,___wmul@product+1
  8138  002126  5011               	movf	___wmul@multiplier,w,c
  8139  002128  0214               	mulwf	___wmul@multiplicand+1,c
  8140  00212A  50F3               	movf	prodl,w,c
  8141  00212C  2616               	addwf	___wmul@product+1,f,c
  8142  00212E  5012               	movf	___wmul@multiplier+1,w,c
  8143  002130  0213               	mulwf	___wmul@multiplicand,c
  8144  002132  50F3               	movf	prodl,w,c
  8145  002134  2616               	addwf	___wmul@product+1,f,c
  8146  002136  C015  F011         	movff	___wmul@product,?___wmul
  8147  00213A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8148  00213E  D000               	goto	l887
  8149  002140                     l887:
  8150  002140  0012               	return		;funcret
  8151  002142                     __end_of___wmul:
  8152                           	opt stack 0
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           intcon	equ	0xFF2
  8160                           intcon2	equ	0xFF1
  8161                           postinc0	equ	0xFEE
  8162                           wreg	equ	0xFE8
  8163                           postdec1	equ	0xFE5
  8164                           plusw1	equ	0xFE3
  8165                           fsr1l	equ	0xFE1
  8166                           indf2	equ	0xFDF
  8167                           postinc2	equ	0xFDE
  8168                           postdec2	equ	0xFDD
  8169                           plusw2	equ	0xFDB
  8170                           fsr2h	equ	0xFDA
  8171                           fsr2l	equ	0xFD9
  8172                           status	equ	0xFD8
  8173                           
  8174 ;; *************** function _Increase_Speed *****************
  8175 ;; Defined at:
  8176 ;;		line 39 in file "Fan_Support.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;		None
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;		None
  8181 ;; Return value:  Size  Location     Type
  8182 ;;		None               void
  8183 ;; Registers used:
  8184 ;;		wreg, status,2, status,0, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;Total ram usage:        0 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    7
  8197 ;; This function calls:
  8198 ;;		_Do_Beep
  8199 ;;		_do_update_pwm
  8200 ;; This function is called by:
  8201 ;;		_main
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           	psect	text37
  8206  002142                     __ptext37:
  8207                           	opt stack 0
  8208  002142                     _Increase_Speed:
  8209                           	opt stack 23
  8210                           
  8211                           ;Fan_Support.c: 41: if(duty_cycle == 100)
  8212                           
  8213                           ;incstack = 0
  8214  002142  0E64               	movlw	100
  8215  002144  185C               	xorwf	_duty_cycle,w,c
  8216  002146  A4D8               	btfss	status,2,c
  8217  002148  D008               	goto	l6315
  8218                           
  8219                           ;Fan_Support.c: 42: {
  8220                           ;Fan_Support.c: 43: Do_Beep();
  8221  00214A  EC80  F011         	call	_Do_Beep	;wreg free
  8222                           
  8223                           ;Fan_Support.c: 44: Do_Beep();
  8224  00214E  EC80  F011         	call	_Do_Beep	;wreg free
  8225                           
  8226                           ;Fan_Support.c: 45: do_update_pwm(duty_cycle);
  8227  002152  505C               	movf	_duty_cycle,w,c
  8228  002154  ECCA  F00B         	call	_do_update_pwm
  8229                           
  8230                           ;Fan_Support.c: 46: }
  8231  002158  D007               	goto	l49
  8232  00215A                     l6315:
  8233                           
  8234                           ;Fan_Support.c: 47: else
  8235                           ;Fan_Support.c: 48: {
  8236                           ;Fan_Support.c: 49: duty_cycle = duty_cycle + 5;
  8237  00215A  505C               	movf	_duty_cycle,w,c
  8238  00215C  0F05               	addlw	5
  8239  00215E  6E5C               	movwf	_duty_cycle,c
  8240                           
  8241                           ;Fan_Support.c: 51: do_update_pwm(duty_cycle);
  8242  002160  505C               	movf	_duty_cycle,w,c
  8243  002162  ECCA  F00B         	call	_do_update_pwm
  8244  002166  D000               	goto	l49
  8245  002168                     l49:
  8246  002168  0012               	return		;funcret
  8247  00216A                     __end_of_Increase_Speed:
  8248                           	opt stack 0
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodh	equ	0xFF4
  8254                           prodl	equ	0xFF3
  8255                           intcon	equ	0xFF2
  8256                           intcon2	equ	0xFF1
  8257                           postinc0	equ	0xFEE
  8258                           wreg	equ	0xFE8
  8259                           postdec1	equ	0xFE5
  8260                           plusw1	equ	0xFE3
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           plusw2	equ	0xFDB
  8266                           fsr2h	equ	0xFDA
  8267                           fsr2l	equ	0xFD9
  8268                           status	equ	0xFD8
  8269                           
  8270 ;; *************** function _Do_Init *****************
  8271 ;; Defined at:
  8272 ;;		line 126 in file "Lab12_ex.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;		None
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;		None               void
  8279 ;; Registers used:
  8280 ;;		wreg, status,2, status,0, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;Total ram usage:        0 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    7
  8293 ;; This function calls:
  8294 ;;		_DS1621_Init
  8295 ;;		_I2C_Init
  8296 ;;		_init_INTERRUPT
  8297 ;;		_init_UART
  8298 ;; This function is called by:
  8299 ;;		_main
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text38
  8304  001E08                     __ptext38:
  8305                           	opt stack 0
  8306  001E08                     _Do_Init:
  8307                           	opt stack 23
  8308                           
  8309                           ;Lab12_ex.c: 128: init_UART();
  8310                           
  8311                           ;incstack = 0
  8312  001E08  EC76  F011         	call	_init_UART	;wreg free
  8313                           
  8314                           ;Lab12_ex.c: 129: OSCCON=0x70;
  8315  001E0C  0E70               	movlw	112
  8316  001E0E  6ED3               	movwf	4051,c	;volatile
  8317                           
  8318                           ;Lab12_ex.c: 131: ADCON1=0x0F;
  8319  001E10  0E0F               	movlw	15
  8320  001E12  6EC1               	movwf	4033,c	;volatile
  8321                           
  8322                           ;Lab12_ex.c: 132: TRISA = 0x00;
  8323  001E14  0E00               	movlw	0
  8324  001E16  6E92               	movwf	3986,c	;volatile
  8325                           
  8326                           ;Lab12_ex.c: 133: TRISB = 0x01;
  8327  001E18  0E01               	movlw	1
  8328  001E1A  6E93               	movwf	3987,c	;volatile
  8329                           
  8330                           ;Lab12_ex.c: 134: TRISC = 0x01;
  8331  001E1C  0E01               	movlw	1
  8332  001E1E  6E94               	movwf	3988,c	;volatile
  8333                           
  8334                           ;Lab12_ex.c: 135: TRISD = 0x00;
  8335  001E20  0E00               	movlw	0
  8336  001E22  6E95               	movwf	3989,c	;volatile
  8337                           
  8338                           ;Lab12_ex.c: 136: TRISE = 0x00;
  8339  001E24  0E00               	movlw	0
  8340  001E26  6E96               	movwf	3990,c	;volatile
  8341                           
  8342                           ;Lab12_ex.c: 138: RBPU=0;
  8343  001E28  9EF1               	bcf	intcon2,7,c	;volatile
  8344                           
  8345                           ;Lab12_ex.c: 139: TMR3L = 0x00;
  8346  001E2A  0E00               	movlw	0
  8347  001E2C  6EB2               	movwf	4018,c	;volatile
  8348                           
  8349                           ;Lab12_ex.c: 140: T3CON = 0x03;
  8350  001E2E  0E03               	movlw	3
  8351  001E30  6EB1               	movwf	4017,c	;volatile
  8352                           
  8353                           ;Lab12_ex.c: 141: I2C_Init(100000);
  8354  001E32  0EA0               	movlw	160
  8355  001E34  6E11               	movwf	I2C_Init@c,c
  8356  001E36  0E86               	movlw	134
  8357  001E38  6E12               	movwf	I2C_Init@c+1,c
  8358  001E3A  0E01               	movlw	1
  8359  001E3C  6E13               	movwf	I2C_Init@c+2,c
  8360  001E3E  0E00               	movlw	0
  8361  001E40  6E14               	movwf	I2C_Init@c+3,c
  8362  001E42  ECDA  F011         	call	_I2C_Init	;wreg free
  8363                           
  8364                           ;Lab12_ex.c: 143: DS1621_Init();
  8365  001E46  EC24  F011         	call	_DS1621_Init	;wreg free
  8366                           
  8367                           ;Lab12_ex.c: 144: init_INTERRUPT();
  8368  001E4A  EC4B  F011         	call	_init_INTERRUPT	;wreg free
  8369                           
  8370                           ;Lab12_ex.c: 145: FAN = 0;
  8371  001E4E  0E00               	movlw	0
  8372  001E50  6E50               	movwf	_FAN,c
  8373  001E52  0012               	return		;funcret
  8374  001E54                     __end_of_Do_Init:
  8375                           	opt stack 0
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodh	equ	0xFF4
  8381                           prodl	equ	0xFF3
  8382                           intcon	equ	0xFF2
  8383                           intcon2	equ	0xFF1
  8384                           postinc0	equ	0xFEE
  8385                           wreg	equ	0xFE8
  8386                           postdec1	equ	0xFE5
  8387                           plusw1	equ	0xFE3
  8388                           fsr1l	equ	0xFE1
  8389                           indf2	equ	0xFDF
  8390                           postinc2	equ	0xFDE
  8391                           postdec2	equ	0xFDD
  8392                           plusw2	equ	0xFDB
  8393                           fsr2h	equ	0xFDA
  8394                           fsr2l	equ	0xFD9
  8395                           status	equ	0xFD8
  8396                           
  8397 ;; *************** function _init_UART *****************
  8398 ;; Defined at:
  8399 ;;		line 120 in file "Lab12_ex.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;		None
  8404 ;; Return value:  Size  Location     Type
  8405 ;;		None               void
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;Total ram usage:        0 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    4
  8420 ;; This function calls:
  8421 ;;		_OpenUSART
  8422 ;; This function is called by:
  8423 ;;		_Do_Init
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text39
  8428  0022EC                     __ptext39:
  8429                           	opt stack 0
  8430  0022EC                     _init_UART:
  8431                           	opt stack 25
  8432                           
  8433                           ;Lab12_ex.c: 122: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111
      +                          111 & 0b11111111, 25);
  8434                           
  8435                           ;incstack = 0
  8436  0022EC  0E00               	movlw	0
  8437  0022EE  6E12               	movwf	OpenUSART@spbrg+1,c
  8438  0022F0  0E19               	movlw	25
  8439  0022F2  6E11               	movwf	OpenUSART@spbrg,c
  8440  0022F4  0E3C               	movlw	60
  8441  0022F6  EC73  F00D         	call	_OpenUSART
  8442                           
  8443                           ;Lab12_ex.c: 123: OSCCON = 0x70;
  8444  0022FA  0E70               	movlw	112
  8445  0022FC  6ED3               	movwf	4051,c	;volatile
  8446  0022FE  0012               	return		;funcret
  8447  002300                     __end_of_init_UART:
  8448                           	opt stack 0
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           intcon2	equ	0xFF1
  8457                           postinc0	equ	0xFEE
  8458                           wreg	equ	0xFE8
  8459                           postdec1	equ	0xFE5
  8460                           plusw1	equ	0xFE3
  8461                           fsr1l	equ	0xFE1
  8462                           indf2	equ	0xFDF
  8463                           postinc2	equ	0xFDE
  8464                           postdec2	equ	0xFDD
  8465                           plusw2	equ	0xFDB
  8466                           fsr2h	equ	0xFDA
  8467                           fsr2l	equ	0xFD9
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function _OpenUSART *****************
  8471 ;; Defined at:
  8472 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;  config          1    wreg     unsigned char 
  8475 ;;  spbrg           2   16[COMRAM] unsigned int 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;  config          1   18[COMRAM] unsigned char 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;		None               void
  8480 ;; Registers used:
  8481 ;;		wreg, status,2
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8487 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;Total ram usage:        3 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    3
  8494 ;; This function calls:
  8495 ;;		Nothing
  8496 ;; This function is called by:
  8497 ;;		_init_UART
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text40
  8502  001AE6                     __ptext40:
  8503                           	opt stack 0
  8504  001AE6                     _OpenUSART:
  8505                           	opt stack 25
  8506                           
  8507                           ;incstack = 0
  8508                           ;OpenUSART@config stored from wreg
  8509  001AE6  6E13               	movwf	OpenUSART@config,c
  8510  001AE8  0E00               	movlw	0
  8511  001AEA  6EAC               	movwf	4012,c	;volatile
  8512  001AEC  0E00               	movlw	0
  8513  001AEE  6EAB               	movwf	4011,c	;volatile
  8514  001AF0  A013               	btfss	OpenUSART@config,0,c
  8515  001AF2  D002               	goto	l5773
  8516  001AF4  88AC               	bsf	4012,4,c	;volatile
  8517  001AF6  D000               	goto	l5773
  8518  001AF8                     l5773:
  8519  001AF8  A213               	btfss	OpenUSART@config,1,c
  8520  001AFA  D003               	goto	l5777
  8521  001AFC  8CAC               	bsf	4012,6,c	;volatile
  8522  001AFE  8CAB               	bsf	4011,6,c	;volatile
  8523  001B00  D000               	goto	l5777
  8524  001B02                     l5777:
  8525  001B02  A413               	btfss	OpenUSART@config,2,c
  8526  001B04  D002               	goto	l5781
  8527  001B06  8EAC               	bsf	4012,7,c	;volatile
  8528  001B08  D000               	goto	l5781
  8529  001B0A                     l5781:
  8530  001B0A  A613               	btfss	OpenUSART@config,3,c
  8531  001B0C  D002               	goto	l875
  8532  001B0E  88AB               	bsf	4011,4,c	;volatile
  8533  001B10  D002               	goto	l5785
  8534  001B12                     l875:
  8535  001B12  8AAB               	bsf	4011,5,c	;volatile
  8536  001B14  D000               	goto	l5785
  8537  001B16                     l5785:
  8538  001B16  B813               	btfsc	OpenUSART@config,4,c
  8539  001B18  84AC               	bsf	4012,2,c	;volatile
  8540  001B1A  989E               	bcf	3998,4,c	;volatile
  8541  001B1C  AA13               	btfss	OpenUSART@config,5,c
  8542  001B1E  D002               	goto	l5793
  8543  001B20  86AB               	bsf	4011,3,c	;volatile
  8544  001B22  D000               	goto	l5793
  8545  001B24                     l5793:
  8546  001B24  AC13               	btfss	OpenUSART@config,6,c
  8547  001B26  D002               	goto	l879
  8548  001B28  8A9D               	bsf	3997,5,c	;volatile
  8549  001B2A  D001               	goto	l880
  8550  001B2C                     l879:
  8551  001B2C  9A9D               	bcf	3997,5,c	;volatile
  8552  001B2E                     l880:
  8553  001B2E  9A9E               	bcf	3998,5,c	;volatile
  8554  001B30  AE13               	btfss	OpenUSART@config,7,c
  8555  001B32  D002               	goto	l881
  8556  001B34  889D               	bsf	3997,4,c	;volatile
  8557  001B36  D001               	goto	l882
  8558  001B38                     l881:
  8559  001B38  989D               	bcf	3997,4,c	;volatile
  8560  001B3A                     l882:
  8561  001B3A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8562  001B3E  5012               	movf	OpenUSART@spbrg+1,w,c
  8563  001B40  6EB0               	movwf	4016,c	;volatile
  8564  001B42  8AAC               	bsf	4012,5,c	;volatile
  8565  001B44  8EAB               	bsf	4011,7,c	;volatile
  8566  001B46  9C94               	bcf	3988,6,c	;volatile
  8567  001B48  8E94               	bsf	3988,7,c	;volatile
  8568  001B4A  B8AC               	btfsc	4012,4,c	;volatile
  8569  001B4C  BEAC               	btfsc	4012,7,c	;volatile
  8570  001B4E  D002               	goto	l884
  8571  001B50  8C94               	bsf	3988,6,c	;volatile
  8572  001B52  D000               	goto	l884
  8573  001B54                     l884:
  8574  001B54  0012               	return		;funcret
  8575  001B56                     __end_of_OpenUSART:
  8576                           	opt stack 0
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodh	equ	0xFF4
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           intcon2	equ	0xFF1
  8585                           postinc0	equ	0xFEE
  8586                           wreg	equ	0xFE8
  8587                           postdec1	equ	0xFE5
  8588                           plusw1	equ	0xFE3
  8589                           fsr1l	equ	0xFE1
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           postdec2	equ	0xFDD
  8593                           plusw2	equ	0xFDB
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _init_INTERRUPT *****************
  8599 ;; Defined at:
  8600 ;;		line 18 in file "Interrupt.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;		None
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;		None
  8605 ;; Return value:  Size  Location     Type
  8606 ;;		None               void
  8607 ;; Registers used:
  8608 ;;		wreg, status,2
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;Total ram usage:        0 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    3
  8621 ;; This function calls:
  8622 ;;		Nothing
  8623 ;; This function is called by:
  8624 ;;		_Do_Init
  8625 ;; This function uses a non-reentrant model
  8626 ;;
  8627                           
  8628                           	psect	text41
  8629  002296                     __ptext41:
  8630                           	opt stack 0
  8631  002296                     _init_INTERRUPT:
  8632                           	opt stack 26
  8633                           
  8634                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0;
  8635                           
  8636                           ;incstack = 0
  8637  002296  92F2               	bcf	intcon,1,c	;volatile
  8638                           
  8639                           ;Interrupt.c: 21: INTCON2bits.INTEDG0 = 0;
  8640  002298  9CF1               	bcf	intcon2,6,c	;volatile
  8641                           
  8642                           ;Interrupt.c: 22: INTCONbits.INT0IE = 1;
  8643  00229A  88F2               	bsf	intcon,4,c	;volatile
  8644                           
  8645                           ;Interrupt.c: 23: TMR1H = 0;
  8646  00229C  0E00               	movlw	0
  8647  00229E  6ECF               	movwf	4047,c	;volatile
  8648                           
  8649                           ;Interrupt.c: 24: TMR1L = 0;
  8650  0022A0  0E00               	movlw	0
  8651  0022A2  6ECE               	movwf	4046,c	;volatile
  8652                           
  8653                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  8654  0022A4  909E               	bcf	3998,0,c	;volatile
  8655                           
  8656                           ;Interrupt.c: 26: PIE1bits.TMR1IE = 1;
  8657  0022A6  809D               	bsf	3997,0,c	;volatile
  8658                           
  8659                           ;Interrupt.c: 27: INTCONbits.PEIE = 1;
  8660  0022A8  8CF2               	bsf	intcon,6,c	;volatile
  8661                           
  8662                           ;Interrupt.c: 28: INTCONbits.GIE = 1;
  8663  0022AA  8EF2               	bsf	intcon,7,c	;volatile
  8664  0022AC  0012               	return		;funcret
  8665  0022AE                     __end_of_init_INTERRUPT:
  8666                           	opt stack 0
  8667                           tblptru	equ	0xFF8
  8668                           tblptrh	equ	0xFF7
  8669                           tblptrl	equ	0xFF6
  8670                           tablat	equ	0xFF5
  8671                           prodh	equ	0xFF4
  8672                           prodl	equ	0xFF3
  8673                           intcon	equ	0xFF2
  8674                           intcon2	equ	0xFF1
  8675                           postinc0	equ	0xFEE
  8676                           wreg	equ	0xFE8
  8677                           postdec1	equ	0xFE5
  8678                           plusw1	equ	0xFE3
  8679                           fsr1l	equ	0xFE1
  8680                           indf2	equ	0xFDF
  8681                           postinc2	equ	0xFDE
  8682                           postdec2	equ	0xFDD
  8683                           plusw2	equ	0xFDB
  8684                           fsr2h	equ	0xFDA
  8685                           fsr2l	equ	0xFD9
  8686                           status	equ	0xFD8
  8687                           
  8688 ;; *************** function _I2C_Init *****************
  8689 ;; Defined at:
  8690 ;;		line 15 in file "I2C_Soft.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  c               4   16[COMRAM] unsigned long 
  8693 ;; Auto vars:     Size  Location     Type
  8694 ;;		None
  8695 ;; Return value:  Size  Location     Type
  8696 ;;		None               void
  8697 ;; Registers used:
  8698 ;;		wreg, cstack
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;Total ram usage:        4 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    4
  8711 ;; This function calls:
  8712 ;;		_i2cHighScl
  8713 ;;		_i2cHighSda
  8714 ;; This function is called by:
  8715 ;;		_Do_Init
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           	psect	text42
  8720  0023B4                     __ptext42:
  8721                           	opt stack 0
  8722  0023B4                     _I2C_Init:
  8723                           	opt stack 25
  8724                           
  8725                           ;I2C_Soft.c: 17: i2cHighScl();
  8726                           
  8727                           ;incstack = 0
  8728  0023B4  ECCE  F011         	call	_i2cHighScl	;wreg free
  8729                           
  8730                           ;I2C_Soft.c: 18: i2cHighSda();
  8731  0023B8  ECF6  F011         	call	_i2cHighSda	;wreg free
  8732  0023BC  0012               	return		;funcret
  8733  0023BE                     __end_of_I2C_Init:
  8734                           	opt stack 0
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           intcon2	equ	0xFF1
  8743                           postinc0	equ	0xFEE
  8744                           wreg	equ	0xFE8
  8745                           postdec1	equ	0xFE5
  8746                           plusw1	equ	0xFE3
  8747                           fsr1l	equ	0xFE1
  8748                           indf2	equ	0xFDF
  8749                           postinc2	equ	0xFDE
  8750                           postdec2	equ	0xFDD
  8751                           plusw2	equ	0xFDB
  8752                           fsr2h	equ	0xFDA
  8753                           fsr2l	equ	0xFD9
  8754                           status	equ	0xFD8
  8755                           
  8756 ;; *************** function _DS1621_Init *****************
  8757 ;; Defined at:
  8758 ;;		line 21 in file "I2C_Support.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;		None
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;		None
  8763 ;; Return value:  Size  Location     Type
  8764 ;;		None               void
  8765 ;; Registers used:
  8766 ;;		wreg, status,2, status,0, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;Total ram usage:        0 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    6
  8779 ;; This function calls:
  8780 ;;		_I2C_Write_Cmd_Only
  8781 ;;		_I2C_Write_Cmd_Write_Data
  8782 ;; This function is called by:
  8783 ;;		_Do_Init
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text43
  8788  002248                     __ptext43:
  8789                           	opt stack 0
  8790  002248                     _DS1621_Init:
  8791                           	opt stack 23
  8792                           
  8793                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (0x48, 0xAC, 0x02);
  8794                           
  8795                           ;incstack = 0
  8796  002248  0EAC               	movlw	172
  8797  00224A  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8798  00224C  0E02               	movlw	2
  8799  00224E  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8800  002250  0E48               	movlw	72
  8801  002252  ECEC  F010         	call	_I2C_Write_Cmd_Write_Data
  8802                           
  8803                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(0x48, 0xEE);
  8804  002256  0EEE               	movlw	238
  8805  002258  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8806  00225A  0E48               	movlw	72
  8807  00225C  EC31  F011         	call	_I2C_Write_Cmd_Only
  8808  002260  0012               	return		;funcret
  8809  002262                     __end_of_DS1621_Init:
  8810                           	opt stack 0
  8811                           tblptru	equ	0xFF8
  8812                           tblptrh	equ	0xFF7
  8813                           tblptrl	equ	0xFF6
  8814                           tablat	equ	0xFF5
  8815                           prodh	equ	0xFF4
  8816                           prodl	equ	0xFF3
  8817                           intcon	equ	0xFF2
  8818                           intcon2	equ	0xFF1
  8819                           postinc0	equ	0xFEE
  8820                           wreg	equ	0xFE8
  8821                           postdec1	equ	0xFE5
  8822                           plusw1	equ	0xFE3
  8823                           fsr1l	equ	0xFE1
  8824                           indf2	equ	0xFDF
  8825                           postinc2	equ	0xFDE
  8826                           postdec2	equ	0xFDD
  8827                           plusw2	equ	0xFDB
  8828                           fsr2h	equ	0xFDA
  8829                           fsr2l	equ	0xFD9
  8830                           status	equ	0xFD8
  8831                           
  8832 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8833 ;; Defined at:
  8834 ;;		line 153 in file "I2C_Soft.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  Device          1    wreg     unsigned char 
  8837 ;;  Cmd             1   18[COMRAM] unsigned char 
  8838 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8839 ;; Auto vars:     Size  Location     Type
  8840 ;;  Device          1   20[COMRAM] unsigned char 
  8841 ;; Return value:  Size  Location     Type
  8842 ;;		None               void
  8843 ;; Registers used:
  8844 ;;		wreg, status,2, status,0, cstack
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8850 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;Total ram usage:        3 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    5
  8857 ;; This function calls:
  8858 ;;		_I2C_Start
  8859 ;;		_I2C_Stop
  8860 ;;		_I2C_Write
  8861 ;; This function is called by:
  8862 ;;		_DS1621_Init
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           	psect	text44
  8867  0021D8                     __ptext44:
  8868                           	opt stack 0
  8869  0021D8                     _I2C_Write_Cmd_Write_Data:
  8870                           	opt stack 23
  8871                           
  8872                           ;incstack = 0
  8873                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8874  0021D8  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8875                           
  8876                           ;I2C_Soft.c: 155: I2C_Start();
  8877  0021DA  ECA5  F011         	call	_I2C_Start	;wreg free
  8878                           
  8879                           ;I2C_Soft.c: 156: I2C_Write((Device << 1) | 0);
  8880  0021DE  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8881  0021E0  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8882  0021E2  ECF6  F00F         	call	_I2C_Write
  8883                           
  8884                           ;I2C_Soft.c: 157: I2C_Write(Cmd);
  8885  0021E6  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8886  0021E8  ECF6  F00F         	call	_I2C_Write
  8887                           
  8888                           ;I2C_Soft.c: 158: I2C_Write(Data_Out);
  8889  0021EC  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8890  0021EE  ECF6  F00F         	call	_I2C_Write
  8891                           
  8892                           ;I2C_Soft.c: 159: I2C_Stop();
  8893  0021F2  EC9C  F011         	call	_I2C_Stop	;wreg free
  8894  0021F6  0012               	return		;funcret
  8895  0021F8                     __end_of_I2C_Write_Cmd_Write_Data:
  8896                           	opt stack 0
  8897                           tblptru	equ	0xFF8
  8898                           tblptrh	equ	0xFF7
  8899                           tblptrl	equ	0xFF6
  8900                           tablat	equ	0xFF5
  8901                           prodh	equ	0xFF4
  8902                           prodl	equ	0xFF3
  8903                           intcon	equ	0xFF2
  8904                           intcon2	equ	0xFF1
  8905                           postinc0	equ	0xFEE
  8906                           wreg	equ	0xFE8
  8907                           postdec1	equ	0xFE5
  8908                           plusw1	equ	0xFE3
  8909                           fsr1l	equ	0xFE1
  8910                           indf2	equ	0xFDF
  8911                           postinc2	equ	0xFDE
  8912                           postdec2	equ	0xFDD
  8913                           plusw2	equ	0xFDB
  8914                           fsr2h	equ	0xFDA
  8915                           fsr2l	equ	0xFD9
  8916                           status	equ	0xFD8
  8917                           
  8918 ;; *************** function _I2C_Write_Cmd_Only *****************
  8919 ;; Defined at:
  8920 ;;		line 145 in file "I2C_Soft.c"
  8921 ;; Parameters:    Size  Location     Type
  8922 ;;  Device          1    wreg     unsigned char 
  8923 ;;  Cmd             1   18[COMRAM] unsigned char 
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;  Device          1   19[COMRAM] unsigned char 
  8926 ;; Return value:  Size  Location     Type
  8927 ;;		None               void
  8928 ;; Registers used:
  8929 ;;		wreg, status,2, status,0, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8935 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;Total ram usage:        2 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    5
  8942 ;; This function calls:
  8943 ;;		_I2C_Start
  8944 ;;		_I2C_Stop
  8945 ;;		_I2C_Write
  8946 ;; This function is called by:
  8947 ;;		_DS1621_Init
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text45
  8952  002262                     __ptext45:
  8953                           	opt stack 0
  8954  002262                     _I2C_Write_Cmd_Only:
  8955                           	opt stack 23
  8956                           
  8957                           ;incstack = 0
  8958                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8959  002262  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8960                           
  8961                           ;I2C_Soft.c: 147: I2C_Start();
  8962  002264  ECA5  F011         	call	_I2C_Start	;wreg free
  8963                           
  8964                           ;I2C_Soft.c: 148: I2C_Write((Device << 1) | 0);
  8965  002268  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8966  00226A  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8967  00226C  ECF6  F00F         	call	_I2C_Write
  8968                           
  8969                           ;I2C_Soft.c: 149: I2C_Write(Cmd);
  8970  002270  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8971  002272  ECF6  F00F         	call	_I2C_Write
  8972                           
  8973                           ;I2C_Soft.c: 150: I2C_Stop();
  8974  002276  EC9C  F011         	call	_I2C_Stop	;wreg free
  8975  00227A  0012               	return		;funcret
  8976  00227C                     __end_of_I2C_Write_Cmd_Only:
  8977                           	opt stack 0
  8978                           tblptru	equ	0xFF8
  8979                           tblptrh	equ	0xFF7
  8980                           tblptrl	equ	0xFF6
  8981                           tablat	equ	0xFF5
  8982                           prodh	equ	0xFF4
  8983                           prodl	equ	0xFF3
  8984                           intcon	equ	0xFF2
  8985                           intcon2	equ	0xFF1
  8986                           postinc0	equ	0xFEE
  8987                           wreg	equ	0xFE8
  8988                           postdec1	equ	0xFE5
  8989                           plusw1	equ	0xFE3
  8990                           fsr1l	equ	0xFE1
  8991                           indf2	equ	0xFDF
  8992                           postinc2	equ	0xFDE
  8993                           postdec2	equ	0xFDD
  8994                           plusw2	equ	0xFDB
  8995                           fsr2h	equ	0xFDA
  8996                           fsr2l	equ	0xFD9
  8997                           status	equ	0xFD8
  8998                           
  8999 ;; *************** function _Decrease_Speed *****************
  9000 ;; Defined at:
  9001 ;;		line 55 in file "Fan_Support.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;		None
  9004 ;; Auto vars:     Size  Location     Type
  9005 ;;		None
  9006 ;; Return value:  Size  Location     Type
  9007 ;;		None               void
  9008 ;; Registers used:
  9009 ;;		wreg, status,2, status,0, cstack
  9010 ;; Tracked objects:
  9011 ;;		On entry : 0/0
  9012 ;;		On exit  : 0/0
  9013 ;;		Unchanged: 0/0
  9014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;Total ram usage:        0 bytes
  9020 ;; Hardware stack levels used:    1
  9021 ;; Hardware stack levels required when called:    7
  9022 ;; This function calls:
  9023 ;;		_Do_Beep
  9024 ;;		_do_update_pwm
  9025 ;; This function is called by:
  9026 ;;		_main
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text46
  9031  00216A                     __ptext46:
  9032                           	opt stack 0
  9033  00216A                     _Decrease_Speed:
  9034                           	opt stack 23
  9035                           
  9036                           ;Fan_Support.c: 57: if(duty_cycle == 0)
  9037                           
  9038                           ;incstack = 0
  9039  00216A  505C               	movf	_duty_cycle,w,c
  9040  00216C  A4D8               	btfss	status,2,c
  9041  00216E  D008               	goto	l6323
  9042                           
  9043                           ;Fan_Support.c: 58: {
  9044                           ;Fan_Support.c: 59: Do_Beep();
  9045  002170  EC80  F011         	call	_Do_Beep	;wreg free
  9046                           
  9047                           ;Fan_Support.c: 60: Do_Beep();
  9048  002174  EC80  F011         	call	_Do_Beep	;wreg free
  9049                           
  9050                           ;Fan_Support.c: 61: do_update_pwm(duty_cycle);
  9051  002178  505C               	movf	_duty_cycle,w,c
  9052  00217A  ECCA  F00B         	call	_do_update_pwm
  9053                           
  9054                           ;Fan_Support.c: 62: }
  9055  00217E  D007               	goto	l54
  9056  002180                     l6323:
  9057                           
  9058                           ;Fan_Support.c: 63: else
  9059                           ;Fan_Support.c: 64: {
  9060                           ;Fan_Support.c: 65: duty_cycle = duty_cycle - 5;
  9061  002180  505C               	movf	_duty_cycle,w,c
  9062  002182  0FFB               	addlw	251
  9063  002184  6E5C               	movwf	_duty_cycle,c
  9064                           
  9065                           ;Fan_Support.c: 67: do_update_pwm(duty_cycle);
  9066  002186  505C               	movf	_duty_cycle,w,c
  9067  002188  ECCA  F00B         	call	_do_update_pwm
  9068  00218C  D000               	goto	l54
  9069  00218E                     l54:
  9070  00218E  0012               	return		;funcret
  9071  002190                     __end_of_Decrease_Speed:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           intcon2	equ	0xFF1
  9081                           postinc0	equ	0xFEE
  9082                           wreg	equ	0xFE8
  9083                           postdec1	equ	0xFE5
  9084                           plusw1	equ	0xFE3
  9085                           fsr1l	equ	0xFE1
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           postdec2	equ	0xFDD
  9089                           plusw2	equ	0xFDB
  9090                           fsr2h	equ	0xFDA
  9091                           fsr2l	equ	0xFD9
  9092                           status	equ	0xFD8
  9093                           
  9094 ;; *************** function _Do_Beep *****************
  9095 ;; Defined at:
  9096 ;;		line 9 in file "Utils.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;		None
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;		None
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  2   18[None  ] int 
  9103 ;; Registers used:
  9104 ;;		wreg, status,2, status,0, cstack
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;Total ram usage:        0 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    6
  9117 ;; This function calls:
  9118 ;;		_Activate_Buzzer
  9119 ;;		_Deactivate_Buzzer
  9120 ;;		_Wait_One_Sec
  9121 ;;		_do_update_pwm
  9122 ;; This function is called by:
  9123 ;;		_Increase_Speed
  9124 ;;		_Decrease_Speed
  9125 ;;		_main
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text47
  9130  002300                     __ptext47:
  9131                           	opt stack 0
  9132  002300                     _Do_Beep:
  9133                           	opt stack 23
  9134                           
  9135                           ;Utils.c: 11: Activate_Buzzer();
  9136                           
  9137                           ;incstack = 0
  9138  002300  EC93  F011         	call	_Activate_Buzzer	;wreg free
  9139                           
  9140                           ;Utils.c: 12: Wait_One_Sec();
  9141  002304  ECDF  F011         	call	_Wait_One_Sec	;wreg free
  9142                           
  9143                           ;Utils.c: 13: Deactivate_Buzzer();
  9144  002308  ECEE  F011         	call	_Deactivate_Buzzer	;wreg free
  9145                           
  9146                           ;Utils.c: 14: do_update_pwm(duty_cycle);
  9147  00230C  505C               	movf	_duty_cycle,w,c
  9148  00230E  ECCA  F00B         	call	_do_update_pwm
  9149  002312  0012               	return		;funcret
  9150  002314                     __end_of_Do_Beep:
  9151                           	opt stack 0
  9152                           tblptru	equ	0xFF8
  9153                           tblptrh	equ	0xFF7
  9154                           tblptrl	equ	0xFF6
  9155                           tablat	equ	0xFF5
  9156                           prodh	equ	0xFF4
  9157                           prodl	equ	0xFF3
  9158                           intcon	equ	0xFF2
  9159                           intcon2	equ	0xFF1
  9160                           postinc0	equ	0xFEE
  9161                           wreg	equ	0xFE8
  9162                           postdec1	equ	0xFE5
  9163                           plusw1	equ	0xFE3
  9164                           fsr1l	equ	0xFE1
  9165                           indf2	equ	0xFDF
  9166                           postinc2	equ	0xFDE
  9167                           postdec2	equ	0xFDD
  9168                           plusw2	equ	0xFDB
  9169                           fsr2h	equ	0xFDA
  9170                           fsr2l	equ	0xFD9
  9171                           status	equ	0xFD8
  9172                           
  9173 ;; *************** function _do_update_pwm *****************
  9174 ;; Defined at:
  9175 ;;		line 71 in file "Fan_Support.c"
  9176 ;; Parameters:    Size  Location     Type
  9177 ;;  duty_cycle      1    wreg     unsigned char 
  9178 ;; Auto vars:     Size  Location     Type
  9179 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  9180 ;;  dc_f            3   61[COMRAM] float 
  9181 ;;  dc_I            2   65[COMRAM] int 
  9182 ;; Return value:  Size  Location     Type
  9183 ;;		None               void
  9184 ;; Registers used:
  9185 ;;		wreg, status,2, status,0, cstack
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9193 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9194 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9195 ;;Total ram usage:        9 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; Hardware stack levels required when called:    5
  9198 ;; This function calls:
  9199 ;;		___ftdiv
  9200 ;;		___ftmul
  9201 ;;		___fttol
  9202 ;;		___lbtoft
  9203 ;; This function is called by:
  9204 ;;		_Turn_Off_Fan
  9205 ;;		_Turn_On_Fan
  9206 ;;		_Increase_Speed
  9207 ;;		_Decrease_Speed
  9208 ;;		_Do_Beep
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           	psect	text48
  9213  001794                     __ptext48:
  9214                           	opt stack 0
  9215  001794                     _do_update_pwm:
  9216                           	opt stack 23
  9217                           
  9218                           ;incstack = 0
  9219                           ;do_update_pwm@duty_cycle stored from wreg
  9220  001794  6E41               	movwf	do_update_pwm@duty_cycle,c
  9221                           
  9222                           ;Fan_Support.c: 73: float dc_f;
  9223                           ;Fan_Support.c: 74: int dc_I;
  9224                           ;Fan_Support.c: 75: PR2 = 0b00000100 ;
  9225  001796  0E04               	movlw	4
  9226  001798  6ECB               	movwf	4043,c	;volatile
  9227                           
  9228                           ;Fan_Support.c: 76: T2CON = 0b00000111 ;
  9229  00179A  0E07               	movlw	7
  9230  00179C  6ECA               	movwf	4042,c	;volatile
  9231                           
  9232                           ;Fan_Support.c: 77: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9233  00179E  0E00               	movlw	0
  9234  0017A0  6E20               	movwf	___ftmul@f2,c
  9235  0017A2  0E80               	movlw	128
  9236  0017A4  6E21               	movwf	___ftmul@f2+1,c
  9237  0017A6  0E40               	movlw	64
  9238  0017A8  6E22               	movwf	___ftmul@f2+2,c
  9239  0017AA  5041               	movf	do_update_pwm@duty_cycle,w,c
  9240  0017AC  ECC8  F010         	call	___lbtoft
  9241  0017B0  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9242  0017B4  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9243  0017B8  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9244  0017BC  EC20  F009         	call	___ftmul	;wreg free
  9245  0017C0  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9246  0017C4  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9247  0017C8  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9248  0017CC  0E00               	movlw	0
  9249  0017CE  6E2F               	movwf	___ftdiv@f2,c
  9250  0017D0  0EA0               	movlw	160
  9251  0017D2  6E30               	movwf	___ftdiv@f2+1,c
  9252  0017D4  0E41               	movlw	65
  9253  0017D6  6E31               	movwf	___ftdiv@f2+2,c
  9254  0017D8  EC88  F00A         	call	___ftdiv	;wreg free
  9255  0017DC  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  9256  0017E0  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9257  0017E4  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9258                           
  9259                           ;Fan_Support.c: 79: dc_I = (int) dc_f;
  9260  0017E8  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9261  0017EC  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9262  0017F0  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9263  0017F4  EC15  F00A         	call	___fttol	;wreg free
  9264  0017F8  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  9265  0017FC  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9266                           
  9267                           ;Fan_Support.c: 80: if (dc_I > duty_cycle) dc_I++;
  9268  001800  5041               	movf	do_update_pwm@duty_cycle,w,c
  9269  001802  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9270  001804  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9271  001806  5042               	movf	do_update_pwm@dc_I,w,c
  9272  001808  5C3B               	subwf	??_do_update_pwm,w,c
  9273  00180A  503C               	movf	??_do_update_pwm+1,w,c
  9274  00180C  0A80               	xorlw	128
  9275  00180E  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9276  001810  5043               	movf	do_update_pwm@dc_I+1,w,c
  9277  001812  0A80               	xorlw	128
  9278  001814  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9279  001816  B0D8               	btfsc	status,0,c
  9280  001818  D003               	goto	l5735
  9281  00181A  4A42               	infsnz	do_update_pwm@dc_I,f,c
  9282  00181C  2A43               	incf	do_update_pwm@dc_I+1,f,c
  9283  00181E  D000               	goto	l5735
  9284  001820                     l5735:
  9285                           
  9286                           ;Fan_Support.c: 81: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9287  001820  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9288  001824  0E03               	movlw	3
  9289  001826  163B               	andwf	??_do_update_pwm,f,c
  9290  001828  383B               	swapf	??_do_update_pwm,w,c
  9291  00182A  0BF0               	andlw	240
  9292  00182C  090C               	iorlw	12
  9293  00182E  6EBD               	movwf	4029,c	;volatile
  9294                           
  9295                           ;Fan_Support.c: 82: CCPR1L = (dc_I) >> 2;
  9296  001830  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9297  001834  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9298  001838  343C               	rlcf	??_do_update_pwm+1,w,c
  9299  00183A  323C               	rrcf	??_do_update_pwm+1,f,c
  9300  00183C  323B               	rrcf	??_do_update_pwm,f,c
  9301  00183E  343C               	rlcf	??_do_update_pwm+1,w,c
  9302  001840  323C               	rrcf	??_do_update_pwm+1,f,c
  9303  001842  323B               	rrcf	??_do_update_pwm,f,c
  9304  001844  503B               	movf	??_do_update_pwm,w,c
  9305  001846  6EBE               	movwf	4030,c	;volatile
  9306  001848  0012               	return		;funcret
  9307  00184A                     __end_of_do_update_pwm:
  9308                           	opt stack 0
  9309                           tblptru	equ	0xFF8
  9310                           tblptrh	equ	0xFF7
  9311                           tblptrl	equ	0xFF6
  9312                           tablat	equ	0xFF5
  9313                           prodh	equ	0xFF4
  9314                           prodl	equ	0xFF3
  9315                           intcon	equ	0xFF2
  9316                           intcon2	equ	0xFF1
  9317                           postinc0	equ	0xFEE
  9318                           wreg	equ	0xFE8
  9319                           postdec1	equ	0xFE5
  9320                           plusw1	equ	0xFE3
  9321                           fsr1l	equ	0xFE1
  9322                           indf2	equ	0xFDF
  9323                           postinc2	equ	0xFDE
  9324                           postdec2	equ	0xFDD
  9325                           plusw2	equ	0xFDB
  9326                           fsr2h	equ	0xFDA
  9327                           fsr2l	equ	0xFD9
  9328                           status	equ	0xFD8
  9329                           
  9330 ;; *************** function ___lbtoft *****************
  9331 ;; Defined at:
  9332 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;  c               1    wreg     unsigned char 
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  c               1   27[COMRAM] unsigned char 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  3   24[COMRAM] float 
  9339 ;; Registers used:
  9340 ;;		wreg, status,2, status,0, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9346 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9349 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;Total ram usage:        4 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    4
  9353 ;; This function calls:
  9354 ;;		___ftpack
  9355 ;; This function is called by:
  9356 ;;		_do_update_pwm
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           	psect	text49
  9361  002190                     __ptext49:
  9362                           	opt stack 0
  9363  002190                     ___lbtoft:
  9364                           	opt stack 23
  9365                           
  9366                           ;incstack = 0
  9367                           ;___lbtoft@c stored from wreg
  9368  002190  6E1C               	movwf	___lbtoft@c,c
  9369  002192  501C               	movf	___lbtoft@c,w,c
  9370  002194  6E11               	movwf	___ftpack@arg,c
  9371  002196  6A12               	clrf	___ftpack@arg+1,c
  9372  002198  6A13               	clrf	___ftpack@arg+2,c
  9373  00219A  0E8E               	movlw	142
  9374  00219C  6E14               	movwf	___ftpack@exp,c
  9375  00219E  0E00               	movlw	0
  9376  0021A0  6E15               	movwf	___ftpack@sign,c
  9377  0021A2  EC67  F00B         	call	___ftpack	;wreg free
  9378  0021A6  C011  F019         	movff	?___ftpack,?___lbtoft
  9379  0021AA  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9380  0021AE  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9381  0021B2  D000               	goto	l1344
  9382  0021B4                     l1344:
  9383  0021B4  0012               	return		;funcret
  9384  0021B6                     __end_of___lbtoft:
  9385                           	opt stack 0
  9386                           tblptru	equ	0xFF8
  9387                           tblptrh	equ	0xFF7
  9388                           tblptrl	equ	0xFF6
  9389                           tablat	equ	0xFF5
  9390                           prodh	equ	0xFF4
  9391                           prodl	equ	0xFF3
  9392                           intcon	equ	0xFF2
  9393                           intcon2	equ	0xFF1
  9394                           postinc0	equ	0xFEE
  9395                           wreg	equ	0xFE8
  9396                           postdec1	equ	0xFE5
  9397                           plusw1	equ	0xFE3
  9398                           fsr1l	equ	0xFE1
  9399                           indf2	equ	0xFDF
  9400                           postinc2	equ	0xFDE
  9401                           postdec2	equ	0xFDD
  9402                           plusw2	equ	0xFDB
  9403                           fsr2h	equ	0xFDA
  9404                           fsr2l	equ	0xFD9
  9405                           status	equ	0xFD8
  9406                           
  9407 ;; *************** function ___fttol *****************
  9408 ;; Defined at:
  9409 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;  f1              3   16[COMRAM] float 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;  lval            4   26[COMRAM] unsigned long 
  9414 ;;  exp1            1   30[COMRAM] unsigned char 
  9415 ;;  sign1           1   25[COMRAM] unsigned char 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  4   16[COMRAM] long 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;Total ram usage:       15 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    3
  9432 ;; This function calls:
  9433 ;;		Nothing
  9434 ;; This function is called by:
  9435 ;;		_do_update_pwm
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439                           	psect	text50
  9440  00142A                     __ptext50:
  9441                           	opt stack 0
  9442  00142A                     ___fttol:
  9443                           	opt stack 24
  9444                           
  9445                           ;incstack = 0
  9446  00142A  C013  F015         	movff	___fttol@f1+2,??___fttol
  9447  00142E  6A16               	clrf	(??___fttol+1)& (0+255),c
  9448  001430  6A17               	clrf	(??___fttol+2)& (0+255),c
  9449  001432  3412               	rlcf	___fttol@f1+1,w,c
  9450  001434  3615               	rlcf	??___fttol& (0+255),f,c
  9451  001436  E301               	bnc	u4041
  9452  001438  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9453  00143A                     u4041:
  9454  00143A  5015               	movf	??___fttol,w,c
  9455  00143C  6E1F               	movwf	___fttol@exp1,c
  9456  00143E  501F               	movf	___fttol@exp1,w,c
  9457  001440  A4D8               	btfss	status,2,c
  9458  001442  D002               	goto	l5513
  9459  001444  D039               	goto	l5537
  9460  001446  D063               	goto	l1303
  9461  001448                     l5513:
  9462  001448  0E17               	movlw	23
  9463  00144A  6E15               	movwf	??___fttol& (0+255),c
  9464  00144C  C011  F016         	movff	___fttol@f1,??___fttol+1
  9465  001450  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9466  001454  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9467  001458  2815               	incf	??___fttol,w,c
  9468  00145A  6E19               	movwf	(??___fttol+4)& (0+255),c
  9469  00145C  D004               	goto	u4060
  9470  00145E                     u4065:
  9471  00145E  90D8               	bcf	status,0,c
  9472  001460  3218               	rrcf	??___fttol+3,f,c
  9473  001462  3217               	rrcf	??___fttol+2,f,c
  9474  001464  3216               	rrcf	??___fttol+1,f,c
  9475  001466                     u4060:
  9476  001466  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9477  001468  D7FA               	goto	u4065
  9478  00146A  5016               	movf	??___fttol+1,w,c
  9479  00146C  6E1A               	movwf	___fttol@sign1,c
  9480  00146E  8E12               	bsf	___fttol@f1+1,7,c
  9481  001470  0EFF               	movlw	255
  9482  001472  1611               	andwf	___fttol@f1,f,c
  9483  001474  0EFF               	movlw	255
  9484  001476  1612               	andwf	___fttol@f1+1,f,c
  9485  001478  0E00               	movlw	0
  9486  00147A  1613               	andwf	___fttol@f1+2,f,c
  9487  00147C  5011               	movf	___fttol@f1,w,c
  9488  00147E  6E1B               	movwf	___fttol@lval,c
  9489  001480  5012               	movf	___fttol@f1+1,w,c
  9490  001482  6E1C               	movwf	___fttol@lval+1,c
  9491  001484  5013               	movf	___fttol@f1+2,w,c
  9492  001486  6E1D               	movwf	___fttol@lval+2,c
  9493  001488  6A1E               	clrf	___fttol@lval+3,c
  9494  00148A  0E8E               	movlw	142
  9495  00148C  5E1F               	subwf	___fttol@exp1,f,c
  9496  00148E  AE1F               	btfss	___fttol@exp1,7,c
  9497  001490  D010               	goto	l5535
  9498  001492  501F               	movf	___fttol@exp1,w,c
  9499  001494  0A80               	xorlw	128
  9500  001496  0F8F               	addlw	143
  9501  001498  B0D8               	btfsc	status,0,c
  9502  00149A  D003               	goto	l5531
  9503  00149C  D00D               	goto	l5537
  9504  00149E  D037               	goto	l1303
  9505  0014A0  D000               	goto	l5531
  9506  0014A2                     l5531:
  9507  0014A2  90D8               	bcf	status,0,c
  9508  0014A4  321E               	rrcf	___fttol@lval+3,f,c
  9509  0014A6  321D               	rrcf	___fttol@lval+2,f,c
  9510  0014A8  321C               	rrcf	___fttol@lval+1,f,c
  9511  0014AA  321B               	rrcf	___fttol@lval,f,c
  9512  0014AC  3E1F               	incfsz	___fttol@exp1,f,c
  9513  0014AE  D7F9               	goto	l5531
  9514  0014B0  D019               	goto	l5545
  9515  0014B2                     l5535:
  9516  0014B2  0E17               	movlw	23
  9517  0014B4  641F               	cpfsgt	___fttol@exp1,c
  9518  0014B6  D011               	goto	l5543
  9519  0014B8                     l5537:
  9520  0014B8  0E00               	movlw	0
  9521  0014BA  6E11               	movwf	?___fttol,c
  9522  0014BC  0E00               	movlw	0
  9523  0014BE  6E12               	movwf	?___fttol+1,c
  9524  0014C0  0E00               	movlw	0
  9525  0014C2  6E13               	movwf	?___fttol+2,c
  9526  0014C4  0E00               	movlw	0
  9527  0014C6  6E14               	movwf	?___fttol+3,c
  9528  0014C8  D022               	goto	l1303
  9529  0014CA  D007               	goto	l5543
  9530  0014CC                     l5541:
  9531  0014CC  90D8               	bcf	status,0,c
  9532  0014CE  361B               	rlcf	___fttol@lval,f,c
  9533  0014D0  361C               	rlcf	___fttol@lval+1,f,c
  9534  0014D2  361D               	rlcf	___fttol@lval+2,f,c
  9535  0014D4  361E               	rlcf	___fttol@lval+3,f,c
  9536  0014D6  061F               	decf	___fttol@exp1,f,c
  9537  0014D8  D000               	goto	l5543
  9538  0014DA                     l5543:
  9539  0014DA  501F               	movf	___fttol@exp1,w,c
  9540  0014DC  B4D8               	btfsc	status,2,c
  9541  0014DE  D002               	goto	l5545
  9542  0014E0  D7F5               	goto	l5541
  9543  0014E2  D000               	goto	l5545
  9544  0014E4                     l5545:
  9545  0014E4  501A               	movf	___fttol@sign1,w,c
  9546  0014E6  B4D8               	btfsc	status,2,c
  9547  0014E8  D009               	goto	l5549
  9548  0014EA  1E1E               	comf	___fttol@lval+3,f,c
  9549  0014EC  1E1D               	comf	___fttol@lval+2,f,c
  9550  0014EE  1E1C               	comf	___fttol@lval+1,f,c
  9551  0014F0  6C1B               	negf	___fttol@lval,c
  9552  0014F2  0E00               	movlw	0
  9553  0014F4  221C               	addwfc	___fttol@lval+1,f,c
  9554  0014F6  221D               	addwfc	___fttol@lval+2,f,c
  9555  0014F8  221E               	addwfc	___fttol@lval+3,f,c
  9556  0014FA  D000               	goto	l5549
  9557  0014FC                     l5549:
  9558  0014FC  C01B  F011         	movff	___fttol@lval,?___fttol
  9559  001500  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9560  001504  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9561  001508  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9562  00150C  D000               	goto	l1303
  9563  00150E                     l1303:
  9564  00150E  0012               	return		;funcret
  9565  001510                     __end_of___fttol:
  9566                           	opt stack 0
  9567                           tblptru	equ	0xFF8
  9568                           tblptrh	equ	0xFF7
  9569                           tblptrl	equ	0xFF6
  9570                           tablat	equ	0xFF5
  9571                           prodh	equ	0xFF4
  9572                           prodl	equ	0xFF3
  9573                           intcon	equ	0xFF2
  9574                           intcon2	equ	0xFF1
  9575                           postinc0	equ	0xFEE
  9576                           wreg	equ	0xFE8
  9577                           postdec1	equ	0xFE5
  9578                           plusw1	equ	0xFE3
  9579                           fsr1l	equ	0xFE1
  9580                           indf2	equ	0xFDF
  9581                           postinc2	equ	0xFDE
  9582                           postdec2	equ	0xFDD
  9583                           plusw2	equ	0xFDB
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function ___ftmul *****************
  9589 ;; Defined at:
  9590 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  f1              3   28[COMRAM] float 
  9593 ;;  f2              3   31[COMRAM] float 
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9596 ;;  sign            1   42[COMRAM] unsigned char 
  9597 ;;  cntr            1   41[COMRAM] unsigned char 
  9598 ;;  exp             1   37[COMRAM] unsigned char 
  9599 ;; Return value:  Size  Location     Type
  9600 ;;                  3   28[COMRAM] float 
  9601 ;; Registers used:
  9602 ;;		wreg, status,2, status,0, cstack
  9603 ;; Tracked objects:
  9604 ;;		On entry : 0/0
  9605 ;;		On exit  : 0/0
  9606 ;;		Unchanged: 0/0
  9607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9608 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9609 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;Total ram usage:       15 bytes
  9613 ;; Hardware stack levels used:    1
  9614 ;; Hardware stack levels required when called:    4
  9615 ;; This function calls:
  9616 ;;		___ftpack
  9617 ;; This function is called by:
  9618 ;;		_do_update_pwm
  9619 ;; This function uses a non-reentrant model
  9620 ;;
  9621                           
  9622                           	psect	text51
  9623  001240                     __ptext51:
  9624                           	opt stack 0
  9625  001240                     ___ftmul:
  9626                           	opt stack 23
  9627                           
  9628                           ;incstack = 0
  9629  001240  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9630  001244  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9631  001246  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9632  001248  341E               	rlcf	___ftmul@f1+1,w,c
  9633  00124A  3623               	rlcf	??___ftmul& (0+255),f,c
  9634  00124C  E301               	bnc	u3981
  9635  00124E  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9636  001250                     u3981:
  9637  001250  5023               	movf	??___ftmul,w,c
  9638  001252  6E26               	movwf	___ftmul@exp,c
  9639  001254  5026               	movf	___ftmul@exp,w,c
  9640  001256  A4D8               	btfss	status,2,c
  9641  001258  D002               	goto	l5465
  9642  00125A  D00E               	goto	l5467
  9643  00125C  D06C               	goto	l1282
  9644  00125E                     l5465:
  9645  00125E  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9646  001262  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9647  001264  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9648  001266  3421               	rlcf	___ftmul@f2+1,w,c
  9649  001268  3623               	rlcf	??___ftmul& (0+255),f,c
  9650  00126A  E301               	bnc	u4001
  9651  00126C  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9652  00126E                     u4001:
  9653  00126E  5023               	movf	??___ftmul,w,c
  9654  001270  6E2B               	movwf	___ftmul@sign,c
  9655  001272  502B               	movf	___ftmul@sign,w,c
  9656  001274  A4D8               	btfss	status,2,c
  9657  001276  D007               	goto	l5471
  9658  001278                     l5467:
  9659  001278  0E00               	movlw	0
  9660  00127A  6E1D               	movwf	?___ftmul,c
  9661  00127C  0E00               	movlw	0
  9662  00127E  6E1E               	movwf	?___ftmul+1,c
  9663  001280  0E00               	movlw	0
  9664  001282  6E1F               	movwf	?___ftmul+2,c
  9665  001284  D058               	goto	l1282
  9666  001286                     l5471:
  9667  001286  502B               	movf	___ftmul@sign,w,c
  9668  001288  0F7B               	addlw	123
  9669  00128A  2626               	addwf	___ftmul@exp,f,c
  9670  00128C  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9671  001290  5022               	movf	___ftmul@f2+2,w,c
  9672  001292  1A2B               	xorwf	___ftmul@sign,f,c
  9673  001294  0E80               	movlw	128
  9674  001296  162B               	andwf	___ftmul@sign,f,c
  9675  001298  8E1E               	bsf	___ftmul@f1+1,7,c
  9676  00129A  8E21               	bsf	___ftmul@f2+1,7,c
  9677  00129C  0EFF               	movlw	255
  9678  00129E  1620               	andwf	___ftmul@f2,f,c
  9679  0012A0  0EFF               	movlw	255
  9680  0012A2  1621               	andwf	___ftmul@f2+1,f,c
  9681  0012A4  0E00               	movlw	0
  9682  0012A6  1622               	andwf	___ftmul@f2+2,f,c
  9683  0012A8  0E00               	movlw	0
  9684  0012AA  6E27               	movwf	___ftmul@f3_as_product,c
  9685  0012AC  0E00               	movlw	0
  9686  0012AE  6E28               	movwf	___ftmul@f3_as_product+1,c
  9687  0012B0  0E00               	movlw	0
  9688  0012B2  6E29               	movwf	___ftmul@f3_as_product+2,c
  9689  0012B4  0E07               	movlw	7
  9690  0012B6  6E2A               	movwf	___ftmul@cntr,c
  9691  0012B8  D000               	goto	l5485
  9692  0012BA                     l5485:
  9693  0012BA  A01D               	btfss	___ftmul@f1,0,c
  9694  0012BC  D007               	goto	l5489
  9695  0012BE  5020               	movf	___ftmul@f2,w,c
  9696  0012C0  2627               	addwf	___ftmul@f3_as_product,f,c
  9697  0012C2  5021               	movf	___ftmul@f2+1,w,c
  9698  0012C4  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9699  0012C6  5022               	movf	___ftmul@f2+2,w,c
  9700  0012C8  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9701  0012CA  D000               	goto	l5489
  9702  0012CC                     l5489:
  9703  0012CC  90D8               	bcf	status,0,c
  9704  0012CE  321F               	rrcf	___ftmul@f1+2,f,c
  9705  0012D0  321E               	rrcf	___ftmul@f1+1,f,c
  9706  0012D2  321D               	rrcf	___ftmul@f1,f,c
  9707  0012D4  90D8               	bcf	status,0,c
  9708  0012D6  3620               	rlcf	___ftmul@f2,f,c
  9709  0012D8  3621               	rlcf	___ftmul@f2+1,f,c
  9710  0012DA  3622               	rlcf	___ftmul@f2+2,f,c
  9711  0012DC  2E2A               	decfsz	___ftmul@cntr,f,c
  9712  0012DE  D7ED               	goto	l5485
  9713  0012E0  D000               	goto	l5493
  9714  0012E2                     l5493:
  9715  0012E2  0E09               	movlw	9
  9716  0012E4  6E2A               	movwf	___ftmul@cntr,c
  9717  0012E6  D000               	goto	l5495
  9718  0012E8                     l5495:
  9719  0012E8  A01D               	btfss	___ftmul@f1,0,c
  9720  0012EA  D007               	goto	l5499
  9721  0012EC  5020               	movf	___ftmul@f2,w,c
  9722  0012EE  2627               	addwf	___ftmul@f3_as_product,f,c
  9723  0012F0  5021               	movf	___ftmul@f2+1,w,c
  9724  0012F2  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9725  0012F4  5022               	movf	___ftmul@f2+2,w,c
  9726  0012F6  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9727  0012F8  D000               	goto	l5499
  9728  0012FA                     l5499:
  9729  0012FA  90D8               	bcf	status,0,c
  9730  0012FC  321F               	rrcf	___ftmul@f1+2,f,c
  9731  0012FE  321E               	rrcf	___ftmul@f1+1,f,c
  9732  001300  321D               	rrcf	___ftmul@f1,f,c
  9733  001302  90D8               	bcf	status,0,c
  9734  001304  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9735  001306  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9736  001308  3227               	rrcf	___ftmul@f3_as_product,f,c
  9737  00130A  2E2A               	decfsz	___ftmul@cntr,f,c
  9738  00130C  D7ED               	goto	l5495
  9739  00130E  D000               	goto	l5503
  9740  001310                     l5503:
  9741  001310  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9742  001314  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9743  001318  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9744  00131C  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9745  001320  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9746  001324  EC67  F00B         	call	___ftpack	;wreg free
  9747  001328  C011  F01D         	movff	?___ftpack,?___ftmul
  9748  00132C  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9749  001330  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9750  001334  D000               	goto	l1282
  9751  001336                     l1282:
  9752  001336  0012               	return		;funcret
  9753  001338                     __end_of___ftmul:
  9754                           	opt stack 0
  9755                           tblptru	equ	0xFF8
  9756                           tblptrh	equ	0xFF7
  9757                           tblptrl	equ	0xFF6
  9758                           tablat	equ	0xFF5
  9759                           prodh	equ	0xFF4
  9760                           prodl	equ	0xFF3
  9761                           intcon	equ	0xFF2
  9762                           intcon2	equ	0xFF1
  9763                           postinc0	equ	0xFEE
  9764                           wreg	equ	0xFE8
  9765                           postdec1	equ	0xFE5
  9766                           plusw1	equ	0xFE3
  9767                           fsr1l	equ	0xFE1
  9768                           indf2	equ	0xFDF
  9769                           postinc2	equ	0xFDE
  9770                           postdec2	equ	0xFDD
  9771                           plusw2	equ	0xFDB
  9772                           fsr2h	equ	0xFDA
  9773                           fsr2l	equ	0xFD9
  9774                           status	equ	0xFD8
  9775                           
  9776 ;; *************** function ___ftdiv *****************
  9777 ;; Defined at:
  9778 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;  f1              3   43[COMRAM] float 
  9781 ;;  f2              3   46[COMRAM] float 
  9782 ;; Auto vars:     Size  Location     Type
  9783 ;;  f3              3   53[COMRAM] float 
  9784 ;;  sign            1   57[COMRAM] unsigned char 
  9785 ;;  exp             1   56[COMRAM] unsigned char 
  9786 ;;  cntr            1   52[COMRAM] unsigned char 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  3   43[COMRAM] float 
  9789 ;; Registers used:
  9790 ;;		wreg, status,2, status,0, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9796 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;Total ram usage:       15 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    4
  9803 ;; This function calls:
  9804 ;;		___ftpack
  9805 ;; This function is called by:
  9806 ;;		_do_update_pwm
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text52
  9811  001510                     __ptext52:
  9812                           	opt stack 0
  9813  001510                     ___ftdiv:
  9814                           	opt stack 23
  9815                           
  9816                           ;incstack = 0
  9817  001510  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9818  001514  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9819  001516  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9820  001518  342D               	rlcf	___ftdiv@f1+1,w,c
  9821  00151A  3632               	rlcf	??___ftdiv& (0+255),f,c
  9822  00151C  E301               	bnc	u3931
  9823  00151E  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9824  001520                     u3931:
  9825  001520  5032               	movf	??___ftdiv,w,c
  9826  001522  6E39               	movwf	___ftdiv@exp,c
  9827  001524  5039               	movf	___ftdiv@exp,w,c
  9828  001526  A4D8               	btfss	status,2,c
  9829  001528  D002               	goto	l5419
  9830  00152A  D00E               	goto	l5421
  9831  00152C  D061               	goto	l1267
  9832  00152E                     l5419:
  9833  00152E  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9834  001532  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9835  001534  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9836  001536  3430               	rlcf	___ftdiv@f2+1,w,c
  9837  001538  3632               	rlcf	??___ftdiv& (0+255),f,c
  9838  00153A  E301               	bnc	u3951
  9839  00153C  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9840  00153E                     u3951:
  9841  00153E  5032               	movf	??___ftdiv,w,c
  9842  001540  6E3A               	movwf	___ftdiv@sign,c
  9843  001542  503A               	movf	___ftdiv@sign,w,c
  9844  001544  A4D8               	btfss	status,2,c
  9845  001546  D007               	goto	l5425
  9846  001548                     l5421:
  9847  001548  0E00               	movlw	0
  9848  00154A  6E2C               	movwf	?___ftdiv,c
  9849  00154C  0E00               	movlw	0
  9850  00154E  6E2D               	movwf	?___ftdiv+1,c
  9851  001550  0E00               	movlw	0
  9852  001552  6E2E               	movwf	?___ftdiv+2,c
  9853  001554  D04D               	goto	l1267
  9854  001556                     l5425:
  9855  001556  0E00               	movlw	0
  9856  001558  6E36               	movwf	___ftdiv@f3,c
  9857  00155A  0E00               	movlw	0
  9858  00155C  6E37               	movwf	___ftdiv@f3+1,c
  9859  00155E  0E00               	movlw	0
  9860  001560  6E38               	movwf	___ftdiv@f3+2,c
  9861  001562  503A               	movf	___ftdiv@sign,w,c
  9862  001564  0F89               	addlw	137
  9863  001566  5E39               	subwf	___ftdiv@exp,f,c
  9864  001568  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9865  00156C  5031               	movf	___ftdiv@f2+2,w,c
  9866  00156E  1A3A               	xorwf	___ftdiv@sign,f,c
  9867  001570  0E80               	movlw	128
  9868  001572  163A               	andwf	___ftdiv@sign,f,c
  9869  001574  8E2D               	bsf	___ftdiv@f1+1,7,c
  9870  001576  0EFF               	movlw	255
  9871  001578  162C               	andwf	___ftdiv@f1,f,c
  9872  00157A  0EFF               	movlw	255
  9873  00157C  162D               	andwf	___ftdiv@f1+1,f,c
  9874  00157E  0E00               	movlw	0
  9875  001580  162E               	andwf	___ftdiv@f1+2,f,c
  9876  001582  8E30               	bsf	___ftdiv@f2+1,7,c
  9877  001584  0EFF               	movlw	255
  9878  001586  162F               	andwf	___ftdiv@f2,f,c
  9879  001588  0EFF               	movlw	255
  9880  00158A  1630               	andwf	___ftdiv@f2+1,f,c
  9881  00158C  0E00               	movlw	0
  9882  00158E  1631               	andwf	___ftdiv@f2+2,f,c
  9883  001590  0E18               	movlw	24
  9884  001592  6E35               	movwf	___ftdiv@cntr,c
  9885  001594  D000               	goto	l5445
  9886  001596                     l5445:
  9887  001596  90D8               	bcf	status,0,c
  9888  001598  3636               	rlcf	___ftdiv@f3,f,c
  9889  00159A  3637               	rlcf	___ftdiv@f3+1,f,c
  9890  00159C  3638               	rlcf	___ftdiv@f3+2,f,c
  9891  00159E  502F               	movf	___ftdiv@f2,w,c
  9892  0015A0  5C2C               	subwf	___ftdiv@f1,w,c
  9893  0015A2  5030               	movf	___ftdiv@f2+1,w,c
  9894  0015A4  582D               	subwfb	___ftdiv@f1+1,w,c
  9895  0015A6  5031               	movf	___ftdiv@f2+2,w,c
  9896  0015A8  582E               	subwfb	___ftdiv@f1+2,w,c
  9897  0015AA  A0D8               	btfss	status,0,c
  9898  0015AC  D007               	goto	l1270
  9899  0015AE  502F               	movf	___ftdiv@f2,w,c
  9900  0015B0  5E2C               	subwf	___ftdiv@f1,f,c
  9901  0015B2  5030               	movf	___ftdiv@f2+1,w,c
  9902  0015B4  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9903  0015B6  5031               	movf	___ftdiv@f2+2,w,c
  9904  0015B8  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9905  0015BA  8036               	bsf	___ftdiv@f3,0,c
  9906  0015BC                     l1270:
  9907  0015BC  90D8               	bcf	status,0,c
  9908  0015BE  362C               	rlcf	___ftdiv@f1,f,c
  9909  0015C0  362D               	rlcf	___ftdiv@f1+1,f,c
  9910  0015C2  362E               	rlcf	___ftdiv@f1+2,f,c
  9911  0015C4  2E35               	decfsz	___ftdiv@cntr,f,c
  9912  0015C6  D7E7               	goto	l5445
  9913  0015C8  D000               	goto	l5455
  9914  0015CA                     l5455:
  9915  0015CA  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  9916  0015CE  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9917  0015D2  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9918  0015D6  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  9919  0015DA  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  9920  0015DE  EC67  F00B         	call	___ftpack	;wreg free
  9921  0015E2  C011  F02C         	movff	?___ftpack,?___ftdiv
  9922  0015E6  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9923  0015EA  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9924  0015EE  D000               	goto	l1267
  9925  0015F0                     l1267:
  9926  0015F0  0012               	return		;funcret
  9927  0015F2                     __end_of___ftdiv:
  9928                           	opt stack 0
  9929                           tblptru	equ	0xFF8
  9930                           tblptrh	equ	0xFF7
  9931                           tblptrl	equ	0xFF6
  9932                           tablat	equ	0xFF5
  9933                           prodh	equ	0xFF4
  9934                           prodl	equ	0xFF3
  9935                           intcon	equ	0xFF2
  9936                           intcon2	equ	0xFF1
  9937                           postinc0	equ	0xFEE
  9938                           wreg	equ	0xFE8
  9939                           postdec1	equ	0xFE5
  9940                           plusw1	equ	0xFE3
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           postdec2	equ	0xFDD
  9945                           plusw2	equ	0xFDB
  9946                           fsr2h	equ	0xFDA
  9947                           fsr2l	equ	0xFD9
  9948                           status	equ	0xFD8
  9949                           
  9950 ;; *************** function ___ftpack *****************
  9951 ;; Defined at:
  9952 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  arg             3   16[COMRAM] unsigned um
  9955 ;;  exp             1   19[COMRAM] unsigned char 
  9956 ;;  sign            1   20[COMRAM] unsigned char 
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;		None
  9959 ;; Return value:  Size  Location     Type
  9960 ;;                  3   16[COMRAM] float 
  9961 ;; Registers used:
  9962 ;;		wreg, status,2, status,0
  9963 ;; Tracked objects:
  9964 ;;		On entry : 0/0
  9965 ;;		On exit  : 0/0
  9966 ;;		Unchanged: 0/0
  9967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9968 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;Total ram usage:        8 bytes
  9973 ;; Hardware stack levels used:    1
  9974 ;; Hardware stack levels required when called:    3
  9975 ;; This function calls:
  9976 ;;		Nothing
  9977 ;; This function is called by:
  9978 ;;		___ftdiv
  9979 ;;		___ftmul
  9980 ;;		___lbtoft
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           	psect	text53
  9985  0016CE                     __ptext53:
  9986                           	opt stack 0
  9987  0016CE                     ___ftpack:
  9988                           	opt stack 23
  9989                           
  9990                           ;incstack = 0
  9991  0016CE  5014               	movf	___ftpack@exp,w,c
  9992  0016D0  B4D8               	btfsc	status,2,c
  9993  0016D2  D005               	goto	l5287
  9994  0016D4  5011               	movf	___ftpack@arg,w,c
  9995  0016D6  1012               	iorwf	___ftpack@arg+1,w,c
  9996  0016D8  1013               	iorwf	___ftpack@arg+2,w,c
  9997  0016DA  A4D8               	btfss	status,2,c
  9998  0016DC  D00E               	goto	l5293
  9999  0016DE                     l5287:
 10000  0016DE  0E00               	movlw	0
 10001  0016E0  6E11               	movwf	?___ftpack,c
 10002  0016E2  0E00               	movlw	0
 10003  0016E4  6E12               	movwf	?___ftpack+1,c
 10004  0016E6  0E00               	movlw	0
 10005  0016E8  6E13               	movwf	?___ftpack+2,c
 10006  0016EA  D053               	goto	l1195
 10007  0016EC  D006               	goto	l5293
 10008  0016EE                     l5291:
 10009  0016EE  2A14               	incf	___ftpack@exp,f,c
 10010  0016F0  90D8               	bcf	status,0,c
 10011  0016F2  3213               	rrcf	___ftpack@arg+2,f,c
 10012  0016F4  3212               	rrcf	___ftpack@arg+1,f,c
 10013  0016F6  3211               	rrcf	___ftpack@arg,f,c
 10014  0016F8  D000               	goto	l5293
 10015  0016FA                     l5293:
 10016  0016FA  0E00               	movlw	0
 10017  0016FC  1411               	andwf	___ftpack@arg,w,c
 10018  0016FE  6E16               	movwf	??___ftpack& (0+255),c
 10019  001700  0E00               	movlw	0
 10020  001702  1412               	andwf	___ftpack@arg+1,w,c
 10021  001704  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10022  001706  0EFE               	movlw	254
 10023  001708  1413               	andwf	___ftpack@arg+2,w,c
 10024  00170A  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10025  00170C  5016               	movf	??___ftpack,w,c
 10026  00170E  1017               	iorwf	??___ftpack+1,w,c
 10027  001710  1018               	iorwf	??___ftpack+2,w,c
 10028  001712  B4D8               	btfsc	status,2,c
 10029  001714  D00E               	goto	l5299
 10030  001716  D7EB               	goto	l5291
 10031  001718  D00C               	goto	l5299
 10032  00171A                     l5295:
 10033  00171A  2A14               	incf	___ftpack@exp,f,c
 10034  00171C  0E01               	movlw	1
 10035  00171E  2611               	addwf	___ftpack@arg,f,c
 10036  001720  0E00               	movlw	0
 10037  001722  2212               	addwfc	___ftpack@arg+1,f,c
 10038  001724  0E00               	movlw	0
 10039  001726  2213               	addwfc	___ftpack@arg+2,f,c
 10040  001728  90D8               	bcf	status,0,c
 10041  00172A  3213               	rrcf	___ftpack@arg+2,f,c
 10042  00172C  3212               	rrcf	___ftpack@arg+1,f,c
 10043  00172E  3211               	rrcf	___ftpack@arg,f,c
 10044  001730  D000               	goto	l5299
 10045  001732                     l5299:
 10046  001732  0E00               	movlw	0
 10047  001734  1411               	andwf	___ftpack@arg,w,c
 10048  001736  6E16               	movwf	??___ftpack& (0+255),c
 10049  001738  0E00               	movlw	0
 10050  00173A  1412               	andwf	___ftpack@arg+1,w,c
 10051  00173C  6E17               	movwf	(??___ftpack+1)& (0+255),c
 10052  00173E  0EFF               	movlw	255
 10053  001740  1413               	andwf	___ftpack@arg+2,w,c
 10054  001742  6E18               	movwf	(??___ftpack+2)& (0+255),c
 10055  001744  5016               	movf	??___ftpack,w,c
 10056  001746  1017               	iorwf	??___ftpack+1,w,c
 10057  001748  1018               	iorwf	??___ftpack+2,w,c
 10058  00174A  B4D8               	btfsc	status,2,c
 10059  00174C  D008               	goto	l5303
 10060  00174E  D7E5               	goto	l5295
 10061  001750  D006               	goto	l5303
 10062  001752                     l5301:
 10063  001752  0614               	decf	___ftpack@exp,f,c
 10064  001754  90D8               	bcf	status,0,c
 10065  001756  3611               	rlcf	___ftpack@arg,f,c
 10066  001758  3612               	rlcf	___ftpack@arg+1,f,c
 10067  00175A  3613               	rlcf	___ftpack@arg+2,f,c
 10068  00175C  D000               	goto	l5303
 10069  00175E                     l5303:
 10070  00175E  BE12               	btfsc	___ftpack@arg+1,7,c
 10071  001760  D004               	goto	l1206
 10072  001762  0E02               	movlw	2
 10073  001764  6014               	cpfslt	___ftpack@exp,c
 10074  001766  D7F5               	goto	l5301
 10075  001768  D000               	goto	l1206
 10076  00176A                     l1206:
 10077  00176A  B014               	btfsc	___ftpack@exp,0,c
 10078  00176C  D002               	goto	l5309
 10079  00176E  9E12               	bcf	___ftpack@arg+1,7,c
 10080  001770  D000               	goto	l5309
 10081  001772                     l5309:
 10082  001772  90D8               	bcf	status,0,c
 10083  001774  3214               	rrcf	___ftpack@exp,f,c
 10084  001776  5014               	movf	___ftpack@exp,w,c
 10085  001778  1213               	iorwf	___ftpack@arg+2,f,c
 10086  00177A  5015               	movf	___ftpack@sign,w,c
 10087  00177C  B4D8               	btfsc	status,2,c
 10088  00177E  D002               	goto	l5315
 10089  001780  8E13               	bsf	___ftpack@arg+2,7,c
 10090  001782  D000               	goto	l5315
 10091  001784                     l5315:
 10092  001784  C011  F011         	movff	___ftpack@arg,?___ftpack
 10093  001788  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 10094  00178C  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 10095  001790  D000               	goto	l1195
 10096  001792                     l1195:
 10097  001792  0012               	return		;funcret
 10098  001794                     __end_of___ftpack:
 10099                           	opt stack 0
 10100                           tblptru	equ	0xFF8
 10101                           tblptrh	equ	0xFF7
 10102                           tblptrl	equ	0xFF6
 10103                           tablat	equ	0xFF5
 10104                           prodh	equ	0xFF4
 10105                           prodl	equ	0xFF3
 10106                           intcon	equ	0xFF2
 10107                           intcon2	equ	0xFF1
 10108                           postinc0	equ	0xFEE
 10109                           wreg	equ	0xFE8
 10110                           postdec1	equ	0xFE5
 10111                           plusw1	equ	0xFE3
 10112                           fsr1l	equ	0xFE1
 10113                           indf2	equ	0xFDF
 10114                           postinc2	equ	0xFDE
 10115                           postdec2	equ	0xFDD
 10116                           plusw2	equ	0xFDB
 10117                           fsr2h	equ	0xFDA
 10118                           fsr2l	equ	0xFD9
 10119                           status	equ	0xFD8
 10120                           
 10121 ;; *************** function _Wait_One_Sec *****************
 10122 ;; Defined at:
 10123 ;;		line 17 in file "Utils.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;		None
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;		None
 10128 ;; Return value:  Size  Location     Type
 10129 ;;		None               void
 10130 ;; Registers used:
 10131 ;;		wreg, status,2, cstack
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10141 ;;Total ram usage:        0 bytes
 10142 ;; Hardware stack levels used:    1
 10143 ;; Hardware stack levels required when called:    4
 10144 ;; This function calls:
 10145 ;;		_Wait_Half_Second
 10146 ;; This function is called by:
 10147 ;;		_Do_Beep
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           	psect	text54
 10152  0023BE                     __ptext54:
 10153                           	opt stack 0
 10154  0023BE                     _Wait_One_Sec:
 10155                           	opt stack 24
 10156                           
 10157                           ;Utils.c: 19: Wait_Half_Second();
 10158                           
 10159                           ;incstack = 0
 10160  0023BE  EC3E  F011         	call	_Wait_Half_Second	;wreg free
 10161                           
 10162                           ;Utils.c: 20: Wait_Half_Second();
 10163  0023C2  EC3E  F011         	call	_Wait_Half_Second	;wreg free
 10164  0023C6  0012               	return		;funcret
 10165  0023C8                     __end_of_Wait_One_Sec:
 10166                           	opt stack 0
 10167                           tblptru	equ	0xFF8
 10168                           tblptrh	equ	0xFF7
 10169                           tblptrl	equ	0xFF6
 10170                           tablat	equ	0xFF5
 10171                           prodh	equ	0xFF4
 10172                           prodl	equ	0xFF3
 10173                           intcon	equ	0xFF2
 10174                           intcon2	equ	0xFF1
 10175                           postinc0	equ	0xFEE
 10176                           wreg	equ	0xFE8
 10177                           postdec1	equ	0xFE5
 10178                           plusw1	equ	0xFE3
 10179                           fsr1l	equ	0xFE1
 10180                           indf2	equ	0xFDF
 10181                           postinc2	equ	0xFDE
 10182                           postdec2	equ	0xFDD
 10183                           plusw2	equ	0xFDB
 10184                           fsr2h	equ	0xFDA
 10185                           fsr2l	equ	0xFD9
 10186                           status	equ	0xFD8
 10187                           
 10188 ;; *************** function _Wait_Half_Second *****************
 10189 ;; Defined at:
 10190 ;;		line 37 in file "Utils.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;		None
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;		None
 10195 ;; Return value:  Size  Location     Type
 10196 ;;		None               void
 10197 ;; Registers used:
 10198 ;;		wreg, status,2
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10208 ;;Total ram usage:        0 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    3
 10211 ;; This function calls:
 10212 ;;		Nothing
 10213 ;; This function is called by:
 10214 ;;		_Wait_One_Sec
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text55
 10219  00227C                     __ptext55:
 10220                           	opt stack 0
 10221  00227C                     _Wait_Half_Second:
 10222                           	opt stack 24
 10223                           
 10224                           ;Utils.c: 39: T0CON = 0x03;
 10225                           
 10226                           ;incstack = 0
 10227  00227C  0E03               	movlw	3
 10228  00227E  6ED5               	movwf	4053,c	;volatile
 10229                           
 10230                           ;Utils.c: 40: TMR0L = 0xDB;
 10231  002280  0EDB               	movlw	219
 10232  002282  6ED6               	movwf	4054,c	;volatile
 10233                           
 10234                           ;Utils.c: 41: TMR0H = 0x0B;
 10235  002284  0E0B               	movlw	11
 10236  002286  6ED7               	movwf	4055,c	;volatile
 10237                           
 10238                           ;Utils.c: 42: INTCONbits.TMR0IF = 0;
 10239  002288  94F2               	bcf	intcon,2,c	;volatile
 10240                           
 10241                           ;Utils.c: 43: T0CONbits.TMR0ON = 1;
 10242  00228A  8ED5               	bsf	4053,7,c	;volatile
 10243                           
 10244                           ;Utils.c: 44: while (INTCONbits.TMR0IF == 0);
 10245  00228C  D000               	goto	l779
 10246  00228E                     l779:
 10247  00228E  A4F2               	btfss	intcon,2,c	;volatile
 10248  002290  D7FE               	goto	l779
 10249                           
 10250                           ;Utils.c: 45: T0CONbits.TMR0ON = 0;
 10251  002292  9ED5               	bcf	4053,7,c	;volatile
 10252  002294  0012               	return		;funcret
 10253  002296                     __end_of_Wait_Half_Second:
 10254                           	opt stack 0
 10255                           tblptru	equ	0xFF8
 10256                           tblptrh	equ	0xFF7
 10257                           tblptrl	equ	0xFF6
 10258                           tablat	equ	0xFF5
 10259                           prodh	equ	0xFF4
 10260                           prodl	equ	0xFF3
 10261                           intcon	equ	0xFF2
 10262                           intcon2	equ	0xFF1
 10263                           postinc0	equ	0xFEE
 10264                           wreg	equ	0xFE8
 10265                           postdec1	equ	0xFE5
 10266                           plusw1	equ	0xFE3
 10267                           fsr1l	equ	0xFE1
 10268                           indf2	equ	0xFDF
 10269                           postinc2	equ	0xFDE
 10270                           postdec2	equ	0xFDD
 10271                           plusw2	equ	0xFDB
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function _Deactivate_Buzzer *****************
 10277 ;; Defined at:
 10278 ;;		line 31 in file "Utils.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;		None
 10283 ;; Return value:  Size  Location     Type
 10284 ;;		None               void
 10285 ;; Registers used:
 10286 ;;		wreg, status,2
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;Total ram usage:        0 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    3
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_Do_Beep
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           	psect	text56
 10307  0023DC                     __ptext56:
 10308                           	opt stack 0
 10309  0023DC                     _Deactivate_Buzzer:
 10310                           	opt stack 25
 10311                           
 10312                           ;Utils.c: 33: CCP2CON = 0x00;
 10313                           
 10314                           ;incstack = 0
 10315  0023DC  0E00               	movlw	0
 10316  0023DE  6EBA               	movwf	4026,c	;volatile
 10317                           
 10318                           ;Utils.c: 34: PORTBbits.RB3 = 0;
 10319  0023E0  9681               	bcf	3969,3,c	;volatile
 10320  0023E2  0012               	return		;funcret
 10321  0023E4                     __end_of_Deactivate_Buzzer:
 10322                           	opt stack 0
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           intcon	equ	0xFF2
 10330                           intcon2	equ	0xFF1
 10331                           postinc0	equ	0xFEE
 10332                           wreg	equ	0xFE8
 10333                           postdec1	equ	0xFE5
 10334                           plusw1	equ	0xFE3
 10335                           fsr1l	equ	0xFE1
 10336                           indf2	equ	0xFDF
 10337                           postinc2	equ	0xFDE
 10338                           postdec2	equ	0xFDD
 10339                           plusw2	equ	0xFDB
 10340                           fsr2h	equ	0xFDA
 10341                           fsr2l	equ	0xFD9
 10342                           status	equ	0xFD8
 10343                           
 10344 ;; *************** function _Activate_Buzzer *****************
 10345 ;; Defined at:
 10346 ;;		line 23 in file "Utils.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;		None
 10349 ;; Auto vars:     Size  Location     Type
 10350 ;;		None
 10351 ;; Return value:  Size  Location     Type
 10352 ;;		None               void
 10353 ;; Registers used:
 10354 ;;		wreg, status,2
 10355 ;; Tracked objects:
 10356 ;;		On entry : 0/0
 10357 ;;		On exit  : 0/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10364 ;;Total ram usage:        0 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; Hardware stack levels required when called:    3
 10367 ;; This function calls:
 10368 ;;		Nothing
 10369 ;; This function is called by:
 10370 ;;		_Do_Beep
 10371 ;; This function uses a non-reentrant model
 10372 ;;
 10373                           
 10374                           	psect	text57
 10375  002326                     __ptext57:
 10376                           	opt stack 0
 10377  002326                     _Activate_Buzzer:
 10378                           	opt stack 25
 10379                           
 10380                           ;Utils.c: 25: PR2 = 0b11111001;
 10381                           
 10382                           ;incstack = 0
 10383  002326  0EF9               	movlw	249
 10384  002328  6ECB               	movwf	4043,c	;volatile
 10385                           
 10386                           ;Utils.c: 26: T2CON = 0b00000101;
 10387  00232A  0E05               	movlw	5
 10388  00232C  6ECA               	movwf	4042,c	;volatile
 10389                           
 10390                           ;Utils.c: 27: CCPR2L = 0b01001010;
 10391  00232E  0E4A               	movlw	74
 10392  002330  6EBB               	movwf	4027,c	;volatile
 10393                           
 10394                           ;Utils.c: 28: CCP2CON = 0b00111100;
 10395  002332  0E3C               	movlw	60
 10396  002334  6EBA               	movwf	4026,c	;volatile
 10397  002336  0012               	return		;funcret
 10398  002338                     __end_of_Activate_Buzzer:
 10399                           	opt stack 0
 10400                           tblptru	equ	0xFF8
 10401                           tblptrh	equ	0xFF7
 10402                           tblptrl	equ	0xFF6
 10403                           tablat	equ	0xFF5
 10404                           prodh	equ	0xFF4
 10405                           prodl	equ	0xFF3
 10406                           intcon	equ	0xFF2
 10407                           intcon2	equ	0xFF1
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           postdec1	equ	0xFE5
 10411                           plusw1	equ	0xFE3
 10412                           fsr1l	equ	0xFE1
 10413                           indf2	equ	0xFDF
 10414                           postinc2	equ	0xFDE
 10415                           postdec2	equ	0xFDD
 10416                           plusw2	equ	0xFDB
 10417                           fsr2h	equ	0xFDA
 10418                           fsr2l	equ	0xFD9
 10419                           status	equ	0xFD8
 10420                           
 10421 ;; *************** function _DS3231_Setup_Time *****************
 10422 ;; Defined at:
 10423 ;;		line 66 in file "I2C_Support.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;		None
 10428 ;; Return value:  Size  Location     Type
 10429 ;;		None               void
 10430 ;; Registers used:
 10431 ;;		wreg, status,2, status,0, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;Total ram usage:        0 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    5
 10444 ;; This function calls:
 10445 ;;		_I2C_Start
 10446 ;;		_I2C_Stop
 10447 ;;		_I2C_Write
 10448 ;; This function is called by:
 10449 ;;		_main
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text58
 10454  001C16                     __ptext58:
 10455                           	opt stack 0
 10456  001C16                     _DS3231_Setup_Time:
 10457                           	opt stack 25
 10458                           
 10459                           ;I2C_Support.c: 71: second = 0x00;
 10460                           
 10461                           ;incstack = 0
 10462  001C16  0E00               	movlw	0
 10463  001C18  6E62               	movwf	_second,c
 10464                           
 10465                           ;I2C_Support.c: 72: minute = 0x00;
 10466  001C1A  0E00               	movlw	0
 10467  001C1C  6E5F               	movwf	_minute,c
 10468                           
 10469                           ;I2C_Support.c: 73: hour = 0x00;
 10470  001C1E  0E00               	movlw	0
 10471  001C20  6E5E               	movwf	_hour,c
 10472                           
 10473                           ;I2C_Support.c: 74: dow = 0x04;
 10474  001C22  0E04               	movlw	4
 10475  001C24  6E5B               	movwf	_dow,c
 10476                           
 10477                           ;I2C_Support.c: 75: day = 0x28;
 10478  001C26  0E28               	movlw	40
 10479  001C28  6E5A               	movwf	_day,c
 10480                           
 10481                           ;I2C_Support.c: 76: month = 0x04;
 10482  001C2A  0E04               	movlw	4
 10483  001C2C  6E60               	movwf	_month,c
 10484                           
 10485                           ;I2C_Support.c: 77: year = 0x22;
 10486  001C2E  0E22               	movlw	34
 10487  001C30  6E6C               	movwf	_year,c
 10488                           
 10489                           ;I2C_Support.c: 79: I2C_Start();
 10490  001C32  ECA5  F011         	call	_I2C_Start	;wreg free
 10491                           
 10492                           ;I2C_Support.c: 80: I2C_Write((0x68 << 1) | 0);
 10493  001C36  0ED0               	movlw	208
 10494  001C38  ECF6  F00F         	call	_I2C_Write
 10495                           
 10496                           ;I2C_Support.c: 81: I2C_Write(0x00);
 10497  001C3C  0E00               	movlw	0
 10498  001C3E  ECF6  F00F         	call	_I2C_Write
 10499                           
 10500                           ;I2C_Support.c: 82: I2C_Write(second);
 10501  001C42  5062               	movf	_second,w,c
 10502  001C44  ECF6  F00F         	call	_I2C_Write
 10503                           
 10504                           ;I2C_Support.c: 83: I2C_Write(minute);
 10505  001C48  505F               	movf	_minute,w,c
 10506  001C4A  ECF6  F00F         	call	_I2C_Write
 10507                           
 10508                           ;I2C_Support.c: 84: I2C_Write(hour);
 10509  001C4E  505E               	movf	_hour,w,c
 10510  001C50  ECF6  F00F         	call	_I2C_Write
 10511                           
 10512                           ;I2C_Support.c: 85: I2C_Write(dow);
 10513  001C54  505B               	movf	_dow,w,c
 10514  001C56  ECF6  F00F         	call	_I2C_Write
 10515                           
 10516                           ;I2C_Support.c: 86: I2C_Write(day);
 10517  001C5A  505A               	movf	_day,w,c
 10518  001C5C  ECF6  F00F         	call	_I2C_Write
 10519                           
 10520                           ;I2C_Support.c: 87: I2C_Write(month);
 10521  001C60  5060               	movf	_month,w,c
 10522  001C62  ECF6  F00F         	call	_I2C_Write
 10523                           
 10524                           ;I2C_Support.c: 88: I2C_Write(year);
 10525  001C66  506C               	movf	_year,w,c
 10526  001C68  ECF6  F00F         	call	_I2C_Write
 10527                           
 10528                           ;I2C_Support.c: 89: I2C_Stop();
 10529  001C6C  EC9C  F011         	call	_I2C_Stop	;wreg free
 10530  001C70  0012               	return		;funcret
 10531  001C72                     __end_of_DS3231_Setup_Time:
 10532                           	opt stack 0
 10533                           tblptru	equ	0xFF8
 10534                           tblptrh	equ	0xFF7
 10535                           tblptrl	equ	0xFF6
 10536                           tablat	equ	0xFF5
 10537                           prodh	equ	0xFF4
 10538                           prodl	equ	0xFF3
 10539                           intcon	equ	0xFF2
 10540                           intcon2	equ	0xFF1
 10541                           postinc0	equ	0xFEE
 10542                           wreg	equ	0xFE8
 10543                           postdec1	equ	0xFE5
 10544                           plusw1	equ	0xFE3
 10545                           fsr1l	equ	0xFE1
 10546                           indf2	equ	0xFDF
 10547                           postinc2	equ	0xFDE
 10548                           postdec2	equ	0xFDD
 10549                           plusw2	equ	0xFDB
 10550                           fsr2h	equ	0xFDA
 10551                           fsr2l	equ	0xFD9
 10552                           status	equ	0xFD8
 10553                           
 10554 ;; *************** function _DS3231_Read_Time *****************
 10555 ;; Defined at:
 10556 ;;		line 45 in file "I2C_Support.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  Data_Ret        1    0        unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;		None               void
 10563 ;; Registers used:
 10564 ;;		wreg, status,2, status,0, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10574 ;;Total ram usage:        0 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    6
 10577 ;; This function calls:
 10578 ;;		_I2C_ReStart
 10579 ;;		_I2C_Read
 10580 ;;		_I2C_Start
 10581 ;;		_I2C_Stop
 10582 ;;		_I2C_Write
 10583 ;; This function is called by:
 10584 ;;		_main
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           	psect	text59
 10589  001C72                     __ptext59:
 10590                           	opt stack 0
 10591  001C72                     _DS3231_Read_Time:
 10592                           	opt stack 24
 10593                           
 10594                           ;I2C_Support.c: 50: char Data_Ret;
 10595                           ;I2C_Support.c: 51: I2C_Start();
 10596                           
 10597                           ;incstack = 0
 10598  001C72  ECA5  F011         	call	_I2C_Start	;wreg free
 10599                           
 10600                           ;I2C_Support.c: 52: I2C_Write((0x68 << 1) | 0);
 10601  001C76  0ED0               	movlw	208
 10602  001C78  ECF6  F00F         	call	_I2C_Write
 10603                           
 10604                           ;I2C_Support.c: 53: I2C_Write(0x00);
 10605  001C7C  0E00               	movlw	0
 10606  001C7E  ECF6  F00F         	call	_I2C_Write
 10607                           
 10608                           ;I2C_Support.c: 54: I2C_ReStart();
 10609  001C82  EC57  F011         	call	_I2C_ReStart	;wreg free
 10610                           
 10611                           ;I2C_Support.c: 55: I2C_Write((0x68 << 1) | 1);
 10612  001C86  0ED1               	movlw	209
 10613  001C88  ECF6  F00F         	call	_I2C_Write
 10614                           
 10615                           ;I2C_Support.c: 56: second = I2C_Read(1);
 10616  001C8C  0E01               	movlw	1
 10617  001C8E  EC75  F00F         	call	_I2C_Read
 10618  001C92  6E62               	movwf	_second,c
 10619                           
 10620                           ;I2C_Support.c: 57: minute = I2C_Read(1);
 10621  001C94  0E01               	movlw	1
 10622  001C96  EC75  F00F         	call	_I2C_Read
 10623  001C9A  6E5F               	movwf	_minute,c
 10624                           
 10625                           ;I2C_Support.c: 58: hour = I2C_Read(1);
 10626  001C9C  0E01               	movlw	1
 10627  001C9E  EC75  F00F         	call	_I2C_Read
 10628  001CA2  6E5E               	movwf	_hour,c
 10629                           
 10630                           ;I2C_Support.c: 59: dow = I2C_Read(1);
 10631  001CA4  0E01               	movlw	1
 10632  001CA6  EC75  F00F         	call	_I2C_Read
 10633  001CAA  6E5B               	movwf	_dow,c
 10634                           
 10635                           ;I2C_Support.c: 60: day = I2C_Read(1);
 10636  001CAC  0E01               	movlw	1
 10637  001CAE  EC75  F00F         	call	_I2C_Read
 10638  001CB2  6E5A               	movwf	_day,c
 10639                           
 10640                           ;I2C_Support.c: 61: month = I2C_Read(1);
 10641  001CB4  0E01               	movlw	1
 10642  001CB6  EC75  F00F         	call	_I2C_Read
 10643  001CBA  6E60               	movwf	_month,c
 10644                           
 10645                           ;I2C_Support.c: 62: year = I2C_Read(0);
 10646  001CBC  0E00               	movlw	0
 10647  001CBE  EC75  F00F         	call	_I2C_Read
 10648  001CC2  6E6C               	movwf	_year,c
 10649                           
 10650                           ;I2C_Support.c: 63: I2C_Stop();
 10651  001CC4  EC9C  F011         	call	_I2C_Stop	;wreg free
 10652  001CC8  0012               	return		;funcret
 10653  001CCA                     __end_of_DS3231_Read_Time:
 10654                           	opt stack 0
 10655                           tblptru	equ	0xFF8
 10656                           tblptrh	equ	0xFF7
 10657                           tblptrl	equ	0xFF6
 10658                           tablat	equ	0xFF5
 10659                           prodh	equ	0xFF4
 10660                           prodl	equ	0xFF3
 10661                           intcon	equ	0xFF2
 10662                           intcon2	equ	0xFF1
 10663                           postinc0	equ	0xFEE
 10664                           wreg	equ	0xFE8
 10665                           postdec1	equ	0xFE5
 10666                           plusw1	equ	0xFE3
 10667                           fsr1l	equ	0xFE1
 10668                           indf2	equ	0xFDF
 10669                           postinc2	equ	0xFDE
 10670                           postdec2	equ	0xFDD
 10671                           plusw2	equ	0xFDB
 10672                           fsr2h	equ	0xFDA
 10673                           fsr2l	equ	0xFD9
 10674                           status	equ	0xFD8
 10675                           
 10676 ;; *************** function _DS1621_Read_Temp *****************
 10677 ;; Defined at:
 10678 ;;		line 29 in file "I2C_Support.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;		None
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;  Data_Ret        1   21[COMRAM] unsigned char 
 10683 ;; Return value:  Size  Location     Type
 10684 ;;                  2   19[COMRAM] int 
 10685 ;; Registers used:
 10686 ;;		wreg, status,2, status,0, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;Total ram usage:        3 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    6
 10699 ;; This function calls:
 10700 ;;		_I2C_ReStart
 10701 ;;		_I2C_Read
 10702 ;;		_I2C_Start
 10703 ;;		_I2C_Stop
 10704 ;;		_I2C_Write
 10705 ;; This function is called by:
 10706 ;;		_main
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           	psect	text60
 10711  0020C0                     __ptext60:
 10712                           	opt stack 0
 10713  0020C0                     _DS1621_Read_Temp:
 10714                           	opt stack 24
 10715                           
 10716                           ;I2C_Support.c: 34: char Data_Ret;
 10717                           ;I2C_Support.c: 35: I2C_Start();
 10718                           
 10719                           ;incstack = 0
 10720  0020C0  ECA5  F011         	call	_I2C_Start	;wreg free
 10721                           
 10722                           ;I2C_Support.c: 36: I2C_Write((0x48 << 1) | 0);
 10723  0020C4  0E90               	movlw	144
 10724  0020C6  ECF6  F00F         	call	_I2C_Write
 10725                           
 10726                           ;I2C_Support.c: 37: I2C_Write(0xAA);
 10727  0020CA  0EAA               	movlw	170
 10728  0020CC  ECF6  F00F         	call	_I2C_Write
 10729                           
 10730                           ;I2C_Support.c: 38: I2C_ReStart();
 10731  0020D0  EC57  F011         	call	_I2C_ReStart	;wreg free
 10732                           
 10733                           ;I2C_Support.c: 39: I2C_Write((0x48 << 1) | 1);
 10734  0020D4  0E91               	movlw	145
 10735  0020D6  ECF6  F00F         	call	_I2C_Write
 10736                           
 10737                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 10738  0020DA  0E00               	movlw	0
 10739  0020DC  EC75  F00F         	call	_I2C_Read
 10740  0020E0  6E16               	movwf	DS1621_Read_Temp@Data_Ret,c
 10741                           
 10742                           ;I2C_Support.c: 41: I2C_Stop();
 10743  0020E2  EC9C  F011         	call	_I2C_Stop	;wreg free
 10744                           
 10745                           ;I2C_Support.c: 42: return Data_Ret;
 10746  0020E6  C016  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10747  0020EA  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10748  0020EC  D000               	goto	l187
 10749  0020EE                     l187:
 10750  0020EE  0012               	return		;funcret
 10751  0020F0                     __end_of_DS1621_Read_Temp:
 10752                           	opt stack 0
 10753                           tblptru	equ	0xFF8
 10754                           tblptrh	equ	0xFF7
 10755                           tblptrl	equ	0xFF6
 10756                           tablat	equ	0xFF5
 10757                           prodh	equ	0xFF4
 10758                           prodl	equ	0xFF3
 10759                           intcon	equ	0xFF2
 10760                           intcon2	equ	0xFF1
 10761                           postinc0	equ	0xFEE
 10762                           wreg	equ	0xFE8
 10763                           postdec1	equ	0xFE5
 10764                           plusw1	equ	0xFE3
 10765                           fsr1l	equ	0xFE1
 10766                           indf2	equ	0xFDF
 10767                           postinc2	equ	0xFDE
 10768                           postdec2	equ	0xFDD
 10769                           plusw2	equ	0xFDB
 10770                           fsr2h	equ	0xFDA
 10771                           fsr2l	equ	0xFD9
 10772                           status	equ	0xFD8
 10773                           
 10774 ;; *************** function _I2C_Write *****************
 10775 ;; Defined at:
 10776 ;;		line 42 in file "I2C_Soft.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;  outByte         1    wreg     unsigned char 
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  outByte         1   16[COMRAM] unsigned char 
 10781 ;;  n               1   17[COMRAM] unsigned char 
 10782 ;; Return value:  Size  Location     Type
 10783 ;;		None               void
 10784 ;; Registers used:
 10785 ;;		wreg, status,2, status,0, cstack
 10786 ;; Tracked objects:
 10787 ;;		On entry : 0/0
 10788 ;;		On exit  : 0/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;Total ram usage:        2 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    4
 10798 ;; This function calls:
 10799 ;;		_i2cHighScl
 10800 ;;		_i2cHighSda
 10801 ;;		_i2cLowScl
 10802 ;;		_i2cLowSda
 10803 ;; This function is called by:
 10804 ;;		_I2C_Write_Cmd_Only
 10805 ;;		_I2C_Write_Cmd_Write_Data
 10806 ;;		_DS1621_Read_Temp
 10807 ;;		_DS3231_Read_Time
 10808 ;;		_DS3231_Setup_Time
 10809 ;;		_I2C_Write_Address_Read_One_Byte
 10810 ;;		_I2C_Write_Address_Write_One_Byte
 10811 ;;		_I2C_Write_Cmd_Read_One_Byte
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           	psect	text61
 10816  001FEC                     __ptext61:
 10817                           	opt stack 0
 10818  001FEC                     _I2C_Write:
 10819                           	opt stack 23
 10820                           
 10821                           ;incstack = 0
 10822                           ;I2C_Write@outByte stored from wreg
 10823  001FEC  6E11               	movwf	I2C_Write@outByte,c
 10824                           
 10825                           ;I2C_Soft.c: 44: unsigned char n;
 10826                           ;I2C_Soft.c: 45: for(n=0; n<8; n++)
 10827  001FEE  0E00               	movlw	0
 10828  001FF0  6E12               	movwf	I2C_Write@n,c
 10829  001FF2                     l5321:
 10830  001FF2  0E07               	movlw	7
 10831  001FF4  6412               	cpfsgt	I2C_Write@n,c
 10832  001FF6  D001               	goto	l107
 10833  001FF8  D011               	goto	l5339
 10834  001FFA                     l107:
 10835                           
 10836                           ;I2C_Soft.c: 46: {
 10837                           ;I2C_Soft.c: 47: if(outByte&0x80) i2cHighSda();
 10838  001FFA  AE11               	btfss	I2C_Write@outByte,7,c
 10839  001FFC  D003               	goto	l5327
 10840  001FFE  ECF6  F011         	call	_i2cHighSda	;wreg free
 10841  002002  D003               	goto	l5329
 10842  002004                     l5327:
 10843                           
 10844                           ;I2C_Soft.c: 48: else i2cLowSda();
 10845  002004  ECE9  F011         	call	_i2cLowSda	;wreg free
 10846  002008  D000               	goto	l5329
 10847  00200A                     l5329:
 10848                           
 10849                           ;I2C_Soft.c: 49: i2cHighScl();
 10850  00200A  ECCE  F011         	call	_i2cHighScl	;wreg free
 10851                           
 10852                           ;I2C_Soft.c: 50: i2cLowScl();
 10853  00200E  ECF2  F011         	call	_i2cLowScl	;wreg free
 10854                           
 10855                           ;I2C_Soft.c: 51: outByte = outByte << 1;
 10856  002012  5011               	movf	I2C_Write@outByte,w,c
 10857  002014  2411               	addwf	I2C_Write@outByte,w,c
 10858  002016  6E11               	movwf	I2C_Write@outByte,c
 10859  002018  2A12               	incf	I2C_Write@n,f,c
 10860  00201A  D7EB               	goto	l5321
 10861  00201C                     l5339:
 10862                           
 10863                           ;I2C_Soft.c: 52: }
 10864                           ;I2C_Soft.c: 53: i2cHighSda();
 10865  00201C  ECF6  F011         	call	_i2cHighSda	;wreg free
 10866                           
 10867                           ;I2C_Soft.c: 54: i2cHighScl();
 10868  002020  ECCE  F011         	call	_i2cHighScl	;wreg free
 10869                           
 10870                           ;I2C_Soft.c: 55: i2cLowScl();
 10871  002024  ECF2  F011         	call	_i2cLowScl	;wreg free
 10872  002028  0012               	return		;funcret
 10873  00202A                     __end_of_I2C_Write:
 10874                           	opt stack 0
 10875                           tblptru	equ	0xFF8
 10876                           tblptrh	equ	0xFF7
 10877                           tblptrl	equ	0xFF6
 10878                           tablat	equ	0xFF5
 10879                           prodh	equ	0xFF4
 10880                           prodl	equ	0xFF3
 10881                           intcon	equ	0xFF2
 10882                           intcon2	equ	0xFF1
 10883                           postinc0	equ	0xFEE
 10884                           wreg	equ	0xFE8
 10885                           postdec1	equ	0xFE5
 10886                           plusw1	equ	0xFE3
 10887                           fsr1l	equ	0xFE1
 10888                           indf2	equ	0xFDF
 10889                           postinc2	equ	0xFDE
 10890                           postdec2	equ	0xFDD
 10891                           plusw2	equ	0xFDB
 10892                           fsr2h	equ	0xFDA
 10893                           fsr2l	equ	0xFD9
 10894                           status	equ	0xFD8
 10895                           
 10896 ;; *************** function _I2C_Stop *****************
 10897 ;; Defined at:
 10898 ;;		line 89 in file "I2C_Soft.c"
 10899 ;; Parameters:    Size  Location     Type
 10900 ;;		None
 10901 ;; Auto vars:     Size  Location     Type
 10902 ;;		None
 10903 ;; Return value:  Size  Location     Type
 10904 ;;		None               void
 10905 ;; Registers used:
 10906 ;;		wreg, cstack
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;Total ram usage:        0 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    4
 10919 ;; This function calls:
 10920 ;;		_i2cHighScl
 10921 ;;		_i2cHighSda
 10922 ;;		_i2cLowScl
 10923 ;;		_i2cLowSda
 10924 ;; This function is called by:
 10925 ;;		_I2C_Write_Cmd_Only
 10926 ;;		_I2C_Write_Cmd_Write_Data
 10927 ;;		_DS1621_Read_Temp
 10928 ;;		_DS3231_Read_Time
 10929 ;;		_DS3231_Setup_Time
 10930 ;;		_I2C_Write_Address_Read_One_Byte
 10931 ;;		_I2C_Write_Address_Write_One_Byte
 10932 ;;		_I2C_Write_Cmd_Read_One_Byte
 10933 ;; This function uses a non-reentrant model
 10934 ;;
 10935                           
 10936                           	psect	text62
 10937  002338                     __ptext62:
 10938                           	opt stack 0
 10939  002338                     _I2C_Stop:
 10940                           	opt stack 23
 10941                           
 10942                           ;I2C_Soft.c: 91: i2cLowScl();
 10943                           
 10944                           ;incstack = 0
 10945  002338  ECF2  F011         	call	_i2cLowScl	;wreg free
 10946                           
 10947                           ;I2C_Soft.c: 92: i2cLowSda();
 10948  00233C  ECE9  F011         	call	_i2cLowSda	;wreg free
 10949                           
 10950                           ;I2C_Soft.c: 93: i2cHighScl();
 10951  002340  ECCE  F011         	call	_i2cHighScl	;wreg free
 10952                           
 10953                           ;I2C_Soft.c: 94: i2cHighSda();
 10954  002344  ECF6  F011         	call	_i2cHighSda	;wreg free
 10955  002348  0012               	return		;funcret
 10956  00234A                     __end_of_I2C_Stop:
 10957                           	opt stack 0
 10958                           tblptru	equ	0xFF8
 10959                           tblptrh	equ	0xFF7
 10960                           tblptrl	equ	0xFF6
 10961                           tablat	equ	0xFF5
 10962                           prodh	equ	0xFF4
 10963                           prodl	equ	0xFF3
 10964                           intcon	equ	0xFF2
 10965                           intcon2	equ	0xFF1
 10966                           postinc0	equ	0xFEE
 10967                           wreg	equ	0xFE8
 10968                           postdec1	equ	0xFE5
 10969                           plusw1	equ	0xFE3
 10970                           fsr1l	equ	0xFE1
 10971                           indf2	equ	0xFDF
 10972                           postinc2	equ	0xFDE
 10973                           postdec2	equ	0xFDD
 10974                           plusw2	equ	0xFDB
 10975                           fsr2h	equ	0xFDA
 10976                           fsr2l	equ	0xFD9
 10977                           status	equ	0xFD8
 10978                           
 10979 ;; *************** function _I2C_Start *****************
 10980 ;; Defined at:
 10981 ;;		line 72 in file "I2C_Soft.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;		None
 10984 ;; Auto vars:     Size  Location     Type
 10985 ;;		None
 10986 ;; Return value:  Size  Location     Type
 10987 ;;		None               void
 10988 ;; Registers used:
 10989 ;;		wreg, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;Total ram usage:        0 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    4
 11002 ;; This function calls:
 11003 ;;		_i2cHighScl
 11004 ;;		_i2cHighSda
 11005 ;;		_i2cLowScl
 11006 ;;		_i2cLowSda
 11007 ;; This function is called by:
 11008 ;;		_I2C_Write_Cmd_Only
 11009 ;;		_I2C_Write_Cmd_Write_Data
 11010 ;;		_DS1621_Read_Temp
 11011 ;;		_DS3231_Read_Time
 11012 ;;		_DS3231_Setup_Time
 11013 ;;		_I2C_Write_Address_Read_One_Byte
 11014 ;;		_I2C_Write_Address_Write_One_Byte
 11015 ;;		_I2C_Write_Cmd_Read_One_Byte
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           	psect	text63
 11020  00234A                     __ptext63:
 11021                           	opt stack 0
 11022  00234A                     _I2C_Start:
 11023                           	opt stack 23
 11024                           
 11025                           ;I2C_Soft.c: 74: i2cHighSda();
 11026                           
 11027                           ;incstack = 0
 11028  00234A  ECF6  F011         	call	_i2cHighSda	;wreg free
 11029                           
 11030                           ;I2C_Soft.c: 75: i2cHighScl();
 11031  00234E  ECCE  F011         	call	_i2cHighScl	;wreg free
 11032                           
 11033                           ;I2C_Soft.c: 76: i2cLowSda();
 11034  002352  ECE9  F011         	call	_i2cLowSda	;wreg free
 11035                           
 11036                           ;I2C_Soft.c: 77: i2cLowScl();
 11037  002356  ECF2  F011         	call	_i2cLowScl	;wreg free
 11038  00235A  0012               	return		;funcret
 11039  00235C                     __end_of_I2C_Start:
 11040                           	opt stack 0
 11041                           tblptru	equ	0xFF8
 11042                           tblptrh	equ	0xFF7
 11043                           tblptrl	equ	0xFF6
 11044                           tablat	equ	0xFF5
 11045                           prodh	equ	0xFF4
 11046                           prodl	equ	0xFF3
 11047                           intcon	equ	0xFF2
 11048                           intcon2	equ	0xFF1
 11049                           postinc0	equ	0xFEE
 11050                           wreg	equ	0xFE8
 11051                           postdec1	equ	0xFE5
 11052                           plusw1	equ	0xFE3
 11053                           fsr1l	equ	0xFE1
 11054                           indf2	equ	0xFDF
 11055                           postinc2	equ	0xFDE
 11056                           postdec2	equ	0xFDD
 11057                           plusw2	equ	0xFDB
 11058                           fsr2h	equ	0xFDA
 11059                           fsr2l	equ	0xFD9
 11060                           status	equ	0xFD8
 11061                           
 11062 ;; *************** function _I2C_Read *****************
 11063 ;; Defined at:
 11064 ;;		line 21 in file "I2C_Soft.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;  ack             1    wreg     unsigned char 
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;  ack             1   16[COMRAM] unsigned char 
 11069 ;;  inByte          1   18[COMRAM] unsigned char 
 11070 ;;  n               1   17[COMRAM] unsigned char 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  1    wreg      unsigned char 
 11073 ;; Registers used:
 11074 ;;		wreg, status,2, status,0, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11081 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11084 ;;Total ram usage:        3 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:    5
 11087 ;; This function calls:
 11088 ;;		_i2cAck
 11089 ;;		_i2cHighScl
 11090 ;;		_i2cHighSda
 11091 ;;		_i2cLowScl
 11092 ;;		_i2cNack
 11093 ;; This function is called by:
 11094 ;;		_DS1621_Read_Temp
 11095 ;;		_DS3231_Read_Time
 11096 ;;		_I2C_Write_Address_Read_One_Byte
 11097 ;;		_I2C_Write_Cmd_Read_One_Byte
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           	psect	text64
 11102  001EEA                     __ptext64:
 11103                           	opt stack 0
 11104  001EEA                     _I2C_Read:
 11105                           	opt stack 24
 11106                           
 11107                           ;incstack = 0
 11108                           ;I2C_Read@ack stored from wreg
 11109  001EEA  6E11               	movwf	I2C_Read@ack,c
 11110                           
 11111                           ;I2C_Soft.c: 23: unsigned char inByte, n;
 11112                           ;I2C_Soft.c: 24: i2cHighSda();
 11113  001EEC  ECF6  F011         	call	_i2cHighSda	;wreg free
 11114                           
 11115                           ;I2C_Soft.c: 25: for (n=0; n<8; n++)
 11116  001EF0  0E00               	movlw	0
 11117  001EF2  6E12               	movwf	I2C_Read@n,c
 11118  001EF4                     l6049:
 11119  001EF4  0E07               	movlw	7
 11120  001EF6  6412               	cpfsgt	I2C_Read@n,c
 11121  001EF8  D001               	goto	l6053
 11122  001EFA  D00F               	goto	l6067
 11123  001EFC                     l6053:
 11124                           
 11125                           ;I2C_Soft.c: 26: {
 11126                           ;I2C_Soft.c: 27: i2cHighScl();
 11127  001EFC  ECCE  F011         	call	_i2cHighScl	;wreg free
 11128                           
 11129                           ;I2C_Soft.c: 29: if (PORTDbits.RD7)
 11130  001F00  AE83               	btfss	3971,7,c	;volatile
 11131  001F02  D003               	goto	l6059
 11132                           
 11133                           ;I2C_Soft.c: 30: inByte = (inByte << 1) | 0x01;
 11134  001F04  80D8               	bsf	status,0,c
 11135  001F06  3613               	rlcf	I2C_Read@inByte,f,c
 11136  001F08  D004               	goto	l6061
 11137  001F0A                     l6059:
 11138                           
 11139                           ;I2C_Soft.c: 31: else
 11140                           ;I2C_Soft.c: 32: inByte = inByte << 1;
 11141  001F0A  5013               	movf	I2C_Read@inByte,w,c
 11142  001F0C  2413               	addwf	I2C_Read@inByte,w,c
 11143  001F0E  6E13               	movwf	I2C_Read@inByte,c
 11144  001F10  D000               	goto	l6061
 11145  001F12                     l6061:
 11146                           
 11147                           ;I2C_Soft.c: 33: i2cLowScl();
 11148  001F12  ECF2  F011         	call	_i2cLowScl	;wreg free
 11149  001F16  2A12               	incf	I2C_Read@n,f,c
 11150  001F18  D7ED               	goto	l6049
 11151  001F1A                     l6067:
 11152                           
 11153                           ;I2C_Soft.c: 34: }
 11154                           ;I2C_Soft.c: 35: if (ack) i2cAck();
 11155  001F1A  5011               	movf	I2C_Read@ack,w,c
 11156  001F1C  B4D8               	btfsc	status,2,c
 11157  001F1E  D003               	goto	l6071
 11158  001F20  ECAE  F011         	call	_i2cAck	;wreg free
 11159  001F24  D003               	goto	l6073
 11160  001F26                     l6071:
 11161                           
 11162                           ;I2C_Soft.c: 36: else i2cNack();
 11163  001F26  ECE4  F011         	call	_i2cNack	;wreg free
 11164  001F2A  D000               	goto	l6073
 11165  001F2C                     l6073:
 11166                           
 11167                           ;I2C_Soft.c: 39: return(inByte);
 11168  001F2C  5013               	movf	I2C_Read@inByte,w,c
 11169  001F2E  D000               	goto	l104
 11170  001F30                     l104:
 11171  001F30  0012               	return		;funcret
 11172  001F32                     __end_of_I2C_Read:
 11173                           	opt stack 0
 11174                           tblptru	equ	0xFF8
 11175                           tblptrh	equ	0xFF7
 11176                           tblptrl	equ	0xFF6
 11177                           tablat	equ	0xFF5
 11178                           prodh	equ	0xFF4
 11179                           prodl	equ	0xFF3
 11180                           intcon	equ	0xFF2
 11181                           intcon2	equ	0xFF1
 11182                           postinc0	equ	0xFEE
 11183                           wreg	equ	0xFE8
 11184                           postdec1	equ	0xFE5
 11185                           plusw1	equ	0xFE3
 11186                           fsr1l	equ	0xFE1
 11187                           indf2	equ	0xFDF
 11188                           postinc2	equ	0xFDE
 11189                           postdec2	equ	0xFDD
 11190                           plusw2	equ	0xFDB
 11191                           fsr2h	equ	0xFDA
 11192                           fsr2l	equ	0xFD9
 11193                           status	equ	0xFD8
 11194                           
 11195 ;; *************** function _i2cNack *****************
 11196 ;; Defined at:
 11197 ;;		line 58 in file "I2C_Soft.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;		None
 11200 ;; Auto vars:     Size  Location     Type
 11201 ;;		None
 11202 ;; Return value:  Size  Location     Type
 11203 ;;		None               void
 11204 ;; Registers used:
 11205 ;;		wreg, cstack
 11206 ;; Tracked objects:
 11207 ;;		On entry : 0/0
 11208 ;;		On exit  : 0/0
 11209 ;;		Unchanged: 0/0
 11210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;Total ram usage:        0 bytes
 11216 ;; Hardware stack levels used:    1
 11217 ;; Hardware stack levels required when called:    4
 11218 ;; This function calls:
 11219 ;;		_i2cHighScl
 11220 ;;		_i2cLowScl
 11221 ;; This function is called by:
 11222 ;;		_I2C_Read
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text65
 11227  0023C8                     __ptext65:
 11228                           	opt stack 0
 11229  0023C8                     _i2cNack:
 11230                           	opt stack 24
 11231                           
 11232                           ;I2C_Soft.c: 60: i2cHighScl();
 11233                           
 11234                           ;incstack = 0
 11235  0023C8  ECCE  F011         	call	_i2cHighScl	;wreg free
 11236                           
 11237                           ;I2C_Soft.c: 61: i2cLowScl();
 11238  0023CC  ECF2  F011         	call	_i2cLowScl	;wreg free
 11239  0023D0  0012               	return		;funcret
 11240  0023D2                     __end_of_i2cNack:
 11241                           	opt stack 0
 11242                           tblptru	equ	0xFF8
 11243                           tblptrh	equ	0xFF7
 11244                           tblptrl	equ	0xFF6
 11245                           tablat	equ	0xFF5
 11246                           prodh	equ	0xFF4
 11247                           prodl	equ	0xFF3
 11248                           intcon	equ	0xFF2
 11249                           intcon2	equ	0xFF1
 11250                           postinc0	equ	0xFEE
 11251                           wreg	equ	0xFE8
 11252                           postdec1	equ	0xFE5
 11253                           plusw1	equ	0xFE3
 11254                           fsr1l	equ	0xFE1
 11255                           indf2	equ	0xFDF
 11256                           postinc2	equ	0xFDE
 11257                           postdec2	equ	0xFDD
 11258                           plusw2	equ	0xFDB
 11259                           fsr2h	equ	0xFDA
 11260                           fsr2l	equ	0xFD9
 11261                           status	equ	0xFD8
 11262                           
 11263 ;; *************** function _i2cAck *****************
 11264 ;; Defined at:
 11265 ;;		line 64 in file "I2C_Soft.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;		None
 11270 ;; Return value:  Size  Location     Type
 11271 ;;		None               void
 11272 ;; Registers used:
 11273 ;;		wreg, cstack
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;Total ram usage:        0 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    4
 11286 ;; This function calls:
 11287 ;;		_i2cHighScl
 11288 ;;		_i2cHighSda
 11289 ;;		_i2cLowScl
 11290 ;;		_i2cLowSda
 11291 ;; This function is called by:
 11292 ;;		_I2C_Read
 11293 ;; This function uses a non-reentrant model
 11294 ;;
 11295                           
 11296                           	psect	text66
 11297  00235C                     __ptext66:
 11298                           	opt stack 0
 11299  00235C                     _i2cAck:
 11300                           	opt stack 24
 11301                           
 11302                           ;I2C_Soft.c: 66: i2cLowSda();
 11303                           
 11304                           ;incstack = 0
 11305  00235C  ECE9  F011         	call	_i2cLowSda	;wreg free
 11306                           
 11307                           ;I2C_Soft.c: 67: i2cHighScl();
 11308  002360  ECCE  F011         	call	_i2cHighScl	;wreg free
 11309                           
 11310                           ;I2C_Soft.c: 68: i2cLowScl();
 11311  002364  ECF2  F011         	call	_i2cLowScl	;wreg free
 11312                           
 11313                           ;I2C_Soft.c: 69: i2cHighSda();
 11314  002368  ECF6  F011         	call	_i2cHighSda	;wreg free
 11315  00236C  0012               	return		;funcret
 11316  00236E                     __end_of_i2cAck:
 11317                           	opt stack 0
 11318                           tblptru	equ	0xFF8
 11319                           tblptrh	equ	0xFF7
 11320                           tblptrl	equ	0xFF6
 11321                           tablat	equ	0xFF5
 11322                           prodh	equ	0xFF4
 11323                           prodl	equ	0xFF3
 11324                           intcon	equ	0xFF2
 11325                           intcon2	equ	0xFF1
 11326                           postinc0	equ	0xFEE
 11327                           wreg	equ	0xFE8
 11328                           postdec1	equ	0xFE5
 11329                           plusw1	equ	0xFE3
 11330                           fsr1l	equ	0xFE1
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           plusw2	equ	0xFDB
 11335                           fsr2h	equ	0xFDA
 11336                           fsr2l	equ	0xFD9
 11337                           status	equ	0xFD8
 11338                           
 11339 ;; *************** function _I2C_ReStart *****************
 11340 ;; Defined at:
 11341 ;;		line 80 in file "I2C_Soft.c"
 11342 ;; Parameters:    Size  Location     Type
 11343 ;;		None
 11344 ;; Auto vars:     Size  Location     Type
 11345 ;;		None
 11346 ;; Return value:  Size  Location     Type
 11347 ;;		None               void
 11348 ;; Registers used:
 11349 ;;		wreg, cstack
 11350 ;; Tracked objects:
 11351 ;;		On entry : 0/0
 11352 ;;		On exit  : 0/0
 11353 ;;		Unchanged: 0/0
 11354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;Total ram usage:        0 bytes
 11360 ;; Hardware stack levels used:    1
 11361 ;; Hardware stack levels required when called:    4
 11362 ;; This function calls:
 11363 ;;		_i2cHighScl
 11364 ;;		_i2cHighSda
 11365 ;;		_i2cLowScl
 11366 ;;		_i2cLowSda
 11367 ;; This function is called by:
 11368 ;;		_DS1621_Read_Temp
 11369 ;;		_DS3231_Read_Time
 11370 ;;		_I2C_Write_Address_Read_One_Byte
 11371 ;;		_I2C_Write_Cmd_Read_One_Byte
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375                           	psect	text67
 11376  0022AE                     __ptext67:
 11377                           	opt stack 0
 11378  0022AE                     _I2C_ReStart:
 11379                           	opt stack 25
 11380                           
 11381                           ;I2C_Soft.c: 82: i2cLowScl();
 11382                           
 11383                           ;incstack = 0
 11384  0022AE  ECF2  F011         	call	_i2cLowScl	;wreg free
 11385                           
 11386                           ;I2C_Soft.c: 83: i2cHighSda();
 11387  0022B2  ECF6  F011         	call	_i2cHighSda	;wreg free
 11388                           
 11389                           ;I2C_Soft.c: 84: i2cHighScl();
 11390  0022B6  ECCE  F011         	call	_i2cHighScl	;wreg free
 11391                           
 11392                           ;I2C_Soft.c: 85: i2cLowSda();
 11393  0022BA  ECE9  F011         	call	_i2cLowSda	;wreg free
 11394                           
 11395                           ;I2C_Soft.c: 86: i2cLowScl();
 11396  0022BE  ECF2  F011         	call	_i2cLowScl	;wreg free
 11397  0022C2  0012               	return		;funcret
 11398  0022C4                     __end_of_I2C_ReStart:
 11399                           	opt stack 0
 11400                           tblptru	equ	0xFF8
 11401                           tblptrh	equ	0xFF7
 11402                           tblptrl	equ	0xFF6
 11403                           tablat	equ	0xFF5
 11404                           prodh	equ	0xFF4
 11405                           prodl	equ	0xFF3
 11406                           intcon	equ	0xFF2
 11407                           intcon2	equ	0xFF1
 11408                           postinc0	equ	0xFEE
 11409                           wreg	equ	0xFE8
 11410                           postdec1	equ	0xFE5
 11411                           plusw1	equ	0xFE3
 11412                           fsr1l	equ	0xFE1
 11413                           indf2	equ	0xFDF
 11414                           postinc2	equ	0xFDE
 11415                           postdec2	equ	0xFDD
 11416                           plusw2	equ	0xFDB
 11417                           fsr2h	equ	0xFDA
 11418                           fsr2l	equ	0xFD9
 11419                           status	equ	0xFD8
 11420                           
 11421 ;; *************** function _i2cLowSda *****************
 11422 ;; Defined at:
 11423 ;;		line 103 in file "I2C_Soft.c"
 11424 ;; Parameters:    Size  Location     Type
 11425 ;;		None
 11426 ;; Auto vars:     Size  Location     Type
 11427 ;;		None
 11428 ;; Return value:  Size  Location     Type
 11429 ;;		None               void
 11430 ;; Registers used:
 11431 ;;		None
 11432 ;; Tracked objects:
 11433 ;;		On entry : 0/0
 11434 ;;		On exit  : 0/0
 11435 ;;		Unchanged: 0/0
 11436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11441 ;;Total ram usage:        0 bytes
 11442 ;; Hardware stack levels used:    1
 11443 ;; Hardware stack levels required when called:    3
 11444 ;; This function calls:
 11445 ;;		Nothing
 11446 ;; This function is called by:
 11447 ;;		_I2C_Write
 11448 ;;		_i2cAck
 11449 ;;		_I2C_Start
 11450 ;;		_I2C_ReStart
 11451 ;;		_I2C_Stop
 11452 ;; This function uses a non-reentrant model
 11453 ;;
 11454                           
 11455                           	psect	text68
 11456  0023D2                     __ptext68:
 11457                           	opt stack 0
 11458  0023D2                     _i2cLowSda:
 11459                           	opt stack 23
 11460                           
 11461                           ;I2C_Soft.c: 105: PORTDbits.RD7 = 0;
 11462                           
 11463                           ;incstack = 0
 11464  0023D2  9E83               	bcf	3971,7,c	;volatile
 11465                           
 11466                           ;I2C_Soft.c: 106: TRISDbits.RD7 = 0;
 11467  0023D4  9E95               	bcf	3989,7,c	;volatile
 11468                           
 11469                           ;I2C_Soft.c: 107: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11470  0023D6  D000               	nop2		;2 cycle nop
 11471  0023D8  D000               	nop2		;2 cycle nop
 11472  0023DA  0012               	return		;funcret
 11473  0023DC                     __end_of_i2cLowSda:
 11474                           	opt stack 0
 11475                           tblptru	equ	0xFF8
 11476                           tblptrh	equ	0xFF7
 11477                           tblptrl	equ	0xFF6
 11478                           tablat	equ	0xFF5
 11479                           prodh	equ	0xFF4
 11480                           prodl	equ	0xFF3
 11481                           intcon	equ	0xFF2
 11482                           intcon2	equ	0xFF1
 11483                           postinc0	equ	0xFEE
 11484                           wreg	equ	0xFE8
 11485                           postdec1	equ	0xFE5
 11486                           plusw1	equ	0xFE3
 11487                           fsr1l	equ	0xFE1
 11488                           indf2	equ	0xFDF
 11489                           postinc2	equ	0xFDE
 11490                           postdec2	equ	0xFDD
 11491                           plusw2	equ	0xFDB
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function _i2cLowScl *****************
 11497 ;; Defined at:
 11498 ;;		line 116 in file "I2C_Soft.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;		None
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;		None
 11503 ;; Return value:  Size  Location     Type
 11504 ;;		None               void
 11505 ;; Registers used:
 11506 ;;		None
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;Total ram usage:        0 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; Hardware stack levels required when called:    3
 11519 ;; This function calls:
 11520 ;;		Nothing
 11521 ;; This function is called by:
 11522 ;;		_I2C_Read
 11523 ;;		_I2C_Write
 11524 ;;		_i2cNack
 11525 ;;		_i2cAck
 11526 ;;		_I2C_Start
 11527 ;;		_I2C_ReStart
 11528 ;;		_I2C_Stop
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           	psect	text69
 11533  0023E4                     __ptext69:
 11534                           	opt stack 0
 11535  0023E4                     _i2cLowScl:
 11536                           	opt stack 23
 11537                           
 11538                           ;I2C_Soft.c: 118: PORTBbits.RB4 = 0;
 11539                           
 11540                           ;incstack = 0
 11541  0023E4  9881               	bcf	3969,4,c	;volatile
 11542                           
 11543                           ;I2C_Soft.c: 119: TRISBbits.RB4 = 0;
 11544  0023E6  9893               	bcf	3987,4,c	;volatile
 11545                           
 11546                           ;I2C_Soft.c: 120: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11547  0023E8  D000               	nop2		;2 cycle nop
 11548  0023EA  0012               	return		;funcret
 11549  0023EC                     __end_of_i2cLowScl:
 11550                           	opt stack 0
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           intcon2	equ	0xFF1
 11559                           postinc0	equ	0xFEE
 11560                           wreg	equ	0xFE8
 11561                           postdec1	equ	0xFE5
 11562                           plusw1	equ	0xFE3
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           plusw2	equ	0xFDB
 11568                           fsr2h	equ	0xFDA
 11569                           fsr2l	equ	0xFD9
 11570                           status	equ	0xFD8
 11571                           
 11572 ;; *************** function _i2cHighSda *****************
 11573 ;; Defined at:
 11574 ;;		line 97 in file "I2C_Soft.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;		None
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;		None
 11579 ;; Return value:  Size  Location     Type
 11580 ;;		None               void
 11581 ;; Registers used:
 11582 ;;		None
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;Total ram usage:        0 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    3
 11595 ;; This function calls:
 11596 ;;		Nothing
 11597 ;; This function is called by:
 11598 ;;		_I2C_Init
 11599 ;;		_I2C_Read
 11600 ;;		_I2C_Write
 11601 ;;		_i2cAck
 11602 ;;		_I2C_Start
 11603 ;;		_I2C_ReStart
 11604 ;;		_I2C_Stop
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           	psect	text70
 11609  0023EC                     __ptext70:
 11610                           	opt stack 0
 11611  0023EC                     _i2cHighSda:
 11612                           	opt stack 25
 11613                           
 11614                           ;I2C_Soft.c: 99: TRISDbits.RD7 = 1;
 11615                           
 11616                           ;incstack = 0
 11617  0023EC  8E95               	bsf	3989,7,c	;volatile
 11618                           
 11619                           ;I2C_Soft.c: 100: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11620  0023EE  D000               	nop2		;2 cycle nop
 11621  0023F0  D000               	nop2		;2 cycle nop
 11622  0023F2  0012               	return		;funcret
 11623  0023F4                     __end_of_i2cHighSda:
 11624                           	opt stack 0
 11625                           tblptru	equ	0xFF8
 11626                           tblptrh	equ	0xFF7
 11627                           tblptrl	equ	0xFF6
 11628                           tablat	equ	0xFF5
 11629                           prodh	equ	0xFF4
 11630                           prodl	equ	0xFF3
 11631                           intcon	equ	0xFF2
 11632                           intcon2	equ	0xFF1
 11633                           postinc0	equ	0xFEE
 11634                           wreg	equ	0xFE8
 11635                           postdec1	equ	0xFE5
 11636                           plusw1	equ	0xFE3
 11637                           fsr1l	equ	0xFE1
 11638                           indf2	equ	0xFDF
 11639                           postinc2	equ	0xFDE
 11640                           postdec2	equ	0xFDD
 11641                           plusw2	equ	0xFDB
 11642                           fsr2h	equ	0xFDA
 11643                           fsr2l	equ	0xFD9
 11644                           status	equ	0xFD8
 11645                           
 11646 ;; *************** function _i2cHighScl *****************
 11647 ;; Defined at:
 11648 ;;		line 110 in file "I2C_Soft.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;		None
 11651 ;; Auto vars:     Size  Location     Type
 11652 ;;		None
 11653 ;; Return value:  Size  Location     Type
 11654 ;;		None               void
 11655 ;; Registers used:
 11656 ;;		wreg
 11657 ;; Tracked objects:
 11658 ;;		On entry : 0/0
 11659 ;;		On exit  : 0/0
 11660 ;;		Unchanged: 0/0
 11661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;Total ram usage:        0 bytes
 11667 ;; Hardware stack levels used:    1
 11668 ;; Hardware stack levels required when called:    3
 11669 ;; This function calls:
 11670 ;;		Nothing
 11671 ;; This function is called by:
 11672 ;;		_I2C_Init
 11673 ;;		_I2C_Read
 11674 ;;		_I2C_Write
 11675 ;;		_i2cNack
 11676 ;;		_i2cAck
 11677 ;;		_I2C_Start
 11678 ;;		_I2C_ReStart
 11679 ;;		_I2C_Stop
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           	psect	text71
 11684  00239C                     __ptext71:
 11685                           	opt stack 0
 11686  00239C                     _i2cHighScl:
 11687                           	opt stack 25
 11688                           
 11689                           ;I2C_Soft.c: 112: TRISBbits.RB4 = 1;
 11690                           
 11691                           ;incstack = 0
 11692  00239C  8893               	bsf	3987,4,c	;volatile
 11693                           
 11694                           ;I2C_Soft.c: 113: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11695  00239E  0E06               	movlw	6
 11696  0023A0                     u5407:
 11697  0023A0  2EE8               	decfsz	wreg,f,c
 11698  0023A2  D7FE               	goto	u5407
 11699  0023A4  D000               	nop2		;nop
 11700  0023A6  0012               	return		;funcret
 11701  0023A8                     __end_of_i2cHighScl:
 11702                           	opt stack 0
 11703                           tblptru	equ	0xFF8
 11704                           tblptrh	equ	0xFF7
 11705                           tblptrl	equ	0xFF6
 11706                           tablat	equ	0xFF5
 11707                           prodh	equ	0xFF4
 11708                           prodl	equ	0xFF3
 11709                           intcon	equ	0xFF2
 11710                           intcon2	equ	0xFF1
 11711                           postinc0	equ	0xFEE
 11712                           wreg	equ	0xFE8
 11713                           postdec1	equ	0xFE5
 11714                           plusw1	equ	0xFE3
 11715                           fsr1l	equ	0xFE1
 11716                           indf2	equ	0xFDF
 11717                           postinc2	equ	0xFDE
 11718                           postdec2	equ	0xFDD
 11719                           plusw2	equ	0xFDB
 11720                           fsr2h	equ	0xFDA
 11721                           fsr2l	equ	0xFD9
 11722                           status	equ	0xFD8
 11723                           
 11724 ;; *************** function _chkisr *****************
 11725 ;; Defined at:
 11726 ;;		line 31 in file "Interrupt.c"
 11727 ;; Parameters:    Size  Location     Type
 11728 ;;		None
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;		None
 11731 ;; Return value:  Size  Location     Type
 11732 ;;		None               void
 11733 ;; Registers used:
 11734 ;;		wreg, status,2, status,0, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11742 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11743 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11744 ;;Total ram usage:       14 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:    2
 11747 ;; This function calls:
 11748 ;;		_INT0_isr
 11749 ;;		_TIMER1_isr
 11750 ;; This function is called by:
 11751 ;;		Interrupt level 2
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755                           	psect	intcode
 11756  000008                     __pintcode:
 11757                           	opt stack 0
 11758  000008                     _chkisr:
 11759                           	opt stack 20
 11760                           
 11761                           ;incstack = 0
 11762  000008  CFFA F003          	movff	pclath,??_chkisr
 11763  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11764  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11765  000014  ED35  F00D         	call	int_func,f	;refresh shadow registers
 11766                           pclatu	equ	0xFFB
 11767                           pclath	equ	0xFFA
 11768                           tblptru	equ	0xFF8
 11769                           tblptrh	equ	0xFF7
 11770                           tblptrl	equ	0xFF6
 11771                           tablat	equ	0xFF5
 11772                           prodh	equ	0xFF4
 11773                           prodl	equ	0xFF3
 11774                           intcon	equ	0xFF2
 11775                           intcon2	equ	0xFF1
 11776                           postinc0	equ	0xFEE
 11777                           fsr0l	equ	0xFE9
 11778                           wreg	equ	0xFE8
 11779                           postdec1	equ	0xFE5
 11780                           plusw1	equ	0xFE3
 11781                           fsr1l	equ	0xFE1
 11782                           indf2	equ	0xFDF
 11783                           postinc2	equ	0xFDE
 11784                           postdec2	equ	0xFDD
 11785                           plusw2	equ	0xFDB
 11786                           fsr2h	equ	0xFDA
 11787                           fsr2l	equ	0xFD9
 11788                           status	equ	0xFD8
 11789                           
 11790                           	psect	intcode_body
 11791  001A6A                     __pintcode_body:
 11792                           	opt stack 20
 11793  001A6A                     int_func:
 11794                           	opt stack 20
 11795  001A6A  0006               	pop		; remove dummy address from shadow register refresh
 11796  001A6C  CFEA F006          	movff	fsr0h,??_chkisr+3
 11797  001A70  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11798  001A74  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11799  001A78  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11800  001A7C  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11801  001A80  CFF3 F00B          	movff	prodl,??_chkisr+8
 11802  001A84  CFF4 F00C          	movff	prodh,??_chkisr+9
 11803  001A88  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11804  001A8C  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11805  001A90  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11806  001A94  CFF5 F010          	movff	tablat,??_chkisr+13
 11807                           
 11808                           ;Interrupt.c: 33: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11809  001A98  A09E               	btfss	3998,0,c	;volatile
 11810  001A9A  D003               	goto	i2l4881
 11811  001A9C  ECD4  F011         	call	_TIMER1_isr	;wreg free
 11812  001AA0  D000               	goto	i2l4881
 11813  001AA2                     i2l4881:
 11814                           
 11815                           ;Interrupt.c: 34: if (INTCONbits.INT0IF == 1) INT0_isr();
 11816  001AA2  A2F2               	btfss	intcon,1,c	;volatile
 11817  001AA4  D003               	goto	i2l233
 11818  001AA6  ECAE  F006         	call	_INT0_isr	;wreg free
 11819  001AAA  D000               	goto	i2l233
 11820  001AAC                     i2l233:
 11821  001AAC  C010  FFF5         	movff	??_chkisr+13,tablat
 11822  001AB0  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11823  001AB4  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11824  001AB8  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11825  001ABC  C00C  FFF4         	movff	??_chkisr+9,prodh
 11826  001AC0  C00B  FFF3         	movff	??_chkisr+8,prodl
 11827  001AC4  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11828  001AC8  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11829  001ACC  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11830  001AD0  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11831  001AD4  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11832  001AD8  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11833  001ADC  C004  FFFB         	movff	??_chkisr+1,pclatu
 11834  001AE0  C003  FFFA         	movff	??_chkisr,pclath
 11835  001AE4  0011               	retfie		f
 11836  001AE6                     __end_of_chkisr:
 11837                           	opt stack 0
 11838                           pclatu	equ	0xFFB
 11839                           pclath	equ	0xFFA
 11840                           tblptru	equ	0xFF8
 11841                           tblptrh	equ	0xFF7
 11842                           tblptrl	equ	0xFF6
 11843                           tablat	equ	0xFF5
 11844                           prodh	equ	0xFF4
 11845                           prodl	equ	0xFF3
 11846                           intcon	equ	0xFF2
 11847                           intcon2	equ	0xFF1
 11848                           postinc0	equ	0xFEE
 11849                           fsr0h	equ	0xFEA
 11850                           fsr0l	equ	0xFE9
 11851                           wreg	equ	0xFE8
 11852                           postdec1	equ	0xFE5
 11853                           plusw1	equ	0xFE3
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           postdec2	equ	0xFDD
 11859                           plusw2	equ	0xFDB
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _TIMER1_isr *****************
 11865 ;; Defined at:
 11866 ;;		line 37 in file "Interrupt.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;		None
 11871 ;; Return value:  Size  Location     Type
 11872 ;;		None               void
 11873 ;; Registers used:
 11874 ;;		wreg, status,2
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;Total ram usage:        0 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; This function calls:
 11887 ;;		Nothing
 11888 ;; This function is called by:
 11889 ;;		_chkisr
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           	psect	text73
 11894  0023A8                     __ptext73:
 11895                           	opt stack 0
 11896  0023A8                     _TIMER1_isr:
 11897                           	opt stack 21
 11898                           
 11899                           ;Interrupt.c: 39: Nec_state = 0;
 11900                           
 11901                           ;incstack = 0
 11902  0023A8  0E00               	movlw	0
 11903  0023AA  6E52               	movwf	_Nec_state,c
 11904                           
 11905                           ;Interrupt.c: 40: INTCON2bits.INTEDG0 = 0;
 11906  0023AC  9CF1               	bcf	intcon2,6,c	;volatile
 11907                           
 11908                           ;Interrupt.c: 41: T1CONbits.TMR1ON = 0;
 11909  0023AE  90CD               	bcf	4045,0,c	;volatile
 11910                           
 11911                           ;Interrupt.c: 42: PIR1bits.TMR1IF = 0;
 11912  0023B0  909E               	bcf	3998,0,c	;volatile
 11913  0023B2  0012               	return		;funcret
 11914  0023B4                     __end_of_TIMER1_isr:
 11915                           	opt stack 0
 11916                           pclatu	equ	0xFFB
 11917                           pclath	equ	0xFFA
 11918                           tblptru	equ	0xFF8
 11919                           tblptrh	equ	0xFF7
 11920                           tblptrl	equ	0xFF6
 11921                           tablat	equ	0xFF5
 11922                           prodh	equ	0xFF4
 11923                           prodl	equ	0xFF3
 11924                           intcon	equ	0xFF2
 11925                           intcon2	equ	0xFF1
 11926                           postinc0	equ	0xFEE
 11927                           fsr0h	equ	0xFEA
 11928                           fsr0l	equ	0xFE9
 11929                           wreg	equ	0xFE8
 11930                           postdec1	equ	0xFE5
 11931                           plusw1	equ	0xFE3
 11932                           fsr1h	equ	0xFE2
 11933                           fsr1l	equ	0xFE1
 11934                           indf2	equ	0xFDF
 11935                           postinc2	equ	0xFDE
 11936                           postdec2	equ	0xFDD
 11937                           plusw2	equ	0xFDB
 11938                           fsr2h	equ	0xFDA
 11939                           fsr2l	equ	0xFD9
 11940                           status	equ	0xFD8
 11941                           
 11942 ;; *************** function _INT0_isr *****************
 11943 ;; Defined at:
 11944 ;;		line 51 in file "Interrupt.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;		None
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;		None
 11949 ;; Return value:  Size  Location     Type
 11950 ;;		None               void
 11951 ;; Registers used:
 11952 ;;		wreg, status,2, status,0, cstack
 11953 ;; Tracked objects:
 11954 ;;		On entry : 0/0
 11955 ;;		On exit  : 0/0
 11956 ;;		Unchanged: 0/0
 11957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11960 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11962 ;;Total ram usage:        2 bytes
 11963 ;; Hardware stack levels used:    1
 11964 ;; Hardware stack levels required when called:    1
 11965 ;; This function calls:
 11966 ;;		_force_nec_state0
 11967 ;; This function is called by:
 11968 ;;		_chkisr
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text74
 11973  000D5C                     __ptext74:
 11974                           	opt stack 0
 11975  000D5C                     _INT0_isr:
 11976                           	opt stack 20
 11977                           
 11978                           ;Interrupt.c: 53: INTCONbits.INT0IF = 0;
 11979                           
 11980                           ;incstack = 0
 11981  000D5C  92F2               	bcf	intcon,1,c	;volatile
 11982                           
 11983                           ;Interrupt.c: 54: if (Nec_state != 0)
 11984  000D5E  5052               	movf	_Nec_state,w,c
 11985  000D60  B4D8               	btfsc	status,2,c
 11986  000D62  D0A4               	goto	i2l4619
 11987                           
 11988                           ;Interrupt.c: 55: {
 11989                           ;Interrupt.c: 56: Time_Elapsed = (TMR1H << 8) | TMR1L;
 11990  000D64  50CE               	movf	4046,w,c	;volatile
 11991  000D66  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 11992  000D6A  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 11993  000D6C  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 11994  000D70  6A01               	clrf	??_INT0_isr,c
 11995  000D72  1001               	iorwf	??_INT0_isr,w,c
 11996  000D74  6E48               	movwf	_Time_Elapsed,c
 11997  000D76  5002               	movf	??_INT0_isr+1,w,c
 11998  000D78  6E49               	movwf	_Time_Elapsed+1,c
 11999                           
 12000                           ;Interrupt.c: 57: TMR1H = 0;
 12001  000D7A  0E00               	movlw	0
 12002  000D7C  6ECF               	movwf	4047,c	;volatile
 12003                           
 12004                           ;Interrupt.c: 58: TMR1L = 0;
 12005  000D7E  0E00               	movlw	0
 12006  000D80  6ECE               	movwf	4046,c	;volatile
 12007                           
 12008                           ;Interrupt.c: 59: }
 12009                           ;Interrupt.c: 61: switch(Nec_state)
 12010  000D82  D094               	goto	i2l4619
 12011  000D84                     i2l4557:
 12012                           
 12013                           ;Interrupt.c: 64: {
 12014                           ;Interrupt.c: 66: TMR1H = 0;
 12015  000D84  0E00               	movlw	0
 12016  000D86  6ECF               	movwf	4047,c	;volatile
 12017                           
 12018                           ;Interrupt.c: 67: TMR1L = 0;
 12019  000D88  0E00               	movlw	0
 12020  000D8A  6ECE               	movwf	4046,c	;volatile
 12021                           
 12022                           ;Interrupt.c: 68: PIR1bits.TMR1IF = 0;
 12023  000D8C  909E               	bcf	3998,0,c	;volatile
 12024                           
 12025                           ;Interrupt.c: 69: T1CON= 0x90;
 12026  000D8E  0E90               	movlw	144
 12027  000D90  6ECD               	movwf	4045,c	;volatile
 12028                           
 12029                           ;Interrupt.c: 70: T1CONbits.TMR1ON = 1;
 12030  000D92  80CD               	bsf	4045,0,c	;volatile
 12031                           
 12032                           ;Interrupt.c: 71: bit_count = 0;
 12033  000D94  0E00               	movlw	0
 12034  000D96  6E58               	movwf	_bit_count,c
 12035                           
 12036                           ;Interrupt.c: 72: Nec_code = 0;
 12037  000D98  0E00               	movlw	0
 12038  000D9A  0100               	movlb	0	; () banked
 12039  000D9C  6FF4               	movwf	_Nec_code& (0+255),b
 12040  000D9E  0E00               	movlw	0
 12041  000DA0  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 12042  000DA2  0E00               	movlw	0
 12043  000DA4  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 12044  000DA6  0E00               	movlw	0
 12045  000DA8  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 12046                           
 12047                           ;Interrupt.c: 73: Nec_state = 1;
 12048  000DAA  0E01               	movlw	1
 12049  000DAC  D01F               	goto	L6
 12050  000DAE                     i2l4563:
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;Interrupt.c: 74: INTCON2bits.INTEDG0 = 1;
 12054  000DAE  8CF1               	bsf	intcon2,6,c	;volatile
 12055                           
 12056                           ; BSR set to: 0
 12057                           ;Interrupt.c: 75: return;
 12058  000DB0  D08E               	goto	i2l245
 12059  000DB2                     i2l4567:
 12060                           
 12061                           ;Interrupt.c: 79: {
 12062                           ;Interrupt.c: 80: if((Time_Elapsed > 8500)&&(Time_Elapsed < 9500))
 12063  000DB2  0E35               	movlw	53
 12064  000DB4  5C48               	subwf	_Time_Elapsed,w,c
 12065  000DB6  0E21               	movlw	33
 12066  000DB8  5849               	subwfb	_Time_Elapsed+1,w,c
 12067  000DBA  A0D8               	btfss	status,0,c
 12068  000DBC  D088               	goto	i2l245
 12069  000DBE  0E1C               	movlw	28
 12070  000DC0  5C48               	subwf	_Time_Elapsed,w,c
 12071  000DC2  0E25               	movlw	37
 12072  000DC4  5849               	subwfb	_Time_Elapsed+1,w,c
 12073  000DC6  B0D8               	btfsc	status,0,c
 12074  000DC8  D082               	goto	i2l245
 12075                           
 12076                           ;Interrupt.c: 81: {
 12077                           ;Interrupt.c: 82: Nec_state = 2;
 12078  000DCA  0E02               	movlw	2
 12079  000DCC  D01F               	goto	L7
 12080  000DCE                     i2l4573:
 12081                           
 12082                           ;Interrupt.c: 83: INTCON2bits.INTEDG0 = 0;
 12083  000DCE  9CF1               	bcf	intcon2,6,c	;volatile
 12084                           
 12085                           ;Interrupt.c: 84: }
 12086                           ;Interrupt.c: 85: return;
 12087  000DD0  D07E               	goto	i2l245
 12088  000DD2                     i2l4577:
 12089                           
 12090                           ;Interrupt.c: 89: {
 12091                           ;Interrupt.c: 90: if((Time_Elapsed > 4000)&&(Time_Elapsed < 5000))
 12092  000DD2  0EA1               	movlw	161
 12093  000DD4  5C48               	subwf	_Time_Elapsed,w,c
 12094  000DD6  0E0F               	movlw	15
 12095  000DD8  5849               	subwfb	_Time_Elapsed+1,w,c
 12096  000DDA  A0D8               	btfss	status,0,c
 12097  000DDC  D078               	goto	i2l245
 12098  000DDE  0E88               	movlw	136
 12099  000DE0  5C48               	subwf	_Time_Elapsed,w,c
 12100  000DE2  0E13               	movlw	19
 12101  000DE4  5849               	subwfb	_Time_Elapsed+1,w,c
 12102  000DE6  B0D8               	btfsc	status,0,c
 12103  000DE8  D072               	goto	i2l245
 12104                           
 12105                           ;Interrupt.c: 91: {
 12106                           ;Interrupt.c: 92: Nec_state = 3;
 12107  000DEA  0E03               	movlw	3
 12108  000DEC                     L6:
 12109  000DEC  6E52               	movwf	_Nec_state,c
 12110  000DEE  D7DF               	goto	i2l4563
 12111                           
 12112                           ;Interrupt.c: 94: }
 12113                           ;Interrupt.c: 95: return;
 12114                           
 12115                           ;Interrupt.c: 93: INTCON2bits.INTEDG0 = 1;
 12116  000DF0  D06E               	goto	i2l245
 12117  000DF2                     i2l4587:
 12118                           
 12119                           ;Interrupt.c: 99: {
 12120                           ;Interrupt.c: 100: if((Time_Elapsed > 400)&&(Time_Elapsed < 700))
 12121  000DF2  0E91               	movlw	145
 12122  000DF4  5C48               	subwf	_Time_Elapsed,w,c
 12123  000DF6  0E01               	movlw	1
 12124  000DF8  5849               	subwfb	_Time_Elapsed+1,w,c
 12125  000DFA  A0D8               	btfss	status,0,c
 12126  000DFC  D068               	goto	i2l245
 12127  000DFE  0EBC               	movlw	188
 12128  000E00  5C48               	subwf	_Time_Elapsed,w,c
 12129  000E02  0E02               	movlw	2
 12130  000E04  5849               	subwfb	_Time_Elapsed+1,w,c
 12131  000E06  B0D8               	btfsc	status,0,c
 12132  000E08  D062               	goto	i2l245
 12133                           
 12134                           ;Interrupt.c: 101: {
 12135                           ;Interrupt.c: 102: Nec_state = 4;
 12136  000E0A  0E04               	movlw	4
 12137  000E0C                     L7:
 12138  000E0C  6E52               	movwf	_Nec_state,c
 12139  000E0E  D7DF               	goto	i2l4573
 12140                           
 12141                           ;Interrupt.c: 104: }
 12142                           ;Interrupt.c: 105: return;
 12143                           
 12144                           ;Interrupt.c: 103: INTCON2bits.INTEDG0 = 0;
 12145  000E10  D05E               	goto	i2l245
 12146  000E12                     i2l4597:
 12147                           
 12148                           ;Interrupt.c: 109: {
 12149                           ;Interrupt.c: 110: if((Time_Elapsed > 400)&&(Time_Elapsed < 1800))
 12150  000E12  0E91               	movlw	145
 12151  000E14  5C48               	subwf	_Time_Elapsed,w,c
 12152  000E16  0E01               	movlw	1
 12153  000E18  5849               	subwfb	_Time_Elapsed+1,w,c
 12154  000E1A  A0D8               	btfss	status,0,c
 12155  000E1C  D042               	goto	i2l4611
 12156  000E1E  0E08               	movlw	8
 12157  000E20  5C48               	subwf	_Time_Elapsed,w,c
 12158  000E22  0E07               	movlw	7
 12159  000E24  5849               	subwfb	_Time_Elapsed+1,w,c
 12160  000E26  B0D8               	btfsc	status,0,c
 12161  000E28  D03C               	goto	i2l4611
 12162                           
 12163                           ;Interrupt.c: 111: {
 12164                           ;Interrupt.c: 112: Nec_code = Nec_code << 1;
 12165  000E2A  90D8               	bcf	status,0,c
 12166  000E2C  0100               	movlb	0	; () banked
 12167  000E2E  35F4               	rlcf	_Nec_code& (0+255),w,b
 12168  000E30  0100               	movlb	0	; () banked
 12169  000E32  6FF4               	movwf	_Nec_code& (0+255),b
 12170  000E34  0100               	movlb	0	; () banked
 12171  000E36  35F5               	rlcf	(_Nec_code+1)& (0+255),w,b
 12172  000E38  0100               	movlb	0	; () banked
 12173  000E3A  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 12174  000E3C  0100               	movlb	0	; () banked
 12175  000E3E  35F6               	rlcf	(_Nec_code+2)& (0+255),w,b
 12176  000E40  0100               	movlb	0	; () banked
 12177  000E42  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 12178  000E44  0100               	movlb	0	; () banked
 12179  000E46  35F7               	rlcf	(_Nec_code+3)& (0+255),w,b
 12180  000E48  0100               	movlb	0	; () banked
 12181  000E4A  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 12182                           
 12183                           ;Interrupt.c: 113: if(Time_Elapsed > 1000)
 12184  000E4C  0EE9               	movlw	233
 12185  000E4E  5C48               	subwf	_Time_Elapsed,w,c
 12186  000E50  0E03               	movlw	3
 12187  000E52  5849               	subwfb	_Time_Elapsed+1,w,c
 12188  000E54  A0D8               	btfss	status,0,c
 12189  000E56  D014               	goto	i2l254
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;Interrupt.c: 114: {
 12193                           ;Interrupt.c: 115: Nec_code = Nec_code + 1;
 12194  000E58  0E01               	movlw	1
 12195  000E5A  0100               	movlb	0	; () banked
 12196  000E5C  25F4               	addwf	_Nec_code& (0+255),w,b
 12197  000E5E  0100               	movlb	0	; () banked
 12198  000E60  6FF4               	movwf	_Nec_code& (0+255),b
 12199  000E62  0E00               	movlw	0
 12200  000E64  0100               	movlb	0	; () banked
 12201  000E66  21F5               	addwfc	(_Nec_code+1)& (0+255),w,b
 12202  000E68  0100               	movlb	0	; () banked
 12203  000E6A  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 12204  000E6C  0E00               	movlw	0
 12205  000E6E  0100               	movlb	0	; () banked
 12206  000E70  21F6               	addwfc	(_Nec_code+2)& (0+255),w,b
 12207  000E72  0100               	movlb	0	; () banked
 12208  000E74  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 12209  000E76  0E00               	movlw	0
 12210  000E78  0100               	movlb	0	; () banked
 12211  000E7A  21F7               	addwfc	(_Nec_code+3)& (0+255),w,b
 12212  000E7C  0100               	movlb	0	; () banked
 12213  000E7E  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 12214  000E80                     i2l254:
 12215                           
 12216                           ; BSR set to: 0
 12217                           ;Interrupt.c: 116: }
 12218                           ;Interrupt.c: 118: bit_count = bit_count + 1;
 12219  000E80  2858               	incf	_bit_count,w,c
 12220  000E82  6E58               	movwf	_bit_count,c
 12221                           
 12222                           ;Interrupt.c: 119: if(bit_count > 31)
 12223  000E84  0E1F               	movlw	31
 12224  000E86  6458               	cpfsgt	_bit_count,c
 12225  000E88  D009               	goto	i2l255
 12226                           
 12227                           ; BSR set to: 0
 12228                           ;Interrupt.c: 120: {
 12229                           ;Interrupt.c: 121: nec_ok = 1;
 12230  000E8A  0E00               	movlw	0
 12231  000E8C  6E4B               	movwf	_nec_ok+1,c
 12232  000E8E  0E01               	movlw	1
 12233  000E90  6E4A               	movwf	_nec_ok,c
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;Interrupt.c: 122: Nec_code1 = (char) ((Nec_code >> 8));
 12237  000E92  C0F5  F051         	movff	_Nec_code+1,_Nec_code1
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;Interrupt.c: 123: INTCONbits.INT0IE = 0;
 12241  000E96  98F2               	bcf	intcon,4,c	;volatile
 12242                           
 12243                           ;Interrupt.c: 124: Nec_state = 0;
 12244  000E98  0E00               	movlw	0
 12245  000E9A  6E52               	movwf	_Nec_state,c
 12246  000E9C                     i2l255:
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;Interrupt.c: 125: }
 12250                           ;Interrupt.c: 127: Nec_state = 3;
 12251  000E9C  0E03               	movlw	3
 12252  000E9E  6E52               	movwf	_Nec_state,c
 12253                           
 12254                           ;Interrupt.c: 128: }
 12255  000EA0  D786               	goto	i2l4563
 12256  000EA2                     i2l4611:
 12257                           
 12258                           ;Interrupt.c: 129: else
 12259                           ;Interrupt.c: 130: force_nec_state0();
 12260  000EA2  ECFA  F011         	call	_force_nec_state0	;wreg free
 12261  000EA6  D783               	goto	i2l4563
 12262  000EA8  D782               	goto	i2l4563
 12263                           
 12264                           ;Interrupt.c: 134: }
 12265                           ;Interrupt.c: 135: }
 12266                           
 12267                           ;Interrupt.c: 133: return;
 12268                           
 12269                           ;Interrupt.c: 132: INTCON2bits.INTEDG0 = 1;
 12270  000EAA  D011               	goto	i2l245
 12271  000EAC                     i2l4619:
 12272  000EAC  5052               	movf	_Nec_state,w,c
 12273                           
 12274                           ; Switch size 1, requested type "space"
 12275                           ; Number of cases is 5, Range of values is 0 to 4
 12276                           ; switch strategies available:
 12277                           ; Name         Instructions Cycles
 12278                           ; simple_byte           16     9 (average)
 12279                           ;	Chosen strategy is simple_byte
 12280  000EAE  0A00               	xorlw	0	; case 0
 12281  000EB0  B4D8               	btfsc	status,2,c
 12282  000EB2  D768               	goto	i2l4557
 12283  000EB4  0A01               	xorlw	1	; case 1
 12284  000EB6  B4D8               	btfsc	status,2,c
 12285  000EB8  D77C               	goto	i2l4567
 12286  000EBA  0A03               	xorlw	3	; case 2
 12287  000EBC  B4D8               	btfsc	status,2,c
 12288  000EBE  D789               	goto	i2l4577
 12289  000EC0  0A01               	xorlw	1	; case 3
 12290  000EC2  B4D8               	btfsc	status,2,c
 12291  000EC4  D796               	goto	i2l4587
 12292  000EC6  0A07               	xorlw	7	; case 4
 12293  000EC8  B4D8               	btfsc	status,2,c
 12294  000ECA  D7A3               	goto	i2l4597
 12295  000ECC  D000               	goto	i2l245
 12296  000ECE                     i2l245:
 12297  000ECE  0012               	return		;funcret
 12298  000ED0                     __end_of_INT0_isr:
 12299                           	opt stack 0
 12300                           pclatu	equ	0xFFB
 12301                           pclath	equ	0xFFA
 12302                           tblptru	equ	0xFF8
 12303                           tblptrh	equ	0xFF7
 12304                           tblptrl	equ	0xFF6
 12305                           tablat	equ	0xFF5
 12306                           prodh	equ	0xFF4
 12307                           prodl	equ	0xFF3
 12308                           intcon	equ	0xFF2
 12309                           intcon2	equ	0xFF1
 12310                           postinc0	equ	0xFEE
 12311                           fsr0h	equ	0xFEA
 12312                           fsr0l	equ	0xFE9
 12313                           wreg	equ	0xFE8
 12314                           postdec1	equ	0xFE5
 12315                           plusw1	equ	0xFE3
 12316                           fsr1h	equ	0xFE2
 12317                           fsr1l	equ	0xFE1
 12318                           indf2	equ	0xFDF
 12319                           postinc2	equ	0xFDE
 12320                           postdec2	equ	0xFDD
 12321                           plusw2	equ	0xFDB
 12322                           fsr2h	equ	0xFDA
 12323                           fsr2l	equ	0xFD9
 12324                           status	equ	0xFD8
 12325                           
 12326 ;; *************** function _force_nec_state0 *****************
 12327 ;; Defined at:
 12328 ;;		line 45 in file "Interrupt.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;		None
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;		None
 12333 ;; Return value:  Size  Location     Type
 12334 ;;		None               void
 12335 ;; Registers used:
 12336 ;;		wreg, status,2
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;Total ram usage:        0 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; This function calls:
 12349 ;;		Nothing
 12350 ;; This function is called by:
 12351 ;;		_INT0_isr
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           	psect	text75
 12356  0023F4                     __ptext75:
 12357                           	opt stack 0
 12358  0023F4                     _force_nec_state0:
 12359                           	opt stack 20
 12360                           
 12361                           ;Interrupt.c: 47: Nec_state=0;
 12362                           
 12363                           ;incstack = 0
 12364  0023F4  0E00               	movlw	0
 12365  0023F6  6E52               	movwf	_Nec_state,c
 12366                           
 12367                           ;Interrupt.c: 48: T1CONbits.TMR1ON = 0;
 12368  0023F8  90CD               	bcf	4045,0,c	;volatile
 12369  0023FA  0012               	return		;funcret
 12370  0023FC                     __end_of_force_nec_state0:
 12371                           	opt stack 0
 12372                           pclatu	equ	0xFFB
 12373                           pclath	equ	0xFFA
 12374                           tblptru	equ	0xFF8
 12375                           tblptrh	equ	0xFF7
 12376                           tblptrl	equ	0xFF6
 12377                           tablat	equ	0xFF5
 12378                           prodh	equ	0xFF4
 12379                           prodl	equ	0xFF3
 12380                           intcon	equ	0xFF2
 12381                           intcon2	equ	0xFF1
 12382                           postinc0	equ	0xFEE
 12383                           fsr0h	equ	0xFEA
 12384                           fsr0l	equ	0xFE9
 12385                           wreg	equ	0xFE8
 12386                           postdec1	equ	0xFE5
 12387                           plusw1	equ	0xFE3
 12388                           fsr1h	equ	0xFE2
 12389                           fsr1l	equ	0xFE1
 12390                           indf2	equ	0xFDF
 12391                           postinc2	equ	0xFDE
 12392                           postdec2	equ	0xFDD
 12393                           plusw2	equ	0xFDB
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           pclatu	equ	0xFFB
 12398                           pclath	equ	0xFFA
 12399                           tblptru	equ	0xFF8
 12400                           tblptrh	equ	0xFF7
 12401                           tblptrl	equ	0xFF6
 12402                           tablat	equ	0xFF5
 12403                           prodh	equ	0xFF4
 12404                           prodl	equ	0xFF3
 12405                           intcon	equ	0xFF2
 12406                           intcon2	equ	0xFF1
 12407                           postinc0	equ	0xFEE
 12408                           fsr0h	equ	0xFEA
 12409                           fsr0l	equ	0xFE9
 12410                           wreg	equ	0xFE8
 12411                           postdec1	equ	0xFE5
 12412                           plusw1	equ	0xFE3
 12413                           fsr1h	equ	0xFE2
 12414                           fsr1l	equ	0xFE1
 12415                           indf2	equ	0xFDF
 12416                           postinc2	equ	0xFDE
 12417                           postdec2	equ	0xFDD
 12418                           plusw2	equ	0xFDB
 12419                           fsr2h	equ	0xFDA
 12420                           fsr2l	equ	0xFD9
 12421                           status	equ	0xFD8
 12422                           
 12423                           	psect	rparam
 12424  0000                     pclatu	equ	0xFFB
 12425                           pclath	equ	0xFFA
 12426                           tblptru	equ	0xFF8
 12427                           tblptrh	equ	0xFF7
 12428                           tblptrl	equ	0xFF6
 12429                           tablat	equ	0xFF5
 12430                           prodh	equ	0xFF4
 12431                           prodl	equ	0xFF3
 12432                           intcon	equ	0xFF2
 12433                           intcon2	equ	0xFF1
 12434                           postinc0	equ	0xFEE
 12435                           fsr0h	equ	0xFEA
 12436                           fsr0l	equ	0xFE9
 12437                           wreg	equ	0xFE8
 12438                           postdec1	equ	0xFE5
 12439                           plusw1	equ	0xFE3
 12440                           fsr1h	equ	0xFE2
 12441                           fsr1l	equ	0xFE1
 12442                           indf2	equ	0xFDF
 12443                           postinc2	equ	0xFDE
 12444                           postdec2	equ	0xFDD
 12445                           plusw2	equ	0xFDB
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8


Data Sizes:
    Strings     249
    Constant    493
    Data        178
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     16     126
    BANK1           256      0      75
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[13]), STR_9(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_8(CODE[15]), STR_7(CODE[22]), STR_6(CODE[16]), STR_5(CODE[20]), 
		 -> STR_4(CODE[21]), STR_3(CODE[30]), STR_2(CODE[19]), STR_1(CODE[20]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Turn_On_Fan->_do_update_pwm
    _Turn_Off_Fan->_do_update_pwm
    _printf->___lwmod
    ___lwmod->___lwdiv
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _Do_Beep->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  137752
                                             13 BANK0      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        6     6      0   22517
                                              7 BANK0      6     6      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1733
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0   24020
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0   12010
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0   12010
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3976
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                         16    14      2    2299
                                             30 COMRAM    16    14      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           2     0      2    2262
                                             30 COMRAM     2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   16068
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1056
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          0     0      0     616
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   16068
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0    8034
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    0     0      0     133
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     1     1      0     331
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     1      2     365
                                             19 COMRAM     3     1      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
         _Wait_Half_Second
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_One_Sec
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
         _Wait_Half_Second
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4B       7       29.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 28 16:24:03 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                                 l33 1F6E  
                               l54 218E                                 l70 1D1A  
                               l38 22D6                                 l63 205C  
                               l49 2168                       ___awdiv@sign 001C  
             __size_of_Turn_On_Fan 001A                ___wmul@multiplicand 0013  
                  ??_Update_Screen 00EB                                l104 1F30  
                              l107 1FFA                                l187 20EE  
                              l612 20BE                                l428 2392  
                              l618 1966                                l634 1024  
                              l643 0F7A                                l636 0EFE  
                              l558 1D66                                l814 04F8  
                              l671 16CC                                l568 22E6  
                              l672 1638                                l682 0C70  
                              l674 16A8                                l675 16CA  
                              l851 0750                                l880 1B2E  
                              _FAN 0050                                l881 1B38  
                              l882 1B3A                                l779 228E  
                              l875 1B12                                l884 1B54  
                              l879 1B2C                                l887 2140  
                ?_Wait_Half_Second 0001                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 23DC  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 00FA                                _rpm 004C  
            __size_of_Turn_Off_Fan 001A                                _rps 00FC  
                              _txt 004E                       ___awmod@sign 0024  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00D8                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 20F0  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0019  
                             l1206 176A                               l1303 150E  
                             l1080 18DE                               l1410 1C0C  
                             l1420 1DFE                               l1093 19E8  
                             l1270 15BC                               l1318 21D6  
                             l1344 21B4                               l1282 1336  
                             l1195 1792                               l1267 15F0  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l1449 1FAC                               l6003 16B6  
                             l5301 1752                               l5303 175E  
                             l5321 1FF2                               l6009 16C6  
                             l5315 1784                               l6131 2072  
                             l6061 1F12                               l6053 1EFC  
                             l5309 1772                               l5421 1548  
                             l6141 1162                               l6071 1F26  
                             l5327 2004                               l5503 1310  
                             l6215 0D46                               l5263 1928  
                             l6231 1872                               l6073 1F2C  
                             l6049 1EF4                               l5329 200A  
                             l5425 1556                               l5513 1448  
                             l5273 194E                               l6153 11B2  
                             l6129 2068                               l6241 189A  
                             l6225 1860                               l5409 21CE  
                             l5601 0412                               l6059 1F0A  
                             l6067 1F1A                               l5339 201C  
                             l5291 16EE                               l5419 152E  
                             l5531 14A2                               l6323 2180  
                             l6315 215A                               l5275 195C  
                             l5259 18F0                               l6331 2040  
                             l5603 0420                               l5293 16FA  
                             l5445 1596                               l5541 14CC  
                             l5381 20A0                               l6165 1222  
                             l6157 11D0                               l6237 1888  
                             l6253 18C4                               l5621 04C2  
                             l5613 045E                               l6309 22D0  
                             l6501 00EE     I2C_Write_Cmd_Write_Data@Device 0015  
                             l5295 171A                               l5287 16DE  
                             l5455 15CA                               l5471 1286  
                             l5543 14DA                               l5535 14B2  
                             l6167 122A                               l6239 1892  
                             l5711 06C8                               l5703 0668  
                             l5607 042A                               l5465 125E  
                             l5537 14B8                               l5545 14E4  
                             l5393 1EC6                               l6257 18D4  
                             l6249 18B8                               l6337 1CEA  
                             l5721 0728                               l5641 0540  
                             l5625 04CA                               l5609 0440  
                             l6281 19AC                               l6273 198C  
                             l5299 1732                               l5467 1278  
                             l6187 0C56                               l6339 1CEE  
                             l5563 1BD0                               l5707 067C  
                             l5651 0574                               l5643 0544  
                             l5723 0734                               l6507 012E  
                             l5493 12E2                               l5485 12BA  
                             l5549 14FC                               l5389 1EAA  
                             l5565 1BDA                               l5709 0684  
                             l5717 070E                               l5661 058A  
                             l5637 0526                               l6293 19DE  
                             l6285 19C2                               l6277 199A  
                             l6269 197E                               l6701 0ADE  
                             l5495 12E8                               l5735 1820  
                             l5575 1C00                               l5567 1BE2  
                             l5591 1DF2                               l5583 1DCA  
                             l5719 0720                               l5655 057A  
                             l5647 0550                               l5671 05B4  
                             l6279 19A4                               l6535 01C2  
                             l6711 0B10                               l5489 12CC  
                             l5921 0EFA                               l5913 0EE0  
                             l5585 1DD4                               l5665 05AE  
                             l5657 057E                               l5673 05C6  
                             l6289 19CE                               l6537 01D8  
                             l5499 12FA                               l5931 0F3A  
                             l5923 0F02                               l5587 1DDC  
                             l5691 0628                               l5683 0606  
                             l6491 0098                               l6731 0B56  
                             l6715 0B24                               l6707 0B06  
                             l5781 1B0A                               l5773 1AF8  
                             l5933 0F6E                               l5917 0EEC  
                             l5693 0630                               l5685 0610  
                             l5597 0402                               l6485 0058  
                             l6741 0B70                               l6725 0B48  
                             l5951 0FF0                               l5943 0F9C  
                             l5935 0F72                               l5927 0F0A  
                             l5679 05E2                               l6743 0B90  
                             l6663 09CA                               l5793 1B24  
                             l5785 1B16                               l5777 1B02  
                             l5953 1018                               l5945 0FC4  
                             l5697 0648                               l6737 0B64  
                             l6745 0B9C                               l5699 0650  
                             l6683 0A92                               l5965 1F7A  
                             l5959 1020                               l5967 1F80  
                             l5983 1670                               l5977 1602  
                             l6697 0AC4                               l5995 169E  
                             l5999 16AC                               STR_1 FF79  
                             STR_2 FF8D                               STR_3 FF06  
                             STR_4 FF50                               STR_5 FF65  
                             STR_6 FFB1                               STR_7 FF3A  
                             STR_8 FFC1                               STR_9 FF24  
                             u4001 126E                               u4041 143A  
                             u4060 1466                               u5030 203A  
                             u4065 145E                               u5041 1CD4  
                             u3720 191E                               u4620 0FD2  
                             u4700 1666                               u5407 23A0  
                             u4810 118C                               u3931 1520  
                             u3951 153E                               u4690 1630  
                             u3981 1250                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0044  
                     _DS1621_tempF 0046                ??_Deactivate_Buzzer 0011  
                             _date 00BD                               _main 09BC  
                             _font FD19                       ___ftpack@arg 0011  
                             _hour 005E                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 23BE                   __end_of_I2C_Read 1F32  
                             _time 00C6                               _year 006C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 234A                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 2314  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1E54                     _Increase_Speed 2142  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 23D2                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 222E                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0ED0  
        __end_of_Deactivate_Buzzer 23E4                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 18E0  
                  drawCircle@ddF_x 0026                              STR_10 FFD0  
                  drawCircle@ddF_y 0028                              STR_11 FFF9  
                            STR_12 FFF3                              STR_20 FFA0  
                            STR_13 FFE3                              STR_14 FFE8  
                            STR_15 FFDD                              STR_16 FFFC  
                            STR_17 FFF5                              STR_18 FFED  
                            STR_19 FFF1                    __end_of___awmod 19EA  
                  __end_of___ftdiv 15F2                    __end_of___ftmul 1338  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___fttol 1510  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 1C16                    __end_of___lwmod 1E08  
                            i2l233 1AAC                              i2l245 0ECE  
                            i2l254 0E80                              i2l255 0E9C  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1F70                              _Rcmd1 1026  
                            _Rcmd3 1338                         _i2cHighSda 23EC  
                       _i2cHighScl 239C                    __end_of_dpowers FEFE  
                            _color 0115                              _font2 FE18  
                            _found 005D                    __end_of_isdigit 21D8  
                            _tempC 00DC                              _tempF 00E0  
                            _month 0060                      ___ftpack@sign 0015  
                            _putch 238E                              main@j 00F2  
                __end_of_I2C_Start 235C                  __end_of_I2C_Write 202A  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8             __end_of_Increase_Speed 216A  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 19EA  
                    ??_Set_RPM_RGB 0021                       __end_of_main 0BAE  
                     __end_of_font FE18                   __end_of_Rcmd2red 1FEC  
                 ??_Decrease_Speed 0044                             ??_main 00F1  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 2326  
                       _Set_DC_RGB 202A          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0018  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 1794  
                 __end_of___lbtoft 21B6                          ??_Do_Beep 0044  
                           _DC_Txt 00D4                          ??_Do_Init 0016  
                           i2l4611 0EA2                             i2l4563 0DAE  
                           i2l4619 0EAC                             i2l4573 0DCE  
                           i2l4557 0D84                             i2l4567 0DB2  
                           i2l4577 0DD2                             i2l4587 0DF2  
                           i2l4597 0E12                             i2l4881 1AA2  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00B7                   _force_nec_state0 23F4  
                 __end_of_delay_ms 1D6E                             _i2cAck 235C  
                 __end_of_fillRect 1EEA                   __end_of_drawChar 1026  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 211A                          ??___awdiv 001B  
                 __end_of_drawtext 1240                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 0100  
                        ??___lwmod 001C                             _buffer 012A  
                           _nec_ok 004A                             clear_0 19F0  
                           clear_1 19FC                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
                  ___awmod@divisor 0021                          ??_get_RPM 0021  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0023  
                           _printf 03F8                       drawtext@size 0040  
                           _strcpy 205E                             _strlen 1F70  
            ___ftmul@f3_as_product 0027                __end_of_Set_RPM_RGB 1D1C  
                       _Toggle_Fan 22C4                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD18                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 21F8                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 22EC                         __accesstop 0080  
          __end_of__initialization 1A60                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 1136                      __end_of_Rcmd3 142A  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1B56  
                     __pidataBANK1 1E54                      __end_of_font2 FEF4  
                __end_of_i2cLowSda 23DC                  __end_of_i2cLowScl 23EC  
                    __end_of_putch 239C                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                      ?_Set_DC_RGB 001F                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1B56                            ??_putch 0011  
                       __pbssBANK0 00F4                   _setup_alarm_hour 0063  
                 _setup_alarm_time 0097                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                         _alarm_time 008E  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
             Set_DC_RGB@duty_cycle 001F                 __CFG_CCP2MX$PORTBE 000000  
                    ??_Turn_On_Fan 0044                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                        _Set_RPM_RGB 1CCA  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                            _ALARMEN 00F8  
                        ?___ftpack 0011                          ?___lbtoft 0019  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 0011  
                       _fillScreen 21F8              __end_of_Update_Screen 03F8  
                       _drawCircle 0BAE                     _init_INTERRUPT 2296  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00CF  
            __end_of_fillRectangle 16CE                            _Do_Beep 2300  
                        ?_drawtext 0039                  _DS3231_Setup_Time 1C16  
                          _Do_Init 1E08           _I2C_Write_Cmd_Write_Data 21D8  
       __end_of_I2C_Write_Cmd_Only 227C                         ??_Rcmd2red 0014  
                   ??_Wait_One_Sec 0011                            _i2cNack 23C8  
               __end_of_TIMER1_isr 23B4                 ?_DS3231_Setup_Time 0001  
                    _write_command 237E                          _I2C_Start 234A  
                        _I2C_Write 1FEC                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __size_of_Set_DC_RGB 0034                __end_of_DS1621_Init 2262  
                __end_of_drawPixel 20C0                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 1968                            ___awdiv 184A  
                          ___awmod 1968                            ___ftdiv 1510  
                  __size_of___wmul 0028                            ___ftmul 1240  
                          ___fttol 142A                            ___lwdiv 1BBA  
                          ___lwmod 1DBC                    __size_of_chkisr 1ADE  
                        ?_spiwrite 0001                            __pcinit 19EA  
                       ??___ftpack 0016                         ??___lbtoft 001C  
                          __ramtop 1000                            _get_RPM 1F32  
                          __ptext0 09BC                            __ptext1 1F32  
                          __ptext2 001C                            __ptext3 1968  
                          __ptext4 22C4                            __ptext5 2214  
        __size_of_DS1621_Read_Temp 0030                            __ptext6 222E  
                          __ptext7 03F8                            __ptext8 238E  
                          __ptext9 21B6                    __size_of_printf 035A  
                __end_of_init_UART 2300                __end_of_Turn_On_Fan 222E  
           __end_of_init_INTERRUPT 22AE                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF06           __end_of_force_nec_state0 23FC  
                        _T1CONbits 000FCD                            _dpowers FEF4  
            __end_of_do_update_pwm 184A                            _isdigit 21B6  
                 ___awmod@dividend 001F                         _duty_cycle 005C  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 22C4  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 1C72  
                 ??_Increase_Speed 0044                         ??_drawChar 0035  
                        _LCD_Reset 2314                      _setAddrWindow 1D6E  
                   __pintcode_body 1A6A                         delay_ms@ms 0017  
             end_of_initialization 1A60                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD18  
        __size_of_DS3231_Read_Time 0058                            int_func 1A6A  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 0021                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 00EA                   drawtext@cursor_y 00E9  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 00A0  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 00A9                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00E5                         drawPixel@x 001B  
                       drawPixel@y 0018                   _Wait_Half_Second 227C  
               _Update_Screen$2643 00ED                        _DS1621_Init 2248  
                      ___ftdiv@exp 0039                        printf@width 0036  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 0174  
                   __end_of_i2cAck 236E                        ___ftmul@exp 0026  
         DS1621_Read_Temp@Data_Ret 0016                        _Turn_On_Fan 2214  
               __end_of_i2cHighSda 23F4                 __end_of_i2cHighScl 23A8  
                   __end_of___wmul 2142                      delay_ms@count 001B  
                       _write_data 236E                      __pidataCOMRAM 23FC  
                   __end_of_chkisr 1AE6           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 22AE                         drawtext@bg 003E  
                        _Nec_code1 0051                          _i2cLowSda 23D2  
                        _i2cLowScl 23E4               __end_of_Wait_One_Sec 23C8  
                   __end_of_printf 0752                       ??_Set_DC_RGB 0021  
                   __end_of_strcpy 2090                     __end_of_strlen 1FAE  
                        _Nec_state 0052                start_initialization 19EA  
           Update_Screen@neg_tempF 00EF         __size_of_DS3231_Setup_Time 005C  
          __size_of_Decrease_Speed 0026                    ??_write_command 0013  
                        _OpenUSART 1AE6                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 2326                 __end_of_Set_DC_RGB 205E  
                         ??___wmul 0015                       ?_Set_RPM_RGB 001F  
                    ?_Turn_Off_Fan 0001                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 20C0  
                         ??_strcpy 0015                           ??_strlen 0013  
                     ??_Toggle_Fan 0044                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00E4                        ??_LCD_Reset 001D  
                     _isdigit$2306 0012                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 1C72  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 0011                 __end_of_Toggle_Fan 22D8  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 211A  
                   ??_Turn_Off_Fan 0044                      __pmediumconst FD18  
                         ?___awdiv 0017                           ?___awmod 001F  
                         ?___ftdiv 002C                           ?___ftmul 001D  
                         ?___fttol 0011                          __tft_type 0053  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 2262  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 2090  
                         ?_get_RPM 001F                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 23B4  
                         _I2C_Read 1EEA                           _I2C_Stop 2338  
                _Initialize_Screen 0752                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 22EC  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FEFE                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 2338                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 0D5C  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           __size_of_Update_Screen 03DC                           _PIR1bits 000F9E  
                 ??_init_INTERRUPT 0011              __size_of_Wait_One_Sec 000A  
                        _setup_day 0066                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC           __end_of_Wait_Half_Second 2296  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 09BC  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                       ?_init_UART 0001                     _Decrease_Speed 216A  
                      _INTCON2bits 000FF1                          copy_data0 1A16  
                        copy_data1 1A36                          drawtext@i 00E7  
           __size_of_drawFastVLine 0088                          drawtext@x 00E4  
                        drawtext@y 0039                           _Nec_code 00F4  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 0014                       ?_DS1621_Init 0001  
                         _Rcmd2red 1FAE                   __size_of_Do_Init 004C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0048                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00BB                       _Wait_One_Sec 23BE  
                         __Hrparam 0000             __size_of_do_update_pwm 00B6  
               __end_of_fillScreen 2214                           __Lrparam 0000  
               __end_of_drawCircle 0D5C                       ?_Turn_On_Fan 0001  
                 __size_of___awdiv 0096                   __size_of___awmod 0082  
                 __size_of___ftdiv 00E2                   __size_of___ftmul 00F8  
                 __size_of___fttol 00E6                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C               __size_of_Set_RPM_RGB 0052  
                         ___ftpack 16CE                           ___lbtoft 2190  
                     ?_I2C_ReStart 0001                   __size_of_get_RPM 003E  
                    _Update_Screen 001C                     _setup_fan_temp 006D  
                   _setup_fan_text 00B2                   __size_of_isdigit 0022  
                         _delay_ms 1D1C             __end_of_Decrease_Speed 2190  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 1DBC                           __ptext11 1BBA  
                         __ptext20 1F70                           __ptext12 1CCA  
                         __ptext21 0ED0                           __ptext13 202A  
                         __ptext30 1026                           __ptext22 1EA0  
                         __ptext14 184A                           __ptext31 236E  
                         __ptext23 18E0                           __ptext15 0752  
                         __ptext40 1AE6                           __ptext32 237E  
                         __ptext24 0BAE                           __ptext16 205E  
                         __ptext41 2296                           __ptext33 22D8  
                         __ptext25 2090                           __ptext17 21F8  
                         __ptext50 142A                           __ptext42 23B4  
                         __ptext34 2314                           __ptext26 1D6E  
                         __ptext18 15F2                           __ptext51 1240  
                         __ptext43 2248                           __ptext35 1D1C  
                         __ptext27 20F0                           __ptext19 1136  
                         __ptext60 20C0                           __ptext52 1510  
                         __ptext44 21D8                           __ptext36 211A  
                         __ptext28 1338                           __ptext61 1FEC  
                         __ptext53 16CE                           __ptext45 2262  
                         __ptext37 2142                           __ptext29 1FAE  
                         __ptext70 23EC                           __ptext62 2338  
                         __ptext54 23BE                           __ptext46 216A  
                         __ptext38 1E08                           __ptext71 239C  
                         __ptext63 234A                           __ptext55 227C  
                         __ptext47 2300                           __ptext39 22EC  
                         __ptext64 1EEA                           __ptext56 23DC  
                         __ptext48 1794                           __ptext73 23A8  
                         __ptext65 23C8                           __ptext57 2326  
                         __ptext49 2190                           __ptext74 0D5C  
                         __ptext66 235C                           __ptext58 1C16  
                         __ptext75 23F4                           __ptext67 22AE  
                         __ptext59 1C72                           __ptext68 23D2  
                         __ptext69 23E4                           _fillRect 1EA0  
                         _drawChar 0ED0               __end_of_Turn_Off_Fan 2248  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 1136                         strcpy@from 0013  
                    _fillRectangle 15F2           __end_of_DS1621_Read_Temp 20F0  
                 ?_Activate_Buzzer 0001                      __size_of_main 01F2  
          __size_of_Increase_Speed 0028                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 18E0  
                        printf@idx 002F                           _spiwrite 22D8  
                        printf@val 0033                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 1CCA  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 1794  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   Set_RPM_RGB@F4110 0080  
                 ___lwmod@dividend 0018              __end_of_write_command 238E  
                  fillScreen@color 0024            do_update_pwm@duty_cycle 0041  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                     ??_write_data 0013                         _TIMER1_isr 23A8  
                    fillRect@color 0026                     ?_do_update_pwm 0001  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0068                       _setup_second 006A  
                  Set_RPM_RGB@temp 0021              __end_of_setAddrWindow 1DBC  
               fillRectangle@color 001B                  do_update_pwm@dc_I 0042  
                do_update_pwm@dc_f 003E                      drawChar@color 0030  
                      _setup_month 0069                     Set_RPM_RGB@rpm 001F  
               __end_of_write_data 237E          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001A  
        ?_I2C_Write_Cmd_Write_Data 0013  
