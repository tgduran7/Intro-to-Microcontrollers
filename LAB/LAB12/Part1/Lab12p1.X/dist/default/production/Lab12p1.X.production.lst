

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 28 16:37:10 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    95  0000                     
    96                           	psect	idataCOMRAM
    97  0023D0                     __pidataCOMRAM:
    98                           	opt stack 0
    99                           
   100                           ;initializer for _setup_fan_temp
   101  0023D0  4B                 	db	75
   102                           
   103                           ;initializer for _tempSecond
   104  0023D1  FF                 	db	255
   105                           
   106                           ;initializer for _wrap
   107  0023D2  01                 	db	1
   108                           
   109                           	psect	idataBANK0
   110  001B52                     __pidataBANK0:
   111                           	opt stack 0
   112                           
   113                           ;initializer for Set_RPM_RGB@F4110
   114  001B52  0001               	dw	1
   115  001B54  0003               	dw	3
   116  001B56  0002               	dw	2
   117  001B58  0004               	dw	4
   118  001B5A  0005               	dw	5
   119  001B5C  0006               	dw	6
   120  001B5E  0007               	dw	7
   121                           
   122                           ;initializer for _alarm_time
   123  001B60  30                 	db	48
   124  001B61  30                 	db	48
   125  001B62  3A                 	db	58
   126  001B63  30                 	db	48
   127  001B64  30                 	db	48
   128  001B65  3A                 	db	58
   129  001B66  30                 	db	48
   130  001B67  30                 	db	48
   131  001B68  00                 	db	0
   132                           
   133                           ;initializer for _setup_alarm_time
   134  001B69  30                 	db	48
   135  001B6A  30                 	db	48
   136  001B6B  3A                 	db	58
   137  001B6C  30                 	db	48
   138  001B6D  30                 	db	48
   139  001B6E  3A                 	db	58
   140  001B6F  30                 	db	48
   141  001B70  30                 	db	48
   142  001B71  00                 	db	0
   143                           
   144                           ;initializer for _setup_date
   145  001B72  30                 	db	48
   146  001B73  31                 	db	49
   147  001B74  2F                 	db	47
   148  001B75  30                 	db	48
   149  001B76  31                 	db	49
   150  001B77  2F                 	db	47
   151  001B78  30                 	db	48
   152  001B79  30                 	db	48
   153  001B7A  00                 	db	0
   154                           
   155                           ;initializer for _setup_time
   156  001B7B  30                 	db	48
   157  001B7C  30                 	db	48
   158  001B7D  3A                 	db	58
   159  001B7E  30                 	db	48
   160  001B7F  30                 	db	48
   161  001B80  3A                 	db	58
   162  001B81  30                 	db	48
   163  001B82  30                 	db	48
   164  001B83  00                 	db	0
   165                           
   166                           ;initializer for _setup_fan_text
   167  001B84  30                 	db	48
   168  001B85  37                 	db	55
   169  001B86  35                 	db	53
   170  001B87  46                 	db	70
   171  001B88  00                 	db	0
   172                           
   173                           ;initializer for _Alarm_SW_Txt
   174  001B89  4F                 	db	79
   175  001B8A  46                 	db	70
   176  001B8B  46                 	db	70
   177  001B8C  00                 	db	0
   178                           
   179                           ;initializer for _RTC_ALARM_Txt
   180  001B8D  30                 	db	48
   181  001B8E  00                 	db	0
   182                           
   183                           ;initializer for _date
   184  001B8F  30                 	db	48
   185  001B90  30                 	db	48
   186  001B91  2F                 	db	47
   187  001B92  30                 	db	48
   188  001B93  30                 	db	48
   189  001B94  2F                 	db	47
   190  001B95  30                 	db	48
   191  001B96  30                 	db	48
   192  001B97  00                 	db	0
   193                           
   194                           ;initializer for _time
   195  001B98  30                 	db	48
   196  001B99  30                 	db	48
   197  001B9A  3A                 	db	58
   198  001B9B  30                 	db	48
   199  001B9C  30                 	db	48
   200  001B9D  3A                 	db	58
   201  001B9E  30                 	db	48
   202  001B9F  30                 	db	48
   203  001BA0  00                 	db	0
   204                           
   205                           ;initializer for _RPM_Txt
   206  001BA1  30                 	db	48
   207  001BA2  30                 	db	48
   208  001BA3  30                 	db	48
   209  001BA4  30                 	db	48
   210  001BA5  00                 	db	0
   211                           
   212                           ;initializer for _DC_Txt
   213  001BA6  30                 	db	48
   214  001BA7  30                 	db	48
   215  001BA8  30                 	db	48
   216  001BA9  00                 	db	0
   217                           
   218                           ;initializer for _Fan_SW_Txt
   219  001BAA  4F                 	db	79
   220  001BAB  46                 	db	70
   221  001BAC  46                 	db	70
   222  001BAD  00                 	db	0
   223                           
   224                           ;initializer for _tempC
   225  001BAE  2B                 	db	43
   226  001BAF  32                 	db	50
   227  001BB0  35                 	db	53
   228  001BB1  00                 	db	0
   229                           
   230                           ;initializer for _tempF
   231  001BB2  2B                 	db	43
   232  001BB3  37                 	db	55
   233  001BB4  37                 	db	55
   234  001BB5  00                 	db	0
   235                           
   236                           	psect	idataBANK1
   237  001E50                     __pidataBANK1:
   238                           	opt stack 0
   239                           
   240                           ;initializer for _array1
   241  001E50  A2                 	db	162
   242  001E51  62                 	db	98
   243  001E52  E2                 	db	226
   244  001E53  22                 	db	34
   245  001E54  02                 	db	2
   246  001E55  C2                 	db	194
   247  001E56  E0                 	db	224
   248  001E57  A8                 	db	168
   249  001E58  90                 	db	144
   250  001E59  68                 	db	104
   251  001E5A  98                 	db	152
   252  001E5B  B0                 	db	176
   253  001E5C  30                 	db	48
   254  001E5D  18                 	db	24
   255  001E5E  7A                 	db	122
   256  001E5F  10                 	db	16
   257  001E60  38                 	db	56
   258  001E61  5A                 	db	90
   259  001E62  42                 	db	66
   260  001E63  4A                 	db	74
   261  001E64  52                 	db	82
   262                           
   263                           ;initializer for _color
   264  001E65  01                 	db	1
   265  001E66  01                 	db	1
   266  001E67  01                 	db	1
   267  001E68  04                 	db	4
   268  001E69  04                 	db	4
   269  001E6A  02                 	db	2
   270  001E6B  05                 	db	5
   271  001E6C  05                 	db	5
   272  001E6D  05                 	db	5
   273  001E6E  07                 	db	7
   274  001E6F  07                 	db	7
   275  001E70  07                 	db	7
   276  001E71  07                 	db	7
   277  001E72  07                 	db	7
   278  001E73  07                 	db	7
   279  001E74  07                 	db	7
   280  001E75  07                 	db	7
   281  001E76  07                 	db	7
   282  001E77  07                 	db	7
   283  001E78  07                 	db	7
   284  001E79  07                 	db	7
   285                           
   286                           ;initializer for _buffer
   287  001E7A  20                 	db	32
   288  001E7B  45                 	db	69
   289  001E7C  43                 	db	67
   290  001E7D  45                 	db	69
   291  001E7E  33                 	db	51
   292  001E7F  33                 	db	51
   293  001E80  30                 	db	48
   294  001E81  31                 	db	49
   295  001E82  4C                 	db	76
   296  001E83  20                 	db	32
   297  001E84  53                 	db	83
   298  001E85  70                 	db	112
   299  001E86  27                 	db	39
   300  001E87  32                 	db	50
   301  001E88  31                 	db	49
   302  001E89  20                 	db	32
   303  001E8A  4C                 	db	76
   304  001E8B  31                 	db	49
   305  001E8C  32                 	db	50
   306  001E8D  00                 	db	0
   307  001E8E  00                 	db	0
   308  001E8F  00                 	db	0
   309  001E90  00                 	db	0
   310  001E91  00                 	db	0
   311  001E92  00                 	db	0
   312  001E93  00                 	db	0
   313  001E94  00                 	db	0
   314  001E95  00                 	db	0
   315  001E96  00                 	db	0
   316  001E97  00                 	db	0
   317  001E98  00                 	db	0
   318  001E99  00                 	db	0
   319  001E9A  00                 	db	0
   320                           
   321                           	psect	mediumconst
   322  00FD3E                     __pmediumconst:
   323                           	opt stack 0
   324  00FD3E  00                 	db	0
   325  00FD3F                     _font:
   326                           	opt stack 0
   327  00FD3F  00                 	db	0
   328  00FD40  00                 	db	0
   329  00FD41  00                 	db	0
   330  00FD42  00                 	db	0
   331  00FD43  00                 	db	0
   332  00FD44  00                 	db	0
   333  00FD45  00                 	db	0
   334  00FD46  5F                 	db	95
   335  00FD47  00                 	db	0
   336  00FD48  00                 	db	0
   337  00FD49  00                 	db	0
   338  00FD4A  07                 	db	7
   339  00FD4B  00                 	db	0
   340  00FD4C  07                 	db	7
   341  00FD4D  00                 	db	0
   342  00FD4E  14                 	db	20
   343  00FD4F  7F                 	db	127
   344  00FD50  14                 	db	20
   345  00FD51  7F                 	db	127
   346  00FD52  14                 	db	20
   347  00FD53  24                 	db	36
   348  00FD54  2A                 	db	42
   349  00FD55  7F                 	db	127
   350  00FD56  2A                 	db	42
   351  00FD57  12                 	db	18
   352  00FD58  23                 	db	35
   353  00FD59  13                 	db	19
   354  00FD5A  08                 	db	8
   355  00FD5B  64                 	db	100
   356  00FD5C  62                 	db	98
   357  00FD5D  36                 	db	54
   358  00FD5E  49                 	db	73
   359  00FD5F  56                 	db	86
   360  00FD60  20                 	db	32
   361  00FD61  50                 	db	80
   362  00FD62  00                 	db	0
   363  00FD63  08                 	db	8
   364  00FD64  07                 	db	7
   365  00FD65  03                 	db	3
   366  00FD66  00                 	db	0
   367  00FD67  00                 	db	0
   368  00FD68  1C                 	db	28
   369  00FD69  22                 	db	34
   370  00FD6A  41                 	db	65
   371  00FD6B  00                 	db	0
   372  00FD6C  00                 	db	0
   373  00FD6D  41                 	db	65
   374  00FD6E  22                 	db	34
   375  00FD6F  1C                 	db	28
   376  00FD70  00                 	db	0
   377  00FD71  2A                 	db	42
   378  00FD72  1C                 	db	28
   379  00FD73  7F                 	db	127
   380  00FD74  1C                 	db	28
   381  00FD75  2A                 	db	42
   382  00FD76  08                 	db	8
   383  00FD77  08                 	db	8
   384  00FD78  3E                 	db	62
   385  00FD79  08                 	db	8
   386  00FD7A  08                 	db	8
   387  00FD7B  00                 	db	0
   388  00FD7C  80                 	db	128
   389  00FD7D  70                 	db	112
   390  00FD7E  30                 	db	48
   391  00FD7F  00                 	db	0
   392  00FD80  08                 	db	8
   393  00FD81  08                 	db	8
   394  00FD82  08                 	db	8
   395  00FD83  08                 	db	8
   396  00FD84  08                 	db	8
   397  00FD85  00                 	db	0
   398  00FD86  00                 	db	0
   399  00FD87  60                 	db	96
   400  00FD88  60                 	db	96
   401  00FD89  00                 	db	0
   402  00FD8A  20                 	db	32
   403  00FD8B  10                 	db	16
   404  00FD8C  08                 	db	8
   405  00FD8D  04                 	db	4
   406  00FD8E  02                 	db	2
   407  00FD8F  3E                 	db	62
   408  00FD90  51                 	db	81
   409  00FD91  49                 	db	73
   410  00FD92  45                 	db	69
   411  00FD93  3E                 	db	62
   412  00FD94  00                 	db	0
   413  00FD95  42                 	db	66
   414  00FD96  7F                 	db	127
   415  00FD97  40                 	db	64
   416  00FD98  00                 	db	0
   417  00FD99  72                 	db	114
   418  00FD9A  49                 	db	73
   419  00FD9B  49                 	db	73
   420  00FD9C  49                 	db	73
   421  00FD9D  46                 	db	70
   422  00FD9E  21                 	db	33
   423  00FD9F  41                 	db	65
   424  00FDA0  49                 	db	73
   425  00FDA1  4D                 	db	77
   426  00FDA2  33                 	db	51
   427  00FDA3  18                 	db	24
   428  00FDA4  14                 	db	20
   429  00FDA5  12                 	db	18
   430  00FDA6  7F                 	db	127
   431  00FDA7  10                 	db	16
   432  00FDA8  27                 	db	39
   433  00FDA9  45                 	db	69
   434  00FDAA  45                 	db	69
   435  00FDAB  45                 	db	69
   436  00FDAC  39                 	db	57
   437  00FDAD  3C                 	db	60
   438  00FDAE  4A                 	db	74
   439  00FDAF  49                 	db	73
   440  00FDB0  49                 	db	73
   441  00FDB1  31                 	db	49
   442  00FDB2  41                 	db	65
   443  00FDB3  21                 	db	33
   444  00FDB4  11                 	db	17
   445  00FDB5  09                 	db	9
   446  00FDB6  07                 	db	7
   447  00FDB7  36                 	db	54
   448  00FDB8  49                 	db	73
   449  00FDB9  49                 	db	73
   450  00FDBA  49                 	db	73
   451  00FDBB  36                 	db	54
   452  00FDBC  46                 	db	70
   453  00FDBD  49                 	db	73
   454  00FDBE  49                 	db	73
   455  00FDBF  29                 	db	41
   456  00FDC0  1E                 	db	30
   457  00FDC1  00                 	db	0
   458  00FDC2  00                 	db	0
   459  00FDC3  14                 	db	20
   460  00FDC4  00                 	db	0
   461  00FDC5  00                 	db	0
   462  00FDC6  00                 	db	0
   463  00FDC7  40                 	db	64
   464  00FDC8  34                 	db	52
   465  00FDC9  00                 	db	0
   466  00FDCA  00                 	db	0
   467  00FDCB  00                 	db	0
   468  00FDCC  08                 	db	8
   469  00FDCD  14                 	db	20
   470  00FDCE  22                 	db	34
   471  00FDCF  41                 	db	65
   472  00FDD0  14                 	db	20
   473  00FDD1  14                 	db	20
   474  00FDD2  14                 	db	20
   475  00FDD3  14                 	db	20
   476  00FDD4  14                 	db	20
   477  00FDD5  00                 	db	0
   478  00FDD6  41                 	db	65
   479  00FDD7  22                 	db	34
   480  00FDD8  14                 	db	20
   481  00FDD9  08                 	db	8
   482  00FDDA  02                 	db	2
   483  00FDDB  01                 	db	1
   484  00FDDC  59                 	db	89
   485  00FDDD  09                 	db	9
   486  00FDDE  06                 	db	6
   487  00FDDF  3E                 	db	62
   488  00FDE0  41                 	db	65
   489  00FDE1  5D                 	db	93
   490  00FDE2  59                 	db	89
   491  00FDE3  4E                 	db	78
   492  00FDE4  7C                 	db	124
   493  00FDE5  12                 	db	18
   494  00FDE6  11                 	db	17
   495  00FDE7  12                 	db	18
   496  00FDE8  7C                 	db	124
   497  00FDE9  7F                 	db	127
   498  00FDEA  49                 	db	73
   499  00FDEB  49                 	db	73
   500  00FDEC  49                 	db	73
   501  00FDED  36                 	db	54
   502  00FDEE  3E                 	db	62
   503  00FDEF  41                 	db	65
   504  00FDF0  41                 	db	65
   505  00FDF1  41                 	db	65
   506  00FDF2  22                 	db	34
   507  00FDF3  7F                 	db	127
   508  00FDF4  41                 	db	65
   509  00FDF5  41                 	db	65
   510  00FDF6  41                 	db	65
   511  00FDF7  3E                 	db	62
   512  00FDF8  7F                 	db	127
   513  00FDF9  49                 	db	73
   514  00FDFA  49                 	db	73
   515  00FDFB  49                 	db	73
   516  00FDFC  41                 	db	65
   517  00FDFD  7F                 	db	127
   518  00FDFE  09                 	db	9
   519  00FDFF  09                 	db	9
   520  00FE00  09                 	db	9
   521  00FE01  01                 	db	1
   522  00FE02  3E                 	db	62
   523  00FE03  41                 	db	65
   524  00FE04  41                 	db	65
   525  00FE05  51                 	db	81
   526  00FE06  73                 	db	115
   527  00FE07  7F                 	db	127
   528  00FE08  08                 	db	8
   529  00FE09  08                 	db	8
   530  00FE0A  08                 	db	8
   531  00FE0B  7F                 	db	127
   532  00FE0C  00                 	db	0
   533  00FE0D  41                 	db	65
   534  00FE0E  7F                 	db	127
   535  00FE0F  41                 	db	65
   536  00FE10  00                 	db	0
   537  00FE11  20                 	db	32
   538  00FE12  40                 	db	64
   539  00FE13  41                 	db	65
   540  00FE14  3F                 	db	63
   541  00FE15  01                 	db	1
   542  00FE16  7F                 	db	127
   543  00FE17  08                 	db	8
   544  00FE18  14                 	db	20
   545  00FE19  22                 	db	34
   546  00FE1A  41                 	db	65
   547  00FE1B  7F                 	db	127
   548  00FE1C  40                 	db	64
   549  00FE1D  40                 	db	64
   550  00FE1E  40                 	db	64
   551  00FE1F  40                 	db	64
   552  00FE20  7F                 	db	127
   553  00FE21  02                 	db	2
   554  00FE22  1C                 	db	28
   555  00FE23  02                 	db	2
   556  00FE24  7F                 	db	127
   557  00FE25  7F                 	db	127
   558  00FE26  04                 	db	4
   559  00FE27  08                 	db	8
   560  00FE28  10                 	db	16
   561  00FE29  7F                 	db	127
   562  00FE2A  3E                 	db	62
   563  00FE2B  41                 	db	65
   564  00FE2C  41                 	db	65
   565  00FE2D  41                 	db	65
   566  00FE2E  3E                 	db	62
   567  00FE2F  7F                 	db	127
   568  00FE30  09                 	db	9
   569  00FE31  09                 	db	9
   570  00FE32  09                 	db	9
   571  00FE33  06                 	db	6
   572  00FE34  3E                 	db	62
   573  00FE35  41                 	db	65
   574  00FE36  51                 	db	81
   575  00FE37  21                 	db	33
   576  00FE38  5E                 	db	94
   577  00FE39  7F                 	db	127
   578  00FE3A  09                 	db	9
   579  00FE3B  19                 	db	25
   580  00FE3C  29                 	db	41
   581  00FE3D  46                 	db	70
   582  00FE3E                     __end_of_font:
   583                           	opt stack 0
   584  00FE3E                     _font2:
   585                           	opt stack 0
   586  00FE3E  26                 	db	38
   587  00FE3F  49                 	db	73
   588  00FE40  49                 	db	73
   589  00FE41  49                 	db	73
   590  00FE42  32                 	db	50
   591  00FE43  03                 	db	3
   592  00FE44  01                 	db	1
   593  00FE45  7F                 	db	127
   594  00FE46  01                 	db	1
   595  00FE47  03                 	db	3
   596  00FE48  3F                 	db	63
   597  00FE49  40                 	db	64
   598  00FE4A  40                 	db	64
   599  00FE4B  40                 	db	64
   600  00FE4C  3F                 	db	63
   601  00FE4D  1F                 	db	31
   602  00FE4E  20                 	db	32
   603  00FE4F  40                 	db	64
   604  00FE50  20                 	db	32
   605  00FE51  1F                 	db	31
   606  00FE52  3F                 	db	63
   607  00FE53  40                 	db	64
   608  00FE54  38                 	db	56
   609  00FE55  40                 	db	64
   610  00FE56  3F                 	db	63
   611  00FE57  63                 	db	99
   612  00FE58  14                 	db	20
   613  00FE59  08                 	db	8
   614  00FE5A  14                 	db	20
   615  00FE5B  63                 	db	99
   616  00FE5C  03                 	db	3
   617  00FE5D  04                 	db	4
   618  00FE5E  78                 	db	120
   619  00FE5F  04                 	db	4
   620  00FE60  03                 	db	3
   621  00FE61  61                 	db	97
   622  00FE62  59                 	db	89
   623  00FE63  49                 	db	73
   624  00FE64  4D                 	db	77
   625  00FE65  43                 	db	67
   626  00FE66  00                 	db	0
   627  00FE67  7F                 	db	127
   628  00FE68  41                 	db	65
   629  00FE69  41                 	db	65
   630  00FE6A  41                 	db	65
   631  00FE6B  02                 	db	2
   632  00FE6C  04                 	db	4
   633  00FE6D  08                 	db	8
   634  00FE6E  10                 	db	16
   635  00FE6F  20                 	db	32
   636  00FE70  00                 	db	0
   637  00FE71  41                 	db	65
   638  00FE72  41                 	db	65
   639  00FE73  41                 	db	65
   640  00FE74  7F                 	db	127
   641  00FE75  04                 	db	4
   642  00FE76  02                 	db	2
   643  00FE77  01                 	db	1
   644  00FE78  02                 	db	2
   645  00FE79  04                 	db	4
   646  00FE7A  40                 	db	64
   647  00FE7B  40                 	db	64
   648  00FE7C  40                 	db	64
   649  00FE7D  40                 	db	64
   650  00FE7E  40                 	db	64
   651  00FE7F  00                 	db	0
   652  00FE80  03                 	db	3
   653  00FE81  07                 	db	7
   654  00FE82  08                 	db	8
   655  00FE83  00                 	db	0
   656  00FE84  20                 	db	32
   657  00FE85  54                 	db	84
   658  00FE86  54                 	db	84
   659  00FE87  78                 	db	120
   660  00FE88  40                 	db	64
   661  00FE89  7F                 	db	127
   662  00FE8A  28                 	db	40
   663  00FE8B  44                 	db	68
   664  00FE8C  44                 	db	68
   665  00FE8D  38                 	db	56
   666  00FE8E  38                 	db	56
   667  00FE8F  44                 	db	68
   668  00FE90  44                 	db	68
   669  00FE91  44                 	db	68
   670  00FE92  28                 	db	40
   671  00FE93  38                 	db	56
   672  00FE94  44                 	db	68
   673  00FE95  44                 	db	68
   674  00FE96  28                 	db	40
   675  00FE97  7F                 	db	127
   676  00FE98  38                 	db	56
   677  00FE99  54                 	db	84
   678  00FE9A  54                 	db	84
   679  00FE9B  54                 	db	84
   680  00FE9C  18                 	db	24
   681  00FE9D  00                 	db	0
   682  00FE9E  08                 	db	8
   683  00FE9F  7E                 	db	126
   684  00FEA0  09                 	db	9
   685  00FEA1  02                 	db	2
   686  00FEA2  18                 	db	24
   687  00FEA3  A4                 	db	164
   688  00FEA4  A4                 	db	164
   689  00FEA5  9C                 	db	156
   690  00FEA6  78                 	db	120
   691  00FEA7  7F                 	db	127
   692  00FEA8  08                 	db	8
   693  00FEA9  04                 	db	4
   694  00FEAA  04                 	db	4
   695  00FEAB  78                 	db	120
   696  00FEAC  00                 	db	0
   697  00FEAD  44                 	db	68
   698  00FEAE  7D                 	db	125
   699  00FEAF  40                 	db	64
   700  00FEB0  00                 	db	0
   701  00FEB1  20                 	db	32
   702  00FEB2  40                 	db	64
   703  00FEB3  40                 	db	64
   704  00FEB4  3D                 	db	61
   705  00FEB5  00                 	db	0
   706  00FEB6  7F                 	db	127
   707  00FEB7  10                 	db	16
   708  00FEB8  28                 	db	40
   709  00FEB9  44                 	db	68
   710  00FEBA  00                 	db	0
   711  00FEBB  00                 	db	0
   712  00FEBC  41                 	db	65
   713  00FEBD  7F                 	db	127
   714  00FEBE  40                 	db	64
   715  00FEBF  00                 	db	0
   716  00FEC0  7C                 	db	124
   717  00FEC1  04                 	db	4
   718  00FEC2  78                 	db	120
   719  00FEC3  04                 	db	4
   720  00FEC4  78                 	db	120
   721  00FEC5  7C                 	db	124
   722  00FEC6  08                 	db	8
   723  00FEC7  04                 	db	4
   724  00FEC8  04                 	db	4
   725  00FEC9  78                 	db	120
   726  00FECA  38                 	db	56
   727  00FECB  44                 	db	68
   728  00FECC  44                 	db	68
   729  00FECD  44                 	db	68
   730  00FECE  38                 	db	56
   731  00FECF  FC                 	db	252
   732  00FED0  18                 	db	24
   733  00FED1  24                 	db	36
   734  00FED2  24                 	db	36
   735  00FED3  18                 	db	24
   736  00FED4  18                 	db	24
   737  00FED5  24                 	db	36
   738  00FED6  24                 	db	36
   739  00FED7  18                 	db	24
   740  00FED8  FC                 	db	252
   741  00FED9  7C                 	db	124
   742  00FEDA  08                 	db	8
   743  00FEDB  04                 	db	4
   744  00FEDC  04                 	db	4
   745  00FEDD  08                 	db	8
   746  00FEDE  48                 	db	72
   747  00FEDF  54                 	db	84
   748  00FEE0  54                 	db	84
   749  00FEE1  54                 	db	84
   750  00FEE2  24                 	db	36
   751  00FEE3  04                 	db	4
   752  00FEE4  04                 	db	4
   753  00FEE5  3F                 	db	63
   754  00FEE6  44                 	db	68
   755  00FEE7  24                 	db	36
   756  00FEE8  3C                 	db	60
   757  00FEE9  40                 	db	64
   758  00FEEA  40                 	db	64
   759  00FEEB  20                 	db	32
   760  00FEEC  7C                 	db	124
   761  00FEED  1C                 	db	28
   762  00FEEE  20                 	db	32
   763  00FEEF  40                 	db	64
   764  00FEF0  20                 	db	32
   765  00FEF1  1C                 	db	28
   766  00FEF2  3C                 	db	60
   767  00FEF3  40                 	db	64
   768  00FEF4  30                 	db	48
   769  00FEF5  40                 	db	64
   770  00FEF6  3C                 	db	60
   771  00FEF7  44                 	db	68
   772  00FEF8  28                 	db	40
   773  00FEF9  10                 	db	16
   774  00FEFA  28                 	db	40
   775  00FEFB  44                 	db	68
   776  00FEFC  4C                 	db	76
   777  00FEFD  90                 	db	144
   778  00FEFE  90                 	db	144
   779  00FEFF  90                 	db	144
   780  00FF00  7C                 	db	124
   781  00FF01  44                 	db	68
   782  00FF02  64                 	db	100
   783  00FF03  54                 	db	84
   784  00FF04  4C                 	db	76
   785  00FF05  44                 	db	68
   786  00FF06  00                 	db	0
   787  00FF07  08                 	db	8
   788  00FF08  36                 	db	54
   789  00FF09  41                 	db	65
   790  00FF0A  00                 	db	0
   791  00FF0B  00                 	db	0
   792  00FF0C  00                 	db	0
   793  00FF0D  77                 	db	119
   794  00FF0E  00                 	db	0
   795  00FF0F  00                 	db	0
   796  00FF10  00                 	db	0
   797  00FF11  41                 	db	65
   798  00FF12  36                 	db	54
   799  00FF13  08                 	db	8
   800  00FF14  00                 	db	0
   801  00FF15  02                 	db	2
   802  00FF16  01                 	db	1
   803  00FF17  02                 	db	2
   804  00FF18  04                 	db	4
   805  00FF19  02                 	db	2
   806  00FF1A                     __end_of_font2:
   807                           	opt stack 0
   808  00FF1A                     _dpowers:
   809                           	opt stack 0
   810  00FF1A  0001               	dw	1
   811  00FF1C  000A               	dw	10
   812  00FF1E  0064               	dw	100
   813  00FF20  03E8               	dw	1000
   814  00FF22  2710               	dw	10000
   815  00FF24                     __end_of_dpowers:
   816                           	opt stack 0
   817  00FF24                     _hexpowers:
   818                           	opt stack 0
   819  00FF24  0001               	dw	1
   820  00FF26  0010               	dw	16
   821  00FF28  0100               	dw	256
   822  00FF2A  1000               	dw	4096
   823  00FF2C                     __end_of_hexpowers:
   824                           	opt stack 0
   825  0000                     _ADCON1	set	4033
   826  0000                     _CCP1CON	set	4029
   827  0000                     _CCP2CON	set	4026
   828  0000                     _CCPR1L	set	4030
   829  0000                     _CCPR2L	set	4027
   830  0000                     _INTCON2bits	set	4081
   831  0000                     _INTCONbits	set	4082
   832  0000                     _OSCCON	set	4051
   833  0000                     _PIE1bits	set	3997
   834  0000                     _PIR1bits	set	3998
   835  0000                     _PORTAbits	set	3968
   836  0000                     _PORTBbits	set	3969
   837  0000                     _PORTCbits	set	3970
   838  0000                     _PORTD	set	3971
   839  0000                     _PORTDbits	set	3971
   840  0000                     _PORTE	set	3972
   841  0000                     _PR2	set	4043
   842  0000                     _RCSTA	set	4011
   843  0000                     _RCSTAbits	set	4011
   844  0000                     _SPBRG	set	4015
   845  0000                     _SPBRGH	set	4016
   846  0000                     _SSPBUF	set	4041
   847  0000                     _SSPCON1	set	4038
   848  0000                     _SSPSTAT	set	4039
   849  0000                     _SSPSTATbits	set	4039
   850  0000                     _T0CON	set	4053
   851  0000                     _T0CONbits	set	4053
   852  0000                     _T1CON	set	4045
   853  0000                     _T1CONbits	set	4045
   854  0000                     _T2CON	set	4042
   855  0000                     _T3CON	set	4017
   856  0000                     _TMR0H	set	4055
   857  0000                     _TMR0L	set	4054
   858  0000                     _TMR1H	set	4047
   859  0000                     _TMR1L	set	4046
   860  0000                     _TMR3L	set	4018
   861  0000                     _TRISA	set	3986
   862  0000                     _TRISB	set	3987
   863  0000                     _TRISBbits	set	3987
   864  0000                     _TRISC	set	3988
   865  0000                     _TRISCbits	set	3988
   866  0000                     _TRISD	set	3989
   867  0000                     _TRISDbits	set	3989
   868  0000                     _TRISE	set	3990
   869  0000                     _TXREG	set	4013
   870  0000                     _TXSTA	set	4012
   871  0000                     _TXSTAbits	set	4012
   872  0000                     _RBPU	set	32655
   873  0000                     _TRMT	set	32097
   874  00FF2C                     STR_1:
   875  00FF2C  25                 	db	37
   876  00FF2D  30                 	db	48	;'0'
   877  00FF2E  32                 	db	50	;'2'
   878  00FF2F  78                 	db	120	;'x'
   879  00FF30  3A                 	db	58	;':'
   880  00FF31  25                 	db	37
   881  00FF32  30                 	db	48	;'0'
   882  00FF33  32                 	db	50	;'2'
   883  00FF34  78                 	db	120	;'x'
   884  00FF35  3A                 	db	58	;':'
   885  00FF36  25                 	db	37
   886  00FF37  30                 	db	48	;'0'
   887  00FF38  32                 	db	50	;'2'
   888  00FF39  78                 	db	120	;'x'
   889  00FF3A  20                 	db	32
   890  00FF3B  25                 	db	37
   891  00FF3C  30                 	db	48	;'0'
   892  00FF3D  32                 	db	50	;'2'
   893  00FF3E  78                 	db	120	;'x'
   894  00FF3F  2F                 	db	47
   895  00FF40  25                 	db	37
   896  00FF41  30                 	db	48	;'0'
   897  00FF42  32                 	db	50	;'2'
   898  00FF43  78                 	db	120	;'x'
   899  00FF44  2F                 	db	47
   900  00FF45  25                 	db	37
   901  00FF46  30                 	db	48	;'0'
   902  00FF47  32                 	db	50	;'2'
   903  00FF48  78                 	db	120	;'x'
   904  00FF49  00                 	db	0
   905  00FF4A                     STR_7:
   906  00FF4A  45                 	db	69	;'E'
   907  00FF4B  43                 	db	67	;'C'
   908  00FF4C  45                 	db	69	;'E'
   909  00FF4D  33                 	db	51	;'3'
   910  00FF4E  33                 	db	51	;'3'
   911  00FF4F  30                 	db	48	;'0'
   912  00FF50  31                 	db	49	;'1'
   913  00FF51  4C                 	db	76	;'L'
   914  00FF52  20                 	db	32
   915  00FF53  53                 	db	83	;'S'
   916  00FF54  70                 	db	112	;'p'
   917  00FF55  72                 	db	114	;'r'
   918  00FF56  69                 	db	105	;'i'
   919  00FF57  6E                 	db	110	;'n'
   920  00FF58  67                 	db	103	;'g'
   921  00FF59  20                 	db	32
   922  00FF5A  32                 	db	50	;'2'
   923  00FF5B  31                 	db	49	;'1'
   924  00FF5C  2D                 	db	45
   925  00FF5D  53                 	db	83	;'S'
   926  00FF5E  31                 	db	49	;'1'
   927  00FF5F  00                 	db	0
   928  00FF60                     STR_5:
   929  00FF60  43                 	db	67	;'C'
   930  00FF61  61                 	db	97	;'a'
   931  00FF62  6E                 	db	110	;'n'
   932  00FF63  6E                 	db	110	;'n'
   933  00FF64  6F                 	db	111	;'o'
   934  00FF65  74                 	db	116	;'t'
   935  00FF66  20                 	db	32
   936  00FF67  66                 	db	102	;'f'
   937  00FF68  69                 	db	105	;'i'
   938  00FF69  6E                 	db	110	;'n'
   939  00FF6A  64                 	db	100	;'d'
   940  00FF6B  20                 	db	32
   941  00FF6C  62                 	db	98	;'b'
   942  00FF6D  75                 	db	117	;'u'
   943  00FF6E  74                 	db	116	;'t'
   944  00FF6F  74                 	db	116	;'t'
   945  00FF70  6F                 	db	111	;'o'
   946  00FF71  6E                 	db	110	;'n'
   947  00FF72  20                 	db	32
   948  00FF73  0D                 	db	13
   949  00FF74  0A                 	db	10
   950  00FF75  00                 	db	0
   951  00FF76                     STR_2:
   952  00FF76  20                 	db	32
   953  00FF77  54                 	db	84	;'T'
   954  00FF78  65                 	db	101	;'e'
   955  00FF79  6D                 	db	109	;'m'
   956  00FF7A  70                 	db	112	;'p'
   957  00FF7B  20                 	db	32
   958  00FF7C  3D                 	db	61	;'='
   959  00FF7D  20                 	db	32
   960  00FF7E  25                 	db	37
   961  00FF7F  64                 	db	100	;'d'
   962  00FF80  20                 	db	32
   963  00FF81  43                 	db	67	;'C'
   964  00FF82  20                 	db	32
   965  00FF83  3D                 	db	61	;'='
   966  00FF84  20                 	db	32
   967  00FF85  25                 	db	37
   968  00FF86  64                 	db	100	;'d'
   969  00FF87  20                 	db	32
   970  00FF88  46                 	db	70	;'F'
   971  00FF89  20                 	db	32
   972  00FF8A  00                 	db	0
   973  00FF8B                     STR_3:
   974  00FF8B  52                 	db	82	;'R'
   975  00FF8C  50                 	db	80	;'P'
   976  00FF8D  4D                 	db	77	;'M'
   977  00FF8E  20                 	db	32
   978  00FF8F  3D                 	db	61	;'='
   979  00FF90  20                 	db	32
   980  00FF91  25                 	db	37
   981  00FF92  64                 	db	100	;'d'
   982  00FF93  20                 	db	32
   983  00FF94  20                 	db	32
   984  00FF95  64                 	db	100	;'d'
   985  00FF96  63                 	db	99	;'c'
   986  00FF97  20                 	db	32
   987  00FF98  3D                 	db	61	;'='
   988  00FF99  20                 	db	32
   989  00FF9A  25                 	db	37
   990  00FF9B  64                 	db	100	;'d'
   991  00FF9C  0D                 	db	13
   992  00FF9D  0A                 	db	10
   993  00FF9E  00                 	db	0
   994  00FF9F                     STR_18:
   995  00FF9F  30                 	db	48	;'0'
   996  00FFA0  31                 	db	49	;'1'
   997  00FFA1  32                 	db	50	;'2'
   998  00FFA2  33                 	db	51	;'3'
   999  00FFA3  34                 	db	52	;'4'
  1000  00FFA4  35                 	db	53	;'5'
  1001  00FFA5  36                 	db	54	;'6'
  1002  00FFA6  37                 	db	55	;'7'
  1003  00FFA7  38                 	db	56	;'8'
  1004  00FFA8  39                 	db	57	;'9'
  1005  00FFA9  61                 	db	97	;'a'
  1006  00FFAA  62                 	db	98	;'b'
  1007  00FFAB  63                 	db	99	;'c'
  1008  00FFAC  64                 	db	100	;'d'
  1009  00FFAD  65                 	db	101	;'e'
  1010  00FFAE  66                 	db	102	;'f'
  1011  00FFAF  00                 	db	0
  1012  00FFB0                     STR_4:
  1013  00FFB0  4E                 	db	78	;'N'
  1014  00FFB1  45                 	db	69	;'E'
  1015  00FFB2  43                 	db	67	;'C'
  1016  00FFB3  5F                 	db	95	;'_'
  1017  00FFB4  43                 	db	67	;'C'
  1018  00FFB5  6F                 	db	111	;'o'
  1019  00FFB6  64                 	db	100	;'d'
  1020  00FFB7  65                 	db	101	;'e'
  1021  00FFB8  20                 	db	32
  1022  00FFB9  3D                 	db	61	;'='
  1023  00FFBA  20                 	db	32
  1024  00FFBB  25                 	db	37
  1025  00FFBC  78                 	db	120	;'x'
  1026  00FFBD  0D                 	db	13
  1027  00FFBE  0A                 	db	10
  1028  00FFBF  00                 	db	0
  1029  00FFC0                     STR_6:
  1030  00FFC0  62                 	db	98	;'b'
  1031  00FFC1  75                 	db	117	;'u'
  1032  00FFC2  74                 	db	116	;'t'
  1033  00FFC3  74                 	db	116	;'t'
  1034  00FFC4  6F                 	db	111	;'o'
  1035  00FFC5  6E                 	db	110	;'n'
  1036  00FFC6  20                 	db	32
  1037  00FFC7  3D                 	db	61	;'='
  1038  00FFC8  20                 	db	32
  1039  00FFC9  25                 	db	37
  1040  00FFCA  64                 	db	100	;'d'
  1041  00FFCB  20                 	db	32
  1042  00FFCC  0D                 	db	13
  1043  00FFCD  0A                 	db	10
  1044  00FFCE  00                 	db	0
  1045  00FFCF                     STR_8:
  1046  00FFCF  54                 	db	84	;'T'
  1047  00FFD0  65                 	db	101	;'e'
  1048  00FFD1  6D                 	db	109	;'m'
  1049  00FFD2  70                 	db	112	;'p'
  1050  00FFD3  65                 	db	101	;'e'
  1051  00FFD4  72                 	db	114	;'r'
  1052  00FFD5  61                 	db	97	;'a'
  1053  00FFD6  74                 	db	116	;'t'
  1054  00FFD7  75                 	db	117	;'u'
  1055  00FFD8  72                 	db	114	;'r'
  1056  00FFD9  65                 	db	101	;'e'
  1057  00FFDA  3A                 	db	58	;':'
  1058  00FFDB  00                 	db	0
  1059  00FFDC                     STR_13:
  1060  00FFDC  20                 	db	32
  1061  00FFDD  20                 	db	32
  1062  00FFDE  46                 	db	70	;'F'
  1063  00FFDF  41                 	db	65	;'A'
  1064  00FFE0  4E                 	db	78	;'N'
  1065  00FFE1  00                 	db	0
  1066  00FFE2                     STR_11:
  1067  00FFE2  54                 	db	84	;'T'
  1068  00FFE3  69                 	db	105	;'i'
  1069  00FFE4  6D                 	db	109	;'m'
  1070  00FFE5  65                 	db	101	;'e'
  1071  00FFE6  00                 	db	0
  1072  00FFE7                     STR_12:
  1073  00FFE7  44                 	db	68	;'D'
  1074  00FFE8  61                 	db	97	;'a'
  1075  00FFE9  74                 	db	116	;'t'
  1076  00FFEA  65                 	db	101	;'e'
  1077  00FFEB  00                 	db	0
  1078  00FFEC                     STR_16:
  1079  00FFEC  4F                 	db	79	;'O'
  1080  00FFED  4E                 	db	78	;'N'
  1081  00FFEE  20                 	db	32
  1082  00FFEF  00                 	db	0
  1083  00FFF0                     STR_17:
  1084  00FFF0  4F                 	db	79	;'O'
  1085  00FFF1  46                 	db	70	;'F'
  1086  00FFF2  46                 	db	70	;'F'
  1087  00FFF3  00                 	db	0
  1088  00FFF4                     STR_15:
  1089  00FFF4  52                 	db	82	;'R'
  1090  00FFF5  50                 	db	80	;'P'
  1091  00FFF6  4D                 	db	77	;'M'
  1092  00FFF7  00                 	db	0
  1093  00FFF8                     STR_9:
  1094  00FFF8  43                 	db	67	;'C'
  1095  00FFF9  2F                 	db	47
  1096  00FFFA  00                 	db	0
  1097  00FFFB                     STR_14:
  1098  00FFFB  44                 	db	68	;'D'
  1099  00FFFC  43                 	db	67	;'C'
  1100  00FFFD  00                 	db	0
  1101  0000                     
  1102                           ; #config settings
  1103  00FFFE  00                 	db	0	; dummy byte at the end
  1104  0000                     
  1105                           	psect	cinit
  1106  0019E6                     __pcinit:
  1107                           	opt stack 0
  1108  0019E6                     start_initialization:
  1109                           	opt stack 0
  1110  0019E6                     __initialization:
  1111                           	opt stack 0
  1112                           
  1113                           ; Clear objects allocated to BANK0 (10 bytes)
  1114  0019E6  EE00  F0F4         	lfsr	0,__pbssBANK0
  1115  0019EA  0E0A               	movlw	10
  1116  0019EC                     clear_0:
  1117  0019EC  6AEE               	clrf	postinc0,c
  1118  0019EE  06E8               	decf	wreg,f,c
  1119  0019F0  E1FD               	bnz	clear_0
  1120                           
  1121                           ; Clear objects allocated to COMRAM (41 bytes)
  1122  0019F2  EE00  F044         	lfsr	0,__pbssCOMRAM
  1123  0019F6  0E29               	movlw	41
  1124  0019F8                     clear_1:
  1125  0019F8  6AEE               	clrf	postinc0,c
  1126  0019FA  06E8               	decf	wreg,f,c
  1127  0019FC  E1FD               	bnz	clear_1
  1128                           
  1129                           ; Initialize objects allocated to BANK1 (75 bytes)
  1130                           ; load TBLPTR registers with __pidataBANK1
  1131  0019FE  0E50               	movlw	low __pidataBANK1
  1132  001A00  6EF6               	movwf	tblptrl,c
  1133  001A02  0E1E               	movlw	high __pidataBANK1
  1134  001A04  6EF7               	movwf	tblptrh,c
  1135  001A06  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1136  001A08  6EF8               	movwf	tblptru,c
  1137  001A0A  EE01  F000         	lfsr	0,__pdataBANK1
  1138  001A0E  EE10 F04B          	lfsr	1,75
  1139  001A12                     copy_data0:
  1140  001A12  0009               	tblrd		*+
  1141  001A14  CFF5 FFEE          	movff	tablat,postinc0
  1142  001A18  50E5               	movf	postdec1,w,c
  1143  001A1A  50E1               	movf	fsr1l,w,c
  1144  001A1C  E1FA               	bnz	copy_data0
  1145                           
  1146                           ; Initialize objects allocated to BANK0 (100 bytes)
  1147                           ; load TBLPTR registers with __pidataBANK0
  1148  001A1E  0E52               	movlw	low __pidataBANK0
  1149  001A20  6EF6               	movwf	tblptrl,c
  1150  001A22  0E1B               	movlw	high __pidataBANK0
  1151  001A24  6EF7               	movwf	tblptrh,c
  1152  001A26  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1153  001A28  6EF8               	movwf	tblptru,c
  1154  001A2A  EE00  F080         	lfsr	0,__pdataBANK0
  1155  001A2E  EE10 F064          	lfsr	1,100
  1156  001A32                     copy_data1:
  1157  001A32  0009               	tblrd		*+
  1158  001A34  CFF5 FFEE          	movff	tablat,postinc0
  1159  001A38  50E5               	movf	postdec1,w,c
  1160  001A3A  50E1               	movf	fsr1l,w,c
  1161  001A3C  E1FA               	bnz	copy_data1
  1162                           
  1163                           ; Initialize objects allocated to COMRAM (3 bytes)
  1164                           ; load TBLPTR registers with __pidataCOMRAM
  1165  001A3E  0ED0               	movlw	low __pidataCOMRAM
  1166  001A40  6EF6               	movwf	tblptrl,c
  1167  001A42  0E23               	movlw	high __pidataCOMRAM
  1168  001A44  6EF7               	movwf	tblptrh,c
  1169  001A46  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1170  001A48  6EF8               	movwf	tblptru,c
  1171  001A4A  0009               	tblrd		*+	;fetch initializer
  1172  001A4C  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1173  001A50  0009               	tblrd		*+	;fetch initializer
  1174  001A52  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1175  001A56  0009               	tblrd		*+	;fetch initializer
  1176  001A58  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1177  001A5C                     end_of_initialization:
  1178                           	opt stack 0
  1179  001A5C                     __end_of__initialization:
  1180                           	opt stack 0
  1181  001A5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1182  001A5E  6EF8               	movwf	tblptru,c
  1183  001A60  0100               	movlb	0
  1184  001A62  EFDE  F004         	goto	_main	;jump to C main() function
  1185                           tblptru	equ	0xFF8
  1186                           tblptrh	equ	0xFF7
  1187                           tblptrl	equ	0xFF6
  1188                           tablat	equ	0xFF5
  1189                           postinc0	equ	0xFEE
  1190                           wreg	equ	0xFE8
  1191                           postdec1	equ	0xFE5
  1192                           fsr1l	equ	0xFE1
  1193                           
  1194                           	psect	bssCOMRAM
  1195  000044                     __pbssCOMRAM:
  1196                           	opt stack 0
  1197  000044                     _DS1621_tempC:
  1198                           	opt stack 0
  1199  000044                     	ds	2
  1200  000046                     _DS1621_tempF:
  1201                           	opt stack 0
  1202  000046                     	ds	2
  1203  000048                     _Time_Elapsed:
  1204                           	opt stack 0
  1205  000048                     	ds	2
  1206  00004A                     _nec_ok:
  1207                           	opt stack 0
  1208  00004A                     	ds	2
  1209  00004C                     _rpm:
  1210                           	opt stack 0
  1211  00004C                     	ds	2
  1212  00004E                     _txt:
  1213                           	opt stack 0
  1214  00004E                     	ds	2
  1215  000050                     _FAN:
  1216                           	opt stack 0
  1217  000050                     	ds	1
  1218  000051                     _Nec_code1:
  1219                           	opt stack 0
  1220  000051                     	ds	1
  1221  000052                     _Nec_state:
  1222                           	opt stack 0
  1223  000052                     	ds	1
  1224  000053                     __tft_type:
  1225                           	opt stack 0
  1226  000053                     	ds	1
  1227  000054                     _alarm_date:
  1228                           	opt stack 0
  1229  000054                     	ds	1
  1230  000055                     _alarm_hour:
  1231                           	opt stack 0
  1232  000055                     	ds	1
  1233  000056                     _alarm_minute:
  1234                           	opt stack 0
  1235  000056                     	ds	1
  1236  000057                     _alarm_second:
  1237                           	opt stack 0
  1238  000057                     	ds	1
  1239  000058                     _bit_count:
  1240                           	opt stack 0
  1241  000058                     	ds	1
  1242  000059                     _colstart:
  1243                           	opt stack 0
  1244  000059                     	ds	1
  1245  00005A                     _day:
  1246                           	opt stack 0
  1247  00005A                     	ds	1
  1248  00005B                     _dow:
  1249                           	opt stack 0
  1250  00005B                     	ds	1
  1251  00005C                     _duty_cycle:
  1252                           	opt stack 0
  1253  00005C                     	ds	1
  1254  00005D                     _found:
  1255                           	opt stack 0
  1256  00005D                     	ds	1
  1257  00005E                     _hour:
  1258                           	opt stack 0
  1259  00005E                     	ds	1
  1260  00005F                     _minute:
  1261                           	opt stack 0
  1262  00005F                     	ds	1
  1263  000060                     _month:
  1264                           	opt stack 0
  1265  000060                     	ds	1
  1266  000061                     _rowstart:
  1267                           	opt stack 0
  1268  000061                     	ds	1
  1269  000062                     _second:
  1270                           	opt stack 0
  1271  000062                     	ds	1
  1272  000063                     _setup_alarm_hour:
  1273                           	opt stack 0
  1274  000063                     	ds	1
  1275  000064                     _setup_alarm_minute:
  1276                           	opt stack 0
  1277  000064                     	ds	1
  1278  000065                     _setup_alarm_second:
  1279                           	opt stack 0
  1280  000065                     	ds	1
  1281  000066                     _setup_day:
  1282                           	opt stack 0
  1283  000066                     	ds	1
  1284  000067                     _setup_hour:
  1285                           	opt stack 0
  1286  000067                     	ds	1
  1287  000068                     _setup_minute:
  1288                           	opt stack 0
  1289  000068                     	ds	1
  1290  000069                     _setup_month:
  1291                           	opt stack 0
  1292  000069                     	ds	1
  1293  00006A                     _setup_second:
  1294                           	opt stack 0
  1295  00006A                     	ds	1
  1296  00006B                     _setup_year:
  1297                           	opt stack 0
  1298  00006B                     	ds	1
  1299  00006C                     _year:
  1300                           	opt stack 0
  1301  00006C                     	ds	1
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	dataCOMRAM
  1312  00006D                     __pdataCOMRAM:
  1313                           	opt stack 0
  1314  00006D                     _setup_fan_temp:
  1315                           	opt stack 0
  1316  00006D                     	ds	1
  1317  00006E                     _tempSecond:
  1318                           	opt stack 0
  1319  00006E                     	ds	1
  1320  00006F                     _wrap:
  1321                           	opt stack 0
  1322  00006F                     	ds	1
  1323                           tblptru	equ	0xFF8
  1324                           tblptrh	equ	0xFF7
  1325                           tblptrl	equ	0xFF6
  1326                           tablat	equ	0xFF5
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1l	equ	0xFE1
  1331                           
  1332                           	psect	bssBANK0
  1333  0000F4                     __pbssBANK0:
  1334                           	opt stack 0
  1335  0000F4                     _Nec_code:
  1336                           	opt stack 0
  1337  0000F4                     	ds	4
  1338  0000F8                     _ALARMEN:
  1339                           	opt stack 0
  1340  0000F8                     	ds	2
  1341  0000FA                     _nbr:
  1342                           	opt stack 0
  1343  0000FA                     	ds	2
  1344  0000FC                     _rps:
  1345                           	opt stack 0
  1346  0000FC                     	ds	2
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           
  1356                           	psect	dataBANK0
  1357  000080                     __pdataBANK0:
  1358                           	opt stack 0
  1359  000080                     Set_RPM_RGB@F4110:
  1360                           	opt stack 0
  1361  000080                     	ds	14
  1362  00008E                     _alarm_time:
  1363                           	opt stack 0
  1364  00008E                     	ds	9
  1365  000097                     _setup_alarm_time:
  1366                           	opt stack 0
  1367  000097                     	ds	9
  1368  0000A0                     _setup_date:
  1369                           	opt stack 0
  1370  0000A0                     	ds	9
  1371  0000A9                     _setup_time:
  1372                           	opt stack 0
  1373  0000A9                     	ds	9
  1374  0000B2                     _setup_fan_text:
  1375                           	opt stack 0
  1376  0000B2                     	ds	5
  1377  0000B7                     _Alarm_SW_Txt:
  1378                           	opt stack 0
  1379  0000B7                     	ds	4
  1380  0000BB                     _RTC_ALARM_Txt:
  1381                           	opt stack 0
  1382  0000BB                     	ds	2
  1383  0000BD                     _date:
  1384                           	opt stack 0
  1385  0000BD                     	ds	9
  1386  0000C6                     _time:
  1387                           	opt stack 0
  1388  0000C6                     	ds	9
  1389  0000CF                     _RPM_Txt:
  1390                           	opt stack 0
  1391  0000CF                     	ds	5
  1392  0000D4                     _DC_Txt:
  1393                           	opt stack 0
  1394  0000D4                     	ds	4
  1395  0000D8                     _Fan_SW_Txt:
  1396                           	opt stack 0
  1397  0000D8                     	ds	4
  1398  0000DC                     _tempC:
  1399                           	opt stack 0
  1400  0000DC                     	ds	4
  1401  0000E0                     _tempF:
  1402                           	opt stack 0
  1403  0000E0                     	ds	4
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           postinc0	equ	0xFEE
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1l	equ	0xFE1
  1412                           
  1413                           	psect	dataBANK1
  1414  000100                     __pdataBANK1:
  1415                           	opt stack 0
  1416  000100                     _array1:
  1417                           	opt stack 0
  1418  000100                     	ds	21
  1419  000115                     _color:
  1420                           	opt stack 0
  1421  000115                     	ds	21
  1422  00012A                     _buffer:
  1423                           	opt stack 0
  1424  00012A                     	ds	33
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           postdec1	equ	0xFE5
  1432                           fsr1l	equ	0xFE1
  1433                           
  1434                           	psect	cstackBANK0
  1435  0000E4                     __pcstackBANK0:
  1436                           	opt stack 0
  1437  0000E4                     drawtext@x:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x0
  1441  0000E4                     	ds	1
  1442  0000E5                     drawtext@textsize:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x1
  1446  0000E5                     	ds	2
  1447  0000E7                     drawtext@i:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x3
  1451  0000E7                     	ds	2
  1452  0000E9                     drawtext@cursor_y:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x5
  1456  0000E9                     	ds	1
  1457  0000EA                     drawtext@cursor_x:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x6
  1461  0000EA                     	ds	1
  1462  0000EB                     ??_Update_Screen:
  1463                           
  1464                           ; 0 bytes @ 0x7
  1465  0000EB                     	ds	2
  1466  0000ED                     _Update_Screen$2567:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x9
  1470  0000ED                     	ds	2
  1471  0000EF                     Update_Screen@neg_tempF:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0xB
  1475  0000EF                     	ds	2
  1476  0000F1                     ??_main:
  1477                           
  1478                           ; 0 bytes @ 0xD
  1479  0000F1                     	ds	1
  1480  0000F2                     main@j:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0xE
  1484  0000F2                     	ds	2
  1485                           tblptru	equ	0xFF8
  1486                           tblptrh	equ	0xFF7
  1487                           tblptrl	equ	0xFF6
  1488                           tablat	equ	0xFF5
  1489                           postinc0	equ	0xFEE
  1490                           wreg	equ	0xFE8
  1491                           postdec1	equ	0xFE5
  1492                           fsr1l	equ	0xFE1
  1493                           
  1494                           	psect	cstackCOMRAM
  1495  000001                     __pcstackCOMRAM:
  1496                           	opt stack 0
  1497  000001                     ??_INT0_isr:
  1498  000001                     
  1499                           ; 2 bytes @ 0x0
  1500  000001                     	ds	2
  1501  000003                     ??_chkisr:
  1502                           
  1503                           ; 0 bytes @ 0x2
  1504  000003                     	ds	14
  1505  000011                     ??_isdigit:
  1506  000011                     ?_strlen:
  1507                           	opt stack 0
  1508  000011                     ?___wmul:
  1509                           	opt stack 0
  1510  000011                     ?___lwdiv:
  1511                           	opt stack 0
  1512  000011                     ?___ftpack:
  1513                           	opt stack 0
  1514  000011                     ?___fttol:
  1515                           	opt stack 0
  1516  000011                     I2C_Read@ack:
  1517                           	opt stack 0
  1518  000011                     I2C_Write@outByte:
  1519                           	opt stack 0
  1520  000011                     putch@c:
  1521                           	opt stack 0
  1522  000011                     spiwrite@x:
  1523                           	opt stack 0
  1524  000011                     Wait_One_Sec@k:
  1525                           	opt stack 0
  1526  000011                     OpenUSART@spbrg:
  1527                           	opt stack 0
  1528  000011                     ___wmul@multiplier:
  1529                           	opt stack 0
  1530  000011                     ___lwdiv@dividend:
  1531                           	opt stack 0
  1532  000011                     strcpy@to:
  1533                           	opt stack 0
  1534  000011                     strlen@s:
  1535                           	opt stack 0
  1536  000011                     ___ftpack@arg:
  1537                           	opt stack 0
  1538  000011                     ___fttol@f1:
  1539                           	opt stack 0
  1540  000011                     I2C_Init@c:
  1541                           	opt stack 0
  1542                           
  1543                           ; 4 bytes @ 0x10
  1544  000011                     	ds	1
  1545  000012                     I2C_Read@n:
  1546                           	opt stack 0
  1547  000012                     I2C_Write@n:
  1548                           	opt stack 0
  1549  000012                     spiwrite@spidata:
  1550                           	opt stack 0
  1551  000012                     _isdigit$2230:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x11
  1555  000012                     	ds	1
  1556  000013                     ??_strlen:
  1557  000013                     I2C_Read@inByte:
  1558                           	opt stack 0
  1559  000013                     I2C_Write_Cmd_Only@Cmd:
  1560                           	opt stack 0
  1561  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1562                           	opt stack 0
  1563  000013                     write_command@cmd_:
  1564                           	opt stack 0
  1565  000013                     write_data@data_:
  1566                           	opt stack 0
  1567  000013                     OpenUSART@config:
  1568                           	opt stack 0
  1569  000013                     isdigit@c:
  1570                           	opt stack 0
  1571  000013                     ___wmul@multiplicand:
  1572                           	opt stack 0
  1573  000013                     ___lwdiv@divisor:
  1574                           	opt stack 0
  1575  000013                     strcpy@from:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x12
  1579  000013                     	ds	1
  1580  000014                     ?_DS1621_Read_Temp:
  1581                           	opt stack 0
  1582  000014                     I2C_Write_Cmd_Only@Device:
  1583                           	opt stack 0
  1584  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1585                           	opt stack 0
  1586  000014                     setAddrWindow@y0:
  1587                           	opt stack 0
  1588  000014                     ___ftpack@exp:
  1589                           	opt stack 0
  1590                           
  1591                           ; 1 bytes @ 0x13
  1592  000014                     	ds	1
  1593  000015                     ??___fttol:
  1594  000015                     I2C_Write_Cmd_Write_Data@Device:
  1595                           	opt stack 0
  1596  000015                     setAddrWindow@x1:
  1597                           	opt stack 0
  1598  000015                     ___ftpack@sign:
  1599                           	opt stack 0
  1600  000015                     ___lwdiv@counter:
  1601                           	opt stack 0
  1602  000015                     ___wmul@product:
  1603                           	opt stack 0
  1604  000015                     strcpy@cp:
  1605                           	opt stack 0
  1606  000015                     strlen@cp:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x14
  1610  000015                     	ds	1
  1611  000016                     ??___ftpack:
  1612  000016                     DS1621_Read_Temp@Data_Ret:
  1613                           	opt stack 0
  1614  000016                     setAddrWindow@y1:
  1615                           	opt stack 0
  1616  000016                     ___lwdiv@quotient:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x15
  1620  000016                     	ds	1
  1621  000017                     ?___awdiv:
  1622                           	opt stack 0
  1623  000017                     setAddrWindow@x0:
  1624                           	opt stack 0
  1625  000017                     delay_ms@ms:
  1626                           	opt stack 0
  1627  000017                     ___awdiv@dividend:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x16
  1631  000017                     	ds	1
  1632  000018                     ?___lwmod:
  1633                           	opt stack 0
  1634  000018                     drawPixel@y:
  1635                           	opt stack 0
  1636  000018                     drawFastVLine@y:
  1637                           	opt stack 0
  1638  000018                     fillRectangle@y:
  1639                           	opt stack 0
  1640  000018                     ___lwmod@dividend:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x17
  1644  000018                     	ds	1
  1645  000019                     ??_delay_ms:
  1646  000019                     ?___lbtoft:
  1647                           	opt stack 0
  1648  000019                     drawFastVLine@h:
  1649                           	opt stack 0
  1650  000019                     fillRectangle@w:
  1651                           	opt stack 0
  1652  000019                     drawPixel@color:
  1653                           	opt stack 0
  1654  000019                     ___awdiv@divisor:
  1655                           	opt stack 0
  1656                           
  1657                           ; 2 bytes @ 0x18
  1658  000019                     	ds	1
  1659  00001A                     fillRectangle@h:
  1660                           	opt stack 0
  1661  00001A                     ___fttol@sign1:
  1662                           	opt stack 0
  1663  00001A                     drawFastVLine@color:
  1664                           	opt stack 0
  1665  00001A                     ___lwmod@divisor:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0x19
  1669  00001A                     	ds	1
  1670  00001B                     drawPixel@x:
  1671                           	opt stack 0
  1672  00001B                     ___awdiv@counter:
  1673                           	opt stack 0
  1674  00001B                     delay_ms@count:
  1675                           	opt stack 0
  1676  00001B                     fillRectangle@color:
  1677                           	opt stack 0
  1678  00001B                     ___fttol@lval:
  1679                           	opt stack 0
  1680                           
  1681                           ; 4 bytes @ 0x1A
  1682  00001B                     	ds	1
  1683  00001C                     ??_drawFastVLine:
  1684  00001C                     ___awdiv@sign:
  1685                           	opt stack 0
  1686  00001C                     ___lbtoft@c:
  1687                           	opt stack 0
  1688  00001C                     ___lwmod@counter:
  1689                           	opt stack 0
  1690  00001C                     drawCircle@x0:
  1691                           	opt stack 0
  1692                           
  1693                           ; 2 bytes @ 0x1B
  1694  00001C                     	ds	1
  1695  00001D                     ??_fillRectangle:
  1696  00001D                     ?_printf:
  1697                           	opt stack 0
  1698  00001D                     ?___ftmul:
  1699                           	opt stack 0
  1700  00001D                     printf@f:
  1701                           	opt stack 0
  1702  00001D                     ___awdiv@quotient:
  1703                           	opt stack 0
  1704  00001D                     ___ftmul@f1:
  1705                           	opt stack 0
  1706                           
  1707                           ; 3 bytes @ 0x1C
  1708  00001D                     	ds	1
  1709  00001E                     drawCircle@y0:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x1D
  1713  00001E                     	ds	1
  1714  00001F                     ?_get_RPM:
  1715                           	opt stack 0
  1716  00001F                     ?___awmod:
  1717                           	opt stack 0
  1718  00001F                     ___fttol@exp1:
  1719                           	opt stack 0
  1720  00001F                     Set_DC_RGB@duty_cycle:
  1721                           	opt stack 0
  1722  00001F                     Set_RPM_RGB@rpm:
  1723                           	opt stack 0
  1724  00001F                     ___awmod@dividend:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x1E
  1728  00001F                     	ds	1
  1729  000020                     drawFastVLine@hi:
  1730                           	opt stack 0
  1731  000020                     drawCircle@r:
  1732                           	opt stack 0
  1733  000020                     ___ftmul@f2:
  1734                           	opt stack 0
  1735                           
  1736                           ; 3 bytes @ 0x1F
  1737  000020                     	ds	1
  1738  000021                     drawFastVLine@lo:
  1739                           	opt stack 0
  1740  000021                     fillRectangle@hi:
  1741                           	opt stack 0
  1742  000021                     get_RPM@RPS:
  1743                           	opt stack 0
  1744  000021                     ___awmod@divisor:
  1745                           	opt stack 0
  1746  000021                     Set_RPM_RGB@temp:
  1747                           	opt stack 0
  1748                           
  1749                           ; 14 bytes @ 0x20
  1750  000021                     	ds	1
  1751  000022                     drawFastVLine@x:
  1752                           	opt stack 0
  1753  000022                     fillRectangle@lo:
  1754                           	opt stack 0
  1755  000022                     drawCircle@color:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x21
  1759  000022                     	ds	1
  1760  000023                     ??___ftmul:
  1761  000023                     fillRect@y:
  1762                           	opt stack 0
  1763  000023                     fillRectangle@x:
  1764                           	opt stack 0
  1765  000023                     ___awmod@counter:
  1766                           	opt stack 0
  1767                           
  1768                           ; 1 bytes @ 0x22
  1769  000023                     	ds	1
  1770  000024                     ??_drawCircle:
  1771  000024                     fillRect@w:
  1772                           	opt stack 0
  1773  000024                     ___awmod@sign:
  1774                           	opt stack 0
  1775  000024                     fillScreen@color:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x23
  1779  000024                     	ds	1
  1780  000025                     fillRect@h:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x24
  1784  000025                     	ds	1
  1785  000026                     ___ftmul@exp:
  1786                           	opt stack 0
  1787  000026                     fillRect@color:
  1788                           	opt stack 0
  1789  000026                     drawCircle@ddF_x:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x25
  1793  000026                     	ds	1
  1794  000027                     ___ftmul@f3_as_product:
  1795                           	opt stack 0
  1796                           
  1797                           ; 3 bytes @ 0x26
  1798  000027                     	ds	1
  1799  000028                     ??_fillRect:
  1800  000028                     drawCircle@ddF_y:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x27
  1804  000028                     	ds	2
  1805  00002A                     ___ftmul@cntr:
  1806                           	opt stack 0
  1807  00002A                     drawCircle@f:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x29
  1811  00002A                     	ds	1
  1812  00002B                     ??_printf:
  1813  00002B                     fillRect@x:
  1814                           	opt stack 0
  1815  00002B                     ___ftmul@sign:
  1816                           	opt stack 0
  1817                           
  1818                           ; 1 bytes @ 0x2A
  1819  00002B                     	ds	1
  1820  00002C                     ?___ftdiv:
  1821                           	opt stack 0
  1822  00002C                     fillRect@i:
  1823                           	opt stack 0
  1824  00002C                     drawCircle@x:
  1825                           	opt stack 0
  1826  00002C                     ___ftdiv@f1:
  1827                           	opt stack 0
  1828                           
  1829                           ; 3 bytes @ 0x2B
  1830  00002C                     	ds	2
  1831  00002E                     drawChar@y:
  1832                           	opt stack 0
  1833  00002E                     drawCircle@y:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x2D
  1837  00002E                     	ds	1
  1838  00002F                     drawChar@c:
  1839                           	opt stack 0
  1840  00002F                     printf@idx:
  1841                           	opt stack 0
  1842  00002F                     ___ftdiv@f2:
  1843                           	opt stack 0
  1844                           
  1845                           ; 3 bytes @ 0x2E
  1846  00002F                     	ds	1
  1847  000030                     drawChar@color:
  1848                           	opt stack 0
  1849  000030                     printf@ap:
  1850                           	opt stack 0
  1851                           
  1852                           ; 2 bytes @ 0x2F
  1853  000030                     	ds	2
  1854  000032                     ??___ftdiv:
  1855  000032                     printf@prec:
  1856                           	opt stack 0
  1857  000032                     drawChar@bg:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x31
  1861  000032                     	ds	1
  1862  000033                     printf@val:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x32
  1866  000033                     	ds	1
  1867  000034                     drawChar@size:
  1868                           	opt stack 0
  1869                           
  1870                           ; 1 bytes @ 0x33
  1871  000034                     	ds	1
  1872  000035                     drawChar@line:
  1873                           	opt stack 0
  1874  000035                     printf@flag:
  1875                           	opt stack 0
  1876  000035                     ___ftdiv@cntr:
  1877                           	opt stack 0
  1878                           
  1879                           ; 1 bytes @ 0x34
  1880  000035                     	ds	1
  1881  000036                     drawChar@x:
  1882                           	opt stack 0
  1883  000036                     printf@width:
  1884                           	opt stack 0
  1885  000036                     ___ftdiv@f3:
  1886                           	opt stack 0
  1887                           
  1888                           ; 3 bytes @ 0x35
  1889  000036                     	ds	1
  1890  000037                     drawChar@j:
  1891                           	opt stack 0
  1892                           
  1893                           ; 1 bytes @ 0x36
  1894  000037                     	ds	1
  1895  000038                     drawChar@i:
  1896                           	opt stack 0
  1897  000038                     printf@c:
  1898                           	opt stack 0
  1899                           
  1900                           ; 1 bytes @ 0x37
  1901  000038                     	ds	1
  1902  000039                     drawtext@y:
  1903                           	opt stack 0
  1904  000039                     ___ftdiv@exp:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x38
  1908  000039                     	ds	1
  1909  00003A                     ___ftdiv@sign:
  1910                           	opt stack 0
  1911  00003A                     drawtext@_text:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x39
  1915  00003A                     	ds	1
  1916  00003B                     ??_do_update_pwm:
  1917                           
  1918                           ; 0 bytes @ 0x3A
  1919  00003B                     	ds	1
  1920  00003C                     drawtext@color:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x3B
  1924  00003C                     	ds	2
  1925  00003E                     drawtext@bg:
  1926                           	opt stack 0
  1927  00003E                     do_update_pwm@dc_f:
  1928                           	opt stack 0
  1929                           
  1930                           ; 3 bytes @ 0x3D
  1931  00003E                     	ds	2
  1932  000040                     drawtext@size:
  1933                           	opt stack 0
  1934                           
  1935                           ; 1 bytes @ 0x3F
  1936  000040                     	ds	1
  1937  000041                     ??_drawtext:
  1938  000041                     do_update_pwm@duty_cycle:
  1939                           	opt stack 0
  1940                           
  1941                           ; 1 bytes @ 0x40
  1942  000041                     	ds	1
  1943  000042                     do_update_pwm@dc_I:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x41
  1947  000042                     	ds	1
  1948  000043                     
  1949                           ; 0 bytes @ 0x42
  1950  000043                     	ds	1
  1951  000044                     tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postdec1	equ	0xFE5
  1958                           fsr1l	equ	0xFE1
  1959                           
  1960                           ; 0 bytes @ 0x43
  1961 ;;
  1962 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1963 ;;
  1964 ;; *************** function _main *****************
  1965 ;; Defined at:
  1966 ;;		line 147 in file "Lab12_ex.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  j               2   14[BANK0 ] int 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;		None               void
  1973 ;; Registers used:
  1974 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        3 bytes
  1985 ;; Hardware stack levels required when called:   11
  1986 ;; This function calls:
  1987 ;;		_DS1621_Read_Temp
  1988 ;;		_DS3231_Read_Time
  1989 ;;		_DS3231_Setup_Time
  1990 ;;		_Decrease_Speed
  1991 ;;		_Do_Beep
  1992 ;;		_Do_Init
  1993 ;;		_Increase_Speed
  1994 ;;		_Initialize_Screen
  1995 ;;		_Set_DC_RGB
  1996 ;;		_Set_RPM_RGB
  1997 ;;		_Toggle_Fan
  1998 ;;		_Update_Screen
  1999 ;;		___awdiv
  2000 ;;		___wmul
  2001 ;;		_get_RPM
  2002 ;;		_printf
  2003 ;; This function is called by:
  2004 ;;		Startup code after reset
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text0
  2009  0009BC                     __ptext0:
  2010                           	opt stack 0
  2011  0009BC                     _main:
  2012                           	opt stack 20
  2013                           
  2014                           ;Lab12_ex.c: 149: Do_Init();
  2015                           
  2016                           ;incstack = 0
  2017  0009BC  EC02  F00F         	call	_Do_Init	;wreg free
  2018                           
  2019                           ;Lab12_ex.c: 150: Initialize_Screen();
  2020  0009C0  ECA9  F003         	call	_Initialize_Screen	;wreg free
  2021  0009C4  D000               	goto	l6629
  2022  0009C6                     l6629:
  2023                           
  2024                           ;Lab12_ex.c: 209: {
  2025                           ;Lab12_ex.c: 211: DS3231_Read_Time();
  2026  0009C6  EC37  F00E         	call	_DS3231_Read_Time	;wreg free
  2027                           
  2028                           ;Lab12_ex.c: 213: if(tempSecond != second)
  2029  0009CA  5062               	movf	_second,w,c
  2030  0009CC  186E               	xorwf	_tempSecond,w,c
  2031  0009CE  B4D8               	btfsc	status,2,c
  2032  0009D0  D05E               	goto	l6649
  2033                           
  2034                           ;Lab12_ex.c: 214: {
  2035                           ;Lab12_ex.c: 215: tempSecond = second;
  2036  0009D2  C062  F06E         	movff	_second,_tempSecond
  2037                           
  2038                           ;Lab12_ex.c: 216: DS1621_tempC = DS1621_Read_Temp();
  2039  0009D6  EC5E  F010         	call	_DS1621_Read_Temp	;wreg free
  2040  0009DA  C014  F044         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2041  0009DE  C015  F045         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2042                           
  2043                           ;Lab12_ex.c: 217: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2044  0009E2  C044  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2045  0009E6  C045  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2046  0009EA  0E00               	movlw	0
  2047  0009EC  6E14               	movwf	___wmul@multiplicand+1,c
  2048  0009EE  0E09               	movlw	9
  2049  0009F0  6E13               	movwf	___wmul@multiplicand,c
  2050  0009F2  EC8B  F010         	call	___wmul	;wreg free
  2051  0009F6  C011  F017         	movff	?___wmul,___awdiv@dividend
  2052  0009FA  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2053  0009FE  0E00               	movlw	0
  2054  000A00  6E1A               	movwf	___awdiv@divisor+1,c
  2055  000A02  0E05               	movlw	5
  2056  000A04  6E19               	movwf	___awdiv@divisor,c
  2057  000A06  EC23  F00C         	call	___awdiv	;wreg free
  2058  000A0A  0E20               	movlw	32
  2059  000A0C  2417               	addwf	?___awdiv,w,c
  2060  000A0E  6E46               	movwf	_DS1621_tempF,c
  2061  000A10  0E00               	movlw	0
  2062  000A12  2018               	addwfc	?___awdiv+1,w,c
  2063  000A14  6E47               	movwf	_DS1621_tempF+1,c
  2064                           
  2065                           ;Lab12_ex.c: 218: rpm = get_RPM();
  2066  000A16  EC97  F00F         	call	_get_RPM	;wreg free
  2067  000A1A  C01F  F04C         	movff	?_get_RPM,_rpm
  2068  000A1E  C020  F04D         	movff	?_get_RPM+1,_rpm+1
  2069                           
  2070                           ;Lab12_ex.c: 219: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2071  000A22  0E2C               	movlw	low STR_1
  2072  000A24  6E1D               	movwf	printf@f,c
  2073  000A26  0EFF               	movlw	high STR_1
  2074  000A28  6E1E               	movwf	printf@f+1,c
  2075  000A2A  C05E  F01F         	movff	_hour,?_printf+2
  2076  000A2E  6A20               	clrf	?_printf+3,c
  2077  000A30  C05F  F021         	movff	_minute,?_printf+4
  2078  000A34  6A22               	clrf	?_printf+5,c
  2079  000A36  C062  F023         	movff	_second,?_printf+6
  2080  000A3A  6A24               	clrf	?_printf+7,c
  2081  000A3C  C060  F025         	movff	_month,?_printf+8
  2082  000A40  6A26               	clrf	?_printf+9,c
  2083  000A42  C05A  F027         	movff	_day,?_printf+10
  2084  000A46  6A28               	clrf	?_printf+11,c
  2085  000A48  C06C  F029         	movff	_year,?_printf+12
  2086  000A4C  6A2A               	clrf	?_printf+13,c
  2087  000A4E  ECFC  F001         	call	_printf	;wreg free
  2088                           
  2089                           ;Lab12_ex.c: 220: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2090  000A52  0E76               	movlw	low STR_2
  2091  000A54  6E1D               	movwf	printf@f,c
  2092  000A56  0EFF               	movlw	high STR_2
  2093  000A58  6E1E               	movwf	printf@f+1,c
  2094  000A5A  C044  F01F         	movff	_DS1621_tempC,?_printf+2
  2095  000A5E  C045  F020         	movff	_DS1621_tempC+1,?_printf+3
  2096  000A62  C046  F021         	movff	_DS1621_tempF,?_printf+4
  2097  000A66  C047  F022         	movff	_DS1621_tempF+1,?_printf+5
  2098  000A6A  ECFC  F001         	call	_printf	;wreg free
  2099                           
  2100                           ;Lab12_ex.c: 221: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2101  000A6E  0E8B               	movlw	low STR_3
  2102  000A70  6E1D               	movwf	printf@f,c
  2103  000A72  0EFF               	movlw	high STR_3
  2104  000A74  6E1E               	movwf	printf@f+1,c
  2105  000A76  C04C  F01F         	movff	_rpm,?_printf+2
  2106  000A7A  C04D  F020         	movff	_rpm+1,?_printf+3
  2107  000A7E  C05C  F021         	movff	_duty_cycle,?_printf+4
  2108  000A82  6A22               	clrf	?_printf+5,c
  2109  000A84  ECFC  F001         	call	_printf	;wreg free
  2110                           
  2111                           ;Lab12_ex.c: 222: Update_Screen();
  2112  000A88  EC0E  F000         	call	_Update_Screen	;wreg free
  2113  000A8C  D000               	goto	l6649
  2114  000A8E                     l6649:
  2115                           
  2116                           ;Lab12_ex.c: 223: }
  2117                           ;Lab12_ex.c: 225: if (nec_ok == 1)
  2118  000A8E  044A               	decf	_nec_ok,w,c
  2119  000A90  104B               	iorwf	_nec_ok+1,w,c
  2120  000A92  A4D8               	btfss	status,2,c
  2121  000A94  D081               	goto	l6711
  2122                           
  2123                           ;Lab12_ex.c: 226: {
  2124                           ;Lab12_ex.c: 227: nec_ok = 0;
  2125  000A96  0E00               	movlw	0
  2126  000A98  6E4B               	movwf	_nec_ok+1,c
  2127  000A9A  0E00               	movlw	0
  2128  000A9C  6E4A               	movwf	_nec_ok,c
  2129                           
  2130                           ;Lab12_ex.c: 229: printf ("NEC_Code = %x\r\n", Nec_code1);
  2131  000A9E  0EB0               	movlw	low STR_4
  2132  000AA0  6E1D               	movwf	printf@f,c
  2133  000AA2  0EFF               	movlw	high STR_4
  2134  000AA4  6E1E               	movwf	printf@f+1,c
  2135  000AA6  C051  F01F         	movff	_Nec_code1,?_printf+2
  2136  000AAA  6A20               	clrf	?_printf+3,c
  2137  000AAC  ECFC  F001         	call	_printf	;wreg free
  2138                           
  2139                           ;Lab12_ex.c: 231: INTCONbits.INT0IE = 1;
  2140  000AB0  88F2               	bsf	intcon,4,c	;volatile
  2141                           
  2142                           ;Lab12_ex.c: 232: INTCON2bits.INTEDG0 = 0;
  2143  000AB2  9CF1               	bcf	intcon2,6,c	;volatile
  2144                           
  2145                           ;Lab12_ex.c: 234: found = 0xff;
  2146  000AB4  685D               	setf	_found,c
  2147                           
  2148                           ;Lab12_ex.c: 235: for (int j=0; j< 21; j++)
  2149  000AB6  0E00               	movlw	0
  2150  000AB8  0100               	movlb	0	; () banked
  2151  000ABA  6FF3               	movwf	(main@j+1)& (0+255),b
  2152  000ABC  0E00               	movlw	0
  2153  000ABE  6FF2               	movwf	main@j& (0+255),b
  2154  000AC0                     l6663:
  2155                           
  2156                           ; BSR set to: 0
  2157  000AC0  0100               	movlb	0	; () banked
  2158  000AC2  BFF3               	btfsc	(main@j+1)& (0+255),7,b
  2159  000AC4  D00A               	goto	l6667
  2160  000AC6  0100               	movlb	0	; () banked
  2161  000AC8  51F3               	movf	(main@j+1)& (0+255),w,b
  2162  000ACA  E120               	bnz	l6677
  2163  000ACC  0E15               	movlw	21
  2164  000ACE  0100               	movlb	0	; () banked
  2165  000AD0  5DF2               	subwf	main@j& (0+255),w,b
  2166  000AD2  B0D8               	btfsc	status,0,c
  2167  000AD4  D01B               	goto	l6677
  2168  000AD6  D001               	goto	l6667
  2169                           
  2170                           ; BSR set to: 0
  2171  000AD8  D019               	goto	l6677
  2172  000ADA                     l6667:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;Lab12_ex.c: 236: {
  2176                           ;Lab12_ex.c: 237: if (Nec_code1 == array1[j])
  2177  000ADA  0E00               	movlw	low _array1
  2178  000ADC  0100               	movlb	0	; () banked
  2179  000ADE  25F2               	addwf	main@j& (0+255),w,b
  2180  000AE0  6ED9               	movwf	fsr2l,c
  2181  000AE2  0E01               	movlw	high _array1
  2182  000AE4  0100               	movlb	0	; () banked
  2183  000AE6  21F3               	addwfc	(main@j+1)& (0+255),w,b
  2184  000AE8  6EDA               	movwf	fsr2h,c
  2185  000AEA  5051               	movf	_Nec_code1,w,c
  2186  000AEC  18DE               	xorwf	postinc2,w,c
  2187  000AEE  A4D8               	btfss	status,2,c
  2188  000AF0  D008               	goto	l6673
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;Lab12_ex.c: 238: {
  2192                           ;Lab12_ex.c: 239: found = j;
  2193  000AF2  C0F2  F05D         	movff	main@j,_found
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;Lab12_ex.c: 240: j = 21;
  2197  000AF6  0E00               	movlw	0
  2198  000AF8  0100               	movlb	0	; () banked
  2199  000AFA  6FF3               	movwf	(main@j+1)& (0+255),b
  2200  000AFC  0E15               	movlw	21
  2201  000AFE  6FF2               	movwf	main@j& (0+255),b
  2202  000B00  D000               	goto	l6673
  2203  000B02                     l6673:
  2204                           
  2205                           ; BSR set to: 0
  2206  000B02  0100               	movlb	0	; () banked
  2207  000B04  4BF2               	infsnz	main@j& (0+255),f,b
  2208  000B06  2BF3               	incf	(main@j+1)& (0+255),f,b
  2209  000B08  D7DB               	goto	l6663
  2210                           
  2211                           ; BSR set to: 0
  2212  000B0A  D000               	goto	l6677
  2213  000B0C                     l6677:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;Lab12_ex.c: 241: }
  2217                           ;Lab12_ex.c: 242: }
  2218                           ;Lab12_ex.c: 244: if (found == 0xff)
  2219  000B0C  285D               	incf	_found,w,c
  2220  000B0E  A4D8               	btfss	status,2,c
  2221  000B10  D007               	goto	l6681
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;Lab12_ex.c: 245: {
  2225                           ;Lab12_ex.c: 246: printf ("Cannot find button \r\n");
  2226  000B12  0E60               	movlw	low STR_5
  2227  000B14  6E1D               	movwf	printf@f,c
  2228  000B16  0EFF               	movlw	high STR_5
  2229  000B18  6E1E               	movwf	printf@f+1,c
  2230  000B1A  ECFC  F001         	call	_printf	;wreg free
  2231                           
  2232                           ;Lab12_ex.c: 247: }
  2233  000B1E  D03C               	goto	l6711
  2234  000B20                     l6681:
  2235                           
  2236                           ;Lab12_ex.c: 248: else
  2237                           ;Lab12_ex.c: 249: {
  2238                           ;Lab12_ex.c: 250: Do_Beep();
  2239  000B20  ECB2  F011         	call	_Do_Beep	;wreg free
  2240                           
  2241                           ;Lab12_ex.c: 251: printf ("button = %d \r\n", found);
  2242  000B24  0EC0               	movlw	low STR_6
  2243  000B26  6E1D               	movwf	printf@f,c
  2244  000B28  0EFF               	movlw	high STR_6
  2245  000B2A  6E1E               	movwf	printf@f+1,c
  2246  000B2C  C05D  F01F         	movff	_found,?_printf+2
  2247  000B30  6A20               	clrf	?_printf+3,c
  2248  000B32  ECFC  F001         	call	_printf	;wreg free
  2249                           
  2250                           ;Lab12_ex.c: 253: if(found == 5)
  2251  000B36  0E05               	movlw	5
  2252  000B38  185D               	xorwf	_found,w,c
  2253  000B3A  A4D8               	btfss	status,2,c
  2254  000B3C  D003               	goto	l6691
  2255                           
  2256                           ;Lab12_ex.c: 254: {
  2257                           ;Lab12_ex.c: 255: Toggle_Fan();
  2258  000B3E  EC49  F011         	call	_Toggle_Fan	;wreg free
  2259  000B42  D014               	goto	l6707
  2260  000B44                     l6691:
  2261                           
  2262                           ;Lab12_ex.c: 258: else if(found == 6)
  2263  000B44  0E06               	movlw	6
  2264  000B46  185D               	xorwf	_found,w,c
  2265  000B48  A4D8               	btfss	status,2,c
  2266  000B4A  D003               	goto	l6697
  2267                           
  2268                           ;Lab12_ex.c: 259: {
  2269                           ;Lab12_ex.c: 260: Decrease_Speed();
  2270  000B4C  ECC5  F010         	call	_Decrease_Speed	;wreg free
  2271  000B50  D00D               	goto	l6707
  2272  000B52                     l6697:
  2273                           
  2274                           ;Lab12_ex.c: 263: else if(found == 7)
  2275  000B52  0E07               	movlw	7
  2276  000B54  185D               	xorwf	_found,w,c
  2277  000B56  A4D8               	btfss	status,2,c
  2278  000B58  D003               	goto	l6703
  2279                           
  2280                           ;Lab12_ex.c: 264: {
  2281                           ;Lab12_ex.c: 265: Increase_Speed();
  2282  000B5A  EC9F  F010         	call	_Increase_Speed	;wreg free
  2283  000B5E  D006               	goto	l6707
  2284  000B60                     l6703:
  2285                           
  2286                           ;Lab12_ex.c: 268: else if(found == 8)
  2287  000B60  0E08               	movlw	8
  2288  000B62  185D               	xorwf	_found,w,c
  2289  000B64  A4D8               	btfss	status,2,c
  2290  000B66  D012               	goto	l6709
  2291                           
  2292                           ;Lab12_ex.c: 269: {
  2293                           ;Lab12_ex.c: 270: DS3231_Setup_Time();
  2294  000B68  EC09  F00E         	call	_DS3231_Setup_Time	;wreg free
  2295  000B6C                     l6707:
  2296                           
  2297                           ;Lab12_ex.c: 271: PORTD = color[found] << 4;
  2298  000B6C  505D               	movf	_found,w,c
  2299  000B6E  0D01               	mullw	1
  2300  000B70  0E15               	movlw	low _color
  2301  000B72  24F3               	addwf	prodl,w,c
  2302  000B74  6ED9               	movwf	fsr2l,c
  2303  000B76  0E01               	movlw	high _color
  2304  000B78  20F4               	addwfc	prodh,w,c
  2305  000B7A  6EDA               	movwf	fsr2h,c
  2306  000B7C  50DF               	movf	indf2,w,c
  2307  000B7E  0100               	movlb	0	; () banked
  2308  000B80  6FF1               	movwf	??_main& (0+255),b
  2309  000B82  0100               	movlb	0	; () banked
  2310  000B84  39F1               	swapf	??_main& (0+255),w,b
  2311  000B86  0BF0               	andlw	240
  2312  000B88  6E83               	movwf	3971,c	;volatile
  2313                           
  2314                           ; BSR set to: 0
  2315                           
  2316                           ; BSR set to: 0
  2317                           
  2318                           ; BSR set to: 0
  2319  000B8A  D000               	goto	l6709
  2320  000B8C                     l6709:
  2321                           
  2322                           ;Lab12_ex.c: 272: }
  2323                           ;Lab12_ex.c: 274: Set_DC_RGB(duty_cycle);
  2324  000B8C  C05C  F01F         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2325  000B90  6A20               	clrf	Set_DC_RGB@duty_cycle+1,c
  2326  000B92  EC13  F010         	call	_Set_DC_RGB	;wreg free
  2327  000B96  D000               	goto	l6711
  2328  000B98                     l6711:
  2329                           
  2330                           ;Lab12_ex.c: 275: }
  2331                           ;Lab12_ex.c: 276: }
  2332                           ;Lab12_ex.c: 277: Set_RPM_RGB(rpm);
  2333  000B98  C04C  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2334  000B9C  C04D  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2335  000BA0  EC63  F00E         	call	_Set_RPM_RGB	;wreg free
  2336  000BA4  D710               	goto	l6629
  2337  000BA6  EF0C  F000         	goto	start
  2338  000BAA                     __end_of_main:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           intcon	equ	0xFF2
  2347                           intcon2	equ	0xFF1
  2348                           postinc0	equ	0xFEE
  2349                           wreg	equ	0xFE8
  2350                           postdec1	equ	0xFE5
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function _printf *****************
  2359 ;; Defined at:
  2360 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2363 ;;		 -> STR_6(15), STR_5(22), STR_4(16), STR_3(20), 
  2364 ;;		 -> STR_2(21), STR_1(30), 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  idx             1   46[COMRAM] unsigned char 
  2367 ;;  tmpval          4    0        struct .
  2368 ;;  cp              3    0        PTR const unsigned char 
  2369 ;;  width           2   53[COMRAM] int 
  2370 ;;  val             2   50[COMRAM] unsigned int 
  2371 ;;  ap              2   47[COMRAM] PTR void [1]
  2372 ;;		 -> ?_printf(2), 
  2373 ;;  len             2    0        unsigned int 
  2374 ;;  c               1   55[COMRAM] char 
  2375 ;;  flag            1   52[COMRAM] unsigned char 
  2376 ;;  prec            1   49[COMRAM] char 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  2   28[COMRAM] int 
  2379 ;; Registers used:
  2380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2386 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2388 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;Total ram usage:       28 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    4
  2393 ;; This function calls:
  2394 ;;		___lwdiv
  2395 ;;		___lwmod
  2396 ;;		___wmul
  2397 ;;		_isdigit
  2398 ;;		_putch
  2399 ;; This function is called by:
  2400 ;;		_main
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           	psect	text1
  2405  0003F8                     __ptext1:
  2406                           	opt stack 0
  2407  0003F8                     _printf:
  2408                           	opt stack 26
  2409                           
  2410                           ;doprnt.c: 466: va_list ap;
  2411                           ;doprnt.c: 499: signed char c;
  2412                           ;doprnt.c: 501: int width;
  2413                           ;doprnt.c: 506: signed char prec;
  2414                           ;doprnt.c: 508: unsigned char flag;
  2415                           ;doprnt.c: 523: union {
  2416                           ;doprnt.c: 524: unsigned long vd;
  2417                           ;doprnt.c: 525: double integ;
  2418                           ;doprnt.c: 526: } tmpval;
  2419                           ;doprnt.c: 528: unsigned int val;
  2420                           ;doprnt.c: 529: unsigned len;
  2421                           ;doprnt.c: 530: const char * cp;
  2422                           ;doprnt.c: 533: *ap = __va_start();
  2423                           
  2424                           ;incstack = 0
  2425  0003F8  0E1F               	movlw	low (?_printf+2)
  2426  0003FA  6E30               	movwf	printf@ap,c
  2427  0003FC  0E00               	movlw	high (?_printf+2)
  2428  0003FE  6E31               	movwf	printf@ap+1,c
  2429                           
  2430                           ;doprnt.c: 536: while(c = *f++) {
  2431  000400  D199               	goto	l6443
  2432  000402                     l6317:
  2433                           
  2434                           ;doprnt.c: 538: if(c != '%')
  2435  000402  0E25               	movlw	37
  2436  000404  1838               	xorwf	printf@c,w,c
  2437  000406  B4D8               	btfsc	status,2,c
  2438  000408  D004               	goto	l6321
  2439                           
  2440                           ;doprnt.c: 540: {
  2441                           ;doprnt.c: 541: (putch(c) );
  2442  00040A  5038               	movf	printf@c,w,c
  2443  00040C  ECA4  F011         	call	_putch
  2444                           
  2445                           ;doprnt.c: 542: continue;
  2446  000410  D191               	goto	l6443
  2447  000412                     l6321:
  2448                           
  2449                           ;doprnt.c: 543: }
  2450                           ;doprnt.c: 546: width = 0;
  2451  000412  0E00               	movlw	0
  2452  000414  6E37               	movwf	printf@width+1,c
  2453  000416  0E00               	movlw	0
  2454  000418  6E36               	movwf	printf@width,c
  2455                           
  2456                           ;doprnt.c: 548: flag = 0;
  2457  00041A  0E00               	movlw	0
  2458  00041C  6E35               	movwf	printf@flag,c
  2459                           
  2460                           ;doprnt.c: 551: switch(*f) {
  2461                           
  2462                           ;doprnt.c: 550: for(;;) {
  2463  00041E  D005               	goto	l6327
  2464  000420                     l6323:
  2465                           
  2466                           ;doprnt.c: 580: flag |= 0x04;
  2467  000420  8435               	bsf	printf@flag,2,c
  2468                           
  2469                           ;doprnt.c: 581: f++;
  2470  000422  4A1D               	infsnz	printf@f,f,c
  2471  000424  2A1E               	incf	printf@f+1,f,c
  2472                           
  2473                           ;doprnt.c: 582: continue;
  2474  000426  D001               	goto	l6327
  2475                           
  2476                           ;doprnt.c: 584: }
  2477  000428  D00B               	goto	l6329
  2478  00042A                     l6327:
  2479  00042A  C01D  FFF6         	movff	printf@f,tblptrl
  2480  00042E  C01E  FFF7         	movff	printf@f+1,tblptrh
  2481  000432                     	if	0	;tblptru may be non-zero
  2482  000432                     	endif
  2483  000432                     	if	0	;tblptru may be non-zero
  2484  000432                     	endif
  2485  000432  0008               	tblrd		*
  2486  000434  50F5               	movf	tablat,w,c
  2487                           
  2488                           ; Switch size 1, requested type "space"
  2489                           ; Number of cases is 1, Range of values is 48 to 48
  2490                           ; switch strategies available:
  2491                           ; Name         Instructions Cycles
  2492                           ; simple_byte            4     3 (average)
  2493                           ;	Chosen strategy is simple_byte
  2494  000436  0A30               	xorlw	48	; case 48
  2495  000438  B4D8               	btfsc	status,2,c
  2496  00043A  D7F2               	goto	l6323
  2497                           
  2498                           ;doprnt.c: 585: break;
  2499  00043C  D001               	goto	l6329
  2500                           
  2501                           ;doprnt.c: 586: }
  2502  00043E  D7F5               	goto	l6327
  2503  000440                     l6329:
  2504                           
  2505                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2506  000440  C01D  FFF6         	movff	printf@f,tblptrl
  2507  000444  C01E  FFF7         	movff	printf@f+1,tblptrh
  2508  000448                     	if	0	;tblptru may be non-zero
  2509  000448                     	endif
  2510  000448                     	if	0	;tblptru may be non-zero
  2511  000448                     	endif
  2512  000448  0008               	tblrd		*
  2513  00044A  50F5               	movf	tablat,w,c
  2514  00044C  ECE9  F010         	call	_isdigit
  2515  000450  A0D8               	btfss	status,0,c
  2516  000452  D03B               	goto	l6345
  2517                           
  2518                           ;doprnt.c: 598: width = 0;
  2519  000454  0E00               	movlw	0
  2520  000456  6E37               	movwf	printf@width+1,c
  2521  000458  0E00               	movlw	0
  2522  00045A  6E36               	movwf	printf@width,c
  2523  00045C  D000               	goto	l6333
  2524  00045E                     l6333:
  2525                           
  2526                           ;doprnt.c: 600: width *= 10;
  2527  00045E  C036  F011         	movff	printf@width,___wmul@multiplier
  2528  000462  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2529  000466  0E00               	movlw	0
  2530  000468  6E14               	movwf	___wmul@multiplicand+1,c
  2531  00046A  0E0A               	movlw	10
  2532  00046C  6E13               	movwf	___wmul@multiplicand,c
  2533  00046E  EC8B  F010         	call	___wmul	;wreg free
  2534  000472  C011  F036         	movff	?___wmul,printf@width
  2535  000476  C012  F037         	movff	?___wmul+1,printf@width+1
  2536                           
  2537                           ;doprnt.c: 601: width += *f++ - '0';
  2538  00047A  0ED0               	movlw	208
  2539  00047C  6E2B               	movwf	??_printf& (0+255),c
  2540  00047E  0EFF               	movlw	255
  2541  000480  6E2C               	movwf	(??_printf+1)& (0+255),c
  2542  000482  C01D  FFF6         	movff	printf@f,tblptrl
  2543  000486  C01E  FFF7         	movff	printf@f+1,tblptrh
  2544  00048A                     	if	0	;tblptru may be non-zero
  2545  00048A                     	endif
  2546  00048A                     	if	0	;tblptru may be non-zero
  2547  00048A                     	endif
  2548  00048A  0008               	tblrd		*
  2549  00048C  50F5               	movf	tablat,w,c
  2550  00048E  6E2D               	movwf	(??_printf+2)& (0+255),c
  2551  000490  6A2E               	clrf	(??_printf+3)& (0+255),c
  2552  000492  502B               	movf	??_printf,w,c
  2553  000494  262D               	addwf	??_printf+2,f,c
  2554  000496  502C               	movf	??_printf+1,w,c
  2555  000498  222E               	addwfc	??_printf+3,f,c
  2556  00049A  502D               	movf	??_printf+2,w,c
  2557  00049C  2636               	addwf	printf@width,f,c
  2558  00049E  502E               	movf	??_printf+3,w,c
  2559  0004A0  2237               	addwfc	printf@width+1,f,c
  2560  0004A2  4A1D               	infsnz	printf@f,f,c
  2561  0004A4  2A1E               	incf	printf@f+1,f,c
  2562                           
  2563                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2564  0004A6  C01D  FFF6         	movff	printf@f,tblptrl
  2565  0004AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2566  0004AE                     	if	0	;tblptru may be non-zero
  2567  0004AE                     	endif
  2568  0004AE                     	if	0	;tblptru may be non-zero
  2569  0004AE                     	endif
  2570  0004AE  0008               	tblrd		*
  2571  0004B0  50F5               	movf	tablat,w,c
  2572  0004B2  ECE9  F010         	call	_isdigit
  2573  0004B6  A0D8               	btfss	status,0,c
  2574  0004B8  D008               	goto	l6345
  2575  0004BA  D7D1               	goto	l6333
  2576                           
  2577                           ;doprnt.c: 608: }
  2578                           ;doprnt.c: 635: switch(c = *f++) {
  2579  0004BC  D006               	goto	l6345
  2580                           
  2581                           ;doprnt.c: 638: goto alldone;
  2582                           
  2583                           ;doprnt.c: 637: case 0:
  2584  0004BE  D148               	goto	l829
  2585                           
  2586                           ;doprnt.c: 698: case 'i':
  2587                           ;doprnt.c: 699: break;
  2588                           
  2589                           ;doprnt.c: 697: case 'd':
  2590  0004C0  D01B               	goto	l792
  2591  0004C2                     l6341:
  2592                           
  2593                           ;doprnt.c: 721: flag |= 0x80;
  2594  0004C2  8E35               	bsf	printf@flag,7,c
  2595                           
  2596                           ;doprnt.c: 723: break;
  2597  0004C4  D019               	goto	l792
  2598                           
  2599                           ;doprnt.c: 813: continue;
  2600                           
  2601                           ;doprnt.c: 802: default:
  2602  0004C6  D136               	goto	l6443
  2603                           
  2604                           ;doprnt.c: 822: }
  2605  0004C8  D017               	goto	l792
  2606  0004CA                     l6345:
  2607  0004CA  C01D  FFF6         	movff	printf@f,tblptrl
  2608  0004CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2609  0004D2  4A1D               	infsnz	printf@f,f,c
  2610  0004D4  2A1E               	incf	printf@f+1,f,c
  2611  0004D6                     	if	0	;tblptru may be non-zero
  2612  0004D6                     	endif
  2613  0004D6                     	if	0	;tblptru may be non-zero
  2614  0004D6                     	endif
  2615  0004D6  0008               	tblrd		*
  2616  0004D8  CFF5 F038          	movff	tablat,printf@c
  2617  0004DC  5038               	movf	printf@c,w,c
  2618                           
  2619                           ; Switch size 1, requested type "space"
  2620                           ; Number of cases is 4, Range of values is 0 to 120
  2621                           ; switch strategies available:
  2622                           ; Name         Instructions Cycles
  2623                           ; simple_byte           13     7 (average)
  2624                           ;	Chosen strategy is simple_byte
  2625  0004DE  0A00               	xorlw	0	; case 0
  2626  0004E0  B4D8               	btfsc	status,2,c
  2627  0004E2  D136               	goto	l829
  2628  0004E4  0A64               	xorlw	100	; case 100
  2629  0004E6  B4D8               	btfsc	status,2,c
  2630  0004E8  D007               	goto	l792
  2631  0004EA  0A0D               	xorlw	13	; case 105
  2632  0004EC  B4D8               	btfsc	status,2,c
  2633  0004EE  D004               	goto	l792
  2634  0004F0  0A11               	xorlw	17	; case 120
  2635  0004F2  B4D8               	btfsc	status,2,c
  2636  0004F4  D7E6               	goto	l6341
  2637  0004F6  D11E               	goto	l6443
  2638  0004F8                     l792:
  2639                           
  2640                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2641  0004F8  BE35               	btfsc	printf@flag,7,c
  2642  0004FA  D015               	goto	l6357
  2643                           
  2644                           ;doprnt.c: 1253: {
  2645                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2646  0004FC  C030  FFD9         	movff	printf@ap,fsr2l
  2647  000500  C031  FFDA         	movff	printf@ap+1,fsr2h
  2648  000504  CFDE F033          	movff	postinc2,printf@val
  2649  000508  CFDD F034          	movff	postdec2,printf@val+1
  2650  00050C  0E02               	movlw	2
  2651  00050E  2630               	addwf	printf@ap,f,c
  2652  000510  0E00               	movlw	0
  2653  000512  2231               	addwfc	printf@ap+1,f,c
  2654                           
  2655                           ;doprnt.c: 1261: if((int)val < 0) {
  2656  000514  AE34               	btfss	printf@val+1,7,c
  2657  000516  D04E               	goto	l6391
  2658                           
  2659                           ;doprnt.c: 1262: flag |= 0x03;
  2660  000518  0E03               	movlw	3
  2661  00051A  1235               	iorwf	printf@flag,f,c
  2662                           
  2663                           ;doprnt.c: 1263: val = -val;
  2664  00051C  6C33               	negf	printf@val,c
  2665  00051E  1E34               	comf	printf@val+1,f,c
  2666  000520  B0D8               	btfsc	status,0,c
  2667  000522  2A34               	incf	printf@val+1,f,c
  2668                           
  2669                           ;doprnt.c: 1264: }
  2670                           ;doprnt.c: 1266: }
  2671  000524  D047               	goto	l6391
  2672  000526                     l6357:
  2673                           
  2674                           ;doprnt.c: 1268: else
  2675                           ;doprnt.c: 1273: {
  2676                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2677  000526  C030  FFD9         	movff	printf@ap,fsr2l
  2678  00052A  C031  FFDA         	movff	printf@ap+1,fsr2h
  2679  00052E  CFDE F033          	movff	postinc2,printf@val
  2680  000532  CFDD F034          	movff	postdec2,printf@val+1
  2681  000536  0E02               	movlw	2
  2682  000538  2630               	addwf	printf@ap,f,c
  2683  00053A  0E00               	movlw	0
  2684  00053C  2231               	addwfc	printf@ap+1,f,c
  2685                           
  2686                           ;doprnt.c: 1287: }
  2687                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2688  00053E  D03A               	goto	l6391
  2689  000540                     l6361:
  2690                           
  2691                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2692  000540  0E01               	movlw	1
  2693  000542  6E38               	movwf	printf@c,c
  2694  000544                     l6363:
  2695  000544  0E05               	movlw	5
  2696  000546  1838               	xorwf	printf@c,w,c
  2697  000548  B4D8               	btfsc	status,2,c
  2698  00054A  D03D               	goto	l6393
  2699  00054C  D001               	goto	l6367
  2700  00054E  D03B               	goto	l6393
  2701  000550                     l6367:
  2702                           
  2703                           ;doprnt.c: 1306: if(val < dpowers[c])
  2704  000550  5038               	movf	printf@c,w,c
  2705  000552  0D02               	mullw	2
  2706  000554  0E1A               	movlw	low _dpowers
  2707  000556  24F3               	addwf	prodl,w,c
  2708  000558  6EF6               	movwf	tblptrl,c
  2709  00055A  0EFF               	movlw	high _dpowers
  2710  00055C  20F4               	addwfc	prodh,w,c
  2711  00055E  6EF7               	movwf	tblptrh,c
  2712  000560                     	if	0	;There are less than 3 active tblptr bytes
  2713  000560                     	endif
  2714  000560  0009               	tblrd		*+
  2715  000562  50F5               	movf	tablat,w,c
  2716  000564  5C33               	subwf	printf@val,w,c
  2717  000566  0009               	tblrd		*+
  2718  000568  50F5               	movf	tablat,w,c
  2719  00056A  5834               	subwfb	printf@val+1,w,c
  2720  00056C  A0D8               	btfss	status,0,c
  2721  00056E  D02B               	goto	l6393
  2722  000570  D001               	goto	l6371
  2723                           
  2724                           ;doprnt.c: 1307: break;
  2725  000572  D029               	goto	l6393
  2726  000574                     l6371:
  2727  000574  2A38               	incf	printf@c,f,c
  2728  000576  D7E6               	goto	l6363
  2729                           
  2730                           ;doprnt.c: 1309: break;
  2731  000578  D026               	goto	l6393
  2732  00057A                     l6375:
  2733                           
  2734                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2735  00057A  0E01               	movlw	1
  2736  00057C  6E38               	movwf	printf@c,c
  2737  00057E                     l6377:
  2738  00057E  0E04               	movlw	4
  2739  000580  1838               	xorwf	printf@c,w,c
  2740  000582  B4D8               	btfsc	status,2,c
  2741  000584  D020               	goto	l6393
  2742  000586  D001               	goto	l6381
  2743  000588  D01E               	goto	l6393
  2744  00058A                     l6381:
  2745                           
  2746                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2747  00058A  5038               	movf	printf@c,w,c
  2748  00058C  0D02               	mullw	2
  2749  00058E  0E24               	movlw	low _hexpowers
  2750  000590  24F3               	addwf	prodl,w,c
  2751  000592  6EF6               	movwf	tblptrl,c
  2752  000594  0EFF               	movlw	high _hexpowers
  2753  000596  20F4               	addwfc	prodh,w,c
  2754  000598  6EF7               	movwf	tblptrh,c
  2755  00059A                     	if	0	;There are less than 3 active tblptr bytes
  2756  00059A                     	endif
  2757  00059A  0009               	tblrd		*+
  2758  00059C  50F5               	movf	tablat,w,c
  2759  00059E  5C33               	subwf	printf@val,w,c
  2760  0005A0  0009               	tblrd		*+
  2761  0005A2  50F5               	movf	tablat,w,c
  2762  0005A4  5834               	subwfb	printf@val+1,w,c
  2763  0005A6  A0D8               	btfss	status,0,c
  2764  0005A8  D00E               	goto	l6393
  2765  0005AA  D001               	goto	l6385
  2766                           
  2767                           ;doprnt.c: 1318: break;
  2768  0005AC  D00C               	goto	l6393
  2769  0005AE                     l6385:
  2770  0005AE  2A38               	incf	printf@c,f,c
  2771  0005B0  D7E6               	goto	l6377
  2772                           
  2773                           ;doprnt.c: 1336: }
  2774                           
  2775                           ;doprnt.c: 1320: break;
  2776  0005B2  D009               	goto	l6393
  2777  0005B4                     l6391:
  2778  0005B4  5035               	movf	printf@flag,w,c
  2779  0005B6  0B80               	andlw	128
  2780                           
  2781                           ; Switch size 1, requested type "space"
  2782                           ; Number of cases is 2, Range of values is 0 to 128
  2783                           ; switch strategies available:
  2784                           ; Name         Instructions Cycles
  2785                           ; simple_byte            7     4 (average)
  2786                           ;	Chosen strategy is simple_byte
  2787  0005B8  0A00               	xorlw	0	; case 0
  2788  0005BA  B4D8               	btfsc	status,2,c
  2789  0005BC  D7C1               	goto	l6361
  2790  0005BE  0A80               	xorlw	128	; case 128
  2791  0005C0  B4D8               	btfsc	status,2,c
  2792  0005C2  D7DB               	goto	l6375
  2793  0005C4  D000               	goto	l6393
  2794  0005C6                     l6393:
  2795                           
  2796                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2797  0005C6  5036               	movf	printf@width,w,c
  2798  0005C8  1037               	iorwf	printf@width+1,w,c
  2799  0005CA  B4D8               	btfsc	status,2,c
  2800  0005CC  D00A               	goto	l6399
  2801  0005CE  C035  F02B         	movff	printf@flag,??_printf
  2802  0005D2  0E03               	movlw	3
  2803  0005D4  162B               	andwf	??_printf,f,c
  2804  0005D6  B4D8               	btfsc	status,2,c
  2805  0005D8  D004               	goto	l6399
  2806                           
  2807                           ;doprnt.c: 1346: width--;
  2808  0005DA  0636               	decf	printf@width,f,c
  2809  0005DC  A0D8               	btfss	status,0,c
  2810  0005DE  0637               	decf	printf@width+1,f,c
  2811  0005E0  D000               	goto	l6399
  2812  0005E2                     l6399:
  2813                           
  2814                           ;doprnt.c: 1381: if(width > c)
  2815  0005E2  0E80               	movlw	128
  2816  0005E4  BE38               	btfsc	printf@c,7,c
  2817  0005E6  0E7F               	movlw	127
  2818  0005E8  6E2B               	movwf	??_printf& (0+255),c
  2819  0005EA  5036               	movf	printf@width,w,c
  2820  0005EC  5C38               	subwf	printf@c,w,c
  2821  0005EE  5037               	movf	printf@width+1,w,c
  2822  0005F0  0A80               	xorlw	128
  2823  0005F2  582B               	subwfb	??_printf& (0+255),w,c
  2824  0005F4  B0D8               	btfsc	status,0,c
  2825  0005F6  D007               	goto	l6403
  2826                           
  2827                           ;doprnt.c: 1382: width -= c;
  2828  0005F8  5038               	movf	printf@c,w,c
  2829  0005FA  5E36               	subwf	printf@width,f,c
  2830  0005FC  0E00               	movlw	0
  2831  0005FE  BE38               	btfsc	printf@c,7,c
  2832  000600  0EFF               	movlw	255
  2833  000602  5A37               	subwfb	printf@width+1,f,c
  2834  000604  D005               	goto	l6405
  2835  000606                     l6403:
  2836                           
  2837                           ;doprnt.c: 1383: else
  2838                           ;doprnt.c: 1384: width = 0;
  2839  000606  0E00               	movlw	0
  2840  000608  6E37               	movwf	printf@width+1,c
  2841  00060A  0E00               	movlw	0
  2842  00060C  6E36               	movwf	printf@width,c
  2843  00060E  D000               	goto	l6405
  2844  000610                     l6405:
  2845                           
  2846                           ;doprnt.c: 1387: if(flag & 0x04) {
  2847  000610  A435               	btfss	printf@flag,2,c
  2848  000612  D01A               	goto	l6417
  2849                           
  2850                           ;doprnt.c: 1392: if(flag & 0x03)
  2851  000614  C035  F02B         	movff	printf@flag,??_printf
  2852  000618  0E03               	movlw	3
  2853  00061A  162B               	andwf	??_printf,f,c
  2854  00061C  B4D8               	btfsc	status,2,c
  2855  00061E  D004               	goto	l6411
  2856                           
  2857                           ;doprnt.c: 1393: (putch('-') );
  2858  000620  0E2D               	movlw	45
  2859  000622  ECA4  F011         	call	_putch
  2860  000626  D000               	goto	l6411
  2861  000628                     l6411:
  2862                           
  2863                           ;doprnt.c: 1415: if(width)
  2864  000628  5036               	movf	printf@width,w,c
  2865  00062A  1037               	iorwf	printf@width+1,w,c
  2866  00062C  B4D8               	btfsc	status,2,c
  2867  00062E  D026               	goto	l6427
  2868  000630                     l6413:
  2869                           
  2870                           ;doprnt.c: 1417: (putch('0') );
  2871  000630  0E30               	movlw	48
  2872  000632  ECA4  F011         	call	_putch
  2873                           
  2874                           ;doprnt.c: 1418: while(--width);
  2875  000636  0636               	decf	printf@width,f,c
  2876  000638  A0D8               	btfss	status,0,c
  2877  00063A  0637               	decf	printf@width+1,f,c
  2878  00063C  5036               	movf	printf@width,w,c
  2879  00063E  1037               	iorwf	printf@width+1,w,c
  2880  000640  B4D8               	btfsc	status,2,c
  2881  000642  D01C               	goto	l6427
  2882  000644  D7F5               	goto	l6413
  2883                           
  2884                           ;doprnt.c: 1420: } else
  2885  000646  D01A               	goto	l6427
  2886  000648                     l6417:
  2887                           
  2888                           ;doprnt.c: 1422: {
  2889                           ;doprnt.c: 1424: if(width
  2890                           ;doprnt.c: 1428: )
  2891  000648  5036               	movf	printf@width,w,c
  2892  00064A  1037               	iorwf	printf@width+1,w,c
  2893  00064C  B4D8               	btfsc	status,2,c
  2894  00064E  D00C               	goto	l6423
  2895  000650                     l6419:
  2896                           
  2897                           ;doprnt.c: 1430: (putch(' ') );
  2898  000650  0E20               	movlw	32
  2899  000652  ECA4  F011         	call	_putch
  2900                           
  2901                           ;doprnt.c: 1431: while(--width);
  2902  000656  0636               	decf	printf@width,f,c
  2903  000658  A0D8               	btfss	status,0,c
  2904  00065A  0637               	decf	printf@width+1,f,c
  2905  00065C  5036               	movf	printf@width,w,c
  2906  00065E  1037               	iorwf	printf@width+1,w,c
  2907  000660  B4D8               	btfsc	status,2,c
  2908  000662  D002               	goto	l6423
  2909  000664  D7F5               	goto	l6419
  2910  000666  D000               	goto	l6423
  2911  000668                     l6423:
  2912                           
  2913                           ;doprnt.c: 1438: if(flag & 0x03)
  2914  000668  C035  F02B         	movff	printf@flag,??_printf
  2915  00066C  0E03               	movlw	3
  2916  00066E  162B               	andwf	??_printf,f,c
  2917  000670  B4D8               	btfsc	status,2,c
  2918  000672  D004               	goto	l6427
  2919                           
  2920                           ;doprnt.c: 1439: (putch('-') );
  2921  000674  0E2D               	movlw	45
  2922  000676  ECA4  F011         	call	_putch
  2923  00067A  D000               	goto	l6427
  2924  00067C                     l6427:
  2925                           
  2926                           ;doprnt.c: 1469: }
  2927                           ;doprnt.c: 1472: prec = c;
  2928  00067C  C038  F032         	movff	printf@c,printf@prec
  2929                           
  2930                           ;doprnt.c: 1474: while(prec--) {
  2931  000680  D053               	goto	l6441
  2932                           
  2933                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2934  000682  D045               	goto	l6437
  2935  000684                     l6429:
  2936                           
  2937                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2938  000684  5032               	movf	printf@prec,w,c
  2939  000686  0D02               	mullw	2
  2940  000688  0E1A               	movlw	low _dpowers
  2941  00068A  24F3               	addwf	prodl,w,c
  2942  00068C  6EF6               	movwf	tblptrl,c
  2943  00068E  0EFF               	movlw	high _dpowers
  2944  000690  20F4               	addwfc	prodh,w,c
  2945  000692  6EF7               	movwf	tblptrh,c
  2946  000694                     	if	0	;There are less than 3 active tblptr bytes
  2947  000694                     	endif
  2948  000694  0009               	tblrd		*+
  2949  000696  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2950  00069A  000A               	tblrd		*-
  2951  00069C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2952  0006A0  C033  F011         	movff	printf@val,___lwdiv@dividend
  2953  0006A4  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2954  0006A8  ECDB  F00D         	call	___lwdiv	;wreg free
  2955  0006AC  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2956  0006B0  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2957  0006B4  0E00               	movlw	0
  2958  0006B6  6E1B               	movwf	___lwmod@divisor+1,c
  2959  0006B8  0E0A               	movlw	10
  2960  0006BA  6E1A               	movwf	___lwmod@divisor,c
  2961  0006BC  ECDC  F00E         	call	___lwmod	;wreg free
  2962  0006C0  5018               	movf	?___lwmod,w,c
  2963  0006C2  0F30               	addlw	48
  2964  0006C4  6E38               	movwf	printf@c,c
  2965                           
  2966                           ;doprnt.c: 1491: break;
  2967  0006C6  D02C               	goto	l6439
  2968  0006C8                     l6431:
  2969                           
  2970                           ;doprnt.c: 1499: {
  2971                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2972  0006C8  C033  F011         	movff	printf@val,___lwdiv@dividend
  2973  0006CC  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2974  0006D0  5032               	movf	printf@prec,w,c
  2975  0006D2  0D02               	mullw	2
  2976  0006D4  0E24               	movlw	low _hexpowers
  2977  0006D6  24F3               	addwf	prodl,w,c
  2978  0006D8  6EF6               	movwf	tblptrl,c
  2979  0006DA  0EFF               	movlw	high _hexpowers
  2980  0006DC  20F4               	addwfc	prodh,w,c
  2981  0006DE  6EF7               	movwf	tblptrh,c
  2982  0006E0                     	if	0	;There are less than 3 active tblptr bytes
  2983  0006E0                     	endif
  2984  0006E0  0009               	tblrd		*+
  2985  0006E2  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2986  0006E6  000A               	tblrd		*-
  2987  0006E8  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2988  0006EC  ECDB  F00D         	call	___lwdiv	;wreg free
  2989  0006F0  5011               	movf	?___lwdiv,w,c
  2990  0006F2  0B0F               	andlw	15
  2991  0006F4  6E2F               	movwf	printf@idx,c
  2992                           
  2993                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2994  0006F6  502F               	movf	printf@idx,w,c
  2995  0006F8  0D01               	mullw	1
  2996  0006FA  0E9F               	movlw	low STR_18
  2997  0006FC  24F3               	addwf	prodl,w,c
  2998  0006FE  6EF6               	movwf	tblptrl,c
  2999  000700  0EFF               	movlw	high STR_18
  3000  000702  20F4               	addwfc	prodh,w,c
  3001  000704  6EF7               	movwf	tblptrh,c
  3002  000706                     	if	0	;There are less than 3 active tblptr bytes
  3003  000706                     	endif
  3004  000706  0008               	tblrd		*
  3005  000708  CFF5 F038          	movff	tablat,printf@c
  3006                           
  3007                           ;doprnt.c: 1523: }
  3008                           
  3009                           ;doprnt.c: 1508: }
  3010                           ;doprnt.c: 1510: break;
  3011  00070C  D009               	goto	l6439
  3012  00070E                     l6437:
  3013  00070E  5035               	movf	printf@flag,w,c
  3014  000710  0B80               	andlw	128
  3015                           
  3016                           ; Switch size 1, requested type "space"
  3017                           ; Number of cases is 2, Range of values is 0 to 128
  3018                           ; switch strategies available:
  3019                           ; Name         Instructions Cycles
  3020                           ; simple_byte            7     4 (average)
  3021                           ;	Chosen strategy is simple_byte
  3022  000712  0A00               	xorlw	0	; case 0
  3023  000714  B4D8               	btfsc	status,2,c
  3024  000716  D7B6               	goto	l6429
  3025  000718  0A80               	xorlw	128	; case 128
  3026  00071A  B4D8               	btfsc	status,2,c
  3027  00071C  D7D5               	goto	l6431
  3028  00071E  D000               	goto	l6439
  3029  000720                     l6439:
  3030                           
  3031                           ;doprnt.c: 1524: (putch(c) );
  3032  000720  5038               	movf	printf@c,w,c
  3033  000722  ECA4  F011         	call	_putch
  3034  000726  D000               	goto	l6441
  3035  000728                     l6441:
  3036  000728  0632               	decf	printf@prec,f,c
  3037  00072A  2832               	incf	printf@prec,w,c
  3038  00072C  B4D8               	btfsc	status,2,c
  3039  00072E  D002               	goto	l6443
  3040  000730  D7EE               	goto	l6437
  3041  000732  D000               	goto	l6443
  3042  000734                     l6443:
  3043  000734  C01D  FFF6         	movff	printf@f,tblptrl
  3044  000738  C01E  FFF7         	movff	printf@f+1,tblptrh
  3045  00073C  4A1D               	infsnz	printf@f,f,c
  3046  00073E  2A1E               	incf	printf@f+1,f,c
  3047  000740                     	if	0	;tblptru may be non-zero
  3048  000740                     	endif
  3049  000740                     	if	0	;tblptru may be non-zero
  3050  000740                     	endif
  3051  000740  0008               	tblrd		*
  3052  000742  CFF5 F038          	movff	tablat,printf@c
  3053  000746  5038               	movf	printf@c,w,c
  3054  000748  B4D8               	btfsc	status,2,c
  3055  00074A  D002               	goto	l829
  3056  00074C  D65A               	goto	l6317
  3057  00074E  D000               	goto	l829
  3058  000750                     l829:
  3059  000750  0012               	return		;funcret
  3060  000752                     __end_of_printf:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon2	equ	0xFF1
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           postdec1	equ	0xFE5
  3073                           fsr1l	equ	0xFE1
  3074                           indf2	equ	0xFDF
  3075                           postinc2	equ	0xFDE
  3076                           postdec2	equ	0xFDD
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _putch *****************
  3082 ;; Defined at:
  3083 ;;		line 113 in file "Lab12_ex.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  c               1    wreg     unsigned char 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  c               1   16[COMRAM] unsigned char 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;		None               void
  3090 ;; Registers used:
  3091 ;;		wreg
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;Total ram usage:        1 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    3
  3104 ;; This function calls:
  3105 ;;		Nothing
  3106 ;; This function is called by:
  3107 ;;		_printf
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text2
  3112  002348                     __ptext2:
  3113                           	opt stack 0
  3114  002348                     _putch:
  3115                           	opt stack 26
  3116                           
  3117                           ;incstack = 0
  3118                           ;putch@c stored from wreg
  3119  002348  6E11               	movwf	putch@c,c
  3120                           
  3121                           ;Lab12_ex.c: 115: while (!TRMT);
  3122  00234A  D000               	goto	l426
  3123  00234C                     l426:
  3124  00234C  A2AC               	btfss	4012,1,c	;volatile
  3125  00234E  D7FE               	goto	l426
  3126                           
  3127                           ;Lab12_ex.c: 116: TXREG = c;
  3128  002350  C011  FFAD         	movff	putch@c,4013	;volatile
  3129  002354  0012               	return		;funcret
  3130  002356                     __end_of_putch:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           intcon	equ	0xFF2
  3139                           intcon2	equ	0xFF1
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           postdec2	equ	0xFDD
  3147                           fsr2h	equ	0xFDA
  3148                           fsr2l	equ	0xFD9
  3149                           status	equ	0xFD8
  3150                           
  3151 ;; *************** function _isdigit *****************
  3152 ;; Defined at:
  3153 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  c               1    wreg     unsigned char 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  c               1   18[COMRAM] unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, status,2, status,0
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3168 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;Total ram usage:        3 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    3
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_printf
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text3
  3182  0021D2                     __ptext3:
  3183                           	opt stack 0
  3184  0021D2                     _isdigit:
  3185                           	opt stack 26
  3186                           
  3187                           ;incstack = 0
  3188                           ;isdigit@c stored from wreg
  3189  0021D2  6E13               	movwf	isdigit@c,c
  3190  0021D4  0E00               	movlw	0
  3191  0021D6  6E12               	movwf	_isdigit$2230,c
  3192  0021D8  0E3A               	movlw	58
  3193  0021DA  6013               	cpfslt	isdigit@c,c
  3194  0021DC  D006               	goto	l6013
  3195  0021DE  0E2F               	movlw	47
  3196  0021E0  6413               	cpfsgt	isdigit@c,c
  3197  0021E2  D003               	goto	l6013
  3198  0021E4  0E01               	movlw	1
  3199  0021E6  6E12               	movwf	_isdigit$2230,c
  3200  0021E8  D000               	goto	l6013
  3201  0021EA                     l6013:
  3202  0021EA  C012  F011         	movff	_isdigit$2230,??_isdigit
  3203  0021EE  3011               	rrcf	??_isdigit,w,c
  3204  0021F0  D000               	goto	l1296
  3205  0021F2                     l1296:
  3206  0021F2  0012               	return		;funcret
  3207  0021F4                     __end_of_isdigit:
  3208                           	opt stack 0
  3209                           tblptru	equ	0xFF8
  3210                           tblptrh	equ	0xFF7
  3211                           tblptrl	equ	0xFF6
  3212                           tablat	equ	0xFF5
  3213                           prodh	equ	0xFF4
  3214                           prodl	equ	0xFF3
  3215                           intcon	equ	0xFF2
  3216                           intcon2	equ	0xFF1
  3217                           postinc0	equ	0xFEE
  3218                           wreg	equ	0xFE8
  3219                           postdec1	equ	0xFE5
  3220                           fsr1l	equ	0xFE1
  3221                           indf2	equ	0xFDF
  3222                           postinc2	equ	0xFDE
  3223                           postdec2	equ	0xFDD
  3224                           fsr2h	equ	0xFDA
  3225                           fsr2l	equ	0xFD9
  3226                           status	equ	0xFD8
  3227                           
  3228 ;; *************** function ___lwmod *****************
  3229 ;; Defined at:
  3230 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  dividend        2   23[COMRAM] unsigned int 
  3233 ;;  divisor         2   25[COMRAM] unsigned int 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  counter         1   27[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  2   23[COMRAM] unsigned int 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;Total ram usage:        5 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    3
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_printf
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           	psect	text4
  3260  001DB8                     __ptext4:
  3261                           	opt stack 0
  3262  001DB8                     ___lwmod:
  3263                           	opt stack 26
  3264                           
  3265                           ;incstack = 0
  3266  001DB8  501A               	movf	___lwmod@divisor,w,c
  3267  001DBA  101B               	iorwf	___lwmod@divisor+1,w,c
  3268  001DBC  B4D8               	btfsc	status,2,c
  3269  001DBE  D01D               	goto	l1398
  3270  001DC0  0E01               	movlw	1
  3271  001DC2  6E1C               	movwf	___lwmod@counter,c
  3272  001DC4  D005               	goto	l6125
  3273  001DC6                     l6123:
  3274  001DC6  90D8               	bcf	status,0,c
  3275  001DC8  361A               	rlcf	___lwmod@divisor,f,c
  3276  001DCA  361B               	rlcf	___lwmod@divisor+1,f,c
  3277  001DCC  2A1C               	incf	___lwmod@counter,f,c
  3278  001DCE  D000               	goto	l6125
  3279  001DD0                     l6125:
  3280  001DD0  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3281  001DD2  D002               	goto	l6127
  3282  001DD4  D7F8               	goto	l6123
  3283  001DD6  D000               	goto	l6127
  3284  001DD8                     l6127:
  3285  001DD8  501A               	movf	___lwmod@divisor,w,c
  3286  001DDA  5C18               	subwf	___lwmod@dividend,w,c
  3287  001DDC  501B               	movf	___lwmod@divisor+1,w,c
  3288  001DDE  5819               	subwfb	___lwmod@dividend+1,w,c
  3289  001DE0  A0D8               	btfss	status,0,c
  3290  001DE2  D005               	goto	l6131
  3291  001DE4  501A               	movf	___lwmod@divisor,w,c
  3292  001DE6  5E18               	subwf	___lwmod@dividend,f,c
  3293  001DE8  501B               	movf	___lwmod@divisor+1,w,c
  3294  001DEA  5A19               	subwfb	___lwmod@dividend+1,f,c
  3295  001DEC  D000               	goto	l6131
  3296  001DEE                     l6131:
  3297  001DEE  90D8               	bcf	status,0,c
  3298  001DF0  321B               	rrcf	___lwmod@divisor+1,f,c
  3299  001DF2  321A               	rrcf	___lwmod@divisor,f,c
  3300  001DF4  2E1C               	decfsz	___lwmod@counter,f,c
  3301  001DF6  D7F0               	goto	l6127
  3302  001DF8  D000               	goto	l1398
  3303  001DFA                     l1398:
  3304  001DFA  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3305  001DFE  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3306  001E02  0012               	return		;funcret
  3307  001E04                     __end_of___lwmod:
  3308                           	opt stack 0
  3309                           tblptru	equ	0xFF8
  3310                           tblptrh	equ	0xFF7
  3311                           tblptrl	equ	0xFF6
  3312                           tablat	equ	0xFF5
  3313                           prodh	equ	0xFF4
  3314                           prodl	equ	0xFF3
  3315                           intcon	equ	0xFF2
  3316                           intcon2	equ	0xFF1
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postdec1	equ	0xFE5
  3320                           fsr1l	equ	0xFE1
  3321                           indf2	equ	0xFDF
  3322                           postinc2	equ	0xFDE
  3323                           postdec2	equ	0xFDD
  3324                           fsr2h	equ	0xFDA
  3325                           fsr2l	equ	0xFD9
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function ___lwdiv *****************
  3329 ;; Defined at:
  3330 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  dividend        2   16[COMRAM] unsigned int 
  3333 ;;  divisor         2   18[COMRAM] unsigned int 
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;  quotient        2   21[COMRAM] unsigned int 
  3336 ;;  counter         1   20[COMRAM] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  2   16[COMRAM] unsigned int 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;Total ram usage:        7 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    3
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_printf
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text5
  3361  001BB6                     __ptext5:
  3362                           	opt stack 0
  3363  001BB6                     ___lwdiv:
  3364                           	opt stack 26
  3365                           
  3366                           ;incstack = 0
  3367  001BB6  0E00               	movlw	0
  3368  001BB8  6E17               	movwf	___lwdiv@quotient+1,c
  3369  001BBA  0E00               	movlw	0
  3370  001BBC  6E16               	movwf	___lwdiv@quotient,c
  3371  001BBE  5013               	movf	___lwdiv@divisor,w,c
  3372  001BC0  1014               	iorwf	___lwdiv@divisor+1,w,c
  3373  001BC2  B4D8               	btfsc	status,2,c
  3374  001BC4  D021               	goto	l1388
  3375  001BC6  0E01               	movlw	1
  3376  001BC8  6E15               	movwf	___lwdiv@counter,c
  3377  001BCA  D005               	goto	l6105
  3378  001BCC                     l6103:
  3379  001BCC  90D8               	bcf	status,0,c
  3380  001BCE  3613               	rlcf	___lwdiv@divisor,f,c
  3381  001BD0  3614               	rlcf	___lwdiv@divisor+1,f,c
  3382  001BD2  2A15               	incf	___lwdiv@counter,f,c
  3383  001BD4  D000               	goto	l6105
  3384  001BD6                     l6105:
  3385  001BD6  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3386  001BD8  D002               	goto	l6107
  3387  001BDA  D7F8               	goto	l6103
  3388  001BDC  D000               	goto	l6107
  3389  001BDE                     l6107:
  3390  001BDE  90D8               	bcf	status,0,c
  3391  001BE0  3616               	rlcf	___lwdiv@quotient,f,c
  3392  001BE2  3617               	rlcf	___lwdiv@quotient+1,f,c
  3393  001BE4  5013               	movf	___lwdiv@divisor,w,c
  3394  001BE6  5C11               	subwf	___lwdiv@dividend,w,c
  3395  001BE8  5014               	movf	___lwdiv@divisor+1,w,c
  3396  001BEA  5812               	subwfb	___lwdiv@dividend+1,w,c
  3397  001BEC  A0D8               	btfss	status,0,c
  3398  001BEE  D006               	goto	l6115
  3399  001BF0  5013               	movf	___lwdiv@divisor,w,c
  3400  001BF2  5E11               	subwf	___lwdiv@dividend,f,c
  3401  001BF4  5014               	movf	___lwdiv@divisor+1,w,c
  3402  001BF6  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3403  001BF8  8016               	bsf	___lwdiv@quotient,0,c
  3404  001BFA  D000               	goto	l6115
  3405  001BFC                     l6115:
  3406  001BFC  90D8               	bcf	status,0,c
  3407  001BFE  3214               	rrcf	___lwdiv@divisor+1,f,c
  3408  001C00  3213               	rrcf	___lwdiv@divisor,f,c
  3409  001C02  2E15               	decfsz	___lwdiv@counter,f,c
  3410  001C04  D7EC               	goto	l6107
  3411  001C06  D000               	goto	l1388
  3412  001C08                     l1388:
  3413  001C08  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3414  001C0C  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3415  001C10  0012               	return		;funcret
  3416  001C12                     __end_of___lwdiv:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           intcon	equ	0xFF2
  3425                           intcon2	equ	0xFF1
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postdec1	equ	0xFE5
  3429                           fsr1l	equ	0xFE1
  3430                           indf2	equ	0xFDF
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function _get_RPM *****************
  3438 ;; Defined at:
  3439 ;;		line 11 in file "Fan_Support.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  RPS             2   32[COMRAM] int 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  2   30[COMRAM] int 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:        4 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    4
  3460 ;; This function calls:
  3461 ;;		___awdiv
  3462 ;;		___wmul
  3463 ;; This function is called by:
  3464 ;;		_main
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text6
  3469  001F2E                     __ptext6:
  3470                           	opt stack 0
  3471  001F2E                     _get_RPM:
  3472                           	opt stack 26
  3473                           
  3474                           ;Fan_Support.c: 13: int RPS = TMR3L / 2;
  3475                           
  3476                           ;incstack = 0
  3477  001F2E  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  3478  001F32  6A18               	clrf	___awdiv@dividend+1,c
  3479  001F34  0E00               	movlw	0
  3480  001F36  6E1A               	movwf	___awdiv@divisor+1,c
  3481  001F38  0E02               	movlw	2
  3482  001F3A  6E19               	movwf	___awdiv@divisor,c
  3483  001F3C  EC23  F00C         	call	___awdiv	;wreg free
  3484  001F40  C017  F021         	movff	?___awdiv,get_RPM@RPS
  3485  001F44  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  3486                           
  3487                           ;Fan_Support.c: 15: TMR3L = 0;
  3488  001F48  0E00               	movlw	0
  3489  001F4A  6EB2               	movwf	4018,c	;volatile
  3490                           
  3491                           ;Fan_Support.c: 16: return (RPS * 60);
  3492  001F4C  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  3493  001F50  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  3494  001F54  0E00               	movlw	0
  3495  001F56  6E14               	movwf	___wmul@multiplicand+1,c
  3496  001F58  0E3C               	movlw	60
  3497  001F5A  6E13               	movwf	___wmul@multiplicand,c
  3498  001F5C  EC8B  F010         	call	___wmul	;wreg free
  3499  001F60  C011  F01F         	movff	?___wmul,?_get_RPM
  3500  001F64  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  3501  001F68  D000               	goto	l31
  3502  001F6A                     l31:
  3503  001F6A  0012               	return		;funcret
  3504  001F6C                     __end_of_get_RPM:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           intcon	equ	0xFF2
  3513                           intcon2	equ	0xFF1
  3514                           postinc0	equ	0xFEE
  3515                           wreg	equ	0xFE8
  3516                           postdec1	equ	0xFE5
  3517                           fsr1l	equ	0xFE1
  3518                           indf2	equ	0xFDF
  3519                           postinc2	equ	0xFDE
  3520                           postdec2	equ	0xFDD
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _Update_Screen *****************
  3526 ;; Defined at:
  3527 ;;		line 69 in file "Main_Screen.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  neg_tempF       2   11[BANK0 ] int 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;		None               void
  3534 ;; Registers used:
  3535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;Total ram usage:        6 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:   10
  3548 ;; This function calls:
  3549 ;;		___awdiv
  3550 ;;		___awmod
  3551 ;;		_drawtext
  3552 ;;		_strcpy
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text7
  3559  00001C                     __ptext7:
  3560                           	opt stack 0
  3561  00001C                     _Update_Screen:
  3562                           	opt stack 20
  3563                           
  3564                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  3565                           
  3566                           ;incstack = 0
  3567  00001C  AE44               	btfss	_DS1621_tempC,7,c
  3568  00001E  D01C               	goto	l6453
  3569                           
  3570                           ;Main_Screen.c: 72: {
  3571                           ;Main_Screen.c: 73: tempC[0] = '-';
  3572  000020  0E2D               	movlw	45
  3573  000022  0100               	movlb	0	; () banked
  3574  000024  6FDC               	movwf	_tempC& (0+255),b
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  3578  000026  0E7F               	movlw	127
  3579  000028  1444               	andwf	_DS1621_tempC,w,c
  3580  00002A  6E17               	movwf	___awdiv@dividend,c
  3581  00002C  6A18               	clrf	___awdiv@dividend+1,c
  3582  00002E  0E00               	movlw	0
  3583  000030  6E1A               	movwf	___awdiv@divisor+1,c
  3584  000032  0E0A               	movlw	10
  3585  000034  6E19               	movwf	___awdiv@divisor,c
  3586  000036  EC23  F00C         	call	___awdiv	;wreg free
  3587  00003A  5017               	movf	?___awdiv,w,c
  3588  00003C  0F30               	addlw	48
  3589  00003E  0100               	movlb	0	; () banked
  3590  000040  6FDD               	movwf	(_tempC+1)& (0+255),b
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  3594  000042  0E7F               	movlw	127
  3595  000044  1444               	andwf	_DS1621_tempC,w,c
  3596  000046  6E1F               	movwf	___awmod@dividend,c
  3597  000048  6A20               	clrf	___awmod@dividend+1,c
  3598  00004A  0E00               	movlw	0
  3599  00004C  6E22               	movwf	___awmod@divisor+1,c
  3600  00004E  0E0A               	movlw	10
  3601  000050  6E21               	movwf	___awmod@divisor,c
  3602  000052  ECB2  F00C         	call	___awmod	;wreg free
  3603  000056  D01B               	goto	L1
  3604  000058                     l6453:
  3605                           
  3606                           ;Main_Screen.c: 77: else
  3607                           ;Main_Screen.c: 78: {
  3608                           ;Main_Screen.c: 79: tempC[0] = '+';
  3609  000058  0E2B               	movlw	43
  3610  00005A  0100               	movlb	0	; () banked
  3611  00005C  6FDC               	movwf	_tempC& (0+255),b
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  3615  00005E  C044  F017         	movff	_DS1621_tempC,___awdiv@dividend
  3616  000062  C045  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3617  000066  0E00               	movlw	0
  3618  000068  6E1A               	movwf	___awdiv@divisor+1,c
  3619  00006A  0E0A               	movlw	10
  3620  00006C  6E19               	movwf	___awdiv@divisor,c
  3621  00006E  EC23  F00C         	call	___awdiv	;wreg free
  3622  000072  5017               	movf	?___awdiv,w,c
  3623  000074  0F30               	addlw	48
  3624  000076  0100               	movlb	0	; () banked
  3625  000078  6FDD               	movwf	(_tempC+1)& (0+255),b
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  3629  00007A  C044  F01F         	movff	_DS1621_tempC,___awmod@dividend
  3630  00007E  C045  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3631  000082  0E00               	movlw	0
  3632  000084  6E22               	movwf	___awmod@divisor+1,c
  3633  000086  0E0A               	movlw	10
  3634  000088  6E21               	movwf	___awmod@divisor,c
  3635  00008A  ECB2  F00C         	call	___awmod	;wreg free
  3636  00008E                     L1:
  3637  00008E  501F               	movf	?___awmod,w,c
  3638  000090  0F30               	addlw	48
  3639  000092  0100               	movlb	0	; () banked
  3640  000094  6FDE               	movwf	(_tempC+2)& (0+255),b
  3641  000096  D000               	goto	l6459
  3642  000098                     l6459:
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;Main_Screen.c: 82: }
  3646                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  3647  000098  AE47               	btfss	_DS1621_tempF+1,7,c
  3648  00009A  D029               	goto	l6469
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;Main_Screen.c: 85: {
  3652                           ;Main_Screen.c: 86: tempF[0] = '-';
  3653  00009C  0E2D               	movlw	45
  3654  00009E  0100               	movlb	0	; () banked
  3655  0000A0  6FE0               	movwf	_tempF& (0+255),b
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  3659  0000A2  C046  F0EB         	movff	_DS1621_tempF,??_Update_Screen
  3660  0000A6  C047  F0EC         	movff	_DS1621_tempF+1,??_Update_Screen+1
  3661  0000AA  0100               	movlb	0	; () banked
  3662  0000AC  1FEB               	comf	??_Update_Screen& (0+255),f,b
  3663  0000AE  1FEC               	comf	(??_Update_Screen+1)& (0+255),f,b
  3664  0000B0  4BEB               	infsnz	??_Update_Screen& (0+255),f,b
  3665  0000B2  2BEC               	incf	(??_Update_Screen+1)& (0+255),f,b
  3666  0000B4  C0EB  F0EF         	movff	??_Update_Screen,Update_Screen@neg_tempF
  3667  0000B8  C0EC  F0F0         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  3671  0000BC  C0EF  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3672  0000C0  C0F0  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3673  0000C4  0E00               	movlw	0
  3674  0000C6  6E1A               	movwf	___awdiv@divisor+1,c
  3675  0000C8  0E0A               	movlw	10
  3676  0000CA  6E19               	movwf	___awdiv@divisor,c
  3677  0000CC  EC23  F00C         	call	___awdiv	;wreg free
  3678  0000D0  5017               	movf	?___awdiv,w,c
  3679  0000D2  0F30               	addlw	48
  3680  0000D4  0100               	movlb	0	; () banked
  3681  0000D6  6FE1               	movwf	(_tempF+1)& (0+255),b
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  3685  0000D8  C0EF  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3686  0000DC  C0F0  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3687  0000E0  0E00               	movlw	0
  3688  0000E2  6E22               	movwf	___awmod@divisor+1,c
  3689  0000E4  0E0A               	movlw	10
  3690  0000E6  6E21               	movwf	___awmod@divisor,c
  3691  0000E8  ECB2  F00C         	call	___awmod	;wreg free
  3692  0000EC  D01B               	goto	L2
  3693  0000EE                     l6469:
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;Main_Screen.c: 91: else
  3697                           ;Main_Screen.c: 92: {
  3698                           ;Main_Screen.c: 93: tempF[0] = '+';
  3699  0000EE  0E2B               	movlw	43
  3700  0000F0  0100               	movlb	0	; () banked
  3701  0000F2  6FE0               	movwf	_tempF& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  3705  0000F4  C046  F017         	movff	_DS1621_tempF,___awdiv@dividend
  3706  0000F8  C047  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3707  0000FC  0E00               	movlw	0
  3708  0000FE  6E1A               	movwf	___awdiv@divisor+1,c
  3709  000100  0E0A               	movlw	10
  3710  000102  6E19               	movwf	___awdiv@divisor,c
  3711  000104  EC23  F00C         	call	___awdiv	;wreg free
  3712  000108  5017               	movf	?___awdiv,w,c
  3713  00010A  0F30               	addlw	48
  3714  00010C  0100               	movlb	0	; () banked
  3715  00010E  6FE1               	movwf	(_tempF+1)& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  3719  000110  C046  F01F         	movff	_DS1621_tempF,___awmod@dividend
  3720  000114  C047  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3721  000118  0E00               	movlw	0
  3722  00011A  6E22               	movwf	___awmod@divisor+1,c
  3723  00011C  0E0A               	movlw	10
  3724  00011E  6E21               	movwf	___awmod@divisor,c
  3725  000120  ECB2  F00C         	call	___awmod	;wreg free
  3726  000124                     L2:
  3727  000124  501F               	movf	?___awmod,w,c
  3728  000126  0F30               	addlw	48
  3729  000128  0100               	movlb	0	; () banked
  3730  00012A  6FE2               	movwf	(_tempF+2)& (0+255),b
  3731  00012C  D000               	goto	l6475
  3732  00012E                     l6475:
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;Main_Screen.c: 96: }
  3736                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  3737  00012E  385E               	swapf	_hour,w,c
  3738  000130  0B0F               	andlw	15
  3739  000132  0F30               	addlw	48
  3740  000134  0100               	movlb	0	; () banked
  3741  000136  6FC6               	movwf	_time& (0+255),b
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  3745  000138  505E               	movf	_hour,w,c
  3746  00013A  0B0F               	andlw	15
  3747  00013C  0F30               	addlw	48
  3748  00013E  0100               	movlb	0	; () banked
  3749  000140  6FC7               	movwf	(_time+1)& (0+255),b
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  3753  000142  385F               	swapf	_minute,w,c
  3754  000144  0B0F               	andlw	15
  3755  000146  0F30               	addlw	48
  3756  000148  0100               	movlb	0	; () banked
  3757  00014A  6FC9               	movwf	(_time+3)& (0+255),b
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f)+ '0';
  3761  00014C  505F               	movf	_minute,w,c
  3762  00014E  0B0F               	andlw	15
  3763  000150  0F30               	addlw	48
  3764  000152  0100               	movlb	0	; () banked
  3765  000154  6FCA               	movwf	(_time+4)& (0+255),b
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  3769  000156  3862               	swapf	_second,w,c
  3770  000158  0B0F               	andlw	15
  3771  00015A  0F30               	addlw	48
  3772  00015C  0100               	movlb	0	; () banked
  3773  00015E  6FCC               	movwf	(_time+6)& (0+255),b
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;Main_Screen.c: 105: time[7] = (second & 0x0f)+ '0';
  3777  000160  5062               	movf	_second,w,c
  3778  000162  0B0F               	andlw	15
  3779  000164  0F30               	addlw	48
  3780  000166  0100               	movlb	0	; () banked
  3781  000168  6FCD               	movwf	(_time+7)& (0+255),b
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  3785  00016A  3860               	swapf	_month,w,c
  3786  00016C  0B0F               	andlw	15
  3787  00016E  0F30               	addlw	48
  3788  000170  0100               	movlb	0	; () banked
  3789  000172  6FBD               	movwf	_date& (0+255),b
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;Main_Screen.c: 108: date[1] = (month & 0x0f)+ '0';
  3793  000174  5060               	movf	_month,w,c
  3794  000176  0B0F               	andlw	15
  3795  000178  0F30               	addlw	48
  3796  00017A  0100               	movlb	0	; () banked
  3797  00017C  6FBE               	movwf	(_date+1)& (0+255),b
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;Main_Screen.c: 109: date[3] = (day>>4) + '0';
  3801  00017E  385A               	swapf	_day,w,c
  3802  000180  0B0F               	andlw	15
  3803  000182  0F30               	addlw	48
  3804  000184  0100               	movlb	0	; () banked
  3805  000186  6FC0               	movwf	(_date+3)& (0+255),b
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;Main_Screen.c: 110: date[4] = (day & 0x0f)+ '0';
  3809  000188  505A               	movf	_day,w,c
  3810  00018A  0B0F               	andlw	15
  3811  00018C  0F30               	addlw	48
  3812  00018E  0100               	movlb	0	; () banked
  3813  000190  6FC1               	movwf	(_date+4)& (0+255),b
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;Main_Screen.c: 111: date[6] = (year>>4) + '0';
  3817  000192  386C               	swapf	_year,w,c
  3818  000194  0B0F               	andlw	15
  3819  000196  0F30               	addlw	48
  3820  000198  0100               	movlb	0	; () banked
  3821  00019A  6FC3               	movwf	(_date+6)& (0+255),b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;Main_Screen.c: 112: date[7] = (year & 0x0f)+ '0';
  3825  00019C  506C               	movf	_year,w,c
  3826  00019E  0B0F               	andlw	15
  3827  0001A0  0F30               	addlw	48
  3828  0001A2  0100               	movlb	0	; () banked
  3829  0001A4  6FC4               	movwf	(_date+7)& (0+255),b
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;Main_Screen.c: 115: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  3833  0001A6  0450               	decf	_FAN,w,c
  3834  0001A8  A4D8               	btfss	status,2,c
  3835  0001AA  D00B               	goto	l6503
  3836                           
  3837                           ; BSR set to: 0
  3838  0001AC  0ED8               	movlw	low _Fan_SW_Txt
  3839  0001AE  6E11               	movwf	strcpy@to,c
  3840  0001B0  0E00               	movlw	high _Fan_SW_Txt
  3841  0001B2  6E12               	movwf	strcpy@to+1,c
  3842  0001B4  0EEC               	movlw	low STR_16
  3843  0001B6  6E13               	movwf	strcpy@from,c
  3844  0001B8  0EFF               	movlw	high STR_16
  3845  0001BA  6E14               	movwf	strcpy@from+1,c
  3846  0001BC  EC2D  F010         	call	_strcpy	;wreg free
  3847  0001C0  D00B               	goto	l6505
  3848  0001C2                     l6503:
  3849                           
  3850                           ;Main_Screen.c: 116: else strcpy(Fan_SW_Txt, "OFF");
  3851  0001C2  0ED8               	movlw	low _Fan_SW_Txt
  3852  0001C4  6E11               	movwf	strcpy@to,c
  3853  0001C6  0E00               	movlw	high _Fan_SW_Txt
  3854  0001C8  6E12               	movwf	strcpy@to+1,c
  3855  0001CA  0EF0               	movlw	low STR_17
  3856  0001CC  6E13               	movwf	strcpy@from,c
  3857  0001CE  0EFF               	movlw	high STR_17
  3858  0001D0  6E14               	movwf	strcpy@from+1,c
  3859  0001D2  EC2D  F010         	call	_strcpy	;wreg free
  3860  0001D6  D000               	goto	l6505
  3861  0001D8                     l6505:
  3862                           
  3863                           ;Main_Screen.c: 119: DC_Txt[0] = duty_cycle/100 + '0';
  3864  0001D8  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3865  0001DC  6A18               	clrf	___awdiv@dividend+1,c
  3866  0001DE  0E00               	movlw	0
  3867  0001E0  6E1A               	movwf	___awdiv@divisor+1,c
  3868  0001E2  0E64               	movlw	100
  3869  0001E4  6E19               	movwf	___awdiv@divisor,c
  3870  0001E6  EC23  F00C         	call	___awdiv	;wreg free
  3871  0001EA  5017               	movf	?___awdiv,w,c
  3872  0001EC  0F30               	addlw	48
  3873  0001EE  0100               	movlb	0	; () banked
  3874  0001F0  6FD4               	movwf	_DC_Txt& (0+255),b
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;Main_Screen.c: 121: DC_Txt[1] = duty_cycle/10 %10 + '0';
  3878  0001F2  0E00               	movlw	0
  3879  0001F4  6E1A               	movwf	___awdiv@divisor+1,c
  3880  0001F6  0E0A               	movlw	10
  3881  0001F8  6E19               	movwf	___awdiv@divisor,c
  3882  0001FA  C05C  F017         	movff	_duty_cycle,___awdiv@dividend
  3883  0001FE  6A18               	clrf	___awdiv@dividend+1,c
  3884  000200  EC23  F00C         	call	___awdiv	;wreg free
  3885  000204  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3886  000208  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3887  00020C  0E00               	movlw	0
  3888  00020E  6E22               	movwf	___awmod@divisor+1,c
  3889  000210  0E0A               	movlw	10
  3890  000212  6E21               	movwf	___awmod@divisor,c
  3891  000214  ECB2  F00C         	call	___awmod	;wreg free
  3892  000218  501F               	movf	?___awmod,w,c
  3893  00021A  0F30               	addlw	48
  3894  00021C  0100               	movlb	0	; () banked
  3895  00021E  6FD5               	movwf	(_DC_Txt+1)& (0+255),b
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;Main_Screen.c: 122: DC_Txt[2] = duty_cycle%10 + '0';
  3899  000220  C05C  F01F         	movff	_duty_cycle,___awmod@dividend
  3900  000224  6A20               	clrf	___awmod@dividend+1,c
  3901  000226  0E00               	movlw	0
  3902  000228  6E22               	movwf	___awmod@divisor+1,c
  3903  00022A  0E0A               	movlw	10
  3904  00022C  6E21               	movwf	___awmod@divisor,c
  3905  00022E  ECB2  F00C         	call	___awmod	;wreg free
  3906  000232  501F               	movf	?___awmod,w,c
  3907  000234  0F30               	addlw	48
  3908  000236  0100               	movlb	0	; () banked
  3909  000238  6FD6               	movwf	(_DC_Txt+2)& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;Main_Screen.c: 125: RPM_Txt[0] = rpm/1000 + '0';
  3913  00023A  C04C  F017         	movff	_rpm,___awdiv@dividend
  3914  00023E  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  3915  000242  0E03               	movlw	3
  3916  000244  6E1A               	movwf	___awdiv@divisor+1,c
  3917  000246  0EE8               	movlw	232
  3918  000248  6E19               	movwf	___awdiv@divisor,c
  3919  00024A  EC23  F00C         	call	___awdiv	;wreg free
  3920  00024E  5017               	movf	?___awdiv,w,c
  3921  000250  0F30               	addlw	48
  3922  000252  0100               	movlb	0	; () banked
  3923  000254  6FCF               	movwf	_RPM_Txt& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;Main_Screen.c: 127: RPM_Txt[1] = rpm/100 %10 + '0';
  3927  000256  0E00               	movlw	0
  3928  000258  6E1A               	movwf	___awdiv@divisor+1,c
  3929  00025A  0E64               	movlw	100
  3930  00025C  6E19               	movwf	___awdiv@divisor,c
  3931  00025E  C04C  F017         	movff	_rpm,___awdiv@dividend
  3932  000262  C04D  F018         	movff	_rpm+1,___awdiv@dividend+1
  3933  000266  EC23  F00C         	call	___awdiv	;wreg free
  3934  00026A  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3935  00026E  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3936  000272  0E00               	movlw	0
  3937  000274  6E22               	movwf	___awmod@divisor+1,c
  3938  000276  0E0A               	movlw	10
  3939  000278  6E21               	movwf	___awmod@divisor,c
  3940  00027A  ECB2  F00C         	call	___awmod	;wreg free
  3941  00027E  501F               	movf	?___awmod,w,c
  3942  000280  0F30               	addlw	48
  3943  000282  0100               	movlb	0	; () banked
  3944  000284  6FD0               	movwf	(_RPM_Txt+1)& (0+255),b
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;Main_Screen.c: 128: RPM_Txt[2] = rpm%100 / 10 + '0';
  3948  000286  0E00               	movlw	0
  3949  000288  6E22               	movwf	___awmod@divisor+1,c
  3950  00028A  0E64               	movlw	100
  3951  00028C  6E21               	movwf	___awmod@divisor,c
  3952  00028E  C04C  F01F         	movff	_rpm,___awmod@dividend
  3953  000292  C04D  F020         	movff	_rpm+1,___awmod@dividend+1
  3954  000296  ECB2  F00C         	call	___awmod	;wreg free
  3955  00029A  C01F  F017         	movff	?___awmod,___awdiv@dividend
  3956  00029E  C020  F018         	movff	?___awmod+1,___awdiv@dividend+1
  3957  0002A2  0E00               	movlw	0
  3958  0002A4  6E1A               	movwf	___awdiv@divisor+1,c
  3959  0002A6  0E0A               	movlw	10
  3960  0002A8  6E19               	movwf	___awdiv@divisor,c
  3961  0002AA  EC23  F00C         	call	___awdiv	;wreg free
  3962  0002AE  5017               	movf	?___awdiv,w,c
  3963  0002B0  0F30               	addlw	48
  3964  0002B2  0100               	movlb	0	; () banked
  3965  0002B4  6FD1               	movwf	(_RPM_Txt+2)& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm%10 %10 + '0';
  3969  0002B6  0E00               	movlw	0
  3970  0002B8  6E22               	movwf	___awmod@divisor+1,c
  3971  0002BA  0E0A               	movlw	10
  3972  0002BC  6E21               	movwf	___awmod@divisor,c
  3973  0002BE  C04C  F01F         	movff	_rpm,___awmod@dividend
  3974  0002C2  C04D  F020         	movff	_rpm+1,___awmod@dividend+1
  3975  0002C6  ECB2  F00C         	call	___awmod	;wreg free
  3976  0002CA  C01F  F0ED         	movff	?___awmod,_Update_Screen$2567
  3977  0002CE  C020  F0EE         	movff	?___awmod+1,_Update_Screen$2567+1
  3978                           
  3979                           ;Main_Screen.c: 129: RPM_Txt[3] = rpm%10 %10 + '0';
  3980  0002D2  C0ED  F01F         	movff	_Update_Screen$2567,___awmod@dividend
  3981  0002D6  C0EE  F020         	movff	_Update_Screen$2567+1,___awmod@dividend+1
  3982  0002DA  0E00               	movlw	0
  3983  0002DC  6E22               	movwf	___awmod@divisor+1,c
  3984  0002DE  0E0A               	movlw	10
  3985  0002E0  6E21               	movwf	___awmod@divisor,c
  3986  0002E2  ECB2  F00C         	call	___awmod	;wreg free
  3987  0002E6  501F               	movf	?___awmod,w,c
  3988  0002E8  0F30               	addlw	48
  3989  0002EA  0100               	movlb	0	; () banked
  3990  0002EC  6FD2               	movwf	(_RPM_Txt+3)& (0+255),b
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;Main_Screen.c: 131: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3994  0002EE  0E17               	movlw	23
  3995  0002F0  6E39               	movwf	drawtext@y,c
  3996  0002F2  0EDC               	movlw	low _tempC
  3997  0002F4  6E3A               	movwf	drawtext@_text,c
  3998  0002F6  0E00               	movlw	high _tempC
  3999  0002F8  6E3B               	movwf	drawtext@_text+1,c
  4000  0002FA  0EFF               	movlw	255
  4001  0002FC  6E3D               	movwf	drawtext@color+1,c
  4002  0002FE  0EE0               	movlw	224
  4003  000300  6E3C               	movwf	drawtext@color,c
  4004  000302  0E00               	movlw	0
  4005  000304  6E3F               	movwf	drawtext@bg+1,c
  4006  000306  0E00               	movlw	0
  4007  000308  6E3E               	movwf	drawtext@bg,c
  4008  00030A  0E02               	movlw	2
  4009  00030C  6E40               	movwf	drawtext@size,c
  4010  00030E  0E01               	movlw	1
  4011  000310  EC99  F008         	call	_drawtext
  4012                           
  4013                           ;Main_Screen.c: 132: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  4014  000314  0E17               	movlw	23
  4015  000316  6E39               	movwf	drawtext@y,c
  4016  000318  0EE0               	movlw	low _tempF
  4017  00031A  6E3A               	movwf	drawtext@_text,c
  4018  00031C  0E00               	movlw	high _tempF
  4019  00031E  6E3B               	movwf	drawtext@_text+1,c
  4020  000320  0EFF               	movlw	255
  4021  000322  6E3D               	movwf	drawtext@color+1,c
  4022  000324  0EE0               	movlw	224
  4023  000326  6E3C               	movwf	drawtext@color,c
  4024  000328  0E00               	movlw	0
  4025  00032A  6E3F               	movwf	drawtext@bg+1,c
  4026  00032C  0E00               	movlw	0
  4027  00032E  6E3E               	movwf	drawtext@bg,c
  4028  000330  0E02               	movlw	2
  4029  000332  6E40               	movwf	drawtext@size,c
  4030  000334  0E46               	movlw	70
  4031  000336  EC99  F008         	call	_drawtext
  4032                           
  4033                           ;Main_Screen.c: 133: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  4034  00033A  0E34               	movlw	52
  4035  00033C  6E39               	movwf	drawtext@y,c
  4036  00033E  0EC6               	movlw	low _time
  4037  000340  6E3A               	movwf	drawtext@_text,c
  4038  000342  0E00               	movlw	high _time
  4039  000344  6E3B               	movwf	drawtext@_text+1,c
  4040  000346  0E07               	movlw	7
  4041  000348  6E3D               	movwf	drawtext@color+1,c
  4042  00034A  683C               	setf	drawtext@color,c
  4043  00034C  0E00               	movlw	0
  4044  00034E  6E3F               	movwf	drawtext@bg+1,c
  4045  000350  0E00               	movlw	0
  4046  000352  6E3E               	movwf	drawtext@bg,c
  4047  000354  0E02               	movlw	2
  4048  000356  6E40               	movwf	drawtext@size,c
  4049  000358  0E0F               	movlw	15
  4050  00035A  EC99  F008         	call	_drawtext
  4051                           
  4052                           ;Main_Screen.c: 134: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  4053  00035E  0E52               	movlw	82
  4054  000360  6E39               	movwf	drawtext@y,c
  4055  000362  0EBD               	movlw	low _date
  4056  000364  6E3A               	movwf	drawtext@_text,c
  4057  000366  0E00               	movlw	high _date
  4058  000368  6E3B               	movwf	drawtext@_text+1,c
  4059  00036A  0E07               	movlw	7
  4060  00036C  6E3D               	movwf	drawtext@color+1,c
  4061  00036E  0EE0               	movlw	224
  4062  000370  6E3C               	movwf	drawtext@color,c
  4063  000372  0E00               	movlw	0
  4064  000374  6E3F               	movwf	drawtext@bg+1,c
  4065  000376  0E00               	movlw	0
  4066  000378  6E3E               	movwf	drawtext@bg,c
  4067  00037A  0E02               	movlw	2
  4068  00037C  6E40               	movwf	drawtext@size,c
  4069  00037E  0E0F               	movlw	15
  4070  000380  EC99  F008         	call	_drawtext
  4071                           
  4072                           ;Main_Screen.c: 136: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  4073  000384  0E82               	movlw	130
  4074  000386  6E39               	movwf	drawtext@y,c
  4075  000388  0ED8               	movlw	low _Fan_SW_Txt
  4076  00038A  6E3A               	movwf	drawtext@_text,c
  4077  00038C  0E00               	movlw	high _Fan_SW_Txt
  4078  00038E  6E3B               	movwf	drawtext@_text+1,c
  4079  000390  0EF8               	movlw	248
  4080  000392  6E3D               	movwf	drawtext@color+1,c
  4081  000394  0E00               	movlw	0
  4082  000396  6E3C               	movwf	drawtext@color,c
  4083  000398  0E00               	movlw	0
  4084  00039A  6E3F               	movwf	drawtext@bg+1,c
  4085  00039C  0E00               	movlw	0
  4086  00039E  6E3E               	movwf	drawtext@bg,c
  4087  0003A0  0E01               	movlw	1
  4088  0003A2  6E40               	movwf	drawtext@size,c
  4089  0003A4  0E5F               	movlw	95
  4090  0003A6  EC99  F008         	call	_drawtext
  4091                           
  4092                           ;Main_Screen.c: 137: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  4093  0003AA  0E96               	movlw	150
  4094  0003AC  6E39               	movwf	drawtext@y,c
  4095  0003AE  0ED4               	movlw	low _DC_Txt
  4096  0003B0  6E3A               	movwf	drawtext@_text,c
  4097  0003B2  0E00               	movlw	high _DC_Txt
  4098  0003B4  6E3B               	movwf	drawtext@_text+1,c
  4099  0003B6  0E07               	movlw	7
  4100  0003B8  6E3D               	movwf	drawtext@color+1,c
  4101  0003BA  0EE0               	movlw	224
  4102  0003BC  6E3C               	movwf	drawtext@color,c
  4103  0003BE  0E00               	movlw	0
  4104  0003C0  6E3F               	movwf	drawtext@bg+1,c
  4105  0003C2  0E00               	movlw	0
  4106  0003C4  6E3E               	movwf	drawtext@bg,c
  4107  0003C6  0E01               	movlw	1
  4108  0003C8  6E40               	movwf	drawtext@size,c
  4109  0003CA  0E0A               	movlw	10
  4110  0003CC  EC99  F008         	call	_drawtext
  4111                           
  4112                           ;Main_Screen.c: 138: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  4113  0003D0  0E96               	movlw	150
  4114  0003D2  6E39               	movwf	drawtext@y,c
  4115  0003D4  0ECF               	movlw	low _RPM_Txt
  4116  0003D6  6E3A               	movwf	drawtext@_text,c
  4117  0003D8  0E00               	movlw	high _RPM_Txt
  4118  0003DA  6E3B               	movwf	drawtext@_text+1,c
  4119  0003DC  0E07               	movlw	7
  4120  0003DE  6E3D               	movwf	drawtext@color+1,c
  4121  0003E0  0EE0               	movlw	224
  4122  0003E2  6E3C               	movwf	drawtext@color,c
  4123  0003E4  0E00               	movlw	0
  4124  0003E6  6E3F               	movwf	drawtext@bg+1,c
  4125  0003E8  0E00               	movlw	0
  4126  0003EA  6E3E               	movwf	drawtext@bg,c
  4127  0003EC  0E01               	movlw	1
  4128  0003EE  6E40               	movwf	drawtext@size,c
  4129  0003F0  0E5D               	movlw	93
  4130  0003F2  EC99  F008         	call	_drawtext
  4131  0003F6  0012               	return		;funcret
  4132  0003F8                     __end_of_Update_Screen:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           intcon	equ	0xFF2
  4141                           intcon2	equ	0xFF1
  4142                           postinc0	equ	0xFEE
  4143                           wreg	equ	0xFE8
  4144                           postdec1	equ	0xFE5
  4145                           fsr1l	equ	0xFE1
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function ___awmod *****************
  4154 ;; Defined at:
  4155 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  dividend        2   30[COMRAM] int 
  4158 ;;  divisor         2   32[COMRAM] int 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  sign            1   35[COMRAM] unsigned char 
  4161 ;;  counter         1   34[COMRAM] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  2   30[COMRAM] int 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;Total ram usage:        6 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    3
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_Update_Screen
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text8
  4186  001964                     __ptext8:
  4187                           	opt stack 0
  4188  001964                     ___awmod:
  4189                           	opt stack 26
  4190                           
  4191                           ;incstack = 0
  4192  001964  0E00               	movlw	0
  4193  001966  6E24               	movwf	___awmod@sign,c
  4194  001968  AE20               	btfss	___awmod@dividend+1,7,c
  4195  00196A  D007               	goto	l6069
  4196  00196C  6C1F               	negf	___awmod@dividend,c
  4197  00196E  1E20               	comf	___awmod@dividend+1,f,c
  4198  001970  B0D8               	btfsc	status,0,c
  4199  001972  2A20               	incf	___awmod@dividend+1,f,c
  4200  001974  0E01               	movlw	1
  4201  001976  6E24               	movwf	___awmod@sign,c
  4202  001978  D000               	goto	l6069
  4203  00197A                     l6069:
  4204  00197A  AE22               	btfss	___awmod@divisor+1,7,c
  4205  00197C  D005               	goto	l6073
  4206  00197E  6C21               	negf	___awmod@divisor,c
  4207  001980  1E22               	comf	___awmod@divisor+1,f,c
  4208  001982  B0D8               	btfsc	status,0,c
  4209  001984  2A22               	incf	___awmod@divisor+1,f,c
  4210  001986  D000               	goto	l6073
  4211  001988                     l6073:
  4212  001988  5021               	movf	___awmod@divisor,w,c
  4213  00198A  1022               	iorwf	___awmod@divisor+1,w,c
  4214  00198C  B4D8               	btfsc	status,2,c
  4215  00198E  D01D               	goto	l6089
  4216  001990  0E01               	movlw	1
  4217  001992  6E23               	movwf	___awmod@counter,c
  4218  001994  D005               	goto	l6079
  4219  001996                     l6077:
  4220  001996  90D8               	bcf	status,0,c
  4221  001998  3621               	rlcf	___awmod@divisor,f,c
  4222  00199A  3622               	rlcf	___awmod@divisor+1,f,c
  4223  00199C  2A23               	incf	___awmod@counter,f,c
  4224  00199E  D000               	goto	l6079
  4225  0019A0                     l6079:
  4226  0019A0  BE22               	btfsc	___awmod@divisor+1,7,c
  4227  0019A2  D002               	goto	l6081
  4228  0019A4  D7F8               	goto	l6077
  4229  0019A6  D000               	goto	l6081
  4230  0019A8                     l6081:
  4231  0019A8  5021               	movf	___awmod@divisor,w,c
  4232  0019AA  5C1F               	subwf	___awmod@dividend,w,c
  4233  0019AC  5022               	movf	___awmod@divisor+1,w,c
  4234  0019AE  5820               	subwfb	___awmod@dividend+1,w,c
  4235  0019B0  A0D8               	btfss	status,0,c
  4236  0019B2  D005               	goto	l6085
  4237  0019B4  5021               	movf	___awmod@divisor,w,c
  4238  0019B6  5E1F               	subwf	___awmod@dividend,f,c
  4239  0019B8  5022               	movf	___awmod@divisor+1,w,c
  4240  0019BA  5A20               	subwfb	___awmod@dividend+1,f,c
  4241  0019BC  D000               	goto	l6085
  4242  0019BE                     l6085:
  4243  0019BE  90D8               	bcf	status,0,c
  4244  0019C0  3222               	rrcf	___awmod@divisor+1,f,c
  4245  0019C2  3221               	rrcf	___awmod@divisor,f,c
  4246  0019C4  2E23               	decfsz	___awmod@counter,f,c
  4247  0019C6  D7F0               	goto	l6081
  4248  0019C8  D000               	goto	l6089
  4249  0019CA                     l6089:
  4250  0019CA  5024               	movf	___awmod@sign,w,c
  4251  0019CC  B4D8               	btfsc	status,2,c
  4252  0019CE  D005               	goto	l6093
  4253  0019D0  6C1F               	negf	___awmod@dividend,c
  4254  0019D2  1E20               	comf	___awmod@dividend+1,f,c
  4255  0019D4  B0D8               	btfsc	status,0,c
  4256  0019D6  2A20               	incf	___awmod@dividend+1,f,c
  4257  0019D8  D000               	goto	l6093
  4258  0019DA                     l6093:
  4259  0019DA  C01F  F01F         	movff	___awmod@dividend,?___awmod
  4260  0019DE  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  4261  0019E2  D000               	goto	l1071
  4262  0019E4                     l1071:
  4263  0019E4  0012               	return		;funcret
  4264  0019E6                     __end_of___awmod:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon	equ	0xFF2
  4273                           intcon2	equ	0xFF1
  4274                           postinc0	equ	0xFEE
  4275                           wreg	equ	0xFE8
  4276                           postdec1	equ	0xFE5
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           postdec2	equ	0xFDD
  4281                           fsr2h	equ	0xFDA
  4282                           fsr2l	equ	0xFD9
  4283                           status	equ	0xFD8
  4284                           
  4285 ;; *************** function _Toggle_Fan *****************
  4286 ;; Defined at:
  4287 ;;		line 19 in file "Fan_Support.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;		None
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;		None
  4292 ;; Return value:  Size  Location     Type
  4293 ;;		None               void
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0, cstack
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;Total ram usage:        0 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; Hardware stack levels required when called:    7
  4308 ;; This function calls:
  4309 ;;		_Turn_Off_Fan
  4310 ;;		_Turn_On_Fan
  4311 ;; This function is called by:
  4312 ;;		_main
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text9
  4317  002292                     __ptext9:
  4318                           	opt stack 0
  4319  002292                     _Toggle_Fan:
  4320                           	opt stack 23
  4321                           
  4322                           ;Fan_Support.c: 24: if (FAN==0) Turn_On_Fan();
  4323                           
  4324                           ;incstack = 0
  4325  002292  5050               	movf	_FAN,w,c
  4326  002294  A4D8               	btfss	status,2,c
  4327  002296  D003               	goto	l6147
  4328  002298  ECAB  F011         	call	_Turn_On_Fan	;wreg free
  4329  00229C  D003               	goto	l36
  4330  00229E                     l6147:
  4331                           
  4332                           ;Fan_Support.c: 25: else Turn_Off_Fan();
  4333  00229E  ECD4  F011         	call	_Turn_Off_Fan	;wreg free
  4334  0022A2  D000               	goto	l36
  4335  0022A4                     l36:
  4336  0022A4  0012               	return		;funcret
  4337  0022A6                     __end_of_Toggle_Fan:
  4338                           	opt stack 0
  4339                           tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           intcon	equ	0xFF2
  4346                           intcon2	equ	0xFF1
  4347                           postinc0	equ	0xFEE
  4348                           wreg	equ	0xFE8
  4349                           postdec1	equ	0xFE5
  4350                           fsr1l	equ	0xFE1
  4351                           indf2	equ	0xFDF
  4352                           postinc2	equ	0xFDE
  4353                           postdec2	equ	0xFDD
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function _Turn_On_Fan *****************
  4359 ;; Defined at:
  4360 ;;		line 35 in file "Fan_Support.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;		None               void
  4367 ;; Registers used:
  4368 ;;		wreg, status,2, status,0, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;Total ram usage:        0 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    6
  4381 ;; This function calls:
  4382 ;;		_do_update_pwm
  4383 ;; This function is called by:
  4384 ;;		_Toggle_Fan
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text10
  4389  002356                     __ptext10:
  4390                           	opt stack 0
  4391  002356                     _Turn_On_Fan:
  4392                           	opt stack 23
  4393                           
  4394                           ;Fan_Support.c: 37: FAN = 1;
  4395                           
  4396                           ;incstack = 0
  4397  002356  0E01               	movlw	1
  4398  002358  6E50               	movwf	_FAN,c
  4399                           
  4400                           ;Fan_Support.c: 38: do_update_pwm(duty_cycle);
  4401  00235A  505C               	movf	_duty_cycle,w,c
  4402  00235C  ECC8  F00B         	call	_do_update_pwm
  4403                           
  4404                           ;Fan_Support.c: 39: PORTAbits.RA4 = 1;
  4405  002360  8880               	bsf	3968,4,c	;volatile
  4406  002362  0012               	return		;funcret
  4407  002364                     __end_of_Turn_On_Fan:
  4408                           	opt stack 0
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           intcon	equ	0xFF2
  4416                           intcon2	equ	0xFF1
  4417                           postinc0	equ	0xFEE
  4418                           wreg	equ	0xFE8
  4419                           postdec1	equ	0xFE5
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           postinc2	equ	0xFDE
  4423                           postdec2	equ	0xFDD
  4424                           fsr2h	equ	0xFDA
  4425                           fsr2l	equ	0xFD9
  4426                           status	equ	0xFD8
  4427                           
  4428 ;; *************** function _Turn_Off_Fan *****************
  4429 ;; Defined at:
  4430 ;;		line 28 in file "Fan_Support.c"
  4431 ;; Parameters:    Size  Location     Type
  4432 ;;		None
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;		None
  4435 ;; Return value:  Size  Location     Type
  4436 ;;		None               void
  4437 ;; Registers used:
  4438 ;;		wreg, status,2
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;Total ram usage:        0 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    3
  4451 ;; This function calls:
  4452 ;;		Nothing
  4453 ;; This function is called by:
  4454 ;;		_Toggle_Fan
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text11
  4459  0023A8                     __ptext11:
  4460                           	opt stack 0
  4461  0023A8                     _Turn_Off_Fan:
  4462                           	opt stack 26
  4463                           
  4464                           ;Fan_Support.c: 30: FAN = 0;
  4465                           
  4466                           ;incstack = 0
  4467  0023A8  0E00               	movlw	0
  4468  0023AA  6E50               	movwf	_FAN,c
  4469                           
  4470                           ;Fan_Support.c: 31: PORTAbits.RA4 = 0;
  4471  0023AC  9880               	bcf	3968,4,c	;volatile
  4472  0023AE  0012               	return		;funcret
  4473  0023B0                     __end_of_Turn_Off_Fan:
  4474                           	opt stack 0
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           intcon	equ	0xFF2
  4482                           intcon2	equ	0xFF1
  4483                           postinc0	equ	0xFEE
  4484                           wreg	equ	0xFE8
  4485                           postdec1	equ	0xFE5
  4486                           fsr1l	equ	0xFE1
  4487                           indf2	equ	0xFDF
  4488                           postinc2	equ	0xFDE
  4489                           postdec2	equ	0xFDD
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _Set_RPM_RGB *****************
  4495 ;; Defined at:
  4496 ;;		line 94 in file "Fan_Support.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  rpm             2   30[COMRAM] int 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  temp           14   32[COMRAM] int [7]
  4501 ;; Return value:  Size  Location     Type
  4502 ;;		None               void
  4503 ;; Registers used:
  4504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;Total ram usage:       16 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    4
  4517 ;; This function calls:
  4518 ;;		___awdiv
  4519 ;; This function is called by:
  4520 ;;		_main
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           	psect	text12
  4525  001CC6                     __ptext12:
  4526                           	opt stack 0
  4527  001CC6                     _Set_RPM_RGB:
  4528                           	opt stack 26
  4529                           
  4530                           ;Fan_Support.c: 96: int temp[7] = { 1, 3, 2, 4, 5, 6, 7};
  4531                           
  4532                           ;incstack = 0
  4533  001CC6  EE20  F080         	lfsr	2,Set_RPM_RGB@F4110
  4534  001CCA  EE10  F021         	lfsr	1,Set_RPM_RGB@temp
  4535  001CCE  0E0D               	movlw	13
  4536  001CD0                     u4841:
  4537  001CD0  CFDB FFE3          	movff	plusw2,plusw1
  4538  001CD4  06E8               	decf	wreg,f,c
  4539  001CD6  E2FC               	bc	u4841
  4540                           
  4541                           ;Fan_Support.c: 98: if (rpm < 1)
  4542  001CD8  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  4543  001CDA  D005               	goto	l6175
  4544  001CDC  5020               	movf	Set_RPM_RGB@rpm+1,w,c
  4545  001CDE  E105               	bnz	l6177
  4546  001CE0  041F               	decf	Set_RPM_RGB@rpm,w,c
  4547  001CE2  B0D8               	btfsc	status,0,c
  4548  001CE4  D002               	goto	l6177
  4549  001CE6                     l6175:
  4550                           
  4551                           ;Fan_Support.c: 99: PORTE = 0x00;
  4552  001CE6  0E00               	movlw	0
  4553  001CE8  D014               	goto	L3
  4554  001CEA                     l6177:
  4555                           
  4556                           ;Fan_Support.c: 100: else PORTE = temp[(rpm/500)];
  4557  001CEA  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  4558  001CEE  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  4559  001CF2  0E01               	movlw	1
  4560  001CF4  6E1A               	movwf	___awdiv@divisor+1,c
  4561  001CF6  0EF4               	movlw	244
  4562  001CF8  6E19               	movwf	___awdiv@divisor,c
  4563  001CFA  EC23  F00C         	call	___awdiv	;wreg free
  4564  001CFE  90D8               	bcf	status,0,c
  4565  001D00  3617               	rlcf	?___awdiv,f,c
  4566  001D02  3618               	rlcf	?___awdiv+1,f,c
  4567  001D04  0E21               	movlw	low Set_RPM_RGB@temp
  4568  001D06  2417               	addwf	?___awdiv,w,c
  4569  001D08  6ED9               	movwf	fsr2l,c
  4570  001D0A  0E00               	movlw	high Set_RPM_RGB@temp
  4571  001D0C  2018               	addwfc	?___awdiv+1,w,c
  4572  001D0E  6EDA               	movwf	fsr2h,c
  4573  001D10  50DF               	movf	indf2,w,c
  4574  001D12                     L3:
  4575  001D12  6E84               	movwf	3972,c	;volatile
  4576  001D14  D000               	goto	l68
  4577  001D16                     l68:
  4578  001D16  0012               	return		;funcret
  4579  001D18                     __end_of_Set_RPM_RGB:
  4580                           	opt stack 0
  4581                           tblptru	equ	0xFF8
  4582                           tblptrh	equ	0xFF7
  4583                           tblptrl	equ	0xFF6
  4584                           tablat	equ	0xFF5
  4585                           prodh	equ	0xFF4
  4586                           prodl	equ	0xFF3
  4587                           intcon	equ	0xFF2
  4588                           intcon2	equ	0xFF1
  4589                           postinc0	equ	0xFEE
  4590                           wreg	equ	0xFE8
  4591                           postdec1	equ	0xFE5
  4592                           plusw1	equ	0xFE3
  4593                           fsr1l	equ	0xFE1
  4594                           indf2	equ	0xFDF
  4595                           postinc2	equ	0xFDE
  4596                           postdec2	equ	0xFDD
  4597                           plusw2	equ	0xFDB
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function _Set_DC_RGB *****************
  4603 ;; Defined at:
  4604 ;;		line 87 in file "Fan_Support.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  duty_cycle      2   30[COMRAM] int 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;		None
  4609 ;; Return value:  Size  Location     Type
  4610 ;;		None               void
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4618 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;Total ram usage:        2 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    4
  4625 ;; This function calls:
  4626 ;;		___awdiv
  4627 ;; This function is called by:
  4628 ;;		_main
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text13
  4633  002026                     __ptext13:
  4634                           	opt stack 0
  4635  002026                     _Set_DC_RGB:
  4636                           	opt stack 26
  4637                           
  4638                           ;Fan_Support.c: 89: if (duty_cycle >= 70)
  4639                           
  4640                           ;incstack = 0
  4641  002026  BE20               	btfsc	Set_DC_RGB@duty_cycle+1,7,c
  4642  002028  D009               	goto	l6169
  4643  00202A  5020               	movf	Set_DC_RGB@duty_cycle+1,w,c
  4644  00202C  E104               	bnz	u4830
  4645  00202E  0E46               	movlw	70
  4646  002030  5C1F               	subwf	Set_DC_RGB@duty_cycle,w,c
  4647  002032  A0D8               	btfss	status,0,c
  4648  002034  D003               	goto	l6169
  4649  002036                     u4830:
  4650                           
  4651                           ;Fan_Support.c: 90: PORTD = PORTD | 7;
  4652  002036  5083               	movf	3971,w,c	;volatile
  4653  002038  0907               	iorlw	7
  4654  00203A  D00C               	goto	L4
  4655  00203C                     l6169:
  4656                           
  4657                           ;Fan_Support.c: 91: else PORTD = PORTD | (duty_cycle/10);
  4658  00203C  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  4659  002040  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  4660  002044  0E00               	movlw	0
  4661  002046  6E1A               	movwf	___awdiv@divisor+1,c
  4662  002048  0E0A               	movlw	10
  4663  00204A  6E19               	movwf	___awdiv@divisor,c
  4664  00204C  EC23  F00C         	call	___awdiv	;wreg free
  4665  002050  5017               	movf	?___awdiv,w,c
  4666  002052  1083               	iorwf	3971,w,c	;volatile
  4667  002054                     L4:
  4668  002054  6E83               	movwf	3971,c	;volatile
  4669  002056  D000               	goto	l61
  4670  002058                     l61:
  4671  002058  0012               	return		;funcret
  4672  00205A                     __end_of_Set_DC_RGB:
  4673                           	opt stack 0
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           intcon	equ	0xFF2
  4681                           intcon2	equ	0xFF1
  4682                           postinc0	equ	0xFEE
  4683                           wreg	equ	0xFE8
  4684                           postdec1	equ	0xFE5
  4685                           plusw1	equ	0xFE3
  4686                           fsr1l	equ	0xFE1
  4687                           indf2	equ	0xFDF
  4688                           postinc2	equ	0xFDE
  4689                           postdec2	equ	0xFDD
  4690                           plusw2	equ	0xFDB
  4691                           fsr2h	equ	0xFDA
  4692                           fsr2l	equ	0xFD9
  4693                           status	equ	0xFD8
  4694                           
  4695 ;; *************** function ___awdiv *****************
  4696 ;; Defined at:
  4697 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  dividend        2   22[COMRAM] int 
  4700 ;;  divisor         2   24[COMRAM] int 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  quotient        2   28[COMRAM] int 
  4703 ;;  sign            1   27[COMRAM] unsigned char 
  4704 ;;  counter         1   26[COMRAM] unsigned char 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  2   22[COMRAM] int 
  4707 ;; Registers used:
  4708 ;;		wreg, status,2, status,0
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4714 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;Total ram usage:        8 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    3
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_get_RPM
  4725 ;;		_Set_DC_RGB
  4726 ;;		_Set_RPM_RGB
  4727 ;;		_main
  4728 ;;		_Update_Screen
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text14
  4733  001846                     __ptext14:
  4734                           	opt stack 0
  4735  001846                     ___awdiv:
  4736                           	opt stack 26
  4737                           
  4738                           ;incstack = 0
  4739  001846  0E00               	movlw	0
  4740  001848  6E1C               	movwf	___awdiv@sign,c
  4741  00184A  AE1A               	btfss	___awdiv@divisor+1,7,c
  4742  00184C  D007               	goto	l6025
  4743  00184E  6C19               	negf	___awdiv@divisor,c
  4744  001850  1E1A               	comf	___awdiv@divisor+1,f,c
  4745  001852  B0D8               	btfsc	status,0,c
  4746  001854  2A1A               	incf	___awdiv@divisor+1,f,c
  4747  001856  0E01               	movlw	1
  4748  001858  6E1C               	movwf	___awdiv@sign,c
  4749  00185A  D000               	goto	l6025
  4750  00185C                     l6025:
  4751  00185C  AE18               	btfss	___awdiv@dividend+1,7,c
  4752  00185E  D007               	goto	l6031
  4753  001860  6C17               	negf	___awdiv@dividend,c
  4754  001862  1E18               	comf	___awdiv@dividend+1,f,c
  4755  001864  B0D8               	btfsc	status,0,c
  4756  001866  2A18               	incf	___awdiv@dividend+1,f,c
  4757  001868  0E01               	movlw	1
  4758  00186A  1A1C               	xorwf	___awdiv@sign,f,c
  4759  00186C  D000               	goto	l6031
  4760  00186E                     l6031:
  4761  00186E  0E00               	movlw	0
  4762  001870  6E1E               	movwf	___awdiv@quotient+1,c
  4763  001872  0E00               	movlw	0
  4764  001874  6E1D               	movwf	___awdiv@quotient,c
  4765  001876  5019               	movf	___awdiv@divisor,w,c
  4766  001878  101A               	iorwf	___awdiv@divisor+1,w,c
  4767  00187A  B4D8               	btfsc	status,2,c
  4768  00187C  D021               	goto	l6053
  4769  00187E  0E01               	movlw	1
  4770  001880  6E1B               	movwf	___awdiv@counter,c
  4771  001882  D005               	goto	l6039
  4772  001884                     l6037:
  4773  001884  90D8               	bcf	status,0,c
  4774  001886  3619               	rlcf	___awdiv@divisor,f,c
  4775  001888  361A               	rlcf	___awdiv@divisor+1,f,c
  4776  00188A  2A1B               	incf	___awdiv@counter,f,c
  4777  00188C  D000               	goto	l6039
  4778  00188E                     l6039:
  4779  00188E  BE1A               	btfsc	___awdiv@divisor+1,7,c
  4780  001890  D002               	goto	l6041
  4781  001892  D7F8               	goto	l6037
  4782  001894  D000               	goto	l6041
  4783  001896                     l6041:
  4784  001896  90D8               	bcf	status,0,c
  4785  001898  361D               	rlcf	___awdiv@quotient,f,c
  4786  00189A  361E               	rlcf	___awdiv@quotient+1,f,c
  4787  00189C  5019               	movf	___awdiv@divisor,w,c
  4788  00189E  5C17               	subwf	___awdiv@dividend,w,c
  4789  0018A0  501A               	movf	___awdiv@divisor+1,w,c
  4790  0018A2  5818               	subwfb	___awdiv@dividend+1,w,c
  4791  0018A4  A0D8               	btfss	status,0,c
  4792  0018A6  D006               	goto	l6049
  4793  0018A8  5019               	movf	___awdiv@divisor,w,c
  4794  0018AA  5E17               	subwf	___awdiv@dividend,f,c
  4795  0018AC  501A               	movf	___awdiv@divisor+1,w,c
  4796  0018AE  5A18               	subwfb	___awdiv@dividend+1,f,c
  4797  0018B0  801D               	bsf	___awdiv@quotient,0,c
  4798  0018B2  D000               	goto	l6049
  4799  0018B4                     l6049:
  4800  0018B4  90D8               	bcf	status,0,c
  4801  0018B6  321A               	rrcf	___awdiv@divisor+1,f,c
  4802  0018B8  3219               	rrcf	___awdiv@divisor,f,c
  4803  0018BA  2E1B               	decfsz	___awdiv@counter,f,c
  4804  0018BC  D7EC               	goto	l6041
  4805  0018BE  D000               	goto	l6053
  4806  0018C0                     l6053:
  4807  0018C0  501C               	movf	___awdiv@sign,w,c
  4808  0018C2  B4D8               	btfsc	status,2,c
  4809  0018C4  D005               	goto	l6057
  4810  0018C6  6C1D               	negf	___awdiv@quotient,c
  4811  0018C8  1E1E               	comf	___awdiv@quotient+1,f,c
  4812  0018CA  B0D8               	btfsc	status,0,c
  4813  0018CC  2A1E               	incf	___awdiv@quotient+1,f,c
  4814  0018CE  D000               	goto	l6057
  4815  0018D0                     l6057:
  4816  0018D0  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  4817  0018D4  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  4818  0018D8  D000               	goto	l1058
  4819  0018DA                     l1058:
  4820  0018DA  0012               	return		;funcret
  4821  0018DC                     __end_of___awdiv:
  4822                           	opt stack 0
  4823                           tblptru	equ	0xFF8
  4824                           tblptrh	equ	0xFF7
  4825                           tblptrl	equ	0xFF6
  4826                           tablat	equ	0xFF5
  4827                           prodh	equ	0xFF4
  4828                           prodl	equ	0xFF3
  4829                           intcon	equ	0xFF2
  4830                           intcon2	equ	0xFF1
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           postdec1	equ	0xFE5
  4834                           plusw1	equ	0xFE3
  4835                           fsr1l	equ	0xFE1
  4836                           indf2	equ	0xFDF
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           plusw2	equ	0xFDB
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _Initialize_Screen *****************
  4845 ;; Defined at:
  4846 ;;		line 34 in file "Main_Screen.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:   10
  4867 ;; This function calls:
  4868 ;;		_LCD_Reset
  4869 ;;		_TFT_GreenTab_Initialize
  4870 ;;		_drawCircle
  4871 ;;		_drawtext
  4872 ;;		_fillScreen
  4873 ;;		_strcpy
  4874 ;; This function is called by:
  4875 ;;		_main
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text15
  4880  000752                     __ptext15:
  4881                           	opt stack 0
  4882  000752                     _Initialize_Screen:
  4883                           	opt stack 20
  4884                           
  4885                           ;Main_Screen.c: 36: LCD_Reset();
  4886                           
  4887                           ;incstack = 0
  4888  000752  EC67  F011         	call	_LCD_Reset	;wreg free
  4889                           
  4890                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4891  000756  EC76  F010         	call	_TFT_GreenTab_Initialize	;wreg free
  4892                           
  4893                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4894  00075A  0E00               	movlw	0
  4895  00075C  6E25               	movwf	fillScreen@color+1,c
  4896  00075E  0E00               	movlw	0
  4897  000760  6E24               	movwf	fillScreen@color,c
  4898  000762  EC0A  F011         	call	_fillScreen	;wreg free
  4899                           
  4900                           ;Main_Screen.c: 39: txt = buffer;
  4901  000766  0E2A               	movlw	low _buffer
  4902  000768  6E4E               	movwf	_txt,c
  4903  00076A  0E01               	movlw	high _buffer
  4904  00076C  6E4F               	movwf	_txt+1,c
  4905                           
  4906                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S1");
  4907  00076E  C04E  F011         	movff	_txt,strcpy@to
  4908  000772  C04F  F012         	movff	_txt+1,strcpy@to+1
  4909  000776  0E4A               	movlw	low STR_7
  4910  000778  6E13               	movwf	strcpy@from,c
  4911  00077A  0EFF               	movlw	high STR_7
  4912  00077C  6E14               	movwf	strcpy@from+1,c
  4913  00077E  EC2D  F010         	call	_strcpy	;wreg free
  4914                           
  4915                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4916  000782  0E01               	movlw	1
  4917  000784  6E39               	movwf	drawtext@y,c
  4918  000786  C04E  F03A         	movff	_txt,drawtext@_text
  4919  00078A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4920  00078E  0EFF               	movlw	255
  4921  000790  6E3D               	movwf	drawtext@color+1,c
  4922  000792  683C               	setf	drawtext@color,c
  4923  000794  0E00               	movlw	0
  4924  000796  6E3F               	movwf	drawtext@bg+1,c
  4925  000798  0E00               	movlw	0
  4926  00079A  6E3E               	movwf	drawtext@bg,c
  4927  00079C  0E01               	movlw	1
  4928  00079E  6E40               	movwf	drawtext@size,c
  4929  0007A0  0E01               	movlw	1
  4930  0007A2  EC99  F008         	call	_drawtext
  4931                           
  4932                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4933  0007A6  C04E  F011         	movff	_txt,strcpy@to
  4934  0007AA  C04F  F012         	movff	_txt+1,strcpy@to+1
  4935  0007AE  0ECF               	movlw	low STR_8
  4936  0007B0  6E13               	movwf	strcpy@from,c
  4937  0007B2  0EFF               	movlw	high STR_8
  4938  0007B4  6E14               	movwf	strcpy@from+1,c
  4939  0007B6  EC2D  F010         	call	_strcpy	;wreg free
  4940                           
  4941                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4942  0007BA  0E0B               	movlw	11
  4943  0007BC  6E39               	movwf	drawtext@y,c
  4944  0007BE  C04E  F03A         	movff	_txt,drawtext@_text
  4945  0007C2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4946  0007C6  0EF8               	movlw	248
  4947  0007C8  6E3D               	movwf	drawtext@color+1,c
  4948  0007CA  0E1F               	movlw	31
  4949  0007CC  6E3C               	movwf	drawtext@color,c
  4950  0007CE  0E00               	movlw	0
  4951  0007D0  6E3F               	movwf	drawtext@bg+1,c
  4952  0007D2  0E00               	movlw	0
  4953  0007D4  6E3E               	movwf	drawtext@bg,c
  4954  0007D6  0E01               	movlw	1
  4955  0007D8  6E40               	movwf	drawtext@size,c
  4956  0007DA  0E18               	movlw	24
  4957  0007DC  EC99  F008         	call	_drawtext
  4958                           
  4959                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  4960  0007E0  0E00               	movlw	0
  4961  0007E2  6E1D               	movwf	drawCircle@x0+1,c
  4962  0007E4  0E28               	movlw	40
  4963  0007E6  6E1C               	movwf	drawCircle@x0,c
  4964  0007E8  0E00               	movlw	0
  4965  0007EA  6E1F               	movwf	drawCircle@y0+1,c
  4966  0007EC  0E17               	movlw	23
  4967  0007EE  6E1E               	movwf	drawCircle@y0,c
  4968  0007F0  0E00               	movlw	0
  4969  0007F2  6E21               	movwf	drawCircle@r+1,c
  4970  0007F4  0E02               	movlw	2
  4971  0007F6  6E20               	movwf	drawCircle@r,c
  4972  0007F8  0EFF               	movlw	255
  4973  0007FA  6E23               	movwf	drawCircle@color+1,c
  4974  0007FC  0EE0               	movlw	224
  4975  0007FE  6E22               	movwf	drawCircle@color,c
  4976  000800  ECD5  F005         	call	_drawCircle	;wreg free
  4977                           
  4978                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  4979  000804  C04E  F011         	movff	_txt,strcpy@to
  4980  000808  C04F  F012         	movff	_txt+1,strcpy@to+1
  4981  00080C  0EF8               	movlw	low STR_9
  4982  00080E  6E13               	movwf	strcpy@from,c
  4983  000810  0EFF               	movlw	high STR_9
  4984  000812  6E14               	movwf	strcpy@from+1,c
  4985  000814  EC2D  F010         	call	_strcpy	;wreg free
  4986                           
  4987                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  4988  000818  0E17               	movlw	23
  4989  00081A  6E39               	movwf	drawtext@y,c
  4990  00081C  C04E  F03A         	movff	_txt,drawtext@_text
  4991  000820  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4992  000824  0EFF               	movlw	255
  4993  000826  6E3D               	movwf	drawtext@color+1,c
  4994  000828  0EE0               	movlw	224
  4995  00082A  6E3C               	movwf	drawtext@color,c
  4996  00082C  0E00               	movlw	0
  4997  00082E  6E3F               	movwf	drawtext@bg+1,c
  4998  000830  0E00               	movlw	0
  4999  000832  6E3E               	movwf	drawtext@bg,c
  5000  000834  0E02               	movlw	2
  5001  000836  6E40               	movwf	drawtext@size,c
  5002  000838  0E2D               	movlw	45
  5003  00083A  EC99  F008         	call	_drawtext
  5004                           
  5005                           ;Main_Screen.c: 49: strcpy(txt, "F");
  5006  00083E  C04E  F011         	movff	_txt,strcpy@to
  5007  000842  C04F  F012         	movff	_txt+1,strcpy@to+1
  5008  000846  0EF2               	movlw	low (STR_17+2)
  5009  000848  6E13               	movwf	strcpy@from,c
  5010  00084A  0EFF               	movlw	high (STR_17+2)
  5011  00084C  6E14               	movwf	strcpy@from+1,c
  5012  00084E  EC2D  F010         	call	_strcpy	;wreg free
  5013                           
  5014                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  5015  000852  0E00               	movlw	0
  5016  000854  6E1D               	movwf	drawCircle@x0+1,c
  5017  000856  0E6E               	movlw	110
  5018  000858  6E1C               	movwf	drawCircle@x0,c
  5019  00085A  0E00               	movlw	0
  5020  00085C  6E1F               	movwf	drawCircle@y0+1,c
  5021  00085E  0E17               	movlw	23
  5022  000860  6E1E               	movwf	drawCircle@y0,c
  5023  000862  0E00               	movlw	0
  5024  000864  6E21               	movwf	drawCircle@r+1,c
  5025  000866  0E02               	movlw	2
  5026  000868  6E20               	movwf	drawCircle@r,c
  5027  00086A  0EFF               	movlw	255
  5028  00086C  6E23               	movwf	drawCircle@color+1,c
  5029  00086E  0EE0               	movlw	224
  5030  000870  6E22               	movwf	drawCircle@color,c
  5031  000872  ECD5  F005         	call	_drawCircle	;wreg free
  5032                           
  5033                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  5034  000876  0E17               	movlw	23
  5035  000878  6E39               	movwf	drawtext@y,c
  5036  00087A  C04E  F03A         	movff	_txt,drawtext@_text
  5037  00087E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5038  000882  0EFF               	movlw	255
  5039  000884  6E3D               	movwf	drawtext@color+1,c
  5040  000886  0EE0               	movlw	224
  5041  000888  6E3C               	movwf	drawtext@color,c
  5042  00088A  0E00               	movlw	0
  5043  00088C  6E3F               	movwf	drawtext@bg+1,c
  5044  00088E  0E00               	movlw	0
  5045  000890  6E3E               	movwf	drawtext@bg,c
  5046  000892  0E02               	movlw	2
  5047  000894  6E40               	movwf	drawtext@size,c
  5048  000896  0E73               	movlw	115
  5049  000898  EC99  F008         	call	_drawtext
  5050                           
  5051                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  5052  00089C  C04E  F011         	movff	_txt,strcpy@to
  5053  0008A0  C04F  F012         	movff	_txt+1,strcpy@to+1
  5054  0008A4  0EE2               	movlw	low STR_11
  5055  0008A6  6E13               	movwf	strcpy@from,c
  5056  0008A8  0EFF               	movlw	high STR_11
  5057  0008AA  6E14               	movwf	strcpy@from+1,c
  5058  0008AC  EC2D  F010         	call	_strcpy	;wreg free
  5059                           
  5060                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  5061  0008B0  0E28               	movlw	40
  5062  0008B2  6E39               	movwf	drawtext@y,c
  5063  0008B4  C04E  F03A         	movff	_txt,drawtext@_text
  5064  0008B8  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5065  0008BC  0E00               	movlw	0
  5066  0008BE  6E3D               	movwf	drawtext@color+1,c
  5067  0008C0  0E1F               	movlw	31
  5068  0008C2  6E3C               	movwf	drawtext@color,c
  5069  0008C4  0E00               	movlw	0
  5070  0008C6  6E3F               	movwf	drawtext@bg+1,c
  5071  0008C8  0E00               	movlw	0
  5072  0008CA  6E3E               	movwf	drawtext@bg,c
  5073  0008CC  0E01               	movlw	1
  5074  0008CE  6E40               	movwf	drawtext@size,c
  5075  0008D0  0E32               	movlw	50
  5076  0008D2  EC99  F008         	call	_drawtext
  5077                           
  5078                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  5079  0008D6  C04E  F011         	movff	_txt,strcpy@to
  5080  0008DA  C04F  F012         	movff	_txt+1,strcpy@to+1
  5081  0008DE  0EE7               	movlw	low STR_12
  5082  0008E0  6E13               	movwf	strcpy@from,c
  5083  0008E2  0EFF               	movlw	high STR_12
  5084  0008E4  6E14               	movwf	strcpy@from+1,c
  5085  0008E6  EC2D  F010         	call	_strcpy	;wreg free
  5086                           
  5087                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  5088  0008EA  0E47               	movlw	71
  5089  0008EC  6E39               	movwf	drawtext@y,c
  5090  0008EE  C04E  F03A         	movff	_txt,drawtext@_text
  5091  0008F2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5092  0008F6  0EF8               	movlw	248
  5093  0008F8  6E3D               	movwf	drawtext@color+1,c
  5094  0008FA  0E00               	movlw	0
  5095  0008FC  6E3C               	movwf	drawtext@color,c
  5096  0008FE  0E00               	movlw	0
  5097  000900  6E3F               	movwf	drawtext@bg+1,c
  5098  000902  0E00               	movlw	0
  5099  000904  6E3E               	movwf	drawtext@bg,c
  5100  000906  0E01               	movlw	1
  5101  000908  6E40               	movwf	drawtext@size,c
  5102  00090A  0E32               	movlw	50
  5103  00090C  EC99  F008         	call	_drawtext
  5104                           
  5105                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  5106  000910  C04E  F011         	movff	_txt,strcpy@to
  5107  000914  C04F  F012         	movff	_txt+1,strcpy@to+1
  5108  000918  0EDC               	movlw	low STR_13
  5109  00091A  6E13               	movwf	strcpy@from,c
  5110  00091C  0EFF               	movlw	high STR_13
  5111  00091E  6E14               	movwf	strcpy@from+1,c
  5112  000920  EC2D  F010         	call	_strcpy	;wreg free
  5113                           
  5114                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  5115  000924  0E78               	movlw	120
  5116  000926  6E39               	movwf	drawtext@y,c
  5117  000928  C04E  F03A         	movff	_txt,drawtext@_text
  5118  00092C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5119  000930  0E00               	movlw	0
  5120  000932  6E3D               	movwf	drawtext@color+1,c
  5121  000934  0E1F               	movlw	31
  5122  000936  6E3C               	movwf	drawtext@color,c
  5123  000938  0E00               	movlw	0
  5124  00093A  6E3F               	movwf	drawtext@bg+1,c
  5125  00093C  0E00               	movlw	0
  5126  00093E  6E3E               	movwf	drawtext@bg,c
  5127  000940  0E01               	movlw	1
  5128  000942  6E40               	movwf	drawtext@size,c
  5129  000944  0E55               	movlw	85
  5130  000946  EC99  F008         	call	_drawtext
  5131                           
  5132                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  5133  00094A  C04E  F011         	movff	_txt,strcpy@to
  5134  00094E  C04F  F012         	movff	_txt+1,strcpy@to+1
  5135  000952  0EFB               	movlw	low STR_14
  5136  000954  6E13               	movwf	strcpy@from,c
  5137  000956  0EFF               	movlw	high STR_14
  5138  000958  6E14               	movwf	strcpy@from+1,c
  5139  00095A  EC2D  F010         	call	_strcpy	;wreg free
  5140                           
  5141                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  5142  00095E  0E8C               	movlw	140
  5143  000960  6E39               	movwf	drawtext@y,c
  5144  000962  C04E  F03A         	movff	_txt,drawtext@_text
  5145  000966  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5146  00096A  0EFF               	movlw	255
  5147  00096C  6E3D               	movwf	drawtext@color+1,c
  5148  00096E  683C               	setf	drawtext@color,c
  5149  000970  0E00               	movlw	0
  5150  000972  6E3F               	movwf	drawtext@bg+1,c
  5151  000974  0E00               	movlw	0
  5152  000976  6E3E               	movwf	drawtext@bg,c
  5153  000978  0E01               	movlw	1
  5154  00097A  6E40               	movwf	drawtext@size,c
  5155  00097C  0E0C               	movlw	12
  5156  00097E  EC99  F008         	call	_drawtext
  5157                           
  5158                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  5159  000982  C04E  F011         	movff	_txt,strcpy@to
  5160  000986  C04F  F012         	movff	_txt+1,strcpy@to+1
  5161  00098A  0EF4               	movlw	low STR_15
  5162  00098C  6E13               	movwf	strcpy@from,c
  5163  00098E  0EFF               	movlw	high STR_15
  5164  000990  6E14               	movwf	strcpy@from+1,c
  5165  000992  EC2D  F010         	call	_strcpy	;wreg free
  5166                           
  5167                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  5168  000996  0E8C               	movlw	140
  5169  000998  6E39               	movwf	drawtext@y,c
  5170  00099A  C04E  F03A         	movff	_txt,drawtext@_text
  5171  00099E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  5172  0009A2  0EFF               	movlw	255
  5173  0009A4  6E3D               	movwf	drawtext@color+1,c
  5174  0009A6  683C               	setf	drawtext@color,c
  5175  0009A8  0E00               	movlw	0
  5176  0009AA  6E3F               	movwf	drawtext@bg+1,c
  5177  0009AC  0E00               	movlw	0
  5178  0009AE  6E3E               	movwf	drawtext@bg,c
  5179  0009B0  0E01               	movlw	1
  5180  0009B2  6E40               	movwf	drawtext@size,c
  5181  0009B4  0E5F               	movlw	95
  5182  0009B6  EC99  F008         	call	_drawtext
  5183  0009BA  0012               	return		;funcret
  5184  0009BC                     __end_of_Initialize_Screen:
  5185                           	opt stack 0
  5186                           tblptru	equ	0xFF8
  5187                           tblptrh	equ	0xFF7
  5188                           tblptrl	equ	0xFF6
  5189                           tablat	equ	0xFF5
  5190                           prodh	equ	0xFF4
  5191                           prodl	equ	0xFF3
  5192                           intcon	equ	0xFF2
  5193                           intcon2	equ	0xFF1
  5194                           postinc0	equ	0xFEE
  5195                           wreg	equ	0xFE8
  5196                           postdec1	equ	0xFE5
  5197                           plusw1	equ	0xFE3
  5198                           fsr1l	equ	0xFE1
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           postdec2	equ	0xFDD
  5202                           plusw2	equ	0xFDB
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _strcpy *****************
  5208 ;; Defined at:
  5209 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  to              2   16[COMRAM] PTR unsigned char 
  5212 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5213 ;;  from            2   18[COMRAM] PTR const unsigned char 
  5214 ;;		 -> STR_17(4), STR_16(4), STR_15(4), STR_14(3), 
  5215 ;;		 -> STR_13(6), STR_12(5), STR_11(5), STR_10(2), 
  5216 ;;		 -> STR_9(3), STR_8(13), STR_7(22), 
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;  cp              2   20[COMRAM] PTR unsigned char 
  5219 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  2   16[COMRAM] PTR unsigned char 
  5222 ;; Registers used:
  5223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5229 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;Total ram usage:        6 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    3
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_Initialize_Screen
  5240 ;;		_Update_Screen
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           	psect	text16
  5245  00205A                     __ptext16:
  5246                           	opt stack 0
  5247  00205A                     _strcpy:
  5248                           	opt stack 26
  5249                           
  5250                           ;incstack = 0
  5251  00205A  C011  F015         	movff	strcpy@to,strcpy@cp
  5252  00205E  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  5253  002062  D005               	goto	l5919
  5254  002064                     l5917:
  5255  002064  4A15               	infsnz	strcpy@cp,f,c
  5256  002066  2A16               	incf	strcpy@cp+1,f,c
  5257  002068  4A13               	infsnz	strcpy@from,f,c
  5258  00206A  2A14               	incf	strcpy@from+1,f,c
  5259  00206C  D000               	goto	l5919
  5260  00206E                     l5919:
  5261  00206E  C013  FFF6         	movff	strcpy@from,tblptrl
  5262  002072  C014  FFF7         	movff	strcpy@from+1,tblptrh
  5263  002076                     	if	0	;tblptru may be non-zero
  5264  002076                     	endif
  5265  002076                     	if	0	;tblptru may be non-zero
  5266  002076                     	endif
  5267  002076  C015  FFD9         	movff	strcpy@cp,fsr2l
  5268  00207A  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  5269  00207E  0008               	tblrd		*
  5270  002080  CFF5 FFDF          	movff	tablat,indf2
  5271  002084  50DF               	movf	indf2,w,c
  5272  002086  A4D8               	btfss	status,2,c
  5273  002088  D7ED               	goto	l5917
  5274                           
  5275                           ;	Return value of _strcpy is never used
  5276  00208A  0012               	return		;funcret
  5277  00208C                     __end_of_strcpy:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon	equ	0xFF2
  5286                           intcon2	equ	0xFF1
  5287                           postinc0	equ	0xFEE
  5288                           wreg	equ	0xFE8
  5289                           postdec1	equ	0xFE5
  5290                           plusw1	equ	0xFE3
  5291                           fsr1l	equ	0xFE1
  5292                           indf2	equ	0xFDF
  5293                           postinc2	equ	0xFDE
  5294                           postdec2	equ	0xFDD
  5295                           plusw2	equ	0xFDB
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function _fillScreen *****************
  5301 ;; Defined at:
  5302 ;;		line 620 in file "ST7735_TFT.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  color           2   35[COMRAM] unsigned int 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;		None
  5307 ;; Return value:  Size  Location     Type
  5308 ;;		None               void
  5309 ;; Registers used:
  5310 ;;		wreg, status,2, status,0, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;Total ram usage:        2 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    7
  5323 ;; This function calls:
  5324 ;;		_fillRectangle
  5325 ;; This function is called by:
  5326 ;;		_Initialize_Screen
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text17
  5331  002214                     __ptext17:
  5332                           	opt stack 0
  5333  002214                     _fillScreen:
  5334                           	opt stack 22
  5335                           
  5336                           ;ST7735_TFT.c: 622: fillRectangle(0, 0, 128, 160, color);
  5337                           
  5338                           ;incstack = 0
  5339  002214  0E00               	movlw	0
  5340  002216  6E18               	movwf	fillRectangle@y,c
  5341  002218  0E80               	movlw	128
  5342  00221A  6E19               	movwf	fillRectangle@w,c
  5343  00221C  0EA0               	movlw	160
  5344  00221E  6E1A               	movwf	fillRectangle@h,c
  5345  002220  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  5346  002224  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  5347  002228  0E00               	movlw	0
  5348  00222A  ECF7  F00A         	call	_fillRectangle
  5349  00222E  0012               	return		;funcret
  5350  002230                     __end_of_fillScreen:
  5351                           	opt stack 0
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           intcon	equ	0xFF2
  5359                           intcon2	equ	0xFF1
  5360                           postinc0	equ	0xFEE
  5361                           wreg	equ	0xFE8
  5362                           postdec1	equ	0xFE5
  5363                           plusw1	equ	0xFE3
  5364                           fsr1l	equ	0xFE1
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           plusw2	equ	0xFDB
  5369                           fsr2h	equ	0xFDA
  5370                           fsr2l	equ	0xFD9
  5371                           status	equ	0xFD8
  5372                           
  5373 ;; *************** function _fillRectangle *****************
  5374 ;; Defined at:
  5375 ;;		line 504 in file "ST7735_TFT.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  x               1    wreg     unsigned char 
  5378 ;;  y               1   23[COMRAM] unsigned char 
  5379 ;;  w               1   24[COMRAM] unsigned char 
  5380 ;;  h               1   25[COMRAM] unsigned char 
  5381 ;;  color           2   26[COMRAM] unsigned int 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  x               1   34[COMRAM] unsigned char 
  5384 ;;  lo              1   33[COMRAM] unsigned char 
  5385 ;;  hi              1   32[COMRAM] unsigned char 
  5386 ;; Return value:  Size  Location     Type
  5387 ;;		None               void
  5388 ;; Registers used:
  5389 ;;		wreg, status,2, status,0, cstack
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:       12 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    6
  5402 ;; This function calls:
  5403 ;;		_setAddrWindow
  5404 ;;		_spiwrite
  5405 ;; This function is called by:
  5406 ;;		_fillScreen
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text18
  5411  0015EE                     __ptext18:
  5412                           	opt stack 0
  5413  0015EE                     _fillRectangle:
  5414                           	opt stack 22
  5415                           
  5416                           ;incstack = 0
  5417                           ;fillRectangle@x stored from wreg
  5418  0015EE  6E23               	movwf	fillRectangle@x,c
  5419                           
  5420                           ;ST7735_TFT.c: 506: unsigned char hi, lo;
  5421                           ;ST7735_TFT.c: 507: if((x >= 128) || (y >= 160))
  5422  0015F0  0E80               	movlw	128
  5423  0015F2  6023               	cpfslt	fillRectangle@x,c
  5424  0015F4  D069               	goto	l669
  5425  0015F6  0E9F               	movlw	159
  5426  0015F8  6418               	cpfsgt	fillRectangle@y,c
  5427  0015FA  D001               	goto	l5757
  5428                           
  5429                           ;ST7735_TFT.c: 508: return;
  5430  0015FC  D065               	goto	l669
  5431  0015FE                     l5757:
  5432                           
  5433                           ;ST7735_TFT.c: 509: if((x + w - 1) >= 128)
  5434  0015FE  0EFF               	movlw	255
  5435  001600  6E1D               	movwf	??_fillRectangle& (0+255),c
  5436  001602  0EFF               	movlw	255
  5437  001604  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5438  001606  5019               	movf	fillRectangle@w,w,c
  5439  001608  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  5440  00160C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5441  00160E  261F               	addwf	??_fillRectangle+2,f,c
  5442  001610  0E00               	movlw	0
  5443  001612  2220               	addwfc	??_fillRectangle+3,f,c
  5444  001614  501D               	movf	??_fillRectangle,w,c
  5445  001616  261F               	addwf	??_fillRectangle+2,f,c
  5446  001618  501E               	movf	??_fillRectangle+1,w,c
  5447  00161A  2220               	addwfc	??_fillRectangle+3,f,c
  5448  00161C  BE20               	btfsc	??_fillRectangle+3,7,c
  5449  00161E  D00A               	goto	l670
  5450  001620  5020               	movf	??_fillRectangle+3,w,c
  5451  001622  E104               	bnz	u4380
  5452  001624  0E80               	movlw	128
  5453  001626  5C1F               	subwf	??_fillRectangle+2,w,c
  5454  001628  A0D8               	btfss	status,0,c
  5455  00162A  D004               	goto	l670
  5456  00162C                     u4380:
  5457                           
  5458                           ;ST7735_TFT.c: 510: w = 128 - x;
  5459  00162C  5023               	movf	fillRectangle@x,w,c
  5460  00162E  0800               	sublw	0
  5461  001630  0F80               	addlw	128
  5462  001632  6E19               	movwf	fillRectangle@w,c
  5463  001634                     l670:
  5464                           
  5465                           ;ST7735_TFT.c: 511: if((y + h - 1) >= 160)
  5466  001634  0EFF               	movlw	255
  5467  001636  6E1D               	movwf	??_fillRectangle& (0+255),c
  5468  001638  0EFF               	movlw	255
  5469  00163A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5470  00163C  501A               	movf	fillRectangle@h,w,c
  5471  00163E  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  5472  001642  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  5473  001644  261F               	addwf	??_fillRectangle+2,f,c
  5474  001646  0E00               	movlw	0
  5475  001648  2220               	addwfc	??_fillRectangle+3,f,c
  5476  00164A  501D               	movf	??_fillRectangle,w,c
  5477  00164C  261F               	addwf	??_fillRectangle+2,f,c
  5478  00164E  501E               	movf	??_fillRectangle+1,w,c
  5479  001650  2220               	addwfc	??_fillRectangle+3,f,c
  5480  001652  BE20               	btfsc	??_fillRectangle+3,7,c
  5481  001654  D00B               	goto	l5763
  5482  001656  5020               	movf	??_fillRectangle+3,w,c
  5483  001658  E104               	bnz	u4390
  5484  00165A  0EA0               	movlw	160
  5485  00165C  5C1F               	subwf	??_fillRectangle+2,w,c
  5486  00165E  A0D8               	btfss	status,0,c
  5487  001660  D005               	goto	l5763
  5488  001662                     u4390:
  5489                           
  5490                           ;ST7735_TFT.c: 512: h = 160 - y;
  5491  001662  5018               	movf	fillRectangle@y,w,c
  5492  001664  0800               	sublw	0
  5493  001666  0FA0               	addlw	160
  5494  001668  6E1A               	movwf	fillRectangle@h,c
  5495  00166A  D000               	goto	l5763
  5496  00166C                     l5763:
  5497                           
  5498                           ;ST7735_TFT.c: 513: setAddrWindow(x, y, x+w-1, y+h-1);
  5499  00166C  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  5500  001670  5023               	movf	fillRectangle@x,w,c
  5501  001672  2419               	addwf	fillRectangle@w,w,c
  5502  001674  6E1D               	movwf	??_fillRectangle& (0+255),c
  5503  001676  041D               	decf	??_fillRectangle,w,c
  5504  001678  6E15               	movwf	setAddrWindow@x1,c
  5505  00167A  5018               	movf	fillRectangle@y,w,c
  5506  00167C  241A               	addwf	fillRectangle@h,w,c
  5507  00167E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  5508  001680  041E               	decf	??_fillRectangle+1,w,c
  5509  001682  6E16               	movwf	setAddrWindow@y1,c
  5510  001684  5023               	movf	fillRectangle@x,w,c
  5511  001686  ECB5  F00E         	call	_setAddrWindow
  5512                           
  5513                           ;ST7735_TFT.c: 514: hi = color >> 8; lo = color;
  5514  00168A  501C               	movf	fillRectangle@color+1,w,c
  5515  00168C  6E21               	movwf	fillRectangle@hi,c
  5516  00168E  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  5517                           
  5518                           ;ST7735_TFT.c: 515: PORTBbits.RB5 = 1;
  5519  001692  8A81               	bsf	3969,5,c	;volatile
  5520                           
  5521                           ;ST7735_TFT.c: 516: PORTBbits.RB6 = 0;
  5522  001694  9C81               	bcf	3969,6,c	;volatile
  5523                           
  5524                           ;ST7735_TFT.c: 518: for(y=h; y>0; y--) {
  5525  001696  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  5526  00169A                     l5775:
  5527  00169A  5018               	movf	fillRectangle@y,w,c
  5528  00169C  B4D8               	btfsc	status,2,c
  5529  00169E  D013               	goto	l673
  5530  0016A0  D001               	goto	l672
  5531  0016A2  D011               	goto	l673
  5532  0016A4                     l672:
  5533                           
  5534                           ;ST7735_TFT.c: 519: for(x = w; x > 0; x--) {
  5535  0016A4  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  5536  0016A8                     l5779:
  5537  0016A8  5023               	movf	fillRectangle@x,w,c
  5538  0016AA  B4D8               	btfsc	status,2,c
  5539  0016AC  D00A               	goto	l5789
  5540  0016AE  D001               	goto	l5783
  5541  0016B0  D008               	goto	l5789
  5542  0016B2                     l5783:
  5543                           
  5544                           ;ST7735_TFT.c: 520: spiwrite(hi);
  5545  0016B2  5021               	movf	fillRectangle@hi,w,c
  5546  0016B4  EC53  F011         	call	_spiwrite
  5547                           
  5548                           ;ST7735_TFT.c: 521: spiwrite(lo);
  5549  0016B8  5022               	movf	fillRectangle@lo,w,c
  5550  0016BA  EC53  F011         	call	_spiwrite
  5551  0016BE  0623               	decf	fillRectangle@x,f,c
  5552  0016C0  D7F3               	goto	l5779
  5553  0016C2                     l5789:
  5554  0016C2  0618               	decf	fillRectangle@y,f,c
  5555  0016C4  D7EA               	goto	l5775
  5556  0016C6                     l673:
  5557                           
  5558                           ;ST7735_TFT.c: 522: }
  5559                           ;ST7735_TFT.c: 523: }
  5560                           ;ST7735_TFT.c: 524: PORTBbits.RB6 = 1;
  5561  0016C6  8C81               	bsf	3969,6,c	;volatile
  5562  0016C8                     l669:
  5563  0016C8  0012               	return		;funcret
  5564  0016CA                     __end_of_fillRectangle:
  5565                           	opt stack 0
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           intcon	equ	0xFF2
  5573                           intcon2	equ	0xFF1
  5574                           postinc0	equ	0xFEE
  5575                           wreg	equ	0xFE8
  5576                           postdec1	equ	0xFE5
  5577                           plusw1	equ	0xFE3
  5578                           fsr1l	equ	0xFE1
  5579                           indf2	equ	0xFDF
  5580                           postinc2	equ	0xFDE
  5581                           postdec2	equ	0xFDD
  5582                           plusw2	equ	0xFDB
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587 ;; *************** function _drawtext *****************
  5588 ;; Defined at:
  5589 ;;		line 475 in file "ST7735_TFT.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  x               1    wreg     unsigned char 
  5592 ;;  y               1   56[COMRAM] unsigned char 
  5593 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5594 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5595 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5596 ;;		 -> buffer(33), 
  5597 ;;  color           2   59[COMRAM] unsigned int 
  5598 ;;  bg              2   61[COMRAM] unsigned int 
  5599 ;;  size            1   63[COMRAM] unsigned char 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  x               1    0[BANK0 ] unsigned char 
  5602 ;;  i               2    3[BANK0 ] unsigned int 
  5603 ;;  textsize        2    1[BANK0 ] unsigned int 
  5604 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5605 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5606 ;; Return value:  Size  Location     Type
  5607 ;;		None               void
  5608 ;; Registers used:
  5609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5615 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;Total ram usage:       17 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    9
  5622 ;; This function calls:
  5623 ;;		_drawChar
  5624 ;;		_strlen
  5625 ;; This function is called by:
  5626 ;;		_Initialize_Screen
  5627 ;;		_Update_Screen
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text19
  5632  001132                     __ptext19:
  5633                           	opt stack 0
  5634  001132                     _drawtext:
  5635                           	opt stack 20
  5636                           
  5637                           ;incstack = 0
  5638                           ;drawtext@x stored from wreg
  5639  001132  0100               	movlb	0	; () banked
  5640  001134  6FE4               	movwf	drawtext@x& (0+255),b
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;ST7735_TFT.c: 477: unsigned char cursor_x, cursor_y;
  5644                           ;ST7735_TFT.c: 478: unsigned int textsize, i;
  5645                           ;ST7735_TFT.c: 479: cursor_x = x, cursor_y = y;
  5646  001136  C0E4  F0EA         	movff	drawtext@x,drawtext@cursor_x
  5647                           
  5648                           ; BSR set to: 0
  5649  00113A  C039  F0E9         	movff	drawtext@y,drawtext@cursor_y
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;ST7735_TFT.c: 480: textsize = strlen(_text);
  5653  00113E  C03A  F011         	movff	drawtext@_text,strlen@s
  5654  001142  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5655  001146  ECB6  F00F         	call	_strlen	;wreg free
  5656  00114A  C011  F0E5         	movff	?_strlen,drawtext@textsize
  5657  00114E  C012  F0E6         	movff	?_strlen+1,drawtext@textsize+1
  5658                           
  5659                           ;ST7735_TFT.c: 481: for(i = 0; i < textsize; i++){
  5660  001152  0E00               	movlw	0
  5661  001154  0100               	movlb	0	; () banked
  5662  001156  6FE8               	movwf	(drawtext@i+1)& (0+255),b
  5663  001158  0E00               	movlw	0
  5664  00115A  6FE7               	movwf	drawtext@i& (0+255),b
  5665  00115C  D064               	goto	l5955
  5666  00115E                     l5929:
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;ST7735_TFT.c: 482: if(wrap && ((cursor_x + size * 5) > 128)){
  5670  00115E  506F               	movf	_wrap,w,c
  5671  001160  B4D8               	btfsc	status,2,c
  5672  001162  D034               	goto	l5945
  5673                           
  5674                           ; BSR set to: 0
  5675  001164  5040               	movf	drawtext@size,w,c
  5676  001166  0D05               	mullw	5
  5677  001168  0100               	movlb	0	; () banked
  5678  00116A  51EA               	movf	drawtext@cursor_x& (0+255),w,b
  5679  00116C  6E41               	movwf	??_drawtext& (0+255),c
  5680  00116E  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5681  001170  50F3               	movf	prodl,w,c
  5682  001172  2641               	addwf	??_drawtext,f,c
  5683  001174  50F4               	movf	prodh,w,c
  5684  001176  2242               	addwfc	??_drawtext+1,f,c
  5685  001178  BE42               	btfsc	??_drawtext+1,7,c
  5686  00117A  D028               	goto	l5945
  5687  00117C  5042               	movf	??_drawtext+1,w,c
  5688  00117E  E104               	bnz	u4530
  5689  001180  0E81               	movlw	129
  5690  001182  5C41               	subwf	??_drawtext,w,c
  5691  001184  A0D8               	btfss	status,0,c
  5692  001186  D022               	goto	l5945
  5693  001188                     u4530:
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;ST7735_TFT.c: 483: cursor_x = 0;
  5697  001188  0E00               	movlw	0
  5698  00118A  0100               	movlb	0	; () banked
  5699  00118C  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;ST7735_TFT.c: 484: cursor_y = cursor_y + size * 7 + 3 ;
  5703  00118E  5040               	movf	drawtext@size,w,c
  5704  001190  0D07               	mullw	7
  5705  001192  50F3               	movf	prodl,w,c
  5706  001194  0100               	movlb	0	; () banked
  5707  001196  25E9               	addwf	drawtext@cursor_y& (0+255),w,b
  5708  001198  0F03               	addlw	3
  5709  00119A  0100               	movlb	0	; () banked
  5710  00119C  6FE9               	movwf	drawtext@cursor_y& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;ST7735_TFT.c: 485: if(cursor_y > 160) cursor_y = 160;
  5714  00119E  0EA0               	movlw	160
  5715  0011A0  0100               	movlb	0	; () banked
  5716  0011A2  65E9               	cpfsgt	drawtext@cursor_y& (0+255),b
  5717  0011A4  D004               	goto	l5941
  5718                           
  5719                           ; BSR set to: 0
  5720  0011A6  0EA0               	movlw	160
  5721  0011A8  0100               	movlb	0	; () banked
  5722  0011AA  6FE9               	movwf	drawtext@cursor_y& (0+255),b
  5723  0011AC  D000               	goto	l5941
  5724  0011AE                     l5941:
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;ST7735_TFT.c: 486: if(_text[i] == 0x20) goto _skip; }
  5728  0011AE  0100               	movlb	0	; () banked
  5729  0011B0  51E7               	movf	drawtext@i& (0+255),w,b
  5730  0011B2  243A               	addwf	drawtext@_text,w,c
  5731  0011B4  6ED9               	movwf	fsr2l,c
  5732  0011B6  0100               	movlb	0	; () banked
  5733  0011B8  51E8               	movf	(drawtext@i+1)& (0+255),w,b
  5734  0011BA  203B               	addwfc	drawtext@_text+1,w,c
  5735  0011BC  6EDA               	movwf	fsr2h,c
  5736  0011BE  0E20               	movlw	32
  5737  0011C0  18DE               	xorwf	postinc2,w,c
  5738  0011C2  B4D8               	btfsc	status,2,c
  5739  0011C4  D02C               	goto	l5953
  5740  0011C6  D002               	goto	l5945
  5741                           
  5742                           ; BSR set to: 0
  5743  0011C8  D02A               	goto	l5953
  5744                           
  5745                           ; BSR set to: 0
  5746  0011CA  D000               	goto	l5945
  5747  0011CC                     l5945:
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;ST7735_TFT.c: 487: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5751  0011CC  C0E9  F02E         	movff	drawtext@cursor_y,drawChar@y
  5752  0011D0  0100               	movlb	0	; () banked
  5753  0011D2  51E7               	movf	drawtext@i& (0+255),w,b
  5754  0011D4  243A               	addwf	drawtext@_text,w,c
  5755  0011D6  6ED9               	movwf	fsr2l,c
  5756  0011D8  0100               	movlb	0	; () banked
  5757  0011DA  51E8               	movf	(drawtext@i+1)& (0+255),w,b
  5758  0011DC  203B               	addwfc	drawtext@_text+1,w,c
  5759  0011DE  6EDA               	movwf	fsr2h,c
  5760  0011E0  50DF               	movf	indf2,w,c
  5761  0011E2  6E2F               	movwf	drawChar@c,c
  5762  0011E4  C03C  F030         	movff	drawtext@color,drawChar@color
  5763  0011E8  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5764  0011EC  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5765  0011F0  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5766  0011F4  C040  F034         	movff	drawtext@size,drawChar@size
  5767  0011F8  0100               	movlb	0	; () banked
  5768  0011FA  51EA               	movf	drawtext@cursor_x& (0+255),w,b
  5769  0011FC  EC66  F007         	call	_drawChar
  5770                           
  5771                           ;ST7735_TFT.c: 488: cursor_x = cursor_x + size * 6;
  5772  001200  5040               	movf	drawtext@size,w,c
  5773  001202  0D06               	mullw	6
  5774  001204  50F3               	movf	prodl,w,c
  5775  001206  0100               	movlb	0	; () banked
  5776  001208  25EA               	addwf	drawtext@cursor_x& (0+255),w,b
  5777  00120A  0100               	movlb	0	; () banked
  5778  00120C  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;ST7735_TFT.c: 489: if(cursor_x > 128) cursor_x = 128;
  5782  00120E  0E80               	movlw	128
  5783  001210  0100               	movlb	0	; () banked
  5784  001212  65EA               	cpfsgt	drawtext@cursor_x& (0+255),b
  5785  001214  D004               	goto	l5953
  5786                           
  5787                           ; BSR set to: 0
  5788  001216  0E80               	movlw	128
  5789  001218  0100               	movlb	0	; () banked
  5790  00121A  6FEA               	movwf	drawtext@cursor_x& (0+255),b
  5791                           
  5792                           ; BSR set to: 0
  5793  00121C  D000               	goto	l5953
  5794  00121E                     l5953:
  5795                           
  5796                           ; BSR set to: 0
  5797  00121E  0100               	movlb	0	; () banked
  5798  001220  4BE7               	infsnz	drawtext@i& (0+255),f,b
  5799  001222  2BE8               	incf	(drawtext@i+1)& (0+255),f,b
  5800  001224  D000               	goto	l5955
  5801  001226                     l5955:
  5802                           
  5803                           ; BSR set to: 0
  5804  001226  0100               	movlb	0	; () banked
  5805  001228  51E5               	movf	drawtext@textsize& (0+255),w,b
  5806  00122A  0100               	movlb	0	; () banked
  5807  00122C  5DE7               	subwf	drawtext@i& (0+255),w,b
  5808  00122E  0100               	movlb	0	; () banked
  5809  001230  51E6               	movf	(drawtext@textsize+1)& (0+255),w,b
  5810  001232  0100               	movlb	0	; () banked
  5811  001234  59E8               	subwfb	(drawtext@i+1)& (0+255),w,b
  5812  001236  A0D8               	btfss	status,0,c
  5813  001238  D792               	goto	l5929
  5814                           
  5815                           ; BSR set to: 0
  5816                           
  5817                           ; BSR set to: 0
  5818  00123A  0012               	return		;funcret
  5819  00123C                     __end_of_drawtext:
  5820                           	opt stack 0
  5821                           tblptru	equ	0xFF8
  5822                           tblptrh	equ	0xFF7
  5823                           tblptrl	equ	0xFF6
  5824                           tablat	equ	0xFF5
  5825                           prodh	equ	0xFF4
  5826                           prodl	equ	0xFF3
  5827                           intcon	equ	0xFF2
  5828                           intcon2	equ	0xFF1
  5829                           postinc0	equ	0xFEE
  5830                           wreg	equ	0xFE8
  5831                           postdec1	equ	0xFE5
  5832                           plusw1	equ	0xFE3
  5833                           fsr1l	equ	0xFE1
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           plusw2	equ	0xFDB
  5838                           fsr2h	equ	0xFDA
  5839                           fsr2l	equ	0xFD9
  5840                           status	equ	0xFD8
  5841                           
  5842 ;; *************** function _strlen *****************
  5843 ;; Defined at:
  5844 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5847 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5848 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5849 ;;		 -> buffer(33), 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5852 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  5853 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  5854 ;;		 -> buffer(33), 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  2   16[COMRAM] unsigned int 
  5857 ;; Registers used:
  5858 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;Total ram usage:        6 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    3
  5871 ;; This function calls:
  5872 ;;		Nothing
  5873 ;; This function is called by:
  5874 ;;		_drawtext
  5875 ;; This function uses a non-reentrant model
  5876 ;;
  5877                           
  5878                           	psect	text20
  5879  001F6C                     __ptext20:
  5880                           	opt stack 0
  5881  001F6C                     _strlen:
  5882                           	opt stack 25
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;incstack = 0
  5886  001F6C  C011  F015         	movff	strlen@s,strlen@cp
  5887  001F70  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5888  001F74  D003               	goto	l5747
  5889  001F76                     l5745:
  5890  001F76  4A15               	infsnz	strlen@cp,f,c
  5891  001F78  2A16               	incf	strlen@cp+1,f,c
  5892  001F7A  D000               	goto	l5747
  5893  001F7C                     l5747:
  5894  001F7C  C015  FFD9         	movff	strlen@cp,fsr2l
  5895  001F80  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5896  001F84  50DF               	movf	indf2,w,c
  5897  001F86  A4D8               	btfss	status,2,c
  5898  001F88  D7F6               	goto	l5745
  5899  001F8A  C011  F013         	movff	strlen@s,??_strlen
  5900  001F8E  C012  F014         	movff	strlen@s+1,??_strlen+1
  5901  001F92  1E13               	comf	??_strlen,f,c
  5902  001F94  1E14               	comf	??_strlen+1,f,c
  5903  001F96  4A13               	infsnz	??_strlen,f,c
  5904  001F98  2A14               	incf	??_strlen+1,f,c
  5905  001F9A  5015               	movf	strlen@cp,w,c
  5906  001F9C  2413               	addwf	??_strlen,w,c
  5907  001F9E  6E11               	movwf	?_strlen,c
  5908  001FA0  5016               	movf	strlen@cp+1,w,c
  5909  001FA2  2014               	addwfc	??_strlen+1,w,c
  5910  001FA4  6E12               	movwf	?_strlen+1,c
  5911  001FA6  D000               	goto	l1427
  5912  001FA8                     l1427:
  5913  001FA8  0012               	return		;funcret
  5914  001FAA                     __end_of_strlen:
  5915                           	opt stack 0
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           prodh	equ	0xFF4
  5921                           prodl	equ	0xFF3
  5922                           intcon	equ	0xFF2
  5923                           intcon2	equ	0xFF1
  5924                           postinc0	equ	0xFEE
  5925                           wreg	equ	0xFE8
  5926                           postdec1	equ	0xFE5
  5927                           plusw1	equ	0xFE3
  5928                           fsr1l	equ	0xFE1
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           plusw2	equ	0xFDB
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _drawChar *****************
  5938 ;; Defined at:
  5939 ;;		line 448 in file "ST7735_TFT.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  x               1    wreg     unsigned char 
  5942 ;;  y               1   45[COMRAM] unsigned char 
  5943 ;;  c               1   46[COMRAM] unsigned char 
  5944 ;;  color           2   47[COMRAM] unsigned int 
  5945 ;;  bg              2   49[COMRAM] unsigned int 
  5946 ;;  size            1   51[COMRAM] unsigned char 
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  x               1   53[COMRAM] unsigned char 
  5949 ;;  line            1   52[COMRAM] unsigned char 
  5950 ;;  i               1   55[COMRAM] unsigned char 
  5951 ;;  j               1   54[COMRAM] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;		None               void
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5961 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;Total ram usage:       11 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    8
  5968 ;; This function calls:
  5969 ;;		___wmul
  5970 ;;		_drawPixel
  5971 ;;		_fillRect
  5972 ;; This function is called by:
  5973 ;;		_drawtext
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text21
  5978  000ECC                     __ptext21:
  5979                           	opt stack 0
  5980  000ECC                     _drawChar:
  5981                           	opt stack 20
  5982                           
  5983                           ;incstack = 0
  5984                           ;drawChar@x stored from wreg
  5985  000ECC  6E36               	movwf	drawChar@x,c
  5986                           
  5987                           ;ST7735_TFT.c: 450: char i, j;
  5988                           ;ST7735_TFT.c: 451: if((x >= 128) || (y >= 160))
  5989  000ECE  0E80               	movlw	128
  5990  000ED0  6036               	cpfslt	drawChar@x,c
  5991  000ED2  D0A6               	goto	l632
  5992  000ED4  0E9F               	movlw	159
  5993  000ED6  642E               	cpfsgt	drawChar@y,c
  5994  000ED8  D001               	goto	l5693
  5995                           
  5996                           ;ST7735_TFT.c: 452: return;
  5997  000EDA  D0A2               	goto	l632
  5998  000EDC                     l5693:
  5999                           
  6000                           ;ST7735_TFT.c: 453: if(size < 1) size = 1;
  6001  000EDC  5034               	movf	drawChar@size,w,c
  6002  000EDE  A4D8               	btfss	status,2,c
  6003  000EE0  D003               	goto	l5697
  6004  000EE2  0E01               	movlw	1
  6005  000EE4  6E34               	movwf	drawChar@size,c
  6006  000EE6  D000               	goto	l5697
  6007  000EE8                     l5697:
  6008                           
  6009                           ;ST7735_TFT.c: 454: if((c < ' ') || (c > '~'))
  6010  000EE8  0E1F               	movlw	31
  6011  000EEA  642F               	cpfsgt	drawChar@c,c
  6012  000EEC  D004               	goto	l5701
  6013  000EEE  0E7E               	movlw	126
  6014  000EF0  642F               	cpfsgt	drawChar@c,c
  6015  000EF2  D003               	goto	l634
  6016  000EF4  D000               	goto	l5701
  6017  000EF6                     l5701:
  6018                           
  6019                           ;ST7735_TFT.c: 455: c = '?';
  6020  000EF6  0E3F               	movlw	63
  6021  000EF8  6E2F               	movwf	drawChar@c,c
  6022  000EFA                     l634:
  6023                           
  6024                           ;ST7735_TFT.c: 456: for(i=0; i<5; i++ ) {
  6025  000EFA  0E00               	movlw	0
  6026  000EFC  6E38               	movwf	drawChar@i,c
  6027  000EFE                     l5703:
  6028  000EFE  0E04               	movlw	4
  6029  000F00  6438               	cpfsgt	drawChar@i,c
  6030  000F02  D001               	goto	l5707
  6031  000F04  D08D               	goto	l632
  6032  000F06                     l5707:
  6033                           
  6034                           ;ST7735_TFT.c: 457: unsigned char line;
  6035                           ;ST7735_TFT.c: 458: if(c < 'S')
  6036  000F06  0E53               	movlw	83
  6037  000F08  602F               	cpfslt	drawChar@c,c
  6038  000F0A  D015               	goto	l5711
  6039                           
  6040                           ;ST7735_TFT.c: 459: line = font[(c - 32)*5 + i];
  6041  000F0C  0EE0               	movlw	224
  6042  000F0E  242F               	addwf	drawChar@c,w,c
  6043  000F10  6E11               	movwf	___wmul@multiplier,c
  6044  000F12  6A12               	clrf	___wmul@multiplier+1,c
  6045  000F14  0EFF               	movlw	255
  6046  000F16  2212               	addwfc	___wmul@multiplier+1,f,c
  6047  000F18  0E00               	movlw	0
  6048  000F1A  6E14               	movwf	___wmul@multiplicand+1,c
  6049  000F1C  0E05               	movlw	5
  6050  000F1E  6E13               	movwf	___wmul@multiplicand,c
  6051  000F20  EC8B  F010         	call	___wmul	;wreg free
  6052  000F24  5038               	movf	drawChar@i,w,c
  6053  000F26  2611               	addwf	?___wmul,f,c
  6054  000F28  0E00               	movlw	0
  6055  000F2A  2212               	addwfc	?___wmul+1,f,c
  6056  000F2C  0E3F               	movlw	low _font
  6057  000F2E  2411               	addwf	?___wmul,w,c
  6058  000F30  6EF6               	movwf	tblptrl,c
  6059  000F32  0EFD               	movlw	high _font
  6060  000F34  D014               	goto	L5
  6061  000F36                     l5711:
  6062                           
  6063                           ;ST7735_TFT.c: 460: else
  6064                           ;ST7735_TFT.c: 461: line = font2[(c - 'S')*5 + i];
  6065  000F36  0EAD               	movlw	173
  6066  000F38  242F               	addwf	drawChar@c,w,c
  6067  000F3A  6E11               	movwf	___wmul@multiplier,c
  6068  000F3C  6A12               	clrf	___wmul@multiplier+1,c
  6069  000F3E  0EFF               	movlw	255
  6070  000F40  2212               	addwfc	___wmul@multiplier+1,f,c
  6071  000F42  0E00               	movlw	0
  6072  000F44  6E14               	movwf	___wmul@multiplicand+1,c
  6073  000F46  0E05               	movlw	5
  6074  000F48  6E13               	movwf	___wmul@multiplicand,c
  6075  000F4A  EC8B  F010         	call	___wmul	;wreg free
  6076  000F4E  5038               	movf	drawChar@i,w,c
  6077  000F50  2611               	addwf	?___wmul,f,c
  6078  000F52  0E00               	movlw	0
  6079  000F54  2212               	addwfc	?___wmul+1,f,c
  6080  000F56  0E3E               	movlw	low _font2
  6081  000F58  2411               	addwf	?___wmul,w,c
  6082  000F5A  6EF6               	movwf	tblptrl,c
  6083  000F5C  0EFE               	movlw	high _font2
  6084  000F5E                     L5:
  6085  000F5E  2012               	addwfc	?___wmul+1,w,c
  6086  000F60  6EF7               	movwf	tblptrh,c
  6087  000F62                     	if	0	;There are less than 3 active tblptr bytes
  6088  000F62                     	endif
  6089  000F62  0008               	tblrd		*
  6090  000F64  CFF5 F035          	movff	tablat,drawChar@line
  6091  000F68  D000               	goto	l5713
  6092  000F6A                     l5713:
  6093                           
  6094                           ;ST7735_TFT.c: 462: for(j=0; j<7; j++, line >>= 1) {
  6095  000F6A  0E00               	movlw	0
  6096  000F6C  6E37               	movwf	drawChar@j,c
  6097  000F6E                     l5715:
  6098  000F6E  0E06               	movlw	6
  6099  000F70  6437               	cpfsgt	drawChar@j,c
  6100  000F72  D001               	goto	l641
  6101  000F74  D053               	goto	l5739
  6102  000F76                     l641:
  6103                           
  6104                           ;ST7735_TFT.c: 463: if(line & 0x01) {
  6105  000F76  A035               	btfss	drawChar@line,0,c
  6106  000F78  D023               	goto	l5725
  6107                           
  6108                           ;ST7735_TFT.c: 464: if(size == 1) drawPixel(x+i, y+j, color);
  6109  000F7A  0434               	decf	drawChar@size,w,c
  6110  000F7C  A4D8               	btfss	status,2,c
  6111  000F7E  D00C               	goto	l5723
  6112  000F80  502E               	movf	drawChar@y,w,c
  6113  000F82  2437               	addwf	drawChar@j,w,c
  6114  000F84  6E18               	movwf	drawPixel@y,c
  6115  000F86  C030  F019         	movff	drawChar@color,drawPixel@color
  6116  000F8A  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  6117  000F8E  5036               	movf	drawChar@x,w,c
  6118  000F90  2438               	addwf	drawChar@i,w,c
  6119  000F92  EC46  F010         	call	_drawPixel
  6120  000F96  D03E               	goto	l5733
  6121  000F98                     l5723:
  6122                           
  6123                           ;ST7735_TFT.c: 465: else fillRect(x+(i*size), y+(j*size), size, size, color);
  6124  000F98  5037               	movf	drawChar@j,w,c
  6125  000F9A  0234               	mulwf	drawChar@size,c
  6126  000F9C  50F3               	movf	prodl,w,c
  6127  000F9E  242E               	addwf	drawChar@y,w,c
  6128  000FA0  6E23               	movwf	fillRect@y,c
  6129  000FA2  C034  F024         	movff	drawChar@size,fillRect@w
  6130  000FA6  C034  F025         	movff	drawChar@size,fillRect@h
  6131  000FAA  C030  F026         	movff	drawChar@color,fillRect@color
  6132  000FAE  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  6133  000FB2  5038               	movf	drawChar@i,w,c
  6134  000FB4  0234               	mulwf	drawChar@size,c
  6135  000FB6  50F3               	movf	prodl,w,c
  6136  000FB8  2436               	addwf	drawChar@x,w,c
  6137  000FBA  EC4E  F00F         	call	_fillRect
  6138                           
  6139                           ;ST7735_TFT.c: 466: }
  6140  000FBE  D02A               	goto	l5733
  6141  000FC0                     l5725:
  6142                           
  6143                           ;ST7735_TFT.c: 467: else if(bg != color) {
  6144  000FC0  5030               	movf	drawChar@color,w,c
  6145  000FC2  1832               	xorwf	drawChar@bg,w,c
  6146  000FC4  E104               	bnz	u4310
  6147  000FC6  5031               	movf	drawChar@color+1,w,c
  6148  000FC8  1833               	xorwf	drawChar@bg+1,w,c
  6149  000FCA  B4D8               	btfsc	status,2,c
  6150  000FCC  D023               	goto	l5733
  6151  000FCE                     u4310:
  6152                           
  6153                           ;ST7735_TFT.c: 468: if(size == 1) drawPixel(x+i, y+j, bg);
  6154  000FCE  0434               	decf	drawChar@size,w,c
  6155  000FD0  A4D8               	btfss	status,2,c
  6156  000FD2  D00C               	goto	l5731
  6157  000FD4  502E               	movf	drawChar@y,w,c
  6158  000FD6  2437               	addwf	drawChar@j,w,c
  6159  000FD8  6E18               	movwf	drawPixel@y,c
  6160  000FDA  C032  F019         	movff	drawChar@bg,drawPixel@color
  6161  000FDE  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  6162  000FE2  5036               	movf	drawChar@x,w,c
  6163  000FE4  2438               	addwf	drawChar@i,w,c
  6164  000FE6  EC46  F010         	call	_drawPixel
  6165  000FEA  D014               	goto	l5733
  6166  000FEC                     l5731:
  6167                           
  6168                           ;ST7735_TFT.c: 469: else fillRect(x+i*size, y+j*size, size, size, bg);
  6169  000FEC  5037               	movf	drawChar@j,w,c
  6170  000FEE  0234               	mulwf	drawChar@size,c
  6171  000FF0  50F3               	movf	prodl,w,c
  6172  000FF2  242E               	addwf	drawChar@y,w,c
  6173  000FF4  6E23               	movwf	fillRect@y,c
  6174  000FF6  C034  F024         	movff	drawChar@size,fillRect@w
  6175  000FFA  C034  F025         	movff	drawChar@size,fillRect@h
  6176  000FFE  C032  F026         	movff	drawChar@bg,fillRect@color
  6177  001002  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  6178  001006  5038               	movf	drawChar@i,w,c
  6179  001008  0234               	mulwf	drawChar@size,c
  6180  00100A  50F3               	movf	prodl,w,c
  6181  00100C  2436               	addwf	drawChar@x,w,c
  6182  00100E  EC4E  F00F         	call	_fillRect
  6183  001012  D000               	goto	l5733
  6184  001014                     l5733:
  6185  001014  2A37               	incf	drawChar@j,f,c
  6186  001016  90D8               	bcf	status,0,c
  6187  001018  3235               	rrcf	drawChar@line,f,c
  6188  00101A  D7A9               	goto	l5715
  6189  00101C                     l5739:
  6190  00101C  2A38               	incf	drawChar@i,f,c
  6191  00101E  D76F               	goto	l5703
  6192  001020                     l632:
  6193  001020  0012               	return		;funcret
  6194  001022                     __end_of_drawChar:
  6195                           	opt stack 0
  6196                           tblptru	equ	0xFF8
  6197                           tblptrh	equ	0xFF7
  6198                           tblptrl	equ	0xFF6
  6199                           tablat	equ	0xFF5
  6200                           prodh	equ	0xFF4
  6201                           prodl	equ	0xFF3
  6202                           intcon	equ	0xFF2
  6203                           intcon2	equ	0xFF1
  6204                           postinc0	equ	0xFEE
  6205                           wreg	equ	0xFE8
  6206                           postdec1	equ	0xFE5
  6207                           plusw1	equ	0xFE3
  6208                           fsr1l	equ	0xFE1
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           plusw2	equ	0xFDB
  6213                           fsr2h	equ	0xFDA
  6214                           fsr2l	equ	0xFD9
  6215                           status	equ	0xFD8
  6216                           
  6217 ;; *************** function _fillRect *****************
  6218 ;; Defined at:
  6219 ;;		line 438 in file "ST7735_TFT.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  x               1    wreg     unsigned char 
  6222 ;;  y               1   34[COMRAM] unsigned char 
  6223 ;;  w               1   35[COMRAM] unsigned char 
  6224 ;;  h               1   36[COMRAM] unsigned char 
  6225 ;;  color           2   37[COMRAM] unsigned int 
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  x               1   42[COMRAM] unsigned char 
  6228 ;;  i               2   43[COMRAM] int 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;		None               void
  6231 ;; Registers used:
  6232 ;;		wreg, status,2, status,0, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6238 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;Total ram usage:       11 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    7
  6245 ;; This function calls:
  6246 ;;		_drawFastVLine
  6247 ;; This function is called by:
  6248 ;;		_drawChar
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           	psect	text22
  6253  001E9C                     __ptext22:
  6254                           	opt stack 0
  6255  001E9C                     _fillRect:
  6256                           	opt stack 20
  6257                           
  6258                           ;incstack = 0
  6259                           ;fillRect@x stored from wreg
  6260  001E9C  6E2B               	movwf	fillRect@x,c
  6261                           
  6262                           ;ST7735_TFT.c: 440: signed int i;
  6263                           ;ST7735_TFT.c: 442: for (i = x; i < x + w; i++)
  6264  001E9E  C02B  F02C         	movff	fillRect@x,fillRect@i
  6265  001EA2  6A2D               	clrf	fillRect@i+1,c
  6266  001EA4  D00E               	goto	l5359
  6267  001EA6                     l5355:
  6268                           
  6269                           ;ST7735_TFT.c: 443: {
  6270                           ;ST7735_TFT.c: 444: drawFastVLine(i, y, h, color);
  6271  001EA6  C023  F018         	movff	fillRect@y,drawFastVLine@y
  6272  001EAA  C025  F019         	movff	fillRect@h,drawFastVLine@h
  6273  001EAE  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  6274  001EB2  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  6275  001EB6  502C               	movf	fillRect@i,w,c
  6276  001EB8  EC6E  F00C         	call	_drawFastVLine
  6277  001EBC  4A2C               	infsnz	fillRect@i,f,c
  6278  001EBE  2A2D               	incf	fillRect@i+1,f,c
  6279  001EC0  D000               	goto	l5359
  6280  001EC2                     l5359:
  6281  001EC2  5024               	movf	fillRect@w,w,c
  6282  001EC4  C02B  F028         	movff	fillRect@x,??_fillRect
  6283  001EC8  6A29               	clrf	(??_fillRect+1)& (0+255),c
  6284  001ECA  2628               	addwf	??_fillRect,f,c
  6285  001ECC  0E00               	movlw	0
  6286  001ECE  2229               	addwfc	??_fillRect+1,f,c
  6287  001ED0  5028               	movf	??_fillRect,w,c
  6288  001ED2  5C2C               	subwf	fillRect@i,w,c
  6289  001ED4  502D               	movf	fillRect@i+1,w,c
  6290  001ED6  0A80               	xorlw	128
  6291  001ED8  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  6292  001EDA  5029               	movf	??_fillRect+1,w,c
  6293  001EDC  0A80               	xorlw	128
  6294  001EDE  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  6295  001EE0  A0D8               	btfss	status,0,c
  6296  001EE2  D7E1               	goto	l5355
  6297  001EE4  0012               	return		;funcret
  6298  001EE6                     __end_of_fillRect:
  6299                           	opt stack 0
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           intcon2	equ	0xFF1
  6308                           postinc0	equ	0xFEE
  6309                           wreg	equ	0xFE8
  6310                           postdec1	equ	0xFE5
  6311                           plusw1	equ	0xFE3
  6312                           fsr1l	equ	0xFE1
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           plusw2	equ	0xFDB
  6317                           fsr2h	equ	0xFDA
  6318                           fsr2l	equ	0xFD9
  6319                           status	equ	0xFD8
  6320                           
  6321 ;; *************** function _drawFastVLine *****************
  6322 ;; Defined at:
  6323 ;;		line 417 in file "ST7735_TFT.c"
  6324 ;; Parameters:    Size  Location     Type
  6325 ;;  x               1    wreg     unsigned char 
  6326 ;;  y               1   23[COMRAM] unsigned char 
  6327 ;;  h               1   24[COMRAM] unsigned char 
  6328 ;;  color           2   25[COMRAM] unsigned int 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  x               1   33[COMRAM] unsigned char 
  6331 ;;  lo              1   32[COMRAM] unsigned char 
  6332 ;;  hi              1   31[COMRAM] unsigned char 
  6333 ;; Return value:  Size  Location     Type
  6334 ;;		None               void
  6335 ;; Registers used:
  6336 ;;		wreg, status,2, status,0, cstack
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6342 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;Total ram usage:       11 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    6
  6349 ;; This function calls:
  6350 ;;		_setAddrWindow
  6351 ;;		_spiwrite
  6352 ;; This function is called by:
  6353 ;;		_fillRect
  6354 ;;		_fillCircleHelper
  6355 ;;		_fillCircle
  6356 ;;		_drawRect
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           	psect	text23
  6361  0018DC                     __ptext23:
  6362                           	opt stack 0
  6363  0018DC                     _drawFastVLine:
  6364                           	opt stack 20
  6365                           
  6366                           ;incstack = 0
  6367                           ;drawFastVLine@x stored from wreg
  6368  0018DC  6E22               	movwf	drawFastVLine@x,c
  6369                           
  6370                           ;ST7735_TFT.c: 419: unsigned char hi, lo;
  6371                           ;ST7735_TFT.c: 420: if((x >= 128) || (y >= 160))
  6372  0018DE  0E80               	movlw	128
  6373  0018E0  6022               	cpfslt	drawFastVLine@x,c
  6374  0018E2  D03F               	goto	l616
  6375  0018E4  0E9F               	movlw	159
  6376  0018E6  6418               	cpfsgt	drawFastVLine@y,c
  6377  0018E8  D001               	goto	l5229
  6378                           
  6379                           ;ST7735_TFT.c: 421: return;
  6380  0018EA  D03B               	goto	l616
  6381  0018EC                     l5229:
  6382                           
  6383                           ;ST7735_TFT.c: 422: if((y + h - 1) >= 160)
  6384  0018EC  0EFF               	movlw	255
  6385  0018EE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6386  0018F0  0EFF               	movlw	255
  6387  0018F2  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  6388  0018F4  5019               	movf	drawFastVLine@h,w,c
  6389  0018F6  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  6390  0018FA  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  6391  0018FC  261E               	addwf	??_drawFastVLine+2,f,c
  6392  0018FE  0E00               	movlw	0
  6393  001900  221F               	addwfc	??_drawFastVLine+3,f,c
  6394  001902  501C               	movf	??_drawFastVLine,w,c
  6395  001904  261E               	addwf	??_drawFastVLine+2,f,c
  6396  001906  501D               	movf	??_drawFastVLine+1,w,c
  6397  001908  221F               	addwfc	??_drawFastVLine+3,f,c
  6398  00190A  BE1F               	btfsc	??_drawFastVLine+3,7,c
  6399  00190C  D00B               	goto	l5233
  6400  00190E  501F               	movf	??_drawFastVLine+3,w,c
  6401  001910  E104               	bnz	u3740
  6402  001912  0EA0               	movlw	160
  6403  001914  5C1E               	subwf	??_drawFastVLine+2,w,c
  6404  001916  A0D8               	btfss	status,0,c
  6405  001918  D005               	goto	l5233
  6406  00191A                     u3740:
  6407                           
  6408                           ;ST7735_TFT.c: 423: h = 160 - y;
  6409  00191A  5018               	movf	drawFastVLine@y,w,c
  6410  00191C  0800               	sublw	0
  6411  00191E  0FA0               	addlw	160
  6412  001920  6E19               	movwf	drawFastVLine@h,c
  6413  001922  D000               	goto	l5233
  6414  001924                     l5233:
  6415                           
  6416                           ;ST7735_TFT.c: 424: hi = color >> 8; lo = color;
  6417  001924  501B               	movf	drawFastVLine@color+1,w,c
  6418  001926  6E20               	movwf	drawFastVLine@hi,c
  6419  001928  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  6420                           
  6421                           ;ST7735_TFT.c: 425: setAddrWindow(x, y, x, y + h - 1);
  6422  00192C  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  6423  001930  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  6424  001934  5018               	movf	drawFastVLine@y,w,c
  6425  001936  2419               	addwf	drawFastVLine@h,w,c
  6426  001938  6E1C               	movwf	??_drawFastVLine& (0+255),c
  6427  00193A  041C               	decf	??_drawFastVLine,w,c
  6428  00193C  6E16               	movwf	setAddrWindow@y1,c
  6429  00193E  5022               	movf	drawFastVLine@x,w,c
  6430  001940  ECB5  F00E         	call	_setAddrWindow
  6431                           
  6432                           ;ST7735_TFT.c: 426: PORTBbits.RB5 = 1;
  6433  001944  8A81               	bsf	3969,5,c	;volatile
  6434                           
  6435                           ;ST7735_TFT.c: 427: PORTBbits.RB6 = 0;
  6436  001946  9C81               	bcf	3969,6,c	;volatile
  6437                           
  6438                           ;ST7735_TFT.c: 429: while (h--) {
  6439  001948  D007               	goto	l5245
  6440  00194A                     l5243:
  6441                           
  6442                           ;ST7735_TFT.c: 430: spiwrite(hi);
  6443  00194A  5020               	movf	drawFastVLine@hi,w,c
  6444  00194C  EC53  F011         	call	_spiwrite
  6445                           
  6446                           ;ST7735_TFT.c: 431: spiwrite(lo);
  6447  001950  5021               	movf	drawFastVLine@lo,w,c
  6448  001952  EC53  F011         	call	_spiwrite
  6449  001956  D000               	goto	l5245
  6450  001958                     l5245:
  6451  001958  0619               	decf	drawFastVLine@h,f,c
  6452  00195A  2819               	incf	drawFastVLine@h,w,c
  6453  00195C  A4D8               	btfss	status,2,c
  6454  00195E  D7F5               	goto	l5243
  6455                           
  6456                           ;ST7735_TFT.c: 432: }
  6457                           ;ST7735_TFT.c: 433: PORTBbits.RB6 = 1;
  6458  001960  8C81               	bsf	3969,6,c	;volatile
  6459  001962                     l616:
  6460  001962  0012               	return		;funcret
  6461  001964                     __end_of_drawFastVLine:
  6462                           	opt stack 0
  6463                           tblptru	equ	0xFF8
  6464                           tblptrh	equ	0xFF7
  6465                           tblptrl	equ	0xFF6
  6466                           tablat	equ	0xFF5
  6467                           prodh	equ	0xFF4
  6468                           prodl	equ	0xFF3
  6469                           intcon	equ	0xFF2
  6470                           intcon2	equ	0xFF1
  6471                           postinc0	equ	0xFEE
  6472                           wreg	equ	0xFE8
  6473                           postdec1	equ	0xFE5
  6474                           plusw1	equ	0xFE3
  6475                           fsr1l	equ	0xFE1
  6476                           indf2	equ	0xFDF
  6477                           postinc2	equ	0xFDE
  6478                           postdec2	equ	0xFDD
  6479                           plusw2	equ	0xFDB
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _drawCircle *****************
  6485 ;; Defined at:
  6486 ;;		line 529 in file "ST7735_TFT.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  x0              2   27[COMRAM] int 
  6489 ;;  y0              2   29[COMRAM] int 
  6490 ;;  r               2   31[COMRAM] int 
  6491 ;;  color           2   33[COMRAM] unsigned int 
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;  y               2   45[COMRAM] int 
  6494 ;;  x               2   43[COMRAM] int 
  6495 ;;  f               2   41[COMRAM] int 
  6496 ;;  ddF_y           2   39[COMRAM] int 
  6497 ;;  ddF_x           2   37[COMRAM] int 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;		None               void
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6507 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;Total ram usage:       20 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    7
  6514 ;; This function calls:
  6515 ;;		_drawPixel
  6516 ;; This function is called by:
  6517 ;;		_Initialize_Screen
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text24
  6522  000BAA                     __ptext24:
  6523                           	opt stack 0
  6524  000BAA                     _drawCircle:
  6525                           	opt stack 22
  6526                           
  6527                           ;ST7735_TFT.c: 531: signed int f, ddF_x, ddF_y, x, y;
  6528                           ;ST7735_TFT.c: 532: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6529                           
  6530                           ;incstack = 0
  6531  000BAA  C020  F024         	movff	drawCircle@r,??_drawCircle
  6532  000BAE  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6533  000BB2  1E24               	comf	??_drawCircle,f,c
  6534  000BB4  1E25               	comf	??_drawCircle+1,f,c
  6535  000BB6  4A24               	infsnz	??_drawCircle,f,c
  6536  000BB8  2A25               	incf	??_drawCircle+1,f,c
  6537  000BBA  0E01               	movlw	1
  6538  000BBC  2424               	addwf	??_drawCircle,w,c
  6539  000BBE  6E2A               	movwf	drawCircle@f,c
  6540  000BC0  0E00               	movlw	0
  6541  000BC2  2025               	addwfc	??_drawCircle+1,w,c
  6542  000BC4  6E2B               	movwf	drawCircle@f+1,c
  6543  000BC6  0E00               	movlw	0
  6544  000BC8  6E27               	movwf	drawCircle@ddF_x+1,c
  6545  000BCA  0E01               	movlw	1
  6546  000BCC  6E26               	movwf	drawCircle@ddF_x,c
  6547  000BCE  C020  F024         	movff	drawCircle@r,??_drawCircle
  6548  000BD2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  6549  000BD6  90D8               	bcf	status,0,c
  6550  000BD8  3624               	rlcf	??_drawCircle,f,c
  6551  000BDA  3625               	rlcf	??_drawCircle+1,f,c
  6552  000BDC  1E24               	comf	??_drawCircle,f,c
  6553  000BDE  1E25               	comf	??_drawCircle+1,f,c
  6554  000BE0  4A24               	infsnz	??_drawCircle,f,c
  6555  000BE2  2A25               	incf	??_drawCircle+1,f,c
  6556  000BE4  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  6557  000BE8  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6558  000BEC  0E00               	movlw	0
  6559  000BEE  6E2D               	movwf	drawCircle@x+1,c
  6560  000BF0  0E00               	movlw	0
  6561  000BF2  6E2C               	movwf	drawCircle@x,c
  6562  000BF4  C020  F02E         	movff	drawCircle@r,drawCircle@y
  6563  000BF8  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  6564                           
  6565                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 + r, color);
  6566  000BFC  501E               	movf	drawCircle@y0,w,c
  6567  000BFE  2420               	addwf	drawCircle@r,w,c
  6568  000C00  6E18               	movwf	drawPixel@y,c
  6569  000C02  C022  F019         	movff	drawCircle@color,drawPixel@color
  6570  000C06  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6571  000C0A  501C               	movf	drawCircle@x0,w,c
  6572  000C0C  EC46  F010         	call	_drawPixel
  6573                           
  6574                           ;ST7735_TFT.c: 534: drawPixel(x0 , y0 - r, color);
  6575  000C10  5020               	movf	drawCircle@r,w,c
  6576  000C12  0800               	sublw	0
  6577  000C14  241E               	addwf	drawCircle@y0,w,c
  6578  000C16  6E18               	movwf	drawPixel@y,c
  6579  000C18  C022  F019         	movff	drawCircle@color,drawPixel@color
  6580  000C1C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6581  000C20  501C               	movf	drawCircle@x0,w,c
  6582  000C22  EC46  F010         	call	_drawPixel
  6583                           
  6584                           ;ST7735_TFT.c: 535: drawPixel(x0+r, y0 , color);
  6585  000C26  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6586  000C2A  C022  F019         	movff	drawCircle@color,drawPixel@color
  6587  000C2E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6588  000C32  501C               	movf	drawCircle@x0,w,c
  6589  000C34  2420               	addwf	drawCircle@r,w,c
  6590  000C36  EC46  F010         	call	_drawPixel
  6591                           
  6592                           ;ST7735_TFT.c: 536: drawPixel(x0-r, y0 , color);
  6593  000C3A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  6594  000C3E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6595  000C42  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6596  000C46  5020               	movf	drawCircle@r,w,c
  6597  000C48  0800               	sublw	0
  6598  000C4A  241C               	addwf	drawCircle@x0,w,c
  6599  000C4C  EC46  F010         	call	_drawPixel
  6600                           
  6601                           ;ST7735_TFT.c: 537: while (x < y) {
  6602  000C50  D078               	goto	l6003
  6603  000C52                     l5975:
  6604                           
  6605                           ;ST7735_TFT.c: 538: if (f >= 0) {
  6606  000C52  BE2B               	btfsc	drawCircle@f+1,7,c
  6607  000C54  D00B               	goto	l680
  6608                           
  6609                           ;ST7735_TFT.c: 539: y--;
  6610  000C56  062E               	decf	drawCircle@y,f,c
  6611  000C58  A0D8               	btfss	status,0,c
  6612  000C5A  062F               	decf	drawCircle@y+1,f,c
  6613                           
  6614                           ;ST7735_TFT.c: 540: ddF_y += 2;
  6615  000C5C  0E02               	movlw	2
  6616  000C5E  2628               	addwf	drawCircle@ddF_y,f,c
  6617  000C60  0E00               	movlw	0
  6618  000C62  2229               	addwfc	drawCircle@ddF_y+1,f,c
  6619                           
  6620                           ;ST7735_TFT.c: 541: f += ddF_y;
  6621  000C64  5028               	movf	drawCircle@ddF_y,w,c
  6622  000C66  262A               	addwf	drawCircle@f,f,c
  6623  000C68  5029               	movf	drawCircle@ddF_y+1,w,c
  6624  000C6A  222B               	addwfc	drawCircle@f+1,f,c
  6625  000C6C                     l680:
  6626                           
  6627                           ;ST7735_TFT.c: 542: }
  6628                           ;ST7735_TFT.c: 543: x++;
  6629  000C6C  4A2C               	infsnz	drawCircle@x,f,c
  6630  000C6E  2A2D               	incf	drawCircle@x+1,f,c
  6631                           
  6632                           ;ST7735_TFT.c: 544: ddF_x += 2;
  6633  000C70  0E02               	movlw	2
  6634  000C72  2626               	addwf	drawCircle@ddF_x,f,c
  6635  000C74  0E00               	movlw	0
  6636  000C76  2227               	addwfc	drawCircle@ddF_x+1,f,c
  6637                           
  6638                           ;ST7735_TFT.c: 545: f += ddF_x;
  6639  000C78  5026               	movf	drawCircle@ddF_x,w,c
  6640  000C7A  262A               	addwf	drawCircle@f,f,c
  6641  000C7C  5027               	movf	drawCircle@ddF_x+1,w,c
  6642  000C7E  222B               	addwfc	drawCircle@f+1,f,c
  6643                           
  6644                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 + y, color);
  6645  000C80  501E               	movf	drawCircle@y0,w,c
  6646  000C82  242E               	addwf	drawCircle@y,w,c
  6647  000C84  6E18               	movwf	drawPixel@y,c
  6648  000C86  C022  F019         	movff	drawCircle@color,drawPixel@color
  6649  000C8A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6650  000C8E  501C               	movf	drawCircle@x0,w,c
  6651  000C90  242C               	addwf	drawCircle@x,w,c
  6652  000C92  EC46  F010         	call	_drawPixel
  6653                           
  6654                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 + y, color);
  6655  000C96  501E               	movf	drawCircle@y0,w,c
  6656  000C98  242E               	addwf	drawCircle@y,w,c
  6657  000C9A  6E18               	movwf	drawPixel@y,c
  6658  000C9C  C022  F019         	movff	drawCircle@color,drawPixel@color
  6659  000CA0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6660  000CA4  502C               	movf	drawCircle@x,w,c
  6661  000CA6  0800               	sublw	0
  6662  000CA8  241C               	addwf	drawCircle@x0,w,c
  6663  000CAA  EC46  F010         	call	_drawPixel
  6664                           
  6665                           ;ST7735_TFT.c: 548: drawPixel(x0 + x, y0 - y, color);
  6666  000CAE  502E               	movf	drawCircle@y,w,c
  6667  000CB0  0800               	sublw	0
  6668  000CB2  241E               	addwf	drawCircle@y0,w,c
  6669  000CB4  6E18               	movwf	drawPixel@y,c
  6670  000CB6  C022  F019         	movff	drawCircle@color,drawPixel@color
  6671  000CBA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6672  000CBE  501C               	movf	drawCircle@x0,w,c
  6673  000CC0  242C               	addwf	drawCircle@x,w,c
  6674  000CC2  EC46  F010         	call	_drawPixel
  6675                           
  6676                           ;ST7735_TFT.c: 549: drawPixel(x0 - x, y0 - y, color);
  6677  000CC6  502E               	movf	drawCircle@y,w,c
  6678  000CC8  0800               	sublw	0
  6679  000CCA  241E               	addwf	drawCircle@y0,w,c
  6680  000CCC  6E18               	movwf	drawPixel@y,c
  6681  000CCE  C022  F019         	movff	drawCircle@color,drawPixel@color
  6682  000CD2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6683  000CD6  502C               	movf	drawCircle@x,w,c
  6684  000CD8  0800               	sublw	0
  6685  000CDA  241C               	addwf	drawCircle@x0,w,c
  6686  000CDC  EC46  F010         	call	_drawPixel
  6687                           
  6688                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 + x, color);
  6689  000CE0  501E               	movf	drawCircle@y0,w,c
  6690  000CE2  242C               	addwf	drawCircle@x,w,c
  6691  000CE4  6E18               	movwf	drawPixel@y,c
  6692  000CE6  C022  F019         	movff	drawCircle@color,drawPixel@color
  6693  000CEA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6694  000CEE  501C               	movf	drawCircle@x0,w,c
  6695  000CF0  242E               	addwf	drawCircle@y,w,c
  6696  000CF2  EC46  F010         	call	_drawPixel
  6697                           
  6698                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 + x, color);
  6699  000CF6  501E               	movf	drawCircle@y0,w,c
  6700  000CF8  242C               	addwf	drawCircle@x,w,c
  6701  000CFA  6E18               	movwf	drawPixel@y,c
  6702  000CFC  C022  F019         	movff	drawCircle@color,drawPixel@color
  6703  000D00  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6704  000D04  502E               	movf	drawCircle@y,w,c
  6705  000D06  0800               	sublw	0
  6706  000D08  241C               	addwf	drawCircle@x0,w,c
  6707  000D0A  EC46  F010         	call	_drawPixel
  6708                           
  6709                           ;ST7735_TFT.c: 552: drawPixel(x0 + y, y0 - x, color);
  6710  000D0E  502C               	movf	drawCircle@x,w,c
  6711  000D10  0800               	sublw	0
  6712  000D12  241E               	addwf	drawCircle@y0,w,c
  6713  000D14  6E18               	movwf	drawPixel@y,c
  6714  000D16  C022  F019         	movff	drawCircle@color,drawPixel@color
  6715  000D1A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6716  000D1E  501C               	movf	drawCircle@x0,w,c
  6717  000D20  242E               	addwf	drawCircle@y,w,c
  6718  000D22  EC46  F010         	call	_drawPixel
  6719                           
  6720                           ;ST7735_TFT.c: 553: drawPixel(x0 - y, y0 - x, color);
  6721  000D26  502C               	movf	drawCircle@x,w,c
  6722  000D28  0800               	sublw	0
  6723  000D2A  241E               	addwf	drawCircle@y0,w,c
  6724  000D2C  6E18               	movwf	drawPixel@y,c
  6725  000D2E  C022  F019         	movff	drawCircle@color,drawPixel@color
  6726  000D32  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  6727  000D36  502E               	movf	drawCircle@y,w,c
  6728  000D38  0800               	sublw	0
  6729  000D3A  241C               	addwf	drawCircle@x0,w,c
  6730  000D3C  EC46  F010         	call	_drawPixel
  6731  000D40  D000               	goto	l6003
  6732  000D42                     l6003:
  6733  000D42  502E               	movf	drawCircle@y,w,c
  6734  000D44  5C2C               	subwf	drawCircle@x,w,c
  6735  000D46  502D               	movf	drawCircle@x+1,w,c
  6736  000D48  0A80               	xorlw	128
  6737  000D4A  6E24               	movwf	??_drawCircle& (0+255),c
  6738  000D4C  502F               	movf	drawCircle@y+1,w,c
  6739  000D4E  0A80               	xorlw	128
  6740  000D50  5824               	subwfb	??_drawCircle& (0+255),w,c
  6741  000D52  A0D8               	btfss	status,0,c
  6742  000D54  D77E               	goto	l5975
  6743  000D56  0012               	return		;funcret
  6744  000D58                     __end_of_drawCircle:
  6745                           	opt stack 0
  6746                           tblptru	equ	0xFF8
  6747                           tblptrh	equ	0xFF7
  6748                           tblptrl	equ	0xFF6
  6749                           tablat	equ	0xFF5
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           intcon	equ	0xFF2
  6753                           intcon2	equ	0xFF1
  6754                           postinc0	equ	0xFEE
  6755                           wreg	equ	0xFE8
  6756                           postdec1	equ	0xFE5
  6757                           plusw1	equ	0xFE3
  6758                           fsr1l	equ	0xFE1
  6759                           indf2	equ	0xFDF
  6760                           postinc2	equ	0xFDE
  6761                           postdec2	equ	0xFDD
  6762                           plusw2	equ	0xFDB
  6763                           fsr2h	equ	0xFDA
  6764                           fsr2l	equ	0xFD9
  6765                           status	equ	0xFD8
  6766                           
  6767 ;; *************** function _drawPixel *****************
  6768 ;; Defined at:
  6769 ;;		line 408 in file "ST7735_TFT.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  x               1    wreg     unsigned char 
  6772 ;;  y               1   23[COMRAM] unsigned char 
  6773 ;;  color           2   24[COMRAM] unsigned int 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  x               1   26[COMRAM] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;		None               void
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6785 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;Total ram usage:        4 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		_setAddrWindow
  6794 ;;		_write_data
  6795 ;; This function is called by:
  6796 ;;		_drawChar
  6797 ;;		_drawCircle
  6798 ;;		_drawCircleHelper
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text25
  6803  00208C                     __ptext25:
  6804                           	opt stack 0
  6805  00208C                     _drawPixel:
  6806                           	opt stack 21
  6807                           
  6808                           ;incstack = 0
  6809                           ;drawPixel@x stored from wreg
  6810  00208C  6E1B               	movwf	drawPixel@x,c
  6811                           
  6812                           ;ST7735_TFT.c: 410: if((x >= 128) || (y >= 160))
  6813  00208E  0E80               	movlw	128
  6814  002090  601B               	cpfslt	drawPixel@x,c
  6815  002092  D013               	goto	l610
  6816  002094  0E9F               	movlw	159
  6817  002096  6418               	cpfsgt	drawPixel@y,c
  6818  002098  D001               	goto	l5347
  6819                           
  6820                           ;ST7735_TFT.c: 411: return;
  6821  00209A  D00F               	goto	l610
  6822  00209C                     l5347:
  6823                           
  6824                           ;ST7735_TFT.c: 412: setAddrWindow(x,y,x+1,y+1);
  6825  00209C  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  6826  0020A0  281B               	incf	drawPixel@x,w,c
  6827  0020A2  6E15               	movwf	setAddrWindow@x1,c
  6828  0020A4  2818               	incf	drawPixel@y,w,c
  6829  0020A6  6E16               	movwf	setAddrWindow@y1,c
  6830  0020A8  501B               	movf	drawPixel@x,w,c
  6831  0020AA  ECB5  F00E         	call	_setAddrWindow
  6832                           
  6833                           ;ST7735_TFT.c: 413: write_data(color >> 8);
  6834  0020AE  501A               	movf	drawPixel@color+1,w,c
  6835  0020B0  EC94  F011         	call	_write_data
  6836                           
  6837                           ;ST7735_TFT.c: 414: write_data(color & 0xFF);
  6838  0020B4  5019               	movf	drawPixel@color,w,c
  6839  0020B6  EC94  F011         	call	_write_data
  6840  0020BA                     l610:
  6841  0020BA  0012               	return		;funcret
  6842  0020BC                     __end_of_drawPixel:
  6843                           	opt stack 0
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon2	equ	0xFF1
  6852                           postinc0	equ	0xFEE
  6853                           wreg	equ	0xFE8
  6854                           postdec1	equ	0xFE5
  6855                           plusw1	equ	0xFE3
  6856                           fsr1l	equ	0xFE1
  6857                           indf2	equ	0xFDF
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           plusw2	equ	0xFDB
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _setAddrWindow *****************
  6866 ;; Defined at:
  6867 ;;		line 393 in file "ST7735_TFT.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  x0              1    wreg     unsigned char 
  6870 ;;  y0              1   19[COMRAM] unsigned char 
  6871 ;;  x1              1   20[COMRAM] unsigned char 
  6872 ;;  y1              1   21[COMRAM] unsigned char 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  x0              1   22[COMRAM] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        4 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    5
  6891 ;; This function calls:
  6892 ;;		_write_command
  6893 ;;		_write_data
  6894 ;; This function is called by:
  6895 ;;		_drawPixel
  6896 ;;		_drawFastVLine
  6897 ;;		_fillRectangle
  6898 ;;		_drawFastHLine
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text26
  6903  001D6A                     __ptext26:
  6904                           	opt stack 0
  6905  001D6A                     _setAddrWindow:
  6906                           	opt stack 20
  6907                           
  6908                           ;incstack = 0
  6909                           ;setAddrWindow@x0 stored from wreg
  6910  001D6A  6E17               	movwf	setAddrWindow@x0,c
  6911                           
  6912                           ;ST7735_TFT.c: 395: write_command(0x2A);
  6913  001D6C  0E2A               	movlw	42
  6914  001D6E  EC9C  F011         	call	_write_command
  6915                           
  6916                           ;ST7735_TFT.c: 396: write_data(0);
  6917  001D72  0E00               	movlw	0
  6918  001D74  EC94  F011         	call	_write_data
  6919                           
  6920                           ;ST7735_TFT.c: 397: write_data(x0 + colstart);
  6921  001D78  5017               	movf	setAddrWindow@x0,w,c
  6922  001D7A  2459               	addwf	_colstart,w,c
  6923  001D7C  EC94  F011         	call	_write_data
  6924                           
  6925                           ;ST7735_TFT.c: 398: write_data(0);
  6926  001D80  0E00               	movlw	0
  6927  001D82  EC94  F011         	call	_write_data
  6928                           
  6929                           ;ST7735_TFT.c: 399: write_data(x1 + colstart);
  6930  001D86  5015               	movf	setAddrWindow@x1,w,c
  6931  001D88  2459               	addwf	_colstart,w,c
  6932  001D8A  EC94  F011         	call	_write_data
  6933                           
  6934                           ;ST7735_TFT.c: 400: write_command(0x2B);
  6935  001D8E  0E2B               	movlw	43
  6936  001D90  EC9C  F011         	call	_write_command
  6937                           
  6938                           ;ST7735_TFT.c: 401: write_data(0);
  6939  001D94  0E00               	movlw	0
  6940  001D96  EC94  F011         	call	_write_data
  6941                           
  6942                           ;ST7735_TFT.c: 402: write_data(y0 + rowstart);
  6943  001D9A  5014               	movf	setAddrWindow@y0,w,c
  6944  001D9C  2461               	addwf	_rowstart,w,c
  6945  001D9E  EC94  F011         	call	_write_data
  6946                           
  6947                           ;ST7735_TFT.c: 403: write_data(0);
  6948  001DA2  0E00               	movlw	0
  6949  001DA4  EC94  F011         	call	_write_data
  6950                           
  6951                           ;ST7735_TFT.c: 404: write_data(y1 + rowstart);
  6952  001DA8  5016               	movf	setAddrWindow@y1,w,c
  6953  001DAA  2461               	addwf	_rowstart,w,c
  6954  001DAC  EC94  F011         	call	_write_data
  6955                           
  6956                           ;ST7735_TFT.c: 405: write_command(0x2C);
  6957  001DB0  0E2C               	movlw	44
  6958  001DB2  EC9C  F011         	call	_write_command
  6959  001DB6  0012               	return		;funcret
  6960  001DB8                     __end_of_setAddrWindow:
  6961                           	opt stack 0
  6962                           tblptru	equ	0xFF8
  6963                           tblptrh	equ	0xFF7
  6964                           tblptrl	equ	0xFF6
  6965                           tablat	equ	0xFF5
  6966                           prodh	equ	0xFF4
  6967                           prodl	equ	0xFF3
  6968                           intcon	equ	0xFF2
  6969                           intcon2	equ	0xFF1
  6970                           postinc0	equ	0xFEE
  6971                           wreg	equ	0xFE8
  6972                           postdec1	equ	0xFE5
  6973                           plusw1	equ	0xFE3
  6974                           fsr1l	equ	0xFE1
  6975                           indf2	equ	0xFDF
  6976                           postinc2	equ	0xFDE
  6977                           postdec2	equ	0xFDD
  6978                           plusw2	equ	0xFDB
  6979                           fsr2h	equ	0xFDA
  6980                           fsr2l	equ	0xFD9
  6981                           status	equ	0xFD8
  6982                           
  6983 ;; *************** function _TFT_GreenTab_Initialize *****************
  6984 ;; Defined at:
  6985 ;;		line 645 in file "ST7735_TFT.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;		None
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;		None
  6990 ;; Return value:  Size  Location     Type
  6991 ;;		None               void
  6992 ;; Registers used:
  6993 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;Total ram usage:        0 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    6
  7006 ;; This function calls:
  7007 ;;		_Rcmd1
  7008 ;;		_Rcmd2red
  7009 ;;		_Rcmd3
  7010 ;;		_write_command
  7011 ;;		_write_data
  7012 ;; This function is called by:
  7013 ;;		_Initialize_Screen
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text27
  7018  0020EC                     __ptext27:
  7019                           	opt stack 0
  7020  0020EC                     _TFT_GreenTab_Initialize:
  7021                           	opt stack 23
  7022                           
  7023                           ;ST7735_TFT.c: 647: PORTBbits.RB6 = 1;
  7024                           
  7025                           ;incstack = 0
  7026  0020EC  8C81               	bsf	3969,6,c	;volatile
  7027                           
  7028                           ;ST7735_TFT.c: 648: PORTBbits.RB5 = 0;
  7029  0020EE  9A81               	bcf	3969,5,c	;volatile
  7030                           
  7031                           ;ST7735_TFT.c: 650: SSPSTAT=0x80;
  7032  0020F0  0E80               	movlw	128
  7033  0020F2  6EC7               	movwf	4039,c	;volatile
  7034                           
  7035                           ;ST7735_TFT.c: 651: SSPCON1=0x30;
  7036  0020F4  0E30               	movlw	48
  7037  0020F6  6EC6               	movwf	4038,c	;volatile
  7038                           
  7039                           ;ST7735_TFT.c: 654: Rcmd1();
  7040  0020F8  EC11  F008         	call	_Rcmd1	;wreg free
  7041                           
  7042                           ;ST7735_TFT.c: 655: Rcmd2red();
  7043  0020FC  ECD5  F00F         	call	_Rcmd2red	;wreg free
  7044                           
  7045                           ;ST7735_TFT.c: 656: Rcmd3();
  7046  002100  EC9A  F009         	call	_Rcmd3	;wreg free
  7047                           
  7048                           ;ST7735_TFT.c: 657: write_command(0x36);
  7049  002104  0E36               	movlw	54
  7050  002106  EC9C  F011         	call	_write_command
  7051                           
  7052                           ;ST7735_TFT.c: 658: write_data(0xC0);
  7053  00210A  0EC0               	movlw	192
  7054  00210C  EC94  F011         	call	_write_data
  7055                           
  7056                           ;ST7735_TFT.c: 659: _tft_type = 1;
  7057  002110  0E01               	movlw	1
  7058  002112  6E53               	movwf	__tft_type,c
  7059  002114  0012               	return		;funcret
  7060  002116                     __end_of_TFT_GreenTab_Initialize:
  7061                           	opt stack 0
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           intcon	equ	0xFF2
  7069                           intcon2	equ	0xFF1
  7070                           postinc0	equ	0xFEE
  7071                           wreg	equ	0xFE8
  7072                           postdec1	equ	0xFE5
  7073                           plusw1	equ	0xFE3
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           plusw2	equ	0xFDB
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function _Rcmd3 *****************
  7084 ;; Defined at:
  7085 ;;		line 339 in file "ST7735_TFT.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;		None
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;		None               void
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;Total ram usage:        0 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    5
  7106 ;; This function calls:
  7107 ;;		_delay_ms
  7108 ;;		_write_command
  7109 ;;		_write_data
  7110 ;; This function is called by:
  7111 ;;		_TFT_GreenTab_Initialize
  7112 ;;		_TFT_BlackTab_Initialize
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text28
  7117  001334                     __ptext28:
  7118                           	opt stack 0
  7119  001334                     _Rcmd3:
  7120                           	opt stack 23
  7121                           
  7122                           ;ST7735_TFT.c: 341: write_command(0xE0);
  7123                           
  7124                           ;incstack = 0
  7125  001334  0EE0               	movlw	224
  7126  001336  EC9C  F011         	call	_write_command
  7127                           
  7128                           ;ST7735_TFT.c: 342: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7129  00133A  0E02               	movlw	2
  7130  00133C  EC94  F011         	call	_write_data
  7131  001340  0E1C               	movlw	28
  7132  001342  EC94  F011         	call	_write_data
  7133  001346  0E07               	movlw	7
  7134  001348  EC94  F011         	call	_write_data
  7135  00134C  0E12               	movlw	18
  7136  00134E  EC94  F011         	call	_write_data
  7137                           
  7138                           ;ST7735_TFT.c: 343: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7139  001352  0E37               	movlw	55
  7140  001354  EC94  F011         	call	_write_data
  7141  001358  0E32               	movlw	50
  7142  00135A  EC94  F011         	call	_write_data
  7143  00135E  0E29               	movlw	41
  7144  001360  EC94  F011         	call	_write_data
  7145  001364  0E2D               	movlw	45
  7146  001366  EC94  F011         	call	_write_data
  7147                           
  7148                           ;ST7735_TFT.c: 344: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7149  00136A  0E29               	movlw	41
  7150  00136C  EC94  F011         	call	_write_data
  7151  001370  0E25               	movlw	37
  7152  001372  EC94  F011         	call	_write_data
  7153  001376  0E2B               	movlw	43
  7154  001378  EC94  F011         	call	_write_data
  7155  00137C  0E39               	movlw	57
  7156  00137E  EC94  F011         	call	_write_data
  7157                           
  7158                           ;ST7735_TFT.c: 345: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7159  001382  0E00               	movlw	0
  7160  001384  EC94  F011         	call	_write_data
  7161  001388  0E01               	movlw	1
  7162  00138A  EC94  F011         	call	_write_data
  7163  00138E  0E03               	movlw	3
  7164  001390  EC94  F011         	call	_write_data
  7165  001394  0E10               	movlw	16
  7166  001396  EC94  F011         	call	_write_data
  7167                           
  7168                           ;ST7735_TFT.c: 346: write_command(0xE1);
  7169  00139A  0EE1               	movlw	225
  7170  00139C  EC9C  F011         	call	_write_command
  7171                           
  7172                           ;ST7735_TFT.c: 347: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7173  0013A0  0E03               	movlw	3
  7174  0013A2  EC94  F011         	call	_write_data
  7175  0013A6  0E1D               	movlw	29
  7176  0013A8  EC94  F011         	call	_write_data
  7177  0013AC  0E07               	movlw	7
  7178  0013AE  EC94  F011         	call	_write_data
  7179  0013B2  0E06               	movlw	6
  7180  0013B4  EC94  F011         	call	_write_data
  7181                           
  7182                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7183  0013B8  0E2E               	movlw	46
  7184  0013BA  EC94  F011         	call	_write_data
  7185  0013BE  0E2C               	movlw	44
  7186  0013C0  EC94  F011         	call	_write_data
  7187  0013C4  0E29               	movlw	41
  7188  0013C6  EC94  F011         	call	_write_data
  7189  0013CA  0E2D               	movlw	45
  7190  0013CC  EC94  F011         	call	_write_data
  7191                           
  7192                           ;ST7735_TFT.c: 349: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7193  0013D0  0E2E               	movlw	46
  7194  0013D2  EC94  F011         	call	_write_data
  7195  0013D6  0E2E               	movlw	46
  7196  0013D8  EC94  F011         	call	_write_data
  7197  0013DC  0E37               	movlw	55
  7198  0013DE  EC94  F011         	call	_write_data
  7199  0013E2  0E3F               	movlw	63
  7200  0013E4  EC94  F011         	call	_write_data
  7201                           
  7202                           ;ST7735_TFT.c: 350: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7203  0013E8  0E00               	movlw	0
  7204  0013EA  EC94  F011         	call	_write_data
  7205  0013EE  0E00               	movlw	0
  7206  0013F0  EC94  F011         	call	_write_data
  7207  0013F4  0E02               	movlw	2
  7208  0013F6  EC94  F011         	call	_write_data
  7209  0013FA  0E10               	movlw	16
  7210  0013FC  EC94  F011         	call	_write_data
  7211                           
  7212                           ;ST7735_TFT.c: 351: write_command(0x13);
  7213  001400  0E13               	movlw	19
  7214  001402  EC9C  F011         	call	_write_command
  7215                           
  7216                           ;ST7735_TFT.c: 352: delay_ms(10);
  7217  001406  0E00               	movlw	0
  7218  001408  6E18               	movwf	delay_ms@ms+1,c
  7219  00140A  0E0A               	movlw	10
  7220  00140C  6E17               	movwf	delay_ms@ms,c
  7221  00140E  EC8C  F00E         	call	_delay_ms	;wreg free
  7222                           
  7223                           ;ST7735_TFT.c: 353: write_command(0x29);
  7224  001412  0E29               	movlw	41
  7225  001414  EC9C  F011         	call	_write_command
  7226                           
  7227                           ;ST7735_TFT.c: 354: delay_ms(100);
  7228  001418  0E00               	movlw	0
  7229  00141A  6E18               	movwf	delay_ms@ms+1,c
  7230  00141C  0E64               	movlw	100
  7231  00141E  6E17               	movwf	delay_ms@ms,c
  7232  001420  EC8C  F00E         	call	_delay_ms	;wreg free
  7233  001424  0012               	return		;funcret
  7234  001426                     __end_of_Rcmd3:
  7235                           	opt stack 0
  7236                           tblptru	equ	0xFF8
  7237                           tblptrh	equ	0xFF7
  7238                           tblptrl	equ	0xFF6
  7239                           tablat	equ	0xFF5
  7240                           prodh	equ	0xFF4
  7241                           prodl	equ	0xFF3
  7242                           intcon	equ	0xFF2
  7243                           intcon2	equ	0xFF1
  7244                           postinc0	equ	0xFEE
  7245                           wreg	equ	0xFE8
  7246                           postdec1	equ	0xFE5
  7247                           plusw1	equ	0xFE3
  7248                           fsr1l	equ	0xFE1
  7249                           indf2	equ	0xFDF
  7250                           postinc2	equ	0xFDE
  7251                           postdec2	equ	0xFDD
  7252                           plusw2	equ	0xFDB
  7253                           fsr2h	equ	0xFDA
  7254                           fsr2l	equ	0xFD9
  7255                           status	equ	0xFD8
  7256                           
  7257 ;; *************** function _Rcmd2red *****************
  7258 ;; Defined at:
  7259 ;;		line 329 in file "ST7735_TFT.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;		None
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;		None
  7264 ;; Return value:  Size  Location     Type
  7265 ;;		None               void
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, cstack
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;Total ram usage:        0 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    5
  7280 ;; This function calls:
  7281 ;;		_write_command
  7282 ;;		_write_data
  7283 ;; This function is called by:
  7284 ;;		_TFT_GreenTab_Initialize
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text29
  7289  001FAA                     __ptext29:
  7290                           	opt stack 0
  7291  001FAA                     _Rcmd2red:
  7292                           	opt stack 23
  7293                           
  7294                           ;ST7735_TFT.c: 331: write_command(0x2A);
  7295                           
  7296                           ;incstack = 0
  7297  001FAA  0E2A               	movlw	42
  7298  001FAC  EC9C  F011         	call	_write_command
  7299                           
  7300                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x00);
  7301  001FB0  0E00               	movlw	0
  7302  001FB2  EC94  F011         	call	_write_data
  7303  001FB6  0E00               	movlw	0
  7304  001FB8  EC94  F011         	call	_write_data
  7305                           
  7306                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x7F);
  7307  001FBC  0E00               	movlw	0
  7308  001FBE  EC94  F011         	call	_write_data
  7309  001FC2  0E7F               	movlw	127
  7310  001FC4  EC94  F011         	call	_write_data
  7311                           
  7312                           ;ST7735_TFT.c: 334: write_command(0x2B);
  7313  001FC8  0E2B               	movlw	43
  7314  001FCA  EC9C  F011         	call	_write_command
  7315                           
  7316                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x00);
  7317  001FCE  0E00               	movlw	0
  7318  001FD0  EC94  F011         	call	_write_data
  7319  001FD4  0E00               	movlw	0
  7320  001FD6  EC94  F011         	call	_write_data
  7321                           
  7322                           ;ST7735_TFT.c: 336: write_data(0x00); write_data(0x9F);
  7323  001FDA  0E00               	movlw	0
  7324  001FDC  EC94  F011         	call	_write_data
  7325  001FE0  0E9F               	movlw	159
  7326  001FE2  EC94  F011         	call	_write_data
  7327  001FE6  0012               	return		;funcret
  7328  001FE8                     __end_of_Rcmd2red:
  7329                           	opt stack 0
  7330                           tblptru	equ	0xFF8
  7331                           tblptrh	equ	0xFF7
  7332                           tblptrl	equ	0xFF6
  7333                           tablat	equ	0xFF5
  7334                           prodh	equ	0xFF4
  7335                           prodl	equ	0xFF3
  7336                           intcon	equ	0xFF2
  7337                           intcon2	equ	0xFF1
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           postdec1	equ	0xFE5
  7341                           plusw1	equ	0xFE3
  7342                           fsr1l	equ	0xFE1
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           plusw2	equ	0xFDB
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _Rcmd1 *****************
  7352 ;; Defined at:
  7353 ;;		line 282 in file "ST7735_TFT.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;		None               void
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;Total ram usage:        0 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    5
  7374 ;; This function calls:
  7375 ;;		_delay_ms
  7376 ;;		_write_command
  7377 ;;		_write_data
  7378 ;; This function is called by:
  7379 ;;		_TFT_GreenTab_Initialize
  7380 ;;		_TFT_BlackTab_Initialize
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text30
  7385  001022                     __ptext30:
  7386                           	opt stack 0
  7387  001022                     _Rcmd1:
  7388                           	opt stack 23
  7389                           
  7390                           ;ST7735_TFT.c: 284: write_command(0x01);
  7391                           
  7392                           ;incstack = 0
  7393  001022  0E01               	movlw	1
  7394  001024  EC9C  F011         	call	_write_command
  7395                           
  7396                           ;ST7735_TFT.c: 285: delay_ms(150);
  7397  001028  0E00               	movlw	0
  7398  00102A  6E18               	movwf	delay_ms@ms+1,c
  7399  00102C  0E96               	movlw	150
  7400  00102E  6E17               	movwf	delay_ms@ms,c
  7401  001030  EC8C  F00E         	call	_delay_ms	;wreg free
  7402                           
  7403                           ;ST7735_TFT.c: 286: write_command(0x11);
  7404  001034  0E11               	movlw	17
  7405  001036  EC9C  F011         	call	_write_command
  7406                           
  7407                           ;ST7735_TFT.c: 287: delay_ms(500);
  7408  00103A  0E01               	movlw	1
  7409  00103C  6E18               	movwf	delay_ms@ms+1,c
  7410  00103E  0EF4               	movlw	244
  7411  001040  6E17               	movwf	delay_ms@ms,c
  7412  001042  EC8C  F00E         	call	_delay_ms	;wreg free
  7413                           
  7414                           ;ST7735_TFT.c: 288: write_command(0xB1);
  7415  001046  0EB1               	movlw	177
  7416  001048  EC9C  F011         	call	_write_command
  7417                           
  7418                           ;ST7735_TFT.c: 289: write_data(0x01);
  7419  00104C  0E01               	movlw	1
  7420  00104E  EC94  F011         	call	_write_data
  7421                           
  7422                           ;ST7735_TFT.c: 290: write_data(0x2C);
  7423  001052  0E2C               	movlw	44
  7424  001054  EC94  F011         	call	_write_data
  7425                           
  7426                           ;ST7735_TFT.c: 291: write_data(0x2D);
  7427  001058  0E2D               	movlw	45
  7428  00105A  EC94  F011         	call	_write_data
  7429                           
  7430                           ;ST7735_TFT.c: 292: write_command(0xB2);
  7431  00105E  0EB2               	movlw	178
  7432  001060  EC9C  F011         	call	_write_command
  7433                           
  7434                           ;ST7735_TFT.c: 293: write_data(0x01);
  7435  001064  0E01               	movlw	1
  7436  001066  EC94  F011         	call	_write_data
  7437                           
  7438                           ;ST7735_TFT.c: 294: write_data(0x2C);
  7439  00106A  0E2C               	movlw	44
  7440  00106C  EC94  F011         	call	_write_data
  7441                           
  7442                           ;ST7735_TFT.c: 295: write_data(0x2D);
  7443  001070  0E2D               	movlw	45
  7444  001072  EC94  F011         	call	_write_data
  7445                           
  7446                           ;ST7735_TFT.c: 296: write_command(0xB3);
  7447  001076  0EB3               	movlw	179
  7448  001078  EC9C  F011         	call	_write_command
  7449                           
  7450                           ;ST7735_TFT.c: 297: write_data(0x01);
  7451  00107C  0E01               	movlw	1
  7452  00107E  EC94  F011         	call	_write_data
  7453                           
  7454                           ;ST7735_TFT.c: 298: write_data(0x2C);
  7455  001082  0E2C               	movlw	44
  7456  001084  EC94  F011         	call	_write_data
  7457                           
  7458                           ;ST7735_TFT.c: 299: write_data(0x2D);
  7459  001088  0E2D               	movlw	45
  7460  00108A  EC94  F011         	call	_write_data
  7461                           
  7462                           ;ST7735_TFT.c: 300: write_data(0x01);
  7463  00108E  0E01               	movlw	1
  7464  001090  EC94  F011         	call	_write_data
  7465                           
  7466                           ;ST7735_TFT.c: 301: write_data(0x2C);
  7467  001094  0E2C               	movlw	44
  7468  001096  EC94  F011         	call	_write_data
  7469                           
  7470                           ;ST7735_TFT.c: 302: write_data(0x2D);
  7471  00109A  0E2D               	movlw	45
  7472  00109C  EC94  F011         	call	_write_data
  7473                           
  7474                           ;ST7735_TFT.c: 303: write_command(0xB4);
  7475  0010A0  0EB4               	movlw	180
  7476  0010A2  EC9C  F011         	call	_write_command
  7477                           
  7478                           ;ST7735_TFT.c: 304: write_data(0x07);
  7479  0010A6  0E07               	movlw	7
  7480  0010A8  EC94  F011         	call	_write_data
  7481                           
  7482                           ;ST7735_TFT.c: 305: write_command(0xC0);
  7483  0010AC  0EC0               	movlw	192
  7484  0010AE  EC9C  F011         	call	_write_command
  7485                           
  7486                           ;ST7735_TFT.c: 306: write_data(0xA2);
  7487  0010B2  0EA2               	movlw	162
  7488  0010B4  EC94  F011         	call	_write_data
  7489                           
  7490                           ;ST7735_TFT.c: 307: write_data(0x02);
  7491  0010B8  0E02               	movlw	2
  7492  0010BA  EC94  F011         	call	_write_data
  7493                           
  7494                           ;ST7735_TFT.c: 308: write_data(0x84);
  7495  0010BE  0E84               	movlw	132
  7496  0010C0  EC94  F011         	call	_write_data
  7497                           
  7498                           ;ST7735_TFT.c: 309: write_command(0xC1);
  7499  0010C4  0EC1               	movlw	193
  7500  0010C6  EC9C  F011         	call	_write_command
  7501                           
  7502                           ;ST7735_TFT.c: 310: write_data(0xC5);
  7503  0010CA  0EC5               	movlw	197
  7504  0010CC  EC94  F011         	call	_write_data
  7505                           
  7506                           ;ST7735_TFT.c: 311: write_command(0xC2);
  7507  0010D0  0EC2               	movlw	194
  7508  0010D2  EC9C  F011         	call	_write_command
  7509                           
  7510                           ;ST7735_TFT.c: 312: write_data(0x0A);
  7511  0010D6  0E0A               	movlw	10
  7512  0010D8  EC94  F011         	call	_write_data
  7513                           
  7514                           ;ST7735_TFT.c: 313: write_data(0x00);
  7515  0010DC  0E00               	movlw	0
  7516  0010DE  EC94  F011         	call	_write_data
  7517                           
  7518                           ;ST7735_TFT.c: 314: write_command(0xC3);
  7519  0010E2  0EC3               	movlw	195
  7520  0010E4  EC9C  F011         	call	_write_command
  7521                           
  7522                           ;ST7735_TFT.c: 315: write_data(0x8A);
  7523  0010E8  0E8A               	movlw	138
  7524  0010EA  EC94  F011         	call	_write_data
  7525                           
  7526                           ;ST7735_TFT.c: 316: write_data(0x2A);
  7527  0010EE  0E2A               	movlw	42
  7528  0010F0  EC94  F011         	call	_write_data
  7529                           
  7530                           ;ST7735_TFT.c: 317: write_command(0xC4);
  7531  0010F4  0EC4               	movlw	196
  7532  0010F6  EC9C  F011         	call	_write_command
  7533                           
  7534                           ;ST7735_TFT.c: 318: write_data(0x8A);
  7535  0010FA  0E8A               	movlw	138
  7536  0010FC  EC94  F011         	call	_write_data
  7537                           
  7538                           ;ST7735_TFT.c: 319: write_data(0xEE);
  7539  001100  0EEE               	movlw	238
  7540  001102  EC94  F011         	call	_write_data
  7541                           
  7542                           ;ST7735_TFT.c: 320: write_command(0xC5);
  7543  001106  0EC5               	movlw	197
  7544  001108  EC9C  F011         	call	_write_command
  7545                           
  7546                           ;ST7735_TFT.c: 321: write_data(0x0E);
  7547  00110C  0E0E               	movlw	14
  7548  00110E  EC94  F011         	call	_write_data
  7549                           
  7550                           ;ST7735_TFT.c: 322: write_command(0x20);
  7551  001112  0E20               	movlw	32
  7552  001114  EC9C  F011         	call	_write_command
  7553                           
  7554                           ;ST7735_TFT.c: 323: write_command(0x36);
  7555  001118  0E36               	movlw	54
  7556  00111A  EC9C  F011         	call	_write_command
  7557                           
  7558                           ;ST7735_TFT.c: 324: write_data(0xC8);
  7559  00111E  0EC8               	movlw	200
  7560  001120  EC94  F011         	call	_write_data
  7561                           
  7562                           ;ST7735_TFT.c: 325: write_command(0x3A);
  7563  001124  0E3A               	movlw	58
  7564  001126  EC9C  F011         	call	_write_command
  7565                           
  7566                           ;ST7735_TFT.c: 326: write_data(0x05);
  7567  00112A  0E05               	movlw	5
  7568  00112C  EC94  F011         	call	_write_data
  7569  001130  0012               	return		;funcret
  7570  001132                     __end_of_Rcmd1:
  7571                           	opt stack 0
  7572                           tblptru	equ	0xFF8
  7573                           tblptrh	equ	0xFF7
  7574                           tblptrl	equ	0xFF6
  7575                           tablat	equ	0xFF5
  7576                           prodh	equ	0xFF4
  7577                           prodl	equ	0xFF3
  7578                           intcon	equ	0xFF2
  7579                           intcon2	equ	0xFF1
  7580                           postinc0	equ	0xFEE
  7581                           wreg	equ	0xFE8
  7582                           postdec1	equ	0xFE5
  7583                           plusw1	equ	0xFE3
  7584                           fsr1l	equ	0xFE1
  7585                           indf2	equ	0xFDF
  7586                           postinc2	equ	0xFDE
  7587                           postdec2	equ	0xFDD
  7588                           plusw2	equ	0xFDB
  7589                           fsr2h	equ	0xFDA
  7590                           fsr2l	equ	0xFD9
  7591                           status	equ	0xFD8
  7592                           
  7593 ;; *************** function _write_data *****************
  7594 ;; Defined at:
  7595 ;;		line 210 in file "ST7735_TFT.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  data_           1    wreg     unsigned char 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  data_           1   18[COMRAM] unsigned char 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;		None               void
  7602 ;; Registers used:
  7603 ;;		wreg, status,2, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;Total ram usage:        1 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:    4
  7616 ;; This function calls:
  7617 ;;		_spiwrite
  7618 ;; This function is called by:
  7619 ;;		_Rcmd1
  7620 ;;		_Rcmd2red
  7621 ;;		_Rcmd3
  7622 ;;		_setAddrWindow
  7623 ;;		_drawPixel
  7624 ;;		_TFT_GreenTab_Initialize
  7625 ;;		_Bcmd
  7626 ;;		_setScrollDefinition
  7627 ;;		_Rcmd2green
  7628 ;;		_VerticalScroll
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text31
  7633  002328                     __ptext31:
  7634                           	opt stack 0
  7635  002328                     _write_data:
  7636                           	opt stack 20
  7637                           
  7638                           ;incstack = 0
  7639                           ;write_data@data_ stored from wreg
  7640  002328  6E13               	movwf	write_data@data_,c
  7641                           
  7642                           ;ST7735_TFT.c: 212: PORTBbits.RB6 = 0;
  7643  00232A  9C81               	bcf	3969,6,c	;volatile
  7644                           
  7645                           ;ST7735_TFT.c: 213: PORTBbits.RB5 = 1;
  7646  00232C  8A81               	bsf	3969,5,c	;volatile
  7647                           
  7648                           ;ST7735_TFT.c: 214: spiwrite(data_);
  7649  00232E  5013               	movf	write_data@data_,w,c
  7650  002330  EC53  F011         	call	_spiwrite
  7651                           
  7652                           ;ST7735_TFT.c: 215: PORTBbits.RB6 = 1;
  7653  002334  8C81               	bsf	3969,6,c	;volatile
  7654  002336  0012               	return		;funcret
  7655  002338                     __end_of_write_data:
  7656                           	opt stack 0
  7657                           tblptru	equ	0xFF8
  7658                           tblptrh	equ	0xFF7
  7659                           tblptrl	equ	0xFF6
  7660                           tablat	equ	0xFF5
  7661                           prodh	equ	0xFF4
  7662                           prodl	equ	0xFF3
  7663                           intcon	equ	0xFF2
  7664                           intcon2	equ	0xFF1
  7665                           postinc0	equ	0xFEE
  7666                           wreg	equ	0xFE8
  7667                           postdec1	equ	0xFE5
  7668                           plusw1	equ	0xFE3
  7669                           fsr1l	equ	0xFE1
  7670                           indf2	equ	0xFDF
  7671                           postinc2	equ	0xFDE
  7672                           postdec2	equ	0xFDD
  7673                           plusw2	equ	0xFDB
  7674                           fsr2h	equ	0xFDA
  7675                           fsr2l	equ	0xFD9
  7676                           status	equ	0xFD8
  7677                           
  7678 ;; *************** function _write_command *****************
  7679 ;; Defined at:
  7680 ;;		line 199 in file "ST7735_TFT.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  cmd_            1    wreg     unsigned char 
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;  cmd_            1   18[COMRAM] unsigned char 
  7685 ;; Return value:  Size  Location     Type
  7686 ;;		None               void
  7687 ;; Registers used:
  7688 ;;		wreg, status,2, cstack
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;Total ram usage:        1 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    4
  7701 ;; This function calls:
  7702 ;;		_spiwrite
  7703 ;; This function is called by:
  7704 ;;		_Rcmd1
  7705 ;;		_Rcmd2red
  7706 ;;		_Rcmd3
  7707 ;;		_setAddrWindow
  7708 ;;		_TFT_GreenTab_Initialize
  7709 ;;		_Bcmd
  7710 ;;		_setScrollDefinition
  7711 ;;		_Rcmd2green
  7712 ;;		_VerticalScroll
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text32
  7717  002338                     __ptext32:
  7718                           	opt stack 0
  7719  002338                     _write_command:
  7720                           	opt stack 20
  7721                           
  7722                           ;incstack = 0
  7723                           ;write_command@cmd_ stored from wreg
  7724  002338  6E13               	movwf	write_command@cmd_,c
  7725                           
  7726                           ;ST7735_TFT.c: 201: PORTBbits.RB6 = 0;
  7727  00233A  9C81               	bcf	3969,6,c	;volatile
  7728                           
  7729                           ;ST7735_TFT.c: 203: PORTBbits.RB5 = 0;
  7730  00233C  9A81               	bcf	3969,5,c	;volatile
  7731                           
  7732                           ;ST7735_TFT.c: 204: spiwrite(cmd_);
  7733  00233E  5013               	movf	write_command@cmd_,w,c
  7734  002340  EC53  F011         	call	_spiwrite
  7735                           
  7736                           ;ST7735_TFT.c: 206: PORTBbits.RB6 = 1;
  7737  002344  8C81               	bsf	3969,6,c	;volatile
  7738  002346  0012               	return		;funcret
  7739  002348                     __end_of_write_command:
  7740                           	opt stack 0
  7741                           tblptru	equ	0xFF8
  7742                           tblptrh	equ	0xFF7
  7743                           tblptrl	equ	0xFF6
  7744                           tablat	equ	0xFF5
  7745                           prodh	equ	0xFF4
  7746                           prodl	equ	0xFF3
  7747                           intcon	equ	0xFF2
  7748                           intcon2	equ	0xFF1
  7749                           postinc0	equ	0xFEE
  7750                           wreg	equ	0xFE8
  7751                           postdec1	equ	0xFE5
  7752                           plusw1	equ	0xFE3
  7753                           fsr1l	equ	0xFE1
  7754                           indf2	equ	0xFDF
  7755                           postinc2	equ	0xFDE
  7756                           postdec2	equ	0xFDD
  7757                           plusw2	equ	0xFDB
  7758                           fsr2h	equ	0xFDA
  7759                           fsr2l	equ	0xFD9
  7760                           status	equ	0xFD8
  7761                           
  7762 ;; *************** function _spiwrite *****************
  7763 ;; Defined at:
  7764 ;;		line 190 in file "ST7735_TFT.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;  spidata         1    wreg     unsigned char 
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;  spidata         1   17[COMRAM] unsigned char 
  7769 ;;  x               1   16[COMRAM] unsigned char 
  7770 ;; Return value:  Size  Location     Type
  7771 ;;		None               void
  7772 ;; Registers used:
  7773 ;;		wreg
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;Total ram usage:        2 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; Hardware stack levels required when called:    3
  7786 ;; This function calls:
  7787 ;;		Nothing
  7788 ;; This function is called by:
  7789 ;;		_write_command
  7790 ;;		_write_data
  7791 ;;		_drawFastVLine
  7792 ;;		_fillRectangle
  7793 ;;		_drawFastHLine
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797                           	psect	text33
  7798  0022A6                     __ptext33:
  7799                           	opt stack 0
  7800  0022A6                     _spiwrite:
  7801                           	opt stack 22
  7802                           
  7803                           ;incstack = 0
  7804                           ;spiwrite@spidata stored from wreg
  7805  0022A6  6E12               	movwf	spiwrite@spidata,c
  7806                           
  7807                           ;ST7735_TFT.c: 192: char x;
  7808                           ;ST7735_TFT.c: 193: PIR1bits.SSPIF = 0;
  7809  0022A8  969E               	bcf	3998,3,c	;volatile
  7810                           
  7811                           ;ST7735_TFT.c: 194: x = SSPBUF;
  7812  0022AA  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  7813                           
  7814                           ;ST7735_TFT.c: 195: SSPBUF = spidata;
  7815  0022AE  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  7816                           
  7817                           ;ST7735_TFT.c: 196: while (!SSPSTATbits.BF);
  7818  0022B2  D000               	goto	l566
  7819  0022B4                     l566:
  7820  0022B4  A0C7               	btfss	4039,0,c	;volatile
  7821  0022B6  D7FE               	goto	l566
  7822  0022B8  0012               	return		;funcret
  7823  0022BA                     __end_of_spiwrite:
  7824                           	opt stack 0
  7825                           tblptru	equ	0xFF8
  7826                           tblptrh	equ	0xFF7
  7827                           tblptrl	equ	0xFF6
  7828                           tablat	equ	0xFF5
  7829                           prodh	equ	0xFF4
  7830                           prodl	equ	0xFF3
  7831                           intcon	equ	0xFF2
  7832                           intcon2	equ	0xFF1
  7833                           postinc0	equ	0xFEE
  7834                           wreg	equ	0xFE8
  7835                           postdec1	equ	0xFE5
  7836                           plusw1	equ	0xFE3
  7837                           fsr1l	equ	0xFE1
  7838                           indf2	equ	0xFDF
  7839                           postinc2	equ	0xFDE
  7840                           postdec2	equ	0xFDD
  7841                           plusw2	equ	0xFDB
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           
  7846 ;; *************** function _LCD_Reset *****************
  7847 ;; Defined at:
  7848 ;;		line 218 in file "ST7735_TFT.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;		None
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;		None
  7853 ;; Return value:  Size  Location     Type
  7854 ;;		None               void
  7855 ;; Registers used:
  7856 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;Total ram usage:        0 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; Hardware stack levels required when called:    5
  7869 ;; This function calls:
  7870 ;;		_delay_ms
  7871 ;; This function is called by:
  7872 ;;		_Initialize_Screen
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           	psect	text34
  7877  0022CE                     __ptext34:
  7878                           	opt stack 0
  7879  0022CE                     _LCD_Reset:
  7880                           	opt stack 24
  7881                           
  7882                           ;ST7735_TFT.c: 220: PORTCbits.RC1 = 0;
  7883                           
  7884                           ;incstack = 0
  7885  0022CE  9282               	bcf	3970,1,c	;volatile
  7886                           
  7887                           ;ST7735_TFT.c: 221: delay_ms(100);
  7888  0022D0  0E00               	movlw	0
  7889  0022D2  6E18               	movwf	delay_ms@ms+1,c
  7890  0022D4  0E64               	movlw	100
  7891  0022D6  6E17               	movwf	delay_ms@ms,c
  7892  0022D8  EC8C  F00E         	call	_delay_ms	;wreg free
  7893                           
  7894                           ;ST7735_TFT.c: 222: PORTCbits.RC1 = 1;
  7895  0022DC  8282               	bsf	3970,1,c	;volatile
  7896  0022DE  0012               	return		;funcret
  7897  0022E0                     __end_of_LCD_Reset:
  7898                           	opt stack 0
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           intcon	equ	0xFF2
  7906                           intcon2	equ	0xFF1
  7907                           postinc0	equ	0xFEE
  7908                           wreg	equ	0xFE8
  7909                           postdec1	equ	0xFE5
  7910                           plusw1	equ	0xFE3
  7911                           fsr1l	equ	0xFE1
  7912                           indf2	equ	0xFDF
  7913                           postinc2	equ	0xFDE
  7914                           postdec2	equ	0xFDD
  7915                           plusw2	equ	0xFDB
  7916                           fsr2h	equ	0xFDA
  7917                           fsr2l	equ	0xFD9
  7918                           status	equ	0xFD8
  7919                           
  7920 ;; *************** function _delay_ms *****************
  7921 ;; Defined at:
  7922 ;;		line 65 in file "ST7735_TFT.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  ms              2   22[COMRAM] int 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  count           2   26[COMRAM] int 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;		None               void
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;Total ram usage:        6 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    4
  7943 ;; This function calls:
  7944 ;;		___wmul
  7945 ;; This function is called by:
  7946 ;;		_LCD_Reset
  7947 ;;		_Rcmd1
  7948 ;;		_Rcmd3
  7949 ;;		_Bcmd
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text35
  7954  001D18                     __ptext35:
  7955                           	opt stack 0
  7956  001D18                     _delay_ms:
  7957                           	opt stack 23
  7958                           
  7959                           ;ST7735_TFT.c: 71: int count;
  7960                           ;ST7735_TFT.c: 72: count = 8000000/4000/16 * ms;
  7961                           
  7962                           ;incstack = 0
  7963  001D18  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7964  001D1C  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7965  001D20  0E00               	movlw	0
  7966  001D22  6E14               	movwf	___wmul@multiplicand+1,c
  7967  001D24  0E7D               	movlw	125
  7968  001D26  6E13               	movwf	___wmul@multiplicand,c
  7969  001D28  EC8B  F010         	call	___wmul	;wreg free
  7970  001D2C  C011  F01B         	movff	?___wmul,delay_ms@count
  7971  001D30  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7972                           
  7973                           ;ST7735_TFT.c: 73: count = (0xffff - count);
  7974  001D34  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7975  001D38  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7976  001D3C  1E19               	comf	??_delay_ms,f,c
  7977  001D3E  1E1A               	comf	??_delay_ms+1,f,c
  7978  001D40  4A19               	infsnz	??_delay_ms,f,c
  7979  001D42  2A1A               	incf	??_delay_ms+1,f,c
  7980  001D44  0EFF               	movlw	255
  7981  001D46  2419               	addwf	??_delay_ms,w,c
  7982  001D48  6E1B               	movwf	delay_ms@count,c
  7983  001D4A  0EFF               	movlw	255
  7984  001D4C  201A               	addwfc	??_delay_ms+1,w,c
  7985  001D4E  6E1C               	movwf	delay_ms@count+1,c
  7986                           
  7987                           ;ST7735_TFT.c: 75: T0CON = 0x03;
  7988  001D50  0E03               	movlw	3
  7989  001D52  6ED5               	movwf	4053,c	;volatile
  7990                           
  7991                           ;ST7735_TFT.c: 77: TMR0L = count & 0x00ff;
  7992  001D54  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7993                           
  7994                           ;ST7735_TFT.c: 78: TMR0H = count >> 8;
  7995  001D58  501C               	movf	delay_ms@count+1,w,c
  7996  001D5A  6ED7               	movwf	4055,c	;volatile
  7997                           
  7998                           ;ST7735_TFT.c: 80: INTCONbits.TMR0IF = 0;
  7999  001D5C  94F2               	bcf	intcon,2,c	;volatile
  8000                           
  8001                           ;ST7735_TFT.c: 81: T0CONbits.TMR0ON = 1;
  8002  001D5E  8ED5               	bsf	4053,7,c	;volatile
  8003                           
  8004                           ;ST7735_TFT.c: 83: while (INTCONbits.TMR0IF == 0);
  8005  001D60  D000               	goto	l556
  8006  001D62                     l556:
  8007  001D62  A4F2               	btfss	intcon,2,c	;volatile
  8008  001D64  D7FE               	goto	l556
  8009                           
  8010                           ;ST7735_TFT.c: 84: T0CONbits.TMR0ON = 0;
  8011  001D66  9ED5               	bcf	4053,7,c	;volatile
  8012  001D68  0012               	return		;funcret
  8013  001D6A                     __end_of_delay_ms:
  8014                           	opt stack 0
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           prodh	equ	0xFF4
  8020                           prodl	equ	0xFF3
  8021                           intcon	equ	0xFF2
  8022                           intcon2	equ	0xFF1
  8023                           postinc0	equ	0xFEE
  8024                           wreg	equ	0xFE8
  8025                           postdec1	equ	0xFE5
  8026                           plusw1	equ	0xFE3
  8027                           fsr1l	equ	0xFE1
  8028                           indf2	equ	0xFDF
  8029                           postinc2	equ	0xFDE
  8030                           postdec2	equ	0xFDD
  8031                           plusw2	equ	0xFDB
  8032                           fsr2h	equ	0xFDA
  8033                           fsr2l	equ	0xFD9
  8034                           status	equ	0xFD8
  8035                           
  8036 ;; *************** function ___wmul *****************
  8037 ;; Defined at:
  8038 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;  multiplier      2   16[COMRAM] unsigned int 
  8041 ;;  multiplicand    2   18[COMRAM] unsigned int 
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  product         2   20[COMRAM] unsigned int 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  2   16[COMRAM] unsigned int 
  8046 ;; Registers used:
  8047 ;;		wreg, status,2, status,0, prodl, prodh
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8056 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8057 ;;Total ram usage:        6 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    3
  8060 ;; This function calls:
  8061 ;;		Nothing
  8062 ;; This function is called by:
  8063 ;;		_get_RPM
  8064 ;;		_main
  8065 ;;		_delay_ms
  8066 ;;		_drawChar
  8067 ;;		_printf
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           	psect	text36
  8072  002116                     __ptext36:
  8073                           	opt stack 0
  8074  002116                     ___wmul:
  8075                           	opt stack 26
  8076                           
  8077                           ;incstack = 0
  8078  002116  5011               	movf	___wmul@multiplier,w,c
  8079  002118  0213               	mulwf	___wmul@multiplicand,c
  8080  00211A  CFF3 F015          	movff	prodl,___wmul@product
  8081  00211E  CFF4 F016          	movff	prodh,___wmul@product+1
  8082  002122  5011               	movf	___wmul@multiplier,w,c
  8083  002124  0214               	mulwf	___wmul@multiplicand+1,c
  8084  002126  50F3               	movf	prodl,w,c
  8085  002128  2616               	addwf	___wmul@product+1,f,c
  8086  00212A  5012               	movf	___wmul@multiplier+1,w,c
  8087  00212C  0213               	mulwf	___wmul@multiplicand,c
  8088  00212E  50F3               	movf	prodl,w,c
  8089  002130  2616               	addwf	___wmul@product+1,f,c
  8090  002132  C015  F011         	movff	___wmul@product,?___wmul
  8091  002136  C016  F012         	movff	___wmul@product+1,?___wmul+1
  8092  00213A  D000               	goto	l865
  8093  00213C                     l865:
  8094  00213C  0012               	return		;funcret
  8095  00213E                     __end_of___wmul:
  8096                           	opt stack 0
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           intcon2	equ	0xFF1
  8105                           postinc0	equ	0xFEE
  8106                           wreg	equ	0xFE8
  8107                           postdec1	equ	0xFE5
  8108                           plusw1	equ	0xFE3
  8109                           fsr1l	equ	0xFE1
  8110                           indf2	equ	0xFDF
  8111                           postinc2	equ	0xFDE
  8112                           postdec2	equ	0xFDD
  8113                           plusw2	equ	0xFDB
  8114                           fsr2h	equ	0xFDA
  8115                           fsr2l	equ	0xFD9
  8116                           status	equ	0xFD8
  8117                           
  8118 ;; *************** function _Increase_Speed *****************
  8119 ;; Defined at:
  8120 ;;		line 43 in file "Fan_Support.c"
  8121 ;; Parameters:    Size  Location     Type
  8122 ;;		None
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;		None
  8125 ;; Return value:  Size  Location     Type
  8126 ;;		None               void
  8127 ;; Registers used:
  8128 ;;		wreg, status,2, status,0, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;Total ram usage:        0 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    6
  8141 ;; This function calls:
  8142 ;;		_Do_Beep
  8143 ;;		_do_update_pwm
  8144 ;; This function is called by:
  8145 ;;		_main
  8146 ;; This function uses a non-reentrant model
  8147 ;;
  8148                           
  8149                           	psect	text37
  8150  00213E                     __ptext37:
  8151                           	opt stack 0
  8152  00213E                     _Increase_Speed:
  8153                           	opt stack 24
  8154                           
  8155                           ;Fan_Support.c: 45: if(duty_cycle == 100)
  8156                           
  8157                           ;incstack = 0
  8158  00213E  0E64               	movlw	100
  8159  002140  185C               	xorwf	_duty_cycle,w,c
  8160  002142  A4D8               	btfss	status,2,c
  8161  002144  D008               	goto	l6153
  8162                           
  8163                           ;Fan_Support.c: 46: {
  8164                           ;Fan_Support.c: 47: Do_Beep();
  8165  002146  ECB2  F011         	call	_Do_Beep	;wreg free
  8166                           
  8167                           ;Fan_Support.c: 48: Do_Beep();
  8168  00214A  ECB2  F011         	call	_Do_Beep	;wreg free
  8169                           
  8170                           ;Fan_Support.c: 49: do_update_pwm(duty_cycle);
  8171  00214E  505C               	movf	_duty_cycle,w,c
  8172  002150  ECC8  F00B         	call	_do_update_pwm
  8173                           
  8174                           ;Fan_Support.c: 50: }
  8175  002154  D006               	goto	l47
  8176  002156                     l6153:
  8177                           
  8178                           ;Fan_Support.c: 51: else
  8179                           ;Fan_Support.c: 52: {
  8180                           ;Fan_Support.c: 53: duty_cycle += 5;
  8181  002156  0E05               	movlw	5
  8182  002158  265C               	addwf	_duty_cycle,f,c
  8183                           
  8184                           ;Fan_Support.c: 54: do_update_pwm(duty_cycle);
  8185  00215A  505C               	movf	_duty_cycle,w,c
  8186  00215C  ECC8  F00B         	call	_do_update_pwm
  8187  002160  D000               	goto	l47
  8188  002162                     l47:
  8189  002162  0012               	return		;funcret
  8190  002164                     __end_of_Increase_Speed:
  8191                           	opt stack 0
  8192                           tblptru	equ	0xFF8
  8193                           tblptrh	equ	0xFF7
  8194                           tblptrl	equ	0xFF6
  8195                           tablat	equ	0xFF5
  8196                           prodh	equ	0xFF4
  8197                           prodl	equ	0xFF3
  8198                           intcon	equ	0xFF2
  8199                           intcon2	equ	0xFF1
  8200                           postinc0	equ	0xFEE
  8201                           wreg	equ	0xFE8
  8202                           postdec1	equ	0xFE5
  8203                           plusw1	equ	0xFE3
  8204                           fsr1l	equ	0xFE1
  8205                           indf2	equ	0xFDF
  8206                           postinc2	equ	0xFDE
  8207                           postdec2	equ	0xFDD
  8208                           plusw2	equ	0xFDB
  8209                           fsr2h	equ	0xFDA
  8210                           fsr2l	equ	0xFD9
  8211                           status	equ	0xFD8
  8212                           
  8213 ;; *************** function _Do_Init *****************
  8214 ;; Defined at:
  8215 ;;		line 125 in file "Lab12_ex.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;		None
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;		None
  8220 ;; Return value:  Size  Location     Type
  8221 ;;		None               void
  8222 ;; Registers used:
  8223 ;;		wreg, status,2, status,0, cstack
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;Total ram usage:        0 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:    7
  8236 ;; This function calls:
  8237 ;;		_DS1621_Init
  8238 ;;		_I2C_Init
  8239 ;;		_init_INTERRUPT
  8240 ;;		_init_UART
  8241 ;; This function is called by:
  8242 ;;		_main
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           	psect	text38
  8247  001E04                     __ptext38:
  8248                           	opt stack 0
  8249  001E04                     _Do_Init:
  8250                           	opt stack 23
  8251                           
  8252                           ;Lab12_ex.c: 127: init_UART();
  8253                           
  8254                           ;incstack = 0
  8255  001E04  EC5D  F011         	call	_init_UART	;wreg free
  8256                           
  8257                           ;Lab12_ex.c: 128: OSCCON=0x70;
  8258  001E08  0E70               	movlw	112
  8259  001E0A  6ED3               	movwf	4051,c	;volatile
  8260                           
  8261                           ;Lab12_ex.c: 130: ADCON1=0x0F;
  8262  001E0C  0E0F               	movlw	15
  8263  001E0E  6EC1               	movwf	4033,c	;volatile
  8264                           
  8265                           ;Lab12_ex.c: 131: TRISA = 0x00;
  8266  001E10  0E00               	movlw	0
  8267  001E12  6E92               	movwf	3986,c	;volatile
  8268                           
  8269                           ;Lab12_ex.c: 132: TRISB = 0x01;
  8270  001E14  0E01               	movlw	1
  8271  001E16  6E93               	movwf	3987,c	;volatile
  8272                           
  8273                           ;Lab12_ex.c: 133: TRISC = 0x01;
  8274  001E18  0E01               	movlw	1
  8275  001E1A  6E94               	movwf	3988,c	;volatile
  8276                           
  8277                           ;Lab12_ex.c: 134: TRISD = 0x00;
  8278  001E1C  0E00               	movlw	0
  8279  001E1E  6E95               	movwf	3989,c	;volatile
  8280                           
  8281                           ;Lab12_ex.c: 135: TRISE = 0x00;
  8282  001E20  0E00               	movlw	0
  8283  001E22  6E96               	movwf	3990,c	;volatile
  8284                           
  8285                           ;Lab12_ex.c: 137: RBPU=0;
  8286  001E24  9EF1               	bcf	intcon2,7,c	;volatile
  8287                           
  8288                           ;Lab12_ex.c: 138: TMR3L = 0x00;
  8289  001E26  0E00               	movlw	0
  8290  001E28  6EB2               	movwf	4018,c	;volatile
  8291                           
  8292                           ;Lab12_ex.c: 139: T3CON = 0x03;
  8293  001E2A  0E03               	movlw	3
  8294  001E2C  6EB1               	movwf	4017,c	;volatile
  8295                           
  8296                           ;Lab12_ex.c: 140: I2C_Init(100000);
  8297  001E2E  0EA0               	movlw	160
  8298  001E30  6E11               	movwf	I2C_Init@c,c
  8299  001E32  0E86               	movlw	134
  8300  001E34  6E12               	movwf	I2C_Init@c+1,c
  8301  001E36  0E01               	movlw	1
  8302  001E38  6E13               	movwf	I2C_Init@c+2,c
  8303  001E3A  0E00               	movlw	0
  8304  001E3C  6E14               	movwf	I2C_Init@c+3,c
  8305  001E3E  ECC5  F011         	call	_I2C_Init	;wreg free
  8306                           
  8307                           ;Lab12_ex.c: 142: DS1621_Init();
  8308  001E42  EC18  F011         	call	_DS1621_Init	;wreg free
  8309                           
  8310                           ;Lab12_ex.c: 143: init_INTERRUPT();
  8311  001E46  EC32  F011         	call	_init_INTERRUPT	;wreg free
  8312                           
  8313                           ;Lab12_ex.c: 144: FAN = 0;
  8314  001E4A  0E00               	movlw	0
  8315  001E4C  6E50               	movwf	_FAN,c
  8316  001E4E  0012               	return		;funcret
  8317  001E50                     __end_of_Do_Init:
  8318                           	opt stack 0
  8319                           tblptru	equ	0xFF8
  8320                           tblptrh	equ	0xFF7
  8321                           tblptrl	equ	0xFF6
  8322                           tablat	equ	0xFF5
  8323                           prodh	equ	0xFF4
  8324                           prodl	equ	0xFF3
  8325                           intcon	equ	0xFF2
  8326                           intcon2	equ	0xFF1
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           postdec1	equ	0xFE5
  8330                           plusw1	equ	0xFE3
  8331                           fsr1l	equ	0xFE1
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           plusw2	equ	0xFDB
  8336                           fsr2h	equ	0xFDA
  8337                           fsr2l	equ	0xFD9
  8338                           status	equ	0xFD8
  8339                           
  8340 ;; *************** function _init_UART *****************
  8341 ;; Defined at:
  8342 ;;		line 119 in file "Lab12_ex.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;		None
  8345 ;; Auto vars:     Size  Location     Type
  8346 ;;		None
  8347 ;; Return value:  Size  Location     Type
  8348 ;;		None               void
  8349 ;; Registers used:
  8350 ;;		wreg, status,2, cstack
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;Total ram usage:        0 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; Hardware stack levels required when called:    4
  8363 ;; This function calls:
  8364 ;;		_OpenUSART
  8365 ;; This function is called by:
  8366 ;;		_Do_Init
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           	psect	text39
  8371  0022BA                     __ptext39:
  8372                           	opt stack 0
  8373  0022BA                     _init_UART:
  8374                           	opt stack 25
  8375                           
  8376                           ;Lab12_ex.c: 121: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111
      +                          111 & 0b11111111, 25);
  8377                           
  8378                           ;incstack = 0
  8379  0022BA  0E00               	movlw	0
  8380  0022BC  6E12               	movwf	OpenUSART@spbrg+1,c
  8381  0022BE  0E19               	movlw	25
  8382  0022C0  6E11               	movwf	OpenUSART@spbrg,c
  8383  0022C2  0E3C               	movlw	60
  8384  0022C4  EC71  F00D         	call	_OpenUSART
  8385                           
  8386                           ;Lab12_ex.c: 122: OSCCON = 0x70;
  8387  0022C8  0E70               	movlw	112
  8388  0022CA  6ED3               	movwf	4051,c	;volatile
  8389  0022CC  0012               	return		;funcret
  8390  0022CE                     __end_of_init_UART:
  8391                           	opt stack 0
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           intcon2	equ	0xFF1
  8400                           postinc0	equ	0xFEE
  8401                           wreg	equ	0xFE8
  8402                           postdec1	equ	0xFE5
  8403                           plusw1	equ	0xFE3
  8404                           fsr1l	equ	0xFE1
  8405                           indf2	equ	0xFDF
  8406                           postinc2	equ	0xFDE
  8407                           postdec2	equ	0xFDD
  8408                           plusw2	equ	0xFDB
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413 ;; *************** function _OpenUSART *****************
  8414 ;; Defined at:
  8415 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;  config          1    wreg     unsigned char 
  8418 ;;  spbrg           2   16[COMRAM] unsigned int 
  8419 ;; Auto vars:     Size  Location     Type
  8420 ;;  config          1   18[COMRAM] unsigned char 
  8421 ;; Return value:  Size  Location     Type
  8422 ;;		None               void
  8423 ;; Registers used:
  8424 ;;		wreg, status,2
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;Total ram usage:        3 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; Hardware stack levels required when called:    3
  8437 ;; This function calls:
  8438 ;;		Nothing
  8439 ;; This function is called by:
  8440 ;;		_init_UART
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           	psect	text40
  8445  001AE2                     __ptext40:
  8446                           	opt stack 0
  8447  001AE2                     _OpenUSART:
  8448                           	opt stack 25
  8449                           
  8450                           ;incstack = 0
  8451                           ;OpenUSART@config stored from wreg
  8452  001AE2  6E13               	movwf	OpenUSART@config,c
  8453  001AE4  0E00               	movlw	0
  8454  001AE6  6EAC               	movwf	4012,c	;volatile
  8455  001AE8  0E00               	movlw	0
  8456  001AEA  6EAB               	movwf	4011,c	;volatile
  8457  001AEC  A013               	btfss	OpenUSART@config,0,c
  8458  001AEE  D002               	goto	l5553
  8459  001AF0  88AC               	bsf	4012,4,c	;volatile
  8460  001AF2  D000               	goto	l5553
  8461  001AF4                     l5553:
  8462  001AF4  A213               	btfss	OpenUSART@config,1,c
  8463  001AF6  D003               	goto	l5557
  8464  001AF8  8CAC               	bsf	4012,6,c	;volatile
  8465  001AFA  8CAB               	bsf	4011,6,c	;volatile
  8466  001AFC  D000               	goto	l5557
  8467  001AFE                     l5557:
  8468  001AFE  A413               	btfss	OpenUSART@config,2,c
  8469  001B00  D002               	goto	l5561
  8470  001B02  8EAC               	bsf	4012,7,c	;volatile
  8471  001B04  D000               	goto	l5561
  8472  001B06                     l5561:
  8473  001B06  A613               	btfss	OpenUSART@config,3,c
  8474  001B08  D002               	goto	l853
  8475  001B0A  88AB               	bsf	4011,4,c	;volatile
  8476  001B0C  D002               	goto	l5565
  8477  001B0E                     l853:
  8478  001B0E  8AAB               	bsf	4011,5,c	;volatile
  8479  001B10  D000               	goto	l5565
  8480  001B12                     l5565:
  8481  001B12  B813               	btfsc	OpenUSART@config,4,c
  8482  001B14  84AC               	bsf	4012,2,c	;volatile
  8483  001B16  989E               	bcf	3998,4,c	;volatile
  8484  001B18  AA13               	btfss	OpenUSART@config,5,c
  8485  001B1A  D002               	goto	l5573
  8486  001B1C  86AB               	bsf	4011,3,c	;volatile
  8487  001B1E  D000               	goto	l5573
  8488  001B20                     l5573:
  8489  001B20  AC13               	btfss	OpenUSART@config,6,c
  8490  001B22  D002               	goto	l857
  8491  001B24  8A9D               	bsf	3997,5,c	;volatile
  8492  001B26  D001               	goto	l858
  8493  001B28                     l857:
  8494  001B28  9A9D               	bcf	3997,5,c	;volatile
  8495  001B2A                     l858:
  8496  001B2A  9A9E               	bcf	3998,5,c	;volatile
  8497  001B2C  AE13               	btfss	OpenUSART@config,7,c
  8498  001B2E  D002               	goto	l859
  8499  001B30  889D               	bsf	3997,4,c	;volatile
  8500  001B32  D001               	goto	l860
  8501  001B34                     l859:
  8502  001B34  989D               	bcf	3997,4,c	;volatile
  8503  001B36                     l860:
  8504  001B36  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8505  001B3A  5012               	movf	OpenUSART@spbrg+1,w,c
  8506  001B3C  6EB0               	movwf	4016,c	;volatile
  8507  001B3E  8AAC               	bsf	4012,5,c	;volatile
  8508  001B40  8EAB               	bsf	4011,7,c	;volatile
  8509  001B42  9C94               	bcf	3988,6,c	;volatile
  8510  001B44  8E94               	bsf	3988,7,c	;volatile
  8511  001B46  B8AC               	btfsc	4012,4,c	;volatile
  8512  001B48  BEAC               	btfsc	4012,7,c	;volatile
  8513  001B4A  D002               	goto	l862
  8514  001B4C  8C94               	bsf	3988,6,c	;volatile
  8515  001B4E  D000               	goto	l862
  8516  001B50                     l862:
  8517  001B50  0012               	return		;funcret
  8518  001B52                     __end_of_OpenUSART:
  8519                           	opt stack 0
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           intcon	equ	0xFF2
  8527                           intcon2	equ	0xFF1
  8528                           postinc0	equ	0xFEE
  8529                           wreg	equ	0xFE8
  8530                           postdec1	equ	0xFE5
  8531                           plusw1	equ	0xFE3
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           plusw2	equ	0xFDB
  8537                           fsr2h	equ	0xFDA
  8538                           fsr2l	equ	0xFD9
  8539                           status	equ	0xFD8
  8540                           
  8541 ;; *************** function _init_INTERRUPT *****************
  8542 ;; Defined at:
  8543 ;;		line 18 in file "Interrupt.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;		None
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;		None               void
  8550 ;; Registers used:
  8551 ;;		wreg, status,2
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;Total ram usage:        0 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    3
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		_Do_Init
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text41
  8572  002264                     __ptext41:
  8573                           	opt stack 0
  8574  002264                     _init_INTERRUPT:
  8575                           	opt stack 26
  8576                           
  8577                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0;
  8578                           
  8579                           ;incstack = 0
  8580  002264  92F2               	bcf	intcon,1,c	;volatile
  8581                           
  8582                           ;Interrupt.c: 21: INTCON2bits.INTEDG0 = 0;
  8583  002266  9CF1               	bcf	intcon2,6,c	;volatile
  8584                           
  8585                           ;Interrupt.c: 22: INTCONbits.INT0IE = 1;
  8586  002268  88F2               	bsf	intcon,4,c	;volatile
  8587                           
  8588                           ;Interrupt.c: 23: TMR1H = 0;
  8589  00226A  0E00               	movlw	0
  8590  00226C  6ECF               	movwf	4047,c	;volatile
  8591                           
  8592                           ;Interrupt.c: 24: TMR1L = 0;
  8593  00226E  0E00               	movlw	0
  8594  002270  6ECE               	movwf	4046,c	;volatile
  8595                           
  8596                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  8597  002272  909E               	bcf	3998,0,c	;volatile
  8598                           
  8599                           ;Interrupt.c: 26: PIE1bits.TMR1IE = 1;
  8600  002274  809D               	bsf	3997,0,c	;volatile
  8601                           
  8602                           ;Interrupt.c: 27: INTCONbits.PEIE = 1;
  8603  002276  8CF2               	bsf	intcon,6,c	;volatile
  8604                           
  8605                           ;Interrupt.c: 28: INTCONbits.GIE = 1;
  8606  002278  8EF2               	bsf	intcon,7,c	;volatile
  8607  00227A  0012               	return		;funcret
  8608  00227C                     __end_of_init_INTERRUPT:
  8609                           	opt stack 0
  8610                           tblptru	equ	0xFF8
  8611                           tblptrh	equ	0xFF7
  8612                           tblptrl	equ	0xFF6
  8613                           tablat	equ	0xFF5
  8614                           prodh	equ	0xFF4
  8615                           prodl	equ	0xFF3
  8616                           intcon	equ	0xFF2
  8617                           intcon2	equ	0xFF1
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           plusw1	equ	0xFE3
  8622                           fsr1l	equ	0xFE1
  8623                           indf2	equ	0xFDF
  8624                           postinc2	equ	0xFDE
  8625                           postdec2	equ	0xFDD
  8626                           plusw2	equ	0xFDB
  8627                           fsr2h	equ	0xFDA
  8628                           fsr2l	equ	0xFD9
  8629                           status	equ	0xFD8
  8630                           
  8631 ;; *************** function _I2C_Init *****************
  8632 ;; Defined at:
  8633 ;;		line 15 in file "I2C_Soft.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;  c               4   16[COMRAM] unsigned long 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;		None
  8638 ;; Return value:  Size  Location     Type
  8639 ;;		None               void
  8640 ;; Registers used:
  8641 ;;		wreg, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;Total ram usage:        4 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    4
  8654 ;; This function calls:
  8655 ;;		_i2cHighScl
  8656 ;;		_i2cHighSda
  8657 ;; This function is called by:
  8658 ;;		_Do_Init
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           	psect	text42
  8663  00238A                     __ptext42:
  8664                           	opt stack 0
  8665  00238A                     _I2C_Init:
  8666                           	opt stack 25
  8667                           
  8668                           ;I2C_Soft.c: 17: i2cHighScl();
  8669                           
  8670                           ;incstack = 0
  8671  00238A  ECB9  F011         	call	_i2cHighScl	;wreg free
  8672                           
  8673                           ;I2C_Soft.c: 18: i2cHighSda();
  8674  00238E  ECE0  F011         	call	_i2cHighSda	;wreg free
  8675  002392  0012               	return		;funcret
  8676  002394                     __end_of_I2C_Init:
  8677                           	opt stack 0
  8678                           tblptru	equ	0xFF8
  8679                           tblptrh	equ	0xFF7
  8680                           tblptrl	equ	0xFF6
  8681                           tablat	equ	0xFF5
  8682                           prodh	equ	0xFF4
  8683                           prodl	equ	0xFF3
  8684                           intcon	equ	0xFF2
  8685                           intcon2	equ	0xFF1
  8686                           postinc0	equ	0xFEE
  8687                           wreg	equ	0xFE8
  8688                           postdec1	equ	0xFE5
  8689                           plusw1	equ	0xFE3
  8690                           fsr1l	equ	0xFE1
  8691                           indf2	equ	0xFDF
  8692                           postinc2	equ	0xFDE
  8693                           postdec2	equ	0xFDD
  8694                           plusw2	equ	0xFDB
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function _DS1621_Init *****************
  8700 ;; Defined at:
  8701 ;;		line 21 in file "I2C_Support.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;		None
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;		None
  8706 ;; Return value:  Size  Location     Type
  8707 ;;		None               void
  8708 ;; Registers used:
  8709 ;;		wreg, status,2, status,0, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;Total ram usage:        0 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    6
  8722 ;; This function calls:
  8723 ;;		_I2C_Write_Cmd_Only
  8724 ;;		_I2C_Write_Cmd_Write_Data
  8725 ;; This function is called by:
  8726 ;;		_Do_Init
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           	psect	text43
  8731  002230                     __ptext43:
  8732                           	opt stack 0
  8733  002230                     _DS1621_Init:
  8734                           	opt stack 23
  8735                           
  8736                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (0x48, 0xAC, 0x02);
  8737                           
  8738                           ;incstack = 0
  8739  002230  0EAC               	movlw	172
  8740  002232  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  8741  002234  0E02               	movlw	2
  8742  002236  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  8743  002238  0E48               	movlw	72
  8744  00223A  ECFA  F010         	call	_I2C_Write_Cmd_Write_Data
  8745                           
  8746                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(0x48, 0xEE);
  8747  00223E  0EEE               	movlw	238
  8748  002240  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  8749  002242  0E48               	movlw	72
  8750  002244  EC25  F011         	call	_I2C_Write_Cmd_Only
  8751  002248  0012               	return		;funcret
  8752  00224A                     __end_of_DS1621_Init:
  8753                           	opt stack 0
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           intcon2	equ	0xFF1
  8762                           postinc0	equ	0xFEE
  8763                           wreg	equ	0xFE8
  8764                           postdec1	equ	0xFE5
  8765                           plusw1	equ	0xFE3
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           postdec2	equ	0xFDD
  8770                           plusw2	equ	0xFDB
  8771                           fsr2h	equ	0xFDA
  8772                           fsr2l	equ	0xFD9
  8773                           status	equ	0xFD8
  8774                           
  8775 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  8776 ;; Defined at:
  8777 ;;		line 153 in file "I2C_Soft.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;  Device          1    wreg     unsigned char 
  8780 ;;  Cmd             1   18[COMRAM] unsigned char 
  8781 ;;  Data_Out        1   19[COMRAM] unsigned char 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  Device          1   20[COMRAM] unsigned char 
  8784 ;; Return value:  Size  Location     Type
  8785 ;;		None               void
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, status,0, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;Total ram usage:        3 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    5
  8800 ;; This function calls:
  8801 ;;		_I2C_Start
  8802 ;;		_I2C_Stop
  8803 ;;		_I2C_Write
  8804 ;; This function is called by:
  8805 ;;		_DS1621_Init
  8806 ;; This function uses a non-reentrant model
  8807 ;;
  8808                           
  8809                           	psect	text44
  8810  0021F4                     __ptext44:
  8811                           	opt stack 0
  8812  0021F4                     _I2C_Write_Cmd_Write_Data:
  8813                           	opt stack 23
  8814                           
  8815                           ;incstack = 0
  8816                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  8817  0021F4  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  8818                           
  8819                           ;I2C_Soft.c: 155: I2C_Start();
  8820  0021F6  EC82  F011         	call	_I2C_Start	;wreg free
  8821                           
  8822                           ;I2C_Soft.c: 156: I2C_Write((Device << 1) | 0);
  8823  0021FA  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  8824  0021FC  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  8825  0021FE  ECF4  F00F         	call	_I2C_Write
  8826                           
  8827                           ;I2C_Soft.c: 157: I2C_Write(Cmd);
  8828  002202  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  8829  002204  ECF4  F00F         	call	_I2C_Write
  8830                           
  8831                           ;I2C_Soft.c: 158: I2C_Write(Data_Out);
  8832  002208  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  8833  00220A  ECF4  F00F         	call	_I2C_Write
  8834                           
  8835                           ;I2C_Soft.c: 159: I2C_Stop();
  8836  00220E  EC79  F011         	call	_I2C_Stop	;wreg free
  8837  002212  0012               	return		;funcret
  8838  002214                     __end_of_I2C_Write_Cmd_Write_Data:
  8839                           	opt stack 0
  8840                           tblptru	equ	0xFF8
  8841                           tblptrh	equ	0xFF7
  8842                           tblptrl	equ	0xFF6
  8843                           tablat	equ	0xFF5
  8844                           prodh	equ	0xFF4
  8845                           prodl	equ	0xFF3
  8846                           intcon	equ	0xFF2
  8847                           intcon2	equ	0xFF1
  8848                           postinc0	equ	0xFEE
  8849                           wreg	equ	0xFE8
  8850                           postdec1	equ	0xFE5
  8851                           plusw1	equ	0xFE3
  8852                           fsr1l	equ	0xFE1
  8853                           indf2	equ	0xFDF
  8854                           postinc2	equ	0xFDE
  8855                           postdec2	equ	0xFDD
  8856                           plusw2	equ	0xFDB
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           
  8861 ;; *************** function _I2C_Write_Cmd_Only *****************
  8862 ;; Defined at:
  8863 ;;		line 145 in file "I2C_Soft.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  Device          1    wreg     unsigned char 
  8866 ;;  Cmd             1   18[COMRAM] unsigned char 
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  Device          1   19[COMRAM] unsigned char 
  8869 ;; Return value:  Size  Location     Type
  8870 ;;		None               void
  8871 ;; Registers used:
  8872 ;;		wreg, status,2, status,0, cstack
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8878 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8881 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8882 ;;Total ram usage:        2 bytes
  8883 ;; Hardware stack levels used:    1
  8884 ;; Hardware stack levels required when called:    5
  8885 ;; This function calls:
  8886 ;;		_I2C_Start
  8887 ;;		_I2C_Stop
  8888 ;;		_I2C_Write
  8889 ;; This function is called by:
  8890 ;;		_DS1621_Init
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           	psect	text45
  8895  00224A                     __ptext45:
  8896                           	opt stack 0
  8897  00224A                     _I2C_Write_Cmd_Only:
  8898                           	opt stack 23
  8899                           
  8900                           ;incstack = 0
  8901                           ;I2C_Write_Cmd_Only@Device stored from wreg
  8902  00224A  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  8903                           
  8904                           ;I2C_Soft.c: 147: I2C_Start();
  8905  00224C  EC82  F011         	call	_I2C_Start	;wreg free
  8906                           
  8907                           ;I2C_Soft.c: 148: I2C_Write((Device << 1) | 0);
  8908  002250  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  8909  002252  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  8910  002254  ECF4  F00F         	call	_I2C_Write
  8911                           
  8912                           ;I2C_Soft.c: 149: I2C_Write(Cmd);
  8913  002258  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  8914  00225A  ECF4  F00F         	call	_I2C_Write
  8915                           
  8916                           ;I2C_Soft.c: 150: I2C_Stop();
  8917  00225E  EC79  F011         	call	_I2C_Stop	;wreg free
  8918  002262  0012               	return		;funcret
  8919  002264                     __end_of_I2C_Write_Cmd_Only:
  8920                           	opt stack 0
  8921                           tblptru	equ	0xFF8
  8922                           tblptrh	equ	0xFF7
  8923                           tblptrl	equ	0xFF6
  8924                           tablat	equ	0xFF5
  8925                           prodh	equ	0xFF4
  8926                           prodl	equ	0xFF3
  8927                           intcon	equ	0xFF2
  8928                           intcon2	equ	0xFF1
  8929                           postinc0	equ	0xFEE
  8930                           wreg	equ	0xFE8
  8931                           postdec1	equ	0xFE5
  8932                           plusw1	equ	0xFE3
  8933                           fsr1l	equ	0xFE1
  8934                           indf2	equ	0xFDF
  8935                           postinc2	equ	0xFDE
  8936                           postdec2	equ	0xFDD
  8937                           plusw2	equ	0xFDB
  8938                           fsr2h	equ	0xFDA
  8939                           fsr2l	equ	0xFD9
  8940                           status	equ	0xFD8
  8941                           
  8942 ;; *************** function _Decrease_Speed *****************
  8943 ;; Defined at:
  8944 ;;		line 58 in file "Fan_Support.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;		None
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;		None
  8949 ;; Return value:  Size  Location     Type
  8950 ;;		None               void
  8951 ;; Registers used:
  8952 ;;		wreg, status,2, status,0, cstack
  8953 ;; Tracked objects:
  8954 ;;		On entry : 0/0
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8962 ;;Total ram usage:        0 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; Hardware stack levels required when called:    6
  8965 ;; This function calls:
  8966 ;;		_Do_Beep
  8967 ;;		_do_update_pwm
  8968 ;; This function is called by:
  8969 ;;		_main
  8970 ;; This function uses a non-reentrant model
  8971 ;;
  8972                           
  8973                           	psect	text46
  8974  00218A                     __ptext46:
  8975                           	opt stack 0
  8976  00218A                     _Decrease_Speed:
  8977                           	opt stack 24
  8978                           
  8979                           ;Fan_Support.c: 60: if(duty_cycle == 0)
  8980                           
  8981                           ;incstack = 0
  8982  00218A  505C               	movf	_duty_cycle,w,c
  8983  00218C  A4D8               	btfss	status,2,c
  8984  00218E  D008               	goto	l6161
  8985                           
  8986                           ;Fan_Support.c: 61: {
  8987                           ;Fan_Support.c: 62: Do_Beep();
  8988  002190  ECB2  F011         	call	_Do_Beep	;wreg free
  8989                           
  8990                           ;Fan_Support.c: 63: Do_Beep();
  8991  002194  ECB2  F011         	call	_Do_Beep	;wreg free
  8992                           
  8993                           ;Fan_Support.c: 64: do_update_pwm(duty_cycle);
  8994  002198  505C               	movf	_duty_cycle,w,c
  8995  00219A  ECC8  F00B         	call	_do_update_pwm
  8996                           
  8997                           ;Fan_Support.c: 65: }
  8998  00219E  D006               	goto	l52
  8999  0021A0                     l6161:
  9000                           
  9001                           ;Fan_Support.c: 66: else
  9002                           ;Fan_Support.c: 67: {
  9003                           ;Fan_Support.c: 68: duty_cycle -= 5;
  9004  0021A0  0E05               	movlw	5
  9005  0021A2  5E5C               	subwf	_duty_cycle,f,c
  9006                           
  9007                           ;Fan_Support.c: 69: do_update_pwm(duty_cycle);
  9008  0021A4  505C               	movf	_duty_cycle,w,c
  9009  0021A6  ECC8  F00B         	call	_do_update_pwm
  9010  0021AA  D000               	goto	l52
  9011  0021AC                     l52:
  9012  0021AC  0012               	return		;funcret
  9013  0021AE                     __end_of_Decrease_Speed:
  9014                           	opt stack 0
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           intcon	equ	0xFF2
  9022                           intcon2	equ	0xFF1
  9023                           postinc0	equ	0xFEE
  9024                           wreg	equ	0xFE8
  9025                           postdec1	equ	0xFE5
  9026                           plusw1	equ	0xFE3
  9027                           fsr1l	equ	0xFE1
  9028                           indf2	equ	0xFDF
  9029                           postinc2	equ	0xFDE
  9030                           postdec2	equ	0xFDD
  9031                           plusw2	equ	0xFDB
  9032                           fsr2h	equ	0xFDA
  9033                           fsr2l	equ	0xFD9
  9034                           status	equ	0xFD8
  9035                           
  9036 ;; *************** function _do_update_pwm *****************
  9037 ;; Defined at:
  9038 ;;		line 73 in file "Fan_Support.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  duty_cycle      1    wreg     unsigned char 
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;  duty_cycle      1   64[COMRAM] unsigned char 
  9043 ;;  dc_f            3   61[COMRAM] float 
  9044 ;;  dc_I            2   65[COMRAM] int 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;		None               void
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;Total ram usage:        9 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    5
  9061 ;; This function calls:
  9062 ;;		___ftdiv
  9063 ;;		___ftmul
  9064 ;;		___fttol
  9065 ;;		___lbtoft
  9066 ;; This function is called by:
  9067 ;;		_Turn_On_Fan
  9068 ;;		_Increase_Speed
  9069 ;;		_Decrease_Speed
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           	psect	text47
  9074  001790                     __ptext47:
  9075                           	opt stack 0
  9076  001790                     _do_update_pwm:
  9077                           	opt stack 23
  9078                           
  9079                           ;incstack = 0
  9080                           ;do_update_pwm@duty_cycle stored from wreg
  9081  001790  6E41               	movwf	do_update_pwm@duty_cycle,c
  9082                           
  9083                           ;Fan_Support.c: 75: float dc_f;
  9084                           ;Fan_Support.c: 76: int dc_I;
  9085                           ;Fan_Support.c: 77: PR2 = 0b00000100 ;
  9086  001792  0E04               	movlw	4
  9087  001794  6ECB               	movwf	4043,c	;volatile
  9088                           
  9089                           ;Fan_Support.c: 78: T2CON = 0b00000111 ;
  9090  001796  0E07               	movlw	7
  9091  001798  6ECA               	movwf	4042,c	;volatile
  9092                           
  9093                           ;Fan_Support.c: 79: dc_f = ( 4.0 * duty_cycle / 20.0) ;
  9094  00179A  0E00               	movlw	0
  9095  00179C  6E20               	movwf	___ftmul@f2,c
  9096  00179E  0E80               	movlw	128
  9097  0017A0  6E21               	movwf	___ftmul@f2+1,c
  9098  0017A2  0E40               	movlw	64
  9099  0017A4  6E22               	movwf	___ftmul@f2+2,c
  9100  0017A6  5041               	movf	do_update_pwm@duty_cycle,w,c
  9101  0017A8  ECB2  F010         	call	___lbtoft
  9102  0017AC  C019  F01D         	movff	?___lbtoft,___ftmul@f1
  9103  0017B0  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
  9104  0017B4  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
  9105  0017B8  EC1E  F009         	call	___ftmul	;wreg free
  9106  0017BC  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
  9107  0017C0  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
  9108  0017C4  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
  9109  0017C8  0E00               	movlw	0
  9110  0017CA  6E2F               	movwf	___ftdiv@f2,c
  9111  0017CC  0EA0               	movlw	160
  9112  0017CE  6E30               	movwf	___ftdiv@f2+1,c
  9113  0017D0  0E41               	movlw	65
  9114  0017D2  6E31               	movwf	___ftdiv@f2+2,c
  9115  0017D4  EC86  F00A         	call	___ftdiv	;wreg free
  9116  0017D8  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
  9117  0017DC  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
  9118  0017E0  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
  9119                           
  9120                           ;Fan_Support.c: 81: dc_I = (int) dc_f;
  9121  0017E4  C03E  F011         	movff	do_update_pwm@dc_f,___fttol@f1
  9122  0017E8  C03F  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
  9123  0017EC  C040  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
  9124  0017F0  EC13  F00A         	call	___fttol	;wreg free
  9125  0017F4  C011  F042         	movff	?___fttol,do_update_pwm@dc_I
  9126  0017F8  C012  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
  9127                           
  9128                           ;Fan_Support.c: 82: if (dc_I > duty_cycle) dc_I++;
  9129  0017FC  5041               	movf	do_update_pwm@duty_cycle,w,c
  9130  0017FE  6E3B               	movwf	??_do_update_pwm& (0+255),c
  9131  001800  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
  9132  001802  5042               	movf	do_update_pwm@dc_I,w,c
  9133  001804  5C3B               	subwf	??_do_update_pwm,w,c
  9134  001806  503C               	movf	??_do_update_pwm+1,w,c
  9135  001808  0A80               	xorlw	128
  9136  00180A  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
  9137  00180C  5043               	movf	do_update_pwm@dc_I+1,w,c
  9138  00180E  0A80               	xorlw	128
  9139  001810  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
  9140  001812  B0D8               	btfsc	status,0,c
  9141  001814  D003               	goto	l5515
  9142  001816  4A42               	infsnz	do_update_pwm@dc_I,f,c
  9143  001818  2A43               	incf	do_update_pwm@dc_I+1,f,c
  9144  00181A  D000               	goto	l5515
  9145  00181C                     l5515:
  9146                           
  9147                           ;Fan_Support.c: 83: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
  9148  00181C  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9149  001820  0E03               	movlw	3
  9150  001822  163B               	andwf	??_do_update_pwm,f,c
  9151  001824  383B               	swapf	??_do_update_pwm,w,c
  9152  001826  0BF0               	andlw	240
  9153  001828  090C               	iorlw	12
  9154  00182A  6EBD               	movwf	4029,c	;volatile
  9155                           
  9156                           ;Fan_Support.c: 84: CCPR1L = (dc_I) >> 2;
  9157  00182C  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
  9158  001830  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
  9159  001834  343C               	rlcf	??_do_update_pwm+1,w,c
  9160  001836  323C               	rrcf	??_do_update_pwm+1,f,c
  9161  001838  323B               	rrcf	??_do_update_pwm,f,c
  9162  00183A  343C               	rlcf	??_do_update_pwm+1,w,c
  9163  00183C  323C               	rrcf	??_do_update_pwm+1,f,c
  9164  00183E  323B               	rrcf	??_do_update_pwm,f,c
  9165  001840  503B               	movf	??_do_update_pwm,w,c
  9166  001842  6EBE               	movwf	4030,c	;volatile
  9167  001844  0012               	return		;funcret
  9168  001846                     __end_of_do_update_pwm:
  9169                           	opt stack 0
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           prodh	equ	0xFF4
  9175                           prodl	equ	0xFF3
  9176                           intcon	equ	0xFF2
  9177                           intcon2	equ	0xFF1
  9178                           postinc0	equ	0xFEE
  9179                           wreg	equ	0xFE8
  9180                           postdec1	equ	0xFE5
  9181                           plusw1	equ	0xFE3
  9182                           fsr1l	equ	0xFE1
  9183                           indf2	equ	0xFDF
  9184                           postinc2	equ	0xFDE
  9185                           postdec2	equ	0xFDD
  9186                           plusw2	equ	0xFDB
  9187                           fsr2h	equ	0xFDA
  9188                           fsr2l	equ	0xFD9
  9189                           status	equ	0xFD8
  9190                           
  9191 ;; *************** function ___lbtoft *****************
  9192 ;; Defined at:
  9193 ;;		line 27 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  c               1    wreg     unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  c               1   27[COMRAM] unsigned char 
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  3   24[COMRAM] float 
  9200 ;; Registers used:
  9201 ;;		wreg, status,2, status,0, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9207 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9211 ;;Total ram usage:        4 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    4
  9214 ;; This function calls:
  9215 ;;		___ftpack
  9216 ;; This function is called by:
  9217 ;;		_do_update_pwm
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221                           	psect	text48
  9222  002164                     __ptext48:
  9223                           	opt stack 0
  9224  002164                     ___lbtoft:
  9225                           	opt stack 23
  9226                           
  9227                           ;incstack = 0
  9228                           ;___lbtoft@c stored from wreg
  9229  002164  6E1C               	movwf	___lbtoft@c,c
  9230  002166  501C               	movf	___lbtoft@c,w,c
  9231  002168  6E11               	movwf	___ftpack@arg,c
  9232  00216A  6A12               	clrf	___ftpack@arg+1,c
  9233  00216C  6A13               	clrf	___ftpack@arg+2,c
  9234  00216E  0E8E               	movlw	142
  9235  002170  6E14               	movwf	___ftpack@exp,c
  9236  002172  0E00               	movlw	0
  9237  002174  6E15               	movwf	___ftpack@sign,c
  9238  002176  EC65  F00B         	call	___ftpack	;wreg free
  9239  00217A  C011  F019         	movff	?___ftpack,?___lbtoft
  9240  00217E  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
  9241  002182  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
  9242  002186  D000               	goto	l1322
  9243  002188                     l1322:
  9244  002188  0012               	return		;funcret
  9245  00218A                     __end_of___lbtoft:
  9246                           	opt stack 0
  9247                           tblptru	equ	0xFF8
  9248                           tblptrh	equ	0xFF7
  9249                           tblptrl	equ	0xFF6
  9250                           tablat	equ	0xFF5
  9251                           prodh	equ	0xFF4
  9252                           prodl	equ	0xFF3
  9253                           intcon	equ	0xFF2
  9254                           intcon2	equ	0xFF1
  9255                           postinc0	equ	0xFEE
  9256                           wreg	equ	0xFE8
  9257                           postdec1	equ	0xFE5
  9258                           plusw1	equ	0xFE3
  9259                           fsr1l	equ	0xFE1
  9260                           indf2	equ	0xFDF
  9261                           postinc2	equ	0xFDE
  9262                           postdec2	equ	0xFDD
  9263                           plusw2	equ	0xFDB
  9264                           fsr2h	equ	0xFDA
  9265                           fsr2l	equ	0xFD9
  9266                           status	equ	0xFD8
  9267                           
  9268 ;; *************** function ___fttol *****************
  9269 ;; Defined at:
  9270 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  f1              3   16[COMRAM] float 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  lval            4   26[COMRAM] unsigned long 
  9275 ;;  exp1            1   30[COMRAM] unsigned char 
  9276 ;;  sign1           1   25[COMRAM] unsigned char 
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  4   16[COMRAM] long 
  9279 ;; Registers used:
  9280 ;;		wreg, status,2, status,0
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9290 ;;Total ram usage:       15 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; Hardware stack levels required when called:    3
  9293 ;; This function calls:
  9294 ;;		Nothing
  9295 ;; This function is called by:
  9296 ;;		_do_update_pwm
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text49
  9301  001426                     __ptext49:
  9302                           	opt stack 0
  9303  001426                     ___fttol:
  9304                           	opt stack 24
  9305                           
  9306                           ;incstack = 0
  9307  001426  C013  F015         	movff	___fttol@f1+2,??___fttol
  9308  00142A  6A16               	clrf	(??___fttol+1)& (0+255),c
  9309  00142C  6A17               	clrf	(??___fttol+2)& (0+255),c
  9310  00142E  3412               	rlcf	___fttol@f1+1,w,c
  9311  001430  3615               	rlcf	??___fttol& (0+255),f,c
  9312  001432  E301               	bnc	u4021
  9313  001434  8016               	bsf	(??___fttol+1)& (0+255),0,c
  9314  001436                     u4021:
  9315  001436  5015               	movf	??___fttol,w,c
  9316  001438  6E1F               	movwf	___fttol@exp1,c
  9317  00143A  501F               	movf	___fttol@exp1,w,c
  9318  00143C  A4D8               	btfss	status,2,c
  9319  00143E  D002               	goto	l5461
  9320  001440  D039               	goto	l5485
  9321  001442  D063               	goto	l1281
  9322  001444                     l5461:
  9323  001444  0E17               	movlw	23
  9324  001446  6E15               	movwf	??___fttol& (0+255),c
  9325  001448  C011  F016         	movff	___fttol@f1,??___fttol+1
  9326  00144C  C012  F017         	movff	___fttol@f1+1,??___fttol+2
  9327  001450  C013  F018         	movff	___fttol@f1+2,??___fttol+3
  9328  001454  2815               	incf	??___fttol,w,c
  9329  001456  6E19               	movwf	(??___fttol+4)& (0+255),c
  9330  001458  D004               	goto	u4040
  9331  00145A                     u4045:
  9332  00145A  90D8               	bcf	status,0,c
  9333  00145C  3218               	rrcf	??___fttol+3,f,c
  9334  00145E  3217               	rrcf	??___fttol+2,f,c
  9335  001460  3216               	rrcf	??___fttol+1,f,c
  9336  001462                     u4040:
  9337  001462  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
  9338  001464  D7FA               	goto	u4045
  9339  001466  5016               	movf	??___fttol+1,w,c
  9340  001468  6E1A               	movwf	___fttol@sign1,c
  9341  00146A  8E12               	bsf	___fttol@f1+1,7,c
  9342  00146C  0EFF               	movlw	255
  9343  00146E  1611               	andwf	___fttol@f1,f,c
  9344  001470  0EFF               	movlw	255
  9345  001472  1612               	andwf	___fttol@f1+1,f,c
  9346  001474  0E00               	movlw	0
  9347  001476  1613               	andwf	___fttol@f1+2,f,c
  9348  001478  5011               	movf	___fttol@f1,w,c
  9349  00147A  6E1B               	movwf	___fttol@lval,c
  9350  00147C  5012               	movf	___fttol@f1+1,w,c
  9351  00147E  6E1C               	movwf	___fttol@lval+1,c
  9352  001480  5013               	movf	___fttol@f1+2,w,c
  9353  001482  6E1D               	movwf	___fttol@lval+2,c
  9354  001484  6A1E               	clrf	___fttol@lval+3,c
  9355  001486  0E8E               	movlw	142
  9356  001488  5E1F               	subwf	___fttol@exp1,f,c
  9357  00148A  AE1F               	btfss	___fttol@exp1,7,c
  9358  00148C  D010               	goto	l5483
  9359  00148E  501F               	movf	___fttol@exp1,w,c
  9360  001490  0A80               	xorlw	128
  9361  001492  0F8F               	addlw	143
  9362  001494  B0D8               	btfsc	status,0,c
  9363  001496  D003               	goto	l5479
  9364  001498  D00D               	goto	l5485
  9365  00149A  D037               	goto	l1281
  9366  00149C  D000               	goto	l5479
  9367  00149E                     l5479:
  9368  00149E  90D8               	bcf	status,0,c
  9369  0014A0  321E               	rrcf	___fttol@lval+3,f,c
  9370  0014A2  321D               	rrcf	___fttol@lval+2,f,c
  9371  0014A4  321C               	rrcf	___fttol@lval+1,f,c
  9372  0014A6  321B               	rrcf	___fttol@lval,f,c
  9373  0014A8  3E1F               	incfsz	___fttol@exp1,f,c
  9374  0014AA  D7F9               	goto	l5479
  9375  0014AC  D019               	goto	l5493
  9376  0014AE                     l5483:
  9377  0014AE  0E17               	movlw	23
  9378  0014B0  641F               	cpfsgt	___fttol@exp1,c
  9379  0014B2  D011               	goto	l5491
  9380  0014B4                     l5485:
  9381  0014B4  0E00               	movlw	0
  9382  0014B6  6E11               	movwf	?___fttol,c
  9383  0014B8  0E00               	movlw	0
  9384  0014BA  6E12               	movwf	?___fttol+1,c
  9385  0014BC  0E00               	movlw	0
  9386  0014BE  6E13               	movwf	?___fttol+2,c
  9387  0014C0  0E00               	movlw	0
  9388  0014C2  6E14               	movwf	?___fttol+3,c
  9389  0014C4  D022               	goto	l1281
  9390  0014C6  D007               	goto	l5491
  9391  0014C8                     l5489:
  9392  0014C8  90D8               	bcf	status,0,c
  9393  0014CA  361B               	rlcf	___fttol@lval,f,c
  9394  0014CC  361C               	rlcf	___fttol@lval+1,f,c
  9395  0014CE  361D               	rlcf	___fttol@lval+2,f,c
  9396  0014D0  361E               	rlcf	___fttol@lval+3,f,c
  9397  0014D2  061F               	decf	___fttol@exp1,f,c
  9398  0014D4  D000               	goto	l5491
  9399  0014D6                     l5491:
  9400  0014D6  501F               	movf	___fttol@exp1,w,c
  9401  0014D8  B4D8               	btfsc	status,2,c
  9402  0014DA  D002               	goto	l5493
  9403  0014DC  D7F5               	goto	l5489
  9404  0014DE  D000               	goto	l5493
  9405  0014E0                     l5493:
  9406  0014E0  501A               	movf	___fttol@sign1,w,c
  9407  0014E2  B4D8               	btfsc	status,2,c
  9408  0014E4  D009               	goto	l5497
  9409  0014E6  1E1E               	comf	___fttol@lval+3,f,c
  9410  0014E8  1E1D               	comf	___fttol@lval+2,f,c
  9411  0014EA  1E1C               	comf	___fttol@lval+1,f,c
  9412  0014EC  6C1B               	negf	___fttol@lval,c
  9413  0014EE  0E00               	movlw	0
  9414  0014F0  221C               	addwfc	___fttol@lval+1,f,c
  9415  0014F2  221D               	addwfc	___fttol@lval+2,f,c
  9416  0014F4  221E               	addwfc	___fttol@lval+3,f,c
  9417  0014F6  D000               	goto	l5497
  9418  0014F8                     l5497:
  9419  0014F8  C01B  F011         	movff	___fttol@lval,?___fttol
  9420  0014FC  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
  9421  001500  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
  9422  001504  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
  9423  001508  D000               	goto	l1281
  9424  00150A                     l1281:
  9425  00150A  0012               	return		;funcret
  9426  00150C                     __end_of___fttol:
  9427                           	opt stack 0
  9428                           tblptru	equ	0xFF8
  9429                           tblptrh	equ	0xFF7
  9430                           tblptrl	equ	0xFF6
  9431                           tablat	equ	0xFF5
  9432                           prodh	equ	0xFF4
  9433                           prodl	equ	0xFF3
  9434                           intcon	equ	0xFF2
  9435                           intcon2	equ	0xFF1
  9436                           postinc0	equ	0xFEE
  9437                           wreg	equ	0xFE8
  9438                           postdec1	equ	0xFE5
  9439                           plusw1	equ	0xFE3
  9440                           fsr1l	equ	0xFE1
  9441                           indf2	equ	0xFDF
  9442                           postinc2	equ	0xFDE
  9443                           postdec2	equ	0xFDD
  9444                           plusw2	equ	0xFDB
  9445                           fsr2h	equ	0xFDA
  9446                           fsr2l	equ	0xFD9
  9447                           status	equ	0xFD8
  9448                           
  9449 ;; *************** function ___ftmul *****************
  9450 ;; Defined at:
  9451 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;  f1              3   28[COMRAM] float 
  9454 ;;  f2              3   31[COMRAM] float 
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  9457 ;;  sign            1   42[COMRAM] unsigned char 
  9458 ;;  cntr            1   41[COMRAM] unsigned char 
  9459 ;;  exp             1   37[COMRAM] unsigned char 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  3   28[COMRAM] float 
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9469 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;Total ram usage:       15 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    4
  9476 ;; This function calls:
  9477 ;;		___ftpack
  9478 ;; This function is called by:
  9479 ;;		_do_update_pwm
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           	psect	text50
  9484  00123C                     __ptext50:
  9485                           	opt stack 0
  9486  00123C                     ___ftmul:
  9487                           	opt stack 23
  9488                           
  9489                           ;incstack = 0
  9490  00123C  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
  9491  001240  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9492  001242  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9493  001244  341E               	rlcf	___ftmul@f1+1,w,c
  9494  001246  3623               	rlcf	??___ftmul& (0+255),f,c
  9495  001248  E301               	bnc	u3961
  9496  00124A  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9497  00124C                     u3961:
  9498  00124C  5023               	movf	??___ftmul,w,c
  9499  00124E  6E26               	movwf	___ftmul@exp,c
  9500  001250  5026               	movf	___ftmul@exp,w,c
  9501  001252  A4D8               	btfss	status,2,c
  9502  001254  D002               	goto	l5413
  9503  001256  D00E               	goto	l5415
  9504  001258  D06C               	goto	l1260
  9505  00125A                     l5413:
  9506  00125A  C022  F023         	movff	___ftmul@f2+2,??___ftmul
  9507  00125E  6A24               	clrf	(??___ftmul+1)& (0+255),c
  9508  001260  6A25               	clrf	(??___ftmul+2)& (0+255),c
  9509  001262  3421               	rlcf	___ftmul@f2+1,w,c
  9510  001264  3623               	rlcf	??___ftmul& (0+255),f,c
  9511  001266  E301               	bnc	u3981
  9512  001268  8024               	bsf	(??___ftmul+1)& (0+255),0,c
  9513  00126A                     u3981:
  9514  00126A  5023               	movf	??___ftmul,w,c
  9515  00126C  6E2B               	movwf	___ftmul@sign,c
  9516  00126E  502B               	movf	___ftmul@sign,w,c
  9517  001270  A4D8               	btfss	status,2,c
  9518  001272  D007               	goto	l5419
  9519  001274                     l5415:
  9520  001274  0E00               	movlw	0
  9521  001276  6E1D               	movwf	?___ftmul,c
  9522  001278  0E00               	movlw	0
  9523  00127A  6E1E               	movwf	?___ftmul+1,c
  9524  00127C  0E00               	movlw	0
  9525  00127E  6E1F               	movwf	?___ftmul+2,c
  9526  001280  D058               	goto	l1260
  9527  001282                     l5419:
  9528  001282  502B               	movf	___ftmul@sign,w,c
  9529  001284  0F7B               	addlw	123
  9530  001286  2626               	addwf	___ftmul@exp,f,c
  9531  001288  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
  9532  00128C  5022               	movf	___ftmul@f2+2,w,c
  9533  00128E  1A2B               	xorwf	___ftmul@sign,f,c
  9534  001290  0E80               	movlw	128
  9535  001292  162B               	andwf	___ftmul@sign,f,c
  9536  001294  8E1E               	bsf	___ftmul@f1+1,7,c
  9537  001296  8E21               	bsf	___ftmul@f2+1,7,c
  9538  001298  0EFF               	movlw	255
  9539  00129A  1620               	andwf	___ftmul@f2,f,c
  9540  00129C  0EFF               	movlw	255
  9541  00129E  1621               	andwf	___ftmul@f2+1,f,c
  9542  0012A0  0E00               	movlw	0
  9543  0012A2  1622               	andwf	___ftmul@f2+2,f,c
  9544  0012A4  0E00               	movlw	0
  9545  0012A6  6E27               	movwf	___ftmul@f3_as_product,c
  9546  0012A8  0E00               	movlw	0
  9547  0012AA  6E28               	movwf	___ftmul@f3_as_product+1,c
  9548  0012AC  0E00               	movlw	0
  9549  0012AE  6E29               	movwf	___ftmul@f3_as_product+2,c
  9550  0012B0  0E07               	movlw	7
  9551  0012B2  6E2A               	movwf	___ftmul@cntr,c
  9552  0012B4  D000               	goto	l5433
  9553  0012B6                     l5433:
  9554  0012B6  A01D               	btfss	___ftmul@f1,0,c
  9555  0012B8  D007               	goto	l5437
  9556  0012BA  5020               	movf	___ftmul@f2,w,c
  9557  0012BC  2627               	addwf	___ftmul@f3_as_product,f,c
  9558  0012BE  5021               	movf	___ftmul@f2+1,w,c
  9559  0012C0  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9560  0012C2  5022               	movf	___ftmul@f2+2,w,c
  9561  0012C4  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9562  0012C6  D000               	goto	l5437
  9563  0012C8                     l5437:
  9564  0012C8  90D8               	bcf	status,0,c
  9565  0012CA  321F               	rrcf	___ftmul@f1+2,f,c
  9566  0012CC  321E               	rrcf	___ftmul@f1+1,f,c
  9567  0012CE  321D               	rrcf	___ftmul@f1,f,c
  9568  0012D0  90D8               	bcf	status,0,c
  9569  0012D2  3620               	rlcf	___ftmul@f2,f,c
  9570  0012D4  3621               	rlcf	___ftmul@f2+1,f,c
  9571  0012D6  3622               	rlcf	___ftmul@f2+2,f,c
  9572  0012D8  2E2A               	decfsz	___ftmul@cntr,f,c
  9573  0012DA  D7ED               	goto	l5433
  9574  0012DC  D000               	goto	l5441
  9575  0012DE                     l5441:
  9576  0012DE  0E09               	movlw	9
  9577  0012E0  6E2A               	movwf	___ftmul@cntr,c
  9578  0012E2  D000               	goto	l5443
  9579  0012E4                     l5443:
  9580  0012E4  A01D               	btfss	___ftmul@f1,0,c
  9581  0012E6  D007               	goto	l5447
  9582  0012E8  5020               	movf	___ftmul@f2,w,c
  9583  0012EA  2627               	addwf	___ftmul@f3_as_product,f,c
  9584  0012EC  5021               	movf	___ftmul@f2+1,w,c
  9585  0012EE  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  9586  0012F0  5022               	movf	___ftmul@f2+2,w,c
  9587  0012F2  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  9588  0012F4  D000               	goto	l5447
  9589  0012F6                     l5447:
  9590  0012F6  90D8               	bcf	status,0,c
  9591  0012F8  321F               	rrcf	___ftmul@f1+2,f,c
  9592  0012FA  321E               	rrcf	___ftmul@f1+1,f,c
  9593  0012FC  321D               	rrcf	___ftmul@f1,f,c
  9594  0012FE  90D8               	bcf	status,0,c
  9595  001300  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  9596  001302  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  9597  001304  3227               	rrcf	___ftmul@f3_as_product,f,c
  9598  001306  2E2A               	decfsz	___ftmul@cntr,f,c
  9599  001308  D7ED               	goto	l5443
  9600  00130A  D000               	goto	l5451
  9601  00130C                     l5451:
  9602  00130C  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  9603  001310  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9604  001314  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9605  001318  C026  F014         	movff	___ftmul@exp,___ftpack@exp
  9606  00131C  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
  9607  001320  EC65  F00B         	call	___ftpack	;wreg free
  9608  001324  C011  F01D         	movff	?___ftpack,?___ftmul
  9609  001328  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
  9610  00132C  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
  9611  001330  D000               	goto	l1260
  9612  001332                     l1260:
  9613  001332  0012               	return		;funcret
  9614  001334                     __end_of___ftmul:
  9615                           	opt stack 0
  9616                           tblptru	equ	0xFF8
  9617                           tblptrh	equ	0xFF7
  9618                           tblptrl	equ	0xFF6
  9619                           tablat	equ	0xFF5
  9620                           prodh	equ	0xFF4
  9621                           prodl	equ	0xFF3
  9622                           intcon	equ	0xFF2
  9623                           intcon2	equ	0xFF1
  9624                           postinc0	equ	0xFEE
  9625                           wreg	equ	0xFE8
  9626                           postdec1	equ	0xFE5
  9627                           plusw1	equ	0xFE3
  9628                           fsr1l	equ	0xFE1
  9629                           indf2	equ	0xFDF
  9630                           postinc2	equ	0xFDE
  9631                           postdec2	equ	0xFDD
  9632                           plusw2	equ	0xFDB
  9633                           fsr2h	equ	0xFDA
  9634                           fsr2l	equ	0xFD9
  9635                           status	equ	0xFD8
  9636                           
  9637 ;; *************** function ___ftdiv *****************
  9638 ;; Defined at:
  9639 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;  f1              3   43[COMRAM] float 
  9642 ;;  f2              3   46[COMRAM] float 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  f3              3   53[COMRAM] float 
  9645 ;;  sign            1   57[COMRAM] unsigned char 
  9646 ;;  exp             1   56[COMRAM] unsigned char 
  9647 ;;  cntr            1   52[COMRAM] unsigned char 
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  3   43[COMRAM] float 
  9650 ;; Registers used:
  9651 ;;		wreg, status,2, status,0, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9657 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9658 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;Total ram usage:       15 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    4
  9664 ;; This function calls:
  9665 ;;		___ftpack
  9666 ;; This function is called by:
  9667 ;;		_do_update_pwm
  9668 ;; This function uses a non-reentrant model
  9669 ;;
  9670                           
  9671                           	psect	text51
  9672  00150C                     __ptext51:
  9673                           	opt stack 0
  9674  00150C                     ___ftdiv:
  9675                           	opt stack 23
  9676                           
  9677                           ;incstack = 0
  9678  00150C  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
  9679  001510  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9680  001512  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9681  001514  342D               	rlcf	___ftdiv@f1+1,w,c
  9682  001516  3632               	rlcf	??___ftdiv& (0+255),f,c
  9683  001518  E301               	bnc	u3911
  9684  00151A  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9685  00151C                     u3911:
  9686  00151C  5032               	movf	??___ftdiv,w,c
  9687  00151E  6E39               	movwf	___ftdiv@exp,c
  9688  001520  5039               	movf	___ftdiv@exp,w,c
  9689  001522  A4D8               	btfss	status,2,c
  9690  001524  D002               	goto	l5367
  9691  001526  D00E               	goto	l5369
  9692  001528  D061               	goto	l1245
  9693  00152A                     l5367:
  9694  00152A  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
  9695  00152E  6A33               	clrf	(??___ftdiv+1)& (0+255),c
  9696  001530  6A34               	clrf	(??___ftdiv+2)& (0+255),c
  9697  001532  3430               	rlcf	___ftdiv@f2+1,w,c
  9698  001534  3632               	rlcf	??___ftdiv& (0+255),f,c
  9699  001536  E301               	bnc	u3931
  9700  001538  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
  9701  00153A                     u3931:
  9702  00153A  5032               	movf	??___ftdiv,w,c
  9703  00153C  6E3A               	movwf	___ftdiv@sign,c
  9704  00153E  503A               	movf	___ftdiv@sign,w,c
  9705  001540  A4D8               	btfss	status,2,c
  9706  001542  D007               	goto	l5373
  9707  001544                     l5369:
  9708  001544  0E00               	movlw	0
  9709  001546  6E2C               	movwf	?___ftdiv,c
  9710  001548  0E00               	movlw	0
  9711  00154A  6E2D               	movwf	?___ftdiv+1,c
  9712  00154C  0E00               	movlw	0
  9713  00154E  6E2E               	movwf	?___ftdiv+2,c
  9714  001550  D04D               	goto	l1245
  9715  001552                     l5373:
  9716  001552  0E00               	movlw	0
  9717  001554  6E36               	movwf	___ftdiv@f3,c
  9718  001556  0E00               	movlw	0
  9719  001558  6E37               	movwf	___ftdiv@f3+1,c
  9720  00155A  0E00               	movlw	0
  9721  00155C  6E38               	movwf	___ftdiv@f3+2,c
  9722  00155E  503A               	movf	___ftdiv@sign,w,c
  9723  001560  0F89               	addlw	137
  9724  001562  5E39               	subwf	___ftdiv@exp,f,c
  9725  001564  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
  9726  001568  5031               	movf	___ftdiv@f2+2,w,c
  9727  00156A  1A3A               	xorwf	___ftdiv@sign,f,c
  9728  00156C  0E80               	movlw	128
  9729  00156E  163A               	andwf	___ftdiv@sign,f,c
  9730  001570  8E2D               	bsf	___ftdiv@f1+1,7,c
  9731  001572  0EFF               	movlw	255
  9732  001574  162C               	andwf	___ftdiv@f1,f,c
  9733  001576  0EFF               	movlw	255
  9734  001578  162D               	andwf	___ftdiv@f1+1,f,c
  9735  00157A  0E00               	movlw	0
  9736  00157C  162E               	andwf	___ftdiv@f1+2,f,c
  9737  00157E  8E30               	bsf	___ftdiv@f2+1,7,c
  9738  001580  0EFF               	movlw	255
  9739  001582  162F               	andwf	___ftdiv@f2,f,c
  9740  001584  0EFF               	movlw	255
  9741  001586  1630               	andwf	___ftdiv@f2+1,f,c
  9742  001588  0E00               	movlw	0
  9743  00158A  1631               	andwf	___ftdiv@f2+2,f,c
  9744  00158C  0E18               	movlw	24
  9745  00158E  6E35               	movwf	___ftdiv@cntr,c
  9746  001590  D000               	goto	l5393
  9747  001592                     l5393:
  9748  001592  90D8               	bcf	status,0,c
  9749  001594  3636               	rlcf	___ftdiv@f3,f,c
  9750  001596  3637               	rlcf	___ftdiv@f3+1,f,c
  9751  001598  3638               	rlcf	___ftdiv@f3+2,f,c
  9752  00159A  502F               	movf	___ftdiv@f2,w,c
  9753  00159C  5C2C               	subwf	___ftdiv@f1,w,c
  9754  00159E  5030               	movf	___ftdiv@f2+1,w,c
  9755  0015A0  582D               	subwfb	___ftdiv@f1+1,w,c
  9756  0015A2  5031               	movf	___ftdiv@f2+2,w,c
  9757  0015A4  582E               	subwfb	___ftdiv@f1+2,w,c
  9758  0015A6  A0D8               	btfss	status,0,c
  9759  0015A8  D007               	goto	l1248
  9760  0015AA  502F               	movf	___ftdiv@f2,w,c
  9761  0015AC  5E2C               	subwf	___ftdiv@f1,f,c
  9762  0015AE  5030               	movf	___ftdiv@f2+1,w,c
  9763  0015B0  5A2D               	subwfb	___ftdiv@f1+1,f,c
  9764  0015B2  5031               	movf	___ftdiv@f2+2,w,c
  9765  0015B4  5A2E               	subwfb	___ftdiv@f1+2,f,c
  9766  0015B6  8036               	bsf	___ftdiv@f3,0,c
  9767  0015B8                     l1248:
  9768  0015B8  90D8               	bcf	status,0,c
  9769  0015BA  362C               	rlcf	___ftdiv@f1,f,c
  9770  0015BC  362D               	rlcf	___ftdiv@f1+1,f,c
  9771  0015BE  362E               	rlcf	___ftdiv@f1+2,f,c
  9772  0015C0  2E35               	decfsz	___ftdiv@cntr,f,c
  9773  0015C2  D7E7               	goto	l5393
  9774  0015C4  D000               	goto	l5403
  9775  0015C6                     l5403:
  9776  0015C6  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
  9777  0015CA  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9778  0015CE  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9779  0015D2  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
  9780  0015D6  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
  9781  0015DA  EC65  F00B         	call	___ftpack	;wreg free
  9782  0015DE  C011  F02C         	movff	?___ftpack,?___ftdiv
  9783  0015E2  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
  9784  0015E6  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
  9785  0015EA  D000               	goto	l1245
  9786  0015EC                     l1245:
  9787  0015EC  0012               	return		;funcret
  9788  0015EE                     __end_of___ftdiv:
  9789                           	opt stack 0
  9790                           tblptru	equ	0xFF8
  9791                           tblptrh	equ	0xFF7
  9792                           tblptrl	equ	0xFF6
  9793                           tablat	equ	0xFF5
  9794                           prodh	equ	0xFF4
  9795                           prodl	equ	0xFF3
  9796                           intcon	equ	0xFF2
  9797                           intcon2	equ	0xFF1
  9798                           postinc0	equ	0xFEE
  9799                           wreg	equ	0xFE8
  9800                           postdec1	equ	0xFE5
  9801                           plusw1	equ	0xFE3
  9802                           fsr1l	equ	0xFE1
  9803                           indf2	equ	0xFDF
  9804                           postinc2	equ	0xFDE
  9805                           postdec2	equ	0xFDD
  9806                           plusw2	equ	0xFDB
  9807                           fsr2h	equ	0xFDA
  9808                           fsr2l	equ	0xFD9
  9809                           status	equ	0xFD8
  9810                           
  9811 ;; *************** function ___ftpack *****************
  9812 ;; Defined at:
  9813 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;  arg             3   16[COMRAM] unsigned um
  9816 ;;  exp             1   19[COMRAM] unsigned char 
  9817 ;;  sign            1   20[COMRAM] unsigned char 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;		None
  9820 ;; Return value:  Size  Location     Type
  9821 ;;                  3   16[COMRAM] float 
  9822 ;; Registers used:
  9823 ;;		wreg, status,2, status,0
  9824 ;; Tracked objects:
  9825 ;;		On entry : 0/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9829 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;Total ram usage:        8 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; Hardware stack levels required when called:    3
  9836 ;; This function calls:
  9837 ;;		Nothing
  9838 ;; This function is called by:
  9839 ;;		___ftdiv
  9840 ;;		___ftmul
  9841 ;;		___lbtoft
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           	psect	text52
  9846  0016CA                     __ptext52:
  9847                           	opt stack 0
  9848  0016CA                     ___ftpack:
  9849                           	opt stack 23
  9850                           
  9851                           ;incstack = 0
  9852  0016CA  5014               	movf	___ftpack@exp,w,c
  9853  0016CC  B4D8               	btfsc	status,2,c
  9854  0016CE  D005               	goto	l5257
  9855  0016D0  5011               	movf	___ftpack@arg,w,c
  9856  0016D2  1012               	iorwf	___ftpack@arg+1,w,c
  9857  0016D4  1013               	iorwf	___ftpack@arg+2,w,c
  9858  0016D6  A4D8               	btfss	status,2,c
  9859  0016D8  D00E               	goto	l5263
  9860  0016DA                     l5257:
  9861  0016DA  0E00               	movlw	0
  9862  0016DC  6E11               	movwf	?___ftpack,c
  9863  0016DE  0E00               	movlw	0
  9864  0016E0  6E12               	movwf	?___ftpack+1,c
  9865  0016E2  0E00               	movlw	0
  9866  0016E4  6E13               	movwf	?___ftpack+2,c
  9867  0016E6  D053               	goto	l1173
  9868  0016E8  D006               	goto	l5263
  9869  0016EA                     l5261:
  9870  0016EA  2A14               	incf	___ftpack@exp,f,c
  9871  0016EC  90D8               	bcf	status,0,c
  9872  0016EE  3213               	rrcf	___ftpack@arg+2,f,c
  9873  0016F0  3212               	rrcf	___ftpack@arg+1,f,c
  9874  0016F2  3211               	rrcf	___ftpack@arg,f,c
  9875  0016F4  D000               	goto	l5263
  9876  0016F6                     l5263:
  9877  0016F6  0E00               	movlw	0
  9878  0016F8  1411               	andwf	___ftpack@arg,w,c
  9879  0016FA  6E16               	movwf	??___ftpack& (0+255),c
  9880  0016FC  0E00               	movlw	0
  9881  0016FE  1412               	andwf	___ftpack@arg+1,w,c
  9882  001700  6E17               	movwf	(??___ftpack+1)& (0+255),c
  9883  001702  0EFE               	movlw	254
  9884  001704  1413               	andwf	___ftpack@arg+2,w,c
  9885  001706  6E18               	movwf	(??___ftpack+2)& (0+255),c
  9886  001708  5016               	movf	??___ftpack,w,c
  9887  00170A  1017               	iorwf	??___ftpack+1,w,c
  9888  00170C  1018               	iorwf	??___ftpack+2,w,c
  9889  00170E  B4D8               	btfsc	status,2,c
  9890  001710  D00E               	goto	l5269
  9891  001712  D7EB               	goto	l5261
  9892  001714  D00C               	goto	l5269
  9893  001716                     l5265:
  9894  001716  2A14               	incf	___ftpack@exp,f,c
  9895  001718  0E01               	movlw	1
  9896  00171A  2611               	addwf	___ftpack@arg,f,c
  9897  00171C  0E00               	movlw	0
  9898  00171E  2212               	addwfc	___ftpack@arg+1,f,c
  9899  001720  0E00               	movlw	0
  9900  001722  2213               	addwfc	___ftpack@arg+2,f,c
  9901  001724  90D8               	bcf	status,0,c
  9902  001726  3213               	rrcf	___ftpack@arg+2,f,c
  9903  001728  3212               	rrcf	___ftpack@arg+1,f,c
  9904  00172A  3211               	rrcf	___ftpack@arg,f,c
  9905  00172C  D000               	goto	l5269
  9906  00172E                     l5269:
  9907  00172E  0E00               	movlw	0
  9908  001730  1411               	andwf	___ftpack@arg,w,c
  9909  001732  6E16               	movwf	??___ftpack& (0+255),c
  9910  001734  0E00               	movlw	0
  9911  001736  1412               	andwf	___ftpack@arg+1,w,c
  9912  001738  6E17               	movwf	(??___ftpack+1)& (0+255),c
  9913  00173A  0EFF               	movlw	255
  9914  00173C  1413               	andwf	___ftpack@arg+2,w,c
  9915  00173E  6E18               	movwf	(??___ftpack+2)& (0+255),c
  9916  001740  5016               	movf	??___ftpack,w,c
  9917  001742  1017               	iorwf	??___ftpack+1,w,c
  9918  001744  1018               	iorwf	??___ftpack+2,w,c
  9919  001746  B4D8               	btfsc	status,2,c
  9920  001748  D008               	goto	l5273
  9921  00174A  D7E5               	goto	l5265
  9922  00174C  D006               	goto	l5273
  9923  00174E                     l5271:
  9924  00174E  0614               	decf	___ftpack@exp,f,c
  9925  001750  90D8               	bcf	status,0,c
  9926  001752  3611               	rlcf	___ftpack@arg,f,c
  9927  001754  3612               	rlcf	___ftpack@arg+1,f,c
  9928  001756  3613               	rlcf	___ftpack@arg+2,f,c
  9929  001758  D000               	goto	l5273
  9930  00175A                     l5273:
  9931  00175A  BE12               	btfsc	___ftpack@arg+1,7,c
  9932  00175C  D004               	goto	l1184
  9933  00175E  0E02               	movlw	2
  9934  001760  6014               	cpfslt	___ftpack@exp,c
  9935  001762  D7F5               	goto	l5271
  9936  001764  D000               	goto	l1184
  9937  001766                     l1184:
  9938  001766  B014               	btfsc	___ftpack@exp,0,c
  9939  001768  D002               	goto	l5279
  9940  00176A  9E12               	bcf	___ftpack@arg+1,7,c
  9941  00176C  D000               	goto	l5279
  9942  00176E                     l5279:
  9943  00176E  90D8               	bcf	status,0,c
  9944  001770  3214               	rrcf	___ftpack@exp,f,c
  9945  001772  5014               	movf	___ftpack@exp,w,c
  9946  001774  1213               	iorwf	___ftpack@arg+2,f,c
  9947  001776  5015               	movf	___ftpack@sign,w,c
  9948  001778  B4D8               	btfsc	status,2,c
  9949  00177A  D002               	goto	l5285
  9950  00177C  8E13               	bsf	___ftpack@arg+2,7,c
  9951  00177E  D000               	goto	l5285
  9952  001780                     l5285:
  9953  001780  C011  F011         	movff	___ftpack@arg,?___ftpack
  9954  001784  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  9955  001788  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  9956  00178C  D000               	goto	l1173
  9957  00178E                     l1173:
  9958  00178E  0012               	return		;funcret
  9959  001790                     __end_of___ftpack:
  9960                           	opt stack 0
  9961                           tblptru	equ	0xFF8
  9962                           tblptrh	equ	0xFF7
  9963                           tblptrl	equ	0xFF6
  9964                           tablat	equ	0xFF5
  9965                           prodh	equ	0xFF4
  9966                           prodl	equ	0xFF3
  9967                           intcon	equ	0xFF2
  9968                           intcon2	equ	0xFF1
  9969                           postinc0	equ	0xFEE
  9970                           wreg	equ	0xFE8
  9971                           postdec1	equ	0xFE5
  9972                           plusw1	equ	0xFE3
  9973                           fsr1l	equ	0xFE1
  9974                           indf2	equ	0xFDF
  9975                           postinc2	equ	0xFDE
  9976                           postdec2	equ	0xFDD
  9977                           plusw2	equ	0xFDB
  9978                           fsr2h	equ	0xFDA
  9979                           fsr2l	equ	0xFD9
  9980                           status	equ	0xFD8
  9981                           
  9982 ;; *************** function _Do_Beep *****************
  9983 ;; Defined at:
  9984 ;;		line 6 in file "Utils.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;		None
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;		None
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  2   16[None  ] int 
  9991 ;; Registers used:
  9992 ;;		wreg, status,2, status,0, cstack
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;Total ram usage:        0 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; Hardware stack levels required when called:    4
 10005 ;; This function calls:
 10006 ;;		_Activate_Buzzer
 10007 ;;		_Deactivate_Buzzer
 10008 ;;		_Wait_One_Sec
 10009 ;; This function is called by:
 10010 ;;		_Increase_Speed
 10011 ;;		_Decrease_Speed
 10012 ;;		_main
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           	psect	text53
 10017  002364                     __ptext53:
 10018                           	opt stack 0
 10019  002364                     _Do_Beep:
 10020                           	opt stack 25
 10021                           
 10022                           ;Utils.c: 8: Activate_Buzzer();
 10023                           
 10024                           ;incstack = 0
 10025  002364  EC70  F011         	call	_Activate_Buzzer	;wreg free
 10026                           
 10027                           ;Utils.c: 9: Wait_One_Sec();
 10028  002368  ECD7  F010         	call	_Wait_One_Sec	;wreg free
 10029                           
 10030                           ;Utils.c: 10: Deactivate_Buzzer();
 10031  00236C  ECD8  F011         	call	_Deactivate_Buzzer	;wreg free
 10032  002370  0012               	return		;funcret
 10033  002372                     __end_of_Do_Beep:
 10034                           	opt stack 0
 10035                           tblptru	equ	0xFF8
 10036                           tblptrh	equ	0xFF7
 10037                           tblptrl	equ	0xFF6
 10038                           tablat	equ	0xFF5
 10039                           prodh	equ	0xFF4
 10040                           prodl	equ	0xFF3
 10041                           intcon	equ	0xFF2
 10042                           intcon2	equ	0xFF1
 10043                           postinc0	equ	0xFEE
 10044                           wreg	equ	0xFE8
 10045                           postdec1	equ	0xFE5
 10046                           plusw1	equ	0xFE3
 10047                           fsr1l	equ	0xFE1
 10048                           indf2	equ	0xFDF
 10049                           postinc2	equ	0xFDE
 10050                           postdec2	equ	0xFDD
 10051                           plusw2	equ	0xFDB
 10052                           fsr2h	equ	0xFDA
 10053                           fsr2l	equ	0xFD9
 10054                           status	equ	0xFD8
 10055                           
 10056 ;; *************** function _Wait_One_Sec *****************
 10057 ;; Defined at:
 10058 ;;		line 14 in file "Utils.c"
 10059 ;; Parameters:    Size  Location     Type
 10060 ;;		None
 10061 ;; Auto vars:     Size  Location     Type
 10062 ;;  k               2   16[COMRAM] int 
 10063 ;; Return value:  Size  Location     Type
 10064 ;;		None               void
 10065 ;; Registers used:
 10066 ;;		wreg, status,2, status,0
 10067 ;; Tracked objects:
 10068 ;;		On entry : 0/0
 10069 ;;		On exit  : 0/0
 10070 ;;		Unchanged: 0/0
 10071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;Total ram usage:        2 bytes
 10077 ;; Hardware stack levels used:    1
 10078 ;; Hardware stack levels required when called:    3
 10079 ;; This function calls:
 10080 ;;		Nothing
 10081 ;; This function is called by:
 10082 ;;		_Do_Beep
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           	psect	text54
 10087  0021AE                     __ptext54:
 10088                           	opt stack 0
 10089  0021AE                     _Wait_One_Sec:
 10090                           	opt stack 25
 10091                           
 10092                           ;Utils.c: 16: for ( int k = 0; k < 17000; k++ );
 10093                           
 10094                           ;incstack = 0
 10095  0021AE  0E00               	movlw	0
 10096  0021B0  6E12               	movwf	Wait_One_Sec@k+1,c
 10097  0021B2  0E00               	movlw	0
 10098  0021B4  6E11               	movwf	Wait_One_Sec@k,c
 10099  0021B6                     l5797:
 10100  0021B6  BE12               	btfsc	Wait_One_Sec@k+1,7,c
 10101  0021B8  D008               	goto	l5801
 10102  0021BA  0E68               	movlw	104
 10103  0021BC  5C11               	subwf	Wait_One_Sec@k,w,c
 10104  0021BE  0E42               	movlw	66
 10105  0021C0  5812               	subwfb	Wait_One_Sec@k+1,w,c
 10106  0021C2  B0D8               	btfsc	status,0,c
 10107  0021C4  D005               	goto	l754
 10108  0021C6  D001               	goto	l5801
 10109  0021C8  D003               	goto	l754
 10110  0021CA                     l5801:
 10111  0021CA  4A11               	infsnz	Wait_One_Sec@k,f,c
 10112  0021CC  2A12               	incf	Wait_One_Sec@k+1,f,c
 10113  0021CE  D7F3               	goto	l5797
 10114  0021D0                     l754:
 10115  0021D0  0012               	return		;funcret
 10116  0021D2                     __end_of_Wait_One_Sec:
 10117                           	opt stack 0
 10118                           tblptru	equ	0xFF8
 10119                           tblptrh	equ	0xFF7
 10120                           tblptrl	equ	0xFF6
 10121                           tablat	equ	0xFF5
 10122                           prodh	equ	0xFF4
 10123                           prodl	equ	0xFF3
 10124                           intcon	equ	0xFF2
 10125                           intcon2	equ	0xFF1
 10126                           postinc0	equ	0xFEE
 10127                           wreg	equ	0xFE8
 10128                           postdec1	equ	0xFE5
 10129                           plusw1	equ	0xFE3
 10130                           fsr1l	equ	0xFE1
 10131                           indf2	equ	0xFDF
 10132                           postinc2	equ	0xFDE
 10133                           postdec2	equ	0xFDD
 10134                           plusw2	equ	0xFDB
 10135                           fsr2h	equ	0xFDA
 10136                           fsr2l	equ	0xFD9
 10137                           status	equ	0xFD8
 10138                           
 10139 ;; *************** function _Deactivate_Buzzer *****************
 10140 ;; Defined at:
 10141 ;;		line 27 in file "Utils.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;		None
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;		None
 10146 ;; Return value:  Size  Location     Type
 10147 ;;		None               void
 10148 ;; Registers used:
 10149 ;;		wreg, status,2
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;Total ram usage:        0 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; Hardware stack levels required when called:    3
 10162 ;; This function calls:
 10163 ;;		Nothing
 10164 ;; This function is called by:
 10165 ;;		_Do_Beep
 10166 ;; This function uses a non-reentrant model
 10167 ;;
 10168                           
 10169                           	psect	text55
 10170  0023B0                     __ptext55:
 10171                           	opt stack 0
 10172  0023B0                     _Deactivate_Buzzer:
 10173                           	opt stack 25
 10174                           
 10175                           ;Utils.c: 29: CCP2CON = 0x00;
 10176                           
 10177                           ;incstack = 0
 10178  0023B0  0E00               	movlw	0
 10179  0023B2  6EBA               	movwf	4026,c	;volatile
 10180                           
 10181                           ;Utils.c: 30: PORTBbits.RB3 = 0;
 10182  0023B4  9681               	bcf	3969,3,c	;volatile
 10183  0023B6  0012               	return		;funcret
 10184  0023B8                     __end_of_Deactivate_Buzzer:
 10185                           	opt stack 0
 10186                           tblptru	equ	0xFF8
 10187                           tblptrh	equ	0xFF7
 10188                           tblptrl	equ	0xFF6
 10189                           tablat	equ	0xFF5
 10190                           prodh	equ	0xFF4
 10191                           prodl	equ	0xFF3
 10192                           intcon	equ	0xFF2
 10193                           intcon2	equ	0xFF1
 10194                           postinc0	equ	0xFEE
 10195                           wreg	equ	0xFE8
 10196                           postdec1	equ	0xFE5
 10197                           plusw1	equ	0xFE3
 10198                           fsr1l	equ	0xFE1
 10199                           indf2	equ	0xFDF
 10200                           postinc2	equ	0xFDE
 10201                           postdec2	equ	0xFDD
 10202                           plusw2	equ	0xFDB
 10203                           fsr2h	equ	0xFDA
 10204                           fsr2l	equ	0xFD9
 10205                           status	equ	0xFD8
 10206                           
 10207 ;; *************** function _Activate_Buzzer *****************
 10208 ;; Defined at:
 10209 ;;		line 19 in file "Utils.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;		None
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;		None               void
 10216 ;; Registers used:
 10217 ;;		wreg, status,2
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;Total ram usage:        0 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    3
 10230 ;; This function calls:
 10231 ;;		Nothing
 10232 ;; This function is called by:
 10233 ;;		_Do_Beep
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           	psect	text56
 10238  0022E0                     __ptext56:
 10239                           	opt stack 0
 10240  0022E0                     _Activate_Buzzer:
 10241                           	opt stack 25
 10242                           
 10243                           ;Utils.c: 21: PR2 = 0b11111001;
 10244                           
 10245                           ;incstack = 0
 10246  0022E0  0EF9               	movlw	249
 10247  0022E2  6ECB               	movwf	4043,c	;volatile
 10248                           
 10249                           ;Utils.c: 22: T2CON = 0b00000101;
 10250  0022E4  0E05               	movlw	5
 10251  0022E6  6ECA               	movwf	4042,c	;volatile
 10252                           
 10253                           ;Utils.c: 23: CCPR2L = 0b01001010;
 10254  0022E8  0E4A               	movlw	74
 10255  0022EA  6EBB               	movwf	4027,c	;volatile
 10256                           
 10257                           ;Utils.c: 24: CCP2CON = 0b00111100;
 10258  0022EC  0E3C               	movlw	60
 10259  0022EE  6EBA               	movwf	4026,c	;volatile
 10260  0022F0  0012               	return		;funcret
 10261  0022F2                     __end_of_Activate_Buzzer:
 10262                           	opt stack 0
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           prodh	equ	0xFF4
 10268                           prodl	equ	0xFF3
 10269                           intcon	equ	0xFF2
 10270                           intcon2	equ	0xFF1
 10271                           postinc0	equ	0xFEE
 10272                           wreg	equ	0xFE8
 10273                           postdec1	equ	0xFE5
 10274                           plusw1	equ	0xFE3
 10275                           fsr1l	equ	0xFE1
 10276                           indf2	equ	0xFDF
 10277                           postinc2	equ	0xFDE
 10278                           postdec2	equ	0xFDD
 10279                           plusw2	equ	0xFDB
 10280                           fsr2h	equ	0xFDA
 10281                           fsr2l	equ	0xFD9
 10282                           status	equ	0xFD8
 10283                           
 10284 ;; *************** function _DS3231_Setup_Time *****************
 10285 ;; Defined at:
 10286 ;;		line 66 in file "I2C_Support.c"
 10287 ;; Parameters:    Size  Location     Type
 10288 ;;		None
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;		None
 10291 ;; Return value:  Size  Location     Type
 10292 ;;		None               void
 10293 ;; Registers used:
 10294 ;;		wreg, status,2, status,0, cstack
 10295 ;; Tracked objects:
 10296 ;;		On entry : 0/0
 10297 ;;		On exit  : 0/0
 10298 ;;		Unchanged: 0/0
 10299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10304 ;;Total ram usage:        0 bytes
 10305 ;; Hardware stack levels used:    1
 10306 ;; Hardware stack levels required when called:    5
 10307 ;; This function calls:
 10308 ;;		_I2C_Start
 10309 ;;		_I2C_Stop
 10310 ;;		_I2C_Write
 10311 ;; This function is called by:
 10312 ;;		_main
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           	psect	text57
 10317  001C12                     __ptext57:
 10318                           	opt stack 0
 10319  001C12                     _DS3231_Setup_Time:
 10320                           	opt stack 25
 10321                           
 10322                           ;I2C_Support.c: 71: second = 0x00;
 10323                           
 10324                           ;incstack = 0
 10325  001C12  0E00               	movlw	0
 10326  001C14  6E62               	movwf	_second,c
 10327                           
 10328                           ;I2C_Support.c: 72: minute = 0x30;
 10329  001C16  0E30               	movlw	48
 10330  001C18  6E5F               	movwf	_minute,c
 10331                           
 10332                           ;I2C_Support.c: 73: hour = 0x06;
 10333  001C1A  0E06               	movlw	6
 10334  001C1C  6E5E               	movwf	_hour,c
 10335                           
 10336                           ;I2C_Support.c: 74: dow = 0x01;
 10337  001C1E  0E01               	movlw	1
 10338  001C20  6E5B               	movwf	_dow,c
 10339                           
 10340                           ;I2C_Support.c: 75: day = 0x01;
 10341  001C22  0E01               	movlw	1
 10342  001C24  6E5A               	movwf	_day,c
 10343                           
 10344                           ;I2C_Support.c: 76: month = 0x12;
 10345  001C26  0E12               	movlw	18
 10346  001C28  6E60               	movwf	_month,c
 10347                           
 10348                           ;I2C_Support.c: 77: year = 0x99;
 10349  001C2A  0E99               	movlw	153
 10350  001C2C  6E6C               	movwf	_year,c
 10351                           
 10352                           ;I2C_Support.c: 79: I2C_Start();
 10353  001C2E  EC82  F011         	call	_I2C_Start	;wreg free
 10354                           
 10355                           ;I2C_Support.c: 80: I2C_Write((0x68 << 1) | 0);
 10356  001C32  0ED0               	movlw	208
 10357  001C34  ECF4  F00F         	call	_I2C_Write
 10358                           
 10359                           ;I2C_Support.c: 81: I2C_Write(0x00);
 10360  001C38  0E00               	movlw	0
 10361  001C3A  ECF4  F00F         	call	_I2C_Write
 10362                           
 10363                           ;I2C_Support.c: 82: I2C_Write(second);
 10364  001C3E  5062               	movf	_second,w,c
 10365  001C40  ECF4  F00F         	call	_I2C_Write
 10366                           
 10367                           ;I2C_Support.c: 83: I2C_Write(minute);
 10368  001C44  505F               	movf	_minute,w,c
 10369  001C46  ECF4  F00F         	call	_I2C_Write
 10370                           
 10371                           ;I2C_Support.c: 84: I2C_Write(hour);
 10372  001C4A  505E               	movf	_hour,w,c
 10373  001C4C  ECF4  F00F         	call	_I2C_Write
 10374                           
 10375                           ;I2C_Support.c: 85: I2C_Write(dow);
 10376  001C50  505B               	movf	_dow,w,c
 10377  001C52  ECF4  F00F         	call	_I2C_Write
 10378                           
 10379                           ;I2C_Support.c: 86: I2C_Write(day);
 10380  001C56  505A               	movf	_day,w,c
 10381  001C58  ECF4  F00F         	call	_I2C_Write
 10382                           
 10383                           ;I2C_Support.c: 87: I2C_Write(month);
 10384  001C5C  5060               	movf	_month,w,c
 10385  001C5E  ECF4  F00F         	call	_I2C_Write
 10386                           
 10387                           ;I2C_Support.c: 88: I2C_Write(year);
 10388  001C62  506C               	movf	_year,w,c
 10389  001C64  ECF4  F00F         	call	_I2C_Write
 10390                           
 10391                           ;I2C_Support.c: 89: I2C_Stop();
 10392  001C68  EC79  F011         	call	_I2C_Stop	;wreg free
 10393  001C6C  0012               	return		;funcret
 10394  001C6E                     __end_of_DS3231_Setup_Time:
 10395                           	opt stack 0
 10396                           tblptru	equ	0xFF8
 10397                           tblptrh	equ	0xFF7
 10398                           tblptrl	equ	0xFF6
 10399                           tablat	equ	0xFF5
 10400                           prodh	equ	0xFF4
 10401                           prodl	equ	0xFF3
 10402                           intcon	equ	0xFF2
 10403                           intcon2	equ	0xFF1
 10404                           postinc0	equ	0xFEE
 10405                           wreg	equ	0xFE8
 10406                           postdec1	equ	0xFE5
 10407                           plusw1	equ	0xFE3
 10408                           fsr1l	equ	0xFE1
 10409                           indf2	equ	0xFDF
 10410                           postinc2	equ	0xFDE
 10411                           postdec2	equ	0xFDD
 10412                           plusw2	equ	0xFDB
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function _DS3231_Read_Time *****************
 10418 ;; Defined at:
 10419 ;;		line 45 in file "I2C_Support.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;  Data_Ret        1    0        unsigned char 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;		None               void
 10426 ;; Registers used:
 10427 ;;		wreg, status,2, status,0, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10437 ;;Total ram usage:        0 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    6
 10440 ;; This function calls:
 10441 ;;		_I2C_ReStart
 10442 ;;		_I2C_Read
 10443 ;;		_I2C_Start
 10444 ;;		_I2C_Stop
 10445 ;;		_I2C_Write
 10446 ;; This function is called by:
 10447 ;;		_main
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           	psect	text58
 10452  001C6E                     __ptext58:
 10453                           	opt stack 0
 10454  001C6E                     _DS3231_Read_Time:
 10455                           	opt stack 24
 10456                           
 10457                           ;I2C_Support.c: 50: char Data_Ret;
 10458                           ;I2C_Support.c: 51: I2C_Start();
 10459                           
 10460                           ;incstack = 0
 10461  001C6E  EC82  F011         	call	_I2C_Start	;wreg free
 10462                           
 10463                           ;I2C_Support.c: 52: I2C_Write((0x68 << 1) | 0);
 10464  001C72  0ED0               	movlw	208
 10465  001C74  ECF4  F00F         	call	_I2C_Write
 10466                           
 10467                           ;I2C_Support.c: 53: I2C_Write(0x00);
 10468  001C78  0E00               	movlw	0
 10469  001C7A  ECF4  F00F         	call	_I2C_Write
 10470                           
 10471                           ;I2C_Support.c: 54: I2C_ReStart();
 10472  001C7E  EC3E  F011         	call	_I2C_ReStart	;wreg free
 10473                           
 10474                           ;I2C_Support.c: 55: I2C_Write((0x68 << 1) | 1);
 10475  001C82  0ED1               	movlw	209
 10476  001C84  ECF4  F00F         	call	_I2C_Write
 10477                           
 10478                           ;I2C_Support.c: 56: second = I2C_Read(1);
 10479  001C88  0E01               	movlw	1
 10480  001C8A  EC73  F00F         	call	_I2C_Read
 10481  001C8E  6E62               	movwf	_second,c
 10482                           
 10483                           ;I2C_Support.c: 57: minute = I2C_Read(1);
 10484  001C90  0E01               	movlw	1
 10485  001C92  EC73  F00F         	call	_I2C_Read
 10486  001C96  6E5F               	movwf	_minute,c
 10487                           
 10488                           ;I2C_Support.c: 58: hour = I2C_Read(1);
 10489  001C98  0E01               	movlw	1
 10490  001C9A  EC73  F00F         	call	_I2C_Read
 10491  001C9E  6E5E               	movwf	_hour,c
 10492                           
 10493                           ;I2C_Support.c: 59: dow = I2C_Read(1);
 10494  001CA0  0E01               	movlw	1
 10495  001CA2  EC73  F00F         	call	_I2C_Read
 10496  001CA6  6E5B               	movwf	_dow,c
 10497                           
 10498                           ;I2C_Support.c: 60: day = I2C_Read(1);
 10499  001CA8  0E01               	movlw	1
 10500  001CAA  EC73  F00F         	call	_I2C_Read
 10501  001CAE  6E5A               	movwf	_day,c
 10502                           
 10503                           ;I2C_Support.c: 61: month = I2C_Read(1);
 10504  001CB0  0E01               	movlw	1
 10505  001CB2  EC73  F00F         	call	_I2C_Read
 10506  001CB6  6E60               	movwf	_month,c
 10507                           
 10508                           ;I2C_Support.c: 62: year = I2C_Read(0);
 10509  001CB8  0E00               	movlw	0
 10510  001CBA  EC73  F00F         	call	_I2C_Read
 10511  001CBE  6E6C               	movwf	_year,c
 10512                           
 10513                           ;I2C_Support.c: 63: I2C_Stop();
 10514  001CC0  EC79  F011         	call	_I2C_Stop	;wreg free
 10515  001CC4  0012               	return		;funcret
 10516  001CC6                     __end_of_DS3231_Read_Time:
 10517                           	opt stack 0
 10518                           tblptru	equ	0xFF8
 10519                           tblptrh	equ	0xFF7
 10520                           tblptrl	equ	0xFF6
 10521                           tablat	equ	0xFF5
 10522                           prodh	equ	0xFF4
 10523                           prodl	equ	0xFF3
 10524                           intcon	equ	0xFF2
 10525                           intcon2	equ	0xFF1
 10526                           postinc0	equ	0xFEE
 10527                           wreg	equ	0xFE8
 10528                           postdec1	equ	0xFE5
 10529                           plusw1	equ	0xFE3
 10530                           fsr1l	equ	0xFE1
 10531                           indf2	equ	0xFDF
 10532                           postinc2	equ	0xFDE
 10533                           postdec2	equ	0xFDD
 10534                           plusw2	equ	0xFDB
 10535                           fsr2h	equ	0xFDA
 10536                           fsr2l	equ	0xFD9
 10537                           status	equ	0xFD8
 10538                           
 10539 ;; *************** function _DS1621_Read_Temp *****************
 10540 ;; Defined at:
 10541 ;;		line 29 in file "I2C_Support.c"
 10542 ;; Parameters:    Size  Location     Type
 10543 ;;		None
 10544 ;; Auto vars:     Size  Location     Type
 10545 ;;  Data_Ret        1   21[COMRAM] unsigned char 
 10546 ;; Return value:  Size  Location     Type
 10547 ;;                  2   19[COMRAM] int 
 10548 ;; Registers used:
 10549 ;;		wreg, status,2, status,0, cstack
 10550 ;; Tracked objects:
 10551 ;;		On entry : 0/0
 10552 ;;		On exit  : 0/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10555 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10558 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10559 ;;Total ram usage:        3 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    6
 10562 ;; This function calls:
 10563 ;;		_I2C_ReStart
 10564 ;;		_I2C_Read
 10565 ;;		_I2C_Start
 10566 ;;		_I2C_Stop
 10567 ;;		_I2C_Write
 10568 ;; This function is called by:
 10569 ;;		_main
 10570 ;; This function uses a non-reentrant model
 10571 ;;
 10572                           
 10573                           	psect	text59
 10574  0020BC                     __ptext59:
 10575                           	opt stack 0
 10576  0020BC                     _DS1621_Read_Temp:
 10577                           	opt stack 24
 10578                           
 10579                           ;I2C_Support.c: 34: char Data_Ret;
 10580                           ;I2C_Support.c: 35: I2C_Start();
 10581                           
 10582                           ;incstack = 0
 10583  0020BC  EC82  F011         	call	_I2C_Start	;wreg free
 10584                           
 10585                           ;I2C_Support.c: 36: I2C_Write((0x48 << 1) | 0);
 10586  0020C0  0E90               	movlw	144
 10587  0020C2  ECF4  F00F         	call	_I2C_Write
 10588                           
 10589                           ;I2C_Support.c: 37: I2C_Write(0xAA);
 10590  0020C6  0EAA               	movlw	170
 10591  0020C8  ECF4  F00F         	call	_I2C_Write
 10592                           
 10593                           ;I2C_Support.c: 38: I2C_ReStart();
 10594  0020CC  EC3E  F011         	call	_I2C_ReStart	;wreg free
 10595                           
 10596                           ;I2C_Support.c: 39: I2C_Write((0x48 << 1) | 1);
 10597  0020D0  0E91               	movlw	145
 10598  0020D2  ECF4  F00F         	call	_I2C_Write
 10599                           
 10600                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 10601  0020D6  0E00               	movlw	0
 10602  0020D8  EC73  F00F         	call	_I2C_Read
 10603  0020DC  6E16               	movwf	DS1621_Read_Temp@Data_Ret,c
 10604                           
 10605                           ;I2C_Support.c: 41: I2C_Stop();
 10606  0020DE  EC79  F011         	call	_I2C_Stop	;wreg free
 10607                           
 10608                           ;I2C_Support.c: 42: return Data_Ret;
 10609  0020E2  C016  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 10610  0020E6  6A15               	clrf	?_DS1621_Read_Temp+1,c
 10611  0020E8  D000               	goto	l185
 10612  0020EA                     l185:
 10613  0020EA  0012               	return		;funcret
 10614  0020EC                     __end_of_DS1621_Read_Temp:
 10615                           	opt stack 0
 10616                           tblptru	equ	0xFF8
 10617                           tblptrh	equ	0xFF7
 10618                           tblptrl	equ	0xFF6
 10619                           tablat	equ	0xFF5
 10620                           prodh	equ	0xFF4
 10621                           prodl	equ	0xFF3
 10622                           intcon	equ	0xFF2
 10623                           intcon2	equ	0xFF1
 10624                           postinc0	equ	0xFEE
 10625                           wreg	equ	0xFE8
 10626                           postdec1	equ	0xFE5
 10627                           plusw1	equ	0xFE3
 10628                           fsr1l	equ	0xFE1
 10629                           indf2	equ	0xFDF
 10630                           postinc2	equ	0xFDE
 10631                           postdec2	equ	0xFDD
 10632                           plusw2	equ	0xFDB
 10633                           fsr2h	equ	0xFDA
 10634                           fsr2l	equ	0xFD9
 10635                           status	equ	0xFD8
 10636                           
 10637 ;; *************** function _I2C_Write *****************
 10638 ;; Defined at:
 10639 ;;		line 42 in file "I2C_Soft.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;  outByte         1    wreg     unsigned char 
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;  outByte         1   16[COMRAM] unsigned char 
 10644 ;;  n               1   17[COMRAM] unsigned char 
 10645 ;; Return value:  Size  Location     Type
 10646 ;;		None               void
 10647 ;; Registers used:
 10648 ;;		wreg, status,2, status,0, cstack
 10649 ;; Tracked objects:
 10650 ;;		On entry : 0/0
 10651 ;;		On exit  : 0/0
 10652 ;;		Unchanged: 0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10657 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10658 ;;Total ram usage:        2 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; Hardware stack levels required when called:    4
 10661 ;; This function calls:
 10662 ;;		_i2cHighScl
 10663 ;;		_i2cHighSda
 10664 ;;		_i2cLowScl
 10665 ;;		_i2cLowSda
 10666 ;; This function is called by:
 10667 ;;		_I2C_Write_Cmd_Only
 10668 ;;		_I2C_Write_Cmd_Write_Data
 10669 ;;		_DS1621_Read_Temp
 10670 ;;		_DS3231_Read_Time
 10671 ;;		_DS3231_Setup_Time
 10672 ;;		_I2C_Write_Address_Read_One_Byte
 10673 ;;		_I2C_Write_Address_Write_One_Byte
 10674 ;;		_I2C_Write_Cmd_Read_One_Byte
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           	psect	text60
 10679  001FE8                     __ptext60:
 10680                           	opt stack 0
 10681  001FE8                     _I2C_Write:
 10682                           	opt stack 23
 10683                           
 10684                           ;incstack = 0
 10685                           ;I2C_Write@outByte stored from wreg
 10686  001FE8  6E11               	movwf	I2C_Write@outByte,c
 10687                           
 10688                           ;I2C_Soft.c: 44: unsigned char n;
 10689                           ;I2C_Soft.c: 45: for(n=0; n<8; n++)
 10690  001FEA  0E00               	movlw	0
 10691  001FEC  6E12               	movwf	I2C_Write@n,c
 10692  001FEE                     l5291:
 10693  001FEE  0E07               	movlw	7
 10694  001FF0  6412               	cpfsgt	I2C_Write@n,c
 10695  001FF2  D001               	goto	l105
 10696  001FF4  D011               	goto	l5309
 10697  001FF6                     l105:
 10698                           
 10699                           ;I2C_Soft.c: 46: {
 10700                           ;I2C_Soft.c: 47: if(outByte&0x80) i2cHighSda();
 10701  001FF6  AE11               	btfss	I2C_Write@outByte,7,c
 10702  001FF8  D003               	goto	l5297
 10703  001FFA  ECE0  F011         	call	_i2cHighSda	;wreg free
 10704  001FFE  D003               	goto	l5299
 10705  002000                     l5297:
 10706                           
 10707                           ;I2C_Soft.c: 48: else i2cLowSda();
 10708  002000  ECCF  F011         	call	_i2cLowSda	;wreg free
 10709  002004  D000               	goto	l5299
 10710  002006                     l5299:
 10711                           
 10712                           ;I2C_Soft.c: 49: i2cHighScl();
 10713  002006  ECB9  F011         	call	_i2cHighScl	;wreg free
 10714                           
 10715                           ;I2C_Soft.c: 50: i2cLowScl();
 10716  00200A  ECDC  F011         	call	_i2cLowScl	;wreg free
 10717                           
 10718                           ;I2C_Soft.c: 51: outByte = outByte << 1;
 10719  00200E  5011               	movf	I2C_Write@outByte,w,c
 10720  002010  2411               	addwf	I2C_Write@outByte,w,c
 10721  002012  6E11               	movwf	I2C_Write@outByte,c
 10722  002014  2A12               	incf	I2C_Write@n,f,c
 10723  002016  D7EB               	goto	l5291
 10724  002018                     l5309:
 10725                           
 10726                           ;I2C_Soft.c: 52: }
 10727                           ;I2C_Soft.c: 53: i2cHighSda();
 10728  002018  ECE0  F011         	call	_i2cHighSda	;wreg free
 10729                           
 10730                           ;I2C_Soft.c: 54: i2cHighScl();
 10731  00201C  ECB9  F011         	call	_i2cHighScl	;wreg free
 10732                           
 10733                           ;I2C_Soft.c: 55: i2cLowScl();
 10734  002020  ECDC  F011         	call	_i2cLowScl	;wreg free
 10735  002024  0012               	return		;funcret
 10736  002026                     __end_of_I2C_Write:
 10737                           	opt stack 0
 10738                           tblptru	equ	0xFF8
 10739                           tblptrh	equ	0xFF7
 10740                           tblptrl	equ	0xFF6
 10741                           tablat	equ	0xFF5
 10742                           prodh	equ	0xFF4
 10743                           prodl	equ	0xFF3
 10744                           intcon	equ	0xFF2
 10745                           intcon2	equ	0xFF1
 10746                           postinc0	equ	0xFEE
 10747                           wreg	equ	0xFE8
 10748                           postdec1	equ	0xFE5
 10749                           plusw1	equ	0xFE3
 10750                           fsr1l	equ	0xFE1
 10751                           indf2	equ	0xFDF
 10752                           postinc2	equ	0xFDE
 10753                           postdec2	equ	0xFDD
 10754                           plusw2	equ	0xFDB
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8
 10758                           
 10759 ;; *************** function _I2C_Stop *****************
 10760 ;; Defined at:
 10761 ;;		line 89 in file "I2C_Soft.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;		None               void
 10768 ;; Registers used:
 10769 ;;		wreg, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;Total ram usage:        0 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    4
 10782 ;; This function calls:
 10783 ;;		_i2cHighScl
 10784 ;;		_i2cHighSda
 10785 ;;		_i2cLowScl
 10786 ;;		_i2cLowSda
 10787 ;; This function is called by:
 10788 ;;		_I2C_Write_Cmd_Only
 10789 ;;		_I2C_Write_Cmd_Write_Data
 10790 ;;		_DS1621_Read_Temp
 10791 ;;		_DS3231_Read_Time
 10792 ;;		_DS3231_Setup_Time
 10793 ;;		_I2C_Write_Address_Read_One_Byte
 10794 ;;		_I2C_Write_Address_Write_One_Byte
 10795 ;;		_I2C_Write_Cmd_Read_One_Byte
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           	psect	text61
 10800  0022F2                     __ptext61:
 10801                           	opt stack 0
 10802  0022F2                     _I2C_Stop:
 10803                           	opt stack 23
 10804                           
 10805                           ;I2C_Soft.c: 91: i2cLowScl();
 10806                           
 10807                           ;incstack = 0
 10808  0022F2  ECDC  F011         	call	_i2cLowScl	;wreg free
 10809                           
 10810                           ;I2C_Soft.c: 92: i2cLowSda();
 10811  0022F6  ECCF  F011         	call	_i2cLowSda	;wreg free
 10812                           
 10813                           ;I2C_Soft.c: 93: i2cHighScl();
 10814  0022FA  ECB9  F011         	call	_i2cHighScl	;wreg free
 10815                           
 10816                           ;I2C_Soft.c: 94: i2cHighSda();
 10817  0022FE  ECE0  F011         	call	_i2cHighSda	;wreg free
 10818  002302  0012               	return		;funcret
 10819  002304                     __end_of_I2C_Stop:
 10820                           	opt stack 0
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           intcon	equ	0xFF2
 10828                           intcon2	equ	0xFF1
 10829                           postinc0	equ	0xFEE
 10830                           wreg	equ	0xFE8
 10831                           postdec1	equ	0xFE5
 10832                           plusw1	equ	0xFE3
 10833                           fsr1l	equ	0xFE1
 10834                           indf2	equ	0xFDF
 10835                           postinc2	equ	0xFDE
 10836                           postdec2	equ	0xFDD
 10837                           plusw2	equ	0xFDB
 10838                           fsr2h	equ	0xFDA
 10839                           fsr2l	equ	0xFD9
 10840                           status	equ	0xFD8
 10841                           
 10842 ;; *************** function _I2C_Start *****************
 10843 ;; Defined at:
 10844 ;;		line 72 in file "I2C_Soft.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;		None
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;		None
 10849 ;; Return value:  Size  Location     Type
 10850 ;;		None               void
 10851 ;; Registers used:
 10852 ;;		wreg, cstack
 10853 ;; Tracked objects:
 10854 ;;		On entry : 0/0
 10855 ;;		On exit  : 0/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;Total ram usage:        0 bytes
 10863 ;; Hardware stack levels used:    1
 10864 ;; Hardware stack levels required when called:    4
 10865 ;; This function calls:
 10866 ;;		_i2cHighScl
 10867 ;;		_i2cHighSda
 10868 ;;		_i2cLowScl
 10869 ;;		_i2cLowSda
 10870 ;; This function is called by:
 10871 ;;		_I2C_Write_Cmd_Only
 10872 ;;		_I2C_Write_Cmd_Write_Data
 10873 ;;		_DS1621_Read_Temp
 10874 ;;		_DS3231_Read_Time
 10875 ;;		_DS3231_Setup_Time
 10876 ;;		_I2C_Write_Address_Read_One_Byte
 10877 ;;		_I2C_Write_Address_Write_One_Byte
 10878 ;;		_I2C_Write_Cmd_Read_One_Byte
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text62
 10883  002304                     __ptext62:
 10884                           	opt stack 0
 10885  002304                     _I2C_Start:
 10886                           	opt stack 23
 10887                           
 10888                           ;I2C_Soft.c: 74: i2cHighSda();
 10889                           
 10890                           ;incstack = 0
 10891  002304  ECE0  F011         	call	_i2cHighSda	;wreg free
 10892                           
 10893                           ;I2C_Soft.c: 75: i2cHighScl();
 10894  002308  ECB9  F011         	call	_i2cHighScl	;wreg free
 10895                           
 10896                           ;I2C_Soft.c: 76: i2cLowSda();
 10897  00230C  ECCF  F011         	call	_i2cLowSda	;wreg free
 10898                           
 10899                           ;I2C_Soft.c: 77: i2cLowScl();
 10900  002310  ECDC  F011         	call	_i2cLowScl	;wreg free
 10901  002314  0012               	return		;funcret
 10902  002316                     __end_of_I2C_Start:
 10903                           	opt stack 0
 10904                           tblptru	equ	0xFF8
 10905                           tblptrh	equ	0xFF7
 10906                           tblptrl	equ	0xFF6
 10907                           tablat	equ	0xFF5
 10908                           prodh	equ	0xFF4
 10909                           prodl	equ	0xFF3
 10910                           intcon	equ	0xFF2
 10911                           intcon2	equ	0xFF1
 10912                           postinc0	equ	0xFEE
 10913                           wreg	equ	0xFE8
 10914                           postdec1	equ	0xFE5
 10915                           plusw1	equ	0xFE3
 10916                           fsr1l	equ	0xFE1
 10917                           indf2	equ	0xFDF
 10918                           postinc2	equ	0xFDE
 10919                           postdec2	equ	0xFDD
 10920                           plusw2	equ	0xFDB
 10921                           fsr2h	equ	0xFDA
 10922                           fsr2l	equ	0xFD9
 10923                           status	equ	0xFD8
 10924                           
 10925 ;; *************** function _I2C_Read *****************
 10926 ;; Defined at:
 10927 ;;		line 21 in file "I2C_Soft.c"
 10928 ;; Parameters:    Size  Location     Type
 10929 ;;  ack             1    wreg     unsigned char 
 10930 ;; Auto vars:     Size  Location     Type
 10931 ;;  ack             1   16[COMRAM] unsigned char 
 10932 ;;  inByte          1   18[COMRAM] unsigned char 
 10933 ;;  n               1   17[COMRAM] unsigned char 
 10934 ;; Return value:  Size  Location     Type
 10935 ;;                  1    wreg      unsigned char 
 10936 ;; Registers used:
 10937 ;;		wreg, status,2, status,0, cstack
 10938 ;; Tracked objects:
 10939 ;;		On entry : 0/0
 10940 ;;		On exit  : 0/0
 10941 ;;		Unchanged: 0/0
 10942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10944 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10946 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10947 ;;Total ram usage:        3 bytes
 10948 ;; Hardware stack levels used:    1
 10949 ;; Hardware stack levels required when called:    5
 10950 ;; This function calls:
 10951 ;;		_i2cAck
 10952 ;;		_i2cHighScl
 10953 ;;		_i2cHighSda
 10954 ;;		_i2cLowScl
 10955 ;;		_i2cNack
 10956 ;; This function is called by:
 10957 ;;		_DS1621_Read_Temp
 10958 ;;		_DS3231_Read_Time
 10959 ;;		_I2C_Write_Address_Read_One_Byte
 10960 ;;		_I2C_Write_Cmd_Read_One_Byte
 10961 ;; This function uses a non-reentrant model
 10962 ;;
 10963                           
 10964                           	psect	text63
 10965  001EE6                     __ptext63:
 10966                           	opt stack 0
 10967  001EE6                     _I2C_Read:
 10968                           	opt stack 24
 10969                           
 10970                           ;incstack = 0
 10971                           ;I2C_Read@ack stored from wreg
 10972  001EE6  6E11               	movwf	I2C_Read@ack,c
 10973                           
 10974                           ;I2C_Soft.c: 23: unsigned char inByte, n;
 10975                           ;I2C_Soft.c: 24: i2cHighSda();
 10976  001EE8  ECE0  F011         	call	_i2cHighSda	;wreg free
 10977                           
 10978                           ;I2C_Soft.c: 25: for (n=0; n<8; n++)
 10979  001EEC  0E00               	movlw	0
 10980  001EEE  6E12               	movwf	I2C_Read@n,c
 10981  001EF0                     l5833:
 10982  001EF0  0E07               	movlw	7
 10983  001EF2  6412               	cpfsgt	I2C_Read@n,c
 10984  001EF4  D001               	goto	l5837
 10985  001EF6  D00F               	goto	l5851
 10986  001EF8                     l5837:
 10987                           
 10988                           ;I2C_Soft.c: 26: {
 10989                           ;I2C_Soft.c: 27: i2cHighScl();
 10990  001EF8  ECB9  F011         	call	_i2cHighScl	;wreg free
 10991                           
 10992                           ;I2C_Soft.c: 29: if (PORTDbits.RD7)
 10993  001EFC  AE83               	btfss	3971,7,c	;volatile
 10994  001EFE  D003               	goto	l5843
 10995                           
 10996                           ;I2C_Soft.c: 30: inByte = (inByte << 1) | 0x01;
 10997  001F00  80D8               	bsf	status,0,c
 10998  001F02  3613               	rlcf	I2C_Read@inByte,f,c
 10999  001F04  D004               	goto	l5845
 11000  001F06                     l5843:
 11001                           
 11002                           ;I2C_Soft.c: 31: else
 11003                           ;I2C_Soft.c: 32: inByte = inByte << 1;
 11004  001F06  5013               	movf	I2C_Read@inByte,w,c
 11005  001F08  2413               	addwf	I2C_Read@inByte,w,c
 11006  001F0A  6E13               	movwf	I2C_Read@inByte,c
 11007  001F0C  D000               	goto	l5845
 11008  001F0E                     l5845:
 11009                           
 11010                           ;I2C_Soft.c: 33: i2cLowScl();
 11011  001F0E  ECDC  F011         	call	_i2cLowScl	;wreg free
 11012  001F12  2A12               	incf	I2C_Read@n,f,c
 11013  001F14  D7ED               	goto	l5833
 11014  001F16                     l5851:
 11015                           
 11016                           ;I2C_Soft.c: 34: }
 11017                           ;I2C_Soft.c: 35: if (ack) i2cAck();
 11018  001F16  5011               	movf	I2C_Read@ack,w,c
 11019  001F18  B4D8               	btfsc	status,2,c
 11020  001F1A  D003               	goto	l5855
 11021  001F1C  EC8B  F011         	call	_i2cAck	;wreg free
 11022  001F20  D003               	goto	l5857
 11023  001F22                     l5855:
 11024                           
 11025                           ;I2C_Soft.c: 36: else i2cNack();
 11026  001F22  ECCA  F011         	call	_i2cNack	;wreg free
 11027  001F26  D000               	goto	l5857
 11028  001F28                     l5857:
 11029                           
 11030                           ;I2C_Soft.c: 39: return(inByte);
 11031  001F28  5013               	movf	I2C_Read@inByte,w,c
 11032  001F2A  D000               	goto	l102
 11033  001F2C                     l102:
 11034  001F2C  0012               	return		;funcret
 11035  001F2E                     __end_of_I2C_Read:
 11036                           	opt stack 0
 11037                           tblptru	equ	0xFF8
 11038                           tblptrh	equ	0xFF7
 11039                           tblptrl	equ	0xFF6
 11040                           tablat	equ	0xFF5
 11041                           prodh	equ	0xFF4
 11042                           prodl	equ	0xFF3
 11043                           intcon	equ	0xFF2
 11044                           intcon2	equ	0xFF1
 11045                           postinc0	equ	0xFEE
 11046                           wreg	equ	0xFE8
 11047                           postdec1	equ	0xFE5
 11048                           plusw1	equ	0xFE3
 11049                           fsr1l	equ	0xFE1
 11050                           indf2	equ	0xFDF
 11051                           postinc2	equ	0xFDE
 11052                           postdec2	equ	0xFDD
 11053                           plusw2	equ	0xFDB
 11054                           fsr2h	equ	0xFDA
 11055                           fsr2l	equ	0xFD9
 11056                           status	equ	0xFD8
 11057                           
 11058 ;; *************** function _i2cNack *****************
 11059 ;; Defined at:
 11060 ;;		line 58 in file "I2C_Soft.c"
 11061 ;; Parameters:    Size  Location     Type
 11062 ;;		None
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;		None
 11065 ;; Return value:  Size  Location     Type
 11066 ;;		None               void
 11067 ;; Registers used:
 11068 ;;		wreg, cstack
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;Total ram usage:        0 bytes
 11079 ;; Hardware stack levels used:    1
 11080 ;; Hardware stack levels required when called:    4
 11081 ;; This function calls:
 11082 ;;		_i2cHighScl
 11083 ;;		_i2cLowScl
 11084 ;; This function is called by:
 11085 ;;		_I2C_Read
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           	psect	text64
 11090  002394                     __ptext64:
 11091                           	opt stack 0
 11092  002394                     _i2cNack:
 11093                           	opt stack 24
 11094                           
 11095                           ;I2C_Soft.c: 60: i2cHighScl();
 11096                           
 11097                           ;incstack = 0
 11098  002394  ECB9  F011         	call	_i2cHighScl	;wreg free
 11099                           
 11100                           ;I2C_Soft.c: 61: i2cLowScl();
 11101  002398  ECDC  F011         	call	_i2cLowScl	;wreg free
 11102  00239C  0012               	return		;funcret
 11103  00239E                     __end_of_i2cNack:
 11104                           	opt stack 0
 11105                           tblptru	equ	0xFF8
 11106                           tblptrh	equ	0xFF7
 11107                           tblptrl	equ	0xFF6
 11108                           tablat	equ	0xFF5
 11109                           prodh	equ	0xFF4
 11110                           prodl	equ	0xFF3
 11111                           intcon	equ	0xFF2
 11112                           intcon2	equ	0xFF1
 11113                           postinc0	equ	0xFEE
 11114                           wreg	equ	0xFE8
 11115                           postdec1	equ	0xFE5
 11116                           plusw1	equ	0xFE3
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           plusw2	equ	0xFDB
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function _i2cAck *****************
 11127 ;; Defined at:
 11128 ;;		line 64 in file "I2C_Soft.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;		None
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;		None
 11133 ;; Return value:  Size  Location     Type
 11134 ;;		None               void
 11135 ;; Registers used:
 11136 ;;		wreg, cstack
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;Total ram usage:        0 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    4
 11149 ;; This function calls:
 11150 ;;		_i2cHighScl
 11151 ;;		_i2cHighSda
 11152 ;;		_i2cLowScl
 11153 ;;		_i2cLowSda
 11154 ;; This function is called by:
 11155 ;;		_I2C_Read
 11156 ;; This function uses a non-reentrant model
 11157 ;;
 11158                           
 11159                           	psect	text65
 11160  002316                     __ptext65:
 11161                           	opt stack 0
 11162  002316                     _i2cAck:
 11163                           	opt stack 24
 11164                           
 11165                           ;I2C_Soft.c: 66: i2cLowSda();
 11166                           
 11167                           ;incstack = 0
 11168  002316  ECCF  F011         	call	_i2cLowSda	;wreg free
 11169                           
 11170                           ;I2C_Soft.c: 67: i2cHighScl();
 11171  00231A  ECB9  F011         	call	_i2cHighScl	;wreg free
 11172                           
 11173                           ;I2C_Soft.c: 68: i2cLowScl();
 11174  00231E  ECDC  F011         	call	_i2cLowScl	;wreg free
 11175                           
 11176                           ;I2C_Soft.c: 69: i2cHighSda();
 11177  002322  ECE0  F011         	call	_i2cHighSda	;wreg free
 11178  002326  0012               	return		;funcret
 11179  002328                     __end_of_i2cAck:
 11180                           	opt stack 0
 11181                           tblptru	equ	0xFF8
 11182                           tblptrh	equ	0xFF7
 11183                           tblptrl	equ	0xFF6
 11184                           tablat	equ	0xFF5
 11185                           prodh	equ	0xFF4
 11186                           prodl	equ	0xFF3
 11187                           intcon	equ	0xFF2
 11188                           intcon2	equ	0xFF1
 11189                           postinc0	equ	0xFEE
 11190                           wreg	equ	0xFE8
 11191                           postdec1	equ	0xFE5
 11192                           plusw1	equ	0xFE3
 11193                           fsr1l	equ	0xFE1
 11194                           indf2	equ	0xFDF
 11195                           postinc2	equ	0xFDE
 11196                           postdec2	equ	0xFDD
 11197                           plusw2	equ	0xFDB
 11198                           fsr2h	equ	0xFDA
 11199                           fsr2l	equ	0xFD9
 11200                           status	equ	0xFD8
 11201                           
 11202 ;; *************** function _I2C_ReStart *****************
 11203 ;; Defined at:
 11204 ;;		line 80 in file "I2C_Soft.c"
 11205 ;; Parameters:    Size  Location     Type
 11206 ;;		None
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;		None
 11209 ;; Return value:  Size  Location     Type
 11210 ;;		None               void
 11211 ;; Registers used:
 11212 ;;		wreg, cstack
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;Total ram usage:        0 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    4
 11225 ;; This function calls:
 11226 ;;		_i2cHighScl
 11227 ;;		_i2cHighSda
 11228 ;;		_i2cLowScl
 11229 ;;		_i2cLowSda
 11230 ;; This function is called by:
 11231 ;;		_DS1621_Read_Temp
 11232 ;;		_DS3231_Read_Time
 11233 ;;		_I2C_Write_Address_Read_One_Byte
 11234 ;;		_I2C_Write_Cmd_Read_One_Byte
 11235 ;; This function uses a non-reentrant model
 11236 ;;
 11237                           
 11238                           	psect	text66
 11239  00227C                     __ptext66:
 11240                           	opt stack 0
 11241  00227C                     _I2C_ReStart:
 11242                           	opt stack 25
 11243                           
 11244                           ;I2C_Soft.c: 82: i2cLowScl();
 11245                           
 11246                           ;incstack = 0
 11247  00227C  ECDC  F011         	call	_i2cLowScl	;wreg free
 11248                           
 11249                           ;I2C_Soft.c: 83: i2cHighSda();
 11250  002280  ECE0  F011         	call	_i2cHighSda	;wreg free
 11251                           
 11252                           ;I2C_Soft.c: 84: i2cHighScl();
 11253  002284  ECB9  F011         	call	_i2cHighScl	;wreg free
 11254                           
 11255                           ;I2C_Soft.c: 85: i2cLowSda();
 11256  002288  ECCF  F011         	call	_i2cLowSda	;wreg free
 11257                           
 11258                           ;I2C_Soft.c: 86: i2cLowScl();
 11259  00228C  ECDC  F011         	call	_i2cLowScl	;wreg free
 11260  002290  0012               	return		;funcret
 11261  002292                     __end_of_I2C_ReStart:
 11262                           	opt stack 0
 11263                           tblptru	equ	0xFF8
 11264                           tblptrh	equ	0xFF7
 11265                           tblptrl	equ	0xFF6
 11266                           tablat	equ	0xFF5
 11267                           prodh	equ	0xFF4
 11268                           prodl	equ	0xFF3
 11269                           intcon	equ	0xFF2
 11270                           intcon2	equ	0xFF1
 11271                           postinc0	equ	0xFEE
 11272                           wreg	equ	0xFE8
 11273                           postdec1	equ	0xFE5
 11274                           plusw1	equ	0xFE3
 11275                           fsr1l	equ	0xFE1
 11276                           indf2	equ	0xFDF
 11277                           postinc2	equ	0xFDE
 11278                           postdec2	equ	0xFDD
 11279                           plusw2	equ	0xFDB
 11280                           fsr2h	equ	0xFDA
 11281                           fsr2l	equ	0xFD9
 11282                           status	equ	0xFD8
 11283                           
 11284 ;; *************** function _i2cLowSda *****************
 11285 ;; Defined at:
 11286 ;;		line 103 in file "I2C_Soft.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;		None
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;		None
 11291 ;; Return value:  Size  Location     Type
 11292 ;;		None               void
 11293 ;; Registers used:
 11294 ;;		None
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;Total ram usage:        0 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    3
 11307 ;; This function calls:
 11308 ;;		Nothing
 11309 ;; This function is called by:
 11310 ;;		_I2C_Write
 11311 ;;		_i2cAck
 11312 ;;		_I2C_Start
 11313 ;;		_I2C_ReStart
 11314 ;;		_I2C_Stop
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text67
 11319  00239E                     __ptext67:
 11320                           	opt stack 0
 11321  00239E                     _i2cLowSda:
 11322                           	opt stack 23
 11323                           
 11324                           ;I2C_Soft.c: 105: PORTDbits.RD7 = 0;
 11325                           
 11326                           ;incstack = 0
 11327  00239E  9E83               	bcf	3971,7,c	;volatile
 11328                           
 11329                           ;I2C_Soft.c: 106: TRISDbits.RD7 = 0;
 11330  0023A0  9E95               	bcf	3989,7,c	;volatile
 11331                           
 11332                           ;I2C_Soft.c: 107: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11333  0023A2  D000               	nop2		;2 cycle nop
 11334  0023A4  D000               	nop2		;2 cycle nop
 11335  0023A6  0012               	return		;funcret
 11336  0023A8                     __end_of_i2cLowSda:
 11337                           	opt stack 0
 11338                           tblptru	equ	0xFF8
 11339                           tblptrh	equ	0xFF7
 11340                           tblptrl	equ	0xFF6
 11341                           tablat	equ	0xFF5
 11342                           prodh	equ	0xFF4
 11343                           prodl	equ	0xFF3
 11344                           intcon	equ	0xFF2
 11345                           intcon2	equ	0xFF1
 11346                           postinc0	equ	0xFEE
 11347                           wreg	equ	0xFE8
 11348                           postdec1	equ	0xFE5
 11349                           plusw1	equ	0xFE3
 11350                           fsr1l	equ	0xFE1
 11351                           indf2	equ	0xFDF
 11352                           postinc2	equ	0xFDE
 11353                           postdec2	equ	0xFDD
 11354                           plusw2	equ	0xFDB
 11355                           fsr2h	equ	0xFDA
 11356                           fsr2l	equ	0xFD9
 11357                           status	equ	0xFD8
 11358                           
 11359 ;; *************** function _i2cLowScl *****************
 11360 ;; Defined at:
 11361 ;;		line 116 in file "I2C_Soft.c"
 11362 ;; Parameters:    Size  Location     Type
 11363 ;;		None
 11364 ;; Auto vars:     Size  Location     Type
 11365 ;;		None
 11366 ;; Return value:  Size  Location     Type
 11367 ;;		None               void
 11368 ;; Registers used:
 11369 ;;		None
 11370 ;; Tracked objects:
 11371 ;;		On entry : 0/0
 11372 ;;		On exit  : 0/0
 11373 ;;		Unchanged: 0/0
 11374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;Total ram usage:        0 bytes
 11380 ;; Hardware stack levels used:    1
 11381 ;; Hardware stack levels required when called:    3
 11382 ;; This function calls:
 11383 ;;		Nothing
 11384 ;; This function is called by:
 11385 ;;		_I2C_Read
 11386 ;;		_I2C_Write
 11387 ;;		_i2cNack
 11388 ;;		_i2cAck
 11389 ;;		_I2C_Start
 11390 ;;		_I2C_ReStart
 11391 ;;		_I2C_Stop
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text68
 11396  0023B8                     __ptext68:
 11397                           	opt stack 0
 11398  0023B8                     _i2cLowScl:
 11399                           	opt stack 23
 11400                           
 11401                           ;I2C_Soft.c: 118: PORTBbits.RB4 = 0;
 11402                           
 11403                           ;incstack = 0
 11404  0023B8  9881               	bcf	3969,4,c	;volatile
 11405                           
 11406                           ;I2C_Soft.c: 119: TRISBbits.RB4 = 0;
 11407  0023BA  9893               	bcf	3987,4,c	;volatile
 11408                           
 11409                           ;I2C_Soft.c: 120: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11410  0023BC  D000               	nop2		;2 cycle nop
 11411  0023BE  0012               	return		;funcret
 11412  0023C0                     __end_of_i2cLowScl:
 11413                           	opt stack 0
 11414                           tblptru	equ	0xFF8
 11415                           tblptrh	equ	0xFF7
 11416                           tblptrl	equ	0xFF6
 11417                           tablat	equ	0xFF5
 11418                           prodh	equ	0xFF4
 11419                           prodl	equ	0xFF3
 11420                           intcon	equ	0xFF2
 11421                           intcon2	equ	0xFF1
 11422                           postinc0	equ	0xFEE
 11423                           wreg	equ	0xFE8
 11424                           postdec1	equ	0xFE5
 11425                           plusw1	equ	0xFE3
 11426                           fsr1l	equ	0xFE1
 11427                           indf2	equ	0xFDF
 11428                           postinc2	equ	0xFDE
 11429                           postdec2	equ	0xFDD
 11430                           plusw2	equ	0xFDB
 11431                           fsr2h	equ	0xFDA
 11432                           fsr2l	equ	0xFD9
 11433                           status	equ	0xFD8
 11434                           
 11435 ;; *************** function _i2cHighSda *****************
 11436 ;; Defined at:
 11437 ;;		line 97 in file "I2C_Soft.c"
 11438 ;; Parameters:    Size  Location     Type
 11439 ;;		None
 11440 ;; Auto vars:     Size  Location     Type
 11441 ;;		None
 11442 ;; Return value:  Size  Location     Type
 11443 ;;		None               void
 11444 ;; Registers used:
 11445 ;;		None
 11446 ;; Tracked objects:
 11447 ;;		On entry : 0/0
 11448 ;;		On exit  : 0/0
 11449 ;;		Unchanged: 0/0
 11450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;Total ram usage:        0 bytes
 11456 ;; Hardware stack levels used:    1
 11457 ;; Hardware stack levels required when called:    3
 11458 ;; This function calls:
 11459 ;;		Nothing
 11460 ;; This function is called by:
 11461 ;;		_I2C_Init
 11462 ;;		_I2C_Read
 11463 ;;		_I2C_Write
 11464 ;;		_i2cAck
 11465 ;;		_I2C_Start
 11466 ;;		_I2C_ReStart
 11467 ;;		_I2C_Stop
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           	psect	text69
 11472  0023C0                     __ptext69:
 11473                           	opt stack 0
 11474  0023C0                     _i2cHighSda:
 11475                           	opt stack 25
 11476                           
 11477                           ;I2C_Soft.c: 99: TRISDbits.RD7 = 1;
 11478                           
 11479                           ;incstack = 0
 11480  0023C0  8E95               	bsf	3989,7,c	;volatile
 11481                           
 11482                           ;I2C_Soft.c: 100: _delay((unsigned long)((2)*(8000000/4000000.0)));
 11483  0023C2  D000               	nop2		;2 cycle nop
 11484  0023C4  D000               	nop2		;2 cycle nop
 11485  0023C6  0012               	return		;funcret
 11486  0023C8                     __end_of_i2cHighSda:
 11487                           	opt stack 0
 11488                           tblptru	equ	0xFF8
 11489                           tblptrh	equ	0xFF7
 11490                           tblptrl	equ	0xFF6
 11491                           tablat	equ	0xFF5
 11492                           prodh	equ	0xFF4
 11493                           prodl	equ	0xFF3
 11494                           intcon	equ	0xFF2
 11495                           intcon2	equ	0xFF1
 11496                           postinc0	equ	0xFEE
 11497                           wreg	equ	0xFE8
 11498                           postdec1	equ	0xFE5
 11499                           plusw1	equ	0xFE3
 11500                           fsr1l	equ	0xFE1
 11501                           indf2	equ	0xFDF
 11502                           postinc2	equ	0xFDE
 11503                           postdec2	equ	0xFDD
 11504                           plusw2	equ	0xFDB
 11505                           fsr2h	equ	0xFDA
 11506                           fsr2l	equ	0xFD9
 11507                           status	equ	0xFD8
 11508                           
 11509 ;; *************** function _i2cHighScl *****************
 11510 ;; Defined at:
 11511 ;;		line 110 in file "I2C_Soft.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;		None               void
 11518 ;; Registers used:
 11519 ;;		wreg
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;Total ram usage:        0 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    3
 11532 ;; This function calls:
 11533 ;;		Nothing
 11534 ;; This function is called by:
 11535 ;;		_I2C_Init
 11536 ;;		_I2C_Read
 11537 ;;		_I2C_Write
 11538 ;;		_i2cNack
 11539 ;;		_i2cAck
 11540 ;;		_I2C_Start
 11541 ;;		_I2C_ReStart
 11542 ;;		_I2C_Stop
 11543 ;; This function uses a non-reentrant model
 11544 ;;
 11545                           
 11546                           	psect	text70
 11547  002372                     __ptext70:
 11548                           	opt stack 0
 11549  002372                     _i2cHighScl:
 11550                           	opt stack 25
 11551                           
 11552                           ;I2C_Soft.c: 112: TRISBbits.RB4 = 1;
 11553                           
 11554                           ;incstack = 0
 11555  002372  8893               	bsf	3987,4,c	;volatile
 11556                           
 11557                           ;I2C_Soft.c: 113: _delay((unsigned long)((10)*(8000000/4000000.0)));
 11558  002374  0E06               	movlw	6
 11559  002376                     u5437:
 11560  002376  2EE8               	decfsz	wreg,f,c
 11561  002378  D7FE               	goto	u5437
 11562  00237A  D000               	nop2		;nop
 11563  00237C  0012               	return		;funcret
 11564  00237E                     __end_of_i2cHighScl:
 11565                           	opt stack 0
 11566                           tblptru	equ	0xFF8
 11567                           tblptrh	equ	0xFF7
 11568                           tblptrl	equ	0xFF6
 11569                           tablat	equ	0xFF5
 11570                           prodh	equ	0xFF4
 11571                           prodl	equ	0xFF3
 11572                           intcon	equ	0xFF2
 11573                           intcon2	equ	0xFF1
 11574                           postinc0	equ	0xFEE
 11575                           wreg	equ	0xFE8
 11576                           postdec1	equ	0xFE5
 11577                           plusw1	equ	0xFE3
 11578                           fsr1l	equ	0xFE1
 11579                           indf2	equ	0xFDF
 11580                           postinc2	equ	0xFDE
 11581                           postdec2	equ	0xFDD
 11582                           plusw2	equ	0xFDB
 11583                           fsr2h	equ	0xFDA
 11584                           fsr2l	equ	0xFD9
 11585                           status	equ	0xFD8
 11586                           
 11587 ;; *************** function _chkisr *****************
 11588 ;; Defined at:
 11589 ;;		line 31 in file "Interrupt.c"
 11590 ;; Parameters:    Size  Location     Type
 11591 ;;		None
 11592 ;; Auto vars:     Size  Location     Type
 11593 ;;		None
 11594 ;; Return value:  Size  Location     Type
 11595 ;;		None               void
 11596 ;; Registers used:
 11597 ;;		wreg, status,2, status,0, cstack
 11598 ;; Tracked objects:
 11599 ;;		On entry : 0/0
 11600 ;;		On exit  : 0/0
 11601 ;;		Unchanged: 0/0
 11602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;Total ram usage:       14 bytes
 11608 ;; Hardware stack levels used:    1
 11609 ;; Hardware stack levels required when called:    2
 11610 ;; This function calls:
 11611 ;;		_INT0_isr
 11612 ;;		_TIMER1_isr
 11613 ;; This function is called by:
 11614 ;;		Interrupt level 2
 11615 ;; This function uses a non-reentrant model
 11616 ;;
 11617                           
 11618                           	psect	intcode
 11619  000008                     __pintcode:
 11620                           	opt stack 0
 11621  000008                     _chkisr:
 11622                           	opt stack 20
 11623                           
 11624                           ;incstack = 0
 11625  000008  CFFA F003          	movff	pclath,??_chkisr
 11626  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 11627  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 11628  000014  ED33  F00D         	call	int_func,f	;refresh shadow registers
 11629                           pclatu	equ	0xFFB
 11630                           pclath	equ	0xFFA
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           intcon	equ	0xFF2
 11638                           intcon2	equ	0xFF1
 11639                           postinc0	equ	0xFEE
 11640                           fsr0l	equ	0xFE9
 11641                           wreg	equ	0xFE8
 11642                           postdec1	equ	0xFE5
 11643                           plusw1	equ	0xFE3
 11644                           fsr1l	equ	0xFE1
 11645                           indf2	equ	0xFDF
 11646                           postinc2	equ	0xFDE
 11647                           postdec2	equ	0xFDD
 11648                           plusw2	equ	0xFDB
 11649                           fsr2h	equ	0xFDA
 11650                           fsr2l	equ	0xFD9
 11651                           status	equ	0xFD8
 11652                           
 11653                           	psect	intcode_body
 11654  001A66                     __pintcode_body:
 11655                           	opt stack 20
 11656  001A66                     int_func:
 11657                           	opt stack 20
 11658  001A66  0006               	pop		; remove dummy address from shadow register refresh
 11659  001A68  CFEA F006          	movff	fsr0h,??_chkisr+3
 11660  001A6C  CFE1 F007          	movff	fsr1l,??_chkisr+4
 11661  001A70  CFE2 F008          	movff	fsr1h,??_chkisr+5
 11662  001A74  CFD9 F009          	movff	fsr2l,??_chkisr+6
 11663  001A78  CFDA F00A          	movff	fsr2h,??_chkisr+7
 11664  001A7C  CFF3 F00B          	movff	prodl,??_chkisr+8
 11665  001A80  CFF4 F00C          	movff	prodh,??_chkisr+9
 11666  001A84  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 11667  001A88  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 11668  001A8C  CFF8 F00F          	movff	tblptru,??_chkisr+12
 11669  001A90  CFF5 F010          	movff	tablat,??_chkisr+13
 11670                           
 11671                           ;Interrupt.c: 33: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 11672  001A94  A09E               	btfss	3998,0,c	;volatile
 11673  001A96  D003               	goto	i2l4853
 11674  001A98  ECBF  F011         	call	_TIMER1_isr	;wreg free
 11675  001A9C  D000               	goto	i2l4853
 11676  001A9E                     i2l4853:
 11677                           
 11678                           ;Interrupt.c: 34: if (INTCONbits.INT0IF == 1) INT0_isr();
 11679  001A9E  A2F2               	btfss	intcon,1,c	;volatile
 11680  001AA0  D003               	goto	i2l231
 11681  001AA2  ECAC  F006         	call	_INT0_isr	;wreg free
 11682  001AA6  D000               	goto	i2l231
 11683  001AA8                     i2l231:
 11684  001AA8  C010  FFF5         	movff	??_chkisr+13,tablat
 11685  001AAC  C00F  FFF8         	movff	??_chkisr+12,tblptru
 11686  001AB0  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 11687  001AB4  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 11688  001AB8  C00C  FFF4         	movff	??_chkisr+9,prodh
 11689  001ABC  C00B  FFF3         	movff	??_chkisr+8,prodl
 11690  001AC0  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 11691  001AC4  C009  FFD9         	movff	??_chkisr+6,fsr2l
 11692  001AC8  C008  FFE2         	movff	??_chkisr+5,fsr1h
 11693  001ACC  C007  FFE1         	movff	??_chkisr+4,fsr1l
 11694  001AD0  C006  FFEA         	movff	??_chkisr+3,fsr0h
 11695  001AD4  C005  FFE9         	movff	??_chkisr+2,fsr0l
 11696  001AD8  C004  FFFB         	movff	??_chkisr+1,pclatu
 11697  001ADC  C003  FFFA         	movff	??_chkisr,pclath
 11698  001AE0  0011               	retfie		f
 11699  001AE2                     __end_of_chkisr:
 11700                           	opt stack 0
 11701                           pclatu	equ	0xFFB
 11702                           pclath	equ	0xFFA
 11703                           tblptru	equ	0xFF8
 11704                           tblptrh	equ	0xFF7
 11705                           tblptrl	equ	0xFF6
 11706                           tablat	equ	0xFF5
 11707                           prodh	equ	0xFF4
 11708                           prodl	equ	0xFF3
 11709                           intcon	equ	0xFF2
 11710                           intcon2	equ	0xFF1
 11711                           postinc0	equ	0xFEE
 11712                           fsr0h	equ	0xFEA
 11713                           fsr0l	equ	0xFE9
 11714                           wreg	equ	0xFE8
 11715                           postdec1	equ	0xFE5
 11716                           plusw1	equ	0xFE3
 11717                           fsr1h	equ	0xFE2
 11718                           fsr1l	equ	0xFE1
 11719                           indf2	equ	0xFDF
 11720                           postinc2	equ	0xFDE
 11721                           postdec2	equ	0xFDD
 11722                           plusw2	equ	0xFDB
 11723                           fsr2h	equ	0xFDA
 11724                           fsr2l	equ	0xFD9
 11725                           status	equ	0xFD8
 11726                           
 11727 ;; *************** function _TIMER1_isr *****************
 11728 ;; Defined at:
 11729 ;;		line 37 in file "Interrupt.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;		None
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;		None
 11734 ;; Return value:  Size  Location     Type
 11735 ;;		None               void
 11736 ;; Registers used:
 11737 ;;		wreg, status,2
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;Total ram usage:        0 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; This function calls:
 11750 ;;		Nothing
 11751 ;; This function is called by:
 11752 ;;		_chkisr
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           	psect	text72
 11757  00237E                     __ptext72:
 11758                           	opt stack 0
 11759  00237E                     _TIMER1_isr:
 11760                           	opt stack 21
 11761                           
 11762                           ;Interrupt.c: 39: Nec_state = 0;
 11763                           
 11764                           ;incstack = 0
 11765  00237E  0E00               	movlw	0
 11766  002380  6E52               	movwf	_Nec_state,c
 11767                           
 11768                           ;Interrupt.c: 40: INTCON2bits.INTEDG0 = 0;
 11769  002382  9CF1               	bcf	intcon2,6,c	;volatile
 11770                           
 11771                           ;Interrupt.c: 41: T1CONbits.TMR1ON = 0;
 11772  002384  90CD               	bcf	4045,0,c	;volatile
 11773                           
 11774                           ;Interrupt.c: 42: PIR1bits.TMR1IF = 0;
 11775  002386  909E               	bcf	3998,0,c	;volatile
 11776  002388  0012               	return		;funcret
 11777  00238A                     __end_of_TIMER1_isr:
 11778                           	opt stack 0
 11779                           pclatu	equ	0xFFB
 11780                           pclath	equ	0xFFA
 11781                           tblptru	equ	0xFF8
 11782                           tblptrh	equ	0xFF7
 11783                           tblptrl	equ	0xFF6
 11784                           tablat	equ	0xFF5
 11785                           prodh	equ	0xFF4
 11786                           prodl	equ	0xFF3
 11787                           intcon	equ	0xFF2
 11788                           intcon2	equ	0xFF1
 11789                           postinc0	equ	0xFEE
 11790                           fsr0h	equ	0xFEA
 11791                           fsr0l	equ	0xFE9
 11792                           wreg	equ	0xFE8
 11793                           postdec1	equ	0xFE5
 11794                           plusw1	equ	0xFE3
 11795                           fsr1h	equ	0xFE2
 11796                           fsr1l	equ	0xFE1
 11797                           indf2	equ	0xFDF
 11798                           postinc2	equ	0xFDE
 11799                           postdec2	equ	0xFDD
 11800                           plusw2	equ	0xFDB
 11801                           fsr2h	equ	0xFDA
 11802                           fsr2l	equ	0xFD9
 11803                           status	equ	0xFD8
 11804                           
 11805 ;; *************** function _INT0_isr *****************
 11806 ;; Defined at:
 11807 ;;		line 51 in file "Interrupt.c"
 11808 ;; Parameters:    Size  Location     Type
 11809 ;;		None
 11810 ;; Auto vars:     Size  Location     Type
 11811 ;;		None
 11812 ;; Return value:  Size  Location     Type
 11813 ;;		None               void
 11814 ;; Registers used:
 11815 ;;		wreg, status,2, status,0, cstack
 11816 ;; Tracked objects:
 11817 ;;		On entry : 0/0
 11818 ;;		On exit  : 0/0
 11819 ;;		Unchanged: 0/0
 11820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;Total ram usage:        2 bytes
 11826 ;; Hardware stack levels used:    1
 11827 ;; Hardware stack levels required when called:    1
 11828 ;; This function calls:
 11829 ;;		_force_nec_state0
 11830 ;; This function is called by:
 11831 ;;		_chkisr
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           	psect	text73
 11836  000D58                     __ptext73:
 11837                           	opt stack 0
 11838  000D58                     _INT0_isr:
 11839                           	opt stack 20
 11840                           
 11841                           ;Interrupt.c: 53: INTCONbits.INT0IF = 0;
 11842                           
 11843                           ;incstack = 0
 11844  000D58  92F2               	bcf	intcon,1,c	;volatile
 11845                           
 11846                           ;Interrupt.c: 54: if (Nec_state != 0)
 11847  000D5A  5052               	movf	_Nec_state,w,c
 11848  000D5C  B4D8               	btfsc	status,2,c
 11849  000D5E  D0A4               	goto	i2l4461
 11850                           
 11851                           ;Interrupt.c: 55: {
 11852                           ;Interrupt.c: 56: Time_Elapsed = (TMR1H << 8) | TMR1L;
 11853  000D60  50CE               	movf	4046,w,c	;volatile
 11854  000D62  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 11855  000D66  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 11856  000D68  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 11857  000D6C  6A01               	clrf	??_INT0_isr,c
 11858  000D6E  1001               	iorwf	??_INT0_isr,w,c
 11859  000D70  6E48               	movwf	_Time_Elapsed,c
 11860  000D72  5002               	movf	??_INT0_isr+1,w,c
 11861  000D74  6E49               	movwf	_Time_Elapsed+1,c
 11862                           
 11863                           ;Interrupt.c: 57: TMR1H = 0;
 11864  000D76  0E00               	movlw	0
 11865  000D78  6ECF               	movwf	4047,c	;volatile
 11866                           
 11867                           ;Interrupt.c: 58: TMR1L = 0;
 11868  000D7A  0E00               	movlw	0
 11869  000D7C  6ECE               	movwf	4046,c	;volatile
 11870                           
 11871                           ;Interrupt.c: 59: }
 11872                           ;Interrupt.c: 61: switch(Nec_state)
 11873  000D7E  D094               	goto	i2l4461
 11874  000D80                     i2l4399:
 11875                           
 11876                           ;Interrupt.c: 64: {
 11877                           ;Interrupt.c: 66: TMR1H = 0;
 11878  000D80  0E00               	movlw	0
 11879  000D82  6ECF               	movwf	4047,c	;volatile
 11880                           
 11881                           ;Interrupt.c: 67: TMR1L = 0;
 11882  000D84  0E00               	movlw	0
 11883  000D86  6ECE               	movwf	4046,c	;volatile
 11884                           
 11885                           ;Interrupt.c: 68: PIR1bits.TMR1IF = 0;
 11886  000D88  909E               	bcf	3998,0,c	;volatile
 11887                           
 11888                           ;Interrupt.c: 69: T1CON= 0x90;
 11889  000D8A  0E90               	movlw	144
 11890  000D8C  6ECD               	movwf	4045,c	;volatile
 11891                           
 11892                           ;Interrupt.c: 70: T1CONbits.TMR1ON = 1;
 11893  000D8E  80CD               	bsf	4045,0,c	;volatile
 11894                           
 11895                           ;Interrupt.c: 71: bit_count = 0;
 11896  000D90  0E00               	movlw	0
 11897  000D92  6E58               	movwf	_bit_count,c
 11898                           
 11899                           ;Interrupt.c: 72: Nec_code = 0;
 11900  000D94  0E00               	movlw	0
 11901  000D96  0100               	movlb	0	; () banked
 11902  000D98  6FF4               	movwf	_Nec_code& (0+255),b
 11903  000D9A  0E00               	movlw	0
 11904  000D9C  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 11905  000D9E  0E00               	movlw	0
 11906  000DA0  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 11907  000DA2  0E00               	movlw	0
 11908  000DA4  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 11909                           
 11910                           ;Interrupt.c: 73: Nec_state = 1;
 11911  000DA6  0E01               	movlw	1
 11912  000DA8  D01F               	goto	L6
 11913  000DAA                     i2l4405:
 11914                           
 11915                           ; BSR set to: 0
 11916                           ;Interrupt.c: 74: INTCON2bits.INTEDG0 = 1;
 11917  000DAA  8CF1               	bsf	intcon2,6,c	;volatile
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;Interrupt.c: 75: return;
 11921  000DAC  D08E               	goto	i2l243
 11922  000DAE                     i2l4409:
 11923                           
 11924                           ;Interrupt.c: 79: {
 11925                           ;Interrupt.c: 80: if((Time_Elapsed > 8500)&&(Time_Elapsed < 9500))
 11926  000DAE  0E35               	movlw	53
 11927  000DB0  5C48               	subwf	_Time_Elapsed,w,c
 11928  000DB2  0E21               	movlw	33
 11929  000DB4  5849               	subwfb	_Time_Elapsed+1,w,c
 11930  000DB6  A0D8               	btfss	status,0,c
 11931  000DB8  D088               	goto	i2l243
 11932  000DBA  0E1C               	movlw	28
 11933  000DBC  5C48               	subwf	_Time_Elapsed,w,c
 11934  000DBE  0E25               	movlw	37
 11935  000DC0  5849               	subwfb	_Time_Elapsed+1,w,c
 11936  000DC2  B0D8               	btfsc	status,0,c
 11937  000DC4  D082               	goto	i2l243
 11938                           
 11939                           ;Interrupt.c: 81: {
 11940                           ;Interrupt.c: 82: Nec_state = 2;
 11941  000DC6  0E02               	movlw	2
 11942  000DC8  D01F               	goto	L7
 11943  000DCA                     i2l4415:
 11944                           
 11945                           ;Interrupt.c: 83: INTCON2bits.INTEDG0 = 0;
 11946  000DCA  9CF1               	bcf	intcon2,6,c	;volatile
 11947                           
 11948                           ;Interrupt.c: 84: }
 11949                           ;Interrupt.c: 85: return;
 11950  000DCC  D07E               	goto	i2l243
 11951  000DCE                     i2l4419:
 11952                           
 11953                           ;Interrupt.c: 89: {
 11954                           ;Interrupt.c: 90: if((Time_Elapsed > 4000)&&(Time_Elapsed < 5000))
 11955  000DCE  0EA1               	movlw	161
 11956  000DD0  5C48               	subwf	_Time_Elapsed,w,c
 11957  000DD2  0E0F               	movlw	15
 11958  000DD4  5849               	subwfb	_Time_Elapsed+1,w,c
 11959  000DD6  A0D8               	btfss	status,0,c
 11960  000DD8  D078               	goto	i2l243
 11961  000DDA  0E88               	movlw	136
 11962  000DDC  5C48               	subwf	_Time_Elapsed,w,c
 11963  000DDE  0E13               	movlw	19
 11964  000DE0  5849               	subwfb	_Time_Elapsed+1,w,c
 11965  000DE2  B0D8               	btfsc	status,0,c
 11966  000DE4  D072               	goto	i2l243
 11967                           
 11968                           ;Interrupt.c: 91: {
 11969                           ;Interrupt.c: 92: Nec_state = 3;
 11970  000DE6  0E03               	movlw	3
 11971  000DE8                     L6:
 11972  000DE8  6E52               	movwf	_Nec_state,c
 11973  000DEA  D7DF               	goto	i2l4405
 11974                           
 11975                           ;Interrupt.c: 94: }
 11976                           ;Interrupt.c: 95: return;
 11977                           
 11978                           ;Interrupt.c: 93: INTCON2bits.INTEDG0 = 1;
 11979  000DEC  D06E               	goto	i2l243
 11980  000DEE                     i2l4429:
 11981                           
 11982                           ;Interrupt.c: 99: {
 11983                           ;Interrupt.c: 100: if((Time_Elapsed > 400)&&(Time_Elapsed < 700))
 11984  000DEE  0E91               	movlw	145
 11985  000DF0  5C48               	subwf	_Time_Elapsed,w,c
 11986  000DF2  0E01               	movlw	1
 11987  000DF4  5849               	subwfb	_Time_Elapsed+1,w,c
 11988  000DF6  A0D8               	btfss	status,0,c
 11989  000DF8  D068               	goto	i2l243
 11990  000DFA  0EBC               	movlw	188
 11991  000DFC  5C48               	subwf	_Time_Elapsed,w,c
 11992  000DFE  0E02               	movlw	2
 11993  000E00  5849               	subwfb	_Time_Elapsed+1,w,c
 11994  000E02  B0D8               	btfsc	status,0,c
 11995  000E04  D062               	goto	i2l243
 11996                           
 11997                           ;Interrupt.c: 101: {
 11998                           ;Interrupt.c: 102: Nec_state = 4;
 11999  000E06  0E04               	movlw	4
 12000  000E08                     L7:
 12001  000E08  6E52               	movwf	_Nec_state,c
 12002  000E0A  D7DF               	goto	i2l4415
 12003                           
 12004                           ;Interrupt.c: 104: }
 12005                           ;Interrupt.c: 105: return;
 12006                           
 12007                           ;Interrupt.c: 103: INTCON2bits.INTEDG0 = 0;
 12008  000E0C  D05E               	goto	i2l243
 12009  000E0E                     i2l4439:
 12010                           
 12011                           ;Interrupt.c: 109: {
 12012                           ;Interrupt.c: 110: if((Time_Elapsed > 400)&&(Time_Elapsed < 1800))
 12013  000E0E  0E91               	movlw	145
 12014  000E10  5C48               	subwf	_Time_Elapsed,w,c
 12015  000E12  0E01               	movlw	1
 12016  000E14  5849               	subwfb	_Time_Elapsed+1,w,c
 12017  000E16  A0D8               	btfss	status,0,c
 12018  000E18  D042               	goto	i2l4453
 12019  000E1A  0E08               	movlw	8
 12020  000E1C  5C48               	subwf	_Time_Elapsed,w,c
 12021  000E1E  0E07               	movlw	7
 12022  000E20  5849               	subwfb	_Time_Elapsed+1,w,c
 12023  000E22  B0D8               	btfsc	status,0,c
 12024  000E24  D03C               	goto	i2l4453
 12025                           
 12026                           ;Interrupt.c: 111: {
 12027                           ;Interrupt.c: 112: Nec_code = Nec_code << 1;
 12028  000E26  90D8               	bcf	status,0,c
 12029  000E28  0100               	movlb	0	; () banked
 12030  000E2A  35F4               	rlcf	_Nec_code& (0+255),w,b
 12031  000E2C  0100               	movlb	0	; () banked
 12032  000E2E  6FF4               	movwf	_Nec_code& (0+255),b
 12033  000E30  0100               	movlb	0	; () banked
 12034  000E32  35F5               	rlcf	(_Nec_code+1)& (0+255),w,b
 12035  000E34  0100               	movlb	0	; () banked
 12036  000E36  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 12037  000E38  0100               	movlb	0	; () banked
 12038  000E3A  35F6               	rlcf	(_Nec_code+2)& (0+255),w,b
 12039  000E3C  0100               	movlb	0	; () banked
 12040  000E3E  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 12041  000E40  0100               	movlb	0	; () banked
 12042  000E42  35F7               	rlcf	(_Nec_code+3)& (0+255),w,b
 12043  000E44  0100               	movlb	0	; () banked
 12044  000E46  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 12045                           
 12046                           ;Interrupt.c: 113: if(Time_Elapsed > 1000)
 12047  000E48  0EE9               	movlw	233
 12048  000E4A  5C48               	subwf	_Time_Elapsed,w,c
 12049  000E4C  0E03               	movlw	3
 12050  000E4E  5849               	subwfb	_Time_Elapsed+1,w,c
 12051  000E50  A0D8               	btfss	status,0,c
 12052  000E52  D014               	goto	i2l252
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;Interrupt.c: 114: {
 12056                           ;Interrupt.c: 115: Nec_code = Nec_code + 1;
 12057  000E54  0E01               	movlw	1
 12058  000E56  0100               	movlb	0	; () banked
 12059  000E58  25F4               	addwf	_Nec_code& (0+255),w,b
 12060  000E5A  0100               	movlb	0	; () banked
 12061  000E5C  6FF4               	movwf	_Nec_code& (0+255),b
 12062  000E5E  0E00               	movlw	0
 12063  000E60  0100               	movlb	0	; () banked
 12064  000E62  21F5               	addwfc	(_Nec_code+1)& (0+255),w,b
 12065  000E64  0100               	movlb	0	; () banked
 12066  000E66  6FF5               	movwf	(_Nec_code+1)& (0+255),b
 12067  000E68  0E00               	movlw	0
 12068  000E6A  0100               	movlb	0	; () banked
 12069  000E6C  21F6               	addwfc	(_Nec_code+2)& (0+255),w,b
 12070  000E6E  0100               	movlb	0	; () banked
 12071  000E70  6FF6               	movwf	(_Nec_code+2)& (0+255),b
 12072  000E72  0E00               	movlw	0
 12073  000E74  0100               	movlb	0	; () banked
 12074  000E76  21F7               	addwfc	(_Nec_code+3)& (0+255),w,b
 12075  000E78  0100               	movlb	0	; () banked
 12076  000E7A  6FF7               	movwf	(_Nec_code+3)& (0+255),b
 12077  000E7C                     i2l252:
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;Interrupt.c: 116: }
 12081                           ;Interrupt.c: 118: bit_count = bit_count + 1;
 12082  000E7C  2858               	incf	_bit_count,w,c
 12083  000E7E  6E58               	movwf	_bit_count,c
 12084                           
 12085                           ;Interrupt.c: 119: if(bit_count > 31)
 12086  000E80  0E1F               	movlw	31
 12087  000E82  6458               	cpfsgt	_bit_count,c
 12088  000E84  D009               	goto	i2l253
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;Interrupt.c: 120: {
 12092                           ;Interrupt.c: 121: nec_ok = 1;
 12093  000E86  0E00               	movlw	0
 12094  000E88  6E4B               	movwf	_nec_ok+1,c
 12095  000E8A  0E01               	movlw	1
 12096  000E8C  6E4A               	movwf	_nec_ok,c
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;Interrupt.c: 122: Nec_code1 = (char) ((Nec_code >> 8));
 12100  000E8E  C0F5  F051         	movff	_Nec_code+1,_Nec_code1
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;Interrupt.c: 123: INTCONbits.INT0IE = 0;
 12104  000E92  98F2               	bcf	intcon,4,c	;volatile
 12105                           
 12106                           ;Interrupt.c: 124: Nec_state = 0;
 12107  000E94  0E00               	movlw	0
 12108  000E96  6E52               	movwf	_Nec_state,c
 12109  000E98                     i2l253:
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;Interrupt.c: 125: }
 12113                           ;Interrupt.c: 127: Nec_state = 3;
 12114  000E98  0E03               	movlw	3
 12115  000E9A  6E52               	movwf	_Nec_state,c
 12116                           
 12117                           ;Interrupt.c: 128: }
 12118  000E9C  D786               	goto	i2l4405
 12119  000E9E                     i2l4453:
 12120                           
 12121                           ;Interrupt.c: 129: else
 12122                           ;Interrupt.c: 130: force_nec_state0();
 12123  000E9E  ECE4  F011         	call	_force_nec_state0	;wreg free
 12124  000EA2  D783               	goto	i2l4405
 12125  000EA4  D782               	goto	i2l4405
 12126                           
 12127                           ;Interrupt.c: 134: }
 12128                           ;Interrupt.c: 135: }
 12129                           
 12130                           ;Interrupt.c: 133: return;
 12131                           
 12132                           ;Interrupt.c: 132: INTCON2bits.INTEDG0 = 1;
 12133  000EA6  D011               	goto	i2l243
 12134  000EA8                     i2l4461:
 12135  000EA8  5052               	movf	_Nec_state,w,c
 12136                           
 12137                           ; Switch size 1, requested type "space"
 12138                           ; Number of cases is 5, Range of values is 0 to 4
 12139                           ; switch strategies available:
 12140                           ; Name         Instructions Cycles
 12141                           ; simple_byte           16     9 (average)
 12142                           ;	Chosen strategy is simple_byte
 12143  000EAA  0A00               	xorlw	0	; case 0
 12144  000EAC  B4D8               	btfsc	status,2,c
 12145  000EAE  D768               	goto	i2l4399
 12146  000EB0  0A01               	xorlw	1	; case 1
 12147  000EB2  B4D8               	btfsc	status,2,c
 12148  000EB4  D77C               	goto	i2l4409
 12149  000EB6  0A03               	xorlw	3	; case 2
 12150  000EB8  B4D8               	btfsc	status,2,c
 12151  000EBA  D789               	goto	i2l4419
 12152  000EBC  0A01               	xorlw	1	; case 3
 12153  000EBE  B4D8               	btfsc	status,2,c
 12154  000EC0  D796               	goto	i2l4429
 12155  000EC2  0A07               	xorlw	7	; case 4
 12156  000EC4  B4D8               	btfsc	status,2,c
 12157  000EC6  D7A3               	goto	i2l4439
 12158  000EC8  D000               	goto	i2l243
 12159  000ECA                     i2l243:
 12160  000ECA  0012               	return		;funcret
 12161  000ECC                     __end_of_INT0_isr:
 12162                           	opt stack 0
 12163                           pclatu	equ	0xFFB
 12164                           pclath	equ	0xFFA
 12165                           tblptru	equ	0xFF8
 12166                           tblptrh	equ	0xFF7
 12167                           tblptrl	equ	0xFF6
 12168                           tablat	equ	0xFF5
 12169                           prodh	equ	0xFF4
 12170                           prodl	equ	0xFF3
 12171                           intcon	equ	0xFF2
 12172                           intcon2	equ	0xFF1
 12173                           postinc0	equ	0xFEE
 12174                           fsr0h	equ	0xFEA
 12175                           fsr0l	equ	0xFE9
 12176                           wreg	equ	0xFE8
 12177                           postdec1	equ	0xFE5
 12178                           plusw1	equ	0xFE3
 12179                           fsr1h	equ	0xFE2
 12180                           fsr1l	equ	0xFE1
 12181                           indf2	equ	0xFDF
 12182                           postinc2	equ	0xFDE
 12183                           postdec2	equ	0xFDD
 12184                           plusw2	equ	0xFDB
 12185                           fsr2h	equ	0xFDA
 12186                           fsr2l	equ	0xFD9
 12187                           status	equ	0xFD8
 12188                           
 12189 ;; *************** function _force_nec_state0 *****************
 12190 ;; Defined at:
 12191 ;;		line 45 in file "Interrupt.c"
 12192 ;; Parameters:    Size  Location     Type
 12193 ;;		None
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;		None
 12196 ;; Return value:  Size  Location     Type
 12197 ;;		None               void
 12198 ;; Registers used:
 12199 ;;		wreg, status,2
 12200 ;; Tracked objects:
 12201 ;;		On entry : 0/0
 12202 ;;		On exit  : 0/0
 12203 ;;		Unchanged: 0/0
 12204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12209 ;;Total ram usage:        0 bytes
 12210 ;; Hardware stack levels used:    1
 12211 ;; This function calls:
 12212 ;;		Nothing
 12213 ;; This function is called by:
 12214 ;;		_INT0_isr
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text74
 12219  0023C8                     __ptext74:
 12220                           	opt stack 0
 12221  0023C8                     _force_nec_state0:
 12222                           	opt stack 20
 12223                           
 12224                           ;Interrupt.c: 47: Nec_state=0;
 12225                           
 12226                           ;incstack = 0
 12227  0023C8  0E00               	movlw	0
 12228  0023CA  6E52               	movwf	_Nec_state,c
 12229                           
 12230                           ;Interrupt.c: 48: T1CONbits.TMR1ON = 0;
 12231  0023CC  90CD               	bcf	4045,0,c	;volatile
 12232  0023CE  0012               	return		;funcret
 12233  0023D0                     __end_of_force_nec_state0:
 12234                           	opt stack 0
 12235                           pclatu	equ	0xFFB
 12236                           pclath	equ	0xFFA
 12237                           tblptru	equ	0xFF8
 12238                           tblptrh	equ	0xFF7
 12239                           tblptrl	equ	0xFF6
 12240                           tablat	equ	0xFF5
 12241                           prodh	equ	0xFF4
 12242                           prodl	equ	0xFF3
 12243                           intcon	equ	0xFF2
 12244                           intcon2	equ	0xFF1
 12245                           postinc0	equ	0xFEE
 12246                           fsr0h	equ	0xFEA
 12247                           fsr0l	equ	0xFE9
 12248                           wreg	equ	0xFE8
 12249                           postdec1	equ	0xFE5
 12250                           plusw1	equ	0xFE3
 12251                           fsr1h	equ	0xFE2
 12252                           fsr1l	equ	0xFE1
 12253                           indf2	equ	0xFDF
 12254                           postinc2	equ	0xFDE
 12255                           postdec2	equ	0xFDD
 12256                           plusw2	equ	0xFDB
 12257                           fsr2h	equ	0xFDA
 12258                           fsr2l	equ	0xFD9
 12259                           status	equ	0xFD8
 12260                           pclatu	equ	0xFFB
 12261                           pclath	equ	0xFFA
 12262                           tblptru	equ	0xFF8
 12263                           tblptrh	equ	0xFF7
 12264                           tblptrl	equ	0xFF6
 12265                           tablat	equ	0xFF5
 12266                           prodh	equ	0xFF4
 12267                           prodl	equ	0xFF3
 12268                           intcon	equ	0xFF2
 12269                           intcon2	equ	0xFF1
 12270                           postinc0	equ	0xFEE
 12271                           fsr0h	equ	0xFEA
 12272                           fsr0l	equ	0xFE9
 12273                           wreg	equ	0xFE8
 12274                           postdec1	equ	0xFE5
 12275                           plusw1	equ	0xFE3
 12276                           fsr1h	equ	0xFE2
 12277                           fsr1l	equ	0xFE1
 12278                           indf2	equ	0xFDF
 12279                           postinc2	equ	0xFDE
 12280                           postdec2	equ	0xFDD
 12281                           plusw2	equ	0xFDB
 12282                           fsr2h	equ	0xFDA
 12283                           fsr2l	equ	0xFD9
 12284                           status	equ	0xFD8
 12285                           
 12286                           	psect	rparam
 12287  0000                     pclatu	equ	0xFFB
 12288                           pclath	equ	0xFFA
 12289                           tblptru	equ	0xFF8
 12290                           tblptrh	equ	0xFF7
 12291                           tblptrl	equ	0xFF6
 12292                           tablat	equ	0xFF5
 12293                           prodh	equ	0xFF4
 12294                           prodl	equ	0xFF3
 12295                           intcon	equ	0xFF2
 12296                           intcon2	equ	0xFF1
 12297                           postinc0	equ	0xFEE
 12298                           fsr0h	equ	0xFEA
 12299                           fsr0l	equ	0xFE9
 12300                           wreg	equ	0xFE8
 12301                           postdec1	equ	0xFE5
 12302                           plusw1	equ	0xFE3
 12303                           fsr1h	equ	0xFE2
 12304                           fsr1l	equ	0xFE1
 12305                           indf2	equ	0xFDF
 12306                           postinc2	equ	0xFDE
 12307                           postdec2	equ	0xFDD
 12308                           plusw2	equ	0xFDB
 12309                           fsr2h	equ	0xFDA
 12310                           fsr2l	equ	0xFD9
 12311                           status	equ	0xFD8


Data Sizes:
    Strings     210
    Constant    493
    Data        178
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     16     126
    BANK1           256      0      75
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[3]), 
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[2]), 
		 -> STR_9(CODE[3]), STR_8(CODE[13]), STR_7(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_6(CODE[15]), STR_5(CODE[22]), STR_4(CODE[16]), STR_3(CODE[20]), 
		 -> STR_2(CODE[21]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Turn_On_Fan->_do_update_pwm
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Do_Beep->_Wait_One_Sec
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   97738
                                             13 BANK0      3     3      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                            ___awdiv
                             ___wmul
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3846
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        6     6      0   22517
                                              7 BANK0      6     6      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1733
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                         16    14      2    2299
                                             30 COMRAM    16    14      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           2     0      2    2262
                                             30 COMRAM     2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0    8102
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1056
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          0     0      0     616
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0    8102
                            _Do_Beep
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0      68
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                       _Wait_One_Sec
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    0     0      0     133
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     1     1      0     331
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     3     1      2     365
                                             19 COMRAM     3     1      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_One_Sec
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      4B       7       29.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      7E       5       98.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 28 16:37:10 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
               __size_of_I2C_Start 0012                        _SSPSTATbits 000FC7  
               __size_of_I2C_Write 003E                       drawCircle@x0 001C  
                     drawCircle@y0 001E                                 l31 1F6A  
                               l52 21AC                                 l36 22A4  
                               l61 2058                                 l47 2162  
                               l68 1D16                       ___awdiv@sign 001C  
             __size_of_Turn_On_Fan 000E                ___wmul@multiplicand 0013  
                  ??_Update_Screen 00EB                                l102 1F2C  
                              l105 1FF6                                l185 20EA  
                              l610 20BA                                l426 234C  
                              l616 1962                                l632 1020  
                              l641 0F76                                l634 0EFA  
                              l556 1D62                                l566 22B4  
                              l670 1634                                l680 0C6C  
                              l672 16A4                                l673 16C6  
                              l754 21D0                                l860 1B36  
                              l853 1B0E                                l669 16C8  
                              l829 0750                                l862 1B50  
                              l792 04F8                                _FAN 0050  
                              l857 1B28                                l865 213C  
                              l858 1B2A                                l859 1B34  
                              _PR2 000FCB                                _day 005A  
                _Deactivate_Buzzer 23B0               __size_of_I2C_ReStart 0016  
                              _dow 005B                                _nbr 00FA  
                              _rpm 004C              __size_of_Turn_Off_Fan 0008  
                              _rps 00FC                                _txt 004E  
                     ___awmod@sign 0024                                prod 000FF3  
                              wreg 000FE8                 ?_Deactivate_Buzzer 0001  
                       _Fan_SW_Txt 00D8                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 20EC  
                     ___ftdiv@cntr 0035                       ___ftdiv@sign 003A  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0019  
                             l1071 19E4                               l1322 2188  
                             l1058 18DA                               l1260 1332  
                             l1173 178E                               l1245 15EC  
                             l1184 1766                               l1248 15B8  
                             l1281 150A                               l1427 1FA8  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l1296 21F2                               l1388 1C08  
                             l1398 1DFA                               l6003 0D42  
                             l6013 21EA                               l6031 186E  
                             l6103 1BCC                               l5233 1924  
                             l6041 1896                               l6025 185C  
                             l6105 1BD6                               l5403 15C6  
                             l5243 194A                               l6115 1BFC  
                             l6107 1BDE                               l6131 1DEE  
                             l6123 1DC6                               l5309 2018  
                             l5261 16EA                               l5413 125A  
                             l5245 1958                               l5229 18EC  
                             l6037 1884                               l6053 18C0  
                             l6125 1DD0                               l5271 174E  
                             l5263 16F6                               l5415 1274  
                             l6039 188E                               l6127 1DD8  
                             l5273 175A                               l5265 1716  
                             l5257 16DA                               l5441 12DE  
                             l5433 12B6                               l6161 21A0  
                             l6153 2156                               l6057 18D0  
                             l6049 18B4                               l6081 19A8  
                             l6073 1988                               l6321 0412  
                             l5291 1FEE                               l5451 130C  
                             l5443 12E4                               l5419 1282  
                             l5515 181C                               l5347 209C  
                             l5355 1EA6                               l6147 229E  
                             l6411 0628                               l6403 0606  
                             l6323 0420                               l5285 1780  
                             l5269 172E                               l5373 1552  
                             l5437 12C8                               l5461 1444  
                             l5701 0EF6                               l6093 19DA  
                             l6085 19BE                               l6077 1996  
                             l6069 197A                               l6413 0630  
                             l6405 0610                               l6341 04C2  
                             l6333 045E                               l6317 0402  
   I2C_Write_Cmd_Write_Data@Device 0015                               l5279 176E  
                             l5367 152A                               l5447 12F6  
                             l5359 1EC2                               l5711 0F36  
                             l5703 0EFE                               l6175 1CE6  
                             l6079 19A0                               l6503 01C2  
                             l6431 06C8                               l6423 0668  
                             l6327 042A                               l5297 2000  
                             l5801 21CA                               l5393 1592  
                             l5369 1544                               l5561 1B06  
                             l5553 1AF4                               l5713 0F6A  
                             l6169 203C                               l6177 1CEA  
                             l6089 19CA                               l6505 01D8  
                             l6441 0728                               l6417 0648  
                             l6361 0540                               l6345 04CA  
                             l6329 0440                               l5299 2006  
                             l5491 14D6                               l5483 14AE  
                             l5731 0FEC                               l5723 0F98  
                             l5715 0F6E                               l5707 0F06  
                             l6419 0650                               l6427 067C  
                             l6371 0574                               l6363 0544  
                             l6443 0734                               l5485 14B4  
                             l5493 14E0                               l5573 1B20  
                             l5565 1B12                               l5557 1AFE  
                             l5733 1014                               l5725 0FC0  
                             l6453 0058                               l6429 0684  
                             l6437 070E                               l6381 058A  
                             l6357 0526                               l5479 149E  
                             l6439 0720                               l6375 057A  
                             l6367 0550                               l6391 05B4  
                             l6703 0B60                               l6711 0B98  
                             l5833 1EF0                               l5497 14F8  
                             l5489 14C8                               l5745 1F76  
                             l6385 05AE                               l6377 057E  
                             l6393 05C6                               l5843 1F06  
                             l5851 1F16                               l5739 101C  
                             l5747 1F7C                               l5763 166C  
                             l6475 012E                               l6459 0098  
                             l6707 0B6C                               l5845 1F0E  
                             l5837 1EF8                               l5693 0EDC  
                             l5941 11AE                               l5757 15FE  
                             l5917 2064                               l6469 00EE  
                             l6709 0B8C                               l6629 09C6  
                             l5855 1F22                               l5783 16B2  
                             l5775 169A                               l5919 206E  
                             l6399 05E2                               l6663 0AC0  
                             l5857 1F28                               l5697 0EE8  
                             l5953 121E                               l5945 11CC  
                             l5929 115E                               l6681 0B20  
                             l6673 0B02                               l6649 0A8E  
                             l5955 1226                               l5779 16A8  
                             l6691 0B44                               l6667 0ADA  
                             l5797 21B6                               l5789 16C2  
                             l6677 0B0C                               l5975 0C52  
                             l6697 0B52                               STR_1 FF2C  
                             STR_2 FF76                               STR_3 FF8B  
                             STR_4 FFB0                               STR_5 FF60  
                             STR_6 FFC0                               STR_7 FF4A  
                             STR_8 FFCF                               STR_9 FFF8  
                             u4021 1436                               u4040 1462  
                             u4045 145A                               u4310 0FCE  
                             u4530 1188                               u3740 191A  
                             u4380 162C                               u4390 1662  
                             u3911 151C                               u3931 153A  
                             u5437 2376                               u4830 2036  
                             u3961 124C                               u4841 1CD0  
                             u3981 126A                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0044  
                     _DS1621_tempF 0046                ??_Deactivate_Buzzer 0011  
                             _date 00BD                               _main 09BC  
                             _font FD3F                       ___ftpack@arg 0011  
                             _hour 005E                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 2394                   __end_of_I2C_Read 1F2E  
                             _time 00C6                               _year 006C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 2304                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 2372  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 1E50                     _Increase_Speed 213E  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 239E                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 23A8                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0ECC  
        __end_of_Deactivate_Buzzer 23B8                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 18DC  
                  drawCircle@ddF_x 0026                              STR_10 FFF2  
                  drawCircle@ddF_y 0028                              STR_11 FFE2  
                            STR_12 FFE7                              STR_13 FFDC  
                            STR_14 FFFB                              STR_15 FFF4  
                            STR_16 FFEC                              STR_17 FFF0  
                            STR_18 FF9F                    __end_of___awmod 19E6  
                  __end_of___ftdiv 15EE                    __end_of___ftmul 1334  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___fttol 150C  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 1C12                    __end_of___lwmod 1E04  
                            i2l231 1AA8                              i2l243 0ECA  
                            i2l252 0E7C                              i2l253 0E98  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 1F6C                              _Rcmd1 1022  
                            _Rcmd3 1334                         _i2cHighSda 23C0  
                       _i2cHighScl 2372                    __end_of_dpowers FF24  
                            _color 0115                              _font2 FE3E  
                            _found 005D                    __end_of_isdigit 21F4  
                            _tempC 00DC                              _tempF 00E0  
                            _month 0060                      ___ftpack@sign 0015  
                            _putch 2348                              main@j 00F2  
                __end_of_I2C_Start 2316                  __end_of_I2C_Write 2026  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8             __end_of_Increase_Speed 2164  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 19E6  
                    ??_Set_RPM_RGB 0021                       __end_of_main 0BAA  
                     __end_of_font FE3E                   __end_of_Rcmd2red 1FE8  
                 ??_Decrease_Speed 0044                             ??_main 00F1  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 22E0  
                       _Set_DC_RGB 2026          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0018  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 1790  
                 __end_of___lbtoft 218A                          ??_Do_Beep 0013  
                           _DC_Txt 00D4                             i2l4405 0DAA  
                           i2l4415 0DCA                             i2l4409 0DAE  
                        ??_Do_Init 0016                             i2l4419 0DCE  
                           i2l4453 0E9E                             i2l4429 0DEE  
                           i2l4461 0EA8                             i2l4439 0E0E  
                           i2l4399 0D80                             i2l4853 1A9E  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00B7                   _force_nec_state0 23C8  
                 __end_of_delay_ms 1D6A                             _i2cAck 2316  
                 __end_of_fillRect 1EE6                   __end_of_drawChar 1022  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 2116                          ??___awdiv 001B  
                 __end_of_drawtext 123C                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 0100  
                        ??___lwmod 001C                             _buffer 012A  
                           _nec_ok 004A                             clear_0 19EC  
                           clear_1 19F8                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
                  ___awmod@divisor 0021                          ??_get_RPM 0021  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0023  
                           _printf 03F8                       drawtext@size 0040  
                           _strcpy 205A                             _strlen 1F6C  
            ___ftmul@f3_as_product 0027                __end_of_Set_RPM_RGB 1D18  
                       _Toggle_Fan 2292                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD3E                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 2214                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 22BA                         __accesstop 0080  
          __end_of__initialization 1A5C                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 1132                      __end_of_Rcmd3 1426  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1B52  
                     __pidataBANK1 1E50                      __end_of_font2 FF1A  
                __end_of_i2cLowSda 23A8                  __end_of_i2cLowScl 23C0  
                    __end_of_putch 2356                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                      ?_Set_DC_RGB 001F                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1B52                            ??_putch 0011  
                       __pbssBANK0 00F4                   _setup_alarm_hour 0063  
                 _setup_alarm_time 0097                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0012                         _alarm_date 0054  
                       ??_INT0_isr 0001                         _alarm_hour 0055  
                       _alarm_time 008E                      ?_Wait_One_Sec 0001  
                          ?_i2cAck 0001               Set_DC_RGB@duty_cycle 001F  
               __CFG_CCP2MX$PORTBE 000000                      ??_Turn_On_Fan 0044  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                      _Set_RPM_RGB 1CC6                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 00F8                          ?___ftpack 0011  
                        ?___lbtoft 0019                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                        ?_Toggle_Fan 0001  
                ??_Activate_Buzzer 0011                         _fillScreen 2214  
            __end_of_Update_Screen 03F8                         _drawCircle 0BAA  
                   _init_INTERRUPT 2264                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 00CF              __end_of_fillRectangle 16CA  
                          _Do_Beep 2364                          ?_drawtext 0039  
                _DS3231_Setup_Time 1C12                            _Do_Init 1E04  
         _I2C_Write_Cmd_Write_Data 21F4         __end_of_I2C_Write_Cmd_Only 2264  
                       ??_Rcmd2red 0014                     ??_Wait_One_Sec 0011  
                          _i2cNack 2394                 __end_of_TIMER1_isr 238A  
               ?_DS3231_Setup_Time 0001                      _write_command 2338  
                        _I2C_Start 2304                          _I2C_Write 1FE8  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __size_of_Set_DC_RGB 0034  
              __end_of_DS1621_Init 224A                  __end_of_drawPixel 20BC  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1964  
                          ___awdiv 1846                            ___awmod 1964  
                          ___ftdiv 150C                    __size_of___wmul 0028  
                          ___ftmul 123C                            ___fttol 1426  
                          ___lwdiv 1BB6                            ___lwmod 1DB8  
                  __size_of_chkisr 1ADA                          ?_spiwrite 0001  
                          __pcinit 19E6                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 1F2E                            __ptext0 09BC  
                          __ptext1 03F8                            __ptext2 2348  
                          __ptext3 21D2                            __ptext4 1DB8  
                          __ptext5 1BB6          __size_of_DS1621_Read_Temp 0030  
                          __ptext6 1F2E                            __ptext7 001C  
                          __ptext8 1964                            __ptext9 2292  
                  __size_of_printf 035A                  __end_of_init_UART 22CE  
              __end_of_Turn_On_Fan 2364             __end_of_init_INTERRUPT 227C  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF2C  
         __end_of_force_nec_state0 23D0                          _T1CONbits 000FCD  
                          _dpowers FF1A              __end_of_do_update_pwm 1846  
                          _isdigit 21D2                   ___awmod@dividend 001F  
                       _duty_cycle 005C                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 2292                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1C6E                   ??_Increase_Speed 0044  
                       ??_drawChar 0035                          _LCD_Reset 22CE  
                    _setAddrWindow 1D6A                     __pintcode_body 1A66  
                    Wait_One_Sec@k 0011                         delay_ms@ms 0017  
             end_of_initialization 1A5C                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD3E  
        __size_of_DS3231_Read_Time 0058                            int_func 1A66  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 0021                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                          _PORTAbits 000F80  
                 drawtext@cursor_x 00EA                   drawtext@cursor_y 00E9  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 00A0  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 00A9                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00E5                         drawPixel@x 001B  
                       drawPixel@y 0018                 _Update_Screen$2567 00ED  
                      _DS1621_Init 2230                        ___ftdiv@exp 0039  
                      printf@width 0036                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0174                     __end_of_i2cAck 2328  
                      ___ftmul@exp 0026           DS1621_Read_Temp@Data_Ret 0016  
                      _Turn_On_Fan 2356                 __end_of_i2cHighSda 23C8  
               __end_of_i2cHighScl 237E                     __end_of___wmul 213E  
                    delay_ms@count 001B                         _write_data 2328  
                    __pidataCOMRAM 23D0                     __end_of_chkisr 1AE2  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 227C  
                       drawtext@bg 003E                          _Nec_code1 0051  
                        _i2cLowSda 239E                          _i2cLowScl 23B8  
             __end_of_Wait_One_Sec 21D2                     __end_of_printf 0752  
                     ??_Set_DC_RGB 0021                     __end_of_strcpy 208C  
                   __end_of_strlen 1FAA                          _Nec_state 0052  
              start_initialization 19E6             Update_Screen@neg_tempF 00EF  
       __size_of_DS3231_Setup_Time 005C            __size_of_Decrease_Speed 0024  
                  ??_write_command 0013                          _OpenUSART 1AE2  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 22E0  
               __end_of_Set_DC_RGB 205A                           ??___wmul 0015  
                     ?_Set_RPM_RGB 001F                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 20BC                           ??_strcpy 0015  
                         ??_strlen 0013                       ??_Toggle_Fan 0044  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 0044         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00E4  
                      ??_LCD_Reset 001D                       _isdigit$2230 0012  
                __size_of_delay_ms 0052                           ?_Do_Beep 0001  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 1C6E                           ?_i2cNack 0001  
                __size_of_drawtext 010A                   ___lwdiv@dividend 0011  
               __end_of_Toggle_Fan 22A6                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 2116                     ??_Turn_Off_Fan 0011  
                    __pmediumconst FD3E                           ?___awdiv 0017  
                         ?___awmod 001F                           ?___ftdiv 002C  
                         ?___ftmul 001D                           ?___fttol 0011  
                        __tft_type 0053                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 224A                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 208C                           ?_get_RPM 001F  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 238A                           _I2C_Read 1EE6  
                         _I2C_Stop 22F2                  _Initialize_Screen 0752  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 22BA                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF24  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 22F2  
                   ___wmul@product 0015                ??_Initialize_Screen 0043  
                         _INT0_isr 0D58               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             __size_of_Update_Screen 03DC  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
            __size_of_Wait_One_Sec 0024                          _setup_day 0066  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 09BC  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                       ?_init_UART 0001                     _Decrease_Speed 218A  
                      _INTCON2bits 000FF1                          copy_data0 1A12  
                        copy_data1 1A32                          drawtext@i 00E7  
           __size_of_drawFastVLine 0088                          drawtext@x 00E4  
                        drawtext@y 0039                           _Nec_code 00F4  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 000E                       ?_DS1621_Init 0001  
                         _Rcmd2red 1FAA                   __size_of_Do_Init 004C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0048                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00BB                       _Wait_One_Sec 21AE  
                         __Hrparam 0000             __size_of_do_update_pwm 00B6  
               __end_of_fillScreen 2230                           __Lrparam 0000  
               __end_of_drawCircle 0D58                       ?_Turn_On_Fan 0001  
                 __size_of___awdiv 0096                   __size_of___awmod 0082  
                 __size_of___ftdiv 00E2                   __size_of___ftmul 00F8  
                 __size_of___fttol 00E6                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C               __size_of_Set_RPM_RGB 0052  
                         ___ftpack 16CA                           ___lbtoft 2164  
                     ?_I2C_ReStart 0001                   __size_of_get_RPM 003E  
                    _Update_Screen 001C                     _setup_fan_temp 006D  
                   _setup_fan_text 00B2                   __size_of_isdigit 0022  
                         _delay_ms 1D18             __end_of_Decrease_Speed 21AE  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 2356                           __ptext11 23A8  
                         __ptext20 1F6C                           __ptext12 1CC6  
                         __ptext21 0ECC                           __ptext13 2026  
                         __ptext30 1022                           __ptext22 1E9C  
                         __ptext14 1846                           __ptext31 2328  
                         __ptext23 18DC                           __ptext15 0752  
                         __ptext40 1AE2                           __ptext32 2338  
                         __ptext24 0BAA                           __ptext16 205A  
                         __ptext41 2264                           __ptext33 22A6  
                         __ptext25 208C                           __ptext17 2214  
                         __ptext50 123C                           __ptext42 238A  
                         __ptext34 22CE                           __ptext26 1D6A  
                         __ptext18 15EE                           __ptext51 150C  
                         __ptext43 2230                           __ptext35 1D18  
                         __ptext27 20EC                           __ptext19 1132  
                         __ptext60 1FE8                           __ptext52 16CA  
                         __ptext44 21F4                           __ptext36 2116  
                         __ptext28 1334                           __ptext61 22F2  
                         __ptext53 2364                           __ptext45 224A  
                         __ptext37 213E                           __ptext29 1FAA  
                         __ptext70 2372                           __ptext62 2304  
                         __ptext54 21AE                           __ptext46 218A  
                         __ptext38 1E04                           __ptext63 1EE6  
                         __ptext55 23B0                           __ptext47 1790  
                         __ptext39 22BA                           __ptext72 237E  
                         __ptext64 2394                           __ptext56 22E0  
                         __ptext48 2164                           __ptext73 0D58  
                         __ptext65 2316                           __ptext57 1C12  
                         __ptext49 1426                           __ptext74 23C8  
                         __ptext66 227C                           __ptext58 1C6E  
                         __ptext67 239E                           __ptext59 20BC  
                         __ptext68 23B8                           __ptext69 23C0  
                         _fillRect 1E9C                           _drawChar 0ECC  
             __end_of_Turn_Off_Fan 23B0   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 0059                           _drawtext 1132  
                       strcpy@from 0013                      _fillRectangle 15EE  
         __end_of_DS1621_Read_Temp 20EC                   ?_Activate_Buzzer 0001  
                    __size_of_main 01EE            __size_of_Increase_Speed 0026  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 18DC                          printf@idx 002F  
                         _spiwrite 22A6                          printf@val 0033  
                      ??_drawPixel 001B                           _rowstart 0061  
         __end_of_DS3231_Read_Time 1CC6         __size_of_Initialize_Screen 026A  
                   ?_Update_Screen 0001                         _INTCONbits 000FF2  
                    _do_update_pwm 1790                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                    ?_Decrease_Speed 0001  
                         isdigit@c 0013                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
                 Set_RPM_RGB@F4110 0080                   ___lwmod@dividend 0018  
            __end_of_write_command 2348                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 0041                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0030                       ??_write_data 0013  
                       _TIMER1_isr 237E                      fillRect@color 0026  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A                    Set_RPM_RGB@temp 0021  
            __end_of_setAddrWindow 1DB8                 fillRectangle@color 001B  
                do_update_pwm@dc_I 0042                  do_update_pwm@dc_f 003E  
                    drawChar@color 0030                        _setup_month 0069  
                   Set_RPM_RGB@rpm 001F                 __end_of_write_data 2338  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001A          ?_I2C_Write_Cmd_Write_Data 0013  
