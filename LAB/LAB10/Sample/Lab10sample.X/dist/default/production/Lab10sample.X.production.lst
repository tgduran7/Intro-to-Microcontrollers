

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 21 10:07:13 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           	psect	idataCOMRAM
    59  00167A                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _array1
    63  00167A  A2                 	db	162
    64  00167B  62                 	db	98
    65  00167C  E2                 	db	226
    66  00167D  22                 	db	34
    67  00167E  02                 	db	2
    68  00167F  C2                 	db	194
    69  001680  E0                 	db	224
    70  001681  A8                 	db	168
    71  001682  90                 	db	144
    72  001683  68                 	db	104
    73  001684  98                 	db	152
    74  001685  B0                 	db	176
    75  001686  30                 	db	48
    76  001687  18                 	db	24
    77  001688  7A                 	db	122
    78  001689  10                 	db	16
    79  00168A  38                 	db	56
    80  00168B  5A                 	db	90
    81  00168C  42                 	db	66
    82  00168D  4A                 	db	74
    83  00168E  52                 	db	82
    84                           
    85                           ;initializer for _wrap
    86  00168F  01                 	db	1
    87                           
    88                           	psect	idataBANK0
    89  0014B2                     __pidataBANK0:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _D1
    93  0014B2  00                 	db	0
    94  0014B3  00                 	db	0
    95  0014B4  01                 	db	1
    96  0014B5  00                 	db	0
    97  0014B6  00                 	db	0
    98  0014B7  02                 	db	2
    99  0014B8  00                 	db	0
   100  0014B9  00                 	db	0
   101  0014BA  05                 	db	5
   102  0014BB  00                 	db	0
   103  0014BC  00                 	db	0
   104  0014BD  07                 	db	7
   105  0014BE  00                 	db	0
   106  0014BF  00                 	db	0
   107  0014C0  07                 	db	7
   108  0014C1  00                 	db	0
   109  0014C2  00                 	db	0
   110  0014C3  07                 	db	7
   111  0014C4  00                 	db	0
   112  0014C5  00                 	db	0
   113  0014C6  07                 	db	7
   114                           
   115                           ;initializer for _D2
   116  0014C7  00                 	db	0
   117  0014C8  01                 	db	1
   118  0014C9  00                 	db	0
   119  0014CA  00                 	db	0
   120  0014CB  04                 	db	4
   121  0014CC  00                 	db	0
   122  0014CD  00                 	db	0
   123  0014CE  05                 	db	5
   124  0014CF  00                 	db	0
   125  0014D0  00                 	db	0
   126  0014D1  07                 	db	7
   127  0014D2  00                 	db	0
   128  0014D3  00                 	db	0
   129  0014D4  07                 	db	7
   130  0014D5  00                 	db	0
   131  0014D6  00                 	db	0
   132  0014D7  07                 	db	7
   133  0014D8  00                 	db	0
   134  0014D9  00                 	db	0
   135  0014DA  07                 	db	7
   136  0014DB  00                 	db	0
   137                           
   138                           ;initializer for _D3
   139  0014DC  10                 	db	16
   140  0014DD  00                 	db	0
   141  0014DE  00                 	db	0
   142  0014DF  40                 	db	64
   143  0014E0  00                 	db	0
   144  0014E1  00                 	db	0
   145  0014E2  50                 	db	80
   146  0014E3  00                 	db	0
   147  0014E4  00                 	db	0
   148  0014E5  70                 	db	112
   149  0014E6  00                 	db	0
   150  0014E7  00                 	db	0
   151  0014E8  70                 	db	112
   152  0014E9  00                 	db	0
   153  0014EA  00                 	db	0
   154  0014EB  70                 	db	112
   155  0014EC  00                 	db	0
   156  0014ED  00                 	db	0
   157  0014EE  70                 	db	112
   158  0014EF  00                 	db	0
   159  0014F0  00                 	db	0
   160                           
   161                           	psect	idataBANK1
   162  00119C                     __pidataBANK1:
   163                           	opt stack 0
   164                           
   165                           ;initializer for _color
   166  00119C  F800               	dw	63488
   167  00119E  F800               	dw	63488
   168  0011A0  F800               	dw	63488
   169  0011A2  001F               	dw	31
   170  0011A4  001F               	dw	31
   171  0011A6  07E0               	dw	2016
   172  0011A8  F81F               	dw	63519
   173  0011AA  F81F               	dw	63519
   174  0011AC  F81F               	dw	63519
   175  0011AE  0000               	dw	0
   176  0011B0  0000               	dw	0
   177  0011B2  0000               	dw	0
   178  0011B4  0000               	dw	0
   179  0011B6  0000               	dw	0
   180  0011B8  0000               	dw	0
   181  0011BA  0000               	dw	0
   182  0011BC  0000               	dw	0
   183  0011BE  0000               	dw	0
   184  0011C0  0000               	dw	0
   185  0011C2  0000               	dw	0
   186  0011C4  0000               	dw	0
   187                           
   188                           ;initializer for _txt1
   189  0011C6  43                 	db	67
   190  0011C7  48                 	db	72
   191  0011C8  2D                 	db	45
   192  0011C9  00                 	db	0
   193  0011CA  43                 	db	67
   194  0011CB  48                 	db	72
   195  0011CC  20                 	db	32
   196  0011CD  00                 	db	0
   197  0011CE  43                 	db	67
   198  0011CF  48                 	db	72
   199  0011D0  2B                 	db	43
   200  0011D1  00                 	db	0
   201  0011D2  50                 	db	80
   202  0011D3  52                 	db	82
   203  0011D4  56                 	db	86
   204  0011D5  00                 	db	0
   205  0011D6  4E                 	db	78
   206  0011D7  58                 	db	88
   207  0011D8  54                 	db	84
   208  0011D9  00                 	db	0
   209  0011DA  50                 	db	80
   210  0011DB  2F                 	db	47
   211  0011DC  50                 	db	80
   212  0011DD  00                 	db	0
   213  0011DE  56                 	db	86
   214  0011DF  4C                 	db	76
   215  0011E0  2D                 	db	45
   216  0011E1  00                 	db	0
   217  0011E2  56                 	db	86
   218  0011E3  4C                 	db	76
   219  0011E4  2B                 	db	43
   220  0011E5  00                 	db	0
   221  0011E6  45                 	db	69
   222  0011E7  51                 	db	81
   223  0011E8  20                 	db	32
   224  0011E9  00                 	db	0
   225  0011EA  20                 	db	32
   226  0011EB  30                 	db	48
   227  0011EC  20                 	db	32
   228  0011ED  00                 	db	0
   229  0011EE  31                 	db	49
   230  0011EF  30                 	db	48
   231  0011F0  30                 	db	48
   232  0011F1  00                 	db	0
   233  0011F2  32                 	db	50
   234  0011F3  30                 	db	48
   235  0011F4  30                 	db	48
   236  0011F5  00                 	db	0
   237  0011F6  20                 	db	32
   238  0011F7  31                 	db	49
   239  0011F8  20                 	db	32
   240  0011F9  00                 	db	0
   241  0011FA  20                 	db	32
   242  0011FB  32                 	db	50
   243  0011FC  20                 	db	32
   244  0011FD  00                 	db	0
   245  0011FE  20                 	db	32
   246  0011FF  33                 	db	51
   247  001200  20                 	db	32
   248  001201  00                 	db	0
   249  001202  20                 	db	32
   250  001203  34                 	db	52
   251  001204  20                 	db	32
   252  001205  00                 	db	0
   253  001206  20                 	db	32
   254  001207  35                 	db	53
   255  001208  20                 	db	32
   256  001209  00                 	db	0
   257  00120A  20                 	db	32
   258  00120B  36                 	db	54
   259  00120C  20                 	db	32
   260  00120D  00                 	db	0
   261  00120E  20                 	db	32
   262  00120F  37                 	db	55
   263  001210  20                 	db	32
   264  001211  00                 	db	0
   265  001212  20                 	db	32
   266  001213  38                 	db	56
   267  001214  20                 	db	32
   268  001215  00                 	db	0
   269  001216  20                 	db	32
   270  001217  39                 	db	57
   271  001218  20                 	db	32
   272  001219  00                 	db	0
   273                           
   274                           	psect	mediumconst
   275  00FD8E                     __pmediumconst:
   276                           	opt stack 0
   277  00FD8E  00                 	db	0
   278  00FD8F                     _font:
   279                           	opt stack 0
   280  00FD8F  00                 	db	0
   281  00FD90  00                 	db	0
   282  00FD91  00                 	db	0
   283  00FD92  00                 	db	0
   284  00FD93  00                 	db	0
   285  00FD94  00                 	db	0
   286  00FD95  00                 	db	0
   287  00FD96  5F                 	db	95
   288  00FD97  00                 	db	0
   289  00FD98  00                 	db	0
   290  00FD99  00                 	db	0
   291  00FD9A  07                 	db	7
   292  00FD9B  00                 	db	0
   293  00FD9C  07                 	db	7
   294  00FD9D  00                 	db	0
   295  00FD9E  14                 	db	20
   296  00FD9F  7F                 	db	127
   297  00FDA0  14                 	db	20
   298  00FDA1  7F                 	db	127
   299  00FDA2  14                 	db	20
   300  00FDA3  24                 	db	36
   301  00FDA4  2A                 	db	42
   302  00FDA5  7F                 	db	127
   303  00FDA6  2A                 	db	42
   304  00FDA7  12                 	db	18
   305  00FDA8  23                 	db	35
   306  00FDA9  13                 	db	19
   307  00FDAA  08                 	db	8
   308  00FDAB  64                 	db	100
   309  00FDAC  62                 	db	98
   310  00FDAD  36                 	db	54
   311  00FDAE  49                 	db	73
   312  00FDAF  56                 	db	86
   313  00FDB0  20                 	db	32
   314  00FDB1  50                 	db	80
   315  00FDB2  00                 	db	0
   316  00FDB3  08                 	db	8
   317  00FDB4  07                 	db	7
   318  00FDB5  03                 	db	3
   319  00FDB6  00                 	db	0
   320  00FDB7  00                 	db	0
   321  00FDB8  1C                 	db	28
   322  00FDB9  22                 	db	34
   323  00FDBA  41                 	db	65
   324  00FDBB  00                 	db	0
   325  00FDBC  00                 	db	0
   326  00FDBD  41                 	db	65
   327  00FDBE  22                 	db	34
   328  00FDBF  1C                 	db	28
   329  00FDC0  00                 	db	0
   330  00FDC1  2A                 	db	42
   331  00FDC2  1C                 	db	28
   332  00FDC3  7F                 	db	127
   333  00FDC4  1C                 	db	28
   334  00FDC5  2A                 	db	42
   335  00FDC6  08                 	db	8
   336  00FDC7  08                 	db	8
   337  00FDC8  3E                 	db	62
   338  00FDC9  08                 	db	8
   339  00FDCA  08                 	db	8
   340  00FDCB  00                 	db	0
   341  00FDCC  80                 	db	128
   342  00FDCD  70                 	db	112
   343  00FDCE  30                 	db	48
   344  00FDCF  00                 	db	0
   345  00FDD0  08                 	db	8
   346  00FDD1  08                 	db	8
   347  00FDD2  08                 	db	8
   348  00FDD3  08                 	db	8
   349  00FDD4  08                 	db	8
   350  00FDD5  00                 	db	0
   351  00FDD6  00                 	db	0
   352  00FDD7  60                 	db	96
   353  00FDD8  60                 	db	96
   354  00FDD9  00                 	db	0
   355  00FDDA  20                 	db	32
   356  00FDDB  10                 	db	16
   357  00FDDC  08                 	db	8
   358  00FDDD  04                 	db	4
   359  00FDDE  02                 	db	2
   360  00FDDF  3E                 	db	62
   361  00FDE0  51                 	db	81
   362  00FDE1  49                 	db	73
   363  00FDE2  45                 	db	69
   364  00FDE3  3E                 	db	62
   365  00FDE4  00                 	db	0
   366  00FDE5  42                 	db	66
   367  00FDE6  7F                 	db	127
   368  00FDE7  40                 	db	64
   369  00FDE8  00                 	db	0
   370  00FDE9  72                 	db	114
   371  00FDEA  49                 	db	73
   372  00FDEB  49                 	db	73
   373  00FDEC  49                 	db	73
   374  00FDED  46                 	db	70
   375  00FDEE  21                 	db	33
   376  00FDEF  41                 	db	65
   377  00FDF0  49                 	db	73
   378  00FDF1  4D                 	db	77
   379  00FDF2  33                 	db	51
   380  00FDF3  18                 	db	24
   381  00FDF4  14                 	db	20
   382  00FDF5  12                 	db	18
   383  00FDF6  7F                 	db	127
   384  00FDF7  10                 	db	16
   385  00FDF8  27                 	db	39
   386  00FDF9  45                 	db	69
   387  00FDFA  45                 	db	69
   388  00FDFB  45                 	db	69
   389  00FDFC  39                 	db	57
   390  00FDFD  3C                 	db	60
   391  00FDFE  4A                 	db	74
   392  00FDFF  49                 	db	73
   393  00FE00  49                 	db	73
   394  00FE01  31                 	db	49
   395  00FE02  41                 	db	65
   396  00FE03  21                 	db	33
   397  00FE04  11                 	db	17
   398  00FE05  09                 	db	9
   399  00FE06  07                 	db	7
   400  00FE07  36                 	db	54
   401  00FE08  49                 	db	73
   402  00FE09  49                 	db	73
   403  00FE0A  49                 	db	73
   404  00FE0B  36                 	db	54
   405  00FE0C  46                 	db	70
   406  00FE0D  49                 	db	73
   407  00FE0E  49                 	db	73
   408  00FE0F  29                 	db	41
   409  00FE10  1E                 	db	30
   410  00FE11  00                 	db	0
   411  00FE12  00                 	db	0
   412  00FE13  14                 	db	20
   413  00FE14  00                 	db	0
   414  00FE15  00                 	db	0
   415  00FE16  00                 	db	0
   416  00FE17  40                 	db	64
   417  00FE18  34                 	db	52
   418  00FE19  00                 	db	0
   419  00FE1A  00                 	db	0
   420  00FE1B  00                 	db	0
   421  00FE1C  08                 	db	8
   422  00FE1D  14                 	db	20
   423  00FE1E  22                 	db	34
   424  00FE1F  41                 	db	65
   425  00FE20  14                 	db	20
   426  00FE21  14                 	db	20
   427  00FE22  14                 	db	20
   428  00FE23  14                 	db	20
   429  00FE24  14                 	db	20
   430  00FE25  00                 	db	0
   431  00FE26  41                 	db	65
   432  00FE27  22                 	db	34
   433  00FE28  14                 	db	20
   434  00FE29  08                 	db	8
   435  00FE2A  02                 	db	2
   436  00FE2B  01                 	db	1
   437  00FE2C  59                 	db	89
   438  00FE2D  09                 	db	9
   439  00FE2E  06                 	db	6
   440  00FE2F  3E                 	db	62
   441  00FE30  41                 	db	65
   442  00FE31  5D                 	db	93
   443  00FE32  59                 	db	89
   444  00FE33  4E                 	db	78
   445  00FE34  7C                 	db	124
   446  00FE35  12                 	db	18
   447  00FE36  11                 	db	17
   448  00FE37  12                 	db	18
   449  00FE38  7C                 	db	124
   450  00FE39  7F                 	db	127
   451  00FE3A  49                 	db	73
   452  00FE3B  49                 	db	73
   453  00FE3C  49                 	db	73
   454  00FE3D  36                 	db	54
   455  00FE3E  3E                 	db	62
   456  00FE3F  41                 	db	65
   457  00FE40  41                 	db	65
   458  00FE41  41                 	db	65
   459  00FE42  22                 	db	34
   460  00FE43  7F                 	db	127
   461  00FE44  41                 	db	65
   462  00FE45  41                 	db	65
   463  00FE46  41                 	db	65
   464  00FE47  3E                 	db	62
   465  00FE48  7F                 	db	127
   466  00FE49  49                 	db	73
   467  00FE4A  49                 	db	73
   468  00FE4B  49                 	db	73
   469  00FE4C  41                 	db	65
   470  00FE4D  7F                 	db	127
   471  00FE4E  09                 	db	9
   472  00FE4F  09                 	db	9
   473  00FE50  09                 	db	9
   474  00FE51  01                 	db	1
   475  00FE52  3E                 	db	62
   476  00FE53  41                 	db	65
   477  00FE54  41                 	db	65
   478  00FE55  51                 	db	81
   479  00FE56  73                 	db	115
   480  00FE57  7F                 	db	127
   481  00FE58  08                 	db	8
   482  00FE59  08                 	db	8
   483  00FE5A  08                 	db	8
   484  00FE5B  7F                 	db	127
   485  00FE5C  00                 	db	0
   486  00FE5D  41                 	db	65
   487  00FE5E  7F                 	db	127
   488  00FE5F  41                 	db	65
   489  00FE60  00                 	db	0
   490  00FE61  20                 	db	32
   491  00FE62  40                 	db	64
   492  00FE63  41                 	db	65
   493  00FE64  3F                 	db	63
   494  00FE65  01                 	db	1
   495  00FE66  7F                 	db	127
   496  00FE67  08                 	db	8
   497  00FE68  14                 	db	20
   498  00FE69  22                 	db	34
   499  00FE6A  41                 	db	65
   500  00FE6B  7F                 	db	127
   501  00FE6C  40                 	db	64
   502  00FE6D  40                 	db	64
   503  00FE6E  40                 	db	64
   504  00FE6F  40                 	db	64
   505  00FE70  7F                 	db	127
   506  00FE71  02                 	db	2
   507  00FE72  1C                 	db	28
   508  00FE73  02                 	db	2
   509  00FE74  7F                 	db	127
   510  00FE75  7F                 	db	127
   511  00FE76  04                 	db	4
   512  00FE77  08                 	db	8
   513  00FE78  10                 	db	16
   514  00FE79  7F                 	db	127
   515  00FE7A  3E                 	db	62
   516  00FE7B  41                 	db	65
   517  00FE7C  41                 	db	65
   518  00FE7D  41                 	db	65
   519  00FE7E  3E                 	db	62
   520  00FE7F  7F                 	db	127
   521  00FE80  09                 	db	9
   522  00FE81  09                 	db	9
   523  00FE82  09                 	db	9
   524  00FE83  06                 	db	6
   525  00FE84  3E                 	db	62
   526  00FE85  41                 	db	65
   527  00FE86  51                 	db	81
   528  00FE87  21                 	db	33
   529  00FE88  5E                 	db	94
   530  00FE89  7F                 	db	127
   531  00FE8A  09                 	db	9
   532  00FE8B  19                 	db	25
   533  00FE8C  29                 	db	41
   534  00FE8D  46                 	db	70
   535  00FE8E                     __end_of_font:
   536                           	opt stack 0
   537  00FE8E                     _font2:
   538                           	opt stack 0
   539  00FE8E  26                 	db	38
   540  00FE8F  49                 	db	73
   541  00FE90  49                 	db	73
   542  00FE91  49                 	db	73
   543  00FE92  32                 	db	50
   544  00FE93  03                 	db	3
   545  00FE94  01                 	db	1
   546  00FE95  7F                 	db	127
   547  00FE96  01                 	db	1
   548  00FE97  03                 	db	3
   549  00FE98  3F                 	db	63
   550  00FE99  40                 	db	64
   551  00FE9A  40                 	db	64
   552  00FE9B  40                 	db	64
   553  00FE9C  3F                 	db	63
   554  00FE9D  1F                 	db	31
   555  00FE9E  20                 	db	32
   556  00FE9F  40                 	db	64
   557  00FEA0  20                 	db	32
   558  00FEA1  1F                 	db	31
   559  00FEA2  3F                 	db	63
   560  00FEA3  40                 	db	64
   561  00FEA4  38                 	db	56
   562  00FEA5  40                 	db	64
   563  00FEA6  3F                 	db	63
   564  00FEA7  63                 	db	99
   565  00FEA8  14                 	db	20
   566  00FEA9  08                 	db	8
   567  00FEAA  14                 	db	20
   568  00FEAB  63                 	db	99
   569  00FEAC  03                 	db	3
   570  00FEAD  04                 	db	4
   571  00FEAE  78                 	db	120
   572  00FEAF  04                 	db	4
   573  00FEB0  03                 	db	3
   574  00FEB1  61                 	db	97
   575  00FEB2  59                 	db	89
   576  00FEB3  49                 	db	73
   577  00FEB4  4D                 	db	77
   578  00FEB5  43                 	db	67
   579  00FEB6  00                 	db	0
   580  00FEB7  7F                 	db	127
   581  00FEB8  41                 	db	65
   582  00FEB9  41                 	db	65
   583  00FEBA  41                 	db	65
   584  00FEBB  02                 	db	2
   585  00FEBC  04                 	db	4
   586  00FEBD  08                 	db	8
   587  00FEBE  10                 	db	16
   588  00FEBF  20                 	db	32
   589  00FEC0  00                 	db	0
   590  00FEC1  41                 	db	65
   591  00FEC2  41                 	db	65
   592  00FEC3  41                 	db	65
   593  00FEC4  7F                 	db	127
   594  00FEC5  04                 	db	4
   595  00FEC6  02                 	db	2
   596  00FEC7  01                 	db	1
   597  00FEC8  02                 	db	2
   598  00FEC9  04                 	db	4
   599  00FECA  40                 	db	64
   600  00FECB  40                 	db	64
   601  00FECC  40                 	db	64
   602  00FECD  40                 	db	64
   603  00FECE  40                 	db	64
   604  00FECF  00                 	db	0
   605  00FED0  03                 	db	3
   606  00FED1  07                 	db	7
   607  00FED2  08                 	db	8
   608  00FED3  00                 	db	0
   609  00FED4  20                 	db	32
   610  00FED5  54                 	db	84
   611  00FED6  54                 	db	84
   612  00FED7  78                 	db	120
   613  00FED8  40                 	db	64
   614  00FED9  7F                 	db	127
   615  00FEDA  28                 	db	40
   616  00FEDB  44                 	db	68
   617  00FEDC  44                 	db	68
   618  00FEDD  38                 	db	56
   619  00FEDE  38                 	db	56
   620  00FEDF  44                 	db	68
   621  00FEE0  44                 	db	68
   622  00FEE1  44                 	db	68
   623  00FEE2  28                 	db	40
   624  00FEE3  38                 	db	56
   625  00FEE4  44                 	db	68
   626  00FEE5  44                 	db	68
   627  00FEE6  28                 	db	40
   628  00FEE7  7F                 	db	127
   629  00FEE8  38                 	db	56
   630  00FEE9  54                 	db	84
   631  00FEEA  54                 	db	84
   632  00FEEB  54                 	db	84
   633  00FEEC  18                 	db	24
   634  00FEED  00                 	db	0
   635  00FEEE  08                 	db	8
   636  00FEEF  7E                 	db	126
   637  00FEF0  09                 	db	9
   638  00FEF1  02                 	db	2
   639  00FEF2  18                 	db	24
   640  00FEF3  A4                 	db	164
   641  00FEF4  A4                 	db	164
   642  00FEF5  9C                 	db	156
   643  00FEF6  78                 	db	120
   644  00FEF7  7F                 	db	127
   645  00FEF8  08                 	db	8
   646  00FEF9  04                 	db	4
   647  00FEFA  04                 	db	4
   648  00FEFB  78                 	db	120
   649  00FEFC  00                 	db	0
   650  00FEFD  44                 	db	68
   651  00FEFE  7D                 	db	125
   652  00FEFF  40                 	db	64
   653  00FF00  00                 	db	0
   654  00FF01  20                 	db	32
   655  00FF02  40                 	db	64
   656  00FF03  40                 	db	64
   657  00FF04  3D                 	db	61
   658  00FF05  00                 	db	0
   659  00FF06  7F                 	db	127
   660  00FF07  10                 	db	16
   661  00FF08  28                 	db	40
   662  00FF09  44                 	db	68
   663  00FF0A  00                 	db	0
   664  00FF0B  00                 	db	0
   665  00FF0C  41                 	db	65
   666  00FF0D  7F                 	db	127
   667  00FF0E  40                 	db	64
   668  00FF0F  00                 	db	0
   669  00FF10  7C                 	db	124
   670  00FF11  04                 	db	4
   671  00FF12  78                 	db	120
   672  00FF13  04                 	db	4
   673  00FF14  78                 	db	120
   674  00FF15  7C                 	db	124
   675  00FF16  08                 	db	8
   676  00FF17  04                 	db	4
   677  00FF18  04                 	db	4
   678  00FF19  78                 	db	120
   679  00FF1A  38                 	db	56
   680  00FF1B  44                 	db	68
   681  00FF1C  44                 	db	68
   682  00FF1D  44                 	db	68
   683  00FF1E  38                 	db	56
   684  00FF1F  FC                 	db	252
   685  00FF20  18                 	db	24
   686  00FF21  24                 	db	36
   687  00FF22  24                 	db	36
   688  00FF23  18                 	db	24
   689  00FF24  18                 	db	24
   690  00FF25  24                 	db	36
   691  00FF26  24                 	db	36
   692  00FF27  18                 	db	24
   693  00FF28  FC                 	db	252
   694  00FF29  7C                 	db	124
   695  00FF2A  08                 	db	8
   696  00FF2B  04                 	db	4
   697  00FF2C  04                 	db	4
   698  00FF2D  08                 	db	8
   699  00FF2E  48                 	db	72
   700  00FF2F  54                 	db	84
   701  00FF30  54                 	db	84
   702  00FF31  54                 	db	84
   703  00FF32  24                 	db	36
   704  00FF33  04                 	db	4
   705  00FF34  04                 	db	4
   706  00FF35  3F                 	db	63
   707  00FF36  44                 	db	68
   708  00FF37  24                 	db	36
   709  00FF38  3C                 	db	60
   710  00FF39  40                 	db	64
   711  00FF3A  40                 	db	64
   712  00FF3B  20                 	db	32
   713  00FF3C  7C                 	db	124
   714  00FF3D  1C                 	db	28
   715  00FF3E  20                 	db	32
   716  00FF3F  40                 	db	64
   717  00FF40  20                 	db	32
   718  00FF41  1C                 	db	28
   719  00FF42  3C                 	db	60
   720  00FF43  40                 	db	64
   721  00FF44  30                 	db	48
   722  00FF45  40                 	db	64
   723  00FF46  3C                 	db	60
   724  00FF47  44                 	db	68
   725  00FF48  28                 	db	40
   726  00FF49  10                 	db	16
   727  00FF4A  28                 	db	40
   728  00FF4B  44                 	db	68
   729  00FF4C  4C                 	db	76
   730  00FF4D  90                 	db	144
   731  00FF4E  90                 	db	144
   732  00FF4F  90                 	db	144
   733  00FF50  7C                 	db	124
   734  00FF51  44                 	db	68
   735  00FF52  64                 	db	100
   736  00FF53  54                 	db	84
   737  00FF54  4C                 	db	76
   738  00FF55  44                 	db	68
   739  00FF56  00                 	db	0
   740  00FF57  08                 	db	8
   741  00FF58  36                 	db	54
   742  00FF59  41                 	db	65
   743  00FF5A  00                 	db	0
   744  00FF5B  00                 	db	0
   745  00FF5C  00                 	db	0
   746  00FF5D  77                 	db	119
   747  00FF5E  00                 	db	0
   748  00FF5F  00                 	db	0
   749  00FF60  00                 	db	0
   750  00FF61  41                 	db	65
   751  00FF62  36                 	db	54
   752  00FF63  08                 	db	8
   753  00FF64  00                 	db	0
   754  00FF65  02                 	db	2
   755  00FF66  01                 	db	1
   756  00FF67  02                 	db	2
   757  00FF68  04                 	db	4
   758  00FF69  02                 	db	2
   759  00FF6A                     __end_of_font2:
   760                           	opt stack 0
   761  00FF6A                     _dpowers:
   762                           	opt stack 0
   763  00FF6A  0001               	dw	1
   764  00FF6C  0000               	dw	0
   765  00FF6E  000A               	dw	10
   766  00FF70  0000               	dw	0
   767  00FF72  0064               	dw	100
   768  00FF74  0000               	dw	0
   769  00FF76  03E8               	dw	1000
   770  00FF78  0000               	dw	0
   771  00FF7A  2710               	dw	10000
   772  00FF7C  0000               	dw	0
   773  00FF7E  86A0               	dw	34464
   774  00FF80  0001               	dw	1
   775  00FF82  4240               	dw	16960
   776  00FF84  000F               	dw	15
   777  00FF86  9680               	dw	38528
   778  00FF88  0098               	dw	152
   779  00FF8A  E100               	dw	57600
   780  00FF8C  05F5               	dw	1525
   781  00FF8E  CA00               	dw	51712
   782  00FF90  3B9A               	dw	15258
   783  00FF92                     __end_of_dpowers:
   784                           	opt stack 0
   785  00FF92                     _hexpowers:
   786                           	opt stack 0
   787  00FF92  0001               	dw	1
   788  00FF94  0000               	dw	0
   789  00FF96  0010               	dw	16
   790  00FF98  0000               	dw	0
   791  00FF9A  0100               	dw	256
   792  00FF9C  0000               	dw	0
   793  00FF9E  1000               	dw	4096
   794  00FFA0  0000               	dw	0
   795  00FFA2  0000               	dw	0
   796  00FFA4  0001               	dw	1
   797  00FFA6  0000               	dw	0
   798  00FFA8  0010               	dw	16
   799  00FFAA  0000               	dw	0
   800  00FFAC  0100               	dw	256
   801  00FFAE  0000               	dw	0
   802  00FFB0  1000               	dw	4096
   803  00FFB2                     __end_of_hexpowers:
   804                           	opt stack 0
   805  0000                     _ADCON1	set	4033
   806  0000                     _CCP2CON	set	4026
   807  0000                     _CCPR2L	set	4027
   808  0000                     _INTCON2bits	set	4081
   809  0000                     _INTCONbits	set	4082
   810  0000                     _OSCCON	set	4051
   811  0000                     _PIE1bits	set	3997
   812  0000                     _PIR1bits	set	3998
   813  0000                     _PIR2bits	set	4001
   814  0000                     _PORTBbits	set	3969
   815  0000                     _PORTCbits	set	3970
   816  0000                     _PORTD	set	3971
   817  0000                     _PORTE	set	3972
   818  0000                     _PR2	set	4043
   819  0000                     _RCSTA	set	4011
   820  0000                     _RCSTAbits	set	4011
   821  0000                     _SPBRG	set	4015
   822  0000                     _SPBRGH	set	4016
   823  0000                     _SSPBUF	set	4041
   824  0000                     _SSPCON1	set	4038
   825  0000                     _SSPSTAT	set	4039
   826  0000                     _SSPSTATbits	set	4039
   827  0000                     _T0CON	set	4053
   828  0000                     _T0CONbits	set	4053
   829  0000                     _T1CON	set	4045
   830  0000                     _T1CONbits	set	4045
   831  0000                     _T2CON	set	4042
   832  0000                     _T3CON	set	4017
   833  0000                     _T3CONbits	set	4017
   834  0000                     _TMR0H	set	4055
   835  0000                     _TMR0L	set	4054
   836  0000                     _TMR1H	set	4047
   837  0000                     _TMR1L	set	4046
   838  0000                     _TMR3H	set	4019
   839  0000                     _TMR3L	set	4018
   840  0000                     _TRISB	set	3987
   841  0000                     _TRISC	set	3988
   842  0000                     _TRISCbits	set	3988
   843  0000                     _TRISD	set	3989
   844  0000                     _TRISE	set	3990
   845  0000                     _TXREG	set	4013
   846  0000                     _TXSTA	set	4012
   847  0000                     _TXSTAbits	set	4012
   848  0000                     _TRMT	set	32097
   849  0000                     _nRBPU	set	32655
   850  00FFB2                     STR_1:
   851  00FFB2  4E                 	db	78	;'N'
   852  00FFB3  45                 	db	69	;'E'
   853  00FFB4  43                 	db	67	;'C'
   854  00FFB5  5F                 	db	95	;'_'
   855  00FFB6  43                 	db	67	;'C'
   856  00FFB7  6F                 	db	111	;'o'
   857  00FFB8  64                 	db	100	;'d'
   858  00FFB9  65                 	db	101	;'e'
   859  00FFBA  20                 	db	32
   860  00FFBB  3D                 	db	61	;'='
   861  00FFBC  20                 	db	32
   862  00FFBD  25                 	db	37
   863  00FFBE  30                 	db	48	;'0'
   864  00FFBF  38                 	db	56	;'8'
   865  00FFC0  6C                 	db	108	;'l'
   866  00FFC1  78                 	db	120	;'x'
   867  00FFC2  20                 	db	32
   868  00FFC3  25                 	db	37
   869  00FFC4  78                 	db	120	;'x'
   870  00FFC5  20                 	db	32
   871  00FFC6  46                 	db	70	;'F'
   872  00FFC7  6F                 	db	111	;'o'
   873  00FFC8  75                 	db	117	;'u'
   874  00FFC9  6E                 	db	110	;'n'
   875  00FFCA  64                 	db	100	;'d'
   876  00FFCB  20                 	db	32
   877  00FFCC  3D                 	db	61	;'='
   878  00FFCD  20                 	db	32
   879  00FFCE  25                 	db	37
   880  00FFCF  64                 	db	100	;'d'
   881  00FFD0  20                 	db	32
   882  00FFD1  0D                 	db	13
   883  00FFD2  0A                 	db	10
   884  00FFD3  00                 	db	0
   885  00FFD4                     STR_2:
   886  00FFD4  45                 	db	69	;'E'
   887  00FFD5  43                 	db	67	;'C'
   888  00FFD6  45                 	db	69	;'E'
   889  00FFD7  33                 	db	51	;'3'
   890  00FFD8  33                 	db	51	;'3'
   891  00FFD9  30                 	db	48	;'0'
   892  00FFDA  31                 	db	49	;'1'
   893  00FFDB  4C                 	db	76	;'L'
   894  00FFDC  20                 	db	32
   895  00FFDD  53                 	db	83	;'S'
   896  00FFDE  70                 	db	112	;'p'
   897  00FFDF  20                 	db	32
   898  00FFE0  32                 	db	50	;'2'
   899  00FFE1  32                 	db	50	;'2'
   900  00FFE2  2D                 	db	45
   901  00FFE3  53                 	db	83	;'S'
   902  00FFE4  31                 	db	49	;'1'
   903  00FFE5  00                 	db	0
   904  00FFE6                     STR_4:
   905  00FFE6  30                 	db	48	;'0'
   906  00FFE7  31                 	db	49	;'1'
   907  00FFE8  32                 	db	50	;'2'
   908  00FFE9  33                 	db	51	;'3'
   909  00FFEA  34                 	db	52	;'4'
   910  00FFEB  35                 	db	53	;'5'
   911  00FFEC  36                 	db	54	;'6'
   912  00FFED  37                 	db	55	;'7'
   913  00FFEE  38                 	db	56	;'8'
   914  00FFEF  39                 	db	57	;'9'
   915  00FFF0  61                 	db	97	;'a'
   916  00FFF1  62                 	db	98	;'b'
   917  00FFF2  63                 	db	99	;'c'
   918  00FFF3  64                 	db	100	;'d'
   919  00FFF4  65                 	db	101	;'e'
   920  00FFF5  66                 	db	102	;'f'
   921  00FFF6  00                 	db	0
   922  00FFF7                     STR_3:
   923  00FFF7  4C                 	db	76	;'L'
   924  00FFF8  41                 	db	65	;'A'
   925  00FFF9  42                 	db	66	;'B'
   926  00FFFA  20                 	db	32
   927  00FFFB  31                 	db	49	;'1'
   928  00FFFC  30                 	db	48	;'0'
   929  00FFFD  20                 	db	32
   930  00FFFE  00                 	db	0
   931                           
   932                           ; #config settings
   933  00FFFF  00                 	db	0	; dummy byte at the end
   934  0000                     
   935                           	psect	cinit
   936  00111A                     __pcinit:
   937                           	opt stack 0
   938  00111A                     start_initialization:
   939                           	opt stack 0
   940  00111A                     __initialization:
   941                           	opt stack 0
   942                           
   943                           ; Clear objects allocated to BANK0 (31 bytes)
   944  00111A  EE00  F0BF         	lfsr	0,__pbssBANK0
   945  00111E  0E1F               	movlw	31
   946  001120                     clear_0:
   947  001120  6AEE               	clrf	postinc0,c
   948  001122  06E8               	decf	wreg,f,c
   949  001124  E1FD               	bnz	clear_0
   950                           
   951                           ; Clear objects allocated to COMRAM (19 bytes)
   952  001126  EE00  F05D         	lfsr	0,__pbssCOMRAM
   953  00112A  0E13               	movlw	19
   954  00112C                     clear_1:
   955  00112C  6AEE               	clrf	postinc0,c
   956  00112E  06E8               	decf	wreg,f,c
   957  001130  E1FD               	bnz	clear_1
   958                           
   959                           ; Initialize objects allocated to BANK1 (126 bytes)
   960                           ; load TBLPTR registers with __pidataBANK1
   961  001132  0E9C               	movlw	low __pidataBANK1
   962  001134  6EF6               	movwf	tblptrl,c
   963  001136  0E11               	movlw	high __pidataBANK1
   964  001138  6EF7               	movwf	tblptrh,c
   965  00113A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   966  00113C  6EF8               	movwf	tblptru,c
   967  00113E  EE01  F000         	lfsr	0,__pdataBANK1
   968  001142  EE10 F07E          	lfsr	1,126
   969  001146                     copy_data0:
   970  001146  0009               	tblrd		*+
   971  001148  CFF5 FFEE          	movff	tablat,postinc0
   972  00114C  50E5               	movf	postdec1,w,c
   973  00114E  50E1               	movf	fsr1l,w,c
   974  001150  E1FA               	bnz	copy_data0
   975                           
   976                           ; Initialize objects allocated to BANK0 (63 bytes)
   977                           ; load TBLPTR registers with __pidataBANK0
   978  001152  0EB2               	movlw	low __pidataBANK0
   979  001154  6EF6               	movwf	tblptrl,c
   980  001156  0E14               	movlw	high __pidataBANK0
   981  001158  6EF7               	movwf	tblptrh,c
   982  00115A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   983  00115C  6EF8               	movwf	tblptru,c
   984  00115E  EE00  F080         	lfsr	0,__pdataBANK0
   985  001162  EE10 F03F          	lfsr	1,63
   986  001166                     copy_data1:
   987  001166  0009               	tblrd		*+
   988  001168  CFF5 FFEE          	movff	tablat,postinc0
   989  00116C  50E5               	movf	postdec1,w,c
   990  00116E  50E1               	movf	fsr1l,w,c
   991  001170  E1FA               	bnz	copy_data1
   992                           
   993                           ; Initialize objects allocated to COMRAM (22 bytes)
   994                           ; load TBLPTR registers with __pidataCOMRAM
   995  001172  0E7A               	movlw	low __pidataCOMRAM
   996  001174  6EF6               	movwf	tblptrl,c
   997  001176  0E16               	movlw	high __pidataCOMRAM
   998  001178  6EF7               	movwf	tblptrh,c
   999  00117A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1000  00117C  6EF8               	movwf	tblptru,c
  1001  00117E  EE00  F047         	lfsr	0,__pdataCOMRAM
  1002  001182  EE10 F016          	lfsr	1,22
  1003  001186                     copy_data2:
  1004  001186  0009               	tblrd		*+
  1005  001188  CFF5 FFEE          	movff	tablat,postinc0
  1006  00118C  50E5               	movf	postdec1,w,c
  1007  00118E  50E1               	movf	fsr1l,w,c
  1008  001190  E1FA               	bnz	copy_data2
  1009  001192                     end_of_initialization:
  1010                           	opt stack 0
  1011  001192                     __end_of__initialization:
  1012                           	opt stack 0
  1013  001192  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1014  001194  6EF8               	movwf	tblptru,c
  1015  001196  0100               	movlb	0
  1016  001198  EF06  F003         	goto	_main	;jump to C main() function
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           postinc0	equ	0xFEE
  1022                           wreg	equ	0xFE8
  1023                           postdec1	equ	0xFE5
  1024                           fsr1l	equ	0xFE1
  1025                           
  1026                           	psect	bssCOMRAM
  1027  00005D                     __pbssCOMRAM:
  1028                           	opt stack 0
  1029  00005D                     _Nec_code:
  1030                           	opt stack 0
  1031  00005D                     	ds	4
  1032  000061                     _Time_Elapsed:
  1033                           	opt stack 0
  1034  000061                     	ds	2
  1035  000063                     _nbr:
  1036                           	opt stack 0
  1037  000063                     	ds	2
  1038  000065                     _nec_ok:
  1039                           	opt stack 0
  1040  000065                     	ds	2
  1041  000067                     _txt:
  1042                           	opt stack 0
  1043  000067                     	ds	2
  1044  000069                     _Nec_code1:
  1045                           	opt stack 0
  1046  000069                     	ds	1
  1047  00006A                     _Nec_state:
  1048                           	opt stack 0
  1049  00006A                     	ds	1
  1050  00006B                     __tft_type:
  1051                           	opt stack 0
  1052  00006B                     	ds	1
  1053  00006C                     _bit_count:
  1054                           	opt stack 0
  1055  00006C                     	ds	1
  1056  00006D                     _colstart:
  1057                           	opt stack 0
  1058  00006D                     	ds	1
  1059  00006E                     _i:
  1060                           	opt stack 0
  1061  00006E                     	ds	1
  1062  00006F                     _rowstart:
  1063                           	opt stack 0
  1064  00006F                     	ds	1
  1065                           tblptru	equ	0xFF8
  1066                           tblptrh	equ	0xFF7
  1067                           tblptrl	equ	0xFF6
  1068                           tablat	equ	0xFF5
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           postdec1	equ	0xFE5
  1072                           fsr1l	equ	0xFE1
  1073                           
  1074                           	psect	dataCOMRAM
  1075  000047                     __pdataCOMRAM:
  1076                           	opt stack 0
  1077  000047                     _array1:
  1078                           	opt stack 0
  1079  000047                     	ds	21
  1080  00005C                     _wrap:
  1081                           	opt stack 0
  1082  00005C                     	ds	1
  1083                           tblptru	equ	0xFF8
  1084                           tblptrh	equ	0xFF7
  1085                           tblptrl	equ	0xFF6
  1086                           tablat	equ	0xFF5
  1087                           postinc0	equ	0xFEE
  1088                           wreg	equ	0xFE8
  1089                           postdec1	equ	0xFE5
  1090                           fsr1l	equ	0xFE1
  1091                           
  1092                           	psect	bssBANK0
  1093  0000BF                     __pbssBANK0:
  1094                           	opt stack 0
  1095  0000BF                     _buffer:
  1096                           	opt stack 0
  1097  0000BF                     	ds	31
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           tblptrl	equ	0xFF6
  1101                           tablat	equ	0xFF5
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           
  1107                           	psect	dataBANK0
  1108  000080                     __pdataBANK0:
  1109                           	opt stack 0
  1110  000080                     _D1:
  1111                           	opt stack 0
  1112  000080                     	ds	21
  1113  000095                     _D2:
  1114                           	opt stack 0
  1115  000095                     	ds	21
  1116  0000AA                     _D3:
  1117                           	opt stack 0
  1118  0000AA                     	ds	21
  1119                           tblptru	equ	0xFF8
  1120                           tblptrh	equ	0xFF7
  1121                           tblptrl	equ	0xFF6
  1122                           tablat	equ	0xFF5
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           postdec1	equ	0xFE5
  1126                           fsr1l	equ	0xFE1
  1127                           
  1128                           	psect	dataBANK1
  1129  000100                     __pdataBANK1:
  1130                           	opt stack 0
  1131  000100                     _color:
  1132                           	opt stack 0
  1133  000100                     	ds	42
  1134  00012A                     _txt1:
  1135                           	opt stack 0
  1136  00012A                     	ds	84
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           postinc0	equ	0xFEE
  1142                           wreg	equ	0xFE8
  1143                           postdec1	equ	0xFE5
  1144                           fsr1l	equ	0xFE1
  1145                           
  1146                           	psect	cstackBANK0
  1147  0000DE                     __pcstackBANK0:
  1148                           	opt stack 0
  1149  0000DE                     drawtext@x:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x0
  1153  0000DE                     	ds	1
  1154  0000DF                     drawtext@textsize:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0x1
  1158  0000DF                     	ds	2
  1159  0000E1                     drawtext@i:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x3
  1163  0000E1                     	ds	2
  1164  0000E3                     drawtext@cursor_y:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x5
  1168  0000E3                     	ds	1
  1169  0000E4                     drawtext@cursor_x:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x6
  1173  0000E4                     	ds	1
  1174                           tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           fsr1l	equ	0xFE1
  1182                           
  1183                           	psect	cstackCOMRAM
  1184  000001                     __pcstackCOMRAM:
  1185                           	opt stack 0
  1186  000001                     ??_INT0_isr:
  1187  000001                     
  1188                           ; 0 bytes @ 0x0
  1189  000001                     	ds	2
  1190  000003                     ??_chkisr:
  1191                           
  1192                           ; 0 bytes @ 0x2
  1193  000003                     	ds	14
  1194  000011                     ??_isdigit:
  1195  000011                     ?_strlen:
  1196                           	opt stack 0
  1197  000011                     ?___wmul:
  1198                           	opt stack 0
  1199  000011                     ?___lldiv:
  1200                           	opt stack 0
  1201  000011                     putch@c:
  1202                           	opt stack 0
  1203  000011                     spiwrite@x:
  1204                           	opt stack 0
  1205  000011                     OpenUSART@spbrg:
  1206                           	opt stack 0
  1207  000011                     ___wmul@multiplier:
  1208                           	opt stack 0
  1209  000011                     strcpy@to:
  1210                           	opt stack 0
  1211  000011                     strlen@s:
  1212                           	opt stack 0
  1213  000011                     ___lldiv@dividend:
  1214                           	opt stack 0
  1215                           
  1216                           ; 4 bytes @ 0x10
  1217  000011                     	ds	1
  1218  000012                     spiwrite@spidata:
  1219                           	opt stack 0
  1220  000012                     _isdigit$1658:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x11
  1224  000012                     	ds	1
  1225  000013                     ??_strlen:
  1226  000013                     write_command@cmd_:
  1227                           	opt stack 0
  1228  000013                     write_data@data_:
  1229                           	opt stack 0
  1230  000013                     OpenUSART@config:
  1231                           	opt stack 0
  1232  000013                     isdigit@c:
  1233                           	opt stack 0
  1234  000013                     ___wmul@multiplicand:
  1235                           	opt stack 0
  1236  000013                     strcpy@from:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x12
  1240  000013                     	ds	1
  1241  000014                     setAddrWindow@y0:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x13
  1245  000014                     	ds	1
  1246  000015                     setAddrWindow@x1:
  1247                           	opt stack 0
  1248  000015                     ___wmul@product:
  1249                           	opt stack 0
  1250  000015                     strcpy@cp:
  1251                           	opt stack 0
  1252  000015                     strlen@cp:
  1253                           	opt stack 0
  1254  000015                     ___lldiv@divisor:
  1255                           	opt stack 0
  1256                           
  1257                           ; 4 bytes @ 0x14
  1258  000015                     	ds	1
  1259  000016                     setAddrWindow@y1:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x15
  1263  000016                     	ds	1
  1264  000017                     setAddrWindow@x0:
  1265                           	opt stack 0
  1266  000017                     delay_ms@ms:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x16
  1270  000017                     	ds	1
  1271  000018                     drawPixel@y:
  1272                           	opt stack 0
  1273  000018                     drawFastVLine@y:
  1274                           	opt stack 0
  1275  000018                     fillRectangle@y:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x17
  1279  000018                     	ds	1
  1280  000019                     ??_delay_ms:
  1281  000019                     drawFastVLine@h:
  1282                           	opt stack 0
  1283  000019                     fillRectangle@w:
  1284                           	opt stack 0
  1285  000019                     drawPixel@color:
  1286                           	opt stack 0
  1287  000019                     ___lldiv@quotient:
  1288                           	opt stack 0
  1289                           
  1290                           ; 4 bytes @ 0x18
  1291  000019                     	ds	1
  1292  00001A                     fillRectangle@h:
  1293                           	opt stack 0
  1294  00001A                     drawFastVLine@color:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0x19
  1298  00001A                     	ds	1
  1299  00001B                     drawPixel@x:
  1300                           	opt stack 0
  1301  00001B                     delay_ms@count:
  1302                           	opt stack 0
  1303  00001B                     fillRectangle@color:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x1A
  1307  00001B                     	ds	1
  1308  00001C                     ??_drawFastVLine:
  1309  00001C                     drawCircle@x0:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x1B
  1313  00001C                     	ds	1
  1314  00001D                     ??_fillRectangle:
  1315  00001D                     ___lldiv@counter:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x1C
  1319  00001D                     	ds	1
  1320  00001E                     ?___llmod:
  1321                           	opt stack 0
  1322  00001E                     drawCircle@y0:
  1323                           	opt stack 0
  1324  00001E                     ___llmod@dividend:
  1325                           	opt stack 0
  1326                           
  1327                           ; 4 bytes @ 0x1D
  1328  00001E                     	ds	2
  1329  000020                     drawFastVLine@hi:
  1330                           	opt stack 0
  1331  000020                     drawCircle@r:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x1F
  1335  000020                     	ds	1
  1336  000021                     drawFastVLine@lo:
  1337                           	opt stack 0
  1338  000021                     fillRectangle@hi:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x20
  1342  000021                     	ds	1
  1343  000022                     drawFastVLine@x:
  1344                           	opt stack 0
  1345  000022                     fillRectangle@lo:
  1346                           	opt stack 0
  1347  000022                     drawCircle@color:
  1348                           	opt stack 0
  1349  000022                     ___llmod@divisor:
  1350                           	opt stack 0
  1351                           
  1352                           ; 4 bytes @ 0x21
  1353  000022                     	ds	1
  1354  000023                     fillRect@y:
  1355                           	opt stack 0
  1356  000023                     fillRectangle@x:
  1357                           	opt stack 0
  1358  000023                     fillCircleHelper@x0:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x22
  1362  000023                     	ds	1
  1363  000024                     ??_drawCircle:
  1364  000024                     fillRect@w:
  1365                           	opt stack 0
  1366  000024                     fillScreen@color:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0x23
  1370  000024                     	ds	1
  1371  000025                     fillRect@h:
  1372                           	opt stack 0
  1373  000025                     fillCircleHelper@y0:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x24
  1377  000025                     	ds	1
  1378  000026                     ___llmod@counter:
  1379                           	opt stack 0
  1380  000026                     fillRect@color:
  1381                           	opt stack 0
  1382  000026                     drawCircle@ddF_x:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x25
  1386  000026                     	ds	1
  1387  000027                     ?_printf:
  1388                           	opt stack 0
  1389  000027                     fillCircleHelper@r:
  1390                           	opt stack 0
  1391  000027                     printf@f:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x26
  1395  000027                     	ds	1
  1396  000028                     ??_fillRect:
  1397  000028                     drawCircle@ddF_y:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x27
  1401  000028                     	ds	1
  1402  000029                     fillCircleHelper@cornername:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x28
  1406  000029                     	ds	1
  1407  00002A                     drawCircle@f:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x29
  1411  00002A                     	ds	1
  1412  00002B                     fillRect@x:
  1413                           	opt stack 0
  1414  00002B                     fillCircleHelper@delta:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x2A
  1418  00002B                     	ds	1
  1419  00002C                     fillRect@i:
  1420                           	opt stack 0
  1421  00002C                     drawCircle@x:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x2B
  1425  00002C                     	ds	1
  1426  00002D                     fillCircleHelper@color:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x2C
  1430  00002D                     	ds	1
  1431  00002E                     drawChar@y:
  1432                           	opt stack 0
  1433  00002E                     drawCircle@y:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x2D
  1437  00002E                     	ds	1
  1438  00002F                     ??_fillCircleHelper:
  1439  00002F                     drawChar@c:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x2E
  1443  00002F                     	ds	1
  1444  000030                     drawChar@color:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x2F
  1448  000030                     	ds	1
  1449  000031                     ??_printf:
  1450  000031                     fillCircleHelper@ddF_x:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x30
  1454  000031                     	ds	1
  1455  000032                     drawChar@bg:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x31
  1459  000032                     	ds	1
  1460  000033                     fillCircleHelper@ddF_y:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x32
  1464  000033                     	ds	1
  1465  000034                     drawChar@size:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x33
  1469  000034                     	ds	1
  1470  000035                     drawChar@line:
  1471                           	opt stack 0
  1472  000035                     printf@idx:
  1473                           	opt stack 0
  1474  000035                     fillCircleHelper@f:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x34
  1478  000035                     	ds	1
  1479  000036                     drawChar@x:
  1480                           	opt stack 0
  1481  000036                     printf@prec:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x35
  1485  000036                     	ds	1
  1486  000037                     drawChar@j:
  1487                           	opt stack 0
  1488  000037                     fillCircleHelper@x:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x36
  1492  000037                     	ds	1
  1493  000038                     drawChar@i:
  1494                           	opt stack 0
  1495  000038                     printf@ap:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x37
  1499  000038                     	ds	1
  1500  000039                     drawtext@y:
  1501                           	opt stack 0
  1502  000039                     fillCircleHelper@y:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x38
  1506  000039                     	ds	1
  1507  00003A                     drawtext@_text:
  1508                           	opt stack 0
  1509  00003A                     printf@val:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x39
  1513  00003A                     	ds	1
  1514  00003B                     fillCircle@x0:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x3A
  1518  00003B                     	ds	1
  1519  00003C                     drawtext@color:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x3B
  1523  00003C                     	ds	1
  1524  00003D                     fillCircle@y0:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x3C
  1528  00003D                     	ds	1
  1529  00003E                     drawtext@bg:
  1530                           	opt stack 0
  1531  00003E                     printf@width:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x3D
  1535  00003E                     	ds	1
  1536  00003F                     fillCircle@r:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x3E
  1540  00003F                     	ds	1
  1541  000040                     drawtext@size:
  1542                           	opt stack 0
  1543  000040                     printf@flag:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x3F
  1547  000040                     	ds	1
  1548  000041                     ??_drawtext:
  1549  000041                     printf@c:
  1550                           	opt stack 0
  1551  000041                     fillCircle@color:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x40
  1555  000041                     	ds	2
  1556  000043                     ??_main:
  1557                           
  1558                           ; 0 bytes @ 0x42
  1559  000043                     	ds	1
  1560  000044                     main@i:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x43
  1564  000044                     	ds	2
  1565  000046                     main@found:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x45
  1569  000046                     	ds	1
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579 ;;
  1580 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1581 ;;
  1582 ;; *************** function _main *****************
  1583 ;; Defined at:
  1584 ;;		line 201 in file "Lab10_sample_1.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  i               2   67[COMRAM] int 
  1589 ;;  found           1   69[COMRAM] unsigned char 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;		None               void
  1592 ;; Registers used:
  1593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;Total ram usage:        4 bytes
  1604 ;; Hardware stack levels required when called:   11
  1605 ;; This function calls:
  1606 ;;		_Initialize_Screen
  1607 ;;		_Wait_Half_Second
  1608 ;;		_drawCircle
  1609 ;;		_drawtext
  1610 ;;		_fillCircle
  1611 ;;		_init_UART
  1612 ;;		_printf
  1613 ;; This function is called by:
  1614 ;;		Startup code after reset
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text0
  1619  00060C                     __ptext0:
  1620                           	opt stack 0
  1621  00060C                     _main:
  1622                           	opt stack 20
  1623                           
  1624                           ;Lab10_sample_1.c: 203: init_UART();
  1625                           
  1626                           ;incstack = 0
  1627  00060C  EC48  F00B         	call	_init_UART	;wreg free
  1628                           
  1629                           ;Lab10_sample_1.c: 204: OSCCON = 0x70;
  1630  000610  0E70               	movlw	112
  1631  000612  6ED3               	movwf	4051,c	;volatile
  1632                           
  1633                           ;Lab10_sample_1.c: 205: nRBPU = 0;
  1634  000614  9EF1               	bcf	intcon2,7,c	;volatile
  1635                           
  1636                           ;Lab10_sample_1.c: 206: TRISB = 0x01;
  1637  000616  0E01               	movlw	1
  1638  000618  6E93               	movwf	3987,c	;volatile
  1639                           
  1640                           ;Lab10_sample_1.c: 207: TRISC = 0x00;
  1641  00061A  0E00               	movlw	0
  1642  00061C  6E94               	movwf	3988,c	;volatile
  1643                           
  1644                           ;Lab10_sample_1.c: 208: TRISD = 0x00;
  1645  00061E  0E00               	movlw	0
  1646  000620  6E95               	movwf	3989,c	;volatile
  1647                           
  1648                           ;Lab10_sample_1.c: 209: TRISE = 0x00;
  1649  000622  0E00               	movlw	0
  1650  000624  6E96               	movwf	3990,c	;volatile
  1651                           
  1652                           ;Lab10_sample_1.c: 210: ADCON1 = 0x0F;
  1653  000626  0E0F               	movlw	15
  1654  000628  6EC1               	movwf	4033,c	;volatile
  1655                           
  1656                           ;Lab10_sample_1.c: 211: Initialize_Screen();
  1657  00062A  ECBC  F007         	call	_Initialize_Screen	;wreg free
  1658                           
  1659                           ;Lab10_sample_1.c: 212: INTCONbits.INT0IF = 0;
  1660  00062E  92F2               	bcf	intcon,1,c	;volatile
  1661                           
  1662                           ;Lab10_sample_1.c: 213: INTCON2bits.INTEDG0 = 0;
  1663  000630  9CF1               	bcf	intcon2,6,c	;volatile
  1664                           
  1665                           ;Lab10_sample_1.c: 214: INTCONbits.INT0IE = 1;
  1666  000632  88F2               	bsf	intcon,4,c	;volatile
  1667                           
  1668                           ;Lab10_sample_1.c: 215: TMR1H = 0;
  1669  000634  0E00               	movlw	0
  1670  000636  6ECF               	movwf	4047,c	;volatile
  1671                           
  1672                           ;Lab10_sample_1.c: 216: TMR1L = 0;
  1673  000638  0E00               	movlw	0
  1674  00063A  6ECE               	movwf	4046,c	;volatile
  1675                           
  1676                           ;Lab10_sample_1.c: 217: PIR1bits.TMR1IF = 0;
  1677  00063C  909E               	bcf	3998,0,c	;volatile
  1678                           
  1679                           ;Lab10_sample_1.c: 218: PIE1bits.TMR1IE = 1;
  1680  00063E  809D               	bsf	3997,0,c	;volatile
  1681                           
  1682                           ;Lab10_sample_1.c: 219: INTCONbits.PEIE = 1;
  1683  000640  8CF2               	bsf	intcon,6,c	;volatile
  1684                           
  1685                           ;Lab10_sample_1.c: 220: INTCONbits.GIE = 1;
  1686  000642  8EF2               	bsf	intcon,7,c	;volatile
  1687                           
  1688                           ;Lab10_sample_1.c: 221: nec_ok = 0;
  1689  000644  0E00               	movlw	0
  1690  000646  6E66               	movwf	_nec_ok+1,c
  1691  000648  0E00               	movlw	0
  1692  00064A  6E65               	movwf	_nec_ok,c
  1693                           
  1694                           ;Lab10_sample_1.c: 222: Nec_code = 0x0;
  1695  00064C  0E00               	movlw	0
  1696  00064E  6E5D               	movwf	_Nec_code,c
  1697  000650  0E00               	movlw	0
  1698  000652  6E5E               	movwf	_Nec_code+1,c
  1699  000654  0E00               	movlw	0
  1700  000656  6E5F               	movwf	_Nec_code+2,c
  1701  000658  0E00               	movlw	0
  1702  00065A  6E60               	movwf	_Nec_code+3,c
  1703  00065C  D000               	goto	l3970
  1704  00065E                     l3970:
  1705                           
  1706                           ;Lab10_sample_1.c: 225: {
  1707                           ;Lab10_sample_1.c: 226: if (nec_ok == 1)
  1708  00065E  0465               	decf	_nec_ok,w,c
  1709  000660  1066               	iorwf	_nec_ok+1,w,c
  1710  000662  A4D8               	btfss	status,2,c
  1711  000664  D7FC               	goto	l3970
  1712                           
  1713                           ;Lab10_sample_1.c: 227: {
  1714                           ;Lab10_sample_1.c: 229: nec_ok = 0;
  1715  000666  0E00               	movlw	0
  1716  000668  6E66               	movwf	_nec_ok+1,c
  1717  00066A  0E00               	movlw	0
  1718  00066C  6E65               	movwf	_nec_ok,c
  1719                           
  1720                           ;Lab10_sample_1.c: 231: Nec_code1 = (char) ((Nec_code >> 8));
  1721  00066E  C05E  F069         	movff	_Nec_code+1,_Nec_code1
  1722                           
  1723                           ;Lab10_sample_1.c: 233: INTCONbits.INT0IE = 1;
  1724  000672  88F2               	bsf	intcon,4,c	;volatile
  1725                           
  1726                           ;Lab10_sample_1.c: 234: INTCON2bits.INTEDG0 = 0;
  1727  000674  9CF1               	bcf	intcon2,6,c	;volatile
  1728                           
  1729                           ;Lab10_sample_1.c: 236: char found = 0xff;
  1730  000676  6846               	setf	main@found,c
  1731                           
  1732                           ;Lab10_sample_1.c: 241: for(int i = 0; i < 21; i++)
  1733  000678  0E00               	movlw	0
  1734  00067A  6E45               	movwf	main@i+1,c
  1735  00067C  0E00               	movlw	0
  1736  00067E  6E44               	movwf	main@i,c
  1737  000680                     l3982:
  1738  000680  BE45               	btfsc	main@i+1,7,c
  1739  000682  D008               	goto	l3986
  1740  000684  5045               	movf	main@i+1,w,c
  1741  000686  E117               	bnz	l3994
  1742  000688  0E15               	movlw	21
  1743  00068A  5C44               	subwf	main@i,w,c
  1744  00068C  B0D8               	btfsc	status,0,c
  1745  00068E  D013               	goto	l3994
  1746  000690  D001               	goto	l3986
  1747  000692  D011               	goto	l3994
  1748  000694                     l3986:
  1749                           
  1750                           ;Lab10_sample_1.c: 242: {
  1751                           ;Lab10_sample_1.c: 243: if (Nec_code1 == array1[i])
  1752  000694  0E47               	movlw	low _array1
  1753  000696  2444               	addwf	main@i,w,c
  1754  000698  6ED9               	movwf	fsr2l,c
  1755  00069A  0E00               	movlw	high _array1
  1756  00069C  2045               	addwfc	main@i+1,w,c
  1757  00069E  6EDA               	movwf	fsr2h,c
  1758  0006A0  5069               	movf	_Nec_code1,w,c
  1759  0006A2  18DE               	xorwf	postinc2,w,c
  1760  0006A4  A4D8               	btfss	status,2,c
  1761  0006A6  D003               	goto	l3990
  1762                           
  1763                           ;Lab10_sample_1.c: 244: {
  1764                           ;Lab10_sample_1.c: 245: found = i;
  1765  0006A8  C044  F046         	movff	main@i,main@found
  1766  0006AC  D000               	goto	l3990
  1767  0006AE                     l3990:
  1768  0006AE  4A44               	infsnz	main@i,f,c
  1769  0006B0  2A45               	incf	main@i+1,f,c
  1770  0006B2  D7E6               	goto	l3982
  1771  0006B4  D000               	goto	l3994
  1772  0006B6                     l3994:
  1773                           
  1774                           ;Lab10_sample_1.c: 246: }
  1775                           ;Lab10_sample_1.c: 247: }
  1776                           ;Lab10_sample_1.c: 248: if (found != 0xff)
  1777  0006B6  2846               	incf	main@found,w,c
  1778  0006B8  B4D8               	btfsc	status,2,c
  1779  0006BA  D042               	goto	l4002
  1780                           
  1781                           ;Lab10_sample_1.c: 249: {
  1782                           ;Lab10_sample_1.c: 250: fillCircle(60, 80, 20, color[found]);
  1783  0006BC  0E00               	movlw	0
  1784  0006BE  6E3C               	movwf	fillCircle@x0+1,c
  1785  0006C0  0E3C               	movlw	60
  1786  0006C2  6E3B               	movwf	fillCircle@x0,c
  1787  0006C4  0E00               	movlw	0
  1788  0006C6  6E3E               	movwf	fillCircle@y0+1,c
  1789  0006C8  0E50               	movlw	80
  1790  0006CA  6E3D               	movwf	fillCircle@y0,c
  1791  0006CC  0E00               	movlw	0
  1792  0006CE  6E40               	movwf	fillCircle@r+1,c
  1793  0006D0  0E14               	movlw	20
  1794  0006D2  6E3F               	movwf	fillCircle@r,c
  1795  0006D4  5046               	movf	main@found,w,c
  1796  0006D6  0D02               	mullw	2
  1797  0006D8  0E00               	movlw	low _color
  1798  0006DA  24F3               	addwf	prodl,w,c
  1799  0006DC  6ED9               	movwf	fsr2l,c
  1800  0006DE  0E01               	movlw	high _color
  1801  0006E0  20F4               	addwfc	prodh,w,c
  1802  0006E2  6EDA               	movwf	fsr2h,c
  1803  0006E4  CFDE F041          	movff	postinc2,fillCircle@color
  1804  0006E8  CFDD F042          	movff	postdec2,fillCircle@color+1
  1805  0006EC  ECBB  F009         	call	_fillCircle	;wreg free
  1806                           
  1807                           ;Lab10_sample_1.c: 251: drawCircle(60, 80, 20, 0xFFFF);
  1808  0006F0  0E00               	movlw	0
  1809  0006F2  6E1D               	movwf	drawCircle@x0+1,c
  1810  0006F4  0E3C               	movlw	60
  1811  0006F6  6E1C               	movwf	drawCircle@x0,c
  1812  0006F8  0E00               	movlw	0
  1813  0006FA  6E1F               	movwf	drawCircle@y0+1,c
  1814  0006FC  0E50               	movlw	80
  1815  0006FE  6E1E               	movwf	drawCircle@y0,c
  1816  000700  0E00               	movlw	0
  1817  000702  6E21               	movwf	drawCircle@r+1,c
  1818  000704  0E14               	movlw	20
  1819  000706  6E20               	movwf	drawCircle@r,c
  1820  000708  0EFF               	movlw	255
  1821  00070A  6E23               	movwf	drawCircle@color+1,c
  1822  00070C  6822               	setf	drawCircle@color,c
  1823  00070E  EC2F  F002         	call	_drawCircle	;wreg free
  1824                           
  1825                           ;Lab10_sample_1.c: 252: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1826  000712  0E4D               	movlw	77
  1827  000714  6E39               	movwf	drawtext@y,c
  1828  000716  5046               	movf	main@found,w,c
  1829  000718  0D04               	mullw	4
  1830  00071A  0E2A               	movlw	low _txt1
  1831  00071C  24F3               	addwf	prodl,w,c
  1832  00071E  6E3A               	movwf	drawtext@_text,c
  1833  000720  0E01               	movlw	high _txt1
  1834  000722  20F4               	addwfc	prodh,w,c
  1835  000724  6E3B               	movwf	drawtext@_text+1,c
  1836  000726  0EFF               	movlw	255
  1837  000728  6E3D               	movwf	drawtext@color+1,c
  1838  00072A  683C               	setf	drawtext@color,c
  1839  00072C  0E00               	movlw	0
  1840  00072E  6E3F               	movwf	drawtext@bg+1,c
  1841  000730  0E00               	movlw	0
  1842  000732  6E3E               	movwf	drawtext@bg,c
  1843  000734  0E01               	movlw	1
  1844  000736  6E40               	movwf	drawtext@size,c
  1845  000738  0E34               	movlw	52
  1846  00073A  EC50  F006         	call	_drawtext
  1847  00073E  D000               	goto	l4002
  1848  000740                     l4002:
  1849                           
  1850                           ;Lab10_sample_1.c: 253: }
  1851                           ;Lab10_sample_1.c: 254: printf ("NEC_Code = %08lx %x Found = %d \r\n", Nec_code, Nec_cod
      +                          e1, found);
  1852  000740  0EB2               	movlw	low STR_1
  1853  000742  6E27               	movwf	printf@f,c
  1854  000744  0EFF               	movlw	high STR_1
  1855  000746  6E28               	movwf	printf@f+1,c
  1856  000748  C05D  F029         	movff	_Nec_code,?_printf+2
  1857  00074C  C05E  F02A         	movff	_Nec_code+1,?_printf+3
  1858  000750  C05F  F02B         	movff	_Nec_code+2,?_printf+4
  1859  000754  C060  F02C         	movff	_Nec_code+3,?_printf+5
  1860  000758  C069  F02D         	movff	_Nec_code1,?_printf+6
  1861  00075C  6A2E               	clrf	?_printf+7,c
  1862  00075E  C046  F02F         	movff	main@found,?_printf+8
  1863  000762  6A30               	clrf	?_printf+9,c
  1864  000764  EC0E  F000         	call	_printf	;wreg free
  1865                           
  1866                           ;Lab10_sample_1.c: 255: PORTD=D1[found] | D3[found];
  1867  000768  5046               	movf	main@found,w,c
  1868  00076A  0D01               	mullw	1
  1869  00076C  0EAA               	movlw	low _D3
  1870  00076E  24F3               	addwf	prodl,w,c
  1871  000770  6ED9               	movwf	fsr2l,c
  1872  000772  0E00               	movlw	high _D3
  1873  000774  20F4               	addwfc	prodh,w,c
  1874  000776  6EDA               	movwf	fsr2h,c
  1875  000778  50DF               	movf	indf2,w,c
  1876  00077A  6E43               	movwf	??_main& (0+255),c
  1877  00077C  5046               	movf	main@found,w,c
  1878  00077E  0D01               	mullw	1
  1879  000780  0E80               	movlw	low _D1
  1880  000782  24F3               	addwf	prodl,w,c
  1881  000784  6ED9               	movwf	fsr2l,c
  1882  000786  0E00               	movlw	high _D1
  1883  000788  20F4               	addwfc	prodh,w,c
  1884  00078A  6EDA               	movwf	fsr2h,c
  1885  00078C  50DF               	movf	indf2,w,c
  1886  00078E  1043               	iorwf	??_main,w,c
  1887  000790  6E83               	movwf	3971,c	;volatile
  1888                           
  1889                           ;Lab10_sample_1.c: 256: PORTE=D2[found];
  1890  000792  5046               	movf	main@found,w,c
  1891  000794  0D01               	mullw	1
  1892  000796  0E95               	movlw	low _D2
  1893  000798  24F3               	addwf	prodl,w,c
  1894  00079A  6ED9               	movwf	fsr2l,c
  1895  00079C  0E00               	movlw	high _D2
  1896  00079E  20F4               	addwfc	prodh,w,c
  1897  0007A0  6EDA               	movwf	fsr2h,c
  1898  0007A2  50DF               	movf	indf2,w,c
  1899  0007A4  6E84               	movwf	3972,c	;volatile
  1900                           
  1901                           ;Lab10_sample_1.c: 257: PORTBbits.RB7 = 1;
  1902  0007A6  8E81               	bsf	3969,7,c	;volatile
  1903                           
  1904                           ;Lab10_sample_1.c: 259: Wait_Half_Second();
  1905  0007A8  EC30  F00B         	call	_Wait_Half_Second	;wreg free
  1906                           
  1907                           ;Lab10_sample_1.c: 260: PORTBbits.RB7 = 0;
  1908  0007AC  9E81               	bcf	3969,7,c	;volatile
  1909  0007AE  D757               	goto	l3970
  1910  0007B0  EF0C  F000         	goto	start
  1911  0007B4                     __end_of_main:
  1912                           	opt stack 0
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           intcon2	equ	0xFF1
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           postdec1	equ	0xFE5
  1924                           fsr1l	equ	0xFE1
  1925                           indf2	equ	0xFDF
  1926                           postinc2	equ	0xFDE
  1927                           postdec2	equ	0xFDD
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _printf *****************
  1933 ;; Defined at:
  1934 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  f               2   38[COMRAM] PTR const unsigned char 
  1937 ;;		 -> STR_1(34), 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  idx             1   52[COMRAM] unsigned char 
  1940 ;;  val             4   57[COMRAM] unsigned long 
  1941 ;;  tmpval          4    0        struct .
  1942 ;;  cp              3    0        PTR const unsigned char 
  1943 ;;  width           2   61[COMRAM] int 
  1944 ;;  ap              2   55[COMRAM] PTR void [1]
  1945 ;;		 -> ?_printf(2), 
  1946 ;;  prec            2   53[COMRAM] int 
  1947 ;;  len             2    0        unsigned int 
  1948 ;;  c               1   64[COMRAM] char 
  1949 ;;  flag            1   63[COMRAM] unsigned char 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  2   38[COMRAM] int 
  1952 ;; Registers used:
  1953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1959 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;Total ram usage:       27 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    4
  1966 ;; This function calls:
  1967 ;;		___lldiv
  1968 ;;		___llmod
  1969 ;;		___wmul
  1970 ;;		_isdigit
  1971 ;;		_putch
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text1
  1978  00001C                     __ptext1:
  1979                           	opt stack 0
  1980  00001C                     _printf:
  1981                           	opt stack 26
  1982                           
  1983                           ;doprnt.c: 466: va_list ap;
  1984                           ;doprnt.c: 499: signed char c;
  1985                           ;doprnt.c: 501: int width;
  1986                           ;doprnt.c: 504: int prec;
  1987                           ;doprnt.c: 508: unsigned char flag;
  1988                           ;doprnt.c: 523: union {
  1989                           ;doprnt.c: 524: unsigned long vd;
  1990                           ;doprnt.c: 525: double integ;
  1991                           ;doprnt.c: 526: } tmpval;
  1992                           ;doprnt.c: 528: unsigned long val;
  1993                           ;doprnt.c: 529: unsigned len;
  1994                           ;doprnt.c: 530: const char * cp;
  1995                           ;doprnt.c: 533: *ap = __va_start();
  1996                           
  1997                           ;incstack = 0
  1998  00001C  0E29               	movlw	low (?_printf+2)
  1999  00001E  6E38               	movwf	printf@ap,c
  2000  000020  0E00               	movlw	high (?_printf+2)
  2001  000022  6E39               	movwf	printf@ap+1,c
  2002                           
  2003                           ;doprnt.c: 536: while(c = *f++) {
  2004  000024  D20D               	goto	l3904
  2005  000026                     l3766:
  2006                           
  2007                           ;doprnt.c: 538: if(c != '%')
  2008  000026  0E25               	movlw	37
  2009  000028  1841               	xorwf	printf@c,w,c
  2010  00002A  B4D8               	btfsc	status,2,c
  2011  00002C  D004               	goto	l3770
  2012                           
  2013                           ;doprnt.c: 540: {
  2014                           ;doprnt.c: 541: (putch(c) );
  2015  00002E  5041               	movf	printf@c,w,c
  2016  000030  EC75  F00B         	call	_putch
  2017                           
  2018                           ;doprnt.c: 542: continue;
  2019  000034  D205               	goto	l3904
  2020  000036                     l3770:
  2021                           
  2022                           ;doprnt.c: 543: }
  2023                           ;doprnt.c: 546: width = 0;
  2024  000036  0E00               	movlw	0
  2025  000038  6E3F               	movwf	printf@width+1,c
  2026  00003A  0E00               	movlw	0
  2027  00003C  6E3E               	movwf	printf@width,c
  2028                           
  2029                           ;doprnt.c: 548: flag = 0;
  2030  00003E  0E00               	movlw	0
  2031  000040  6E40               	movwf	printf@flag,c
  2032                           
  2033                           ;doprnt.c: 551: switch(*f) {
  2034                           
  2035                           ;doprnt.c: 550: for(;;) {
  2036  000042  D005               	goto	l3776
  2037  000044                     l3772:
  2038                           
  2039                           ;doprnt.c: 580: flag |= 0x04;
  2040  000044  8440               	bsf	printf@flag,2,c
  2041                           
  2042                           ;doprnt.c: 581: f++;
  2043  000046  4A27               	infsnz	printf@f,f,c
  2044  000048  2A28               	incf	printf@f+1,f,c
  2045                           
  2046                           ;doprnt.c: 582: continue;
  2047  00004A  D001               	goto	l3776
  2048                           
  2049                           ;doprnt.c: 584: }
  2050  00004C  D00B               	goto	l3778
  2051  00004E                     l3776:
  2052  00004E  C027  FFF6         	movff	printf@f,tblptrl
  2053  000052  C028  FFF7         	movff	printf@f+1,tblptrh
  2054  000056                     	if	0	;tblptru may be non-zero
  2055  000056                     	endif
  2056  000056                     	if	0	;tblptru may be non-zero
  2057  000056                     	endif
  2058  000056  0008               	tblrd		*
  2059  000058  50F5               	movf	tablat,w,c
  2060                           
  2061                           ; Switch size 1, requested type "space"
  2062                           ; Number of cases is 1, Range of values is 48 to 48
  2063                           ; switch strategies available:
  2064                           ; Name         Instructions Cycles
  2065                           ; simple_byte            4     3 (average)
  2066                           ;	Chosen strategy is simple_byte
  2067  00005A  0A30               	xorlw	48	; case 48
  2068  00005C  B4D8               	btfsc	status,2,c
  2069  00005E  D7F2               	goto	l3772
  2070                           
  2071                           ;doprnt.c: 585: break;
  2072  000060  D001               	goto	l3778
  2073                           
  2074                           ;doprnt.c: 586: }
  2075  000062  D7F5               	goto	l3776
  2076  000064                     l3778:
  2077                           
  2078                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2079  000064  C027  FFF6         	movff	printf@f,tblptrl
  2080  000068  C028  FFF7         	movff	printf@f+1,tblptrh
  2081  00006C                     	if	0	;tblptru may be non-zero
  2082  00006C                     	endif
  2083  00006C                     	if	0	;tblptru may be non-zero
  2084  00006C                     	endif
  2085  00006C  0008               	tblrd		*
  2086  00006E  50F5               	movf	tablat,w,c
  2087  000070  EC11  F00B         	call	_isdigit
  2088  000074  A0D8               	btfss	status,0,c
  2089  000076  D03D               	goto	l3796
  2090                           
  2091                           ;doprnt.c: 598: width = 0;
  2092  000078  0E00               	movlw	0
  2093  00007A  6E3F               	movwf	printf@width+1,c
  2094  00007C  0E00               	movlw	0
  2095  00007E  6E3E               	movwf	printf@width,c
  2096  000080  D000               	goto	l3782
  2097  000082                     l3782:
  2098                           
  2099                           ;doprnt.c: 600: width *= 10;
  2100  000082  C03E  F011         	movff	printf@width,___wmul@multiplier
  2101  000086  C03F  F012         	movff	printf@width+1,___wmul@multiplier+1
  2102  00008A  0E00               	movlw	0
  2103  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2104  00008E  0E0A               	movlw	10
  2105  000090  6E13               	movwf	___wmul@multiplicand,c
  2106  000092  ECFD  F00A         	call	___wmul	;wreg free
  2107  000096  C011  F03E         	movff	?___wmul,printf@width
  2108  00009A  C012  F03F         	movff	?___wmul+1,printf@width+1
  2109                           
  2110                           ;doprnt.c: 601: width += *f++ - '0';
  2111  00009E  0ED0               	movlw	208
  2112  0000A0  6E31               	movwf	??_printf& (0+255),c
  2113  0000A2  0EFF               	movlw	255
  2114  0000A4  6E32               	movwf	(??_printf+1)& (0+255),c
  2115  0000A6  C027  FFF6         	movff	printf@f,tblptrl
  2116  0000AA  C028  FFF7         	movff	printf@f+1,tblptrh
  2117  0000AE                     	if	0	;tblptru may be non-zero
  2118  0000AE                     	endif
  2119  0000AE                     	if	0	;tblptru may be non-zero
  2120  0000AE                     	endif
  2121  0000AE  0008               	tblrd		*
  2122  0000B0  50F5               	movf	tablat,w,c
  2123  0000B2  6E33               	movwf	(??_printf+2)& (0+255),c
  2124  0000B4  6A34               	clrf	(??_printf+3)& (0+255),c
  2125  0000B6  5031               	movf	??_printf,w,c
  2126  0000B8  2633               	addwf	??_printf+2,f,c
  2127  0000BA  5032               	movf	??_printf+1,w,c
  2128  0000BC  2234               	addwfc	??_printf+3,f,c
  2129  0000BE  5033               	movf	??_printf+2,w,c
  2130  0000C0  263E               	addwf	printf@width,f,c
  2131  0000C2  5034               	movf	??_printf+3,w,c
  2132  0000C4  223F               	addwfc	printf@width+1,f,c
  2133  0000C6  4A27               	infsnz	printf@f,f,c
  2134  0000C8  2A28               	incf	printf@f+1,f,c
  2135                           
  2136                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2137  0000CA  C027  FFF6         	movff	printf@f,tblptrl
  2138  0000CE  C028  FFF7         	movff	printf@f+1,tblptrh
  2139  0000D2                     	if	0	;tblptru may be non-zero
  2140  0000D2                     	endif
  2141  0000D2                     	if	0	;tblptru may be non-zero
  2142  0000D2                     	endif
  2143  0000D2  0008               	tblrd		*
  2144  0000D4  50F5               	movf	tablat,w,c
  2145  0000D6  EC11  F00B         	call	_isdigit
  2146  0000DA  A0D8               	btfss	status,0,c
  2147  0000DC  D00A               	goto	l3796
  2148  0000DE  D7D1               	goto	l3782
  2149                           
  2150                           ;doprnt.c: 635: switch(c = *f++) {
  2151                           
  2152                           ;doprnt.c: 608: }
  2153                           ;doprnt.c: 633: loop:
  2154  0000E0  D008               	goto	l3796
  2155                           
  2156                           ;doprnt.c: 638: goto alldone;
  2157                           
  2158                           ;doprnt.c: 637: case 0:
  2159  0000E2  D1BC               	goto	l468
  2160  0000E4                     l3790:
  2161                           
  2162                           ;doprnt.c: 643: flag |= 0x10;
  2163  0000E4  8840               	bsf	printf@flag,4,c
  2164                           
  2165                           ;doprnt.c: 644: goto loop;
  2166  0000E6  D005               	goto	l3796
  2167                           
  2168                           ;doprnt.c: 698: case 'i':
  2169                           ;doprnt.c: 699: break;
  2170                           
  2171                           ;doprnt.c: 697: case 'd':
  2172  0000E8  D01E               	goto	l427
  2173  0000EA                     l3792:
  2174                           
  2175                           ;doprnt.c: 721: flag |= 0x80;
  2176  0000EA  8E40               	bsf	printf@flag,7,c
  2177                           
  2178                           ;doprnt.c: 723: break;
  2179  0000EC  D01C               	goto	l427
  2180                           
  2181                           ;doprnt.c: 813: continue;
  2182                           
  2183                           ;doprnt.c: 802: default:
  2184  0000EE  D1A8               	goto	l3904
  2185                           
  2186                           ;doprnt.c: 822: }
  2187  0000F0  D01A               	goto	l427
  2188  0000F2                     l3796:
  2189  0000F2  C027  FFF6         	movff	printf@f,tblptrl
  2190  0000F6  C028  FFF7         	movff	printf@f+1,tblptrh
  2191  0000FA  4A27               	infsnz	printf@f,f,c
  2192  0000FC  2A28               	incf	printf@f+1,f,c
  2193  0000FE                     	if	0	;tblptru may be non-zero
  2194  0000FE                     	endif
  2195  0000FE                     	if	0	;tblptru may be non-zero
  2196  0000FE                     	endif
  2197  0000FE  0008               	tblrd		*
  2198  000100  CFF5 F041          	movff	tablat,printf@c
  2199  000104  5041               	movf	printf@c,w,c
  2200                           
  2201                           ; Switch size 1, requested type "space"
  2202                           ; Number of cases is 5, Range of values is 0 to 120
  2203                           ; switch strategies available:
  2204                           ; Name         Instructions Cycles
  2205                           ; simple_byte           16     9 (average)
  2206                           ;	Chosen strategy is simple_byte
  2207  000106  0A00               	xorlw	0	; case 0
  2208  000108  B4D8               	btfsc	status,2,c
  2209  00010A  D1A8               	goto	l468
  2210  00010C  0A64               	xorlw	100	; case 100
  2211  00010E  B4D8               	btfsc	status,2,c
  2212  000110  D00A               	goto	l427
  2213  000112  0A0D               	xorlw	13	; case 105
  2214  000114  B4D8               	btfsc	status,2,c
  2215  000116  D007               	goto	l427
  2216  000118  0A05               	xorlw	5	; case 108
  2217  00011A  B4D8               	btfsc	status,2,c
  2218  00011C  D7E3               	goto	l3790
  2219  00011E  0A14               	xorlw	20	; case 120
  2220  000120  B4D8               	btfsc	status,2,c
  2221  000122  D7E3               	goto	l3792
  2222  000124  D18D               	goto	l3904
  2223  000126                     l427:
  2224                           
  2225                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2226  000126  BE40               	btfsc	printf@flag,7,c
  2227  000128  D02F               	goto	l430
  2228                           
  2229                           ;doprnt.c: 1253: {
  2230                           ;doprnt.c: 1255: if(flag & 0x10)
  2231  00012A  A840               	btfss	printf@flag,4,c
  2232  00012C  D00E               	goto	l3804
  2233                           
  2234                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2235  00012E  C038  FFD9         	movff	printf@ap,fsr2l
  2236  000132  C039  FFDA         	movff	printf@ap+1,fsr2h
  2237  000136  CFDE F03A          	movff	postinc2,printf@val
  2238  00013A  CFDE F03B          	movff	postinc2,printf@val+1
  2239  00013E  CFDE F03C          	movff	postinc2,printf@val+2
  2240  000142  CFDE F03D          	movff	postinc2,printf@val+3
  2241  000146  0E04               	movlw	4
  2242  000148  D00E               	goto	L1
  2243  00014A                     l3804:
  2244                           
  2245                           ;doprnt.c: 1257: else
  2246                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2247  00014A  C038  FFD9         	movff	printf@ap,fsr2l
  2248  00014E  C039  FFDA         	movff	printf@ap+1,fsr2h
  2249  000152  CFDE F03A          	movff	postinc2,printf@val
  2250  000156  CFDD F03B          	movff	postdec2,printf@val+1
  2251  00015A  0E00               	movlw	0
  2252  00015C  BE3B               	btfsc	printf@val+1,7,c
  2253  00015E  0EFF               	movlw	-1
  2254  000160  6E3C               	movwf	printf@val+2,c
  2255  000162  6E3D               	movwf	printf@val+3,c
  2256  000164  0E02               	movlw	2
  2257  000166                     L1:
  2258  000166  2638               	addwf	printf@ap,f,c
  2259  000168  0E00               	movlw	0
  2260  00016A  2239               	addwfc	printf@ap+1,f,c
  2261  00016C  D000               	goto	l3808
  2262  00016E                     l3808:
  2263                           
  2264                           ;doprnt.c: 1261: if((long)val < 0) {
  2265  00016E  AE3D               	btfss	printf@val+3,7,c
  2266  000170  D074               	goto	l3852
  2267                           
  2268                           ;doprnt.c: 1262: flag |= 0x03;
  2269  000172  0E03               	movlw	3
  2270  000174  1240               	iorwf	printf@flag,f,c
  2271                           
  2272                           ;doprnt.c: 1263: val = -val;
  2273  000176  1E3D               	comf	printf@val+3,f,c
  2274  000178  1E3C               	comf	printf@val+2,f,c
  2275  00017A  1E3B               	comf	printf@val+1,f,c
  2276  00017C  6C3A               	negf	printf@val,c
  2277  00017E  0E00               	movlw	0
  2278  000180  223B               	addwfc	printf@val+1,f,c
  2279  000182  223C               	addwfc	printf@val+2,f,c
  2280  000184  223D               	addwfc	printf@val+3,f,c
  2281                           
  2282                           ;doprnt.c: 1264: }
  2283                           ;doprnt.c: 1266: }
  2284  000186  D069               	goto	l3852
  2285  000188                     l430:
  2286                           
  2287                           ;doprnt.c: 1268: else
  2288                           ;doprnt.c: 1273: {
  2289                           ;doprnt.c: 1281: if(flag & 0x10)
  2290  000188  A840               	btfss	printf@flag,4,c
  2291  00018A  D00E               	goto	l3818
  2292                           
  2293                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2294  00018C  C038  FFD9         	movff	printf@ap,fsr2l
  2295  000190  C039  FFDA         	movff	printf@ap+1,fsr2h
  2296  000194  CFDE F03A          	movff	postinc2,printf@val
  2297  000198  CFDE F03B          	movff	postinc2,printf@val+1
  2298  00019C  CFDE F03C          	movff	postinc2,printf@val+2
  2299  0001A0  CFDE F03D          	movff	postinc2,printf@val+3
  2300  0001A4  0E04               	movlw	4
  2301  0001A6  D00F               	goto	L2
  2302  0001A8                     l3818:
  2303                           
  2304                           ;doprnt.c: 1283: else
  2305                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2306  0001A8  C038  FFD9         	movff	printf@ap,fsr2l
  2307  0001AC  C039  FFDA         	movff	printf@ap+1,fsr2h
  2308  0001B0  CFDE F031          	movff	postinc2,??_printf
  2309  0001B4  CFDD F032          	movff	postdec2,??_printf+1
  2310  0001B8  C031  F03A         	movff	??_printf,printf@val
  2311  0001BC  C032  F03B         	movff	??_printf+1,printf@val+1
  2312  0001C0  6A3C               	clrf	printf@val+2,c
  2313  0001C2  6A3D               	clrf	printf@val+3,c
  2314  0001C4  0E02               	movlw	2
  2315  0001C6                     L2:
  2316  0001C6  2638               	addwf	printf@ap,f,c
  2317  0001C8  0E00               	movlw	0
  2318  0001CA  2239               	addwfc	printf@ap+1,f,c
  2319                           
  2320                           ;doprnt.c: 1287: }
  2321                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2322  0001CC  D046               	goto	l3852
  2323  0001CE                     l3822:
  2324                           
  2325                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2326  0001CE  0E01               	movlw	1
  2327  0001D0  6E41               	movwf	printf@c,c
  2328  0001D2                     l3824:
  2329  0001D2  0E0A               	movlw	10
  2330  0001D4  1841               	xorwf	printf@c,w,c
  2331  0001D6  B4D8               	btfsc	status,2,c
  2332  0001D8  D049               	goto	l3854
  2333  0001DA  D001               	goto	l3828
  2334  0001DC  D047               	goto	l3854
  2335  0001DE                     l3828:
  2336                           
  2337                           ;doprnt.c: 1306: if(val < dpowers[c])
  2338  0001DE  5041               	movf	printf@c,w,c
  2339  0001E0  0D04               	mullw	4
  2340  0001E2  0E6A               	movlw	low _dpowers
  2341  0001E4  24F3               	addwf	prodl,w,c
  2342  0001E6  6EF6               	movwf	tblptrl,c
  2343  0001E8  0EFF               	movlw	high _dpowers
  2344  0001EA  20F4               	addwfc	prodh,w,c
  2345  0001EC  6EF7               	movwf	tblptrh,c
  2346  0001EE                     	if	0	;There are less than 3 active tblptr bytes
  2347  0001EE                     	endif
  2348  0001EE  0009               	tblrd		*+
  2349  0001F0  50F5               	movf	tablat,w,c
  2350  0001F2  5C3A               	subwf	printf@val,w,c
  2351  0001F4  0009               	tblrd		*+
  2352  0001F6  50F5               	movf	tablat,w,c
  2353  0001F8  583B               	subwfb	printf@val+1,w,c
  2354  0001FA  0009               	tblrd		*+
  2355  0001FC  50F5               	movf	tablat,w,c
  2356  0001FE  583C               	subwfb	printf@val+2,w,c
  2357  000200  0009               	tblrd		*+
  2358  000202  50F5               	movf	tablat,w,c
  2359  000204  583D               	subwfb	printf@val+3,w,c
  2360  000206  A0D8               	btfss	status,0,c
  2361  000208  D031               	goto	l3854
  2362  00020A  D001               	goto	l3832
  2363                           
  2364                           ;doprnt.c: 1307: break;
  2365  00020C  D02F               	goto	l3854
  2366  00020E                     l3832:
  2367  00020E  2A41               	incf	printf@c,f,c
  2368  000210  D7E0               	goto	l3824
  2369                           
  2370                           ;doprnt.c: 1309: break;
  2371  000212  D02C               	goto	l3854
  2372  000214                     l3836:
  2373                           
  2374                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2375  000214  0E01               	movlw	1
  2376  000216  6E41               	movwf	printf@c,c
  2377  000218                     l3838:
  2378  000218  0E08               	movlw	8
  2379  00021A  1841               	xorwf	printf@c,w,c
  2380  00021C  B4D8               	btfsc	status,2,c
  2381  00021E  D026               	goto	l3854
  2382  000220  D001               	goto	l3842
  2383  000222  D024               	goto	l3854
  2384  000224                     l3842:
  2385                           
  2386                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2387  000224  5041               	movf	printf@c,w,c
  2388  000226  0D04               	mullw	4
  2389  000228  0E92               	movlw	low _hexpowers
  2390  00022A  24F3               	addwf	prodl,w,c
  2391  00022C  6EF6               	movwf	tblptrl,c
  2392  00022E  0EFF               	movlw	high _hexpowers
  2393  000230  20F4               	addwfc	prodh,w,c
  2394  000232  6EF7               	movwf	tblptrh,c
  2395  000234                     	if	0	;There are less than 3 active tblptr bytes
  2396  000234                     	endif
  2397  000234  0009               	tblrd		*+
  2398  000236  50F5               	movf	tablat,w,c
  2399  000238  5C3A               	subwf	printf@val,w,c
  2400  00023A  0009               	tblrd		*+
  2401  00023C  50F5               	movf	tablat,w,c
  2402  00023E  583B               	subwfb	printf@val+1,w,c
  2403  000240  0009               	tblrd		*+
  2404  000242  50F5               	movf	tablat,w,c
  2405  000244  583C               	subwfb	printf@val+2,w,c
  2406  000246  0009               	tblrd		*+
  2407  000248  50F5               	movf	tablat,w,c
  2408  00024A  583D               	subwfb	printf@val+3,w,c
  2409  00024C  A0D8               	btfss	status,0,c
  2410  00024E  D00E               	goto	l3854
  2411  000250  D001               	goto	l3846
  2412                           
  2413                           ;doprnt.c: 1318: break;
  2414  000252  D00C               	goto	l3854
  2415  000254                     l3846:
  2416  000254  2A41               	incf	printf@c,f,c
  2417  000256  D7E0               	goto	l3838
  2418                           
  2419                           ;doprnt.c: 1336: }
  2420                           
  2421                           ;doprnt.c: 1320: break;
  2422  000258  D009               	goto	l3854
  2423  00025A                     l3852:
  2424  00025A  5040               	movf	printf@flag,w,c
  2425  00025C  0B80               	andlw	128
  2426                           
  2427                           ; Switch size 1, requested type "space"
  2428                           ; Number of cases is 2, Range of values is 0 to 128
  2429                           ; switch strategies available:
  2430                           ; Name         Instructions Cycles
  2431                           ; simple_byte            7     4 (average)
  2432                           ;	Chosen strategy is simple_byte
  2433  00025E  0A00               	xorlw	0	; case 0
  2434  000260  B4D8               	btfsc	status,2,c
  2435  000262  D7B5               	goto	l3822
  2436  000264  0A80               	xorlw	128	; case 128
  2437  000266  B4D8               	btfsc	status,2,c
  2438  000268  D7D5               	goto	l3836
  2439  00026A  D000               	goto	l3854
  2440  00026C                     l3854:
  2441                           
  2442                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2443  00026C  503E               	movf	printf@width,w,c
  2444  00026E  103F               	iorwf	printf@width+1,w,c
  2445  000270  B4D8               	btfsc	status,2,c
  2446  000272  D00A               	goto	l3860
  2447  000274  C040  F031         	movff	printf@flag,??_printf
  2448  000278  0E03               	movlw	3
  2449  00027A  1631               	andwf	??_printf,f,c
  2450  00027C  B4D8               	btfsc	status,2,c
  2451  00027E  D004               	goto	l3860
  2452                           
  2453                           ;doprnt.c: 1346: width--;
  2454  000280  063E               	decf	printf@width,f,c
  2455  000282  A0D8               	btfss	status,0,c
  2456  000284  063F               	decf	printf@width+1,f,c
  2457  000286  D000               	goto	l3860
  2458  000288                     l3860:
  2459                           
  2460                           ;doprnt.c: 1381: if(width > c)
  2461  000288  0E80               	movlw	128
  2462  00028A  BE41               	btfsc	printf@c,7,c
  2463  00028C  0E7F               	movlw	127
  2464  00028E  6E31               	movwf	??_printf& (0+255),c
  2465  000290  503E               	movf	printf@width,w,c
  2466  000292  5C41               	subwf	printf@c,w,c
  2467  000294  503F               	movf	printf@width+1,w,c
  2468  000296  0A80               	xorlw	128
  2469  000298  5831               	subwfb	??_printf& (0+255),w,c
  2470  00029A  B0D8               	btfsc	status,0,c
  2471  00029C  D007               	goto	l3864
  2472                           
  2473                           ;doprnt.c: 1382: width -= c;
  2474  00029E  5041               	movf	printf@c,w,c
  2475  0002A0  5E3E               	subwf	printf@width,f,c
  2476  0002A2  0E00               	movlw	0
  2477  0002A4  BE41               	btfsc	printf@c,7,c
  2478  0002A6  0EFF               	movlw	255
  2479  0002A8  5A3F               	subwfb	printf@width+1,f,c
  2480  0002AA  D005               	goto	l3866
  2481  0002AC                     l3864:
  2482                           
  2483                           ;doprnt.c: 1383: else
  2484                           ;doprnt.c: 1384: width = 0;
  2485  0002AC  0E00               	movlw	0
  2486  0002AE  6E3F               	movwf	printf@width+1,c
  2487  0002B0  0E00               	movlw	0
  2488  0002B2  6E3E               	movwf	printf@width,c
  2489  0002B4  D000               	goto	l3866
  2490  0002B6                     l3866:
  2491                           
  2492                           ;doprnt.c: 1387: if(flag & 0x04) {
  2493  0002B6  A440               	btfss	printf@flag,2,c
  2494  0002B8  D01A               	goto	l3878
  2495                           
  2496                           ;doprnt.c: 1392: if(flag & 0x03)
  2497  0002BA  C040  F031         	movff	printf@flag,??_printf
  2498  0002BE  0E03               	movlw	3
  2499  0002C0  1631               	andwf	??_printf,f,c
  2500  0002C2  B4D8               	btfsc	status,2,c
  2501  0002C4  D004               	goto	l3872
  2502                           
  2503                           ;doprnt.c: 1393: (putch('-') );
  2504  0002C6  0E2D               	movlw	45
  2505  0002C8  EC75  F00B         	call	_putch
  2506  0002CC  D000               	goto	l3872
  2507  0002CE                     l3872:
  2508                           
  2509                           ;doprnt.c: 1415: if(width)
  2510  0002CE  503E               	movf	printf@width,w,c
  2511  0002D0  103F               	iorwf	printf@width+1,w,c
  2512  0002D2  B4D8               	btfsc	status,2,c
  2513  0002D4  D026               	goto	l3888
  2514  0002D6                     l3874:
  2515                           
  2516                           ;doprnt.c: 1417: (putch('0') );
  2517  0002D6  0E30               	movlw	48
  2518  0002D8  EC75  F00B         	call	_putch
  2519                           
  2520                           ;doprnt.c: 1418: while(--width);
  2521  0002DC  063E               	decf	printf@width,f,c
  2522  0002DE  A0D8               	btfss	status,0,c
  2523  0002E0  063F               	decf	printf@width+1,f,c
  2524  0002E2  503E               	movf	printf@width,w,c
  2525  0002E4  103F               	iorwf	printf@width+1,w,c
  2526  0002E6  B4D8               	btfsc	status,2,c
  2527  0002E8  D01C               	goto	l3888
  2528  0002EA  D7F5               	goto	l3874
  2529                           
  2530                           ;doprnt.c: 1420: } else
  2531  0002EC  D01A               	goto	l3888
  2532  0002EE                     l3878:
  2533                           
  2534                           ;doprnt.c: 1422: {
  2535                           ;doprnt.c: 1424: if(width
  2536                           ;doprnt.c: 1428: )
  2537  0002EE  503E               	movf	printf@width,w,c
  2538  0002F0  103F               	iorwf	printf@width+1,w,c
  2539  0002F2  B4D8               	btfsc	status,2,c
  2540  0002F4  D00C               	goto	l3884
  2541  0002F6                     l3880:
  2542                           
  2543                           ;doprnt.c: 1430: (putch(' ') );
  2544  0002F6  0E20               	movlw	32
  2545  0002F8  EC75  F00B         	call	_putch
  2546                           
  2547                           ;doprnt.c: 1431: while(--width);
  2548  0002FC  063E               	decf	printf@width,f,c
  2549  0002FE  A0D8               	btfss	status,0,c
  2550  000300  063F               	decf	printf@width+1,f,c
  2551  000302  503E               	movf	printf@width,w,c
  2552  000304  103F               	iorwf	printf@width+1,w,c
  2553  000306  B4D8               	btfsc	status,2,c
  2554  000308  D002               	goto	l3884
  2555  00030A  D7F5               	goto	l3880
  2556  00030C  D000               	goto	l3884
  2557  00030E                     l3884:
  2558                           
  2559                           ;doprnt.c: 1438: if(flag & 0x03)
  2560  00030E  C040  F031         	movff	printf@flag,??_printf
  2561  000312  0E03               	movlw	3
  2562  000314  1631               	andwf	??_printf,f,c
  2563  000316  B4D8               	btfsc	status,2,c
  2564  000318  D004               	goto	l3888
  2565                           
  2566                           ;doprnt.c: 1439: (putch('-') );
  2567  00031A  0E2D               	movlw	45
  2568  00031C  EC75  F00B         	call	_putch
  2569  000320  D000               	goto	l3888
  2570  000322                     l3888:
  2571                           
  2572                           ;doprnt.c: 1469: }
  2573                           ;doprnt.c: 1472: prec = c;
  2574  000322  5041               	movf	printf@c,w,c
  2575  000324  6E36               	movwf	printf@prec,c
  2576  000326  6A37               	clrf	printf@prec+1,c
  2577  000328  BE36               	btfsc	printf@prec,7,c
  2578  00032A  0637               	decf	printf@prec+1,f,c
  2579                           
  2580                           ;doprnt.c: 1474: while(prec--) {
  2581  00032C  D07F               	goto	l3902
  2582                           
  2583                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2584  00032E  D071               	goto	l3898
  2585  000330                     l3890:
  2586                           
  2587                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2588  000330  C036  F031         	movff	printf@prec,??_printf
  2589  000334  C037  F032         	movff	printf@prec+1,??_printf+1
  2590  000338  90D8               	bcf	status,0,c
  2591  00033A  3631               	rlcf	??_printf,f,c
  2592  00033C  3632               	rlcf	??_printf+1,f,c
  2593  00033E  90D8               	bcf	status,0,c
  2594  000340  3631               	rlcf	??_printf,f,c
  2595  000342  3632               	rlcf	??_printf+1,f,c
  2596  000344  0E6A               	movlw	low _dpowers
  2597  000346  2431               	addwf	??_printf,w,c
  2598  000348  6EF6               	movwf	tblptrl,c
  2599  00034A  0EFF               	movlw	high _dpowers
  2600  00034C  2032               	addwfc	??_printf+1,w,c
  2601  00034E  6EF7               	movwf	tblptrh,c
  2602  000350                     	if	0	;There are less than 3 active tblptr bytes
  2603  000350                     	endif
  2604  000350  0009               	tblrd		*+
  2605  000352  CFF5 F015          	movff	tablat,___lldiv@divisor
  2606  000356  0009               	tblrd		*+
  2607  000358  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2608  00035C  0009               	tblrd		*+
  2609  00035E  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2610  000362  000A               	tblrd		*-
  2611  000364  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2612  000368  C03A  F011         	movff	printf@val,___lldiv@dividend
  2613  00036C  C03B  F012         	movff	printf@val+1,___lldiv@dividend+1
  2614  000370  C03C  F013         	movff	printf@val+2,___lldiv@dividend+2
  2615  000374  C03D  F014         	movff	printf@val+3,___lldiv@dividend+3
  2616  000378  EC03  F008         	call	___lldiv	;wreg free
  2617  00037C  C011  F01E         	movff	?___lldiv,___llmod@dividend
  2618  000380  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  2619  000384  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  2620  000388  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  2621  00038C  0E0A               	movlw	10
  2622  00038E  6E22               	movwf	___llmod@divisor,c
  2623  000390  0E00               	movlw	0
  2624  000392  6E23               	movwf	___llmod@divisor+1,c
  2625  000394  0E00               	movlw	0
  2626  000396  6E24               	movwf	___llmod@divisor+2,c
  2627  000398  0E00               	movlw	0
  2628  00039A  6E25               	movwf	___llmod@divisor+3,c
  2629  00039C  EC4B  F009         	call	___llmod	;wreg free
  2630  0003A0  501E               	movf	?___llmod,w,c
  2631  0003A2  0F30               	addlw	48
  2632  0003A4  6E41               	movwf	printf@c,c
  2633                           
  2634                           ;doprnt.c: 1491: break;
  2635  0003A6  D03E               	goto	l3900
  2636  0003A8                     l3892:
  2637                           
  2638                           ;doprnt.c: 1499: {
  2639                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2640  0003A8  C03A  F011         	movff	printf@val,___lldiv@dividend
  2641  0003AC  C03B  F012         	movff	printf@val+1,___lldiv@dividend+1
  2642  0003B0  C03C  F013         	movff	printf@val+2,___lldiv@dividend+2
  2643  0003B4  C03D  F014         	movff	printf@val+3,___lldiv@dividend+3
  2644  0003B8  C036  F031         	movff	printf@prec,??_printf
  2645  0003BC  C037  F032         	movff	printf@prec+1,??_printf+1
  2646  0003C0  90D8               	bcf	status,0,c
  2647  0003C2  3631               	rlcf	??_printf,f,c
  2648  0003C4  3632               	rlcf	??_printf+1,f,c
  2649  0003C6  90D8               	bcf	status,0,c
  2650  0003C8  3631               	rlcf	??_printf,f,c
  2651  0003CA  3632               	rlcf	??_printf+1,f,c
  2652  0003CC  0E92               	movlw	low _hexpowers
  2653  0003CE  2431               	addwf	??_printf,w,c
  2654  0003D0  6EF6               	movwf	tblptrl,c
  2655  0003D2  0EFF               	movlw	high _hexpowers
  2656  0003D4  2032               	addwfc	??_printf+1,w,c
  2657  0003D6  6EF7               	movwf	tblptrh,c
  2658  0003D8                     	if	0	;There are less than 3 active tblptr bytes
  2659  0003D8                     	endif
  2660  0003D8  0009               	tblrd		*+
  2661  0003DA  CFF5 F015          	movff	tablat,___lldiv@divisor
  2662  0003DE  0009               	tblrd		*+
  2663  0003E0  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2664  0003E4  0009               	tblrd		*+
  2665  0003E6  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2666  0003EA  000A               	tblrd		*-
  2667  0003EC  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2668  0003F0  EC03  F008         	call	___lldiv	;wreg free
  2669  0003F4  5011               	movf	?___lldiv,w,c
  2670  0003F6  0B0F               	andlw	15
  2671  0003F8  6E35               	movwf	printf@idx,c
  2672                           
  2673                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2674  0003FA  5035               	movf	printf@idx,w,c
  2675  0003FC  0D01               	mullw	1
  2676  0003FE  0EE6               	movlw	low STR_4
  2677  000400  24F3               	addwf	prodl,w,c
  2678  000402  6EF6               	movwf	tblptrl,c
  2679  000404  0EFF               	movlw	high STR_4
  2680  000406  20F4               	addwfc	prodh,w,c
  2681  000408  6EF7               	movwf	tblptrh,c
  2682  00040A                     	if	0	;There are less than 3 active tblptr bytes
  2683  00040A                     	endif
  2684  00040A  0008               	tblrd		*
  2685  00040C  CFF5 F041          	movff	tablat,printf@c
  2686                           
  2687                           ;doprnt.c: 1523: }
  2688                           
  2689                           ;doprnt.c: 1508: }
  2690                           ;doprnt.c: 1510: break;
  2691  000410  D009               	goto	l3900
  2692  000412                     l3898:
  2693  000412  5040               	movf	printf@flag,w,c
  2694  000414  0B80               	andlw	128
  2695                           
  2696                           ; Switch size 1, requested type "space"
  2697                           ; Number of cases is 2, Range of values is 0 to 128
  2698                           ; switch strategies available:
  2699                           ; Name         Instructions Cycles
  2700                           ; simple_byte            7     4 (average)
  2701                           ;	Chosen strategy is simple_byte
  2702  000416  0A00               	xorlw	0	; case 0
  2703  000418  B4D8               	btfsc	status,2,c
  2704  00041A  D78A               	goto	l3890
  2705  00041C  0A80               	xorlw	128	; case 128
  2706  00041E  B4D8               	btfsc	status,2,c
  2707  000420  D7C3               	goto	l3892
  2708  000422  D000               	goto	l3900
  2709  000424                     l3900:
  2710                           
  2711                           ;doprnt.c: 1524: (putch(c) );
  2712  000424  5041               	movf	printf@c,w,c
  2713  000426  EC75  F00B         	call	_putch
  2714  00042A  D000               	goto	l3902
  2715  00042C                     l3902:
  2716  00042C  0636               	decf	printf@prec,f,c
  2717  00042E  A0D8               	btfss	status,0,c
  2718  000430  0637               	decf	printf@prec+1,f,c
  2719  000432  2836               	incf	printf@prec,w,c
  2720  000434  E1EE               	bnz	l3898
  2721  000436  2837               	incf	printf@prec+1,w,c
  2722  000438  B4D8               	btfsc	status,2,c
  2723  00043A  D002               	goto	l3904
  2724  00043C  D7EA               	goto	l3898
  2725  00043E  D000               	goto	l3904
  2726  000440                     l3904:
  2727  000440  C027  FFF6         	movff	printf@f,tblptrl
  2728  000444  C028  FFF7         	movff	printf@f+1,tblptrh
  2729  000448  4A27               	infsnz	printf@f,f,c
  2730  00044A  2A28               	incf	printf@f+1,f,c
  2731  00044C                     	if	0	;tblptru may be non-zero
  2732  00044C                     	endif
  2733  00044C                     	if	0	;tblptru may be non-zero
  2734  00044C                     	endif
  2735  00044C  0008               	tblrd		*
  2736  00044E  CFF5 F041          	movff	tablat,printf@c
  2737  000452  5041               	movf	printf@c,w,c
  2738  000454  B4D8               	btfsc	status,2,c
  2739  000456  D002               	goto	l468
  2740  000458  D5E6               	goto	l3766
  2741  00045A  D000               	goto	l468
  2742  00045C                     l468:
  2743  00045C  0012               	return		;funcret
  2744  00045E                     __end_of_printf:
  2745                           	opt stack 0
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           prodh	equ	0xFF4
  2751                           prodl	equ	0xFF3
  2752                           intcon	equ	0xFF2
  2753                           intcon2	equ	0xFF1
  2754                           postinc0	equ	0xFEE
  2755                           wreg	equ	0xFE8
  2756                           postdec1	equ	0xFE5
  2757                           fsr1l	equ	0xFE1
  2758                           indf2	equ	0xFDF
  2759                           postinc2	equ	0xFDE
  2760                           postdec2	equ	0xFDD
  2761                           fsr2h	equ	0xFDA
  2762                           fsr2l	equ	0xFD9
  2763                           status	equ	0xFD8
  2764                           
  2765 ;; *************** function _putch *****************
  2766 ;; Defined at:
  2767 ;;		line 83 in file "Lab10_sample_1.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  c               1    wreg     unsigned char 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  c               1   16[COMRAM] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;		None               void
  2774 ;; Registers used:
  2775 ;;		wreg
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;Total ram usage:        1 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    3
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_printf
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text2
  2796  0016EA                     __ptext2:
  2797                           	opt stack 0
  2798  0016EA                     _putch:
  2799                           	opt stack 26
  2800                           
  2801                           ;incstack = 0
  2802                           ;putch@c stored from wreg
  2803  0016EA  6E11               	movwf	putch@c,c
  2804                           
  2805                           ;Lab10_sample_1.c: 85: while (!TRMT);
  2806  0016EC  D000               	goto	l117
  2807  0016EE                     l117:
  2808  0016EE  A2AC               	btfss	4012,1,c	;volatile
  2809  0016F0  D7FE               	goto	l117
  2810                           
  2811                           ;Lab10_sample_1.c: 86: TXREG = c;
  2812  0016F2  C011  FFAD         	movff	putch@c,4013	;volatile
  2813  0016F6  0012               	return		;funcret
  2814  0016F8                     __end_of_putch:
  2815                           	opt stack 0
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           prodh	equ	0xFF4
  2821                           prodl	equ	0xFF3
  2822                           intcon	equ	0xFF2
  2823                           intcon2	equ	0xFF1
  2824                           postinc0	equ	0xFEE
  2825                           wreg	equ	0xFE8
  2826                           postdec1	equ	0xFE5
  2827                           fsr1l	equ	0xFE1
  2828                           indf2	equ	0xFDF
  2829                           postinc2	equ	0xFDE
  2830                           postdec2	equ	0xFDD
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function _isdigit *****************
  2836 ;; Defined at:
  2837 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  c               1    wreg     unsigned char 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  c               1   18[COMRAM] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;		None               void
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;Total ram usage:        3 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    3
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_printf
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text3
  2866  001622                     __ptext3:
  2867                           	opt stack 0
  2868  001622                     _isdigit:
  2869                           	opt stack 26
  2870                           
  2871                           ;incstack = 0
  2872                           ;isdigit@c stored from wreg
  2873  001622  6E13               	movwf	isdigit@c,c
  2874  001624  0E00               	movlw	0
  2875  001626  6E12               	movwf	_isdigit$1658,c
  2876  001628  0E3A               	movlw	58
  2877  00162A  6013               	cpfslt	isdigit@c,c
  2878  00162C  D006               	goto	l2710
  2879  00162E  0E2F               	movlw	47
  2880  001630  6413               	cpfsgt	isdigit@c,c
  2881  001632  D003               	goto	l2710
  2882  001634  0E01               	movlw	1
  2883  001636  6E12               	movwf	_isdigit$1658,c
  2884  001638  D000               	goto	l2710
  2885  00163A                     l2710:
  2886  00163A  C012  F011         	movff	_isdigit$1658,??_isdigit
  2887  00163E  3011               	rrcf	??_isdigit,w,c
  2888  001640  D000               	goto	l935
  2889  001642                     l935:
  2890  001642  0012               	return		;funcret
  2891  001644                     __end_of_isdigit:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           prodh	equ	0xFF4
  2898                           prodl	equ	0xFF3
  2899                           intcon	equ	0xFF2
  2900                           intcon2	equ	0xFF1
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           indf2	equ	0xFDF
  2906                           postinc2	equ	0xFDE
  2907                           postdec2	equ	0xFDD
  2908                           fsr2h	equ	0xFDA
  2909                           fsr2l	equ	0xFD9
  2910                           status	equ	0xFD8
  2911                           
  2912 ;; *************** function ___llmod *****************
  2913 ;; Defined at:
  2914 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  dividend        4   29[COMRAM] unsigned long 
  2917 ;;  divisor         4   33[COMRAM] unsigned long 
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;  counter         1   37[COMRAM] unsigned char 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  4   29[COMRAM] unsigned long 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2929 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;Total ram usage:        9 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    3
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_printf
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text4
  2944  001296                     __ptext4:
  2945                           	opt stack 0
  2946  001296                     ___llmod:
  2947                           	opt stack 26
  2948                           
  2949                           ;incstack = 0
  2950  001296  5022               	movf	___llmod@divisor,w,c
  2951  001298  1023               	iorwf	___llmod@divisor+1,w,c
  2952  00129A  1024               	iorwf	___llmod@divisor+2,w,c
  2953  00129C  1025               	iorwf	___llmod@divisor+3,w,c
  2954  00129E  B4D8               	btfsc	status,2,c
  2955  0012A0  D029               	goto	l974
  2956  0012A2  0E01               	movlw	1
  2957  0012A4  6E26               	movwf	___llmod@counter,c
  2958  0012A6  D007               	goto	l2742
  2959  0012A8                     l2740:
  2960  0012A8  90D8               	bcf	status,0,c
  2961  0012AA  3622               	rlcf	___llmod@divisor,f,c
  2962  0012AC  3623               	rlcf	___llmod@divisor+1,f,c
  2963  0012AE  3624               	rlcf	___llmod@divisor+2,f,c
  2964  0012B0  3625               	rlcf	___llmod@divisor+3,f,c
  2965  0012B2  2A26               	incf	___llmod@counter,f,c
  2966  0012B4  D000               	goto	l2742
  2967  0012B6                     l2742:
  2968  0012B6  BE25               	btfsc	___llmod@divisor+3,7,c
  2969  0012B8  D002               	goto	l2744
  2970  0012BA  D7F6               	goto	l2740
  2971  0012BC  D000               	goto	l2744
  2972  0012BE                     l2744:
  2973  0012BE  5022               	movf	___llmod@divisor,w,c
  2974  0012C0  5C1E               	subwf	___llmod@dividend,w,c
  2975  0012C2  5023               	movf	___llmod@divisor+1,w,c
  2976  0012C4  581F               	subwfb	___llmod@dividend+1,w,c
  2977  0012C6  5024               	movf	___llmod@divisor+2,w,c
  2978  0012C8  5820               	subwfb	___llmod@dividend+2,w,c
  2979  0012CA  5025               	movf	___llmod@divisor+3,w,c
  2980  0012CC  5821               	subwfb	___llmod@dividend+3,w,c
  2981  0012CE  A0D8               	btfss	status,0,c
  2982  0012D0  D009               	goto	l2748
  2983  0012D2  5022               	movf	___llmod@divisor,w,c
  2984  0012D4  5E1E               	subwf	___llmod@dividend,f,c
  2985  0012D6  5023               	movf	___llmod@divisor+1,w,c
  2986  0012D8  5A1F               	subwfb	___llmod@dividend+1,f,c
  2987  0012DA  5024               	movf	___llmod@divisor+2,w,c
  2988  0012DC  5A20               	subwfb	___llmod@dividend+2,f,c
  2989  0012DE  5025               	movf	___llmod@divisor+3,w,c
  2990  0012E0  5A21               	subwfb	___llmod@dividend+3,f,c
  2991  0012E2  D000               	goto	l2748
  2992  0012E4                     l2748:
  2993  0012E4  90D8               	bcf	status,0,c
  2994  0012E6  3225               	rrcf	___llmod@divisor+3,f,c
  2995  0012E8  3224               	rrcf	___llmod@divisor+2,f,c
  2996  0012EA  3223               	rrcf	___llmod@divisor+1,f,c
  2997  0012EC  3222               	rrcf	___llmod@divisor,f,c
  2998  0012EE  2E26               	decfsz	___llmod@counter,f,c
  2999  0012F0  D7E6               	goto	l2744
  3000  0012F2  D000               	goto	l974
  3001  0012F4                     l974:
  3002  0012F4  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3003  0012F8  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3004  0012FC  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3005  001300  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3006  001304  0012               	return		;funcret
  3007  001306                     __end_of___llmod:
  3008                           	opt stack 0
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           intcon2	equ	0xFF1
  3017                           postinc0	equ	0xFEE
  3018                           wreg	equ	0xFE8
  3019                           postdec1	equ	0xFE5
  3020                           fsr1l	equ	0xFE1
  3021                           indf2	equ	0xFDF
  3022                           postinc2	equ	0xFDE
  3023                           postdec2	equ	0xFDD
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           
  3028 ;; *************** function ___lldiv *****************
  3029 ;; Defined at:
  3030 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  dividend        4   16[COMRAM] unsigned long 
  3033 ;;  divisor         4   20[COMRAM] unsigned long 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  quotient        4   24[COMRAM] unsigned long 
  3036 ;;  counter         1   28[COMRAM] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  4   16[COMRAM] unsigned long 
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3046 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;Total ram usage:       13 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    3
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_printf
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text5
  3061  001006                     __ptext5:
  3062                           	opt stack 0
  3063  001006                     ___lldiv:
  3064                           	opt stack 26
  3065                           
  3066                           ;incstack = 0
  3067  001006  0E00               	movlw	0
  3068  001008  6E19               	movwf	___lldiv@quotient,c
  3069  00100A  0E00               	movlw	0
  3070  00100C  6E1A               	movwf	___lldiv@quotient+1,c
  3071  00100E  0E00               	movlw	0
  3072  001010  6E1B               	movwf	___lldiv@quotient+2,c
  3073  001012  0E00               	movlw	0
  3074  001014  6E1C               	movwf	___lldiv@quotient+3,c
  3075  001016  5015               	movf	___lldiv@divisor,w,c
  3076  001018  1016               	iorwf	___lldiv@divisor+1,w,c
  3077  00101A  1017               	iorwf	___lldiv@divisor+2,w,c
  3078  00101C  1018               	iorwf	___lldiv@divisor+3,w,c
  3079  00101E  B4D8               	btfsc	status,2,c
  3080  001020  D02F               	goto	l964
  3081  001022  0E01               	movlw	1
  3082  001024  6E1D               	movwf	___lldiv@counter,c
  3083  001026  D007               	goto	l2722
  3084  001028                     l2720:
  3085  001028  90D8               	bcf	status,0,c
  3086  00102A  3615               	rlcf	___lldiv@divisor,f,c
  3087  00102C  3616               	rlcf	___lldiv@divisor+1,f,c
  3088  00102E  3617               	rlcf	___lldiv@divisor+2,f,c
  3089  001030  3618               	rlcf	___lldiv@divisor+3,f,c
  3090  001032  2A1D               	incf	___lldiv@counter,f,c
  3091  001034  D000               	goto	l2722
  3092  001036                     l2722:
  3093  001036  BE18               	btfsc	___lldiv@divisor+3,7,c
  3094  001038  D002               	goto	l2724
  3095  00103A  D7F6               	goto	l2720
  3096  00103C  D000               	goto	l2724
  3097  00103E                     l2724:
  3098  00103E  90D8               	bcf	status,0,c
  3099  001040  3619               	rlcf	___lldiv@quotient,f,c
  3100  001042  361A               	rlcf	___lldiv@quotient+1,f,c
  3101  001044  361B               	rlcf	___lldiv@quotient+2,f,c
  3102  001046  361C               	rlcf	___lldiv@quotient+3,f,c
  3103  001048  5015               	movf	___lldiv@divisor,w,c
  3104  00104A  5C11               	subwf	___lldiv@dividend,w,c
  3105  00104C  5016               	movf	___lldiv@divisor+1,w,c
  3106  00104E  5812               	subwfb	___lldiv@dividend+1,w,c
  3107  001050  5017               	movf	___lldiv@divisor+2,w,c
  3108  001052  5813               	subwfb	___lldiv@dividend+2,w,c
  3109  001054  5018               	movf	___lldiv@divisor+3,w,c
  3110  001056  5814               	subwfb	___lldiv@dividend+3,w,c
  3111  001058  A0D8               	btfss	status,0,c
  3112  00105A  D00A               	goto	l2732
  3113  00105C  5015               	movf	___lldiv@divisor,w,c
  3114  00105E  5E11               	subwf	___lldiv@dividend,f,c
  3115  001060  5016               	movf	___lldiv@divisor+1,w,c
  3116  001062  5A12               	subwfb	___lldiv@dividend+1,f,c
  3117  001064  5017               	movf	___lldiv@divisor+2,w,c
  3118  001066  5A13               	subwfb	___lldiv@dividend+2,f,c
  3119  001068  5018               	movf	___lldiv@divisor+3,w,c
  3120  00106A  5A14               	subwfb	___lldiv@dividend+3,f,c
  3121  00106C  8019               	bsf	___lldiv@quotient,0,c
  3122  00106E  D000               	goto	l2732
  3123  001070                     l2732:
  3124  001070  90D8               	bcf	status,0,c
  3125  001072  3218               	rrcf	___lldiv@divisor+3,f,c
  3126  001074  3217               	rrcf	___lldiv@divisor+2,f,c
  3127  001076  3216               	rrcf	___lldiv@divisor+1,f,c
  3128  001078  3215               	rrcf	___lldiv@divisor,f,c
  3129  00107A  2E1D               	decfsz	___lldiv@counter,f,c
  3130  00107C  D7E0               	goto	l2724
  3131  00107E  D000               	goto	l964
  3132  001080                     l964:
  3133  001080  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3134  001084  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3135  001088  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3136  00108C  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3137  001090  0012               	return		;funcret
  3138  001092                     __end_of___lldiv:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           prodh	equ	0xFF4
  3145                           prodl	equ	0xFF3
  3146                           intcon	equ	0xFF2
  3147                           intcon2	equ	0xFF1
  3148                           postinc0	equ	0xFEE
  3149                           wreg	equ	0xFE8
  3150                           postdec1	equ	0xFE5
  3151                           fsr1l	equ	0xFE1
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159 ;; *************** function _init_UART *****************
  3160 ;; Defined at:
  3161 ;;		line 88 in file "Lab10_sample_1.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;Total ram usage:        0 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		_OpenUSART
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text6
  3190  001690                     __ptext6:
  3191                           	opt stack 0
  3192  001690                     _init_UART:
  3193                           	opt stack 26
  3194                           
  3195                           ;Lab10_sample_1.c: 90: OpenUSART (0b01111111 & 0b10111111 &
  3196                           ;Lab10_sample_1.c: 91: 0b11111110 & 0b11111101 & 0b11111111 &
  3197                           ;Lab10_sample_1.c: 92: 0b11111111, 25);
  3198                           
  3199                           ;incstack = 0
  3200  001690  0E00               	movlw	0
  3201  001692  6E12               	movwf	OpenUSART@spbrg+1,c
  3202  001694  0E19               	movlw	25
  3203  001696  6E11               	movwf	OpenUSART@spbrg,c
  3204  001698  0E3C               	movlw	60
  3205  00169A  EC83  F009         	call	_OpenUSART
  3206                           
  3207                           ;Lab10_sample_1.c: 93: OSCCON = 0x60;
  3208  00169E  0E60               	movlw	96
  3209  0016A0  6ED3               	movwf	4051,c	;volatile
  3210  0016A2  0012               	return		;funcret
  3211  0016A4                     __end_of_init_UART:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           intcon	equ	0xFF2
  3220                           intcon2	equ	0xFF1
  3221                           postinc0	equ	0xFEE
  3222                           wreg	equ	0xFE8
  3223                           postdec1	equ	0xFE5
  3224                           fsr1l	equ	0xFE1
  3225                           indf2	equ	0xFDF
  3226                           postinc2	equ	0xFDE
  3227                           postdec2	equ	0xFDD
  3228                           fsr2h	equ	0xFDA
  3229                           fsr2l	equ	0xFD9
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _OpenUSART *****************
  3233 ;; Defined at:
  3234 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  config          1    wreg     unsigned char 
  3237 ;;  spbrg           2   16[COMRAM] unsigned int 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  config          1   18[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;		None               void
  3242 ;; Registers used:
  3243 ;;		wreg, status,2
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;Total ram usage:        3 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    3
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_init_UART
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text7
  3264  001306                     __ptext7:
  3265                           	opt stack 0
  3266  001306                     _OpenUSART:
  3267                           	opt stack 26
  3268                           
  3269                           ;incstack = 0
  3270                           ;OpenUSART@config stored from wreg
  3271  001306  6E13               	movwf	OpenUSART@config,c
  3272  001308  0E00               	movlw	0
  3273  00130A  6EAC               	movwf	4012,c	;volatile
  3274  00130C  0E00               	movlw	0
  3275  00130E  6EAB               	movwf	4011,c	;volatile
  3276  001310  A013               	btfss	OpenUSART@config,0,c
  3277  001312  D002               	goto	l2560
  3278  001314  88AC               	bsf	4012,4,c	;volatile
  3279  001316  D000               	goto	l2560
  3280  001318                     l2560:
  3281  001318  A213               	btfss	OpenUSART@config,1,c
  3282  00131A  D003               	goto	l2564
  3283  00131C  8CAC               	bsf	4012,6,c	;volatile
  3284  00131E  8CAB               	bsf	4011,6,c	;volatile
  3285  001320  D000               	goto	l2564
  3286  001322                     l2564:
  3287  001322  A413               	btfss	OpenUSART@config,2,c
  3288  001324  D002               	goto	l2568
  3289  001326  8EAC               	bsf	4012,7,c	;volatile
  3290  001328  D000               	goto	l2568
  3291  00132A                     l2568:
  3292  00132A  A613               	btfss	OpenUSART@config,3,c
  3293  00132C  D002               	goto	l492
  3294  00132E  88AB               	bsf	4011,4,c	;volatile
  3295  001330  D002               	goto	l2572
  3296  001332                     l492:
  3297  001332  8AAB               	bsf	4011,5,c	;volatile
  3298  001334  D000               	goto	l2572
  3299  001336                     l2572:
  3300  001336  B813               	btfsc	OpenUSART@config,4,c
  3301  001338  84AC               	bsf	4012,2,c	;volatile
  3302  00133A  989E               	bcf	3998,4,c	;volatile
  3303  00133C  AA13               	btfss	OpenUSART@config,5,c
  3304  00133E  D002               	goto	l2580
  3305  001340  86AB               	bsf	4011,3,c	;volatile
  3306  001342  D000               	goto	l2580
  3307  001344                     l2580:
  3308  001344  AC13               	btfss	OpenUSART@config,6,c
  3309  001346  D002               	goto	l496
  3310  001348  8A9D               	bsf	3997,5,c	;volatile
  3311  00134A  D001               	goto	l497
  3312  00134C                     l496:
  3313  00134C  9A9D               	bcf	3997,5,c	;volatile
  3314  00134E                     l497:
  3315  00134E  9A9E               	bcf	3998,5,c	;volatile
  3316  001350  AE13               	btfss	OpenUSART@config,7,c
  3317  001352  D002               	goto	l498
  3318  001354  889D               	bsf	3997,4,c	;volatile
  3319  001356  D001               	goto	l499
  3320  001358                     l498:
  3321  001358  989D               	bcf	3997,4,c	;volatile
  3322  00135A                     l499:
  3323  00135A  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3324  00135E  5012               	movf	OpenUSART@spbrg+1,w,c
  3325  001360  6EB0               	movwf	4016,c	;volatile
  3326  001362  8AAC               	bsf	4012,5,c	;volatile
  3327  001364  8EAB               	bsf	4011,7,c	;volatile
  3328  001366  9C94               	bcf	3988,6,c	;volatile
  3329  001368  8E94               	bsf	3988,7,c	;volatile
  3330  00136A  B8AC               	btfsc	4012,4,c	;volatile
  3331  00136C  BEAC               	btfsc	4012,7,c	;volatile
  3332  00136E  D002               	goto	l501
  3333  001370  8C94               	bsf	3988,6,c	;volatile
  3334  001372  D000               	goto	l501
  3335  001374                     l501:
  3336  001374  0012               	return		;funcret
  3337  001376                     __end_of_OpenUSART:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           intcon2	equ	0xFF1
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _fillCircle *****************
  3359 ;; Defined at:
  3360 ;;		line 614 in file "ST7735_TFT.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  x0              2   58[COMRAM] int 
  3363 ;;  y0              2   60[COMRAM] int 
  3364 ;;  r               2   62[COMRAM] int 
  3365 ;;  color           2   64[COMRAM] unsigned int 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;		None               void
  3370 ;; Registers used:
  3371 ;;		wreg, status,2, status,0, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3377 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;Total ram usage:        8 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    8
  3384 ;; This function calls:
  3385 ;;		_drawFastVLine
  3386 ;;		_fillCircleHelper
  3387 ;; This function is called by:
  3388 ;;		_main
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text8
  3393  001376                     __ptext8:
  3394                           	opt stack 0
  3395  001376                     _fillCircle:
  3396                           	opt stack 22
  3397                           
  3398                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3399                           
  3400                           ;incstack = 0
  3401  001376  503F               	movf	fillCircle@r,w,c
  3402  001378  0800               	sublw	0
  3403  00137A  243D               	addwf	fillCircle@y0,w,c
  3404  00137C  6E18               	movwf	drawFastVLine@y,c
  3405  00137E  80D8               	bsf	status,0,c
  3406  001380  343F               	rlcf	fillCircle@r,w,c
  3407  001382  6E19               	movwf	drawFastVLine@h,c
  3408  001384  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3409  001388  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3410  00138C  503B               	movf	fillCircle@x0,w,c
  3411  00138E  EC49  F008         	call	_drawFastVLine
  3412                           
  3413                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3414  001392  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3415  001396  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3416  00139A  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3417  00139E  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3418  0013A2  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3419  0013A6  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3420  0013AA  0E00               	movlw	0
  3421  0013AC  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3422  0013AE  0E03               	movlw	3
  3423  0013B0  6E29               	movwf	fillCircleHelper@cornername,c
  3424  0013B2  0E00               	movlw	0
  3425  0013B4  6E2C               	movwf	fillCircleHelper@delta+1,c
  3426  0013B6  0E00               	movlw	0
  3427  0013B8  6E2B               	movwf	fillCircleHelper@delta,c
  3428  0013BA  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3429  0013BE  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3430  0013C2  EC2C  F005         	call	_fillCircleHelper	;wreg free
  3431  0013C6  0012               	return		;funcret
  3432  0013C8                     __end_of_fillCircle:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           intcon2	equ	0xFF1
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           postdec1	equ	0xFE5
  3445                           fsr1l	equ	0xFE1
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function _fillCircleHelper *****************
  3454 ;; Defined at:
  3455 ;;		line 589 in file "ST7735_TFT.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  x0              2   34[COMRAM] int 
  3458 ;;  y0              2   36[COMRAM] int 
  3459 ;;  r               2   38[COMRAM] int 
  3460 ;;  cornername      2   40[COMRAM] unsigned int 
  3461 ;;  delta           2   42[COMRAM] int 
  3462 ;;  color           2   44[COMRAM] unsigned int 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  y               2   56[COMRAM] int 
  3465 ;;  x               2   54[COMRAM] int 
  3466 ;;  f               2   52[COMRAM] int 
  3467 ;;  ddF_y           2   50[COMRAM] int 
  3468 ;;  ddF_x           2   48[COMRAM] int 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;		None               void
  3471 ;; Registers used:
  3472 ;;		wreg, status,2, status,0, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3478 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;Total ram usage:       24 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    7
  3485 ;; This function calls:
  3486 ;;		_drawFastVLine
  3487 ;; This function is called by:
  3488 ;;		_fillCircle
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text9
  3493  000A58                     __ptext9:
  3494                           	opt stack 0
  3495  000A58                     _fillCircleHelper:
  3496                           	opt stack 22
  3497                           
  3498                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3499                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3500                           
  3501                           ;incstack = 0
  3502  000A58  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3503  000A5C  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3504  000A60  1E2F               	comf	??_fillCircleHelper,f,c
  3505  000A62  1E30               	comf	??_fillCircleHelper+1,f,c
  3506  000A64  4A2F               	infsnz	??_fillCircleHelper,f,c
  3507  000A66  2A30               	incf	??_fillCircleHelper+1,f,c
  3508  000A68  0E01               	movlw	1
  3509  000A6A  242F               	addwf	??_fillCircleHelper,w,c
  3510  000A6C  6E35               	movwf	fillCircleHelper@f,c
  3511  000A6E  0E00               	movlw	0
  3512  000A70  2030               	addwfc	??_fillCircleHelper+1,w,c
  3513  000A72  6E36               	movwf	fillCircleHelper@f+1,c
  3514  000A74  0E00               	movlw	0
  3515  000A76  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3516  000A78  0E01               	movlw	1
  3517  000A7A  6E31               	movwf	fillCircleHelper@ddF_x,c
  3518  000A7C  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3519  000A80  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3520  000A84  90D8               	bcf	status,0,c
  3521  000A86  362F               	rlcf	??_fillCircleHelper,f,c
  3522  000A88  3630               	rlcf	??_fillCircleHelper+1,f,c
  3523  000A8A  1E2F               	comf	??_fillCircleHelper,f,c
  3524  000A8C  1E30               	comf	??_fillCircleHelper+1,f,c
  3525  000A8E  4A2F               	infsnz	??_fillCircleHelper,f,c
  3526  000A90  2A30               	incf	??_fillCircleHelper+1,f,c
  3527  000A92  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3528  000A96  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3529  000A9A  0E00               	movlw	0
  3530  000A9C  6E38               	movwf	fillCircleHelper@x+1,c
  3531  000A9E  0E00               	movlw	0
  3532  000AA0  6E37               	movwf	fillCircleHelper@x,c
  3533  000AA2  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3534  000AA6  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3535                           
  3536                           ;ST7735_TFT.c: 593: while (x<y) {
  3537  000AAA  D067               	goto	l3698
  3538  000AAC                     l3678:
  3539                           
  3540                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3541  000AAC  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3542  000AAE  D00B               	goto	l361
  3543                           
  3544                           ;ST7735_TFT.c: 595: y--;
  3545  000AB0  0639               	decf	fillCircleHelper@y,f,c
  3546  000AB2  A0D8               	btfss	status,0,c
  3547  000AB4  063A               	decf	fillCircleHelper@y+1,f,c
  3548                           
  3549                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3550  000AB6  0E02               	movlw	2
  3551  000AB8  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3552  000ABA  0E00               	movlw	0
  3553  000ABC  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3554                           
  3555                           ;ST7735_TFT.c: 597: f += ddF_y;
  3556  000ABE  5033               	movf	fillCircleHelper@ddF_y,w,c
  3557  000AC0  2635               	addwf	fillCircleHelper@f,f,c
  3558  000AC2  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3559  000AC4  2236               	addwfc	fillCircleHelper@f+1,f,c
  3560  000AC6                     l361:
  3561                           
  3562                           ;ST7735_TFT.c: 598: }
  3563                           ;ST7735_TFT.c: 599: x++;
  3564  000AC6  4A37               	infsnz	fillCircleHelper@x,f,c
  3565  000AC8  2A38               	incf	fillCircleHelper@x+1,f,c
  3566                           
  3567                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3568  000ACA  0E02               	movlw	2
  3569  000ACC  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3570  000ACE  0E00               	movlw	0
  3571  000AD0  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3572                           
  3573                           ;ST7735_TFT.c: 601: f += ddF_x;
  3574  000AD2  5031               	movf	fillCircleHelper@ddF_x,w,c
  3575  000AD4  2635               	addwf	fillCircleHelper@f,f,c
  3576  000AD6  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3577  000AD8  2236               	addwfc	fillCircleHelper@f+1,f,c
  3578                           
  3579                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3580  000ADA  A029               	btfss	fillCircleHelper@cornername,0,c
  3581  000ADC  D025               	goto	l3694
  3582                           
  3583                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3584  000ADE  5039               	movf	fillCircleHelper@y,w,c
  3585  000AE0  0800               	sublw	0
  3586  000AE2  2425               	addwf	fillCircleHelper@y0,w,c
  3587  000AE4  6E18               	movwf	drawFastVLine@y,c
  3588  000AE6  5039               	movf	fillCircleHelper@y,w,c
  3589  000AE8  2439               	addwf	fillCircleHelper@y,w,c
  3590  000AEA  242B               	addwf	fillCircleHelper@delta,w,c
  3591  000AEC  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3592  000AEE  282F               	incf	??_fillCircleHelper,w,c
  3593  000AF0  6E19               	movwf	drawFastVLine@h,c
  3594  000AF2  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3595  000AF6  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3596  000AFA  5023               	movf	fillCircleHelper@x0,w,c
  3597  000AFC  2437               	addwf	fillCircleHelper@x,w,c
  3598  000AFE  EC49  F008         	call	_drawFastVLine
  3599                           
  3600                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3601  000B02  5037               	movf	fillCircleHelper@x,w,c
  3602  000B04  0800               	sublw	0
  3603  000B06  2425               	addwf	fillCircleHelper@y0,w,c
  3604  000B08  6E18               	movwf	drawFastVLine@y,c
  3605  000B0A  5037               	movf	fillCircleHelper@x,w,c
  3606  000B0C  2437               	addwf	fillCircleHelper@x,w,c
  3607  000B0E  242B               	addwf	fillCircleHelper@delta,w,c
  3608  000B10  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3609  000B12  282F               	incf	??_fillCircleHelper,w,c
  3610  000B14  6E19               	movwf	drawFastVLine@h,c
  3611  000B16  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3612  000B1A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3613  000B1E  5023               	movf	fillCircleHelper@x0,w,c
  3614  000B20  2439               	addwf	fillCircleHelper@y,w,c
  3615  000B22  EC49  F008         	call	_drawFastVLine
  3616  000B26  D000               	goto	l3694
  3617  000B28                     l3694:
  3618                           
  3619                           ;ST7735_TFT.c: 606: }
  3620                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3621  000B28  A229               	btfss	fillCircleHelper@cornername,1,c
  3622  000B2A  D027               	goto	l3698
  3623                           
  3624                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3625  000B2C  5039               	movf	fillCircleHelper@y,w,c
  3626  000B2E  0800               	sublw	0
  3627  000B30  2425               	addwf	fillCircleHelper@y0,w,c
  3628  000B32  6E18               	movwf	drawFastVLine@y,c
  3629  000B34  5039               	movf	fillCircleHelper@y,w,c
  3630  000B36  2439               	addwf	fillCircleHelper@y,w,c
  3631  000B38  242B               	addwf	fillCircleHelper@delta,w,c
  3632  000B3A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3633  000B3C  282F               	incf	??_fillCircleHelper,w,c
  3634  000B3E  6E19               	movwf	drawFastVLine@h,c
  3635  000B40  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3636  000B44  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3637  000B48  5037               	movf	fillCircleHelper@x,w,c
  3638  000B4A  0800               	sublw	0
  3639  000B4C  2423               	addwf	fillCircleHelper@x0,w,c
  3640  000B4E  EC49  F008         	call	_drawFastVLine
  3641                           
  3642                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3643  000B52  5037               	movf	fillCircleHelper@x,w,c
  3644  000B54  0800               	sublw	0
  3645  000B56  2425               	addwf	fillCircleHelper@y0,w,c
  3646  000B58  6E18               	movwf	drawFastVLine@y,c
  3647  000B5A  5037               	movf	fillCircleHelper@x,w,c
  3648  000B5C  2437               	addwf	fillCircleHelper@x,w,c
  3649  000B5E  242B               	addwf	fillCircleHelper@delta,w,c
  3650  000B60  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3651  000B62  282F               	incf	??_fillCircleHelper,w,c
  3652  000B64  6E19               	movwf	drawFastVLine@h,c
  3653  000B66  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3654  000B6A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3655  000B6E  5039               	movf	fillCircleHelper@y,w,c
  3656  000B70  0800               	sublw	0
  3657  000B72  2423               	addwf	fillCircleHelper@x0,w,c
  3658  000B74  EC49  F008         	call	_drawFastVLine
  3659  000B78  D000               	goto	l3698
  3660  000B7A                     l3698:
  3661  000B7A  5039               	movf	fillCircleHelper@y,w,c
  3662  000B7C  5C37               	subwf	fillCircleHelper@x,w,c
  3663  000B7E  5038               	movf	fillCircleHelper@x+1,w,c
  3664  000B80  0A80               	xorlw	128
  3665  000B82  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3666  000B84  503A               	movf	fillCircleHelper@y+1,w,c
  3667  000B86  0A80               	xorlw	128
  3668  000B88  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3669  000B8A  A0D8               	btfss	status,0,c
  3670  000B8C  D78F               	goto	l3678
  3671  000B8E  0012               	return		;funcret
  3672  000B90                     __end_of_fillCircleHelper:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           intcon	equ	0xFF2
  3681                           intcon2	equ	0xFF1
  3682                           postinc0	equ	0xFEE
  3683                           wreg	equ	0xFE8
  3684                           postdec1	equ	0xFE5
  3685                           fsr1l	equ	0xFE1
  3686                           indf2	equ	0xFDF
  3687                           postinc2	equ	0xFDE
  3688                           postdec2	equ	0xFDD
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _drawCircle *****************
  3694 ;; Defined at:
  3695 ;;		line 528 in file "ST7735_TFT.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  x0              2   27[COMRAM] int 
  3698 ;;  y0              2   29[COMRAM] int 
  3699 ;;  r               2   31[COMRAM] int 
  3700 ;;  color           2   33[COMRAM] unsigned int 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  y               2   45[COMRAM] int 
  3703 ;;  x               2   43[COMRAM] int 
  3704 ;;  f               2   41[COMRAM] int 
  3705 ;;  ddF_y           2   39[COMRAM] int 
  3706 ;;  ddF_x           2   37[COMRAM] int 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;		None               void
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, status,0, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3716 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;Total ram usage:       20 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    7
  3723 ;; This function calls:
  3724 ;;		_drawPixel
  3725 ;; This function is called by:
  3726 ;;		_main
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text10
  3731  00045E                     __ptext10:
  3732                           	opt stack 0
  3733  00045E                     _drawCircle:
  3734                           	opt stack 23
  3735                           
  3736                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3737                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3738                           
  3739                           ;incstack = 0
  3740  00045E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3741  000462  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3742  000466  1E24               	comf	??_drawCircle,f,c
  3743  000468  1E25               	comf	??_drawCircle+1,f,c
  3744  00046A  4A24               	infsnz	??_drawCircle,f,c
  3745  00046C  2A25               	incf	??_drawCircle+1,f,c
  3746  00046E  0E01               	movlw	1
  3747  000470  2424               	addwf	??_drawCircle,w,c
  3748  000472  6E2A               	movwf	drawCircle@f,c
  3749  000474  0E00               	movlw	0
  3750  000476  2025               	addwfc	??_drawCircle+1,w,c
  3751  000478  6E2B               	movwf	drawCircle@f+1,c
  3752  00047A  0E00               	movlw	0
  3753  00047C  6E27               	movwf	drawCircle@ddF_x+1,c
  3754  00047E  0E01               	movlw	1
  3755  000480  6E26               	movwf	drawCircle@ddF_x,c
  3756  000482  C020  F024         	movff	drawCircle@r,??_drawCircle
  3757  000486  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3758  00048A  90D8               	bcf	status,0,c
  3759  00048C  3624               	rlcf	??_drawCircle,f,c
  3760  00048E  3625               	rlcf	??_drawCircle+1,f,c
  3761  000490  1E24               	comf	??_drawCircle,f,c
  3762  000492  1E25               	comf	??_drawCircle+1,f,c
  3763  000494  4A24               	infsnz	??_drawCircle,f,c
  3764  000496  2A25               	incf	??_drawCircle+1,f,c
  3765  000498  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3766  00049C  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3767  0004A0  0E00               	movlw	0
  3768  0004A2  6E2D               	movwf	drawCircle@x+1,c
  3769  0004A4  0E00               	movlw	0
  3770  0004A6  6E2C               	movwf	drawCircle@x,c
  3771  0004A8  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3772  0004AC  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3773                           
  3774                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3775  0004B0  501E               	movf	drawCircle@y0,w,c
  3776  0004B2  2420               	addwf	drawCircle@r,w,c
  3777  0004B4  6E18               	movwf	drawPixel@y,c
  3778  0004B6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3779  0004BA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3780  0004BE  501C               	movf	drawCircle@x0,w,c
  3781  0004C0  ECD0  F00A         	call	_drawPixel
  3782                           
  3783                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3784  0004C4  5020               	movf	drawCircle@r,w,c
  3785  0004C6  0800               	sublw	0
  3786  0004C8  241E               	addwf	drawCircle@y0,w,c
  3787  0004CA  6E18               	movwf	drawPixel@y,c
  3788  0004CC  C022  F019         	movff	drawCircle@color,drawPixel@color
  3789  0004D0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3790  0004D4  501C               	movf	drawCircle@x0,w,c
  3791  0004D6  ECD0  F00A         	call	_drawPixel
  3792                           
  3793                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3794  0004DA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3795  0004DE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3796  0004E2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3797  0004E6  501C               	movf	drawCircle@x0,w,c
  3798  0004E8  2420               	addwf	drawCircle@r,w,c
  3799  0004EA  ECD0  F00A         	call	_drawPixel
  3800                           
  3801                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3802  0004EE  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3803  0004F2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3804  0004F6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3805  0004FA  5020               	movf	drawCircle@r,w,c
  3806  0004FC  0800               	sublw	0
  3807  0004FE  241C               	addwf	drawCircle@x0,w,c
  3808  000500  ECD0  F00A         	call	_drawPixel
  3809                           
  3810                           ;ST7735_TFT.c: 536: while (x < y) {
  3811  000504  D078               	goto	l3762
  3812  000506                     l3734:
  3813                           
  3814                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3815  000506  BE2B               	btfsc	drawCircle@f+1,7,c
  3816  000508  D00B               	goto	l343
  3817                           
  3818                           ;ST7735_TFT.c: 538: y--;
  3819  00050A  062E               	decf	drawCircle@y,f,c
  3820  00050C  A0D8               	btfss	status,0,c
  3821  00050E  062F               	decf	drawCircle@y+1,f,c
  3822                           
  3823                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3824  000510  0E02               	movlw	2
  3825  000512  2628               	addwf	drawCircle@ddF_y,f,c
  3826  000514  0E00               	movlw	0
  3827  000516  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3828                           
  3829                           ;ST7735_TFT.c: 540: f += ddF_y;
  3830  000518  5028               	movf	drawCircle@ddF_y,w,c
  3831  00051A  262A               	addwf	drawCircle@f,f,c
  3832  00051C  5029               	movf	drawCircle@ddF_y+1,w,c
  3833  00051E  222B               	addwfc	drawCircle@f+1,f,c
  3834  000520                     l343:
  3835                           
  3836                           ;ST7735_TFT.c: 541: }
  3837                           ;ST7735_TFT.c: 542: x++;
  3838  000520  4A2C               	infsnz	drawCircle@x,f,c
  3839  000522  2A2D               	incf	drawCircle@x+1,f,c
  3840                           
  3841                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3842  000524  0E02               	movlw	2
  3843  000526  2626               	addwf	drawCircle@ddF_x,f,c
  3844  000528  0E00               	movlw	0
  3845  00052A  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3846                           
  3847                           ;ST7735_TFT.c: 544: f += ddF_x;
  3848  00052C  5026               	movf	drawCircle@ddF_x,w,c
  3849  00052E  262A               	addwf	drawCircle@f,f,c
  3850  000530  5027               	movf	drawCircle@ddF_x+1,w,c
  3851  000532  222B               	addwfc	drawCircle@f+1,f,c
  3852                           
  3853                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3854  000534  501E               	movf	drawCircle@y0,w,c
  3855  000536  242E               	addwf	drawCircle@y,w,c
  3856  000538  6E18               	movwf	drawPixel@y,c
  3857  00053A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3858  00053E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3859  000542  501C               	movf	drawCircle@x0,w,c
  3860  000544  242C               	addwf	drawCircle@x,w,c
  3861  000546  ECD0  F00A         	call	_drawPixel
  3862                           
  3863                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3864  00054A  501E               	movf	drawCircle@y0,w,c
  3865  00054C  242E               	addwf	drawCircle@y,w,c
  3866  00054E  6E18               	movwf	drawPixel@y,c
  3867  000550  C022  F019         	movff	drawCircle@color,drawPixel@color
  3868  000554  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3869  000558  502C               	movf	drawCircle@x,w,c
  3870  00055A  0800               	sublw	0
  3871  00055C  241C               	addwf	drawCircle@x0,w,c
  3872  00055E  ECD0  F00A         	call	_drawPixel
  3873                           
  3874                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3875  000562  502E               	movf	drawCircle@y,w,c
  3876  000564  0800               	sublw	0
  3877  000566  241E               	addwf	drawCircle@y0,w,c
  3878  000568  6E18               	movwf	drawPixel@y,c
  3879  00056A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3880  00056E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3881  000572  501C               	movf	drawCircle@x0,w,c
  3882  000574  242C               	addwf	drawCircle@x,w,c
  3883  000576  ECD0  F00A         	call	_drawPixel
  3884                           
  3885                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3886  00057A  502E               	movf	drawCircle@y,w,c
  3887  00057C  0800               	sublw	0
  3888  00057E  241E               	addwf	drawCircle@y0,w,c
  3889  000580  6E18               	movwf	drawPixel@y,c
  3890  000582  C022  F019         	movff	drawCircle@color,drawPixel@color
  3891  000586  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3892  00058A  502C               	movf	drawCircle@x,w,c
  3893  00058C  0800               	sublw	0
  3894  00058E  241C               	addwf	drawCircle@x0,w,c
  3895  000590  ECD0  F00A         	call	_drawPixel
  3896                           
  3897                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3898  000594  501E               	movf	drawCircle@y0,w,c
  3899  000596  242C               	addwf	drawCircle@x,w,c
  3900  000598  6E18               	movwf	drawPixel@y,c
  3901  00059A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3902  00059E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3903  0005A2  501C               	movf	drawCircle@x0,w,c
  3904  0005A4  242E               	addwf	drawCircle@y,w,c
  3905  0005A6  ECD0  F00A         	call	_drawPixel
  3906                           
  3907                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3908  0005AA  501E               	movf	drawCircle@y0,w,c
  3909  0005AC  242C               	addwf	drawCircle@x,w,c
  3910  0005AE  6E18               	movwf	drawPixel@y,c
  3911  0005B0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3912  0005B4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3913  0005B8  502E               	movf	drawCircle@y,w,c
  3914  0005BA  0800               	sublw	0
  3915  0005BC  241C               	addwf	drawCircle@x0,w,c
  3916  0005BE  ECD0  F00A         	call	_drawPixel
  3917                           
  3918                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3919  0005C2  502C               	movf	drawCircle@x,w,c
  3920  0005C4  0800               	sublw	0
  3921  0005C6  241E               	addwf	drawCircle@y0,w,c
  3922  0005C8  6E18               	movwf	drawPixel@y,c
  3923  0005CA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3924  0005CE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3925  0005D2  501C               	movf	drawCircle@x0,w,c
  3926  0005D4  242E               	addwf	drawCircle@y,w,c
  3927  0005D6  ECD0  F00A         	call	_drawPixel
  3928                           
  3929                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3930  0005DA  502C               	movf	drawCircle@x,w,c
  3931  0005DC  0800               	sublw	0
  3932  0005DE  241E               	addwf	drawCircle@y0,w,c
  3933  0005E0  6E18               	movwf	drawPixel@y,c
  3934  0005E2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3935  0005E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3936  0005EA  502E               	movf	drawCircle@y,w,c
  3937  0005EC  0800               	sublw	0
  3938  0005EE  241C               	addwf	drawCircle@x0,w,c
  3939  0005F0  ECD0  F00A         	call	_drawPixel
  3940  0005F4  D000               	goto	l3762
  3941  0005F6                     l3762:
  3942  0005F6  502E               	movf	drawCircle@y,w,c
  3943  0005F8  5C2C               	subwf	drawCircle@x,w,c
  3944  0005FA  502D               	movf	drawCircle@x+1,w,c
  3945  0005FC  0A80               	xorlw	128
  3946  0005FE  6E24               	movwf	??_drawCircle& (0+255),c
  3947  000600  502F               	movf	drawCircle@y+1,w,c
  3948  000602  0A80               	xorlw	128
  3949  000604  5824               	subwfb	??_drawCircle& (0+255),w,c
  3950  000606  A0D8               	btfss	status,0,c
  3951  000608  D77E               	goto	l3734
  3952  00060A  0012               	return		;funcret
  3953  00060C                     __end_of_drawCircle:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           intcon	equ	0xFF2
  3962                           intcon2	equ	0xFF1
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postdec1	equ	0xFE5
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           postinc2	equ	0xFDE
  3969                           postdec2	equ	0xFDD
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _Wait_Half_Second *****************
  3975 ;; Defined at:
  3976 ;;		line 316 in file "Lab10_sample_1.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;		None
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;		None
  3981 ;; Return value:  Size  Location     Type
  3982 ;;		None               void
  3983 ;; Registers used:
  3984 ;;		wreg, status,2
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;Total ram usage:        0 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    3
  3997 ;; This function calls:
  3998 ;;		Nothing
  3999 ;; This function is called by:
  4000 ;;		_main
  4001 ;;		_Wait_One_Second
  4002 ;;		_Wait_One_Second_With_Beep
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text11
  4007  001660                     __ptext11:
  4008                           	opt stack 0
  4009  001660                     _Wait_Half_Second:
  4010                           	opt stack 27
  4011                           
  4012                           ;Lab10_sample_1.c: 318: T0CON = 0x03;
  4013                           
  4014                           ;incstack = 0
  4015  001660  0E03               	movlw	3
  4016  001662  6ED5               	movwf	4053,c	;volatile
  4017                           
  4018                           ;Lab10_sample_1.c: 319: TMR0L = 0xDB;
  4019  001664  0EDB               	movlw	219
  4020  001666  6ED6               	movwf	4054,c	;volatile
  4021                           
  4022                           ;Lab10_sample_1.c: 320: TMR0H = 0x0B;
  4023  001668  0E0B               	movlw	11
  4024  00166A  6ED7               	movwf	4055,c	;volatile
  4025                           
  4026                           ;Lab10_sample_1.c: 321: INTCONbits.TMR0IF = 0;
  4027  00166C  94F2               	bcf	intcon,2,c	;volatile
  4028                           
  4029                           ;Lab10_sample_1.c: 322: T0CONbits.TMR0ON = 1;
  4030  00166E  8ED5               	bsf	4053,7,c	;volatile
  4031                           
  4032                           ;Lab10_sample_1.c: 323: while (INTCONbits.TMR0IF == 0);
  4033  001670  D000               	goto	l181
  4034  001672                     l181:
  4035  001672  A4F2               	btfss	intcon,2,c	;volatile
  4036  001674  D7FE               	goto	l181
  4037                           
  4038                           ;Lab10_sample_1.c: 324: T0CONbits.TMR0ON = 0;
  4039  001676  9ED5               	bcf	4053,7,c	;volatile
  4040  001678  0012               	return		;funcret
  4041  00167A                     __end_of_Wait_Half_Second:
  4042                           	opt stack 0
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodh	equ	0xFF4
  4048                           prodl	equ	0xFF3
  4049                           intcon	equ	0xFF2
  4050                           intcon2	equ	0xFF1
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           postdec1	equ	0xFE5
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           fsr2h	equ	0xFDA
  4059                           fsr2l	equ	0xFD9
  4060                           status	equ	0xFD8
  4061                           
  4062 ;; *************** function _Initialize_Screen *****************
  4063 ;; Defined at:
  4064 ;;		line 267 in file "Lab10_sample_1.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;		None
  4069 ;; Return value:  Size  Location     Type
  4070 ;;		None               void
  4071 ;; Registers used:
  4072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;Total ram usage:        0 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:   10
  4085 ;; This function calls:
  4086 ;;		_LCD_Reset
  4087 ;;		_TFT_GreenTab_Initialize
  4088 ;;		_drawtext
  4089 ;;		_fillScreen
  4090 ;;		_strcpy
  4091 ;; This function is called by:
  4092 ;;		_main
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	text12
  4097  000F78                     __ptext12:
  4098                           	opt stack 0
  4099  000F78                     _Initialize_Screen:
  4100                           	opt stack 20
  4101                           
  4102                           ;Lab10_sample_1.c: 269: LCD_Reset();
  4103                           
  4104                           ;incstack = 0
  4105  000F78  EC5C  F00B         	call	_LCD_Reset	;wreg free
  4106                           
  4107                           ;Lab10_sample_1.c: 270: TFT_GreenTab_Initialize();
  4108  000F7C  ECE8  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  4109                           
  4110                           ;Lab10_sample_1.c: 271: fillScreen(0x0000);
  4111  000F80  0E00               	movlw	0
  4112  000F82  6E25               	movwf	fillScreen@color+1,c
  4113  000F84  0E00               	movlw	0
  4114  000F86  6E24               	movwf	fillScreen@color,c
  4115  000F88  EC22  F00B         	call	_fillScreen	;wreg free
  4116                           
  4117                           ;Lab10_sample_1.c: 274: txt = buffer;
  4118  000F8C  0EBF               	movlw	low _buffer
  4119  000F8E  6E67               	movwf	_txt,c
  4120  000F90  0E00               	movlw	high _buffer
  4121  000F92  6E68               	movwf	_txt+1,c
  4122                           
  4123                           ;Lab10_sample_1.c: 275: strcpy(txt, "ECE3301L Sp 22-S1");
  4124  000F94  C067  F011         	movff	_txt,strcpy@to
  4125  000F98  C068  F012         	movff	_txt+1,strcpy@to+1
  4126  000F9C  0ED4               	movlw	low STR_2
  4127  000F9E  6E13               	movwf	strcpy@from,c
  4128  000FA0  0EFF               	movlw	high STR_2
  4129  000FA2  6E14               	movwf	strcpy@from+1,c
  4130  000FA4  ECB7  F00A         	call	_strcpy	;wreg free
  4131                           
  4132                           ;Lab10_sample_1.c: 276: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4133  000FA8  0E02               	movlw	2
  4134  000FAA  6E39               	movwf	drawtext@y,c
  4135  000FAC  C067  F03A         	movff	_txt,drawtext@_text
  4136  000FB0  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4137  000FB4  0EFF               	movlw	255
  4138  000FB6  6E3D               	movwf	drawtext@color+1,c
  4139  000FB8  683C               	setf	drawtext@color,c
  4140  000FBA  0E00               	movlw	0
  4141  000FBC  6E3F               	movwf	drawtext@bg+1,c
  4142  000FBE  0E00               	movlw	0
  4143  000FC0  6E3E               	movwf	drawtext@bg,c
  4144  000FC2  0E01               	movlw	1
  4145  000FC4  6E40               	movwf	drawtext@size,c
  4146  000FC6  0E02               	movlw	2
  4147  000FC8  EC50  F006         	call	_drawtext
  4148                           
  4149                           ;Lab10_sample_1.c: 278: strcpy(txt, "LAB 10 ");
  4150  000FCC  C067  F011         	movff	_txt,strcpy@to
  4151  000FD0  C068  F012         	movff	_txt+1,strcpy@to+1
  4152  000FD4  0EF7               	movlw	low STR_3
  4153  000FD6  6E13               	movwf	strcpy@from,c
  4154  000FD8  0EFF               	movlw	high STR_3
  4155  000FDA  6E14               	movwf	strcpy@from+1,c
  4156  000FDC  ECB7  F00A         	call	_strcpy	;wreg free
  4157                           
  4158                           ;Lab10_sample_1.c: 279: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4159  000FE0  0E0A               	movlw	10
  4160  000FE2  6E39               	movwf	drawtext@y,c
  4161  000FE4  C067  F03A         	movff	_txt,drawtext@_text
  4162  000FE8  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4163  000FEC  0EFF               	movlw	255
  4164  000FEE  6E3D               	movwf	drawtext@color+1,c
  4165  000FF0  683C               	setf	drawtext@color,c
  4166  000FF2  0E00               	movlw	0
  4167  000FF4  6E3F               	movwf	drawtext@bg+1,c
  4168  000FF6  0E00               	movlw	0
  4169  000FF8  6E3E               	movwf	drawtext@bg,c
  4170  000FFA  0E01               	movlw	1
  4171  000FFC  6E40               	movwf	drawtext@size,c
  4172  000FFE  0E32               	movlw	50
  4173  001000  EC50  F006         	call	_drawtext
  4174  001004  0012               	return		;funcret
  4175  001006                     __end_of_Initialize_Screen:
  4176                           	opt stack 0
  4177                           tblptru	equ	0xFF8
  4178                           tblptrh	equ	0xFF7
  4179                           tblptrl	equ	0xFF6
  4180                           tablat	equ	0xFF5
  4181                           prodh	equ	0xFF4
  4182                           prodl	equ	0xFF3
  4183                           intcon	equ	0xFF2
  4184                           intcon2	equ	0xFF1
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postdec1	equ	0xFE5
  4188                           fsr1l	equ	0xFE1
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           postdec2	equ	0xFDD
  4192                           fsr2h	equ	0xFDA
  4193                           fsr2l	equ	0xFD9
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function _strcpy *****************
  4197 ;; Defined at:
  4198 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  to              2   16[COMRAM] PTR unsigned char 
  4201 ;;		 -> NULL(0), buffer(31), 
  4202 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4203 ;;		 -> STR_3(8), STR_2(18), 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4206 ;;		 -> NULL(0), buffer(31), 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  2   16[COMRAM] PTR unsigned char 
  4209 ;; Registers used:
  4210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;Total ram usage:        6 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_Initialize_Screen
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text13
  4231  00156E                     __ptext13:
  4232                           	opt stack 0
  4233  00156E                     _strcpy:
  4234                           	opt stack 26
  4235                           
  4236                           ;incstack = 0
  4237  00156E  C011  F015         	movff	strcpy@to,strcpy@cp
  4238  001572  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4239  001576  D005               	goto	l2668
  4240  001578                     l2666:
  4241  001578  4A15               	infsnz	strcpy@cp,f,c
  4242  00157A  2A16               	incf	strcpy@cp+1,f,c
  4243  00157C  4A13               	infsnz	strcpy@from,f,c
  4244  00157E  2A14               	incf	strcpy@from+1,f,c
  4245  001580  D000               	goto	l2668
  4246  001582                     l2668:
  4247  001582  C013  FFF6         	movff	strcpy@from,tblptrl
  4248  001586  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4249  00158A                     	if	0	;tblptru may be non-zero
  4250  00158A                     	endif
  4251  00158A                     	if	0	;tblptru may be non-zero
  4252  00158A                     	endif
  4253  00158A  C015  FFD9         	movff	strcpy@cp,fsr2l
  4254  00158E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4255  001592  0008               	tblrd		*
  4256  001594  CFF5 FFDF          	movff	tablat,indf2
  4257  001598  50DF               	movf	indf2,w,c
  4258  00159A  A4D8               	btfss	status,2,c
  4259  00159C  D7ED               	goto	l2666
  4260                           
  4261                           ;	Return value of _strcpy is never used
  4262  00159E  0012               	return		;funcret
  4263  0015A0                     __end_of_strcpy:
  4264                           	opt stack 0
  4265                           tblptru	equ	0xFF8
  4266                           tblptrh	equ	0xFF7
  4267                           tblptrl	equ	0xFF6
  4268                           tablat	equ	0xFF5
  4269                           prodh	equ	0xFF4
  4270                           prodl	equ	0xFF3
  4271                           intcon	equ	0xFF2
  4272                           intcon2	equ	0xFF1
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           postdec1	equ	0xFE5
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           postinc2	equ	0xFDE
  4279                           postdec2	equ	0xFDD
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _fillScreen *****************
  4285 ;; Defined at:
  4286 ;;		line 619 in file "ST7735_TFT.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  color           2   35[COMRAM] unsigned int 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;Total ram usage:        2 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    7
  4307 ;; This function calls:
  4308 ;;		_fillRectangle
  4309 ;; This function is called by:
  4310 ;;		_Initialize_Screen
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text14
  4315  001644                     __ptext14:
  4316                           	opt stack 0
  4317  001644                     _fillScreen:
  4318                           	opt stack 22
  4319                           
  4320                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4321                           
  4322                           ;incstack = 0
  4323  001644  0E00               	movlw	0
  4324  001646  6E18               	movwf	fillRectangle@y,c
  4325  001648  0E80               	movlw	128
  4326  00164A  6E19               	movwf	fillRectangle@w,c
  4327  00164C  0EA0               	movlw	160
  4328  00164E  6E1A               	movwf	fillRectangle@h,c
  4329  001650  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4330  001654  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4331  001658  0E00               	movlw	0
  4332  00165A  EC4E  F007         	call	_fillRectangle
  4333  00165E  0012               	return		;funcret
  4334  001660                     __end_of_fillScreen:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           intcon2	equ	0xFF1
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           fsr1l	equ	0xFE1
  4348                           indf2	equ	0xFDF
  4349                           postinc2	equ	0xFDE
  4350                           postdec2	equ	0xFDD
  4351                           fsr2h	equ	0xFDA
  4352                           fsr2l	equ	0xFD9
  4353                           status	equ	0xFD8
  4354                           
  4355 ;; *************** function _fillRectangle *****************
  4356 ;; Defined at:
  4357 ;;		line 503 in file "ST7735_TFT.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;  x               1    wreg     unsigned char 
  4360 ;;  y               1   23[COMRAM] unsigned char 
  4361 ;;  w               1   24[COMRAM] unsigned char 
  4362 ;;  h               1   25[COMRAM] unsigned char 
  4363 ;;  color           2   26[COMRAM] unsigned int 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  x               1   34[COMRAM] unsigned char 
  4366 ;;  lo              1   33[COMRAM] unsigned char 
  4367 ;;  hi              1   32[COMRAM] unsigned char 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;		None               void
  4370 ;; Registers used:
  4371 ;;		wreg, status,2, status,0, cstack
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4377 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;Total ram usage:       12 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; Hardware stack levels required when called:    6
  4384 ;; This function calls:
  4385 ;;		_setAddrWindow
  4386 ;;		_spiwrite
  4387 ;; This function is called by:
  4388 ;;		_fillScreen
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text15
  4393  000E9C                     __ptext15:
  4394                           	opt stack 0
  4395  000E9C                     _fillRectangle:
  4396                           	opt stack 22
  4397                           
  4398                           ;incstack = 0
  4399                           ;fillRectangle@x stored from wreg
  4400  000E9C  6E23               	movwf	fillRectangle@x,c
  4401                           
  4402                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4403                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4404  000E9E  0E80               	movlw	128
  4405  000EA0  6023               	cpfslt	fillRectangle@x,c
  4406  000EA2  D069               	goto	l332
  4407  000EA4  0E9F               	movlw	159
  4408  000EA6  6418               	cpfsgt	fillRectangle@y,c
  4409  000EA8  D001               	goto	l3572
  4410                           
  4411                           ;ST7735_TFT.c: 507: return;
  4412  000EAA  D065               	goto	l332
  4413  000EAC                     l3572:
  4414                           
  4415                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4416  000EAC  0EFF               	movlw	255
  4417  000EAE  6E1D               	movwf	??_fillRectangle& (0+255),c
  4418  000EB0  0EFF               	movlw	255
  4419  000EB2  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4420  000EB4  5019               	movf	fillRectangle@w,w,c
  4421  000EB6  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4422  000EBA  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4423  000EBC  261F               	addwf	??_fillRectangle+2,f,c
  4424  000EBE  0E00               	movlw	0
  4425  000EC0  2220               	addwfc	??_fillRectangle+3,f,c
  4426  000EC2  501D               	movf	??_fillRectangle,w,c
  4427  000EC4  261F               	addwf	??_fillRectangle+2,f,c
  4428  000EC6  501E               	movf	??_fillRectangle+1,w,c
  4429  000EC8  2220               	addwfc	??_fillRectangle+3,f,c
  4430  000ECA  BE20               	btfsc	??_fillRectangle+3,7,c
  4431  000ECC  D00A               	goto	l333
  4432  000ECE  5020               	movf	??_fillRectangle+3,w,c
  4433  000ED0  E104               	bnz	u2640
  4434  000ED2  0E80               	movlw	128
  4435  000ED4  5C1F               	subwf	??_fillRectangle+2,w,c
  4436  000ED6  A0D8               	btfss	status,0,c
  4437  000ED8  D004               	goto	l333
  4438  000EDA                     u2640:
  4439                           
  4440                           ;ST7735_TFT.c: 509: w = 128 - x;
  4441  000EDA  5023               	movf	fillRectangle@x,w,c
  4442  000EDC  0800               	sublw	0
  4443  000EDE  0F80               	addlw	128
  4444  000EE0  6E19               	movwf	fillRectangle@w,c
  4445  000EE2                     l333:
  4446                           
  4447                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4448  000EE2  0EFF               	movlw	255
  4449  000EE4  6E1D               	movwf	??_fillRectangle& (0+255),c
  4450  000EE6  0EFF               	movlw	255
  4451  000EE8  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4452  000EEA  501A               	movf	fillRectangle@h,w,c
  4453  000EEC  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4454  000EF0  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4455  000EF2  261F               	addwf	??_fillRectangle+2,f,c
  4456  000EF4  0E00               	movlw	0
  4457  000EF6  2220               	addwfc	??_fillRectangle+3,f,c
  4458  000EF8  501D               	movf	??_fillRectangle,w,c
  4459  000EFA  261F               	addwf	??_fillRectangle+2,f,c
  4460  000EFC  501E               	movf	??_fillRectangle+1,w,c
  4461  000EFE  2220               	addwfc	??_fillRectangle+3,f,c
  4462  000F00  BE20               	btfsc	??_fillRectangle+3,7,c
  4463  000F02  D00B               	goto	l3578
  4464  000F04  5020               	movf	??_fillRectangle+3,w,c
  4465  000F06  E104               	bnz	u2650
  4466  000F08  0EA0               	movlw	160
  4467  000F0A  5C1F               	subwf	??_fillRectangle+2,w,c
  4468  000F0C  A0D8               	btfss	status,0,c
  4469  000F0E  D005               	goto	l3578
  4470  000F10                     u2650:
  4471                           
  4472                           ;ST7735_TFT.c: 511: h = 160 - y;
  4473  000F10  5018               	movf	fillRectangle@y,w,c
  4474  000F12  0800               	sublw	0
  4475  000F14  0FA0               	addlw	160
  4476  000F16  6E1A               	movwf	fillRectangle@h,c
  4477  000F18  D000               	goto	l3578
  4478  000F1A                     l3578:
  4479                           
  4480                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4481  000F1A  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4482  000F1E  5023               	movf	fillRectangle@x,w,c
  4483  000F20  2419               	addwf	fillRectangle@w,w,c
  4484  000F22  6E1D               	movwf	??_fillRectangle& (0+255),c
  4485  000F24  041D               	decf	??_fillRectangle,w,c
  4486  000F26  6E15               	movwf	setAddrWindow@x1,c
  4487  000F28  5018               	movf	fillRectangle@y,w,c
  4488  000F2A  241A               	addwf	fillRectangle@h,w,c
  4489  000F2C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4490  000F2E  041E               	decf	??_fillRectangle+1,w,c
  4491  000F30  6E16               	movwf	setAddrWindow@y1,c
  4492  000F32  5023               	movf	fillRectangle@x,w,c
  4493  000F34  EC0D  F00A         	call	_setAddrWindow
  4494                           
  4495                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4496  000F38  501C               	movf	fillRectangle@color+1,w,c
  4497  000F3A  6E21               	movwf	fillRectangle@hi,c
  4498  000F3C  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4499                           
  4500                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  4501  000F40  8082               	bsf	3970,0,c	;volatile
  4502                           
  4503                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  4504  000F42  9282               	bcf	3970,1,c	;volatile
  4505                           
  4506                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4507  000F44  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4508  000F48                     l3590:
  4509  000F48  5018               	movf	fillRectangle@y,w,c
  4510  000F4A  B4D8               	btfsc	status,2,c
  4511  000F4C  D013               	goto	l336
  4512  000F4E  D001               	goto	l335
  4513  000F50  D011               	goto	l336
  4514  000F52                     l335:
  4515                           
  4516                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4517  000F52  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4518  000F56                     l3594:
  4519  000F56  5023               	movf	fillRectangle@x,w,c
  4520  000F58  B4D8               	btfsc	status,2,c
  4521  000F5A  D00A               	goto	l3604
  4522  000F5C  D001               	goto	l3598
  4523  000F5E  D008               	goto	l3604
  4524  000F60                     l3598:
  4525                           
  4526                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4527  000F60  5021               	movf	fillRectangle@hi,w,c
  4528  000F62  EC52  F00B         	call	_spiwrite
  4529                           
  4530                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4531  000F66  5022               	movf	fillRectangle@lo,w,c
  4532  000F68  EC52  F00B         	call	_spiwrite
  4533  000F6C  0623               	decf	fillRectangle@x,f,c
  4534  000F6E  D7F3               	goto	l3594
  4535  000F70                     l3604:
  4536  000F70  0618               	decf	fillRectangle@y,f,c
  4537  000F72  D7EA               	goto	l3590
  4538  000F74                     l336:
  4539                           
  4540                           ;ST7735_TFT.c: 521: }
  4541                           ;ST7735_TFT.c: 522: }
  4542                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  4543  000F74  8282               	bsf	3970,1,c	;volatile
  4544  000F76                     l332:
  4545  000F76  0012               	return		;funcret
  4546  000F78                     __end_of_fillRectangle:
  4547                           	opt stack 0
  4548                           tblptru	equ	0xFF8
  4549                           tblptrh	equ	0xFF7
  4550                           tblptrl	equ	0xFF6
  4551                           tablat	equ	0xFF5
  4552                           prodh	equ	0xFF4
  4553                           prodl	equ	0xFF3
  4554                           intcon	equ	0xFF2
  4555                           intcon2	equ	0xFF1
  4556                           postinc0	equ	0xFEE
  4557                           wreg	equ	0xFE8
  4558                           postdec1	equ	0xFE5
  4559                           fsr1l	equ	0xFE1
  4560                           indf2	equ	0xFDF
  4561                           postinc2	equ	0xFDE
  4562                           postdec2	equ	0xFDD
  4563                           fsr2h	equ	0xFDA
  4564                           fsr2l	equ	0xFD9
  4565                           status	equ	0xFD8
  4566                           
  4567 ;; *************** function _drawtext *****************
  4568 ;; Defined at:
  4569 ;;		line 474 in file "ST7735_TFT.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  x               1    wreg     unsigned char 
  4572 ;;  y               1   56[COMRAM] unsigned char 
  4573 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4574 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4575 ;;  color           2   59[COMRAM] unsigned int 
  4576 ;;  bg              2   61[COMRAM] unsigned int 
  4577 ;;  size            1   63[COMRAM] unsigned char 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  x               1    0[BANK0 ] unsigned char 
  4580 ;;  i               2    3[BANK0 ] unsigned int 
  4581 ;;  textsize        2    1[BANK0 ] unsigned int 
  4582 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4583 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;		None               void
  4586 ;; Registers used:
  4587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4593 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;Total ram usage:       17 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    9
  4600 ;; This function calls:
  4601 ;;		_drawChar
  4602 ;;		_strlen
  4603 ;; This function is called by:
  4604 ;;		_main
  4605 ;;		_Initialize_Screen
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text16
  4610  000CA0                     __ptext16:
  4611                           	opt stack 0
  4612  000CA0                     _drawtext:
  4613                           	opt stack 21
  4614                           
  4615                           ;incstack = 0
  4616                           ;drawtext@x stored from wreg
  4617  000CA0  0100               	movlb	0	; () banked
  4618  000CA2  6FDE               	movwf	drawtext@x& (0+255),b
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4622                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4623                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4624  000CA4  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4625                           
  4626                           ; BSR set to: 0
  4627  000CA8  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4631  000CAC  C03A  F011         	movff	drawtext@_text,strlen@s
  4632  000CB0  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4633  000CB4  EC79  F00A         	call	_strlen	;wreg free
  4634  000CB8  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4635  000CBC  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4636                           
  4637                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4638  000CC0  0E00               	movlw	0
  4639  000CC2  0100               	movlb	0	; () banked
  4640  000CC4  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4641  000CC6  0E00               	movlw	0
  4642  000CC8  6FE1               	movwf	drawtext@i& (0+255),b
  4643  000CCA  D064               	goto	l3642
  4644  000CCC                     l3616:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4648  000CCC  505C               	movf	_wrap,w,c
  4649  000CCE  B4D8               	btfsc	status,2,c
  4650  000CD0  D034               	goto	l3632
  4651                           
  4652                           ; BSR set to: 0
  4653  000CD2  5040               	movf	drawtext@size,w,c
  4654  000CD4  0D05               	mullw	5
  4655  000CD6  0100               	movlb	0	; () banked
  4656  000CD8  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4657  000CDA  6E41               	movwf	??_drawtext& (0+255),c
  4658  000CDC  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4659  000CDE  50F3               	movf	prodl,w,c
  4660  000CE0  2641               	addwf	??_drawtext,f,c
  4661  000CE2  50F4               	movf	prodh,w,c
  4662  000CE4  2242               	addwfc	??_drawtext+1,f,c
  4663  000CE6  BE42               	btfsc	??_drawtext+1,7,c
  4664  000CE8  D028               	goto	l3632
  4665  000CEA  5042               	movf	??_drawtext+1,w,c
  4666  000CEC  E104               	bnz	u2710
  4667  000CEE  0E81               	movlw	129
  4668  000CF0  5C41               	subwf	??_drawtext,w,c
  4669  000CF2  A0D8               	btfss	status,0,c
  4670  000CF4  D022               	goto	l3632
  4671  000CF6                     u2710:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4675  000CF6  0E00               	movlw	0
  4676  000CF8  0100               	movlb	0	; () banked
  4677  000CFA  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4681  000CFC  5040               	movf	drawtext@size,w,c
  4682  000CFE  0D07               	mullw	7
  4683  000D00  50F3               	movf	prodl,w,c
  4684  000D02  0100               	movlb	0	; () banked
  4685  000D04  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4686  000D06  0F03               	addlw	3
  4687  000D08  0100               	movlb	0	; () banked
  4688  000D0A  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4692  000D0C  0EA0               	movlw	160
  4693  000D0E  0100               	movlb	0	; () banked
  4694  000D10  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4695  000D12  D004               	goto	l3628
  4696                           
  4697                           ; BSR set to: 0
  4698  000D14  0EA0               	movlw	160
  4699  000D16  0100               	movlb	0	; () banked
  4700  000D18  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4701  000D1A  D000               	goto	l3628
  4702  000D1C                     l3628:
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4706  000D1C  0100               	movlb	0	; () banked
  4707  000D1E  51E1               	movf	drawtext@i& (0+255),w,b
  4708  000D20  243A               	addwf	drawtext@_text,w,c
  4709  000D22  6ED9               	movwf	fsr2l,c
  4710  000D24  0100               	movlb	0	; () banked
  4711  000D26  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4712  000D28  203B               	addwfc	drawtext@_text+1,w,c
  4713  000D2A  6EDA               	movwf	fsr2h,c
  4714  000D2C  0E20               	movlw	32
  4715  000D2E  18DE               	xorwf	postinc2,w,c
  4716  000D30  B4D8               	btfsc	status,2,c
  4717  000D32  D02C               	goto	l3640
  4718  000D34  D002               	goto	l3632
  4719                           
  4720                           ; BSR set to: 0
  4721  000D36  D02A               	goto	l3640
  4722                           
  4723                           ; BSR set to: 0
  4724  000D38  D000               	goto	l3632
  4725  000D3A                     l3632:
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4729  000D3A  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4730  000D3E  0100               	movlb	0	; () banked
  4731  000D40  51E1               	movf	drawtext@i& (0+255),w,b
  4732  000D42  243A               	addwf	drawtext@_text,w,c
  4733  000D44  6ED9               	movwf	fsr2l,c
  4734  000D46  0100               	movlb	0	; () banked
  4735  000D48  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4736  000D4A  203B               	addwfc	drawtext@_text+1,w,c
  4737  000D4C  6EDA               	movwf	fsr2h,c
  4738  000D4E  50DF               	movf	indf2,w,c
  4739  000D50  6E2F               	movwf	drawChar@c,c
  4740  000D52  C03C  F030         	movff	drawtext@color,drawChar@color
  4741  000D56  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4742  000D5A  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4743  000D5E  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4744  000D62  C040  F034         	movff	drawtext@size,drawChar@size
  4745  000D66  0100               	movlb	0	; () banked
  4746  000D68  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4747  000D6A  ECDA  F003         	call	_drawChar
  4748                           
  4749                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4750  000D6E  5040               	movf	drawtext@size,w,c
  4751  000D70  0D06               	mullw	6
  4752  000D72  50F3               	movf	prodl,w,c
  4753  000D74  0100               	movlb	0	; () banked
  4754  000D76  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4755  000D78  0100               	movlb	0	; () banked
  4756  000D7A  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4760  000D7C  0E80               	movlw	128
  4761  000D7E  0100               	movlb	0	; () banked
  4762  000D80  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4763  000D82  D004               	goto	l3640
  4764                           
  4765                           ; BSR set to: 0
  4766  000D84  0E80               	movlw	128
  4767  000D86  0100               	movlb	0	; () banked
  4768  000D88  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4769                           
  4770                           ; BSR set to: 0
  4771  000D8A  D000               	goto	l3640
  4772  000D8C                     l3640:
  4773                           
  4774                           ; BSR set to: 0
  4775  000D8C  0100               	movlb	0	; () banked
  4776  000D8E  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4777  000D90  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4778  000D92  D000               	goto	l3642
  4779  000D94                     l3642:
  4780                           
  4781                           ; BSR set to: 0
  4782  000D94  0100               	movlb	0	; () banked
  4783  000D96  51DF               	movf	drawtext@textsize& (0+255),w,b
  4784  000D98  0100               	movlb	0	; () banked
  4785  000D9A  5DE1               	subwf	drawtext@i& (0+255),w,b
  4786  000D9C  0100               	movlb	0	; () banked
  4787  000D9E  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4788  000DA0  0100               	movlb	0	; () banked
  4789  000DA2  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4790  000DA4  A0D8               	btfss	status,0,c
  4791  000DA6  D792               	goto	l3616
  4792                           
  4793                           ; BSR set to: 0
  4794                           
  4795                           ; BSR set to: 0
  4796  000DA8  0012               	return		;funcret
  4797  000DAA                     __end_of_drawtext:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           prodh	equ	0xFF4
  4804                           prodl	equ	0xFF3
  4805                           intcon	equ	0xFF2
  4806                           intcon2	equ	0xFF1
  4807                           postinc0	equ	0xFEE
  4808                           wreg	equ	0xFE8
  4809                           postdec1	equ	0xFE5
  4810                           fsr1l	equ	0xFE1
  4811                           indf2	equ	0xFDF
  4812                           postinc2	equ	0xFDE
  4813                           postdec2	equ	0xFDD
  4814                           fsr2h	equ	0xFDA
  4815                           fsr2l	equ	0xFD9
  4816                           status	equ	0xFD8
  4817                           
  4818 ;; *************** function _strlen *****************
  4819 ;; Defined at:
  4820 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4823 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4826 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  2   16[COMRAM] unsigned int 
  4829 ;; Registers used:
  4830 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4836 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;Total ram usage:        6 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    3
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_drawtext
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           	psect	text17
  4851  0014F2                     __ptext17:
  4852                           	opt stack 0
  4853  0014F2                     _strlen:
  4854                           	opt stack 26
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;incstack = 0
  4858  0014F2  C011  F015         	movff	strlen@s,strlen@cp
  4859  0014F6  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4860  0014FA  D003               	goto	l3562
  4861  0014FC                     l3560:
  4862  0014FC  4A15               	infsnz	strlen@cp,f,c
  4863  0014FE  2A16               	incf	strlen@cp+1,f,c
  4864  001500  D000               	goto	l3562
  4865  001502                     l3562:
  4866  001502  C015  FFD9         	movff	strlen@cp,fsr2l
  4867  001506  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4868  00150A  50DF               	movf	indf2,w,c
  4869  00150C  A4D8               	btfss	status,2,c
  4870  00150E  D7F6               	goto	l3560
  4871  001510  C011  F013         	movff	strlen@s,??_strlen
  4872  001514  C012  F014         	movff	strlen@s+1,??_strlen+1
  4873  001518  1E13               	comf	??_strlen,f,c
  4874  00151A  1E14               	comf	??_strlen+1,f,c
  4875  00151C  4A13               	infsnz	??_strlen,f,c
  4876  00151E  2A14               	incf	??_strlen+1,f,c
  4877  001520  5015               	movf	strlen@cp,w,c
  4878  001522  2413               	addwf	??_strlen,w,c
  4879  001524  6E11               	movwf	?_strlen,c
  4880  001526  5016               	movf	strlen@cp+1,w,c
  4881  001528  2014               	addwfc	??_strlen+1,w,c
  4882  00152A  6E12               	movwf	?_strlen+1,c
  4883  00152C  D000               	goto	l1066
  4884  00152E                     l1066:
  4885  00152E  0012               	return		;funcret
  4886  001530                     __end_of_strlen:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           intcon	equ	0xFF2
  4895                           intcon2	equ	0xFF1
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _drawChar *****************
  4908 ;; Defined at:
  4909 ;;		line 447 in file "ST7735_TFT.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  x               1    wreg     unsigned char 
  4912 ;;  y               1   45[COMRAM] unsigned char 
  4913 ;;  c               1   46[COMRAM] unsigned char 
  4914 ;;  color           2   47[COMRAM] unsigned int 
  4915 ;;  bg              2   49[COMRAM] unsigned int 
  4916 ;;  size            1   51[COMRAM] unsigned char 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;  x               1   53[COMRAM] unsigned char 
  4919 ;;  line            1   52[COMRAM] unsigned char 
  4920 ;;  i               1   55[COMRAM] unsigned char 
  4921 ;;  j               1   54[COMRAM] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4931 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4935 ;;Total ram usage:       11 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    8
  4938 ;; This function calls:
  4939 ;;		___wmul
  4940 ;;		_drawPixel
  4941 ;;		_fillRect
  4942 ;; This function is called by:
  4943 ;;		_drawtext
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text18
  4948  0007B4                     __ptext18:
  4949                           	opt stack 0
  4950  0007B4                     _drawChar:
  4951                           	opt stack 21
  4952                           
  4953                           ;incstack = 0
  4954                           ;drawChar@x stored from wreg
  4955  0007B4  6E36               	movwf	drawChar@x,c
  4956                           
  4957                           ;ST7735_TFT.c: 449: char i, j;
  4958                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4959  0007B6  0E80               	movlw	128
  4960  0007B8  6036               	cpfslt	drawChar@x,c
  4961  0007BA  D0A6               	goto	l295
  4962  0007BC  0E9F               	movlw	159
  4963  0007BE  642E               	cpfsgt	drawChar@y,c
  4964  0007C0  D001               	goto	l3508
  4965                           
  4966                           ;ST7735_TFT.c: 451: return;
  4967  0007C2  D0A2               	goto	l295
  4968  0007C4                     l3508:
  4969                           
  4970                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4971  0007C4  5034               	movf	drawChar@size,w,c
  4972  0007C6  A4D8               	btfss	status,2,c
  4973  0007C8  D003               	goto	l3512
  4974  0007CA  0E01               	movlw	1
  4975  0007CC  6E34               	movwf	drawChar@size,c
  4976  0007CE  D000               	goto	l3512
  4977  0007D0                     l3512:
  4978                           
  4979                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  4980  0007D0  0E1F               	movlw	31
  4981  0007D2  642F               	cpfsgt	drawChar@c,c
  4982  0007D4  D004               	goto	l3516
  4983  0007D6  0E7E               	movlw	126
  4984  0007D8  642F               	cpfsgt	drawChar@c,c
  4985  0007DA  D003               	goto	l297
  4986  0007DC  D000               	goto	l3516
  4987  0007DE                     l3516:
  4988                           
  4989                           ;ST7735_TFT.c: 454: c = '?';
  4990  0007DE  0E3F               	movlw	63
  4991  0007E0  6E2F               	movwf	drawChar@c,c
  4992  0007E2                     l297:
  4993                           
  4994                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  4995  0007E2  0E00               	movlw	0
  4996  0007E4  6E38               	movwf	drawChar@i,c
  4997  0007E6                     l3518:
  4998  0007E6  0E04               	movlw	4
  4999  0007E8  6438               	cpfsgt	drawChar@i,c
  5000  0007EA  D001               	goto	l3522
  5001  0007EC  D08D               	goto	l295
  5002  0007EE                     l3522:
  5003                           
  5004                           ;ST7735_TFT.c: 456: unsigned char line;
  5005                           ;ST7735_TFT.c: 457: if(c < 'S')
  5006  0007EE  0E53               	movlw	83
  5007  0007F0  602F               	cpfslt	drawChar@c,c
  5008  0007F2  D015               	goto	l3526
  5009                           
  5010                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5011  0007F4  0EE0               	movlw	224
  5012  0007F6  242F               	addwf	drawChar@c,w,c
  5013  0007F8  6E11               	movwf	___wmul@multiplier,c
  5014  0007FA  6A12               	clrf	___wmul@multiplier+1,c
  5015  0007FC  0EFF               	movlw	255
  5016  0007FE  2212               	addwfc	___wmul@multiplier+1,f,c
  5017  000800  0E00               	movlw	0
  5018  000802  6E14               	movwf	___wmul@multiplicand+1,c
  5019  000804  0E05               	movlw	5
  5020  000806  6E13               	movwf	___wmul@multiplicand,c
  5021  000808  ECFD  F00A         	call	___wmul	;wreg free
  5022  00080C  5038               	movf	drawChar@i,w,c
  5023  00080E  2611               	addwf	?___wmul,f,c
  5024  000810  0E00               	movlw	0
  5025  000812  2212               	addwfc	?___wmul+1,f,c
  5026  000814  0E8F               	movlw	low _font
  5027  000816  2411               	addwf	?___wmul,w,c
  5028  000818  6EF6               	movwf	tblptrl,c
  5029  00081A  0EFD               	movlw	high _font
  5030  00081C  D014               	goto	L3
  5031  00081E                     l3526:
  5032                           
  5033                           ;ST7735_TFT.c: 459: else
  5034                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5035  00081E  0EAD               	movlw	173
  5036  000820  242F               	addwf	drawChar@c,w,c
  5037  000822  6E11               	movwf	___wmul@multiplier,c
  5038  000824  6A12               	clrf	___wmul@multiplier+1,c
  5039  000826  0EFF               	movlw	255
  5040  000828  2212               	addwfc	___wmul@multiplier+1,f,c
  5041  00082A  0E00               	movlw	0
  5042  00082C  6E14               	movwf	___wmul@multiplicand+1,c
  5043  00082E  0E05               	movlw	5
  5044  000830  6E13               	movwf	___wmul@multiplicand,c
  5045  000832  ECFD  F00A         	call	___wmul	;wreg free
  5046  000836  5038               	movf	drawChar@i,w,c
  5047  000838  2611               	addwf	?___wmul,f,c
  5048  00083A  0E00               	movlw	0
  5049  00083C  2212               	addwfc	?___wmul+1,f,c
  5050  00083E  0E8E               	movlw	low _font2
  5051  000840  2411               	addwf	?___wmul,w,c
  5052  000842  6EF6               	movwf	tblptrl,c
  5053  000844  0EFE               	movlw	high _font2
  5054  000846                     L3:
  5055  000846  2012               	addwfc	?___wmul+1,w,c
  5056  000848  6EF7               	movwf	tblptrh,c
  5057  00084A                     	if	0	;There are less than 3 active tblptr bytes
  5058  00084A                     	endif
  5059  00084A  0008               	tblrd		*
  5060  00084C  CFF5 F035          	movff	tablat,drawChar@line
  5061  000850  D000               	goto	l3528
  5062  000852                     l3528:
  5063                           
  5064                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5065  000852  0E00               	movlw	0
  5066  000854  6E37               	movwf	drawChar@j,c
  5067  000856                     l3530:
  5068  000856  0E06               	movlw	6
  5069  000858  6437               	cpfsgt	drawChar@j,c
  5070  00085A  D001               	goto	l304
  5071  00085C  D053               	goto	l3554
  5072  00085E                     l304:
  5073                           
  5074                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5075  00085E  A035               	btfss	drawChar@line,0,c
  5076  000860  D023               	goto	l3540
  5077                           
  5078                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5079  000862  0434               	decf	drawChar@size,w,c
  5080  000864  A4D8               	btfss	status,2,c
  5081  000866  D00C               	goto	l3538
  5082  000868  502E               	movf	drawChar@y,w,c
  5083  00086A  2437               	addwf	drawChar@j,w,c
  5084  00086C  6E18               	movwf	drawPixel@y,c
  5085  00086E  C030  F019         	movff	drawChar@color,drawPixel@color
  5086  000872  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5087  000876  5036               	movf	drawChar@x,w,c
  5088  000878  2438               	addwf	drawChar@i,w,c
  5089  00087A  ECD0  F00A         	call	_drawPixel
  5090  00087E  D03E               	goto	l3548
  5091  000880                     l3538:
  5092                           
  5093                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5094  000880  5037               	movf	drawChar@j,w,c
  5095  000882  0234               	mulwf	drawChar@size,c
  5096  000884  50F3               	movf	prodl,w,c
  5097  000886  242E               	addwf	drawChar@y,w,c
  5098  000888  6E23               	movwf	fillRect@y,c
  5099  00088A  C034  F024         	movff	drawChar@size,fillRect@w
  5100  00088E  C034  F025         	movff	drawChar@size,fillRect@h
  5101  000892  C030  F026         	movff	drawChar@color,fillRect@color
  5102  000896  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5103  00089A  5038               	movf	drawChar@i,w,c
  5104  00089C  0234               	mulwf	drawChar@size,c
  5105  00089E  50F3               	movf	prodl,w,c
  5106  0008A0  2436               	addwf	drawChar@x,w,c
  5107  0008A2  EC34  F00A         	call	_fillRect
  5108                           
  5109                           ;ST7735_TFT.c: 465: }
  5110  0008A6  D02A               	goto	l3548
  5111  0008A8                     l3540:
  5112                           
  5113                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5114  0008A8  5030               	movf	drawChar@color,w,c
  5115  0008AA  1832               	xorwf	drawChar@bg,w,c
  5116  0008AC  E104               	bnz	u2570
  5117  0008AE  5031               	movf	drawChar@color+1,w,c
  5118  0008B0  1833               	xorwf	drawChar@bg+1,w,c
  5119  0008B2  B4D8               	btfsc	status,2,c
  5120  0008B4  D023               	goto	l3548
  5121  0008B6                     u2570:
  5122                           
  5123                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5124  0008B6  0434               	decf	drawChar@size,w,c
  5125  0008B8  A4D8               	btfss	status,2,c
  5126  0008BA  D00C               	goto	l3546
  5127  0008BC  502E               	movf	drawChar@y,w,c
  5128  0008BE  2437               	addwf	drawChar@j,w,c
  5129  0008C0  6E18               	movwf	drawPixel@y,c
  5130  0008C2  C032  F019         	movff	drawChar@bg,drawPixel@color
  5131  0008C6  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5132  0008CA  5036               	movf	drawChar@x,w,c
  5133  0008CC  2438               	addwf	drawChar@i,w,c
  5134  0008CE  ECD0  F00A         	call	_drawPixel
  5135  0008D2  D014               	goto	l3548
  5136  0008D4                     l3546:
  5137                           
  5138                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5139  0008D4  5037               	movf	drawChar@j,w,c
  5140  0008D6  0234               	mulwf	drawChar@size,c
  5141  0008D8  50F3               	movf	prodl,w,c
  5142  0008DA  242E               	addwf	drawChar@y,w,c
  5143  0008DC  6E23               	movwf	fillRect@y,c
  5144  0008DE  C034  F024         	movff	drawChar@size,fillRect@w
  5145  0008E2  C034  F025         	movff	drawChar@size,fillRect@h
  5146  0008E6  C032  F026         	movff	drawChar@bg,fillRect@color
  5147  0008EA  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5148  0008EE  5038               	movf	drawChar@i,w,c
  5149  0008F0  0234               	mulwf	drawChar@size,c
  5150  0008F2  50F3               	movf	prodl,w,c
  5151  0008F4  2436               	addwf	drawChar@x,w,c
  5152  0008F6  EC34  F00A         	call	_fillRect
  5153  0008FA  D000               	goto	l3548
  5154  0008FC                     l3548:
  5155  0008FC  2A37               	incf	drawChar@j,f,c
  5156  0008FE  90D8               	bcf	status,0,c
  5157  000900  3235               	rrcf	drawChar@line,f,c
  5158  000902  D7A9               	goto	l3530
  5159  000904                     l3554:
  5160  000904  2A38               	incf	drawChar@i,f,c
  5161  000906  D76F               	goto	l3518
  5162  000908                     l295:
  5163  000908  0012               	return		;funcret
  5164  00090A                     __end_of_drawChar:
  5165                           	opt stack 0
  5166                           tblptru	equ	0xFF8
  5167                           tblptrh	equ	0xFF7
  5168                           tblptrl	equ	0xFF6
  5169                           tablat	equ	0xFF5
  5170                           prodh	equ	0xFF4
  5171                           prodl	equ	0xFF3
  5172                           intcon	equ	0xFF2
  5173                           intcon2	equ	0xFF1
  5174                           postinc0	equ	0xFEE
  5175                           wreg	equ	0xFE8
  5176                           postdec1	equ	0xFE5
  5177                           fsr1l	equ	0xFE1
  5178                           indf2	equ	0xFDF
  5179                           postinc2	equ	0xFDE
  5180                           postdec2	equ	0xFDD
  5181                           fsr2h	equ	0xFDA
  5182                           fsr2l	equ	0xFD9
  5183                           status	equ	0xFD8
  5184                           
  5185 ;; *************** function _fillRect *****************
  5186 ;; Defined at:
  5187 ;;		line 437 in file "ST7735_TFT.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  x               1    wreg     unsigned char 
  5190 ;;  y               1   34[COMRAM] unsigned char 
  5191 ;;  w               1   35[COMRAM] unsigned char 
  5192 ;;  h               1   36[COMRAM] unsigned char 
  5193 ;;  color           2   37[COMRAM] unsigned int 
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  x               1   42[COMRAM] unsigned char 
  5196 ;;  i               2   43[COMRAM] int 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;		None               void
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5206 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;Total ram usage:       11 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    7
  5213 ;; This function calls:
  5214 ;;		_drawFastVLine
  5215 ;; This function is called by:
  5216 ;;		_drawChar
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text19
  5221  001468                     __ptext19:
  5222                           	opt stack 0
  5223  001468                     _fillRect:
  5224                           	opt stack 21
  5225                           
  5226                           ;incstack = 0
  5227                           ;fillRect@x stored from wreg
  5228  001468  6E2B               	movwf	fillRect@x,c
  5229                           
  5230                           ;ST7735_TFT.c: 439: signed int i;
  5231                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5232  00146A  C02B  F02C         	movff	fillRect@x,fillRect@i
  5233  00146E  6A2D               	clrf	fillRect@i+1,c
  5234  001470  D00E               	goto	l3410
  5235  001472                     l3406:
  5236                           
  5237                           ;ST7735_TFT.c: 442: {
  5238                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5239  001472  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5240  001476  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5241  00147A  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5242  00147E  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5243  001482  502C               	movf	fillRect@i,w,c
  5244  001484  EC49  F008         	call	_drawFastVLine
  5245  001488  4A2C               	infsnz	fillRect@i,f,c
  5246  00148A  2A2D               	incf	fillRect@i+1,f,c
  5247  00148C  D000               	goto	l3410
  5248  00148E                     l3410:
  5249  00148E  5024               	movf	fillRect@w,w,c
  5250  001490  C02B  F028         	movff	fillRect@x,??_fillRect
  5251  001494  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5252  001496  2628               	addwf	??_fillRect,f,c
  5253  001498  0E00               	movlw	0
  5254  00149A  2229               	addwfc	??_fillRect+1,f,c
  5255  00149C  5028               	movf	??_fillRect,w,c
  5256  00149E  5C2C               	subwf	fillRect@i,w,c
  5257  0014A0  502D               	movf	fillRect@i+1,w,c
  5258  0014A2  0A80               	xorlw	128
  5259  0014A4  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5260  0014A6  5029               	movf	??_fillRect+1,w,c
  5261  0014A8  0A80               	xorlw	128
  5262  0014AA  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5263  0014AC  A0D8               	btfss	status,0,c
  5264  0014AE  D7E1               	goto	l3406
  5265  0014B0  0012               	return		;funcret
  5266  0014B2                     __end_of_fillRect:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function _drawFastVLine *****************
  5288 ;; Defined at:
  5289 ;;		line 416 in file "ST7735_TFT.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  x               1    wreg     unsigned char 
  5292 ;;  y               1   23[COMRAM] unsigned char 
  5293 ;;  h               1   24[COMRAM] unsigned char 
  5294 ;;  color           2   25[COMRAM] unsigned int 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  x               1   33[COMRAM] unsigned char 
  5297 ;;  lo              1   32[COMRAM] unsigned char 
  5298 ;;  hi              1   31[COMRAM] unsigned char 
  5299 ;; Return value:  Size  Location     Type
  5300 ;;		None               void
  5301 ;; Registers used:
  5302 ;;		wreg, status,2, status,0, cstack
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5308 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;Total ram usage:       11 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    6
  5315 ;; This function calls:
  5316 ;;		_setAddrWindow
  5317 ;;		_spiwrite
  5318 ;; This function is called by:
  5319 ;;		_fillRect
  5320 ;;		_fillCircleHelper
  5321 ;;		_fillCircle
  5322 ;;		_drawRect
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text20
  5327  001092                     __ptext20:
  5328                           	opt stack 0
  5329  001092                     _drawFastVLine:
  5330                           	opt stack 22
  5331                           
  5332                           ;incstack = 0
  5333                           ;drawFastVLine@x stored from wreg
  5334  001092  6E22               	movwf	drawFastVLine@x,c
  5335                           
  5336                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5337                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5338  001094  0E80               	movlw	128
  5339  001096  6022               	cpfslt	drawFastVLine@x,c
  5340  001098  D03F               	goto	l279
  5341  00109A  0E9F               	movlw	159
  5342  00109C  6418               	cpfsgt	drawFastVLine@y,c
  5343  00109E  D001               	goto	l3356
  5344                           
  5345                           ;ST7735_TFT.c: 420: return;
  5346  0010A0  D03B               	goto	l279
  5347  0010A2                     l3356:
  5348                           
  5349                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5350  0010A2  0EFF               	movlw	255
  5351  0010A4  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5352  0010A6  0EFF               	movlw	255
  5353  0010A8  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5354  0010AA  5019               	movf	drawFastVLine@h,w,c
  5355  0010AC  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5356  0010B0  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5357  0010B2  261E               	addwf	??_drawFastVLine+2,f,c
  5358  0010B4  0E00               	movlw	0
  5359  0010B6  221F               	addwfc	??_drawFastVLine+3,f,c
  5360  0010B8  501C               	movf	??_drawFastVLine,w,c
  5361  0010BA  261E               	addwf	??_drawFastVLine+2,f,c
  5362  0010BC  501D               	movf	??_drawFastVLine+1,w,c
  5363  0010BE  221F               	addwfc	??_drawFastVLine+3,f,c
  5364  0010C0  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5365  0010C2  D00B               	goto	l3360
  5366  0010C4  501F               	movf	??_drawFastVLine+3,w,c
  5367  0010C6  E104               	bnz	u2410
  5368  0010C8  0EA0               	movlw	160
  5369  0010CA  5C1E               	subwf	??_drawFastVLine+2,w,c
  5370  0010CC  A0D8               	btfss	status,0,c
  5371  0010CE  D005               	goto	l3360
  5372  0010D0                     u2410:
  5373                           
  5374                           ;ST7735_TFT.c: 422: h = 160 - y;
  5375  0010D0  5018               	movf	drawFastVLine@y,w,c
  5376  0010D2  0800               	sublw	0
  5377  0010D4  0FA0               	addlw	160
  5378  0010D6  6E19               	movwf	drawFastVLine@h,c
  5379  0010D8  D000               	goto	l3360
  5380  0010DA                     l3360:
  5381                           
  5382                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5383  0010DA  501B               	movf	drawFastVLine@color+1,w,c
  5384  0010DC  6E20               	movwf	drawFastVLine@hi,c
  5385  0010DE  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5386                           
  5387                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5388  0010E2  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5389  0010E6  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5390  0010EA  5018               	movf	drawFastVLine@y,w,c
  5391  0010EC  2419               	addwf	drawFastVLine@h,w,c
  5392  0010EE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5393  0010F0  041C               	decf	??_drawFastVLine,w,c
  5394  0010F2  6E16               	movwf	setAddrWindow@y1,c
  5395  0010F4  5022               	movf	drawFastVLine@x,w,c
  5396  0010F6  EC0D  F00A         	call	_setAddrWindow
  5397                           
  5398                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  5399  0010FA  8082               	bsf	3970,0,c	;volatile
  5400                           
  5401                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  5402  0010FC  9282               	bcf	3970,1,c	;volatile
  5403                           
  5404                           ;ST7735_TFT.c: 428: while (h--) {
  5405  0010FE  D007               	goto	l3372
  5406  001100                     l3370:
  5407                           
  5408                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5409  001100  5020               	movf	drawFastVLine@hi,w,c
  5410  001102  EC52  F00B         	call	_spiwrite
  5411                           
  5412                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5413  001106  5021               	movf	drawFastVLine@lo,w,c
  5414  001108  EC52  F00B         	call	_spiwrite
  5415  00110C  D000               	goto	l3372
  5416  00110E                     l3372:
  5417  00110E  0619               	decf	drawFastVLine@h,f,c
  5418  001110  2819               	incf	drawFastVLine@h,w,c
  5419  001112  A4D8               	btfss	status,2,c
  5420  001114  D7F5               	goto	l3370
  5421                           
  5422                           ;ST7735_TFT.c: 431: }
  5423                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  5424  001116  8282               	bsf	3970,1,c	;volatile
  5425  001118                     l279:
  5426  001118  0012               	return		;funcret
  5427  00111A                     __end_of_drawFastVLine:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           intcon	equ	0xFF2
  5436                           intcon2	equ	0xFF1
  5437                           postinc0	equ	0xFEE
  5438                           wreg	equ	0xFE8
  5439                           postdec1	equ	0xFE5
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _drawPixel *****************
  5449 ;; Defined at:
  5450 ;;		line 407 in file "ST7735_TFT.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  x               1    wreg     unsigned char 
  5453 ;;  y               1   23[COMRAM] unsigned char 
  5454 ;;  color           2   24[COMRAM] unsigned int 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  x               1   26[COMRAM] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:        4 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    6
  5473 ;; This function calls:
  5474 ;;		_setAddrWindow
  5475 ;;		_write_data
  5476 ;; This function is called by:
  5477 ;;		_drawChar
  5478 ;;		_drawCircle
  5479 ;;		_drawCircleHelper
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text21
  5484  0015A0                     __ptext21:
  5485                           	opt stack 0
  5486  0015A0                     _drawPixel:
  5487                           	opt stack 22
  5488                           
  5489                           ;incstack = 0
  5490                           ;drawPixel@x stored from wreg
  5491  0015A0  6E1B               	movwf	drawPixel@x,c
  5492                           
  5493                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5494  0015A2  0E80               	movlw	128
  5495  0015A4  601B               	cpfslt	drawPixel@x,c
  5496  0015A6  D013               	goto	l273
  5497  0015A8  0E9F               	movlw	159
  5498  0015AA  6418               	cpfsgt	drawPixel@y,c
  5499  0015AC  D001               	goto	l3398
  5500                           
  5501                           ;ST7735_TFT.c: 410: return;
  5502  0015AE  D00F               	goto	l273
  5503  0015B0                     l3398:
  5504                           
  5505                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5506  0015B0  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5507  0015B4  281B               	incf	drawPixel@x,w,c
  5508  0015B6  6E15               	movwf	setAddrWindow@x1,c
  5509  0015B8  2818               	incf	drawPixel@y,w,c
  5510  0015BA  6E16               	movwf	setAddrWindow@y1,c
  5511  0015BC  501B               	movf	drawPixel@x,w,c
  5512  0015BE  EC0D  F00A         	call	_setAddrWindow
  5513                           
  5514                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5515  0015C2  501A               	movf	drawPixel@color+1,w,c
  5516  0015C4  EC65  F00B         	call	_write_data
  5517                           
  5518                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5519  0015C8  5019               	movf	drawPixel@color,w,c
  5520  0015CA  EC65  F00B         	call	_write_data
  5521  0015CE                     l273:
  5522  0015CE  0012               	return		;funcret
  5523  0015D0                     __end_of_drawPixel:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           intcon	equ	0xFF2
  5532                           intcon2	equ	0xFF1
  5533                           postinc0	equ	0xFEE
  5534                           wreg	equ	0xFE8
  5535                           postdec1	equ	0xFE5
  5536                           fsr1l	equ	0xFE1
  5537                           indf2	equ	0xFDF
  5538                           postinc2	equ	0xFDE
  5539                           postdec2	equ	0xFDD
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function _setAddrWindow *****************
  5545 ;; Defined at:
  5546 ;;		line 392 in file "ST7735_TFT.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  x0              1    wreg     unsigned char 
  5549 ;;  y0              1   19[COMRAM] unsigned char 
  5550 ;;  x1              1   20[COMRAM] unsigned char 
  5551 ;;  y1              1   21[COMRAM] unsigned char 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  x0              1   22[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;		None               void
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0, cstack
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5563 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;Total ram usage:        4 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    5
  5570 ;; This function calls:
  5571 ;;		_write_command
  5572 ;;		_write_data
  5573 ;; This function is called by:
  5574 ;;		_drawPixel
  5575 ;;		_drawFastVLine
  5576 ;;		_fillRectangle
  5577 ;;		_drawFastHLine
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text22
  5582  00141A                     __ptext22:
  5583                           	opt stack 0
  5584  00141A                     _setAddrWindow:
  5585                           	opt stack 22
  5586                           
  5587                           ;incstack = 0
  5588                           ;setAddrWindow@x0 stored from wreg
  5589  00141A  6E17               	movwf	setAddrWindow@x0,c
  5590                           
  5591                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5592  00141C  0E2A               	movlw	42
  5593  00141E  EC6D  F00B         	call	_write_command
  5594                           
  5595                           ;ST7735_TFT.c: 395: write_data(0);
  5596  001422  0E00               	movlw	0
  5597  001424  EC65  F00B         	call	_write_data
  5598                           
  5599                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5600  001428  5017               	movf	setAddrWindow@x0,w,c
  5601  00142A  246D               	addwf	_colstart,w,c
  5602  00142C  EC65  F00B         	call	_write_data
  5603                           
  5604                           ;ST7735_TFT.c: 397: write_data(0);
  5605  001430  0E00               	movlw	0
  5606  001432  EC65  F00B         	call	_write_data
  5607                           
  5608                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5609  001436  5015               	movf	setAddrWindow@x1,w,c
  5610  001438  246D               	addwf	_colstart,w,c
  5611  00143A  EC65  F00B         	call	_write_data
  5612                           
  5613                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5614  00143E  0E2B               	movlw	43
  5615  001440  EC6D  F00B         	call	_write_command
  5616                           
  5617                           ;ST7735_TFT.c: 400: write_data(0);
  5618  001444  0E00               	movlw	0
  5619  001446  EC65  F00B         	call	_write_data
  5620                           
  5621                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5622  00144A  5014               	movf	setAddrWindow@y0,w,c
  5623  00144C  246F               	addwf	_rowstart,w,c
  5624  00144E  EC65  F00B         	call	_write_data
  5625                           
  5626                           ;ST7735_TFT.c: 402: write_data(0);
  5627  001452  0E00               	movlw	0
  5628  001454  EC65  F00B         	call	_write_data
  5629                           
  5630                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5631  001458  5016               	movf	setAddrWindow@y1,w,c
  5632  00145A  246F               	addwf	_rowstart,w,c
  5633  00145C  EC65  F00B         	call	_write_data
  5634                           
  5635                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5636  001460  0E2C               	movlw	44
  5637  001462  EC6D  F00B         	call	_write_command
  5638  001466  0012               	return		;funcret
  5639  001468                     __end_of_setAddrWindow:
  5640                           	opt stack 0
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           intcon2	equ	0xFF1
  5649                           postinc0	equ	0xFEE
  5650                           wreg	equ	0xFE8
  5651                           postdec1	equ	0xFE5
  5652                           fsr1l	equ	0xFE1
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function _TFT_GreenTab_Initialize *****************
  5661 ;; Defined at:
  5662 ;;		line 644 in file "ST7735_TFT.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;		None
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;		None
  5667 ;; Return value:  Size  Location     Type
  5668 ;;		None               void
  5669 ;; Registers used:
  5670 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;Total ram usage:        0 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    6
  5683 ;; This function calls:
  5684 ;;		_Rcmd1
  5685 ;;		_Rcmd2red
  5686 ;;		_Rcmd3
  5687 ;;		_write_command
  5688 ;;		_write_data
  5689 ;; This function is called by:
  5690 ;;		_Initialize_Screen
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text23
  5695  0015D0                     __ptext23:
  5696                           	opt stack 0
  5697  0015D0                     _TFT_GreenTab_Initialize:
  5698                           	opt stack 23
  5699                           
  5700                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  5701                           
  5702                           ;incstack = 0
  5703  0015D0  8282               	bsf	3970,1,c	;volatile
  5704                           
  5705                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  5706  0015D2  9082               	bcf	3970,0,c	;volatile
  5707                           
  5708                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5709  0015D4  0E80               	movlw	128
  5710  0015D6  6EC7               	movwf	4039,c	;volatile
  5711                           
  5712                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5713  0015D8  0E30               	movlw	48
  5714  0015DA  6EC6               	movwf	4038,c	;volatile
  5715                           
  5716                           ;ST7735_TFT.c: 653: Rcmd1();
  5717  0015DC  ECC8  F005         	call	_Rcmd1	;wreg free
  5718                           
  5719                           ;ST7735_TFT.c: 654: Rcmd2red();
  5720  0015E0  EC98  F00A         	call	_Rcmd2red	;wreg free
  5721                           
  5722                           ;ST7735_TFT.c: 655: Rcmd3();
  5723  0015E4  ECD5  F006         	call	_Rcmd3	;wreg free
  5724                           
  5725                           ;ST7735_TFT.c: 656: write_command(0x36);
  5726  0015E8  0E36               	movlw	54
  5727  0015EA  EC6D  F00B         	call	_write_command
  5728                           
  5729                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5730  0015EE  0EC0               	movlw	192
  5731  0015F0  EC65  F00B         	call	_write_data
  5732                           
  5733                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5734  0015F4  0E01               	movlw	1
  5735  0015F6  6E6B               	movwf	__tft_type,c
  5736  0015F8  0012               	return		;funcret
  5737  0015FA                     __end_of_TFT_GreenTab_Initialize:
  5738                           	opt stack 0
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           intcon	equ	0xFF2
  5746                           intcon2	equ	0xFF1
  5747                           postinc0	equ	0xFEE
  5748                           wreg	equ	0xFE8
  5749                           postdec1	equ	0xFE5
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           postinc2	equ	0xFDE
  5753                           postdec2	equ	0xFDD
  5754                           fsr2h	equ	0xFDA
  5755                           fsr2l	equ	0xFD9
  5756                           status	equ	0xFD8
  5757                           
  5758 ;; *************** function _Rcmd3 *****************
  5759 ;; Defined at:
  5760 ;;		line 338 in file "ST7735_TFT.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;		None
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;		None
  5765 ;; Return value:  Size  Location     Type
  5766 ;;		None               void
  5767 ;; Registers used:
  5768 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5769 ;; Tracked objects:
  5770 ;;		On entry : 0/0
  5771 ;;		On exit  : 0/0
  5772 ;;		Unchanged: 0/0
  5773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;Total ram usage:        0 bytes
  5779 ;; Hardware stack levels used:    1
  5780 ;; Hardware stack levels required when called:    5
  5781 ;; This function calls:
  5782 ;;		_delay_ms
  5783 ;;		_write_command
  5784 ;;		_write_data
  5785 ;; This function is called by:
  5786 ;;		_TFT_GreenTab_Initialize
  5787 ;;		_TFT_BlackTab_Initialize
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text24
  5792  000DAA                     __ptext24:
  5793                           	opt stack 0
  5794  000DAA                     _Rcmd3:
  5795                           	opt stack 23
  5796                           
  5797                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5798                           
  5799                           ;incstack = 0
  5800  000DAA  0EE0               	movlw	224
  5801  000DAC  EC6D  F00B         	call	_write_command
  5802                           
  5803                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5804  000DB0  0E02               	movlw	2
  5805  000DB2  EC65  F00B         	call	_write_data
  5806  000DB6  0E1C               	movlw	28
  5807  000DB8  EC65  F00B         	call	_write_data
  5808  000DBC  0E07               	movlw	7
  5809  000DBE  EC65  F00B         	call	_write_data
  5810  000DC2  0E12               	movlw	18
  5811  000DC4  EC65  F00B         	call	_write_data
  5812                           
  5813                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5814  000DC8  0E37               	movlw	55
  5815  000DCA  EC65  F00B         	call	_write_data
  5816  000DCE  0E32               	movlw	50
  5817  000DD0  EC65  F00B         	call	_write_data
  5818  000DD4  0E29               	movlw	41
  5819  000DD6  EC65  F00B         	call	_write_data
  5820  000DDA  0E2D               	movlw	45
  5821  000DDC  EC65  F00B         	call	_write_data
  5822                           
  5823                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5824  000DE0  0E29               	movlw	41
  5825  000DE2  EC65  F00B         	call	_write_data
  5826  000DE6  0E25               	movlw	37
  5827  000DE8  EC65  F00B         	call	_write_data
  5828  000DEC  0E2B               	movlw	43
  5829  000DEE  EC65  F00B         	call	_write_data
  5830  000DF2  0E39               	movlw	57
  5831  000DF4  EC65  F00B         	call	_write_data
  5832                           
  5833                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5834  000DF8  0E00               	movlw	0
  5835  000DFA  EC65  F00B         	call	_write_data
  5836  000DFE  0E01               	movlw	1
  5837  000E00  EC65  F00B         	call	_write_data
  5838  000E04  0E03               	movlw	3
  5839  000E06  EC65  F00B         	call	_write_data
  5840  000E0A  0E10               	movlw	16
  5841  000E0C  EC65  F00B         	call	_write_data
  5842                           
  5843                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5844  000E10  0EE1               	movlw	225
  5845  000E12  EC6D  F00B         	call	_write_command
  5846                           
  5847                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5848  000E16  0E03               	movlw	3
  5849  000E18  EC65  F00B         	call	_write_data
  5850  000E1C  0E1D               	movlw	29
  5851  000E1E  EC65  F00B         	call	_write_data
  5852  000E22  0E07               	movlw	7
  5853  000E24  EC65  F00B         	call	_write_data
  5854  000E28  0E06               	movlw	6
  5855  000E2A  EC65  F00B         	call	_write_data
  5856                           
  5857                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5858  000E2E  0E2E               	movlw	46
  5859  000E30  EC65  F00B         	call	_write_data
  5860  000E34  0E2C               	movlw	44
  5861  000E36  EC65  F00B         	call	_write_data
  5862  000E3A  0E29               	movlw	41
  5863  000E3C  EC65  F00B         	call	_write_data
  5864  000E40  0E2D               	movlw	45
  5865  000E42  EC65  F00B         	call	_write_data
  5866                           
  5867                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5868  000E46  0E2E               	movlw	46
  5869  000E48  EC65  F00B         	call	_write_data
  5870  000E4C  0E2E               	movlw	46
  5871  000E4E  EC65  F00B         	call	_write_data
  5872  000E52  0E37               	movlw	55
  5873  000E54  EC65  F00B         	call	_write_data
  5874  000E58  0E3F               	movlw	63
  5875  000E5A  EC65  F00B         	call	_write_data
  5876                           
  5877                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5878  000E5E  0E00               	movlw	0
  5879  000E60  EC65  F00B         	call	_write_data
  5880  000E64  0E00               	movlw	0
  5881  000E66  EC65  F00B         	call	_write_data
  5882  000E6A  0E02               	movlw	2
  5883  000E6C  EC65  F00B         	call	_write_data
  5884  000E70  0E10               	movlw	16
  5885  000E72  EC65  F00B         	call	_write_data
  5886                           
  5887                           ;ST7735_TFT.c: 350: write_command(0x13);
  5888  000E76  0E13               	movlw	19
  5889  000E78  EC6D  F00B         	call	_write_command
  5890                           
  5891                           ;ST7735_TFT.c: 351: delay_ms(10);
  5892  000E7C  0E00               	movlw	0
  5893  000E7E  6E18               	movwf	delay_ms@ms+1,c
  5894  000E80  0E0A               	movlw	10
  5895  000E82  6E17               	movwf	delay_ms@ms,c
  5896  000E84  ECE4  F009         	call	_delay_ms	;wreg free
  5897                           
  5898                           ;ST7735_TFT.c: 352: write_command(0x29);
  5899  000E88  0E29               	movlw	41
  5900  000E8A  EC6D  F00B         	call	_write_command
  5901                           
  5902                           ;ST7735_TFT.c: 353: delay_ms(100);
  5903  000E8E  0E00               	movlw	0
  5904  000E90  6E18               	movwf	delay_ms@ms+1,c
  5905  000E92  0E64               	movlw	100
  5906  000E94  6E17               	movwf	delay_ms@ms,c
  5907  000E96  ECE4  F009         	call	_delay_ms	;wreg free
  5908  000E9A  0012               	return		;funcret
  5909  000E9C                     __end_of_Rcmd3:
  5910                           	opt stack 0
  5911                           tblptru	equ	0xFF8
  5912                           tblptrh	equ	0xFF7
  5913                           tblptrl	equ	0xFF6
  5914                           tablat	equ	0xFF5
  5915                           prodh	equ	0xFF4
  5916                           prodl	equ	0xFF3
  5917                           intcon	equ	0xFF2
  5918                           intcon2	equ	0xFF1
  5919                           postinc0	equ	0xFEE
  5920                           wreg	equ	0xFE8
  5921                           postdec1	equ	0xFE5
  5922                           fsr1l	equ	0xFE1
  5923                           indf2	equ	0xFDF
  5924                           postinc2	equ	0xFDE
  5925                           postdec2	equ	0xFDD
  5926                           fsr2h	equ	0xFDA
  5927                           fsr2l	equ	0xFD9
  5928                           status	equ	0xFD8
  5929                           
  5930 ;; *************** function _Rcmd2red *****************
  5931 ;; Defined at:
  5932 ;;		line 328 in file "ST7735_TFT.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;		None
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;		None
  5937 ;; Return value:  Size  Location     Type
  5938 ;;		None               void
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, cstack
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;Total ram usage:        0 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    5
  5953 ;; This function calls:
  5954 ;;		_write_command
  5955 ;;		_write_data
  5956 ;; This function is called by:
  5957 ;;		_TFT_GreenTab_Initialize
  5958 ;; This function uses a non-reentrant model
  5959 ;;
  5960                           
  5961                           	psect	text25
  5962  001530                     __ptext25:
  5963                           	opt stack 0
  5964  001530                     _Rcmd2red:
  5965                           	opt stack 23
  5966                           
  5967                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5968                           
  5969                           ;incstack = 0
  5970  001530  0E2A               	movlw	42
  5971  001532  EC6D  F00B         	call	_write_command
  5972                           
  5973                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5974  001536  0E00               	movlw	0
  5975  001538  EC65  F00B         	call	_write_data
  5976  00153C  0E00               	movlw	0
  5977  00153E  EC65  F00B         	call	_write_data
  5978                           
  5979                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  5980  001542  0E00               	movlw	0
  5981  001544  EC65  F00B         	call	_write_data
  5982  001548  0E7F               	movlw	127
  5983  00154A  EC65  F00B         	call	_write_data
  5984                           
  5985                           ;ST7735_TFT.c: 333: write_command(0x2B);
  5986  00154E  0E2B               	movlw	43
  5987  001550  EC6D  F00B         	call	_write_command
  5988                           
  5989                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  5990  001554  0E00               	movlw	0
  5991  001556  EC65  F00B         	call	_write_data
  5992  00155A  0E00               	movlw	0
  5993  00155C  EC65  F00B         	call	_write_data
  5994                           
  5995                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  5996  001560  0E00               	movlw	0
  5997  001562  EC65  F00B         	call	_write_data
  5998  001566  0E9F               	movlw	159
  5999  001568  EC65  F00B         	call	_write_data
  6000  00156C  0012               	return		;funcret
  6001  00156E                     __end_of_Rcmd2red:
  6002                           	opt stack 0
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           intcon	equ	0xFF2
  6010                           intcon2	equ	0xFF1
  6011                           postinc0	equ	0xFEE
  6012                           wreg	equ	0xFE8
  6013                           postdec1	equ	0xFE5
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           fsr2h	equ	0xFDA
  6019                           fsr2l	equ	0xFD9
  6020                           status	equ	0xFD8
  6021                           
  6022 ;; *************** function _Rcmd1 *****************
  6023 ;; Defined at:
  6024 ;;		line 281 in file "ST7735_TFT.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;		None
  6029 ;; Return value:  Size  Location     Type
  6030 ;;		None               void
  6031 ;; Registers used:
  6032 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;Total ram usage:        0 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    5
  6045 ;; This function calls:
  6046 ;;		_delay_ms
  6047 ;;		_write_command
  6048 ;;		_write_data
  6049 ;; This function is called by:
  6050 ;;		_TFT_GreenTab_Initialize
  6051 ;;		_TFT_BlackTab_Initialize
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           	psect	text26
  6056  000B90                     __ptext26:
  6057                           	opt stack 0
  6058  000B90                     _Rcmd1:
  6059                           	opt stack 23
  6060                           
  6061                           ;ST7735_TFT.c: 283: write_command(0x01);
  6062                           
  6063                           ;incstack = 0
  6064  000B90  0E01               	movlw	1
  6065  000B92  EC6D  F00B         	call	_write_command
  6066                           
  6067                           ;ST7735_TFT.c: 284: delay_ms(150);
  6068  000B96  0E00               	movlw	0
  6069  000B98  6E18               	movwf	delay_ms@ms+1,c
  6070  000B9A  0E96               	movlw	150
  6071  000B9C  6E17               	movwf	delay_ms@ms,c
  6072  000B9E  ECE4  F009         	call	_delay_ms	;wreg free
  6073                           
  6074                           ;ST7735_TFT.c: 285: write_command(0x11);
  6075  000BA2  0E11               	movlw	17
  6076  000BA4  EC6D  F00B         	call	_write_command
  6077                           
  6078                           ;ST7735_TFT.c: 286: delay_ms(500);
  6079  000BA8  0E01               	movlw	1
  6080  000BAA  6E18               	movwf	delay_ms@ms+1,c
  6081  000BAC  0EF4               	movlw	244
  6082  000BAE  6E17               	movwf	delay_ms@ms,c
  6083  000BB0  ECE4  F009         	call	_delay_ms	;wreg free
  6084                           
  6085                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6086  000BB4  0EB1               	movlw	177
  6087  000BB6  EC6D  F00B         	call	_write_command
  6088                           
  6089                           ;ST7735_TFT.c: 288: write_data(0x01);
  6090  000BBA  0E01               	movlw	1
  6091  000BBC  EC65  F00B         	call	_write_data
  6092                           
  6093                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6094  000BC0  0E2C               	movlw	44
  6095  000BC2  EC65  F00B         	call	_write_data
  6096                           
  6097                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6098  000BC6  0E2D               	movlw	45
  6099  000BC8  EC65  F00B         	call	_write_data
  6100                           
  6101                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6102  000BCC  0EB2               	movlw	178
  6103  000BCE  EC6D  F00B         	call	_write_command
  6104                           
  6105                           ;ST7735_TFT.c: 292: write_data(0x01);
  6106  000BD2  0E01               	movlw	1
  6107  000BD4  EC65  F00B         	call	_write_data
  6108                           
  6109                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6110  000BD8  0E2C               	movlw	44
  6111  000BDA  EC65  F00B         	call	_write_data
  6112                           
  6113                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6114  000BDE  0E2D               	movlw	45
  6115  000BE0  EC65  F00B         	call	_write_data
  6116                           
  6117                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6118  000BE4  0EB3               	movlw	179
  6119  000BE6  EC6D  F00B         	call	_write_command
  6120                           
  6121                           ;ST7735_TFT.c: 296: write_data(0x01);
  6122  000BEA  0E01               	movlw	1
  6123  000BEC  EC65  F00B         	call	_write_data
  6124                           
  6125                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6126  000BF0  0E2C               	movlw	44
  6127  000BF2  EC65  F00B         	call	_write_data
  6128                           
  6129                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6130  000BF6  0E2D               	movlw	45
  6131  000BF8  EC65  F00B         	call	_write_data
  6132                           
  6133                           ;ST7735_TFT.c: 299: write_data(0x01);
  6134  000BFC  0E01               	movlw	1
  6135  000BFE  EC65  F00B         	call	_write_data
  6136                           
  6137                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6138  000C02  0E2C               	movlw	44
  6139  000C04  EC65  F00B         	call	_write_data
  6140                           
  6141                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6142  000C08  0E2D               	movlw	45
  6143  000C0A  EC65  F00B         	call	_write_data
  6144                           
  6145                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6146  000C0E  0EB4               	movlw	180
  6147  000C10  EC6D  F00B         	call	_write_command
  6148                           
  6149                           ;ST7735_TFT.c: 303: write_data(0x07);
  6150  000C14  0E07               	movlw	7
  6151  000C16  EC65  F00B         	call	_write_data
  6152                           
  6153                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6154  000C1A  0EC0               	movlw	192
  6155  000C1C  EC6D  F00B         	call	_write_command
  6156                           
  6157                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6158  000C20  0EA2               	movlw	162
  6159  000C22  EC65  F00B         	call	_write_data
  6160                           
  6161                           ;ST7735_TFT.c: 306: write_data(0x02);
  6162  000C26  0E02               	movlw	2
  6163  000C28  EC65  F00B         	call	_write_data
  6164                           
  6165                           ;ST7735_TFT.c: 307: write_data(0x84);
  6166  000C2C  0E84               	movlw	132
  6167  000C2E  EC65  F00B         	call	_write_data
  6168                           
  6169                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6170  000C32  0EC1               	movlw	193
  6171  000C34  EC6D  F00B         	call	_write_command
  6172                           
  6173                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6174  000C38  0EC5               	movlw	197
  6175  000C3A  EC65  F00B         	call	_write_data
  6176                           
  6177                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6178  000C3E  0EC2               	movlw	194
  6179  000C40  EC6D  F00B         	call	_write_command
  6180                           
  6181                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6182  000C44  0E0A               	movlw	10
  6183  000C46  EC65  F00B         	call	_write_data
  6184                           
  6185                           ;ST7735_TFT.c: 312: write_data(0x00);
  6186  000C4A  0E00               	movlw	0
  6187  000C4C  EC65  F00B         	call	_write_data
  6188                           
  6189                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6190  000C50  0EC3               	movlw	195
  6191  000C52  EC6D  F00B         	call	_write_command
  6192                           
  6193                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6194  000C56  0E8A               	movlw	138
  6195  000C58  EC65  F00B         	call	_write_data
  6196                           
  6197                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6198  000C5C  0E2A               	movlw	42
  6199  000C5E  EC65  F00B         	call	_write_data
  6200                           
  6201                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6202  000C62  0EC4               	movlw	196
  6203  000C64  EC6D  F00B         	call	_write_command
  6204                           
  6205                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6206  000C68  0E8A               	movlw	138
  6207  000C6A  EC65  F00B         	call	_write_data
  6208                           
  6209                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6210  000C6E  0EEE               	movlw	238
  6211  000C70  EC65  F00B         	call	_write_data
  6212                           
  6213                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6214  000C74  0EC5               	movlw	197
  6215  000C76  EC6D  F00B         	call	_write_command
  6216                           
  6217                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6218  000C7A  0E0E               	movlw	14
  6219  000C7C  EC65  F00B         	call	_write_data
  6220                           
  6221                           ;ST7735_TFT.c: 321: write_command(0x20);
  6222  000C80  0E20               	movlw	32
  6223  000C82  EC6D  F00B         	call	_write_command
  6224                           
  6225                           ;ST7735_TFT.c: 322: write_command(0x36);
  6226  000C86  0E36               	movlw	54
  6227  000C88  EC6D  F00B         	call	_write_command
  6228                           
  6229                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6230  000C8C  0EC8               	movlw	200
  6231  000C8E  EC65  F00B         	call	_write_data
  6232                           
  6233                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6234  000C92  0E3A               	movlw	58
  6235  000C94  EC6D  F00B         	call	_write_command
  6236                           
  6237                           ;ST7735_TFT.c: 325: write_data(0x05);
  6238  000C98  0E05               	movlw	5
  6239  000C9A  EC65  F00B         	call	_write_data
  6240  000C9E  0012               	return		;funcret
  6241  000CA0                     __end_of_Rcmd1:
  6242                           	opt stack 0
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           intcon	equ	0xFF2
  6250                           intcon2	equ	0xFF1
  6251                           postinc0	equ	0xFEE
  6252                           wreg	equ	0xFE8
  6253                           postdec1	equ	0xFE5
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _write_data *****************
  6263 ;; Defined at:
  6264 ;;		line 209 in file "ST7735_TFT.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  data_           1    wreg     unsigned char 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;  data_           1   18[COMRAM] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;		None               void
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6279 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;Total ram usage:        1 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    4
  6285 ;; This function calls:
  6286 ;;		_spiwrite
  6287 ;; This function is called by:
  6288 ;;		_Rcmd1
  6289 ;;		_Rcmd2red
  6290 ;;		_Rcmd3
  6291 ;;		_setAddrWindow
  6292 ;;		_drawPixel
  6293 ;;		_TFT_GreenTab_Initialize
  6294 ;;		_Bcmd
  6295 ;;		_setScrollDefinition
  6296 ;;		_Rcmd2green
  6297 ;;		_VerticalScroll
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           	psect	text27
  6302  0016CA                     __ptext27:
  6303                           	opt stack 0
  6304  0016CA                     _write_data:
  6305                           	opt stack 22
  6306                           
  6307                           ;incstack = 0
  6308                           ;write_data@data_ stored from wreg
  6309  0016CA  6E13               	movwf	write_data@data_,c
  6310                           
  6311                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  6312  0016CC  9282               	bcf	3970,1,c	;volatile
  6313                           
  6314                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  6315  0016CE  8082               	bsf	3970,0,c	;volatile
  6316                           
  6317                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6318  0016D0  5013               	movf	write_data@data_,w,c
  6319  0016D2  EC52  F00B         	call	_spiwrite
  6320                           
  6321                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  6322  0016D6  8282               	bsf	3970,1,c	;volatile
  6323  0016D8  0012               	return		;funcret
  6324  0016DA                     __end_of_write_data:
  6325                           	opt stack 0
  6326                           tblptru	equ	0xFF8
  6327                           tblptrh	equ	0xFF7
  6328                           tblptrl	equ	0xFF6
  6329                           tablat	equ	0xFF5
  6330                           prodh	equ	0xFF4
  6331                           prodl	equ	0xFF3
  6332                           intcon	equ	0xFF2
  6333                           intcon2	equ	0xFF1
  6334                           postinc0	equ	0xFEE
  6335                           wreg	equ	0xFE8
  6336                           postdec1	equ	0xFE5
  6337                           fsr1l	equ	0xFE1
  6338                           indf2	equ	0xFDF
  6339                           postinc2	equ	0xFDE
  6340                           postdec2	equ	0xFDD
  6341                           fsr2h	equ	0xFDA
  6342                           fsr2l	equ	0xFD9
  6343                           status	equ	0xFD8
  6344                           
  6345 ;; *************** function _write_command *****************
  6346 ;; Defined at:
  6347 ;;		line 198 in file "ST7735_TFT.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  cmd_            1    wreg     unsigned char 
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  cmd_            1   18[COMRAM] unsigned char 
  6352 ;; Return value:  Size  Location     Type
  6353 ;;		None               void
  6354 ;; Registers used:
  6355 ;;		wreg, status,2, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;Total ram usage:        1 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    4
  6368 ;; This function calls:
  6369 ;;		_spiwrite
  6370 ;; This function is called by:
  6371 ;;		_Rcmd1
  6372 ;;		_Rcmd2red
  6373 ;;		_Rcmd3
  6374 ;;		_setAddrWindow
  6375 ;;		_TFT_GreenTab_Initialize
  6376 ;;		_Bcmd
  6377 ;;		_setScrollDefinition
  6378 ;;		_Rcmd2green
  6379 ;;		_VerticalScroll
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           	psect	text28
  6384  0016DA                     __ptext28:
  6385                           	opt stack 0
  6386  0016DA                     _write_command:
  6387                           	opt stack 22
  6388                           
  6389                           ;incstack = 0
  6390                           ;write_command@cmd_ stored from wreg
  6391  0016DA  6E13               	movwf	write_command@cmd_,c
  6392                           
  6393                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  6394  0016DC  9282               	bcf	3970,1,c	;volatile
  6395                           
  6396                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  6397  0016DE  9082               	bcf	3970,0,c	;volatile
  6398                           
  6399                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6400  0016E0  5013               	movf	write_command@cmd_,w,c
  6401  0016E2  EC52  F00B         	call	_spiwrite
  6402                           
  6403                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  6404  0016E6  8282               	bsf	3970,1,c	;volatile
  6405  0016E8  0012               	return		;funcret
  6406  0016EA                     __end_of_write_command:
  6407                           	opt stack 0
  6408                           tblptru	equ	0xFF8
  6409                           tblptrh	equ	0xFF7
  6410                           tblptrl	equ	0xFF6
  6411                           tablat	equ	0xFF5
  6412                           prodh	equ	0xFF4
  6413                           prodl	equ	0xFF3
  6414                           intcon	equ	0xFF2
  6415                           intcon2	equ	0xFF1
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           postdec1	equ	0xFE5
  6419                           fsr1l	equ	0xFE1
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _spiwrite *****************
  6428 ;; Defined at:
  6429 ;;		line 189 in file "ST7735_TFT.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  spidata         1    wreg     unsigned char 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  spidata         1   17[COMRAM] unsigned char 
  6434 ;;  x               1   16[COMRAM] unsigned char 
  6435 ;; Return value:  Size  Location     Type
  6436 ;;		None               void
  6437 ;; Registers used:
  6438 ;;		wreg
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;Total ram usage:        2 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    3
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_write_command
  6455 ;;		_write_data
  6456 ;;		_drawFastVLine
  6457 ;;		_fillRectangle
  6458 ;;		_drawFastHLine
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           	psect	text29
  6463  0016A4                     __ptext29:
  6464                           	opt stack 0
  6465  0016A4                     _spiwrite:
  6466                           	opt stack 24
  6467                           
  6468                           ;incstack = 0
  6469                           ;spiwrite@spidata stored from wreg
  6470  0016A4  6E12               	movwf	spiwrite@spidata,c
  6471                           
  6472                           ;ST7735_TFT.c: 191: char x;
  6473                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6474  0016A6  969E               	bcf	3998,3,c	;volatile
  6475                           
  6476                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6477  0016A8  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6478                           
  6479                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6480  0016AC  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6481                           
  6482                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6483  0016B0  D000               	goto	l229
  6484  0016B2                     l229:
  6485  0016B2  A0C7               	btfss	4039,0,c	;volatile
  6486  0016B4  D7FE               	goto	l229
  6487  0016B6  0012               	return		;funcret
  6488  0016B8                     __end_of_spiwrite:
  6489                           	opt stack 0
  6490                           tblptru	equ	0xFF8
  6491                           tblptrh	equ	0xFF7
  6492                           tblptrl	equ	0xFF6
  6493                           tablat	equ	0xFF5
  6494                           prodh	equ	0xFF4
  6495                           prodl	equ	0xFF3
  6496                           intcon	equ	0xFF2
  6497                           intcon2	equ	0xFF1
  6498                           postinc0	equ	0xFEE
  6499                           wreg	equ	0xFE8
  6500                           postdec1	equ	0xFE5
  6501                           fsr1l	equ	0xFE1
  6502                           indf2	equ	0xFDF
  6503                           postinc2	equ	0xFDE
  6504                           postdec2	equ	0xFDD
  6505                           fsr2h	equ	0xFDA
  6506                           fsr2l	equ	0xFD9
  6507                           status	equ	0xFD8
  6508                           
  6509 ;; *************** function _LCD_Reset *****************
  6510 ;; Defined at:
  6511 ;;		line 217 in file "ST7735_TFT.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;		None
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;		None
  6516 ;; Return value:  Size  Location     Type
  6517 ;;		None               void
  6518 ;; Registers used:
  6519 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;Total ram usage:        0 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    5
  6532 ;; This function calls:
  6533 ;;		_delay_ms
  6534 ;; This function is called by:
  6535 ;;		_Initialize_Screen
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text30
  6540  0016B8                     __ptext30:
  6541                           	opt stack 0
  6542  0016B8                     _LCD_Reset:
  6543                           	opt stack 24
  6544                           
  6545                           ;ST7735_TFT.c: 219: PORTCbits.RC2 = 0;
  6546                           
  6547                           ;incstack = 0
  6548  0016B8  9482               	bcf	3970,2,c	;volatile
  6549                           
  6550                           ;ST7735_TFT.c: 220: delay_ms(100);
  6551  0016BA  0E00               	movlw	0
  6552  0016BC  6E18               	movwf	delay_ms@ms+1,c
  6553  0016BE  0E64               	movlw	100
  6554  0016C0  6E17               	movwf	delay_ms@ms,c
  6555  0016C2  ECE4  F009         	call	_delay_ms	;wreg free
  6556                           
  6557                           ;ST7735_TFT.c: 221: PORTCbits.RC2 = 1;
  6558  0016C6  8482               	bsf	3970,2,c	;volatile
  6559  0016C8  0012               	return		;funcret
  6560  0016CA                     __end_of_LCD_Reset:
  6561                           	opt stack 0
  6562                           tblptru	equ	0xFF8
  6563                           tblptrh	equ	0xFF7
  6564                           tblptrl	equ	0xFF6
  6565                           tablat	equ	0xFF5
  6566                           prodh	equ	0xFF4
  6567                           prodl	equ	0xFF3
  6568                           intcon	equ	0xFF2
  6569                           intcon2	equ	0xFF1
  6570                           postinc0	equ	0xFEE
  6571                           wreg	equ	0xFE8
  6572                           postdec1	equ	0xFE5
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function _delay_ms *****************
  6582 ;; Defined at:
  6583 ;;		line 64 in file "ST7735_TFT.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  ms              2   22[COMRAM] int 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  count           2   26[COMRAM] int 
  6588 ;; Return value:  Size  Location     Type
  6589 ;;		None               void
  6590 ;; Registers used:
  6591 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6597 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;Total ram usage:        6 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    4
  6604 ;; This function calls:
  6605 ;;		___wmul
  6606 ;; This function is called by:
  6607 ;;		_LCD_Reset
  6608 ;;		_Rcmd1
  6609 ;;		_Rcmd3
  6610 ;;		_Bcmd
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text31
  6615  0013C8                     __ptext31:
  6616                           	opt stack 0
  6617  0013C8                     _delay_ms:
  6618                           	opt stack 23
  6619                           
  6620                           ;ST7735_TFT.c: 70: int count;
  6621                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6622                           
  6623                           ;incstack = 0
  6624  0013C8  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6625  0013CC  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6626  0013D0  0E00               	movlw	0
  6627  0013D2  6E14               	movwf	___wmul@multiplicand+1,c
  6628  0013D4  0EFA               	movlw	250
  6629  0013D6  6E13               	movwf	___wmul@multiplicand,c
  6630  0013D8  ECFD  F00A         	call	___wmul	;wreg free
  6631  0013DC  C011  F01B         	movff	?___wmul,delay_ms@count
  6632  0013E0  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6633                           
  6634                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6635  0013E4  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6636  0013E8  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6637  0013EC  1E19               	comf	??_delay_ms,f,c
  6638  0013EE  1E1A               	comf	??_delay_ms+1,f,c
  6639  0013F0  4A19               	infsnz	??_delay_ms,f,c
  6640  0013F2  2A1A               	incf	??_delay_ms+1,f,c
  6641  0013F4  0EFF               	movlw	255
  6642  0013F6  2419               	addwf	??_delay_ms,w,c
  6643  0013F8  6E1B               	movwf	delay_ms@count,c
  6644  0013FA  0EFF               	movlw	255
  6645  0013FC  201A               	addwfc	??_delay_ms+1,w,c
  6646  0013FE  6E1C               	movwf	delay_ms@count+1,c
  6647                           
  6648                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6649  001400  0EB8               	movlw	184
  6650  001402  6EB1               	movwf	4017,c	;volatile
  6651                           
  6652                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6653  001404  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6654                           
  6655                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6656  001408  501C               	movf	delay_ms@count+1,w,c
  6657  00140A  6EB3               	movwf	4019,c	;volatile
  6658                           
  6659                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6660  00140C  92A1               	bcf	4001,1,c	;volatile
  6661                           
  6662                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6663  00140E  80B1               	bsf	4017,0,c	;volatile
  6664                           
  6665                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6666  001410  D000               	goto	l219
  6667  001412                     l219:
  6668  001412  A2A1               	btfss	4001,1,c	;volatile
  6669  001414  D7FE               	goto	l219
  6670                           
  6671                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6672  001416  90B1               	bcf	4017,0,c	;volatile
  6673  001418  0012               	return		;funcret
  6674  00141A                     __end_of_delay_ms:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           prodh	equ	0xFF4
  6681                           prodl	equ	0xFF3
  6682                           intcon	equ	0xFF2
  6683                           intcon2	equ	0xFF1
  6684                           postinc0	equ	0xFEE
  6685                           wreg	equ	0xFE8
  6686                           postdec1	equ	0xFE5
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           postdec2	equ	0xFDD
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function ___wmul *****************
  6696 ;; Defined at:
  6697 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;  multiplier      2   16[COMRAM] unsigned int 
  6700 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  product         2   20[COMRAM] unsigned int 
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  2   16[COMRAM] unsigned int 
  6705 ;; Registers used:
  6706 ;;		wreg, status,2, status,0, prodl, prodh
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6712 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;Total ram usage:        6 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:    3
  6719 ;; This function calls:
  6720 ;;		Nothing
  6721 ;; This function is called by:
  6722 ;;		_delay_ms
  6723 ;;		_drawChar
  6724 ;;		_printf
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text32
  6729  0015FA                     __ptext32:
  6730                           	opt stack 0
  6731  0015FA                     ___wmul:
  6732                           	opt stack 26
  6733                           
  6734                           ;incstack = 0
  6735  0015FA  5011               	movf	___wmul@multiplier,w,c
  6736  0015FC  0213               	mulwf	___wmul@multiplicand,c
  6737  0015FE  CFF3 F015          	movff	prodl,___wmul@product
  6738  001602  CFF4 F016          	movff	prodh,___wmul@product+1
  6739  001606  5011               	movf	___wmul@multiplier,w,c
  6740  001608  0214               	mulwf	___wmul@multiplicand+1,c
  6741  00160A  50F3               	movf	prodl,w,c
  6742  00160C  2616               	addwf	___wmul@product+1,f,c
  6743  00160E  5012               	movf	___wmul@multiplier+1,w,c
  6744  001610  0213               	mulwf	___wmul@multiplicand,c
  6745  001612  50F3               	movf	prodl,w,c
  6746  001614  2616               	addwf	___wmul@product+1,f,c
  6747  001616  C015  F011         	movff	___wmul@product,?___wmul
  6748  00161A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6749  00161E  D000               	goto	l504
  6750  001620                     l504:
  6751  001620  0012               	return		;funcret
  6752  001622                     __end_of___wmul:
  6753                           	opt stack 0
  6754                           tblptru	equ	0xFF8
  6755                           tblptrh	equ	0xFF7
  6756                           tblptrl	equ	0xFF6
  6757                           tablat	equ	0xFF5
  6758                           prodh	equ	0xFF4
  6759                           prodl	equ	0xFF3
  6760                           intcon	equ	0xFF2
  6761                           intcon2	equ	0xFF1
  6762                           postinc0	equ	0xFEE
  6763                           wreg	equ	0xFE8
  6764                           postdec1	equ	0xFE5
  6765                           fsr1l	equ	0xFE1
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           fsr2h	equ	0xFDA
  6770                           fsr2l	equ	0xFD9
  6771                           status	equ	0xFD8
  6772                           
  6773 ;; *************** function _chkisr *****************
  6774 ;; Defined at:
  6775 ;;		line 96 in file "Lab10_sample_1.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;		None               void
  6782 ;; Registers used:
  6783 ;;		wreg, status,2, status,0, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;Total ram usage:       14 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    2
  6796 ;; This function calls:
  6797 ;;		_INT0_isr
  6798 ;;		_TIMER1_isr
  6799 ;; This function is called by:
  6800 ;;		Interrupt level 2
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           	psect	intcode
  6805  000008                     __pintcode:
  6806                           	opt stack 0
  6807  000008                     _chkisr:
  6808                           	opt stack 20
  6809                           
  6810                           ;incstack = 0
  6811  000008  CFFA F003          	movff	pclath,??_chkisr
  6812  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6813  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6814  000014  ED0D  F009         	call	int_func,f	;refresh shadow registers
  6815                           pclatu	equ	0xFFB
  6816                           pclath	equ	0xFFA
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           intcon	equ	0xFF2
  6824                           intcon2	equ	0xFF1
  6825                           postinc0	equ	0xFEE
  6826                           fsr0l	equ	0xFE9
  6827                           wreg	equ	0xFE8
  6828                           postdec1	equ	0xFE5
  6829                           fsr1l	equ	0xFE1
  6830                           indf2	equ	0xFDF
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8
  6836                           
  6837                           	psect	intcode_body
  6838  00121A                     __pintcode_body:
  6839                           	opt stack 20
  6840  00121A                     int_func:
  6841                           	opt stack 20
  6842  00121A  0006               	pop		; remove dummy address from shadow register refresh
  6843  00121C  CFEA F006          	movff	fsr0h,??_chkisr+3
  6844  001220  CFE1 F007          	movff	fsr1l,??_chkisr+4
  6845  001224  CFE2 F008          	movff	fsr1h,??_chkisr+5
  6846  001228  CFD9 F009          	movff	fsr2l,??_chkisr+6
  6847  00122C  CFDA F00A          	movff	fsr2h,??_chkisr+7
  6848  001230  CFF3 F00B          	movff	prodl,??_chkisr+8
  6849  001234  CFF4 F00C          	movff	prodh,??_chkisr+9
  6850  001238  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  6851  00123C  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  6852  001240  CFF8 F00F          	movff	tblptru,??_chkisr+12
  6853  001244  CFF5 F010          	movff	tablat,??_chkisr+13
  6854                           
  6855                           ;Lab10_sample_1.c: 98: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  6856  001248  A09E               	btfss	3998,0,c	;volatile
  6857  00124A  D003               	goto	i2l1930
  6858  00124C  EC7C  F00B         	call	_TIMER1_isr	;wreg free
  6859  001250  D000               	goto	i2l1930
  6860  001252                     i2l1930:
  6861                           
  6862                           ;Lab10_sample_1.c: 99: if (INTCONbits.INT0IF == 1) INT0_isr();
  6863  001252  A2F2               	btfss	intcon,1,c	;volatile
  6864  001254  D003               	goto	i2l128
  6865  001256  EC85  F004         	call	_INT0_isr	;wreg free
  6866  00125A  D000               	goto	i2l128
  6867  00125C                     i2l128:
  6868  00125C  C010  FFF5         	movff	??_chkisr+13,tablat
  6869  001260  C00F  FFF8         	movff	??_chkisr+12,tblptru
  6870  001264  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  6871  001268  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  6872  00126C  C00C  FFF4         	movff	??_chkisr+9,prodh
  6873  001270  C00B  FFF3         	movff	??_chkisr+8,prodl
  6874  001274  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  6875  001278  C009  FFD9         	movff	??_chkisr+6,fsr2l
  6876  00127C  C008  FFE2         	movff	??_chkisr+5,fsr1h
  6877  001280  C007  FFE1         	movff	??_chkisr+4,fsr1l
  6878  001284  C006  FFEA         	movff	??_chkisr+3,fsr0h
  6879  001288  C005  FFE9         	movff	??_chkisr+2,fsr0l
  6880  00128C  C004  FFFB         	movff	??_chkisr+1,pclatu
  6881  001290  C003  FFFA         	movff	??_chkisr,pclath
  6882  001294  0011               	retfie		f
  6883  001296                     __end_of_chkisr:
  6884                           	opt stack 0
  6885                           pclatu	equ	0xFFB
  6886                           pclath	equ	0xFFA
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           intcon	equ	0xFF2
  6894                           intcon2	equ	0xFF1
  6895                           postinc0	equ	0xFEE
  6896                           fsr0h	equ	0xFEA
  6897                           fsr0l	equ	0xFE9
  6898                           wreg	equ	0xFE8
  6899                           postdec1	equ	0xFE5
  6900                           fsr1h	equ	0xFE2
  6901                           fsr1l	equ	0xFE1
  6902                           indf2	equ	0xFDF
  6903                           postinc2	equ	0xFDE
  6904                           postdec2	equ	0xFDD
  6905                           fsr2h	equ	0xFDA
  6906                           fsr2l	equ	0xFD9
  6907                           status	equ	0xFD8
  6908                           
  6909 ;; *************** function _TIMER1_isr *****************
  6910 ;; Defined at:
  6911 ;;		line 102 in file "Lab10_sample_1.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;		None
  6914 ;; Auto vars:     Size  Location     Type
  6915 ;;		None
  6916 ;; Return value:  Size  Location     Type
  6917 ;;		None               void
  6918 ;; Registers used:
  6919 ;;		wreg, status,2
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;Total ram usage:        0 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; This function calls:
  6932 ;;		Nothing
  6933 ;; This function is called by:
  6934 ;;		_chkisr
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text34
  6939  0016F8                     __ptext34:
  6940                           	opt stack 0
  6941  0016F8                     _TIMER1_isr:
  6942                           	opt stack 21
  6943                           
  6944                           ;Lab10_sample_1.c: 104: Nec_state = 0;
  6945                           
  6946                           ;incstack = 0
  6947  0016F8  0E00               	movlw	0
  6948  0016FA  6E6A               	movwf	_Nec_state,c
  6949                           
  6950                           ;Lab10_sample_1.c: 105: INTCON2bits.INTEDG0 = 0;
  6951  0016FC  9CF1               	bcf	intcon2,6,c	;volatile
  6952                           
  6953                           ;Lab10_sample_1.c: 106: T1CONbits.TMR1ON = 0;
  6954  0016FE  90CD               	bcf	4045,0,c	;volatile
  6955                           
  6956                           ;Lab10_sample_1.c: 107: PIR1bits.TMR1IF = 0;
  6957  001700  909E               	bcf	3998,0,c	;volatile
  6958  001702  0012               	return		;funcret
  6959  001704                     __end_of_TIMER1_isr:
  6960                           	opt stack 0
  6961                           pclatu	equ	0xFFB
  6962                           pclath	equ	0xFFA
  6963                           tblptru	equ	0xFF8
  6964                           tblptrh	equ	0xFF7
  6965                           tblptrl	equ	0xFF6
  6966                           tablat	equ	0xFF5
  6967                           prodh	equ	0xFF4
  6968                           prodl	equ	0xFF3
  6969                           intcon	equ	0xFF2
  6970                           intcon2	equ	0xFF1
  6971                           postinc0	equ	0xFEE
  6972                           fsr0h	equ	0xFEA
  6973                           fsr0l	equ	0xFE9
  6974                           wreg	equ	0xFE8
  6975                           postdec1	equ	0xFE5
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _INT0_isr *****************
  6986 ;; Defined at:
  6987 ;;		line 116 in file "Lab10_sample_1.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;		None
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;		None               void
  6994 ;; Registers used:
  6995 ;;		wreg, status,2, status,0, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;Total ram usage:        2 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    1
  7008 ;; This function calls:
  7009 ;;		_force_nec_state0
  7010 ;; This function is called by:
  7011 ;;		_chkisr
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text35
  7016  00090A                     __ptext35:
  7017                           	opt stack 0
  7018  00090A                     _INT0_isr:
  7019                           	opt stack 20
  7020                           
  7021                           ;Lab10_sample_1.c: 118: INTCONbits.INT0IF = 0;
  7022                           
  7023                           ;incstack = 0
  7024  00090A  92F2               	bcf	intcon,1,c	;volatile
  7025                           
  7026                           ;Lab10_sample_1.c: 119: if (Nec_state != 0)
  7027  00090C  506A               	movf	_Nec_state,w,c
  7028  00090E  B4D8               	btfsc	status,2,c
  7029  000910  D091               	goto	i2l1682
  7030                           
  7031                           ;Lab10_sample_1.c: 120: {
  7032                           ;Lab10_sample_1.c: 121: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7033  000912  50CE               	movf	4046,w,c	;volatile
  7034  000914  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7035  000918  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7036  00091A  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7037  00091E  6A01               	clrf	??_INT0_isr,c
  7038  000920  1001               	iorwf	??_INT0_isr,w,c
  7039  000922  6E61               	movwf	_Time_Elapsed,c
  7040  000924  5002               	movf	??_INT0_isr+1,w,c
  7041  000926  6E62               	movwf	_Time_Elapsed+1,c
  7042                           
  7043                           ;Lab10_sample_1.c: 122: TMR1H = 0;
  7044  000928  0E00               	movlw	0
  7045  00092A  6ECF               	movwf	4047,c	;volatile
  7046                           
  7047                           ;Lab10_sample_1.c: 123: TMR1L = 0;
  7048  00092C  0E00               	movlw	0
  7049  00092E  6ECE               	movwf	4046,c	;volatile
  7050                           
  7051                           ;Lab10_sample_1.c: 124: }
  7052                           ;Lab10_sample_1.c: 126: switch(Nec_state)
  7053  000930  D081               	goto	i2l1682
  7054  000932                     i2l1622:
  7055                           
  7056                           ;Lab10_sample_1.c: 129: {
  7057                           ;Lab10_sample_1.c: 131: TMR1H = 0;
  7058  000932  0E00               	movlw	0
  7059  000934  6ECF               	movwf	4047,c	;volatile
  7060                           
  7061                           ;Lab10_sample_1.c: 132: TMR1L = 0;
  7062  000936  0E00               	movlw	0
  7063  000938  6ECE               	movwf	4046,c	;volatile
  7064                           
  7065                           ;Lab10_sample_1.c: 133: PIR1bits.TMR1IF = 0;
  7066  00093A  909E               	bcf	3998,0,c	;volatile
  7067                           
  7068                           ;Lab10_sample_1.c: 134: T1CON= 0x90;
  7069  00093C  0E90               	movlw	144
  7070  00093E  6ECD               	movwf	4045,c	;volatile
  7071                           
  7072                           ;Lab10_sample_1.c: 135: T1CONbits.TMR1ON = 1;
  7073  000940  80CD               	bsf	4045,0,c	;volatile
  7074                           
  7075                           ;Lab10_sample_1.c: 136: bit_count = 0;
  7076  000942  0E00               	movlw	0
  7077  000944  6E6C               	movwf	_bit_count,c
  7078                           
  7079                           ;Lab10_sample_1.c: 137: Nec_code = 0;
  7080  000946  0E00               	movlw	0
  7081  000948  6E5D               	movwf	_Nec_code,c
  7082  00094A  0E00               	movlw	0
  7083  00094C  6E5E               	movwf	_Nec_code+1,c
  7084  00094E  0E00               	movlw	0
  7085  000950  6E5F               	movwf	_Nec_code+2,c
  7086  000952  0E00               	movlw	0
  7087  000954  6E60               	movwf	_Nec_code+3,c
  7088                           
  7089                           ;Lab10_sample_1.c: 138: Nec_state = 1;
  7090  000956  0E01               	movlw	1
  7091  000958  D01F               	goto	L4
  7092  00095A                     i2l1628:
  7093                           
  7094                           ;Lab10_sample_1.c: 139: INTCON2bits.INTEDG0 = 1;
  7095  00095A  8CF1               	bsf	intcon2,6,c	;volatile
  7096                           
  7097                           ;Lab10_sample_1.c: 140: return;
  7098  00095C  D07C               	goto	i2l140
  7099  00095E                     i2l1632:
  7100                           
  7101                           ;Lab10_sample_1.c: 144: {
  7102                           ;Lab10_sample_1.c: 145: if((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
  7103  00095E  0E35               	movlw	53
  7104  000960  5C61               	subwf	_Time_Elapsed,w,c
  7105  000962  0E21               	movlw	33
  7106  000964  5862               	subwfb	_Time_Elapsed+1,w,c
  7107  000966  A0D8               	btfss	status,0,c
  7108  000968  D076               	goto	i2l140
  7109  00096A  0E1C               	movlw	28
  7110  00096C  5C61               	subwf	_Time_Elapsed,w,c
  7111  00096E  0E25               	movlw	37
  7112  000970  5862               	subwfb	_Time_Elapsed+1,w,c
  7113  000972  B0D8               	btfsc	status,0,c
  7114  000974  D070               	goto	i2l140
  7115                           
  7116                           ;Lab10_sample_1.c: 146: {
  7117                           ;Lab10_sample_1.c: 147: Nec_state = 2;
  7118  000976  0E02               	movlw	2
  7119  000978  D01F               	goto	L5
  7120  00097A                     i2l1638:
  7121                           
  7122                           ;Lab10_sample_1.c: 148: INTCON2bits.INTEDG0 = 0;
  7123  00097A  9CF1               	bcf	intcon2,6,c	;volatile
  7124                           
  7125                           ;Lab10_sample_1.c: 149: }
  7126                           ;Lab10_sample_1.c: 150: return;
  7127  00097C  D06C               	goto	i2l140
  7128  00097E                     i2l1642:
  7129                           
  7130                           ;Lab10_sample_1.c: 154: {
  7131                           ;Lab10_sample_1.c: 155: if((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
  7132  00097E  0EA1               	movlw	161
  7133  000980  5C61               	subwf	_Time_Elapsed,w,c
  7134  000982  0E0F               	movlw	15
  7135  000984  5862               	subwfb	_Time_Elapsed+1,w,c
  7136  000986  A0D8               	btfss	status,0,c
  7137  000988  D066               	goto	i2l140
  7138  00098A  0E88               	movlw	136
  7139  00098C  5C61               	subwf	_Time_Elapsed,w,c
  7140  00098E  0E13               	movlw	19
  7141  000990  5862               	subwfb	_Time_Elapsed+1,w,c
  7142  000992  B0D8               	btfsc	status,0,c
  7143  000994  D060               	goto	i2l140
  7144                           
  7145                           ;Lab10_sample_1.c: 156: {
  7146                           ;Lab10_sample_1.c: 157: Nec_state = 3;
  7147  000996  0E03               	movlw	3
  7148  000998                     L4:
  7149  000998  6E6A               	movwf	_Nec_state,c
  7150  00099A  D7DF               	goto	i2l1628
  7151                           
  7152                           ;Lab10_sample_1.c: 159: }
  7153                           ;Lab10_sample_1.c: 160: return;
  7154                           
  7155                           ;Lab10_sample_1.c: 158: INTCON2bits.INTEDG0 = 1;
  7156  00099C  D05C               	goto	i2l140
  7157  00099E                     i2l1652:
  7158                           
  7159                           ;Lab10_sample_1.c: 164: {
  7160                           ;Lab10_sample_1.c: 165: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  7161  00099E  0E91               	movlw	145
  7162  0009A0  5C61               	subwf	_Time_Elapsed,w,c
  7163  0009A2  0E01               	movlw	1
  7164  0009A4  5862               	subwfb	_Time_Elapsed+1,w,c
  7165  0009A6  A0D8               	btfss	status,0,c
  7166  0009A8  D056               	goto	i2l140
  7167  0009AA  0E08               	movlw	8
  7168  0009AC  5C61               	subwf	_Time_Elapsed,w,c
  7169  0009AE  0E07               	movlw	7
  7170  0009B0  5862               	subwfb	_Time_Elapsed+1,w,c
  7171  0009B2  B0D8               	btfsc	status,0,c
  7172  0009B4  D050               	goto	i2l140
  7173                           
  7174                           ;Lab10_sample_1.c: 166: {
  7175                           ;Lab10_sample_1.c: 167: Nec_state = 4;
  7176  0009B6  0E04               	movlw	4
  7177  0009B8                     L5:
  7178  0009B8  6E6A               	movwf	_Nec_state,c
  7179  0009BA  D7DF               	goto	i2l1638
  7180                           
  7181                           ;Lab10_sample_1.c: 169: }
  7182                           ;Lab10_sample_1.c: 170: return;
  7183                           
  7184                           ;Lab10_sample_1.c: 168: INTCON2bits.INTEDG0 = 0;
  7185  0009BC  D04C               	goto	i2l140
  7186  0009BE                     i2l1662:
  7187                           
  7188                           ;Lab10_sample_1.c: 174: {
  7189                           ;Lab10_sample_1.c: 175: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  7190  0009BE  0E91               	movlw	145
  7191  0009C0  5C61               	subwf	_Time_Elapsed,w,c
  7192  0009C2  0E01               	movlw	1
  7193  0009C4  5862               	subwfb	_Time_Elapsed+1,w,c
  7194  0009C6  A0D8               	btfss	status,0,c
  7195  0009C8  D030               	goto	i2l1674
  7196  0009CA  0E08               	movlw	8
  7197  0009CC  5C61               	subwf	_Time_Elapsed,w,c
  7198  0009CE  0E07               	movlw	7
  7199  0009D0  5862               	subwfb	_Time_Elapsed+1,w,c
  7200  0009D2  B0D8               	btfsc	status,0,c
  7201  0009D4  D02A               	goto	i2l1674
  7202                           
  7203                           ;Lab10_sample_1.c: 176: {
  7204                           ;Lab10_sample_1.c: 177: Nec_code = Nec_code << 1;
  7205  0009D6  90D8               	bcf	status,0,c
  7206  0009D8  345D               	rlcf	_Nec_code,w,c
  7207  0009DA  6E5D               	movwf	_Nec_code,c
  7208  0009DC  345E               	rlcf	_Nec_code+1,w,c
  7209  0009DE  6E5E               	movwf	_Nec_code+1,c
  7210  0009E0  345F               	rlcf	_Nec_code+2,w,c
  7211  0009E2  6E5F               	movwf	_Nec_code+2,c
  7212  0009E4  3460               	rlcf	_Nec_code+3,w,c
  7213  0009E6  6E60               	movwf	_Nec_code+3,c
  7214                           
  7215                           ;Lab10_sample_1.c: 178: if(Time_Elapsed > 1000)
  7216  0009E8  0EE9               	movlw	233
  7217  0009EA  5C61               	subwf	_Time_Elapsed,w,c
  7218  0009EC  0E03               	movlw	3
  7219  0009EE  5862               	subwfb	_Time_Elapsed+1,w,c
  7220  0009F0  A0D8               	btfss	status,0,c
  7221  0009F2  D00C               	goto	i2l149
  7222                           
  7223                           ;Lab10_sample_1.c: 179: {
  7224                           ;Lab10_sample_1.c: 180: Nec_code = Nec_code + 1;
  7225  0009F4  0E01               	movlw	1
  7226  0009F6  245D               	addwf	_Nec_code,w,c
  7227  0009F8  6E5D               	movwf	_Nec_code,c
  7228  0009FA  0E00               	movlw	0
  7229  0009FC  205E               	addwfc	_Nec_code+1,w,c
  7230  0009FE  6E5E               	movwf	_Nec_code+1,c
  7231  000A00  0E00               	movlw	0
  7232  000A02  205F               	addwfc	_Nec_code+2,w,c
  7233  000A04  6E5F               	movwf	_Nec_code+2,c
  7234  000A06  0E00               	movlw	0
  7235  000A08  2060               	addwfc	_Nec_code+3,w,c
  7236  000A0A  6E60               	movwf	_Nec_code+3,c
  7237  000A0C                     i2l149:
  7238                           
  7239                           ;Lab10_sample_1.c: 181: }
  7240                           ;Lab10_sample_1.c: 182: bit_count = bit_count + 1;
  7241  000A0C  286C               	incf	_bit_count,w,c
  7242  000A0E  6E6C               	movwf	_bit_count,c
  7243                           
  7244                           ;Lab10_sample_1.c: 183: if(bit_count > 31)
  7245  000A10  0E1F               	movlw	31
  7246  000A12  646C               	cpfsgt	_bit_count,c
  7247  000A14  D007               	goto	i2l150
  7248                           
  7249                           ;Lab10_sample_1.c: 184: {
  7250                           ;Lab10_sample_1.c: 185: nec_ok = 1;
  7251  000A16  0E00               	movlw	0
  7252  000A18  6E66               	movwf	_nec_ok+1,c
  7253  000A1A  0E01               	movlw	1
  7254  000A1C  6E65               	movwf	_nec_ok,c
  7255                           
  7256                           ;Lab10_sample_1.c: 186: INTCONbits.INT0IE = 0;
  7257  000A1E  98F2               	bcf	intcon,4,c	;volatile
  7258                           
  7259                           ;Lab10_sample_1.c: 187: Nec_state = 0;
  7260  000A20  0E00               	movlw	0
  7261  000A22  6E6A               	movwf	_Nec_state,c
  7262  000A24                     i2l150:
  7263                           
  7264                           ;Lab10_sample_1.c: 188: }
  7265                           ;Lab10_sample_1.c: 189: Nec_state = 3;
  7266  000A24  0E03               	movlw	3
  7267  000A26  6E6A               	movwf	_Nec_state,c
  7268                           
  7269                           ;Lab10_sample_1.c: 190: }
  7270  000A28  D798               	goto	i2l1628
  7271  000A2A                     i2l1674:
  7272                           
  7273                           ;Lab10_sample_1.c: 191: else
  7274                           ;Lab10_sample_1.c: 192: {
  7275                           ;Lab10_sample_1.c: 193: force_nec_state0();
  7276  000A2A  EC82  F00B         	call	_force_nec_state0	;wreg free
  7277  000A2E  D795               	goto	i2l1628
  7278  000A30  D794               	goto	i2l1628
  7279                           
  7280                           ;Lab10_sample_1.c: 197: }
  7281                           ;Lab10_sample_1.c: 198: }
  7282                           
  7283                           ;Lab10_sample_1.c: 196: return;
  7284                           
  7285                           ;Lab10_sample_1.c: 194: }
  7286                           ;Lab10_sample_1.c: 195: INTCON2bits.INTEDG0 = 1;
  7287  000A32  D011               	goto	i2l140
  7288  000A34                     i2l1682:
  7289  000A34  506A               	movf	_Nec_state,w,c
  7290                           
  7291                           ; Switch size 1, requested type "space"
  7292                           ; Number of cases is 5, Range of values is 0 to 4
  7293                           ; switch strategies available:
  7294                           ; Name         Instructions Cycles
  7295                           ; simple_byte           16     9 (average)
  7296                           ;	Chosen strategy is simple_byte
  7297  000A36  0A00               	xorlw	0	; case 0
  7298  000A38  B4D8               	btfsc	status,2,c
  7299  000A3A  D77B               	goto	i2l1622
  7300  000A3C  0A01               	xorlw	1	; case 1
  7301  000A3E  B4D8               	btfsc	status,2,c
  7302  000A40  D78E               	goto	i2l1632
  7303  000A42  0A03               	xorlw	3	; case 2
  7304  000A44  B4D8               	btfsc	status,2,c
  7305  000A46  D79B               	goto	i2l1642
  7306  000A48  0A01               	xorlw	1	; case 3
  7307  000A4A  B4D8               	btfsc	status,2,c
  7308  000A4C  D7A8               	goto	i2l1652
  7309  000A4E  0A07               	xorlw	7	; case 4
  7310  000A50  B4D8               	btfsc	status,2,c
  7311  000A52  D7B5               	goto	i2l1662
  7312  000A54  D000               	goto	i2l140
  7313  000A56                     i2l140:
  7314  000A56  0012               	return		;funcret
  7315  000A58                     __end_of_INT0_isr:
  7316                           	opt stack 0
  7317                           pclatu	equ	0xFFB
  7318                           pclath	equ	0xFFA
  7319                           tblptru	equ	0xFF8
  7320                           tblptrh	equ	0xFF7
  7321                           tblptrl	equ	0xFF6
  7322                           tablat	equ	0xFF5
  7323                           prodh	equ	0xFF4
  7324                           prodl	equ	0xFF3
  7325                           intcon	equ	0xFF2
  7326                           intcon2	equ	0xFF1
  7327                           postinc0	equ	0xFEE
  7328                           fsr0h	equ	0xFEA
  7329                           fsr0l	equ	0xFE9
  7330                           wreg	equ	0xFE8
  7331                           postdec1	equ	0xFE5
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function _force_nec_state0 *****************
  7342 ;; Defined at:
  7343 ;;		line 110 in file "Lab10_sample_1.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;		None               void
  7350 ;; Registers used:
  7351 ;;		wreg, status,2
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;Total ram usage:        0 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_INT0_isr
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           	psect	text36
  7371  001704                     __ptext36:
  7372                           	opt stack 0
  7373  001704                     _force_nec_state0:
  7374                           	opt stack 20
  7375                           
  7376                           ;Lab10_sample_1.c: 112: Nec_state=0;
  7377                           
  7378                           ;incstack = 0
  7379  001704  0E00               	movlw	0
  7380  001706  6E6A               	movwf	_Nec_state,c
  7381                           
  7382                           ;Lab10_sample_1.c: 113: T1CONbits.TMR1ON = 0;
  7383  001708  90CD               	bcf	4045,0,c	;volatile
  7384  00170A  0012               	return		;funcret
  7385  00170C                     __end_of_force_nec_state0:
  7386                           	opt stack 0
  7387                           pclatu	equ	0xFFB
  7388                           pclath	equ	0xFFA
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           intcon	equ	0xFF2
  7396                           intcon2	equ	0xFF1
  7397                           postinc0	equ	0xFEE
  7398                           fsr0h	equ	0xFEA
  7399                           fsr0l	equ	0xFE9
  7400                           wreg	equ	0xFE8
  7401                           postdec1	equ	0xFE5
  7402                           fsr1h	equ	0xFE2
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8
  7410                           pclatu	equ	0xFFB
  7411                           pclath	equ	0xFFA
  7412                           tblptru	equ	0xFF8
  7413                           tblptrh	equ	0xFF7
  7414                           tblptrl	equ	0xFF6
  7415                           tablat	equ	0xFF5
  7416                           prodh	equ	0xFF4
  7417                           prodl	equ	0xFF3
  7418                           intcon	equ	0xFF2
  7419                           intcon2	equ	0xFF1
  7420                           postinc0	equ	0xFEE
  7421                           fsr0h	equ	0xFEA
  7422                           fsr0l	equ	0xFE9
  7423                           wreg	equ	0xFE8
  7424                           postdec1	equ	0xFE5
  7425                           fsr1h	equ	0xFE2
  7426                           fsr1l	equ	0xFE1
  7427                           indf2	equ	0xFDF
  7428                           postinc2	equ	0xFDE
  7429                           postdec2	equ	0xFDD
  7430                           fsr2h	equ	0xFDA
  7431                           fsr2l	equ	0xFD9
  7432                           status	equ	0xFD8
  7433                           
  7434                           	psect	rparam
  7435  0000                     pclatu	equ	0xFFB
  7436                           pclath	equ	0xFFA
  7437                           tblptru	equ	0xFF8
  7438                           tblptrh	equ	0xFF7
  7439                           tblptrl	equ	0xFF6
  7440                           tablat	equ	0xFF5
  7441                           prodh	equ	0xFF4
  7442                           prodl	equ	0xFF3
  7443                           intcon	equ	0xFF2
  7444                           intcon2	equ	0xFF1
  7445                           postinc0	equ	0xFEE
  7446                           fsr0h	equ	0xFEA
  7447                           fsr0l	equ	0xFE9
  7448                           wreg	equ	0xFE8
  7449                           postdec1	equ	0xFE5
  7450                           fsr1h	equ	0xFE2
  7451                           fsr1l	equ	0xFE1
  7452                           indf2	equ	0xFDF
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           fsr2h	equ	0xFDA
  7456                           fsr2l	equ	0xFD9
  7457                           status	equ	0xFD8


Data Sizes:
    Strings     77
    Constant    547
    Data        211
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     111
    BANK0           128      7     101
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[8]), STR_2(CODE[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[34]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   52017
                                             66 COMRAM     4     4      0
                  _Initialize_Screen
                   _Wait_Half_Second
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              36    26     10    3136
                                             38 COMRAM    27    17     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     265
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20901
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_Half_Second
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 21 10:07:13 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006E                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _D1 0080                                _D2 0095  
                              _D3 00AA               ___wmul@multiplicand 0013  
                             l117 16EE                               l304 085E  
                             l219 1412                               l332 0F76  
                             l229 16B2                               l333 0EE2  
                             l181 1672                               l501 1374  
                             l430 0188                               l335 0F52  
                             l343 0520                               l504 1620  
                             l336 0F74                               l273 15CE  
                             l361 0AC6                               l427 0126  
                             l279 1118                               l295 0908  
                             l297 07E2                               l492 1332  
                             l468 045C                               l496 134C  
                             l497 134E                               l498 1358  
                             l499 135A                               l935 1642  
                             l964 1080                               l974 12F4  
               ?_Wait_Half_Second 0001                               _PR2 000FCB  
                             _nbr 0063                               _txt 0067  
                             prod 000FF3                               wreg 000FE8  
              ??_Wait_Half_Second 0011                   ??_fillRectangle 001D  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 15D0  
                    __CFG_WDT$OFF 000000                    drawFastVLine@h 0019  
                            l1066 152E                              l4002 0740  
                  drawFastVLine@x 0022                    drawFastVLine@y 0018  
                            l3410 148E                              l3406 1472  
                            l2710 163A                              l3360 10DA  
                            l3512 07D0                              l2560 1318  
                            l2720 1028                              l3370 1100  
                            l3530 0856                              l3522 07EE  
                            l2722 1036                              l3372 110E  
                            l3356 10A2                              l3540 08A8  
                            l3516 07DE                              l3508 07C4  
                            l3604 0F70                              l2580 1344  
                            l2572 1336                              l2564 1322  
                            l2732 1070                              l2724 103E  
                            l2740 12A8                              l3526 081E  
                            l3518 07E6                              l2742 12B6  
                            l3528 0852                              l3560 14FC  
                            l3640 0D8C                              l3632 0D3A  
                            l3616 0CCC                              l2568 132A  
                            l2744 12BE                              l3546 08D4  
                            l3538 0880                              l3554 0904  
                            l3562 1502                              l3642 0D94  
                            l2666 1578                              l3548 08FC  
                            l3628 0D1C                              l3572 0EAC  
                            l2668 1582                              l2748 12E4  
                            l3900 0424                              l3804 014A  
                            l3398 15B0                              l3590 0F48  
                            l3734 0506                              l3902 042C  
                            l3822 01CE                              l3832 020E  
                            l3824 01D2                              l3808 016E  
                            l3904 0440                              l3594 0F56  
                            l3578 0F1A                              l3762 05F6  
                            l3842 0224                              l3818 01A8  
                            l3770 0036                              l3860 0288  
                            l3836 0214                              l3828 01DE  
                            l3852 025A                              l3772 0044  
                            l3598 0F60                              l3694 0B28  
                            l3678 0AAC                              l3846 0254  
                            l3838 0218                              l3854 026C  
                            l3790 00E4                              l3782 0082  
                            l3766 0026                              l3880 02F6  
                            l3872 02CE                              l3864 02AC  
                            l3792 00EA                              l3776 004E  
                            l3698 0B7A                              l3890 0330  
                            l3874 02D6                              l3866 02B6  
                            l3778 0064                              l3970 065E  
                            l3892 03A8                              l3884 030E  
                            l3796 00F2                              l3878 02EE  
                            l3990 06AE                              l3982 0680  
                            l3888 0322                              l3898 0412  
                            l3994 06B6                              l3986 0694  
                            STR_1 FFB2                              STR_2 FFD4  
                            STR_3 FFF7                              STR_4 FFE6  
                            u2410 10D0                              u2710 0CF6  
                            u2640 0EDA                              u2570 08B6  
                            u2650 0F10                              _TRMT 007D61  
                            _main 060C                              _font FD8F  
                            fsr0h 000FEA                              _txt1 012A  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            _wrap 005C                              pclat 000FFA  
              __size_of_LCD_Reset 0012                              prodh 000FF4  
                            prodl 000FF3                              start 0018  
                 ??_drawFastVLine 001C                      ___param_bank 000010  
                     ?_TIMER1_isr 0001                  __end_of_INT0_isr 0A58  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                   __end_of___lldiv 1092  
                           _T0CON 000FD5                             _T1CON 000FCD  
                 __end_of___llmod 1306                             _T2CON 000FCA  
                           _T3CON 000FB1                             i2l140 0A56  
                           i2l150 0A24                             i2l128 125C  
                           i2l149 0A0C                   drawCircle@color 0022  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR1H 000FCF                             _TMR0L 000FD6  
                           _TMR3H 000FB3                             _TMR1L 000FCE  
                           _TMR3L 000FB2                             _SPBRG 000FAF  
                           _PORTD 000F83                             _PORTE 000F84  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 0B90                             _Rcmd3 0DAA  
                           _nRBPU 007F8F                   __end_of_dpowers FF92  
                           _color 0100                             _font2 FE8E  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 1644             fillCircleHelper@delta 002B  
                           _putch 16EA             fillCircleHelper@color 002D  
                           main@i 0044                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0013                   __initialization 111A  
                    __end_of_main 07B4                      __end_of_font FE8E  
                __end_of_Rcmd2red 156E                            ??_main 0043  
                   __activetblptr 000002                 __end_of_LCD_Reset 16CA  
       ??_TFT_GreenTab_Initialize 001D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON1 000FC1  
                ___llmod@dividend 001E                            _CCPR2L 000FBB  
                          ?_putch 0001                            i2l1622 0932  
                          i2l1632 095E                            i2l1642 097E  
                          i2l1652 099E                            i2l1628 095A  
                          i2l1662 09BE                            i2l1638 097A  
                          i2l1674 0A2A                            i2l1682 0A34  
                          i2l1930 1252                            _OSCCON 000FD3  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                  _force_nec_state0 1704  
                __end_of_delay_ms 141A                  __end_of_fillRect 14B2  
                __end_of_drawChar 090A                __size_of_OpenUSART 0070  
                          ___wmul 15FA         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0DAA                         ??___lldiv 0019  
                       ??___llmod 0026                            _chkisr 0008  
                          _array1 0047                            _buffer 00BF  
                          _nec_ok 0065                            clear_0 1120  
                          clear_1 112C                            _printf 001C  
                    drawtext@size 0040                            _strcpy 156E  
                          _strlen 14F2                      __pdataCOMRAM 0047  
                       ??_isdigit 0011                      __mediumconst FD8E  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 0011  
                __end_of_spiwrite 16B8                        __accesstop 0080  
         __end_of__initialization 1192                         ?_INT0_isr 0001  
                   ___rparam_used 000001                     __end_of_Rcmd1 0CA0  
                   __end_of_Rcmd3 0E9C                    __pcstackCOMRAM 0001  
                    __pidataBANK0 14B2                      __pidataBANK1 119C  
                   __end_of_font2 FF6A                     __end_of_putch 16F8  
                  drawPixel@color 0019            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 1376                           ??_putch 0011  
                      __pbssBANK0 00BF                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014         __size_of_Wait_Half_Second 001A  
                 spiwrite@spidata 0012                        ??_INT0_isr 0001  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 0011  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ??_TIMER1_isr 0001  
                      _fillCircle 1376                           ?_printf 0027  
                         ?_strcpy 0011                           ?_strlen 0011  
                      _fillScreen 1644                        _drawCircle 045E  
                       ?_delay_ms 0017                         ?_fillRect 0023  
                       ?_drawChar 002E                           _SSPCON1 000FC6  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 0F78  
                       ?_drawtext 0039                        ??_Rcmd2red 0014  
              __end_of_TIMER1_isr 1704                     _write_command 16DA  
                         __Hparam 0000                           __Lparam 0000  
               __end_of_drawPixel 15D0             __end_of_drawFastVLine 111A  
                _fillCircleHelper 0A58                           ___lldiv 1006  
                 __size_of___wmul 0028                           ___llmod 1296  
                 __size_of_chkisr 128E                         ?_spiwrite 0001  
                         __pcinit 111A                           __ramtop 1000  
                         __ptext0 060C                           __ptext1 001C  
                         __ptext2 16EA                           __ptext3 1622  
                         __ptext4 1296                           __ptext5 1006  
                         __ptext6 1690                           __ptext7 1306  
                         __ptext8 1376                           __ptext9 0A58  
                 __size_of_printf 0442                 __end_of_init_UART 16A4  
                       _T0CONbits 000FD5                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                 __end_of_hexpowers FFB2  
        __end_of_force_nec_state0 170C                         _T1CONbits 000FCD  
                         _dpowers FF6A                           _isdigit 1622  
                       _T3CONbits 000FB1                        ??_delay_ms 0019  
                   drawtext@_text 003A                     drawtext@color 003C  
                      ??_fillRect 0028                        ??_drawChar 0035  
                       _LCD_Reset 16B8                     _setAddrWindow 141A  
                  __pintcode_body 121A                        delay_ms@ms 0017  
            end_of_initialization 1192                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FD8E  
                         int_func 121A                   ___lldiv@divisor 0015  
                 ___lldiv@counter 001D                         _RCSTAbits 000FAB  
                         printf@c 0041                           printf@f 0027  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00E4                  drawtext@cursor_y 00E3  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
                      drawChar@bg 0032                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                drawtext@textsize 00DF                        drawPixel@x 001B  
                      drawPixel@y 0018                  _Wait_Half_Second 1660  
                     printf@width 003E                         _TXSTAbits 000FAC  
               __size_of_INT0_isr 014E                    __end_of___wmul 1622  
                   delay_ms@count 001B                        _write_data 16CA  
                   __pidataCOMRAM 167A                    __end_of_chkisr 1296  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 003E  
                       _Nec_code1 0069                    __end_of_printf 045E  
                  __end_of_strcpy 15A0                    __end_of_strlen 1530  
                       _Nec_state 006A               start_initialization 111A  
                 ??_write_command 0013                         _OpenUSART 1306  
             __size_of_fillCircle 0052                   ___llmod@divisor 0022  
                __CFG_OSC$INTIO67 000000                   ___llmod@counter 0026  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                          ??___wmul 0015  
                        ??_chkisr 0003                       __pdataBANK0 0080  
                     __pdataBANK1 0100                   setAddrWindow@x0 0017  
                 setAddrWindow@x1 0015                   setAddrWindow@y0 0014  
                 setAddrWindow@y1 0016                          ??_printf 0031  
                        ??_strcpy 0015                          ??_strlen 0013  
                     __pbssCOMRAM 005D                   ??_setAddrWindow 0017  
                   __pcstackBANK0 00DE                       ??_LCD_Reset 001D  
                    _isdigit$1658 0012          __end_of_fillCircleHelper 0B90  
               __size_of_delay_ms 0052                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 0011  
               __size_of_drawtext 010A                         _bit_count 006C  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 15FA  
                   __pmediumconst FD8E                          ?___lldiv 0011  
                        ?___llmod 001E                         __tft_type 006B  
              drawFastVLine@color 001A                       ?_write_data 0001  
                       _drawPixel 15A0                 __size_of_spiwrite 0014  
               ?_force_nec_state0 0001                          ?_isdigit 0001  
               _Initialize_Screen 0F78                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 1690  
              ??_force_nec_state0 0001                         _hexpowers FF92  
              ?_Initialize_Screen 0001                    __size_of_putch 000E  
                  ___wmul@product 0015               ??_Initialize_Screen 0043  
                        _INT0_isr 090A                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                       fillRect@h 0025                         fillRect@i 002C  
                       fillRect@w 0024                         fillRect@x 002B  
                       fillRect@y 0023                         drawChar@c 002F  
                       drawChar@i 0038                         drawChar@j 0037  
                    ??_fillCircle 0043                         drawChar@x 0036  
                       drawChar@y 002E                        ?_drawPixel 0018  
          __size_of_fillRectangle 00DC          __end_of_Wait_Half_Second 167A  
               ___wmul@multiplier 0011         __end_of_Initialize_Screen 1006  
                    ??_fillScreen 0026                      ??_drawCircle 0024  
                      printf@flag 0040                        printf@prec 0036  
                       main@found 0046                        ?_init_UART 0001  
                     _INTCON2bits 000FF1                         copy_data0 1146  
                       copy_data1 1166                         copy_data2 1186  
                       drawtext@i 00E1            __size_of_drawFastVLine 0088  
                       drawtext@x 00DE                         drawtext@y 0039  
                        _Nec_code 005D                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 1530  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 0061                __end_of_fillCircle 13C8  
                        __Hrparam 0000                __end_of_fillScreen 1660  
                        __Lrparam 0000                __end_of_drawCircle 060C  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of_isdigit 0022                          _delay_ms 13C8  
                        __ptext10 045E                          __ptext11 1660  
                        __ptext20 1092                          __ptext12 0F78  
                        __ptext21 15A0                          __ptext13 156E  
                        __ptext30 16B8                          __ptext22 141A  
                        __ptext14 1644                          __ptext31 13C8  
                        __ptext23 15D0                          __ptext15 0E9C  
                        __ptext32 15FA                          __ptext24 0DAA  
                        __ptext16 0CA0                          __ptext25 1530  
                        __ptext17 14F2                          __ptext34 16F8  
                        __ptext26 0B90                          __ptext18 07B4  
                        __ptext35 090A                          __ptext27 16CA  
                        __ptext19 1468                          __ptext36 1704  
                        __ptext28 16DA                          __ptext29 16A4  
                        _fillRect 1468                          _drawChar 07B4  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 006D  
                        _drawtext 0CA0                        strcpy@from 0013  
                   _fillRectangle 0E9C                     __size_of_main 01A8  
                 fillRectangle@hi 0021                   fillRectangle@lo 0022  
                   _drawFastVLine 1092                         printf@idx 0035  
                        _spiwrite 16A4                         printf@val 003A  
                     ??_drawPixel 001B                          _rowstart 006F  
              fillCircleHelper@x0 0023                fillCircleHelper@y0 0025  
      __size_of_Initialize_Screen 008E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0011                       ??_init_UART 0014  
                        isdigit@c 0013                 ?_fillCircleHelper 0023  
                       spiwrite@x 0011                          intlevel2 0000  
                  ?_fillRectangle 0018                ??_fillCircleHelper 002F  
           __end_of_write_command 16EA                  ___lldiv@dividend 0011  
                 fillScreen@color 0024                      fillCircle@x0 003B  
                    fillCircle@y0 003D                    fillRectangle@h 001A  
                  fillRectangle@w 0019                    fillRectangle@x 0023  
                  fillRectangle@y 0018                    ?_drawFastVLine 0018  
                        printf@ap 0038                 fillCircleHelper@f 0035  
               fillCircleHelper@r 0027                 fillCircleHelper@x 0037  
               fillCircleHelper@y 0039                      ??_write_data 0013  
                      _TIMER1_isr 16F8                     fillRect@color 0026  
                ___lldiv@quotient 0019                          strcpy@cp 0015  
                        strlen@cp 0015                          strcpy@to 0011  
                     fillCircle@r 003F             __end_of_setAddrWindow 1468  
              fillRectangle@color 001B                     drawChar@color 0030  
              __end_of_write_data 16DA         __size_of_force_nec_state0 0008  
                    drawChar@line 0035                      drawChar@size 0034  
