

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 14 11:02:07 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataCOMRAM
    61  001682                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _array1
    65  001682  A2                 	db	162
    66  001683  62                 	db	98
    67  001684  E2                 	db	226
    68  001685  22                 	db	34
    69  001686  02                 	db	2
    70  001687  C2                 	db	194
    71  001688  E0                 	db	224
    72  001689  A8                 	db	168
    73  00168A  90                 	db	144
    74  00168B  68                 	db	104
    75  00168C  98                 	db	152
    76  00168D  B0                 	db	176
    77  00168E  30                 	db	48
    78  00168F  18                 	db	24
    79  001690  7A                 	db	122
    80  001691  10                 	db	16
    81  001692  38                 	db	56
    82  001693  5A                 	db	90
    83  001694  42                 	db	66
    84  001695  4A                 	db	74
    85  001696  52                 	db	82
    86                           
    87                           ;initializer for _wrap
    88  001697  01                 	db	1
    89                           
    90                           	psect	idataBANK0
    91  0014BA                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _D1
    95  0014BA  00                 	db	0
    96  0014BB  00                 	db	0
    97  0014BC  01                 	db	1
    98  0014BD  00                 	db	0
    99  0014BE  00                 	db	0
   100  0014BF  02                 	db	2
   101  0014C0  00                 	db	0
   102  0014C1  00                 	db	0
   103  0014C2  05                 	db	5
   104  0014C3  00                 	db	0
   105  0014C4  00                 	db	0
   106  0014C5  07                 	db	7
   107  0014C6  00                 	db	0
   108  0014C7  00                 	db	0
   109  0014C8  07                 	db	7
   110  0014C9  00                 	db	0
   111  0014CA  00                 	db	0
   112  0014CB  07                 	db	7
   113  0014CC  00                 	db	0
   114  0014CD  00                 	db	0
   115  0014CE  07                 	db	7
   116                           
   117                           ;initializer for _D2
   118  0014CF  00                 	db	0
   119  0014D0  01                 	db	1
   120  0014D1  00                 	db	0
   121  0014D2  00                 	db	0
   122  0014D3  04                 	db	4
   123  0014D4  00                 	db	0
   124  0014D5  00                 	db	0
   125  0014D6  05                 	db	5
   126  0014D7  00                 	db	0
   127  0014D8  00                 	db	0
   128  0014D9  07                 	db	7
   129  0014DA  00                 	db	0
   130  0014DB  00                 	db	0
   131  0014DC  07                 	db	7
   132  0014DD  00                 	db	0
   133  0014DE  00                 	db	0
   134  0014DF  07                 	db	7
   135  0014E0  00                 	db	0
   136  0014E1  00                 	db	0
   137  0014E2  07                 	db	7
   138  0014E3  00                 	db	0
   139                           
   140                           ;initializer for _D3
   141  0014E4  10                 	db	16
   142  0014E5  00                 	db	0
   143  0014E6  00                 	db	0
   144  0014E7  40                 	db	64
   145  0014E8  00                 	db	0
   146  0014E9  00                 	db	0
   147  0014EA  50                 	db	80
   148  0014EB  00                 	db	0
   149  0014EC  00                 	db	0
   150  0014ED  70                 	db	112
   151  0014EE  00                 	db	0
   152  0014EF  00                 	db	0
   153  0014F0  70                 	db	112
   154  0014F1  00                 	db	0
   155  0014F2  00                 	db	0
   156  0014F3  70                 	db	112
   157  0014F4  00                 	db	0
   158  0014F5  00                 	db	0
   159  0014F6  70                 	db	112
   160  0014F7  00                 	db	0
   161  0014F8  00                 	db	0
   162                           
   163                           	psect	idataBANK1
   164  0011A4                     __pidataBANK1:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _color
   168  0011A4  F800               	dw	63488
   169  0011A6  F800               	dw	63488
   170  0011A8  F800               	dw	63488
   171  0011AA  001F               	dw	31
   172  0011AC  001F               	dw	31
   173  0011AE  07E0               	dw	2016
   174  0011B0  F81F               	dw	63519
   175  0011B2  F81F               	dw	63519
   176  0011B4  F81F               	dw	63519
   177  0011B6  0000               	dw	0
   178  0011B8  0000               	dw	0
   179  0011BA  0000               	dw	0
   180  0011BC  0000               	dw	0
   181  0011BE  0000               	dw	0
   182  0011C0  0000               	dw	0
   183  0011C2  0000               	dw	0
   184  0011C4  0000               	dw	0
   185  0011C6  0000               	dw	0
   186  0011C8  0000               	dw	0
   187  0011CA  0000               	dw	0
   188  0011CC  0000               	dw	0
   189                           
   190                           ;initializer for _txt1
   191  0011CE  43                 	db	67
   192  0011CF  48                 	db	72
   193  0011D0  2D                 	db	45
   194  0011D1  00                 	db	0
   195  0011D2  43                 	db	67
   196  0011D3  48                 	db	72
   197  0011D4  20                 	db	32
   198  0011D5  00                 	db	0
   199  0011D6  43                 	db	67
   200  0011D7  48                 	db	72
   201  0011D8  2B                 	db	43
   202  0011D9  00                 	db	0
   203  0011DA  50                 	db	80
   204  0011DB  52                 	db	82
   205  0011DC  56                 	db	86
   206  0011DD  00                 	db	0
   207  0011DE  4E                 	db	78
   208  0011DF  58                 	db	88
   209  0011E0  54                 	db	84
   210  0011E1  00                 	db	0
   211  0011E2  50                 	db	80
   212  0011E3  2F                 	db	47
   213  0011E4  50                 	db	80
   214  0011E5  00                 	db	0
   215  0011E6  56                 	db	86
   216  0011E7  4C                 	db	76
   217  0011E8  2D                 	db	45
   218  0011E9  00                 	db	0
   219  0011EA  56                 	db	86
   220  0011EB  4C                 	db	76
   221  0011EC  2B                 	db	43
   222  0011ED  00                 	db	0
   223  0011EE  45                 	db	69
   224  0011EF  51                 	db	81
   225  0011F0  20                 	db	32
   226  0011F1  00                 	db	0
   227  0011F2  20                 	db	32
   228  0011F3  30                 	db	48
   229  0011F4  20                 	db	32
   230  0011F5  00                 	db	0
   231  0011F6  31                 	db	49
   232  0011F7  30                 	db	48
   233  0011F8  30                 	db	48
   234  0011F9  00                 	db	0
   235  0011FA  32                 	db	50
   236  0011FB  30                 	db	48
   237  0011FC  30                 	db	48
   238  0011FD  00                 	db	0
   239  0011FE  20                 	db	32
   240  0011FF  31                 	db	49
   241  001200  20                 	db	32
   242  001201  00                 	db	0
   243  001202  20                 	db	32
   244  001203  32                 	db	50
   245  001204  20                 	db	32
   246  001205  00                 	db	0
   247  001206  20                 	db	32
   248  001207  33                 	db	51
   249  001208  20                 	db	32
   250  001209  00                 	db	0
   251  00120A  20                 	db	32
   252  00120B  34                 	db	52
   253  00120C  20                 	db	32
   254  00120D  00                 	db	0
   255  00120E  20                 	db	32
   256  00120F  35                 	db	53
   257  001210  20                 	db	32
   258  001211  00                 	db	0
   259  001212  20                 	db	32
   260  001213  36                 	db	54
   261  001214  20                 	db	32
   262  001215  00                 	db	0
   263  001216  20                 	db	32
   264  001217  37                 	db	55
   265  001218  20                 	db	32
   266  001219  00                 	db	0
   267  00121A  20                 	db	32
   268  00121B  38                 	db	56
   269  00121C  20                 	db	32
   270  00121D  00                 	db	0
   271  00121E  20                 	db	32
   272  00121F  39                 	db	57
   273  001220  20                 	db	32
   274  001221  00                 	db	0
   275                           
   276                           	psect	mediumconst
   277  00FD8E                     __pmediumconst:
   278                           	opt stack 0
   279  00FD8E  00                 	db	0
   280  00FD8F                     _font:
   281                           	opt stack 0
   282  00FD8F  00                 	db	0
   283  00FD90  00                 	db	0
   284  00FD91  00                 	db	0
   285  00FD92  00                 	db	0
   286  00FD93  00                 	db	0
   287  00FD94  00                 	db	0
   288  00FD95  00                 	db	0
   289  00FD96  5F                 	db	95
   290  00FD97  00                 	db	0
   291  00FD98  00                 	db	0
   292  00FD99  00                 	db	0
   293  00FD9A  07                 	db	7
   294  00FD9B  00                 	db	0
   295  00FD9C  07                 	db	7
   296  00FD9D  00                 	db	0
   297  00FD9E  14                 	db	20
   298  00FD9F  7F                 	db	127
   299  00FDA0  14                 	db	20
   300  00FDA1  7F                 	db	127
   301  00FDA2  14                 	db	20
   302  00FDA3  24                 	db	36
   303  00FDA4  2A                 	db	42
   304  00FDA5  7F                 	db	127
   305  00FDA6  2A                 	db	42
   306  00FDA7  12                 	db	18
   307  00FDA8  23                 	db	35
   308  00FDA9  13                 	db	19
   309  00FDAA  08                 	db	8
   310  00FDAB  64                 	db	100
   311  00FDAC  62                 	db	98
   312  00FDAD  36                 	db	54
   313  00FDAE  49                 	db	73
   314  00FDAF  56                 	db	86
   315  00FDB0  20                 	db	32
   316  00FDB1  50                 	db	80
   317  00FDB2  00                 	db	0
   318  00FDB3  08                 	db	8
   319  00FDB4  07                 	db	7
   320  00FDB5  03                 	db	3
   321  00FDB6  00                 	db	0
   322  00FDB7  00                 	db	0
   323  00FDB8  1C                 	db	28
   324  00FDB9  22                 	db	34
   325  00FDBA  41                 	db	65
   326  00FDBB  00                 	db	0
   327  00FDBC  00                 	db	0
   328  00FDBD  41                 	db	65
   329  00FDBE  22                 	db	34
   330  00FDBF  1C                 	db	28
   331  00FDC0  00                 	db	0
   332  00FDC1  2A                 	db	42
   333  00FDC2  1C                 	db	28
   334  00FDC3  7F                 	db	127
   335  00FDC4  1C                 	db	28
   336  00FDC5  2A                 	db	42
   337  00FDC6  08                 	db	8
   338  00FDC7  08                 	db	8
   339  00FDC8  3E                 	db	62
   340  00FDC9  08                 	db	8
   341  00FDCA  08                 	db	8
   342  00FDCB  00                 	db	0
   343  00FDCC  80                 	db	128
   344  00FDCD  70                 	db	112
   345  00FDCE  30                 	db	48
   346  00FDCF  00                 	db	0
   347  00FDD0  08                 	db	8
   348  00FDD1  08                 	db	8
   349  00FDD2  08                 	db	8
   350  00FDD3  08                 	db	8
   351  00FDD4  08                 	db	8
   352  00FDD5  00                 	db	0
   353  00FDD6  00                 	db	0
   354  00FDD7  60                 	db	96
   355  00FDD8  60                 	db	96
   356  00FDD9  00                 	db	0
   357  00FDDA  20                 	db	32
   358  00FDDB  10                 	db	16
   359  00FDDC  08                 	db	8
   360  00FDDD  04                 	db	4
   361  00FDDE  02                 	db	2
   362  00FDDF  3E                 	db	62
   363  00FDE0  51                 	db	81
   364  00FDE1  49                 	db	73
   365  00FDE2  45                 	db	69
   366  00FDE3  3E                 	db	62
   367  00FDE4  00                 	db	0
   368  00FDE5  42                 	db	66
   369  00FDE6  7F                 	db	127
   370  00FDE7  40                 	db	64
   371  00FDE8  00                 	db	0
   372  00FDE9  72                 	db	114
   373  00FDEA  49                 	db	73
   374  00FDEB  49                 	db	73
   375  00FDEC  49                 	db	73
   376  00FDED  46                 	db	70
   377  00FDEE  21                 	db	33
   378  00FDEF  41                 	db	65
   379  00FDF0  49                 	db	73
   380  00FDF1  4D                 	db	77
   381  00FDF2  33                 	db	51
   382  00FDF3  18                 	db	24
   383  00FDF4  14                 	db	20
   384  00FDF5  12                 	db	18
   385  00FDF6  7F                 	db	127
   386  00FDF7  10                 	db	16
   387  00FDF8  27                 	db	39
   388  00FDF9  45                 	db	69
   389  00FDFA  45                 	db	69
   390  00FDFB  45                 	db	69
   391  00FDFC  39                 	db	57
   392  00FDFD  3C                 	db	60
   393  00FDFE  4A                 	db	74
   394  00FDFF  49                 	db	73
   395  00FE00  49                 	db	73
   396  00FE01  31                 	db	49
   397  00FE02  41                 	db	65
   398  00FE03  21                 	db	33
   399  00FE04  11                 	db	17
   400  00FE05  09                 	db	9
   401  00FE06  07                 	db	7
   402  00FE07  36                 	db	54
   403  00FE08  49                 	db	73
   404  00FE09  49                 	db	73
   405  00FE0A  49                 	db	73
   406  00FE0B  36                 	db	54
   407  00FE0C  46                 	db	70
   408  00FE0D  49                 	db	73
   409  00FE0E  49                 	db	73
   410  00FE0F  29                 	db	41
   411  00FE10  1E                 	db	30
   412  00FE11  00                 	db	0
   413  00FE12  00                 	db	0
   414  00FE13  14                 	db	20
   415  00FE14  00                 	db	0
   416  00FE15  00                 	db	0
   417  00FE16  00                 	db	0
   418  00FE17  40                 	db	64
   419  00FE18  34                 	db	52
   420  00FE19  00                 	db	0
   421  00FE1A  00                 	db	0
   422  00FE1B  00                 	db	0
   423  00FE1C  08                 	db	8
   424  00FE1D  14                 	db	20
   425  00FE1E  22                 	db	34
   426  00FE1F  41                 	db	65
   427  00FE20  14                 	db	20
   428  00FE21  14                 	db	20
   429  00FE22  14                 	db	20
   430  00FE23  14                 	db	20
   431  00FE24  14                 	db	20
   432  00FE25  00                 	db	0
   433  00FE26  41                 	db	65
   434  00FE27  22                 	db	34
   435  00FE28  14                 	db	20
   436  00FE29  08                 	db	8
   437  00FE2A  02                 	db	2
   438  00FE2B  01                 	db	1
   439  00FE2C  59                 	db	89
   440  00FE2D  09                 	db	9
   441  00FE2E  06                 	db	6
   442  00FE2F  3E                 	db	62
   443  00FE30  41                 	db	65
   444  00FE31  5D                 	db	93
   445  00FE32  59                 	db	89
   446  00FE33  4E                 	db	78
   447  00FE34  7C                 	db	124
   448  00FE35  12                 	db	18
   449  00FE36  11                 	db	17
   450  00FE37  12                 	db	18
   451  00FE38  7C                 	db	124
   452  00FE39  7F                 	db	127
   453  00FE3A  49                 	db	73
   454  00FE3B  49                 	db	73
   455  00FE3C  49                 	db	73
   456  00FE3D  36                 	db	54
   457  00FE3E  3E                 	db	62
   458  00FE3F  41                 	db	65
   459  00FE40  41                 	db	65
   460  00FE41  41                 	db	65
   461  00FE42  22                 	db	34
   462  00FE43  7F                 	db	127
   463  00FE44  41                 	db	65
   464  00FE45  41                 	db	65
   465  00FE46  41                 	db	65
   466  00FE47  3E                 	db	62
   467  00FE48  7F                 	db	127
   468  00FE49  49                 	db	73
   469  00FE4A  49                 	db	73
   470  00FE4B  49                 	db	73
   471  00FE4C  41                 	db	65
   472  00FE4D  7F                 	db	127
   473  00FE4E  09                 	db	9
   474  00FE4F  09                 	db	9
   475  00FE50  09                 	db	9
   476  00FE51  01                 	db	1
   477  00FE52  3E                 	db	62
   478  00FE53  41                 	db	65
   479  00FE54  41                 	db	65
   480  00FE55  51                 	db	81
   481  00FE56  73                 	db	115
   482  00FE57  7F                 	db	127
   483  00FE58  08                 	db	8
   484  00FE59  08                 	db	8
   485  00FE5A  08                 	db	8
   486  00FE5B  7F                 	db	127
   487  00FE5C  00                 	db	0
   488  00FE5D  41                 	db	65
   489  00FE5E  7F                 	db	127
   490  00FE5F  41                 	db	65
   491  00FE60  00                 	db	0
   492  00FE61  20                 	db	32
   493  00FE62  40                 	db	64
   494  00FE63  41                 	db	65
   495  00FE64  3F                 	db	63
   496  00FE65  01                 	db	1
   497  00FE66  7F                 	db	127
   498  00FE67  08                 	db	8
   499  00FE68  14                 	db	20
   500  00FE69  22                 	db	34
   501  00FE6A  41                 	db	65
   502  00FE6B  7F                 	db	127
   503  00FE6C  40                 	db	64
   504  00FE6D  40                 	db	64
   505  00FE6E  40                 	db	64
   506  00FE6F  40                 	db	64
   507  00FE70  7F                 	db	127
   508  00FE71  02                 	db	2
   509  00FE72  1C                 	db	28
   510  00FE73  02                 	db	2
   511  00FE74  7F                 	db	127
   512  00FE75  7F                 	db	127
   513  00FE76  04                 	db	4
   514  00FE77  08                 	db	8
   515  00FE78  10                 	db	16
   516  00FE79  7F                 	db	127
   517  00FE7A  3E                 	db	62
   518  00FE7B  41                 	db	65
   519  00FE7C  41                 	db	65
   520  00FE7D  41                 	db	65
   521  00FE7E  3E                 	db	62
   522  00FE7F  7F                 	db	127
   523  00FE80  09                 	db	9
   524  00FE81  09                 	db	9
   525  00FE82  09                 	db	9
   526  00FE83  06                 	db	6
   527  00FE84  3E                 	db	62
   528  00FE85  41                 	db	65
   529  00FE86  51                 	db	81
   530  00FE87  21                 	db	33
   531  00FE88  5E                 	db	94
   532  00FE89  7F                 	db	127
   533  00FE8A  09                 	db	9
   534  00FE8B  19                 	db	25
   535  00FE8C  29                 	db	41
   536  00FE8D  46                 	db	70
   537  00FE8E                     __end_of_font:
   538                           	opt stack 0
   539  00FE8E                     _font2:
   540                           	opt stack 0
   541  00FE8E  26                 	db	38
   542  00FE8F  49                 	db	73
   543  00FE90  49                 	db	73
   544  00FE91  49                 	db	73
   545  00FE92  32                 	db	50
   546  00FE93  03                 	db	3
   547  00FE94  01                 	db	1
   548  00FE95  7F                 	db	127
   549  00FE96  01                 	db	1
   550  00FE97  03                 	db	3
   551  00FE98  3F                 	db	63
   552  00FE99  40                 	db	64
   553  00FE9A  40                 	db	64
   554  00FE9B  40                 	db	64
   555  00FE9C  3F                 	db	63
   556  00FE9D  1F                 	db	31
   557  00FE9E  20                 	db	32
   558  00FE9F  40                 	db	64
   559  00FEA0  20                 	db	32
   560  00FEA1  1F                 	db	31
   561  00FEA2  3F                 	db	63
   562  00FEA3  40                 	db	64
   563  00FEA4  38                 	db	56
   564  00FEA5  40                 	db	64
   565  00FEA6  3F                 	db	63
   566  00FEA7  63                 	db	99
   567  00FEA8  14                 	db	20
   568  00FEA9  08                 	db	8
   569  00FEAA  14                 	db	20
   570  00FEAB  63                 	db	99
   571  00FEAC  03                 	db	3
   572  00FEAD  04                 	db	4
   573  00FEAE  78                 	db	120
   574  00FEAF  04                 	db	4
   575  00FEB0  03                 	db	3
   576  00FEB1  61                 	db	97
   577  00FEB2  59                 	db	89
   578  00FEB3  49                 	db	73
   579  00FEB4  4D                 	db	77
   580  00FEB5  43                 	db	67
   581  00FEB6  00                 	db	0
   582  00FEB7  7F                 	db	127
   583  00FEB8  41                 	db	65
   584  00FEB9  41                 	db	65
   585  00FEBA  41                 	db	65
   586  00FEBB  02                 	db	2
   587  00FEBC  04                 	db	4
   588  00FEBD  08                 	db	8
   589  00FEBE  10                 	db	16
   590  00FEBF  20                 	db	32
   591  00FEC0  00                 	db	0
   592  00FEC1  41                 	db	65
   593  00FEC2  41                 	db	65
   594  00FEC3  41                 	db	65
   595  00FEC4  7F                 	db	127
   596  00FEC5  04                 	db	4
   597  00FEC6  02                 	db	2
   598  00FEC7  01                 	db	1
   599  00FEC8  02                 	db	2
   600  00FEC9  04                 	db	4
   601  00FECA  40                 	db	64
   602  00FECB  40                 	db	64
   603  00FECC  40                 	db	64
   604  00FECD  40                 	db	64
   605  00FECE  40                 	db	64
   606  00FECF  00                 	db	0
   607  00FED0  03                 	db	3
   608  00FED1  07                 	db	7
   609  00FED2  08                 	db	8
   610  00FED3  00                 	db	0
   611  00FED4  20                 	db	32
   612  00FED5  54                 	db	84
   613  00FED6  54                 	db	84
   614  00FED7  78                 	db	120
   615  00FED8  40                 	db	64
   616  00FED9  7F                 	db	127
   617  00FEDA  28                 	db	40
   618  00FEDB  44                 	db	68
   619  00FEDC  44                 	db	68
   620  00FEDD  38                 	db	56
   621  00FEDE  38                 	db	56
   622  00FEDF  44                 	db	68
   623  00FEE0  44                 	db	68
   624  00FEE1  44                 	db	68
   625  00FEE2  28                 	db	40
   626  00FEE3  38                 	db	56
   627  00FEE4  44                 	db	68
   628  00FEE5  44                 	db	68
   629  00FEE6  28                 	db	40
   630  00FEE7  7F                 	db	127
   631  00FEE8  38                 	db	56
   632  00FEE9  54                 	db	84
   633  00FEEA  54                 	db	84
   634  00FEEB  54                 	db	84
   635  00FEEC  18                 	db	24
   636  00FEED  00                 	db	0
   637  00FEEE  08                 	db	8
   638  00FEEF  7E                 	db	126
   639  00FEF0  09                 	db	9
   640  00FEF1  02                 	db	2
   641  00FEF2  18                 	db	24
   642  00FEF3  A4                 	db	164
   643  00FEF4  A4                 	db	164
   644  00FEF5  9C                 	db	156
   645  00FEF6  78                 	db	120
   646  00FEF7  7F                 	db	127
   647  00FEF8  08                 	db	8
   648  00FEF9  04                 	db	4
   649  00FEFA  04                 	db	4
   650  00FEFB  78                 	db	120
   651  00FEFC  00                 	db	0
   652  00FEFD  44                 	db	68
   653  00FEFE  7D                 	db	125
   654  00FEFF  40                 	db	64
   655  00FF00  00                 	db	0
   656  00FF01  20                 	db	32
   657  00FF02  40                 	db	64
   658  00FF03  40                 	db	64
   659  00FF04  3D                 	db	61
   660  00FF05  00                 	db	0
   661  00FF06  7F                 	db	127
   662  00FF07  10                 	db	16
   663  00FF08  28                 	db	40
   664  00FF09  44                 	db	68
   665  00FF0A  00                 	db	0
   666  00FF0B  00                 	db	0
   667  00FF0C  41                 	db	65
   668  00FF0D  7F                 	db	127
   669  00FF0E  40                 	db	64
   670  00FF0F  00                 	db	0
   671  00FF10  7C                 	db	124
   672  00FF11  04                 	db	4
   673  00FF12  78                 	db	120
   674  00FF13  04                 	db	4
   675  00FF14  78                 	db	120
   676  00FF15  7C                 	db	124
   677  00FF16  08                 	db	8
   678  00FF17  04                 	db	4
   679  00FF18  04                 	db	4
   680  00FF19  78                 	db	120
   681  00FF1A  38                 	db	56
   682  00FF1B  44                 	db	68
   683  00FF1C  44                 	db	68
   684  00FF1D  44                 	db	68
   685  00FF1E  38                 	db	56
   686  00FF1F  FC                 	db	252
   687  00FF20  18                 	db	24
   688  00FF21  24                 	db	36
   689  00FF22  24                 	db	36
   690  00FF23  18                 	db	24
   691  00FF24  18                 	db	24
   692  00FF25  24                 	db	36
   693  00FF26  24                 	db	36
   694  00FF27  18                 	db	24
   695  00FF28  FC                 	db	252
   696  00FF29  7C                 	db	124
   697  00FF2A  08                 	db	8
   698  00FF2B  04                 	db	4
   699  00FF2C  04                 	db	4
   700  00FF2D  08                 	db	8
   701  00FF2E  48                 	db	72
   702  00FF2F  54                 	db	84
   703  00FF30  54                 	db	84
   704  00FF31  54                 	db	84
   705  00FF32  24                 	db	36
   706  00FF33  04                 	db	4
   707  00FF34  04                 	db	4
   708  00FF35  3F                 	db	63
   709  00FF36  44                 	db	68
   710  00FF37  24                 	db	36
   711  00FF38  3C                 	db	60
   712  00FF39  40                 	db	64
   713  00FF3A  40                 	db	64
   714  00FF3B  20                 	db	32
   715  00FF3C  7C                 	db	124
   716  00FF3D  1C                 	db	28
   717  00FF3E  20                 	db	32
   718  00FF3F  40                 	db	64
   719  00FF40  20                 	db	32
   720  00FF41  1C                 	db	28
   721  00FF42  3C                 	db	60
   722  00FF43  40                 	db	64
   723  00FF44  30                 	db	48
   724  00FF45  40                 	db	64
   725  00FF46  3C                 	db	60
   726  00FF47  44                 	db	68
   727  00FF48  28                 	db	40
   728  00FF49  10                 	db	16
   729  00FF4A  28                 	db	40
   730  00FF4B  44                 	db	68
   731  00FF4C  4C                 	db	76
   732  00FF4D  90                 	db	144
   733  00FF4E  90                 	db	144
   734  00FF4F  90                 	db	144
   735  00FF50  7C                 	db	124
   736  00FF51  44                 	db	68
   737  00FF52  64                 	db	100
   738  00FF53  54                 	db	84
   739  00FF54  4C                 	db	76
   740  00FF55  44                 	db	68
   741  00FF56  00                 	db	0
   742  00FF57  08                 	db	8
   743  00FF58  36                 	db	54
   744  00FF59  41                 	db	65
   745  00FF5A  00                 	db	0
   746  00FF5B  00                 	db	0
   747  00FF5C  00                 	db	0
   748  00FF5D  77                 	db	119
   749  00FF5E  00                 	db	0
   750  00FF5F  00                 	db	0
   751  00FF60  00                 	db	0
   752  00FF61  41                 	db	65
   753  00FF62  36                 	db	54
   754  00FF63  08                 	db	8
   755  00FF64  00                 	db	0
   756  00FF65  02                 	db	2
   757  00FF66  01                 	db	1
   758  00FF67  02                 	db	2
   759  00FF68  04                 	db	4
   760  00FF69  02                 	db	2
   761  00FF6A                     __end_of_font2:
   762                           	opt stack 0
   763  00FF6A                     _dpowers:
   764                           	opt stack 0
   765  00FF6A  0001               	dw	1
   766  00FF6C  0000               	dw	0
   767  00FF6E  000A               	dw	10
   768  00FF70  0000               	dw	0
   769  00FF72  0064               	dw	100
   770  00FF74  0000               	dw	0
   771  00FF76  03E8               	dw	1000
   772  00FF78  0000               	dw	0
   773  00FF7A  2710               	dw	10000
   774  00FF7C  0000               	dw	0
   775  00FF7E  86A0               	dw	34464
   776  00FF80  0001               	dw	1
   777  00FF82  4240               	dw	16960
   778  00FF84  000F               	dw	15
   779  00FF86  9680               	dw	38528
   780  00FF88  0098               	dw	152
   781  00FF8A  E100               	dw	57600
   782  00FF8C  05F5               	dw	1525
   783  00FF8E  CA00               	dw	51712
   784  00FF90  3B9A               	dw	15258
   785  00FF92                     __end_of_dpowers:
   786                           	opt stack 0
   787  00FF92                     _hexpowers:
   788                           	opt stack 0
   789  00FF92  0001               	dw	1
   790  00FF94  0000               	dw	0
   791  00FF96  0010               	dw	16
   792  00FF98  0000               	dw	0
   793  00FF9A  0100               	dw	256
   794  00FF9C  0000               	dw	0
   795  00FF9E  1000               	dw	4096
   796  00FFA0  0000               	dw	0
   797  00FFA2  0000               	dw	0
   798  00FFA4  0001               	dw	1
   799  00FFA6  0000               	dw	0
   800  00FFA8  0010               	dw	16
   801  00FFAA  0000               	dw	0
   802  00FFAC  0100               	dw	256
   803  00FFAE  0000               	dw	0
   804  00FFB0  1000               	dw	4096
   805  00FFB2                     __end_of_hexpowers:
   806                           	opt stack 0
   807  0000                     _ADCON1	set	4033
   808  0000                     _CCP2CON	set	4026
   809  0000                     _CCPR2L	set	4027
   810  0000                     _INTCON2bits	set	4081
   811  0000                     _INTCONbits	set	4082
   812  0000                     _OSCCON	set	4051
   813  0000                     _PIE1bits	set	3997
   814  0000                     _PIR1bits	set	3998
   815  0000                     _PIR2bits	set	4001
   816  0000                     _PORTBbits	set	3969
   817  0000                     _PORTCbits	set	3970
   818  0000                     _PORTD	set	3971
   819  0000                     _PORTE	set	3972
   820  0000                     _PR2	set	4043
   821  0000                     _RCSTA	set	4011
   822  0000                     _RCSTAbits	set	4011
   823  0000                     _SPBRG	set	4015
   824  0000                     _SPBRGH	set	4016
   825  0000                     _SSPBUF	set	4041
   826  0000                     _SSPCON1	set	4038
   827  0000                     _SSPSTAT	set	4039
   828  0000                     _SSPSTATbits	set	4039
   829  0000                     _T0CON	set	4053
   830  0000                     _T0CONbits	set	4053
   831  0000                     _T1CON	set	4045
   832  0000                     _T1CONbits	set	4045
   833  0000                     _T2CON	set	4042
   834  0000                     _T3CON	set	4017
   835  0000                     _T3CONbits	set	4017
   836  0000                     _TMR0H	set	4055
   837  0000                     _TMR0L	set	4054
   838  0000                     _TMR1H	set	4047
   839  0000                     _TMR1L	set	4046
   840  0000                     _TMR3H	set	4019
   841  0000                     _TMR3L	set	4018
   842  0000                     _TRISB	set	3987
   843  0000                     _TRISC	set	3988
   844  0000                     _TRISCbits	set	3988
   845  0000                     _TRISD	set	3989
   846  0000                     _TRISE	set	3990
   847  0000                     _TXREG	set	4013
   848  0000                     _TXSTA	set	4012
   849  0000                     _TXSTAbits	set	4012
   850  0000                     _TRMT	set	32097
   851  0000                     _nRBPU	set	32655
   852  00FFB2                     STR_1:
   853  00FFB2  4E                 	db	78	;'N'
   854  00FFB3  45                 	db	69	;'E'
   855  00FFB4  43                 	db	67	;'C'
   856  00FFB5  5F                 	db	95	;'_'
   857  00FFB6  43                 	db	67	;'C'
   858  00FFB7  6F                 	db	111	;'o'
   859  00FFB8  64                 	db	100	;'d'
   860  00FFB9  65                 	db	101	;'e'
   861  00FFBA  20                 	db	32
   862  00FFBB  3D                 	db	61	;'='
   863  00FFBC  20                 	db	32
   864  00FFBD  25                 	db	37
   865  00FFBE  30                 	db	48	;'0'
   866  00FFBF  38                 	db	56	;'8'
   867  00FFC0  6C                 	db	108	;'l'
   868  00FFC1  78                 	db	120	;'x'
   869  00FFC2  20                 	db	32
   870  00FFC3  25                 	db	37
   871  00FFC4  78                 	db	120	;'x'
   872  00FFC5  20                 	db	32
   873  00FFC6  46                 	db	70	;'F'
   874  00FFC7  6F                 	db	111	;'o'
   875  00FFC8  75                 	db	117	;'u'
   876  00FFC9  6E                 	db	110	;'n'
   877  00FFCA  64                 	db	100	;'d'
   878  00FFCB  20                 	db	32
   879  00FFCC  3D                 	db	61	;'='
   880  00FFCD  20                 	db	32
   881  00FFCE  25                 	db	37
   882  00FFCF  64                 	db	100	;'d'
   883  00FFD0  20                 	db	32
   884  00FFD1  0D                 	db	13
   885  00FFD2  0A                 	db	10
   886  00FFD3  00                 	db	0
   887  00FFD4                     STR_2:
   888  00FFD4  45                 	db	69	;'E'
   889  00FFD5  43                 	db	67	;'C'
   890  00FFD6  45                 	db	69	;'E'
   891  00FFD7  33                 	db	51	;'3'
   892  00FFD8  33                 	db	51	;'3'
   893  00FFD9  30                 	db	48	;'0'
   894  00FFDA  31                 	db	49	;'1'
   895  00FFDB  4C                 	db	76	;'L'
   896  00FFDC  20                 	db	32
   897  00FFDD  53                 	db	83	;'S'
   898  00FFDE  70                 	db	112	;'p'
   899  00FFDF  20                 	db	32
   900  00FFE0  32                 	db	50	;'2'
   901  00FFE1  32                 	db	50	;'2'
   902  00FFE2  2D                 	db	45
   903  00FFE3  53                 	db	83	;'S'
   904  00FFE4  31                 	db	49	;'1'
   905  00FFE5  00                 	db	0
   906  00FFE6                     STR_4:
   907  00FFE6  30                 	db	48	;'0'
   908  00FFE7  31                 	db	49	;'1'
   909  00FFE8  32                 	db	50	;'2'
   910  00FFE9  33                 	db	51	;'3'
   911  00FFEA  34                 	db	52	;'4'
   912  00FFEB  35                 	db	53	;'5'
   913  00FFEC  36                 	db	54	;'6'
   914  00FFED  37                 	db	55	;'7'
   915  00FFEE  38                 	db	56	;'8'
   916  00FFEF  39                 	db	57	;'9'
   917  00FFF0  61                 	db	97	;'a'
   918  00FFF1  62                 	db	98	;'b'
   919  00FFF2  63                 	db	99	;'c'
   920  00FFF3  64                 	db	100	;'d'
   921  00FFF4  65                 	db	101	;'e'
   922  00FFF5  66                 	db	102	;'f'
   923  00FFF6  00                 	db	0
   924  00FFF7                     STR_3:
   925  00FFF7  4C                 	db	76	;'L'
   926  00FFF8  41                 	db	65	;'A'
   927  00FFF9  42                 	db	66	;'B'
   928  00FFFA  20                 	db	32
   929  00FFFB  31                 	db	49	;'1'
   930  00FFFC  30                 	db	48	;'0'
   931  00FFFD  20                 	db	32
   932  00FFFE  00                 	db	0
   933                           
   934                           ; #config settings
   935  00FFFF  00                 	db	0	; dummy byte at the end
   936  0000                     
   937                           	psect	cinit
   938  001122                     __pcinit:
   939                           	opt stack 0
   940  001122                     start_initialization:
   941                           	opt stack 0
   942  001122                     __initialization:
   943                           	opt stack 0
   944                           
   945                           ; Clear objects allocated to BANK0 (31 bytes)
   946  001122  EE00  F0BF         	lfsr	0,__pbssBANK0
   947  001126  0E1F               	movlw	31
   948  001128                     clear_0:
   949  001128  6AEE               	clrf	postinc0,c
   950  00112A  06E8               	decf	wreg,f,c
   951  00112C  E1FD               	bnz	clear_0
   952                           
   953                           ; Clear objects allocated to COMRAM (19 bytes)
   954  00112E  EE00  F05D         	lfsr	0,__pbssCOMRAM
   955  001132  0E13               	movlw	19
   956  001134                     clear_1:
   957  001134  6AEE               	clrf	postinc0,c
   958  001136  06E8               	decf	wreg,f,c
   959  001138  E1FD               	bnz	clear_1
   960                           
   961                           ; Initialize objects allocated to BANK1 (126 bytes)
   962                           ; load TBLPTR registers with __pidataBANK1
   963  00113A  0EA4               	movlw	low __pidataBANK1
   964  00113C  6EF6               	movwf	tblptrl,c
   965  00113E  0E11               	movlw	high __pidataBANK1
   966  001140  6EF7               	movwf	tblptrh,c
   967  001142  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   968  001144  6EF8               	movwf	tblptru,c
   969  001146  EE01  F000         	lfsr	0,__pdataBANK1
   970  00114A  EE10 F07E          	lfsr	1,126
   971  00114E                     copy_data0:
   972  00114E  0009               	tblrd		*+
   973  001150  CFF5 FFEE          	movff	tablat,postinc0
   974  001154  50E5               	movf	postdec1,w,c
   975  001156  50E1               	movf	fsr1l,w,c
   976  001158  E1FA               	bnz	copy_data0
   977                           
   978                           ; Initialize objects allocated to BANK0 (63 bytes)
   979                           ; load TBLPTR registers with __pidataBANK0
   980  00115A  0EBA               	movlw	low __pidataBANK0
   981  00115C  6EF6               	movwf	tblptrl,c
   982  00115E  0E14               	movlw	high __pidataBANK0
   983  001160  6EF7               	movwf	tblptrh,c
   984  001162  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   985  001164  6EF8               	movwf	tblptru,c
   986  001166  EE00  F080         	lfsr	0,__pdataBANK0
   987  00116A  EE10 F03F          	lfsr	1,63
   988  00116E                     copy_data1:
   989  00116E  0009               	tblrd		*+
   990  001170  CFF5 FFEE          	movff	tablat,postinc0
   991  001174  50E5               	movf	postdec1,w,c
   992  001176  50E1               	movf	fsr1l,w,c
   993  001178  E1FA               	bnz	copy_data1
   994                           
   995                           ; Initialize objects allocated to COMRAM (22 bytes)
   996                           ; load TBLPTR registers with __pidataCOMRAM
   997  00117A  0E82               	movlw	low __pidataCOMRAM
   998  00117C  6EF6               	movwf	tblptrl,c
   999  00117E  0E16               	movlw	high __pidataCOMRAM
  1000  001180  6EF7               	movwf	tblptrh,c
  1001  001182  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1002  001184  6EF8               	movwf	tblptru,c
  1003  001186  EE00  F047         	lfsr	0,__pdataCOMRAM
  1004  00118A  EE10 F016          	lfsr	1,22
  1005  00118E                     copy_data2:
  1006  00118E  0009               	tblrd		*+
  1007  001190  CFF5 FFEE          	movff	tablat,postinc0
  1008  001194  50E5               	movf	postdec1,w,c
  1009  001196  50E1               	movf	fsr1l,w,c
  1010  001198  E1FA               	bnz	copy_data2
  1011  00119A                     end_of_initialization:
  1012                           	opt stack 0
  1013  00119A                     __end_of__initialization:
  1014                           	opt stack 0
  1015  00119A  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1016  00119C  6EF8               	movwf	tblptru,c
  1017  00119E  0100               	movlb	0
  1018  0011A0  EF2F  F002         	goto	_main	;jump to C main() function
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postdec1	equ	0xFE5
  1026                           fsr1l	equ	0xFE1
  1027                           
  1028                           	psect	bssCOMRAM
  1029  00005D                     __pbssCOMRAM:
  1030                           	opt stack 0
  1031  00005D                     _Nec_code:
  1032                           	opt stack 0
  1033  00005D                     	ds	4
  1034  000061                     _Time_Elapsed:
  1035                           	opt stack 0
  1036  000061                     	ds	2
  1037  000063                     _nbr:
  1038                           	opt stack 0
  1039  000063                     	ds	2
  1040  000065                     _nec_ok:
  1041                           	opt stack 0
  1042  000065                     	ds	2
  1043  000067                     _txt:
  1044                           	opt stack 0
  1045  000067                     	ds	2
  1046  000069                     _Nec_code1:
  1047                           	opt stack 0
  1048  000069                     	ds	1
  1049  00006A                     _Nec_state:
  1050                           	opt stack 0
  1051  00006A                     	ds	1
  1052  00006B                     __tft_type:
  1053                           	opt stack 0
  1054  00006B                     	ds	1
  1055  00006C                     _bit_count:
  1056                           	opt stack 0
  1057  00006C                     	ds	1
  1058  00006D                     _colstart:
  1059                           	opt stack 0
  1060  00006D                     	ds	1
  1061  00006E                     _i:
  1062                           	opt stack 0
  1063  00006E                     	ds	1
  1064  00006F                     _rowstart:
  1065                           	opt stack 0
  1066  00006F                     	ds	1
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           postdec1	equ	0xFE5
  1074                           fsr1l	equ	0xFE1
  1075                           
  1076                           	psect	dataCOMRAM
  1077  000047                     __pdataCOMRAM:
  1078                           	opt stack 0
  1079  000047                     _array1:
  1080                           	opt stack 0
  1081  000047                     	ds	21
  1082  00005C                     _wrap:
  1083                           	opt stack 0
  1084  00005C                     	ds	1
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postdec1	equ	0xFE5
  1092                           fsr1l	equ	0xFE1
  1093                           
  1094                           	psect	bssBANK0
  1095  0000BF                     __pbssBANK0:
  1096                           	opt stack 0
  1097  0000BF                     _buffer:
  1098                           	opt stack 0
  1099  0000BF                     	ds	31
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           postdec1	equ	0xFE5
  1107                           fsr1l	equ	0xFE1
  1108                           
  1109                           	psect	dataBANK0
  1110  000080                     __pdataBANK0:
  1111                           	opt stack 0
  1112  000080                     _D1:
  1113                           	opt stack 0
  1114  000080                     	ds	21
  1115  000095                     _D2:
  1116                           	opt stack 0
  1117  000095                     	ds	21
  1118  0000AA                     _D3:
  1119                           	opt stack 0
  1120  0000AA                     	ds	21
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           postdec1	equ	0xFE5
  1128                           fsr1l	equ	0xFE1
  1129                           
  1130                           	psect	dataBANK1
  1131  000100                     __pdataBANK1:
  1132                           	opt stack 0
  1133  000100                     _color:
  1134                           	opt stack 0
  1135  000100                     	ds	42
  1136  00012A                     _txt1:
  1137                           	opt stack 0
  1138  00012A                     	ds	84
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postdec1	equ	0xFE5
  1146                           fsr1l	equ	0xFE1
  1147                           
  1148                           	psect	cstackBANK0
  1149  0000DE                     __pcstackBANK0:
  1150                           	opt stack 0
  1151  0000DE                     drawtext@x:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x0
  1155  0000DE                     	ds	1
  1156  0000DF                     drawtext@textsize:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x1
  1160  0000DF                     	ds	2
  1161  0000E1                     drawtext@i:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x3
  1165  0000E1                     	ds	2
  1166  0000E3                     drawtext@cursor_y:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x5
  1170  0000E3                     	ds	1
  1171  0000E4                     drawtext@cursor_x:
  1172                           	opt stack 0
  1173                           
  1174                           ; 1 bytes @ 0x6
  1175  0000E4                     	ds	1
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           postdec1	equ	0xFE5
  1183                           fsr1l	equ	0xFE1
  1184                           
  1185                           	psect	cstackCOMRAM
  1186  000001                     __pcstackCOMRAM:
  1187                           	opt stack 0
  1188  000001                     ??_INT0_isr:
  1189  000001                     
  1190                           ; 0 bytes @ 0x0
  1191  000001                     	ds	2
  1192  000003                     ??_chkisr:
  1193                           
  1194                           ; 0 bytes @ 0x2
  1195  000003                     	ds	14
  1196  000011                     ??_isdigit:
  1197  000011                     ?_strlen:
  1198                           	opt stack 0
  1199  000011                     ?___wmul:
  1200                           	opt stack 0
  1201  000011                     ?___lldiv:
  1202                           	opt stack 0
  1203  000011                     putch@c:
  1204                           	opt stack 0
  1205  000011                     spiwrite@x:
  1206                           	opt stack 0
  1207  000011                     OpenUSART@spbrg:
  1208                           	opt stack 0
  1209  000011                     ___wmul@multiplier:
  1210                           	opt stack 0
  1211  000011                     strcpy@to:
  1212                           	opt stack 0
  1213  000011                     strlen@s:
  1214                           	opt stack 0
  1215  000011                     ___lldiv@dividend:
  1216                           	opt stack 0
  1217                           
  1218                           ; 4 bytes @ 0x10
  1219  000011                     	ds	1
  1220  000012                     spiwrite@spidata:
  1221                           	opt stack 0
  1222  000012                     _isdigit$1664:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x11
  1226  000012                     	ds	1
  1227  000013                     ??_strlen:
  1228  000013                     write_command@cmd_:
  1229                           	opt stack 0
  1230  000013                     write_data@data_:
  1231                           	opt stack 0
  1232  000013                     OpenUSART@config:
  1233                           	opt stack 0
  1234  000013                     isdigit@c:
  1235                           	opt stack 0
  1236  000013                     ___wmul@multiplicand:
  1237                           	opt stack 0
  1238  000013                     strcpy@from:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x12
  1242  000013                     	ds	1
  1243  000014                     setAddrWindow@y0:
  1244                           	opt stack 0
  1245                           
  1246                           ; 1 bytes @ 0x13
  1247  000014                     	ds	1
  1248  000015                     setAddrWindow@x1:
  1249                           	opt stack 0
  1250  000015                     ___wmul@product:
  1251                           	opt stack 0
  1252  000015                     strcpy@cp:
  1253                           	opt stack 0
  1254  000015                     strlen@cp:
  1255                           	opt stack 0
  1256  000015                     ___lldiv@divisor:
  1257                           	opt stack 0
  1258                           
  1259                           ; 4 bytes @ 0x14
  1260  000015                     	ds	1
  1261  000016                     setAddrWindow@y1:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x15
  1265  000016                     	ds	1
  1266  000017                     setAddrWindow@x0:
  1267                           	opt stack 0
  1268  000017                     delay_ms@ms:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x16
  1272  000017                     	ds	1
  1273  000018                     drawPixel@y:
  1274                           	opt stack 0
  1275  000018                     drawFastVLine@y:
  1276                           	opt stack 0
  1277  000018                     fillRectangle@y:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x17
  1281  000018                     	ds	1
  1282  000019                     ??_delay_ms:
  1283  000019                     drawFastVLine@h:
  1284                           	opt stack 0
  1285  000019                     fillRectangle@w:
  1286                           	opt stack 0
  1287  000019                     drawPixel@color:
  1288                           	opt stack 0
  1289  000019                     ___lldiv@quotient:
  1290                           	opt stack 0
  1291                           
  1292                           ; 4 bytes @ 0x18
  1293  000019                     	ds	1
  1294  00001A                     fillRectangle@h:
  1295                           	opt stack 0
  1296  00001A                     drawFastVLine@color:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x19
  1300  00001A                     	ds	1
  1301  00001B                     drawPixel@x:
  1302                           	opt stack 0
  1303  00001B                     delay_ms@count:
  1304                           	opt stack 0
  1305  00001B                     fillRectangle@color:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x1A
  1309  00001B                     	ds	1
  1310  00001C                     ??_drawFastVLine:
  1311  00001C                     drawCircle@x0:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x1B
  1315  00001C                     	ds	1
  1316  00001D                     ??_fillRectangle:
  1317  00001D                     ___lldiv@counter:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x1C
  1321  00001D                     	ds	1
  1322  00001E                     ?___llmod:
  1323                           	opt stack 0
  1324  00001E                     drawCircle@y0:
  1325                           	opt stack 0
  1326  00001E                     ___llmod@dividend:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0x1D
  1330  00001E                     	ds	2
  1331  000020                     drawFastVLine@hi:
  1332                           	opt stack 0
  1333  000020                     drawCircle@r:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x1F
  1337  000020                     	ds	1
  1338  000021                     drawFastVLine@lo:
  1339                           	opt stack 0
  1340  000021                     fillRectangle@hi:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x20
  1344  000021                     	ds	1
  1345  000022                     drawFastVLine@x:
  1346                           	opt stack 0
  1347  000022                     fillRectangle@lo:
  1348                           	opt stack 0
  1349  000022                     drawCircle@color:
  1350                           	opt stack 0
  1351  000022                     ___llmod@divisor:
  1352                           	opt stack 0
  1353                           
  1354                           ; 4 bytes @ 0x21
  1355  000022                     	ds	1
  1356  000023                     fillRect@y:
  1357                           	opt stack 0
  1358  000023                     fillRectangle@x:
  1359                           	opt stack 0
  1360  000023                     fillCircleHelper@x0:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x22
  1364  000023                     	ds	1
  1365  000024                     ??_drawCircle:
  1366  000024                     fillRect@w:
  1367                           	opt stack 0
  1368  000024                     fillScreen@color:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x23
  1372  000024                     	ds	1
  1373  000025                     fillRect@h:
  1374                           	opt stack 0
  1375  000025                     fillCircleHelper@y0:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x24
  1379  000025                     	ds	1
  1380  000026                     ___llmod@counter:
  1381                           	opt stack 0
  1382  000026                     fillRect@color:
  1383                           	opt stack 0
  1384  000026                     drawCircle@ddF_x:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x25
  1388  000026                     	ds	1
  1389  000027                     ?_printf:
  1390                           	opt stack 0
  1391  000027                     fillCircleHelper@r:
  1392                           	opt stack 0
  1393  000027                     printf@f:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x26
  1397  000027                     	ds	1
  1398  000028                     ??_fillRect:
  1399  000028                     drawCircle@ddF_y:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x27
  1403  000028                     	ds	1
  1404  000029                     fillCircleHelper@cornername:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x28
  1408  000029                     	ds	1
  1409  00002A                     drawCircle@f:
  1410                           	opt stack 0
  1411                           
  1412                           ; 2 bytes @ 0x29
  1413  00002A                     	ds	1
  1414  00002B                     fillRect@x:
  1415                           	opt stack 0
  1416  00002B                     fillCircleHelper@delta:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x2A
  1420  00002B                     	ds	1
  1421  00002C                     fillRect@i:
  1422                           	opt stack 0
  1423  00002C                     drawCircle@x:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x2B
  1427  00002C                     	ds	1
  1428  00002D                     fillCircleHelper@color:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x2C
  1432  00002D                     	ds	1
  1433  00002E                     drawChar@y:
  1434                           	opt stack 0
  1435  00002E                     drawCircle@y:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x2D
  1439  00002E                     	ds	1
  1440  00002F                     ??_fillCircleHelper:
  1441  00002F                     drawChar@c:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x2E
  1445  00002F                     	ds	1
  1446  000030                     drawChar@color:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x2F
  1450  000030                     	ds	1
  1451  000031                     ??_printf:
  1452  000031                     fillCircleHelper@ddF_x:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x30
  1456  000031                     	ds	1
  1457  000032                     drawChar@bg:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x31
  1461  000032                     	ds	1
  1462  000033                     fillCircleHelper@ddF_y:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x32
  1466  000033                     	ds	1
  1467  000034                     drawChar@size:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x33
  1471  000034                     	ds	1
  1472  000035                     drawChar@line:
  1473                           	opt stack 0
  1474  000035                     printf@idx:
  1475                           	opt stack 0
  1476  000035                     fillCircleHelper@f:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x34
  1480  000035                     	ds	1
  1481  000036                     drawChar@x:
  1482                           	opt stack 0
  1483  000036                     printf@prec:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x35
  1487  000036                     	ds	1
  1488  000037                     drawChar@j:
  1489                           	opt stack 0
  1490  000037                     fillCircleHelper@x:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x36
  1494  000037                     	ds	1
  1495  000038                     drawChar@i:
  1496                           	opt stack 0
  1497  000038                     printf@ap:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x37
  1501  000038                     	ds	1
  1502  000039                     drawtext@y:
  1503                           	opt stack 0
  1504  000039                     fillCircleHelper@y:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x38
  1508  000039                     	ds	1
  1509  00003A                     drawtext@_text:
  1510                           	opt stack 0
  1511  00003A                     printf@val:
  1512                           	opt stack 0
  1513                           
  1514                           ; 4 bytes @ 0x39
  1515  00003A                     	ds	1
  1516  00003B                     fillCircle@x0:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x3A
  1520  00003B                     	ds	1
  1521  00003C                     drawtext@color:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x3B
  1525  00003C                     	ds	1
  1526  00003D                     fillCircle@y0:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x3C
  1530  00003D                     	ds	1
  1531  00003E                     drawtext@bg:
  1532                           	opt stack 0
  1533  00003E                     printf@width:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x3D
  1537  00003E                     	ds	1
  1538  00003F                     fillCircle@r:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x3E
  1542  00003F                     	ds	1
  1543  000040                     drawtext@size:
  1544                           	opt stack 0
  1545  000040                     printf@flag:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x3F
  1549  000040                     	ds	1
  1550  000041                     ??_drawtext:
  1551  000041                     printf@c:
  1552                           	opt stack 0
  1553  000041                     fillCircle@color:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x40
  1557  000041                     	ds	2
  1558  000043                     ??_main:
  1559                           
  1560                           ; 0 bytes @ 0x42
  1561  000043                     	ds	1
  1562  000044                     main@i:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x43
  1566  000044                     	ds	2
  1567  000046                     main@found:
  1568                           	opt stack 0
  1569                           
  1570                           ; 1 bytes @ 0x45
  1571  000046                     	ds	1
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1l	equ	0xFE1
  1580                           
  1581 ;;
  1582 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1583 ;;
  1584 ;; *************** function _main *****************
  1585 ;; Defined at:
  1586 ;;		line 199 in file "Lab10_sample_1.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  i               2   67[COMRAM] int 
  1591 ;;  found           1   69[COMRAM] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;		None               void
  1594 ;; Registers used:
  1595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1602 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;Total ram usage:        4 bytes
  1606 ;; Hardware stack levels required when called:   11
  1607 ;; This function calls:
  1608 ;;		_Activate_Buzzer
  1609 ;;		_Deactivate_Buzzer
  1610 ;;		_Initialize_Screen
  1611 ;;		_Wait_Half_Second
  1612 ;;		_drawCircle
  1613 ;;		_drawtext
  1614 ;;		_fillCircle
  1615 ;;		_init_UART
  1616 ;;		_printf
  1617 ;; This function is called by:
  1618 ;;		Startup code after reset
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text0
  1623  00045E                     __ptext0:
  1624                           	opt stack 0
  1625  00045E                     _main:
  1626                           	opt stack 20
  1627                           
  1628                           ;Lab10_sample_1.c: 201: init_UART();
  1629                           
  1630                           ;incstack = 0
  1631  00045E  EC4C  F00B         	call	_init_UART	;wreg free
  1632                           
  1633                           ;Lab10_sample_1.c: 202: OSCCON = 0x70;
  1634  000462  0E70               	movlw	112
  1635  000464  6ED3               	movwf	4051,c	;volatile
  1636                           
  1637                           ;Lab10_sample_1.c: 203: nRBPU = 0;
  1638  000466  9EF1               	bcf	intcon2,7,c	;volatile
  1639                           
  1640                           ;Lab10_sample_1.c: 204: TRISB = 0x01;
  1641  000468  0E01               	movlw	1
  1642  00046A  6E93               	movwf	3987,c	;volatile
  1643                           
  1644                           ;Lab10_sample_1.c: 205: TRISC = 0x00;
  1645  00046C  0E00               	movlw	0
  1646  00046E  6E94               	movwf	3988,c	;volatile
  1647                           
  1648                           ;Lab10_sample_1.c: 206: TRISD = 0x00;
  1649  000470  0E00               	movlw	0
  1650  000472  6E95               	movwf	3989,c	;volatile
  1651                           
  1652                           ;Lab10_sample_1.c: 207: TRISE = 0x00;
  1653  000474  0E00               	movlw	0
  1654  000476  6E96               	movwf	3990,c	;volatile
  1655                           
  1656                           ;Lab10_sample_1.c: 208: ADCON1 = 0x0F;
  1657  000478  0E0F               	movlw	15
  1658  00047A  6EC1               	movwf	4033,c	;volatile
  1659                           
  1660                           ;Lab10_sample_1.c: 209: Initialize_Screen();
  1661  00047C  ECC0  F007         	call	_Initialize_Screen	;wreg free
  1662                           
  1663                           ;Lab10_sample_1.c: 210: INTCONbits.INT0IF = 0;
  1664  000480  92F2               	bcf	intcon,1,c	;volatile
  1665                           
  1666                           ;Lab10_sample_1.c: 211: INTCON2bits.INTEDG0 = 0;
  1667  000482  9CF1               	bcf	intcon2,6,c	;volatile
  1668                           
  1669                           ;Lab10_sample_1.c: 212: INTCONbits.INT0IE = 1;
  1670  000484  88F2               	bsf	intcon,4,c	;volatile
  1671                           
  1672                           ;Lab10_sample_1.c: 213: TMR1H = 0;
  1673  000486  0E00               	movlw	0
  1674  000488  6ECF               	movwf	4047,c	;volatile
  1675                           
  1676                           ;Lab10_sample_1.c: 214: TMR1L = 0;
  1677  00048A  0E00               	movlw	0
  1678  00048C  6ECE               	movwf	4046,c	;volatile
  1679                           
  1680                           ;Lab10_sample_1.c: 215: PIR1bits.TMR1IF = 0;
  1681  00048E  909E               	bcf	3998,0,c	;volatile
  1682                           
  1683                           ;Lab10_sample_1.c: 216: PIE1bits.TMR1IE = 1;
  1684  000490  809D               	bsf	3997,0,c	;volatile
  1685                           
  1686                           ;Lab10_sample_1.c: 217: INTCONbits.PEIE = 1;
  1687  000492  8CF2               	bsf	intcon,6,c	;volatile
  1688                           
  1689                           ;Lab10_sample_1.c: 218: INTCONbits.GIE = 1;
  1690  000494  8EF2               	bsf	intcon,7,c	;volatile
  1691                           
  1692                           ;Lab10_sample_1.c: 219: nec_ok = 0;
  1693  000496  0E00               	movlw	0
  1694  000498  6E66               	movwf	_nec_ok+1,c
  1695  00049A  0E00               	movlw	0
  1696  00049C  6E65               	movwf	_nec_ok,c
  1697                           
  1698                           ;Lab10_sample_1.c: 220: Nec_code = 0x0;
  1699  00049E  0E00               	movlw	0
  1700  0004A0  6E5D               	movwf	_Nec_code,c
  1701  0004A2  0E00               	movlw	0
  1702  0004A4  6E5E               	movwf	_Nec_code+1,c
  1703  0004A6  0E00               	movlw	0
  1704  0004A8  6E5F               	movwf	_Nec_code+2,c
  1705  0004AA  0E00               	movlw	0
  1706  0004AC  6E60               	movwf	_Nec_code+3,c
  1707  0004AE  D000               	goto	l3988
  1708  0004B0                     l3988:
  1709                           
  1710                           ;Lab10_sample_1.c: 223: {
  1711                           ;Lab10_sample_1.c: 224: if (nec_ok == 1)
  1712  0004B0  0465               	decf	_nec_ok,w,c
  1713  0004B2  1066               	iorwf	_nec_ok+1,w,c
  1714  0004B4  A4D8               	btfss	status,2,c
  1715  0004B6  D7FC               	goto	l3988
  1716                           
  1717                           ;Lab10_sample_1.c: 225: {
  1718                           ;Lab10_sample_1.c: 227: nec_ok = 0;
  1719  0004B8  0E00               	movlw	0
  1720  0004BA  6E66               	movwf	_nec_ok+1,c
  1721  0004BC  0E00               	movlw	0
  1722  0004BE  6E65               	movwf	_nec_ok,c
  1723                           
  1724                           ;Lab10_sample_1.c: 229: Nec_code1 = (char) ((Nec_code >> 8));
  1725  0004C0  C05E  F069         	movff	_Nec_code+1,_Nec_code1
  1726                           
  1727                           ;Lab10_sample_1.c: 231: INTCONbits.INT0IE = 1;
  1728  0004C4  88F2               	bsf	intcon,4,c	;volatile
  1729                           
  1730                           ;Lab10_sample_1.c: 232: INTCON2bits.INTEDG0 = 0;
  1731  0004C6  9CF1               	bcf	intcon2,6,c	;volatile
  1732                           
  1733                           ;Lab10_sample_1.c: 234: char found = 0xff;
  1734  0004C8  6846               	setf	main@found,c
  1735                           
  1736                           ;Lab10_sample_1.c: 239: for(int i = 0; i < 21; i++)
  1737  0004CA  0E00               	movlw	0
  1738  0004CC  6E45               	movwf	main@i+1,c
  1739  0004CE  0E00               	movlw	0
  1740  0004D0  6E44               	movwf	main@i,c
  1741  0004D2                     l4000:
  1742  0004D2  BE45               	btfsc	main@i+1,7,c
  1743  0004D4  D008               	goto	l4004
  1744  0004D6  5045               	movf	main@i+1,w,c
  1745  0004D8  E117               	bnz	l4012
  1746  0004DA  0E15               	movlw	21
  1747  0004DC  5C44               	subwf	main@i,w,c
  1748  0004DE  B0D8               	btfsc	status,0,c
  1749  0004E0  D013               	goto	l4012
  1750  0004E2  D001               	goto	l4004
  1751  0004E4  D011               	goto	l4012
  1752  0004E6                     l4004:
  1753                           
  1754                           ;Lab10_sample_1.c: 240: {
  1755                           ;Lab10_sample_1.c: 241: if (Nec_code1 == array1[i])
  1756  0004E6  0E47               	movlw	low _array1
  1757  0004E8  2444               	addwf	main@i,w,c
  1758  0004EA  6ED9               	movwf	fsr2l,c
  1759  0004EC  0E00               	movlw	high _array1
  1760  0004EE  2045               	addwfc	main@i+1,w,c
  1761  0004F0  6EDA               	movwf	fsr2h,c
  1762  0004F2  5069               	movf	_Nec_code1,w,c
  1763  0004F4  18DE               	xorwf	postinc2,w,c
  1764  0004F6  A4D8               	btfss	status,2,c
  1765  0004F8  D003               	goto	l4008
  1766                           
  1767                           ;Lab10_sample_1.c: 242: {
  1768                           ;Lab10_sample_1.c: 243: found = i;
  1769  0004FA  C044  F046         	movff	main@i,main@found
  1770  0004FE  D000               	goto	l4008
  1771  000500                     l4008:
  1772  000500  4A44               	infsnz	main@i,f,c
  1773  000502  2A45               	incf	main@i+1,f,c
  1774  000504  D7E6               	goto	l4000
  1775  000506  D000               	goto	l4012
  1776  000508                     l4012:
  1777                           
  1778                           ;Lab10_sample_1.c: 244: }
  1779                           ;Lab10_sample_1.c: 245: }
  1780                           ;Lab10_sample_1.c: 246: if (found != 0xff)
  1781  000508  2846               	incf	main@found,w,c
  1782  00050A  B4D8               	btfsc	status,2,c
  1783  00050C  D042               	goto	l4020
  1784                           
  1785                           ;Lab10_sample_1.c: 247: {
  1786                           ;Lab10_sample_1.c: 248: fillCircle(60, 80, 20, color[found]);
  1787  00050E  0E00               	movlw	0
  1788  000510  6E3C               	movwf	fillCircle@x0+1,c
  1789  000512  0E3C               	movlw	60
  1790  000514  6E3B               	movwf	fillCircle@x0,c
  1791  000516  0E00               	movlw	0
  1792  000518  6E3E               	movwf	fillCircle@y0+1,c
  1793  00051A  0E50               	movlw	80
  1794  00051C  6E3D               	movwf	fillCircle@y0,c
  1795  00051E  0E00               	movlw	0
  1796  000520  6E40               	movwf	fillCircle@r+1,c
  1797  000522  0E14               	movlw	20
  1798  000524  6E3F               	movwf	fillCircle@r,c
  1799  000526  5046               	movf	main@found,w,c
  1800  000528  0D02               	mullw	2
  1801  00052A  0E00               	movlw	low _color
  1802  00052C  24F3               	addwf	prodl,w,c
  1803  00052E  6ED9               	movwf	fsr2l,c
  1804  000530  0E01               	movlw	high _color
  1805  000532  20F4               	addwfc	prodh,w,c
  1806  000534  6EDA               	movwf	fsr2h,c
  1807  000536  CFDE F041          	movff	postinc2,fillCircle@color
  1808  00053A  CFDD F042          	movff	postdec2,fillCircle@color+1
  1809  00053E  ECBF  F009         	call	_fillCircle	;wreg free
  1810                           
  1811                           ;Lab10_sample_1.c: 249: drawCircle(60, 80, 20, 0xFFFF);
  1812  000542  0E00               	movlw	0
  1813  000544  6E1D               	movwf	drawCircle@x0+1,c
  1814  000546  0E3C               	movlw	60
  1815  000548  6E1C               	movwf	drawCircle@x0,c
  1816  00054A  0E00               	movlw	0
  1817  00054C  6E1F               	movwf	drawCircle@y0+1,c
  1818  00054E  0E50               	movlw	80
  1819  000550  6E1E               	movwf	drawCircle@y0,c
  1820  000552  0E00               	movlw	0
  1821  000554  6E21               	movwf	drawCircle@r+1,c
  1822  000556  0E14               	movlw	20
  1823  000558  6E20               	movwf	drawCircle@r,c
  1824  00055A  0EFF               	movlw	255
  1825  00055C  6E23               	movwf	drawCircle@color+1,c
  1826  00055E  6822               	setf	drawCircle@color,c
  1827  000560  EC07  F003         	call	_drawCircle	;wreg free
  1828                           
  1829                           ;Lab10_sample_1.c: 250: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1830  000564  0E4D               	movlw	77
  1831  000566  6E39               	movwf	drawtext@y,c
  1832  000568  5046               	movf	main@found,w,c
  1833  00056A  0D04               	mullw	4
  1834  00056C  0E2A               	movlw	low _txt1
  1835  00056E  24F3               	addwf	prodl,w,c
  1836  000570  6E3A               	movwf	drawtext@_text,c
  1837  000572  0E01               	movlw	high _txt1
  1838  000574  20F4               	addwfc	prodh,w,c
  1839  000576  6E3B               	movwf	drawtext@_text+1,c
  1840  000578  0EFF               	movlw	255
  1841  00057A  6E3D               	movwf	drawtext@color+1,c
  1842  00057C  683C               	setf	drawtext@color,c
  1843  00057E  0E00               	movlw	0
  1844  000580  6E3F               	movwf	drawtext@bg+1,c
  1845  000582  0E00               	movlw	0
  1846  000584  6E3E               	movwf	drawtext@bg,c
  1847  000586  0E01               	movlw	1
  1848  000588  6E40               	movwf	drawtext@size,c
  1849  00058A  0E34               	movlw	52
  1850  00058C  EC54  F006         	call	_drawtext
  1851  000590  D000               	goto	l4020
  1852  000592                     l4020:
  1853                           
  1854                           ;Lab10_sample_1.c: 251: }
  1855                           ;Lab10_sample_1.c: 252: printf ("NEC_Code = %08lx %x Found = %d \r\n", Nec_code, Nec_cod
      +                          e1, found);
  1856  000592  0EB2               	movlw	low STR_1
  1857  000594  6E27               	movwf	printf@f,c
  1858  000596  0EFF               	movlw	high STR_1
  1859  000598  6E28               	movwf	printf@f+1,c
  1860  00059A  C05D  F029         	movff	_Nec_code,?_printf+2
  1861  00059E  C05E  F02A         	movff	_Nec_code+1,?_printf+3
  1862  0005A2  C05F  F02B         	movff	_Nec_code+2,?_printf+4
  1863  0005A6  C060  F02C         	movff	_Nec_code+3,?_printf+5
  1864  0005AA  C069  F02D         	movff	_Nec_code1,?_printf+6
  1865  0005AE  6A2E               	clrf	?_printf+7,c
  1866  0005B0  C046  F02F         	movff	main@found,?_printf+8
  1867  0005B4  6A30               	clrf	?_printf+9,c
  1868  0005B6  EC0E  F000         	call	_printf	;wreg free
  1869                           
  1870                           ;Lab10_sample_1.c: 253: PORTD=D1[found] | D3[found];
  1871  0005BA  5046               	movf	main@found,w,c
  1872  0005BC  0D01               	mullw	1
  1873  0005BE  0EAA               	movlw	low _D3
  1874  0005C0  24F3               	addwf	prodl,w,c
  1875  0005C2  6ED9               	movwf	fsr2l,c
  1876  0005C4  0E00               	movlw	high _D3
  1877  0005C6  20F4               	addwfc	prodh,w,c
  1878  0005C8  6EDA               	movwf	fsr2h,c
  1879  0005CA  50DF               	movf	indf2,w,c
  1880  0005CC  6E43               	movwf	??_main& (0+255),c
  1881  0005CE  5046               	movf	main@found,w,c
  1882  0005D0  0D01               	mullw	1
  1883  0005D2  0E80               	movlw	low _D1
  1884  0005D4  24F3               	addwf	prodl,w,c
  1885  0005D6  6ED9               	movwf	fsr2l,c
  1886  0005D8  0E00               	movlw	high _D1
  1887  0005DA  20F4               	addwfc	prodh,w,c
  1888  0005DC  6EDA               	movwf	fsr2h,c
  1889  0005DE  50DF               	movf	indf2,w,c
  1890  0005E0  1043               	iorwf	??_main,w,c
  1891  0005E2  6E83               	movwf	3971,c	;volatile
  1892                           
  1893                           ;Lab10_sample_1.c: 254: PORTE=D2[found];
  1894  0005E4  5046               	movf	main@found,w,c
  1895  0005E6  0D01               	mullw	1
  1896  0005E8  0E95               	movlw	low _D2
  1897  0005EA  24F3               	addwf	prodl,w,c
  1898  0005EC  6ED9               	movwf	fsr2l,c
  1899  0005EE  0E00               	movlw	high _D2
  1900  0005F0  20F4               	addwfc	prodh,w,c
  1901  0005F2  6EDA               	movwf	fsr2h,c
  1902  0005F4  50DF               	movf	indf2,w,c
  1903  0005F6  6E84               	movwf	3972,c	;volatile
  1904                           
  1905                           ;Lab10_sample_1.c: 255: PORTBbits.RB7 = 1;
  1906  0005F8  8E81               	bsf	3969,7,c	;volatile
  1907                           
  1908                           ;Lab10_sample_1.c: 256: Activate_Buzzer();
  1909  0005FA  EC69  F00B         	call	_Activate_Buzzer	;wreg free
  1910                           
  1911                           ;Lab10_sample_1.c: 257: Wait_Half_Second();
  1912  0005FE  EC34  F00B         	call	_Wait_Half_Second	;wreg free
  1913                           
  1914                           ;Lab10_sample_1.c: 258: PORTBbits.RB7 = 0;
  1915  000602  9E81               	bcf	3969,7,c	;volatile
  1916                           
  1917                           ;Lab10_sample_1.c: 259: Deactivate_Buzzer();
  1918  000604  EC8F  F00B         	call	_Deactivate_Buzzer	;wreg free
  1919  000608  D753               	goto	l3988
  1920  00060A  EF0C  F000         	goto	start
  1921  00060E                     __end_of_main:
  1922                           	opt stack 0
  1923                           tblptru	equ	0xFF8
  1924                           tblptrh	equ	0xFF7
  1925                           tblptrl	equ	0xFF6
  1926                           tablat	equ	0xFF5
  1927                           prodh	equ	0xFF4
  1928                           prodl	equ	0xFF3
  1929                           intcon	equ	0xFF2
  1930                           intcon2	equ	0xFF1
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postdec1	equ	0xFE5
  1934                           fsr1l	equ	0xFE1
  1935                           indf2	equ	0xFDF
  1936                           postinc2	equ	0xFDE
  1937                           postdec2	equ	0xFDD
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _printf *****************
  1943 ;; Defined at:
  1944 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  f               2   38[COMRAM] PTR const unsigned char 
  1947 ;;		 -> STR_1(34), 
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;  idx             1   52[COMRAM] unsigned char 
  1950 ;;  val             4   57[COMRAM] unsigned long 
  1951 ;;  tmpval          4    0        struct .
  1952 ;;  cp              3    0        PTR const unsigned char 
  1953 ;;  width           2   61[COMRAM] int 
  1954 ;;  ap              2   55[COMRAM] PTR void [1]
  1955 ;;		 -> ?_printf(2), 
  1956 ;;  prec            2   53[COMRAM] int 
  1957 ;;  len             2    0        unsigned int 
  1958 ;;  c               1   64[COMRAM] char 
  1959 ;;  flag            1   63[COMRAM] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  2   38[COMRAM] int 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1969 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;Total ram usage:       27 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    4
  1976 ;; This function calls:
  1977 ;;		___lldiv
  1978 ;;		___llmod
  1979 ;;		___wmul
  1980 ;;		_isdigit
  1981 ;;		_putch
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text1
  1988  00001C                     __ptext1:
  1989                           	opt stack 0
  1990  00001C                     _printf:
  1991                           	opt stack 26
  1992                           
  1993                           ;doprnt.c: 466: va_list ap;
  1994                           ;doprnt.c: 499: signed char c;
  1995                           ;doprnt.c: 501: int width;
  1996                           ;doprnt.c: 504: int prec;
  1997                           ;doprnt.c: 508: unsigned char flag;
  1998                           ;doprnt.c: 523: union {
  1999                           ;doprnt.c: 524: unsigned long vd;
  2000                           ;doprnt.c: 525: double integ;
  2001                           ;doprnt.c: 526: } tmpval;
  2002                           ;doprnt.c: 528: unsigned long val;
  2003                           ;doprnt.c: 529: unsigned len;
  2004                           ;doprnt.c: 530: const char * cp;
  2005                           ;doprnt.c: 533: *ap = __va_start();
  2006                           
  2007                           ;incstack = 0
  2008  00001C  0E29               	movlw	low (?_printf+2)
  2009  00001E  6E38               	movwf	printf@ap,c
  2010  000020  0E00               	movlw	high (?_printf+2)
  2011  000022  6E39               	movwf	printf@ap+1,c
  2012                           
  2013                           ;doprnt.c: 536: while(c = *f++) {
  2014  000024  D20D               	goto	l3922
  2015  000026                     l3784:
  2016                           
  2017                           ;doprnt.c: 538: if(c != '%')
  2018  000026  0E25               	movlw	37
  2019  000028  1841               	xorwf	printf@c,w,c
  2020  00002A  B4D8               	btfsc	status,2,c
  2021  00002C  D004               	goto	l3788
  2022                           
  2023                           ;doprnt.c: 540: {
  2024                           ;doprnt.c: 541: (putch(c) );
  2025  00002E  5041               	movf	printf@c,w,c
  2026  000030  EC82  F00B         	call	_putch
  2027                           
  2028                           ;doprnt.c: 542: continue;
  2029  000034  D205               	goto	l3922
  2030  000036                     l3788:
  2031                           
  2032                           ;doprnt.c: 543: }
  2033                           ;doprnt.c: 546: width = 0;
  2034  000036  0E00               	movlw	0
  2035  000038  6E3F               	movwf	printf@width+1,c
  2036  00003A  0E00               	movlw	0
  2037  00003C  6E3E               	movwf	printf@width,c
  2038                           
  2039                           ;doprnt.c: 548: flag = 0;
  2040  00003E  0E00               	movlw	0
  2041  000040  6E40               	movwf	printf@flag,c
  2042                           
  2043                           ;doprnt.c: 551: switch(*f) {
  2044                           
  2045                           ;doprnt.c: 550: for(;;) {
  2046  000042  D005               	goto	l3794
  2047  000044                     l3790:
  2048                           
  2049                           ;doprnt.c: 580: flag |= 0x04;
  2050  000044  8440               	bsf	printf@flag,2,c
  2051                           
  2052                           ;doprnt.c: 581: f++;
  2053  000046  4A27               	infsnz	printf@f,f,c
  2054  000048  2A28               	incf	printf@f+1,f,c
  2055                           
  2056                           ;doprnt.c: 582: continue;
  2057  00004A  D001               	goto	l3794
  2058                           
  2059                           ;doprnt.c: 584: }
  2060  00004C  D00B               	goto	l3796
  2061  00004E                     l3794:
  2062  00004E  C027  FFF6         	movff	printf@f,tblptrl
  2063  000052  C028  FFF7         	movff	printf@f+1,tblptrh
  2064  000056                     	if	0	;tblptru may be non-zero
  2065  000056                     	endif
  2066  000056                     	if	0	;tblptru may be non-zero
  2067  000056                     	endif
  2068  000056  0008               	tblrd		*
  2069  000058  50F5               	movf	tablat,w,c
  2070                           
  2071                           ; Switch size 1, requested type "space"
  2072                           ; Number of cases is 1, Range of values is 48 to 48
  2073                           ; switch strategies available:
  2074                           ; Name         Instructions Cycles
  2075                           ; simple_byte            4     3 (average)
  2076                           ;	Chosen strategy is simple_byte
  2077  00005A  0A30               	xorlw	48	; case 48
  2078  00005C  B4D8               	btfsc	status,2,c
  2079  00005E  D7F2               	goto	l3790
  2080                           
  2081                           ;doprnt.c: 585: break;
  2082  000060  D001               	goto	l3796
  2083                           
  2084                           ;doprnt.c: 586: }
  2085  000062  D7F5               	goto	l3794
  2086  000064                     l3796:
  2087                           
  2088                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2089  000064  C027  FFF6         	movff	printf@f,tblptrl
  2090  000068  C028  FFF7         	movff	printf@f+1,tblptrh
  2091  00006C                     	if	0	;tblptru may be non-zero
  2092  00006C                     	endif
  2093  00006C                     	if	0	;tblptru may be non-zero
  2094  00006C                     	endif
  2095  00006C  0008               	tblrd		*
  2096  00006E  50F5               	movf	tablat,w,c
  2097  000070  EC15  F00B         	call	_isdigit
  2098  000074  A0D8               	btfss	status,0,c
  2099  000076  D03D               	goto	l3814
  2100                           
  2101                           ;doprnt.c: 598: width = 0;
  2102  000078  0E00               	movlw	0
  2103  00007A  6E3F               	movwf	printf@width+1,c
  2104  00007C  0E00               	movlw	0
  2105  00007E  6E3E               	movwf	printf@width,c
  2106  000080  D000               	goto	l3800
  2107  000082                     l3800:
  2108                           
  2109                           ;doprnt.c: 600: width *= 10;
  2110  000082  C03E  F011         	movff	printf@width,___wmul@multiplier
  2111  000086  C03F  F012         	movff	printf@width+1,___wmul@multiplier+1
  2112  00008A  0E00               	movlw	0
  2113  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2114  00008E  0E0A               	movlw	10
  2115  000090  6E13               	movwf	___wmul@multiplicand,c
  2116  000092  EC01  F00B         	call	___wmul	;wreg free
  2117  000096  C011  F03E         	movff	?___wmul,printf@width
  2118  00009A  C012  F03F         	movff	?___wmul+1,printf@width+1
  2119                           
  2120                           ;doprnt.c: 601: width += *f++ - '0';
  2121  00009E  0ED0               	movlw	208
  2122  0000A0  6E31               	movwf	??_printf& (0+255),c
  2123  0000A2  0EFF               	movlw	255
  2124  0000A4  6E32               	movwf	(??_printf+1)& (0+255),c
  2125  0000A6  C027  FFF6         	movff	printf@f,tblptrl
  2126  0000AA  C028  FFF7         	movff	printf@f+1,tblptrh
  2127  0000AE                     	if	0	;tblptru may be non-zero
  2128  0000AE                     	endif
  2129  0000AE                     	if	0	;tblptru may be non-zero
  2130  0000AE                     	endif
  2131  0000AE  0008               	tblrd		*
  2132  0000B0  50F5               	movf	tablat,w,c
  2133  0000B2  6E33               	movwf	(??_printf+2)& (0+255),c
  2134  0000B4  6A34               	clrf	(??_printf+3)& (0+255),c
  2135  0000B6  5031               	movf	??_printf,w,c
  2136  0000B8  2633               	addwf	??_printf+2,f,c
  2137  0000BA  5032               	movf	??_printf+1,w,c
  2138  0000BC  2234               	addwfc	??_printf+3,f,c
  2139  0000BE  5033               	movf	??_printf+2,w,c
  2140  0000C0  263E               	addwf	printf@width,f,c
  2141  0000C2  5034               	movf	??_printf+3,w,c
  2142  0000C4  223F               	addwfc	printf@width+1,f,c
  2143  0000C6  4A27               	infsnz	printf@f,f,c
  2144  0000C8  2A28               	incf	printf@f+1,f,c
  2145                           
  2146                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2147  0000CA  C027  FFF6         	movff	printf@f,tblptrl
  2148  0000CE  C028  FFF7         	movff	printf@f+1,tblptrh
  2149  0000D2                     	if	0	;tblptru may be non-zero
  2150  0000D2                     	endif
  2151  0000D2                     	if	0	;tblptru may be non-zero
  2152  0000D2                     	endif
  2153  0000D2  0008               	tblrd		*
  2154  0000D4  50F5               	movf	tablat,w,c
  2155  0000D6  EC15  F00B         	call	_isdigit
  2156  0000DA  A0D8               	btfss	status,0,c
  2157  0000DC  D00A               	goto	l3814
  2158  0000DE  D7D1               	goto	l3800
  2159                           
  2160                           ;doprnt.c: 635: switch(c = *f++) {
  2161                           
  2162                           ;doprnt.c: 608: }
  2163                           ;doprnt.c: 633: loop:
  2164  0000E0  D008               	goto	l3814
  2165                           
  2166                           ;doprnt.c: 638: goto alldone;
  2167                           
  2168                           ;doprnt.c: 637: case 0:
  2169  0000E2  D1BC               	goto	l472
  2170  0000E4                     l3808:
  2171                           
  2172                           ;doprnt.c: 643: flag |= 0x10;
  2173  0000E4  8840               	bsf	printf@flag,4,c
  2174                           
  2175                           ;doprnt.c: 644: goto loop;
  2176  0000E6  D005               	goto	l3814
  2177                           
  2178                           ;doprnt.c: 698: case 'i':
  2179                           ;doprnt.c: 699: break;
  2180                           
  2181                           ;doprnt.c: 697: case 'd':
  2182  0000E8  D01E               	goto	l431
  2183  0000EA                     l3810:
  2184                           
  2185                           ;doprnt.c: 721: flag |= 0x80;
  2186  0000EA  8E40               	bsf	printf@flag,7,c
  2187                           
  2188                           ;doprnt.c: 723: break;
  2189  0000EC  D01C               	goto	l431
  2190                           
  2191                           ;doprnt.c: 813: continue;
  2192                           
  2193                           ;doprnt.c: 802: default:
  2194  0000EE  D1A8               	goto	l3922
  2195                           
  2196                           ;doprnt.c: 822: }
  2197  0000F0  D01A               	goto	l431
  2198  0000F2                     l3814:
  2199  0000F2  C027  FFF6         	movff	printf@f,tblptrl
  2200  0000F6  C028  FFF7         	movff	printf@f+1,tblptrh
  2201  0000FA  4A27               	infsnz	printf@f,f,c
  2202  0000FC  2A28               	incf	printf@f+1,f,c
  2203  0000FE                     	if	0	;tblptru may be non-zero
  2204  0000FE                     	endif
  2205  0000FE                     	if	0	;tblptru may be non-zero
  2206  0000FE                     	endif
  2207  0000FE  0008               	tblrd		*
  2208  000100  CFF5 F041          	movff	tablat,printf@c
  2209  000104  5041               	movf	printf@c,w,c
  2210                           
  2211                           ; Switch size 1, requested type "space"
  2212                           ; Number of cases is 5, Range of values is 0 to 120
  2213                           ; switch strategies available:
  2214                           ; Name         Instructions Cycles
  2215                           ; simple_byte           16     9 (average)
  2216                           ;	Chosen strategy is simple_byte
  2217  000106  0A00               	xorlw	0	; case 0
  2218  000108  B4D8               	btfsc	status,2,c
  2219  00010A  D1A8               	goto	l472
  2220  00010C  0A64               	xorlw	100	; case 100
  2221  00010E  B4D8               	btfsc	status,2,c
  2222  000110  D00A               	goto	l431
  2223  000112  0A0D               	xorlw	13	; case 105
  2224  000114  B4D8               	btfsc	status,2,c
  2225  000116  D007               	goto	l431
  2226  000118  0A05               	xorlw	5	; case 108
  2227  00011A  B4D8               	btfsc	status,2,c
  2228  00011C  D7E3               	goto	l3808
  2229  00011E  0A14               	xorlw	20	; case 120
  2230  000120  B4D8               	btfsc	status,2,c
  2231  000122  D7E3               	goto	l3810
  2232  000124  D18D               	goto	l3922
  2233  000126                     l431:
  2234                           
  2235                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2236  000126  BE40               	btfsc	printf@flag,7,c
  2237  000128  D02F               	goto	l434
  2238                           
  2239                           ;doprnt.c: 1253: {
  2240                           ;doprnt.c: 1255: if(flag & 0x10)
  2241  00012A  A840               	btfss	printf@flag,4,c
  2242  00012C  D00E               	goto	l3822
  2243                           
  2244                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2245  00012E  C038  FFD9         	movff	printf@ap,fsr2l
  2246  000132  C039  FFDA         	movff	printf@ap+1,fsr2h
  2247  000136  CFDE F03A          	movff	postinc2,printf@val
  2248  00013A  CFDE F03B          	movff	postinc2,printf@val+1
  2249  00013E  CFDE F03C          	movff	postinc2,printf@val+2
  2250  000142  CFDE F03D          	movff	postinc2,printf@val+3
  2251  000146  0E04               	movlw	4
  2252  000148  D00E               	goto	L1
  2253  00014A                     l3822:
  2254                           
  2255                           ;doprnt.c: 1257: else
  2256                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2257  00014A  C038  FFD9         	movff	printf@ap,fsr2l
  2258  00014E  C039  FFDA         	movff	printf@ap+1,fsr2h
  2259  000152  CFDE F03A          	movff	postinc2,printf@val
  2260  000156  CFDD F03B          	movff	postdec2,printf@val+1
  2261  00015A  0E00               	movlw	0
  2262  00015C  BE3B               	btfsc	printf@val+1,7,c
  2263  00015E  0EFF               	movlw	-1
  2264  000160  6E3C               	movwf	printf@val+2,c
  2265  000162  6E3D               	movwf	printf@val+3,c
  2266  000164  0E02               	movlw	2
  2267  000166                     L1:
  2268  000166  2638               	addwf	printf@ap,f,c
  2269  000168  0E00               	movlw	0
  2270  00016A  2239               	addwfc	printf@ap+1,f,c
  2271  00016C  D000               	goto	l3826
  2272  00016E                     l3826:
  2273                           
  2274                           ;doprnt.c: 1261: if((long)val < 0) {
  2275  00016E  AE3D               	btfss	printf@val+3,7,c
  2276  000170  D074               	goto	l3870
  2277                           
  2278                           ;doprnt.c: 1262: flag |= 0x03;
  2279  000172  0E03               	movlw	3
  2280  000174  1240               	iorwf	printf@flag,f,c
  2281                           
  2282                           ;doprnt.c: 1263: val = -val;
  2283  000176  1E3D               	comf	printf@val+3,f,c
  2284  000178  1E3C               	comf	printf@val+2,f,c
  2285  00017A  1E3B               	comf	printf@val+1,f,c
  2286  00017C  6C3A               	negf	printf@val,c
  2287  00017E  0E00               	movlw	0
  2288  000180  223B               	addwfc	printf@val+1,f,c
  2289  000182  223C               	addwfc	printf@val+2,f,c
  2290  000184  223D               	addwfc	printf@val+3,f,c
  2291                           
  2292                           ;doprnt.c: 1264: }
  2293                           ;doprnt.c: 1266: }
  2294  000186  D069               	goto	l3870
  2295  000188                     l434:
  2296                           
  2297                           ;doprnt.c: 1268: else
  2298                           ;doprnt.c: 1273: {
  2299                           ;doprnt.c: 1281: if(flag & 0x10)
  2300  000188  A840               	btfss	printf@flag,4,c
  2301  00018A  D00E               	goto	l3836
  2302                           
  2303                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2304  00018C  C038  FFD9         	movff	printf@ap,fsr2l
  2305  000190  C039  FFDA         	movff	printf@ap+1,fsr2h
  2306  000194  CFDE F03A          	movff	postinc2,printf@val
  2307  000198  CFDE F03B          	movff	postinc2,printf@val+1
  2308  00019C  CFDE F03C          	movff	postinc2,printf@val+2
  2309  0001A0  CFDE F03D          	movff	postinc2,printf@val+3
  2310  0001A4  0E04               	movlw	4
  2311  0001A6  D00F               	goto	L2
  2312  0001A8                     l3836:
  2313                           
  2314                           ;doprnt.c: 1283: else
  2315                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2316  0001A8  C038  FFD9         	movff	printf@ap,fsr2l
  2317  0001AC  C039  FFDA         	movff	printf@ap+1,fsr2h
  2318  0001B0  CFDE F031          	movff	postinc2,??_printf
  2319  0001B4  CFDD F032          	movff	postdec2,??_printf+1
  2320  0001B8  C031  F03A         	movff	??_printf,printf@val
  2321  0001BC  C032  F03B         	movff	??_printf+1,printf@val+1
  2322  0001C0  6A3C               	clrf	printf@val+2,c
  2323  0001C2  6A3D               	clrf	printf@val+3,c
  2324  0001C4  0E02               	movlw	2
  2325  0001C6                     L2:
  2326  0001C6  2638               	addwf	printf@ap,f,c
  2327  0001C8  0E00               	movlw	0
  2328  0001CA  2239               	addwfc	printf@ap+1,f,c
  2329                           
  2330                           ;doprnt.c: 1287: }
  2331                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2332  0001CC  D046               	goto	l3870
  2333  0001CE                     l3840:
  2334                           
  2335                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2336  0001CE  0E01               	movlw	1
  2337  0001D0  6E41               	movwf	printf@c,c
  2338  0001D2                     l3842:
  2339  0001D2  0E0A               	movlw	10
  2340  0001D4  1841               	xorwf	printf@c,w,c
  2341  0001D6  B4D8               	btfsc	status,2,c
  2342  0001D8  D049               	goto	l3872
  2343  0001DA  D001               	goto	l3846
  2344  0001DC  D047               	goto	l3872
  2345  0001DE                     l3846:
  2346                           
  2347                           ;doprnt.c: 1306: if(val < dpowers[c])
  2348  0001DE  5041               	movf	printf@c,w,c
  2349  0001E0  0D04               	mullw	4
  2350  0001E2  0E6A               	movlw	low _dpowers
  2351  0001E4  24F3               	addwf	prodl,w,c
  2352  0001E6  6EF6               	movwf	tblptrl,c
  2353  0001E8  0EFF               	movlw	high _dpowers
  2354  0001EA  20F4               	addwfc	prodh,w,c
  2355  0001EC  6EF7               	movwf	tblptrh,c
  2356  0001EE                     	if	0	;There are less than 3 active tblptr bytes
  2357  0001EE                     	endif
  2358  0001EE  0009               	tblrd		*+
  2359  0001F0  50F5               	movf	tablat,w,c
  2360  0001F2  5C3A               	subwf	printf@val,w,c
  2361  0001F4  0009               	tblrd		*+
  2362  0001F6  50F5               	movf	tablat,w,c
  2363  0001F8  583B               	subwfb	printf@val+1,w,c
  2364  0001FA  0009               	tblrd		*+
  2365  0001FC  50F5               	movf	tablat,w,c
  2366  0001FE  583C               	subwfb	printf@val+2,w,c
  2367  000200  0009               	tblrd		*+
  2368  000202  50F5               	movf	tablat,w,c
  2369  000204  583D               	subwfb	printf@val+3,w,c
  2370  000206  A0D8               	btfss	status,0,c
  2371  000208  D031               	goto	l3872
  2372  00020A  D001               	goto	l3850
  2373                           
  2374                           ;doprnt.c: 1307: break;
  2375  00020C  D02F               	goto	l3872
  2376  00020E                     l3850:
  2377  00020E  2A41               	incf	printf@c,f,c
  2378  000210  D7E0               	goto	l3842
  2379                           
  2380                           ;doprnt.c: 1309: break;
  2381  000212  D02C               	goto	l3872
  2382  000214                     l3854:
  2383                           
  2384                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2385  000214  0E01               	movlw	1
  2386  000216  6E41               	movwf	printf@c,c
  2387  000218                     l3856:
  2388  000218  0E08               	movlw	8
  2389  00021A  1841               	xorwf	printf@c,w,c
  2390  00021C  B4D8               	btfsc	status,2,c
  2391  00021E  D026               	goto	l3872
  2392  000220  D001               	goto	l3860
  2393  000222  D024               	goto	l3872
  2394  000224                     l3860:
  2395                           
  2396                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2397  000224  5041               	movf	printf@c,w,c
  2398  000226  0D04               	mullw	4
  2399  000228  0E92               	movlw	low _hexpowers
  2400  00022A  24F3               	addwf	prodl,w,c
  2401  00022C  6EF6               	movwf	tblptrl,c
  2402  00022E  0EFF               	movlw	high _hexpowers
  2403  000230  20F4               	addwfc	prodh,w,c
  2404  000232  6EF7               	movwf	tblptrh,c
  2405  000234                     	if	0	;There are less than 3 active tblptr bytes
  2406  000234                     	endif
  2407  000234  0009               	tblrd		*+
  2408  000236  50F5               	movf	tablat,w,c
  2409  000238  5C3A               	subwf	printf@val,w,c
  2410  00023A  0009               	tblrd		*+
  2411  00023C  50F5               	movf	tablat,w,c
  2412  00023E  583B               	subwfb	printf@val+1,w,c
  2413  000240  0009               	tblrd		*+
  2414  000242  50F5               	movf	tablat,w,c
  2415  000244  583C               	subwfb	printf@val+2,w,c
  2416  000246  0009               	tblrd		*+
  2417  000248  50F5               	movf	tablat,w,c
  2418  00024A  583D               	subwfb	printf@val+3,w,c
  2419  00024C  A0D8               	btfss	status,0,c
  2420  00024E  D00E               	goto	l3872
  2421  000250  D001               	goto	l3864
  2422                           
  2423                           ;doprnt.c: 1318: break;
  2424  000252  D00C               	goto	l3872
  2425  000254                     l3864:
  2426  000254  2A41               	incf	printf@c,f,c
  2427  000256  D7E0               	goto	l3856
  2428                           
  2429                           ;doprnt.c: 1336: }
  2430                           
  2431                           ;doprnt.c: 1320: break;
  2432  000258  D009               	goto	l3872
  2433  00025A                     l3870:
  2434  00025A  5040               	movf	printf@flag,w,c
  2435  00025C  0B80               	andlw	128
  2436                           
  2437                           ; Switch size 1, requested type "space"
  2438                           ; Number of cases is 2, Range of values is 0 to 128
  2439                           ; switch strategies available:
  2440                           ; Name         Instructions Cycles
  2441                           ; simple_byte            7     4 (average)
  2442                           ;	Chosen strategy is simple_byte
  2443  00025E  0A00               	xorlw	0	; case 0
  2444  000260  B4D8               	btfsc	status,2,c
  2445  000262  D7B5               	goto	l3840
  2446  000264  0A80               	xorlw	128	; case 128
  2447  000266  B4D8               	btfsc	status,2,c
  2448  000268  D7D5               	goto	l3854
  2449  00026A  D000               	goto	l3872
  2450  00026C                     l3872:
  2451                           
  2452                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2453  00026C  503E               	movf	printf@width,w,c
  2454  00026E  103F               	iorwf	printf@width+1,w,c
  2455  000270  B4D8               	btfsc	status,2,c
  2456  000272  D00A               	goto	l3878
  2457  000274  C040  F031         	movff	printf@flag,??_printf
  2458  000278  0E03               	movlw	3
  2459  00027A  1631               	andwf	??_printf,f,c
  2460  00027C  B4D8               	btfsc	status,2,c
  2461  00027E  D004               	goto	l3878
  2462                           
  2463                           ;doprnt.c: 1346: width--;
  2464  000280  063E               	decf	printf@width,f,c
  2465  000282  A0D8               	btfss	status,0,c
  2466  000284  063F               	decf	printf@width+1,f,c
  2467  000286  D000               	goto	l3878
  2468  000288                     l3878:
  2469                           
  2470                           ;doprnt.c: 1381: if(width > c)
  2471  000288  0E80               	movlw	128
  2472  00028A  BE41               	btfsc	printf@c,7,c
  2473  00028C  0E7F               	movlw	127
  2474  00028E  6E31               	movwf	??_printf& (0+255),c
  2475  000290  503E               	movf	printf@width,w,c
  2476  000292  5C41               	subwf	printf@c,w,c
  2477  000294  503F               	movf	printf@width+1,w,c
  2478  000296  0A80               	xorlw	128
  2479  000298  5831               	subwfb	??_printf& (0+255),w,c
  2480  00029A  B0D8               	btfsc	status,0,c
  2481  00029C  D007               	goto	l3882
  2482                           
  2483                           ;doprnt.c: 1382: width -= c;
  2484  00029E  5041               	movf	printf@c,w,c
  2485  0002A0  5E3E               	subwf	printf@width,f,c
  2486  0002A2  0E00               	movlw	0
  2487  0002A4  BE41               	btfsc	printf@c,7,c
  2488  0002A6  0EFF               	movlw	255
  2489  0002A8  5A3F               	subwfb	printf@width+1,f,c
  2490  0002AA  D005               	goto	l3884
  2491  0002AC                     l3882:
  2492                           
  2493                           ;doprnt.c: 1383: else
  2494                           ;doprnt.c: 1384: width = 0;
  2495  0002AC  0E00               	movlw	0
  2496  0002AE  6E3F               	movwf	printf@width+1,c
  2497  0002B0  0E00               	movlw	0
  2498  0002B2  6E3E               	movwf	printf@width,c
  2499  0002B4  D000               	goto	l3884
  2500  0002B6                     l3884:
  2501                           
  2502                           ;doprnt.c: 1387: if(flag & 0x04) {
  2503  0002B6  A440               	btfss	printf@flag,2,c
  2504  0002B8  D01A               	goto	l3896
  2505                           
  2506                           ;doprnt.c: 1392: if(flag & 0x03)
  2507  0002BA  C040  F031         	movff	printf@flag,??_printf
  2508  0002BE  0E03               	movlw	3
  2509  0002C0  1631               	andwf	??_printf,f,c
  2510  0002C2  B4D8               	btfsc	status,2,c
  2511  0002C4  D004               	goto	l3890
  2512                           
  2513                           ;doprnt.c: 1393: (putch('-') );
  2514  0002C6  0E2D               	movlw	45
  2515  0002C8  EC82  F00B         	call	_putch
  2516  0002CC  D000               	goto	l3890
  2517  0002CE                     l3890:
  2518                           
  2519                           ;doprnt.c: 1415: if(width)
  2520  0002CE  503E               	movf	printf@width,w,c
  2521  0002D0  103F               	iorwf	printf@width+1,w,c
  2522  0002D2  B4D8               	btfsc	status,2,c
  2523  0002D4  D026               	goto	l3906
  2524  0002D6                     l3892:
  2525                           
  2526                           ;doprnt.c: 1417: (putch('0') );
  2527  0002D6  0E30               	movlw	48
  2528  0002D8  EC82  F00B         	call	_putch
  2529                           
  2530                           ;doprnt.c: 1418: while(--width);
  2531  0002DC  063E               	decf	printf@width,f,c
  2532  0002DE  A0D8               	btfss	status,0,c
  2533  0002E0  063F               	decf	printf@width+1,f,c
  2534  0002E2  503E               	movf	printf@width,w,c
  2535  0002E4  103F               	iorwf	printf@width+1,w,c
  2536  0002E6  B4D8               	btfsc	status,2,c
  2537  0002E8  D01C               	goto	l3906
  2538  0002EA  D7F5               	goto	l3892
  2539                           
  2540                           ;doprnt.c: 1420: } else
  2541  0002EC  D01A               	goto	l3906
  2542  0002EE                     l3896:
  2543                           
  2544                           ;doprnt.c: 1422: {
  2545                           ;doprnt.c: 1424: if(width
  2546                           ;doprnt.c: 1428: )
  2547  0002EE  503E               	movf	printf@width,w,c
  2548  0002F0  103F               	iorwf	printf@width+1,w,c
  2549  0002F2  B4D8               	btfsc	status,2,c
  2550  0002F4  D00C               	goto	l3902
  2551  0002F6                     l3898:
  2552                           
  2553                           ;doprnt.c: 1430: (putch(' ') );
  2554  0002F6  0E20               	movlw	32
  2555  0002F8  EC82  F00B         	call	_putch
  2556                           
  2557                           ;doprnt.c: 1431: while(--width);
  2558  0002FC  063E               	decf	printf@width,f,c
  2559  0002FE  A0D8               	btfss	status,0,c
  2560  000300  063F               	decf	printf@width+1,f,c
  2561  000302  503E               	movf	printf@width,w,c
  2562  000304  103F               	iorwf	printf@width+1,w,c
  2563  000306  B4D8               	btfsc	status,2,c
  2564  000308  D002               	goto	l3902
  2565  00030A  D7F5               	goto	l3898
  2566  00030C  D000               	goto	l3902
  2567  00030E                     l3902:
  2568                           
  2569                           ;doprnt.c: 1438: if(flag & 0x03)
  2570  00030E  C040  F031         	movff	printf@flag,??_printf
  2571  000312  0E03               	movlw	3
  2572  000314  1631               	andwf	??_printf,f,c
  2573  000316  B4D8               	btfsc	status,2,c
  2574  000318  D004               	goto	l3906
  2575                           
  2576                           ;doprnt.c: 1439: (putch('-') );
  2577  00031A  0E2D               	movlw	45
  2578  00031C  EC82  F00B         	call	_putch
  2579  000320  D000               	goto	l3906
  2580  000322                     l3906:
  2581                           
  2582                           ;doprnt.c: 1469: }
  2583                           ;doprnt.c: 1472: prec = c;
  2584  000322  5041               	movf	printf@c,w,c
  2585  000324  6E36               	movwf	printf@prec,c
  2586  000326  6A37               	clrf	printf@prec+1,c
  2587  000328  BE36               	btfsc	printf@prec,7,c
  2588  00032A  0637               	decf	printf@prec+1,f,c
  2589                           
  2590                           ;doprnt.c: 1474: while(prec--) {
  2591  00032C  D07F               	goto	l3920
  2592                           
  2593                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2594  00032E  D071               	goto	l3916
  2595  000330                     l3908:
  2596                           
  2597                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2598  000330  C036  F031         	movff	printf@prec,??_printf
  2599  000334  C037  F032         	movff	printf@prec+1,??_printf+1
  2600  000338  90D8               	bcf	status,0,c
  2601  00033A  3631               	rlcf	??_printf,f,c
  2602  00033C  3632               	rlcf	??_printf+1,f,c
  2603  00033E  90D8               	bcf	status,0,c
  2604  000340  3631               	rlcf	??_printf,f,c
  2605  000342  3632               	rlcf	??_printf+1,f,c
  2606  000344  0E6A               	movlw	low _dpowers
  2607  000346  2431               	addwf	??_printf,w,c
  2608  000348  6EF6               	movwf	tblptrl,c
  2609  00034A  0EFF               	movlw	high _dpowers
  2610  00034C  2032               	addwfc	??_printf+1,w,c
  2611  00034E  6EF7               	movwf	tblptrh,c
  2612  000350                     	if	0	;There are less than 3 active tblptr bytes
  2613  000350                     	endif
  2614  000350  0009               	tblrd		*+
  2615  000352  CFF5 F015          	movff	tablat,___lldiv@divisor
  2616  000356  0009               	tblrd		*+
  2617  000358  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2618  00035C  0009               	tblrd		*+
  2619  00035E  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2620  000362  000A               	tblrd		*-
  2621  000364  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2622  000368  C03A  F011         	movff	printf@val,___lldiv@dividend
  2623  00036C  C03B  F012         	movff	printf@val+1,___lldiv@dividend+1
  2624  000370  C03C  F013         	movff	printf@val+2,___lldiv@dividend+2
  2625  000374  C03D  F014         	movff	printf@val+3,___lldiv@dividend+3
  2626  000378  EC07  F008         	call	___lldiv	;wreg free
  2627  00037C  C011  F01E         	movff	?___lldiv,___llmod@dividend
  2628  000380  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  2629  000384  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  2630  000388  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  2631  00038C  0E0A               	movlw	10
  2632  00038E  6E22               	movwf	___llmod@divisor,c
  2633  000390  0E00               	movlw	0
  2634  000392  6E23               	movwf	___llmod@divisor+1,c
  2635  000394  0E00               	movlw	0
  2636  000396  6E24               	movwf	___llmod@divisor+2,c
  2637  000398  0E00               	movlw	0
  2638  00039A  6E25               	movwf	___llmod@divisor+3,c
  2639  00039C  EC4F  F009         	call	___llmod	;wreg free
  2640  0003A0  501E               	movf	?___llmod,w,c
  2641  0003A2  0F30               	addlw	48
  2642  0003A4  6E41               	movwf	printf@c,c
  2643                           
  2644                           ;doprnt.c: 1491: break;
  2645  0003A6  D03E               	goto	l3918
  2646  0003A8                     l3910:
  2647                           
  2648                           ;doprnt.c: 1499: {
  2649                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2650  0003A8  C03A  F011         	movff	printf@val,___lldiv@dividend
  2651  0003AC  C03B  F012         	movff	printf@val+1,___lldiv@dividend+1
  2652  0003B0  C03C  F013         	movff	printf@val+2,___lldiv@dividend+2
  2653  0003B4  C03D  F014         	movff	printf@val+3,___lldiv@dividend+3
  2654  0003B8  C036  F031         	movff	printf@prec,??_printf
  2655  0003BC  C037  F032         	movff	printf@prec+1,??_printf+1
  2656  0003C0  90D8               	bcf	status,0,c
  2657  0003C2  3631               	rlcf	??_printf,f,c
  2658  0003C4  3632               	rlcf	??_printf+1,f,c
  2659  0003C6  90D8               	bcf	status,0,c
  2660  0003C8  3631               	rlcf	??_printf,f,c
  2661  0003CA  3632               	rlcf	??_printf+1,f,c
  2662  0003CC  0E92               	movlw	low _hexpowers
  2663  0003CE  2431               	addwf	??_printf,w,c
  2664  0003D0  6EF6               	movwf	tblptrl,c
  2665  0003D2  0EFF               	movlw	high _hexpowers
  2666  0003D4  2032               	addwfc	??_printf+1,w,c
  2667  0003D6  6EF7               	movwf	tblptrh,c
  2668  0003D8                     	if	0	;There are less than 3 active tblptr bytes
  2669  0003D8                     	endif
  2670  0003D8  0009               	tblrd		*+
  2671  0003DA  CFF5 F015          	movff	tablat,___lldiv@divisor
  2672  0003DE  0009               	tblrd		*+
  2673  0003E0  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2674  0003E4  0009               	tblrd		*+
  2675  0003E6  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2676  0003EA  000A               	tblrd		*-
  2677  0003EC  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2678  0003F0  EC07  F008         	call	___lldiv	;wreg free
  2679  0003F4  5011               	movf	?___lldiv,w,c
  2680  0003F6  0B0F               	andlw	15
  2681  0003F8  6E35               	movwf	printf@idx,c
  2682                           
  2683                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2684  0003FA  5035               	movf	printf@idx,w,c
  2685  0003FC  0D01               	mullw	1
  2686  0003FE  0EE6               	movlw	low STR_4
  2687  000400  24F3               	addwf	prodl,w,c
  2688  000402  6EF6               	movwf	tblptrl,c
  2689  000404  0EFF               	movlw	high STR_4
  2690  000406  20F4               	addwfc	prodh,w,c
  2691  000408  6EF7               	movwf	tblptrh,c
  2692  00040A                     	if	0	;There are less than 3 active tblptr bytes
  2693  00040A                     	endif
  2694  00040A  0008               	tblrd		*
  2695  00040C  CFF5 F041          	movff	tablat,printf@c
  2696                           
  2697                           ;doprnt.c: 1523: }
  2698                           
  2699                           ;doprnt.c: 1508: }
  2700                           ;doprnt.c: 1510: break;
  2701  000410  D009               	goto	l3918
  2702  000412                     l3916:
  2703  000412  5040               	movf	printf@flag,w,c
  2704  000414  0B80               	andlw	128
  2705                           
  2706                           ; Switch size 1, requested type "space"
  2707                           ; Number of cases is 2, Range of values is 0 to 128
  2708                           ; switch strategies available:
  2709                           ; Name         Instructions Cycles
  2710                           ; simple_byte            7     4 (average)
  2711                           ;	Chosen strategy is simple_byte
  2712  000416  0A00               	xorlw	0	; case 0
  2713  000418  B4D8               	btfsc	status,2,c
  2714  00041A  D78A               	goto	l3908
  2715  00041C  0A80               	xorlw	128	; case 128
  2716  00041E  B4D8               	btfsc	status,2,c
  2717  000420  D7C3               	goto	l3910
  2718  000422  D000               	goto	l3918
  2719  000424                     l3918:
  2720                           
  2721                           ;doprnt.c: 1524: (putch(c) );
  2722  000424  5041               	movf	printf@c,w,c
  2723  000426  EC82  F00B         	call	_putch
  2724  00042A  D000               	goto	l3920
  2725  00042C                     l3920:
  2726  00042C  0636               	decf	printf@prec,f,c
  2727  00042E  A0D8               	btfss	status,0,c
  2728  000430  0637               	decf	printf@prec+1,f,c
  2729  000432  2836               	incf	printf@prec,w,c
  2730  000434  E1EE               	bnz	l3916
  2731  000436  2837               	incf	printf@prec+1,w,c
  2732  000438  B4D8               	btfsc	status,2,c
  2733  00043A  D002               	goto	l3922
  2734  00043C  D7EA               	goto	l3916
  2735  00043E  D000               	goto	l3922
  2736  000440                     l3922:
  2737  000440  C027  FFF6         	movff	printf@f,tblptrl
  2738  000444  C028  FFF7         	movff	printf@f+1,tblptrh
  2739  000448  4A27               	infsnz	printf@f,f,c
  2740  00044A  2A28               	incf	printf@f+1,f,c
  2741  00044C                     	if	0	;tblptru may be non-zero
  2742  00044C                     	endif
  2743  00044C                     	if	0	;tblptru may be non-zero
  2744  00044C                     	endif
  2745  00044C  0008               	tblrd		*
  2746  00044E  CFF5 F041          	movff	tablat,printf@c
  2747  000452  5041               	movf	printf@c,w,c
  2748  000454  B4D8               	btfsc	status,2,c
  2749  000456  D002               	goto	l472
  2750  000458  D5E6               	goto	l3784
  2751  00045A  D000               	goto	l472
  2752  00045C                     l472:
  2753  00045C  0012               	return		;funcret
  2754  00045E                     __end_of_printf:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           prodh	equ	0xFF4
  2761                           prodl	equ	0xFF3
  2762                           intcon	equ	0xFF2
  2763                           intcon2	equ	0xFF1
  2764                           postinc0	equ	0xFEE
  2765                           wreg	equ	0xFE8
  2766                           postdec1	equ	0xFE5
  2767                           fsr1l	equ	0xFE1
  2768                           indf2	equ	0xFDF
  2769                           postinc2	equ	0xFDE
  2770                           postdec2	equ	0xFDD
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _putch *****************
  2776 ;; Defined at:
  2777 ;;		line 81 in file "Lab10_sample_1.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  c               1    wreg     unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  c               1   16[COMRAM] unsigned char 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;		None               void
  2784 ;; Registers used:
  2785 ;;		wreg
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;Total ram usage:        1 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    3
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_printf
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text2
  2806  001704                     __ptext2:
  2807                           	opt stack 0
  2808  001704                     _putch:
  2809                           	opt stack 26
  2810                           
  2811                           ;incstack = 0
  2812                           ;putch@c stored from wreg
  2813  001704  6E11               	movwf	putch@c,c
  2814                           
  2815                           ;Lab10_sample_1.c: 83: while (!TRMT);
  2816  001706  D000               	goto	l121
  2817  001708                     l121:
  2818  001708  A2AC               	btfss	4012,1,c	;volatile
  2819  00170A  D7FE               	goto	l121
  2820                           
  2821                           ;Lab10_sample_1.c: 84: TXREG = c;
  2822  00170C  C011  FFAD         	movff	putch@c,4013	;volatile
  2823  001710  0012               	return		;funcret
  2824  001712                     __end_of_putch:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           prodh	equ	0xFF4
  2831                           prodl	equ	0xFF3
  2832                           intcon	equ	0xFF2
  2833                           intcon2	equ	0xFF1
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           postinc2	equ	0xFDE
  2840                           postdec2	equ	0xFDD
  2841                           fsr2h	equ	0xFDA
  2842                           fsr2l	equ	0xFD9
  2843                           status	equ	0xFD8
  2844                           
  2845 ;; *************** function _isdigit *****************
  2846 ;; Defined at:
  2847 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  c               1    wreg     unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  c               1   18[COMRAM] unsigned char 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;		None               void
  2854 ;; Registers used:
  2855 ;;		wreg, status,2, status,0
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;Total ram usage:        3 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    3
  2868 ;; This function calls:
  2869 ;;		Nothing
  2870 ;; This function is called by:
  2871 ;;		_printf
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text3
  2876  00162A                     __ptext3:
  2877                           	opt stack 0
  2878  00162A                     _isdigit:
  2879                           	opt stack 26
  2880                           
  2881                           ;incstack = 0
  2882                           ;isdigit@c stored from wreg
  2883  00162A  6E13               	movwf	isdigit@c,c
  2884  00162C  0E00               	movlw	0
  2885  00162E  6E12               	movwf	_isdigit$1664,c
  2886  001630  0E3A               	movlw	58
  2887  001632  6013               	cpfslt	isdigit@c,c
  2888  001634  D006               	goto	l2718
  2889  001636  0E2F               	movlw	47
  2890  001638  6413               	cpfsgt	isdigit@c,c
  2891  00163A  D003               	goto	l2718
  2892  00163C  0E01               	movlw	1
  2893  00163E  6E12               	movwf	_isdigit$1664,c
  2894  001640  D000               	goto	l2718
  2895  001642                     l2718:
  2896  001642  C012  F011         	movff	_isdigit$1664,??_isdigit
  2897  001646  3011               	rrcf	??_isdigit,w,c
  2898  001648  D000               	goto	l939
  2899  00164A                     l939:
  2900  00164A  0012               	return		;funcret
  2901  00164C                     __end_of_isdigit:
  2902                           	opt stack 0
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           intcon	equ	0xFF2
  2910                           intcon2	equ	0xFF1
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postdec1	equ	0xFE5
  2914                           fsr1l	equ	0xFE1
  2915                           indf2	equ	0xFDF
  2916                           postinc2	equ	0xFDE
  2917                           postdec2	equ	0xFDD
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function ___llmod *****************
  2923 ;; Defined at:
  2924 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  dividend        4   29[COMRAM] unsigned long 
  2927 ;;  divisor         4   33[COMRAM] unsigned long 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  counter         1   37[COMRAM] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  4   29[COMRAM] unsigned long 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        9 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    3
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_printf
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text4
  2954  00129E                     __ptext4:
  2955                           	opt stack 0
  2956  00129E                     ___llmod:
  2957                           	opt stack 26
  2958                           
  2959                           ;incstack = 0
  2960  00129E  5022               	movf	___llmod@divisor,w,c
  2961  0012A0  1023               	iorwf	___llmod@divisor+1,w,c
  2962  0012A2  1024               	iorwf	___llmod@divisor+2,w,c
  2963  0012A4  1025               	iorwf	___llmod@divisor+3,w,c
  2964  0012A6  B4D8               	btfsc	status,2,c
  2965  0012A8  D029               	goto	l978
  2966  0012AA  0E01               	movlw	1
  2967  0012AC  6E26               	movwf	___llmod@counter,c
  2968  0012AE  D007               	goto	l2750
  2969  0012B0                     l2748:
  2970  0012B0  90D8               	bcf	status,0,c
  2971  0012B2  3622               	rlcf	___llmod@divisor,f,c
  2972  0012B4  3623               	rlcf	___llmod@divisor+1,f,c
  2973  0012B6  3624               	rlcf	___llmod@divisor+2,f,c
  2974  0012B8  3625               	rlcf	___llmod@divisor+3,f,c
  2975  0012BA  2A26               	incf	___llmod@counter,f,c
  2976  0012BC  D000               	goto	l2750
  2977  0012BE                     l2750:
  2978  0012BE  BE25               	btfsc	___llmod@divisor+3,7,c
  2979  0012C0  D002               	goto	l2752
  2980  0012C2  D7F6               	goto	l2748
  2981  0012C4  D000               	goto	l2752
  2982  0012C6                     l2752:
  2983  0012C6  5022               	movf	___llmod@divisor,w,c
  2984  0012C8  5C1E               	subwf	___llmod@dividend,w,c
  2985  0012CA  5023               	movf	___llmod@divisor+1,w,c
  2986  0012CC  581F               	subwfb	___llmod@dividend+1,w,c
  2987  0012CE  5024               	movf	___llmod@divisor+2,w,c
  2988  0012D0  5820               	subwfb	___llmod@dividend+2,w,c
  2989  0012D2  5025               	movf	___llmod@divisor+3,w,c
  2990  0012D4  5821               	subwfb	___llmod@dividend+3,w,c
  2991  0012D6  A0D8               	btfss	status,0,c
  2992  0012D8  D009               	goto	l2756
  2993  0012DA  5022               	movf	___llmod@divisor,w,c
  2994  0012DC  5E1E               	subwf	___llmod@dividend,f,c
  2995  0012DE  5023               	movf	___llmod@divisor+1,w,c
  2996  0012E0  5A1F               	subwfb	___llmod@dividend+1,f,c
  2997  0012E2  5024               	movf	___llmod@divisor+2,w,c
  2998  0012E4  5A20               	subwfb	___llmod@dividend+2,f,c
  2999  0012E6  5025               	movf	___llmod@divisor+3,w,c
  3000  0012E8  5A21               	subwfb	___llmod@dividend+3,f,c
  3001  0012EA  D000               	goto	l2756
  3002  0012EC                     l2756:
  3003  0012EC  90D8               	bcf	status,0,c
  3004  0012EE  3225               	rrcf	___llmod@divisor+3,f,c
  3005  0012F0  3224               	rrcf	___llmod@divisor+2,f,c
  3006  0012F2  3223               	rrcf	___llmod@divisor+1,f,c
  3007  0012F4  3222               	rrcf	___llmod@divisor,f,c
  3008  0012F6  2E26               	decfsz	___llmod@counter,f,c
  3009  0012F8  D7E6               	goto	l2752
  3010  0012FA  D000               	goto	l978
  3011  0012FC                     l978:
  3012  0012FC  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3013  001300  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3014  001304  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3015  001308  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3016  00130C  0012               	return		;funcret
  3017  00130E                     __end_of___llmod:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           tblptrh	equ	0xFF7
  3021                           tblptrl	equ	0xFF6
  3022                           tablat	equ	0xFF5
  3023                           prodh	equ	0xFF4
  3024                           prodl	equ	0xFF3
  3025                           intcon	equ	0xFF2
  3026                           intcon2	equ	0xFF1
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1l	equ	0xFE1
  3031                           indf2	equ	0xFDF
  3032                           postinc2	equ	0xFDE
  3033                           postdec2	equ	0xFDD
  3034                           fsr2h	equ	0xFDA
  3035                           fsr2l	equ	0xFD9
  3036                           status	equ	0xFD8
  3037                           
  3038 ;; *************** function ___lldiv *****************
  3039 ;; Defined at:
  3040 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  dividend        4   16[COMRAM] unsigned long 
  3043 ;;  divisor         4   20[COMRAM] unsigned long 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  quotient        4   24[COMRAM] unsigned long 
  3046 ;;  counter         1   28[COMRAM] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  4   16[COMRAM] unsigned long 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:       13 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    3
  3063 ;; This function calls:
  3064 ;;		Nothing
  3065 ;; This function is called by:
  3066 ;;		_printf
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text5
  3071  00100E                     __ptext5:
  3072                           	opt stack 0
  3073  00100E                     ___lldiv:
  3074                           	opt stack 26
  3075                           
  3076                           ;incstack = 0
  3077  00100E  0E00               	movlw	0
  3078  001010  6E19               	movwf	___lldiv@quotient,c
  3079  001012  0E00               	movlw	0
  3080  001014  6E1A               	movwf	___lldiv@quotient+1,c
  3081  001016  0E00               	movlw	0
  3082  001018  6E1B               	movwf	___lldiv@quotient+2,c
  3083  00101A  0E00               	movlw	0
  3084  00101C  6E1C               	movwf	___lldiv@quotient+3,c
  3085  00101E  5015               	movf	___lldiv@divisor,w,c
  3086  001020  1016               	iorwf	___lldiv@divisor+1,w,c
  3087  001022  1017               	iorwf	___lldiv@divisor+2,w,c
  3088  001024  1018               	iorwf	___lldiv@divisor+3,w,c
  3089  001026  B4D8               	btfsc	status,2,c
  3090  001028  D02F               	goto	l968
  3091  00102A  0E01               	movlw	1
  3092  00102C  6E1D               	movwf	___lldiv@counter,c
  3093  00102E  D007               	goto	l2730
  3094  001030                     l2728:
  3095  001030  90D8               	bcf	status,0,c
  3096  001032  3615               	rlcf	___lldiv@divisor,f,c
  3097  001034  3616               	rlcf	___lldiv@divisor+1,f,c
  3098  001036  3617               	rlcf	___lldiv@divisor+2,f,c
  3099  001038  3618               	rlcf	___lldiv@divisor+3,f,c
  3100  00103A  2A1D               	incf	___lldiv@counter,f,c
  3101  00103C  D000               	goto	l2730
  3102  00103E                     l2730:
  3103  00103E  BE18               	btfsc	___lldiv@divisor+3,7,c
  3104  001040  D002               	goto	l2732
  3105  001042  D7F6               	goto	l2728
  3106  001044  D000               	goto	l2732
  3107  001046                     l2732:
  3108  001046  90D8               	bcf	status,0,c
  3109  001048  3619               	rlcf	___lldiv@quotient,f,c
  3110  00104A  361A               	rlcf	___lldiv@quotient+1,f,c
  3111  00104C  361B               	rlcf	___lldiv@quotient+2,f,c
  3112  00104E  361C               	rlcf	___lldiv@quotient+3,f,c
  3113  001050  5015               	movf	___lldiv@divisor,w,c
  3114  001052  5C11               	subwf	___lldiv@dividend,w,c
  3115  001054  5016               	movf	___lldiv@divisor+1,w,c
  3116  001056  5812               	subwfb	___lldiv@dividend+1,w,c
  3117  001058  5017               	movf	___lldiv@divisor+2,w,c
  3118  00105A  5813               	subwfb	___lldiv@dividend+2,w,c
  3119  00105C  5018               	movf	___lldiv@divisor+3,w,c
  3120  00105E  5814               	subwfb	___lldiv@dividend+3,w,c
  3121  001060  A0D8               	btfss	status,0,c
  3122  001062  D00A               	goto	l2740
  3123  001064  5015               	movf	___lldiv@divisor,w,c
  3124  001066  5E11               	subwf	___lldiv@dividend,f,c
  3125  001068  5016               	movf	___lldiv@divisor+1,w,c
  3126  00106A  5A12               	subwfb	___lldiv@dividend+1,f,c
  3127  00106C  5017               	movf	___lldiv@divisor+2,w,c
  3128  00106E  5A13               	subwfb	___lldiv@dividend+2,f,c
  3129  001070  5018               	movf	___lldiv@divisor+3,w,c
  3130  001072  5A14               	subwfb	___lldiv@dividend+3,f,c
  3131  001074  8019               	bsf	___lldiv@quotient,0,c
  3132  001076  D000               	goto	l2740
  3133  001078                     l2740:
  3134  001078  90D8               	bcf	status,0,c
  3135  00107A  3218               	rrcf	___lldiv@divisor+3,f,c
  3136  00107C  3217               	rrcf	___lldiv@divisor+2,f,c
  3137  00107E  3216               	rrcf	___lldiv@divisor+1,f,c
  3138  001080  3215               	rrcf	___lldiv@divisor,f,c
  3139  001082  2E1D               	decfsz	___lldiv@counter,f,c
  3140  001084  D7E0               	goto	l2732
  3141  001086  D000               	goto	l968
  3142  001088                     l968:
  3143  001088  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3144  00108C  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3145  001090  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3146  001094  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3147  001098  0012               	return		;funcret
  3148  00109A                     __end_of___lldiv:
  3149                           	opt stack 0
  3150                           tblptru	equ	0xFF8
  3151                           tblptrh	equ	0xFF7
  3152                           tblptrl	equ	0xFF6
  3153                           tablat	equ	0xFF5
  3154                           prodh	equ	0xFF4
  3155                           prodl	equ	0xFF3
  3156                           intcon	equ	0xFF2
  3157                           intcon2	equ	0xFF1
  3158                           postinc0	equ	0xFEE
  3159                           wreg	equ	0xFE8
  3160                           postdec1	equ	0xFE5
  3161                           fsr1l	equ	0xFE1
  3162                           indf2	equ	0xFDF
  3163                           postinc2	equ	0xFDE
  3164                           postdec2	equ	0xFDD
  3165                           fsr2h	equ	0xFDA
  3166                           fsr2l	equ	0xFD9
  3167                           status	equ	0xFD8
  3168                           
  3169 ;; *************** function _init_UART *****************
  3170 ;; Defined at:
  3171 ;;		line 86 in file "Lab10_sample_1.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;		None
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;		None
  3176 ;; Return value:  Size  Location     Type
  3177 ;;		None               void
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;Total ram usage:        0 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    4
  3192 ;; This function calls:
  3193 ;;		_OpenUSART
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text6
  3200  001698                     __ptext6:
  3201                           	opt stack 0
  3202  001698                     _init_UART:
  3203                           	opt stack 26
  3204                           
  3205                           ;Lab10_sample_1.c: 88: OpenUSART (0b01111111 & 0b10111111 &
  3206                           ;Lab10_sample_1.c: 89: 0b11111110 & 0b11111101 & 0b11111111 &
  3207                           ;Lab10_sample_1.c: 90: 0b11111111, 25);
  3208                           
  3209                           ;incstack = 0
  3210  001698  0E00               	movlw	0
  3211  00169A  6E12               	movwf	OpenUSART@spbrg+1,c
  3212  00169C  0E19               	movlw	25
  3213  00169E  6E11               	movwf	OpenUSART@spbrg,c
  3214  0016A0  0E3C               	movlw	60
  3215  0016A2  EC87  F009         	call	_OpenUSART
  3216                           
  3217                           ;Lab10_sample_1.c: 91: OSCCON = 0x60;
  3218  0016A6  0E60               	movlw	96
  3219  0016A8  6ED3               	movwf	4051,c	;volatile
  3220  0016AA  0012               	return		;funcret
  3221  0016AC                     __end_of_init_UART:
  3222                           	opt stack 0
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           intcon	equ	0xFF2
  3230                           intcon2	equ	0xFF1
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           postdec1	equ	0xFE5
  3234                           fsr1l	equ	0xFE1
  3235                           indf2	equ	0xFDF
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _OpenUSART *****************
  3243 ;; Defined at:
  3244 ;;		line 73 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;  config          1    wreg     unsigned char 
  3247 ;;  spbrg           2   16[COMRAM] unsigned int 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  config          1   18[COMRAM] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, status,2
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:        3 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    3
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_init_UART
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text7
  3274  00130E                     __ptext7:
  3275                           	opt stack 0
  3276  00130E                     _OpenUSART:
  3277                           	opt stack 26
  3278                           
  3279                           ;incstack = 0
  3280                           ;OpenUSART@config stored from wreg
  3281  00130E  6E13               	movwf	OpenUSART@config,c
  3282  001310  0E00               	movlw	0
  3283  001312  6EAC               	movwf	4012,c	;volatile
  3284  001314  0E00               	movlw	0
  3285  001316  6EAB               	movwf	4011,c	;volatile
  3286  001318  A013               	btfss	OpenUSART@config,0,c
  3287  00131A  D002               	goto	l2568
  3288  00131C  88AC               	bsf	4012,4,c	;volatile
  3289  00131E  D000               	goto	l2568
  3290  001320                     l2568:
  3291  001320  A213               	btfss	OpenUSART@config,1,c
  3292  001322  D003               	goto	l2572
  3293  001324  8CAC               	bsf	4012,6,c	;volatile
  3294  001326  8CAB               	bsf	4011,6,c	;volatile
  3295  001328  D000               	goto	l2572
  3296  00132A                     l2572:
  3297  00132A  A413               	btfss	OpenUSART@config,2,c
  3298  00132C  D002               	goto	l2576
  3299  00132E  8EAC               	bsf	4012,7,c	;volatile
  3300  001330  D000               	goto	l2576
  3301  001332                     l2576:
  3302  001332  A613               	btfss	OpenUSART@config,3,c
  3303  001334  D002               	goto	l496
  3304  001336  88AB               	bsf	4011,4,c	;volatile
  3305  001338  D002               	goto	l2580
  3306  00133A                     l496:
  3307  00133A  8AAB               	bsf	4011,5,c	;volatile
  3308  00133C  D000               	goto	l2580
  3309  00133E                     l2580:
  3310  00133E  B813               	btfsc	OpenUSART@config,4,c
  3311  001340  84AC               	bsf	4012,2,c	;volatile
  3312  001342  989E               	bcf	3998,4,c	;volatile
  3313  001344  AA13               	btfss	OpenUSART@config,5,c
  3314  001346  D002               	goto	l2588
  3315  001348  86AB               	bsf	4011,3,c	;volatile
  3316  00134A  D000               	goto	l2588
  3317  00134C                     l2588:
  3318  00134C  AC13               	btfss	OpenUSART@config,6,c
  3319  00134E  D002               	goto	l500
  3320  001350  8A9D               	bsf	3997,5,c	;volatile
  3321  001352  D001               	goto	l501
  3322  001354                     l500:
  3323  001354  9A9D               	bcf	3997,5,c	;volatile
  3324  001356                     l501:
  3325  001356  9A9E               	bcf	3998,5,c	;volatile
  3326  001358  AE13               	btfss	OpenUSART@config,7,c
  3327  00135A  D002               	goto	l502
  3328  00135C  889D               	bsf	3997,4,c	;volatile
  3329  00135E  D001               	goto	l503
  3330  001360                     l502:
  3331  001360  989D               	bcf	3997,4,c	;volatile
  3332  001362                     l503:
  3333  001362  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3334  001366  5012               	movf	OpenUSART@spbrg+1,w,c
  3335  001368  6EB0               	movwf	4016,c	;volatile
  3336  00136A  8AAC               	bsf	4012,5,c	;volatile
  3337  00136C  8EAB               	bsf	4011,7,c	;volatile
  3338  00136E  9C94               	bcf	3988,6,c	;volatile
  3339  001370  8E94               	bsf	3988,7,c	;volatile
  3340  001372  B8AC               	btfsc	4012,4,c	;volatile
  3341  001374  BEAC               	btfsc	4012,7,c	;volatile
  3342  001376  D002               	goto	l505
  3343  001378  8C94               	bsf	3988,6,c	;volatile
  3344  00137A  D000               	goto	l505
  3345  00137C                     l505:
  3346  00137C  0012               	return		;funcret
  3347  00137E                     __end_of_OpenUSART:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           intcon2	equ	0xFF1
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postdec1	equ	0xFE5
  3360                           fsr1l	equ	0xFE1
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _fillCircle *****************
  3369 ;; Defined at:
  3370 ;;		line 614 in file "ST7735_TFT.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  x0              2   58[COMRAM] int 
  3373 ;;  y0              2   60[COMRAM] int 
  3374 ;;  r               2   62[COMRAM] int 
  3375 ;;  color           2   64[COMRAM] unsigned int 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;		None
  3378 ;; Return value:  Size  Location     Type
  3379 ;;		None               void
  3380 ;; Registers used:
  3381 ;;		wreg, status,2, status,0, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3387 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;Total ram usage:        8 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    8
  3394 ;; This function calls:
  3395 ;;		_drawFastVLine
  3396 ;;		_fillCircleHelper
  3397 ;; This function is called by:
  3398 ;;		_main
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text8
  3403  00137E                     __ptext8:
  3404                           	opt stack 0
  3405  00137E                     _fillCircle:
  3406                           	opt stack 22
  3407                           
  3408                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3409                           
  3410                           ;incstack = 0
  3411  00137E  503F               	movf	fillCircle@r,w,c
  3412  001380  0800               	sublw	0
  3413  001382  243D               	addwf	fillCircle@y0,w,c
  3414  001384  6E18               	movwf	drawFastVLine@y,c
  3415  001386  80D8               	bsf	status,0,c
  3416  001388  343F               	rlcf	fillCircle@r,w,c
  3417  00138A  6E19               	movwf	drawFastVLine@h,c
  3418  00138C  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3419  001390  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3420  001394  503B               	movf	fillCircle@x0,w,c
  3421  001396  EC4D  F008         	call	_drawFastVLine
  3422                           
  3423                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3424  00139A  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3425  00139E  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3426  0013A2  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3427  0013A6  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3428  0013AA  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3429  0013AE  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3430  0013B2  0E00               	movlw	0
  3431  0013B4  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3432  0013B6  0E03               	movlw	3
  3433  0013B8  6E29               	movwf	fillCircleHelper@cornername,c
  3434  0013BA  0E00               	movlw	0
  3435  0013BC  6E2C               	movwf	fillCircleHelper@delta+1,c
  3436  0013BE  0E00               	movlw	0
  3437  0013C0  6E2B               	movwf	fillCircleHelper@delta,c
  3438  0013C2  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3439  0013C6  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3440  0013CA  EC30  F005         	call	_fillCircleHelper	;wreg free
  3441  0013CE  0012               	return		;funcret
  3442  0013D0                     __end_of_fillCircle:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           prodh	equ	0xFF4
  3449                           prodl	equ	0xFF3
  3450                           intcon	equ	0xFF2
  3451                           intcon2	equ	0xFF1
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           postinc2	equ	0xFDE
  3458                           postdec2	equ	0xFDD
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _fillCircleHelper *****************
  3464 ;; Defined at:
  3465 ;;		line 589 in file "ST7735_TFT.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  x0              2   34[COMRAM] int 
  3468 ;;  y0              2   36[COMRAM] int 
  3469 ;;  r               2   38[COMRAM] int 
  3470 ;;  cornername      2   40[COMRAM] unsigned int 
  3471 ;;  delta           2   42[COMRAM] int 
  3472 ;;  color           2   44[COMRAM] unsigned int 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  y               2   56[COMRAM] int 
  3475 ;;  x               2   54[COMRAM] int 
  3476 ;;  f               2   52[COMRAM] int 
  3477 ;;  ddF_y           2   50[COMRAM] int 
  3478 ;;  ddF_x           2   48[COMRAM] int 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;		None               void
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3488 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;Total ram usage:       24 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    7
  3495 ;; This function calls:
  3496 ;;		_drawFastVLine
  3497 ;; This function is called by:
  3498 ;;		_fillCircle
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text9
  3503  000A60                     __ptext9:
  3504                           	opt stack 0
  3505  000A60                     _fillCircleHelper:
  3506                           	opt stack 22
  3507                           
  3508                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3509                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3510                           
  3511                           ;incstack = 0
  3512  000A60  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3513  000A64  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3514  000A68  1E2F               	comf	??_fillCircleHelper,f,c
  3515  000A6A  1E30               	comf	??_fillCircleHelper+1,f,c
  3516  000A6C  4A2F               	infsnz	??_fillCircleHelper,f,c
  3517  000A6E  2A30               	incf	??_fillCircleHelper+1,f,c
  3518  000A70  0E01               	movlw	1
  3519  000A72  242F               	addwf	??_fillCircleHelper,w,c
  3520  000A74  6E35               	movwf	fillCircleHelper@f,c
  3521  000A76  0E00               	movlw	0
  3522  000A78  2030               	addwfc	??_fillCircleHelper+1,w,c
  3523  000A7A  6E36               	movwf	fillCircleHelper@f+1,c
  3524  000A7C  0E00               	movlw	0
  3525  000A7E  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3526  000A80  0E01               	movlw	1
  3527  000A82  6E31               	movwf	fillCircleHelper@ddF_x,c
  3528  000A84  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3529  000A88  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3530  000A8C  90D8               	bcf	status,0,c
  3531  000A8E  362F               	rlcf	??_fillCircleHelper,f,c
  3532  000A90  3630               	rlcf	??_fillCircleHelper+1,f,c
  3533  000A92  1E2F               	comf	??_fillCircleHelper,f,c
  3534  000A94  1E30               	comf	??_fillCircleHelper+1,f,c
  3535  000A96  4A2F               	infsnz	??_fillCircleHelper,f,c
  3536  000A98  2A30               	incf	??_fillCircleHelper+1,f,c
  3537  000A9A  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3538  000A9E  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3539  000AA2  0E00               	movlw	0
  3540  000AA4  6E38               	movwf	fillCircleHelper@x+1,c
  3541  000AA6  0E00               	movlw	0
  3542  000AA8  6E37               	movwf	fillCircleHelper@x,c
  3543  000AAA  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3544  000AAE  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3545                           
  3546                           ;ST7735_TFT.c: 593: while (x<y) {
  3547  000AB2  D067               	goto	l3716
  3548  000AB4                     l3696:
  3549                           
  3550                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3551  000AB4  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3552  000AB6  D00B               	goto	l365
  3553                           
  3554                           ;ST7735_TFT.c: 595: y--;
  3555  000AB8  0639               	decf	fillCircleHelper@y,f,c
  3556  000ABA  A0D8               	btfss	status,0,c
  3557  000ABC  063A               	decf	fillCircleHelper@y+1,f,c
  3558                           
  3559                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3560  000ABE  0E02               	movlw	2
  3561  000AC0  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3562  000AC2  0E00               	movlw	0
  3563  000AC4  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3564                           
  3565                           ;ST7735_TFT.c: 597: f += ddF_y;
  3566  000AC6  5033               	movf	fillCircleHelper@ddF_y,w,c
  3567  000AC8  2635               	addwf	fillCircleHelper@f,f,c
  3568  000ACA  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3569  000ACC  2236               	addwfc	fillCircleHelper@f+1,f,c
  3570  000ACE                     l365:
  3571                           
  3572                           ;ST7735_TFT.c: 598: }
  3573                           ;ST7735_TFT.c: 599: x++;
  3574  000ACE  4A37               	infsnz	fillCircleHelper@x,f,c
  3575  000AD0  2A38               	incf	fillCircleHelper@x+1,f,c
  3576                           
  3577                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3578  000AD2  0E02               	movlw	2
  3579  000AD4  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3580  000AD6  0E00               	movlw	0
  3581  000AD8  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3582                           
  3583                           ;ST7735_TFT.c: 601: f += ddF_x;
  3584  000ADA  5031               	movf	fillCircleHelper@ddF_x,w,c
  3585  000ADC  2635               	addwf	fillCircleHelper@f,f,c
  3586  000ADE  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3587  000AE0  2236               	addwfc	fillCircleHelper@f+1,f,c
  3588                           
  3589                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3590  000AE2  A029               	btfss	fillCircleHelper@cornername,0,c
  3591  000AE4  D025               	goto	l3712
  3592                           
  3593                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3594  000AE6  5039               	movf	fillCircleHelper@y,w,c
  3595  000AE8  0800               	sublw	0
  3596  000AEA  2425               	addwf	fillCircleHelper@y0,w,c
  3597  000AEC  6E18               	movwf	drawFastVLine@y,c
  3598  000AEE  5039               	movf	fillCircleHelper@y,w,c
  3599  000AF0  2439               	addwf	fillCircleHelper@y,w,c
  3600  000AF2  242B               	addwf	fillCircleHelper@delta,w,c
  3601  000AF4  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3602  000AF6  282F               	incf	??_fillCircleHelper,w,c
  3603  000AF8  6E19               	movwf	drawFastVLine@h,c
  3604  000AFA  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3605  000AFE  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3606  000B02  5023               	movf	fillCircleHelper@x0,w,c
  3607  000B04  2437               	addwf	fillCircleHelper@x,w,c
  3608  000B06  EC4D  F008         	call	_drawFastVLine
  3609                           
  3610                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3611  000B0A  5037               	movf	fillCircleHelper@x,w,c
  3612  000B0C  0800               	sublw	0
  3613  000B0E  2425               	addwf	fillCircleHelper@y0,w,c
  3614  000B10  6E18               	movwf	drawFastVLine@y,c
  3615  000B12  5037               	movf	fillCircleHelper@x,w,c
  3616  000B14  2437               	addwf	fillCircleHelper@x,w,c
  3617  000B16  242B               	addwf	fillCircleHelper@delta,w,c
  3618  000B18  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3619  000B1A  282F               	incf	??_fillCircleHelper,w,c
  3620  000B1C  6E19               	movwf	drawFastVLine@h,c
  3621  000B1E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3622  000B22  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3623  000B26  5023               	movf	fillCircleHelper@x0,w,c
  3624  000B28  2439               	addwf	fillCircleHelper@y,w,c
  3625  000B2A  EC4D  F008         	call	_drawFastVLine
  3626  000B2E  D000               	goto	l3712
  3627  000B30                     l3712:
  3628                           
  3629                           ;ST7735_TFT.c: 606: }
  3630                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3631  000B30  A229               	btfss	fillCircleHelper@cornername,1,c
  3632  000B32  D027               	goto	l3716
  3633                           
  3634                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3635  000B34  5039               	movf	fillCircleHelper@y,w,c
  3636  000B36  0800               	sublw	0
  3637  000B38  2425               	addwf	fillCircleHelper@y0,w,c
  3638  000B3A  6E18               	movwf	drawFastVLine@y,c
  3639  000B3C  5039               	movf	fillCircleHelper@y,w,c
  3640  000B3E  2439               	addwf	fillCircleHelper@y,w,c
  3641  000B40  242B               	addwf	fillCircleHelper@delta,w,c
  3642  000B42  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3643  000B44  282F               	incf	??_fillCircleHelper,w,c
  3644  000B46  6E19               	movwf	drawFastVLine@h,c
  3645  000B48  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3646  000B4C  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3647  000B50  5037               	movf	fillCircleHelper@x,w,c
  3648  000B52  0800               	sublw	0
  3649  000B54  2423               	addwf	fillCircleHelper@x0,w,c
  3650  000B56  EC4D  F008         	call	_drawFastVLine
  3651                           
  3652                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3653  000B5A  5037               	movf	fillCircleHelper@x,w,c
  3654  000B5C  0800               	sublw	0
  3655  000B5E  2425               	addwf	fillCircleHelper@y0,w,c
  3656  000B60  6E18               	movwf	drawFastVLine@y,c
  3657  000B62  5037               	movf	fillCircleHelper@x,w,c
  3658  000B64  2437               	addwf	fillCircleHelper@x,w,c
  3659  000B66  242B               	addwf	fillCircleHelper@delta,w,c
  3660  000B68  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3661  000B6A  282F               	incf	??_fillCircleHelper,w,c
  3662  000B6C  6E19               	movwf	drawFastVLine@h,c
  3663  000B6E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3664  000B72  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3665  000B76  5039               	movf	fillCircleHelper@y,w,c
  3666  000B78  0800               	sublw	0
  3667  000B7A  2423               	addwf	fillCircleHelper@x0,w,c
  3668  000B7C  EC4D  F008         	call	_drawFastVLine
  3669  000B80  D000               	goto	l3716
  3670  000B82                     l3716:
  3671  000B82  5039               	movf	fillCircleHelper@y,w,c
  3672  000B84  5C37               	subwf	fillCircleHelper@x,w,c
  3673  000B86  5038               	movf	fillCircleHelper@x+1,w,c
  3674  000B88  0A80               	xorlw	128
  3675  000B8A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3676  000B8C  503A               	movf	fillCircleHelper@y+1,w,c
  3677  000B8E  0A80               	xorlw	128
  3678  000B90  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3679  000B92  A0D8               	btfss	status,0,c
  3680  000B94  D78F               	goto	l3696
  3681  000B96  0012               	return		;funcret
  3682  000B98                     __end_of_fillCircleHelper:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           intcon	equ	0xFF2
  3691                           intcon2	equ	0xFF1
  3692                           postinc0	equ	0xFEE
  3693                           wreg	equ	0xFE8
  3694                           postdec1	equ	0xFE5
  3695                           fsr1l	equ	0xFE1
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           postdec2	equ	0xFDD
  3699                           fsr2h	equ	0xFDA
  3700                           fsr2l	equ	0xFD9
  3701                           status	equ	0xFD8
  3702                           
  3703 ;; *************** function _drawCircle *****************
  3704 ;; Defined at:
  3705 ;;		line 528 in file "ST7735_TFT.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  x0              2   27[COMRAM] int 
  3708 ;;  y0              2   29[COMRAM] int 
  3709 ;;  r               2   31[COMRAM] int 
  3710 ;;  color           2   33[COMRAM] unsigned int 
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  y               2   45[COMRAM] int 
  3713 ;;  x               2   43[COMRAM] int 
  3714 ;;  f               2   41[COMRAM] int 
  3715 ;;  ddF_y           2   39[COMRAM] int 
  3716 ;;  ddF_x           2   37[COMRAM] int 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;		None               void
  3719 ;; Registers used:
  3720 ;;		wreg, status,2, status,0, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3726 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;Total ram usage:       20 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    7
  3733 ;; This function calls:
  3734 ;;		_drawPixel
  3735 ;; This function is called by:
  3736 ;;		_main
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text10
  3741  00060E                     __ptext10:
  3742                           	opt stack 0
  3743  00060E                     _drawCircle:
  3744                           	opt stack 23
  3745                           
  3746                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3747                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3748                           
  3749                           ;incstack = 0
  3750  00060E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3751  000612  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3752  000616  1E24               	comf	??_drawCircle,f,c
  3753  000618  1E25               	comf	??_drawCircle+1,f,c
  3754  00061A  4A24               	infsnz	??_drawCircle,f,c
  3755  00061C  2A25               	incf	??_drawCircle+1,f,c
  3756  00061E  0E01               	movlw	1
  3757  000620  2424               	addwf	??_drawCircle,w,c
  3758  000622  6E2A               	movwf	drawCircle@f,c
  3759  000624  0E00               	movlw	0
  3760  000626  2025               	addwfc	??_drawCircle+1,w,c
  3761  000628  6E2B               	movwf	drawCircle@f+1,c
  3762  00062A  0E00               	movlw	0
  3763  00062C  6E27               	movwf	drawCircle@ddF_x+1,c
  3764  00062E  0E01               	movlw	1
  3765  000630  6E26               	movwf	drawCircle@ddF_x,c
  3766  000632  C020  F024         	movff	drawCircle@r,??_drawCircle
  3767  000636  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3768  00063A  90D8               	bcf	status,0,c
  3769  00063C  3624               	rlcf	??_drawCircle,f,c
  3770  00063E  3625               	rlcf	??_drawCircle+1,f,c
  3771  000640  1E24               	comf	??_drawCircle,f,c
  3772  000642  1E25               	comf	??_drawCircle+1,f,c
  3773  000644  4A24               	infsnz	??_drawCircle,f,c
  3774  000646  2A25               	incf	??_drawCircle+1,f,c
  3775  000648  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3776  00064C  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3777  000650  0E00               	movlw	0
  3778  000652  6E2D               	movwf	drawCircle@x+1,c
  3779  000654  0E00               	movlw	0
  3780  000656  6E2C               	movwf	drawCircle@x,c
  3781  000658  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3782  00065C  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3783                           
  3784                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3785  000660  501E               	movf	drawCircle@y0,w,c
  3786  000662  2420               	addwf	drawCircle@r,w,c
  3787  000664  6E18               	movwf	drawPixel@y,c
  3788  000666  C022  F019         	movff	drawCircle@color,drawPixel@color
  3789  00066A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3790  00066E  501C               	movf	drawCircle@x0,w,c
  3791  000670  ECD4  F00A         	call	_drawPixel
  3792                           
  3793                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3794  000674  5020               	movf	drawCircle@r,w,c
  3795  000676  0800               	sublw	0
  3796  000678  241E               	addwf	drawCircle@y0,w,c
  3797  00067A  6E18               	movwf	drawPixel@y,c
  3798  00067C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3799  000680  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3800  000684  501C               	movf	drawCircle@x0,w,c
  3801  000686  ECD4  F00A         	call	_drawPixel
  3802                           
  3803                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3804  00068A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3805  00068E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3806  000692  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3807  000696  501C               	movf	drawCircle@x0,w,c
  3808  000698  2420               	addwf	drawCircle@r,w,c
  3809  00069A  ECD4  F00A         	call	_drawPixel
  3810                           
  3811                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3812  00069E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3813  0006A2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3814  0006A6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3815  0006AA  5020               	movf	drawCircle@r,w,c
  3816  0006AC  0800               	sublw	0
  3817  0006AE  241C               	addwf	drawCircle@x0,w,c
  3818  0006B0  ECD4  F00A         	call	_drawPixel
  3819                           
  3820                           ;ST7735_TFT.c: 536: while (x < y) {
  3821  0006B4  D078               	goto	l3780
  3822  0006B6                     l3752:
  3823                           
  3824                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3825  0006B6  BE2B               	btfsc	drawCircle@f+1,7,c
  3826  0006B8  D00B               	goto	l347
  3827                           
  3828                           ;ST7735_TFT.c: 538: y--;
  3829  0006BA  062E               	decf	drawCircle@y,f,c
  3830  0006BC  A0D8               	btfss	status,0,c
  3831  0006BE  062F               	decf	drawCircle@y+1,f,c
  3832                           
  3833                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3834  0006C0  0E02               	movlw	2
  3835  0006C2  2628               	addwf	drawCircle@ddF_y,f,c
  3836  0006C4  0E00               	movlw	0
  3837  0006C6  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3838                           
  3839                           ;ST7735_TFT.c: 540: f += ddF_y;
  3840  0006C8  5028               	movf	drawCircle@ddF_y,w,c
  3841  0006CA  262A               	addwf	drawCircle@f,f,c
  3842  0006CC  5029               	movf	drawCircle@ddF_y+1,w,c
  3843  0006CE  222B               	addwfc	drawCircle@f+1,f,c
  3844  0006D0                     l347:
  3845                           
  3846                           ;ST7735_TFT.c: 541: }
  3847                           ;ST7735_TFT.c: 542: x++;
  3848  0006D0  4A2C               	infsnz	drawCircle@x,f,c
  3849  0006D2  2A2D               	incf	drawCircle@x+1,f,c
  3850                           
  3851                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3852  0006D4  0E02               	movlw	2
  3853  0006D6  2626               	addwf	drawCircle@ddF_x,f,c
  3854  0006D8  0E00               	movlw	0
  3855  0006DA  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3856                           
  3857                           ;ST7735_TFT.c: 544: f += ddF_x;
  3858  0006DC  5026               	movf	drawCircle@ddF_x,w,c
  3859  0006DE  262A               	addwf	drawCircle@f,f,c
  3860  0006E0  5027               	movf	drawCircle@ddF_x+1,w,c
  3861  0006E2  222B               	addwfc	drawCircle@f+1,f,c
  3862                           
  3863                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3864  0006E4  501E               	movf	drawCircle@y0,w,c
  3865  0006E6  242E               	addwf	drawCircle@y,w,c
  3866  0006E8  6E18               	movwf	drawPixel@y,c
  3867  0006EA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3868  0006EE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3869  0006F2  501C               	movf	drawCircle@x0,w,c
  3870  0006F4  242C               	addwf	drawCircle@x,w,c
  3871  0006F6  ECD4  F00A         	call	_drawPixel
  3872                           
  3873                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3874  0006FA  501E               	movf	drawCircle@y0,w,c
  3875  0006FC  242E               	addwf	drawCircle@y,w,c
  3876  0006FE  6E18               	movwf	drawPixel@y,c
  3877  000700  C022  F019         	movff	drawCircle@color,drawPixel@color
  3878  000704  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3879  000708  502C               	movf	drawCircle@x,w,c
  3880  00070A  0800               	sublw	0
  3881  00070C  241C               	addwf	drawCircle@x0,w,c
  3882  00070E  ECD4  F00A         	call	_drawPixel
  3883                           
  3884                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3885  000712  502E               	movf	drawCircle@y,w,c
  3886  000714  0800               	sublw	0
  3887  000716  241E               	addwf	drawCircle@y0,w,c
  3888  000718  6E18               	movwf	drawPixel@y,c
  3889  00071A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3890  00071E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3891  000722  501C               	movf	drawCircle@x0,w,c
  3892  000724  242C               	addwf	drawCircle@x,w,c
  3893  000726  ECD4  F00A         	call	_drawPixel
  3894                           
  3895                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3896  00072A  502E               	movf	drawCircle@y,w,c
  3897  00072C  0800               	sublw	0
  3898  00072E  241E               	addwf	drawCircle@y0,w,c
  3899  000730  6E18               	movwf	drawPixel@y,c
  3900  000732  C022  F019         	movff	drawCircle@color,drawPixel@color
  3901  000736  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3902  00073A  502C               	movf	drawCircle@x,w,c
  3903  00073C  0800               	sublw	0
  3904  00073E  241C               	addwf	drawCircle@x0,w,c
  3905  000740  ECD4  F00A         	call	_drawPixel
  3906                           
  3907                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3908  000744  501E               	movf	drawCircle@y0,w,c
  3909  000746  242C               	addwf	drawCircle@x,w,c
  3910  000748  6E18               	movwf	drawPixel@y,c
  3911  00074A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3912  00074E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3913  000752  501C               	movf	drawCircle@x0,w,c
  3914  000754  242E               	addwf	drawCircle@y,w,c
  3915  000756  ECD4  F00A         	call	_drawPixel
  3916                           
  3917                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3918  00075A  501E               	movf	drawCircle@y0,w,c
  3919  00075C  242C               	addwf	drawCircle@x,w,c
  3920  00075E  6E18               	movwf	drawPixel@y,c
  3921  000760  C022  F019         	movff	drawCircle@color,drawPixel@color
  3922  000764  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3923  000768  502E               	movf	drawCircle@y,w,c
  3924  00076A  0800               	sublw	0
  3925  00076C  241C               	addwf	drawCircle@x0,w,c
  3926  00076E  ECD4  F00A         	call	_drawPixel
  3927                           
  3928                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3929  000772  502C               	movf	drawCircle@x,w,c
  3930  000774  0800               	sublw	0
  3931  000776  241E               	addwf	drawCircle@y0,w,c
  3932  000778  6E18               	movwf	drawPixel@y,c
  3933  00077A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3934  00077E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3935  000782  501C               	movf	drawCircle@x0,w,c
  3936  000784  242E               	addwf	drawCircle@y,w,c
  3937  000786  ECD4  F00A         	call	_drawPixel
  3938                           
  3939                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3940  00078A  502C               	movf	drawCircle@x,w,c
  3941  00078C  0800               	sublw	0
  3942  00078E  241E               	addwf	drawCircle@y0,w,c
  3943  000790  6E18               	movwf	drawPixel@y,c
  3944  000792  C022  F019         	movff	drawCircle@color,drawPixel@color
  3945  000796  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3946  00079A  502E               	movf	drawCircle@y,w,c
  3947  00079C  0800               	sublw	0
  3948  00079E  241C               	addwf	drawCircle@x0,w,c
  3949  0007A0  ECD4  F00A         	call	_drawPixel
  3950  0007A4  D000               	goto	l3780
  3951  0007A6                     l3780:
  3952  0007A6  502E               	movf	drawCircle@y,w,c
  3953  0007A8  5C2C               	subwf	drawCircle@x,w,c
  3954  0007AA  502D               	movf	drawCircle@x+1,w,c
  3955  0007AC  0A80               	xorlw	128
  3956  0007AE  6E24               	movwf	??_drawCircle& (0+255),c
  3957  0007B0  502F               	movf	drawCircle@y+1,w,c
  3958  0007B2  0A80               	xorlw	128
  3959  0007B4  5824               	subwfb	??_drawCircle& (0+255),w,c
  3960  0007B6  A0D8               	btfss	status,0,c
  3961  0007B8  D77E               	goto	l3752
  3962  0007BA  0012               	return		;funcret
  3963  0007BC                     __end_of_drawCircle:
  3964                           	opt stack 0
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon	equ	0xFF2
  3972                           intcon2	equ	0xFF1
  3973                           postinc0	equ	0xFEE
  3974                           wreg	equ	0xFE8
  3975                           postdec1	equ	0xFE5
  3976                           fsr1l	equ	0xFE1
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           fsr2h	equ	0xFDA
  3981                           fsr2l	equ	0xFD9
  3982                           status	equ	0xFD8
  3983                           
  3984 ;; *************** function _Wait_Half_Second *****************
  3985 ;; Defined at:
  3986 ;;		line 314 in file "Lab10_sample_1.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;		None
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;		None
  3991 ;; Return value:  Size  Location     Type
  3992 ;;		None               void
  3993 ;; Registers used:
  3994 ;;		wreg, status,2
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;Total ram usage:        0 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    3
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_main
  4011 ;;		_Wait_One_Second
  4012 ;;		_Wait_One_Second_With_Beep
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           	psect	text11
  4017  001668                     __ptext11:
  4018                           	opt stack 0
  4019  001668                     _Wait_Half_Second:
  4020                           	opt stack 27
  4021                           
  4022                           ;Lab10_sample_1.c: 316: T0CON = 0x03;
  4023                           
  4024                           ;incstack = 0
  4025  001668  0E03               	movlw	3
  4026  00166A  6ED5               	movwf	4053,c	;volatile
  4027                           
  4028                           ;Lab10_sample_1.c: 317: TMR0L = 0xDB;
  4029  00166C  0EDB               	movlw	219
  4030  00166E  6ED6               	movwf	4054,c	;volatile
  4031                           
  4032                           ;Lab10_sample_1.c: 318: TMR0H = 0x0B;
  4033  001670  0E0B               	movlw	11
  4034  001672  6ED7               	movwf	4055,c	;volatile
  4035                           
  4036                           ;Lab10_sample_1.c: 319: INTCONbits.TMR0IF = 0;
  4037  001674  94F2               	bcf	intcon,2,c	;volatile
  4038                           
  4039                           ;Lab10_sample_1.c: 320: T0CONbits.TMR0ON = 1;
  4040  001676  8ED5               	bsf	4053,7,c	;volatile
  4041                           
  4042                           ;Lab10_sample_1.c: 321: while (INTCONbits.TMR0IF == 0);
  4043  001678  D000               	goto	l185
  4044  00167A                     l185:
  4045  00167A  A4F2               	btfss	intcon,2,c	;volatile
  4046  00167C  D7FE               	goto	l185
  4047                           
  4048                           ;Lab10_sample_1.c: 322: T0CONbits.TMR0ON = 0;
  4049  00167E  9ED5               	bcf	4053,7,c	;volatile
  4050  001680  0012               	return		;funcret
  4051  001682                     __end_of_Wait_Half_Second:
  4052                           	opt stack 0
  4053                           tblptru	equ	0xFF8
  4054                           tblptrh	equ	0xFF7
  4055                           tblptrl	equ	0xFF6
  4056                           tablat	equ	0xFF5
  4057                           prodh	equ	0xFF4
  4058                           prodl	equ	0xFF3
  4059                           intcon	equ	0xFF2
  4060                           intcon2	equ	0xFF1
  4061                           postinc0	equ	0xFEE
  4062                           wreg	equ	0xFE8
  4063                           postdec1	equ	0xFE5
  4064                           fsr1l	equ	0xFE1
  4065                           indf2	equ	0xFDF
  4066                           postinc2	equ	0xFDE
  4067                           postdec2	equ	0xFDD
  4068                           fsr2h	equ	0xFDA
  4069                           fsr2l	equ	0xFD9
  4070                           status	equ	0xFD8
  4071                           
  4072 ;; *************** function _Initialize_Screen *****************
  4073 ;; Defined at:
  4074 ;;		line 265 in file "Lab10_sample_1.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;		None
  4079 ;; Return value:  Size  Location     Type
  4080 ;;		None               void
  4081 ;; Registers used:
  4082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;Total ram usage:        0 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:   10
  4095 ;; This function calls:
  4096 ;;		_LCD_Reset
  4097 ;;		_TFT_GreenTab_Initialize
  4098 ;;		_drawtext
  4099 ;;		_fillScreen
  4100 ;;		_strcpy
  4101 ;; This function is called by:
  4102 ;;		_main
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text12
  4107  000F80                     __ptext12:
  4108                           	opt stack 0
  4109  000F80                     _Initialize_Screen:
  4110                           	opt stack 20
  4111                           
  4112                           ;Lab10_sample_1.c: 267: LCD_Reset();
  4113                           
  4114                           ;incstack = 0
  4115  000F80  EC60  F00B         	call	_LCD_Reset	;wreg free
  4116                           
  4117                           ;Lab10_sample_1.c: 268: TFT_GreenTab_Initialize();
  4118  000F84  ECEC  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  4119                           
  4120                           ;Lab10_sample_1.c: 269: fillScreen(0x0000);
  4121  000F88  0E00               	movlw	0
  4122  000F8A  6E25               	movwf	fillScreen@color+1,c
  4123  000F8C  0E00               	movlw	0
  4124  000F8E  6E24               	movwf	fillScreen@color,c
  4125  000F90  EC26  F00B         	call	_fillScreen	;wreg free
  4126                           
  4127                           ;Lab10_sample_1.c: 272: txt = buffer;
  4128  000F94  0EBF               	movlw	low _buffer
  4129  000F96  6E67               	movwf	_txt,c
  4130  000F98  0E00               	movlw	high _buffer
  4131  000F9A  6E68               	movwf	_txt+1,c
  4132                           
  4133                           ;Lab10_sample_1.c: 273: strcpy(txt, "ECE3301L Sp 22-S1");
  4134  000F9C  C067  F011         	movff	_txt,strcpy@to
  4135  000FA0  C068  F012         	movff	_txt+1,strcpy@to+1
  4136  000FA4  0ED4               	movlw	low STR_2
  4137  000FA6  6E13               	movwf	strcpy@from,c
  4138  000FA8  0EFF               	movlw	high STR_2
  4139  000FAA  6E14               	movwf	strcpy@from+1,c
  4140  000FAC  ECBB  F00A         	call	_strcpy	;wreg free
  4141                           
  4142                           ;Lab10_sample_1.c: 274: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4143  000FB0  0E02               	movlw	2
  4144  000FB2  6E39               	movwf	drawtext@y,c
  4145  000FB4  C067  F03A         	movff	_txt,drawtext@_text
  4146  000FB8  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4147  000FBC  0EFF               	movlw	255
  4148  000FBE  6E3D               	movwf	drawtext@color+1,c
  4149  000FC0  683C               	setf	drawtext@color,c
  4150  000FC2  0E00               	movlw	0
  4151  000FC4  6E3F               	movwf	drawtext@bg+1,c
  4152  000FC6  0E00               	movlw	0
  4153  000FC8  6E3E               	movwf	drawtext@bg,c
  4154  000FCA  0E01               	movlw	1
  4155  000FCC  6E40               	movwf	drawtext@size,c
  4156  000FCE  0E02               	movlw	2
  4157  000FD0  EC54  F006         	call	_drawtext
  4158                           
  4159                           ;Lab10_sample_1.c: 276: strcpy(txt, "LAB 10 ");
  4160  000FD4  C067  F011         	movff	_txt,strcpy@to
  4161  000FD8  C068  F012         	movff	_txt+1,strcpy@to+1
  4162  000FDC  0EF7               	movlw	low STR_3
  4163  000FDE  6E13               	movwf	strcpy@from,c
  4164  000FE0  0EFF               	movlw	high STR_3
  4165  000FE2  6E14               	movwf	strcpy@from+1,c
  4166  000FE4  ECBB  F00A         	call	_strcpy	;wreg free
  4167                           
  4168                           ;Lab10_sample_1.c: 277: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4169  000FE8  0E0A               	movlw	10
  4170  000FEA  6E39               	movwf	drawtext@y,c
  4171  000FEC  C067  F03A         	movff	_txt,drawtext@_text
  4172  000FF0  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4173  000FF4  0EFF               	movlw	255
  4174  000FF6  6E3D               	movwf	drawtext@color+1,c
  4175  000FF8  683C               	setf	drawtext@color,c
  4176  000FFA  0E00               	movlw	0
  4177  000FFC  6E3F               	movwf	drawtext@bg+1,c
  4178  000FFE  0E00               	movlw	0
  4179  001000  6E3E               	movwf	drawtext@bg,c
  4180  001002  0E01               	movlw	1
  4181  001004  6E40               	movwf	drawtext@size,c
  4182  001006  0E32               	movlw	50
  4183  001008  EC54  F006         	call	_drawtext
  4184  00100C  0012               	return		;funcret
  4185  00100E                     __end_of_Initialize_Screen:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           intcon	equ	0xFF2
  4194                           intcon2	equ	0xFF1
  4195                           postinc0	equ	0xFEE
  4196                           wreg	equ	0xFE8
  4197                           postdec1	equ	0xFE5
  4198                           fsr1l	equ	0xFE1
  4199                           indf2	equ	0xFDF
  4200                           postinc2	equ	0xFDE
  4201                           postdec2	equ	0xFDD
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _strcpy *****************
  4207 ;; Defined at:
  4208 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  to              2   16[COMRAM] PTR unsigned char 
  4211 ;;		 -> NULL(0), buffer(31), 
  4212 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4213 ;;		 -> STR_3(8), STR_2(18), 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4216 ;;		 -> NULL(0), buffer(31), 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  2   16[COMRAM] PTR unsigned char 
  4219 ;; Registers used:
  4220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4226 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;Total ram usage:        6 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    3
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_Initialize_Screen
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text13
  4241  001576                     __ptext13:
  4242                           	opt stack 0
  4243  001576                     _strcpy:
  4244                           	opt stack 26
  4245                           
  4246                           ;incstack = 0
  4247  001576  C011  F015         	movff	strcpy@to,strcpy@cp
  4248  00157A  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4249  00157E  D005               	goto	l2676
  4250  001580                     l2674:
  4251  001580  4A15               	infsnz	strcpy@cp,f,c
  4252  001582  2A16               	incf	strcpy@cp+1,f,c
  4253  001584  4A13               	infsnz	strcpy@from,f,c
  4254  001586  2A14               	incf	strcpy@from+1,f,c
  4255  001588  D000               	goto	l2676
  4256  00158A                     l2676:
  4257  00158A  C013  FFF6         	movff	strcpy@from,tblptrl
  4258  00158E  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4259  001592                     	if	0	;tblptru may be non-zero
  4260  001592                     	endif
  4261  001592                     	if	0	;tblptru may be non-zero
  4262  001592                     	endif
  4263  001592  C015  FFD9         	movff	strcpy@cp,fsr2l
  4264  001596  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4265  00159A  0008               	tblrd		*
  4266  00159C  CFF5 FFDF          	movff	tablat,indf2
  4267  0015A0  50DF               	movf	indf2,w,c
  4268  0015A2  A4D8               	btfss	status,2,c
  4269  0015A4  D7ED               	goto	l2674
  4270                           
  4271                           ;	Return value of _strcpy is never used
  4272  0015A6  0012               	return		;funcret
  4273  0015A8                     __end_of_strcpy:
  4274                           	opt stack 0
  4275                           tblptru	equ	0xFF8
  4276                           tblptrh	equ	0xFF7
  4277                           tblptrl	equ	0xFF6
  4278                           tablat	equ	0xFF5
  4279                           prodh	equ	0xFF4
  4280                           prodl	equ	0xFF3
  4281                           intcon	equ	0xFF2
  4282                           intcon2	equ	0xFF1
  4283                           postinc0	equ	0xFEE
  4284                           wreg	equ	0xFE8
  4285                           postdec1	equ	0xFE5
  4286                           fsr1l	equ	0xFE1
  4287                           indf2	equ	0xFDF
  4288                           postinc2	equ	0xFDE
  4289                           postdec2	equ	0xFDD
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function _fillScreen *****************
  4295 ;; Defined at:
  4296 ;;		line 619 in file "ST7735_TFT.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  color           2   35[COMRAM] unsigned int 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;		None               void
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;Total ram usage:        2 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    7
  4317 ;; This function calls:
  4318 ;;		_fillRectangle
  4319 ;; This function is called by:
  4320 ;;		_Initialize_Screen
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text14
  4325  00164C                     __ptext14:
  4326                           	opt stack 0
  4327  00164C                     _fillScreen:
  4328                           	opt stack 22
  4329                           
  4330                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4331                           
  4332                           ;incstack = 0
  4333  00164C  0E00               	movlw	0
  4334  00164E  6E18               	movwf	fillRectangle@y,c
  4335  001650  0E80               	movlw	128
  4336  001652  6E19               	movwf	fillRectangle@w,c
  4337  001654  0EA0               	movlw	160
  4338  001656  6E1A               	movwf	fillRectangle@h,c
  4339  001658  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4340  00165C  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4341  001660  0E00               	movlw	0
  4342  001662  EC52  F007         	call	_fillRectangle
  4343  001666  0012               	return		;funcret
  4344  001668                     __end_of_fillScreen:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           intcon2	equ	0xFF1
  4354                           postinc0	equ	0xFEE
  4355                           wreg	equ	0xFE8
  4356                           postdec1	equ	0xFE5
  4357                           fsr1l	equ	0xFE1
  4358                           indf2	equ	0xFDF
  4359                           postinc2	equ	0xFDE
  4360                           postdec2	equ	0xFDD
  4361                           fsr2h	equ	0xFDA
  4362                           fsr2l	equ	0xFD9
  4363                           status	equ	0xFD8
  4364                           
  4365 ;; *************** function _fillRectangle *****************
  4366 ;; Defined at:
  4367 ;;		line 503 in file "ST7735_TFT.c"
  4368 ;; Parameters:    Size  Location     Type
  4369 ;;  x               1    wreg     unsigned char 
  4370 ;;  y               1   23[COMRAM] unsigned char 
  4371 ;;  w               1   24[COMRAM] unsigned char 
  4372 ;;  h               1   25[COMRAM] unsigned char 
  4373 ;;  color           2   26[COMRAM] unsigned int 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  x               1   34[COMRAM] unsigned char 
  4376 ;;  lo              1   33[COMRAM] unsigned char 
  4377 ;;  hi              1   32[COMRAM] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;		None               void
  4380 ;; Registers used:
  4381 ;;		wreg, status,2, status,0, cstack
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4387 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;Total ram usage:       12 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    6
  4394 ;; This function calls:
  4395 ;;		_setAddrWindow
  4396 ;;		_spiwrite
  4397 ;; This function is called by:
  4398 ;;		_fillScreen
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text15
  4403  000EA4                     __ptext15:
  4404                           	opt stack 0
  4405  000EA4                     _fillRectangle:
  4406                           	opt stack 22
  4407                           
  4408                           ;incstack = 0
  4409                           ;fillRectangle@x stored from wreg
  4410  000EA4  6E23               	movwf	fillRectangle@x,c
  4411                           
  4412                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4413                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4414  000EA6  0E80               	movlw	128
  4415  000EA8  6023               	cpfslt	fillRectangle@x,c
  4416  000EAA  D069               	goto	l336
  4417  000EAC  0E9F               	movlw	159
  4418  000EAE  6418               	cpfsgt	fillRectangle@y,c
  4419  000EB0  D001               	goto	l3590
  4420                           
  4421                           ;ST7735_TFT.c: 507: return;
  4422  000EB2  D065               	goto	l336
  4423  000EB4                     l3590:
  4424                           
  4425                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4426  000EB4  0EFF               	movlw	255
  4427  000EB6  6E1D               	movwf	??_fillRectangle& (0+255),c
  4428  000EB8  0EFF               	movlw	255
  4429  000EBA  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4430  000EBC  5019               	movf	fillRectangle@w,w,c
  4431  000EBE  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4432  000EC2  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4433  000EC4  261F               	addwf	??_fillRectangle+2,f,c
  4434  000EC6  0E00               	movlw	0
  4435  000EC8  2220               	addwfc	??_fillRectangle+3,f,c
  4436  000ECA  501D               	movf	??_fillRectangle,w,c
  4437  000ECC  261F               	addwf	??_fillRectangle+2,f,c
  4438  000ECE  501E               	movf	??_fillRectangle+1,w,c
  4439  000ED0  2220               	addwfc	??_fillRectangle+3,f,c
  4440  000ED2  BE20               	btfsc	??_fillRectangle+3,7,c
  4441  000ED4  D00A               	goto	l337
  4442  000ED6  5020               	movf	??_fillRectangle+3,w,c
  4443  000ED8  E104               	bnz	u2640
  4444  000EDA  0E80               	movlw	128
  4445  000EDC  5C1F               	subwf	??_fillRectangle+2,w,c
  4446  000EDE  A0D8               	btfss	status,0,c
  4447  000EE0  D004               	goto	l337
  4448  000EE2                     u2640:
  4449                           
  4450                           ;ST7735_TFT.c: 509: w = 128 - x;
  4451  000EE2  5023               	movf	fillRectangle@x,w,c
  4452  000EE4  0800               	sublw	0
  4453  000EE6  0F80               	addlw	128
  4454  000EE8  6E19               	movwf	fillRectangle@w,c
  4455  000EEA                     l337:
  4456                           
  4457                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4458  000EEA  0EFF               	movlw	255
  4459  000EEC  6E1D               	movwf	??_fillRectangle& (0+255),c
  4460  000EEE  0EFF               	movlw	255
  4461  000EF0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4462  000EF2  501A               	movf	fillRectangle@h,w,c
  4463  000EF4  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4464  000EF8  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4465  000EFA  261F               	addwf	??_fillRectangle+2,f,c
  4466  000EFC  0E00               	movlw	0
  4467  000EFE  2220               	addwfc	??_fillRectangle+3,f,c
  4468  000F00  501D               	movf	??_fillRectangle,w,c
  4469  000F02  261F               	addwf	??_fillRectangle+2,f,c
  4470  000F04  501E               	movf	??_fillRectangle+1,w,c
  4471  000F06  2220               	addwfc	??_fillRectangle+3,f,c
  4472  000F08  BE20               	btfsc	??_fillRectangle+3,7,c
  4473  000F0A  D00B               	goto	l3596
  4474  000F0C  5020               	movf	??_fillRectangle+3,w,c
  4475  000F0E  E104               	bnz	u2650
  4476  000F10  0EA0               	movlw	160
  4477  000F12  5C1F               	subwf	??_fillRectangle+2,w,c
  4478  000F14  A0D8               	btfss	status,0,c
  4479  000F16  D005               	goto	l3596
  4480  000F18                     u2650:
  4481                           
  4482                           ;ST7735_TFT.c: 511: h = 160 - y;
  4483  000F18  5018               	movf	fillRectangle@y,w,c
  4484  000F1A  0800               	sublw	0
  4485  000F1C  0FA0               	addlw	160
  4486  000F1E  6E1A               	movwf	fillRectangle@h,c
  4487  000F20  D000               	goto	l3596
  4488  000F22                     l3596:
  4489                           
  4490                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4491  000F22  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4492  000F26  5023               	movf	fillRectangle@x,w,c
  4493  000F28  2419               	addwf	fillRectangle@w,w,c
  4494  000F2A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4495  000F2C  041D               	decf	??_fillRectangle,w,c
  4496  000F2E  6E15               	movwf	setAddrWindow@x1,c
  4497  000F30  5018               	movf	fillRectangle@y,w,c
  4498  000F32  241A               	addwf	fillRectangle@h,w,c
  4499  000F34  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4500  000F36  041E               	decf	??_fillRectangle+1,w,c
  4501  000F38  6E16               	movwf	setAddrWindow@y1,c
  4502  000F3A  5023               	movf	fillRectangle@x,w,c
  4503  000F3C  EC11  F00A         	call	_setAddrWindow
  4504                           
  4505                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4506  000F40  501C               	movf	fillRectangle@color+1,w,c
  4507  000F42  6E21               	movwf	fillRectangle@hi,c
  4508  000F44  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4509                           
  4510                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  4511  000F48  8082               	bsf	3970,0,c	;volatile
  4512                           
  4513                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  4514  000F4A  9282               	bcf	3970,1,c	;volatile
  4515                           
  4516                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4517  000F4C  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4518  000F50                     l3608:
  4519  000F50  5018               	movf	fillRectangle@y,w,c
  4520  000F52  B4D8               	btfsc	status,2,c
  4521  000F54  D013               	goto	l340
  4522  000F56  D001               	goto	l339
  4523  000F58  D011               	goto	l340
  4524  000F5A                     l339:
  4525                           
  4526                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4527  000F5A  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4528  000F5E                     l3612:
  4529  000F5E  5023               	movf	fillRectangle@x,w,c
  4530  000F60  B4D8               	btfsc	status,2,c
  4531  000F62  D00A               	goto	l3622
  4532  000F64  D001               	goto	l3616
  4533  000F66  D008               	goto	l3622
  4534  000F68                     l3616:
  4535                           
  4536                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4537  000F68  5021               	movf	fillRectangle@hi,w,c
  4538  000F6A  EC56  F00B         	call	_spiwrite
  4539                           
  4540                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4541  000F6E  5022               	movf	fillRectangle@lo,w,c
  4542  000F70  EC56  F00B         	call	_spiwrite
  4543  000F74  0623               	decf	fillRectangle@x,f,c
  4544  000F76  D7F3               	goto	l3612
  4545  000F78                     l3622:
  4546  000F78  0618               	decf	fillRectangle@y,f,c
  4547  000F7A  D7EA               	goto	l3608
  4548  000F7C                     l340:
  4549                           
  4550                           ;ST7735_TFT.c: 521: }
  4551                           ;ST7735_TFT.c: 522: }
  4552                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  4553  000F7C  8282               	bsf	3970,1,c	;volatile
  4554  000F7E                     l336:
  4555  000F7E  0012               	return		;funcret
  4556  000F80                     __end_of_fillRectangle:
  4557                           	opt stack 0
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodh	equ	0xFF4
  4563                           prodl	equ	0xFF3
  4564                           intcon	equ	0xFF2
  4565                           intcon2	equ	0xFF1
  4566                           postinc0	equ	0xFEE
  4567                           wreg	equ	0xFE8
  4568                           postdec1	equ	0xFE5
  4569                           fsr1l	equ	0xFE1
  4570                           indf2	equ	0xFDF
  4571                           postinc2	equ	0xFDE
  4572                           postdec2	equ	0xFDD
  4573                           fsr2h	equ	0xFDA
  4574                           fsr2l	equ	0xFD9
  4575                           status	equ	0xFD8
  4576                           
  4577 ;; *************** function _drawtext *****************
  4578 ;; Defined at:
  4579 ;;		line 474 in file "ST7735_TFT.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;  x               1    wreg     unsigned char 
  4582 ;;  y               1   56[COMRAM] unsigned char 
  4583 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4584 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4585 ;;  color           2   59[COMRAM] unsigned int 
  4586 ;;  bg              2   61[COMRAM] unsigned int 
  4587 ;;  size            1   63[COMRAM] unsigned char 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;  x               1    0[BANK0 ] unsigned char 
  4590 ;;  i               2    3[BANK0 ] unsigned int 
  4591 ;;  textsize        2    1[BANK0 ] unsigned int 
  4592 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4593 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4594 ;; Return value:  Size  Location     Type
  4595 ;;		None               void
  4596 ;; Registers used:
  4597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4603 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;Total ram usage:       17 bytes
  4608 ;; Hardware stack levels used:    1
  4609 ;; Hardware stack levels required when called:    9
  4610 ;; This function calls:
  4611 ;;		_drawChar
  4612 ;;		_strlen
  4613 ;; This function is called by:
  4614 ;;		_main
  4615 ;;		_Initialize_Screen
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text16
  4620  000CA8                     __ptext16:
  4621                           	opt stack 0
  4622  000CA8                     _drawtext:
  4623                           	opt stack 21
  4624                           
  4625                           ;incstack = 0
  4626                           ;drawtext@x stored from wreg
  4627  000CA8  0100               	movlb	0	; () banked
  4628  000CAA  6FDE               	movwf	drawtext@x& (0+255),b
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4632                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4633                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4634  000CAC  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4635                           
  4636                           ; BSR set to: 0
  4637  000CB0  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4641  000CB4  C03A  F011         	movff	drawtext@_text,strlen@s
  4642  000CB8  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4643  000CBC  EC7D  F00A         	call	_strlen	;wreg free
  4644  000CC0  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4645  000CC4  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4646                           
  4647                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4648  000CC8  0E00               	movlw	0
  4649  000CCA  0100               	movlb	0	; () banked
  4650  000CCC  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4651  000CCE  0E00               	movlw	0
  4652  000CD0  6FE1               	movwf	drawtext@i& (0+255),b
  4653  000CD2  D064               	goto	l3660
  4654  000CD4                     l3634:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4658  000CD4  505C               	movf	_wrap,w,c
  4659  000CD6  B4D8               	btfsc	status,2,c
  4660  000CD8  D034               	goto	l3650
  4661                           
  4662                           ; BSR set to: 0
  4663  000CDA  5040               	movf	drawtext@size,w,c
  4664  000CDC  0D05               	mullw	5
  4665  000CDE  0100               	movlb	0	; () banked
  4666  000CE0  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4667  000CE2  6E41               	movwf	??_drawtext& (0+255),c
  4668  000CE4  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4669  000CE6  50F3               	movf	prodl,w,c
  4670  000CE8  2641               	addwf	??_drawtext,f,c
  4671  000CEA  50F4               	movf	prodh,w,c
  4672  000CEC  2242               	addwfc	??_drawtext+1,f,c
  4673  000CEE  BE42               	btfsc	??_drawtext+1,7,c
  4674  000CF0  D028               	goto	l3650
  4675  000CF2  5042               	movf	??_drawtext+1,w,c
  4676  000CF4  E104               	bnz	u2710
  4677  000CF6  0E81               	movlw	129
  4678  000CF8  5C41               	subwf	??_drawtext,w,c
  4679  000CFA  A0D8               	btfss	status,0,c
  4680  000CFC  D022               	goto	l3650
  4681  000CFE                     u2710:
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4685  000CFE  0E00               	movlw	0
  4686  000D00  0100               	movlb	0	; () banked
  4687  000D02  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4691  000D04  5040               	movf	drawtext@size,w,c
  4692  000D06  0D07               	mullw	7
  4693  000D08  50F3               	movf	prodl,w,c
  4694  000D0A  0100               	movlb	0	; () banked
  4695  000D0C  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4696  000D0E  0F03               	addlw	3
  4697  000D10  0100               	movlb	0	; () banked
  4698  000D12  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4702  000D14  0EA0               	movlw	160
  4703  000D16  0100               	movlb	0	; () banked
  4704  000D18  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4705  000D1A  D004               	goto	l3646
  4706                           
  4707                           ; BSR set to: 0
  4708  000D1C  0EA0               	movlw	160
  4709  000D1E  0100               	movlb	0	; () banked
  4710  000D20  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4711  000D22  D000               	goto	l3646
  4712  000D24                     l3646:
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4716  000D24  0100               	movlb	0	; () banked
  4717  000D26  51E1               	movf	drawtext@i& (0+255),w,b
  4718  000D28  243A               	addwf	drawtext@_text,w,c
  4719  000D2A  6ED9               	movwf	fsr2l,c
  4720  000D2C  0100               	movlb	0	; () banked
  4721  000D2E  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4722  000D30  203B               	addwfc	drawtext@_text+1,w,c
  4723  000D32  6EDA               	movwf	fsr2h,c
  4724  000D34  0E20               	movlw	32
  4725  000D36  18DE               	xorwf	postinc2,w,c
  4726  000D38  B4D8               	btfsc	status,2,c
  4727  000D3A  D02C               	goto	l3658
  4728  000D3C  D002               	goto	l3650
  4729                           
  4730                           ; BSR set to: 0
  4731  000D3E  D02A               	goto	l3658
  4732                           
  4733                           ; BSR set to: 0
  4734  000D40  D000               	goto	l3650
  4735  000D42                     l3650:
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4739  000D42  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4740  000D46  0100               	movlb	0	; () banked
  4741  000D48  51E1               	movf	drawtext@i& (0+255),w,b
  4742  000D4A  243A               	addwf	drawtext@_text,w,c
  4743  000D4C  6ED9               	movwf	fsr2l,c
  4744  000D4E  0100               	movlb	0	; () banked
  4745  000D50  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4746  000D52  203B               	addwfc	drawtext@_text+1,w,c
  4747  000D54  6EDA               	movwf	fsr2h,c
  4748  000D56  50DF               	movf	indf2,w,c
  4749  000D58  6E2F               	movwf	drawChar@c,c
  4750  000D5A  C03C  F030         	movff	drawtext@color,drawChar@color
  4751  000D5E  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4752  000D62  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4753  000D66  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4754  000D6A  C040  F034         	movff	drawtext@size,drawChar@size
  4755  000D6E  0100               	movlb	0	; () banked
  4756  000D70  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4757  000D72  ECDE  F003         	call	_drawChar
  4758                           
  4759                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4760  000D76  5040               	movf	drawtext@size,w,c
  4761  000D78  0D06               	mullw	6
  4762  000D7A  50F3               	movf	prodl,w,c
  4763  000D7C  0100               	movlb	0	; () banked
  4764  000D7E  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4765  000D80  0100               	movlb	0	; () banked
  4766  000D82  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4770  000D84  0E80               	movlw	128
  4771  000D86  0100               	movlb	0	; () banked
  4772  000D88  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4773  000D8A  D004               	goto	l3658
  4774                           
  4775                           ; BSR set to: 0
  4776  000D8C  0E80               	movlw	128
  4777  000D8E  0100               	movlb	0	; () banked
  4778  000D90  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4779                           
  4780                           ; BSR set to: 0
  4781  000D92  D000               	goto	l3658
  4782  000D94                     l3658:
  4783                           
  4784                           ; BSR set to: 0
  4785  000D94  0100               	movlb	0	; () banked
  4786  000D96  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4787  000D98  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4788  000D9A  D000               	goto	l3660
  4789  000D9C                     l3660:
  4790                           
  4791                           ; BSR set to: 0
  4792  000D9C  0100               	movlb	0	; () banked
  4793  000D9E  51DF               	movf	drawtext@textsize& (0+255),w,b
  4794  000DA0  0100               	movlb	0	; () banked
  4795  000DA2  5DE1               	subwf	drawtext@i& (0+255),w,b
  4796  000DA4  0100               	movlb	0	; () banked
  4797  000DA6  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4798  000DA8  0100               	movlb	0	; () banked
  4799  000DAA  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4800  000DAC  A0D8               	btfss	status,0,c
  4801  000DAE  D792               	goto	l3634
  4802                           
  4803                           ; BSR set to: 0
  4804                           
  4805                           ; BSR set to: 0
  4806  000DB0  0012               	return		;funcret
  4807  000DB2                     __end_of_drawtext:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           intcon	equ	0xFF2
  4816                           intcon2	equ	0xFF1
  4817                           postinc0	equ	0xFEE
  4818                           wreg	equ	0xFE8
  4819                           postdec1	equ	0xFE5
  4820                           fsr1l	equ	0xFE1
  4821                           indf2	equ	0xFDF
  4822                           postinc2	equ	0xFDE
  4823                           postdec2	equ	0xFDD
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _strlen *****************
  4829 ;; Defined at:
  4830 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4833 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4836 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  2   16[COMRAM] unsigned int 
  4839 ;; Registers used:
  4840 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4846 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;Total ram usage:        6 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    3
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_drawtext
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	text17
  4861  0014FA                     __ptext17:
  4862                           	opt stack 0
  4863  0014FA                     _strlen:
  4864                           	opt stack 26
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;incstack = 0
  4868  0014FA  C011  F015         	movff	strlen@s,strlen@cp
  4869  0014FE  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4870  001502  D003               	goto	l3580
  4871  001504                     l3578:
  4872  001504  4A15               	infsnz	strlen@cp,f,c
  4873  001506  2A16               	incf	strlen@cp+1,f,c
  4874  001508  D000               	goto	l3580
  4875  00150A                     l3580:
  4876  00150A  C015  FFD9         	movff	strlen@cp,fsr2l
  4877  00150E  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4878  001512  50DF               	movf	indf2,w,c
  4879  001514  A4D8               	btfss	status,2,c
  4880  001516  D7F6               	goto	l3578
  4881  001518  C011  F013         	movff	strlen@s,??_strlen
  4882  00151C  C012  F014         	movff	strlen@s+1,??_strlen+1
  4883  001520  1E13               	comf	??_strlen,f,c
  4884  001522  1E14               	comf	??_strlen+1,f,c
  4885  001524  4A13               	infsnz	??_strlen,f,c
  4886  001526  2A14               	incf	??_strlen+1,f,c
  4887  001528  5015               	movf	strlen@cp,w,c
  4888  00152A  2413               	addwf	??_strlen,w,c
  4889  00152C  6E11               	movwf	?_strlen,c
  4890  00152E  5016               	movf	strlen@cp+1,w,c
  4891  001530  2014               	addwfc	??_strlen+1,w,c
  4892  001532  6E12               	movwf	?_strlen+1,c
  4893  001534  D000               	goto	l1070
  4894  001536                     l1070:
  4895  001536  0012               	return		;funcret
  4896  001538                     __end_of_strlen:
  4897                           	opt stack 0
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           intcon	equ	0xFF2
  4905                           intcon2	equ	0xFF1
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           fsr2h	equ	0xFDA
  4914                           fsr2l	equ	0xFD9
  4915                           status	equ	0xFD8
  4916                           
  4917 ;; *************** function _drawChar *****************
  4918 ;; Defined at:
  4919 ;;		line 447 in file "ST7735_TFT.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  x               1    wreg     unsigned char 
  4922 ;;  y               1   45[COMRAM] unsigned char 
  4923 ;;  c               1   46[COMRAM] unsigned char 
  4924 ;;  color           2   47[COMRAM] unsigned int 
  4925 ;;  bg              2   49[COMRAM] unsigned int 
  4926 ;;  size            1   51[COMRAM] unsigned char 
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;  x               1   53[COMRAM] unsigned char 
  4929 ;;  line            1   52[COMRAM] unsigned char 
  4930 ;;  i               1   55[COMRAM] unsigned char 
  4931 ;;  j               1   54[COMRAM] unsigned char 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;		None               void
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4941 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;Total ram usage:       11 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    8
  4948 ;; This function calls:
  4949 ;;		___wmul
  4950 ;;		_drawPixel
  4951 ;;		_fillRect
  4952 ;; This function is called by:
  4953 ;;		_drawtext
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           	psect	text18
  4958  0007BC                     __ptext18:
  4959                           	opt stack 0
  4960  0007BC                     _drawChar:
  4961                           	opt stack 21
  4962                           
  4963                           ;incstack = 0
  4964                           ;drawChar@x stored from wreg
  4965  0007BC  6E36               	movwf	drawChar@x,c
  4966                           
  4967                           ;ST7735_TFT.c: 449: char i, j;
  4968                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4969  0007BE  0E80               	movlw	128
  4970  0007C0  6036               	cpfslt	drawChar@x,c
  4971  0007C2  D0A6               	goto	l299
  4972  0007C4  0E9F               	movlw	159
  4973  0007C6  642E               	cpfsgt	drawChar@y,c
  4974  0007C8  D001               	goto	l3526
  4975                           
  4976                           ;ST7735_TFT.c: 451: return;
  4977  0007CA  D0A2               	goto	l299
  4978  0007CC                     l3526:
  4979                           
  4980                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4981  0007CC  5034               	movf	drawChar@size,w,c
  4982  0007CE  A4D8               	btfss	status,2,c
  4983  0007D0  D003               	goto	l3530
  4984  0007D2  0E01               	movlw	1
  4985  0007D4  6E34               	movwf	drawChar@size,c
  4986  0007D6  D000               	goto	l3530
  4987  0007D8                     l3530:
  4988                           
  4989                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  4990  0007D8  0E1F               	movlw	31
  4991  0007DA  642F               	cpfsgt	drawChar@c,c
  4992  0007DC  D004               	goto	l3534
  4993  0007DE  0E7E               	movlw	126
  4994  0007E0  642F               	cpfsgt	drawChar@c,c
  4995  0007E2  D003               	goto	l301
  4996  0007E4  D000               	goto	l3534
  4997  0007E6                     l3534:
  4998                           
  4999                           ;ST7735_TFT.c: 454: c = '?';
  5000  0007E6  0E3F               	movlw	63
  5001  0007E8  6E2F               	movwf	drawChar@c,c
  5002  0007EA                     l301:
  5003                           
  5004                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5005  0007EA  0E00               	movlw	0
  5006  0007EC  6E38               	movwf	drawChar@i,c
  5007  0007EE                     l3536:
  5008  0007EE  0E04               	movlw	4
  5009  0007F0  6438               	cpfsgt	drawChar@i,c
  5010  0007F2  D001               	goto	l3540
  5011  0007F4  D08D               	goto	l299
  5012  0007F6                     l3540:
  5013                           
  5014                           ;ST7735_TFT.c: 456: unsigned char line;
  5015                           ;ST7735_TFT.c: 457: if(c < 'S')
  5016  0007F6  0E53               	movlw	83
  5017  0007F8  602F               	cpfslt	drawChar@c,c
  5018  0007FA  D015               	goto	l3544
  5019                           
  5020                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5021  0007FC  0EE0               	movlw	224
  5022  0007FE  242F               	addwf	drawChar@c,w,c
  5023  000800  6E11               	movwf	___wmul@multiplier,c
  5024  000802  6A12               	clrf	___wmul@multiplier+1,c
  5025  000804  0EFF               	movlw	255
  5026  000806  2212               	addwfc	___wmul@multiplier+1,f,c
  5027  000808  0E00               	movlw	0
  5028  00080A  6E14               	movwf	___wmul@multiplicand+1,c
  5029  00080C  0E05               	movlw	5
  5030  00080E  6E13               	movwf	___wmul@multiplicand,c
  5031  000810  EC01  F00B         	call	___wmul	;wreg free
  5032  000814  5038               	movf	drawChar@i,w,c
  5033  000816  2611               	addwf	?___wmul,f,c
  5034  000818  0E00               	movlw	0
  5035  00081A  2212               	addwfc	?___wmul+1,f,c
  5036  00081C  0E8F               	movlw	low _font
  5037  00081E  2411               	addwf	?___wmul,w,c
  5038  000820  6EF6               	movwf	tblptrl,c
  5039  000822  0EFD               	movlw	high _font
  5040  000824  D014               	goto	L3
  5041  000826                     l3544:
  5042                           
  5043                           ;ST7735_TFT.c: 459: else
  5044                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5045  000826  0EAD               	movlw	173
  5046  000828  242F               	addwf	drawChar@c,w,c
  5047  00082A  6E11               	movwf	___wmul@multiplier,c
  5048  00082C  6A12               	clrf	___wmul@multiplier+1,c
  5049  00082E  0EFF               	movlw	255
  5050  000830  2212               	addwfc	___wmul@multiplier+1,f,c
  5051  000832  0E00               	movlw	0
  5052  000834  6E14               	movwf	___wmul@multiplicand+1,c
  5053  000836  0E05               	movlw	5
  5054  000838  6E13               	movwf	___wmul@multiplicand,c
  5055  00083A  EC01  F00B         	call	___wmul	;wreg free
  5056  00083E  5038               	movf	drawChar@i,w,c
  5057  000840  2611               	addwf	?___wmul,f,c
  5058  000842  0E00               	movlw	0
  5059  000844  2212               	addwfc	?___wmul+1,f,c
  5060  000846  0E8E               	movlw	low _font2
  5061  000848  2411               	addwf	?___wmul,w,c
  5062  00084A  6EF6               	movwf	tblptrl,c
  5063  00084C  0EFE               	movlw	high _font2
  5064  00084E                     L3:
  5065  00084E  2012               	addwfc	?___wmul+1,w,c
  5066  000850  6EF7               	movwf	tblptrh,c
  5067  000852                     	if	0	;There are less than 3 active tblptr bytes
  5068  000852                     	endif
  5069  000852  0008               	tblrd		*
  5070  000854  CFF5 F035          	movff	tablat,drawChar@line
  5071  000858  D000               	goto	l3546
  5072  00085A                     l3546:
  5073                           
  5074                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5075  00085A  0E00               	movlw	0
  5076  00085C  6E37               	movwf	drawChar@j,c
  5077  00085E                     l3548:
  5078  00085E  0E06               	movlw	6
  5079  000860  6437               	cpfsgt	drawChar@j,c
  5080  000862  D001               	goto	l308
  5081  000864  D053               	goto	l3572
  5082  000866                     l308:
  5083                           
  5084                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5085  000866  A035               	btfss	drawChar@line,0,c
  5086  000868  D023               	goto	l3558
  5087                           
  5088                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5089  00086A  0434               	decf	drawChar@size,w,c
  5090  00086C  A4D8               	btfss	status,2,c
  5091  00086E  D00C               	goto	l3556
  5092  000870  502E               	movf	drawChar@y,w,c
  5093  000872  2437               	addwf	drawChar@j,w,c
  5094  000874  6E18               	movwf	drawPixel@y,c
  5095  000876  C030  F019         	movff	drawChar@color,drawPixel@color
  5096  00087A  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5097  00087E  5036               	movf	drawChar@x,w,c
  5098  000880  2438               	addwf	drawChar@i,w,c
  5099  000882  ECD4  F00A         	call	_drawPixel
  5100  000886  D03E               	goto	l3566
  5101  000888                     l3556:
  5102                           
  5103                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5104  000888  5037               	movf	drawChar@j,w,c
  5105  00088A  0234               	mulwf	drawChar@size,c
  5106  00088C  50F3               	movf	prodl,w,c
  5107  00088E  242E               	addwf	drawChar@y,w,c
  5108  000890  6E23               	movwf	fillRect@y,c
  5109  000892  C034  F024         	movff	drawChar@size,fillRect@w
  5110  000896  C034  F025         	movff	drawChar@size,fillRect@h
  5111  00089A  C030  F026         	movff	drawChar@color,fillRect@color
  5112  00089E  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5113  0008A2  5038               	movf	drawChar@i,w,c
  5114  0008A4  0234               	mulwf	drawChar@size,c
  5115  0008A6  50F3               	movf	prodl,w,c
  5116  0008A8  2436               	addwf	drawChar@x,w,c
  5117  0008AA  EC38  F00A         	call	_fillRect
  5118                           
  5119                           ;ST7735_TFT.c: 465: }
  5120  0008AE  D02A               	goto	l3566
  5121  0008B0                     l3558:
  5122                           
  5123                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5124  0008B0  5030               	movf	drawChar@color,w,c
  5125  0008B2  1832               	xorwf	drawChar@bg,w,c
  5126  0008B4  E104               	bnz	u2570
  5127  0008B6  5031               	movf	drawChar@color+1,w,c
  5128  0008B8  1833               	xorwf	drawChar@bg+1,w,c
  5129  0008BA  B4D8               	btfsc	status,2,c
  5130  0008BC  D023               	goto	l3566
  5131  0008BE                     u2570:
  5132                           
  5133                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5134  0008BE  0434               	decf	drawChar@size,w,c
  5135  0008C0  A4D8               	btfss	status,2,c
  5136  0008C2  D00C               	goto	l3564
  5137  0008C4  502E               	movf	drawChar@y,w,c
  5138  0008C6  2437               	addwf	drawChar@j,w,c
  5139  0008C8  6E18               	movwf	drawPixel@y,c
  5140  0008CA  C032  F019         	movff	drawChar@bg,drawPixel@color
  5141  0008CE  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5142  0008D2  5036               	movf	drawChar@x,w,c
  5143  0008D4  2438               	addwf	drawChar@i,w,c
  5144  0008D6  ECD4  F00A         	call	_drawPixel
  5145  0008DA  D014               	goto	l3566
  5146  0008DC                     l3564:
  5147                           
  5148                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5149  0008DC  5037               	movf	drawChar@j,w,c
  5150  0008DE  0234               	mulwf	drawChar@size,c
  5151  0008E0  50F3               	movf	prodl,w,c
  5152  0008E2  242E               	addwf	drawChar@y,w,c
  5153  0008E4  6E23               	movwf	fillRect@y,c
  5154  0008E6  C034  F024         	movff	drawChar@size,fillRect@w
  5155  0008EA  C034  F025         	movff	drawChar@size,fillRect@h
  5156  0008EE  C032  F026         	movff	drawChar@bg,fillRect@color
  5157  0008F2  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5158  0008F6  5038               	movf	drawChar@i,w,c
  5159  0008F8  0234               	mulwf	drawChar@size,c
  5160  0008FA  50F3               	movf	prodl,w,c
  5161  0008FC  2436               	addwf	drawChar@x,w,c
  5162  0008FE  EC38  F00A         	call	_fillRect
  5163  000902  D000               	goto	l3566
  5164  000904                     l3566:
  5165  000904  2A37               	incf	drawChar@j,f,c
  5166  000906  90D8               	bcf	status,0,c
  5167  000908  3235               	rrcf	drawChar@line,f,c
  5168  00090A  D7A9               	goto	l3548
  5169  00090C                     l3572:
  5170  00090C  2A38               	incf	drawChar@i,f,c
  5171  00090E  D76F               	goto	l3536
  5172  000910                     l299:
  5173  000910  0012               	return		;funcret
  5174  000912                     __end_of_drawChar:
  5175                           	opt stack 0
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           prodh	equ	0xFF4
  5181                           prodl	equ	0xFF3
  5182                           intcon	equ	0xFF2
  5183                           intcon2	equ	0xFF1
  5184                           postinc0	equ	0xFEE
  5185                           wreg	equ	0xFE8
  5186                           postdec1	equ	0xFE5
  5187                           fsr1l	equ	0xFE1
  5188                           indf2	equ	0xFDF
  5189                           postinc2	equ	0xFDE
  5190                           postdec2	equ	0xFDD
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _fillRect *****************
  5196 ;; Defined at:
  5197 ;;		line 437 in file "ST7735_TFT.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;  x               1    wreg     unsigned char 
  5200 ;;  y               1   34[COMRAM] unsigned char 
  5201 ;;  w               1   35[COMRAM] unsigned char 
  5202 ;;  h               1   36[COMRAM] unsigned char 
  5203 ;;  color           2   37[COMRAM] unsigned int 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;  x               1   42[COMRAM] unsigned char 
  5206 ;;  i               2   43[COMRAM] int 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5216 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;Total ram usage:       11 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    7
  5223 ;; This function calls:
  5224 ;;		_drawFastVLine
  5225 ;; This function is called by:
  5226 ;;		_drawChar
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text19
  5231  001470                     __ptext19:
  5232                           	opt stack 0
  5233  001470                     _fillRect:
  5234                           	opt stack 21
  5235                           
  5236                           ;incstack = 0
  5237                           ;fillRect@x stored from wreg
  5238  001470  6E2B               	movwf	fillRect@x,c
  5239                           
  5240                           ;ST7735_TFT.c: 439: signed int i;
  5241                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5242  001472  C02B  F02C         	movff	fillRect@x,fillRect@i
  5243  001476  6A2D               	clrf	fillRect@i+1,c
  5244  001478  D00E               	goto	l3428
  5245  00147A                     l3424:
  5246                           
  5247                           ;ST7735_TFT.c: 442: {
  5248                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5249  00147A  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5250  00147E  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5251  001482  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5252  001486  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5253  00148A  502C               	movf	fillRect@i,w,c
  5254  00148C  EC4D  F008         	call	_drawFastVLine
  5255  001490  4A2C               	infsnz	fillRect@i,f,c
  5256  001492  2A2D               	incf	fillRect@i+1,f,c
  5257  001494  D000               	goto	l3428
  5258  001496                     l3428:
  5259  001496  5024               	movf	fillRect@w,w,c
  5260  001498  C02B  F028         	movff	fillRect@x,??_fillRect
  5261  00149C  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5262  00149E  2628               	addwf	??_fillRect,f,c
  5263  0014A0  0E00               	movlw	0
  5264  0014A2  2229               	addwfc	??_fillRect+1,f,c
  5265  0014A4  5028               	movf	??_fillRect,w,c
  5266  0014A6  5C2C               	subwf	fillRect@i,w,c
  5267  0014A8  502D               	movf	fillRect@i+1,w,c
  5268  0014AA  0A80               	xorlw	128
  5269  0014AC  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5270  0014AE  5029               	movf	??_fillRect+1,w,c
  5271  0014B0  0A80               	xorlw	128
  5272  0014B2  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5273  0014B4  A0D8               	btfss	status,0,c
  5274  0014B6  D7E1               	goto	l3424
  5275  0014B8  0012               	return		;funcret
  5276  0014BA                     __end_of_fillRect:
  5277                           	opt stack 0
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           intcon2	equ	0xFF1
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _drawFastVLine *****************
  5298 ;; Defined at:
  5299 ;;		line 416 in file "ST7735_TFT.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  x               1    wreg     unsigned char 
  5302 ;;  y               1   23[COMRAM] unsigned char 
  5303 ;;  h               1   24[COMRAM] unsigned char 
  5304 ;;  color           2   25[COMRAM] unsigned int 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  x               1   33[COMRAM] unsigned char 
  5307 ;;  lo              1   32[COMRAM] unsigned char 
  5308 ;;  hi              1   31[COMRAM] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;		None               void
  5311 ;; Registers used:
  5312 ;;		wreg, status,2, status,0, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5318 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;Total ram usage:       11 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    6
  5325 ;; This function calls:
  5326 ;;		_setAddrWindow
  5327 ;;		_spiwrite
  5328 ;; This function is called by:
  5329 ;;		_fillRect
  5330 ;;		_fillCircleHelper
  5331 ;;		_fillCircle
  5332 ;;		_drawRect
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           	psect	text20
  5337  00109A                     __ptext20:
  5338                           	opt stack 0
  5339  00109A                     _drawFastVLine:
  5340                           	opt stack 22
  5341                           
  5342                           ;incstack = 0
  5343                           ;drawFastVLine@x stored from wreg
  5344  00109A  6E22               	movwf	drawFastVLine@x,c
  5345                           
  5346                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5347                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5348  00109C  0E80               	movlw	128
  5349  00109E  6022               	cpfslt	drawFastVLine@x,c
  5350  0010A0  D03F               	goto	l283
  5351  0010A2  0E9F               	movlw	159
  5352  0010A4  6418               	cpfsgt	drawFastVLine@y,c
  5353  0010A6  D001               	goto	l3374
  5354                           
  5355                           ;ST7735_TFT.c: 420: return;
  5356  0010A8  D03B               	goto	l283
  5357  0010AA                     l3374:
  5358                           
  5359                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5360  0010AA  0EFF               	movlw	255
  5361  0010AC  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5362  0010AE  0EFF               	movlw	255
  5363  0010B0  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5364  0010B2  5019               	movf	drawFastVLine@h,w,c
  5365  0010B4  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5366  0010B8  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5367  0010BA  261E               	addwf	??_drawFastVLine+2,f,c
  5368  0010BC  0E00               	movlw	0
  5369  0010BE  221F               	addwfc	??_drawFastVLine+3,f,c
  5370  0010C0  501C               	movf	??_drawFastVLine,w,c
  5371  0010C2  261E               	addwf	??_drawFastVLine+2,f,c
  5372  0010C4  501D               	movf	??_drawFastVLine+1,w,c
  5373  0010C6  221F               	addwfc	??_drawFastVLine+3,f,c
  5374  0010C8  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5375  0010CA  D00B               	goto	l3378
  5376  0010CC  501F               	movf	??_drawFastVLine+3,w,c
  5377  0010CE  E104               	bnz	u2410
  5378  0010D0  0EA0               	movlw	160
  5379  0010D2  5C1E               	subwf	??_drawFastVLine+2,w,c
  5380  0010D4  A0D8               	btfss	status,0,c
  5381  0010D6  D005               	goto	l3378
  5382  0010D8                     u2410:
  5383                           
  5384                           ;ST7735_TFT.c: 422: h = 160 - y;
  5385  0010D8  5018               	movf	drawFastVLine@y,w,c
  5386  0010DA  0800               	sublw	0
  5387  0010DC  0FA0               	addlw	160
  5388  0010DE  6E19               	movwf	drawFastVLine@h,c
  5389  0010E0  D000               	goto	l3378
  5390  0010E2                     l3378:
  5391                           
  5392                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5393  0010E2  501B               	movf	drawFastVLine@color+1,w,c
  5394  0010E4  6E20               	movwf	drawFastVLine@hi,c
  5395  0010E6  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5396                           
  5397                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5398  0010EA  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5399  0010EE  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5400  0010F2  5018               	movf	drawFastVLine@y,w,c
  5401  0010F4  2419               	addwf	drawFastVLine@h,w,c
  5402  0010F6  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5403  0010F8  041C               	decf	??_drawFastVLine,w,c
  5404  0010FA  6E16               	movwf	setAddrWindow@y1,c
  5405  0010FC  5022               	movf	drawFastVLine@x,w,c
  5406  0010FE  EC11  F00A         	call	_setAddrWindow
  5407                           
  5408                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  5409  001102  8082               	bsf	3970,0,c	;volatile
  5410                           
  5411                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  5412  001104  9282               	bcf	3970,1,c	;volatile
  5413                           
  5414                           ;ST7735_TFT.c: 428: while (h--) {
  5415  001106  D007               	goto	l3390
  5416  001108                     l3388:
  5417                           
  5418                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5419  001108  5020               	movf	drawFastVLine@hi,w,c
  5420  00110A  EC56  F00B         	call	_spiwrite
  5421                           
  5422                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5423  00110E  5021               	movf	drawFastVLine@lo,w,c
  5424  001110  EC56  F00B         	call	_spiwrite
  5425  001114  D000               	goto	l3390
  5426  001116                     l3390:
  5427  001116  0619               	decf	drawFastVLine@h,f,c
  5428  001118  2819               	incf	drawFastVLine@h,w,c
  5429  00111A  A4D8               	btfss	status,2,c
  5430  00111C  D7F5               	goto	l3388
  5431                           
  5432                           ;ST7735_TFT.c: 431: }
  5433                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  5434  00111E  8282               	bsf	3970,1,c	;volatile
  5435  001120                     l283:
  5436  001120  0012               	return		;funcret
  5437  001122                     __end_of_drawFastVLine:
  5438                           	opt stack 0
  5439                           tblptru	equ	0xFF8
  5440                           tblptrh	equ	0xFF7
  5441                           tblptrl	equ	0xFF6
  5442                           tablat	equ	0xFF5
  5443                           prodh	equ	0xFF4
  5444                           prodl	equ	0xFF3
  5445                           intcon	equ	0xFF2
  5446                           intcon2	equ	0xFF1
  5447                           postinc0	equ	0xFEE
  5448                           wreg	equ	0xFE8
  5449                           postdec1	equ	0xFE5
  5450                           fsr1l	equ	0xFE1
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           fsr2h	equ	0xFDA
  5455                           fsr2l	equ	0xFD9
  5456                           status	equ	0xFD8
  5457                           
  5458 ;; *************** function _drawPixel *****************
  5459 ;; Defined at:
  5460 ;;		line 407 in file "ST7735_TFT.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  x               1    wreg     unsigned char 
  5463 ;;  y               1   23[COMRAM] unsigned char 
  5464 ;;  color           2   24[COMRAM] unsigned int 
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;  x               1   26[COMRAM] unsigned char 
  5467 ;; Return value:  Size  Location     Type
  5468 ;;		None               void
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:        4 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    6
  5483 ;; This function calls:
  5484 ;;		_setAddrWindow
  5485 ;;		_write_data
  5486 ;; This function is called by:
  5487 ;;		_drawChar
  5488 ;;		_drawCircle
  5489 ;;		_drawCircleHelper
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text21
  5494  0015A8                     __ptext21:
  5495                           	opt stack 0
  5496  0015A8                     _drawPixel:
  5497                           	opt stack 22
  5498                           
  5499                           ;incstack = 0
  5500                           ;drawPixel@x stored from wreg
  5501  0015A8  6E1B               	movwf	drawPixel@x,c
  5502                           
  5503                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5504  0015AA  0E80               	movlw	128
  5505  0015AC  601B               	cpfslt	drawPixel@x,c
  5506  0015AE  D013               	goto	l277
  5507  0015B0  0E9F               	movlw	159
  5508  0015B2  6418               	cpfsgt	drawPixel@y,c
  5509  0015B4  D001               	goto	l3416
  5510                           
  5511                           ;ST7735_TFT.c: 410: return;
  5512  0015B6  D00F               	goto	l277
  5513  0015B8                     l3416:
  5514                           
  5515                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5516  0015B8  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5517  0015BC  281B               	incf	drawPixel@x,w,c
  5518  0015BE  6E15               	movwf	setAddrWindow@x1,c
  5519  0015C0  2818               	incf	drawPixel@y,w,c
  5520  0015C2  6E16               	movwf	setAddrWindow@y1,c
  5521  0015C4  501B               	movf	drawPixel@x,w,c
  5522  0015C6  EC11  F00A         	call	_setAddrWindow
  5523                           
  5524                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5525  0015CA  501A               	movf	drawPixel@color+1,w,c
  5526  0015CC  EC72  F00B         	call	_write_data
  5527                           
  5528                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5529  0015D0  5019               	movf	drawPixel@color,w,c
  5530  0015D2  EC72  F00B         	call	_write_data
  5531  0015D6                     l277:
  5532  0015D6  0012               	return		;funcret
  5533  0015D8                     __end_of_drawPixel:
  5534                           	opt stack 0
  5535                           tblptru	equ	0xFF8
  5536                           tblptrh	equ	0xFF7
  5537                           tblptrl	equ	0xFF6
  5538                           tablat	equ	0xFF5
  5539                           prodh	equ	0xFF4
  5540                           prodl	equ	0xFF3
  5541                           intcon	equ	0xFF2
  5542                           intcon2	equ	0xFF1
  5543                           postinc0	equ	0xFEE
  5544                           wreg	equ	0xFE8
  5545                           postdec1	equ	0xFE5
  5546                           fsr1l	equ	0xFE1
  5547                           indf2	equ	0xFDF
  5548                           postinc2	equ	0xFDE
  5549                           postdec2	equ	0xFDD
  5550                           fsr2h	equ	0xFDA
  5551                           fsr2l	equ	0xFD9
  5552                           status	equ	0xFD8
  5553                           
  5554 ;; *************** function _setAddrWindow *****************
  5555 ;; Defined at:
  5556 ;;		line 392 in file "ST7735_TFT.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  x0              1    wreg     unsigned char 
  5559 ;;  y0              1   19[COMRAM] unsigned char 
  5560 ;;  x1              1   20[COMRAM] unsigned char 
  5561 ;;  y1              1   21[COMRAM] unsigned char 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  x0              1   22[COMRAM] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;		None               void
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5573 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;Total ram usage:        4 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    5
  5580 ;; This function calls:
  5581 ;;		_write_command
  5582 ;;		_write_data
  5583 ;; This function is called by:
  5584 ;;		_drawPixel
  5585 ;;		_drawFastVLine
  5586 ;;		_fillRectangle
  5587 ;;		_drawFastHLine
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591                           	psect	text22
  5592  001422                     __ptext22:
  5593                           	opt stack 0
  5594  001422                     _setAddrWindow:
  5595                           	opt stack 22
  5596                           
  5597                           ;incstack = 0
  5598                           ;setAddrWindow@x0 stored from wreg
  5599  001422  6E17               	movwf	setAddrWindow@x0,c
  5600                           
  5601                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5602  001424  0E2A               	movlw	42
  5603  001426  EC7A  F00B         	call	_write_command
  5604                           
  5605                           ;ST7735_TFT.c: 395: write_data(0);
  5606  00142A  0E00               	movlw	0
  5607  00142C  EC72  F00B         	call	_write_data
  5608                           
  5609                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5610  001430  5017               	movf	setAddrWindow@x0,w,c
  5611  001432  246D               	addwf	_colstart,w,c
  5612  001434  EC72  F00B         	call	_write_data
  5613                           
  5614                           ;ST7735_TFT.c: 397: write_data(0);
  5615  001438  0E00               	movlw	0
  5616  00143A  EC72  F00B         	call	_write_data
  5617                           
  5618                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5619  00143E  5015               	movf	setAddrWindow@x1,w,c
  5620  001440  246D               	addwf	_colstart,w,c
  5621  001442  EC72  F00B         	call	_write_data
  5622                           
  5623                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5624  001446  0E2B               	movlw	43
  5625  001448  EC7A  F00B         	call	_write_command
  5626                           
  5627                           ;ST7735_TFT.c: 400: write_data(0);
  5628  00144C  0E00               	movlw	0
  5629  00144E  EC72  F00B         	call	_write_data
  5630                           
  5631                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5632  001452  5014               	movf	setAddrWindow@y0,w,c
  5633  001454  246F               	addwf	_rowstart,w,c
  5634  001456  EC72  F00B         	call	_write_data
  5635                           
  5636                           ;ST7735_TFT.c: 402: write_data(0);
  5637  00145A  0E00               	movlw	0
  5638  00145C  EC72  F00B         	call	_write_data
  5639                           
  5640                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5641  001460  5016               	movf	setAddrWindow@y1,w,c
  5642  001462  246F               	addwf	_rowstart,w,c
  5643  001464  EC72  F00B         	call	_write_data
  5644                           
  5645                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5646  001468  0E2C               	movlw	44
  5647  00146A  EC7A  F00B         	call	_write_command
  5648  00146E  0012               	return		;funcret
  5649  001470                     __end_of_setAddrWindow:
  5650                           	opt stack 0
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           intcon2	equ	0xFF1
  5659                           postinc0	equ	0xFEE
  5660                           wreg	equ	0xFE8
  5661                           postdec1	equ	0xFE5
  5662                           fsr1l	equ	0xFE1
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           postdec2	equ	0xFDD
  5666                           fsr2h	equ	0xFDA
  5667                           fsr2l	equ	0xFD9
  5668                           status	equ	0xFD8
  5669                           
  5670 ;; *************** function _TFT_GreenTab_Initialize *****************
  5671 ;; Defined at:
  5672 ;;		line 644 in file "ST7735_TFT.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;		None               void
  5679 ;; Registers used:
  5680 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;Total ram usage:        0 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    6
  5693 ;; This function calls:
  5694 ;;		_Rcmd1
  5695 ;;		_Rcmd2red
  5696 ;;		_Rcmd3
  5697 ;;		_write_command
  5698 ;;		_write_data
  5699 ;; This function is called by:
  5700 ;;		_Initialize_Screen
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           	psect	text23
  5705  0015D8                     __ptext23:
  5706                           	opt stack 0
  5707  0015D8                     _TFT_GreenTab_Initialize:
  5708                           	opt stack 23
  5709                           
  5710                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  5711                           
  5712                           ;incstack = 0
  5713  0015D8  8282               	bsf	3970,1,c	;volatile
  5714                           
  5715                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  5716  0015DA  9082               	bcf	3970,0,c	;volatile
  5717                           
  5718                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5719  0015DC  0E80               	movlw	128
  5720  0015DE  6EC7               	movwf	4039,c	;volatile
  5721                           
  5722                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5723  0015E0  0E30               	movlw	48
  5724  0015E2  6EC6               	movwf	4038,c	;volatile
  5725                           
  5726                           ;ST7735_TFT.c: 653: Rcmd1();
  5727  0015E4  ECCC  F005         	call	_Rcmd1	;wreg free
  5728                           
  5729                           ;ST7735_TFT.c: 654: Rcmd2red();
  5730  0015E8  EC9C  F00A         	call	_Rcmd2red	;wreg free
  5731                           
  5732                           ;ST7735_TFT.c: 655: Rcmd3();
  5733  0015EC  ECD9  F006         	call	_Rcmd3	;wreg free
  5734                           
  5735                           ;ST7735_TFT.c: 656: write_command(0x36);
  5736  0015F0  0E36               	movlw	54
  5737  0015F2  EC7A  F00B         	call	_write_command
  5738                           
  5739                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5740  0015F6  0EC0               	movlw	192
  5741  0015F8  EC72  F00B         	call	_write_data
  5742                           
  5743                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5744  0015FC  0E01               	movlw	1
  5745  0015FE  6E6B               	movwf	__tft_type,c
  5746  001600  0012               	return		;funcret
  5747  001602                     __end_of_TFT_GreenTab_Initialize:
  5748                           	opt stack 0
  5749                           tblptru	equ	0xFF8
  5750                           tblptrh	equ	0xFF7
  5751                           tblptrl	equ	0xFF6
  5752                           tablat	equ	0xFF5
  5753                           prodh	equ	0xFF4
  5754                           prodl	equ	0xFF3
  5755                           intcon	equ	0xFF2
  5756                           intcon2	equ	0xFF1
  5757                           postinc0	equ	0xFEE
  5758                           wreg	equ	0xFE8
  5759                           postdec1	equ	0xFE5
  5760                           fsr1l	equ	0xFE1
  5761                           indf2	equ	0xFDF
  5762                           postinc2	equ	0xFDE
  5763                           postdec2	equ	0xFDD
  5764                           fsr2h	equ	0xFDA
  5765                           fsr2l	equ	0xFD9
  5766                           status	equ	0xFD8
  5767                           
  5768 ;; *************** function _Rcmd3 *****************
  5769 ;; Defined at:
  5770 ;;		line 338 in file "ST7735_TFT.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;		None
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;		None
  5775 ;; Return value:  Size  Location     Type
  5776 ;;		None               void
  5777 ;; Registers used:
  5778 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5788 ;;Total ram usage:        0 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    5
  5791 ;; This function calls:
  5792 ;;		_delay_ms
  5793 ;;		_write_command
  5794 ;;		_write_data
  5795 ;; This function is called by:
  5796 ;;		_TFT_GreenTab_Initialize
  5797 ;;		_TFT_BlackTab_Initialize
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text24
  5802  000DB2                     __ptext24:
  5803                           	opt stack 0
  5804  000DB2                     _Rcmd3:
  5805                           	opt stack 23
  5806                           
  5807                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5808                           
  5809                           ;incstack = 0
  5810  000DB2  0EE0               	movlw	224
  5811  000DB4  EC7A  F00B         	call	_write_command
  5812                           
  5813                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5814  000DB8  0E02               	movlw	2
  5815  000DBA  EC72  F00B         	call	_write_data
  5816  000DBE  0E1C               	movlw	28
  5817  000DC0  EC72  F00B         	call	_write_data
  5818  000DC4  0E07               	movlw	7
  5819  000DC6  EC72  F00B         	call	_write_data
  5820  000DCA  0E12               	movlw	18
  5821  000DCC  EC72  F00B         	call	_write_data
  5822                           
  5823                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5824  000DD0  0E37               	movlw	55
  5825  000DD2  EC72  F00B         	call	_write_data
  5826  000DD6  0E32               	movlw	50
  5827  000DD8  EC72  F00B         	call	_write_data
  5828  000DDC  0E29               	movlw	41
  5829  000DDE  EC72  F00B         	call	_write_data
  5830  000DE2  0E2D               	movlw	45
  5831  000DE4  EC72  F00B         	call	_write_data
  5832                           
  5833                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5834  000DE8  0E29               	movlw	41
  5835  000DEA  EC72  F00B         	call	_write_data
  5836  000DEE  0E25               	movlw	37
  5837  000DF0  EC72  F00B         	call	_write_data
  5838  000DF4  0E2B               	movlw	43
  5839  000DF6  EC72  F00B         	call	_write_data
  5840  000DFA  0E39               	movlw	57
  5841  000DFC  EC72  F00B         	call	_write_data
  5842                           
  5843                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5844  000E00  0E00               	movlw	0
  5845  000E02  EC72  F00B         	call	_write_data
  5846  000E06  0E01               	movlw	1
  5847  000E08  EC72  F00B         	call	_write_data
  5848  000E0C  0E03               	movlw	3
  5849  000E0E  EC72  F00B         	call	_write_data
  5850  000E12  0E10               	movlw	16
  5851  000E14  EC72  F00B         	call	_write_data
  5852                           
  5853                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5854  000E18  0EE1               	movlw	225
  5855  000E1A  EC7A  F00B         	call	_write_command
  5856                           
  5857                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5858  000E1E  0E03               	movlw	3
  5859  000E20  EC72  F00B         	call	_write_data
  5860  000E24  0E1D               	movlw	29
  5861  000E26  EC72  F00B         	call	_write_data
  5862  000E2A  0E07               	movlw	7
  5863  000E2C  EC72  F00B         	call	_write_data
  5864  000E30  0E06               	movlw	6
  5865  000E32  EC72  F00B         	call	_write_data
  5866                           
  5867                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5868  000E36  0E2E               	movlw	46
  5869  000E38  EC72  F00B         	call	_write_data
  5870  000E3C  0E2C               	movlw	44
  5871  000E3E  EC72  F00B         	call	_write_data
  5872  000E42  0E29               	movlw	41
  5873  000E44  EC72  F00B         	call	_write_data
  5874  000E48  0E2D               	movlw	45
  5875  000E4A  EC72  F00B         	call	_write_data
  5876                           
  5877                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5878  000E4E  0E2E               	movlw	46
  5879  000E50  EC72  F00B         	call	_write_data
  5880  000E54  0E2E               	movlw	46
  5881  000E56  EC72  F00B         	call	_write_data
  5882  000E5A  0E37               	movlw	55
  5883  000E5C  EC72  F00B         	call	_write_data
  5884  000E60  0E3F               	movlw	63
  5885  000E62  EC72  F00B         	call	_write_data
  5886                           
  5887                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5888  000E66  0E00               	movlw	0
  5889  000E68  EC72  F00B         	call	_write_data
  5890  000E6C  0E00               	movlw	0
  5891  000E6E  EC72  F00B         	call	_write_data
  5892  000E72  0E02               	movlw	2
  5893  000E74  EC72  F00B         	call	_write_data
  5894  000E78  0E10               	movlw	16
  5895  000E7A  EC72  F00B         	call	_write_data
  5896                           
  5897                           ;ST7735_TFT.c: 350: write_command(0x13);
  5898  000E7E  0E13               	movlw	19
  5899  000E80  EC7A  F00B         	call	_write_command
  5900                           
  5901                           ;ST7735_TFT.c: 351: delay_ms(10);
  5902  000E84  0E00               	movlw	0
  5903  000E86  6E18               	movwf	delay_ms@ms+1,c
  5904  000E88  0E0A               	movlw	10
  5905  000E8A  6E17               	movwf	delay_ms@ms,c
  5906  000E8C  ECE8  F009         	call	_delay_ms	;wreg free
  5907                           
  5908                           ;ST7735_TFT.c: 352: write_command(0x29);
  5909  000E90  0E29               	movlw	41
  5910  000E92  EC7A  F00B         	call	_write_command
  5911                           
  5912                           ;ST7735_TFT.c: 353: delay_ms(100);
  5913  000E96  0E00               	movlw	0
  5914  000E98  6E18               	movwf	delay_ms@ms+1,c
  5915  000E9A  0E64               	movlw	100
  5916  000E9C  6E17               	movwf	delay_ms@ms,c
  5917  000E9E  ECE8  F009         	call	_delay_ms	;wreg free
  5918  000EA2  0012               	return		;funcret
  5919  000EA4                     __end_of_Rcmd3:
  5920                           	opt stack 0
  5921                           tblptru	equ	0xFF8
  5922                           tblptrh	equ	0xFF7
  5923                           tblptrl	equ	0xFF6
  5924                           tablat	equ	0xFF5
  5925                           prodh	equ	0xFF4
  5926                           prodl	equ	0xFF3
  5927                           intcon	equ	0xFF2
  5928                           intcon2	equ	0xFF1
  5929                           postinc0	equ	0xFEE
  5930                           wreg	equ	0xFE8
  5931                           postdec1	equ	0xFE5
  5932                           fsr1l	equ	0xFE1
  5933                           indf2	equ	0xFDF
  5934                           postinc2	equ	0xFDE
  5935                           postdec2	equ	0xFDD
  5936                           fsr2h	equ	0xFDA
  5937                           fsr2l	equ	0xFD9
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _Rcmd2red *****************
  5941 ;; Defined at:
  5942 ;;		line 328 in file "ST7735_TFT.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg, status,2, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    5
  5963 ;; This function calls:
  5964 ;;		_write_command
  5965 ;;		_write_data
  5966 ;; This function is called by:
  5967 ;;		_TFT_GreenTab_Initialize
  5968 ;; This function uses a non-reentrant model
  5969 ;;
  5970                           
  5971                           	psect	text25
  5972  001538                     __ptext25:
  5973                           	opt stack 0
  5974  001538                     _Rcmd2red:
  5975                           	opt stack 23
  5976                           
  5977                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5978                           
  5979                           ;incstack = 0
  5980  001538  0E2A               	movlw	42
  5981  00153A  EC7A  F00B         	call	_write_command
  5982                           
  5983                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5984  00153E  0E00               	movlw	0
  5985  001540  EC72  F00B         	call	_write_data
  5986  001544  0E00               	movlw	0
  5987  001546  EC72  F00B         	call	_write_data
  5988                           
  5989                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  5990  00154A  0E00               	movlw	0
  5991  00154C  EC72  F00B         	call	_write_data
  5992  001550  0E7F               	movlw	127
  5993  001552  EC72  F00B         	call	_write_data
  5994                           
  5995                           ;ST7735_TFT.c: 333: write_command(0x2B);
  5996  001556  0E2B               	movlw	43
  5997  001558  EC7A  F00B         	call	_write_command
  5998                           
  5999                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6000  00155C  0E00               	movlw	0
  6001  00155E  EC72  F00B         	call	_write_data
  6002  001562  0E00               	movlw	0
  6003  001564  EC72  F00B         	call	_write_data
  6004                           
  6005                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6006  001568  0E00               	movlw	0
  6007  00156A  EC72  F00B         	call	_write_data
  6008  00156E  0E9F               	movlw	159
  6009  001570  EC72  F00B         	call	_write_data
  6010  001574  0012               	return		;funcret
  6011  001576                     __end_of_Rcmd2red:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           intcon2	equ	0xFF1
  6021                           postinc0	equ	0xFEE
  6022                           wreg	equ	0xFE8
  6023                           postdec1	equ	0xFE5
  6024                           fsr1l	equ	0xFE1
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           postdec2	equ	0xFDD
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _Rcmd1 *****************
  6033 ;; Defined at:
  6034 ;;		line 281 in file "ST7735_TFT.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;		None               void
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;Total ram usage:        0 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    5
  6055 ;; This function calls:
  6056 ;;		_delay_ms
  6057 ;;		_write_command
  6058 ;;		_write_data
  6059 ;; This function is called by:
  6060 ;;		_TFT_GreenTab_Initialize
  6061 ;;		_TFT_BlackTab_Initialize
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text26
  6066  000B98                     __ptext26:
  6067                           	opt stack 0
  6068  000B98                     _Rcmd1:
  6069                           	opt stack 23
  6070                           
  6071                           ;ST7735_TFT.c: 283: write_command(0x01);
  6072                           
  6073                           ;incstack = 0
  6074  000B98  0E01               	movlw	1
  6075  000B9A  EC7A  F00B         	call	_write_command
  6076                           
  6077                           ;ST7735_TFT.c: 284: delay_ms(150);
  6078  000B9E  0E00               	movlw	0
  6079  000BA0  6E18               	movwf	delay_ms@ms+1,c
  6080  000BA2  0E96               	movlw	150
  6081  000BA4  6E17               	movwf	delay_ms@ms,c
  6082  000BA6  ECE8  F009         	call	_delay_ms	;wreg free
  6083                           
  6084                           ;ST7735_TFT.c: 285: write_command(0x11);
  6085  000BAA  0E11               	movlw	17
  6086  000BAC  EC7A  F00B         	call	_write_command
  6087                           
  6088                           ;ST7735_TFT.c: 286: delay_ms(500);
  6089  000BB0  0E01               	movlw	1
  6090  000BB2  6E18               	movwf	delay_ms@ms+1,c
  6091  000BB4  0EF4               	movlw	244
  6092  000BB6  6E17               	movwf	delay_ms@ms,c
  6093  000BB8  ECE8  F009         	call	_delay_ms	;wreg free
  6094                           
  6095                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6096  000BBC  0EB1               	movlw	177
  6097  000BBE  EC7A  F00B         	call	_write_command
  6098                           
  6099                           ;ST7735_TFT.c: 288: write_data(0x01);
  6100  000BC2  0E01               	movlw	1
  6101  000BC4  EC72  F00B         	call	_write_data
  6102                           
  6103                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6104  000BC8  0E2C               	movlw	44
  6105  000BCA  EC72  F00B         	call	_write_data
  6106                           
  6107                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6108  000BCE  0E2D               	movlw	45
  6109  000BD0  EC72  F00B         	call	_write_data
  6110                           
  6111                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6112  000BD4  0EB2               	movlw	178
  6113  000BD6  EC7A  F00B         	call	_write_command
  6114                           
  6115                           ;ST7735_TFT.c: 292: write_data(0x01);
  6116  000BDA  0E01               	movlw	1
  6117  000BDC  EC72  F00B         	call	_write_data
  6118                           
  6119                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6120  000BE0  0E2C               	movlw	44
  6121  000BE2  EC72  F00B         	call	_write_data
  6122                           
  6123                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6124  000BE6  0E2D               	movlw	45
  6125  000BE8  EC72  F00B         	call	_write_data
  6126                           
  6127                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6128  000BEC  0EB3               	movlw	179
  6129  000BEE  EC7A  F00B         	call	_write_command
  6130                           
  6131                           ;ST7735_TFT.c: 296: write_data(0x01);
  6132  000BF2  0E01               	movlw	1
  6133  000BF4  EC72  F00B         	call	_write_data
  6134                           
  6135                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6136  000BF8  0E2C               	movlw	44
  6137  000BFA  EC72  F00B         	call	_write_data
  6138                           
  6139                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6140  000BFE  0E2D               	movlw	45
  6141  000C00  EC72  F00B         	call	_write_data
  6142                           
  6143                           ;ST7735_TFT.c: 299: write_data(0x01);
  6144  000C04  0E01               	movlw	1
  6145  000C06  EC72  F00B         	call	_write_data
  6146                           
  6147                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6148  000C0A  0E2C               	movlw	44
  6149  000C0C  EC72  F00B         	call	_write_data
  6150                           
  6151                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6152  000C10  0E2D               	movlw	45
  6153  000C12  EC72  F00B         	call	_write_data
  6154                           
  6155                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6156  000C16  0EB4               	movlw	180
  6157  000C18  EC7A  F00B         	call	_write_command
  6158                           
  6159                           ;ST7735_TFT.c: 303: write_data(0x07);
  6160  000C1C  0E07               	movlw	7
  6161  000C1E  EC72  F00B         	call	_write_data
  6162                           
  6163                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6164  000C22  0EC0               	movlw	192
  6165  000C24  EC7A  F00B         	call	_write_command
  6166                           
  6167                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6168  000C28  0EA2               	movlw	162
  6169  000C2A  EC72  F00B         	call	_write_data
  6170                           
  6171                           ;ST7735_TFT.c: 306: write_data(0x02);
  6172  000C2E  0E02               	movlw	2
  6173  000C30  EC72  F00B         	call	_write_data
  6174                           
  6175                           ;ST7735_TFT.c: 307: write_data(0x84);
  6176  000C34  0E84               	movlw	132
  6177  000C36  EC72  F00B         	call	_write_data
  6178                           
  6179                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6180  000C3A  0EC1               	movlw	193
  6181  000C3C  EC7A  F00B         	call	_write_command
  6182                           
  6183                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6184  000C40  0EC5               	movlw	197
  6185  000C42  EC72  F00B         	call	_write_data
  6186                           
  6187                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6188  000C46  0EC2               	movlw	194
  6189  000C48  EC7A  F00B         	call	_write_command
  6190                           
  6191                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6192  000C4C  0E0A               	movlw	10
  6193  000C4E  EC72  F00B         	call	_write_data
  6194                           
  6195                           ;ST7735_TFT.c: 312: write_data(0x00);
  6196  000C52  0E00               	movlw	0
  6197  000C54  EC72  F00B         	call	_write_data
  6198                           
  6199                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6200  000C58  0EC3               	movlw	195
  6201  000C5A  EC7A  F00B         	call	_write_command
  6202                           
  6203                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6204  000C5E  0E8A               	movlw	138
  6205  000C60  EC72  F00B         	call	_write_data
  6206                           
  6207                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6208  000C64  0E2A               	movlw	42
  6209  000C66  EC72  F00B         	call	_write_data
  6210                           
  6211                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6212  000C6A  0EC4               	movlw	196
  6213  000C6C  EC7A  F00B         	call	_write_command
  6214                           
  6215                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6216  000C70  0E8A               	movlw	138
  6217  000C72  EC72  F00B         	call	_write_data
  6218                           
  6219                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6220  000C76  0EEE               	movlw	238
  6221  000C78  EC72  F00B         	call	_write_data
  6222                           
  6223                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6224  000C7C  0EC5               	movlw	197
  6225  000C7E  EC7A  F00B         	call	_write_command
  6226                           
  6227                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6228  000C82  0E0E               	movlw	14
  6229  000C84  EC72  F00B         	call	_write_data
  6230                           
  6231                           ;ST7735_TFT.c: 321: write_command(0x20);
  6232  000C88  0E20               	movlw	32
  6233  000C8A  EC7A  F00B         	call	_write_command
  6234                           
  6235                           ;ST7735_TFT.c: 322: write_command(0x36);
  6236  000C8E  0E36               	movlw	54
  6237  000C90  EC7A  F00B         	call	_write_command
  6238                           
  6239                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6240  000C94  0EC8               	movlw	200
  6241  000C96  EC72  F00B         	call	_write_data
  6242                           
  6243                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6244  000C9A  0E3A               	movlw	58
  6245  000C9C  EC7A  F00B         	call	_write_command
  6246                           
  6247                           ;ST7735_TFT.c: 325: write_data(0x05);
  6248  000CA0  0E05               	movlw	5
  6249  000CA2  EC72  F00B         	call	_write_data
  6250  000CA6  0012               	return		;funcret
  6251  000CA8                     __end_of_Rcmd1:
  6252                           	opt stack 0
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           intcon	equ	0xFF2
  6260                           intcon2	equ	0xFF1
  6261                           postinc0	equ	0xFEE
  6262                           wreg	equ	0xFE8
  6263                           postdec1	equ	0xFE5
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272 ;; *************** function _write_data *****************
  6273 ;; Defined at:
  6274 ;;		line 209 in file "ST7735_TFT.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  data_           1    wreg     unsigned char 
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  data_           1   18[COMRAM] unsigned char 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;		None               void
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;Total ram usage:        1 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    4
  6295 ;; This function calls:
  6296 ;;		_spiwrite
  6297 ;; This function is called by:
  6298 ;;		_Rcmd1
  6299 ;;		_Rcmd2red
  6300 ;;		_Rcmd3
  6301 ;;		_setAddrWindow
  6302 ;;		_drawPixel
  6303 ;;		_TFT_GreenTab_Initialize
  6304 ;;		_Bcmd
  6305 ;;		_setScrollDefinition
  6306 ;;		_Rcmd2green
  6307 ;;		_VerticalScroll
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	text27
  6312  0016E4                     __ptext27:
  6313                           	opt stack 0
  6314  0016E4                     _write_data:
  6315                           	opt stack 22
  6316                           
  6317                           ;incstack = 0
  6318                           ;write_data@data_ stored from wreg
  6319  0016E4  6E13               	movwf	write_data@data_,c
  6320                           
  6321                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  6322  0016E6  9282               	bcf	3970,1,c	;volatile
  6323                           
  6324                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  6325  0016E8  8082               	bsf	3970,0,c	;volatile
  6326                           
  6327                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6328  0016EA  5013               	movf	write_data@data_,w,c
  6329  0016EC  EC56  F00B         	call	_spiwrite
  6330                           
  6331                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  6332  0016F0  8282               	bsf	3970,1,c	;volatile
  6333  0016F2  0012               	return		;funcret
  6334  0016F4                     __end_of_write_data:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           intcon2	equ	0xFF1
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           postdec1	equ	0xFE5
  6347                           fsr1l	equ	0xFE1
  6348                           indf2	equ	0xFDF
  6349                           postinc2	equ	0xFDE
  6350                           postdec2	equ	0xFDD
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355 ;; *************** function _write_command *****************
  6356 ;; Defined at:
  6357 ;;		line 198 in file "ST7735_TFT.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  cmd_            1    wreg     unsigned char 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;  cmd_            1   18[COMRAM] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;		None               void
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;Total ram usage:        1 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    4
  6378 ;; This function calls:
  6379 ;;		_spiwrite
  6380 ;; This function is called by:
  6381 ;;		_Rcmd1
  6382 ;;		_Rcmd2red
  6383 ;;		_Rcmd3
  6384 ;;		_setAddrWindow
  6385 ;;		_TFT_GreenTab_Initialize
  6386 ;;		_Bcmd
  6387 ;;		_setScrollDefinition
  6388 ;;		_Rcmd2green
  6389 ;;		_VerticalScroll
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text28
  6394  0016F4                     __ptext28:
  6395                           	opt stack 0
  6396  0016F4                     _write_command:
  6397                           	opt stack 22
  6398                           
  6399                           ;incstack = 0
  6400                           ;write_command@cmd_ stored from wreg
  6401  0016F4  6E13               	movwf	write_command@cmd_,c
  6402                           
  6403                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  6404  0016F6  9282               	bcf	3970,1,c	;volatile
  6405                           
  6406                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  6407  0016F8  9082               	bcf	3970,0,c	;volatile
  6408                           
  6409                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6410  0016FA  5013               	movf	write_command@cmd_,w,c
  6411  0016FC  EC56  F00B         	call	_spiwrite
  6412                           
  6413                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  6414  001700  8282               	bsf	3970,1,c	;volatile
  6415  001702  0012               	return		;funcret
  6416  001704                     __end_of_write_command:
  6417                           	opt stack 0
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           intcon2	equ	0xFF1
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           postdec1	equ	0xFE5
  6429                           fsr1l	equ	0xFE1
  6430                           indf2	equ	0xFDF
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function _spiwrite *****************
  6438 ;; Defined at:
  6439 ;;		line 189 in file "ST7735_TFT.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;  spidata         1    wreg     unsigned char 
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;  spidata         1   17[COMRAM] unsigned char 
  6444 ;;  x               1   16[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;		None               void
  6447 ;; Registers used:
  6448 ;;		wreg
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;Total ram usage:        2 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    3
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_write_command
  6465 ;;		_write_data
  6466 ;;		_drawFastVLine
  6467 ;;		_fillRectangle
  6468 ;;		_drawFastHLine
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text29
  6473  0016AC                     __ptext29:
  6474                           	opt stack 0
  6475  0016AC                     _spiwrite:
  6476                           	opt stack 24
  6477                           
  6478                           ;incstack = 0
  6479                           ;spiwrite@spidata stored from wreg
  6480  0016AC  6E12               	movwf	spiwrite@spidata,c
  6481                           
  6482                           ;ST7735_TFT.c: 191: char x;
  6483                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6484  0016AE  969E               	bcf	3998,3,c	;volatile
  6485                           
  6486                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6487  0016B0  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6488                           
  6489                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6490  0016B4  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6491                           
  6492                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6493  0016B8  D000               	goto	l233
  6494  0016BA                     l233:
  6495  0016BA  A0C7               	btfss	4039,0,c	;volatile
  6496  0016BC  D7FE               	goto	l233
  6497  0016BE  0012               	return		;funcret
  6498  0016C0                     __end_of_spiwrite:
  6499                           	opt stack 0
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           intcon	equ	0xFF2
  6507                           intcon2	equ	0xFF1
  6508                           postinc0	equ	0xFEE
  6509                           wreg	equ	0xFE8
  6510                           postdec1	equ	0xFE5
  6511                           fsr1l	equ	0xFE1
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function _LCD_Reset *****************
  6520 ;; Defined at:
  6521 ;;		line 217 in file "ST7735_TFT.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;Total ram usage:        0 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    5
  6542 ;; This function calls:
  6543 ;;		_delay_ms
  6544 ;; This function is called by:
  6545 ;;		_Initialize_Screen
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text30
  6550  0016C0                     __ptext30:
  6551                           	opt stack 0
  6552  0016C0                     _LCD_Reset:
  6553                           	opt stack 24
  6554                           
  6555                           ;ST7735_TFT.c: 219: PORTCbits.RC2 = 0;
  6556                           
  6557                           ;incstack = 0
  6558  0016C0  9482               	bcf	3970,2,c	;volatile
  6559                           
  6560                           ;ST7735_TFT.c: 220: delay_ms(100);
  6561  0016C2  0E00               	movlw	0
  6562  0016C4  6E18               	movwf	delay_ms@ms+1,c
  6563  0016C6  0E64               	movlw	100
  6564  0016C8  6E17               	movwf	delay_ms@ms,c
  6565  0016CA  ECE8  F009         	call	_delay_ms	;wreg free
  6566                           
  6567                           ;ST7735_TFT.c: 221: PORTCbits.RC2 = 1;
  6568  0016CE  8482               	bsf	3970,2,c	;volatile
  6569  0016D0  0012               	return		;funcret
  6570  0016D2                     __end_of_LCD_Reset:
  6571                           	opt stack 0
  6572                           tblptru	equ	0xFF8
  6573                           tblptrh	equ	0xFF7
  6574                           tblptrl	equ	0xFF6
  6575                           tablat	equ	0xFF5
  6576                           prodh	equ	0xFF4
  6577                           prodl	equ	0xFF3
  6578                           intcon	equ	0xFF2
  6579                           intcon2	equ	0xFF1
  6580                           postinc0	equ	0xFEE
  6581                           wreg	equ	0xFE8
  6582                           postdec1	equ	0xFE5
  6583                           fsr1l	equ	0xFE1
  6584                           indf2	equ	0xFDF
  6585                           postinc2	equ	0xFDE
  6586                           postdec2	equ	0xFDD
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function _delay_ms *****************
  6592 ;; Defined at:
  6593 ;;		line 64 in file "ST7735_TFT.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;  ms              2   22[COMRAM] int 
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  count           2   26[COMRAM] int 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;		None               void
  6600 ;; Registers used:
  6601 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;Total ram usage:        6 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    4
  6614 ;; This function calls:
  6615 ;;		___wmul
  6616 ;; This function is called by:
  6617 ;;		_LCD_Reset
  6618 ;;		_Rcmd1
  6619 ;;		_Rcmd3
  6620 ;;		_Bcmd
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text31
  6625  0013D0                     __ptext31:
  6626                           	opt stack 0
  6627  0013D0                     _delay_ms:
  6628                           	opt stack 23
  6629                           
  6630                           ;ST7735_TFT.c: 70: int count;
  6631                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6632                           
  6633                           ;incstack = 0
  6634  0013D0  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6635  0013D4  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6636  0013D8  0E00               	movlw	0
  6637  0013DA  6E14               	movwf	___wmul@multiplicand+1,c
  6638  0013DC  0EFA               	movlw	250
  6639  0013DE  6E13               	movwf	___wmul@multiplicand,c
  6640  0013E0  EC01  F00B         	call	___wmul	;wreg free
  6641  0013E4  C011  F01B         	movff	?___wmul,delay_ms@count
  6642  0013E8  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6643                           
  6644                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6645  0013EC  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6646  0013F0  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6647  0013F4  1E19               	comf	??_delay_ms,f,c
  6648  0013F6  1E1A               	comf	??_delay_ms+1,f,c
  6649  0013F8  4A19               	infsnz	??_delay_ms,f,c
  6650  0013FA  2A1A               	incf	??_delay_ms+1,f,c
  6651  0013FC  0EFF               	movlw	255
  6652  0013FE  2419               	addwf	??_delay_ms,w,c
  6653  001400  6E1B               	movwf	delay_ms@count,c
  6654  001402  0EFF               	movlw	255
  6655  001404  201A               	addwfc	??_delay_ms+1,w,c
  6656  001406  6E1C               	movwf	delay_ms@count+1,c
  6657                           
  6658                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6659  001408  0EB8               	movlw	184
  6660  00140A  6EB1               	movwf	4017,c	;volatile
  6661                           
  6662                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6663  00140C  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6664                           
  6665                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6666  001410  501C               	movf	delay_ms@count+1,w,c
  6667  001412  6EB3               	movwf	4019,c	;volatile
  6668                           
  6669                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6670  001414  92A1               	bcf	4001,1,c	;volatile
  6671                           
  6672                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6673  001416  80B1               	bsf	4017,0,c	;volatile
  6674                           
  6675                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6676  001418  D000               	goto	l223
  6677  00141A                     l223:
  6678  00141A  A2A1               	btfss	4001,1,c	;volatile
  6679  00141C  D7FE               	goto	l223
  6680                           
  6681                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6682  00141E  90B1               	bcf	4017,0,c	;volatile
  6683  001420  0012               	return		;funcret
  6684  001422                     __end_of_delay_ms:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           intcon	equ	0xFF2
  6693                           intcon2	equ	0xFF1
  6694                           postinc0	equ	0xFEE
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function ___wmul *****************
  6706 ;; Defined at:
  6707 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  multiplier      2   16[COMRAM] unsigned int 
  6710 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;  product         2   20[COMRAM] unsigned int 
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  2   16[COMRAM] unsigned int 
  6715 ;; Registers used:
  6716 ;;		wreg, status,2, status,0, prodl, prodh
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6722 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;Total ram usage:        6 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    3
  6729 ;; This function calls:
  6730 ;;		Nothing
  6731 ;; This function is called by:
  6732 ;;		_delay_ms
  6733 ;;		_drawChar
  6734 ;;		_printf
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text32
  6739  001602                     __ptext32:
  6740                           	opt stack 0
  6741  001602                     ___wmul:
  6742                           	opt stack 26
  6743                           
  6744                           ;incstack = 0
  6745  001602  5011               	movf	___wmul@multiplier,w,c
  6746  001604  0213               	mulwf	___wmul@multiplicand,c
  6747  001606  CFF3 F015          	movff	prodl,___wmul@product
  6748  00160A  CFF4 F016          	movff	prodh,___wmul@product+1
  6749  00160E  5011               	movf	___wmul@multiplier,w,c
  6750  001610  0214               	mulwf	___wmul@multiplicand+1,c
  6751  001612  50F3               	movf	prodl,w,c
  6752  001614  2616               	addwf	___wmul@product+1,f,c
  6753  001616  5012               	movf	___wmul@multiplier+1,w,c
  6754  001618  0213               	mulwf	___wmul@multiplicand,c
  6755  00161A  50F3               	movf	prodl,w,c
  6756  00161C  2616               	addwf	___wmul@product+1,f,c
  6757  00161E  C015  F011         	movff	___wmul@product,?___wmul
  6758  001622  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6759  001626  D000               	goto	l508
  6760  001628                     l508:
  6761  001628  0012               	return		;funcret
  6762  00162A                     __end_of___wmul:
  6763                           	opt stack 0
  6764                           tblptru	equ	0xFF8
  6765                           tblptrh	equ	0xFF7
  6766                           tblptrl	equ	0xFF6
  6767                           tablat	equ	0xFF5
  6768                           prodh	equ	0xFF4
  6769                           prodl	equ	0xFF3
  6770                           intcon	equ	0xFF2
  6771                           intcon2	equ	0xFF1
  6772                           postinc0	equ	0xFEE
  6773                           wreg	equ	0xFE8
  6774                           postdec1	equ	0xFE5
  6775                           fsr1l	equ	0xFE1
  6776                           indf2	equ	0xFDF
  6777                           postinc2	equ	0xFDE
  6778                           postdec2	equ	0xFDD
  6779                           fsr2h	equ	0xFDA
  6780                           fsr2l	equ	0xFD9
  6781                           status	equ	0xFD8
  6782                           
  6783 ;; *************** function _Deactivate_Buzzer *****************
  6784 ;; Defined at:
  6785 ;;		line 288 in file "Lab10_sample_1.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;		None               void
  6792 ;; Registers used:
  6793 ;;		wreg, status,2
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;Total ram usage:        0 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    3
  6806 ;; This function calls:
  6807 ;;		Nothing
  6808 ;; This function is called by:
  6809 ;;		_main
  6810 ;;		_Wait_One_Second_With_Beep
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text33
  6815  00171E                     __ptext33:
  6816                           	opt stack 0
  6817  00171E                     _Deactivate_Buzzer:
  6818                           	opt stack 27
  6819                           
  6820                           ;Lab10_sample_1.c: 290: CCP2CON = 0x0;
  6821                           
  6822                           ;incstack = 0
  6823  00171E  0E00               	movlw	0
  6824  001720  6EBA               	movwf	4026,c	;volatile
  6825                           
  6826                           ;Lab10_sample_1.c: 291: PORTBbits.RB3 = 0;
  6827  001722  9681               	bcf	3969,3,c	;volatile
  6828  001724  0012               	return		;funcret
  6829  001726                     __end_of_Deactivate_Buzzer:
  6830                           	opt stack 0
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           intcon2	equ	0xFF1
  6839                           postinc0	equ	0xFEE
  6840                           wreg	equ	0xFE8
  6841                           postdec1	equ	0xFE5
  6842                           fsr1l	equ	0xFE1
  6843                           indf2	equ	0xFDF
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function _Activate_Buzzer *****************
  6851 ;; Defined at:
  6852 ;;		line 280 in file "Lab10_sample_1.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;		None               void
  6859 ;; Registers used:
  6860 ;;		wreg, status,2
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;Total ram usage:        0 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    3
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_main
  6877 ;;		_Wait_One_Second_With_Beep
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text34
  6882  0016D2                     __ptext34:
  6883                           	opt stack 0
  6884  0016D2                     _Activate_Buzzer:
  6885                           	opt stack 27
  6886                           
  6887                           ;Lab10_sample_1.c: 282: PR2 = 0b11111001;
  6888                           
  6889                           ;incstack = 0
  6890  0016D2  0EF9               	movlw	249
  6891  0016D4  6ECB               	movwf	4043,c	;volatile
  6892                           
  6893                           ;Lab10_sample_1.c: 283: T2CON = 0b00000101;
  6894  0016D6  0E05               	movlw	5
  6895  0016D8  6ECA               	movwf	4042,c	;volatile
  6896                           
  6897                           ;Lab10_sample_1.c: 284: CCPR2L = 0b01001010;
  6898  0016DA  0E4A               	movlw	74
  6899  0016DC  6EBB               	movwf	4027,c	;volatile
  6900                           
  6901                           ;Lab10_sample_1.c: 285: CCP2CON = 0b00111100;
  6902  0016DE  0E3C               	movlw	60
  6903  0016E0  6EBA               	movwf	4026,c	;volatile
  6904  0016E2  0012               	return		;funcret
  6905  0016E4                     __end_of_Activate_Buzzer:
  6906                           	opt stack 0
  6907                           tblptru	equ	0xFF8
  6908                           tblptrh	equ	0xFF7
  6909                           tblptrl	equ	0xFF6
  6910                           tablat	equ	0xFF5
  6911                           prodh	equ	0xFF4
  6912                           prodl	equ	0xFF3
  6913                           intcon	equ	0xFF2
  6914                           intcon2	equ	0xFF1
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           postdec1	equ	0xFE5
  6918                           fsr1l	equ	0xFE1
  6919                           indf2	equ	0xFDF
  6920                           postinc2	equ	0xFDE
  6921                           postdec2	equ	0xFDD
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _chkisr *****************
  6927 ;; Defined at:
  6928 ;;		line 94 in file "Lab10_sample_1.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, status,2, status,0, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;Total ram usage:       14 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    2
  6949 ;; This function calls:
  6950 ;;		_INT0_isr
  6951 ;;		_TIMER1_isr
  6952 ;; This function is called by:
  6953 ;;		Interrupt level 2
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           	psect	intcode
  6958  000008                     __pintcode:
  6959                           	opt stack 0
  6960  000008                     _chkisr:
  6961                           	opt stack 20
  6962                           
  6963                           ;incstack = 0
  6964  000008  CFFA F003          	movff	pclath,??_chkisr
  6965  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6966  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6967  000014  ED11  F009         	call	int_func,f	;refresh shadow registers
  6968                           pclatu	equ	0xFFB
  6969                           pclath	equ	0xFFA
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           intcon	equ	0xFF2
  6977                           intcon2	equ	0xFF1
  6978                           postinc0	equ	0xFEE
  6979                           fsr0l	equ	0xFE9
  6980                           wreg	equ	0xFE8
  6981                           postdec1	equ	0xFE5
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           postdec2	equ	0xFDD
  6986                           fsr2h	equ	0xFDA
  6987                           fsr2l	equ	0xFD9
  6988                           status	equ	0xFD8
  6989                           
  6990                           	psect	intcode_body
  6991  001222                     __pintcode_body:
  6992                           	opt stack 20
  6993  001222                     int_func:
  6994                           	opt stack 20
  6995  001222  0006               	pop		; remove dummy address from shadow register refresh
  6996  001224  CFEA F006          	movff	fsr0h,??_chkisr+3
  6997  001228  CFE1 F007          	movff	fsr1l,??_chkisr+4
  6998  00122C  CFE2 F008          	movff	fsr1h,??_chkisr+5
  6999  001230  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7000  001234  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7001  001238  CFF3 F00B          	movff	prodl,??_chkisr+8
  7002  00123C  CFF4 F00C          	movff	prodh,??_chkisr+9
  7003  001240  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7004  001244  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7005  001248  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7006  00124C  CFF5 F010          	movff	tablat,??_chkisr+13
  7007                           
  7008                           ;Lab10_sample_1.c: 96: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7009  001250  A09E               	btfss	3998,0,c	;volatile
  7010  001252  D003               	goto	i2l1934
  7011  001254  EC89  F00B         	call	_TIMER1_isr	;wreg free
  7012  001258  D000               	goto	i2l1934
  7013  00125A                     i2l1934:
  7014                           
  7015                           ;Lab10_sample_1.c: 97: if (INTCONbits.INT0IF == 1) INT0_isr();
  7016  00125A  A2F2               	btfss	intcon,1,c	;volatile
  7017  00125C  D003               	goto	i2l132
  7018  00125E  EC89  F004         	call	_INT0_isr	;wreg free
  7019  001262  D000               	goto	i2l132
  7020  001264                     i2l132:
  7021  001264  C010  FFF5         	movff	??_chkisr+13,tablat
  7022  001268  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7023  00126C  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7024  001270  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7025  001274  C00C  FFF4         	movff	??_chkisr+9,prodh
  7026  001278  C00B  FFF3         	movff	??_chkisr+8,prodl
  7027  00127C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7028  001280  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7029  001284  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7030  001288  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7031  00128C  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7032  001290  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7033  001294  C004  FFFB         	movff	??_chkisr+1,pclatu
  7034  001298  C003  FFFA         	movff	??_chkisr,pclath
  7035  00129C  0011               	retfie		f
  7036  00129E                     __end_of_chkisr:
  7037                           	opt stack 0
  7038                           pclatu	equ	0xFFB
  7039                           pclath	equ	0xFFA
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           prodh	equ	0xFF4
  7045                           prodl	equ	0xFF3
  7046                           intcon	equ	0xFF2
  7047                           intcon2	equ	0xFF1
  7048                           postinc0	equ	0xFEE
  7049                           fsr0h	equ	0xFEA
  7050                           fsr0l	equ	0xFE9
  7051                           wreg	equ	0xFE8
  7052                           postdec1	equ	0xFE5
  7053                           fsr1h	equ	0xFE2
  7054                           fsr1l	equ	0xFE1
  7055                           indf2	equ	0xFDF
  7056                           postinc2	equ	0xFDE
  7057                           postdec2	equ	0xFDD
  7058                           fsr2h	equ	0xFDA
  7059                           fsr2l	equ	0xFD9
  7060                           status	equ	0xFD8
  7061                           
  7062 ;; *************** function _TIMER1_isr *****************
  7063 ;; Defined at:
  7064 ;;		line 100 in file "Lab10_sample_1.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;		None
  7069 ;; Return value:  Size  Location     Type
  7070 ;;		None               void
  7071 ;; Registers used:
  7072 ;;		wreg, status,2
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;Total ram usage:        0 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_chkisr
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text36
  7092  001712                     __ptext36:
  7093                           	opt stack 0
  7094  001712                     _TIMER1_isr:
  7095                           	opt stack 21
  7096                           
  7097                           ;Lab10_sample_1.c: 102: Nec_state = 0;
  7098                           
  7099                           ;incstack = 0
  7100  001712  0E00               	movlw	0
  7101  001714  6E6A               	movwf	_Nec_state,c
  7102                           
  7103                           ;Lab10_sample_1.c: 103: INTCON2bits.INTEDG0 = 0;
  7104  001716  9CF1               	bcf	intcon2,6,c	;volatile
  7105                           
  7106                           ;Lab10_sample_1.c: 104: T1CONbits.TMR1ON = 0;
  7107  001718  90CD               	bcf	4045,0,c	;volatile
  7108                           
  7109                           ;Lab10_sample_1.c: 105: PIR1bits.TMR1IF = 0;
  7110  00171A  909E               	bcf	3998,0,c	;volatile
  7111  00171C  0012               	return		;funcret
  7112  00171E                     __end_of_TIMER1_isr:
  7113                           	opt stack 0
  7114                           pclatu	equ	0xFFB
  7115                           pclath	equ	0xFFA
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           intcon2	equ	0xFF1
  7124                           postinc0	equ	0xFEE
  7125                           fsr0h	equ	0xFEA
  7126                           fsr0l	equ	0xFE9
  7127                           wreg	equ	0xFE8
  7128                           postdec1	equ	0xFE5
  7129                           fsr1h	equ	0xFE2
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           fsr2h	equ	0xFDA
  7135                           fsr2l	equ	0xFD9
  7136                           status	equ	0xFD8
  7137                           
  7138 ;; *************** function _INT0_isr *****************
  7139 ;; Defined at:
  7140 ;;		line 114 in file "Lab10_sample_1.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;		None
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;		None
  7145 ;; Return value:  Size  Location     Type
  7146 ;;		None               void
  7147 ;; Registers used:
  7148 ;;		wreg, status,2, status,0, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;Total ram usage:        2 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    1
  7161 ;; This function calls:
  7162 ;;		_force_nec_state0
  7163 ;; This function is called by:
  7164 ;;		_chkisr
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           	psect	text37
  7169  000912                     __ptext37:
  7170                           	opt stack 0
  7171  000912                     _INT0_isr:
  7172                           	opt stack 20
  7173                           
  7174                           ;Lab10_sample_1.c: 116: INTCONbits.INT0IF = 0;
  7175                           
  7176                           ;incstack = 0
  7177  000912  92F2               	bcf	intcon,1,c	;volatile
  7178                           
  7179                           ;Lab10_sample_1.c: 117: if (Nec_state != 0)
  7180  000914  506A               	movf	_Nec_state,w,c
  7181  000916  B4D8               	btfsc	status,2,c
  7182  000918  D091               	goto	i2l1686
  7183                           
  7184                           ;Lab10_sample_1.c: 118: {
  7185                           ;Lab10_sample_1.c: 119: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7186  00091A  50CE               	movf	4046,w,c	;volatile
  7187  00091C  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7188  000920  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7189  000922  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7190  000926  6A01               	clrf	??_INT0_isr,c
  7191  000928  1001               	iorwf	??_INT0_isr,w,c
  7192  00092A  6E61               	movwf	_Time_Elapsed,c
  7193  00092C  5002               	movf	??_INT0_isr+1,w,c
  7194  00092E  6E62               	movwf	_Time_Elapsed+1,c
  7195                           
  7196                           ;Lab10_sample_1.c: 120: TMR1H = 0;
  7197  000930  0E00               	movlw	0
  7198  000932  6ECF               	movwf	4047,c	;volatile
  7199                           
  7200                           ;Lab10_sample_1.c: 121: TMR1L = 0;
  7201  000934  0E00               	movlw	0
  7202  000936  6ECE               	movwf	4046,c	;volatile
  7203                           
  7204                           ;Lab10_sample_1.c: 122: }
  7205                           ;Lab10_sample_1.c: 124: switch(Nec_state)
  7206  000938  D081               	goto	i2l1686
  7207  00093A                     i2l1626:
  7208                           
  7209                           ;Lab10_sample_1.c: 127: {
  7210                           ;Lab10_sample_1.c: 129: TMR1H = 0;
  7211  00093A  0E00               	movlw	0
  7212  00093C  6ECF               	movwf	4047,c	;volatile
  7213                           
  7214                           ;Lab10_sample_1.c: 130: TMR1L = 0;
  7215  00093E  0E00               	movlw	0
  7216  000940  6ECE               	movwf	4046,c	;volatile
  7217                           
  7218                           ;Lab10_sample_1.c: 131: PIR1bits.TMR1IF = 0;
  7219  000942  909E               	bcf	3998,0,c	;volatile
  7220                           
  7221                           ;Lab10_sample_1.c: 132: T1CON= 0x90;
  7222  000944  0E90               	movlw	144
  7223  000946  6ECD               	movwf	4045,c	;volatile
  7224                           
  7225                           ;Lab10_sample_1.c: 133: T1CONbits.TMR1ON = 1;
  7226  000948  80CD               	bsf	4045,0,c	;volatile
  7227                           
  7228                           ;Lab10_sample_1.c: 134: bit_count = 0;
  7229  00094A  0E00               	movlw	0
  7230  00094C  6E6C               	movwf	_bit_count,c
  7231                           
  7232                           ;Lab10_sample_1.c: 135: Nec_code = 0;
  7233  00094E  0E00               	movlw	0
  7234  000950  6E5D               	movwf	_Nec_code,c
  7235  000952  0E00               	movlw	0
  7236  000954  6E5E               	movwf	_Nec_code+1,c
  7237  000956  0E00               	movlw	0
  7238  000958  6E5F               	movwf	_Nec_code+2,c
  7239  00095A  0E00               	movlw	0
  7240  00095C  6E60               	movwf	_Nec_code+3,c
  7241                           
  7242                           ;Lab10_sample_1.c: 136: Nec_state = 1;
  7243  00095E  0E01               	movlw	1
  7244  000960  D01F               	goto	L4
  7245  000962                     i2l1632:
  7246                           
  7247                           ;Lab10_sample_1.c: 137: INTCON2bits.INTEDG0 = 1;
  7248  000962  8CF1               	bsf	intcon2,6,c	;volatile
  7249                           
  7250                           ;Lab10_sample_1.c: 138: return;
  7251  000964  D07C               	goto	i2l144
  7252  000966                     i2l1636:
  7253                           
  7254                           ;Lab10_sample_1.c: 142: {
  7255                           ;Lab10_sample_1.c: 143: if((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
  7256  000966  0E35               	movlw	53
  7257  000968  5C61               	subwf	_Time_Elapsed,w,c
  7258  00096A  0E21               	movlw	33
  7259  00096C  5862               	subwfb	_Time_Elapsed+1,w,c
  7260  00096E  A0D8               	btfss	status,0,c
  7261  000970  D076               	goto	i2l144
  7262  000972  0E1C               	movlw	28
  7263  000974  5C61               	subwf	_Time_Elapsed,w,c
  7264  000976  0E25               	movlw	37
  7265  000978  5862               	subwfb	_Time_Elapsed+1,w,c
  7266  00097A  B0D8               	btfsc	status,0,c
  7267  00097C  D070               	goto	i2l144
  7268                           
  7269                           ;Lab10_sample_1.c: 144: {
  7270                           ;Lab10_sample_1.c: 145: Nec_state = 2;
  7271  00097E  0E02               	movlw	2
  7272  000980  D01F               	goto	L5
  7273  000982                     i2l1642:
  7274                           
  7275                           ;Lab10_sample_1.c: 146: INTCON2bits.INTEDG0 = 0;
  7276  000982  9CF1               	bcf	intcon2,6,c	;volatile
  7277                           
  7278                           ;Lab10_sample_1.c: 147: }
  7279                           ;Lab10_sample_1.c: 148: return;
  7280  000984  D06C               	goto	i2l144
  7281  000986                     i2l1646:
  7282                           
  7283                           ;Lab10_sample_1.c: 152: {
  7284                           ;Lab10_sample_1.c: 153: if((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
  7285  000986  0EA1               	movlw	161
  7286  000988  5C61               	subwf	_Time_Elapsed,w,c
  7287  00098A  0E0F               	movlw	15
  7288  00098C  5862               	subwfb	_Time_Elapsed+1,w,c
  7289  00098E  A0D8               	btfss	status,0,c
  7290  000990  D066               	goto	i2l144
  7291  000992  0E88               	movlw	136
  7292  000994  5C61               	subwf	_Time_Elapsed,w,c
  7293  000996  0E13               	movlw	19
  7294  000998  5862               	subwfb	_Time_Elapsed+1,w,c
  7295  00099A  B0D8               	btfsc	status,0,c
  7296  00099C  D060               	goto	i2l144
  7297                           
  7298                           ;Lab10_sample_1.c: 154: {
  7299                           ;Lab10_sample_1.c: 155: Nec_state = 3;
  7300  00099E  0E03               	movlw	3
  7301  0009A0                     L4:
  7302  0009A0  6E6A               	movwf	_Nec_state,c
  7303  0009A2  D7DF               	goto	i2l1632
  7304                           
  7305                           ;Lab10_sample_1.c: 157: }
  7306                           ;Lab10_sample_1.c: 158: return;
  7307                           
  7308                           ;Lab10_sample_1.c: 156: INTCON2bits.INTEDG0 = 1;
  7309  0009A4  D05C               	goto	i2l144
  7310  0009A6                     i2l1656:
  7311                           
  7312                           ;Lab10_sample_1.c: 162: {
  7313                           ;Lab10_sample_1.c: 163: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  7314  0009A6  0E91               	movlw	145
  7315  0009A8  5C61               	subwf	_Time_Elapsed,w,c
  7316  0009AA  0E01               	movlw	1
  7317  0009AC  5862               	subwfb	_Time_Elapsed+1,w,c
  7318  0009AE  A0D8               	btfss	status,0,c
  7319  0009B0  D056               	goto	i2l144
  7320  0009B2  0E08               	movlw	8
  7321  0009B4  5C61               	subwf	_Time_Elapsed,w,c
  7322  0009B6  0E07               	movlw	7
  7323  0009B8  5862               	subwfb	_Time_Elapsed+1,w,c
  7324  0009BA  B0D8               	btfsc	status,0,c
  7325  0009BC  D050               	goto	i2l144
  7326                           
  7327                           ;Lab10_sample_1.c: 164: {
  7328                           ;Lab10_sample_1.c: 165: Nec_state = 4;
  7329  0009BE  0E04               	movlw	4
  7330  0009C0                     L5:
  7331  0009C0  6E6A               	movwf	_Nec_state,c
  7332  0009C2  D7DF               	goto	i2l1642
  7333                           
  7334                           ;Lab10_sample_1.c: 167: }
  7335                           ;Lab10_sample_1.c: 168: return;
  7336                           
  7337                           ;Lab10_sample_1.c: 166: INTCON2bits.INTEDG0 = 0;
  7338  0009C4  D04C               	goto	i2l144
  7339  0009C6                     i2l1666:
  7340                           
  7341                           ;Lab10_sample_1.c: 172: {
  7342                           ;Lab10_sample_1.c: 173: if((Time_Elapsed > 400) && (Time_Elapsed < 1800))
  7343  0009C6  0E91               	movlw	145
  7344  0009C8  5C61               	subwf	_Time_Elapsed,w,c
  7345  0009CA  0E01               	movlw	1
  7346  0009CC  5862               	subwfb	_Time_Elapsed+1,w,c
  7347  0009CE  A0D8               	btfss	status,0,c
  7348  0009D0  D030               	goto	i2l1678
  7349  0009D2  0E08               	movlw	8
  7350  0009D4  5C61               	subwf	_Time_Elapsed,w,c
  7351  0009D6  0E07               	movlw	7
  7352  0009D8  5862               	subwfb	_Time_Elapsed+1,w,c
  7353  0009DA  B0D8               	btfsc	status,0,c
  7354  0009DC  D02A               	goto	i2l1678
  7355                           
  7356                           ;Lab10_sample_1.c: 174: {
  7357                           ;Lab10_sample_1.c: 175: Nec_code = Nec_code << 1;
  7358  0009DE  90D8               	bcf	status,0,c
  7359  0009E0  345D               	rlcf	_Nec_code,w,c
  7360  0009E2  6E5D               	movwf	_Nec_code,c
  7361  0009E4  345E               	rlcf	_Nec_code+1,w,c
  7362  0009E6  6E5E               	movwf	_Nec_code+1,c
  7363  0009E8  345F               	rlcf	_Nec_code+2,w,c
  7364  0009EA  6E5F               	movwf	_Nec_code+2,c
  7365  0009EC  3460               	rlcf	_Nec_code+3,w,c
  7366  0009EE  6E60               	movwf	_Nec_code+3,c
  7367                           
  7368                           ;Lab10_sample_1.c: 176: if(Time_Elapsed > 1000)
  7369  0009F0  0EE9               	movlw	233
  7370  0009F2  5C61               	subwf	_Time_Elapsed,w,c
  7371  0009F4  0E03               	movlw	3
  7372  0009F6  5862               	subwfb	_Time_Elapsed+1,w,c
  7373  0009F8  A0D8               	btfss	status,0,c
  7374  0009FA  D00C               	goto	i2l153
  7375                           
  7376                           ;Lab10_sample_1.c: 177: {
  7377                           ;Lab10_sample_1.c: 178: Nec_code = Nec_code + 1;
  7378  0009FC  0E01               	movlw	1
  7379  0009FE  245D               	addwf	_Nec_code,w,c
  7380  000A00  6E5D               	movwf	_Nec_code,c
  7381  000A02  0E00               	movlw	0
  7382  000A04  205E               	addwfc	_Nec_code+1,w,c
  7383  000A06  6E5E               	movwf	_Nec_code+1,c
  7384  000A08  0E00               	movlw	0
  7385  000A0A  205F               	addwfc	_Nec_code+2,w,c
  7386  000A0C  6E5F               	movwf	_Nec_code+2,c
  7387  000A0E  0E00               	movlw	0
  7388  000A10  2060               	addwfc	_Nec_code+3,w,c
  7389  000A12  6E60               	movwf	_Nec_code+3,c
  7390  000A14                     i2l153:
  7391                           
  7392                           ;Lab10_sample_1.c: 179: }
  7393                           ;Lab10_sample_1.c: 180: bit_count = bit_count + 1;
  7394  000A14  286C               	incf	_bit_count,w,c
  7395  000A16  6E6C               	movwf	_bit_count,c
  7396                           
  7397                           ;Lab10_sample_1.c: 181: if(bit_count > 31)
  7398  000A18  0E1F               	movlw	31
  7399  000A1A  646C               	cpfsgt	_bit_count,c
  7400  000A1C  D007               	goto	i2l154
  7401                           
  7402                           ;Lab10_sample_1.c: 182: {
  7403                           ;Lab10_sample_1.c: 183: nec_ok = 1;
  7404  000A1E  0E00               	movlw	0
  7405  000A20  6E66               	movwf	_nec_ok+1,c
  7406  000A22  0E01               	movlw	1
  7407  000A24  6E65               	movwf	_nec_ok,c
  7408                           
  7409                           ;Lab10_sample_1.c: 184: INTCONbits.INT0IE = 0;
  7410  000A26  98F2               	bcf	intcon,4,c	;volatile
  7411                           
  7412                           ;Lab10_sample_1.c: 185: Nec_state = 0;
  7413  000A28  0E00               	movlw	0
  7414  000A2A  6E6A               	movwf	_Nec_state,c
  7415  000A2C                     i2l154:
  7416                           
  7417                           ;Lab10_sample_1.c: 186: }
  7418                           ;Lab10_sample_1.c: 187: Nec_state = 3;
  7419  000A2C  0E03               	movlw	3
  7420  000A2E  6E6A               	movwf	_Nec_state,c
  7421                           
  7422                           ;Lab10_sample_1.c: 188: }
  7423  000A30  D798               	goto	i2l1632
  7424  000A32                     i2l1678:
  7425                           
  7426                           ;Lab10_sample_1.c: 189: else
  7427                           ;Lab10_sample_1.c: 190: {
  7428                           ;Lab10_sample_1.c: 191: force_nec_state0();
  7429  000A32  EC93  F00B         	call	_force_nec_state0	;wreg free
  7430  000A36  D795               	goto	i2l1632
  7431  000A38  D794               	goto	i2l1632
  7432                           
  7433                           ;Lab10_sample_1.c: 195: }
  7434                           ;Lab10_sample_1.c: 196: }
  7435                           
  7436                           ;Lab10_sample_1.c: 194: return;
  7437                           
  7438                           ;Lab10_sample_1.c: 192: }
  7439                           ;Lab10_sample_1.c: 193: INTCON2bits.INTEDG0 = 1;
  7440  000A3A  D011               	goto	i2l144
  7441  000A3C                     i2l1686:
  7442  000A3C  506A               	movf	_Nec_state,w,c
  7443                           
  7444                           ; Switch size 1, requested type "space"
  7445                           ; Number of cases is 5, Range of values is 0 to 4
  7446                           ; switch strategies available:
  7447                           ; Name         Instructions Cycles
  7448                           ; simple_byte           16     9 (average)
  7449                           ;	Chosen strategy is simple_byte
  7450  000A3E  0A00               	xorlw	0	; case 0
  7451  000A40  B4D8               	btfsc	status,2,c
  7452  000A42  D77B               	goto	i2l1626
  7453  000A44  0A01               	xorlw	1	; case 1
  7454  000A46  B4D8               	btfsc	status,2,c
  7455  000A48  D78E               	goto	i2l1636
  7456  000A4A  0A03               	xorlw	3	; case 2
  7457  000A4C  B4D8               	btfsc	status,2,c
  7458  000A4E  D79B               	goto	i2l1646
  7459  000A50  0A01               	xorlw	1	; case 3
  7460  000A52  B4D8               	btfsc	status,2,c
  7461  000A54  D7A8               	goto	i2l1656
  7462  000A56  0A07               	xorlw	7	; case 4
  7463  000A58  B4D8               	btfsc	status,2,c
  7464  000A5A  D7B5               	goto	i2l1666
  7465  000A5C  D000               	goto	i2l144
  7466  000A5E                     i2l144:
  7467  000A5E  0012               	return		;funcret
  7468  000A60                     __end_of_INT0_isr:
  7469                           	opt stack 0
  7470                           pclatu	equ	0xFFB
  7471                           pclath	equ	0xFFA
  7472                           tblptru	equ	0xFF8
  7473                           tblptrh	equ	0xFF7
  7474                           tblptrl	equ	0xFF6
  7475                           tablat	equ	0xFF5
  7476                           prodh	equ	0xFF4
  7477                           prodl	equ	0xFF3
  7478                           intcon	equ	0xFF2
  7479                           intcon2	equ	0xFF1
  7480                           postinc0	equ	0xFEE
  7481                           fsr0h	equ	0xFEA
  7482                           fsr0l	equ	0xFE9
  7483                           wreg	equ	0xFE8
  7484                           postdec1	equ	0xFE5
  7485                           fsr1h	equ	0xFE2
  7486                           fsr1l	equ	0xFE1
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           postdec2	equ	0xFDD
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8
  7493                           
  7494 ;; *************** function _force_nec_state0 *****************
  7495 ;; Defined at:
  7496 ;;		line 108 in file "Lab10_sample_1.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;		None
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;		None
  7501 ;; Return value:  Size  Location     Type
  7502 ;;		None               void
  7503 ;; Registers used:
  7504 ;;		wreg, status,2
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;Total ram usage:        0 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; This function calls:
  7517 ;;		Nothing
  7518 ;; This function is called by:
  7519 ;;		_INT0_isr
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           	psect	text38
  7524  001726                     __ptext38:
  7525                           	opt stack 0
  7526  001726                     _force_nec_state0:
  7527                           	opt stack 20
  7528                           
  7529                           ;Lab10_sample_1.c: 110: Nec_state=0;
  7530                           
  7531                           ;incstack = 0
  7532  001726  0E00               	movlw	0
  7533  001728  6E6A               	movwf	_Nec_state,c
  7534                           
  7535                           ;Lab10_sample_1.c: 111: T1CONbits.TMR1ON = 0;
  7536  00172A  90CD               	bcf	4045,0,c	;volatile
  7537  00172C  0012               	return		;funcret
  7538  00172E                     __end_of_force_nec_state0:
  7539                           	opt stack 0
  7540                           pclatu	equ	0xFFB
  7541                           pclath	equ	0xFFA
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           prodh	equ	0xFF4
  7547                           prodl	equ	0xFF3
  7548                           intcon	equ	0xFF2
  7549                           intcon2	equ	0xFF1
  7550                           postinc0	equ	0xFEE
  7551                           fsr0h	equ	0xFEA
  7552                           fsr0l	equ	0xFE9
  7553                           wreg	equ	0xFE8
  7554                           postdec1	equ	0xFE5
  7555                           fsr1h	equ	0xFE2
  7556                           fsr1l	equ	0xFE1
  7557                           indf2	equ	0xFDF
  7558                           postinc2	equ	0xFDE
  7559                           postdec2	equ	0xFDD
  7560                           fsr2h	equ	0xFDA
  7561                           fsr2l	equ	0xFD9
  7562                           status	equ	0xFD8
  7563                           pclatu	equ	0xFFB
  7564                           pclath	equ	0xFFA
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           intcon2	equ	0xFF1
  7573                           postinc0	equ	0xFEE
  7574                           fsr0h	equ	0xFEA
  7575                           fsr0l	equ	0xFE9
  7576                           wreg	equ	0xFE8
  7577                           postdec1	equ	0xFE5
  7578                           fsr1h	equ	0xFE2
  7579                           fsr1l	equ	0xFE1
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587                           	psect	rparam
  7588  0000                     pclatu	equ	0xFFB
  7589                           pclath	equ	0xFFA
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           intcon	equ	0xFF2
  7597                           intcon2	equ	0xFF1
  7598                           postinc0	equ	0xFEE
  7599                           fsr0h	equ	0xFEA
  7600                           fsr0l	equ	0xFE9
  7601                           wreg	equ	0xFE8
  7602                           postdec1	equ	0xFE5
  7603                           fsr1h	equ	0xFE2
  7604                           fsr1l	equ	0xFE1
  7605                           indf2	equ	0xFDF
  7606                           postinc2	equ	0xFDE
  7607                           postdec2	equ	0xFDD
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8


Data Sizes:
    Strings     77
    Constant    547
    Data        211
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     111
    BANK0           128      7     101
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[8]), STR_2(CODE[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_1(CODE[34]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   52017
                                             66 COMRAM     4     4      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                  _Initialize_Screen
                   _Wait_Half_Second
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              36    26     10    3136
                                             38 COMRAM    27    17     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     265
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20901
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_Half_Second
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 14 11:02:07 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006E                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _D1 0080                                _D2 0095  
                              _D3 00AA               ___wmul@multiplicand 0013  
                             l121 1708                               l301 07EA  
                             l223 141A                               l233 16BA  
                             l308 0866                               l340 0F7C  
                             l500 1354                               l501 1356  
                             l502 1360                               l503 1362  
                             l431 0126                               l336 0F7E  
                             l337 0EEA                               l185 167A  
                             l505 137C                               l434 0188  
                             l283 1120                               l339 0F5A  
                             l347 06D0                               l508 1628  
                             l277 15D6                               l365 0ACE  
                             l472 045C                               l299 0910  
                             l496 133A                               l939 164A  
                             l968 1088                               l978 12FC  
               ?_Wait_Half_Second 0001                               _PR2 000FCB  
               _Deactivate_Buzzer 171E                               _nbr 0063  
                             _txt 0067                               prod 000FF3  
                             wreg 000FE8                ??_Wait_Half_Second 0011  
              ?_Deactivate_Buzzer 0001                   ??_fillRectangle 001D  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 15D8  
                    __CFG_WDT$OFF 000000                    drawFastVLine@h 0019  
                            l1070 1536                              l4000 04D2  
                            l4020 0592                              l4012 0508  
                            l4004 04E6                    drawFastVLine@x 0022  
                  drawFastVLine@y 0018                              l4008 0500  
                            l3416 15B8                              l3424 147A  
                            l3530 07D8                              l2730 103E  
                            l3428 1496                              l3540 07F6  
                            l3612 0F5E                              l2580 133E  
                            l2572 132A                              l2740 1078  
                            l2732 1046                              l3390 1116  
                            l3374 10AA                              l3534 07E6  
                            l3526 07CC                              l3622 0F78  
                            l2750 12BE                              l2718 1642  
                            l3544 0826                              l3536 07EE  
                            l3616 0F68                              l3608 0F50  
                            l3712 0B30                              l2576 1332  
                            l2568 1320                              l2728 1030  
                            l2752 12C6                              l3800 0082  
                            l3378 10E2                              l3546 085A  
                            l3650 0D42                              l3634 0CD4  
                            l2674 1580                              l3810 00EA  
                            l3388 1108                              l3564 08DC  
                            l3556 0888                              l3572 090C  
                            l3548 085E                              l3580 150A  
                            l3660 0D9C                              l2676 158A  
                            l3716 0B82                              l2588 134C  
                            l2756 12EC                              l2748 12B0  
                            l3566 0904                              l3558 08B0  
                            l3646 0D24                              l3590 0EB4  
                            l3910 03A8                              l3902 030E  
                            l3822 014A                              l3814 00F2  
                            l3752 06B6                              l3920 042C  
                            l3840 01CE                              l3808 00E4  
                            l3578 1504                              l3658 0D94  
                            l3906 0322                              l3850 020E  
                            l3842 01D2                              l3826 016E  
                            l3922 0440                              l3596 0F22  
                            l3780 07A6                              l3908 0330  
                            l3916 0412                              l3860 0224  
                            l3836 01A8                              l3918 0424  
                            l3854 0214                              l3846 01DE  
                            l3870 025A                              l3790 0044  
                            l3696 0AB4                              l3864 0254  
                            l3856 0218                              l3872 026C  
                            l3784 0026                              l3890 02CE  
                            l3882 02AC                              l3794 004E  
                            l3892 02D6                              l3884 02B6  
                            l3796 0064                              l3788 0036  
                            l3878 0288                              l3896 02EE  
                            l3898 02F6                              l3988 04B0  
                            STR_1 FFB2                              STR_2 FFD4  
                            STR_3 FFF7                              STR_4 FFE6  
                            u2410 10D8                              u2710 0CFE  
                            u2640 0EE2                              u2570 08BE  
                            u2650 0F18                              _TRMT 007D61  
             ??_Deactivate_Buzzer 0011                              _main 045E  
                            _font FD8F                              fsr0h 000FEA  
                            _txt1 012A                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 005C  
                            pclat 000FFA                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   ??_drawFastVLine 001C  
                    ___param_bank 000010                       ?_TIMER1_isr 0001  
                __end_of_INT0_isr 0A60         __end_of_Deactivate_Buzzer 1726  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                   __end_of___lldiv 109A  
                           _T0CON 000FD5                             _T1CON 000FCD  
                 __end_of___llmod 130E                             _T2CON 000FCA  
                           _T3CON 000FB1                             i2l132 1264  
                           i2l144 0A5E                             i2l153 0A14  
                           i2l154 0A2C                   drawCircle@color 0022  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR1H 000FCF                             _TMR0L 000FD6  
                           _TMR3H 000FB3                             _TMR1L 000FCE  
                           _TMR3L 000FB2                             _SPBRG 000FAF  
                           _PORTD 000F83                             _PORTE 000F84  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 0B98                             _Rcmd3 0DB2  
                           _nRBPU 007F8F                   __end_of_dpowers FF92  
                           _color 0100                             _font2 FE8E  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 164C             fillCircleHelper@delta 002B  
                           _putch 1704             fillCircleHelper@color 002D  
                           main@i 0044                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0013                   __initialization 1122  
                    __end_of_main 060E                      __end_of_font FE8E  
                __end_of_Rcmd2red 1576                            ??_main 0043  
                   __activetblptr 000002                 __end_of_LCD_Reset 16D2  
       ??_TFT_GreenTab_Initialize 001D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON1 000FC1  
                ___llmod@dividend 001E                            _CCPR2L 000FBB  
                          ?_putch 0001                            i2l1632 0962  
                          i2l1642 0982                            i2l1626 093A  
                          i2l1636 0966                            i2l1646 0986  
                          i2l1656 09A6                            i2l1666 09C6  
                          i2l1678 0A32                            i2l1686 0A3C  
                          i2l1934 125A                            _OSCCON 000FD3  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                  _force_nec_state0 1726  
                __end_of_delay_ms 1422                  __end_of_fillRect 14BA  
                __end_of_drawChar 0912                __size_of_OpenUSART 0070  
        __size_of_Activate_Buzzer 0012                            ___wmul 1602  
       __size_of_fillCircleHelper 0138                  __end_of_drawtext 0DB2  
                       ??___lldiv 0019                         ??___llmod 0026  
                          _chkisr 0008                            _array1 0047  
                          _buffer 00BF                            _nec_ok 0065  
                          clear_0 1128                            clear_1 1134  
      __size_of_Deactivate_Buzzer 0008                            _printf 001C  
                    drawtext@size 0040                            _strcpy 1576  
                          _strlen 14FA                      __pdataCOMRAM 0047  
                       ??_isdigit 0011                      __mediumconst FD8E  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 0011  
                __end_of_spiwrite 16C0                        __accesstop 0080  
         __end_of__initialization 119A                         ?_INT0_isr 0001  
                   ___rparam_used 000001                     __end_of_Rcmd1 0CA8  
                   __end_of_Rcmd3 0EA4                    __pcstackCOMRAM 0001  
                    __pidataBANK0 14BA                      __pidataBANK1 11A4  
                   __end_of_font2 FF6A                     __end_of_putch 1712  
                  drawPixel@color 0019            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 137E                           ??_putch 0011  
                      __pbssBANK0 00BF                         ?_Rcmd2red 0001  
              __size_of_init_UART 0014         __size_of_Wait_Half_Second 001A  
                 spiwrite@spidata 0012                        ??_INT0_isr 0001  
              __CFG_CCP2MX$PORTBE 000000                           ?___wmul 0011  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ??_TIMER1_isr 0001  
                      _fillCircle 137E                           ?_printf 0027  
                         ?_strcpy 0011                           ?_strlen 0011  
               ??_Activate_Buzzer 0011                        _fillScreen 164C  
                      _drawCircle 060E                         ?_delay_ms 0017  
                       ?_fillRect 0023                         ?_drawChar 002E  
                         _SSPCON1 000FC6                           _SSPSTAT 000FC7  
           __end_of_fillRectangle 0F80                         ?_drawtext 0039  
                      ??_Rcmd2red 0014                __end_of_TIMER1_isr 171E  
                   _write_command 16F4                           __Hparam 0000  
                         __Lparam 0000                 __end_of_drawPixel 15D8  
           __end_of_drawFastVLine 1122                  _fillCircleHelper 0A60  
                         ___lldiv 100E                   __size_of___wmul 0028  
                         ___llmod 129E                   __size_of_chkisr 1296  
                       ?_spiwrite 0001                           __pcinit 1122  
                         __ramtop 1000                           __ptext0 045E  
                         __ptext1 001C                           __ptext2 1704  
                         __ptext3 162A                           __ptext4 129E  
                         __ptext5 100E                           __ptext6 1698  
                         __ptext7 130E                           __ptext8 137E  
                         __ptext9 0A60                   __size_of_printf 0442  
               __end_of_init_UART 16AC                         _T0CONbits 000FD5  
                 __size_of_strcpy 0032                   __size_of_strlen 003E  
               __end_of_hexpowers FFB2          __end_of_force_nec_state0 172E  
                       _T1CONbits 000FCD                           _dpowers FF6A  
                         _isdigit 162A                         _T3CONbits 000FB1  
                      ??_delay_ms 0019                     drawtext@_text 003A  
                   drawtext@color 003C                        ??_fillRect 0028  
                      ??_drawChar 0035                         _LCD_Reset 16C0  
                   _setAddrWindow 1422                    __pintcode_body 1222  
                      delay_ms@ms 0017              end_of_initialization 119A  
                      ??_drawtext 0041                    ?_write_command 0001  
                   __Lmediumconst FD8E                           int_func 1222  
                 ___lldiv@divisor 0015                   ___lldiv@counter 001D  
                       _RCSTAbits 000FAB                           printf@c 0041  
                         printf@f 0027                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                        ??_spiwrite 0011  
                         strlen@s 0011                   fillCircle@color 0041  
                     ?_fillCircle 003B                  drawtext@cursor_x 00E4  
                drawtext@cursor_y 00E3                         _PORTBbits 000F81  
                       _PORTCbits 000F82                       ?_fillScreen 0024  
                     ?_drawCircle 001C                        drawChar@bg 0032  
                       _TRISCbits 000F94                    ?_setAddrWindow 0014  
                      ?_LCD_Reset 0001                  drawtext@textsize 00DF  
                      drawPixel@x 001B                        drawPixel@y 0018  
                _Wait_Half_Second 1668                       printf@width 003E  
                       _TXSTAbits 000FAC                 __size_of_INT0_isr 014E  
                  __end_of___wmul 162A                     delay_ms@count 001B  
                      _write_data 16E4                     __pidataCOMRAM 1682  
                  __end_of_chkisr 129E          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 003E                         _Nec_code1 0069  
                  __end_of_printf 045E                    __end_of_strcpy 15A8  
                  __end_of_strlen 1538                         _Nec_state 006A  
             start_initialization 1122                   ??_write_command 0013  
                       _OpenUSART 130E               __size_of_fillCircle 0052  
                 ___llmod@divisor 0022                  __CFG_OSC$INTIO67 000000  
                 ___llmod@counter 0026                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
                 _Activate_Buzzer 16D2                          ??___wmul 0015  
                        ??_chkisr 0003                       __pdataBANK0 0080  
                     __pdataBANK1 0100                   setAddrWindow@x0 0017  
                 setAddrWindow@x1 0015                   setAddrWindow@y0 0014  
                 setAddrWindow@y1 0016                          ??_printf 0031  
                        ??_strcpy 0015                          ??_strlen 0013  
                     __pbssCOMRAM 005D                   ??_setAddrWindow 0017  
                   __pcstackBANK0 00DE                       ??_LCD_Reset 001D  
                    _isdigit$1664 0012          __end_of_fillCircleHelper 0B98  
               __size_of_delay_ms 0052                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 0011  
               __size_of_drawtext 010A                         _bit_count 006C  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 1602  
                   __pmediumconst FD8E                          ?___lldiv 0011  
                        ?___llmod 001E                         __tft_type 006B  
              drawFastVLine@color 001A                       ?_write_data 0001  
                       _drawPixel 15A8                 __size_of_spiwrite 0014  
               ?_force_nec_state0 0001                          ?_isdigit 0001  
               _Initialize_Screen 0F80                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _init_UART 1698  
              ??_force_nec_state0 0001                         _hexpowers FF92  
              ?_Initialize_Screen 0001                    __size_of_putch 000E  
         __end_of_Activate_Buzzer 16E4                    ___wmul@product 0015  
             ??_Initialize_Screen 0043                          _INT0_isr 0912  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                         fillRect@h 0025  
                       fillRect@i 002C                         fillRect@w 0024  
                       fillRect@x 002B                         fillRect@y 0023  
                       drawChar@c 002F                         drawChar@i 0038  
                       drawChar@j 0037                      ??_fillCircle 0043  
                       drawChar@x 0036                         drawChar@y 002E  
                      ?_drawPixel 0018            __size_of_fillRectangle 00DC  
        __end_of_Wait_Half_Second 1682                 ___wmul@multiplier 0011  
       __end_of_Initialize_Screen 100E                      ??_fillScreen 0026  
                    ??_drawCircle 0024                        printf@flag 0040  
                      printf@prec 0036                         main@found 0046  
                      ?_init_UART 0001                       _INTCON2bits 000FF1  
                       copy_data0 114E                         copy_data1 116E  
                       copy_data2 118E                         drawtext@i 00E1  
          __size_of_drawFastVLine 0088                         drawtext@x 00DE  
                       drawtext@y 0039                          _Nec_code 005D  
               write_command@cmd_ 0013                       ??_OpenUSART 0013  
                        _Rcmd2red 1538               __size_of_write_data 0010  
                 OpenUSART@config 0013                      _Time_Elapsed 0061  
              __end_of_fillCircle 13D0                          __Hrparam 0000  
              __end_of_fillScreen 1668                          __Lrparam 0000  
              __end_of_drawCircle 07BC                  __size_of___lldiv 008C  
                __size_of___llmod 0070                  __size_of_isdigit 0022  
                        _delay_ms 13D0                          __ptext10 060E  
                        __ptext11 1668                          __ptext20 109A  
                        __ptext12 0F80                          __ptext21 15A8  
                        __ptext13 1576                          __ptext30 16C0  
                        __ptext22 1422                          __ptext14 164C  
                        __ptext31 13D0                          __ptext23 15D8  
                        __ptext15 0EA4                          __ptext32 1602  
                        __ptext24 0DB2                          __ptext16 0CA8  
                        __ptext33 171E                          __ptext25 1538  
                        __ptext17 14FA                          __ptext34 16D2  
                        __ptext26 0B98                          __ptext18 07BC  
                        __ptext27 16E4                          __ptext19 1470  
                        __ptext36 1712                          __ptext28 16F4  
                        __ptext37 0912                          __ptext29 16AC  
                        __ptext38 1726                          _fillRect 1470  
                        _drawChar 07BC  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 006D                          _drawtext 0CA8  
                      strcpy@from 0013                     _fillRectangle 0EA4  
                ?_Activate_Buzzer 0001                     __size_of_main 01B0  
                 fillRectangle@hi 0021                   fillRectangle@lo 0022  
                   _drawFastVLine 109A                         printf@idx 0035  
                        _spiwrite 16AC                         printf@val 003A  
                     ??_drawPixel 001B                          _rowstart 006F  
              fillCircleHelper@x0 0023                fillCircleHelper@y0 0025  
      __size_of_Initialize_Screen 008E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0011                       ??_init_UART 0014  
                        isdigit@c 0013                 ?_fillCircleHelper 0023  
                       spiwrite@x 0011                          intlevel2 0000  
                  ?_fillRectangle 0018                ??_fillCircleHelper 002F  
           __end_of_write_command 1704                  ___lldiv@dividend 0011  
                 fillScreen@color 0024                      fillCircle@x0 003B  
                    fillCircle@y0 003D                    fillRectangle@h 001A  
                  fillRectangle@w 0019                    fillRectangle@x 0023  
                  fillRectangle@y 0018                    ?_drawFastVLine 0018  
                        printf@ap 0038                 fillCircleHelper@f 0035  
               fillCircleHelper@r 0027                 fillCircleHelper@x 0037  
               fillCircleHelper@y 0039                      ??_write_data 0013  
                      _TIMER1_isr 1712                     fillRect@color 0026  
                ___lldiv@quotient 0019                          strcpy@cp 0015  
                        strlen@cp 0015                          strcpy@to 0011  
                     fillCircle@r 003F             __end_of_setAddrWindow 1470  
              fillRectangle@color 001B                     drawChar@color 0030  
              __end_of_write_data 16F4         __size_of_force_nec_state0 0008  
                    drawChar@line 0035                      drawChar@size 0034  
